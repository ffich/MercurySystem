

Microchip Technology PIC LITE Macro Assembler V1.45 build -152302408 
                                                                                               Sat Mar 28 15:23:48 2020

Microchip Technology Omniscient Code Generator v1.45 (Free mode) build 201711160504
     1                           	processor	16F1829
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	idataCOMMON,global,class=CODE,delta=2
     5                           	psect	idataBANK1,global,class=CODE,delta=2
     6                           	psect	idataBANK2,global,class=CODE,delta=2
     7                           	psect	stringtext1,global,class=STRCODE,delta=2
     8                           	psect	stringtext2,global,class=STRCODE,delta=2
     9                           	psect	stringtext3,global,class=STRCODE,delta=2
    10                           	psect	stringtext4,global,class=STRCODE,delta=2
    11                           	psect	stringtext5,global,class=STRCODE,delta=2
    12                           	psect	stringtext6,global,class=STRCODE,delta=2
    13                           	psect	stringtext7,global,class=STRCODE,delta=2
    14                           	psect	cinit,global,class=CODE,merge=1,delta=2
    15                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
    16                           	psect	dataCOMMON,global,class=COMMON,space=1,delta=1
    17                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    18                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1
    19                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1
    20                           	psect	dataBANK2,global,class=BANK2,space=1,delta=1
    21                           	psect	bssBANK3,global,class=BANK3,space=1,delta=1
    22                           	psect	bssBANK4,global,class=BANK4,space=1,delta=1
    23                           	psect	bssBANK5,global,class=BANK5,space=1,delta=1
    24                           	psect	bssBANK6,global,class=BANK6,space=1,delta=1
    25                           	psect	bssBANK7,global,class=BANK7,space=1,delta=1
    26                           	psect	inittext,global,class=CODE,delta=2
    27                           	psect	clrtext,global,class=CODE,delta=2
    28                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    29                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    30                           	psect	maintext,global,class=CODE,merge=1,split=1,delta=2
    31                           	psect	text1,local,class=CODE,merge=1,delta=2
    32                           	psect	text2,local,class=CODE,merge=1,delta=2
    33                           	psect	text3,local,class=CODE,merge=1,delta=2
    34                           	psect	text4,local,class=CODE,merge=1,delta=2
    35                           	psect	text5,local,class=CODE,merge=1,delta=2
    36                           	psect	text6,local,class=CODE,merge=1,delta=2
    37                           	psect	text7,local,class=CODE,merge=1,delta=2,group=2
    38                           	psect	text8,local,class=CODE,merge=1,delta=2,group=2
    39                           	psect	text9,local,class=CODE,merge=1,delta=2,group=2
    40                           	psect	text10,local,class=CODE,merge=1,delta=2
    41                           	psect	text11,local,class=CODE,merge=1,delta=2
    42                           	psect	text12,local,class=CODE,merge=1,delta=2
    43                           	psect	text13,local,class=CODE,merge=1,delta=2
    44                           	psect	text14,local,class=CODE,merge=1,delta=2
    45                           	psect	text15,local,class=CODE,merge=1,delta=2
    46                           	psect	text16,local,class=CODE,merge=1,delta=2
    47                           	psect	text17,local,class=CODE,merge=1,delta=2
    48                           	psect	text18,local,class=CODE,merge=1,delta=2
    49                           	psect	text19,local,class=CODE,merge=1,delta=2
    50                           	psect	swtext1,local,class=CONST,delta=2
    51                           	psect	text20,local,class=CODE,merge=1,delta=2
    52                           	psect	text21,local,class=CODE,merge=1,delta=2
    53                           	psect	text22,local,class=CODE,merge=1,delta=2
    54                           	psect	text23,local,class=CODE,merge=1,delta=2
    55                           	psect	text24,local,class=CODE,merge=1,delta=2
    56                           	psect	text25,local,class=CODE,merge=1,delta=2
    57                           	psect	text26,local,class=CODE,merge=1,delta=2
    58                           	psect	text27,local,class=CODE,merge=1,delta=2
    59                           	psect	text28,local,class=CODE,merge=1,delta=2
    60                           	psect	text29,local,class=CODE,merge=1,delta=2
    61                           	psect	text30,local,class=CODE,merge=1,delta=2
    62                           	psect	text31,local,class=CODE,merge=1,delta=2
    63                           	psect	text32,local,class=CODE,merge=1,delta=2
    64                           	psect	text33,local,class=CODE,merge=1,delta=2
    65                           	psect	text34,local,class=CODE,merge=1,delta=2
    66                           	psect	text35,local,class=CODE,merge=1,delta=2
    67                           	psect	text36,local,class=CODE,merge=1,delta=2
    68                           	psect	text37,local,class=CODE,merge=1,delta=2
    69                           	psect	text38,local,class=CODE,merge=1,delta=2,group=2
    70                           	psect	text39,local,class=CODE,merge=1,delta=2,group=2
    71                           	psect	text40,local,class=CODE,merge=1,delta=2
    72                           	psect	text41,local,class=CODE,merge=1,delta=2
    73                           	psect	text42,local,class=CODE,merge=1,delta=2
    74                           	psect	text43,local,class=CODE,merge=1,delta=2
    75                           	psect	text44,local,class=CODE,merge=1,delta=2
    76                           	psect	text45,local,class=CODE,merge=1,delta=2
    77                           	psect	text46,local,class=CODE,merge=1,delta=2
    78                           	psect	text47,local,class=CODE,merge=1,delta=2
    79                           	psect	text48,local,class=CODE,merge=1,delta=2
    80                           	psect	text49,local,class=CODE,merge=1,delta=2
    81                           	psect	text50,local,class=CODE,merge=1,delta=2
    82                           	psect	text51,local,class=CODE,merge=1,delta=2
    83                           	psect	text52,local,class=CODE,merge=1,delta=2
    84                           	psect	text53,local,class=CODE,merge=1,delta=2
    85                           	psect	text54,local,class=CODE,merge=1,delta=2,group=2
    86                           	psect	text55,local,class=CODE,merge=1,delta=2,group=2
    87                           	psect	text56,local,class=CODE,merge=1,delta=2,group=2
    88                           	psect	text57,local,class=CODE,merge=1,delta=2
    89                           	psect	text58,local,class=CODE,merge=1,delta=2,group=2
    90                           	psect	text59,local,class=CODE,merge=1,delta=2,group=2
    91                           	psect	text60,local,class=CODE,merge=1,delta=2,group=2
    92                           	psect	text61,local,class=CODE,merge=1,delta=2
    93                           	psect	text62,local,class=CODE,merge=1,delta=2
    94                           	psect	text63,local,class=CODE,merge=1,delta=2
    95                           	psect	text64,local,class=CODE,merge=1,delta=2
    96                           	psect	text65,local,class=CODE,merge=1,delta=2
    97                           	psect	text66,local,class=CODE,merge=1,delta=2
    98                           	psect	text67,local,class=CODE,merge=1,delta=2
    99                           	psect	text68,local,class=CODE,merge=1,delta=2
   100                           	psect	text69,local,class=CODE,merge=1,delta=2
   101                           	psect	text70,local,class=CODE,merge=1,delta=2
   102                           	psect	text71,local,class=CODE,merge=1,delta=2
   103                           	psect	text72,local,class=CODE,merge=1,delta=2
   104                           	psect	text73,local,class=CODE,merge=1,delta=2
   105                           	psect	text74,local,class=CODE,merge=1,delta=2
   106                           	psect	text75,local,class=CODE,merge=1,delta=2
   107                           	psect	text76,local,class=CODE,merge=1,delta=2
   108                           	psect	text77,local,class=CODE,merge=1,delta=2
   109                           	psect	text78,local,class=CODE,merge=1,delta=2
   110                           	psect	text79,local,class=CODE,merge=1,delta=2
   111                           	psect	text80,local,class=CODE,merge=1,delta=2
   112                           	psect	intentry,global,class=CODE,delta=2
   113                           	psect	text82,local,class=CODE,merge=1,delta=2
   114                           	dabs	1,0x620,48
   115                           	dabs	1,0x5CD,35
   116                           	dabs	1,0x239D,0,_I2cPacket
   117                           	dabs	1,0x7E,2
   118  0000                     
   119                           ; Version 1.45
   120                           ; Generated 16/11/2017 GMT
   121                           ; 
   122                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
   123                           ; All rights reserved.
   124                           ; 
   125                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
   126                           ; 
   127                           ; Redistribution and use in source and binary forms, with or without modification, are
   128                           ; permitted provided that the following conditions are met:
   129                           ; 
   130                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
   131                           ;        conditions and the following disclaimer.
   132                           ; 
   133                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
   134                           ;        of conditions and the following disclaimer in the documentation and/or other
   135                           ;        materials provided with the distribution.
   136                           ; 
   137                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
   138                           ;        software without specific prior written permission.
   139                           ; 
   140                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
   141                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
   142                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
   143                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
   144                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
   145                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
   146                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   147                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   148                           ; 
   149                           ; 
   150                           ; Code-generator required, PIC16F1829 Definitions
   151                           ; 
   152                           ; SFR Addresses
   153  0000                     	;# 
   154  0001                     	;# 
   155  0002                     	;# 
   156  0003                     	;# 
   157  0004                     	;# 
   158  0005                     	;# 
   159  0006                     	;# 
   160  0007                     	;# 
   161  0008                     	;# 
   162  0009                     	;# 
   163  000A                     	;# 
   164  000B                     	;# 
   165  000C                     	;# 
   166  000D                     	;# 
   167  000E                     	;# 
   168  0011                     	;# 
   169  0012                     	;# 
   170  0013                     	;# 
   171  0014                     	;# 
   172  0015                     	;# 
   173  0016                     	;# 
   174  0016                     	;# 
   175  0017                     	;# 
   176  0018                     	;# 
   177  0019                     	;# 
   178  001A                     	;# 
   179  001B                     	;# 
   180  001C                     	;# 
   181  001E                     	;# 
   182  001F                     	;# 
   183  008C                     	;# 
   184  008D                     	;# 
   185  008E                     	;# 
   186  0091                     	;# 
   187  0092                     	;# 
   188  0093                     	;# 
   189  0094                     	;# 
   190  0095                     	;# 
   191  0096                     	;# 
   192  0097                     	;# 
   193  0098                     	;# 
   194  0099                     	;# 
   195  009A                     	;# 
   196  009B                     	;# 
   197  009B                     	;# 
   198  009C                     	;# 
   199  009D                     	;# 
   200  009E                     	;# 
   201  010C                     	;# 
   202  010D                     	;# 
   203  010E                     	;# 
   204  0111                     	;# 
   205  0112                     	;# 
   206  0113                     	;# 
   207  0114                     	;# 
   208  0115                     	;# 
   209  0116                     	;# 
   210  0117                     	;# 
   211  0118                     	;# 
   212  0119                     	;# 
   213  011A                     	;# 
   214  011B                     	;# 
   215  011D                     	;# 
   216  011E                     	;# 
   217  018C                     	;# 
   218  018D                     	;# 
   219  018E                     	;# 
   220  0191                     	;# 
   221  0191                     	;# 
   222  0192                     	;# 
   223  0193                     	;# 
   224  0193                     	;# 
   225  0193                     	;# 
   226  0194                     	;# 
   227  0195                     	;# 
   228  0196                     	;# 
   229  0199                     	;# 
   230  019A                     	;# 
   231  019B                     	;# 
   232  019B                     	;# 
   233  019C                     	;# 
   234  019D                     	;# 
   235  019E                     	;# 
   236  019F                     	;# 
   237  020C                     	;# 
   238  020D                     	;# 
   239  020E                     	;# 
   240  0211                     	;# 
   241  0211                     	;# 
   242  0212                     	;# 
   243  0212                     	;# 
   244  0213                     	;# 
   245  0213                     	;# 
   246  0214                     	;# 
   247  0214                     	;# 
   248  0215                     	;# 
   249  0215                     	;# 
   250  0215                     	;# 
   251  0216                     	;# 
   252  0216                     	;# 
   253  0217                     	;# 
   254  0217                     	;# 
   255  0219                     	;# 
   256  021A                     	;# 
   257  021B                     	;# 
   258  021C                     	;# 
   259  021D                     	;# 
   260  021E                     	;# 
   261  021F                     	;# 
   262  0291                     	;# 
   263  0291                     	;# 
   264  0292                     	;# 
   265  0293                     	;# 
   266  0294                     	;# 
   267  0295                     	;# 
   268  0295                     	;# 
   269  0296                     	;# 
   270  0298                     	;# 
   271  0298                     	;# 
   272  0299                     	;# 
   273  029A                     	;# 
   274  029B                     	;# 
   275  029C                     	;# 
   276  029D                     	;# 
   277  029E                     	;# 
   278  0311                     	;# 
   279  0311                     	;# 
   280  0312                     	;# 
   281  0313                     	;# 
   282  0318                     	;# 
   283  0318                     	;# 
   284  0319                     	;# 
   285  031A                     	;# 
   286  038C                     	;# 
   287  038D                     	;# 
   288  038E                     	;# 
   289  0391                     	;# 
   290  0392                     	;# 
   291  0393                     	;# 
   292  0394                     	;# 
   293  0395                     	;# 
   294  0396                     	;# 
   295  039A                     	;# 
   296  039C                     	;# 
   297  039D                     	;# 
   298  039E                     	;# 
   299  039F                     	;# 
   300  0415                     	;# 
   301  0416                     	;# 
   302  0417                     	;# 
   303  041C                     	;# 
   304  041D                     	;# 
   305  041E                     	;# 
   306  0FE4                     	;# 
   307  0FE5                     	;# 
   308  0FE6                     	;# 
   309  0FE7                     	;# 
   310  0FE8                     	;# 
   311  0FE9                     	;# 
   312  0FEA                     	;# 
   313  0FEB                     	;# 
   314  0FED                     	;# 
   315  0FEE                     	;# 
   316  0FEF                     	;# 
   317  0000                     	;# 
   318  0001                     	;# 
   319  0002                     	;# 
   320  0003                     	;# 
   321  0004                     	;# 
   322  0005                     	;# 
   323  0006                     	;# 
   324  0007                     	;# 
   325  0008                     	;# 
   326  0009                     	;# 
   327  000A                     	;# 
   328  000B                     	;# 
   329  000C                     	;# 
   330  000D                     	;# 
   331  000E                     	;# 
   332  0011                     	;# 
   333  0012                     	;# 
   334  0013                     	;# 
   335  0014                     	;# 
   336  0015                     	;# 
   337  0016                     	;# 
   338  0016                     	;# 
   339  0017                     	;# 
   340  0018                     	;# 
   341  0019                     	;# 
   342  001A                     	;# 
   343  001B                     	;# 
   344  001C                     	;# 
   345  001E                     	;# 
   346  001F                     	;# 
   347  008C                     	;# 
   348  008D                     	;# 
   349  008E                     	;# 
   350  0091                     	;# 
   351  0092                     	;# 
   352  0093                     	;# 
   353  0094                     	;# 
   354  0095                     	;# 
   355  0096                     	;# 
   356  0097                     	;# 
   357  0098                     	;# 
   358  0099                     	;# 
   359  009A                     	;# 
   360  009B                     	;# 
   361  009B                     	;# 
   362  009C                     	;# 
   363  009D                     	;# 
   364  009E                     	;# 
   365  010C                     	;# 
   366  010D                     	;# 
   367  010E                     	;# 
   368  0111                     	;# 
   369  0112                     	;# 
   370  0113                     	;# 
   371  0114                     	;# 
   372  0115                     	;# 
   373  0116                     	;# 
   374  0117                     	;# 
   375  0118                     	;# 
   376  0119                     	;# 
   377  011A                     	;# 
   378  011B                     	;# 
   379  011D                     	;# 
   380  011E                     	;# 
   381  018C                     	;# 
   382  018D                     	;# 
   383  018E                     	;# 
   384  0191                     	;# 
   385  0191                     	;# 
   386  0192                     	;# 
   387  0193                     	;# 
   388  0193                     	;# 
   389  0193                     	;# 
   390  0194                     	;# 
   391  0195                     	;# 
   392  0196                     	;# 
   393  0199                     	;# 
   394  019A                     	;# 
   395  019B                     	;# 
   396  019B                     	;# 
   397  019C                     	;# 
   398  019D                     	;# 
   399  019E                     	;# 
   400  019F                     	;# 
   401  020C                     	;# 
   402  020D                     	;# 
   403  020E                     	;# 
   404  0211                     	;# 
   405  0211                     	;# 
   406  0212                     	;# 
   407  0212                     	;# 
   408  0213                     	;# 
   409  0213                     	;# 
   410  0214                     	;# 
   411  0214                     	;# 
   412  0215                     	;# 
   413  0215                     	;# 
   414  0215                     	;# 
   415  0216                     	;# 
   416  0216                     	;# 
   417  0217                     	;# 
   418  0217                     	;# 
   419  0219                     	;# 
   420  021A                     	;# 
   421  021B                     	;# 
   422  021C                     	;# 
   423  021D                     	;# 
   424  021E                     	;# 
   425  021F                     	;# 
   426  0291                     	;# 
   427  0291                     	;# 
   428  0292                     	;# 
   429  0293                     	;# 
   430  0294                     	;# 
   431  0295                     	;# 
   432  0295                     	;# 
   433  0296                     	;# 
   434  0298                     	;# 
   435  0298                     	;# 
   436  0299                     	;# 
   437  029A                     	;# 
   438  029B                     	;# 
   439  029C                     	;# 
   440  029D                     	;# 
   441  029E                     	;# 
   442  0311                     	;# 
   443  0311                     	;# 
   444  0312                     	;# 
   445  0313                     	;# 
   446  0318                     	;# 
   447  0318                     	;# 
   448  0319                     	;# 
   449  031A                     	;# 
   450  038C                     	;# 
   451  038D                     	;# 
   452  038E                     	;# 
   453  0391                     	;# 
   454  0392                     	;# 
   455  0393                     	;# 
   456  0394                     	;# 
   457  0395                     	;# 
   458  0396                     	;# 
   459  039A                     	;# 
   460  039C                     	;# 
   461  039D                     	;# 
   462  039E                     	;# 
   463  039F                     	;# 
   464  0415                     	;# 
   465  0416                     	;# 
   466  0417                     	;# 
   467  041C                     	;# 
   468  041D                     	;# 
   469  041E                     	;# 
   470  0FE4                     	;# 
   471  0FE5                     	;# 
   472  0FE6                     	;# 
   473  0FE7                     	;# 
   474  0FE8                     	;# 
   475  0FE9                     	;# 
   476  0FEA                     	;# 
   477  0FEB                     	;# 
   478  0FED                     	;# 
   479  0FEE                     	;# 
   480  0FEF                     	;# 
   481  0000                     	;# 
   482  0001                     	;# 
   483  0002                     	;# 
   484  0003                     	;# 
   485  0004                     	;# 
   486  0005                     	;# 
   487  0006                     	;# 
   488  0007                     	;# 
   489  0008                     	;# 
   490  0009                     	;# 
   491  000A                     	;# 
   492  000B                     	;# 
   493  000C                     	;# 
   494  000D                     	;# 
   495  000E                     	;# 
   496  0011                     	;# 
   497  0012                     	;# 
   498  0013                     	;# 
   499  0014                     	;# 
   500  0015                     	;# 
   501  0016                     	;# 
   502  0016                     	;# 
   503  0017                     	;# 
   504  0018                     	;# 
   505  0019                     	;# 
   506  001A                     	;# 
   507  001B                     	;# 
   508  001C                     	;# 
   509  001E                     	;# 
   510  001F                     	;# 
   511  008C                     	;# 
   512  008D                     	;# 
   513  008E                     	;# 
   514  0091                     	;# 
   515  0092                     	;# 
   516  0093                     	;# 
   517  0094                     	;# 
   518  0095                     	;# 
   519  0096                     	;# 
   520  0097                     	;# 
   521  0098                     	;# 
   522  0099                     	;# 
   523  009A                     	;# 
   524  009B                     	;# 
   525  009B                     	;# 
   526  009C                     	;# 
   527  009D                     	;# 
   528  009E                     	;# 
   529  010C                     	;# 
   530  010D                     	;# 
   531  010E                     	;# 
   532  0111                     	;# 
   533  0112                     	;# 
   534  0113                     	;# 
   535  0114                     	;# 
   536  0115                     	;# 
   537  0116                     	;# 
   538  0117                     	;# 
   539  0118                     	;# 
   540  0119                     	;# 
   541  011A                     	;# 
   542  011B                     	;# 
   543  011D                     	;# 
   544  011E                     	;# 
   545  018C                     	;# 
   546  018D                     	;# 
   547  018E                     	;# 
   548  0191                     	;# 
   549  0191                     	;# 
   550  0192                     	;# 
   551  0193                     	;# 
   552  0193                     	;# 
   553  0193                     	;# 
   554  0194                     	;# 
   555  0195                     	;# 
   556  0196                     	;# 
   557  0199                     	;# 
   558  019A                     	;# 
   559  019B                     	;# 
   560  019B                     	;# 
   561  019C                     	;# 
   562  019D                     	;# 
   563  019E                     	;# 
   564  019F                     	;# 
   565  020C                     	;# 
   566  020D                     	;# 
   567  020E                     	;# 
   568  0211                     	;# 
   569  0211                     	;# 
   570  0212                     	;# 
   571  0212                     	;# 
   572  0213                     	;# 
   573  0213                     	;# 
   574  0214                     	;# 
   575  0214                     	;# 
   576  0215                     	;# 
   577  0215                     	;# 
   578  0215                     	;# 
   579  0216                     	;# 
   580  0216                     	;# 
   581  0217                     	;# 
   582  0217                     	;# 
   583  0219                     	;# 
   584  021A                     	;# 
   585  021B                     	;# 
   586  021C                     	;# 
   587  021D                     	;# 
   588  021E                     	;# 
   589  021F                     	;# 
   590  0291                     	;# 
   591  0291                     	;# 
   592  0292                     	;# 
   593  0293                     	;# 
   594  0294                     	;# 
   595  0295                     	;# 
   596  0295                     	;# 
   597  0296                     	;# 
   598  0298                     	;# 
   599  0298                     	;# 
   600  0299                     	;# 
   601  029A                     	;# 
   602  029B                     	;# 
   603  029C                     	;# 
   604  029D                     	;# 
   605  029E                     	;# 
   606  0311                     	;# 
   607  0311                     	;# 
   608  0312                     	;# 
   609  0313                     	;# 
   610  0318                     	;# 
   611  0318                     	;# 
   612  0319                     	;# 
   613  031A                     	;# 
   614  038C                     	;# 
   615  038D                     	;# 
   616  038E                     	;# 
   617  0391                     	;# 
   618  0392                     	;# 
   619  0393                     	;# 
   620  0394                     	;# 
   621  0395                     	;# 
   622  0396                     	;# 
   623  039A                     	;# 
   624  039C                     	;# 
   625  039D                     	;# 
   626  039E                     	;# 
   627  039F                     	;# 
   628  0415                     	;# 
   629  0416                     	;# 
   630  0417                     	;# 
   631  041C                     	;# 
   632  041D                     	;# 
   633  041E                     	;# 
   634  0FE4                     	;# 
   635  0FE5                     	;# 
   636  0FE6                     	;# 
   637  0FE7                     	;# 
   638  0FE8                     	;# 
   639  0FE9                     	;# 
   640  0FEA                     	;# 
   641  0FEB                     	;# 
   642  0FED                     	;# 
   643  0FEE                     	;# 
   644  0FEF                     	;# 
   645  0000                     	;# 
   646  0001                     	;# 
   647  0002                     	;# 
   648  0003                     	;# 
   649  0004                     	;# 
   650  0005                     	;# 
   651  0006                     	;# 
   652  0007                     	;# 
   653  0008                     	;# 
   654  0009                     	;# 
   655  000A                     	;# 
   656  000B                     	;# 
   657  000C                     	;# 
   658  000D                     	;# 
   659  000E                     	;# 
   660  0011                     	;# 
   661  0012                     	;# 
   662  0013                     	;# 
   663  0014                     	;# 
   664  0015                     	;# 
   665  0016                     	;# 
   666  0016                     	;# 
   667  0017                     	;# 
   668  0018                     	;# 
   669  0019                     	;# 
   670  001A                     	;# 
   671  001B                     	;# 
   672  001C                     	;# 
   673  001E                     	;# 
   674  001F                     	;# 
   675  008C                     	;# 
   676  008D                     	;# 
   677  008E                     	;# 
   678  0091                     	;# 
   679  0092                     	;# 
   680  0093                     	;# 
   681  0094                     	;# 
   682  0095                     	;# 
   683  0096                     	;# 
   684  0097                     	;# 
   685  0098                     	;# 
   686  0099                     	;# 
   687  009A                     	;# 
   688  009B                     	;# 
   689  009B                     	;# 
   690  009C                     	;# 
   691  009D                     	;# 
   692  009E                     	;# 
   693  010C                     	;# 
   694  010D                     	;# 
   695  010E                     	;# 
   696  0111                     	;# 
   697  0112                     	;# 
   698  0113                     	;# 
   699  0114                     	;# 
   700  0115                     	;# 
   701  0116                     	;# 
   702  0117                     	;# 
   703  0118                     	;# 
   704  0119                     	;# 
   705  011A                     	;# 
   706  011B                     	;# 
   707  011D                     	;# 
   708  011E                     	;# 
   709  018C                     	;# 
   710  018D                     	;# 
   711  018E                     	;# 
   712  0191                     	;# 
   713  0191                     	;# 
   714  0192                     	;# 
   715  0193                     	;# 
   716  0193                     	;# 
   717  0193                     	;# 
   718  0194                     	;# 
   719  0195                     	;# 
   720  0196                     	;# 
   721  0199                     	;# 
   722  019A                     	;# 
   723  019B                     	;# 
   724  019B                     	;# 
   725  019C                     	;# 
   726  019D                     	;# 
   727  019E                     	;# 
   728  019F                     	;# 
   729  020C                     	;# 
   730  020D                     	;# 
   731  020E                     	;# 
   732  0211                     	;# 
   733  0211                     	;# 
   734  0212                     	;# 
   735  0212                     	;# 
   736  0213                     	;# 
   737  0213                     	;# 
   738  0214                     	;# 
   739  0214                     	;# 
   740  0215                     	;# 
   741  0215                     	;# 
   742  0215                     	;# 
   743  0216                     	;# 
   744  0216                     	;# 
   745  0217                     	;# 
   746  0217                     	;# 
   747  0219                     	;# 
   748  021A                     	;# 
   749  021B                     	;# 
   750  021C                     	;# 
   751  021D                     	;# 
   752  021E                     	;# 
   753  021F                     	;# 
   754  0291                     	;# 
   755  0291                     	;# 
   756  0292                     	;# 
   757  0293                     	;# 
   758  0294                     	;# 
   759  0295                     	;# 
   760  0295                     	;# 
   761  0296                     	;# 
   762  0298                     	;# 
   763  0298                     	;# 
   764  0299                     	;# 
   765  029A                     	;# 
   766  029B                     	;# 
   767  029C                     	;# 
   768  029D                     	;# 
   769  029E                     	;# 
   770  0311                     	;# 
   771  0311                     	;# 
   772  0312                     	;# 
   773  0313                     	;# 
   774  0318                     	;# 
   775  0318                     	;# 
   776  0319                     	;# 
   777  031A                     	;# 
   778  038C                     	;# 
   779  038D                     	;# 
   780  038E                     	;# 
   781  0391                     	;# 
   782  0392                     	;# 
   783  0393                     	;# 
   784  0394                     	;# 
   785  0395                     	;# 
   786  0396                     	;# 
   787  039A                     	;# 
   788  039C                     	;# 
   789  039D                     	;# 
   790  039E                     	;# 
   791  039F                     	;# 
   792  0415                     	;# 
   793  0416                     	;# 
   794  0417                     	;# 
   795  041C                     	;# 
   796  041D                     	;# 
   797  041E                     	;# 
   798  0FE4                     	;# 
   799  0FE5                     	;# 
   800  0FE6                     	;# 
   801  0FE7                     	;# 
   802  0FE8                     	;# 
   803  0FE9                     	;# 
   804  0FEA                     	;# 
   805  0FEB                     	;# 
   806  0FED                     	;# 
   807  0FEE                     	;# 
   808  0FEF                     	;# 
   809  0000                     	;# 
   810  0001                     	;# 
   811  0002                     	;# 
   812  0003                     	;# 
   813  0004                     	;# 
   814  0005                     	;# 
   815  0006                     	;# 
   816  0007                     	;# 
   817  0008                     	;# 
   818  0009                     	;# 
   819  000A                     	;# 
   820  000B                     	;# 
   821  000C                     	;# 
   822  000D                     	;# 
   823  000E                     	;# 
   824  0011                     	;# 
   825  0012                     	;# 
   826  0013                     	;# 
   827  0014                     	;# 
   828  0015                     	;# 
   829  0016                     	;# 
   830  0016                     	;# 
   831  0017                     	;# 
   832  0018                     	;# 
   833  0019                     	;# 
   834  001A                     	;# 
   835  001B                     	;# 
   836  001C                     	;# 
   837  001E                     	;# 
   838  001F                     	;# 
   839  008C                     	;# 
   840  008D                     	;# 
   841  008E                     	;# 
   842  0091                     	;# 
   843  0092                     	;# 
   844  0093                     	;# 
   845  0094                     	;# 
   846  0095                     	;# 
   847  0096                     	;# 
   848  0097                     	;# 
   849  0098                     	;# 
   850  0099                     	;# 
   851  009A                     	;# 
   852  009B                     	;# 
   853  009B                     	;# 
   854  009C                     	;# 
   855  009D                     	;# 
   856  009E                     	;# 
   857  010C                     	;# 
   858  010D                     	;# 
   859  010E                     	;# 
   860  0111                     	;# 
   861  0112                     	;# 
   862  0113                     	;# 
   863  0114                     	;# 
   864  0115                     	;# 
   865  0116                     	;# 
   866  0117                     	;# 
   867  0118                     	;# 
   868  0119                     	;# 
   869  011A                     	;# 
   870  011B                     	;# 
   871  011D                     	;# 
   872  011E                     	;# 
   873  018C                     	;# 
   874  018D                     	;# 
   875  018E                     	;# 
   876  0191                     	;# 
   877  0191                     	;# 
   878  0192                     	;# 
   879  0193                     	;# 
   880  0193                     	;# 
   881  0193                     	;# 
   882  0194                     	;# 
   883  0195                     	;# 
   884  0196                     	;# 
   885  0199                     	;# 
   886  019A                     	;# 
   887  019B                     	;# 
   888  019B                     	;# 
   889  019C                     	;# 
   890  019D                     	;# 
   891  019E                     	;# 
   892  019F                     	;# 
   893  020C                     	;# 
   894  020D                     	;# 
   895  020E                     	;# 
   896  0211                     	;# 
   897  0211                     	;# 
   898  0212                     	;# 
   899  0212                     	;# 
   900  0213                     	;# 
   901  0213                     	;# 
   902  0214                     	;# 
   903  0214                     	;# 
   904  0215                     	;# 
   905  0215                     	;# 
   906  0215                     	;# 
   907  0216                     	;# 
   908  0216                     	;# 
   909  0217                     	;# 
   910  0217                     	;# 
   911  0219                     	;# 
   912  021A                     	;# 
   913  021B                     	;# 
   914  021C                     	;# 
   915  021D                     	;# 
   916  021E                     	;# 
   917  021F                     	;# 
   918  0291                     	;# 
   919  0291                     	;# 
   920  0292                     	;# 
   921  0293                     	;# 
   922  0294                     	;# 
   923  0295                     	;# 
   924  0295                     	;# 
   925  0296                     	;# 
   926  0298                     	;# 
   927  0298                     	;# 
   928  0299                     	;# 
   929  029A                     	;# 
   930  029B                     	;# 
   931  029C                     	;# 
   932  029D                     	;# 
   933  029E                     	;# 
   934  0311                     	;# 
   935  0311                     	;# 
   936  0312                     	;# 
   937  0313                     	;# 
   938  0318                     	;# 
   939  0318                     	;# 
   940  0319                     	;# 
   941  031A                     	;# 
   942  038C                     	;# 
   943  038D                     	;# 
   944  038E                     	;# 
   945  0391                     	;# 
   946  0392                     	;# 
   947  0393                     	;# 
   948  0394                     	;# 
   949  0395                     	;# 
   950  0396                     	;# 
   951  039A                     	;# 
   952  039C                     	;# 
   953  039D                     	;# 
   954  039E                     	;# 
   955  039F                     	;# 
   956  0415                     	;# 
   957  0416                     	;# 
   958  0417                     	;# 
   959  041C                     	;# 
   960  041D                     	;# 
   961  041E                     	;# 
   962  0FE4                     	;# 
   963  0FE5                     	;# 
   964  0FE6                     	;# 
   965  0FE7                     	;# 
   966  0FE8                     	;# 
   967  0FE9                     	;# 
   968  0FEA                     	;# 
   969  0FEB                     	;# 
   970  0FED                     	;# 
   971  0FEE                     	;# 
   972  0FEF                     	;# 
   973  0000                     	;# 
   974  0001                     	;# 
   975  0002                     	;# 
   976  0003                     	;# 
   977  0004                     	;# 
   978  0005                     	;# 
   979  0006                     	;# 
   980  0007                     	;# 
   981  0008                     	;# 
   982  0009                     	;# 
   983  000A                     	;# 
   984  000B                     	;# 
   985  000C                     	;# 
   986  000D                     	;# 
   987  000E                     	;# 
   988  0011                     	;# 
   989  0012                     	;# 
   990  0013                     	;# 
   991  0014                     	;# 
   992  0015                     	;# 
   993  0016                     	;# 
   994  0016                     	;# 
   995  0017                     	;# 
   996  0018                     	;# 
   997  0019                     	;# 
   998  001A                     	;# 
   999  001B                     	;# 
  1000  001C                     	;# 
  1001  001E                     	;# 
  1002  001F                     	;# 
  1003  008C                     	;# 
  1004  008D                     	;# 
  1005  008E                     	;# 
  1006  0091                     	;# 
  1007  0092                     	;# 
  1008  0093                     	;# 
  1009  0094                     	;# 
  1010  0095                     	;# 
  1011  0096                     	;# 
  1012  0097                     	;# 
  1013  0098                     	;# 
  1014  0099                     	;# 
  1015  009A                     	;# 
  1016  009B                     	;# 
  1017  009B                     	;# 
  1018  009C                     	;# 
  1019  009D                     	;# 
  1020  009E                     	;# 
  1021  010C                     	;# 
  1022  010D                     	;# 
  1023  010E                     	;# 
  1024  0111                     	;# 
  1025  0112                     	;# 
  1026  0113                     	;# 
  1027  0114                     	;# 
  1028  0115                     	;# 
  1029  0116                     	;# 
  1030  0117                     	;# 
  1031  0118                     	;# 
  1032  0119                     	;# 
  1033  011A                     	;# 
  1034  011B                     	;# 
  1035  011D                     	;# 
  1036  011E                     	;# 
  1037  018C                     	;# 
  1038  018D                     	;# 
  1039  018E                     	;# 
  1040  0191                     	;# 
  1041  0191                     	;# 
  1042  0192                     	;# 
  1043  0193                     	;# 
  1044  0193                     	;# 
  1045  0193                     	;# 
  1046  0194                     	;# 
  1047  0195                     	;# 
  1048  0196                     	;# 
  1049  0199                     	;# 
  1050  019A                     	;# 
  1051  019B                     	;# 
  1052  019B                     	;# 
  1053  019C                     	;# 
  1054  019D                     	;# 
  1055  019E                     	;# 
  1056  019F                     	;# 
  1057  020C                     	;# 
  1058  020D                     	;# 
  1059  020E                     	;# 
  1060  0211                     	;# 
  1061  0211                     	;# 
  1062  0212                     	;# 
  1063  0212                     	;# 
  1064  0213                     	;# 
  1065  0213                     	;# 
  1066  0214                     	;# 
  1067  0214                     	;# 
  1068  0215                     	;# 
  1069  0215                     	;# 
  1070  0215                     	;# 
  1071  0216                     	;# 
  1072  0216                     	;# 
  1073  0217                     	;# 
  1074  0217                     	;# 
  1075  0219                     	;# 
  1076  021A                     	;# 
  1077  021B                     	;# 
  1078  021C                     	;# 
  1079  021D                     	;# 
  1080  021E                     	;# 
  1081  021F                     	;# 
  1082  0291                     	;# 
  1083  0291                     	;# 
  1084  0292                     	;# 
  1085  0293                     	;# 
  1086  0294                     	;# 
  1087  0295                     	;# 
  1088  0295                     	;# 
  1089  0296                     	;# 
  1090  0298                     	;# 
  1091  0298                     	;# 
  1092  0299                     	;# 
  1093  029A                     	;# 
  1094  029B                     	;# 
  1095  029C                     	;# 
  1096  029D                     	;# 
  1097  029E                     	;# 
  1098  0311                     	;# 
  1099  0311                     	;# 
  1100  0312                     	;# 
  1101  0313                     	;# 
  1102  0318                     	;# 
  1103  0318                     	;# 
  1104  0319                     	;# 
  1105  031A                     	;# 
  1106  038C                     	;# 
  1107  038D                     	;# 
  1108  038E                     	;# 
  1109  0391                     	;# 
  1110  0392                     	;# 
  1111  0393                     	;# 
  1112  0394                     	;# 
  1113  0395                     	;# 
  1114  0396                     	;# 
  1115  039A                     	;# 
  1116  039C                     	;# 
  1117  039D                     	;# 
  1118  039E                     	;# 
  1119  039F                     	;# 
  1120  0415                     	;# 
  1121  0416                     	;# 
  1122  0417                     	;# 
  1123  041C                     	;# 
  1124  041D                     	;# 
  1125  041E                     	;# 
  1126  0FE4                     	;# 
  1127  0FE5                     	;# 
  1128  0FE6                     	;# 
  1129  0FE7                     	;# 
  1130  0FE8                     	;# 
  1131  0FE9                     	;# 
  1132  0FEA                     	;# 
  1133  0FEB                     	;# 
  1134  0FED                     	;# 
  1135  0FEE                     	;# 
  1136  0FEF                     	;# 
  1137  0000                     	;# 
  1138  0001                     	;# 
  1139  0002                     	;# 
  1140  0003                     	;# 
  1141  0004                     	;# 
  1142  0005                     	;# 
  1143  0006                     	;# 
  1144  0007                     	;# 
  1145  0008                     	;# 
  1146  0009                     	;# 
  1147  000A                     	;# 
  1148  000B                     	;# 
  1149  000C                     	;# 
  1150  000D                     	;# 
  1151  000E                     	;# 
  1152  0011                     	;# 
  1153  0012                     	;# 
  1154  0013                     	;# 
  1155  0014                     	;# 
  1156  0015                     	;# 
  1157  0016                     	;# 
  1158  0016                     	;# 
  1159  0017                     	;# 
  1160  0018                     	;# 
  1161  0019                     	;# 
  1162  001A                     	;# 
  1163  001B                     	;# 
  1164  001C                     	;# 
  1165  001E                     	;# 
  1166  001F                     	;# 
  1167  008C                     	;# 
  1168  008D                     	;# 
  1169  008E                     	;# 
  1170  0091                     	;# 
  1171  0092                     	;# 
  1172  0093                     	;# 
  1173  0094                     	;# 
  1174  0095                     	;# 
  1175  0096                     	;# 
  1176  0097                     	;# 
  1177  0098                     	;# 
  1178  0099                     	;# 
  1179  009A                     	;# 
  1180  009B                     	;# 
  1181  009B                     	;# 
  1182  009C                     	;# 
  1183  009D                     	;# 
  1184  009E                     	;# 
  1185  010C                     	;# 
  1186  010D                     	;# 
  1187  010E                     	;# 
  1188  0111                     	;# 
  1189  0112                     	;# 
  1190  0113                     	;# 
  1191  0114                     	;# 
  1192  0115                     	;# 
  1193  0116                     	;# 
  1194  0117                     	;# 
  1195  0118                     	;# 
  1196  0119                     	;# 
  1197  011A                     	;# 
  1198  011B                     	;# 
  1199  011D                     	;# 
  1200  011E                     	;# 
  1201  018C                     	;# 
  1202  018D                     	;# 
  1203  018E                     	;# 
  1204  0191                     	;# 
  1205  0191                     	;# 
  1206  0192                     	;# 
  1207  0193                     	;# 
  1208  0193                     	;# 
  1209  0193                     	;# 
  1210  0194                     	;# 
  1211  0195                     	;# 
  1212  0196                     	;# 
  1213  0199                     	;# 
  1214  019A                     	;# 
  1215  019B                     	;# 
  1216  019B                     	;# 
  1217  019C                     	;# 
  1218  019D                     	;# 
  1219  019E                     	;# 
  1220  019F                     	;# 
  1221  020C                     	;# 
  1222  020D                     	;# 
  1223  020E                     	;# 
  1224  0211                     	;# 
  1225  0211                     	;# 
  1226  0212                     	;# 
  1227  0212                     	;# 
  1228  0213                     	;# 
  1229  0213                     	;# 
  1230  0214                     	;# 
  1231  0214                     	;# 
  1232  0215                     	;# 
  1233  0215                     	;# 
  1234  0215                     	;# 
  1235  0216                     	;# 
  1236  0216                     	;# 
  1237  0217                     	;# 
  1238  0217                     	;# 
  1239  0219                     	;# 
  1240  021A                     	;# 
  1241  021B                     	;# 
  1242  021C                     	;# 
  1243  021D                     	;# 
  1244  021E                     	;# 
  1245  021F                     	;# 
  1246  0291                     	;# 
  1247  0291                     	;# 
  1248  0292                     	;# 
  1249  0293                     	;# 
  1250  0294                     	;# 
  1251  0295                     	;# 
  1252  0295                     	;# 
  1253  0296                     	;# 
  1254  0298                     	;# 
  1255  0298                     	;# 
  1256  0299                     	;# 
  1257  029A                     	;# 
  1258  029B                     	;# 
  1259  029C                     	;# 
  1260  029D                     	;# 
  1261  029E                     	;# 
  1262  0311                     	;# 
  1263  0311                     	;# 
  1264  0312                     	;# 
  1265  0313                     	;# 
  1266  0318                     	;# 
  1267  0318                     	;# 
  1268  0319                     	;# 
  1269  031A                     	;# 
  1270  038C                     	;# 
  1271  038D                     	;# 
  1272  038E                     	;# 
  1273  0391                     	;# 
  1274  0392                     	;# 
  1275  0393                     	;# 
  1276  0394                     	;# 
  1277  0395                     	;# 
  1278  0396                     	;# 
  1279  039A                     	;# 
  1280  039C                     	;# 
  1281  039D                     	;# 
  1282  039E                     	;# 
  1283  039F                     	;# 
  1284  0415                     	;# 
  1285  0416                     	;# 
  1286  0417                     	;# 
  1287  041C                     	;# 
  1288  041D                     	;# 
  1289  041E                     	;# 
  1290  0FE4                     	;# 
  1291  0FE5                     	;# 
  1292  0FE6                     	;# 
  1293  0FE7                     	;# 
  1294  0FE8                     	;# 
  1295  0FE9                     	;# 
  1296  0FEA                     	;# 
  1297  0FEB                     	;# 
  1298  0FED                     	;# 
  1299  0FEE                     	;# 
  1300  0FEF                     	;# 
  1301  0000                     	;# 
  1302  0001                     	;# 
  1303  0002                     	;# 
  1304  0003                     	;# 
  1305  0004                     	;# 
  1306  0005                     	;# 
  1307  0006                     	;# 
  1308  0007                     	;# 
  1309  0008                     	;# 
  1310  0009                     	;# 
  1311  000A                     	;# 
  1312  000B                     	;# 
  1313  000C                     	;# 
  1314  000D                     	;# 
  1315  000E                     	;# 
  1316  0011                     	;# 
  1317  0012                     	;# 
  1318  0013                     	;# 
  1319  0014                     	;# 
  1320  0015                     	;# 
  1321  0016                     	;# 
  1322  0016                     	;# 
  1323  0017                     	;# 
  1324  0018                     	;# 
  1325  0019                     	;# 
  1326  001A                     	;# 
  1327  001B                     	;# 
  1328  001C                     	;# 
  1329  001E                     	;# 
  1330  001F                     	;# 
  1331  008C                     	;# 
  1332  008D                     	;# 
  1333  008E                     	;# 
  1334  0091                     	;# 
  1335  0092                     	;# 
  1336  0093                     	;# 
  1337  0094                     	;# 
  1338  0095                     	;# 
  1339  0096                     	;# 
  1340  0097                     	;# 
  1341  0098                     	;# 
  1342  0099                     	;# 
  1343  009A                     	;# 
  1344  009B                     	;# 
  1345  009B                     	;# 
  1346  009C                     	;# 
  1347  009D                     	;# 
  1348  009E                     	;# 
  1349  010C                     	;# 
  1350  010D                     	;# 
  1351  010E                     	;# 
  1352  0111                     	;# 
  1353  0112                     	;# 
  1354  0113                     	;# 
  1355  0114                     	;# 
  1356  0115                     	;# 
  1357  0116                     	;# 
  1358  0117                     	;# 
  1359  0118                     	;# 
  1360  0119                     	;# 
  1361  011A                     	;# 
  1362  011B                     	;# 
  1363  011D                     	;# 
  1364  011E                     	;# 
  1365  018C                     	;# 
  1366  018D                     	;# 
  1367  018E                     	;# 
  1368  0191                     	;# 
  1369  0191                     	;# 
  1370  0192                     	;# 
  1371  0193                     	;# 
  1372  0193                     	;# 
  1373  0193                     	;# 
  1374  0194                     	;# 
  1375  0195                     	;# 
  1376  0196                     	;# 
  1377  0199                     	;# 
  1378  019A                     	;# 
  1379  019B                     	;# 
  1380  019B                     	;# 
  1381  019C                     	;# 
  1382  019D                     	;# 
  1383  019E                     	;# 
  1384  019F                     	;# 
  1385  020C                     	;# 
  1386  020D                     	;# 
  1387  020E                     	;# 
  1388  0211                     	;# 
  1389  0211                     	;# 
  1390  0212                     	;# 
  1391  0212                     	;# 
  1392  0213                     	;# 
  1393  0213                     	;# 
  1394  0214                     	;# 
  1395  0214                     	;# 
  1396  0215                     	;# 
  1397  0215                     	;# 
  1398  0215                     	;# 
  1399  0216                     	;# 
  1400  0216                     	;# 
  1401  0217                     	;# 
  1402  0217                     	;# 
  1403  0219                     	;# 
  1404  021A                     	;# 
  1405  021B                     	;# 
  1406  021C                     	;# 
  1407  021D                     	;# 
  1408  021E                     	;# 
  1409  021F                     	;# 
  1410  0291                     	;# 
  1411  0291                     	;# 
  1412  0292                     	;# 
  1413  0293                     	;# 
  1414  0294                     	;# 
  1415  0295                     	;# 
  1416  0295                     	;# 
  1417  0296                     	;# 
  1418  0298                     	;# 
  1419  0298                     	;# 
  1420  0299                     	;# 
  1421  029A                     	;# 
  1422  029B                     	;# 
  1423  029C                     	;# 
  1424  029D                     	;# 
  1425  029E                     	;# 
  1426  0311                     	;# 
  1427  0311                     	;# 
  1428  0312                     	;# 
  1429  0313                     	;# 
  1430  0318                     	;# 
  1431  0318                     	;# 
  1432  0319                     	;# 
  1433  031A                     	;# 
  1434  038C                     	;# 
  1435  038D                     	;# 
  1436  038E                     	;# 
  1437  0391                     	;# 
  1438  0392                     	;# 
  1439  0393                     	;# 
  1440  0394                     	;# 
  1441  0395                     	;# 
  1442  0396                     	;# 
  1443  039A                     	;# 
  1444  039C                     	;# 
  1445  039D                     	;# 
  1446  039E                     	;# 
  1447  039F                     	;# 
  1448  0415                     	;# 
  1449  0416                     	;# 
  1450  0417                     	;# 
  1451  041C                     	;# 
  1452  041D                     	;# 
  1453  041E                     	;# 
  1454  0FE4                     	;# 
  1455  0FE5                     	;# 
  1456  0FE6                     	;# 
  1457  0FE7                     	;# 
  1458  0FE8                     	;# 
  1459  0FE9                     	;# 
  1460  0FEA                     	;# 
  1461  0FEB                     	;# 
  1462  0FED                     	;# 
  1463  0FEE                     	;# 
  1464  0FEF                     	;# 
  1465  0000                     	;# 
  1466  0001                     	;# 
  1467  0002                     	;# 
  1468  0003                     	;# 
  1469  0004                     	;# 
  1470  0005                     	;# 
  1471  0006                     	;# 
  1472  0007                     	;# 
  1473  0008                     	;# 
  1474  0009                     	;# 
  1475  000A                     	;# 
  1476  000B                     	;# 
  1477  000C                     	;# 
  1478  000D                     	;# 
  1479  000E                     	;# 
  1480  0011                     	;# 
  1481  0012                     	;# 
  1482  0013                     	;# 
  1483  0014                     	;# 
  1484  0015                     	;# 
  1485  0016                     	;# 
  1486  0016                     	;# 
  1487  0017                     	;# 
  1488  0018                     	;# 
  1489  0019                     	;# 
  1490  001A                     	;# 
  1491  001B                     	;# 
  1492  001C                     	;# 
  1493  001E                     	;# 
  1494  001F                     	;# 
  1495  008C                     	;# 
  1496  008D                     	;# 
  1497  008E                     	;# 
  1498  0091                     	;# 
  1499  0092                     	;# 
  1500  0093                     	;# 
  1501  0094                     	;# 
  1502  0095                     	;# 
  1503  0096                     	;# 
  1504  0097                     	;# 
  1505  0098                     	;# 
  1506  0099                     	;# 
  1507  009A                     	;# 
  1508  009B                     	;# 
  1509  009B                     	;# 
  1510  009C                     	;# 
  1511  009D                     	;# 
  1512  009E                     	;# 
  1513  010C                     	;# 
  1514  010D                     	;# 
  1515  010E                     	;# 
  1516  0111                     	;# 
  1517  0112                     	;# 
  1518  0113                     	;# 
  1519  0114                     	;# 
  1520  0115                     	;# 
  1521  0116                     	;# 
  1522  0117                     	;# 
  1523  0118                     	;# 
  1524  0119                     	;# 
  1525  011A                     	;# 
  1526  011B                     	;# 
  1527  011D                     	;# 
  1528  011E                     	;# 
  1529  018C                     	;# 
  1530  018D                     	;# 
  1531  018E                     	;# 
  1532  0191                     	;# 
  1533  0191                     	;# 
  1534  0192                     	;# 
  1535  0193                     	;# 
  1536  0193                     	;# 
  1537  0193                     	;# 
  1538  0194                     	;# 
  1539  0195                     	;# 
  1540  0196                     	;# 
  1541  0199                     	;# 
  1542  019A                     	;# 
  1543  019B                     	;# 
  1544  019B                     	;# 
  1545  019C                     	;# 
  1546  019D                     	;# 
  1547  019E                     	;# 
  1548  019F                     	;# 
  1549  020C                     	;# 
  1550  020D                     	;# 
  1551  020E                     	;# 
  1552  0211                     	;# 
  1553  0211                     	;# 
  1554  0212                     	;# 
  1555  0212                     	;# 
  1556  0213                     	;# 
  1557  0213                     	;# 
  1558  0214                     	;# 
  1559  0214                     	;# 
  1560  0215                     	;# 
  1561  0215                     	;# 
  1562  0215                     	;# 
  1563  0216                     	;# 
  1564  0216                     	;# 
  1565  0217                     	;# 
  1566  0217                     	;# 
  1567  0219                     	;# 
  1568  021A                     	;# 
  1569  021B                     	;# 
  1570  021C                     	;# 
  1571  021D                     	;# 
  1572  021E                     	;# 
  1573  021F                     	;# 
  1574  0291                     	;# 
  1575  0291                     	;# 
  1576  0292                     	;# 
  1577  0293                     	;# 
  1578  0294                     	;# 
  1579  0295                     	;# 
  1580  0295                     	;# 
  1581  0296                     	;# 
  1582  0298                     	;# 
  1583  0298                     	;# 
  1584  0299                     	;# 
  1585  029A                     	;# 
  1586  029B                     	;# 
  1587  029C                     	;# 
  1588  029D                     	;# 
  1589  029E                     	;# 
  1590  0311                     	;# 
  1591  0311                     	;# 
  1592  0312                     	;# 
  1593  0313                     	;# 
  1594  0318                     	;# 
  1595  0318                     	;# 
  1596  0319                     	;# 
  1597  031A                     	;# 
  1598  038C                     	;# 
  1599  038D                     	;# 
  1600  038E                     	;# 
  1601  0391                     	;# 
  1602  0392                     	;# 
  1603  0393                     	;# 
  1604  0394                     	;# 
  1605  0395                     	;# 
  1606  0396                     	;# 
  1607  039A                     	;# 
  1608  039C                     	;# 
  1609  039D                     	;# 
  1610  039E                     	;# 
  1611  039F                     	;# 
  1612  0415                     	;# 
  1613  0416                     	;# 
  1614  0417                     	;# 
  1615  041C                     	;# 
  1616  041D                     	;# 
  1617  041E                     	;# 
  1618  0FE4                     	;# 
  1619  0FE5                     	;# 
  1620  0FE6                     	;# 
  1621  0FE7                     	;# 
  1622  0FE8                     	;# 
  1623  0FE9                     	;# 
  1624  0FEA                     	;# 
  1625  0FEB                     	;# 
  1626  0FED                     	;# 
  1627  0FEE                     	;# 
  1628  0FEF                     	;# 
  1629  0000                     	;# 
  1630  0001                     	;# 
  1631  0002                     	;# 
  1632  0003                     	;# 
  1633  0004                     	;# 
  1634  0005                     	;# 
  1635  0006                     	;# 
  1636  0007                     	;# 
  1637  0008                     	;# 
  1638  0009                     	;# 
  1639  000A                     	;# 
  1640  000B                     	;# 
  1641  000C                     	;# 
  1642  000D                     	;# 
  1643  000E                     	;# 
  1644  0011                     	;# 
  1645  0012                     	;# 
  1646  0013                     	;# 
  1647  0014                     	;# 
  1648  0015                     	;# 
  1649  0016                     	;# 
  1650  0016                     	;# 
  1651  0017                     	;# 
  1652  0018                     	;# 
  1653  0019                     	;# 
  1654  001A                     	;# 
  1655  001B                     	;# 
  1656  001C                     	;# 
  1657  001E                     	;# 
  1658  001F                     	;# 
  1659  008C                     	;# 
  1660  008D                     	;# 
  1661  008E                     	;# 
  1662  0091                     	;# 
  1663  0092                     	;# 
  1664  0093                     	;# 
  1665  0094                     	;# 
  1666  0095                     	;# 
  1667  0096                     	;# 
  1668  0097                     	;# 
  1669  0098                     	;# 
  1670  0099                     	;# 
  1671  009A                     	;# 
  1672  009B                     	;# 
  1673  009B                     	;# 
  1674  009C                     	;# 
  1675  009D                     	;# 
  1676  009E                     	;# 
  1677  010C                     	;# 
  1678  010D                     	;# 
  1679  010E                     	;# 
  1680  0111                     	;# 
  1681  0112                     	;# 
  1682  0113                     	;# 
  1683  0114                     	;# 
  1684  0115                     	;# 
  1685  0116                     	;# 
  1686  0117                     	;# 
  1687  0118                     	;# 
  1688  0119                     	;# 
  1689  011A                     	;# 
  1690  011B                     	;# 
  1691  011D                     	;# 
  1692  011E                     	;# 
  1693  018C                     	;# 
  1694  018D                     	;# 
  1695  018E                     	;# 
  1696  0191                     	;# 
  1697  0191                     	;# 
  1698  0192                     	;# 
  1699  0193                     	;# 
  1700  0193                     	;# 
  1701  0193                     	;# 
  1702  0194                     	;# 
  1703  0195                     	;# 
  1704  0196                     	;# 
  1705  0199                     	;# 
  1706  019A                     	;# 
  1707  019B                     	;# 
  1708  019B                     	;# 
  1709  019C                     	;# 
  1710  019D                     	;# 
  1711  019E                     	;# 
  1712  019F                     	;# 
  1713  020C                     	;# 
  1714  020D                     	;# 
  1715  020E                     	;# 
  1716  0211                     	;# 
  1717  0211                     	;# 
  1718  0212                     	;# 
  1719  0212                     	;# 
  1720  0213                     	;# 
  1721  0213                     	;# 
  1722  0214                     	;# 
  1723  0214                     	;# 
  1724  0215                     	;# 
  1725  0215                     	;# 
  1726  0215                     	;# 
  1727  0216                     	;# 
  1728  0216                     	;# 
  1729  0217                     	;# 
  1730  0217                     	;# 
  1731  0219                     	;# 
  1732  021A                     	;# 
  1733  021B                     	;# 
  1734  021C                     	;# 
  1735  021D                     	;# 
  1736  021E                     	;# 
  1737  021F                     	;# 
  1738  0291                     	;# 
  1739  0291                     	;# 
  1740  0292                     	;# 
  1741  0293                     	;# 
  1742  0294                     	;# 
  1743  0295                     	;# 
  1744  0295                     	;# 
  1745  0296                     	;# 
  1746  0298                     	;# 
  1747  0298                     	;# 
  1748  0299                     	;# 
  1749  029A                     	;# 
  1750  029B                     	;# 
  1751  029C                     	;# 
  1752  029D                     	;# 
  1753  029E                     	;# 
  1754  0311                     	;# 
  1755  0311                     	;# 
  1756  0312                     	;# 
  1757  0313                     	;# 
  1758  0318                     	;# 
  1759  0318                     	;# 
  1760  0319                     	;# 
  1761  031A                     	;# 
  1762  038C                     	;# 
  1763  038D                     	;# 
  1764  038E                     	;# 
  1765  0391                     	;# 
  1766  0392                     	;# 
  1767  0393                     	;# 
  1768  0394                     	;# 
  1769  0395                     	;# 
  1770  0396                     	;# 
  1771  039A                     	;# 
  1772  039C                     	;# 
  1773  039D                     	;# 
  1774  039E                     	;# 
  1775  039F                     	;# 
  1776  0415                     	;# 
  1777  0416                     	;# 
  1778  0417                     	;# 
  1779  041C                     	;# 
  1780  041D                     	;# 
  1781  041E                     	;# 
  1782  0FE4                     	;# 
  1783  0FE5                     	;# 
  1784  0FE6                     	;# 
  1785  0FE7                     	;# 
  1786  0FE8                     	;# 
  1787  0FE9                     	;# 
  1788  0FEA                     	;# 
  1789  0FEB                     	;# 
  1790  0FED                     	;# 
  1791  0FEE                     	;# 
  1792  0FEF                     	;# 
  1793  0000                     	;# 
  1794  0001                     	;# 
  1795  0002                     	;# 
  1796  0003                     	;# 
  1797  0004                     	;# 
  1798  0005                     	;# 
  1799  0006                     	;# 
  1800  0007                     	;# 
  1801  0008                     	;# 
  1802  0009                     	;# 
  1803  000A                     	;# 
  1804  000B                     	;# 
  1805  000C                     	;# 
  1806  000D                     	;# 
  1807  000E                     	;# 
  1808  0011                     	;# 
  1809  0012                     	;# 
  1810  0013                     	;# 
  1811  0014                     	;# 
  1812  0015                     	;# 
  1813  0016                     	;# 
  1814  0016                     	;# 
  1815  0017                     	;# 
  1816  0018                     	;# 
  1817  0019                     	;# 
  1818  001A                     	;# 
  1819  001B                     	;# 
  1820  001C                     	;# 
  1821  001E                     	;# 
  1822  001F                     	;# 
  1823  008C                     	;# 
  1824  008D                     	;# 
  1825  008E                     	;# 
  1826  0091                     	;# 
  1827  0092                     	;# 
  1828  0093                     	;# 
  1829  0094                     	;# 
  1830  0095                     	;# 
  1831  0096                     	;# 
  1832  0097                     	;# 
  1833  0098                     	;# 
  1834  0099                     	;# 
  1835  009A                     	;# 
  1836  009B                     	;# 
  1837  009B                     	;# 
  1838  009C                     	;# 
  1839  009D                     	;# 
  1840  009E                     	;# 
  1841  010C                     	;# 
  1842  010D                     	;# 
  1843  010E                     	;# 
  1844  0111                     	;# 
  1845  0112                     	;# 
  1846  0113                     	;# 
  1847  0114                     	;# 
  1848  0115                     	;# 
  1849  0116                     	;# 
  1850  0117                     	;# 
  1851  0118                     	;# 
  1852  0119                     	;# 
  1853  011A                     	;# 
  1854  011B                     	;# 
  1855  011D                     	;# 
  1856  011E                     	;# 
  1857  018C                     	;# 
  1858  018D                     	;# 
  1859  018E                     	;# 
  1860  0191                     	;# 
  1861  0191                     	;# 
  1862  0192                     	;# 
  1863  0193                     	;# 
  1864  0193                     	;# 
  1865  0193                     	;# 
  1866  0194                     	;# 
  1867  0195                     	;# 
  1868  0196                     	;# 
  1869  0199                     	;# 
  1870  019A                     	;# 
  1871  019B                     	;# 
  1872  019B                     	;# 
  1873  019C                     	;# 
  1874  019D                     	;# 
  1875  019E                     	;# 
  1876  019F                     	;# 
  1877  020C                     	;# 
  1878  020D                     	;# 
  1879  020E                     	;# 
  1880  0211                     	;# 
  1881  0211                     	;# 
  1882  0212                     	;# 
  1883  0212                     	;# 
  1884  0213                     	;# 
  1885  0213                     	;# 
  1886  0214                     	;# 
  1887  0214                     	;# 
  1888  0215                     	;# 
  1889  0215                     	;# 
  1890  0215                     	;# 
  1891  0216                     	;# 
  1892  0216                     	;# 
  1893  0217                     	;# 
  1894  0217                     	;# 
  1895  0219                     	;# 
  1896  021A                     	;# 
  1897  021B                     	;# 
  1898  021C                     	;# 
  1899  021D                     	;# 
  1900  021E                     	;# 
  1901  021F                     	;# 
  1902  0291                     	;# 
  1903  0291                     	;# 
  1904  0292                     	;# 
  1905  0293                     	;# 
  1906  0294                     	;# 
  1907  0295                     	;# 
  1908  0295                     	;# 
  1909  0296                     	;# 
  1910  0298                     	;# 
  1911  0298                     	;# 
  1912  0299                     	;# 
  1913  029A                     	;# 
  1914  029B                     	;# 
  1915  029C                     	;# 
  1916  029D                     	;# 
  1917  029E                     	;# 
  1918  0311                     	;# 
  1919  0311                     	;# 
  1920  0312                     	;# 
  1921  0313                     	;# 
  1922  0318                     	;# 
  1923  0318                     	;# 
  1924  0319                     	;# 
  1925  031A                     	;# 
  1926  038C                     	;# 
  1927  038D                     	;# 
  1928  038E                     	;# 
  1929  0391                     	;# 
  1930  0392                     	;# 
  1931  0393                     	;# 
  1932  0394                     	;# 
  1933  0395                     	;# 
  1934  0396                     	;# 
  1935  039A                     	;# 
  1936  039C                     	;# 
  1937  039D                     	;# 
  1938  039E                     	;# 
  1939  039F                     	;# 
  1940  0415                     	;# 
  1941  0416                     	;# 
  1942  0417                     	;# 
  1943  041C                     	;# 
  1944  041D                     	;# 
  1945  041E                     	;# 
  1946  0FE4                     	;# 
  1947  0FE5                     	;# 
  1948  0FE6                     	;# 
  1949  0FE7                     	;# 
  1950  0FE8                     	;# 
  1951  0FE9                     	;# 
  1952  0FEA                     	;# 
  1953  0FEB                     	;# 
  1954  0FED                     	;# 
  1955  0FEE                     	;# 
  1956  0FEF                     	;# 
  1957  0000                     	;# 
  1958  0001                     	;# 
  1959  0002                     	;# 
  1960  0003                     	;# 
  1961  0004                     	;# 
  1962  0005                     	;# 
  1963  0006                     	;# 
  1964  0007                     	;# 
  1965  0008                     	;# 
  1966  0009                     	;# 
  1967  000A                     	;# 
  1968  000B                     	;# 
  1969  000C                     	;# 
  1970  000D                     	;# 
  1971  000E                     	;# 
  1972  0011                     	;# 
  1973  0012                     	;# 
  1974  0013                     	;# 
  1975  0014                     	;# 
  1976  0015                     	;# 
  1977  0016                     	;# 
  1978  0016                     	;# 
  1979  0017                     	;# 
  1980  0018                     	;# 
  1981  0019                     	;# 
  1982  001A                     	;# 
  1983  001B                     	;# 
  1984  001C                     	;# 
  1985  001E                     	;# 
  1986  001F                     	;# 
  1987  008C                     	;# 
  1988  008D                     	;# 
  1989  008E                     	;# 
  1990  0091                     	;# 
  1991  0092                     	;# 
  1992  0093                     	;# 
  1993  0094                     	;# 
  1994  0095                     	;# 
  1995  0096                     	;# 
  1996  0097                     	;# 
  1997  0098                     	;# 
  1998  0099                     	;# 
  1999  009A                     	;# 
  2000  009B                     	;# 
  2001  009B                     	;# 
  2002  009C                     	;# 
  2003  009D                     	;# 
  2004  009E                     	;# 
  2005  010C                     	;# 
  2006  010D                     	;# 
  2007  010E                     	;# 
  2008  0111                     	;# 
  2009  0112                     	;# 
  2010  0113                     	;# 
  2011  0114                     	;# 
  2012  0115                     	;# 
  2013  0116                     	;# 
  2014  0117                     	;# 
  2015  0118                     	;# 
  2016  0119                     	;# 
  2017  011A                     	;# 
  2018  011B                     	;# 
  2019  011D                     	;# 
  2020  011E                     	;# 
  2021  018C                     	;# 
  2022  018D                     	;# 
  2023  018E                     	;# 
  2024  0191                     	;# 
  2025  0191                     	;# 
  2026  0192                     	;# 
  2027  0193                     	;# 
  2028  0193                     	;# 
  2029  0193                     	;# 
  2030  0194                     	;# 
  2031  0195                     	;# 
  2032  0196                     	;# 
  2033  0199                     	;# 
  2034  019A                     	;# 
  2035  019B                     	;# 
  2036  019B                     	;# 
  2037  019C                     	;# 
  2038  019D                     	;# 
  2039  019E                     	;# 
  2040  019F                     	;# 
  2041  020C                     	;# 
  2042  020D                     	;# 
  2043  020E                     	;# 
  2044  0211                     	;# 
  2045  0211                     	;# 
  2046  0212                     	;# 
  2047  0212                     	;# 
  2048  0213                     	;# 
  2049  0213                     	;# 
  2050  0214                     	;# 
  2051  0214                     	;# 
  2052  0215                     	;# 
  2053  0215                     	;# 
  2054  0215                     	;# 
  2055  0216                     	;# 
  2056  0216                     	;# 
  2057  0217                     	;# 
  2058  0217                     	;# 
  2059  0219                     	;# 
  2060  021A                     	;# 
  2061  021B                     	;# 
  2062  021C                     	;# 
  2063  021D                     	;# 
  2064  021E                     	;# 
  2065  021F                     	;# 
  2066  0291                     	;# 
  2067  0291                     	;# 
  2068  0292                     	;# 
  2069  0293                     	;# 
  2070  0294                     	;# 
  2071  0295                     	;# 
  2072  0295                     	;# 
  2073  0296                     	;# 
  2074  0298                     	;# 
  2075  0298                     	;# 
  2076  0299                     	;# 
  2077  029A                     	;# 
  2078  029B                     	;# 
  2079  029C                     	;# 
  2080  029D                     	;# 
  2081  029E                     	;# 
  2082  0311                     	;# 
  2083  0311                     	;# 
  2084  0312                     	;# 
  2085  0313                     	;# 
  2086  0318                     	;# 
  2087  0318                     	;# 
  2088  0319                     	;# 
  2089  031A                     	;# 
  2090  038C                     	;# 
  2091  038D                     	;# 
  2092  038E                     	;# 
  2093  0391                     	;# 
  2094  0392                     	;# 
  2095  0393                     	;# 
  2096  0394                     	;# 
  2097  0395                     	;# 
  2098  0396                     	;# 
  2099  039A                     	;# 
  2100  039C                     	;# 
  2101  039D                     	;# 
  2102  039E                     	;# 
  2103  039F                     	;# 
  2104  0415                     	;# 
  2105  0416                     	;# 
  2106  0417                     	;# 
  2107  041C                     	;# 
  2108  041D                     	;# 
  2109  041E                     	;# 
  2110  0FE4                     	;# 
  2111  0FE5                     	;# 
  2112  0FE6                     	;# 
  2113  0FE7                     	;# 
  2114  0FE8                     	;# 
  2115  0FE9                     	;# 
  2116  0FEA                     	;# 
  2117  0FEB                     	;# 
  2118  0FED                     	;# 
  2119  0FEE                     	;# 
  2120  0FEF                     	;# 
  2121  0000                     	;# 
  2122  0001                     	;# 
  2123  0002                     	;# 
  2124  0003                     	;# 
  2125  0004                     	;# 
  2126  0005                     	;# 
  2127  0006                     	;# 
  2128  0007                     	;# 
  2129  0008                     	;# 
  2130  0009                     	;# 
  2131  000A                     	;# 
  2132  000B                     	;# 
  2133  000C                     	;# 
  2134  000D                     	;# 
  2135  000E                     	;# 
  2136  0011                     	;# 
  2137  0012                     	;# 
  2138  0013                     	;# 
  2139  0014                     	;# 
  2140  0015                     	;# 
  2141  0016                     	;# 
  2142  0016                     	;# 
  2143  0017                     	;# 
  2144  0018                     	;# 
  2145  0019                     	;# 
  2146  001A                     	;# 
  2147  001B                     	;# 
  2148  001C                     	;# 
  2149  001E                     	;# 
  2150  001F                     	;# 
  2151  008C                     	;# 
  2152  008D                     	;# 
  2153  008E                     	;# 
  2154  0091                     	;# 
  2155  0092                     	;# 
  2156  0093                     	;# 
  2157  0094                     	;# 
  2158  0095                     	;# 
  2159  0096                     	;# 
  2160  0097                     	;# 
  2161  0098                     	;# 
  2162  0099                     	;# 
  2163  009A                     	;# 
  2164  009B                     	;# 
  2165  009B                     	;# 
  2166  009C                     	;# 
  2167  009D                     	;# 
  2168  009E                     	;# 
  2169  010C                     	;# 
  2170  010D                     	;# 
  2171  010E                     	;# 
  2172  0111                     	;# 
  2173  0112                     	;# 
  2174  0113                     	;# 
  2175  0114                     	;# 
  2176  0115                     	;# 
  2177  0116                     	;# 
  2178  0117                     	;# 
  2179  0118                     	;# 
  2180  0119                     	;# 
  2181  011A                     	;# 
  2182  011B                     	;# 
  2183  011D                     	;# 
  2184  011E                     	;# 
  2185  018C                     	;# 
  2186  018D                     	;# 
  2187  018E                     	;# 
  2188  0191                     	;# 
  2189  0191                     	;# 
  2190  0192                     	;# 
  2191  0193                     	;# 
  2192  0193                     	;# 
  2193  0193                     	;# 
  2194  0194                     	;# 
  2195  0195                     	;# 
  2196  0196                     	;# 
  2197  0199                     	;# 
  2198  019A                     	;# 
  2199  019B                     	;# 
  2200  019B                     	;# 
  2201  019C                     	;# 
  2202  019D                     	;# 
  2203  019E                     	;# 
  2204  019F                     	;# 
  2205  020C                     	;# 
  2206  020D                     	;# 
  2207  020E                     	;# 
  2208  0211                     	;# 
  2209  0211                     	;# 
  2210  0212                     	;# 
  2211  0212                     	;# 
  2212  0213                     	;# 
  2213  0213                     	;# 
  2214  0214                     	;# 
  2215  0214                     	;# 
  2216  0215                     	;# 
  2217  0215                     	;# 
  2218  0215                     	;# 
  2219  0216                     	;# 
  2220  0216                     	;# 
  2221  0217                     	;# 
  2222  0217                     	;# 
  2223  0219                     	;# 
  2224  021A                     	;# 
  2225  021B                     	;# 
  2226  021C                     	;# 
  2227  021D                     	;# 
  2228  021E                     	;# 
  2229  021F                     	;# 
  2230  0291                     	;# 
  2231  0291                     	;# 
  2232  0292                     	;# 
  2233  0293                     	;# 
  2234  0294                     	;# 
  2235  0295                     	;# 
  2236  0295                     	;# 
  2237  0296                     	;# 
  2238  0298                     	;# 
  2239  0298                     	;# 
  2240  0299                     	;# 
  2241  029A                     	;# 
  2242  029B                     	;# 
  2243  029C                     	;# 
  2244  029D                     	;# 
  2245  029E                     	;# 
  2246  0311                     	;# 
  2247  0311                     	;# 
  2248  0312                     	;# 
  2249  0313                     	;# 
  2250  0318                     	;# 
  2251  0318                     	;# 
  2252  0319                     	;# 
  2253  031A                     	;# 
  2254  038C                     	;# 
  2255  038D                     	;# 
  2256  038E                     	;# 
  2257  0391                     	;# 
  2258  0392                     	;# 
  2259  0393                     	;# 
  2260  0394                     	;# 
  2261  0395                     	;# 
  2262  0396                     	;# 
  2263  039A                     	;# 
  2264  039C                     	;# 
  2265  039D                     	;# 
  2266  039E                     	;# 
  2267  039F                     	;# 
  2268  0415                     	;# 
  2269  0416                     	;# 
  2270  0417                     	;# 
  2271  041C                     	;# 
  2272  041D                     	;# 
  2273  041E                     	;# 
  2274  0FE4                     	;# 
  2275  0FE5                     	;# 
  2276  0FE6                     	;# 
  2277  0FE7                     	;# 
  2278  0FE8                     	;# 
  2279  0FE9                     	;# 
  2280  0FEA                     	;# 
  2281  0FEB                     	;# 
  2282  0FED                     	;# 
  2283  0FEE                     	;# 
  2284  0FEF                     	;# 
  2285  0000                     	;# 
  2286  0001                     	;# 
  2287  0002                     	;# 
  2288  0003                     	;# 
  2289  0004                     	;# 
  2290  0005                     	;# 
  2291  0006                     	;# 
  2292  0007                     	;# 
  2293  0008                     	;# 
  2294  0009                     	;# 
  2295  000A                     	;# 
  2296  000B                     	;# 
  2297  000C                     	;# 
  2298  000D                     	;# 
  2299  000E                     	;# 
  2300  0011                     	;# 
  2301  0012                     	;# 
  2302  0013                     	;# 
  2303  0014                     	;# 
  2304  0015                     	;# 
  2305  0016                     	;# 
  2306  0016                     	;# 
  2307  0017                     	;# 
  2308  0018                     	;# 
  2309  0019                     	;# 
  2310  001A                     	;# 
  2311  001B                     	;# 
  2312  001C                     	;# 
  2313  001E                     	;# 
  2314  001F                     	;# 
  2315  008C                     	;# 
  2316  008D                     	;# 
  2317  008E                     	;# 
  2318  0091                     	;# 
  2319  0092                     	;# 
  2320  0093                     	;# 
  2321  0094                     	;# 
  2322  0095                     	;# 
  2323  0096                     	;# 
  2324  0097                     	;# 
  2325  0098                     	;# 
  2326  0099                     	;# 
  2327  009A                     	;# 
  2328  009B                     	;# 
  2329  009B                     	;# 
  2330  009C                     	;# 
  2331  009D                     	;# 
  2332  009E                     	;# 
  2333  010C                     	;# 
  2334  010D                     	;# 
  2335  010E                     	;# 
  2336  0111                     	;# 
  2337  0112                     	;# 
  2338  0113                     	;# 
  2339  0114                     	;# 
  2340  0115                     	;# 
  2341  0116                     	;# 
  2342  0117                     	;# 
  2343  0118                     	;# 
  2344  0119                     	;# 
  2345  011A                     	;# 
  2346  011B                     	;# 
  2347  011D                     	;# 
  2348  011E                     	;# 
  2349  018C                     	;# 
  2350  018D                     	;# 
  2351  018E                     	;# 
  2352  0191                     	;# 
  2353  0191                     	;# 
  2354  0192                     	;# 
  2355  0193                     	;# 
  2356  0193                     	;# 
  2357  0193                     	;# 
  2358  0194                     	;# 
  2359  0195                     	;# 
  2360  0196                     	;# 
  2361  0199                     	;# 
  2362  019A                     	;# 
  2363  019B                     	;# 
  2364  019B                     	;# 
  2365  019C                     	;# 
  2366  019D                     	;# 
  2367  019E                     	;# 
  2368  019F                     	;# 
  2369  020C                     	;# 
  2370  020D                     	;# 
  2371  020E                     	;# 
  2372  0211                     	;# 
  2373  0211                     	;# 
  2374  0212                     	;# 
  2375  0212                     	;# 
  2376  0213                     	;# 
  2377  0213                     	;# 
  2378  0214                     	;# 
  2379  0214                     	;# 
  2380  0215                     	;# 
  2381  0215                     	;# 
  2382  0215                     	;# 
  2383  0216                     	;# 
  2384  0216                     	;# 
  2385  0217                     	;# 
  2386  0217                     	;# 
  2387  0219                     	;# 
  2388  021A                     	;# 
  2389  021B                     	;# 
  2390  021C                     	;# 
  2391  021D                     	;# 
  2392  021E                     	;# 
  2393  021F                     	;# 
  2394  0291                     	;# 
  2395  0291                     	;# 
  2396  0292                     	;# 
  2397  0293                     	;# 
  2398  0294                     	;# 
  2399  0295                     	;# 
  2400  0295                     	;# 
  2401  0296                     	;# 
  2402  0298                     	;# 
  2403  0298                     	;# 
  2404  0299                     	;# 
  2405  029A                     	;# 
  2406  029B                     	;# 
  2407  029C                     	;# 
  2408  029D                     	;# 
  2409  029E                     	;# 
  2410  0311                     	;# 
  2411  0311                     	;# 
  2412  0312                     	;# 
  2413  0313                     	;# 
  2414  0318                     	;# 
  2415  0318                     	;# 
  2416  0319                     	;# 
  2417  031A                     	;# 
  2418  038C                     	;# 
  2419  038D                     	;# 
  2420  038E                     	;# 
  2421  0391                     	;# 
  2422  0392                     	;# 
  2423  0393                     	;# 
  2424  0394                     	;# 
  2425  0395                     	;# 
  2426  0396                     	;# 
  2427  039A                     	;# 
  2428  039C                     	;# 
  2429  039D                     	;# 
  2430  039E                     	;# 
  2431  039F                     	;# 
  2432  0415                     	;# 
  2433  0416                     	;# 
  2434  0417                     	;# 
  2435  041C                     	;# 
  2436  041D                     	;# 
  2437  041E                     	;# 
  2438  0FE4                     	;# 
  2439  0FE5                     	;# 
  2440  0FE6                     	;# 
  2441  0FE7                     	;# 
  2442  0FE8                     	;# 
  2443  0FE9                     	;# 
  2444  0FEA                     	;# 
  2445  0FEB                     	;# 
  2446  0FED                     	;# 
  2447  0FEE                     	;# 
  2448  0FEF                     	;# 
  2449  0000                     	;# 
  2450  0001                     	;# 
  2451  0002                     	;# 
  2452  0003                     	;# 
  2453  0004                     	;# 
  2454  0005                     	;# 
  2455  0006                     	;# 
  2456  0007                     	;# 
  2457  0008                     	;# 
  2458  0009                     	;# 
  2459  000A                     	;# 
  2460  000B                     	;# 
  2461  000C                     	;# 
  2462  000D                     	;# 
  2463  000E                     	;# 
  2464  0011                     	;# 
  2465  0012                     	;# 
  2466  0013                     	;# 
  2467  0014                     	;# 
  2468  0015                     	;# 
  2469  0016                     	;# 
  2470  0016                     	;# 
  2471  0017                     	;# 
  2472  0018                     	;# 
  2473  0019                     	;# 
  2474  001A                     	;# 
  2475  001B                     	;# 
  2476  001C                     	;# 
  2477  001E                     	;# 
  2478  001F                     	;# 
  2479  008C                     	;# 
  2480  008D                     	;# 
  2481  008E                     	;# 
  2482  0091                     	;# 
  2483  0092                     	;# 
  2484  0093                     	;# 
  2485  0094                     	;# 
  2486  0095                     	;# 
  2487  0096                     	;# 
  2488  0097                     	;# 
  2489  0098                     	;# 
  2490  0099                     	;# 
  2491  009A                     	;# 
  2492  009B                     	;# 
  2493  009B                     	;# 
  2494  009C                     	;# 
  2495  009D                     	;# 
  2496  009E                     	;# 
  2497  010C                     	;# 
  2498  010D                     	;# 
  2499  010E                     	;# 
  2500  0111                     	;# 
  2501  0112                     	;# 
  2502  0113                     	;# 
  2503  0114                     	;# 
  2504  0115                     	;# 
  2505  0116                     	;# 
  2506  0117                     	;# 
  2507  0118                     	;# 
  2508  0119                     	;# 
  2509  011A                     	;# 
  2510  011B                     	;# 
  2511  011D                     	;# 
  2512  011E                     	;# 
  2513  018C                     	;# 
  2514  018D                     	;# 
  2515  018E                     	;# 
  2516  0191                     	;# 
  2517  0191                     	;# 
  2518  0192                     	;# 
  2519  0193                     	;# 
  2520  0193                     	;# 
  2521  0193                     	;# 
  2522  0194                     	;# 
  2523  0195                     	;# 
  2524  0196                     	;# 
  2525  0199                     	;# 
  2526  019A                     	;# 
  2527  019B                     	;# 
  2528  019B                     	;# 
  2529  019C                     	;# 
  2530  019D                     	;# 
  2531  019E                     	;# 
  2532  019F                     	;# 
  2533  020C                     	;# 
  2534  020D                     	;# 
  2535  020E                     	;# 
  2536  0211                     	;# 
  2537  0211                     	;# 
  2538  0212                     	;# 
  2539  0212                     	;# 
  2540  0213                     	;# 
  2541  0213                     	;# 
  2542  0214                     	;# 
  2543  0214                     	;# 
  2544  0215                     	;# 
  2545  0215                     	;# 
  2546  0215                     	;# 
  2547  0216                     	;# 
  2548  0216                     	;# 
  2549  0217                     	;# 
  2550  0217                     	;# 
  2551  0219                     	;# 
  2552  021A                     	;# 
  2553  021B                     	;# 
  2554  021C                     	;# 
  2555  021D                     	;# 
  2556  021E                     	;# 
  2557  021F                     	;# 
  2558  0291                     	;# 
  2559  0291                     	;# 
  2560  0292                     	;# 
  2561  0293                     	;# 
  2562  0294                     	;# 
  2563  0295                     	;# 
  2564  0295                     	;# 
  2565  0296                     	;# 
  2566  0298                     	;# 
  2567  0298                     	;# 
  2568  0299                     	;# 
  2569  029A                     	;# 
  2570  029B                     	;# 
  2571  029C                     	;# 
  2572  029D                     	;# 
  2573  029E                     	;# 
  2574  0311                     	;# 
  2575  0311                     	;# 
  2576  0312                     	;# 
  2577  0313                     	;# 
  2578  0318                     	;# 
  2579  0318                     	;# 
  2580  0319                     	;# 
  2581  031A                     	;# 
  2582  038C                     	;# 
  2583  038D                     	;# 
  2584  038E                     	;# 
  2585  0391                     	;# 
  2586  0392                     	;# 
  2587  0393                     	;# 
  2588  0394                     	;# 
  2589  0395                     	;# 
  2590  0396                     	;# 
  2591  039A                     	;# 
  2592  039C                     	;# 
  2593  039D                     	;# 
  2594  039E                     	;# 
  2595  039F                     	;# 
  2596  0415                     	;# 
  2597  0416                     	;# 
  2598  0417                     	;# 
  2599  041C                     	;# 
  2600  041D                     	;# 
  2601  041E                     	;# 
  2602  0FE4                     	;# 
  2603  0FE5                     	;# 
  2604  0FE6                     	;# 
  2605  0FE7                     	;# 
  2606  0FE8                     	;# 
  2607  0FE9                     	;# 
  2608  0FEA                     	;# 
  2609  0FEB                     	;# 
  2610  0FED                     	;# 
  2611  0FEE                     	;# 
  2612  0FEF                     	;# 
  2613  0000                     	;# 
  2614  0001                     	;# 
  2615  0002                     	;# 
  2616  0003                     	;# 
  2617  0004                     	;# 
  2618  0005                     	;# 
  2619  0006                     	;# 
  2620  0007                     	;# 
  2621  0008                     	;# 
  2622  0009                     	;# 
  2623  000A                     	;# 
  2624  000B                     	;# 
  2625  000C                     	;# 
  2626  000D                     	;# 
  2627  000E                     	;# 
  2628  0011                     	;# 
  2629  0012                     	;# 
  2630  0013                     	;# 
  2631  0014                     	;# 
  2632  0015                     	;# 
  2633  0016                     	;# 
  2634  0016                     	;# 
  2635  0017                     	;# 
  2636  0018                     	;# 
  2637  0019                     	;# 
  2638  001A                     	;# 
  2639  001B                     	;# 
  2640  001C                     	;# 
  2641  001E                     	;# 
  2642  001F                     	;# 
  2643  008C                     	;# 
  2644  008D                     	;# 
  2645  008E                     	;# 
  2646  0091                     	;# 
  2647  0092                     	;# 
  2648  0093                     	;# 
  2649  0094                     	;# 
  2650  0095                     	;# 
  2651  0096                     	;# 
  2652  0097                     	;# 
  2653  0098                     	;# 
  2654  0099                     	;# 
  2655  009A                     	;# 
  2656  009B                     	;# 
  2657  009B                     	;# 
  2658  009C                     	;# 
  2659  009D                     	;# 
  2660  009E                     	;# 
  2661  010C                     	;# 
  2662  010D                     	;# 
  2663  010E                     	;# 
  2664  0111                     	;# 
  2665  0112                     	;# 
  2666  0113                     	;# 
  2667  0114                     	;# 
  2668  0115                     	;# 
  2669  0116                     	;# 
  2670  0117                     	;# 
  2671  0118                     	;# 
  2672  0119                     	;# 
  2673  011A                     	;# 
  2674  011B                     	;# 
  2675  011D                     	;# 
  2676  011E                     	;# 
  2677  018C                     	;# 
  2678  018D                     	;# 
  2679  018E                     	;# 
  2680  0191                     	;# 
  2681  0191                     	;# 
  2682  0192                     	;# 
  2683  0193                     	;# 
  2684  0193                     	;# 
  2685  0193                     	;# 
  2686  0194                     	;# 
  2687  0195                     	;# 
  2688  0196                     	;# 
  2689  0199                     	;# 
  2690  019A                     	;# 
  2691  019B                     	;# 
  2692  019B                     	;# 
  2693  019C                     	;# 
  2694  019D                     	;# 
  2695  019E                     	;# 
  2696  019F                     	;# 
  2697  020C                     	;# 
  2698  020D                     	;# 
  2699  020E                     	;# 
  2700  0211                     	;# 
  2701  0211                     	;# 
  2702  0212                     	;# 
  2703  0212                     	;# 
  2704  0213                     	;# 
  2705  0213                     	;# 
  2706  0214                     	;# 
  2707  0214                     	;# 
  2708  0215                     	;# 
  2709  0215                     	;# 
  2710  0215                     	;# 
  2711  0216                     	;# 
  2712  0216                     	;# 
  2713  0217                     	;# 
  2714  0217                     	;# 
  2715  0219                     	;# 
  2716  021A                     	;# 
  2717  021B                     	;# 
  2718  021C                     	;# 
  2719  021D                     	;# 
  2720  021E                     	;# 
  2721  021F                     	;# 
  2722  0291                     	;# 
  2723  0291                     	;# 
  2724  0292                     	;# 
  2725  0293                     	;# 
  2726  0294                     	;# 
  2727  0295                     	;# 
  2728  0295                     	;# 
  2729  0296                     	;# 
  2730  0298                     	;# 
  2731  0298                     	;# 
  2732  0299                     	;# 
  2733  029A                     	;# 
  2734  029B                     	;# 
  2735  029C                     	;# 
  2736  029D                     	;# 
  2737  029E                     	;# 
  2738  0311                     	;# 
  2739  0311                     	;# 
  2740  0312                     	;# 
  2741  0313                     	;# 
  2742  0318                     	;# 
  2743  0318                     	;# 
  2744  0319                     	;# 
  2745  031A                     	;# 
  2746  038C                     	;# 
  2747  038D                     	;# 
  2748  038E                     	;# 
  2749  0391                     	;# 
  2750  0392                     	;# 
  2751  0393                     	;# 
  2752  0394                     	;# 
  2753  0395                     	;# 
  2754  0396                     	;# 
  2755  039A                     	;# 
  2756  039C                     	;# 
  2757  039D                     	;# 
  2758  039E                     	;# 
  2759  039F                     	;# 
  2760  0415                     	;# 
  2761  0416                     	;# 
  2762  0417                     	;# 
  2763  041C                     	;# 
  2764  041D                     	;# 
  2765  041E                     	;# 
  2766  0FE4                     	;# 
  2767  0FE5                     	;# 
  2768  0FE6                     	;# 
  2769  0FE7                     	;# 
  2770  0FE8                     	;# 
  2771  0FE9                     	;# 
  2772  0FEA                     	;# 
  2773  0FEB                     	;# 
  2774  0FED                     	;# 
  2775  0FEE                     	;# 
  2776  0FEF                     	;# 
  2777  0000                     	;# 
  2778  0001                     	;# 
  2779  0002                     	;# 
  2780  0003                     	;# 
  2781  0004                     	;# 
  2782  0005                     	;# 
  2783  0006                     	;# 
  2784  0007                     	;# 
  2785  0008                     	;# 
  2786  0009                     	;# 
  2787  000A                     	;# 
  2788  000B                     	;# 
  2789  000C                     	;# 
  2790  000D                     	;# 
  2791  000E                     	;# 
  2792  0011                     	;# 
  2793  0012                     	;# 
  2794  0013                     	;# 
  2795  0014                     	;# 
  2796  0015                     	;# 
  2797  0016                     	;# 
  2798  0016                     	;# 
  2799  0017                     	;# 
  2800  0018                     	;# 
  2801  0019                     	;# 
  2802  001A                     	;# 
  2803  001B                     	;# 
  2804  001C                     	;# 
  2805  001E                     	;# 
  2806  001F                     	;# 
  2807  008C                     	;# 
  2808  008D                     	;# 
  2809  008E                     	;# 
  2810  0091                     	;# 
  2811  0092                     	;# 
  2812  0093                     	;# 
  2813  0094                     	;# 
  2814  0095                     	;# 
  2815  0096                     	;# 
  2816  0097                     	;# 
  2817  0098                     	;# 
  2818  0099                     	;# 
  2819  009A                     	;# 
  2820  009B                     	;# 
  2821  009B                     	;# 
  2822  009C                     	;# 
  2823  009D                     	;# 
  2824  009E                     	;# 
  2825  010C                     	;# 
  2826  010D                     	;# 
  2827  010E                     	;# 
  2828  0111                     	;# 
  2829  0112                     	;# 
  2830  0113                     	;# 
  2831  0114                     	;# 
  2832  0115                     	;# 
  2833  0116                     	;# 
  2834  0117                     	;# 
  2835  0118                     	;# 
  2836  0119                     	;# 
  2837  011A                     	;# 
  2838  011B                     	;# 
  2839  011D                     	;# 
  2840  011E                     	;# 
  2841  018C                     	;# 
  2842  018D                     	;# 
  2843  018E                     	;# 
  2844  0191                     	;# 
  2845  0191                     	;# 
  2846  0192                     	;# 
  2847  0193                     	;# 
  2848  0193                     	;# 
  2849  0193                     	;# 
  2850  0194                     	;# 
  2851  0195                     	;# 
  2852  0196                     	;# 
  2853  0199                     	;# 
  2854  019A                     	;# 
  2855  019B                     	;# 
  2856  019B                     	;# 
  2857  019C                     	;# 
  2858  019D                     	;# 
  2859  019E                     	;# 
  2860  019F                     	;# 
  2861  020C                     	;# 
  2862  020D                     	;# 
  2863  020E                     	;# 
  2864  0211                     	;# 
  2865  0211                     	;# 
  2866  0212                     	;# 
  2867  0212                     	;# 
  2868  0213                     	;# 
  2869  0213                     	;# 
  2870  0214                     	;# 
  2871  0214                     	;# 
  2872  0215                     	;# 
  2873  0215                     	;# 
  2874  0215                     	;# 
  2875  0216                     	;# 
  2876  0216                     	;# 
  2877  0217                     	;# 
  2878  0217                     	;# 
  2879  0219                     	;# 
  2880  021A                     	;# 
  2881  021B                     	;# 
  2882  021C                     	;# 
  2883  021D                     	;# 
  2884  021E                     	;# 
  2885  021F                     	;# 
  2886  0291                     	;# 
  2887  0291                     	;# 
  2888  0292                     	;# 
  2889  0293                     	;# 
  2890  0294                     	;# 
  2891  0295                     	;# 
  2892  0295                     	;# 
  2893  0296                     	;# 
  2894  0298                     	;# 
  2895  0298                     	;# 
  2896  0299                     	;# 
  2897  029A                     	;# 
  2898  029B                     	;# 
  2899  029C                     	;# 
  2900  029D                     	;# 
  2901  029E                     	;# 
  2902  0311                     	;# 
  2903  0311                     	;# 
  2904  0312                     	;# 
  2905  0313                     	;# 
  2906  0318                     	;# 
  2907  0318                     	;# 
  2908  0319                     	;# 
  2909  031A                     	;# 
  2910  038C                     	;# 
  2911  038D                     	;# 
  2912  038E                     	;# 
  2913  0391                     	;# 
  2914  0392                     	;# 
  2915  0393                     	;# 
  2916  0394                     	;# 
  2917  0395                     	;# 
  2918  0396                     	;# 
  2919  039A                     	;# 
  2920  039C                     	;# 
  2921  039D                     	;# 
  2922  039E                     	;# 
  2923  039F                     	;# 
  2924  0415                     	;# 
  2925  0416                     	;# 
  2926  0417                     	;# 
  2927  041C                     	;# 
  2928  041D                     	;# 
  2929  041E                     	;# 
  2930  0FE4                     	;# 
  2931  0FE5                     	;# 
  2932  0FE6                     	;# 
  2933  0FE7                     	;# 
  2934  0FE8                     	;# 
  2935  0FE9                     	;# 
  2936  0FEA                     	;# 
  2937  0FEB                     	;# 
  2938  0FED                     	;# 
  2939  0FEE                     	;# 
  2940  0FEF                     	;# 
  2941  0000                     	;# 
  2942  0001                     	;# 
  2943  0002                     	;# 
  2944  0003                     	;# 
  2945  0004                     	;# 
  2946  0005                     	;# 
  2947  0006                     	;# 
  2948  0007                     	;# 
  2949  0008                     	;# 
  2950  0009                     	;# 
  2951  000A                     	;# 
  2952  000B                     	;# 
  2953  000C                     	;# 
  2954  000D                     	;# 
  2955  000E                     	;# 
  2956  0011                     	;# 
  2957  0012                     	;# 
  2958  0013                     	;# 
  2959  0014                     	;# 
  2960  0015                     	;# 
  2961  0016                     	;# 
  2962  0016                     	;# 
  2963  0017                     	;# 
  2964  0018                     	;# 
  2965  0019                     	;# 
  2966  001A                     	;# 
  2967  001B                     	;# 
  2968  001C                     	;# 
  2969  001E                     	;# 
  2970  001F                     	;# 
  2971  008C                     	;# 
  2972  008D                     	;# 
  2973  008E                     	;# 
  2974  0091                     	;# 
  2975  0092                     	;# 
  2976  0093                     	;# 
  2977  0094                     	;# 
  2978  0095                     	;# 
  2979  0096                     	;# 
  2980  0097                     	;# 
  2981  0098                     	;# 
  2982  0099                     	;# 
  2983  009A                     	;# 
  2984  009B                     	;# 
  2985  009B                     	;# 
  2986  009C                     	;# 
  2987  009D                     	;# 
  2988  009E                     	;# 
  2989  010C                     	;# 
  2990  010D                     	;# 
  2991  010E                     	;# 
  2992  0111                     	;# 
  2993  0112                     	;# 
  2994  0113                     	;# 
  2995  0114                     	;# 
  2996  0115                     	;# 
  2997  0116                     	;# 
  2998  0117                     	;# 
  2999  0118                     	;# 
  3000  0119                     	;# 
  3001  011A                     	;# 
  3002  011B                     	;# 
  3003  011D                     	;# 
  3004  011E                     	;# 
  3005  018C                     	;# 
  3006  018D                     	;# 
  3007  018E                     	;# 
  3008  0191                     	;# 
  3009  0191                     	;# 
  3010  0192                     	;# 
  3011  0193                     	;# 
  3012  0193                     	;# 
  3013  0193                     	;# 
  3014  0194                     	;# 
  3015  0195                     	;# 
  3016  0196                     	;# 
  3017  0199                     	;# 
  3018  019A                     	;# 
  3019  019B                     	;# 
  3020  019B                     	;# 
  3021  019C                     	;# 
  3022  019D                     	;# 
  3023  019E                     	;# 
  3024  019F                     	;# 
  3025  020C                     	;# 
  3026  020D                     	;# 
  3027  020E                     	;# 
  3028  0211                     	;# 
  3029  0211                     	;# 
  3030  0212                     	;# 
  3031  0212                     	;# 
  3032  0213                     	;# 
  3033  0213                     	;# 
  3034  0214                     	;# 
  3035  0214                     	;# 
  3036  0215                     	;# 
  3037  0215                     	;# 
  3038  0215                     	;# 
  3039  0216                     	;# 
  3040  0216                     	;# 
  3041  0217                     	;# 
  3042  0217                     	;# 
  3043  0219                     	;# 
  3044  021A                     	;# 
  3045  021B                     	;# 
  3046  021C                     	;# 
  3047  021D                     	;# 
  3048  021E                     	;# 
  3049  021F                     	;# 
  3050  0291                     	;# 
  3051  0291                     	;# 
  3052  0292                     	;# 
  3053  0293                     	;# 
  3054  0294                     	;# 
  3055  0295                     	;# 
  3056  0295                     	;# 
  3057  0296                     	;# 
  3058  0298                     	;# 
  3059  0298                     	;# 
  3060  0299                     	;# 
  3061  029A                     	;# 
  3062  029B                     	;# 
  3063  029C                     	;# 
  3064  029D                     	;# 
  3065  029E                     	;# 
  3066  0311                     	;# 
  3067  0311                     	;# 
  3068  0312                     	;# 
  3069  0313                     	;# 
  3070  0318                     	;# 
  3071  0318                     	;# 
  3072  0319                     	;# 
  3073  031A                     	;# 
  3074  038C                     	;# 
  3075  038D                     	;# 
  3076  038E                     	;# 
  3077  0391                     	;# 
  3078  0392                     	;# 
  3079  0393                     	;# 
  3080  0394                     	;# 
  3081  0395                     	;# 
  3082  0396                     	;# 
  3083  039A                     	;# 
  3084  039C                     	;# 
  3085  039D                     	;# 
  3086  039E                     	;# 
  3087  039F                     	;# 
  3088  0415                     	;# 
  3089  0416                     	;# 
  3090  0417                     	;# 
  3091  041C                     	;# 
  3092  041D                     	;# 
  3093  041E                     	;# 
  3094  0FE4                     	;# 
  3095  0FE5                     	;# 
  3096  0FE6                     	;# 
  3097  0FE7                     	;# 
  3098  0FE8                     	;# 
  3099  0FE9                     	;# 
  3100  0FEA                     	;# 
  3101  0FEB                     	;# 
  3102  0FED                     	;# 
  3103  0FEE                     	;# 
  3104  0FEF                     	;# 
  3105  0000                     	;# 
  3106  0001                     	;# 
  3107  0002                     	;# 
  3108  0003                     	;# 
  3109  0004                     	;# 
  3110  0005                     	;# 
  3111  0006                     	;# 
  3112  0007                     	;# 
  3113  0008                     	;# 
  3114  0009                     	;# 
  3115  000A                     	;# 
  3116  000B                     	;# 
  3117  000C                     	;# 
  3118  000D                     	;# 
  3119  000E                     	;# 
  3120  0011                     	;# 
  3121  0012                     	;# 
  3122  0013                     	;# 
  3123  0014                     	;# 
  3124  0015                     	;# 
  3125  0016                     	;# 
  3126  0016                     	;# 
  3127  0017                     	;# 
  3128  0018                     	;# 
  3129  0019                     	;# 
  3130  001A                     	;# 
  3131  001B                     	;# 
  3132  001C                     	;# 
  3133  001E                     	;# 
  3134  001F                     	;# 
  3135  008C                     	;# 
  3136  008D                     	;# 
  3137  008E                     	;# 
  3138  0091                     	;# 
  3139  0092                     	;# 
  3140  0093                     	;# 
  3141  0094                     	;# 
  3142  0095                     	;# 
  3143  0096                     	;# 
  3144  0097                     	;# 
  3145  0098                     	;# 
  3146  0099                     	;# 
  3147  009A                     	;# 
  3148  009B                     	;# 
  3149  009B                     	;# 
  3150  009C                     	;# 
  3151  009D                     	;# 
  3152  009E                     	;# 
  3153  010C                     	;# 
  3154  010D                     	;# 
  3155  010E                     	;# 
  3156  0111                     	;# 
  3157  0112                     	;# 
  3158  0113                     	;# 
  3159  0114                     	;# 
  3160  0115                     	;# 
  3161  0116                     	;# 
  3162  0117                     	;# 
  3163  0118                     	;# 
  3164  0119                     	;# 
  3165  011A                     	;# 
  3166  011B                     	;# 
  3167  011D                     	;# 
  3168  011E                     	;# 
  3169  018C                     	;# 
  3170  018D                     	;# 
  3171  018E                     	;# 
  3172  0191                     	;# 
  3173  0191                     	;# 
  3174  0192                     	;# 
  3175  0193                     	;# 
  3176  0193                     	;# 
  3177  0193                     	;# 
  3178  0194                     	;# 
  3179  0195                     	;# 
  3180  0196                     	;# 
  3181  0199                     	;# 
  3182  019A                     	;# 
  3183  019B                     	;# 
  3184  019B                     	;# 
  3185  019C                     	;# 
  3186  019D                     	;# 
  3187  019E                     	;# 
  3188  019F                     	;# 
  3189  020C                     	;# 
  3190  020D                     	;# 
  3191  020E                     	;# 
  3192  0211                     	;# 
  3193  0211                     	;# 
  3194  0212                     	;# 
  3195  0212                     	;# 
  3196  0213                     	;# 
  3197  0213                     	;# 
  3198  0214                     	;# 
  3199  0214                     	;# 
  3200  0215                     	;# 
  3201  0215                     	;# 
  3202  0215                     	;# 
  3203  0216                     	;# 
  3204  0216                     	;# 
  3205  0217                     	;# 
  3206  0217                     	;# 
  3207  0219                     	;# 
  3208  021A                     	;# 
  3209  021B                     	;# 
  3210  021C                     	;# 
  3211  021D                     	;# 
  3212  021E                     	;# 
  3213  021F                     	;# 
  3214  0291                     	;# 
  3215  0291                     	;# 
  3216  0292                     	;# 
  3217  0293                     	;# 
  3218  0294                     	;# 
  3219  0295                     	;# 
  3220  0295                     	;# 
  3221  0296                     	;# 
  3222  0298                     	;# 
  3223  0298                     	;# 
  3224  0299                     	;# 
  3225  029A                     	;# 
  3226  029B                     	;# 
  3227  029C                     	;# 
  3228  029D                     	;# 
  3229  029E                     	;# 
  3230  0311                     	;# 
  3231  0311                     	;# 
  3232  0312                     	;# 
  3233  0313                     	;# 
  3234  0318                     	;# 
  3235  0318                     	;# 
  3236  0319                     	;# 
  3237  031A                     	;# 
  3238  038C                     	;# 
  3239  038D                     	;# 
  3240  038E                     	;# 
  3241  0391                     	;# 
  3242  0392                     	;# 
  3243  0393                     	;# 
  3244  0394                     	;# 
  3245  0395                     	;# 
  3246  0396                     	;# 
  3247  039A                     	;# 
  3248  039C                     	;# 
  3249  039D                     	;# 
  3250  039E                     	;# 
  3251  039F                     	;# 
  3252  0415                     	;# 
  3253  0416                     	;# 
  3254  0417                     	;# 
  3255  041C                     	;# 
  3256  041D                     	;# 
  3257  041E                     	;# 
  3258  0FE4                     	;# 
  3259  0FE5                     	;# 
  3260  0FE6                     	;# 
  3261  0FE7                     	;# 
  3262  0FE8                     	;# 
  3263  0FE9                     	;# 
  3264  0FEA                     	;# 
  3265  0FEB                     	;# 
  3266  0FED                     	;# 
  3267  0FEE                     	;# 
  3268  0FEF                     	;# 
  3269  0000                     	;# 
  3270  0001                     	;# 
  3271  0002                     	;# 
  3272  0003                     	;# 
  3273  0004                     	;# 
  3274  0005                     	;# 
  3275  0006                     	;# 
  3276  0007                     	;# 
  3277  0008                     	;# 
  3278  0009                     	;# 
  3279  000A                     	;# 
  3280  000B                     	;# 
  3281  000C                     	;# 
  3282  000D                     	;# 
  3283  000E                     	;# 
  3284  0011                     	;# 
  3285  0012                     	;# 
  3286  0013                     	;# 
  3287  0014                     	;# 
  3288  0015                     	;# 
  3289  0016                     	;# 
  3290  0016                     	;# 
  3291  0017                     	;# 
  3292  0018                     	;# 
  3293  0019                     	;# 
  3294  001A                     	;# 
  3295  001B                     	;# 
  3296  001C                     	;# 
  3297  001E                     	;# 
  3298  001F                     	;# 
  3299  008C                     	;# 
  3300  008D                     	;# 
  3301  008E                     	;# 
  3302  0091                     	;# 
  3303  0092                     	;# 
  3304  0093                     	;# 
  3305  0094                     	;# 
  3306  0095                     	;# 
  3307  0096                     	;# 
  3308  0097                     	;# 
  3309  0098                     	;# 
  3310  0099                     	;# 
  3311  009A                     	;# 
  3312  009B                     	;# 
  3313  009B                     	;# 
  3314  009C                     	;# 
  3315  009D                     	;# 
  3316  009E                     	;# 
  3317  010C                     	;# 
  3318  010D                     	;# 
  3319  010E                     	;# 
  3320  0111                     	;# 
  3321  0112                     	;# 
  3322  0113                     	;# 
  3323  0114                     	;# 
  3324  0115                     	;# 
  3325  0116                     	;# 
  3326  0117                     	;# 
  3327  0118                     	;# 
  3328  0119                     	;# 
  3329  011A                     	;# 
  3330  011B                     	;# 
  3331  011D                     	;# 
  3332  011E                     	;# 
  3333  018C                     	;# 
  3334  018D                     	;# 
  3335  018E                     	;# 
  3336  0191                     	;# 
  3337  0191                     	;# 
  3338  0192                     	;# 
  3339  0193                     	;# 
  3340  0193                     	;# 
  3341  0193                     	;# 
  3342  0194                     	;# 
  3343  0195                     	;# 
  3344  0196                     	;# 
  3345  0199                     	;# 
  3346  019A                     	;# 
  3347  019B                     	;# 
  3348  019B                     	;# 
  3349  019C                     	;# 
  3350  019D                     	;# 
  3351  019E                     	;# 
  3352  019F                     	;# 
  3353  020C                     	;# 
  3354  020D                     	;# 
  3355  020E                     	;# 
  3356  0211                     	;# 
  3357  0211                     	;# 
  3358  0212                     	;# 
  3359  0212                     	;# 
  3360  0213                     	;# 
  3361  0213                     	;# 
  3362  0214                     	;# 
  3363  0214                     	;# 
  3364  0215                     	;# 
  3365  0215                     	;# 
  3366  0215                     	;# 
  3367  0216                     	;# 
  3368  0216                     	;# 
  3369  0217                     	;# 
  3370  0217                     	;# 
  3371  0219                     	;# 
  3372  021A                     	;# 
  3373  021B                     	;# 
  3374  021C                     	;# 
  3375  021D                     	;# 
  3376  021E                     	;# 
  3377  021F                     	;# 
  3378  0291                     	;# 
  3379  0291                     	;# 
  3380  0292                     	;# 
  3381  0293                     	;# 
  3382  0294                     	;# 
  3383  0295                     	;# 
  3384  0295                     	;# 
  3385  0296                     	;# 
  3386  0298                     	;# 
  3387  0298                     	;# 
  3388  0299                     	;# 
  3389  029A                     	;# 
  3390  029B                     	;# 
  3391  029C                     	;# 
  3392  029D                     	;# 
  3393  029E                     	;# 
  3394  0311                     	;# 
  3395  0311                     	;# 
  3396  0312                     	;# 
  3397  0313                     	;# 
  3398  0318                     	;# 
  3399  0318                     	;# 
  3400  0319                     	;# 
  3401  031A                     	;# 
  3402  038C                     	;# 
  3403  038D                     	;# 
  3404  038E                     	;# 
  3405  0391                     	;# 
  3406  0392                     	;# 
  3407  0393                     	;# 
  3408  0394                     	;# 
  3409  0395                     	;# 
  3410  0396                     	;# 
  3411  039A                     	;# 
  3412  039C                     	;# 
  3413  039D                     	;# 
  3414  039E                     	;# 
  3415  039F                     	;# 
  3416  0415                     	;# 
  3417  0416                     	;# 
  3418  0417                     	;# 
  3419  041C                     	;# 
  3420  041D                     	;# 
  3421  041E                     	;# 
  3422  0FE4                     	;# 
  3423  0FE5                     	;# 
  3424  0FE6                     	;# 
  3425  0FE7                     	;# 
  3426  0FE8                     	;# 
  3427  0FE9                     	;# 
  3428  0FEA                     	;# 
  3429  0FEB                     	;# 
  3430  0FED                     	;# 
  3431  0FEE                     	;# 
  3432  0FEF                     	;# 
  3433  0000                     	;# 
  3434  0001                     	;# 
  3435  0002                     	;# 
  3436  0003                     	;# 
  3437  0004                     	;# 
  3438  0005                     	;# 
  3439  0006                     	;# 
  3440  0007                     	;# 
  3441  0008                     	;# 
  3442  0009                     	;# 
  3443  000A                     	;# 
  3444  000B                     	;# 
  3445  000C                     	;# 
  3446  000D                     	;# 
  3447  000E                     	;# 
  3448  0011                     	;# 
  3449  0012                     	;# 
  3450  0013                     	;# 
  3451  0014                     	;# 
  3452  0015                     	;# 
  3453  0016                     	;# 
  3454  0016                     	;# 
  3455  0017                     	;# 
  3456  0018                     	;# 
  3457  0019                     	;# 
  3458  001A                     	;# 
  3459  001B                     	;# 
  3460  001C                     	;# 
  3461  001E                     	;# 
  3462  001F                     	;# 
  3463  008C                     	;# 
  3464  008D                     	;# 
  3465  008E                     	;# 
  3466  0091                     	;# 
  3467  0092                     	;# 
  3468  0093                     	;# 
  3469  0094                     	;# 
  3470  0095                     	;# 
  3471  0096                     	;# 
  3472  0097                     	;# 
  3473  0098                     	;# 
  3474  0099                     	;# 
  3475  009A                     	;# 
  3476  009B                     	;# 
  3477  009B                     	;# 
  3478  009C                     	;# 
  3479  009D                     	;# 
  3480  009E                     	;# 
  3481  010C                     	;# 
  3482  010D                     	;# 
  3483  010E                     	;# 
  3484  0111                     	;# 
  3485  0112                     	;# 
  3486  0113                     	;# 
  3487  0114                     	;# 
  3488  0115                     	;# 
  3489  0116                     	;# 
  3490  0117                     	;# 
  3491  0118                     	;# 
  3492  0119                     	;# 
  3493  011A                     	;# 
  3494  011B                     	;# 
  3495  011D                     	;# 
  3496  011E                     	;# 
  3497  018C                     	;# 
  3498  018D                     	;# 
  3499  018E                     	;# 
  3500  0191                     	;# 
  3501  0191                     	;# 
  3502  0192                     	;# 
  3503  0193                     	;# 
  3504  0193                     	;# 
  3505  0193                     	;# 
  3506  0194                     	;# 
  3507  0195                     	;# 
  3508  0196                     	;# 
  3509  0199                     	;# 
  3510  019A                     	;# 
  3511  019B                     	;# 
  3512  019B                     	;# 
  3513  019C                     	;# 
  3514  019D                     	;# 
  3515  019E                     	;# 
  3516  019F                     	;# 
  3517  020C                     	;# 
  3518  020D                     	;# 
  3519  020E                     	;# 
  3520  0211                     	;# 
  3521  0211                     	;# 
  3522  0212                     	;# 
  3523  0212                     	;# 
  3524  0213                     	;# 
  3525  0213                     	;# 
  3526  0214                     	;# 
  3527  0214                     	;# 
  3528  0215                     	;# 
  3529  0215                     	;# 
  3530  0215                     	;# 
  3531  0216                     	;# 
  3532  0216                     	;# 
  3533  0217                     	;# 
  3534  0217                     	;# 
  3535  0219                     	;# 
  3536  021A                     	;# 
  3537  021B                     	;# 
  3538  021C                     	;# 
  3539  021D                     	;# 
  3540  021E                     	;# 
  3541  021F                     	;# 
  3542  0291                     	;# 
  3543  0291                     	;# 
  3544  0292                     	;# 
  3545  0293                     	;# 
  3546  0294                     	;# 
  3547  0295                     	;# 
  3548  0295                     	;# 
  3549  0296                     	;# 
  3550  0298                     	;# 
  3551  0298                     	;# 
  3552  0299                     	;# 
  3553  029A                     	;# 
  3554  029B                     	;# 
  3555  029C                     	;# 
  3556  029D                     	;# 
  3557  029E                     	;# 
  3558  0311                     	;# 
  3559  0311                     	;# 
  3560  0312                     	;# 
  3561  0313                     	;# 
  3562  0318                     	;# 
  3563  0318                     	;# 
  3564  0319                     	;# 
  3565  031A                     	;# 
  3566  038C                     	;# 
  3567  038D                     	;# 
  3568  038E                     	;# 
  3569  0391                     	;# 
  3570  0392                     	;# 
  3571  0393                     	;# 
  3572  0394                     	;# 
  3573  0395                     	;# 
  3574  0396                     	;# 
  3575  039A                     	;# 
  3576  039C                     	;# 
  3577  039D                     	;# 
  3578  039E                     	;# 
  3579  039F                     	;# 
  3580  0415                     	;# 
  3581  0416                     	;# 
  3582  0417                     	;# 
  3583  041C                     	;# 
  3584  041D                     	;# 
  3585  041E                     	;# 
  3586  0FE4                     	;# 
  3587  0FE5                     	;# 
  3588  0FE6                     	;# 
  3589  0FE7                     	;# 
  3590  0FE8                     	;# 
  3591  0FE9                     	;# 
  3592  0FEA                     	;# 
  3593  0FEB                     	;# 
  3594  0FED                     	;# 
  3595  0FEE                     	;# 
  3596  0FEF                     	;_I2cPacket
  3597                           
  3598                           	psect	idataCOMMON
  3599  0800                     __pidataCOMMON:	
  3600                           
  3601                           ;initializer for _LedBehaviourSts
  3602  0800  3401               	retlw	1
  3603                           
  3604                           	psect	idataBANK1
  3605  0002                     __pidataBANK1:	
  3606                           
  3607                           ;initializer for Led_InitSeq@LedInitSts
  3608  0002  3401               	retlw	1
  3609                           
  3610                           ;initializer for _MainSystemTimebaseFlag
  3611  0003  3401               	retlw	1
  3612                           
  3613                           	psect	idataBANK2
  3614  090D                     __pidataBANK2:	
  3615                           
  3616                           ;initializer for _TaskTable
  3617  090D  34E6               	retlw	low _I2c_DataReceiveSm
  3618  090E  3402               	retlw	high _I2c_DataReceiveSm
  3619  090F  3400               	retlw	0
  3620  0910  3400               	retlw	0
  3621  0911  3400               	retlw	0
  3622  0912  3401               	retlw	1
  3623  0913  3400               	retlw	0
  3624  0914  3400               	retlw	0
  3625  0915  34DA               	retlw	low _I2cSlv_MainTask
  3626  0916  3416               	retlw	high _I2cSlv_MainTask
  3627  0917  3400               	retlw	0
  3628  0918  3400               	retlw	0
  3629  0919  3400               	retlw	0
  3630  091A  3401               	retlw	1
  3631  091B  3400               	retlw	0
  3632  091C  3400               	retlw	0
  3633  091D  34EE               	retlw	low _Wdg_MainTask
  3634  091E  3416               	retlw	high _Wdg_MainTask
  3635  091F  3400               	retlw	0
  3636  0920  3400               	retlw	0
  3637  0921  3400               	retlw	0
  3638  0922  34E8               	retlw	232
  3639  0923  3403               	retlw	3
  3640  0924  3400               	retlw	0
  3641  0925  34E1               	retlw	low _Led_MainTask
  3642  0926  3409               	retlw	high _Led_MainTask
  3643  0927  3400               	retlw	0
  3644  0928  3400               	retlw	0
  3645  0929  3400               	retlw	0
  3646  092A  3464               	retlw	100
  3647  092B  3400               	retlw	0
  3648  092C  3400               	retlw	0
  3649  092D  34C9               	retlw	low _App_MainTask
  3650  092E  3401               	retlw	high _App_MainTask
  3651  092F  3400               	retlw	0
  3652  0930  3400               	retlw	0
  3653  0931  3400               	retlw	0
  3654  0932  34E8               	retlw	232
  3655  0933  3403               	retlw	3
  3656  0934  3400               	retlw	0
  3657                           
  3658                           	psect	stringtext1
  3659  180B                     __pstringtext1:	
  3660  180B                     _dpowers:	
  3661  180B  3401               	retlw	1
  3662  180C  3400               	retlw	0
  3663  180D  340A               	retlw	10
  3664  180E  3400               	retlw	0
  3665  180F  3464               	retlw	100
  3666  1810  3400               	retlw	0
  3667  1811  34E8               	retlw	232
  3668  1812  3403               	retlw	3
  3669  1813  3410               	retlw	16
  3670  1814  3427               	retlw	39
  3671  1815                     __end_of_dpowers:	
  3672                           
  3673                           	psect	stringtext2
  3674  1800                     __pstringtext2:	
  3675  1800                     _TaskNumber:	
  3676  1800  3405               	retlw	5
  3677  1801  3400               	retlw	0
  3678  1802                     __end_of_TaskNumber:	
  3679  000E                     _PORTCbits	set	14
  3680  000C                     _PORTAbits	set	12
  3681  001B                     _PR2	set	27
  3682  0013                     _PIR3bits	set	19
  3683  001C                     _T2CONbits	set	28
  3684  000B                     _INTCONbits	set	11
  3685  0011                     _PIR1bits	set	17
  3686  008C                     _TRISAbits	set	140
  3687  0093                     _PIE3bits	set	147
  3688  0097                     _WDTCONbits	set	151
  3689  0095                     _OPTION_REGbits	set	149
  3690  009A                     _OSCSTATbits	set	154
  3691  0099                     _OSCCONbits	set	153
  3692  008E                     _TRISCbits	set	142
  3693  009B                     _ADRESL	set	155
  3694  009C                     _ADRESH	set	156
  3695  0091                     _PIE1bits	set	145
  3696  009E                     _ADCON1bits	set	158
  3697  009D                     _ADCON0bits	set	157
  3698  010E                     _LATC	set	270
  3699  010D                     _LATB	set	269
  3700  010C                     _LATA	set	268
  3701  010E                     _LATCbits	set	270
  3702  0117                     _FVRCONbits	set	279
  3703  018E                     _ANSELCbits	set	398
  3704  018E                     _ANSELC	set	398
  3705  018D                     _ANSELBbits	set	397
  3706  018D                     _ANSELB	set	397
  3707  018C                     _ANSELAbits	set	396
  3708  018C                     _ANSELA	set	396
  3709  020E                     _WPUCbits	set	526
  3710  020E                     _WPUC	set	526
  3711  020D                     _WPUBbits	set	525
  3712  020D                     _WPUB	set	525
  3713  020C                     _WPUAbits	set	524
  3714  020C                     _WPUA	set	524
  3715  0215                     _SSP1CON1bits	set	533
  3716  0211                     _SSP1BUF	set	529
  3717  0213                     _SSP1MSK	set	531
  3718  0212                     _SSP1ADD	set	530
  3719  0217                     _SSP1CON3	set	535
  3720  0215                     _SSP1CON1	set	533
  3721  0214                     _SSP1STAT	set	532
  3722  0216                     _SSP1CON2	set	534
  3723  041D                     _PR6	set	1053
  3724  0416                     _PR4	set	1046
  3725  041E                     _T6CONbits	set	1054
  3726  0417                     _T4CONbits	set	1047
  3727  1802                     STR_4:	
  3728  1802  3430               	retlw	48	;'0'
  3729  1803  3431               	retlw	49	;'1'
  3730  1804  342E               	retlw	46	;'.'
  3731  1805  3430               	retlw	48	;'0'
  3732  1806  3431               	retlw	49	;'1'
  3733  1807  342E               	retlw	46	;'.'
  3734  1808  3430               	retlw	48	;'0'
  3735  1809  3430               	retlw	48	;'0'
  3736  180A  3400               	retlw	0
  3737                           
  3738                           	psect	stringtext3
  3739  1815                     __pstringtext3:	
  3740  1815                     STR_1:	
  3741  1815  3425               	retlw	37	;'%'
  3742  1816  3464               	retlw	100	;'d'
  3743  1817  342E               	retlw	46	;'.'
  3744  1818  3425               	retlw	37	;'%'
  3745  1819  3430               	retlw	48	;'0'
  3746  181A  3431               	retlw	49	;'1'
  3747  181B  3475               	retlw	117	;'u'
  3748  181C  3400               	retlw	0
  3749                           
  3750                           	psect	stringtext4
  3751  181D                     __pstringtext4:	
  3752  181D                     STR_3:	
  3753  181D  3453               	retlw	83	;'S'
  3754  181E  3442               	retlw	66	;'B'
  3755  181F  3433               	retlw	51	;'3'
  3756  1820  3433               	retlw	51	;'3'
  3757  1821  3430               	retlw	48	;'0'
  3758  1822  3400               	retlw	0
  3759                           
  3760                           	psect	stringtext5
  3761  1823                     __pstringtext5:	
  3762  1823                     STR_2:	
  3763  1823  3445               	retlw	69	;'E'
  3764  1824  3443               	retlw	67	;'C'
  3765  1825  3448               	retlw	72	;'H'
  3766  1826  344F               	retlw	79	;'O'
  3767  1827  3400               	retlw	0
  3768                           
  3769                           	psect	stringtext6
  3770  1828                     __pstringtext6:	
  3771  1828                     STR_6:	
  3772  1828  342E               	retlw	46	;'.'
  3773  1829  3400               	retlw	0
  3774                           
  3775                           	psect	stringtext7
  3776  0000                     __pstringtext7:	
  3777  1828                     
  3778                           ; #config settings
  3779  0000                     
  3780                           	psect	cinit
  3781  002D                     start_initialization:	
  3782  002D                     __initialization:		;BIGRAM
  3783                           
  3784                           ; Initialize objects allocated to COMMON
  3785  002D  3188  2000  3180   	fcall	__pidataCOMMON	;fetch initializer
  3786  0030  00F9               	movwf	__pdataCOMMON& (0+127)
  3787                           
  3788                           ; Initialize objects allocated to BANK1
  3789  0031  0021               	movlb	1	; select bank1
  3790  0032  3180  2002  3180   	fcall	__pidataBANK1	;fetch initializer
  3791  0035  00E8               	movwf	__pdataBANK1& (0+127)
  3792  0036  3180  2003  3180   	fcall	__pidataBANK1+1	;fetch initializer
  3793  0039  00E9               	movwf	(__pdataBANK1+1)& (0+127)
  3794                           
  3795                           ; Initialize objects allocated to BANK2
  3796  003A  300D               	movlw	low __pidataBANK2
  3797  003B  0084               	movwf	4
  3798  003C  3089               	movlw	(high __pidataBANK2)| (0+128)
  3799  003D  0085               	movwf	5
  3800  003E  3020               	movlw	low __pdataBANK2
  3801  003F  0086               	movwf	6
  3802  0040  3001               	movlw	high __pdataBANK2
  3803  0041  0087               	movwf	7
  3804  0042  3000               	movlw	0
  3805  0043  00FF               	movwf	btemp+1
  3806  0044  3028               	movlw	40
  3807  0045  3196  264E  3180   	fcall	init_ram
  3808                           
  3809                           ; Clear objects allocated to BIGRAM
  3810  0048  309D               	movlw	low (0+9117)
  3811  0049  0084               	movwf	4
  3812  004A  3023               	movlw	high (0+9117)
  3813  004B  0085               	movwf	5
  3814  004C  3053               	movlw	83
  3815  004D  00FE               	movwf	btemp
  3816  004E  3000               	movlw	0
  3817  004F  00FF               	movwf	btemp+1
  3818  0050  3196  2642  3180   	fcall	clear_ram0
  3819                           
  3820                           ; Clear objects allocated to COMMON
  3821  0053  01F6               	clrf	__pbssCOMMON& (0+127)
  3822  0054  01F7               	clrf	(__pbssCOMMON+1)& (0+127)
  3823  0055  01F8               	clrf	(__pbssCOMMON+2)& (0+127)
  3824                           
  3825                           ; Clear objects allocated to BANK1
  3826  0056  30A0               	movlw	low __pbssBANK1
  3827  0057  0084               	movwf	4
  3828  0058  3000               	movlw	high __pbssBANK1
  3829  0059  0085               	movwf	5
  3830  005A  3048               	movlw	72
  3831  005B  00FE               	movwf	btemp
  3832  005C  3000               	movlw	0
  3833  005D  00FF               	movwf	btemp+1
  3834  005E  3196  2642  3180   	fcall	clear_ram0
  3835                           
  3836                           ; Clear objects allocated to BANK2
  3837  0061  3048               	movlw	low __pbssBANK2
  3838  0062  0084               	movwf	4
  3839  0063  3001               	movlw	high __pbssBANK2
  3840  0064  0085               	movwf	5
  3841  0065  3026               	movlw	38
  3842  0066  00FE               	movwf	btemp
  3843  0067  3000               	movlw	0
  3844  0068  00FF               	movwf	btemp+1
  3845  0069  3196  2642  3180   	fcall	clear_ram0
  3846                           
  3847                           ; Clear objects allocated to BANK3
  3848  006C  30A0               	movlw	low __pbssBANK3
  3849  006D  0084               	movwf	4
  3850  006E  3001               	movlw	high __pbssBANK3
  3851  006F  0085               	movwf	5
  3852  0070  3012               	movlw	18
  3853  0071  00FE               	movwf	btemp
  3854  0072  3000               	movlw	0
  3855  0073  00FF               	movwf	btemp+1
  3856  0074  3196  2642  3180   	fcall	clear_ram0
  3857                           
  3858                           ; Clear objects allocated to BANK4
  3859  0077  3020               	movlw	low __pbssBANK4
  3860  0078  0084               	movwf	4
  3861  0079  3002               	movlw	high __pbssBANK4
  3862  007A  0085               	movwf	5
  3863  007B  3050               	movlw	80
  3864  007C  00FE               	movwf	btemp
  3865  007D  3000               	movlw	0
  3866  007E  00FF               	movwf	btemp+1
  3867  007F  3196  2642  3180   	fcall	clear_ram0
  3868                           
  3869                           ; Clear objects allocated to BANK5
  3870  0082  30A0               	movlw	low __pbssBANK5
  3871  0083  0084               	movwf	4
  3872  0084  3002               	movlw	high __pbssBANK5
  3873  0085  0085               	movwf	5
  3874  0086  3050               	movlw	80
  3875  0087  00FE               	movwf	btemp
  3876  0088  3000               	movlw	0
  3877  0089  00FF               	movwf	btemp+1
  3878  008A  3196  2642  3180   	fcall	clear_ram0
  3879                           
  3880                           ; Clear objects allocated to BANK6
  3881  008D  3020               	movlw	low __pbssBANK6
  3882  008E  0084               	movwf	4
  3883  008F  3003               	movlw	high __pbssBANK6
  3884  0090  0085               	movwf	5
  3885  0091  3050               	movlw	80
  3886  0092  00FE               	movwf	btemp
  3887  0093  3000               	movlw	0
  3888  0094  00FF               	movwf	btemp+1
  3889  0095  3196  2642  3180   	fcall	clear_ram0
  3890                           
  3891                           ; Clear objects allocated to BANK7
  3892  0098  30A0               	movlw	low __pbssBANK7
  3893  0099  0084               	movwf	4
  3894  009A  3003               	movlw	high __pbssBANK7
  3895  009B  0085               	movwf	5
  3896  009C  3050               	movlw	80
  3897  009D  00FE               	movwf	btemp
  3898  009E  3000               	movlw	0
  3899  009F  00FF               	movwf	btemp+1
  3900  00A0  3196  2642         	fcall	clear_ram0
  3901  00A2                     end_of_initialization:	
  3902                           ;End of C runtime variable initialization code
  3903                           
  3904  00A2                     __end_of__initialization:	
  3905  00A2  107E               	bcf	int$flags,0	;clear compiler interrupt flag (level 1)
  3906  00A3  0020               	movlb	0
  3907  00A4  3195  2DDD         	ljmp	_main	;jump to C main() function
  3908                           
  3909                           	psect	bssCOMMON
  3910  0076                     __pbssCOMMON:	
  3911  0076                     _SystemState:	
  3912  0076                     	ds	1
  3913  0077                     _I2cReplyPacketReady:	
  3914  0077                     	ds	2
  3915                           
  3916                           	psect	dataCOMMON
  3917  0079                     __pdataCOMMON:	
  3918  0079                     _LedBehaviourSts:	
  3919  0079                     	ds	1
  3920                           
  3921                           	psect	bssBANK1
  3922  00A0                     __pbssBANK1:	
  3923  00A0                     _Sensor:	
  3924  00A0                     	ds	5
  3925  00A5                     _Humidity:	
  3926  00A5                     	ds	2
  3927  00A7                     _Temperature:	
  3928  00A7                     	ds	2
  3929  00A9                     Led_InitSeq@DelayCounter:	
  3930  00A9                     	ds	2
  3931  00AB                     _InterruptCounter:	
  3932  00AB                     	ds	2
  3933  00AD                     _Tmr6IsrCallback:	
  3934  00AD                     	ds	2
  3935  00AF                     _Tmr4IsrCallback:	
  3936  00AF                     	ds	2
  3937  00B1                     _Tmr2IsrCallback:	
  3938  00B1                     	ds	2
  3939  00B3                     App_MainTask@Counter:	
  3940  00B3                     	ds	1
  3941  00B4                     AppSm@WpuSetCounter:	
  3942  00B4                     	ds	1
  3943  00B5                     AppSm@AppState:	
  3944  00B5                     	ds	1
  3945  00B6                     _ChecksumSts:	
  3946  00B6                     	ds	1
  3947  00B7                     _HumidityDec:	
  3948  00B7                     	ds	1
  3949  00B8                     _HumidityInt:	
  3950  00B8                     	ds	1
  3951  00B9                     _TemperatureDec:	
  3952  00B9                     	ds	1
  3953  00BA                     _TemperatureInt:	
  3954  00BA                     	ds	1
  3955  00BB                     _TempSign:	
  3956  00BB                     	ds	1
  3957  00BC                     Led_InitSeq@InitSeqState:	
  3958  00BC                     	ds	1
  3959  00BD                     Led_InitSeq@Counter:	
  3960  00BD                     	ds	1
  3961  00BE                     I2cSlv_I2cDrvHandle@I2cReceiveMsgState:	
  3962  00BE                     	ds	1
  3963  00BF                     _I2cSlaveAddress:	
  3964  00BF                     	ds	1
  3965  00C0                     _RepBufferLen:	
  3966  00C0                     	ds	1
  3967  00C1                     I2c_DataReceiveSm@ErrorCounter:	
  3968  00C1                     	ds	1
  3969  00C2                     I2c_DataReceiveSm@AddressStored:	
  3970  00C2                     	ds	1
  3971  00C3                     I2c_DataReceiveSm@TxCounter:	
  3972  00C3                     	ds	1
  3973  00C4                     I2c_DataReceiveSm@RxCounter:	
  3974  00C4                     	ds	1
  3975  00C5                     I2c_DataReceiveSm@OpType:	
  3976  00C5                     	ds	1
  3977  00C6                     I2c_DataReceiveSm@I2cRxFlag:	
  3978  00C6                     	ds	1
  3979  00C7                     I2c_DataReceiveSm@I2cRxAddress:	
  3980  00C7                     	ds	1
  3981  00C8                     I2c_DataReceiveSm@I2cRxState:	
  3982  00C8                     	ds	1
  3983  00C9                     _HumidityStr:	
  3984  00C9                     	ds	5
  3985  00CE                     _TemperatureStr:	
  3986  00CE                     	ds	5
  3987  00D3                     _HumidityDecStr:	
  3988  00D3                     	ds	3
  3989  00D6                     _HumidityIntStr:	
  3990  00D6                     	ds	3
  3991  00D9                     _TemperatureDecStr:	
  3992  00D9                     	ds	3
  3993  00DC                     _TemperatureIntStr:	
  3994  00DC                     	ds	3
  3995  00DF                     _I2cWriteRequest:	
  3996  00DF                     	ds	2
  3997  00E1                     _I2cSetAddress:	
  3998  00E1                     	ds	2
  3999  00E3                     _I2cNewTxNotification:	
  4000  00E3                     	ds	2
  4001  00E5                     _I2cNewPacketNotification:	
  4002  00E5                     	ds	2
  4003  00E7                     _Led1Sts:	
  4004  00E7                     	ds	1
  4005                           
  4006                           	psect	dataBANK1
  4007  00E8                     __pdataBANK1:	
  4008  00E8                     Led_InitSeq@LedInitSts:	
  4009  00E8                     	ds	1
  4010  00E9                     _MainSystemTimebaseFlag:	
  4011  00E9                     	ds	1
  4012                           
  4013                           	psect	bssBANK2
  4014  0148                     __pbssBANK2:	
  4015  0148                     App_MainTask@F4113:	
  4016  0148                     	ds	12
  4017  0154                     _I2cConfig:	
  4018  0154                     	ds	11
  4019  015F                     _Led1Blink:	
  4020  015F                     	ds	9
  4021  0168                     _Led1Pulse:	
  4022  0168                     	ds	6
  4023                           
  4024                           	psect	dataBANK2
  4025  0120                     __pdataBANK2:	
  4026  0120                     _TaskTable:	
  4027  0120                     	ds	40
  4028                           
  4029                           	psect	bssBANK3
  4030  01A0                     __pbssBANK3:	
  4031  01A0                     App_MainTask@F4099:	
  4032  01A0                     	ds	18
  4033                           
  4034                           	psect	bssBANK4
  4035  0220                     __pbssBANK4:	
  4036  0220                     _RepBuffer:	
  4037  0220                     	ds	80
  4038                           
  4039                           	psect	bssBANK5
  4040  02A0                     __pbssBANK5:	
  4041  02A0                     _CmdBuffer:	
  4042  02A0                     	ds	80
  4043                           
  4044                           	psect	bssBANK6
  4045  0320                     __pbssBANK6:	
  4046  0320                     _I2cTxBuffer:	
  4047  0320                     	ds	80
  4048                           
  4049                           	psect	bssBANK7
  4050  03A0                     __pbssBANK7:	
  4051  03A0                     _I2cRxBuffer:	
  4052  03A0                     	ds	80
  4053                           
  4054                           	psect	inittext
  4055  164E                     init_ram:	
  4056  164E  00FE               	movwf	126
  4057  164F                     initloop:	
  4058  164F  0012               	moviw fsr0++
  4059  1650  001E               	movwi fsr1++
  4060  1651  3001               	movlw	1
  4061  1652  02FE               	subwf	126,f
  4062  1653  3000               	movlw	0
  4063  1654  3BFF               	subwfb	127,f
  4064  1655  087F               	movf	127,w
  4065  1656  047E               	iorwf	126,w
  4066  1657  1903               	btfsc	3,2
  4067  1658  3400               	retlw	0
  4068  1659  2E4F               	goto	initloop
  4069                           
  4070                           	psect	clrtext
  4071  1642                     clear_ram0:	
  4072                           ;	Called with FSR0 containing the base address, and
  4073                           ;	btemp/btemp+1 has the size to clear
  4074                           
  4075  1642  0064               	clrwdt	;clear the watchdog before getting into this loop
  4076  1643                     clrloop0:	
  4077  1643  0180               	clrf	0	;clear RAM location pointed to by FSR
  4078  1644  3101               	addfsr 0,1
  4079  1645  3001               	movlw	1
  4080  1646  02FE               	subwf	126,f
  4081  1647  3000               	movlw	0
  4082  1648  3BFF               	subwfb	127,f
  4083  1649  087F               	movf	127,w
  4084  164A  047E               	iorwf	126,w
  4085  164B  1903               	btfsc	3,2
  4086  164C  3400               	retlw	0	;all done for this memory range, return
  4087  164D  2E43               	goto	clrloop0	;have we reached the end yet?
  4088                           
  4089                           	psect	cstackCOMMON
  4090  0070                     __pcstackCOMMON:	
  4091  0070                     ?_SystemInit:	
  4092  0070                     ?_MainScheduler:	
  4093                           ; 1 bytes @ 0x0
  4094                           
  4095  0070                     ?_ReceiveEvt:	
  4096                           ; 1 bytes @ 0x0
  4097                           
  4098  0070                     ?_Mcu_Reset:	
  4099                           ; 1 bytes @ 0x0
  4100                           
  4101  0070                     ?_GenerateEvt:	
  4102                           ; 1 bytes @ 0x0
  4103                           
  4104  0070                     ?_InitializeTasks:	
  4105                           ; 1 bytes @ 0x0
  4106                           
  4107  0070                     ?_ScheduleTasks:	
  4108                           ; 1 bytes @ 0x0
  4109                           
  4110  0070                     ?_I2cSlv_I2cDrvHandle:	
  4111                           ; 1 bytes @ 0x0
  4112                           
  4113  0070                     ?_SetLedBehavSts:	
  4114                           ; 1 bytes @ 0x0
  4115                           
  4116  0070                     ?_Adc_ConfigAnCh:	
  4117                           ; 1 bytes @ 0x0
  4118                           
  4119  0070                     ?_Adc_InitAdcModule:	
  4120                           ; 1 bytes @ 0x0
  4121                           
  4122  0070                     ?_Adc_SelectChannel:	
  4123                           ; 1 bytes @ 0x0
  4124                           
  4125  0070                     ?_Adc_StartConversion:	
  4126                           ; 1 bytes @ 0x0
  4127                           
  4128  0070                     ?_Adc_GetConvSts:	
  4129                           ; 1 bytes @ 0x0
  4130                           
  4131  0070                     ?_CheckAckStatus:	
  4132                           ; 1 bytes @ 0x0
  4133                           
  4134  0070                     ?_CheckByteStatus:	
  4135                           ; 1 bytes @ 0x0
  4136                           
  4137  0070                     ?_CheckStopBitStatus:	
  4138                           ; 1 bytes @ 0x0
  4139                           
  4140  0070                     ?_ClearRxBuffer:	
  4141                           ; 1 bytes @ 0x0
  4142                           
  4143  0070                     ?_ClearTxBuffer:	
  4144                           ; 1 bytes @ 0x0
  4145                           
  4146  0070                     ?_I2c_InitI2cModule:	
  4147                           ; 1 bytes @ 0x0
  4148                           
  4149  0070                     ?_I2c_SetI2cAddress:	
  4150                           ; 1 bytes @ 0x0
  4151                           
  4152  0070                     ?_I2c_SetI2cAddressMask:	
  4153                           ; 1 bytes @ 0x0
  4154                           
  4155  0070                     ?_LedBlinkStateMachine:	
  4156                           ; 1 bytes @ 0x0
  4157                           
  4158  0070                     ?_Mcu_EnableInterrupts:	
  4159                           ; 1 bytes @ 0x0
  4160                           
  4161  0070                     ?_Mcu_EnableSchedulerInt:	
  4162                           ; 1 bytes @ 0x0
  4163                           
  4164  0070                     ?_Mcu_DisableSchedulerInt:	
  4165                           ; 1 bytes @ 0x0
  4166                           
  4167  0070                     ?_Mcu_StartSystemPll:	
  4168                           ; 1 bytes @ 0x0
  4169                           
  4170  0070                     ?_Mcu_SetPullUpsSts:	
  4171                           ; 1 bytes @ 0x0
  4172                           
  4173  0070                     ?_Mcu_ConfigPullUps:	
  4174                           ; 1 bytes @ 0x0
  4175                           
  4176  0070                     ?_Mcu_SetWdgPeriod:	
  4177                           ; 1 bytes @ 0x0
  4178                           
  4179  0070                     ?_Mcu_SetWdgSts:	
  4180                           ; 1 bytes @ 0x0
  4181                           
  4182  0070                     ?_Mcu_ClearWdg:	
  4183                           ; 1 bytes @ 0x0
  4184                           
  4185  0070                     ?_Mcu_SetDieTempSts:	
  4186                           ; 1 bytes @ 0x0
  4187                           
  4188  0070                     ?_Mcu_SetDieTempMode:	
  4189                           ; 1 bytes @ 0x0
  4190                           
  4191  0070                     ?_Tmr_StartTmr:	
  4192                           ; 1 bytes @ 0x0
  4193                           
  4194  0070                     ?_Dht_RequestData:	
  4195                           ; 1 bytes @ 0x0
  4196                           
  4197  0070                     ?_Dht_ReadByte:	
  4198                           ; 1 bytes @ 0x0
  4199                           
  4200  0070                     ?_Dht_ReadData:	
  4201                           ; 1 bytes @ 0x0
  4202                           
  4203  0070                     ?_Dht_GetSensorData:	
  4204                           ; 1 bytes @ 0x0
  4205                           
  4206  0070                     ?_MainInterrupt:	
  4207                           ; 1 bytes @ 0x0
  4208                           
  4209  0070                     ?_I2c_SetConfig:	
  4210                           ; 1 bytes @ 0x0
  4211                           
  4212  0070                     ?_Led_InitSeq:	
  4213                           ; 1 bytes @ 0x0
  4214                           
  4215  0070                     ?_ControlLedDirect:	
  4216                           ; 1 bytes @ 0x0
  4217                           
  4218  0070                     ?_BoardReset:	
  4219                           ; 1 bytes @ 0x0
  4220                           
  4221  0070                     ?_LowPowerMode:	
  4222                           ; 1 bytes @ 0x0
  4223                           
  4224  0070                     ?_StdS_ManageStdServices:	
  4225                           ; 1 bytes @ 0x0
  4226                           
  4227  0070                     ?_StdS_SetI2cAddress:	
  4228                           ; 1 bytes @ 0x0
  4229                           
  4230  0070                     ?_ManageProtocol:	
  4231                           ; 1 bytes @ 0x0
  4232                           
  4233  0070                     ?_AppSm:	
  4234                           ; 1 bytes @ 0x0
  4235                           
  4236  0070                     ?_InitSchTimer:	
  4237                           ; 1 bytes @ 0x0
  4238                           
  4239  0070                     ?i1_GenerateEvt:	
  4240                           ; 1 bytes @ 0x0
  4241                           
  4242  0070                     ??i1_GenerateEvt:	
  4243                           ; 1 bytes @ 0x0
  4244                           
  4245  0070                     ?_main:	
  4246                           ; 1 bytes @ 0x0
  4247                           
  4248                           
  4249                           ; 2 bytes @ 0x0
  4250  0070                     	ds	1
  4251  0071                     i1GenerateEvt@Event:	
  4252                           
  4253                           ; 1 bytes @ 0x1
  4254  0071                     	ds	1
  4255  0072                     i1GenerateEvt@EventStatus:	
  4256                           
  4257                           ; 1 bytes @ 0x2
  4258  0072                     	ds	1
  4259  0073                     ??_MainInterrupt:	
  4260                           
  4261                           ; 1 bytes @ 0x3
  4262  0073                     	ds	1
  4263  0074                     ??_ReceiveEvt:	
  4264  0074                     ??_Mcu_Reset:	
  4265                           ; 1 bytes @ 0x4
  4266                           
  4267  0074                     ??_GenerateEvt:	
  4268                           ; 1 bytes @ 0x4
  4269                           
  4270  0074                     ?_Led_SetLedStatus:	
  4271                           ; 1 bytes @ 0x4
  4272                           
  4273  0074                     ?_strcpy:	
  4274                           ; 1 bytes @ 0x4
  4275                           
  4276  0074                     ?_strcat:	
  4277                           ; 1 bytes @ 0x4
  4278                           
  4279  0074                     ??_Adc_ConfigAnCh:	
  4280                           ; 1 bytes @ 0x4
  4281                           
  4282  0074                     ??_Adc_InitAdcModule:	
  4283                           ; 1 bytes @ 0x4
  4284                           
  4285  0074                     ??_Adc_SelectChannel:	
  4286                           ; 1 bytes @ 0x4
  4287                           
  4288  0074                     ??_Adc_StartConversion:	
  4289                           ; 1 bytes @ 0x4
  4290                           
  4291  0074                     ??_Adc_GetConvSts:	
  4292                           ; 1 bytes @ 0x4
  4293                           
  4294  0074                     ??_CheckAckStatus:	
  4295                           ; 1 bytes @ 0x4
  4296                           
  4297  0074                     ??_CheckByteStatus:	
  4298                           ; 1 bytes @ 0x4
  4299                           
  4300  0074                     ??_CheckStopBitStatus:	
  4301                           ; 1 bytes @ 0x4
  4302                           
  4303  0074                     ??_ClearRxBuffer:	
  4304                           ; 1 bytes @ 0x4
  4305                           
  4306  0074                     ??_ClearTxBuffer:	
  4307                           ; 1 bytes @ 0x4
  4308                           
  4309  0074                     ??_I2c_SetI2cAddress:	
  4310                           ; 1 bytes @ 0x4
  4311                           
  4312  0074                     ??_I2c_SetI2cAddressMask:	
  4313                           ; 1 bytes @ 0x4
  4314                           
  4315  0074                     ?_I2c_UpdateTxBuffer:	
  4316                           ; 1 bytes @ 0x4
  4317                           
  4318  0074                     ??_Mcu_EnableInterrupts:	
  4319                           ; 1 bytes @ 0x4
  4320                           
  4321  0074                     ??_Mcu_EnableSchedulerInt:	
  4322                           ; 1 bytes @ 0x4
  4323                           
  4324  0074                     ??_Mcu_DisableSchedulerInt:	
  4325                           ; 1 bytes @ 0x4
  4326                           
  4327  0074                     ??_Mcu_StartSystemPll:	
  4328                           ; 1 bytes @ 0x4
  4329                           
  4330  0074                     ??_Mcu_SetPullUpsSts:	
  4331                           ; 1 bytes @ 0x4
  4332                           
  4333  0074                     ??_Mcu_ConfigPullUps:	
  4334                           ; 1 bytes @ 0x4
  4335                           
  4336  0074                     ??_Mcu_SetWdgPeriod:	
  4337                           ; 1 bytes @ 0x4
  4338                           
  4339  0074                     ??_Mcu_SetWdgSts:	
  4340                           ; 1 bytes @ 0x4
  4341                           
  4342  0074                     ??_Mcu_ClearWdg:	
  4343                           ; 1 bytes @ 0x4
  4344                           
  4345  0074                     ??_Mcu_SetDieTempSts:	
  4346                           ; 1 bytes @ 0x4
  4347                           
  4348  0074                     ??_Mcu_SetDieTempMode:	
  4349                           ; 1 bytes @ 0x4
  4350                           
  4351  0074                     ?_TmrBInit:	
  4352                           ; 1 bytes @ 0x4
  4353                           
  4354  0074                     ?_Tmr_TmrBIrqSet:	
  4355                           ; 1 bytes @ 0x4
  4356                           
  4357  0074                     ??_Tmr_StartTmr:	
  4358                           ; 1 bytes @ 0x4
  4359                           
  4360  0074                     ??_Dht_RequestData:	
  4361                           ; 1 bytes @ 0x4
  4362                           
  4363  0074                     ??_Dht_ReadByte:	
  4364                           ; 1 bytes @ 0x4
  4365                           
  4366  0074                     ??_Dht_CalculateChecksum:	
  4367                           ; 1 bytes @ 0x4
  4368                           
  4369  0074                     ??_I2c_SetConfig:	
  4370                           ; 1 bytes @ 0x4
  4371                           
  4372  0074                     ??_Led_SetLedBlinkTime:	
  4373                           ; 1 bytes @ 0x4
  4374                           
  4375  0074                     ?_Led_SetLedPulseTime:	
  4376                           ; 1 bytes @ 0x4
  4377                           
  4378  0074                     ??_SetBuffer:	
  4379                           ; 1 bytes @ 0x4
  4380                           
  4381  0074                     ??_BoardReset:	
  4382                           ; 1 bytes @ 0x4
  4383                           
  4384  0074                     ??_StdS_SetI2cAddress:	
  4385                           ; 1 bytes @ 0x4
  4386                           
  4387  0074                     ??___wmul:	
  4388                           ; 1 bytes @ 0x4
  4389                           
  4390  0074                     ??___awdiv:	
  4391                           ; 1 bytes @ 0x4
  4392                           
  4393  0074                     ??___awmod:	
  4394                           ; 1 bytes @ 0x4
  4395                           
  4396  0074                     ??___lldiv:	
  4397                           ; 1 bytes @ 0x4
  4398                           
  4399  0074                     ??___lwdiv:	
  4400                           ; 1 bytes @ 0x4
  4401                           
  4402  0074                     ??___lwmod:	
  4403                           ; 1 bytes @ 0x4
  4404                           
  4405  0074                     ?_Adc_GetConvResult:	
  4406                           ; 1 bytes @ 0x4
  4407                           
  4408  0074                     Adc_ConfigAnCh@AnChSel:	
  4409                           ; 2 bytes @ 0x4
  4410                           
  4411  0074                     Adc_InitAdcModule@AdcConfig:	
  4412                           ; 1 bytes @ 0x4
  4413                           
  4414  0074                     I2c_SetI2cAddress@SlaveAddress:	
  4415                           ; 1 bytes @ 0x4
  4416                           
  4417  0074                     I2c_SetI2cAddressMask@SlaveAddressMask:	
  4418                           ; 1 bytes @ 0x4
  4419                           
  4420  0074                     I2c_UpdateTxBuffer@Length:	
  4421                           ; 1 bytes @ 0x4
  4422                           
  4423  0074                     Mcu_SetPullUpsSts@PuSts:	
  4424                           ; 1 bytes @ 0x4
  4425                           
  4426  0074                     Mcu_ConfigPullUps@WpuCh:	
  4427                           ; 1 bytes @ 0x4
  4428                           
  4429  0074                     Mcu_SetWdgSts@WdgSts:	
  4430                           ; 1 bytes @ 0x4
  4431                           
  4432  0074                     Mcu_SetDieTempSts@DieTempSts:	
  4433                           ; 1 bytes @ 0x4
  4434                           
  4435  0074                     Mcu_SetDieTempMode@DieTempMode:	
  4436                           ; 1 bytes @ 0x4
  4437                           
  4438  0074                     TmrBInit@Prescaler:	
  4439                           ; 1 bytes @ 0x4
  4440                           
  4441  0074                     Tmr_TmrBIrqSet@TmrIrqSts:	
  4442                           ; 1 bytes @ 0x4
  4443                           
  4444  0074                     Tmr_StartTmr@TmrNumb:	
  4445                           ; 1 bytes @ 0x4
  4446                           
  4447  0074                     ReceiveEvt@EventStatus:	
  4448                           ; 1 bytes @ 0x4
  4449                           
  4450  0074                     Led_SetLedStatus@LedSts:	
  4451                           ; 1 bytes @ 0x4
  4452                           
  4453  0074                     Led_SetLedBlinkTime@Led:	
  4454                           ; 1 bytes @ 0x4
  4455                           
  4456  0074                     StringCopy@Index:	
  4457                           ; 1 bytes @ 0x4
  4458                           
  4459  0074                     strcpy@from:	
  4460                           ; 1 bytes @ 0x4
  4461                           
  4462  0074                     Led_SetLedPulseTime@PulseTimeMs:	
  4463                           ; 1 bytes @ 0x4
  4464                           
  4465  0074                     ___wmul@product:	
  4466                           ; 2 bytes @ 0x4
  4467                           
  4468  0074                     strcat@from:	
  4469                           ; 2 bytes @ 0x4
  4470                           
  4471                           
  4472                           ; 2 bytes @ 0x4
  4473  0074                     	ds	1
  4474  0075                     ??_Led_SetLedStatus:	
  4475  0075                     ??_strcpy:	
  4476                           ; 1 bytes @ 0x5
  4477                           
  4478  0075                     ??_Tmr_TmrBIrqSet:	
  4479                           ; 1 bytes @ 0x5
  4480                           
  4481  0075                     ??_LowPowerMode:	
  4482                           ; 1 bytes @ 0x5
  4483                           
  4484  0075                     Adc_SelectChannel@SelCh:	
  4485                           ; 1 bytes @ 0x5
  4486                           
  4487  0075                     ClearRxBuffer@Index:	
  4488                           ; 1 bytes @ 0x5
  4489                           
  4490  0075                     ClearTxBuffer@Index:	
  4491                           ; 1 bytes @ 0x5
  4492                           
  4493  0075                     LedBlinkStateMachine@LedBlink:	
  4494                           ; 1 bytes @ 0x5
  4495                           
  4496  0075                     Mcu_SetWdgPeriod@WdgPeriod:	
  4497                           ; 1 bytes @ 0x5
  4498                           
  4499  0075                     TmrBInit@Postscaler:	
  4500                           ; 1 bytes @ 0x5
  4501                           
  4502  0075                     Tmr_TmrBIrqSet@TmrNumb:	
  4503                           ; 1 bytes @ 0x5
  4504                           
  4505  0075                     ReceiveEvt@Event:	
  4506                           ; 1 bytes @ 0x5
  4507                           
  4508  0075                     ___lwmod@counter:	
  4509                           ; 1 bytes @ 0x5
  4510                           
  4511                           
  4512                           ; 1 bytes @ 0x5
  4513  0075                     	ds	1
  4514  0076                     ??_SystemInit:	
  4515  0076                     ??_MainScheduler:	
  4516                           ; 1 bytes @ 0x6
  4517                           
  4518  0076                     ??_I2cSlv_MainTask:	
  4519                           ; 1 bytes @ 0x6
  4520                           
  4521  0076                     ??_Wdg_MainTask:	
  4522                           ; 1 bytes @ 0x6
  4523                           
  4524  0076                     ??_main:	
  4525                           ; 1 bytes @ 0x6
  4526                           
  4527  0076                     ??_Dht_GetSensorData:	
  4528                           ; 1 bytes @ 0x6
  4529                           
  4530  0076                     ??_Led_SetLedPulseTime:	
  4531                           ; 1 bytes @ 0x6
  4532                           
  4533  0076                     ??_ControlLedDirect:	
  4534                           ; 1 bytes @ 0x6
  4535                           
  4536  0076                     ??_GetDieTemperature:	
  4537                           ; 1 bytes @ 0x6
  4538                           
  4539  0076                     ??___lmul:	
  4540                           ; 1 bytes @ 0x6
  4541                           
  4542                           
  4543                           	psect	cstackBANK0
  4544  0020                     __pcstackBANK0:	
  4545                           ; 1 bytes @ 0x6
  4546                           
  4547  0020                     ??_strcat:	
  4548  0020                     ??_Adc_GetConvResult:	
  4549                           ; 1 bytes @ 0x0
  4550                           
  4551  0020                     ??_I2c_InitI2cModule:	
  4552                           ; 1 bytes @ 0x0
  4553                           
  4554  0020                     ??_I2c_UpdateTxBuffer:	
  4555                           ; 1 bytes @ 0x0
  4556                           
  4557  0020                     ??_TmrBInit:	
  4558                           ; 1 bytes @ 0x0
  4559                           
  4560  0020                     ?_Dht_CalculateChecksum:	
  4561                           ; 1 bytes @ 0x0
  4562                           
  4563  0020                     ?_Led_SetLedBlinkTime:	
  4564                           ; 1 bytes @ 0x0
  4565                           
  4566  0020                     ?_StringCopy:	
  4567                           ; 1 bytes @ 0x0
  4568                           
  4569  0020                     ?_SetBuffer:	
  4570                           ; 1 bytes @ 0x0
  4571                           
  4572  0020                     ?___wmul:	
  4573                           ; 1 bytes @ 0x0
  4574                           
  4575  0020                     ?___awdiv:	
  4576                           ; 2 bytes @ 0x0
  4577                           
  4578  0020                     ?___awmod:	
  4579                           ; 2 bytes @ 0x0
  4580                           
  4581  0020                     ?___lwdiv:	
  4582                           ; 2 bytes @ 0x0
  4583                           
  4584  0020                     ?___lwmod:	
  4585                           ; 2 bytes @ 0x0
  4586                           
  4587  0020                     ?___lldiv:	
  4588                           ; 2 bytes @ 0x0
  4589                           
  4590  0020                     Dht_ReadByte@Data:	
  4591                           ; 4 bytes @ 0x0
  4592                           
  4593  0020                     GenerateEvt@EventStatus:	
  4594                           ; 1 bytes @ 0x0
  4595                           
  4596  0020                     Led_SetLedStatus@Led:	
  4597                           ; 1 bytes @ 0x0
  4598                           
  4599  0020                     Led_SetLedPulseTime@Led:	
  4600                           ; 1 bytes @ 0x0
  4601                           
  4602  0020                     SetBuffer@Value:	
  4603                           ; 1 bytes @ 0x0
  4604                           
  4605  0020                     strcpy@cp:	
  4606                           ; 1 bytes @ 0x0
  4607                           
  4608  0020                     Led_SetLedBlinkTime@OnTimeMs:	
  4609                           ; 1 bytes @ 0x0
  4610                           
  4611  0020                     StringCopy@SourceStr:	
  4612                           ; 2 bytes @ 0x0
  4613                           
  4614  0020                     ___wmul@multiplier:	
  4615                           ; 2 bytes @ 0x0
  4616                           
  4617  0020                     ___awdiv@divisor:	
  4618                           ; 2 bytes @ 0x0
  4619                           
  4620  0020                     ___awmod@divisor:	
  4621                           ; 2 bytes @ 0x0
  4622                           
  4623  0020                     ___lwdiv@divisor:	
  4624                           ; 2 bytes @ 0x0
  4625                           
  4626  0020                     ___lwmod@divisor:	
  4627                           ; 2 bytes @ 0x0
  4628                           
  4629  0020                     ___lldiv@divisor:	
  4630                           ; 2 bytes @ 0x0
  4631                           
  4632  0020                     Dht_CalculateChecksum@Sens:	
  4633                           ; 4 bytes @ 0x0
  4634                           
  4635                           
  4636                           ; 5 bytes @ 0x0
  4637  0020                     	ds	1
  4638  0021                     ??_Led_InitSeq:	
  4639  0021                     TmrBInit@TmrNumb:	
  4640                           ; 1 bytes @ 0x1
  4641                           
  4642  0021                     GenerateEvt@Event:	
  4643                           ; 1 bytes @ 0x1
  4644                           
  4645  0021                     strcat@to:	
  4646                           ; 1 bytes @ 0x1
  4647                           
  4648  0021                     strcpy@to:	
  4649                           ; 1 bytes @ 0x1
  4650                           
  4651  0021                     Adc_GetConvResult@AdcResult:	
  4652                           ; 1 bytes @ 0x1
  4653                           
  4654  0021                     Dht_ReadByte@Counter:	
  4655                           ; 2 bytes @ 0x1
  4656                           
  4657  0021                     SetBuffer@Len:	
  4658                           ; 2 bytes @ 0x1
  4659                           
  4660                           
  4661                           ; 2 bytes @ 0x1
  4662  0021                     	ds	1
  4663  0022                     I2c_InitI2cModule@I2cConfig:	
  4664  0022                     I2c_UpdateTxBuffer@DataBuffer:	
  4665                           ; 1 bytes @ 0x2
  4666                           
  4667  0022                     StringCopy@DestStr:	
  4668                           ; 1 bytes @ 0x2
  4669                           
  4670  0022                     strcat@cp:	
  4671                           ; 1 bytes @ 0x2
  4672                           
  4673  0022                     Led_SetLedBlinkTime@OffTimeMs:	
  4674                           ; 1 bytes @ 0x2
  4675                           
  4676  0022                     ___wmul@multiplicand:	
  4677                           ; 2 bytes @ 0x2
  4678                           
  4679  0022                     ___awdiv@dividend:	
  4680                           ; 2 bytes @ 0x2
  4681                           
  4682  0022                     ___awmod@dividend:	
  4683                           ; 2 bytes @ 0x2
  4684                           
  4685  0022                     ___lwdiv@dividend:	
  4686                           ; 2 bytes @ 0x2
  4687                           
  4688  0022                     ___lwmod@dividend:	
  4689                           ; 2 bytes @ 0x2
  4690                           
  4691                           
  4692                           ; 2 bytes @ 0x2
  4693  0022                     	ds	1
  4694  0023                     ?_GetDieTemperature:	
  4695  0023                     I2c_UpdateTxBuffer@Index:	
  4696                           ; 2 bytes @ 0x3
  4697                           
  4698  0023                     Dht_ReadByte@Index:	
  4699                           ; 1 bytes @ 0x3
  4700                           
  4701  0023                     StringCopy@Len:	
  4702                           ; 1 bytes @ 0x3
  4703                           
  4704  0023                     SetBuffer@Buffer:	
  4705                           ; 1 bytes @ 0x3
  4706                           
  4707                           
  4708                           ; 1 bytes @ 0x3
  4709  0023                     	ds	1
  4710  0024                     ??_I2cSlv_I2cDrvHandle:	
  4711  0024                     ??_SetLedBehavSts:	
  4712                           ; 1 bytes @ 0x4
  4713                           
  4714  0024                     ??_Dht_ReadData:	
  4715                           ; 1 bytes @ 0x4
  4716                           
  4717  0024                     ??_StringCopy:	
  4718                           ; 1 bytes @ 0x4
  4719                           
  4720  0024                     ?___lmul:	
  4721                           ; 1 bytes @ 0x4
  4722                           
  4723  0024                     SetBuffer@Index:	
  4724                           ; 4 bytes @ 0x4
  4725                           
  4726  0024                     ___awdiv@counter:	
  4727                           ; 1 bytes @ 0x4
  4728                           
  4729  0024                     ___awmod@counter:	
  4730                           ; 1 bytes @ 0x4
  4731                           
  4732  0024                     ___lwdiv@counter:	
  4733                           ; 1 bytes @ 0x4
  4734                           
  4735  0024                     ___lmul@multiplier:	
  4736                           ; 1 bytes @ 0x4
  4737                           
  4738  0024                     ___lldiv@dividend:	
  4739                           ; 4 bytes @ 0x4
  4740                           
  4741                           
  4742                           ; 4 bytes @ 0x4
  4743  0024                     	ds	1
  4744  0025                     Dht_ReadData@Index:	
  4745  0025                     Dht_CalculateChecksum@Checksum:	
  4746                           ; 1 bytes @ 0x5
  4747                           
  4748  0025                     SetLedBehavSts@LedBehav:	
  4749                           ; 1 bytes @ 0x5
  4750                           
  4751  0025                     ___awdiv@sign:	
  4752                           ; 1 bytes @ 0x5
  4753                           
  4754  0025                     ___awmod@sign:	
  4755                           ; 1 bytes @ 0x5
  4756                           
  4757  0025                     GetDieTemperature@DieTempRes:	
  4758                           ; 1 bytes @ 0x5
  4759                           
  4760  0025                     ___lwdiv@quotient:	
  4761                           ; 2 bytes @ 0x5
  4762                           
  4763                           
  4764                           ; 2 bytes @ 0x5
  4765  0025                     	ds	1
  4766  0026                     Dht_CalculateChecksum@Ret:	
  4767  0026                     ___awdiv@quotient:	
  4768                           ; 1 bytes @ 0x6
  4769                           
  4770                           
  4771                           ; 2 bytes @ 0x6
  4772  0026                     	ds	1
  4773  0027                     ?_utoa:	
  4774  0027                     ??_LedBlinkStateMachine:	
  4775                           ; 1 bytes @ 0x7
  4776                           
  4777  0027                     ?_LedPulseStateMachine:	
  4778                           ; 1 bytes @ 0x7
  4779                           
  4780  0027                     LedPulseStateMachine@Led:	
  4781                           ; 1 bytes @ 0x7
  4782                           
  4783  0027                     Dht_CalculateChecksum@Index:	
  4784                           ; 1 bytes @ 0x7
  4785                           
  4786  0027                     utoa@val:	
  4787                           ; 1 bytes @ 0x7
  4788                           
  4789                           
  4790                           ; 2 bytes @ 0x7
  4791  0027                     	ds	1
  4792  0028                     ??_LedPulseStateMachine:	
  4793  0028                     Dht_GetSensorData@Ret:	
  4794                           ; 1 bytes @ 0x8
  4795                           
  4796  0028                     ___lmul@multiplicand:	
  4797                           ; 1 bytes @ 0x8
  4798                           
  4799  0028                     ___lldiv@quotient:	
  4800                           ; 4 bytes @ 0x8
  4801                           
  4802                           
  4803                           ; 4 bytes @ 0x8
  4804  0028                     	ds	1
  4805  0029                     I2cSlv_I2cDrvHandle@Index:	
  4806  0029                     utoa@base:	
  4807                           ; 1 bytes @ 0x9
  4808                           
  4809                           
  4810                           ; 2 bytes @ 0x9
  4811  0029                     	ds	1
  4812  002A                     LedPulseStateMachine@LedPulse:	
  4813                           
  4814                           ; 1 bytes @ 0xA
  4815  002A                     	ds	1
  4816  002B                     ??_utoa:	
  4817  002B                     ?_LedStateMachine:	
  4818                           ; 1 bytes @ 0xB
  4819                           
  4820  002B                     LedStateMachine@LedSts:	
  4821                           ; 1 bytes @ 0xB
  4822                           
  4823                           
  4824                           ; 1 bytes @ 0xB
  4825  002B                     	ds	1
  4826  002C                     LedStateMachine@LedBlink:	
  4827  002C                     ___lldiv@counter:	
  4828                           ; 1 bytes @ 0xC
  4829                           
  4830  002C                     utoa@v:	
  4831                           ; 1 bytes @ 0xC
  4832                           
  4833  002C                     ___lmul@product:	
  4834                           ; 2 bytes @ 0xC
  4835                           
  4836                           
  4837                           ; 4 bytes @ 0xC
  4838  002C                     	ds	1
  4839  002D                     LedStateMachine@LedPulse:	
  4840                           
  4841                           ; 1 bytes @ 0xD
  4842  002D                     	ds	1
  4843  002E                     ??_LedStateMachine:	
  4844  002E                     utoa@c:	
  4845                           ; 1 bytes @ 0xE
  4846                           
  4847                           
  4848                           ; 1 bytes @ 0xE
  4849  002E                     	ds	1
  4850  002F                     utoa@buf:	
  4851                           
  4852                           ; 1 bytes @ 0xF
  4853  002F                     	ds	1
  4854  0030                     ?_itoa:	
  4855  0030                     ?_Tmr_TmrBPrSet:	
  4856                           ; 1 bytes @ 0x10
  4857                           
  4858  0030                     ??_StdS_ManageStdServices:	
  4859                           ; 1 bytes @ 0x10
  4860                           
  4861  0030                     LedStateMachine@Led:	
  4862                           ; 1 bytes @ 0x10
  4863                           
  4864  0030                     Tmr_TmrBPrSet@IntFreqHz:	
  4865                           ; 1 bytes @ 0x10
  4866                           
  4867  0030                     itoa@val:	
  4868                           ; 2 bytes @ 0x10
  4869                           
  4870                           
  4871                           ; 2 bytes @ 0x10
  4872  0030                     	ds	1
  4873  0031                     LedStateMachine@LedOutSts:	
  4874                           
  4875                           ; 1 bytes @ 0x11
  4876  0031                     	ds	1
  4877  0032                     Tmr_TmrBPrSet@Prescaler:	
  4878  0032                     itoa@base:	
  4879                           ; 1 bytes @ 0x12
  4880                           
  4881  0032                     StdS_ManageStdServices@DieTempStr:	
  4882                           ; 2 bytes @ 0x12
  4883                           
  4884                           
  4885                           ; 4 bytes @ 0x12
  4886  0032                     	ds	1
  4887  0033                     Tmr_TmrBPrSet@Postscaler:	
  4888                           
  4889                           ; 1 bytes @ 0x13
  4890  0033                     	ds	1
  4891  0034                     ??_itoa:	
  4892  0034                     ??_Tmr_TmrBPrSet:	
  4893                           ; 1 bytes @ 0x14
  4894                           
  4895                           
  4896                           ; 1 bytes @ 0x14
  4897  0034                     	ds	1
  4898  0035                     itoa@cp:	
  4899                           
  4900                           ; 1 bytes @ 0x15
  4901  0035                     	ds	1
  4902  0036                     itoa@buf:	
  4903  0036                     StdS_ManageStdServices@DieTemp:	
  4904                           ; 1 bytes @ 0x16
  4905                           
  4906                           
  4907                           ; 2 bytes @ 0x16
  4908  0036                     	ds	2
  4909  0038                     ??_ManageProtocol:	
  4910                           
  4911                           ; 1 bytes @ 0x18
  4912  0038                     	ds	2
  4913  003A                     ??_AppSm:	
  4914                           
  4915                           ; 1 bytes @ 0x1A
  4916  003A                     	ds	1
  4917  003B                     ?_I2cSlv_MainTask:	
  4918  003B                     ?_Wdg_MainTask:	
  4919                           ; 1 bytes @ 0x1B
  4920                           
  4921  003B                     ?_Led_MainTask:	
  4922                           ; 1 bytes @ 0x1B
  4923                           
  4924  003B                     ?_App_MainTask:	
  4925                           ; 1 bytes @ 0x1B
  4926                           
  4927  003B                     ?_I2c_DataReceiveSm:	
  4928                           ; 1 bytes @ 0x1B
  4929                           
  4930  003B                     I2c_DataReceiveSm@Options:	
  4931                           ; 1 bytes @ 0x1B
  4932                           
  4933  003B                     I2cSlv_MainTask@Options:	
  4934                           ; 1 bytes @ 0x1B
  4935                           
  4936  003B                     Led_MainTask@Options:	
  4937                           ; 1 bytes @ 0x1B
  4938                           
  4939  003B                     Wdg_MainTask@Options:	
  4940                           ; 1 bytes @ 0x1B
  4941                           
  4942  003B                     App_MainTask@Options:	
  4943                           ; 1 bytes @ 0x1B
  4944                           
  4945                           
  4946                           ; 1 bytes @ 0x1B
  4947  003B                     	ds	1
  4948  003C                     ??_Led_MainTask:	
  4949  003C                     ??_App_MainTask:	
  4950                           ; 1 bytes @ 0x1C
  4951                           
  4952  003C                     ??_I2c_DataReceiveSm:	
  4953                           ; 1 bytes @ 0x1C
  4954                           
  4955  003C                     Tmr_TmrBPrSet@TmrNumb:	
  4956                           ; 1 bytes @ 0x1C
  4957                           
  4958                           
  4959                           ; 1 bytes @ 0x1C
  4960  003C                     	ds	1
  4961  003D                     Tmr_TmrBPrSet@TmrBPrCfgSts:	
  4962                           
  4963                           ; 1 bytes @ 0x1D
  4964  003D                     	ds	1
  4965  003E                     Tmr_TmrBPrSet@Divisor:	
  4966                           
  4967                           ; 4 bytes @ 0x1E
  4968  003E                     	ds	1
  4969  003F                     App_MainTask@AnalogChSel:	
  4970                           
  4971                           ; 12 bytes @ 0x1F
  4972  003F                     	ds	3
  4973  0042                     ?_Tmr_TmrBConfig:	
  4974  0042                     Tmr_TmrBConfig@TmrBConfig:	
  4975                           ; 1 bytes @ 0x22
  4976                           
  4977                           
  4978                           ; 1 bytes @ 0x22
  4979  0042                     	ds	1
  4980  0043                     ??_Tmr_TmrBConfig:	
  4981  0043                     I2c_DataReceiveSm@Index:	
  4982                           ; 1 bytes @ 0x23
  4983                           
  4984                           
  4985                           ; 1 bytes @ 0x23
  4986  0043                     	ds	1
  4987  0044                     Tmr_TmrBConfig@TmrNumb:	
  4988                           
  4989                           ; 1 bytes @ 0x24
  4990  0044                     	ds	1
  4991  0045                     ??_InitSchTimer:	
  4992                           
  4993                           ; 1 bytes @ 0x25
  4994  0045                     	ds	1
  4995  0046                     InitSchTimer@TmrBConfig:	
  4996                           
  4997                           ; 6 bytes @ 0x26
  4998  0046                     	ds	5
  4999  004B                     App_MainTask@AdcConfig:	
  5000                           
  5001                           ; 6 bytes @ 0x2B
  5002  004B                     	ds	6
  5003  0051                     App_MainTask@WpuCh:	
  5004                           
  5005                           ; 18 bytes @ 0x31
  5006  0051                     	ds	18
  5007  0063                     ??_InitializeTasks:	
  5008  0063                     ??_ScheduleTasks:	
  5009                           ; 1 bytes @ 0x43
  5010                           
  5011                           
  5012                           ; 1 bytes @ 0x43
  5013  0063                     	ds	4
  5014  0067                     InitializeTasks@ActiveTaskIndex:	
  5015                           
  5016                           ; 1 bytes @ 0x47
  5017  0067                     	ds	2
  5018  0069                     ScheduleTasks@ActiveTaskIndex:	
  5019                           
  5020                           ; 1 bytes @ 0x49
  5021  0069                     	ds	1
  5022                           
  5023                           	psect	maintext
  5024  15DD                     __pmaintext:	
  5025 ;;
  5026 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  5027 ;;
  5028 ;; *************** function _main *****************
  5029 ;; Defined at:
  5030 ;;		line 57 in file "../../../Framework/MercuryFwk/Source/c/00_Main/main.c"
  5031 ;; Parameters:    Size  Location     Type
  5032 ;;		None
  5033 ;; Auto vars:     Size  Location     Type
  5034 ;;		None
  5035 ;; Return value:  Size  Location     Type
  5036 ;;                  2   14[None  ] short 
  5037 ;; Registers used:
  5038 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5039 ;; Tracked objects:
  5040 ;;		On entry : B1F/0
  5041 ;;		On exit  : 0/0
  5042 ;;		Unchanged: 0/0
  5043 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5044 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5045 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5046 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5047 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5048 ;;Total ram usage:        0 bytes
  5049 ;; Hardware stack levels required when called:   10
  5050 ;; This function calls:
  5051 ;;		_MainScheduler
  5052 ;;		_SystemInit
  5053 ;; This function is called by:
  5054 ;;		Startup code after reset
  5055 ;; This function uses a non-reentrant model
  5056 ;;
  5057                           
  5058                           
  5059                           ;psect for function _main
  5060  15DD                     _main:	
  5061                           
  5062                           ;main.c: 60: SystemInit();
  5063                           
  5064                           ;incstack = 0
  5065                           ; Regs used in _main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  5066  15DD  3196  2604  3195   	fcall	_SystemInit
  5067                           
  5068                           ;main.c: 63: MainScheduler();
  5069  15E0  3196  26B7         	fcall	_MainScheduler
  5070                           
  5071                           ;main.c: 66: return 0;
  5072                           ;	Return value of _main is never used
  5073  15E2  3180  282B         	ljmp	start
  5074  15E4                     __end_of_main:	
  5075                           
  5076                           	psect	text1
  5077  1604                     __ptext1:	
  5078 ;; *************** function _SystemInit *****************
  5079 ;; Defined at:
  5080 ;;		line 98 in file "../Source/c/04_App/sys_init.c"
  5081 ;; Parameters:    Size  Location     Type
  5082 ;;		None
  5083 ;; Auto vars:     Size  Location     Type
  5084 ;;		None
  5085 ;; Return value:  Size  Location     Type
  5086 ;;                  1    wreg      void 
  5087 ;; Registers used:
  5088 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5089 ;; Tracked objects:
  5090 ;;		On entry : 0/0
  5091 ;;		On exit  : 0/0
  5092 ;;		Unchanged: 0/0
  5093 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5094 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5095 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5096 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5097 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5098 ;;Total ram usage:        0 bytes
  5099 ;; Hardware stack levels used:    1
  5100 ;; Hardware stack levels required when called:    6
  5101 ;; This function calls:
  5102 ;;		_InitSchTimer
  5103 ;;		_Mcu_EnableInterrupts
  5104 ;;		_Mcu_StartSystemPll
  5105 ;; This function is called by:
  5106 ;;		_main
  5107 ;; This function uses a non-reentrant model
  5108 ;;
  5109                           
  5110                           
  5111                           ;psect for function _SystemInit
  5112  1604                     _SystemInit:	
  5113                           
  5114                           ;sys_init.c: 101: Mcu_StartSystemPll();
  5115                           
  5116                           ;incstack = 0
  5117                           ; Regs used in _SystemInit: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  5118  1604  3195  25D1  3196   	fcall	_Mcu_StartSystemPll
  5119                           
  5120                           ;sys_init.c: 103: InitSchTimer();
  5121  1607  3197  2746  3196   	fcall	_InitSchTimer
  5122                           
  5123                           ;sys_init.c: 105: Mcu_EnableInterrupts();
  5124  160A  3195  25CE         	fcall	_Mcu_EnableInterrupts
  5125  160C  0008               	return
  5126  160D                     __end_of_SystemInit:	
  5127                           
  5128                           	psect	text2
  5129  15D1                     __ptext2:	
  5130 ;; *************** function _Mcu_StartSystemPll *****************
  5131 ;; Defined at:
  5132 ;;		line 153 in file "../../../Framework/MercuryFwk/Source/c/01_Hal/02_Drv/mcu_drv.c"
  5133 ;; Parameters:    Size  Location     Type
  5134 ;;		None
  5135 ;; Auto vars:     Size  Location     Type
  5136 ;;		None
  5137 ;; Return value:  Size  Location     Type
  5138 ;;                  1    wreg      void 
  5139 ;; Registers used:
  5140 ;;		None
  5141 ;; Tracked objects:
  5142 ;;		On entry : 0/0
  5143 ;;		On exit  : 0/0
  5144 ;;		Unchanged: 0/0
  5145 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5146 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5147 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5148 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5149 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5150 ;;Total ram usage:        0 bytes
  5151 ;; Hardware stack levels used:    1
  5152 ;; Hardware stack levels required when called:    2
  5153 ;; This function calls:
  5154 ;;		Nothing
  5155 ;; This function is called by:
  5156 ;;		_SystemInit
  5157 ;; This function uses a non-reentrant model
  5158 ;;
  5159                           
  5160                           
  5161                           ;psect for function _Mcu_StartSystemPll
  5162  15D1                     _Mcu_StartSystemPll:	
  5163                           
  5164                           ;mcu_drv.c: 156: OSCCONbits.SPLLEN = ((UINT8)(1));
  5165                           
  5166                           ;incstack = 0
  5167                           ; Regs used in _Mcu_StartSystemPll: []
  5168  15D1  0021               	movlb	1	; select bank1
  5169  15D2  1799               	bsf	25,7	;volatile
  5170  15D3  0008               	return
  5171  15D4                     __end_of_Mcu_StartSystemPll:	
  5172                           
  5173                           	psect	text3
  5174  15CE                     __ptext3:	
  5175 ;; *************** function _Mcu_EnableInterrupts *****************
  5176 ;; Defined at:
  5177 ;;		line 97 in file "../../../Framework/MercuryFwk/Source/c/01_Hal/02_Drv/mcu_drv.c"
  5178 ;; Parameters:    Size  Location     Type
  5179 ;;		None
  5180 ;; Auto vars:     Size  Location     Type
  5181 ;;		None
  5182 ;; Return value:  Size  Location     Type
  5183 ;;                  1    wreg      void 
  5184 ;; Registers used:
  5185 ;;		None
  5186 ;; Tracked objects:
  5187 ;;		On entry : 0/0
  5188 ;;		On exit  : 0/0
  5189 ;;		Unchanged: 0/0
  5190 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5191 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5192 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5193 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5194 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5195 ;;Total ram usage:        0 bytes
  5196 ;; Hardware stack levels used:    1
  5197 ;; Hardware stack levels required when called:    2
  5198 ;; This function calls:
  5199 ;;		Nothing
  5200 ;; This function is called by:
  5201 ;;		_SystemInit
  5202 ;; This function uses a non-reentrant model
  5203 ;;
  5204                           
  5205                           
  5206                           ;psect for function _Mcu_EnableInterrupts
  5207  15CE                     _Mcu_EnableInterrupts:	
  5208                           
  5209                           ;mcu_drv.c: 100: INTCONbits.GIE = ((UINT8)(1));
  5210                           
  5211                           ;incstack = 0
  5212                           ; Regs used in _Mcu_EnableInterrupts: []
  5213  15CE  178B               	bsf	11,7	;volatile
  5214                           
  5215                           ;mcu_drv.c: 101: INTCONbits.PEIE = ((UINT8)(1));
  5216  15CF  170B               	bsf	11,6	;volatile
  5217  15D0  0008               	return
  5218  15D1                     __end_of_Mcu_EnableInterrupts:	
  5219                           
  5220                           	psect	text4
  5221  1746                     __ptext4:	
  5222 ;; *************** function _InitSchTimer *****************
  5223 ;; Defined at:
  5224 ;;		line 71 in file "../Source/c/04_App/sys_init.c"
  5225 ;; Parameters:    Size  Location     Type
  5226 ;;		None
  5227 ;; Auto vars:     Size  Location     Type
  5228 ;;  TmrBConfig      6   38[BANK0 ] struct _TmrBConfigType
  5229 ;; Return value:  Size  Location     Type
  5230 ;;                  1    wreg      void 
  5231 ;; Registers used:
  5232 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5233 ;; Tracked objects:
  5234 ;;		On entry : 0/0
  5235 ;;		On exit  : 0/0
  5236 ;;		Unchanged: 0/0
  5237 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5238 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5239 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5240 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5241 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5242 ;;Total ram usage:        7 bytes
  5243 ;; Hardware stack levels used:    1
  5244 ;; Hardware stack levels required when called:    5
  5245 ;; This function calls:
  5246 ;;		_Tmr_TmrBConfig
  5247 ;; This function is called by:
  5248 ;;		_SystemInit
  5249 ;; This function uses a non-reentrant model
  5250 ;;
  5251                           
  5252                           
  5253                           ;psect for function _InitSchTimer
  5254  1746                     _InitSchTimer:	
  5255                           
  5256                           ;sys_init.c: 73: TmrBConfigType TmrBConfig;
  5257                           ;sys_init.c: 76: TmrBConfig.PreScaler = 1;
  5258                           
  5259                           ;incstack = 0
  5260                           ; Regs used in _InitSchTimer: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  5261  1746  0020               	movlb	0	; select bank0
  5262  1747  01C6               	clrf	InitSchTimer@TmrBConfig
  5263  1748  0AC6               	incf	InitSchTimer@TmrBConfig,f
  5264                           
  5265                           ;sys_init.c: 77: TmrBConfig.PostScaler = 8;
  5266  1749  3008               	movlw	8
  5267  174A  00C5               	movwf	??_InitSchTimer
  5268  174B  0845               	movf	??_InitSchTimer,w
  5269  174C  00C7               	movwf	InitSchTimer@TmrBConfig+1
  5270                           
  5271                           ;sys_init.c: 78: TmrBConfig.IntEnable = 1u;
  5272  174D  01C8               	clrf	InitSchTimer@TmrBConfig+2
  5273  174E  0AC8               	incf	InitSchTimer@TmrBConfig+2,f
  5274                           
  5275                           ;sys_init.c: 79: TmrBConfig.IntFreqHz = 10000;
  5276  174F  3010               	movlw	16
  5277  1750  00C9               	movwf	InitSchTimer@TmrBConfig+3
  5278  1751  3027               	movlw	39
  5279  1752  00CA               	movwf	InitSchTimer@TmrBConfig+4
  5280                           
  5281                           ;sys_init.c: 80: TmrBConfig.StartTmrRequest = StartTmrReq;
  5282  1753  01CB               	clrf	InitSchTimer@TmrBConfig+5
  5283  1754  0ACB               	incf	InitSchTimer@TmrBConfig+5,f
  5284                           
  5285                           ;sys_init.c: 83: Tmr_TmrBConfig(((UINT8)(2)),&TmrBConfig);
  5286  1755  3046               	movlw	(low (InitSchTimer@TmrBConfig| 0))& (0+255)
  5287  1756  00C5               	movwf	??_InitSchTimer
  5288  1757  0845               	movf	??_InitSchTimer,w
  5289  1758  00C2               	movwf	Tmr_TmrBConfig@TmrBConfig
  5290  1759  3002               	movlw	2
  5291  175A  318C  2422         	fcall	_Tmr_TmrBConfig
  5292  175C  0008               	return
  5293  175D                     __end_of_InitSchTimer:	
  5294                           
  5295                           	psect	text5
  5296  0C22                     __ptext5:	
  5297 ;; *************** function _Tmr_TmrBConfig *****************
  5298 ;; Defined at:
  5299 ;;		line 313 in file "../../../Framework/MercuryFwk/Source/c/01_Hal/02_Drv/tmr_drv.c"
  5300 ;; Parameters:    Size  Location     Type
  5301 ;;  TmrNumb         1    wreg     unsigned char 
  5302 ;;  TmrBConfig      1   34[BANK0 ] PTR struct _TmrBConfigTy
  5303 ;;		 -> InitSchTimer@TmrBConfig(6), 
  5304 ;; Auto vars:     Size  Location     Type
  5305 ;;  TmrNumb         1   36[BANK0 ] unsigned char 
  5306 ;; Return value:  Size  Location     Type
  5307 ;;                  1    wreg      void 
  5308 ;; Registers used:
  5309 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5310 ;; Tracked objects:
  5311 ;;		On entry : 0/0
  5312 ;;		On exit  : 0/0
  5313 ;;		Unchanged: 0/0
  5314 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5315 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5316 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5317 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5318 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5319 ;;Total ram usage:        3 bytes
  5320 ;; Hardware stack levels used:    1
  5321 ;; Hardware stack levels required when called:    4
  5322 ;; This function calls:
  5323 ;;		_TmrBInit
  5324 ;;		_Tmr_StartTmr
  5325 ;;		_Tmr_TmrBIrqSet
  5326 ;;		_Tmr_TmrBPrSet
  5327 ;; This function is called by:
  5328 ;;		_InitSchTimer
  5329 ;; This function uses a non-reentrant model
  5330 ;;
  5331                           
  5332                           
  5333                           ;psect for function _Tmr_TmrBConfig
  5334  0C22                     _Tmr_TmrBConfig:	
  5335                           
  5336                           ;incstack = 0
  5337                           ; Regs used in _Tmr_TmrBConfig: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  5338                           ;Tmr_TmrBConfig@TmrNumb stored from wreg
  5339  0C22  0020               	movlb	0	; select bank0
  5340  0C23  00C4               	movwf	Tmr_TmrBConfig@TmrNumb
  5341                           
  5342                           ;tmr_drv.c: 316: TmrBInit(TmrNumb,TmrBConfig->PreScaler,TmrBConfig->PostScaler);
  5343  0C24  0842               	movf	Tmr_TmrBConfig@TmrBConfig,w
  5344  0C25  0086               	movwf	6
  5345  0C26  0187               	clrf	7
  5346  0C27  0801               	movf	1,w
  5347  0C28  00C3               	movwf	??_Tmr_TmrBConfig
  5348  0C29  0843               	movf	??_Tmr_TmrBConfig,w
  5349  0C2A  00F4               	movwf	TmrBInit@Prescaler
  5350  0C2B  0842               	movf	Tmr_TmrBConfig@TmrBConfig,w
  5351  0C2C  0086               	movwf	6
  5352  0C2D  0187               	clrf	7
  5353  0C2E  3F41               	moviw [1]fsr1
  5354  0C2F  00F5               	movwf	TmrBInit@Postscaler
  5355  0C30  0844               	movf	Tmr_TmrBConfig@TmrNumb,w
  5356  0C31  318E  2656  318C   	fcall	_TmrBInit
  5357                           
  5358                           ;tmr_drv.c: 318: if (TmrBConfig->IntEnable == EnableInt)
  5359  0C34  0020               	movlb	0	; select bank0
  5360  0C35  0842               	movf	Tmr_TmrBConfig@TmrBConfig,w
  5361  0C36  3E02               	addlw	2
  5362  0C37  0086               	movwf	6
  5363  0C38  0187               	clrf	7
  5364  0C39  0301               	decf	1,w
  5365  0C3A  1D03               	btfss	3,2
  5366  0C3B  2C3F               	goto	l5116
  5367                           
  5368                           ;tmr_drv.c: 319: {
  5369                           ;tmr_drv.c: 321: Tmr_TmrBIrqSet(TmrNumb,((UINT8)(1)));
  5370  0C3C  01F4               	clrf	Tmr_TmrBIrqSet@TmrIrqSts
  5371  0C3D  0AF4               	incf	Tmr_TmrBIrqSet@TmrIrqSts,f
  5372  0C3E  2C41               	goto	L1
  5373  0C3F                     l5116:	
  5374                           ;tmr_drv.c: 322: }
  5375                           
  5376                           
  5377                           ;tmr_drv.c: 323: else
  5378                           ;tmr_drv.c: 324: {
  5379                           ;tmr_drv.c: 326: Tmr_TmrBIrqSet(TmrNumb,((UINT8)(0)));
  5380  0C3F  01F4               	clrf	Tmr_TmrBIrqSet@TmrIrqSts
  5381  0C40  0020               	movlb	0	; select bank0
  5382  0C41                     L1:	
  5383  0C41  0844               	movf	Tmr_TmrBConfig@TmrNumb,w
  5384  0C42  3189  2135  318C   	fcall	_Tmr_TmrBIrqSet
  5385                           
  5386                           ;tmr_drv.c: 327: }
  5387                           ;tmr_drv.c: 329: if (Tmr_TmrBPrSet(TmrNumb,TmrBConfig->IntFreqHz,TmrBConfig->PreScaler,T
      +                          mrBConfig->PostScaler) == CfgError)
  5388  0C45  0020               	movlb	0	; select bank0
  5389  0C46  0842               	movf	Tmr_TmrBConfig@TmrBConfig,w
  5390  0C47  3E03               	addlw	3
  5391  0C48  0086               	movwf	6
  5392  0C49  0187               	clrf	7
  5393  0C4A  3F40               	moviw [0]fsr1
  5394  0C4B  00B0               	movwf	Tmr_TmrBPrSet@IntFreqHz
  5395  0C4C  3F41               	moviw [1]fsr1
  5396  0C4D  00B1               	movwf	Tmr_TmrBPrSet@IntFreqHz+1
  5397  0C4E  0842               	movf	Tmr_TmrBConfig@TmrBConfig,w
  5398  0C4F  0086               	movwf	6
  5399  0C50  0187               	clrf	7
  5400  0C51  0801               	movf	1,w
  5401  0C52  00C3               	movwf	??_Tmr_TmrBConfig
  5402  0C53  0843               	movf	??_Tmr_TmrBConfig,w
  5403  0C54  00B2               	movwf	Tmr_TmrBPrSet@Prescaler
  5404  0C55  0842               	movf	Tmr_TmrBConfig@TmrBConfig,w
  5405  0C56  0086               	movwf	6
  5406  0C57  0187               	clrf	7
  5407  0C58  3F41               	moviw [1]fsr1
  5408  0C59  00B3               	movwf	Tmr_TmrBPrSet@Postscaler
  5409  0C5A  0844               	movf	Tmr_TmrBConfig@TmrNumb,w
  5410  0C5B  3185  259C  318C   	fcall	_Tmr_TmrBPrSet
  5411  0C5E  3A01               	xorlw	1
  5412  0C5F  1903               	btfsc	3,2
  5413  0C60                     l375:	
  5414                           ;tmr_drv.c: 330: {
  5415                           ;tmr_drv.c: 332: while(1);
  5416                           
  5417  0C60  2C60               	goto	l375
  5418                           
  5419                           ;tmr_drv.c: 333: }
  5420                           ;tmr_drv.c: 335: if (TmrBConfig->StartTmrRequest == StartTmrReq)
  5421  0C61  0020               	movlb	0	; select bank0
  5422  0C62  0842               	movf	Tmr_TmrBConfig@TmrBConfig,w
  5423  0C63  3E05               	addlw	5
  5424  0C64  0086               	movwf	6
  5425  0C65  0187               	clrf	7
  5426  0C66  0301               	decf	1,w
  5427  0C67  1D03               	btfss	3,2
  5428  0C68  0008               	return
  5429                           
  5430                           ;tmr_drv.c: 336: {
  5431                           ;tmr_drv.c: 338: Tmr_StartTmr(TmrNumb);
  5432  0C69  0844               	movf	Tmr_TmrBConfig@TmrNumb,w
  5433  0C6A  3197  272F         	fcall	_Tmr_StartTmr
  5434                           
  5435                           ;tmr_drv.c: 339: }
  5436  0C6C  0008               	return
  5437  0C6D                     __end_of_Tmr_TmrBConfig:	
  5438                           ;tmr_drv.c: 340: else
  5439                           ;tmr_drv.c: 341: {
  5440                           
  5441                           
  5442                           	psect	text6
  5443  059C                     __ptext6:	
  5444 ;; *************** function _Tmr_TmrBPrSet *****************
  5445 ;; Defined at:
  5446 ;;		line 225 in file "../../../Framework/MercuryFwk/Source/c/01_Hal/02_Drv/tmr_drv.c"
  5447 ;; Parameters:    Size  Location     Type
  5448 ;;  TmrNumb         1    wreg     unsigned char 
  5449 ;;  IntFreqHz       2   16[BANK0 ] unsigned short 
  5450 ;;  Prescaler       1   18[BANK0 ] unsigned char 
  5451 ;;  Postscaler      1   19[BANK0 ] unsigned char 
  5452 ;; Auto vars:     Size  Location     Type
  5453 ;;  TmrNumb         1   28[BANK0 ] unsigned char 
  5454 ;;  Divisor         4   30[BANK0 ] unsigned long 
  5455 ;;  TmrBPrCfgSts    1   29[BANK0 ] enum E3651
  5456 ;; Return value:  Size  Location     Type
  5457 ;;                  1    wreg      enum E3651
  5458 ;; Registers used:
  5459 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  5460 ;; Tracked objects:
  5461 ;;		On entry : 0/0
  5462 ;;		On exit  : 0/0
  5463 ;;		Unchanged: 0/0
  5464 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5465 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5466 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5467 ;;      Temps:          0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5468 ;;      Totals:         0      18       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5469 ;;Total ram usage:       18 bytes
  5470 ;; Hardware stack levels used:    1
  5471 ;; Hardware stack levels required when called:    3
  5472 ;; This function calls:
  5473 ;;		___lldiv
  5474 ;;		___lmul
  5475 ;;		___wmul
  5476 ;; This function is called by:
  5477 ;;		_Tmr_TmrBConfig
  5478 ;; This function uses a non-reentrant model
  5479 ;;
  5480                           
  5481                           
  5482                           ;psect for function _Tmr_TmrBPrSet
  5483  059C                     _Tmr_TmrBPrSet:	
  5484                           
  5485                           ;incstack = 0
  5486                           ; Regs used in _Tmr_TmrBPrSet: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  5487                           ;Tmr_TmrBPrSet@TmrNumb stored from wreg
  5488  059C  0020               	movlb	0	; select bank0
  5489  059D  00BC               	movwf	Tmr_TmrBPrSet@TmrNumb
  5490                           
  5491                           ;tmr_drv.c: 227: CfgStsType TmrBPrCfgSts;
  5492                           ;tmr_drv.c: 228: UINT32 Divisor = 0;
  5493  059E  3000               	movlw	0
  5494  059F  00C1               	movwf	Tmr_TmrBPrSet@Divisor+3
  5495  05A0  3000               	movlw	0
  5496  05A1  00C0               	movwf	Tmr_TmrBPrSet@Divisor+2
  5497  05A2  3000               	movlw	0
  5498  05A3  00BF               	movwf	Tmr_TmrBPrSet@Divisor+1
  5499  05A4  3000               	movlw	0
  5500  05A5  00BE               	movwf	Tmr_TmrBPrSet@Divisor
  5501                           
  5502                           ;tmr_drv.c: 231: Divisor = (UINT32)Prescaler*(UINT32)Postscaler*(UINT32)IntFreqHz;
  5503  05A6  0833               	movf	Tmr_TmrBPrSet@Postscaler,w
  5504  05A7  00B4               	movwf	??_Tmr_TmrBPrSet
  5505  05A8  01B5               	clrf	??_Tmr_TmrBPrSet+1
  5506  05A9  0834               	movf	??_Tmr_TmrBPrSet,w
  5507  05AA  00A2               	movwf	___wmul@multiplicand
  5508  05AB  0835               	movf	??_Tmr_TmrBPrSet+1,w
  5509  05AC  00A3               	movwf	___wmul@multiplicand+1
  5510  05AD  0832               	movf	Tmr_TmrBPrSet@Prescaler,w
  5511  05AE  00B6               	movwf	??_Tmr_TmrBPrSet+2
  5512  05AF  01B7               	clrf	??_Tmr_TmrBPrSet+3
  5513  05B0  0836               	movf	??_Tmr_TmrBPrSet+2,w
  5514  05B1  00A0               	movwf	___wmul@multiplier
  5515  05B2  0837               	movf	??_Tmr_TmrBPrSet+3,w
  5516  05B3  00A1               	movwf	___wmul@multiplier+1
  5517  05B4  3197  27A9  3185   	fcall	___wmul
  5518  05B7  0020               	movlb	0	; select bank0
  5519  05B8  0820               	movf	?___wmul,w
  5520  05B9  00B8               	movwf	??_Tmr_TmrBPrSet+4
  5521  05BA  0821               	movf	?___wmul+1,w
  5522  05BB  00B9               	movwf	??_Tmr_TmrBPrSet+5
  5523  05BC  01BA               	clrf	??_Tmr_TmrBPrSet+6
  5524  05BD  01BB               	clrf	??_Tmr_TmrBPrSet+7
  5525  05BE  083B               	movf	??_Tmr_TmrBPrSet+7,w
  5526  05BF  00A7               	movwf	___lmul@multiplier+3
  5527  05C0  083A               	movf	??_Tmr_TmrBPrSet+6,w
  5528  05C1  00A6               	movwf	___lmul@multiplier+2
  5529  05C2  0839               	movf	??_Tmr_TmrBPrSet+5,w
  5530  05C3  00A5               	movwf	___lmul@multiplier+1
  5531  05C4  0838               	movf	??_Tmr_TmrBPrSet+4,w
  5532  05C5  00A4               	movwf	___lmul@multiplier
  5533  05C6  0830               	movf	Tmr_TmrBPrSet@IntFreqHz,w
  5534  05C7  00A8               	movwf	___lmul@multiplicand
  5535  05C8  0831               	movf	Tmr_TmrBPrSet@IntFreqHz+1,w
  5536  05C9  00A9               	movwf	___lmul@multiplicand+1
  5537  05CA  01AA               	clrf	___lmul@multiplicand+2
  5538  05CB  01AB               	clrf	___lmul@multiplicand+3
  5539  05CC  318A  2211  3185   	fcall	___lmul
  5540  05CF  0020               	movlb	0	; select bank0
  5541  05D0  0827               	movf	?___lmul+3,w
  5542  05D1  00C1               	movwf	Tmr_TmrBPrSet@Divisor+3
  5543  05D2  0826               	movf	?___lmul+2,w
  5544  05D3  00C0               	movwf	Tmr_TmrBPrSet@Divisor+2
  5545  05D4  0825               	movf	?___lmul+1,w
  5546  05D5  00BF               	movwf	Tmr_TmrBPrSet@Divisor+1
  5547  05D6  0824               	movf	?___lmul,w
  5548  05D7  00BE               	movwf	Tmr_TmrBPrSet@Divisor
  5549                           
  5550                           ;tmr_drv.c: 234: if (((((UINT32)(32000000))/4)/Divisor) <= 255)
  5551  05D8  0841               	movf	Tmr_TmrBPrSet@Divisor+3,w
  5552  05D9  00A3               	movwf	___lldiv@divisor+3
  5553  05DA  0840               	movf	Tmr_TmrBPrSet@Divisor+2,w
  5554  05DB  00A2               	movwf	___lldiv@divisor+2
  5555  05DC  083F               	movf	Tmr_TmrBPrSet@Divisor+1,w
  5556  05DD  00A1               	movwf	___lldiv@divisor+1
  5557  05DE  083E               	movf	Tmr_TmrBPrSet@Divisor,w
  5558  05DF  00A0               	movwf	___lldiv@divisor
  5559  05E0  3000               	movlw	0
  5560  05E1  00A7               	movwf	___lldiv@dividend+3
  5561  05E2  307A               	movlw	122
  5562  05E3  00A6               	movwf	___lldiv@dividend+2
  5563  05E4  3012               	movlw	18
  5564  05E5  00A5               	movwf	___lldiv@dividend+1
  5565  05E6  3000               	movlw	0
  5566  05E7  00A4               	movwf	___lldiv@dividend
  5567  05E8  3187  27A8  3185   	fcall	___lldiv
  5568  05EB  0020               	movlb	0	; select bank0
  5569  05EC  0823               	movf	?___lldiv+3,w
  5570  05ED  1D03               	btfss	3,2
  5571  05EE  2E4E               	goto	l351
  5572  05EF  0822               	movf	?___lldiv+2,w
  5573  05F0  1D03               	btfss	3,2
  5574  05F1  2E4E               	goto	l351
  5575  05F2  3001               	movlw	1
  5576  05F3  0221               	subwf	?___lldiv+1,w
  5577  05F4  1C03               	btfss	3,0
  5578  05F5  2E3F               	goto	l4796
  5579  05F6  2E4E               	goto	l351
  5580  05F7                     l4788:	
  5581                           ;tmr_drv.c: 238: {
  5582                           ;tmr_drv.c: 239: case ((UINT8)(2)):
  5583                           
  5584                           ;tmr_drv.c: 235: {
  5585                           ;tmr_drv.c: 237: switch (TmrNumb)
  5586                           
  5587                           
  5588                           ;tmr_drv.c: 241: PR2 = (((UINT32)(32000000))/4)/Divisor;
  5589  05F7  0841               	movf	Tmr_TmrBPrSet@Divisor+3,w
  5590  05F8  00A3               	movwf	___lldiv@divisor+3
  5591  05F9  0840               	movf	Tmr_TmrBPrSet@Divisor+2,w
  5592  05FA  00A2               	movwf	___lldiv@divisor+2
  5593  05FB  083F               	movf	Tmr_TmrBPrSet@Divisor+1,w
  5594  05FC  00A1               	movwf	___lldiv@divisor+1
  5595  05FD  083E               	movf	Tmr_TmrBPrSet@Divisor,w
  5596  05FE  00A0               	movwf	___lldiv@divisor
  5597  05FF  3000               	movlw	0
  5598  0600  00A7               	movwf	___lldiv@dividend+3
  5599  0601  307A               	movlw	122
  5600  0602  00A6               	movwf	___lldiv@dividend+2
  5601  0603  3012               	movlw	18
  5602  0604  00A5               	movwf	___lldiv@dividend+1
  5603  0605  3000               	movlw	0
  5604  0606  00A4               	movwf	___lldiv@dividend
  5605  0607  3187  27A8  3185   	fcall	___lldiv
  5606  060A  0020               	movlb	0	; select bank0
  5607  060B  0820               	movf	?___lldiv,w
  5608  060C  009B               	movwf	27	;volatile
  5609                           
  5610                           ;tmr_drv.c: 242: break;
  5611  060D  2E4B               	goto	l4798
  5612  060E                     l4790:	
  5613                           ;tmr_drv.c: 244: case ((UINT8)(4)):
  5614                           
  5615                           
  5616                           ;tmr_drv.c: 246: PR4 = (((UINT32)(32000000))/4)/Divisor;
  5617  060E  0841               	movf	Tmr_TmrBPrSet@Divisor+3,w
  5618  060F  00A3               	movwf	___lldiv@divisor+3
  5619  0610  0840               	movf	Tmr_TmrBPrSet@Divisor+2,w
  5620  0611  00A2               	movwf	___lldiv@divisor+2
  5621  0612  083F               	movf	Tmr_TmrBPrSet@Divisor+1,w
  5622  0613  00A1               	movwf	___lldiv@divisor+1
  5623  0614  083E               	movf	Tmr_TmrBPrSet@Divisor,w
  5624  0615  00A0               	movwf	___lldiv@divisor
  5625  0616  3000               	movlw	0
  5626  0617  00A7               	movwf	___lldiv@dividend+3
  5627  0618  307A               	movlw	122
  5628  0619  00A6               	movwf	___lldiv@dividend+2
  5629  061A  3012               	movlw	18
  5630  061B  00A5               	movwf	___lldiv@dividend+1
  5631  061C  3000               	movlw	0
  5632  061D  00A4               	movwf	___lldiv@dividend
  5633  061E  3187  27A8  3185   	fcall	___lldiv
  5634  0621  0020               	movlb	0	; select bank0
  5635  0622  0820               	movf	?___lldiv,w
  5636  0623  0028               	movlb	8	; select bank8
  5637  0624  0096               	movwf	22	;volatile
  5638                           
  5639                           ;tmr_drv.c: 247: break;
  5640  0625  2E4B               	goto	l4798
  5641  0626                     l4792:	
  5642                           ;tmr_drv.c: 249: case ((UINT8)(6)):
  5643                           
  5644                           
  5645                           ;tmr_drv.c: 251: PR6 = (((UINT32)(32000000))/4)/Divisor;
  5646  0626  0020               	movlb	0	; select bank0
  5647  0627  0841               	movf	Tmr_TmrBPrSet@Divisor+3,w
  5648  0628  00A3               	movwf	___lldiv@divisor+3
  5649  0629  0840               	movf	Tmr_TmrBPrSet@Divisor+2,w
  5650  062A  00A2               	movwf	___lldiv@divisor+2
  5651  062B  083F               	movf	Tmr_TmrBPrSet@Divisor+1,w
  5652  062C  00A1               	movwf	___lldiv@divisor+1
  5653  062D  083E               	movf	Tmr_TmrBPrSet@Divisor,w
  5654  062E  00A0               	movwf	___lldiv@divisor
  5655  062F  3000               	movlw	0
  5656  0630  00A7               	movwf	___lldiv@dividend+3
  5657  0631  307A               	movlw	122
  5658  0632  00A6               	movwf	___lldiv@dividend+2
  5659  0633  3012               	movlw	18
  5660  0634  00A5               	movwf	___lldiv@dividend+1
  5661  0635  3000               	movlw	0
  5662  0636  00A4               	movwf	___lldiv@dividend
  5663  0637  3187  27A8  3185   	fcall	___lldiv
  5664  063A  0020               	movlb	0	; select bank0
  5665  063B  0820               	movf	?___lldiv,w
  5666  063C  0028               	movlb	8	; select bank8
  5667  063D  009D               	movwf	29	;volatile
  5668                           
  5669                           ;tmr_drv.c: 256: }
  5670                           
  5671                           ;tmr_drv.c: 255: break;
  5672                           
  5673                           ;tmr_drv.c: 254: default:
  5674                           
  5675                           ;tmr_drv.c: 252: break;
  5676  063E  2E4B               	goto	l4798
  5677  063F                     l4796:	
  5678  063F  0020               	movlb	0	; select bank0
  5679  0640  083C               	movf	Tmr_TmrBPrSet@TmrNumb,w
  5680                           
  5681                           ; Switch size 1, requested type "space"
  5682                           ; Number of cases is 3, Range of values is 2 to 6
  5683                           ; switch strategies available:
  5684                           ; Name         Instructions Cycles
  5685                           ; simple_byte           10     6 (average)
  5686                           ; direct_byte           19     9 (fixed)
  5687                           ; jumptable            263     9 (fixed)
  5688                           ;	Chosen strategy is simple_byte
  5689  0641  3A02               	xorlw	2	; case 2
  5690  0642  1903               	skipnz
  5691  0643  2DF7               	goto	l4788
  5692  0644  3A06               	xorlw	6	; case 4
  5693  0645  1903               	skipnz
  5694  0646  2E0E               	goto	l4790
  5695  0647  3A02               	xorlw	2	; case 6
  5696  0648  1903               	skipnz
  5697  0649  2E26               	goto	l4792
  5698  064A  2E4B               	goto	l4798
  5699  064B                     l4798:	
  5700                           
  5701                           ;tmr_drv.c: 259: TmrBPrCfgSts = CfgOk;
  5702  064B  0020               	movlb	0	; select bank0
  5703  064C  01BD               	clrf	Tmr_TmrBPrSet@TmrBPrCfgSts
  5704                           
  5705                           ;tmr_drv.c: 260: }
  5706  064D  2E50               	goto	l4800
  5707  064E                     l351:	
  5708                           
  5709                           ;tmr_drv.c: 261: else
  5710                           ;tmr_drv.c: 262: {
  5711                           ;tmr_drv.c: 264: TmrBPrCfgSts = CfgError;
  5712  064E  01BD               	clrf	Tmr_TmrBPrSet@TmrBPrCfgSts
  5713  064F  0ABD               	incf	Tmr_TmrBPrSet@TmrBPrCfgSts,f
  5714  0650                     l4800:	
  5715                           
  5716                           ;tmr_drv.c: 265: }
  5717                           ;tmr_drv.c: 268: return TmrBPrCfgSts;
  5718  0650  083D               	movf	Tmr_TmrBPrSet@TmrBPrCfgSts,w
  5719  0651  0008               	return
  5720  0652                     __end_of_Tmr_TmrBPrSet:	
  5721                           
  5722                           	psect	text7
  5723  17A9                     __ptext7:	
  5724 ;; *************** function ___wmul *****************
  5725 ;; Defined at:
  5726 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\Umul16.c"
  5727 ;; Parameters:    Size  Location     Type
  5728 ;;  multiplier      2    0[BANK0 ] unsigned int 
  5729 ;;  multiplicand    2    2[BANK0 ] unsigned int 
  5730 ;; Auto vars:     Size  Location     Type
  5731 ;;  product         2    4[COMMON] unsigned int 
  5732 ;; Return value:  Size  Location     Type
  5733 ;;                  2    0[BANK0 ] unsigned int 
  5734 ;; Registers used:
  5735 ;;		wreg, status,2, status,0
  5736 ;; Tracked objects:
  5737 ;;		On entry : 0/0
  5738 ;;		On exit  : 0/0
  5739 ;;		Unchanged: 0/0
  5740 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5741 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5742 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5743 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5744 ;;      Totals:         2       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5745 ;;Total ram usage:        6 bytes
  5746 ;; Hardware stack levels used:    1
  5747 ;; Hardware stack levels required when called:    2
  5748 ;; This function calls:
  5749 ;;		Nothing
  5750 ;; This function is called by:
  5751 ;;		_Tmr_TmrBPrSet
  5752 ;; This function uses a non-reentrant model
  5753 ;;
  5754                           
  5755                           
  5756                           ;psect for function ___wmul
  5757  17A9                     ___wmul:	
  5758                           
  5759                           ;incstack = 0
  5760                           ; Regs used in ___wmul: [wreg+status,2+status,0]
  5761  17A9  01F4               	clrf	___wmul@product
  5762  17AA  01F5               	clrf	___wmul@product+1
  5763  17AB                     l4708:	
  5764  17AB  0020               	movlb	0	; select bank0
  5765  17AC  1C20               	btfss	___wmul@multiplier,0
  5766  17AD  2FB2               	goto	l1156
  5767  17AE  0822               	movf	___wmul@multiplicand,w
  5768  17AF  07F4               	addwf	___wmul@product,f
  5769  17B0  0823               	movf	___wmul@multiplicand+1,w
  5770  17B1  3DF5               	addwfc	___wmul@product+1,f
  5771  17B2                     l1156:	
  5772  17B2  3001               	movlw	1
  5773  17B3                     u3815:	
  5774  17B3  35A2               	lslf	___wmul@multiplicand,f
  5775  17B4  0DA3               	rlf	___wmul@multiplicand+1,f
  5776  17B5  0B89               	decfsz	9,f
  5777  17B6  2FB3               	goto	u3815
  5778  17B7  3001               	movlw	1
  5779  17B8                     u3825:	
  5780  17B8  36A1               	lsrf	___wmul@multiplier+1,f
  5781  17B9  0CA0               	rrf	___wmul@multiplier,f
  5782  17BA  0B89               	decfsz	9,f
  5783  17BB  2FB8               	goto	u3825
  5784  17BC  0820               	movf	___wmul@multiplier,w
  5785  17BD  0421               	iorwf	___wmul@multiplier+1,w
  5786  17BE  1D03               	btfss	3,2
  5787  17BF  2FAB               	goto	l4708
  5788  17C0  0875               	movf	___wmul@product+1,w
  5789  17C1  00A1               	movwf	?___wmul+1
  5790  17C2  0874               	movf	___wmul@product,w
  5791  17C3  00A0               	movwf	?___wmul
  5792  17C4  0008               	return
  5793  17C5                     __end_of___wmul:	
  5794                           
  5795                           	psect	text8
  5796  0A11                     __ptext8:	
  5797 ;; *************** function ___lmul *****************
  5798 ;; Defined at:
  5799 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\Umul32.c"
  5800 ;; Parameters:    Size  Location     Type
  5801 ;;  multiplier      4    4[BANK0 ] unsigned long 
  5802 ;;  multiplicand    4    8[BANK0 ] unsigned long 
  5803 ;; Auto vars:     Size  Location     Type
  5804 ;;  product         4   12[BANK0 ] unsigned long 
  5805 ;; Return value:  Size  Location     Type
  5806 ;;                  4    4[BANK0 ] unsigned long 
  5807 ;; Registers used:
  5808 ;;		wreg, status,2, status,0
  5809 ;; Tracked objects:
  5810 ;;		On entry : 0/0
  5811 ;;		On exit  : 0/0
  5812 ;;		Unchanged: 0/0
  5813 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5814 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5815 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5816 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5817 ;;      Totals:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5818 ;;Total ram usage:       12 bytes
  5819 ;; Hardware stack levels used:    1
  5820 ;; Hardware stack levels required when called:    2
  5821 ;; This function calls:
  5822 ;;		Nothing
  5823 ;; This function is called by:
  5824 ;;		_Tmr_TmrBPrSet
  5825 ;; This function uses a non-reentrant model
  5826 ;;
  5827                           
  5828                           
  5829                           ;psect for function ___lmul
  5830  0A11                     ___lmul:	
  5831                           
  5832                           ;incstack = 0
  5833                           ; Regs used in ___lmul: [wreg+status,2+status,0]
  5834  0A11  3000               	movlw	0
  5835  0A12  0020               	movlb	0	; select bank0
  5836  0A13  00AF               	movwf	___lmul@product+3
  5837  0A14  3000               	movlw	0
  5838  0A15  00AE               	movwf	___lmul@product+2
  5839  0A16  3000               	movlw	0
  5840  0A17  00AD               	movwf	___lmul@product+1
  5841  0A18  3000               	movlw	0
  5842  0A19  00AC               	movwf	___lmul@product
  5843  0A1A                     l3454:	
  5844  0A1A  1C24               	btfss	___lmul@multiplier,0
  5845  0A1B  2A24               	goto	l3458
  5846  0A1C  0828               	movf	___lmul@multiplicand,w
  5847  0A1D  07AC               	addwf	___lmul@product,f
  5848  0A1E  0829               	movf	___lmul@multiplicand+1,w
  5849  0A1F  3DAD               	addwfc	___lmul@product+1,f
  5850  0A20  082A               	movf	___lmul@multiplicand+2,w
  5851  0A21  3DAE               	addwfc	___lmul@product+2,f
  5852  0A22  082B               	movf	___lmul@multiplicand+3,w
  5853  0A23  3DAF               	addwfc	___lmul@product+3,f
  5854  0A24                     l3458:	
  5855  0A24  3001               	movlw	1
  5856  0A25                     u2225:	
  5857  0A25  35A8               	lslf	___lmul@multiplicand,f
  5858  0A26  0DA9               	rlf	___lmul@multiplicand+1,f
  5859  0A27  0DAA               	rlf	___lmul@multiplicand+2,f
  5860  0A28  0DAB               	rlf	___lmul@multiplicand+3,f
  5861  0A29  0B89               	decfsz	9,f
  5862  0A2A  2A25               	goto	u2225
  5863  0A2B  3001               	movlw	1
  5864  0A2C                     u2235:	
  5865  0A2C  36A7               	lsrf	___lmul@multiplier+3,f
  5866  0A2D  0CA6               	rrf	___lmul@multiplier+2,f
  5867  0A2E  0CA5               	rrf	___lmul@multiplier+1,f
  5868  0A2F  0CA4               	rrf	___lmul@multiplier,f
  5869  0A30  0B89               	decfsz	9,f
  5870  0A31  2A2C               	goto	u2235
  5871  0A32  0827               	movf	___lmul@multiplier+3,w
  5872  0A33  0426               	iorwf	___lmul@multiplier+2,w
  5873  0A34  0425               	iorwf	___lmul@multiplier+1,w
  5874  0A35  0424               	iorwf	___lmul@multiplier,w
  5875  0A36  1D03               	skipz
  5876  0A37  2A1A               	goto	l3454
  5877  0A38  082F               	movf	___lmul@product+3,w
  5878  0A39  00A7               	movwf	?___lmul+3
  5879  0A3A  082E               	movf	___lmul@product+2,w
  5880  0A3B  00A6               	movwf	?___lmul+2
  5881  0A3C  082D               	movf	___lmul@product+1,w
  5882  0A3D  00A5               	movwf	?___lmul+1
  5883  0A3E  082C               	movf	___lmul@product,w
  5884  0A3F  00A4               	movwf	?___lmul
  5885  0A40  0008               	return
  5886  0A41                     __end_of___lmul:	
  5887                           
  5888                           	psect	text9
  5889  07A8                     __ptext9:	
  5890 ;; *************** function ___lldiv *****************
  5891 ;; Defined at:
  5892 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\lldiv.c"
  5893 ;; Parameters:    Size  Location     Type
  5894 ;;  divisor         4    0[BANK0 ] unsigned long 
  5895 ;;  dividend        4    4[BANK0 ] unsigned long 
  5896 ;; Auto vars:     Size  Location     Type
  5897 ;;  quotient        4    8[BANK0 ] unsigned long 
  5898 ;;  counter         1   12[BANK0 ] unsigned char 
  5899 ;; Return value:  Size  Location     Type
  5900 ;;                  4    0[BANK0 ] unsigned long 
  5901 ;; Registers used:
  5902 ;;		wreg, status,2, status,0
  5903 ;; Tracked objects:
  5904 ;;		On entry : 0/0
  5905 ;;		On exit  : 0/0
  5906 ;;		Unchanged: 0/0
  5907 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5908 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5909 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5910 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5911 ;;      Totals:         1      13       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5912 ;;Total ram usage:       14 bytes
  5913 ;; Hardware stack levels used:    1
  5914 ;; Hardware stack levels required when called:    2
  5915 ;; This function calls:
  5916 ;;		Nothing
  5917 ;; This function is called by:
  5918 ;;		_Tmr_TmrBPrSet
  5919 ;; This function uses a non-reentrant model
  5920 ;;
  5921                           
  5922                           
  5923                           ;psect for function ___lldiv
  5924  07A8                     ___lldiv:	
  5925                           
  5926                           ;incstack = 0
  5927                           ; Regs used in ___lldiv: [wreg+status,2+status,0]
  5928  07A8  3000               	movlw	0
  5929  07A9  0020               	movlb	0	; select bank0
  5930  07AA  00AB               	movwf	___lldiv@quotient+3
  5931  07AB  3000               	movlw	0
  5932  07AC  00AA               	movwf	___lldiv@quotient+2
  5933  07AD  3000               	movlw	0
  5934  07AE  00A9               	movwf	___lldiv@quotient+1
  5935  07AF  3000               	movlw	0
  5936  07B0  00A8               	movwf	___lldiv@quotient
  5937  07B1  0823               	movf	___lldiv@divisor+3,w
  5938  07B2  0422               	iorwf	___lldiv@divisor+2,w
  5939  07B3  0421               	iorwf	___lldiv@divisor+1,w
  5940  07B4  0420               	iorwf	___lldiv@divisor,w
  5941  07B5  1903               	skipnz
  5942  07B6  2FF2               	goto	l4740
  5943  07B7  01AC               	clrf	___lldiv@counter
  5944  07B8  0AAC               	incf	___lldiv@counter,f
  5945  07B9                     l4726:	
  5946  07B9  1BA3               	btfsc	___lldiv@divisor+3,7
  5947  07BA  2FC7               	goto	l4728
  5948  07BB  3001               	movlw	1
  5949  07BC                     u3855:	
  5950  07BC  35A0               	lslf	___lldiv@divisor,f
  5951  07BD  0DA1               	rlf	___lldiv@divisor+1,f
  5952  07BE  0DA2               	rlf	___lldiv@divisor+2,f
  5953  07BF  0DA3               	rlf	___lldiv@divisor+3,f
  5954  07C0  0B89               	decfsz	9,f
  5955  07C1  2FBC               	goto	u3855
  5956  07C2  3001               	movlw	1
  5957  07C3  00F4               	movwf	??___lldiv
  5958  07C4  0874               	movf	??___lldiv,w
  5959  07C5  07AC               	addwf	___lldiv@counter,f
  5960  07C6  2FB9               	goto	l4726
  5961  07C7                     l4728:	
  5962  07C7  3001               	movlw	1
  5963  07C8                     u3875:	
  5964  07C8  35A8               	lslf	___lldiv@quotient,f
  5965  07C9  0DA9               	rlf	___lldiv@quotient+1,f
  5966  07CA  0DAA               	rlf	___lldiv@quotient+2,f
  5967  07CB  0DAB               	rlf	___lldiv@quotient+3,f
  5968  07CC  0B89               	decfsz	9,f
  5969  07CD  2FC8               	goto	u3875
  5970  07CE  0823               	movf	___lldiv@divisor+3,w
  5971  07CF  0227               	subwf	___lldiv@dividend+3,w
  5972  07D0  1D03               	skipz
  5973  07D1  2FDC               	goto	u3885
  5974  07D2  0822               	movf	___lldiv@divisor+2,w
  5975  07D3  0226               	subwf	___lldiv@dividend+2,w
  5976  07D4  1D03               	skipz
  5977  07D5  2FDC               	goto	u3885
  5978  07D6  0821               	movf	___lldiv@divisor+1,w
  5979  07D7  0225               	subwf	___lldiv@dividend+1,w
  5980  07D8  1D03               	skipz
  5981  07D9  2FDC               	goto	u3885
  5982  07DA  0820               	movf	___lldiv@divisor,w
  5983  07DB  0224               	subwf	___lldiv@dividend,w
  5984  07DC                     u3885:	
  5985  07DC  1C03               	skipc
  5986  07DD  2FE7               	goto	l4736
  5987  07DE  0820               	movf	___lldiv@divisor,w
  5988  07DF  02A4               	subwf	___lldiv@dividend,f
  5989  07E0  0821               	movf	___lldiv@divisor+1,w
  5990  07E1  3BA5               	subwfb	___lldiv@dividend+1,f
  5991  07E2  0822               	movf	___lldiv@divisor+2,w
  5992  07E3  3BA6               	subwfb	___lldiv@dividend+2,f
  5993  07E4  0823               	movf	___lldiv@divisor+3,w
  5994  07E5  3BA7               	subwfb	___lldiv@dividend+3,f
  5995  07E6  1428               	bsf	___lldiv@quotient,0
  5996  07E7                     l4736:	
  5997  07E7  3001               	movlw	1
  5998  07E8                     u3895:	
  5999  07E8  36A3               	lsrf	___lldiv@divisor+3,f
  6000  07E9  0CA2               	rrf	___lldiv@divisor+2,f
  6001  07EA  0CA1               	rrf	___lldiv@divisor+1,f
  6002  07EB  0CA0               	rrf	___lldiv@divisor,f
  6003  07EC  0B89               	decfsz	9,f
  6004  07ED  2FE8               	goto	u3895
  6005  07EE  3001               	movlw	1
  6006  07EF  02AC               	subwf	___lldiv@counter,f
  6007  07F0  1D03               	btfss	3,2
  6008  07F1  2FC7               	goto	l4728
  6009  07F2                     l4740:	
  6010  07F2  082B               	movf	___lldiv@quotient+3,w
  6011  07F3  00A3               	movwf	?___lldiv+3
  6012  07F4  082A               	movf	___lldiv@quotient+2,w
  6013  07F5  00A2               	movwf	?___lldiv+2
  6014  07F6  0829               	movf	___lldiv@quotient+1,w
  6015  07F7  00A1               	movwf	?___lldiv+1
  6016  07F8  0828               	movf	___lldiv@quotient,w
  6017  07F9  00A0               	movwf	?___lldiv
  6018  07FA  0008               	return
  6019  07FB                     __end_of___lldiv:	
  6020                           
  6021                           	psect	text10
  6022  0935                     __ptext10:	
  6023 ;; *************** function _Tmr_TmrBIrqSet *****************
  6024 ;; Defined at:
  6025 ;;		line 182 in file "../../../Framework/MercuryFwk/Source/c/01_Hal/02_Drv/tmr_drv.c"
  6026 ;; Parameters:    Size  Location     Type
  6027 ;;  TmrNumb         1    wreg     unsigned char 
  6028 ;;  TmrIrqSts       1    4[COMMON] unsigned char 
  6029 ;; Auto vars:     Size  Location     Type
  6030 ;;  TmrNumb         1    5[COMMON] unsigned char 
  6031 ;; Return value:  Size  Location     Type
  6032 ;;                  1    wreg      void 
  6033 ;; Registers used:
  6034 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  6035 ;; Tracked objects:
  6036 ;;		On entry : 0/0
  6037 ;;		On exit  : 0/0
  6038 ;;		Unchanged: 0/0
  6039 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6040 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6041 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6042 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6043 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6044 ;;Total ram usage:        2 bytes
  6045 ;; Hardware stack levels used:    1
  6046 ;; Hardware stack levels required when called:    2
  6047 ;; This function calls:
  6048 ;;		Nothing
  6049 ;; This function is called by:
  6050 ;;		_Tmr_TmrBConfig
  6051 ;; This function uses a non-reentrant model
  6052 ;;
  6053                           
  6054                           
  6055                           ;psect for function _Tmr_TmrBIrqSet
  6056  0935                     _Tmr_TmrBIrqSet:	
  6057                           
  6058                           ;incstack = 0
  6059                           ; Regs used in _Tmr_TmrBIrqSet: [wreg-fsr0h+status,2+status,0]
  6060                           ;Tmr_TmrBIrqSet@TmrNumb stored from wreg
  6061  0935  00F5               	movwf	Tmr_TmrBIrqSet@TmrNumb
  6062                           
  6063                           ;tmr_drv.c: 185: switch (TmrNumb)
  6064  0936  2952               	goto	l3632
  6065  0937                     l343:	
  6066                           ;tmr_drv.c: 186: {
  6067                           ;tmr_drv.c: 187: case ((UINT8)(2)):
  6068                           
  6069                           
  6070                           ;tmr_drv.c: 189: PIR1bits.TMR2IF = 0u;
  6071  0937  0020               	movlb	0	; select bank0
  6072  0938  1091               	bcf	17,1	;volatile
  6073                           
  6074                           ;tmr_drv.c: 191: PIE1bits.TMR2IE = TmrIrqSts;
  6075  0939  0C74               	rrf	Tmr_TmrBIrqSet@TmrIrqSts,w
  6076  093A  0021               	movlb	1	; select bank1
  6077  093B  1C03               	skipc
  6078  093C  1091               	bcf	17,1	;volatile
  6079  093D  1803               	skipnc
  6080  093E  1491               	bsf	17,1	;volatile
  6081                           
  6082                           ;tmr_drv.c: 192: break;
  6083  093F  0008               	return
  6084  0940                     l345:	
  6085                           ;tmr_drv.c: 194: case ((UINT8)(4)):
  6086                           
  6087                           
  6088                           ;tmr_drv.c: 196: PIR3bits.TMR4IF = 0u;
  6089  0940  0020               	movlb	0	; select bank0
  6090  0941  1093               	bcf	19,1	;volatile
  6091                           
  6092                           ;tmr_drv.c: 198: PIE3bits.TMR4IE = TmrIrqSts;
  6093  0942  0C74               	rrf	Tmr_TmrBIrqSet@TmrIrqSts,w
  6094  0943  0021               	movlb	1	; select bank1
  6095  0944  1C03               	skipc
  6096  0945  1093               	bcf	19,1	;volatile
  6097  0946  1803               	skipnc
  6098  0947  1493               	bsf	19,1	;volatile
  6099                           
  6100                           ;tmr_drv.c: 199: break;
  6101  0948  0008               	return
  6102  0949                     l346:	
  6103                           ;tmr_drv.c: 201: case ((UINT8)(6)):
  6104                           
  6105                           
  6106                           ;tmr_drv.c: 203: PIR3bits.TMR6IF = 0u;
  6107  0949  0020               	movlb	0	; select bank0
  6108  094A  1193               	bcf	19,3	;volatile
  6109                           
  6110                           ;tmr_drv.c: 205: PIE3bits.TMR6IE = TmrIrqSts;
  6111  094B  0C74               	rrf	Tmr_TmrBIrqSet@TmrIrqSts,w
  6112  094C  0021               	movlb	1	; select bank1
  6113  094D  1C03               	skipc
  6114  094E  1193               	bcf	19,3	;volatile
  6115  094F  1803               	skipnc
  6116  0950  1593               	bsf	19,3	;volatile
  6117                           
  6118                           ;tmr_drv.c: 210: }
  6119                           
  6120                           ;tmr_drv.c: 209: break;
  6121                           
  6122                           ;tmr_drv.c: 208: default:
  6123                           
  6124                           ;tmr_drv.c: 206: break;
  6125  0951  0008               	return
  6126  0952                     l3632:	
  6127  0952  0875               	movf	Tmr_TmrBIrqSet@TmrNumb,w
  6128                           
  6129                           ; Switch size 1, requested type "space"
  6130                           ; Number of cases is 3, Range of values is 2 to 6
  6131                           ; switch strategies available:
  6132                           ; Name         Instructions Cycles
  6133                           ; simple_byte           10     6 (average)
  6134                           ; direct_byte           19     9 (fixed)
  6135                           ; jumptable            263     9 (fixed)
  6136                           ;	Chosen strategy is simple_byte
  6137  0953  3A02               	xorlw	2	; case 2
  6138  0954  1903               	skipnz
  6139  0955  2937               	goto	l343
  6140  0956  3A06               	xorlw	6	; case 4
  6141  0957  1903               	skipnz
  6142  0958  2940               	goto	l345
  6143  0959  3A02               	xorlw	2	; case 6
  6144  095A  1903               	skipnz
  6145  095B  2949               	goto	l346
  6146  095C  295D               	goto	l348
  6147  095D                     l348:	
  6148  095D  0008               	return
  6149  095E                     __end_of_Tmr_TmrBIrqSet:	
  6150                           
  6151                           	psect	text11
  6152  172F                     __ptext11:	
  6153 ;; *************** function _Tmr_StartTmr *****************
  6154 ;; Defined at:
  6155 ;;		line 279 in file "../../../Framework/MercuryFwk/Source/c/01_Hal/02_Drv/tmr_drv.c"
  6156 ;; Parameters:    Size  Location     Type
  6157 ;;  TmrNumb         1    wreg     unsigned char 
  6158 ;; Auto vars:     Size  Location     Type
  6159 ;;  TmrNumb         1    4[COMMON] unsigned char 
  6160 ;; Return value:  Size  Location     Type
  6161 ;;                  1    wreg      void 
  6162 ;; Registers used:
  6163 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  6164 ;; Tracked objects:
  6165 ;;		On entry : 0/0
  6166 ;;		On exit  : 0/0
  6167 ;;		Unchanged: 0/0
  6168 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6169 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6170 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6171 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6172 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6173 ;;Total ram usage:        1 bytes
  6174 ;; Hardware stack levels used:    1
  6175 ;; Hardware stack levels required when called:    2
  6176 ;; This function calls:
  6177 ;;		Nothing
  6178 ;; This function is called by:
  6179 ;;		_Tmr_TmrBConfig
  6180 ;; This function uses a non-reentrant model
  6181 ;;
  6182                           
  6183                           
  6184                           ;psect for function _Tmr_StartTmr
  6185  172F                     _Tmr_StartTmr:	
  6186                           
  6187                           ;incstack = 0
  6188                           ; Regs used in _Tmr_StartTmr: [wreg-fsr0h+status,2+status,0]
  6189                           ;Tmr_StartTmr@TmrNumb stored from wreg
  6190  172F  00F4               	movwf	Tmr_StartTmr@TmrNumb
  6191                           
  6192                           ;tmr_drv.c: 282: switch (TmrNumb)
  6193  1730  2F3A               	goto	l3662
  6194  1731                     l363:	
  6195                           ;tmr_drv.c: 283: {
  6196                           ;tmr_drv.c: 284: case ((UINT8)(2)):
  6197                           
  6198                           
  6199                           ;tmr_drv.c: 286: T2CONbits.TMR2ON = 1u;
  6200  1731  0020               	movlb	0	; select bank0
  6201  1732  151C               	bsf	28,2	;volatile
  6202                           
  6203                           ;tmr_drv.c: 287: break;
  6204  1733  0008               	return
  6205  1734                     l365:	
  6206                           ;tmr_drv.c: 289: case ((UINT8)(4)):
  6207                           
  6208                           
  6209                           ;tmr_drv.c: 291: T4CONbits.TMR4ON = 1u;
  6210  1734  0028               	movlb	8	; select bank8
  6211  1735  1517               	bsf	23,2	;volatile
  6212                           
  6213                           ;tmr_drv.c: 292: break;
  6214  1736  0008               	return
  6215  1737                     l366:	
  6216                           ;tmr_drv.c: 294: case ((UINT8)(6)):
  6217                           
  6218                           
  6219                           ;tmr_drv.c: 296: T6CONbits.TMR6ON = 1u;
  6220  1737  0028               	movlb	8	; select bank8
  6221  1738  151E               	bsf	30,2	;volatile
  6222                           
  6223                           ;tmr_drv.c: 301: }
  6224                           
  6225                           ;tmr_drv.c: 300: break;
  6226                           
  6227                           ;tmr_drv.c: 299: default:
  6228                           
  6229                           ;tmr_drv.c: 297: break;
  6230  1739  0008               	return
  6231  173A                     l3662:	
  6232  173A  0874               	movf	Tmr_StartTmr@TmrNumb,w
  6233                           
  6234                           ; Switch size 1, requested type "space"
  6235                           ; Number of cases is 3, Range of values is 2 to 6
  6236                           ; switch strategies available:
  6237                           ; Name         Instructions Cycles
  6238                           ; simple_byte           10     6 (average)
  6239                           ; direct_byte           19     9 (fixed)
  6240                           ; jumptable            263     9 (fixed)
  6241                           ;	Chosen strategy is simple_byte
  6242  173B  3A02               	xorlw	2	; case 2
  6243  173C  1903               	skipnz
  6244  173D  2F31               	goto	l363
  6245  173E  3A06               	xorlw	6	; case 4
  6246  173F  1903               	skipnz
  6247  1740  2F34               	goto	l365
  6248  1741  3A02               	xorlw	2	; case 6
  6249  1742  1903               	skipnz
  6250  1743  2F37               	goto	l366
  6251  1744  2F45               	goto	l368
  6252  1745                     l368:	
  6253  1745  0008               	return
  6254  1746                     __end_of_Tmr_StartTmr:	
  6255                           
  6256                           	psect	text12
  6257  0E56                     __ptext12:	
  6258 ;; *************** function _TmrBInit *****************
  6259 ;; Defined at:
  6260 ;;		line 72 in file "../../../Framework/MercuryFwk/Source/c/01_Hal/02_Drv/tmr_drv.c"
  6261 ;; Parameters:    Size  Location     Type
  6262 ;;  TmrNumb         1    wreg     unsigned char 
  6263 ;;  Prescaler       1    4[COMMON] unsigned char 
  6264 ;;  Postscaler      1    5[COMMON] unsigned char 
  6265 ;; Auto vars:     Size  Location     Type
  6266 ;;  TmrNumb         1    1[BANK0 ] unsigned char 
  6267 ;; Return value:  Size  Location     Type
  6268 ;;                  1    wreg      void 
  6269 ;; Registers used:
  6270 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  6271 ;; Tracked objects:
  6272 ;;		On entry : 0/0
  6273 ;;		On exit  : 0/0
  6274 ;;		Unchanged: 0/0
  6275 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6276 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6277 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6278 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6279 ;;      Totals:         2       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6280 ;;Total ram usage:        4 bytes
  6281 ;; Hardware stack levels used:    1
  6282 ;; Hardware stack levels required when called:    2
  6283 ;; This function calls:
  6284 ;;		Nothing
  6285 ;; This function is called by:
  6286 ;;		_Tmr_TmrBConfig
  6287 ;; This function uses a non-reentrant model
  6288 ;;
  6289                           
  6290                           
  6291                           ;psect for function _TmrBInit
  6292  0E56                     _TmrBInit:	
  6293                           
  6294                           ;incstack = 0
  6295                           ; Regs used in _TmrBInit: [wreg-fsr0h+status,2+status,0]
  6296                           ;TmrBInit@TmrNumb stored from wreg
  6297  0E56  0020               	movlb	0	; select bank0
  6298  0E57  00A1               	movwf	TmrBInit@TmrNumb
  6299                           
  6300                           ;tmr_drv.c: 75: switch (TmrNumb)
  6301  0E58  2EC4               	goto	l4778
  6302  0E59                     l318:	
  6303                           ;tmr_drv.c: 80: {
  6304                           ;tmr_drv.c: 81: case ((UINT8)(1)):
  6305                           
  6306                           ;tmr_drv.c: 79: switch (Prescaler)
  6307                           
  6308                           ;tmr_drv.c: 76: {
  6309                           ;tmr_drv.c: 77: case ((UINT8)(2)):
  6310                           
  6311                           
  6312                           ;tmr_drv.c: 83: T2CONbits.T2CKPS0 = 0u;
  6313  0E59  101C               	bcf	28,0	;volatile
  6314  0E5A  2E5C               	goto	L2
  6315  0E5B                     l320:	
  6316                           ;tmr_drv.c: 87: case ((UINT8)(4)):
  6317                           
  6318                           ;tmr_drv.c: 85: break;
  6319                           
  6320                           ;tmr_drv.c: 84: T2CONbits.T2CKPS1 = 0u;
  6321                           
  6322                           
  6323                           ;tmr_drv.c: 89: T2CONbits.T2CKPS0 = 1u;
  6324  0E5B  141C               	bsf	28,0	;volatile
  6325  0E5C                     L2:	
  6326                           
  6327                           ;tmr_drv.c: 90: T2CONbits.T2CKPS1 = 0u;
  6328  0E5C  109C               	bcf	28,1	;volatile
  6329                           
  6330                           ;tmr_drv.c: 91: break;
  6331  0E5D  2E6C               	goto	l4762
  6332  0E5E                     l321:	
  6333                           ;tmr_drv.c: 93: case ((UINT8)(16)):
  6334                           
  6335                           
  6336                           ;tmr_drv.c: 94: T2CONbits.T2CKPS0 = 0u;
  6337  0E5E  101C               	bcf	28,0	;volatile
  6338                           
  6339                           ;tmr_drv.c: 95: T2CONbits.T2CKPS1 = 1u;
  6340  0E5F  149C               	bsf	28,1	;volatile
  6341                           
  6342                           ;tmr_drv.c: 100: }
  6343                           
  6344                           ;tmr_drv.c: 99: break;
  6345                           
  6346                           ;tmr_drv.c: 98: default:
  6347                           
  6348                           ;tmr_drv.c: 96: break;
  6349  0E60  2E6C               	goto	l4762
  6350  0E61                     l4760:	
  6351  0E61  0874               	movf	TmrBInit@Prescaler,w
  6352                           
  6353                           ; Switch size 1, requested type "space"
  6354                           ; Number of cases is 3, Range of values is 1 to 16
  6355                           ; switch strategies available:
  6356                           ; Name         Instructions Cycles
  6357                           ; simple_byte           10     6 (average)
  6358                           ; direct_byte           41     9 (fixed)
  6359                           ; jumptable            263     9 (fixed)
  6360                           ;	Chosen strategy is simple_byte
  6361  0E62  3A01               	xorlw	1	; case 1
  6362  0E63  1903               	skipnz
  6363  0E64  2E59               	goto	l318
  6364  0E65  3A05               	xorlw	5	; case 4
  6365  0E66  1903               	skipnz
  6366  0E67  2E5B               	goto	l320
  6367  0E68  3A14               	xorlw	20	; case 16
  6368  0E69  1903               	skipnz
  6369  0E6A  2E5E               	goto	l321
  6370  0E6B  2E6C               	goto	l4762
  6371  0E6C                     l4762:	
  6372                           
  6373                           ;tmr_drv.c: 103: T2CONbits.T2OUTPS = (Postscaler - 1);
  6374  0E6C  0875               	movf	TmrBInit@Postscaler,w
  6375  0E6D  3EFF               	addlw	255
  6376  0E6E  00A0               	movwf	??_TmrBInit
  6377  0E6F  0DA0               	rlf	??_TmrBInit,f
  6378  0E70  0DA0               	rlf	??_TmrBInit,f
  6379  0E71  0DA0               	rlf	??_TmrBInit,f
  6380  0E72  081C               	movf	28,w	;volatile
  6381  0E73  0620               	xorwf	??_TmrBInit,w
  6382  0E74  3987               	andlw	-121
  6383  0E75  0620               	xorwf	??_TmrBInit,w
  6384  0E76  009C               	movwf	28	;volatile
  6385                           
  6386                           ;tmr_drv.c: 104: break;
  6387  0E77  0008               	return
  6388  0E78                     l326:	
  6389                           ;tmr_drv.c: 109: {
  6390                           ;tmr_drv.c: 110: case ((UINT8)(1)):
  6391                           
  6392                           ;tmr_drv.c: 108: switch (Prescaler)
  6393                           
  6394                           ;tmr_drv.c: 106: case ((UINT8)(4)):
  6395                           
  6396                           
  6397                           ;tmr_drv.c: 112: T4CONbits.T4CKPS0 = 0u;
  6398  0E78  0028               	movlb	8	; select bank8
  6399  0E79  1017               	bcf	23,0	;volatile
  6400  0E7A  2E7D               	goto	L3
  6401  0E7B                     l328:	
  6402                           ;tmr_drv.c: 116: case ((UINT8)(4)):
  6403                           
  6404                           ;tmr_drv.c: 114: break;
  6405                           
  6406                           ;tmr_drv.c: 113: T4CONbits.T4CKPS1 = 0u;
  6407                           
  6408                           
  6409                           ;tmr_drv.c: 118: T4CONbits.T4CKPS0 = 1u;
  6410  0E7B  0028               	movlb	8	; select bank8
  6411  0E7C  1417               	bsf	23,0	;volatile
  6412  0E7D                     L3:	
  6413                           
  6414                           ;tmr_drv.c: 119: T4CONbits.T4CKPS1 = 0u;
  6415  0E7D  1097               	bcf	23,1	;volatile
  6416                           
  6417                           ;tmr_drv.c: 120: break;
  6418  0E7E  2E8E               	goto	l4768
  6419  0E7F                     l329:	
  6420                           ;tmr_drv.c: 122: case ((UINT8)(16)):
  6421                           
  6422                           
  6423                           ;tmr_drv.c: 123: T4CONbits.T4CKPS0 = 0u;
  6424  0E7F  0028               	movlb	8	; select bank8
  6425  0E80  1017               	bcf	23,0	;volatile
  6426                           
  6427                           ;tmr_drv.c: 124: T4CONbits.T4CKPS1 = 1u;
  6428  0E81  1497               	bsf	23,1	;volatile
  6429                           
  6430                           ;tmr_drv.c: 129: }
  6431                           
  6432                           ;tmr_drv.c: 128: break;
  6433                           
  6434                           ;tmr_drv.c: 127: default:
  6435                           
  6436                           ;tmr_drv.c: 125: break;
  6437  0E82  2E8E               	goto	l4768
  6438  0E83                     l4766:	
  6439  0E83  0874               	movf	TmrBInit@Prescaler,w
  6440                           
  6441                           ; Switch size 1, requested type "space"
  6442                           ; Number of cases is 3, Range of values is 1 to 16
  6443                           ; switch strategies available:
  6444                           ; Name         Instructions Cycles
  6445                           ; simple_byte           10     6 (average)
  6446                           ; direct_byte           41     9 (fixed)
  6447                           ; jumptable            263     9 (fixed)
  6448                           ;	Chosen strategy is simple_byte
  6449  0E84  3A01               	xorlw	1	; case 1
  6450  0E85  1903               	skipnz
  6451  0E86  2E78               	goto	l326
  6452  0E87  3A05               	xorlw	5	; case 4
  6453  0E88  1903               	skipnz
  6454  0E89  2E7B               	goto	l328
  6455  0E8A  3A14               	xorlw	20	; case 16
  6456  0E8B  1903               	skipnz
  6457  0E8C  2E7F               	goto	l329
  6458  0E8D  2E8E               	goto	l4768
  6459  0E8E                     l4768:	
  6460                           
  6461                           ;tmr_drv.c: 132: T4CONbits.T4OUTPS = (Postscaler - 1);
  6462  0E8E  0875               	movf	TmrBInit@Postscaler,w
  6463  0E8F  3EFF               	addlw	255
  6464  0E90  0020               	movlb	0	; select bank0
  6465  0E91  00A0               	movwf	??_TmrBInit
  6466  0E92  0DA0               	rlf	??_TmrBInit,f
  6467  0E93  0DA0               	rlf	??_TmrBInit,f
  6468  0E94  0DA0               	rlf	??_TmrBInit,f
  6469  0E95  0028               	movlb	8	; select bank8
  6470  0E96  0817               	movf	23,w	;volatile
  6471  0E97  0020               	movlb	0	; select bank0
  6472  0E98  0620               	xorwf	??_TmrBInit,w
  6473  0E99  3987               	andlw	-121
  6474  0E9A  0620               	xorwf	??_TmrBInit,w
  6475  0E9B  0028               	movlb	8	; select bank8
  6476  0E9C  0097               	movwf	23	;volatile
  6477                           
  6478                           ;tmr_drv.c: 133: break;
  6479  0E9D  0008               	return
  6480  0E9E                     l333:	
  6481                           ;tmr_drv.c: 138: {
  6482                           ;tmr_drv.c: 139: case ((UINT8)(1)):
  6483                           
  6484                           ;tmr_drv.c: 137: switch (Prescaler)
  6485                           
  6486                           ;tmr_drv.c: 135: case ((UINT8)(6)):
  6487                           
  6488                           
  6489                           ;tmr_drv.c: 141: T6CONbits.T6CKPS0 = 0u;
  6490  0E9E  0028               	movlb	8	; select bank8
  6491  0E9F  101E               	bcf	30,0	;volatile
  6492  0EA0  2EA3               	goto	L4
  6493  0EA1                     l335:	
  6494                           ;tmr_drv.c: 145: case ((UINT8)(4)):
  6495                           
  6496                           ;tmr_drv.c: 143: break;
  6497                           
  6498                           ;tmr_drv.c: 142: T6CONbits.T6CKPS1 = 0u;
  6499                           
  6500                           
  6501                           ;tmr_drv.c: 147: T6CONbits.T6CKPS0 = 1u;
  6502  0EA1  0028               	movlb	8	; select bank8
  6503  0EA2  141E               	bsf	30,0	;volatile
  6504  0EA3                     L4:	
  6505                           
  6506                           ;tmr_drv.c: 148: T6CONbits.T6CKPS1 = 0u;
  6507  0EA3  109E               	bcf	30,1	;volatile
  6508                           
  6509                           ;tmr_drv.c: 149: break;
  6510  0EA4  2EB4               	goto	l4774
  6511  0EA5                     l336:	
  6512                           ;tmr_drv.c: 151: case ((UINT8)(16)):
  6513                           
  6514                           
  6515                           ;tmr_drv.c: 152: T6CONbits.T6CKPS0 = 0u;
  6516  0EA5  0028               	movlb	8	; select bank8
  6517  0EA6  101E               	bcf	30,0	;volatile
  6518                           
  6519                           ;tmr_drv.c: 153: T6CONbits.T6CKPS1 = 1u;
  6520  0EA7  149E               	bsf	30,1	;volatile
  6521                           
  6522                           ;tmr_drv.c: 158: }
  6523                           
  6524                           ;tmr_drv.c: 157: break;
  6525                           
  6526                           ;tmr_drv.c: 156: default:
  6527                           
  6528                           ;tmr_drv.c: 154: break;
  6529  0EA8  2EB4               	goto	l4774
  6530  0EA9                     l4772:	
  6531  0EA9  0874               	movf	TmrBInit@Prescaler,w
  6532                           
  6533                           ; Switch size 1, requested type "space"
  6534                           ; Number of cases is 3, Range of values is 1 to 16
  6535                           ; switch strategies available:
  6536                           ; Name         Instructions Cycles
  6537                           ; simple_byte           10     6 (average)
  6538                           ; direct_byte           41     9 (fixed)
  6539                           ; jumptable            263     9 (fixed)
  6540                           ;	Chosen strategy is simple_byte
  6541  0EAA  3A01               	xorlw	1	; case 1
  6542  0EAB  1903               	skipnz
  6543  0EAC  2E9E               	goto	l333
  6544  0EAD  3A05               	xorlw	5	; case 4
  6545  0EAE  1903               	skipnz
  6546  0EAF  2EA1               	goto	l335
  6547  0EB0  3A14               	xorlw	20	; case 16
  6548  0EB1  1903               	skipnz
  6549  0EB2  2EA5               	goto	l336
  6550  0EB3  2EB4               	goto	l4774
  6551  0EB4                     l4774:	
  6552                           
  6553                           ;tmr_drv.c: 161: T6CONbits.T6OUTPS = (Postscaler - 1);
  6554  0EB4  0875               	movf	TmrBInit@Postscaler,w
  6555  0EB5  3EFF               	addlw	255
  6556  0EB6  0020               	movlb	0	; select bank0
  6557  0EB7  00A0               	movwf	??_TmrBInit
  6558  0EB8  0DA0               	rlf	??_TmrBInit,f
  6559  0EB9  0DA0               	rlf	??_TmrBInit,f
  6560  0EBA  0DA0               	rlf	??_TmrBInit,f
  6561  0EBB  0028               	movlb	8	; select bank8
  6562  0EBC  081E               	movf	30,w	;volatile
  6563  0EBD  0020               	movlb	0	; select bank0
  6564  0EBE  0620               	xorwf	??_TmrBInit,w
  6565  0EBF  3987               	andlw	-121
  6566  0EC0  0620               	xorwf	??_TmrBInit,w
  6567  0EC1  0028               	movlb	8	; select bank8
  6568  0EC2  009E               	movwf	30	;volatile
  6569                           
  6570                           ;tmr_drv.c: 166: }
  6571                           
  6572                           ;tmr_drv.c: 165: break;
  6573                           
  6574                           ;tmr_drv.c: 164: default:
  6575                           
  6576                           ;tmr_drv.c: 162: break;
  6577  0EC3  0008               	return
  6578  0EC4                     l4778:	
  6579  0EC4  0020               	movlb	0	; select bank0
  6580  0EC5  0821               	movf	TmrBInit@TmrNumb,w
  6581                           
  6582                           ; Switch size 1, requested type "space"
  6583                           ; Number of cases is 3, Range of values is 2 to 6
  6584                           ; switch strategies available:
  6585                           ; Name         Instructions Cycles
  6586                           ; simple_byte           10     6 (average)
  6587                           ; direct_byte           19     9 (fixed)
  6588                           ; jumptable            263     9 (fixed)
  6589                           ;	Chosen strategy is simple_byte
  6590  0EC6  3A02               	xorlw	2	; case 2
  6591  0EC7  1903               	skipnz
  6592  0EC8  2E61               	goto	l4760
  6593  0EC9  3A06               	xorlw	6	; case 4
  6594  0ECA  1903               	skipnz
  6595  0ECB  2E83               	goto	l4766
  6596  0ECC  3A02               	xorlw	2	; case 6
  6597  0ECD  1903               	skipnz
  6598  0ECE  2EA9               	goto	l4772
  6599  0ECF  2ED0               	goto	l339
  6600  0ED0                     l339:	
  6601  0ED0  0008               	return
  6602  0ED1                     __end_of_TmrBInit:	
  6603                           
  6604                           	psect	text13
  6605  16B7                     __ptext13:	
  6606 ;; *************** function _MainScheduler *****************
  6607 ;; Defined at:
  6608 ;;		line 79 in file "../../../Framework/MercuryFwk/Source/c/02_Osl/os_sched.c"
  6609 ;; Parameters:    Size  Location     Type
  6610 ;;		None
  6611 ;; Auto vars:     Size  Location     Type
  6612 ;;		None
  6613 ;; Return value:  Size  Location     Type
  6614 ;;                  1    wreg      void 
  6615 ;; Registers used:
  6616 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6617 ;; Tracked objects:
  6618 ;;		On entry : 0/0
  6619 ;;		On exit  : 0/0
  6620 ;;		Unchanged: 0/0
  6621 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6622 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6623 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6624 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6625 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6626 ;;Total ram usage:        0 bytes
  6627 ;; Hardware stack levels used:    1
  6628 ;; Hardware stack levels required when called:    9
  6629 ;; This function calls:
  6630 ;;		_InitializeTasks
  6631 ;;		_ScheduleTasks
  6632 ;; This function is called by:
  6633 ;;		_main
  6634 ;; This function uses a non-reentrant model
  6635 ;;
  6636                           
  6637                           
  6638                           ;psect for function _MainScheduler
  6639  16B7                     _MainScheduler:	
  6640                           
  6641                           ;os_sched.c: 82: InitializeTasks();
  6642                           
  6643                           ;incstack = 0
  6644                           ; Regs used in _MainScheduler: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  6645  16B7  318B  2397  3196   	fcall	_InitializeTasks
  6646                           
  6647                           ;os_sched.c: 84: SystemState = RunningState;
  6648  16BA  01F6               	clrf	_SystemState
  6649  16BB  0AF6               	incf	_SystemState,f
  6650  16BC                     l5262:	
  6651                           ;os_sched.c: 91: while(((UINT8)(1)))
  6652                           
  6653                           
  6654                           ;os_sched.c: 92: {
  6655                           ;os_sched.c: 94: if (MainSystemTimebaseFlag == CallTaskPhase)
  6656  16BC  0021               	movlb	1	; select bank1
  6657  16BD  0869               	movf	_MainSystemTimebaseFlag^(0+128),w
  6658  16BE  1D03               	btfss	3,2
  6659  16BF  2EBC               	goto	l5262
  6660                           
  6661                           ;os_sched.c: 95: {
  6662                           ;os_sched.c: 97: ScheduleTasks();
  6663  16C0  3186  2652  3196   	fcall	_ScheduleTasks
  6664                           
  6665                           ;os_sched.c: 99: MainSystemTimebaseFlag = WaitTriggerPhase;
  6666  16C3  0021               	movlb	1	; select bank1
  6667  16C4  01E9               	clrf	_MainSystemTimebaseFlag^(0+128)
  6668  16C5  0AE9               	incf	_MainSystemTimebaseFlag^(0+128),f
  6669  16C6  2EBC               	goto	l5262
  6670  16C7                     __end_of_MainScheduler:	
  6671                           
  6672                           	psect	text14
  6673  0652                     __ptext14:	
  6674 ;; *************** function _ScheduleTasks *****************
  6675 ;; Defined at:
  6676 ;;		line 130 in file "../../../Framework/MercuryFwk/Source/c/02_Osl/os_sched.c"
  6677 ;; Parameters:    Size  Location     Type
  6678 ;;		None
  6679 ;; Auto vars:     Size  Location     Type
  6680 ;;  ActiveTaskIn    1   73[BANK0 ] unsigned char 
  6681 ;; Return value:  Size  Location     Type
  6682 ;;                  1    wreg      void 
  6683 ;; Registers used:
  6684 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6685 ;; Tracked objects:
  6686 ;;		On entry : 0/0
  6687 ;;		On exit  : 0/0
  6688 ;;		Unchanged: 0/0
  6689 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6690 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6691 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6692 ;;      Temps:          0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6693 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6694 ;;Total ram usage:        7 bytes
  6695 ;; Hardware stack levels used:    1
  6696 ;; Hardware stack levels required when called:    8
  6697 ;; This function calls:
  6698 ;;		_App_MainTask
  6699 ;;		_I2cSlv_MainTask
  6700 ;;		_I2c_DataReceiveSm
  6701 ;;		_Led_MainTask
  6702 ;;		_Wdg_MainTask
  6703 ;; This function is called by:
  6704 ;;		_MainScheduler
  6705 ;; This function uses a non-reentrant model
  6706 ;;
  6707                           
  6708                           
  6709                           ;psect for function _ScheduleTasks
  6710  0652                     _ScheduleTasks:	
  6711                           
  6712                           ;os_sched.c: 133: UINT8 ActiveTaskIndex = 0u;
  6713                           
  6714                           ;incstack = 0
  6715                           ; Regs used in _ScheduleTasks: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  6716  0652  0020               	movlb	0	; select bank0
  6717  0653  01E9               	clrf	ScheduleTasks@ActiveTaskIndex
  6718                           
  6719                           ;os_sched.c: 136: for (ActiveTaskIndex = 0u; ActiveTaskIndex < TaskNumber; ActiveTaskInd
      +                          ex++)
  6720  0654  01E9               	clrf	ScheduleTasks@ActiveTaskIndex
  6721  0655  3000               	movlw	low (_TaskNumber| (0+32768))
  6722  0656  0084               	movwf	4
  6723  0657  3098               	movlw	high (_TaskNumber| (0+32768))
  6724  0658  0085               	movwf	5
  6725  0659  3F00               	moviw [0]fsr0
  6726  065A  00E3               	movwf	??_ScheduleTasks
  6727  065B  3F01               	moviw [1]fsr0
  6728  065C                     L5:	
  6729  065C  00E4               	movwf	??_ScheduleTasks+1
  6730  065D  0869               	movf	ScheduleTasks@ActiveTaskIndex,w
  6731  065E  00E5               	movwf	??_ScheduleTasks+2
  6732  065F  01E6               	clrf	??_ScheduleTasks+3
  6733  0660  0864               	movf	??_ScheduleTasks+1,w
  6734  0661  0266               	subwf	??_ScheduleTasks+3,w
  6735  0662  1D03               	skipz
  6736  0663  2E66               	goto	u4625
  6737  0664  0863               	movf	??_ScheduleTasks,w
  6738  0665  0265               	subwf	??_ScheduleTasks+2,w
  6739  0666                     u4625:	
  6740  0666  1803               	btfsc	3,0
  6741  0667  0008               	return
  6742                           
  6743                           ;os_sched.c: 137: {
  6744                           ;os_sched.c: 138: if (TaskTable[ActiveTaskIndex].Counter >= (TaskTable[ActiveTaskIndex].
      +                          Timeout))
  6745  0668  0869               	movf	ScheduleTasks@ActiveTaskIndex,w
  6746  0669  00E3               	movwf	??_ScheduleTasks
  6747  066A  3002               	movlw	2
  6748  066B                     u4635:	
  6749  066B  35E3               	lslf	??_ScheduleTasks,f
  6750  066C  3EFF               	addlw	-1
  6751  066D  1D03               	skipz
  6752  066E  2E6B               	goto	u4635
  6753  066F  3563               	lslf	??_ScheduleTasks,w
  6754  0670  3E05               	addlw	5
  6755  0671  3E20               	addlw	(low (_TaskTable| (0+256)))& (0+255)
  6756  0672  0086               	movwf	6
  6757  0673  3001               	movlw	1	; select bank2/3
  6758  0674  0087               	movwf	7
  6759  0675  3F40               	moviw [0]fsr1
  6760  0676  00E4               	movwf	??_ScheduleTasks+1
  6761  0677  3F41               	moviw [1]fsr1
  6762  0678  00E5               	movwf	??_ScheduleTasks+2
  6763  0679  0869               	movf	ScheduleTasks@ActiveTaskIndex,w
  6764  067A  00E6               	movwf	??_ScheduleTasks+3
  6765  067B  3002               	movlw	2
  6766  067C                     u4645:	
  6767  067C  35E6               	lslf	??_ScheduleTasks+3,f
  6768  067D  3EFF               	addlw	-1
  6769  067E  1D03               	skipz
  6770  067F  2E7C               	goto	u4645
  6771  0680  3566               	lslf	??_ScheduleTasks+3,w
  6772  0681  3E03               	addlw	3
  6773  0682  3E20               	addlw	(low (_TaskTable| (0+256)))& (0+255)
  6774  0683  0086               	movwf	6
  6775  0684  3001               	movlw	1	; select bank2/3
  6776  0685  0087               	movwf	7
  6777  0686  3F40               	moviw [0]fsr1
  6778  0687  00E7               	movwf	??_ScheduleTasks+4
  6779  0688  3F41               	moviw [1]fsr1
  6780  0689  00E8               	movwf	??_ScheduleTasks+5
  6781  068A  0865               	movf	??_ScheduleTasks+2,w
  6782  068B  0268               	subwf	??_ScheduleTasks+5,w
  6783  068C  1D03               	skipz
  6784  068D  2E90               	goto	u4655
  6785  068E  0864               	movf	??_ScheduleTasks+1,w
  6786  068F  0267               	subwf	??_ScheduleTasks+4,w
  6787  0690                     u4655:	
  6788  0690  1C03               	skipc
  6789  0691  2ED4               	goto	l5236
  6790                           
  6791                           ;os_sched.c: 139: {
  6792                           ;os_sched.c: 140: TaskTable[ActiveTaskIndex].Counter = ((UINT8)(0));
  6793  0692  0869               	movf	ScheduleTasks@ActiveTaskIndex,w
  6794  0693  00E3               	movwf	??_ScheduleTasks
  6795  0694  3002               	movlw	2
  6796  0695                     u4665:	
  6797  0695  35E3               	lslf	??_ScheduleTasks,f
  6798  0696  3EFF               	addlw	-1
  6799  0697  1D03               	skipz
  6800  0698  2E95               	goto	u4665
  6801  0699  3563               	lslf	??_ScheduleTasks,w
  6802  069A  3E03               	addlw	3
  6803  069B  3E20               	addlw	(low (_TaskTable| (0+256)))& (0+255)
  6804  069C  0086               	movwf	6
  6805  069D  3001               	movlw	1	; select bank2/3
  6806  069E  0087               	movwf	7
  6807  069F  3000               	movlw	0
  6808  06A0  3FC0               	movwi [0]fsr1
  6809  06A1  3FC1               	movwi [1]fsr1
  6810                           
  6811                           ;os_sched.c: 141: TaskTable[ActiveTaskIndex].State = TaskRunning;
  6812  06A2  0869               	movf	ScheduleTasks@ActiveTaskIndex,w
  6813  06A3  00E3               	movwf	??_ScheduleTasks
  6814  06A4  3002               	movlw	2
  6815  06A5                     u4675:	
  6816  06A5  35E3               	lslf	??_ScheduleTasks,f
  6817  06A6  3EFF               	addlw	-1
  6818  06A7  1D03               	skipz
  6819  06A8  2EA5               	goto	u4675
  6820  06A9  3563               	lslf	??_ScheduleTasks,w
  6821  06AA  3E02               	addlw	2
  6822  06AB  3E20               	addlw	(low (_TaskTable| (0+256)))& (0+255)
  6823  06AC  0086               	movwf	6
  6824  06AD  3001               	movlw	1	; select bank2/3
  6825  06AE  0087               	movwf	7
  6826  06AF  0181               	clrf	1
  6827  06B0  0A81               	incf	1,f
  6828                           
  6829                           ;os_sched.c: 142: TaskTable[ActiveTaskIndex].Task(TaskTable[ActiveTaskIndex].Options);
  6830  06B1  0869               	movf	ScheduleTasks@ActiveTaskIndex,w
  6831  06B2  00E3               	movwf	??_ScheduleTasks
  6832  06B3  3002               	movlw	2
  6833  06B4                     u4685:	
  6834  06B4  35E3               	lslf	??_ScheduleTasks,f
  6835  06B5  3EFF               	addlw	-1
  6836  06B6  1D03               	skipz
  6837  06B7  2EB4               	goto	u4685
  6838  06B8  3563               	lslf	??_ScheduleTasks,w
  6839  06B9  3E07               	addlw	7
  6840  06BA  3E20               	addlw	(low (_TaskTable| (0+256)))& (0+255)
  6841  06BB  0086               	movwf	6
  6842  06BC  3001               	movlw	1	; select bank2/3
  6843  06BD  0087               	movwf	7
  6844  06BE  0801               	movf	1,w
  6845  06BF  00E4               	movwf	??_ScheduleTasks+1
  6846  06C0  0864               	movf	??_ScheduleTasks+1,w
  6847  06C1  00BB               	movwf	App_MainTask@Options
  6848  06C2  0869               	movf	ScheduleTasks@ActiveTaskIndex,w
  6849  06C3  00E5               	movwf	??_ScheduleTasks+2
  6850  06C4  3002               	movlw	2
  6851  06C5                     u4695:	
  6852  06C5  35E5               	lslf	??_ScheduleTasks+2,f
  6853  06C6  3EFF               	addlw	-1
  6854  06C7  1D03               	skipz
  6855  06C8  2EC5               	goto	u4695
  6856  06C9  3565               	lslf	??_ScheduleTasks+2,w
  6857  06CA  3E20               	addlw	(low (_TaskTable| (0+256)))& (0+255)
  6858  06CB  0086               	movwf	6
  6859  06CC  3001               	movlw	1	; select bank2/3
  6860  06CD  0087               	movwf	7
  6861  06CE  3F41               	moviw [1]fsr1
  6862  06CF  008A               	movwf	10
  6863  06D0  3F40               	moviw [0]fsr1
  6864  06D1  000A               	callw
  6865  06D2  3186               	pagesel	$
  6866                           
  6867                           ;os_sched.c: 143: }
  6868  06D3  2EF5               	goto	l5238
  6869  06D4                     l5236:	
  6870                           
  6871                           ;os_sched.c: 144: else
  6872                           ;os_sched.c: 145: {
  6873                           ;os_sched.c: 146: TaskTable[ActiveTaskIndex].Counter++;
  6874  06D4  0020               	movlb	0	; select bank0
  6875  06D5  0869               	movf	ScheduleTasks@ActiveTaskIndex,w
  6876  06D6  00E3               	movwf	??_ScheduleTasks
  6877  06D7  3002               	movlw	2
  6878  06D8                     u4705:	
  6879  06D8  35E3               	lslf	??_ScheduleTasks,f
  6880  06D9  3EFF               	addlw	-1
  6881  06DA  1D03               	skipz
  6882  06DB  2ED8               	goto	u4705
  6883  06DC  3563               	lslf	??_ScheduleTasks,w
  6884  06DD  3E03               	addlw	3
  6885  06DE  3E20               	addlw	(low (_TaskTable| (0+256)))& (0+255)
  6886  06DF  0086               	movwf	6
  6887  06E0  3001               	movlw	1	; select bank2/3
  6888  06E1  0087               	movwf	7
  6889  06E2  3001               	movlw	1
  6890  06E3  0781               	addwf	1,f
  6891  06E4  3141               	addfsr 1,1
  6892  06E5  1803               	skipnc
  6893  06E6  0A81               	incf	1,f
  6894                           
  6895                           ;os_sched.c: 147: TaskTable[ActiveTaskIndex].State = TaskIdle;
  6896  06E7  0869               	movf	ScheduleTasks@ActiveTaskIndex,w
  6897  06E8  00E3               	movwf	??_ScheduleTasks
  6898  06E9  3002               	movlw	2
  6899  06EA                     u4715:	
  6900  06EA  35E3               	lslf	??_ScheduleTasks,f
  6901  06EB  3EFF               	addlw	-1
  6902  06EC  1D03               	skipz
  6903  06ED  2EEA               	goto	u4715
  6904  06EE  3563               	lslf	??_ScheduleTasks,w
  6905  06EF  3E02               	addlw	2
  6906  06F0  3E20               	addlw	(low (_TaskTable| (0+256)))& (0+255)
  6907  06F1  0086               	movwf	6
  6908  06F2  3001               	movlw	1	; select bank2/3
  6909  06F3  0087               	movwf	7
  6910  06F4  0181               	clrf	1
  6911  06F5                     l5238:	
  6912  06F5  3001               	movlw	1
  6913  06F6  0020               	movlb	0	; select bank0
  6914  06F7  00E3               	movwf	??_ScheduleTasks
  6915  06F8  0863               	movf	??_ScheduleTasks,w
  6916  06F9  07E9               	addwf	ScheduleTasks@ActiveTaskIndex,f
  6917  06FA  3000               	movlw	low (_TaskNumber| (0+32768))
  6918  06FB  0084               	movwf	4
  6919  06FC  3098               	movlw	high (_TaskNumber| (0+32768))
  6920  06FD  0085               	movwf	5
  6921  06FE  3F00               	moviw [0]fsr0
  6922  06FF  00E3               	movwf	??_ScheduleTasks
  6923  0700  3F01               	moviw [1]fsr0
  6924  0701  2E5C               	goto	L5
  6925  0702                     __end_of_ScheduleTasks:	
  6926                           
  6927                           	psect	text15
  6928  0B97                     __ptext15:	
  6929 ;; *************** function _InitializeTasks *****************
  6930 ;; Defined at:
  6931 ;;		line 111 in file "../../../Framework/MercuryFwk/Source/c/02_Osl/os_sched.c"
  6932 ;; Parameters:    Size  Location     Type
  6933 ;;		None
  6934 ;; Auto vars:     Size  Location     Type
  6935 ;;  ActiveTaskIn    1   71[BANK0 ] unsigned char 
  6936 ;; Return value:  Size  Location     Type
  6937 ;;                  1    wreg      void 
  6938 ;; Registers used:
  6939 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6940 ;; Tracked objects:
  6941 ;;		On entry : 0/0
  6942 ;;		On exit  : 0/0
  6943 ;;		Unchanged: 0/0
  6944 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6945 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6946 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6947 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6948 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6949 ;;Total ram usage:        5 bytes
  6950 ;; Hardware stack levels used:    1
  6951 ;; Hardware stack levels required when called:    8
  6952 ;; This function calls:
  6953 ;;		_App_MainTask
  6954 ;;		_I2cSlv_MainTask
  6955 ;;		_I2c_DataReceiveSm
  6956 ;;		_Led_MainTask
  6957 ;;		_Wdg_MainTask
  6958 ;; This function is called by:
  6959 ;;		_MainScheduler
  6960 ;; This function uses a non-reentrant model
  6961 ;;
  6962                           
  6963                           
  6964                           ;psect for function _InitializeTasks
  6965  0B97                     _InitializeTasks:	
  6966                           
  6967                           ;os_sched.c: 114: UINT8 ActiveTaskIndex = 0u;
  6968                           
  6969                           ;incstack = 0
  6970                           ; Regs used in _InitializeTasks: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  6971  0B97  0020               	movlb	0	; select bank0
  6972  0B98  01E7               	clrf	InitializeTasks@ActiveTaskIndex
  6973                           
  6974                           ;os_sched.c: 117: for (ActiveTaskIndex = 0u; ActiveTaskIndex < TaskNumber; ActiveTaskInd
      +                          ex++)
  6975  0B99  01E7               	clrf	InitializeTasks@ActiveTaskIndex
  6976  0B9A  3000               	movlw	low (_TaskNumber| (0+32768))
  6977  0B9B  0084               	movwf	4
  6978  0B9C  3098               	movlw	high (_TaskNumber| (0+32768))
  6979  0B9D  0085               	movwf	5
  6980  0B9E  3F00               	moviw [0]fsr0
  6981  0B9F  00E3               	movwf	??_InitializeTasks
  6982  0BA0  3F01               	moviw [1]fsr0
  6983  0BA1                     L6:	
  6984  0BA1  00E4               	movwf	??_InitializeTasks+1
  6985  0BA2  0867               	movf	InitializeTasks@ActiveTaskIndex,w
  6986  0BA3  00E5               	movwf	??_InitializeTasks+2
  6987  0BA4  01E6               	clrf	??_InitializeTasks+3
  6988  0BA5  0864               	movf	??_InitializeTasks+1,w
  6989  0BA6  0266               	subwf	??_InitializeTasks+3,w
  6990  0BA7  1D03               	skipz
  6991  0BA8  2BAB               	goto	u4585
  6992  0BA9  0863               	movf	??_InitializeTasks,w
  6993  0BAA  0265               	subwf	??_InitializeTasks+2,w
  6994  0BAB                     u4585:	
  6995  0BAB  1803               	btfsc	3,0
  6996  0BAC  0008               	return
  6997                           
  6998                           ;os_sched.c: 118: {
  6999                           ;os_sched.c: 119: TaskTable[ActiveTaskIndex].Task(TaskTable[ActiveTaskIndex].Options);
  7000  0BAD  0867               	movf	InitializeTasks@ActiveTaskIndex,w
  7001  0BAE  00E3               	movwf	??_InitializeTasks
  7002  0BAF  3002               	movlw	2
  7003  0BB0                     u4595:	
  7004  0BB0  35E3               	lslf	??_InitializeTasks,f
  7005  0BB1  3EFF               	addlw	-1
  7006  0BB2  1D03               	skipz
  7007  0BB3  2BB0               	goto	u4595
  7008  0BB4  3563               	lslf	??_InitializeTasks,w
  7009  0BB5  3E07               	addlw	7
  7010  0BB6  3E20               	addlw	(low (_TaskTable| (0+256)))& (0+255)
  7011  0BB7  0086               	movwf	6
  7012  0BB8  3001               	movlw	1	; select bank2/3
  7013  0BB9  0087               	movwf	7
  7014  0BBA  0801               	movf	1,w
  7015  0BBB  00E4               	movwf	??_InitializeTasks+1
  7016  0BBC  0864               	movf	??_InitializeTasks+1,w
  7017  0BBD  00BB               	movwf	App_MainTask@Options
  7018  0BBE  0867               	movf	InitializeTasks@ActiveTaskIndex,w
  7019  0BBF  00E5               	movwf	??_InitializeTasks+2
  7020  0BC0  3002               	movlw	2
  7021  0BC1                     u4605:	
  7022  0BC1  35E5               	lslf	??_InitializeTasks+2,f
  7023  0BC2  3EFF               	addlw	-1
  7024  0BC3  1D03               	skipz
  7025  0BC4  2BC1               	goto	u4605
  7026  0BC5  3565               	lslf	??_InitializeTasks+2,w
  7027  0BC6  3E20               	addlw	(low (_TaskTable| (0+256)))& (0+255)
  7028  0BC7  0086               	movwf	6
  7029  0BC8  3001               	movlw	1	; select bank2/3
  7030  0BC9  0087               	movwf	7
  7031  0BCA  3F41               	moviw [1]fsr1
  7032  0BCB  008A               	movwf	10
  7033  0BCC  3F40               	moviw [0]fsr1
  7034  0BCD  000A               	callw
  7035  0BCE  318B               	pagesel	$
  7036  0BCF  3001               	movlw	1
  7037  0BD0  0020               	movlb	0	; select bank0
  7038  0BD1  00E3               	movwf	??_InitializeTasks
  7039  0BD2  0863               	movf	??_InitializeTasks,w
  7040  0BD3  07E7               	addwf	InitializeTasks@ActiveTaskIndex,f
  7041  0BD4  3000               	movlw	low (_TaskNumber| (0+32768))
  7042  0BD5  0084               	movwf	4
  7043  0BD6  3098               	movlw	high (_TaskNumber| (0+32768))
  7044  0BD7  0085               	movwf	5
  7045  0BD8  3F00               	moviw [0]fsr0
  7046  0BD9  00E3               	movwf	??_InitializeTasks
  7047  0BDA  3F01               	moviw [1]fsr0
  7048  0BDB  2BA1               	goto	L6
  7049  0BDC                     __end_of_InitializeTasks:	
  7050                           
  7051                           	psect	text16
  7052  01C9                     __ptext16:	
  7053 ;; *************** function _App_MainTask *****************
  7054 ;; Defined at:
  7055 ;;		line 273 in file "../Source/c/04_App/sb330_app.c"
  7056 ;; Parameters:    Size  Location     Type
  7057 ;;  Options         1   27[BANK0 ] unsigned char 
  7058 ;; Auto vars:     Size  Location     Type
  7059 ;;  WpuCh          18   49[BANK0 ] struct _WpuChType
  7060 ;;  AnalogChSel    12   31[BANK0 ] struct _AnalogChSelType
  7061 ;;  AdcConfig       6   43[BANK0 ] struct _AdcCfgType
  7062 ;; Return value:  Size  Location     Type
  7063 ;;                  1    wreg      void 
  7064 ;; Registers used:
  7065 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7066 ;; Tracked objects:
  7067 ;;		On entry : 0/0
  7068 ;;		On exit  : 0/0
  7069 ;;		Unchanged: 0/0
  7070 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7071 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7072 ;;      Locals:         0      36       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7073 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7074 ;;      Totals:         0      40       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7075 ;;Total ram usage:       40 bytes
  7076 ;; Hardware stack levels used:    1
  7077 ;; Hardware stack levels required when called:    7
  7078 ;; This function calls:
  7079 ;;		_Adc_ConfigAnCh
  7080 ;;		_Adc_InitAdcModule
  7081 ;;		_AppSm
  7082 ;;		_Dht_GetSensorData
  7083 ;;		_Mcu_ConfigPullUps
  7084 ;;		_Mcu_SetDieTempMode
  7085 ;;		_Mcu_SetDieTempSts
  7086 ;;		_Mcu_SetPullUpsSts
  7087 ;;		___awdiv
  7088 ;;		___awmod
  7089 ;;		___lwdiv
  7090 ;;		___lwmod
  7091 ;; This function is called by:
  7092 ;;		_InitializeTasks
  7093 ;;		_ScheduleTasks
  7094 ;; This function uses a non-reentrant model
  7095 ;;
  7096                           
  7097                           
  7098                           ;psect for function _App_MainTask
  7099  01C9                     _App_MainTask:	
  7100                           
  7101                           ;sb330_app.c: 275: WpuChType WpuCh = {((UINT8)(0)),((UINT8)(0)),((UINT8)(0)),((UINT8)(0)
      +                          ),((UINT8)(0)),((UINT8)(0)),((UINT8)(0)),((UINT8)(0)),((UINT8)(0)),((UINT8)(0)),((UINT8)
      +                          (0)),((UINT8)(0))};
  7102                           
  7103                           ;incstack = 0
  7104                           ; Regs used in _App_MainTask: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  7105  01C9  30A0               	movlw	low App_MainTask@F4099
  7106  01CA  0086               	movwf	6
  7107  01CB  3001               	movlw	high App_MainTask@F4099
  7108  01CC  0087               	movwf	7
  7109  01CD  3051               	movlw	low App_MainTask@WpuCh
  7110  01CE  0084               	movwf	4
  7111  01CF  3000               	movlw	high App_MainTask@WpuCh
  7112  01D0  0085               	movwf	5
  7113  01D1  3012               	movlw	18
  7114  01D2  0020               	movlb	0	; select bank0
  7115  01D3  00BC               	movwf	??_App_MainTask
  7116  01D4                     u4490:	
  7117  01D4  0016               	moviw fsr1++
  7118  01D5  001A               	movwi fsr0++
  7119  01D6  0BBC               	decfsz	??_App_MainTask,f
  7120  01D7  29D4               	goto	u4490
  7121                           
  7122                           ;sb330_app.c: 276: AnalogChSelType AnalogChSel = {((UINT8)(0)),((UINT8)(0)),((UINT8)(0))
      +                          ,((UINT8)(0)),((UINT8)(0)),((UINT8)(0)),((UINT8)(0)),((UINT8)(0))};
  7123  01D8  3048               	movlw	low App_MainTask@F4113
  7124  01D9  0086               	movwf	6
  7125  01DA  3001               	movlw	high App_MainTask@F4113
  7126  01DB  0087               	movwf	7
  7127  01DC  303F               	movlw	low App_MainTask@AnalogChSel
  7128  01DD  0084               	movwf	4
  7129  01DE  3000               	movlw	high App_MainTask@AnalogChSel
  7130  01DF  0085               	movwf	5
  7131  01E0  300C               	movlw	12
  7132  01E1  00BC               	movwf	??_App_MainTask
  7133  01E2                     u4500:	
  7134  01E2  0016               	moviw fsr1++
  7135  01E3  001A               	movwi fsr0++
  7136  01E4  0BBC               	decfsz	??_App_MainTask,f
  7137  01E5  29E2               	goto	u4500
  7138                           
  7139                           ;sb330_app.c: 277: AdcConfigType AdcConfig;
  7140                           ;sb330_app.c: 278: static UINT8 Counter = 0;
  7141                           ;sb330_app.c: 280: switch (SystemState)
  7142  01E6  2ADD               	goto	l5210
  7143  01E7                     l991:	
  7144                           ;sb330_app.c: 281: {
  7145                           ;sb330_app.c: 283: case InitializationState:
  7146                           
  7147                           
  7148                           ;sb330_app.c: 285: TRISCbits.TRISC5 = ((UINT8)(1));
  7149  01E7  0021               	movlb	1	; select bank1
  7150  01E8  168E               	bsf	14,5	;volatile
  7151                           
  7152                           ;sb330_app.c: 286: TRISCbits.TRISC4 = ((UINT8)(1));
  7153  01E9  160E               	bsf	14,4	;volatile
  7154                           
  7155                           ;sb330_app.c: 287: TRISCbits.TRISC3 = ((UINT8)(1));
  7156  01EA  158E               	bsf	14,3	;volatile
  7157                           
  7158                           ;sb330_app.c: 288: TRISCbits.TRISC6 = ((UINT8)(1));
  7159  01EB  170E               	bsf	14,6	;volatile
  7160                           
  7161                           ;sb330_app.c: 291: WpuCh.WpuC5 = ((UINT8)(1));
  7162  01EC  0020               	movlb	0	; select bank0
  7163  01ED  01E0               	clrf	App_MainTask@WpuCh+15
  7164  01EE  0AE0               	incf	App_MainTask@WpuCh+15,f
  7165                           
  7166                           ;sb330_app.c: 292: WpuCh.WpuC4 = ((UINT8)(1));
  7167  01EF  01DF               	clrf	App_MainTask@WpuCh+14
  7168  01F0  0ADF               	incf	App_MainTask@WpuCh+14,f
  7169                           
  7170                           ;sb330_app.c: 293: WpuCh.WpuC3 = ((UINT8)(1));
  7171  01F1  01DE               	clrf	App_MainTask@WpuCh+13
  7172  01F2  0ADE               	incf	App_MainTask@WpuCh+13,f
  7173                           
  7174                           ;sb330_app.c: 294: WpuCh.WpuC6 = ((UINT8)(1));
  7175  01F3  01E1               	clrf	App_MainTask@WpuCh+16
  7176  01F4  0AE1               	incf	App_MainTask@WpuCh+16,f
  7177                           
  7178                           ;sb330_app.c: 296: Mcu_ConfigPullUps(&WpuCh);
  7179  01F5  3051               	movlw	(low (App_MainTask@WpuCh| 0))& (0+255)
  7180  01F6  3187  2702  3181   	fcall	_Mcu_ConfigPullUps
  7181                           
  7182                           ;sb330_app.c: 297: Mcu_SetPullUpsSts(Mcu_GlobalPuEnabled);
  7183  01F9  3000               	movlw	0
  7184  01FA  3195  25FC  3181   	fcall	_Mcu_SetPullUpsSts
  7185                           
  7186                           ;sb330_app.c: 300: Adc_ConfigAnCh(&AnalogChSel);
  7187  01FD  303F               	movlw	(low (App_MainTask@AnalogChSel| 0))& (0+255)
  7188  01FE  318D  2573  3181   	fcall	_Adc_ConfigAnCh
  7189                           
  7190                           ;sb330_app.c: 303: Mcu_SetDieTempSts(((UINT8)(1)));
  7191  0201  3001               	movlw	1
  7192  0202  3195  25F4  3181   	fcall	_Mcu_SetDieTempSts
  7193                           
  7194                           ;sb330_app.c: 304: Mcu_SetDieTempMode(((UINT8)(0)));
  7195  0205  3000               	movlw	0
  7196  0206  3195  25EC  3181   	fcall	_Mcu_SetDieTempMode
  7197                           
  7198                           ;sb330_app.c: 307: AdcConfig.AdcConvClock = ((UINT8)(3));
  7199  0209  3003               	movlw	3
  7200  020A  0020               	movlb	0	; select bank0
  7201  020B  00BC               	movwf	??_App_MainTask
  7202  020C  083C               	movf	??_App_MainTask,w
  7203  020D  00CD               	movwf	App_MainTask@AdcConfig+2
  7204                           
  7205                           ;sb330_app.c: 308: AdcConfig.AdcIntEnabled = ((UINT8)(0));
  7206  020E  01D0               	clrf	App_MainTask@AdcConfig+5
  7207                           
  7208                           ;sb330_app.c: 309: AdcConfig.AdcNegRef = ((UINT8)(0));
  7209  020F  01CE               	clrf	App_MainTask@AdcConfig+3
  7210                           
  7211                           ;sb330_app.c: 310: AdcConfig.AdcPosRef = ((UINT8)(0));
  7212  0210  01CF               	clrf	App_MainTask@AdcConfig+4
  7213                           
  7214                           ;sb330_app.c: 311: AdcConfig.AdcResultFormat = ((UINT8)(1));
  7215  0211  01CC               	clrf	App_MainTask@AdcConfig+1
  7216  0212  0ACC               	incf	App_MainTask@AdcConfig+1,f
  7217                           
  7218                           ;sb330_app.c: 312: AdcConfig.AdcEnable = ((UINT8)(1));
  7219  0213  01CB               	clrf	App_MainTask@AdcConfig
  7220  0214  0ACB               	incf	App_MainTask@AdcConfig,f
  7221                           
  7222                           ;sb330_app.c: 313: Adc_InitAdcModule(&AdcConfig);
  7223  0215  304B               	movlw	(low (App_MainTask@AdcConfig| 0))& (0+255)
  7224  0216  318A  22A7         	fcall	_Adc_InitAdcModule
  7225                           
  7226                           ;sb330_app.c: 314: break;
  7227  0218  0008               	return
  7228  0219                     l5170:	
  7229                           ;sb330_app.c: 317: case RunningState:
  7230                           
  7231                           
  7232                           ;sb330_app.c: 319: Counter++;
  7233  0219  3001               	movlw	1
  7234  021A  0020               	movlb	0	; select bank0
  7235  021B  00BC               	movwf	??_App_MainTask
  7236  021C  083C               	movf	??_App_MainTask,w
  7237  021D  0021               	movlb	1	; select bank1
  7238  021E  07B3               	addwf	App_MainTask@Counter^(0+128),f
  7239                           
  7240                           ;sb330_app.c: 321: if (Counter > ((UINT16)(4000)/((UINT16)(100))))
  7241  021F  3029               	movlw	41
  7242  0220  0233               	subwf	App_MainTask@Counter^(0+128),w
  7243  0221  1C03               	skipc
  7244  0222  2ADA               	goto	l5206
  7245                           
  7246                           ;sb330_app.c: 322: {
  7247                           ;sb330_app.c: 324: Counter = 0;
  7248  0223  01B3               	clrf	App_MainTask@Counter^(0+128)
  7249                           
  7250                           ;sb330_app.c: 326: if (Dht_GetSensorData())
  7251  0224  3189  2188  3181   	fcall	_Dht_GetSensorData
  7252  0227  3A00               	xorlw	0
  7253  0228  1903               	skipnz
  7254  0229  2AD8               	goto	l5204
  7255                           
  7256                           ;sb330_app.c: 327: {
  7257                           ;sb330_app.c: 348: if (((Sensor.Data.HumidityLow | (Sensor.Data.HumidityHigh << 8)) <= 1
      +                          000) &&
  7258                           ;sb330_app.c: 349: ((Sensor.Data.HumidityLow | (Sensor.Data.HumidityHigh << 8)) >= 0) &&
  7259                           ;sb330_app.c: 350: ((Sensor.Data.TemperatureLow | ((Sensor.Data.TemperatureHigh & 0x7F) 
      +                          << 8)) <= 800))
  7260  022A  0021               	movlb	1	; select bank1
  7261  022B  0820               	movf	_Sensor^(0+128),w
  7262  022C  3A80               	xorlw	128
  7263  022D  0020               	movlb	0	; select bank0
  7264  022E  00BC               	movwf	??_App_MainTask
  7265  022F  3083               	movlw	131
  7266  0230  023C               	subwf	??_App_MainTask,w
  7267  0231  1D03               	skipz
  7268  0232  2A36               	goto	u4535
  7269  0233  30E9               	movlw	233
  7270  0234  0021               	movlb	1	; select bank1
  7271  0235  0221               	subwf	(_Sensor^(0+128)+1),w
  7272  0236                     u4535:	
  7273  0236  1803               	skipnc
  7274  0237  2ADA               	goto	l5206
  7275  0238  0021               	movlb	1	; select bank1
  7276  0239  1BA0               	btfsc	_Sensor^(0+128),7
  7277  023A  2ADA               	goto	l5206
  7278  023B  307F               	movlw	127
  7279  023C  0522               	andwf	(_Sensor^(0+128)+2),w
  7280  023D  0020               	movlb	0	; select bank0
  7281  023E  00BC               	movwf	??_App_MainTask
  7282  023F  083C               	movf	??_App_MainTask,w
  7283  0240  3A80               	xorlw	128
  7284  0241  00BD               	movwf	??_App_MainTask+1
  7285  0242  3083               	movlw	131
  7286  0243  023D               	subwf	??_App_MainTask+1,w
  7287  0244  1D03               	skipz
  7288  0245  2A49               	goto	u4555
  7289  0246  3021               	movlw	33
  7290  0247  0021               	movlb	1	; select bank1
  7291  0248  0223               	subwf	(_Sensor^(0+128)+3),w
  7292  0249                     u4555:	
  7293  0249  1803               	skipnc
  7294  024A  2ADA               	goto	l5206
  7295                           
  7296                           ;sb330_app.c: 351: {
  7297                           ;sb330_app.c: 356: TempSign = (Sensor.Data.TemperatureHigh & 0x80) >> 7;
  7298  024B  0021               	movlb	1	; select bank1
  7299  024C  0822               	movf	(_Sensor^(0+128)+2),w
  7300  024D  0020               	movlb	0	; select bank0
  7301  024E  00BC               	movwf	??_App_MainTask
  7302  024F  3007               	movlw	7
  7303  0250                     u4565:	
  7304  0250  36BC               	lsrf	??_App_MainTask,f
  7305  0251  0B89               	decfsz	9,f
  7306  0252  2A50               	goto	u4565
  7307  0253  083C               	movf	??_App_MainTask,w
  7308  0254  3901               	andlw	1
  7309  0255  00BD               	movwf	??_App_MainTask+1
  7310  0256  083D               	movf	??_App_MainTask+1,w
  7311  0257  0021               	movlb	1	; select bank1
  7312  0258  00BB               	movwf	_TempSign^(0+128)
  7313                           
  7314                           ;sb330_app.c: 358: Temperature = Sensor.Data.TemperatureLow | ((Sensor.Data.TemperatureH
      +                          igh & 0x7F) << 8);
  7315  0259  0822               	movf	(_Sensor^(0+128)+2),w
  7316  025A  397F               	andlw	127
  7317  025B  0020               	movlb	0	; select bank0
  7318  025C  00BC               	movwf	??_App_MainTask
  7319  025D  01BD               	clrf	??_App_MainTask+1
  7320  025E  083C               	movf	??_App_MainTask,w
  7321  025F  00BD               	movwf	??_App_MainTask+1
  7322  0260  01BC               	clrf	??_App_MainTask
  7323  0261  083C               	movf	??_App_MainTask,w
  7324  0262  0021               	movlb	1	; select bank1
  7325  0263  0423               	iorwf	(_Sensor^(0+128)+3),w
  7326  0264  00A7               	movwf	_Temperature^(0+128)
  7327  0265  0020               	movlb	0	; select bank0
  7328  0266  083D               	movf	??_App_MainTask+1,w
  7329  0267  0021               	movlb	1	; select bank1
  7330  0268  00A8               	movwf	(_Temperature+1)^(0+128)
  7331                           
  7332                           ;sb330_app.c: 359: Humidity = Sensor.Data.HumidityLow | (Sensor.Data.HumidityHigh << 8);
  7333  0269  0820               	movf	_Sensor^(0+128),w
  7334  026A  0020               	movlb	0	; select bank0
  7335  026B  00BC               	movwf	??_App_MainTask
  7336  026C  01BD               	clrf	??_App_MainTask+1
  7337  026D  083C               	movf	??_App_MainTask,w
  7338  026E  00BD               	movwf	??_App_MainTask+1
  7339  026F  01BC               	clrf	??_App_MainTask
  7340  0270  083C               	movf	??_App_MainTask,w
  7341  0271  0021               	movlb	1	; select bank1
  7342  0272  0421               	iorwf	(_Sensor^(0+128)+1),w
  7343  0273  00A5               	movwf	_Humidity^(0+128)
  7344  0274  0020               	movlb	0	; select bank0
  7345  0275  083D               	movf	??_App_MainTask+1,w
  7346  0276  0021               	movlb	1	; select bank1
  7347  0277  00A6               	movwf	(_Humidity+1)^(0+128)
  7348                           
  7349                           ;sb330_app.c: 361: TemperatureInt = Temperature/10;
  7350  0278  300A               	movlw	10
  7351  0279  0020               	movlb	0	; select bank0
  7352  027A  00A0               	movwf	___awdiv@divisor
  7353  027B  3000               	movlw	0
  7354  027C  00A1               	movwf	___awdiv@divisor+1
  7355  027D  0021               	movlb	1	; select bank1
  7356  027E  0828               	movf	(_Temperature+1)^(0+128),w
  7357  027F  0020               	movlb	0	; select bank0
  7358  0280  00A3               	movwf	___awdiv@dividend+1
  7359  0281  0021               	movlb	1	; select bank1
  7360  0282  0827               	movf	_Temperature^(0+128),w
  7361  0283  0020               	movlb	0	; select bank0
  7362  0284  00A2               	movwf	___awdiv@dividend
  7363  0285  318C  246D  3181   	fcall	___awdiv
  7364  0288  0020               	movlb	0	; select bank0
  7365  0289  0820               	movf	?___awdiv,w
  7366  028A  00BC               	movwf	??_App_MainTask
  7367  028B  083C               	movf	??_App_MainTask,w
  7368  028C  0021               	movlb	1	; select bank1
  7369  028D  00BA               	movwf	_TemperatureInt^(0+128)
  7370                           
  7371                           ;sb330_app.c: 362: TemperatureDec = Temperature%10;
  7372  028E  300A               	movlw	10
  7373  028F  0020               	movlb	0	; select bank0
  7374  0290  00A0               	movwf	___awmod@divisor
  7375  0291  3000               	movlw	0
  7376  0292  00A1               	movwf	___awmod@divisor+1
  7377  0293  0021               	movlb	1	; select bank1
  7378  0294  0828               	movf	(_Temperature+1)^(0+128),w
  7379  0295  0020               	movlb	0	; select bank0
  7380  0296  00A3               	movwf	___awmod@dividend+1
  7381  0297  0021               	movlb	1	; select bank1
  7382  0298  0827               	movf	_Temperature^(0+128),w
  7383  0299  0020               	movlb	0	; select bank0
  7384  029A  00A2               	movwf	___awmod@dividend
  7385  029B  318B  23DC  3181   	fcall	___awmod
  7386  029E  0020               	movlb	0	; select bank0
  7387  029F  0820               	movf	?___awmod,w
  7388  02A0  00BC               	movwf	??_App_MainTask
  7389  02A1  083C               	movf	??_App_MainTask,w
  7390  02A2  0021               	movlb	1	; select bank1
  7391  02A3  00B9               	movwf	_TemperatureDec^(0+128)
  7392                           
  7393                           ;sb330_app.c: 363: HumidityInt = Humidity/10;
  7394  02A4  300A               	movlw	10
  7395  02A5  0020               	movlb	0	; select bank0
  7396  02A6  00A0               	movwf	___lwdiv@divisor
  7397  02A7  3000               	movlw	0
  7398  02A8  00A1               	movwf	___lwdiv@divisor+1
  7399  02A9  0021               	movlb	1	; select bank1
  7400  02AA  0826               	movf	(_Humidity+1)^(0+128),w
  7401  02AB  0020               	movlb	0	; select bank0
  7402  02AC  00A3               	movwf	___lwdiv@dividend+1
  7403  02AD  0021               	movlb	1	; select bank1
  7404  02AE  0825               	movf	_Humidity^(0+128),w
  7405  02AF  0020               	movlb	0	; select bank0
  7406  02B0  00A2               	movwf	___lwdiv@dividend
  7407  02B1  318A  2272  3181   	fcall	___lwdiv
  7408  02B4  0020               	movlb	0	; select bank0
  7409  02B5  0820               	movf	?___lwdiv,w
  7410  02B6  00BC               	movwf	??_App_MainTask
  7411  02B7  083C               	movf	??_App_MainTask,w
  7412  02B8  0021               	movlb	1	; select bank1
  7413  02B9  00B8               	movwf	_HumidityInt^(0+128)
  7414                           
  7415                           ;sb330_app.c: 364: HumidityDec = Humidity%10;
  7416  02BA  300A               	movlw	10
  7417  02BB  0020               	movlb	0	; select bank0
  7418  02BC  00A0               	movwf	___lwmod@divisor
  7419  02BD  3000               	movlw	0
  7420  02BE  00A1               	movwf	___lwmod@divisor+1
  7421  02BF  0021               	movlb	1	; select bank1
  7422  02C0  0826               	movf	(_Humidity+1)^(0+128),w
  7423  02C1  0020               	movlb	0	; select bank0
  7424  02C2  00A3               	movwf	___lwmod@dividend+1
  7425  02C3  0021               	movlb	1	; select bank1
  7426  02C4  0825               	movf	_Humidity^(0+128),w
  7427  02C5  0020               	movlb	0	; select bank0
  7428  02C6  00A2               	movwf	___lwmod@dividend
  7429  02C7  3189  21B4  3181   	fcall	___lwmod
  7430  02CA  0020               	movlb	0	; select bank0
  7431  02CB  0820               	movf	?___lwmod,w
  7432  02CC  00BC               	movwf	??_App_MainTask
  7433  02CD  083C               	movf	??_App_MainTask,w
  7434  02CE  0021               	movlb	1	; select bank1
  7435  02CF  00B7               	movwf	_HumidityDec^(0+128)
  7436                           
  7437                           ;sb330_app.c: 365: ChecksumSts = 1u;
  7438  02D0  01B6               	clrf	_ChecksumSts^(0+128)
  7439  02D1  0AB6               	incf	_ChecksumSts^(0+128),f
  7440                           
  7441                           ;sb330_app.c: 367: if (TempSign)
  7442  02D2  083B               	movf	_TempSign^(0+128),w
  7443  02D3  1903               	btfsc	3,2
  7444  02D4  2ADA               	goto	l5206
  7445                           
  7446                           ;sb330_app.c: 368: {
  7447                           ;sb330_app.c: 369: TemperatureInt = -TemperatureInt;
  7448  02D5  09BA               	comf	_TemperatureInt^(0+128),f
  7449  02D6  0ABA               	incf	_TemperatureInt^(0+128),f
  7450                           
  7451                           ;sb330_app.c: 370: }
  7452                           ;sb330_app.c: 371: }
  7453                           ;sb330_app.c: 373: }
  7454  02D7  2ADA               	goto	l5206
  7455  02D8                     l5204:	
  7456                           
  7457                           ;sb330_app.c: 374: else
  7458                           ;sb330_app.c: 375: {
  7459                           ;sb330_app.c: 377: ChecksumSts = 0u;
  7460  02D8  0021               	movlb	1	; select bank1
  7461  02D9  01B6               	clrf	_ChecksumSts^(0+128)
  7462  02DA                     l5206:	
  7463                           
  7464                           ;sb330_app.c: 378: }
  7465                           ;sb330_app.c: 379: }
  7466                           ;sb330_app.c: 381: AppSm();
  7467  02DA  3189  215E         	fcall	_AppSm
  7468                           
  7469                           ;sb330_app.c: 387: }
  7470                           
  7471                           ;sb330_app.c: 386: break;
  7472                           
  7473                           ;sb330_app.c: 385: default:
  7474                           
  7475                           ;sb330_app.c: 382: break;
  7476  02DC  0008               	return
  7477  02DD                     l5210:	
  7478  02DD  0876               	movf	_SystemState,w
  7479                           
  7480                           ; Switch size 1, requested type "space"
  7481                           ; Number of cases is 2, Range of values is 0 to 1
  7482                           ; switch strategies available:
  7483                           ; Name         Instructions Cycles
  7484                           ; simple_byte            7     4 (average)
  7485                           ; direct_byte           10     6 (fixed)
  7486                           ; jumptable            260     6 (fixed)
  7487                           ;	Chosen strategy is simple_byte
  7488  02DE  3A00               	xorlw	0	; case 0
  7489  02DF  1903               	skipnz
  7490  02E0  29E7               	goto	l991
  7491  02E1  3A01               	xorlw	1	; case 1
  7492  02E2  1903               	skipnz
  7493  02E3  2A19               	goto	l5170
  7494  02E4  2AE5               	goto	l1000
  7495  02E5                     l1000:	
  7496  02E5  0008               	return
  7497  02E6                     __end_of_App_MainTask:	
  7498                           
  7499                           	psect	text17
  7500  09E1                     __ptext17:	
  7501 ;; *************** function _Led_MainTask *****************
  7502 ;; Defined at:
  7503 ;;		line 185 in file "../../../Framework/MercuryFwk/Source/c/03_Sml/02_Ssl/led.c"
  7504 ;; Parameters:    Size  Location     Type
  7505 ;;  Options         1   27[BANK0 ] unsigned char 
  7506 ;; Auto vars:     Size  Location     Type
  7507 ;;		None
  7508 ;; Return value:  Size  Location     Type
  7509 ;;                  1    wreg      void 
  7510 ;; Registers used:
  7511 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7512 ;; Tracked objects:
  7513 ;;		On entry : 0/0
  7514 ;;		On exit  : 0/0
  7515 ;;		Unchanged: 0/0
  7516 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7517 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7518 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7519 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7520 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7521 ;;Total ram usage:        5 bytes
  7522 ;; Hardware stack levels used:    1
  7523 ;; Hardware stack levels required when called:    5
  7524 ;; This function calls:
  7525 ;;		_LedStateMachine
  7526 ;;		_Led_InitSeq
  7527 ;;		_SetLedBehavSts
  7528 ;; This function is called by:
  7529 ;;		_InitializeTasks
  7530 ;;		_ScheduleTasks
  7531 ;; This function uses a non-reentrant model
  7532 ;;
  7533                           
  7534                           
  7535                           ;psect for function _Led_MainTask
  7536  09E1                     _Led_MainTask:	
  7537                           
  7538                           ;led.c: 187: switch (SystemState)
  7539                           
  7540                           ;incstack = 0
  7541                           ; Regs used in _Led_MainTask: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  7542  09E1  2A08               	goto	l5146
  7543  09E2                     l675:	
  7544                           ;led.c: 188: {
  7545                           ;led.c: 190: case InitializationState:
  7546                           
  7547                           
  7548                           ;led.c: 192: TRISCbits.TRISC0 = ((UINT8)(0));
  7549  09E2  0021               	movlb	1	; select bank1
  7550  09E3  100E               	bcf	14,0	;volatile
  7551                           
  7552                           ;led.c: 193: LATCbits.LATC0 = ((UINT8)(0));
  7553  09E4  0022               	movlb	2	; select bank2
  7554  09E5  100E               	bcf	14,0	;volatile
  7555                           
  7556                           ;led.c: 195: SetLedBehavSts(((UINT8)(1)));
  7557  09E6  3001               	movlw	1
  7558  09E7  318B  2355         	fcall	_SetLedBehavSts
  7559                           
  7560                           ;led.c: 196: break;
  7561  09E9  0008               	return
  7562  09EA                     l5140:	
  7563                           ;led.c: 199: case RunningState:
  7564                           
  7565                           
  7566                           ;led.c: 201: Led_InitSeq();
  7567  09EA  318C  24BF  3189   	fcall	_Led_InitSeq
  7568                           
  7569                           ;led.c: 203: LATCbits.LATC0 = LedStateMachine(1u,&Led1Sts,&Led1Blink,&Led1Pulse);
  7570  09ED  30E7               	movlw	(low (_Led1Sts| 0))& (0+255)
  7571  09EE  0020               	movlb	0	; select bank0
  7572  09EF  00BC               	movwf	??_Led_MainTask
  7573  09F0  083C               	movf	??_Led_MainTask,w
  7574  09F1  00AB               	movwf	LedStateMachine@LedSts
  7575  09F2  305F               	movlw	(low (_Led1Blink| (0+256)))& (0+255)
  7576  09F3  00BD               	movwf	??_Led_MainTask+1
  7577  09F4  083D               	movf	??_Led_MainTask+1,w
  7578  09F5  00AC               	movwf	LedStateMachine@LedBlink
  7579  09F6  3068               	movlw	(low (_Led1Pulse| (0+256)))& (0+255)
  7580  09F7  00BE               	movwf	??_Led_MainTask+2
  7581  09F8  083E               	movf	??_Led_MainTask+2,w
  7582  09F9  00AD               	movwf	LedStateMachine@LedPulse
  7583  09FA  3001               	movlw	1
  7584  09FB  318A  2241         	fcall	_LedStateMachine
  7585  09FD  0020               	movlb	0	; select bank0
  7586  09FE  00BF               	movwf	??_Led_MainTask+3
  7587  09FF  0022               	movlb	2	; select bank2
  7588  0A00  080E               	movf	14,w	;volatile
  7589  0A01  0020               	movlb	0	; select bank0
  7590  0A02  063F               	xorwf	??_Led_MainTask+3,w
  7591  0A03  39FE               	andlw	-2
  7592  0A04  063F               	xorwf	??_Led_MainTask+3,w
  7593  0A05  0022               	movlb	2	; select bank2
  7594  0A06  008E               	movwf	14	;volatile
  7595                           
  7596                           ;led.c: 209: }
  7597                           
  7598                           ;led.c: 208: break;
  7599                           
  7600                           ;led.c: 207: default:
  7601                           
  7602                           ;led.c: 204: break;
  7603  0A07  0008               	return
  7604  0A08                     l5146:	
  7605  0A08  0876               	movf	_SystemState,w
  7606                           
  7607                           ; Switch size 1, requested type "space"
  7608                           ; Number of cases is 2, Range of values is 0 to 1
  7609                           ; switch strategies available:
  7610                           ; Name         Instructions Cycles
  7611                           ; simple_byte            7     4 (average)
  7612                           ; direct_byte           10     6 (fixed)
  7613                           ; jumptable            260     6 (fixed)
  7614                           ;	Chosen strategy is simple_byte
  7615  0A09  3A00               	xorlw	0	; case 0
  7616  0A0A  1903               	skipnz
  7617  0A0B  29E2               	goto	l675
  7618  0A0C  3A01               	xorlw	1	; case 1
  7619  0A0D  1903               	skipnz
  7620  0A0E  29EA               	goto	l5140
  7621  0A0F  2A10               	goto	l679
  7622  0A10                     l679:	
  7623  0A10  0008               	return
  7624  0A11                     __end_of_Led_MainTask:	
  7625                           
  7626                           	psect	text18
  7627  16DA                     __ptext18:	
  7628 ;; *************** function _I2cSlv_MainTask *****************
  7629 ;; Defined at:
  7630 ;;		line 109 in file "../../../Framework/MercuryFwk/Source/c/03_Sml/01_Pml/01_SlvI2c/i2c_slv.c"
  7631 ;; Parameters:    Size  Location     Type
  7632 ;;  Options         1   27[BANK0 ] unsigned char 
  7633 ;; Auto vars:     Size  Location     Type
  7634 ;;		None
  7635 ;; Return value:  Size  Location     Type
  7636 ;;                  1    wreg      void 
  7637 ;; Registers used:
  7638 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7639 ;; Tracked objects:
  7640 ;;		On entry : 0/0
  7641 ;;		On exit  : 0/0
  7642 ;;		Unchanged: 0/0
  7643 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7644 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7645 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7646 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7647 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7648 ;;Total ram usage:        1 bytes
  7649 ;; Hardware stack levels used:    1
  7650 ;; Hardware stack levels required when called:    4
  7651 ;; This function calls:
  7652 ;;		_I2cSlv_I2cDrvHandle
  7653 ;;		_I2c_InitI2cModule
  7654 ;;		_I2c_SetConfig
  7655 ;; This function is called by:
  7656 ;;		_InitializeTasks
  7657 ;;		_ScheduleTasks
  7658 ;; This function uses a non-reentrant model
  7659 ;;
  7660                           
  7661                           
  7662                           ;psect for function _I2cSlv_MainTask
  7663  16DA                     _I2cSlv_MainTask:	
  7664                           
  7665                           ;i2c_slv.c: 111: switch (SystemState)
  7666                           
  7667                           ;incstack = 0
  7668                           ; Regs used in _I2cSlv_MainTask: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  7669  16DA  2EE5               	goto	l5134
  7670  16DB                     l5126:	
  7671                           ;i2c_slv.c: 112: {
  7672                           ;i2c_slv.c: 114: case InitializationState:
  7673                           
  7674                           
  7675                           ;i2c_slv.c: 116: I2c_SetConfig();
  7676  16DB  3197  2719  3196   	fcall	_I2c_SetConfig
  7677                           
  7678                           ;i2c_slv.c: 118: I2c_InitI2cModule(&I2cConfig);
  7679  16DE  3054               	movlw	(low (_I2cConfig| (0+256)))& (0+255)
  7680  16DF  3184  24E5         	fcall	_I2c_InitI2cModule
  7681                           
  7682                           ;i2c_slv.c: 119: break;
  7683  16E1  0008               	return
  7684  16E2                     l5130:	
  7685                           ;i2c_slv.c: 122: case RunningState:
  7686                           
  7687                           
  7688                           ;i2c_slv.c: 124: I2cSlv_I2cDrvHandle();
  7689  16E2  318E  26D1         	fcall	_I2cSlv_I2cDrvHandle
  7690                           
  7691                           ;i2c_slv.c: 130: }
  7692                           
  7693                           ;i2c_slv.c: 129: break;
  7694                           
  7695                           ;i2c_slv.c: 128: default:
  7696                           
  7697                           ;i2c_slv.c: 125: break;
  7698  16E4  0008               	return
  7699  16E5                     l5134:	
  7700  16E5  0876               	movf	_SystemState,w
  7701                           
  7702                           ; Switch size 1, requested type "space"
  7703                           ; Number of cases is 2, Range of values is 0 to 1
  7704                           ; switch strategies available:
  7705                           ; Name         Instructions Cycles
  7706                           ; simple_byte            7     4 (average)
  7707                           ; direct_byte           10     6 (fixed)
  7708                           ; jumptable            260     6 (fixed)
  7709                           ;	Chosen strategy is simple_byte
  7710  16E6  3A00               	xorlw	0	; case 0
  7711  16E7  1903               	skipnz
  7712  16E8  2EDB               	goto	l5126
  7713  16E9  3A01               	xorlw	1	; case 1
  7714  16EA  1903               	skipnz
  7715  16EB  2EE2               	goto	l5130
  7716  16EC  2EED               	goto	l594
  7717  16ED                     l594:	
  7718  16ED  0008               	return
  7719  16EE                     __end_of_I2cSlv_MainTask:	
  7720                           
  7721                           	psect	text19
  7722  02E6                     __ptext19:	
  7723 ;; *************** function _I2c_DataReceiveSm *****************
  7724 ;; Defined at:
  7725 ;;		line 298 in file "../../../Framework/MercuryFwk/Source/c/01_Hal/02_Drv/i2c_slv_drv.c"
  7726 ;; Parameters:    Size  Location     Type
  7727 ;;  Options         1   27[BANK0 ] unsigned char 
  7728 ;; Auto vars:     Size  Location     Type
  7729 ;;  Index           1   35[BANK0 ] unsigned char 
  7730 ;; Return value:  Size  Location     Type
  7731 ;;                  1    wreg      void 
  7732 ;; Registers used:
  7733 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7734 ;; Tracked objects:
  7735 ;;		On entry : 0/0
  7736 ;;		On exit  : 0/0
  7737 ;;		Unchanged: 0/0
  7738 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7739 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7740 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7741 ;;      Temps:          0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7742 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7743 ;;Total ram usage:        9 bytes
  7744 ;; Hardware stack levels used:    1
  7745 ;; Hardware stack levels required when called:    3
  7746 ;; This function calls:
  7747 ;;		_CheckAckStatus
  7748 ;;		_CheckByteStatus
  7749 ;;		_CheckStopBitStatus
  7750 ;;		_ClearRxBuffer
  7751 ;;		_ClearTxBuffer
  7752 ;;		_GenerateEvt
  7753 ;;		_Mcu_Reset
  7754 ;;		_ReceiveEvt
  7755 ;; This function is called by:
  7756 ;;		_InitializeTasks
  7757 ;;		_ScheduleTasks
  7758 ;; This function uses a non-reentrant model
  7759 ;;
  7760                           
  7761                           
  7762                           ;psect for function _I2c_DataReceiveSm
  7763  02E6                     _I2c_DataReceiveSm:	
  7764                           
  7765                           ;i2c_slv_drv.c: 301: static I2cRxStateType I2cRxState = CheckRxByte;
  7766                           ;i2c_slv_drv.c: 302: static UINT8 I2cRxAddress;
  7767                           ;i2c_slv_drv.c: 303: static UINT8 I2cRxFlag = ((UINT8)(0));
  7768                           ;i2c_slv_drv.c: 304: static UINT8 OpType;
  7769                           ;i2c_slv_drv.c: 305: static UINT8 RxCounter = 0;
  7770                           ;i2c_slv_drv.c: 306: static UINT8 TxCounter = 0;
  7771                           ;i2c_slv_drv.c: 307: static UINT8 AddressStored = 0;
  7772                           ;i2c_slv_drv.c: 308: static UINT8 ErrorCounter = 0;
  7773                           ;i2c_slv_drv.c: 309: UINT8 Index;
  7774                           ;i2c_slv_drv.c: 311: switch (I2cRxState)
  7775                           
  7776                           ;incstack = 0
  7777                           ; Regs used in _I2c_DataReceiveSm: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  7778  02E6  2BE5               	goto	l5104
  7779  02E7                     l5012:	
  7780                           ;i2c_slv_drv.c: 312: {
  7781                           ;i2c_slv_drv.c: 313: case CheckRxByte:
  7782                           
  7783                           
  7784                           ;i2c_slv_drv.c: 315: if (ReceiveEvt(&I2cNewTxNotification))
  7785  02E7  30E3               	movlw	(low (_I2cNewTxNotification| 0))& (0+255)
  7786  02E8  3188  203C  3182   	fcall	_ReceiveEvt
  7787  02EB  3A00               	xorlw	0
  7788  02EC  1903               	skipnz
  7789  02ED  0008               	return
  7790                           
  7791                           ;i2c_slv_drv.c: 316: {
  7792                           ;i2c_slv_drv.c: 318: if (CheckByteStatus() == ((UINT8)(0)))
  7793  02EE  3196  2617  3182   	fcall	_CheckByteStatus
  7794  02F1  3A00               	xorlw	0
  7795  02F2  1D03               	skipz
  7796  02F3  2B10               	goto	l5032
  7797                           
  7798                           ;i2c_slv_drv.c: 319: {
  7799                           ;i2c_slv_drv.c: 320: if (AddressStored == 1)
  7800  02F4  0021               	movlb	1	; select bank1
  7801  02F5  0342               	decf	I2c_DataReceiveSm@AddressStored^(0+128),w
  7802  02F6  1D03               	btfss	3,2
  7803  02F7  2B06               	goto	l5024
  7804                           
  7805                           ;i2c_slv_drv.c: 321: {
  7806                           ;i2c_slv_drv.c: 323: ErrorCounter++;
  7807  02F8  3001               	movlw	1
  7808  02F9  0020               	movlb	0	; select bank0
  7809  02FA  00BC               	movwf	??_I2c_DataReceiveSm
  7810  02FB  083C               	movf	??_I2c_DataReceiveSm,w
  7811  02FC  0021               	movlb	1	; select bank1
  7812  02FD  07C1               	addwf	I2c_DataReceiveSm@ErrorCounter^(0+128),f
  7813                           
  7814                           ;i2c_slv_drv.c: 325: if (ErrorCounter > 10u)
  7815  02FE  300B               	movlw	11
  7816  02FF  0241               	subwf	I2c_DataReceiveSm@ErrorCounter^(0+128),w
  7817  0300  1C03               	skipc
  7818  0301  2B08               	goto	l5026
  7819                           
  7820                           ;i2c_slv_drv.c: 326: {
  7821                           ;i2c_slv_drv.c: 327: Mcu_Reset();
  7822  0302  3195  25BE  3182   	fcall	_Mcu_Reset
  7823                           
  7824                           ;i2c_slv_drv.c: 328: }
  7825                           ;i2c_slv_drv.c: 329: }
  7826  0305  2B08               	goto	l5026
  7827  0306                     l5024:	
  7828                           
  7829                           ;i2c_slv_drv.c: 330: else
  7830                           ;i2c_slv_drv.c: 331: {
  7831                           ;i2c_slv_drv.c: 333: ErrorCounter = 0;
  7832  0306  0021               	movlb	1	; select bank1
  7833  0307  01C1               	clrf	I2c_DataReceiveSm@ErrorCounter^(0+128)
  7834  0308                     l5026:	
  7835                           
  7836                           ;i2c_slv_drv.c: 334: }
  7837                           ;i2c_slv_drv.c: 336: AddressStored = 1;
  7838  0308  0021               	movlb	1	; select bank1
  7839  0309  01C2               	clrf	I2c_DataReceiveSm@AddressStored^(0+128)
  7840  030A  0AC2               	incf	I2c_DataReceiveSm@AddressStored^(0+128),f
  7841                           
  7842                           ;i2c_slv_drv.c: 338: I2cRxFlag = ((UINT8)(1));
  7843  030B  01C6               	clrf	I2c_DataReceiveSm@I2cRxFlag^(0+128)
  7844  030C  0AC6               	incf	I2c_DataReceiveSm@I2cRxFlag^(0+128),f
  7845                           
  7846                           ;i2c_slv_drv.c: 340: I2cRxState = StoreAddrByte;
  7847  030D  01C8               	clrf	I2c_DataReceiveSm@I2cRxState^(0+128)
  7848  030E  0AC8               	incf	I2c_DataReceiveSm@I2cRxState^(0+128),f
  7849                           
  7850                           ;i2c_slv_drv.c: 341: }
  7851  030F  0008               	return
  7852  0310                     l5032:	
  7853                           
  7854                           ;i2c_slv_drv.c: 342: else if ((CheckByteStatus() == ((UINT8)(1))) && (I2cRxFlag == ((UIN
      +                          T8)(1))))
  7855  0310  3196  2617  3182   	fcall	_CheckByteStatus
  7856  0313  3A01               	xorlw	1
  7857  0314  1D03               	skipz
  7858  0315  0008               	return
  7859  0316  0021               	movlb	1	; select bank1
  7860  0317  0346               	decf	I2c_DataReceiveSm@I2cRxFlag^(0+128),w
  7861  0318  1D03               	btfss	3,2
  7862  0319  0008               	return
  7863                           
  7864                           ;i2c_slv_drv.c: 343: {
  7865                           ;i2c_slv_drv.c: 345: AddressStored = 0;
  7866  031A  01C2               	clrf	I2c_DataReceiveSm@AddressStored^(0+128)
  7867                           
  7868                           ;i2c_slv_drv.c: 346: if (OpType == ((UINT8)(0)))
  7869  031B  0845               	movf	I2c_DataReceiveSm@OpType^(0+128),w
  7870  031C  1D03               	btfss	3,2
  7871  031D  2B25               	goto	l5042
  7872                           
  7873                           ;i2c_slv_drv.c: 347: {
  7874                           ;i2c_slv_drv.c: 349: I2cRxState = HandleWrite;
  7875  031E  3002               	movlw	2
  7876  031F  0020               	movlb	0	; select bank0
  7877  0320  00BC               	movwf	??_I2c_DataReceiveSm
  7878  0321  083C               	movf	??_I2c_DataReceiveSm,w
  7879  0322  0021               	movlb	1	; select bank1
  7880  0323  00C8               	movwf	I2c_DataReceiveSm@I2cRxState^(0+128)
  7881                           
  7882                           ;i2c_slv_drv.c: 350: }
  7883  0324  0008               	return
  7884  0325                     l5042:	
  7885                           
  7886                           ;i2c_slv_drv.c: 351: else
  7887                           ;i2c_slv_drv.c: 352: {
  7888                           ;i2c_slv_drv.c: 354: I2cRxState = HandleRead;
  7889  0325  3003               	movlw	3
  7890  0326  0020               	movlb	0	; select bank0
  7891  0327  00BC               	movwf	??_I2c_DataReceiveSm
  7892  0328  083C               	movf	??_I2c_DataReceiveSm,w
  7893  0329  0021               	movlb	1	; select bank1
  7894  032A  00C8               	movwf	I2c_DataReceiveSm@I2cRxState^(0+128)
  7895                           
  7896                           ;i2c_slv_drv.c: 360: }
  7897                           ;i2c_slv_drv.c: 361: }
  7898                           ;i2c_slv_drv.c: 362: break;
  7899                           
  7900                           ;i2c_slv_drv.c: 357: else
  7901                           ;i2c_slv_drv.c: 358: {
  7902                           
  7903                           ;i2c_slv_drv.c: 355: }
  7904                           ;i2c_slv_drv.c: 356: }
  7905  032B  0008               	return
  7906  032C                     l5044:	
  7907                           ;i2c_slv_drv.c: 364: case StoreAddrByte:
  7908                           
  7909                           
  7910                           ;i2c_slv_drv.c: 366: I2cRxAddress = SSP1BUF;
  7911  032C  0024               	movlb	4	; select bank4
  7912  032D  0811               	movf	17,w	;volatile
  7913  032E  0020               	movlb	0	; select bank0
  7914  032F  00BC               	movwf	??_I2c_DataReceiveSm
  7915  0330  083C               	movf	??_I2c_DataReceiveSm,w
  7916  0331  0021               	movlb	1	; select bank1
  7917  0332  00C7               	movwf	I2c_DataReceiveSm@I2cRxAddress^(0+128)
  7918                           
  7919                           ;i2c_slv_drv.c: 368: I2cRxAddress = (I2cRxAddress >> ((UINT8)(1)));
  7920  0333  3647               	lsrf	I2c_DataReceiveSm@I2cRxAddress^(0+128),w
  7921  0334  0020               	movlb	0	; select bank0
  7922  0335  00BC               	movwf	??_I2c_DataReceiveSm
  7923  0336  083C               	movf	??_I2c_DataReceiveSm,w
  7924  0337  0021               	movlb	1	; select bank1
  7925  0338  00C7               	movwf	I2c_DataReceiveSm@I2cRxAddress^(0+128)
  7926                           
  7927                           ;i2c_slv_drv.c: 370: OpType = (SSP1BUF & ((UINT8)(0x01)));
  7928  0339  0024               	movlb	4	; select bank4
  7929  033A  0811               	movf	17,w	;volatile
  7930  033B  3901               	andlw	1
  7931  033C  0020               	movlb	0	; select bank0
  7932  033D  00BC               	movwf	??_I2c_DataReceiveSm
  7933  033E  083C               	movf	??_I2c_DataReceiveSm,w
  7934  033F  0021               	movlb	1	; select bank1
  7935  0340  00C5               	movwf	I2c_DataReceiveSm@OpType^(0+128)
  7936                           
  7937                           ;i2c_slv_drv.c: 372: if (OpType == ((UINT8)(1)))
  7938  0341  0345               	decf	I2c_DataReceiveSm@OpType^(0+128),w
  7939  0342  1D03               	btfss	3,2
  7940  0343  2B52               	goto	l5056
  7941                           
  7942                           ;i2c_slv_drv.c: 373: {
  7943                           ;i2c_slv_drv.c: 375: SSP1BUF = I2cTxBuffer[TxCounter];
  7944  0344  0843               	movf	I2c_DataReceiveSm@TxCounter^(0+128),w
  7945  0345  3E20               	addlw	(low (_I2cTxBuffer| (0+768)))& (0+255)
  7946  0346  0086               	movwf	6
  7947  0347  3003               	movlw	3	; select bank6/7
  7948  0348  0087               	movwf	7
  7949  0349  0801               	movf	1,w
  7950  034A  0024               	movlb	4	; select bank4
  7951  034B  0091               	movwf	17	;volatile
  7952                           
  7953                           ;i2c_slv_drv.c: 377: TxCounter++;
  7954  034C  3001               	movlw	1
  7955  034D  0020               	movlb	0	; select bank0
  7956  034E  00BC               	movwf	??_I2c_DataReceiveSm
  7957  034F  083C               	movf	??_I2c_DataReceiveSm,w
  7958  0350  0021               	movlb	1	; select bank1
  7959  0351  07C3               	addwf	I2c_DataReceiveSm@TxCounter^(0+128),f
  7960  0352                     l5056:	
  7961                           ;i2c_slv_drv.c: 379: else
  7962                           ;i2c_slv_drv.c: 380: {
  7963                           
  7964                           ;i2c_slv_drv.c: 378: }
  7965                           
  7966                           
  7967                           ;i2c_slv_drv.c: 382: }
  7968                           ;i2c_slv_drv.c: 384: I2cRxState = StopClkStretch;
  7969  0352  3004               	movlw	4
  7970  0353  0020               	movlb	0	; select bank0
  7971  0354  00BC               	movwf	??_I2c_DataReceiveSm
  7972  0355  083C               	movf	??_I2c_DataReceiveSm,w
  7973  0356  0021               	movlb	1	; select bank1
  7974  0357  00C8               	movwf	I2c_DataReceiveSm@I2cRxState^(0+128)
  7975                           
  7976                           ;i2c_slv_drv.c: 385: break;
  7977  0358  0008               	return
  7978  0359                     l5058:	
  7979                           ;i2c_slv_drv.c: 387: case HandleWrite:
  7980                           
  7981                           
  7982                           ;i2c_slv_drv.c: 389: if (CheckStopBitStatus() == ((UINT8)(1)))
  7983  0359  3196  2621  3182   	fcall	_CheckStopBitStatus
  7984  035C  3A01               	xorlw	1
  7985  035D  1D03               	skipz
  7986  035E  2BA5               	goto	l5082
  7987                           
  7988                           ;i2c_slv_drv.c: 390: {
  7989                           ;i2c_slv_drv.c: 392: I2cRxFlag = ((UINT8)(0));
  7990  035F  0021               	movlb	1	; select bank1
  7991  0360  01C6               	clrf	I2c_DataReceiveSm@I2cRxFlag^(0+128)
  7992                           
  7993                           ;i2c_slv_drv.c: 394: I2cPacket.Lenght = RxCounter;
  7994  0361  30EF               	movlw	239
  7995  0362  0086               	movwf	6
  7996  0363  3023               	movlw	35
  7997  0364  0087               	movwf	7
  7998  0365  0844               	movf	I2c_DataReceiveSm@RxCounter^(0+128),w
  7999  0366  0081               	movwf	1
  8000                           
  8001                           ;i2c_slv_drv.c: 395: I2cPacket.ReadWrite = ((UINT8)(0));
  8002  0367  309D               	movlw	157
  8003  0368  0086               	movwf	6
  8004  0369  3023               	movlw	35
  8005  036A  0087               	movwf	7
  8006  036B  3141               	addfsr 1,1
  8007  036C  0181               	clrf	1
  8008                           
  8009                           ;i2c_slv_drv.c: 396: I2cPacket.SlaveAddress = I2cRxAddress;
  8010  036D  309D               	movlw	157
  8011  036E  0086               	movwf	6
  8012  036F  3023               	movlw	35
  8013  0370  0087               	movwf	7
  8014  0371  0847               	movf	I2c_DataReceiveSm@I2cRxAddress^(0+128),w
  8015  0372  3FC0               	movwi [0]fsr1
  8016                           
  8017                           ;i2c_slv_drv.c: 397: for (Index = 0; Index < ((UINT8)(80)); Index++)
  8018  0373  0020               	movlb	0	; select bank0
  8019  0374  01C3               	clrf	I2c_DataReceiveSm@Index
  8020  0375  3050               	movlw	80
  8021  0376  0243               	subwf	I2c_DataReceiveSm@Index,w
  8022  0377  1803               	btfsc	3,0
  8023  0378  2B9B               	goto	l5076
  8024  0379                     l5070:	
  8025                           
  8026                           ;i2c_slv_drv.c: 398: {
  8027                           ;i2c_slv_drv.c: 399: I2cPacket.Buffer[Index] = I2cRxBuffer[Index];
  8028  0379  0843               	movf	I2c_DataReceiveSm@Index,w
  8029  037A  3EA0               	addlw	(low (_I2cRxBuffer| (0+768)))& (0+255)
  8030  037B  0086               	movwf	6
  8031  037C  3003               	movlw	3	; select bank7/8
  8032  037D  0087               	movwf	7
  8033  037E  0801               	movf	1,w
  8034  037F  00BC               	movwf	??_I2c_DataReceiveSm
  8035  0380  0843               	movf	I2c_DataReceiveSm@Index,w
  8036  0381  00BD               	movwf	??_I2c_DataReceiveSm+1
  8037  0382  01BE               	clrf	??_I2c_DataReceiveSm+2
  8038  0383  309F               	movlw	159
  8039  0384  00BF               	movwf	??_I2c_DataReceiveSm+3
  8040  0385  3023               	movlw	35
  8041  0386  00C0               	movwf	??_I2c_DataReceiveSm+4
  8042  0387  083D               	movf	??_I2c_DataReceiveSm+1,w
  8043  0388  073F               	addwf	??_I2c_DataReceiveSm+3,w
  8044  0389  00C1               	movwf	??_I2c_DataReceiveSm+5
  8045  038A  083E               	movf	??_I2c_DataReceiveSm+2,w
  8046  038B  3D40               	addwfc	??_I2c_DataReceiveSm+4,w
  8047  038C  00C2               	movwf	??_I2c_DataReceiveSm+6
  8048  038D  0841               	movf	??_I2c_DataReceiveSm+5,w
  8049  038E  0086               	movwf	6
  8050  038F  0842               	movf	??_I2c_DataReceiveSm+6,w
  8051  0390  0087               	movwf	7
  8052  0391  083C               	movf	??_I2c_DataReceiveSm,w
  8053  0392  0081               	movwf	1
  8054  0393  3001               	movlw	1
  8055  0394  00BC               	movwf	??_I2c_DataReceiveSm
  8056  0395  083C               	movf	??_I2c_DataReceiveSm,w
  8057  0396  07C3               	addwf	I2c_DataReceiveSm@Index,f
  8058  0397  3050               	movlw	80
  8059  0398  0243               	subwf	I2c_DataReceiveSm@Index,w
  8060  0399  1C03               	skipc
  8061  039A  2B79               	goto	l5070
  8062  039B                     l5076:	
  8063                           
  8064                           ;i2c_slv_drv.c: 400: }
  8065                           ;i2c_slv_drv.c: 403: GenerateEvt(&I2cNewPacketNotification);
  8066  039B  30E5               	movlw	(low (_I2cNewPacketNotification| 0))& (0+255)
  8067  039C  3188  207E  3182   	fcall	_GenerateEvt
  8068                           
  8069                           ;i2c_slv_drv.c: 406: RxCounter = 0;
  8070  039F  0021               	movlb	1	; select bank1
  8071  03A0  01C4               	clrf	I2c_DataReceiveSm@RxCounter^(0+128)
  8072                           
  8073                           ;i2c_slv_drv.c: 408: ClearRxBuffer();
  8074  03A1  3196  2697  3182   	fcall	_ClearRxBuffer
  8075                           
  8076                           ;i2c_slv_drv.c: 409: }
  8077  03A4  2BB7               	goto	l5086
  8078  03A5                     l5082:	
  8079                           
  8080                           ;i2c_slv_drv.c: 410: else
  8081                           ;i2c_slv_drv.c: 411: {
  8082                           ;i2c_slv_drv.c: 413: I2cRxBuffer[RxCounter] = SSP1BUF;
  8083  03A5  0024               	movlb	4	; select bank4
  8084  03A6  0811               	movf	17,w	;volatile
  8085  03A7  0020               	movlb	0	; select bank0
  8086  03A8  00BC               	movwf	??_I2c_DataReceiveSm
  8087  03A9  0021               	movlb	1	; select bank1
  8088  03AA  0844               	movf	I2c_DataReceiveSm@RxCounter^(0+128),w
  8089  03AB  3EA0               	addlw	(low (_I2cRxBuffer| (0+768)))& (0+255)
  8090  03AC  0086               	movwf	6
  8091  03AD  3003               	movlw	3	; select bank7/8
  8092  03AE  0087               	movwf	7
  8093  03AF  0020               	movlb	0	; select bank0
  8094  03B0  083C               	movf	??_I2c_DataReceiveSm,w
  8095  03B1  0081               	movwf	1
  8096                           
  8097                           ;i2c_slv_drv.c: 415: RxCounter++;
  8098  03B2  3001               	movlw	1
  8099  03B3  00BC               	movwf	??_I2c_DataReceiveSm
  8100  03B4  083C               	movf	??_I2c_DataReceiveSm,w
  8101  03B5  0021               	movlb	1	; select bank1
  8102  03B6  07C4               	addwf	I2c_DataReceiveSm@RxCounter^(0+128),f
  8103  03B7                     l5086:	
  8104                           
  8105                           ;i2c_slv_drv.c: 416: }
  8106                           ;i2c_slv_drv.c: 418: I2cRxState = StopClkStretch;
  8107  03B7  3004               	movlw	4
  8108  03B8  0020               	movlb	0	; select bank0
  8109  03B9  00BC               	movwf	??_I2c_DataReceiveSm
  8110  03BA  083C               	movf	??_I2c_DataReceiveSm,w
  8111  03BB  0021               	movlb	1	; select bank1
  8112  03BC  00C8               	movwf	I2c_DataReceiveSm@I2cRxState^(0+128)
  8113                           
  8114                           ;i2c_slv_drv.c: 419: break;
  8115  03BD  0008               	return
  8116  03BE                     l5088:	
  8117                           ;i2c_slv_drv.c: 421: case HandleRead:
  8118                           
  8119                           
  8120                           ;i2c_slv_drv.c: 423: if (CheckAckStatus() == ((UINT8)(0)))
  8121  03BE  3196  260D  3182   	fcall	_CheckAckStatus
  8122  03C1  3A00               	xorlw	0
  8123  03C2  1D03               	skipz
  8124  03C3  2BD4               	goto	l5094
  8125                           
  8126                           ;i2c_slv_drv.c: 424: {
  8127                           ;i2c_slv_drv.c: 426: SSP1BUF = I2cTxBuffer[TxCounter];
  8128  03C4  0021               	movlb	1	; select bank1
  8129  03C5  0843               	movf	I2c_DataReceiveSm@TxCounter^(0+128),w
  8130  03C6  3E20               	addlw	(low (_I2cTxBuffer| (0+768)))& (0+255)
  8131  03C7  0086               	movwf	6
  8132  03C8  3003               	movlw	3	; select bank6/7
  8133  03C9  0087               	movwf	7
  8134  03CA  0801               	movf	1,w
  8135  03CB  0024               	movlb	4	; select bank4
  8136  03CC  0091               	movwf	17	;volatile
  8137                           
  8138                           ;i2c_slv_drv.c: 428: TxCounter++;
  8139  03CD  3001               	movlw	1
  8140  03CE  0020               	movlb	0	; select bank0
  8141  03CF  00BC               	movwf	??_I2c_DataReceiveSm
  8142  03D0  083C               	movf	??_I2c_DataReceiveSm,w
  8143  03D1  0021               	movlb	1	; select bank1
  8144  03D2  07C3               	addwf	I2c_DataReceiveSm@TxCounter^(0+128),f
  8145                           
  8146                           ;i2c_slv_drv.c: 429: }
  8147  03D3  2BD9               	goto	l5098
  8148  03D4                     l5094:	
  8149                           
  8150                           ;i2c_slv_drv.c: 430: else
  8151                           ;i2c_slv_drv.c: 431: {
  8152                           ;i2c_slv_drv.c: 433: TxCounter = 0;
  8153  03D4  0021               	movlb	1	; select bank1
  8154  03D5  01C3               	clrf	I2c_DataReceiveSm@TxCounter^(0+128)
  8155                           
  8156                           ;i2c_slv_drv.c: 435: I2cRxFlag = ((UINT8)(0));
  8157  03D6  01C6               	clrf	I2c_DataReceiveSm@I2cRxFlag^(0+128)
  8158                           
  8159                           ;i2c_slv_drv.c: 437: ClearTxBuffer();
  8160  03D7  3196  26A7         	fcall	_ClearTxBuffer
  8161  03D9                     l5098:	
  8162                           
  8163                           ;i2c_slv_drv.c: 439: }
  8164                           ;i2c_slv_drv.c: 441: I2cRxState = StopClkStretch;
  8165  03D9  3004               	movlw	4
  8166  03DA  0020               	movlb	0	; select bank0
  8167  03DB  00BC               	movwf	??_I2c_DataReceiveSm
  8168  03DC  083C               	movf	??_I2c_DataReceiveSm,w
  8169  03DD  0021               	movlb	1	; select bank1
  8170  03DE  00C8               	movwf	I2c_DataReceiveSm@I2cRxState^(0+128)
  8171                           
  8172                           ;i2c_slv_drv.c: 442: break;
  8173  03DF  0008               	return
  8174  03E0                     l179:	
  8175                           ;i2c_slv_drv.c: 444: case StopClkStretch:
  8176                           
  8177                           
  8178                           ;i2c_slv_drv.c: 446: SSP1CON1bits.CKP = ((UINT8)(1));
  8179  03E0  0024               	movlb	4	; select bank4
  8180  03E1  1615               	bsf	21,4	;volatile
  8181                           
  8182                           ;i2c_slv_drv.c: 448: I2cRxState = CheckRxByte;
  8183  03E2  0021               	movlb	1	; select bank1
  8184  03E3  01C8               	clrf	I2c_DataReceiveSm@I2cRxState^(0+128)
  8185                           
  8186                           ;i2c_slv_drv.c: 453: }
  8187                           
  8188                           ;i2c_slv_drv.c: 452: break;
  8189                           
  8190                           ;i2c_slv_drv.c: 451: default:
  8191                           
  8192                           ;i2c_slv_drv.c: 449: break;
  8193  03E4  0008               	return
  8194  03E5                     l5104:	
  8195  03E5  0021               	movlb	1	; select bank1
  8196  03E6  0848               	movf	I2c_DataReceiveSm@I2cRxState^(0+128),w
  8197                           
  8198                           ; Switch size 1, requested type "space"
  8199                           ; Number of cases is 5, Range of values is 0 to 4
  8200                           ; switch strategies available:
  8201                           ; Name         Instructions Cycles
  8202                           ; direct_byte           16     6 (fixed)
  8203                           ; simple_byte           16     9 (average)
  8204                           ; jumptable            260     6 (fixed)
  8205                           ;	Chosen strategy is direct_byte
  8206  03E7  0084               	movwf	4
  8207  03E8  3005               	movlw	5
  8208  03E9  0204               	subwf	4,w
  8209  03EA  1803               	skipnc
  8210  03EB  0008               	return
  8211  03EC  3190               	movlp	high S5292
  8212  03ED  3504               	lslf	4,w
  8213  03EE  3E00               	addlw	low S5292
  8214  03EF  0082               	movwf	2
  8215  03F0  0008               	return
  8216  03F1                     __end_of_I2c_DataReceiveSm:	
  8217                           
  8218                           	psect	swtext1
  8219  1000                     __pswtext1:	
  8220  1000                     S5292:	
  8221  1000  3182  2AE7         	ljmp	l5012
  8222  1002  3183  2B2C         	ljmp	l5044
  8223  1004  3183  2B59         	ljmp	l5058
  8224  1006  3183  2BBE         	ljmp	l5088
  8225  1008  3183  2BE0         	ljmp	l179
  8226                           
  8227                           	psect	text20
  8228  16EE                     __ptext20:	
  8229 ;; *************** function _Wdg_MainTask *****************
  8230 ;; Defined at:
  8231 ;;		line 73 in file "../../../Framework/MercuryFwk/Source/c/03_Sml/02_Ssl/wdg.c"
  8232 ;; Parameters:    Size  Location     Type
  8233 ;;  Options         1   27[BANK0 ] unsigned char 
  8234 ;; Auto vars:     Size  Location     Type
  8235 ;;		None
  8236 ;; Return value:  Size  Location     Type
  8237 ;;                  1    wreg      void 
  8238 ;; Registers used:
  8239 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  8240 ;; Tracked objects:
  8241 ;;		On entry : 0/0
  8242 ;;		On exit  : 0/0
  8243 ;;		Unchanged: 0/0
  8244 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8245 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8246 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8247 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8248 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8249 ;;Total ram usage:        1 bytes
  8250 ;; Hardware stack levels used:    1
  8251 ;; Hardware stack levels required when called:    3
  8252 ;; This function calls:
  8253 ;;		_Mcu_ClearWdg
  8254 ;;		_Mcu_SetWdgPeriod
  8255 ;;		_Mcu_SetWdgSts
  8256 ;; This function is called by:
  8257 ;;		_InitializeTasks
  8258 ;;		_ScheduleTasks
  8259 ;; This function uses a non-reentrant model
  8260 ;;
  8261                           
  8262                           
  8263                           ;psect for function _Wdg_MainTask
  8264  16EE                     _Wdg_MainTask:	
  8265                           
  8266                           ;wdg.c: 75: switch (SystemState)
  8267                           
  8268                           ;incstack = 0
  8269                           ; Regs used in _Wdg_MainTask: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  8270  16EE  2EFA               	goto	l4038
  8271  16EF                     l4032:	
  8272                           ;wdg.c: 76: {
  8273                           ;wdg.c: 78: case InitializationState:
  8274                           
  8275                           
  8276                           ;wdg.c: 80: Mcu_SetWdgPeriod(WdgPer_2s);
  8277  16EF  300B               	movlw	11
  8278  16F0  3196  262B  3196   	fcall	_Mcu_SetWdgPeriod
  8279                           
  8280                           ;wdg.c: 82: Mcu_SetWdgSts(((UINT8)(1)));
  8281  16F3  3001               	movlw	1
  8282  16F4  3195  25E4         	fcall	_Mcu_SetWdgSts
  8283                           
  8284                           ;wdg.c: 83: break;
  8285  16F6  0008               	return
  8286  16F7                     l4034:	
  8287                           ;wdg.c: 86: case RunningState:
  8288                           
  8289                           
  8290                           ;wdg.c: 88: Mcu_ClearWdg();
  8291  16F7  3195  25C0         	fcall	_Mcu_ClearWdg
  8292                           
  8293                           ;wdg.c: 94: }
  8294                           
  8295                           ;wdg.c: 93: break;
  8296                           
  8297                           ;wdg.c: 92: default:
  8298                           
  8299                           ;wdg.c: 89: break;
  8300  16F9  0008               	return
  8301  16FA                     l4038:	
  8302  16FA  0876               	movf	_SystemState,w
  8303                           
  8304                           ; Switch size 1, requested type "space"
  8305                           ; Number of cases is 2, Range of values is 0 to 1
  8306                           ; switch strategies available:
  8307                           ; Name         Instructions Cycles
  8308                           ; simple_byte            7     4 (average)
  8309                           ; direct_byte           10     6 (fixed)
  8310                           ; jumptable            260     6 (fixed)
  8311                           ;	Chosen strategy is simple_byte
  8312  16FB  3A00               	xorlw	0	; case 0
  8313  16FC  1903               	skipnz
  8314  16FD  2EEF               	goto	l4032
  8315  16FE  3A01               	xorlw	1	; case 1
  8316  16FF  1903               	skipnz
  8317  1700  2EF7               	goto	l4034
  8318  1701  2F02               	goto	l871
  8319  1702                     l871:	
  8320  1702  0008               	return
  8321  1703                     __end_of_Wdg_MainTask:	
  8322                           
  8323                           	psect	text21
  8324  162B                     __ptext21:	
  8325 ;; *************** function _Mcu_SetWdgPeriod *****************
  8326 ;; Defined at:
  8327 ;;		line 223 in file "../../../Framework/MercuryFwk/Source/c/01_Hal/02_Drv/mcu_drv.c"
  8328 ;; Parameters:    Size  Location     Type
  8329 ;;  WdgPeriod       1    wreg     enum E3679
  8330 ;; Auto vars:     Size  Location     Type
  8331 ;;  WdgPeriod       1    5[COMMON] enum E3679
  8332 ;; Return value:  Size  Location     Type
  8333 ;;                  1    wreg      void 
  8334 ;; Registers used:
  8335 ;;		wreg, status,2, status,0
  8336 ;; Tracked objects:
  8337 ;;		On entry : 0/0
  8338 ;;		On exit  : 0/0
  8339 ;;		Unchanged: 0/0
  8340 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8341 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8342 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8343 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8344 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8345 ;;Total ram usage:        2 bytes
  8346 ;; Hardware stack levels used:    1
  8347 ;; Hardware stack levels required when called:    2
  8348 ;; This function calls:
  8349 ;;		Nothing
  8350 ;; This function is called by:
  8351 ;;		_Wdg_MainTask
  8352 ;; This function uses a non-reentrant model
  8353 ;;
  8354                           
  8355                           
  8356                           ;psect for function _Mcu_SetWdgPeriod
  8357  162B                     _Mcu_SetWdgPeriod:	
  8358                           
  8359                           ;incstack = 0
  8360                           ; Regs used in _Mcu_SetWdgPeriod: [wreg+status,2+status,0]
  8361                           ;Mcu_SetWdgPeriod@WdgPeriod stored from wreg
  8362  162B  00F5               	movwf	Mcu_SetWdgPeriod@WdgPeriod
  8363                           
  8364                           ;mcu_drv.c: 226: WDTCONbits.WDTPS = WdgPeriod;
  8365  162C  0875               	movf	Mcu_SetWdgPeriod@WdgPeriod,w
  8366  162D  00F4               	movwf	??_Mcu_SetWdgPeriod
  8367  162E  0DF4               	rlf	??_Mcu_SetWdgPeriod,f
  8368  162F  0021               	movlb	1	; select bank1
  8369  1630  0817               	movf	23,w	;volatile
  8370  1631  0674               	xorwf	??_Mcu_SetWdgPeriod,w
  8371  1632  39C1               	andlw	-63
  8372  1633  0674               	xorwf	??_Mcu_SetWdgPeriod,w
  8373  1634  0097               	movwf	23	;volatile
  8374  1635  0008               	return
  8375  1636                     __end_of_Mcu_SetWdgPeriod:	
  8376                           
  8377                           	psect	text22
  8378  15C0                     __ptext22:	
  8379 ;; *************** function _Mcu_ClearWdg *****************
  8380 ;; Defined at:
  8381 ;;		line 251 in file "../../../Framework/MercuryFwk/Source/c/01_Hal/02_Drv/mcu_drv.c"
  8382 ;; Parameters:    Size  Location     Type
  8383 ;;		None
  8384 ;; Auto vars:     Size  Location     Type
  8385 ;;		None
  8386 ;; Return value:  Size  Location     Type
  8387 ;;                  1    wreg      void 
  8388 ;; Registers used:
  8389 ;;		None
  8390 ;; Tracked objects:
  8391 ;;		On entry : 0/0
  8392 ;;		On exit  : 0/0
  8393 ;;		Unchanged: 0/0
  8394 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8395 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8396 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8397 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8398 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8399 ;;Total ram usage:        0 bytes
  8400 ;; Hardware stack levels used:    1
  8401 ;; Hardware stack levels required when called:    2
  8402 ;; This function calls:
  8403 ;;		Nothing
  8404 ;; This function is called by:
  8405 ;;		_Wdg_MainTask
  8406 ;; This function uses a non-reentrant model
  8407 ;;
  8408                           
  8409                           
  8410                           ;psect for function _Mcu_ClearWdg
  8411  15C0                     _Mcu_ClearWdg:	
  8412                           
  8413                           ;incstack = 0
  8414                           ; Regs used in _Mcu_ClearWdg: []
  8415  15C0  0064               	clrwdt	;# 
  8416  15C1  0008               	return
  8417  15C2                     __end_of_Mcu_ClearWdg:	
  8418                           
  8419                           	psect	text23
  8420  0CBF                     __ptext23:	
  8421 ;; *************** function _Led_InitSeq *****************
  8422 ;; Defined at:
  8423 ;;		line 128 in file "../../../Framework/MercuryFwk/Source/c/03_Sml/02_Ssl/led.c"
  8424 ;; Parameters:    Size  Location     Type
  8425 ;;		None
  8426 ;; Auto vars:     Size  Location     Type
  8427 ;;		None
  8428 ;; Return value:  Size  Location     Type
  8429 ;;                  1    wreg      void 
  8430 ;; Registers used:
  8431 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  8432 ;; Tracked objects:
  8433 ;;		On entry : 0/0
  8434 ;;		On exit  : 0/0
  8435 ;;		Unchanged: 0/0
  8436 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8437 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8438 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8439 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8440 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8441 ;;Total ram usage:        1 bytes
  8442 ;; Hardware stack levels used:    1
  8443 ;; Hardware stack levels required when called:    3
  8444 ;; This function calls:
  8445 ;;		_Led_SetLedStatus
  8446 ;; This function is called by:
  8447 ;;		_Led_MainTask
  8448 ;; This function uses a non-reentrant model
  8449 ;;
  8450                           
  8451                           
  8452                           ;psect for function _Led_InitSeq
  8453  0CBF                     _Led_InitSeq:	
  8454                           
  8455                           ;led.c: 130: static UINT16 DelayCounter = 0;
  8456                           ;led.c: 131: static UINT8 Counter = 0;
  8457                           ;led.c: 132: static UINT8 LedInitSts = LED_STS_ON;
  8458                           ;led.c: 133: static InitSeqStateType InitSeqState = Startup;
  8459                           ;led.c: 135: switch (InitSeqState)
  8460                           
  8461                           ;incstack = 0
  8462                           ; Regs used in _Led_InitSeq: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  8463  0CBF  2D04               	goto	l4908
  8464  0CC0                     l4886:	
  8465                           ;led.c: 136: {
  8466                           ;led.c: 137: case Startup:
  8467                           
  8468                           
  8469                           ;led.c: 139: Led_SetLedStatus(1u,LedInitSts);
  8470  0CC0  0021               	movlb	1	; select bank1
  8471  0CC1  0868               	movf	Led_InitSeq@LedInitSts^(0+128),w
  8472  0CC2  0020               	movlb	0	; select bank0
  8473  0CC3  00A1               	movwf	??_Led_InitSeq
  8474  0CC4  0821               	movf	??_Led_InitSeq,w
  8475  0CC5  00F4               	movwf	Led_SetLedStatus@LedSts
  8476  0CC6  3001               	movlw	1
  8477  0CC7  3196  2667         	fcall	_Led_SetLedStatus
  8478                           
  8479                           ;led.c: 141: InitSeqState = Initializing;
  8480  0CC9  0021               	movlb	1	; select bank1
  8481  0CCA  01BC               	clrf	Led_InitSeq@InitSeqState^(0+128)
  8482  0CCB  0ABC               	incf	Led_InitSeq@InitSeqState^(0+128),f
  8483                           
  8484                           ;led.c: 142: break;
  8485  0CCC  0008               	return
  8486  0CCD                     l4890:	
  8487                           ;led.c: 144: case Initializing:
  8488                           
  8489                           
  8490                           ;led.c: 146: DelayCounter++;
  8491  0CCD  3001               	movlw	1
  8492  0CCE  07A9               	addwf	Led_InitSeq@DelayCounter^(0+128),f
  8493  0CCF  3000               	movlw	0
  8494  0CD0  3DAA               	addwfc	(Led_InitSeq@DelayCounter+1)^(0+128),f
  8495                           
  8496                           ;led.c: 148: if (DelayCounter > (50u)/(((UINT16)(10))))
  8497  0CD1  3000               	movlw	0
  8498  0CD2  022A               	subwf	(Led_InitSeq@DelayCounter+1)^(0+128),w
  8499  0CD3  3006               	movlw	6
  8500  0CD4  1903               	skipnz
  8501  0CD5  0229               	subwf	Led_InitSeq@DelayCounter^(0+128),w
  8502  0CD6  1C03               	skipc
  8503  0CD7  0008               	return
  8504                           
  8505                           ;led.c: 149: {
  8506                           ;led.c: 151: LedInitSts = !LedInitSts;
  8507  0CD8  0868               	movf	Led_InitSeq@LedInitSts^(0+128),w
  8508  0CD9  1D03               	btfss	3,2
  8509  0CDA  2CDD               	goto	u4110
  8510  0CDB  3001               	movlw	1
  8511  0CDC  2CDE               	goto	u4120
  8512  0CDD                     u4110:	
  8513  0CDD  3000               	movlw	0
  8514  0CDE                     u4120:	
  8515  0CDE  0020               	movlb	0	; select bank0
  8516  0CDF  00A1               	movwf	??_Led_InitSeq
  8517  0CE0  0821               	movf	??_Led_InitSeq,w
  8518  0CE1  0021               	movlb	1	; select bank1
  8519  0CE2  00E8               	movwf	Led_InitSeq@LedInitSts^(0+128)
  8520                           
  8521                           ;led.c: 153: Led_SetLedStatus(1u,LedInitSts);
  8522  0CE3  0868               	movf	Led_InitSeq@LedInitSts^(0+128),w
  8523  0CE4  0020               	movlb	0	; select bank0
  8524  0CE5  00A1               	movwf	??_Led_InitSeq
  8525  0CE6  0821               	movf	??_Led_InitSeq,w
  8526  0CE7  00F4               	movwf	Led_SetLedStatus@LedSts
  8527  0CE8  3001               	movlw	1
  8528  0CE9  3196  2667  318C   	fcall	_Led_SetLedStatus
  8529                           
  8530                           ;led.c: 155: DelayCounter = 0;
  8531  0CEC  0021               	movlb	1	; select bank1
  8532  0CED  01A9               	clrf	Led_InitSeq@DelayCounter^(0+128)
  8533  0CEE  01AA               	clrf	(Led_InitSeq@DelayCounter+1)^(0+128)
  8534                           
  8535                           ;led.c: 157: Counter++;
  8536  0CEF  3001               	movlw	1
  8537  0CF0  0020               	movlb	0	; select bank0
  8538  0CF1  00A1               	movwf	??_Led_InitSeq
  8539  0CF2  0821               	movf	??_Led_InitSeq,w
  8540  0CF3  0021               	movlb	1	; select bank1
  8541  0CF4  07BD               	addwf	Led_InitSeq@Counter^(0+128),f
  8542                           
  8543                           ;led.c: 159: if (Counter > 5u)
  8544  0CF5  3006               	movlw	6
  8545  0CF6  023D               	subwf	Led_InitSeq@Counter^(0+128),w
  8546  0CF7  1C03               	skipc
  8547  0CF8  0008               	return
  8548                           
  8549                           ;led.c: 160: {
  8550                           ;led.c: 162: Led_SetLedStatus(1u,LED_STS_OFF);
  8551  0CF9  01F4               	clrf	Led_SetLedStatus@LedSts
  8552  0CFA  3001               	movlw	1
  8553  0CFB  3196  2667         	fcall	_Led_SetLedStatus
  8554                           
  8555                           ;led.c: 164: InitSeqState = Done;
  8556  0CFD  3002               	movlw	2
  8557  0CFE  0020               	movlb	0	; select bank0
  8558  0CFF  00A1               	movwf	??_Led_InitSeq
  8559  0D00  0821               	movf	??_Led_InitSeq,w
  8560  0D01  0021               	movlb	1	; select bank1
  8561  0D02  00BC               	movwf	Led_InitSeq@InitSeqState^(0+128)
  8562                           
  8563                           ;led.c: 174: }
  8564                           
  8565                           ;led.c: 173: break;
  8566                           
  8567                           ;led.c: 172: default:
  8568                           
  8569                           ;led.c: 170: break;
  8570                           
  8571                           ;led.c: 169: case Done:
  8572                           
  8573                           ;led.c: 165: }
  8574                           ;led.c: 166: }
  8575                           ;led.c: 167: break;
  8576  0D03  0008               	return
  8577  0D04                     l4908:	
  8578  0D04  0021               	movlb	1	; select bank1
  8579  0D05  083C               	movf	Led_InitSeq@InitSeqState^(0+128),w
  8580                           
  8581                           ; Switch size 1, requested type "space"
  8582                           ; Number of cases is 3, Range of values is 0 to 2
  8583                           ; switch strategies available:
  8584                           ; Name         Instructions Cycles
  8585                           ; simple_byte           10     6 (average)
  8586                           ; direct_byte           12     6 (fixed)
  8587                           ; jumptable            260     6 (fixed)
  8588                           ;	Chosen strategy is simple_byte
  8589  0D06  3A00               	xorlw	0	; case 0
  8590  0D07  1903               	skipnz
  8591  0D08  2CC0               	goto	l4886
  8592  0D09  3A01               	xorlw	1	; case 1
  8593  0D0A  1903               	skipnz
  8594  0D0B  2CCD               	goto	l4890
  8595  0D0C  3A03               	xorlw	3	; case 2
  8596  0D0D  1903               	skipnz
  8597  0D0E  2D10               	goto	l671
  8598  0D0F  2D10               	goto	l671
  8599  0D10                     l671:	
  8600  0D10  0008               	return
  8601  0D11                     __end_of_Led_InitSeq:	
  8602                           
  8603                           	psect	text24
  8604  0A41                     __ptext24:	
  8605 ;; *************** function _LedStateMachine *****************
  8606 ;; Defined at:
  8607 ;;		line 82 in file "../../../Framework/MercuryFwk/Source/c/03_Sml/02_Ssl/led.c"
  8608 ;; Parameters:    Size  Location     Type
  8609 ;;  Led             1    wreg     unsigned char 
  8610 ;;  LedSts          1   11[BANK0 ] PTR enum E4030
  8611 ;;		 -> Led1Sts(1), 
  8612 ;;  LedBlink        1   12[BANK0 ] PTR struct _LedBlinkType
  8613 ;;		 -> Led1Blink(9), 
  8614 ;;  LedPulse        1   13[BANK0 ] PTR struct _LedPulseType
  8615 ;;		 -> Led1Pulse(6), 
  8616 ;; Auto vars:     Size  Location     Type
  8617 ;;  Led             1   16[BANK0 ] unsigned char 
  8618 ;;  LedOutSts       1   17[BANK0 ] unsigned char 
  8619 ;; Return value:  Size  Location     Type
  8620 ;;                  1    wreg      unsigned char 
  8621 ;; Registers used:
  8622 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8623 ;; Tracked objects:
  8624 ;;		On entry : 0/0
  8625 ;;		On exit  : 0/0
  8626 ;;		Unchanged: 0/0
  8627 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8628 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8629 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8630 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8631 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8632 ;;Total ram usage:        7 bytes
  8633 ;; Hardware stack levels used:    1
  8634 ;; Hardware stack levels required when called:    4
  8635 ;; This function calls:
  8636 ;;		_LedBlinkStateMachine
  8637 ;;		_LedPulseStateMachine
  8638 ;; This function is called by:
  8639 ;;		_Led_MainTask
  8640 ;; This function uses a non-reentrant model
  8641 ;;
  8642                           
  8643                           
  8644                           ;psect for function _LedStateMachine
  8645  0A41                     _LedStateMachine:	
  8646                           
  8647                           ;incstack = 0
  8648                           ; Regs used in _LedStateMachine: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  8649                           ;LedStateMachine@Led stored from wreg
  8650  0A41  0020               	movlb	0	; select bank0
  8651  0A42  00B0               	movwf	LedStateMachine@Led
  8652                           
  8653                           ;led.c: 85: UINT8 LedOutSts = 0u;
  8654  0A43  01B1               	clrf	LedStateMachine@LedOutSts
  8655                           
  8656                           ;led.c: 88: switch (*LedSts)
  8657  0A44  2A5F               	goto	l4878
  8658  0A45                     l4870:	
  8659                           ;led.c: 89: {
  8660                           ;led.c: 90: case LED_STS_OFF:
  8661                           
  8662                           
  8663                           ;led.c: 92: LedOutSts = ((UINT8)(0));
  8664  0A45  01B1               	clrf	LedStateMachine@LedOutSts
  8665                           
  8666                           ;led.c: 93: break;
  8667  0A46  2A70               	goto	l4880
  8668  0A47                     l648:	
  8669                           ;led.c: 95: case LED_STS_ON:
  8670                           
  8671                           
  8672                           ;led.c: 97: LedOutSts = ((UINT8)(1));
  8673  0A47  01B1               	clrf	LedStateMachine@LedOutSts
  8674  0A48  0AB1               	incf	LedStateMachine@LedOutSts,f
  8675                           
  8676                           ;led.c: 98: break;
  8677  0A49  2A70               	goto	l4880
  8678  0A4A                     l4872:	
  8679                           ;led.c: 100: case LED_STS_BLINK:
  8680                           
  8681                           
  8682                           ;led.c: 102: LedOutSts = LedBlinkStateMachine(LedBlink);
  8683  0A4A  082C               	movf	LedStateMachine@LedBlink,w
  8684  0A4B  318F  2761  318A   	fcall	_LedBlinkStateMachine
  8685  0A4E  0020               	movlb	0	; select bank0
  8686  0A4F  00AE               	movwf	??_LedStateMachine
  8687  0A50  082E               	movf	??_LedStateMachine,w
  8688  0A51  2A5D               	goto	L7
  8689  0A52                     l4874:	
  8690                           ;led.c: 105: case LED_STS_PULSE:
  8691                           
  8692                           ;led.c: 103: break;
  8693                           
  8694                           
  8695                           ;led.c: 107: LedOutSts = LedPulseStateMachine(LedPulse, Led);
  8696  0A52  0830               	movf	LedStateMachine@Led,w
  8697  0A53  00AE               	movwf	??_LedStateMachine
  8698  0A54  082E               	movf	??_LedStateMachine,w
  8699  0A55  00A7               	movwf	LedPulseStateMachine@Led
  8700  0A56  082D               	movf	LedStateMachine@LedPulse,w
  8701  0A57  318D  25E3  318A   	fcall	_LedPulseStateMachine
  8702  0A5A  0020               	movlb	0	; select bank0
  8703  0A5B  00AF               	movwf	??_LedStateMachine+1
  8704  0A5C  082F               	movf	??_LedStateMachine+1,w
  8705  0A5D                     L7:	
  8706  0A5D  00B1               	movwf	LedStateMachine@LedOutSts
  8707                           
  8708                           ;led.c: 112: }
  8709                           
  8710                           ;led.c: 111: break;
  8711                           
  8712                           ;led.c: 110: default:
  8713                           
  8714                           ;led.c: 108: break;
  8715  0A5E  2A70               	goto	l4880
  8716  0A5F                     l4878:	
  8717  0A5F  082B               	movf	LedStateMachine@LedSts,w
  8718  0A60  0086               	movwf	6
  8719  0A61  0187               	clrf	7
  8720  0A62  0801               	movf	1,w
  8721                           
  8722                           ; Switch size 1, requested type "space"
  8723                           ; Number of cases is 4, Range of values is 0 to 3
  8724                           ; switch strategies available:
  8725                           ; Name         Instructions Cycles
  8726                           ; simple_byte           13     7 (average)
  8727                           ; direct_byte           14     6 (fixed)
  8728                           ; jumptable            260     6 (fixed)
  8729                           ;	Chosen strategy is simple_byte
  8730  0A63  3A00               	xorlw	0	; case 0
  8731  0A64  1903               	skipnz
  8732  0A65  2A45               	goto	l4870
  8733  0A66  3A01               	xorlw	1	; case 1
  8734  0A67  1903               	skipnz
  8735  0A68  2A47               	goto	l648
  8736  0A69  3A03               	xorlw	3	; case 2
  8737  0A6A  1903               	skipnz
  8738  0A6B  2A4A               	goto	l4872
  8739  0A6C  3A01               	xorlw	1	; case 3
  8740  0A6D  1903               	skipnz
  8741  0A6E  2A52               	goto	l4874
  8742  0A6F  2A70               	goto	l4880
  8743  0A70                     l4880:	
  8744                           
  8745                           ;led.c: 114: return LedOutSts;
  8746  0A70  0831               	movf	LedStateMachine@LedOutSts,w
  8747  0A71  0008               	return
  8748  0A72                     __end_of_LedStateMachine:	
  8749                           
  8750                           	psect	text25
  8751  0DE3                     __ptext25:	
  8752 ;; *************** function _LedPulseStateMachine *****************
  8753 ;; Defined at:
  8754 ;;		line 131 in file "../../../Framework/MercuryFwk/Source/c/01_Hal/02_Drv/led_drv.c"
  8755 ;; Parameters:    Size  Location     Type
  8756 ;;  LedPulse        1    wreg     PTR struct _LedPulseType
  8757 ;;		 -> Led1Pulse(6), 
  8758 ;;  Led             1    7[BANK0 ] unsigned char 
  8759 ;; Auto vars:     Size  Location     Type
  8760 ;;  LedPulse        1   10[BANK0 ] PTR struct _LedPulseType
  8761 ;;		 -> Led1Pulse(6), 
  8762 ;; Return value:  Size  Location     Type
  8763 ;;                  1    wreg      unsigned char 
  8764 ;; Registers used:
  8765 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8766 ;; Tracked objects:
  8767 ;;		On entry : 0/0
  8768 ;;		On exit  : 0/0
  8769 ;;		Unchanged: 0/0
  8770 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8771 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8772 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8773 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8774 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8775 ;;Total ram usage:        4 bytes
  8776 ;; Hardware stack levels used:    1
  8777 ;; Hardware stack levels required when called:    3
  8778 ;; This function calls:
  8779 ;;		_Led_SetLedStatus
  8780 ;;		___lwdiv
  8781 ;; This function is called by:
  8782 ;;		_LedStateMachine
  8783 ;; This function uses a non-reentrant model
  8784 ;;
  8785                           
  8786                           
  8787                           ;psect for function _LedPulseStateMachine
  8788  0DE3                     _LedPulseStateMachine:	
  8789                           
  8790                           ;incstack = 0
  8791                           ; Regs used in _LedPulseStateMachine: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  8792                           ;LedPulseStateMachine@LedPulse stored from wreg
  8793  0DE3  0020               	movlb	0	; select bank0
  8794  0DE4  00AA               	movwf	LedPulseStateMachine@LedPulse
  8795                           
  8796                           ;led_drv.c: 134: switch (LedPulse->LedPulseState)
  8797  0DE5  2E3F               	goto	l4616
  8798  0DE6                     l4598:	
  8799                           ;led_drv.c: 135: {
  8800                           ;led_drv.c: 136: case LedPulseOn:
  8801                           
  8802                           
  8803                           ;led_drv.c: 138: LedPulse->LedOutState = ((UINT8)(1));
  8804  0DE6  0A2A               	incf	LedPulseStateMachine@LedPulse,w
  8805  0DE7  0086               	movwf	6
  8806  0DE8  3001               	movlw	1	; select bank2/3
  8807  0DE9  0087               	movwf	7
  8808  0DEA  0181               	clrf	1
  8809  0DEB  0A81               	incf	1,f
  8810                           
  8811                           ;led_drv.c: 140: LedPulse->LedPulseState = LedPulseDelay;
  8812  0DEC  082A               	movf	LedPulseStateMachine@LedPulse,w
  8813  0DED  0086               	movwf	6
  8814  0DEE  3001               	movlw	1	; select bank2/3
  8815  0DEF  0087               	movwf	7
  8816  0DF0  0181               	clrf	1
  8817  0DF1  0A81               	incf	1,f
  8818  0DF2                     l4600:	
  8819                           ;led_drv.c: 143: case LedPulseDelay:
  8820                           
  8821                           
  8822                           ;led_drv.c: 145: LedPulse->LedPulseCounter++;
  8823  0DF2  082A               	movf	LedPulseStateMachine@LedPulse,w
  8824  0DF3  3E02               	addlw	2
  8825  0DF4  0086               	movwf	6
  8826  0DF5  3001               	movlw	1	; select bank2/3
  8827  0DF6  0087               	movwf	7
  8828  0DF7  3001               	movlw	1
  8829  0DF8  0781               	addwf	1,f
  8830  0DF9  3141               	addfsr 1,1
  8831  0DFA  1803               	skipnc
  8832  0DFB  0A81               	incf	1,f
  8833                           
  8834                           ;led_drv.c: 147: if (LedPulse->LedPulseCounter >= (LedPulse->LedPulseTimeMs/((UINT16)(10
      +                          ))))
  8835  0DFC  300A               	movlw	10
  8836  0DFD  00A0               	movwf	___lwdiv@divisor
  8837  0DFE  3000               	movlw	0
  8838  0DFF  00A1               	movwf	___lwdiv@divisor+1
  8839  0E00  082A               	movf	LedPulseStateMachine@LedPulse,w
  8840  0E01  3E04               	addlw	4
  8841  0E02  0086               	movwf	6
  8842  0E03  3001               	movlw	1	; select bank2/3
  8843  0E04  0087               	movwf	7
  8844  0E05  3F40               	moviw [0]fsr1
  8845  0E06  00A2               	movwf	___lwdiv@dividend
  8846  0E07  3F41               	moviw [1]fsr1
  8847  0E08  00A3               	movwf	___lwdiv@dividend+1
  8848  0E09  318A  2272  318D   	fcall	___lwdiv
  8849  0E0C  0020               	movlb	0	; select bank0
  8850  0E0D  082A               	movf	LedPulseStateMachine@LedPulse,w
  8851  0E0E  3E02               	addlw	2
  8852  0E0F  0086               	movwf	6
  8853  0E10  3001               	movlw	1	; select bank2/3
  8854  0E11  0087               	movwf	7
  8855  0E12  3F40               	moviw [0]fsr1
  8856  0E13  00A8               	movwf	??_LedPulseStateMachine
  8857  0E14  3F41               	moviw [1]fsr1
  8858  0E15  00A9               	movwf	??_LedPulseStateMachine+1
  8859  0E16  0821               	movf	?___lwdiv+1,w
  8860  0E17  0229               	subwf	??_LedPulseStateMachine+1,w
  8861  0E18  1D03               	skipz
  8862  0E19  2E1C               	goto	u3715
  8863  0E1A  0820               	movf	?___lwdiv,w
  8864  0E1B  0228               	subwf	??_LedPulseStateMachine,w
  8865  0E1C                     u3715:	
  8866  0E1C  1C03               	skipc
  8867  0E1D  2E4F               	goto	l4618
  8868                           
  8869                           ;led_drv.c: 148: {
  8870                           ;led_drv.c: 150: LedPulse->LedPulseCounter = 0;
  8871  0E1E  082A               	movf	LedPulseStateMachine@LedPulse,w
  8872  0E1F  3E02               	addlw	2
  8873  0E20  0086               	movwf	6
  8874  0E21  3001               	movlw	1	; select bank2/3
  8875  0E22  0087               	movwf	7
  8876  0E23  3000               	movlw	0
  8877  0E24  3FC0               	movwi [0]fsr1
  8878  0E25  3FC1               	movwi [1]fsr1
  8879                           
  8880                           ;led_drv.c: 152: LedPulse->LedOutState = ((UINT8)(0));
  8881  0E26  0A2A               	incf	LedPulseStateMachine@LedPulse,w
  8882  0E27  0086               	movwf	6
  8883  0E28  3001               	movlw	1	; select bank2/3
  8884  0E29  0087               	movwf	7
  8885  0E2A  0181               	clrf	1
  8886                           
  8887                           ;led_drv.c: 154: LedPulse->LedPulseState = LedPulseOff;
  8888  0E2B  3002               	movlw	2
  8889  0E2C  00A8               	movwf	??_LedPulseStateMachine
  8890  0E2D  082A               	movf	LedPulseStateMachine@LedPulse,w
  8891  0E2E  0086               	movwf	6
  8892  0E2F  3001               	movlw	1	; select bank2/3
  8893  0E30  0087               	movwf	7
  8894  0E31  0828               	movf	??_LedPulseStateMachine,w
  8895  0E32  0081               	movwf	1
  8896                           
  8897                           ;led_drv.c: 155: }
  8898                           ;led_drv.c: 156: break;
  8899  0E33  2E4F               	goto	l4618
  8900  0E34                     l4610:	
  8901                           ;led_drv.c: 158: case LedPulseOff:
  8902                           
  8903                           
  8904                           ;led_drv.c: 160: LedPulse->LedPulseState = LedPulseOn;
  8905  0E34  082A               	movf	LedPulseStateMachine@LedPulse,w
  8906  0E35  0086               	movwf	6
  8907  0E36  3001               	movlw	1	; select bank2/3
  8908  0E37  0087               	movwf	7
  8909  0E38  0181               	clrf	1
  8910                           
  8911                           ;led_drv.c: 162: Led_SetLedStatus(Led,LED_STS_OFF);
  8912  0E39  01F4               	clrf	Led_SetLedStatus@LedSts
  8913  0E3A  0827               	movf	LedPulseStateMachine@Led,w
  8914  0E3B  3196  2667  318D   	fcall	_Led_SetLedStatus
  8915                           
  8916                           ;led_drv.c: 167: }
  8917                           
  8918                           ;led_drv.c: 166: break;
  8919                           
  8920                           ;led_drv.c: 165: default:
  8921                           
  8922                           ;led_drv.c: 163: break;
  8923  0E3E  2E4F               	goto	l4618
  8924  0E3F                     l4616:	
  8925  0E3F  0020               	movlb	0	; select bank0
  8926  0E40  082A               	movf	LedPulseStateMachine@LedPulse,w
  8927  0E41  0086               	movwf	6
  8928  0E42  3001               	movlw	1	; select bank2/3
  8929  0E43  0087               	movwf	7
  8930  0E44  0801               	movf	1,w
  8931                           
  8932                           ; Switch size 1, requested type "space"
  8933                           ; Number of cases is 3, Range of values is 0 to 2
  8934                           ; switch strategies available:
  8935                           ; Name         Instructions Cycles
  8936                           ; simple_byte           10     6 (average)
  8937                           ; direct_byte           12     6 (fixed)
  8938                           ; jumptable            260     6 (fixed)
  8939                           ;	Chosen strategy is simple_byte
  8940  0E45  3A00               	xorlw	0	; case 0
  8941  0E46  1903               	skipnz
  8942  0E47  2DE6               	goto	l4598
  8943  0E48  3A01               	xorlw	1	; case 1
  8944  0E49  1903               	skipnz
  8945  0E4A  2DF2               	goto	l4600
  8946  0E4B  3A03               	xorlw	3	; case 2
  8947  0E4C  1903               	skipnz
  8948  0E4D  2E34               	goto	l4610
  8949  0E4E  2E4F               	goto	l4618
  8950  0E4F                     l4618:	
  8951                           
  8952                           ;led_drv.c: 170: return (LedPulse->LedOutState);
  8953  0E4F  0020               	movlb	0	; select bank0
  8954  0E50  0A2A               	incf	LedPulseStateMachine@LedPulse,w
  8955  0E51  0086               	movwf	6
  8956  0E52  3001               	movlw	1	; select bank2/3
  8957  0E53  0087               	movwf	7
  8958  0E54  0801               	movf	1,w
  8959  0E55  0008               	return
  8960  0E56                     __end_of_LedPulseStateMachine:	
  8961                           
  8962                           	psect	text26
  8963  0F61                     __ptext26:	
  8964 ;; *************** function _LedBlinkStateMachine *****************
  8965 ;; Defined at:
  8966 ;;		line 74 in file "../../../Framework/MercuryFwk/Source/c/01_Hal/02_Drv/led_drv.c"
  8967 ;; Parameters:    Size  Location     Type
  8968 ;;  LedBlink        1    wreg     PTR struct _LedBlinkType
  8969 ;;		 -> Led1Blink(9), 
  8970 ;; Auto vars:     Size  Location     Type
  8971 ;;  LedBlink        1    5[COMMON] PTR struct _LedBlinkType
  8972 ;;		 -> Led1Blink(9), 
  8973 ;; Return value:  Size  Location     Type
  8974 ;;                  1    wreg      unsigned char 
  8975 ;; Registers used:
  8976 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8977 ;; Tracked objects:
  8978 ;;		On entry : 0/0
  8979 ;;		On exit  : 0/0
  8980 ;;		Unchanged: 0/0
  8981 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8982 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8983 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8984 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8985 ;;      Totals:         1       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8986 ;;Total ram usage:        3 bytes
  8987 ;; Hardware stack levels used:    1
  8988 ;; Hardware stack levels required when called:    3
  8989 ;; This function calls:
  8990 ;;		___lwdiv
  8991 ;; This function is called by:
  8992 ;;		_LedStateMachine
  8993 ;; This function uses a non-reentrant model
  8994 ;;
  8995                           
  8996                           
  8997                           ;psect for function _LedBlinkStateMachine
  8998  0F61                     _LedBlinkStateMachine:	
  8999                           
  9000                           ;incstack = 0
  9001                           ; Regs used in _LedBlinkStateMachine: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  9002                           ;LedBlinkStateMachine@LedBlink stored from wreg
  9003  0F61  00F5               	movwf	LedBlinkStateMachine@LedBlink
  9004                           
  9005                           ;led_drv.c: 77: switch (LedBlink->LedBlinkState)
  9006  0F62  2FEE               	goto	l4590
  9007  0F63                     l4568:	
  9008                           ;led_drv.c: 78: {
  9009                           ;led_drv.c: 79: case LedBlinkInit:
  9010                           
  9011                           
  9012                           ;led_drv.c: 81: LedBlink->LedOutState = LedBlink->LedInitStatus;
  9013  0F63  0875               	movf	LedBlinkStateMachine@LedBlink,w
  9014  0F64  3E08               	addlw	8
  9015  0F65  0086               	movwf	6
  9016  0F66  3001               	movlw	1	; select bank2/3
  9017  0F67  0087               	movwf	7
  9018  0F68  0801               	movf	1,w
  9019  0F69  0020               	movlb	0	; select bank0
  9020  0F6A  00A7               	movwf	??_LedBlinkStateMachine
  9021  0F6B  0A75               	incf	LedBlinkStateMachine@LedBlink,w
  9022  0F6C  0086               	movwf	6
  9023  0F6D  3001               	movlw	1	; select bank2/3
  9024  0F6E  0087               	movwf	7
  9025  0F6F  0827               	movf	??_LedBlinkStateMachine,w
  9026  0F70  0081               	movwf	1
  9027                           
  9028                           ;led_drv.c: 83: LedBlink->LedBlinkState = LedBlinkRunning;
  9029  0F71  0875               	movf	LedBlinkStateMachine@LedBlink,w
  9030  0F72  2FB0               	goto	L8
  9031  0F73                     l4572:	
  9032                           ;led_drv.c: 86: case LedBlinkRunning:
  9033                           
  9034                           ;led_drv.c: 84: break;
  9035                           
  9036                           
  9037                           ;led_drv.c: 88: LedBlink->LedBlinkCounter++;
  9038  0F73  0875               	movf	LedBlinkStateMachine@LedBlink,w
  9039  0F74  3E02               	addlw	2
  9040  0F75  0086               	movwf	6
  9041  0F76  3001               	movlw	1	; select bank2/3
  9042  0F77  0087               	movwf	7
  9043  0F78  3001               	movlw	1
  9044  0F79  0781               	addwf	1,f
  9045  0F7A  3141               	addfsr 1,1
  9046  0F7B  1803               	skipnc
  9047  0F7C  0A81               	incf	1,f
  9048                           
  9049                           ;led_drv.c: 90: if (LedBlink->LedOutState == OffState)
  9050  0F7D  0A75               	incf	LedBlinkStateMachine@LedBlink,w
  9051  0F7E  0086               	movwf	6
  9052  0F7F  3001               	movlw	1	; select bank2/3
  9053  0F80  0087               	movwf	7
  9054  0F81  0801               	movf	1,w
  9055  0F82  1D03               	btfss	3,2
  9056  0F83  2FB6               	goto	l4580
  9057                           
  9058                           ;led_drv.c: 91: {
  9059                           ;led_drv.c: 93: if (LedBlink->LedBlinkCounter >= (LedBlink->LedOffTimeMs/((UINT16)(10)))
      +                          )
  9060  0F84  300A               	movlw	10
  9061  0F85  0020               	movlb	0	; select bank0
  9062  0F86  00A0               	movwf	___lwdiv@divisor
  9063  0F87  3000               	movlw	0
  9064  0F88  00A1               	movwf	___lwdiv@divisor+1
  9065  0F89  0875               	movf	LedBlinkStateMachine@LedBlink,w
  9066  0F8A  3E06               	addlw	6
  9067  0F8B  0086               	movwf	6
  9068  0F8C  3001               	movlw	1	; select bank2/3
  9069  0F8D  0087               	movwf	7
  9070  0F8E  3F40               	moviw [0]fsr1
  9071  0F8F  00A2               	movwf	___lwdiv@dividend
  9072  0F90  3F41               	moviw [1]fsr1
  9073  0F91  00A3               	movwf	___lwdiv@dividend+1
  9074  0F92  318A  2272  318F   	fcall	___lwdiv
  9075  0F95  0875               	movf	LedBlinkStateMachine@LedBlink,w
  9076  0F96  3E02               	addlw	2
  9077  0F97  0086               	movwf	6
  9078  0F98  3001               	movlw	1	; select bank2/3
  9079  0F99  0087               	movwf	7
  9080  0F9A  3F40               	moviw [0]fsr1
  9081  0F9B  0020               	movlb	0	; select bank0
  9082  0F9C  00A7               	movwf	??_LedBlinkStateMachine
  9083  0F9D  3F41               	moviw [1]fsr1
  9084  0F9E  00A8               	movwf	??_LedBlinkStateMachine+1
  9085  0F9F  0821               	movf	?___lwdiv+1,w
  9086  0FA0  0228               	subwf	??_LedBlinkStateMachine+1,w
  9087  0FA1  1D03               	skipz
  9088  0FA2  2FA5               	goto	u3685
  9089  0FA3  0820               	movf	?___lwdiv,w
  9090  0FA4  0227               	subwf	??_LedBlinkStateMachine,w
  9091  0FA5                     u3685:	
  9092  0FA5  1C03               	skipc
  9093  0FA6  2FFA               	goto	l4592
  9094                           
  9095                           ;led_drv.c: 94: {
  9096                           ;led_drv.c: 96: LedBlink->LedBlinkCounter = 0;
  9097  0FA7  0875               	movf	LedBlinkStateMachine@LedBlink,w
  9098  0FA8  3E02               	addlw	2
  9099  0FA9  0086               	movwf	6
  9100  0FAA  3001               	movlw	1	; select bank2/3
  9101  0FAB  0087               	movwf	7
  9102  0FAC  3000               	movlw	0
  9103  0FAD  3FC0               	movwi [0]fsr1
  9104  0FAE  3FC1               	movwi [1]fsr1
  9105                           
  9106                           ;led_drv.c: 98: LedBlink->LedOutState = OnState;
  9107  0FAF  0A75               	incf	LedBlinkStateMachine@LedBlink,w
  9108  0FB0                     L8:	
  9109  0FB0  0086               	movwf	6
  9110  0FB1  3001               	movlw	1	; select bank2/3
  9111  0FB2  0087               	movwf	7
  9112  0FB3  0181               	clrf	1
  9113  0FB4  0A81               	incf	1,f
  9114                           
  9115                           ;led_drv.c: 99: }
  9116                           ;led_drv.c: 100: }
  9117  0FB5  2FFA               	goto	l4592
  9118  0FB6                     l4580:	
  9119                           
  9120                           ;led_drv.c: 101: else if (LedBlink->LedOutState == OnState)
  9121  0FB6  0A75               	incf	LedBlinkStateMachine@LedBlink,w
  9122  0FB7  0086               	movwf	6
  9123  0FB8  3001               	movlw	1	; select bank2/3
  9124  0FB9  0087               	movwf	7
  9125  0FBA  0301               	decf	1,w
  9126  0FBB  1D03               	btfss	3,2
  9127  0FBC  2FFA               	goto	l4592
  9128                           
  9129                           ;led_drv.c: 102: {
  9130                           ;led_drv.c: 104: if (LedBlink->LedBlinkCounter >= (LedBlink->LedOnTimeMs/((UINT16)(10)))
      +                          )
  9131  0FBD  300A               	movlw	10
  9132  0FBE  0020               	movlb	0	; select bank0
  9133  0FBF  00A0               	movwf	___lwdiv@divisor
  9134  0FC0  3000               	movlw	0
  9135  0FC1  00A1               	movwf	___lwdiv@divisor+1
  9136  0FC2  0875               	movf	LedBlinkStateMachine@LedBlink,w
  9137  0FC3  3E04               	addlw	4
  9138  0FC4  0086               	movwf	6
  9139  0FC5  3001               	movlw	1	; select bank2/3
  9140  0FC6  0087               	movwf	7
  9141  0FC7  3F40               	moviw [0]fsr1
  9142  0FC8  00A2               	movwf	___lwdiv@dividend
  9143  0FC9  3F41               	moviw [1]fsr1
  9144  0FCA  00A3               	movwf	___lwdiv@dividend+1
  9145  0FCB  318A  2272  318F   	fcall	___lwdiv
  9146  0FCE  0875               	movf	LedBlinkStateMachine@LedBlink,w
  9147  0FCF  3E02               	addlw	2
  9148  0FD0  0086               	movwf	6
  9149  0FD1  3001               	movlw	1	; select bank2/3
  9150  0FD2  0087               	movwf	7
  9151  0FD3  3F40               	moviw [0]fsr1
  9152  0FD4  0020               	movlb	0	; select bank0
  9153  0FD5  00A7               	movwf	??_LedBlinkStateMachine
  9154  0FD6  3F41               	moviw [1]fsr1
  9155  0FD7  00A8               	movwf	??_LedBlinkStateMachine+1
  9156  0FD8  0821               	movf	?___lwdiv+1,w
  9157  0FD9  0228               	subwf	??_LedBlinkStateMachine+1,w
  9158  0FDA  1D03               	skipz
  9159  0FDB  2FDE               	goto	u3705
  9160  0FDC  0820               	movf	?___lwdiv,w
  9161  0FDD  0227               	subwf	??_LedBlinkStateMachine,w
  9162  0FDE                     u3705:	
  9163  0FDE  1C03               	skipc
  9164  0FDF  2FFA               	goto	l4592
  9165                           
  9166                           ;led_drv.c: 105: {
  9167                           ;led_drv.c: 107: LedBlink->LedBlinkCounter = 0;
  9168  0FE0  0875               	movf	LedBlinkStateMachine@LedBlink,w
  9169  0FE1  3E02               	addlw	2
  9170  0FE2  0086               	movwf	6
  9171  0FE3  3001               	movlw	1	; select bank2/3
  9172  0FE4  0087               	movwf	7
  9173  0FE5  3000               	movlw	0
  9174  0FE6  3FC0               	movwi [0]fsr1
  9175  0FE7  3FC1               	movwi [1]fsr1
  9176                           
  9177                           ;led_drv.c: 109: LedBlink->LedOutState = OffState;
  9178  0FE8  0A75               	incf	LedBlinkStateMachine@LedBlink,w
  9179  0FE9  0086               	movwf	6
  9180  0FEA  3001               	movlw	1	; select bank2/3
  9181  0FEB  0087               	movwf	7
  9182  0FEC  0181               	clrf	1
  9183                           
  9184                           ;led_drv.c: 116: }
  9185                           
  9186                           ;led_drv.c: 115: break;
  9187                           
  9188                           ;led_drv.c: 114: default:
  9189                           
  9190                           ;led_drv.c: 110: }
  9191                           ;led_drv.c: 111: }
  9192                           ;led_drv.c: 112: break;
  9193  0FED  2FFA               	goto	l4592
  9194  0FEE                     l4590:	
  9195  0FEE  0875               	movf	LedBlinkStateMachine@LedBlink,w
  9196  0FEF  0086               	movwf	6
  9197  0FF0  3001               	movlw	1	; select bank2/3
  9198  0FF1  0087               	movwf	7
  9199  0FF2  0801               	movf	1,w
  9200                           
  9201                           ; Switch size 1, requested type "space"
  9202                           ; Number of cases is 2, Range of values is 0 to 1
  9203                           ; switch strategies available:
  9204                           ; Name         Instructions Cycles
  9205                           ; simple_byte            7     4 (average)
  9206                           ; direct_byte           10     6 (fixed)
  9207                           ; jumptable            260     6 (fixed)
  9208                           ;	Chosen strategy is simple_byte
  9209  0FF3  3A00               	xorlw	0	; case 0
  9210  0FF4  1903               	skipnz
  9211  0FF5  2F63               	goto	l4568
  9212  0FF6  3A01               	xorlw	1	; case 1
  9213  0FF7  1903               	skipnz
  9214  0FF8  2F73               	goto	l4572
  9215  0FF9  2FFA               	goto	l4592
  9216  0FFA                     l4592:	
  9217                           
  9218                           ;led_drv.c: 119: return (LedBlink->LedOutState);
  9219  0FFA  0A75               	incf	LedBlinkStateMachine@LedBlink,w
  9220  0FFB  0086               	movwf	6
  9221  0FFC  3001               	movlw	1	; select bank2/3
  9222  0FFD  0087               	movwf	7
  9223  0FFE  0801               	movf	1,w
  9224  0FFF  0008               	return
  9225  1000                     __end_of_LedBlinkStateMachine:	
  9226                           
  9227                           	psect	text27
  9228  1621                     __ptext27:	
  9229 ;; *************** function _CheckStopBitStatus *****************
  9230 ;; Defined at:
  9231 ;;		line 151 in file "../../../Framework/MercuryFwk/Source/c/01_Hal/02_Drv/i2c_slv_drv.c"
  9232 ;; Parameters:    Size  Location     Type
  9233 ;;		None
  9234 ;; Auto vars:     Size  Location     Type
  9235 ;;		None
  9236 ;; Return value:  Size  Location     Type
  9237 ;;                  1    wreg      unsigned char 
  9238 ;; Registers used:
  9239 ;;		wreg, status,2, status,0
  9240 ;; Tracked objects:
  9241 ;;		On entry : 0/0
  9242 ;;		On exit  : 0/0
  9243 ;;		Unchanged: 0/0
  9244 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9245 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9246 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9247 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9248 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9249 ;;Total ram usage:        1 bytes
  9250 ;; Hardware stack levels used:    1
  9251 ;; Hardware stack levels required when called:    2
  9252 ;; This function calls:
  9253 ;;		Nothing
  9254 ;; This function is called by:
  9255 ;;		_I2c_DataReceiveSm
  9256 ;; This function uses a non-reentrant model
  9257 ;;
  9258                           
  9259                           
  9260                           ;psect for function _CheckStopBitStatus
  9261  1621                     _CheckStopBitStatus:	
  9262                           
  9263                           ;i2c_slv_drv.c: 154: return ((SSP1STAT & ((UINT8)(0x10))) >> ((UINT8)(4)));
  9264                           
  9265                           ;incstack = 0
  9266                           ; Regs used in _CheckStopBitStatus: [wreg+status,2+status,0]
  9267  1621  0024               	movlb	4	; select bank4
  9268  1622  0814               	movf	20,w	;volatile
  9269  1623  00F4               	movwf	??_CheckStopBitStatus
  9270  1624  3004               	movlw	4
  9271  1625                     u2345:	
  9272  1625  36F4               	lsrf	??_CheckStopBitStatus,f
  9273  1626  0B89               	decfsz	9,f
  9274  1627  2E25               	goto	u2345
  9275  1628  0874               	movf	??_CheckStopBitStatus,w
  9276  1629  3901               	andlw	1
  9277  162A  0008               	return
  9278  162B                     __end_of_CheckStopBitStatus:	
  9279                           
  9280                           	psect	text28
  9281  1617                     __ptext28:	
  9282 ;; *************** function _CheckByteStatus *****************
  9283 ;; Defined at:
  9284 ;;		line 137 in file "../../../Framework/MercuryFwk/Source/c/01_Hal/02_Drv/i2c_slv_drv.c"
  9285 ;; Parameters:    Size  Location     Type
  9286 ;;		None
  9287 ;; Auto vars:     Size  Location     Type
  9288 ;;		None
  9289 ;; Return value:  Size  Location     Type
  9290 ;;                  1    wreg      unsigned char 
  9291 ;; Registers used:
  9292 ;;		wreg, status,2, status,0
  9293 ;; Tracked objects:
  9294 ;;		On entry : 0/0
  9295 ;;		On exit  : 0/0
  9296 ;;		Unchanged: 0/0
  9297 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9298 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9299 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9300 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9301 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9302 ;;Total ram usage:        1 bytes
  9303 ;; Hardware stack levels used:    1
  9304 ;; Hardware stack levels required when called:    2
  9305 ;; This function calls:
  9306 ;;		Nothing
  9307 ;; This function is called by:
  9308 ;;		_I2c_DataReceiveSm
  9309 ;; This function uses a non-reentrant model
  9310 ;;
  9311                           
  9312                           
  9313                           ;psect for function _CheckByteStatus
  9314  1617                     _CheckByteStatus:	
  9315                           
  9316                           ;i2c_slv_drv.c: 140: return ((SSP1STAT & ((UINT8)(0x20))) >> ((UINT8)(5)));
  9317                           
  9318                           ;incstack = 0
  9319                           ; Regs used in _CheckByteStatus: [wreg+status,2+status,0]
  9320  1617  0024               	movlb	4	; select bank4
  9321  1618  0814               	movf	20,w	;volatile
  9322  1619  00F4               	movwf	??_CheckByteStatus
  9323  161A  3005               	movlw	5
  9324  161B                     u2335:	
  9325  161B  36F4               	lsrf	??_CheckByteStatus,f
  9326  161C  0B89               	decfsz	9,f
  9327  161D  2E1B               	goto	u2335
  9328  161E  0874               	movf	??_CheckByteStatus,w
  9329  161F  3901               	andlw	1
  9330  1620  0008               	return
  9331  1621                     __end_of_CheckByteStatus:	
  9332                           
  9333                           	psect	text29
  9334  160D                     __ptext29:	
  9335 ;; *************** function _CheckAckStatus *****************
  9336 ;; Defined at:
  9337 ;;		line 109 in file "../../../Framework/MercuryFwk/Source/c/01_Hal/02_Drv/i2c_slv_drv.c"
  9338 ;; Parameters:    Size  Location     Type
  9339 ;;		None
  9340 ;; Auto vars:     Size  Location     Type
  9341 ;;		None
  9342 ;; Return value:  Size  Location     Type
  9343 ;;                  1    wreg      unsigned char 
  9344 ;; Registers used:
  9345 ;;		wreg, status,2, status,0
  9346 ;; Tracked objects:
  9347 ;;		On entry : 0/0
  9348 ;;		On exit  : 0/0
  9349 ;;		Unchanged: 0/0
  9350 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9351 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9352 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9353 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9354 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9355 ;;Total ram usage:        1 bytes
  9356 ;; Hardware stack levels used:    1
  9357 ;; Hardware stack levels required when called:    2
  9358 ;; This function calls:
  9359 ;;		Nothing
  9360 ;; This function is called by:
  9361 ;;		_I2c_DataReceiveSm
  9362 ;; This function uses a non-reentrant model
  9363 ;;
  9364                           
  9365                           
  9366                           ;psect for function _CheckAckStatus
  9367  160D                     _CheckAckStatus:	
  9368                           
  9369                           ;i2c_slv_drv.c: 112: return ((SSP1CON2 & ((UINT8)(0x40))) >> ((UINT8)(6)));
  9370                           
  9371                           ;incstack = 0
  9372                           ; Regs used in _CheckAckStatus: [wreg+status,2+status,0]
  9373  160D  0024               	movlb	4	; select bank4
  9374  160E  0816               	movf	22,w	;volatile
  9375  160F  00F4               	movwf	??_CheckAckStatus
  9376  1610  3006               	movlw	6
  9377  1611                     u2325:	
  9378  1611  36F4               	lsrf	??_CheckAckStatus,f
  9379  1612  0B89               	decfsz	9,f
  9380  1613  2E11               	goto	u2325
  9381  1614  0874               	movf	??_CheckAckStatus,w
  9382  1615  3901               	andlw	1
  9383  1616  0008               	return
  9384  1617                     __end_of_CheckAckStatus:	
  9385                           
  9386                           	psect	text30
  9387  1719                     __ptext30:	
  9388 ;; *************** function _I2c_SetConfig *****************
  9389 ;; Defined at:
  9390 ;;		line 82 in file "../../../Framework/MercuryFwk/Source/c/03_Sml/01_Pml/01_SlvI2c/i2c_slv.c"
  9391 ;; Parameters:    Size  Location     Type
  9392 ;;		None
  9393 ;; Auto vars:     Size  Location     Type
  9394 ;;		None
  9395 ;; Return value:  Size  Location     Type
  9396 ;;                  1    wreg      void 
  9397 ;; Registers used:
  9398 ;;		wreg, status,2
  9399 ;; Tracked objects:
  9400 ;;		On entry : 0/0
  9401 ;;		On exit  : 0/0
  9402 ;;		Unchanged: 0/0
  9403 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9404 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9405 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9406 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9407 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9408 ;;Total ram usage:        1 bytes
  9409 ;; Hardware stack levels used:    1
  9410 ;; Hardware stack levels required when called:    2
  9411 ;; This function calls:
  9412 ;;		Nothing
  9413 ;; This function is called by:
  9414 ;;		_I2cSlv_MainTask
  9415 ;; This function uses a non-reentrant model
  9416 ;;
  9417                           
  9418                           
  9419                           ;psect for function _I2c_SetConfig
  9420  1719                     _I2c_SetConfig:	
  9421                           
  9422                           ;i2c_slv.c: 84: I2cConfig.I2cModuleMode = ((UINT8)(0b0110));
  9423                           
  9424                           ;incstack = 0
  9425                           ; Regs used in _I2c_SetConfig: [wreg+status,2]
  9426  1719  3006               	movlw	6
  9427  171A  00F4               	movwf	??_I2c_SetConfig
  9428  171B  0874               	movf	??_I2c_SetConfig,w
  9429  171C  0022               	movlb	2	; select bank2
  9430  171D  00D4               	movwf	_I2cConfig^(0+256)
  9431                           
  9432                           ;i2c_slv.c: 85: I2cConfig.I2cReceiverEnable = ((UINT8)(0));
  9433  171E  01D5               	clrf	(_I2cConfig^(0+256)+1)
  9434                           
  9435                           ;i2c_slv.c: 86: I2cConfig.EnableI2cModule = ((UINT8)(1));
  9436  171F  01D6               	clrf	(_I2cConfig^(0+256)+2)
  9437  1720  0AD6               	incf	(_I2cConfig^(0+256)+2),f
  9438                           
  9439                           ;i2c_slv.c: 87: I2cConfig.ClockStretchEnable = ((UINT8)(1));
  9440  1721  01D7               	clrf	(_I2cConfig^(0+256)+3)
  9441  1722  0AD7               	incf	(_I2cConfig^(0+256)+3),f
  9442                           
  9443                           ;i2c_slv.c: 88: I2cConfig.StopCondIntEnable = ((UINT8)(1));
  9444  1723  01D8               	clrf	(_I2cConfig^(0+256)+4)
  9445  1724  0AD8               	incf	(_I2cConfig^(0+256)+4),f
  9446                           
  9447                           ;i2c_slv.c: 89: I2cConfig.StartCondIntEnable = ((UINT8)(1));
  9448  1725  01D9               	clrf	(_I2cConfig^(0+256)+5)
  9449  1726  0AD9               	incf	(_I2cConfig^(0+256)+5),f
  9450                           
  9451                           ;i2c_slv.c: 90: I2cConfig.BufferOverwriteEnable = ((UINT8)(0));
  9452  1727  01DA               	clrf	(_I2cConfig^(0+256)+6)
  9453                           
  9454                           ;i2c_slv.c: 91: I2cConfig.BusCollisionDetectEnable = ((UINT8)(1));
  9455  1728  01DB               	clrf	(_I2cConfig^(0+256)+7)
  9456  1729  0ADB               	incf	(_I2cConfig^(0+256)+7),f
  9457                           
  9458                           ;i2c_slv.c: 92: I2cConfig.AddrHoldEnable = ((UINT8)(0));
  9459  172A  01DC               	clrf	(_I2cConfig^(0+256)+8)
  9460                           
  9461                           ;i2c_slv.c: 93: I2cConfig.DataHoldEnable = ((UINT8)(0));
  9462  172B  01DD               	clrf	(_I2cConfig^(0+256)+9)
  9463                           
  9464                           ;i2c_slv.c: 94: I2cConfig.GeneralCallEnable = ((UINT8)(1));
  9465  172C  01DE               	clrf	(_I2cConfig^(0+256)+10)
  9466  172D  0ADE               	incf	(_I2cConfig^(0+256)+10),f
  9467  172E  0008               	return
  9468  172F                     __end_of_I2c_SetConfig:	
  9469                           
  9470                           	psect	text31
  9471  04E5                     __ptext31:	
  9472 ;; *************** function _I2c_InitI2cModule *****************
  9473 ;; Defined at:
  9474 ;;		line 207 in file "../../../Framework/MercuryFwk/Source/c/01_Hal/02_Drv/i2c_slv_drv.c"
  9475 ;; Parameters:    Size  Location     Type
  9476 ;;  I2cConfig       1    wreg     PTR struct _I2cConfig
  9477 ;;		 -> I2cConfig(11), 
  9478 ;; Auto vars:     Size  Location     Type
  9479 ;;  I2cConfig       1    2[BANK0 ] PTR struct _I2cConfig
  9480 ;;		 -> I2cConfig(11), 
  9481 ;; Return value:  Size  Location     Type
  9482 ;;                  1    wreg      void 
  9483 ;; Registers used:
  9484 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9485 ;; Tracked objects:
  9486 ;;		On entry : 0/0
  9487 ;;		On exit  : 0/0
  9488 ;;		Unchanged: 0/0
  9489 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9490 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9491 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9492 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9493 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9494 ;;Total ram usage:        3 bytes
  9495 ;; Hardware stack levels used:    1
  9496 ;; Hardware stack levels required when called:    3
  9497 ;; This function calls:
  9498 ;;		_ClearRxBuffer
  9499 ;;		_ClearTxBuffer
  9500 ;; This function is called by:
  9501 ;;		_I2cSlv_MainTask
  9502 ;; This function uses a non-reentrant model
  9503 ;;
  9504                           
  9505                           
  9506                           ;psect for function _I2c_InitI2cModule
  9507  04E5                     _I2c_InitI2cModule:	
  9508                           
  9509                           ;incstack = 0
  9510                           ; Regs used in _I2c_InitI2cModule: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  9511                           ;I2c_InitI2cModule@I2cConfig stored from wreg
  9512  04E5  0020               	movlb	0	; select bank0
  9513  04E6  00A2               	movwf	I2c_InitI2cModule@I2cConfig
  9514                           
  9515                           ;i2c_slv_drv.c: 210: TRISCbits.TRISC1 = ((UINT8)(1));
  9516  04E7  0021               	movlb	1	; select bank1
  9517  04E8  148E               	bsf	14,1	;volatile
  9518                           
  9519                           ;i2c_slv_drv.c: 211: TRISCbits.TRISC0 = ((UINT8)(1));
  9520  04E9  140E               	bsf	14,0	;volatile
  9521                           
  9522                           ;i2c_slv_drv.c: 215: SSP1CON1 |= (I2cConfig->I2cModuleMode) << ((UINT8)(0));
  9523  04EA  0020               	movlb	0	; select bank0
  9524  04EB  0822               	movf	I2c_InitI2cModule@I2cConfig,w
  9525  04EC  0086               	movwf	6
  9526  04ED  3001               	movlw	1	; select bank2/3
  9527  04EE  0087               	movwf	7
  9528  04EF  0801               	movf	1,w
  9529  04F0  00A0               	movwf	??_I2c_InitI2cModule
  9530  04F1  0820               	movf	??_I2c_InitI2cModule,w
  9531  04F2  0024               	movlb	4	; select bank4
  9532  04F3  0495               	iorwf	21,f	;volatile
  9533                           
  9534                           ;i2c_slv_drv.c: 218: SSP1CON2 |= (I2cConfig->I2cReceiverEnable) << ((UINT8)(3));
  9535  04F4  0020               	movlb	0	; select bank0
  9536  04F5  0A22               	incf	I2c_InitI2cModule@I2cConfig,w
  9537  04F6  0086               	movwf	6
  9538  04F7  3001               	movlw	1	; select bank2/3
  9539  04F8  0087               	movwf	7
  9540  04F9  0801               	movf	1,w
  9541  04FA  00A0               	movwf	??_I2c_InitI2cModule
  9542  04FB  3002               	movlw	2
  9543  04FC                     u3915:	
  9544  04FC  35A0               	lslf	??_I2c_InitI2cModule,f
  9545  04FD  3EFF               	addlw	-1
  9546  04FE  1D03               	skipz
  9547  04FF  2CFC               	goto	u3915
  9548  0500  3520               	lslf	??_I2c_InitI2cModule,w
  9549  0501  00A1               	movwf	??_I2c_InitI2cModule+1
  9550  0502  0821               	movf	??_I2c_InitI2cModule+1,w
  9551  0503  0024               	movlb	4	; select bank4
  9552  0504  0496               	iorwf	22,f	;volatile
  9553                           
  9554                           ;i2c_slv_drv.c: 219: SSP1CON2 |= (I2cConfig->ClockStretchEnable) << ((UINT8)(0));
  9555  0505  0020               	movlb	0	; select bank0
  9556  0506  0822               	movf	I2c_InitI2cModule@I2cConfig,w
  9557  0507  3E03               	addlw	3
  9558  0508  0086               	movwf	6
  9559  0509  3001               	movlw	1	; select bank2/3
  9560  050A  0087               	movwf	7
  9561  050B  0801               	movf	1,w
  9562  050C  00A0               	movwf	??_I2c_InitI2cModule
  9563  050D  0820               	movf	??_I2c_InitI2cModule,w
  9564  050E  0024               	movlb	4	; select bank4
  9565  050F  0496               	iorwf	22,f	;volatile
  9566                           
  9567                           ;i2c_slv_drv.c: 220: SSP1CON2 |= (I2cConfig->GeneralCallEnable) << ((UINT8)(7));
  9568  0510  0020               	movlb	0	; select bank0
  9569  0511  0822               	movf	I2c_InitI2cModule@I2cConfig,w
  9570  0512  3E0A               	addlw	10
  9571  0513  0086               	movwf	6
  9572  0514  3001               	movlw	1	; select bank2/3
  9573  0515  0087               	movwf	7
  9574  0516  0801               	movf	1,w
  9575  0517  00A0               	movwf	??_I2c_InitI2cModule
  9576  0518  3006               	movlw	6
  9577  0519                     u3925:	
  9578  0519  35A0               	lslf	??_I2c_InitI2cModule,f
  9579  051A  3EFF               	addlw	-1
  9580  051B  1D03               	skipz
  9581  051C  2D19               	goto	u3925
  9582  051D  3520               	lslf	??_I2c_InitI2cModule,w
  9583  051E  00A1               	movwf	??_I2c_InitI2cModule+1
  9584  051F  0821               	movf	??_I2c_InitI2cModule+1,w
  9585  0520  0024               	movlb	4	; select bank4
  9586  0521  0496               	iorwf	22,f	;volatile
  9587                           
  9588                           ;i2c_slv_drv.c: 223: SSP1CON3 |= (I2cConfig->StopCondIntEnable) << ((UINT8)(6));
  9589  0522  0020               	movlb	0	; select bank0
  9590  0523  0822               	movf	I2c_InitI2cModule@I2cConfig,w
  9591  0524  3E04               	addlw	4
  9592  0525  0086               	movwf	6
  9593  0526  3001               	movlw	1	; select bank2/3
  9594  0527  0087               	movwf	7
  9595  0528  0801               	movf	1,w
  9596  0529  00A0               	movwf	??_I2c_InitI2cModule
  9597  052A  3005               	movlw	5
  9598  052B                     u3935:	
  9599  052B  35A0               	lslf	??_I2c_InitI2cModule,f
  9600  052C  3EFF               	addlw	-1
  9601  052D  1D03               	skipz
  9602  052E  2D2B               	goto	u3935
  9603  052F  3520               	lslf	??_I2c_InitI2cModule,w
  9604  0530  00A1               	movwf	??_I2c_InitI2cModule+1
  9605  0531  0821               	movf	??_I2c_InitI2cModule+1,w
  9606  0532  0024               	movlb	4	; select bank4
  9607  0533  0497               	iorwf	23,f	;volatile
  9608                           
  9609                           ;i2c_slv_drv.c: 224: SSP1CON3 |= (I2cConfig->StartCondIntEnable) << ((UINT8)(5));
  9610  0534  0020               	movlb	0	; select bank0
  9611  0535  0822               	movf	I2c_InitI2cModule@I2cConfig,w
  9612  0536  3E05               	addlw	5
  9613  0537  0086               	movwf	6
  9614  0538  3001               	movlw	1	; select bank2/3
  9615  0539  0087               	movwf	7
  9616  053A  0801               	movf	1,w
  9617  053B  00A0               	movwf	??_I2c_InitI2cModule
  9618  053C  3004               	movlw	4
  9619  053D                     u3945:	
  9620  053D  35A0               	lslf	??_I2c_InitI2cModule,f
  9621  053E  3EFF               	addlw	-1
  9622  053F  1D03               	skipz
  9623  0540  2D3D               	goto	u3945
  9624  0541  3520               	lslf	??_I2c_InitI2cModule,w
  9625  0542  00A1               	movwf	??_I2c_InitI2cModule+1
  9626  0543  0821               	movf	??_I2c_InitI2cModule+1,w
  9627  0544  0024               	movlb	4	; select bank4
  9628  0545  0497               	iorwf	23,f	;volatile
  9629                           
  9630                           ;i2c_slv_drv.c: 225: SSP1CON3 |= (I2cConfig->BufferOverwriteEnable) << ((UINT8)(4));
  9631  0546  0020               	movlb	0	; select bank0
  9632  0547  0822               	movf	I2c_InitI2cModule@I2cConfig,w
  9633  0548  3E06               	addlw	6
  9634  0549  0086               	movwf	6
  9635  054A  3001               	movlw	1	; select bank2/3
  9636  054B  0087               	movwf	7
  9637  054C  0801               	movf	1,w
  9638  054D  00A0               	movwf	??_I2c_InitI2cModule
  9639  054E  3003               	movlw	3
  9640  054F                     u3955:	
  9641  054F  35A0               	lslf	??_I2c_InitI2cModule,f
  9642  0550  3EFF               	addlw	-1
  9643  0551  1D03               	skipz
  9644  0552  2D4F               	goto	u3955
  9645  0553  3520               	lslf	??_I2c_InitI2cModule,w
  9646  0554  00A1               	movwf	??_I2c_InitI2cModule+1
  9647  0555  0821               	movf	??_I2c_InitI2cModule+1,w
  9648  0556  0024               	movlb	4	; select bank4
  9649  0557  0497               	iorwf	23,f	;volatile
  9650                           
  9651                           ;i2c_slv_drv.c: 226: SSP1CON3 |= (I2cConfig->BusCollisionDetectEnable) << ((UINT8)(2));
  9652  0558  0020               	movlb	0	; select bank0
  9653  0559  0822               	movf	I2c_InitI2cModule@I2cConfig,w
  9654  055A  3E07               	addlw	7
  9655  055B  0086               	movwf	6
  9656  055C  3001               	movlw	1	; select bank2/3
  9657  055D  0087               	movwf	7
  9658  055E  0801               	movf	1,w
  9659  055F  00A0               	movwf	??_I2c_InitI2cModule
  9660  0560  3001               	movlw	1
  9661  0561                     u3965:	
  9662  0561  35A0               	lslf	??_I2c_InitI2cModule,f
  9663  0562  3EFF               	addlw	-1
  9664  0563  1D03               	skipz
  9665  0564  2D61               	goto	u3965
  9666  0565  3520               	lslf	??_I2c_InitI2cModule,w
  9667  0566  00A1               	movwf	??_I2c_InitI2cModule+1
  9668  0567  0821               	movf	??_I2c_InitI2cModule+1,w
  9669  0568  0024               	movlb	4	; select bank4
  9670  0569  0497               	iorwf	23,f	;volatile
  9671                           
  9672                           ;i2c_slv_drv.c: 227: SSP1CON3 |= (I2cConfig->AddrHoldEnable) << ((UINT8)(1));
  9673  056A  0020               	movlb	0	; select bank0
  9674  056B  0822               	movf	I2c_InitI2cModule@I2cConfig,w
  9675  056C  3E08               	addlw	8
  9676  056D  0086               	movwf	6
  9677  056E  3001               	movlw	1	; select bank2/3
  9678  056F  0087               	movwf	7
  9679  0570  3501               	lslf	1,w
  9680  0571  00A0               	movwf	??_I2c_InitI2cModule
  9681  0572  0820               	movf	??_I2c_InitI2cModule,w
  9682  0573  0024               	movlb	4	; select bank4
  9683  0574  0497               	iorwf	23,f	;volatile
  9684                           
  9685                           ;i2c_slv_drv.c: 228: SSP1CON3 |= (I2cConfig->DataHoldEnable) << ((UINT8)(0));
  9686  0575  0020               	movlb	0	; select bank0
  9687  0576  0822               	movf	I2c_InitI2cModule@I2cConfig,w
  9688  0577  3E09               	addlw	9
  9689  0578  0086               	movwf	6
  9690  0579  3001               	movlw	1	; select bank2/3
  9691  057A  0087               	movwf	7
  9692  057B  0801               	movf	1,w
  9693  057C  00A0               	movwf	??_I2c_InitI2cModule
  9694  057D  0820               	movf	??_I2c_InitI2cModule,w
  9695  057E  0024               	movlb	4	; select bank4
  9696  057F  0497               	iorwf	23,f	;volatile
  9697                           
  9698                           ;i2c_slv_drv.c: 231: SSP1CON1 |= (I2cConfig->EnableI2cModule) << ((UINT8)(5));
  9699  0580  0020               	movlb	0	; select bank0
  9700  0581  0822               	movf	I2c_InitI2cModule@I2cConfig,w
  9701  0582  3E02               	addlw	2
  9702  0583  0086               	movwf	6
  9703  0584  3001               	movlw	1	; select bank2/3
  9704  0585  0087               	movwf	7
  9705  0586  0801               	movf	1,w
  9706  0587  00A0               	movwf	??_I2c_InitI2cModule
  9707  0588  3004               	movlw	4
  9708  0589                     u3975:	
  9709  0589  35A0               	lslf	??_I2c_InitI2cModule,f
  9710  058A  3EFF               	addlw	-1
  9711  058B  1D03               	skipz
  9712  058C  2D89               	goto	u3975
  9713  058D  3520               	lslf	??_I2c_InitI2cModule,w
  9714  058E  00A1               	movwf	??_I2c_InitI2cModule+1
  9715  058F  0821               	movf	??_I2c_InitI2cModule+1,w
  9716  0590  0024               	movlb	4	; select bank4
  9717  0591  0495               	iorwf	21,f	;volatile
  9718                           
  9719                           ;i2c_slv_drv.c: 234: PIR1bits.SSP1IF = ((UINT8)(0));
  9720  0592  0020               	movlb	0	; select bank0
  9721  0593  1191               	bcf	17,3	;volatile
  9722                           
  9723                           ;i2c_slv_drv.c: 235: PIE1bits.SSP1IE = ((UINT8)(1));
  9724  0594  0021               	movlb	1	; select bank1
  9725  0595  1591               	bsf	17,3	;volatile
  9726                           
  9727                           ;i2c_slv_drv.c: 238: ClearRxBuffer();
  9728  0596  3196  2697  3184   	fcall	_ClearRxBuffer
  9729                           
  9730                           ;i2c_slv_drv.c: 239: ClearTxBuffer();
  9731  0599  3196  26A7         	fcall	_ClearTxBuffer
  9732  059B  0008               	return
  9733  059C                     __end_of_I2c_InitI2cModule:	
  9734                           
  9735                           	psect	text32
  9736  16A7                     __ptext32:	
  9737 ;; *************** function _ClearTxBuffer *****************
  9738 ;; Defined at:
  9739 ;;		line 184 in file "../../../Framework/MercuryFwk/Source/c/01_Hal/02_Drv/i2c_slv_drv.c"
  9740 ;; Parameters:    Size  Location     Type
  9741 ;;		None
  9742 ;; Auto vars:     Size  Location     Type
  9743 ;;  Index           1    5[COMMON] unsigned char 
  9744 ;; Return value:  Size  Location     Type
  9745 ;;                  1    wreg      void 
  9746 ;; Registers used:
  9747 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  9748 ;; Tracked objects:
  9749 ;;		On entry : 0/0
  9750 ;;		On exit  : 0/0
  9751 ;;		Unchanged: 0/0
  9752 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9753 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9754 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9755 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9756 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9757 ;;Total ram usage:        2 bytes
  9758 ;; Hardware stack levels used:    1
  9759 ;; Hardware stack levels required when called:    2
  9760 ;; This function calls:
  9761 ;;		Nothing
  9762 ;; This function is called by:
  9763 ;;		_I2c_InitI2cModule
  9764 ;;		_I2c_DataReceiveSm
  9765 ;; This function uses a non-reentrant model
  9766 ;;
  9767                           
  9768                           
  9769                           ;psect for function _ClearTxBuffer
  9770  16A7                     _ClearTxBuffer:	
  9771                           
  9772                           ;i2c_slv_drv.c: 186: UINT8 Index;
  9773                           ;i2c_slv_drv.c: 189: for (Index = 0; Index < ((UINT8)(80)); Index++)
  9774                           
  9775                           ;incstack = 0
  9776                           ; Regs used in _ClearTxBuffer: [wreg+fsr1l+fsr1h+status,2+status,0]
  9777  16A7  01F5               	clrf	ClearTxBuffer@Index
  9778  16A8                     L9:	
  9779  16A8  3050               	movlw	80
  9780  16A9  0275               	subwf	ClearTxBuffer@Index,w
  9781  16AA  1803               	btfsc	3,0
  9782  16AB  0008               	return
  9783                           
  9784                           ;i2c_slv_drv.c: 190: {
  9785                           ;i2c_slv_drv.c: 191: I2cTxBuffer[Index] = 0x00;
  9786  16AC  0875               	movf	ClearTxBuffer@Index,w
  9787  16AD  3E20               	addlw	(low (_I2cTxBuffer| (0+768)))& (0+255)
  9788  16AE  0086               	movwf	6
  9789  16AF  3003               	movlw	3	; select bank6/7
  9790  16B0  0087               	movwf	7
  9791  16B1  0181               	clrf	1
  9792  16B2  3001               	movlw	1
  9793  16B3  00F4               	movwf	??_ClearTxBuffer
  9794  16B4  0874               	movf	??_ClearTxBuffer,w
  9795  16B5  07F5               	addwf	ClearTxBuffer@Index,f
  9796  16B6  2EA8               	goto	L9
  9797  16B7                     __end_of_ClearTxBuffer:	
  9798                           
  9799                           	psect	text33
  9800  1697                     __ptext33:	
  9801 ;; *************** function _ClearRxBuffer *****************
  9802 ;; Defined at:
  9803 ;;		line 165 in file "../../../Framework/MercuryFwk/Source/c/01_Hal/02_Drv/i2c_slv_drv.c"
  9804 ;; Parameters:    Size  Location     Type
  9805 ;;		None
  9806 ;; Auto vars:     Size  Location     Type
  9807 ;;  Index           1    5[COMMON] unsigned char 
  9808 ;; Return value:  Size  Location     Type
  9809 ;;                  1    wreg      void 
  9810 ;; Registers used:
  9811 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  9812 ;; Tracked objects:
  9813 ;;		On entry : 0/0
  9814 ;;		On exit  : 0/0
  9815 ;;		Unchanged: 0/0
  9816 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9817 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9818 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9819 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9820 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9821 ;;Total ram usage:        2 bytes
  9822 ;; Hardware stack levels used:    1
  9823 ;; Hardware stack levels required when called:    2
  9824 ;; This function calls:
  9825 ;;		Nothing
  9826 ;; This function is called by:
  9827 ;;		_I2c_InitI2cModule
  9828 ;;		_I2c_DataReceiveSm
  9829 ;; This function uses a non-reentrant model
  9830 ;;
  9831                           
  9832                           
  9833                           ;psect for function _ClearRxBuffer
  9834  1697                     _ClearRxBuffer:	
  9835                           
  9836                           ;i2c_slv_drv.c: 167: UINT8 Index;
  9837                           ;i2c_slv_drv.c: 170: for (Index = 0; Index < ((UINT8)(80)); Index++)
  9838                           
  9839                           ;incstack = 0
  9840                           ; Regs used in _ClearRxBuffer: [wreg+fsr1l+fsr1h+status,2+status,0]
  9841  1697  01F5               	clrf	ClearRxBuffer@Index
  9842  1698                     L10:	
  9843  1698  3050               	movlw	80
  9844  1699  0275               	subwf	ClearRxBuffer@Index,w
  9845  169A  1803               	btfsc	3,0
  9846  169B  0008               	return
  9847                           
  9848                           ;i2c_slv_drv.c: 171: {
  9849                           ;i2c_slv_drv.c: 172: I2cRxBuffer[Index] = 0x00;
  9850  169C  0875               	movf	ClearRxBuffer@Index,w
  9851  169D  3EA0               	addlw	(low (_I2cRxBuffer| (0+768)))& (0+255)
  9852  169E  0086               	movwf	6
  9853  169F  3003               	movlw	3	; select bank7/8
  9854  16A0  0087               	movwf	7
  9855  16A1  0181               	clrf	1
  9856  16A2  3001               	movlw	1
  9857  16A3  00F4               	movwf	??_ClearRxBuffer
  9858  16A4  0874               	movf	??_ClearRxBuffer,w
  9859  16A5  07F5               	addwf	ClearRxBuffer@Index,f
  9860  16A6  2E98               	goto	L10
  9861  16A7                     __end_of_ClearRxBuffer:	
  9862                           
  9863                           	psect	text34
  9864  0ED1                     __ptext34:	
  9865 ;; *************** function _I2cSlv_I2cDrvHandle *****************
  9866 ;; Defined at:
  9867 ;;		line 141 in file "../../../Framework/MercuryFwk/Source/c/03_Sml/01_Pml/01_SlvI2c/i2c_slv.c"
  9868 ;; Parameters:    Size  Location     Type
  9869 ;;		None
  9870 ;; Auto vars:     Size  Location     Type
  9871 ;;  Index           1    9[BANK0 ] unsigned char 
  9872 ;; Return value:  Size  Location     Type
  9873 ;;                  1    wreg      void 
  9874 ;; Registers used:
  9875 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9876 ;; Tracked objects:
  9877 ;;		On entry : 0/0
  9878 ;;		On exit  : 0/0
  9879 ;;		Unchanged: 0/0
  9880 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9881 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9882 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9883 ;;      Temps:          0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9884 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9885 ;;Total ram usage:        6 bytes
  9886 ;; Hardware stack levels used:    1
  9887 ;; Hardware stack levels required when called:    3
  9888 ;; This function calls:
  9889 ;;		_GenerateEvt
  9890 ;;		_I2c_SetI2cAddress
  9891 ;;		_I2c_SetI2cAddressMask
  9892 ;;		_I2c_UpdateTxBuffer
  9893 ;;		_Led_SetLedStatus
  9894 ;;		_ReceiveEvt
  9895 ;; This function is called by:
  9896 ;;		_I2cSlv_MainTask
  9897 ;; This function uses a non-reentrant model
  9898 ;;
  9899                           
  9900                           
  9901                           ;psect for function _I2cSlv_I2cDrvHandle
  9902  0ED1                     _I2cSlv_I2cDrvHandle:	
  9903                           
  9904                           ;i2c_slv.c: 143: static I2cReceiveMsgStateType I2cReceiveMsgState = I2cSetSlaveAddres;
  9905                           ;i2c_slv.c: 144: UINT8 Index = 0;
  9906                           
  9907                           ;incstack = 0
  9908                           ; Regs used in _I2cSlv_I2cDrvHandle: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  9909  0ED1  0020               	movlb	0	; select bank0
  9910  0ED2  01A9               	clrf	I2cSlv_I2cDrvHandle@Index
  9911                           
  9912                           ;i2c_slv.c: 146: switch (I2cReceiveMsgState)
  9913  0ED3  2F57               	goto	l4866
  9914  0ED4                     l4824:	
  9915                           ;i2c_slv.c: 147: {
  9916                           ;i2c_slv.c: 148: case I2cSetSlaveAddres:
  9917                           
  9918                           
  9919                           ;i2c_slv.c: 150: if (ReceiveEvt(&I2cSetAddress))
  9920  0ED4  30E1               	movlw	(low (_I2cSetAddress| 0))& (0+255)
  9921  0ED5  3188  203C  318E   	fcall	_ReceiveEvt
  9922  0ED8  3A00               	xorlw	0
  9923  0ED9  1903               	skipnz
  9924  0EDA  0008               	return
  9925                           
  9926                           ;i2c_slv.c: 151: {
  9927                           ;i2c_slv.c: 153: I2c_SetI2cAddress(I2cSlaveAddress);
  9928  0EDB  0021               	movlb	1	; select bank1
  9929  0EDC  083F               	movf	_I2cSlaveAddress^(0+128),w
  9930  0EDD  3195  25D8  318E   	fcall	_I2c_SetI2cAddress
  9931                           
  9932                           ;i2c_slv.c: 154: I2c_SetI2cAddressMask(((UINT8)(0x7F)));
  9933  0EE0  307F               	movlw	127
  9934  0EE1  3187  27FB         	fcall	_I2c_SetI2cAddressMask
  9935                           
  9936                           ;i2c_slv.c: 156: I2cReceiveMsgState = I2cReceiveData;
  9937  0EE3  0021               	movlb	1	; select bank1
  9938  0EE4  01BE               	clrf	I2cSlv_I2cDrvHandle@I2cReceiveMsgState^(0+128)
  9939  0EE5  0ABE               	incf	I2cSlv_I2cDrvHandle@I2cReceiveMsgState^(0+128),f
  9940                           
  9941                           ;i2c_slv.c: 157: }
  9942                           ;i2c_slv.c: 158: break;
  9943  0EE6  0008               	return
  9944  0EE7                     l4830:	
  9945                           ;i2c_slv.c: 160: case I2cReceiveData:
  9946                           
  9947                           
  9948                           ;i2c_slv.c: 162: if (ReceiveEvt(&I2cNewPacketNotification))
  9949  0EE7  30E5               	movlw	(low (_I2cNewPacketNotification| 0))& (0+255)
  9950  0EE8  3188  203C  318E   	fcall	_ReceiveEvt
  9951  0EEB  3A00               	xorlw	0
  9952  0EEC  1903               	skipnz
  9953  0EED  2F3A               	goto	l4856
  9954                           
  9955                           ;i2c_slv.c: 163: {
  9956                           ;i2c_slv.c: 165: if ((I2cPacket.SlaveAddress == I2cSlaveAddress) || (I2cPacket.SlaveAddr
      +                          ess == ((UINT8)(0x00))))
  9957  0EEE  309D               	movlw	157
  9958  0EEF  0086               	movwf	6
  9959  0EF0  3023               	movlw	35
  9960  0EF1  0087               	movwf	7
  9961  0EF2  0801               	movf	1,w
  9962  0EF3  0021               	movlb	1	; select bank1
  9963  0EF4  063F               	xorwf	_I2cSlaveAddress^(0+128),w
  9964  0EF5  1903               	skipnz
  9965  0EF6  2EFE               	goto	l4836
  9966  0EF7  309D               	movlw	157
  9967  0EF8  0086               	movwf	6
  9968  0EF9  3023               	movlw	35
  9969  0EFA  0087               	movwf	7
  9970  0EFB  0801               	movf	1,w
  9971  0EFC  1D03               	btfss	3,2
  9972  0EFD  0008               	return
  9973  0EFE                     l4836:	
  9974                           
  9975                           ;i2c_slv.c: 166: {
  9976                           ;i2c_slv.c: 167: if (I2cPacket.ReadWrite == ((UINT8)(0)))
  9977  0EFE  309D               	movlw	157
  9978  0EFF  0086               	movwf	6
  9979  0F00  3023               	movlw	35
  9980  0F01  0087               	movwf	7
  9981  0F02  3141               	addfsr 1,1
  9982  0F03  0801               	movf	1,w
  9983  0F04  1D03               	btfss	3,2
  9984  0F05  0008               	return
  9985                           
  9986                           ;i2c_slv.c: 168: {
  9987                           ;i2c_slv.c: 170: for (Index = 0; Index < ((UINT8)(80));Index++)
  9988  0F06  0020               	movlb	0	; select bank0
  9989  0F07  01A9               	clrf	I2cSlv_I2cDrvHandle@Index
  9990  0F08  3050               	movlw	80
  9991  0F09  0229               	subwf	I2cSlv_I2cDrvHandle@Index,w
  9992  0F0A  1803               	btfsc	3,0
  9993  0F0B  2F2A               	goto	l4850
  9994  0F0C                     l4844:	
  9995                           
  9996                           ;i2c_slv.c: 171: {
  9997                           ;i2c_slv.c: 172: CmdBuffer[Index] = I2cPacket.Buffer[Index];
  9998  0F0C  0829               	movf	I2cSlv_I2cDrvHandle@Index,w
  9999  0F0D  00A4               	movwf	??_I2cSlv_I2cDrvHandle
 10000  0F0E  01A5               	clrf	??_I2cSlv_I2cDrvHandle+1
 10001  0F0F  309F               	movlw	159
 10002  0F10  00A6               	movwf	??_I2cSlv_I2cDrvHandle+2
 10003  0F11  3023               	movlw	35
 10004  0F12  00A7               	movwf	??_I2cSlv_I2cDrvHandle+3
 10005  0F13  0824               	movf	??_I2cSlv_I2cDrvHandle,w
 10006  0F14  0726               	addwf	??_I2cSlv_I2cDrvHandle+2,w
 10007  0F15  0086               	movwf	6
 10008  0F16  0825               	movf	??_I2cSlv_I2cDrvHandle+1,w
 10009  0F17  3D27               	addwfc	??_I2cSlv_I2cDrvHandle+3,w
 10010  0F18  0087               	movwf	7
 10011  0F19  0801               	movf	1,w
 10012  0F1A  00A8               	movwf	??_I2cSlv_I2cDrvHandle+4
 10013  0F1B  0829               	movf	I2cSlv_I2cDrvHandle@Index,w
 10014  0F1C  3EA0               	addlw	(low (_CmdBuffer| (0+512)))& (0+255)
 10015  0F1D  0086               	movwf	6
 10016  0F1E  3002               	movlw	2	; select bank5/6
 10017  0F1F  0087               	movwf	7
 10018  0F20  0828               	movf	??_I2cSlv_I2cDrvHandle+4,w
 10019  0F21  0081               	movwf	1
 10020  0F22  3001               	movlw	1
 10021  0F23  00A4               	movwf	??_I2cSlv_I2cDrvHandle
 10022  0F24  0824               	movf	??_I2cSlv_I2cDrvHandle,w
 10023  0F25  07A9               	addwf	I2cSlv_I2cDrvHandle@Index,f
 10024  0F26  3050               	movlw	80
 10025  0F27  0229               	subwf	I2cSlv_I2cDrvHandle@Index,w
 10026  0F28  1C03               	skipc
 10027  0F29  2F0C               	goto	l4844
 10028  0F2A                     l4850:	
 10029                           
 10030                           ;i2c_slv.c: 173: }
 10031                           ;i2c_slv.c: 175: GenerateEvt(&I2cWriteRequest);
 10032  0F2A  30DF               	movlw	(low (_I2cWriteRequest| 0))& (0+255)
 10033  0F2B  3188  207E  318E   	fcall	_GenerateEvt
 10034                           
 10035                           ;i2c_slv.c: 177: if (LedBehaviourSts == ((UINT8)(1)))
 10036  0F2E  0379               	decf	_LedBehaviourSts,w
 10037  0F2F  1D03               	btfss	3,2
 10038  0F30  0008               	return
 10039                           
 10040                           ;i2c_slv.c: 178: {
 10041                           ;i2c_slv.c: 179: Led_SetLedStatus(1u, LED_STS_PULSE);
 10042  0F31  3003               	movlw	3
 10043  0F32  0020               	movlb	0	; select bank0
 10044  0F33  00A4               	movwf	??_I2cSlv_I2cDrvHandle
 10045  0F34  0824               	movf	??_I2cSlv_I2cDrvHandle,w
 10046  0F35  00F4               	movwf	Led_SetLedStatus@LedSts
 10047  0F36  3001               	movlw	1
 10048  0F37  3196  2667         	fcall	_Led_SetLedStatus
 10049                           
 10050                           ;i2c_slv.c: 180: }
 10051                           ;i2c_slv.c: 181: }
 10052                           ;i2c_slv.c: 182: }
 10053                           ;i2c_slv.c: 183: }
 10054  0F39  0008               	return
 10055  0F3A                     l4856:	
 10056                           
 10057                           ;i2c_slv.c: 185: else if (ReceiveEvt(&I2cReplyPacketReady))
 10058  0F3A  3077               	movlw	(low (_I2cReplyPacketReady| 0))& (0+255)
 10059  0F3B  3188  203C  318E   	fcall	_ReceiveEvt
 10060  0F3E  3A00               	xorlw	0
 10061  0F3F  1903               	skipnz
 10062  0F40  0008               	return
 10063                           
 10064                           ;i2c_slv.c: 186: {
 10065                           ;i2c_slv.c: 188: I2c_UpdateTxBuffer(RepBuffer,RepBufferLen);
 10066  0F41  0021               	movlb	1	; select bank1
 10067  0F42  0840               	movf	_RepBufferLen^(0+128),w
 10068  0F43  0020               	movlb	0	; select bank0
 10069  0F44  00A4               	movwf	??_I2cSlv_I2cDrvHandle
 10070  0F45  0824               	movf	??_I2cSlv_I2cDrvHandle,w
 10071  0F46  00F4               	movwf	I2c_UpdateTxBuffer@Length
 10072  0F47  3020               	movlw	(low (_RepBuffer| (0+512)))& (0+255)
 10073  0F48  3197  27C5  318E   	fcall	_I2c_UpdateTxBuffer
 10074                           
 10075                           ;i2c_slv.c: 190: if (LedBehaviourSts == ((UINT8)(1)))
 10076  0F4B  0379               	decf	_LedBehaviourSts,w
 10077  0F4C  1D03               	btfss	3,2
 10078  0F4D  0008               	return
 10079                           
 10080                           ;i2c_slv.c: 191: {
 10081                           ;i2c_slv.c: 192: Led_SetLedStatus(1u, LED_STS_PULSE);
 10082  0F4E  3003               	movlw	3
 10083  0F4F  0020               	movlb	0	; select bank0
 10084  0F50  00A4               	movwf	??_I2cSlv_I2cDrvHandle
 10085  0F51  0824               	movf	??_I2cSlv_I2cDrvHandle,w
 10086  0F52  00F4               	movwf	Led_SetLedStatus@LedSts
 10087  0F53  3001               	movlw	1
 10088  0F54  3196  2667         	fcall	_Led_SetLedStatus
 10089                           
 10090                           ;i2c_slv.c: 199: }
 10091                           
 10092                           ;i2c_slv.c: 198: break;
 10093                           
 10094                           ;i2c_slv.c: 197: default:
 10095                           
 10096                           ;i2c_slv.c: 193: }
 10097                           ;i2c_slv.c: 194: }
 10098                           ;i2c_slv.c: 195: break;
 10099  0F56  0008               	return
 10100  0F57                     l4866:	
 10101  0F57  0021               	movlb	1	; select bank1
 10102  0F58  083E               	movf	I2cSlv_I2cDrvHandle@I2cReceiveMsgState^(0+128),w
 10103                           
 10104                           ; Switch size 1, requested type "space"
 10105                           ; Number of cases is 2, Range of values is 0 to 1
 10106                           ; switch strategies available:
 10107                           ; Name         Instructions Cycles
 10108                           ; simple_byte            7     4 (average)
 10109                           ; direct_byte           10     6 (fixed)
 10110                           ; jumptable            260     6 (fixed)
 10111                           ;	Chosen strategy is simple_byte
 10112  0F59  3A00               	xorlw	0	; case 0
 10113  0F5A  1903               	skipnz
 10114  0F5B  2ED4               	goto	l4824
 10115  0F5C  3A01               	xorlw	1	; case 1
 10116  0F5D  1903               	skipnz
 10117  0F5E  2EE7               	goto	l4830
 10118  0F5F  2F60               	goto	l616
 10119  0F60                     l616:	
 10120  0F60  0008               	return
 10121  0F61                     __end_of_I2cSlv_I2cDrvHandle:	
 10122                           
 10123                           	psect	text35
 10124  17C5                     __ptext35:	
 10125 ;; *************** function _I2c_UpdateTxBuffer *****************
 10126 ;; Defined at:
 10127 ;;		line 279 in file "../../../Framework/MercuryFwk/Source/c/01_Hal/02_Drv/i2c_slv_drv.c"
 10128 ;; Parameters:    Size  Location     Type
 10129 ;;  DataBuffer      1    wreg     PTR unsigned char 
 10130 ;;		 -> RepBuffer(80), 
 10131 ;;  Length          1    4[COMMON] unsigned char 
 10132 ;; Auto vars:     Size  Location     Type
 10133 ;;  DataBuffer      1    2[BANK0 ] PTR unsigned char 
 10134 ;;		 -> RepBuffer(80), 
 10135 ;;  Index           1    3[BANK0 ] unsigned char 
 10136 ;; Return value:  Size  Location     Type
 10137 ;;                  1    wreg      void 
 10138 ;; Registers used:
 10139 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 10140 ;; Tracked objects:
 10141 ;;		On entry : 0/0
 10142 ;;		On exit  : 0/0
 10143 ;;		Unchanged: 0/0
 10144 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10145 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10146 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10147 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10148 ;;      Totals:         1       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10149 ;;Total ram usage:        5 bytes
 10150 ;; Hardware stack levels used:    1
 10151 ;; Hardware stack levels required when called:    2
 10152 ;; This function calls:
 10153 ;;		Nothing
 10154 ;; This function is called by:
 10155 ;;		_I2cSlv_I2cDrvHandle
 10156 ;; This function uses a non-reentrant model
 10157 ;;
 10158                           
 10159                           
 10160                           ;psect for function _I2c_UpdateTxBuffer
 10161  17C5                     _I2c_UpdateTxBuffer:	
 10162                           
 10163                           ;incstack = 0
 10164                           ; Regs used in _I2c_UpdateTxBuffer: [wreg+fsr1l+fsr1h+status,2+status,0]
 10165                           ;I2c_UpdateTxBuffer@DataBuffer stored from wreg
 10166  17C5  0020               	movlb	0	; select bank0
 10167  17C6  00A2               	movwf	I2c_UpdateTxBuffer@DataBuffer
 10168                           
 10169                           ;i2c_slv_drv.c: 281: UINT8 Index = 0;
 10170  17C7  01A3               	clrf	I2c_UpdateTxBuffer@Index
 10171                           
 10172                           ;i2c_slv_drv.c: 284: for (Index = 0; Index < Length; Index++)
 10173  17C8  01A3               	clrf	I2c_UpdateTxBuffer@Index
 10174  17C9                     l4564:	
 10175  17C9  0874               	movf	I2c_UpdateTxBuffer@Length,w
 10176  17CA  0223               	subwf	I2c_UpdateTxBuffer@Index,w
 10177  17CB  1803               	btfsc	3,0
 10178  17CC  0008               	return
 10179                           
 10180                           ;i2c_slv_drv.c: 285: {
 10181                           ;i2c_slv_drv.c: 286: I2cTxBuffer[Index] = *(DataBuffer + Index);
 10182  17CD  0823               	movf	I2c_UpdateTxBuffer@Index,w
 10183  17CE  0722               	addwf	I2c_UpdateTxBuffer@DataBuffer,w
 10184  17CF  00A0               	movwf	??_I2c_UpdateTxBuffer
 10185  17D0  0820               	movf	??_I2c_UpdateTxBuffer,w
 10186  17D1  0086               	movwf	6
 10187  17D2  3002               	movlw	2	; select bank4/5
 10188  17D3  0087               	movwf	7
 10189  17D4  0801               	movf	1,w
 10190  17D5  00A1               	movwf	??_I2c_UpdateTxBuffer+1
 10191  17D6  0823               	movf	I2c_UpdateTxBuffer@Index,w
 10192  17D7  3E20               	addlw	(low (_I2cTxBuffer| (0+768)))& (0+255)
 10193  17D8  0086               	movwf	6
 10194  17D9  3003               	movlw	3	; select bank6/7
 10195  17DA  0087               	movwf	7
 10196  17DB  0821               	movf	??_I2c_UpdateTxBuffer+1,w
 10197  17DC  0081               	movwf	1
 10198  17DD  3001               	movlw	1
 10199  17DE  00A0               	movwf	??_I2c_UpdateTxBuffer
 10200  17DF  0820               	movf	??_I2c_UpdateTxBuffer,w
 10201  17E0  07A3               	addwf	I2c_UpdateTxBuffer@Index,f
 10202  17E1  2FC9               	goto	l4564
 10203  17E2                     __end_of_I2c_UpdateTxBuffer:	
 10204                           
 10205                           	psect	text36
 10206  07FB                     __ptext36:	
 10207 ;; *************** function _I2c_SetI2cAddressMask *****************
 10208 ;; Defined at:
 10209 ;;		line 264 in file "../../../Framework/MercuryFwk/Source/c/01_Hal/02_Drv/i2c_slv_drv.c"
 10210 ;; Parameters:    Size  Location     Type
 10211 ;;  SlaveAddress    1    wreg     unsigned char 
 10212 ;; Auto vars:     Size  Location     Type
 10213 ;;  SlaveAddress    1    4[COMMON] unsigned char 
 10214 ;; Return value:  Size  Location     Type
 10215 ;;                  1    wreg      void 
 10216 ;; Registers used:
 10217 ;;		wreg, status,2, status,0
 10218 ;; Tracked objects:
 10219 ;;		On entry : 0/0
 10220 ;;		On exit  : 0/0
 10221 ;;		Unchanged: 0/0
 10222 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10223 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10224 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10225 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10226 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10227 ;;Total ram usage:        1 bytes
 10228 ;; Hardware stack levels used:    1
 10229 ;; Hardware stack levels required when called:    2
 10230 ;; This function calls:
 10231 ;;		Nothing
 10232 ;; This function is called by:
 10233 ;;		_I2cSlv_I2cDrvHandle
 10234 ;; This function uses a non-reentrant model
 10235 ;;
 10236                           
 10237                           
 10238                           ;psect for function _I2c_SetI2cAddressMask
 10239  07FB                     _I2c_SetI2cAddressMask:	
 10240                           
 10241                           ;incstack = 0
 10242                           ; Regs used in _I2c_SetI2cAddressMask: [wreg+status,2+status,0]
 10243                           ;I2c_SetI2cAddressMask@SlaveAddressMask stored from wreg
 10244  07FB  00F4               	movwf	I2c_SetI2cAddressMask@SlaveAddressMask
 10245                           
 10246                           ;i2c_slv_drv.c: 267: SSP1MSK = (SlaveAddressMask << ((UINT8)(1)));
 10247  07FC  3574               	lslf	I2c_SetI2cAddressMask@SlaveAddressMask,w
 10248  07FD  0024               	movlb	4	; select bank4
 10249  07FE  0093               	movwf	19	;volatile
 10250  07FF  0008               	return
 10251  0800                     __end_of_I2c_SetI2cAddressMask:	
 10252                           
 10253                           	psect	text37
 10254  15D8                     __ptext37:	
 10255 ;; *************** function _I2c_SetI2cAddress *****************
 10256 ;; Defined at:
 10257 ;;		line 250 in file "../../../Framework/MercuryFwk/Source/c/01_Hal/02_Drv/i2c_slv_drv.c"
 10258 ;; Parameters:    Size  Location     Type
 10259 ;;  SlaveAddress    1    wreg     unsigned char 
 10260 ;; Auto vars:     Size  Location     Type
 10261 ;;  SlaveAddress    1    4[COMMON] unsigned char 
 10262 ;; Return value:  Size  Location     Type
 10263 ;;                  1    wreg      void 
 10264 ;; Registers used:
 10265 ;;		wreg, status,2, status,0
 10266 ;; Tracked objects:
 10267 ;;		On entry : 0/0
 10268 ;;		On exit  : 0/0
 10269 ;;		Unchanged: 0/0
 10270 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10271 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10272 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10273 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10274 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10275 ;;Total ram usage:        1 bytes
 10276 ;; Hardware stack levels used:    1
 10277 ;; Hardware stack levels required when called:    2
 10278 ;; This function calls:
 10279 ;;		Nothing
 10280 ;; This function is called by:
 10281 ;;		_I2cSlv_I2cDrvHandle
 10282 ;; This function uses a non-reentrant model
 10283 ;;
 10284                           
 10285                           
 10286                           ;psect for function _I2c_SetI2cAddress
 10287  15D8                     _I2c_SetI2cAddress:	
 10288                           
 10289                           ;incstack = 0
 10290                           ; Regs used in _I2c_SetI2cAddress: [wreg+status,2+status,0]
 10291                           ;I2c_SetI2cAddress@SlaveAddress stored from wreg
 10292  15D8  00F4               	movwf	I2c_SetI2cAddress@SlaveAddress
 10293                           
 10294                           ;i2c_slv_drv.c: 253: SSP1ADD = (SlaveAddress << ((UINT8)(1)));
 10295  15D9  3574               	lslf	I2c_SetI2cAddress@SlaveAddress,w
 10296  15DA  0024               	movlb	4	; select bank4
 10297  15DB  0092               	movwf	18	;volatile
 10298  15DC  0008               	return
 10299  15DD                     __end_of_I2c_SetI2cAddress:	
 10300                           
 10301                           	psect	text38
 10302  0BDC                     __ptext38:	
 10303 ;; *************** function ___awmod *****************
 10304 ;; Defined at:
 10305 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\awmod.c"
 10306 ;; Parameters:    Size  Location     Type
 10307 ;;  divisor         2    0[BANK0 ] int 
 10308 ;;  dividend        2    2[BANK0 ] int 
 10309 ;; Auto vars:     Size  Location     Type
 10310 ;;  sign            1    5[BANK0 ] unsigned char 
 10311 ;;  counter         1    4[BANK0 ] unsigned char 
 10312 ;; Return value:  Size  Location     Type
 10313 ;;                  2    0[BANK0 ] int 
 10314 ;; Registers used:
 10315 ;;		wreg, status,2, status,0
 10316 ;; Tracked objects:
 10317 ;;		On entry : 0/0
 10318 ;;		On exit  : 0/0
 10319 ;;		Unchanged: 0/0
 10320 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10321 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10322 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10323 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10324 ;;      Totals:         1       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10325 ;;Total ram usage:        7 bytes
 10326 ;; Hardware stack levels used:    1
 10327 ;; Hardware stack levels required when called:    2
 10328 ;; This function calls:
 10329 ;;		Nothing
 10330 ;; This function is called by:
 10331 ;;		_App_MainTask
 10332 ;; This function uses a non-reentrant model
 10333 ;;
 10334                           
 10335                           
 10336                           ;psect for function ___awmod
 10337  0BDC                     ___awmod:	
 10338                           
 10339                           ;incstack = 0
 10340                           ; Regs used in ___awmod: [wreg+status,2+status,0]
 10341  0BDC  0020               	movlb	0	; select bank0
 10342  0BDD  01A5               	clrf	___awmod@sign
 10343  0BDE  1FA3               	btfss	___awmod@dividend+1,7
 10344  0BDF  2BE7               	goto	l4980
 10345  0BE0  09A2               	comf	___awmod@dividend,f
 10346  0BE1  09A3               	comf	___awmod@dividend+1,f
 10347  0BE2  0AA2               	incf	___awmod@dividend,f
 10348  0BE3  1903               	skipnz
 10349  0BE4  0AA3               	incf	___awmod@dividend+1,f
 10350  0BE5  01A5               	clrf	___awmod@sign
 10351  0BE6  0AA5               	incf	___awmod@sign,f
 10352  0BE7                     l4980:	
 10353  0BE7  1FA1               	btfss	___awmod@divisor+1,7
 10354  0BE8  2BEE               	goto	l4984
 10355  0BE9  09A0               	comf	___awmod@divisor,f
 10356  0BEA  09A1               	comf	___awmod@divisor+1,f
 10357  0BEB  0AA0               	incf	___awmod@divisor,f
 10358  0BEC  1903               	skipnz
 10359  0BED  0AA1               	incf	___awmod@divisor+1,f
 10360  0BEE                     l4984:	
 10361  0BEE  0820               	movf	___awmod@divisor,w
 10362  0BEF  0421               	iorwf	___awmod@divisor+1,w
 10363  0BF0  1903               	btfsc	3,2
 10364  0BF1  2C15               	goto	l5002
 10365  0BF2  01A4               	clrf	___awmod@counter
 10366  0BF3  0AA4               	incf	___awmod@counter,f
 10367  0BF4                     l4992:	
 10368  0BF4  1BA1               	btfsc	___awmod@divisor+1,7
 10369  0BF5  2C00               	goto	l4994
 10370  0BF6  3001               	movlw	1
 10371  0BF7                     u4285:	
 10372  0BF7  35A0               	lslf	___awmod@divisor,f
 10373  0BF8  0DA1               	rlf	___awmod@divisor+1,f
 10374  0BF9  0B89               	decfsz	9,f
 10375  0BFA  2BF7               	goto	u4285
 10376  0BFB  3001               	movlw	1
 10377  0BFC  00F4               	movwf	??___awmod
 10378  0BFD  0874               	movf	??___awmod,w
 10379  0BFE  07A4               	addwf	___awmod@counter,f
 10380  0BFF  2BF4               	goto	l4992
 10381  0C00                     l4994:	
 10382  0C00  0821               	movf	___awmod@divisor+1,w
 10383  0C01  0223               	subwf	___awmod@dividend+1,w
 10384  0C02  1D03               	skipz
 10385  0C03  2C06               	goto	u4305
 10386  0C04  0820               	movf	___awmod@divisor,w
 10387  0C05  0222               	subwf	___awmod@dividend,w
 10388  0C06                     u4305:	
 10389  0C06  1C03               	skipc
 10390  0C07  2C0C               	goto	l4998
 10391  0C08  0820               	movf	___awmod@divisor,w
 10392  0C09  02A2               	subwf	___awmod@dividend,f
 10393  0C0A  0821               	movf	___awmod@divisor+1,w
 10394  0C0B  3BA3               	subwfb	___awmod@dividend+1,f
 10395  0C0C                     l4998:	
 10396  0C0C  3001               	movlw	1
 10397  0C0D                     u4315:	
 10398  0C0D  36A1               	lsrf	___awmod@divisor+1,f
 10399  0C0E  0CA0               	rrf	___awmod@divisor,f
 10400  0C0F  0B89               	decfsz	9,f
 10401  0C10  2C0D               	goto	u4315
 10402  0C11  3001               	movlw	1
 10403  0C12  02A4               	subwf	___awmod@counter,f
 10404  0C13  1D03               	btfss	3,2
 10405  0C14  2C00               	goto	l4994
 10406  0C15                     l5002:	
 10407  0C15  0825               	movf	___awmod@sign,w
 10408  0C16  1903               	btfsc	3,2
 10409  0C17  2C1D               	goto	l5006
 10410  0C18  09A2               	comf	___awmod@dividend,f
 10411  0C19  09A3               	comf	___awmod@dividend+1,f
 10412  0C1A  0AA2               	incf	___awmod@dividend,f
 10413  0C1B  1903               	skipnz
 10414  0C1C  0AA3               	incf	___awmod@dividend+1,f
 10415  0C1D                     l5006:	
 10416  0C1D  0823               	movf	___awmod@dividend+1,w
 10417  0C1E  00A1               	movwf	?___awmod+1
 10418  0C1F  0822               	movf	___awmod@dividend,w
 10419  0C20  00A0               	movwf	?___awmod
 10420  0C21  0008               	return
 10421  0C22                     __end_of___awmod:	
 10422                           
 10423                           	psect	text39
 10424  0C6D                     __ptext39:	
 10425 ;; *************** function ___awdiv *****************
 10426 ;; Defined at:
 10427 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\awdiv.c"
 10428 ;; Parameters:    Size  Location     Type
 10429 ;;  divisor         2    0[BANK0 ] int 
 10430 ;;  dividend        2    2[BANK0 ] int 
 10431 ;; Auto vars:     Size  Location     Type
 10432 ;;  quotient        2    6[BANK0 ] int 
 10433 ;;  sign            1    5[BANK0 ] unsigned char 
 10434 ;;  counter         1    4[BANK0 ] unsigned char 
 10435 ;; Return value:  Size  Location     Type
 10436 ;;                  2    0[BANK0 ] int 
 10437 ;; Registers used:
 10438 ;;		wreg, status,2, status,0
 10439 ;; Tracked objects:
 10440 ;;		On entry : 0/0
 10441 ;;		On exit  : 0/0
 10442 ;;		Unchanged: 0/0
 10443 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10444 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10445 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10446 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10447 ;;      Totals:         1       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10448 ;;Total ram usage:        9 bytes
 10449 ;; Hardware stack levels used:    1
 10450 ;; Hardware stack levels required when called:    2
 10451 ;; This function calls:
 10452 ;;		Nothing
 10453 ;; This function is called by:
 10454 ;;		_App_MainTask
 10455 ;; This function uses a non-reentrant model
 10456 ;;
 10457                           
 10458                           
 10459                           ;psect for function ___awdiv
 10460  0C6D                     ___awdiv:	
 10461                           
 10462                           ;incstack = 0
 10463                           ; Regs used in ___awdiv: [wreg+status,2+status,0]
 10464  0C6D  0020               	movlb	0	; select bank0
 10465  0C6E  01A5               	clrf	___awdiv@sign
 10466  0C6F  1FA1               	btfss	___awdiv@divisor+1,7
 10467  0C70  2C78               	goto	l4936
 10468  0C71  09A0               	comf	___awdiv@divisor,f
 10469  0C72  09A1               	comf	___awdiv@divisor+1,f
 10470  0C73  0AA0               	incf	___awdiv@divisor,f
 10471  0C74  1903               	skipnz
 10472  0C75  0AA1               	incf	___awdiv@divisor+1,f
 10473  0C76  01A5               	clrf	___awdiv@sign
 10474  0C77  0AA5               	incf	___awdiv@sign,f
 10475  0C78                     l4936:	
 10476  0C78  1FA3               	btfss	___awdiv@dividend+1,7
 10477  0C79  2C83               	goto	l4942
 10478  0C7A  09A2               	comf	___awdiv@dividend,f
 10479  0C7B  09A3               	comf	___awdiv@dividend+1,f
 10480  0C7C  0AA2               	incf	___awdiv@dividend,f
 10481  0C7D  1903               	skipnz
 10482  0C7E  0AA3               	incf	___awdiv@dividend+1,f
 10483  0C7F  3001               	movlw	1
 10484  0C80  00F4               	movwf	??___awdiv
 10485  0C81  0874               	movf	??___awdiv,w
 10486  0C82  06A5               	xorwf	___awdiv@sign,f
 10487  0C83                     l4942:	
 10488  0C83  01A6               	clrf	___awdiv@quotient
 10489  0C84  01A7               	clrf	___awdiv@quotient+1
 10490  0C85  0820               	movf	___awdiv@divisor,w
 10491  0C86  0421               	iorwf	___awdiv@divisor+1,w
 10492  0C87  1903               	btfsc	3,2
 10493  0C88  2CB2               	goto	l4964
 10494  0C89  01A4               	clrf	___awdiv@counter
 10495  0C8A  0AA4               	incf	___awdiv@counter,f
 10496  0C8B                     l4952:	
 10497  0C8B  1BA1               	btfsc	___awdiv@divisor+1,7
 10498  0C8C  2C97               	goto	l4954
 10499  0C8D  3001               	movlw	1
 10500  0C8E                     u4185:	
 10501  0C8E  35A0               	lslf	___awdiv@divisor,f
 10502  0C8F  0DA1               	rlf	___awdiv@divisor+1,f
 10503  0C90  0B89               	decfsz	9,f
 10504  0C91  2C8E               	goto	u4185
 10505  0C92  3001               	movlw	1
 10506  0C93  00F4               	movwf	??___awdiv
 10507  0C94  0874               	movf	??___awdiv,w
 10508  0C95  07A4               	addwf	___awdiv@counter,f
 10509  0C96  2C8B               	goto	l4952
 10510  0C97                     l4954:	
 10511  0C97  3001               	movlw	1
 10512  0C98                     u4205:	
 10513  0C98  35A6               	lslf	___awdiv@quotient,f
 10514  0C99  0DA7               	rlf	___awdiv@quotient+1,f
 10515  0C9A  0B89               	decfsz	9,f
 10516  0C9B  2C98               	goto	u4205
 10517  0C9C  0821               	movf	___awdiv@divisor+1,w
 10518  0C9D  0223               	subwf	___awdiv@dividend+1,w
 10519  0C9E  1D03               	skipz
 10520  0C9F  2CA2               	goto	u4215
 10521  0CA0  0820               	movf	___awdiv@divisor,w
 10522  0CA1  0222               	subwf	___awdiv@dividend,w
 10523  0CA2                     u4215:	
 10524  0CA2  1C03               	skipc
 10525  0CA3  2CA9               	goto	l4960
 10526  0CA4  0820               	movf	___awdiv@divisor,w
 10527  0CA5  02A2               	subwf	___awdiv@dividend,f
 10528  0CA6  0821               	movf	___awdiv@divisor+1,w
 10529  0CA7  3BA3               	subwfb	___awdiv@dividend+1,f
 10530  0CA8  1426               	bsf	___awdiv@quotient,0
 10531  0CA9                     l4960:	
 10532  0CA9  3001               	movlw	1
 10533  0CAA                     u4225:	
 10534  0CAA  36A1               	lsrf	___awdiv@divisor+1,f
 10535  0CAB  0CA0               	rrf	___awdiv@divisor,f
 10536  0CAC  0B89               	decfsz	9,f
 10537  0CAD  2CAA               	goto	u4225
 10538  0CAE  3001               	movlw	1
 10539  0CAF  02A4               	subwf	___awdiv@counter,f
 10540  0CB0  1D03               	btfss	3,2
 10541  0CB1  2C97               	goto	l4954
 10542  0CB2                     l4964:	
 10543  0CB2  0825               	movf	___awdiv@sign,w
 10544  0CB3  1903               	btfsc	3,2
 10545  0CB4  2CBA               	goto	l4968
 10546  0CB5  09A6               	comf	___awdiv@quotient,f
 10547  0CB6  09A7               	comf	___awdiv@quotient+1,f
 10548  0CB7  0AA6               	incf	___awdiv@quotient,f
 10549  0CB8  1903               	skipnz
 10550  0CB9  0AA7               	incf	___awdiv@quotient+1,f
 10551  0CBA                     l4968:	
 10552  0CBA  0827               	movf	___awdiv@quotient+1,w
 10553  0CBB  00A1               	movwf	?___awdiv+1
 10554  0CBC  0826               	movf	___awdiv@quotient,w
 10555  0CBD  00A0               	movwf	?___awdiv
 10556  0CBE  0008               	return
 10557  0CBF                     __end_of___awdiv:	
 10558                           
 10559                           	psect	text40
 10560  15FC                     __ptext40:	
 10561 ;; *************** function _Mcu_SetPullUpsSts *****************
 10562 ;; Defined at:
 10563 ;;		line 167 in file "../../../Framework/MercuryFwk/Source/c/01_Hal/02_Drv/mcu_drv.c"
 10564 ;; Parameters:    Size  Location     Type
 10565 ;;  PuSts           1    wreg     enum E3655
 10566 ;; Auto vars:     Size  Location     Type
 10567 ;;  PuSts           1    4[COMMON] enum E3655
 10568 ;; Return value:  Size  Location     Type
 10569 ;;                  1    wreg      void 
 10570 ;; Registers used:
 10571 ;;		wreg, status,0
 10572 ;; Tracked objects:
 10573 ;;		On entry : 0/0
 10574 ;;		On exit  : 0/0
 10575 ;;		Unchanged: 0/0
 10576 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10577 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10578 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10579 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10580 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10581 ;;Total ram usage:        1 bytes
 10582 ;; Hardware stack levels used:    1
 10583 ;; Hardware stack levels required when called:    2
 10584 ;; This function calls:
 10585 ;;		Nothing
 10586 ;; This function is called by:
 10587 ;;		_App_MainTask
 10588 ;; This function uses a non-reentrant model
 10589 ;;
 10590                           
 10591                           
 10592                           ;psect for function _Mcu_SetPullUpsSts
 10593  15FC                     _Mcu_SetPullUpsSts:	
 10594                           
 10595                           ;incstack = 0
 10596                           ; Regs used in _Mcu_SetPullUpsSts: [wreg+status,0]
 10597                           ;Mcu_SetPullUpsSts@PuSts stored from wreg
 10598  15FC  00F4               	movwf	Mcu_SetPullUpsSts@PuSts
 10599                           
 10600                           ;mcu_drv.c: 170: OPTION_REGbits.nWPUEN = PuSts;
 10601  15FD  0C74               	rrf	Mcu_SetPullUpsSts@PuSts,w
 10602  15FE  0021               	movlb	1	; select bank1
 10603  15FF  1C03               	skipc
 10604  1600  1395               	bcf	21,7	;volatile
 10605  1601  1803               	skipnc
 10606  1602  1795               	bsf	21,7	;volatile
 10607  1603  0008               	return
 10608  1604                     __end_of_Mcu_SetPullUpsSts:	
 10609                           
 10610                           	psect	text41
 10611  15F4                     __ptext41:	
 10612 ;; *************** function _Mcu_SetDieTempSts *****************
 10613 ;; Defined at:
 10614 ;;		line 265 in file "../../../Framework/MercuryFwk/Source/c/01_Hal/02_Drv/mcu_drv.c"
 10615 ;; Parameters:    Size  Location     Type
 10616 ;;  DieTempSts      1    wreg     unsigned char 
 10617 ;; Auto vars:     Size  Location     Type
 10618 ;;  DieTempSts      1    4[COMMON] unsigned char 
 10619 ;; Return value:  Size  Location     Type
 10620 ;;                  1    wreg      void 
 10621 ;; Registers used:
 10622 ;;		wreg, status,0
 10623 ;; Tracked objects:
 10624 ;;		On entry : 0/0
 10625 ;;		On exit  : 0/0
 10626 ;;		Unchanged: 0/0
 10627 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10628 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10629 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10630 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10631 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10632 ;;Total ram usage:        1 bytes
 10633 ;; Hardware stack levels used:    1
 10634 ;; Hardware stack levels required when called:    2
 10635 ;; This function calls:
 10636 ;;		Nothing
 10637 ;; This function is called by:
 10638 ;;		_App_MainTask
 10639 ;; This function uses a non-reentrant model
 10640 ;;
 10641                           
 10642                           
 10643                           ;psect for function _Mcu_SetDieTempSts
 10644  15F4                     _Mcu_SetDieTempSts:	
 10645                           
 10646                           ;incstack = 0
 10647                           ; Regs used in _Mcu_SetDieTempSts: [wreg+status,0]
 10648                           ;Mcu_SetDieTempSts@DieTempSts stored from wreg
 10649  15F4  00F4               	movwf	Mcu_SetDieTempSts@DieTempSts
 10650                           
 10651                           ;mcu_drv.c: 268: FVRCONbits.TSEN = DieTempSts;
 10652  15F5  0C74               	rrf	Mcu_SetDieTempSts@DieTempSts,w
 10653  15F6  0022               	movlb	2	; select bank2
 10654  15F7  1C03               	skipc
 10655  15F8  1297               	bcf	23,5	;volatile
 10656  15F9  1803               	skipnc
 10657  15FA  1697               	bsf	23,5	;volatile
 10658  15FB  0008               	return
 10659  15FC                     __end_of_Mcu_SetDieTempSts:	
 10660                           
 10661                           	psect	text42
 10662  15EC                     __ptext42:	
 10663 ;; *************** function _Mcu_SetDieTempMode *****************
 10664 ;; Defined at:
 10665 ;;		line 279 in file "../../../Framework/MercuryFwk/Source/c/01_Hal/02_Drv/mcu_drv.c"
 10666 ;; Parameters:    Size  Location     Type
 10667 ;;  DieTempMode     1    wreg     unsigned char 
 10668 ;; Auto vars:     Size  Location     Type
 10669 ;;  DieTempMode     1    4[COMMON] unsigned char 
 10670 ;; Return value:  Size  Location     Type
 10671 ;;                  1    wreg      void 
 10672 ;; Registers used:
 10673 ;;		wreg, status,0
 10674 ;; Tracked objects:
 10675 ;;		On entry : 0/0
 10676 ;;		On exit  : 0/0
 10677 ;;		Unchanged: 0/0
 10678 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10679 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10680 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10681 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10682 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10683 ;;Total ram usage:        1 bytes
 10684 ;; Hardware stack levels used:    1
 10685 ;; Hardware stack levels required when called:    2
 10686 ;; This function calls:
 10687 ;;		Nothing
 10688 ;; This function is called by:
 10689 ;;		_App_MainTask
 10690 ;; This function uses a non-reentrant model
 10691 ;;
 10692                           
 10693                           
 10694                           ;psect for function _Mcu_SetDieTempMode
 10695  15EC                     _Mcu_SetDieTempMode:	
 10696                           
 10697                           ;incstack = 0
 10698                           ; Regs used in _Mcu_SetDieTempMode: [wreg+status,0]
 10699                           ;Mcu_SetDieTempMode@DieTempMode stored from wreg
 10700  15EC  00F4               	movwf	Mcu_SetDieTempMode@DieTempMode
 10701                           
 10702                           ;mcu_drv.c: 282: FVRCONbits.TSRNG = DieTempMode;
 10703  15ED  0C74               	rrf	Mcu_SetDieTempMode@DieTempMode,w
 10704  15EE  0022               	movlb	2	; select bank2
 10705  15EF  1C03               	skipc
 10706  15F0  1217               	bcf	23,4	;volatile
 10707  15F1  1803               	skipnc
 10708  15F2  1617               	bsf	23,4	;volatile
 10709  15F3  0008               	return
 10710  15F4                     __end_of_Mcu_SetDieTempMode:	
 10711                           
 10712                           	psect	text43
 10713  0702                     __ptext43:	
 10714 ;; *************** function _Mcu_ConfigPullUps *****************
 10715 ;; Defined at:
 10716 ;;		line 181 in file "../../../Framework/MercuryFwk/Source/c/01_Hal/02_Drv/mcu_drv.c"
 10717 ;; Parameters:    Size  Location     Type
 10718 ;;  WpuCh           1    wreg     PTR struct _WpuChType
 10719 ;;		 -> App_MainTask@WpuCh(18), 
 10720 ;; Auto vars:     Size  Location     Type
 10721 ;;  WpuCh           1    4[COMMON] PTR struct _WpuChType
 10722 ;;		 -> App_MainTask@WpuCh(18), 
 10723 ;; Return value:  Size  Location     Type
 10724 ;;                  1    wreg      void 
 10725 ;; Registers used:
 10726 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 10727 ;; Tracked objects:
 10728 ;;		On entry : 0/0
 10729 ;;		On exit  : 0/0
 10730 ;;		Unchanged: 0/0
 10731 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10732 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10733 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10734 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10735 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10736 ;;Total ram usage:        1 bytes
 10737 ;; Hardware stack levels used:    1
 10738 ;; Hardware stack levels required when called:    2
 10739 ;; This function calls:
 10740 ;;		Nothing
 10741 ;; This function is called by:
 10742 ;;		_App_MainTask
 10743 ;; This function uses a non-reentrant model
 10744 ;;
 10745                           
 10746                           
 10747                           ;psect for function _Mcu_ConfigPullUps
 10748  0702                     _Mcu_ConfigPullUps:	
 10749                           
 10750                           ;incstack = 0
 10751                           ; Regs used in _Mcu_ConfigPullUps: [wreg+fsr1l+fsr1h+status,2+status,0]
 10752                           ;Mcu_ConfigPullUps@WpuCh stored from wreg
 10753  0702  00F4               	movwf	Mcu_ConfigPullUps@WpuCh
 10754                           
 10755                           ;mcu_drv.c: 184: WPUA = 0x00;
 10756  0703  0024               	movlb	4	; select bank4
 10757  0704  018C               	clrf	12	;volatile
 10758                           
 10759                           ;mcu_drv.c: 185: WPUAbits.WPUA0 = WpuCh->WpuA0;
 10760  0705  0874               	movf	Mcu_ConfigPullUps@WpuCh,w
 10761  0706  0086               	movwf	6
 10762  0707  0187               	clrf	7
 10763  0708  0C01               	rrf	1,w
 10764  0709  1C03               	skipc
 10765  070A  100C               	bcf	12,0	;volatile
 10766  070B  1803               	skipnc
 10767  070C  140C               	bsf	12,0	;volatile
 10768                           
 10769                           ;mcu_drv.c: 186: WPUAbits.WPUA1 = WpuCh->WpuA1;
 10770  070D  0A74               	incf	Mcu_ConfigPullUps@WpuCh,w
 10771  070E  0086               	movwf	6
 10772  070F  0187               	clrf	7
 10773  0710  0C01               	rrf	1,w
 10774  0711  1C03               	skipc
 10775  0712  108C               	bcf	12,1	;volatile
 10776  0713  1803               	skipnc
 10777  0714  148C               	bsf	12,1	;volatile
 10778                           
 10779                           ;mcu_drv.c: 187: WPUAbits.WPUA2 = WpuCh->WpuA2;
 10780  0715  0874               	movf	Mcu_ConfigPullUps@WpuCh,w
 10781  0716  3E02               	addlw	2
 10782  0717  0086               	movwf	6
 10783  0718  0187               	clrf	7
 10784  0719  0C01               	rrf	1,w
 10785  071A  1C03               	skipc
 10786  071B  110C               	bcf	12,2	;volatile
 10787  071C  1803               	skipnc
 10788  071D  150C               	bsf	12,2	;volatile
 10789                           
 10790                           ;mcu_drv.c: 188: WPUAbits.WPUA3 = WpuCh->WpuA3;
 10791  071E  0874               	movf	Mcu_ConfigPullUps@WpuCh,w
 10792  071F  3E03               	addlw	3
 10793  0720  0086               	movwf	6
 10794  0721  0187               	clrf	7
 10795  0722  0C01               	rrf	1,w
 10796  0723  1C03               	skipc
 10797  0724  118C               	bcf	12,3	;volatile
 10798  0725  1803               	skipnc
 10799  0726  158C               	bsf	12,3	;volatile
 10800                           
 10801                           ;mcu_drv.c: 189: WPUAbits.WPUA4 = WpuCh->WpuA4;
 10802  0727  0874               	movf	Mcu_ConfigPullUps@WpuCh,w
 10803  0728  3E04               	addlw	4
 10804  0729  0086               	movwf	6
 10805  072A  0187               	clrf	7
 10806  072B  0C01               	rrf	1,w
 10807  072C  1C03               	skipc
 10808  072D  120C               	bcf	12,4	;volatile
 10809  072E  1803               	skipnc
 10810  072F  160C               	bsf	12,4	;volatile
 10811                           
 10812                           ;mcu_drv.c: 190: WPUAbits.WPUA5 = WpuCh->WpuA5;
 10813  0730  0874               	movf	Mcu_ConfigPullUps@WpuCh,w
 10814  0731  3E05               	addlw	5
 10815  0732  0086               	movwf	6
 10816  0733  0187               	clrf	7
 10817  0734  0C01               	rrf	1,w
 10818  0735  1C03               	skipc
 10819  0736  128C               	bcf	12,5	;volatile
 10820  0737  1803               	skipnc
 10821  0738  168C               	bsf	12,5	;volatile
 10822                           
 10823                           ;mcu_drv.c: 194: WPUB = 0x00;
 10824  0739  018D               	clrf	13	;volatile
 10825                           
 10826                           ;mcu_drv.c: 195: WPUBbits.WPUB4 = WpuCh->WpuB4;
 10827  073A  0874               	movf	Mcu_ConfigPullUps@WpuCh,w
 10828  073B  3E06               	addlw	6
 10829  073C  0086               	movwf	6
 10830  073D  0187               	clrf	7
 10831  073E  0C01               	rrf	1,w
 10832  073F  1C03               	skipc
 10833  0740  120D               	bcf	13,4	;volatile
 10834  0741  1803               	skipnc
 10835  0742  160D               	bsf	13,4	;volatile
 10836                           
 10837                           ;mcu_drv.c: 196: WPUBbits.WPUB5 = WpuCh->WpuB5;
 10838  0743  0874               	movf	Mcu_ConfigPullUps@WpuCh,w
 10839  0744  3E07               	addlw	7
 10840  0745  0086               	movwf	6
 10841  0746  0187               	clrf	7
 10842  0747  0C01               	rrf	1,w
 10843  0748  1C03               	skipc
 10844  0749  128D               	bcf	13,5	;volatile
 10845  074A  1803               	skipnc
 10846  074B  168D               	bsf	13,5	;volatile
 10847                           
 10848                           ;mcu_drv.c: 197: WPUBbits.WPUB6 = WpuCh->WpuB6;
 10849  074C  0874               	movf	Mcu_ConfigPullUps@WpuCh,w
 10850  074D  3E08               	addlw	8
 10851  074E  0086               	movwf	6
 10852  074F  0187               	clrf	7
 10853  0750  0C01               	rrf	1,w
 10854  0751  1C03               	skipc
 10855  0752  130D               	bcf	13,6	;volatile
 10856  0753  1803               	skipnc
 10857  0754  170D               	bsf	13,6	;volatile
 10858                           
 10859                           ;mcu_drv.c: 198: WPUBbits.WPUB7 = WpuCh->WpuB7;
 10860  0755  0874               	movf	Mcu_ConfigPullUps@WpuCh,w
 10861  0756  3E09               	addlw	9
 10862  0757  0086               	movwf	6
 10863  0758  0187               	clrf	7
 10864  0759  0C01               	rrf	1,w
 10865  075A  1C03               	skipc
 10866  075B  138D               	bcf	13,7	;volatile
 10867  075C  1803               	skipnc
 10868  075D  178D               	bsf	13,7	;volatile
 10869                           
 10870                           ;mcu_drv.c: 202: WPUC = 0x00;
 10871  075E  018E               	clrf	14	;volatile
 10872                           
 10873                           ;mcu_drv.c: 203: WPUCbits.WPUC0 = WpuCh->WpuC0;
 10874  075F  0874               	movf	Mcu_ConfigPullUps@WpuCh,w
 10875  0760  3E0A               	addlw	10
 10876  0761  0086               	movwf	6
 10877  0762  0187               	clrf	7
 10878  0763  0C01               	rrf	1,w
 10879  0764  1C03               	skipc
 10880  0765  100E               	bcf	14,0	;volatile
 10881  0766  1803               	skipnc
 10882  0767  140E               	bsf	14,0	;volatile
 10883                           
 10884                           ;mcu_drv.c: 204: WPUCbits.WPUC1 = WpuCh->WpuC1;
 10885  0768  0874               	movf	Mcu_ConfigPullUps@WpuCh,w
 10886  0769  3E0B               	addlw	11
 10887  076A  0086               	movwf	6
 10888  076B  0187               	clrf	7
 10889  076C  0C01               	rrf	1,w
 10890  076D  1C03               	skipc
 10891  076E  108E               	bcf	14,1	;volatile
 10892  076F  1803               	skipnc
 10893  0770  148E               	bsf	14,1	;volatile
 10894                           
 10895                           ;mcu_drv.c: 205: WPUCbits.WPUC2 = WpuCh->WpuC2;
 10896  0771  0874               	movf	Mcu_ConfigPullUps@WpuCh,w
 10897  0772  3E0C               	addlw	12
 10898  0773  0086               	movwf	6
 10899  0774  0187               	clrf	7
 10900  0775  0C01               	rrf	1,w
 10901  0776  1C03               	skipc
 10902  0777  110E               	bcf	14,2	;volatile
 10903  0778  1803               	skipnc
 10904  0779  150E               	bsf	14,2	;volatile
 10905                           
 10906                           ;mcu_drv.c: 206: WPUCbits.WPUC3 = WpuCh->WpuC3;
 10907  077A  0874               	movf	Mcu_ConfigPullUps@WpuCh,w
 10908  077B  3E0D               	addlw	13
 10909  077C  0086               	movwf	6
 10910  077D  0187               	clrf	7
 10911  077E  0C01               	rrf	1,w
 10912  077F  1C03               	skipc
 10913  0780  118E               	bcf	14,3	;volatile
 10914  0781  1803               	skipnc
 10915  0782  158E               	bsf	14,3	;volatile
 10916                           
 10917                           ;mcu_drv.c: 207: WPUCbits.WPUC4 = WpuCh->WpuC4;
 10918  0783  0874               	movf	Mcu_ConfigPullUps@WpuCh,w
 10919  0784  3E0E               	addlw	14
 10920  0785  0086               	movwf	6
 10921  0786  0187               	clrf	7
 10922  0787  0C01               	rrf	1,w
 10923  0788  1C03               	skipc
 10924  0789  120E               	bcf	14,4	;volatile
 10925  078A  1803               	skipnc
 10926  078B  160E               	bsf	14,4	;volatile
 10927                           
 10928                           ;mcu_drv.c: 208: WPUCbits.WPUC5 = WpuCh->WpuC5;
 10929  078C  0874               	movf	Mcu_ConfigPullUps@WpuCh,w
 10930  078D  3E0F               	addlw	15
 10931  078E  0086               	movwf	6
 10932  078F  0187               	clrf	7
 10933  0790  0C01               	rrf	1,w
 10934  0791  1C03               	skipc
 10935  0792  128E               	bcf	14,5	;volatile
 10936  0793  1803               	skipnc
 10937  0794  168E               	bsf	14,5	;volatile
 10938                           
 10939                           ;mcu_drv.c: 210: WPUCbits.WPUC6 = WpuCh->WpuC6;
 10940  0795  0874               	movf	Mcu_ConfigPullUps@WpuCh,w
 10941  0796  3E10               	addlw	16
 10942  0797  0086               	movwf	6
 10943  0798  0187               	clrf	7
 10944  0799  0C01               	rrf	1,w
 10945  079A  1C03               	skipc
 10946  079B  130E               	bcf	14,6	;volatile
 10947  079C  1803               	skipnc
 10948  079D  170E               	bsf	14,6	;volatile
 10949                           
 10950                           ;mcu_drv.c: 211: WPUCbits.WPUC7 = WpuCh->WpuC7;
 10951  079E  0874               	movf	Mcu_ConfigPullUps@WpuCh,w
 10952  079F  3E11               	addlw	17
 10953  07A0  0086               	movwf	6
 10954  07A1  0187               	clrf	7
 10955  07A2  0C01               	rrf	1,w
 10956  07A3  1C03               	skipc
 10957  07A4  138E               	bcf	14,7	;volatile
 10958  07A5  1803               	skipnc
 10959  07A6  178E               	bsf	14,7	;volatile
 10960  07A7  0008               	return
 10961  07A8                     __end_of_Mcu_ConfigPullUps:	
 10962                           
 10963                           	psect	text44
 10964  0988                     __ptext44:	
 10965 ;; *************** function _Dht_GetSensorData *****************
 10966 ;; Defined at:
 10967 ;;		line 225 in file "../../../Framework/MercuryFwk/Source/c/01_Hal/02_Drv/dht11_drv.c"
 10968 ;; Parameters:    Size  Location     Type
 10969 ;;		None
 10970 ;; Auto vars:     Size  Location     Type
 10971 ;;  Ret             1    8[BANK0 ] unsigned char 
 10972 ;; Return value:  Size  Location     Type
 10973 ;;                  1    wreg      unsigned char 
 10974 ;; Registers used:
 10975 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10976 ;; Tracked objects:
 10977 ;;		On entry : 0/0
 10978 ;;		On exit  : 0/0
 10979 ;;		Unchanged: 0/0
 10980 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10981 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10982 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10983 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10984 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10985 ;;Total ram usage:        1 bytes
 10986 ;; Hardware stack levels used:    1
 10987 ;; Hardware stack levels required when called:    4
 10988 ;; This function calls:
 10989 ;;		_Dht_CalculateChecksum
 10990 ;;		_Dht_ReadData
 10991 ;;		_Dht_RequestData
 10992 ;;		_Mcu_DisableSchedulerInt
 10993 ;;		_Mcu_EnableSchedulerInt
 10994 ;; This function is called by:
 10995 ;;		_App_MainTask
 10996 ;; This function uses a non-reentrant model
 10997 ;;
 10998                           
 10999                           
 11000                           ;psect for function _Dht_GetSensorData
 11001  0988                     _Dht_GetSensorData:	
 11002                           
 11003                           ;dht11_drv.c: 227: UINT8 Ret;
 11004                           ;dht11_drv.c: 231: Mcu_DisableSchedulerInt();
 11005                           
 11006                           ;incstack = 0
 11007                           ; Regs used in _Dht_GetSensorData: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 11008  0988  3195  25C8  3189   	fcall	_Mcu_DisableSchedulerInt
 11009                           
 11010                           ;dht11_drv.c: 234: Dht_RequestData();
 11011  098B  3188  2001  3189   	fcall	_Dht_RequestData
 11012                           
 11013                           ;dht11_drv.c: 236: Dht_ReadData();
 11014  098E  3197  2703  3189   	fcall	_Dht_ReadData
 11015                           
 11016                           ;dht11_drv.c: 239: Mcu_EnableSchedulerInt();
 11017  0991  3195  25CB  3189   	fcall	_Mcu_EnableSchedulerInt
 11018                           
 11019                           ;dht11_drv.c: 242: if (Dht_CalculateChecksum(Sensor))
 11020  0994  30A0               	movlw	low _Sensor
 11021  0995  0086               	movwf	6
 11022  0996  3000               	movlw	high _Sensor
 11023  0997  0087               	movwf	7
 11024  0998  3020               	movlw	low Dht_CalculateChecksum@Sens
 11025  0999  0084               	movwf	4
 11026  099A  3000               	movlw	high Dht_CalculateChecksum@Sens
 11027  099B  0085               	movwf	5
 11028  099C  3F40               	moviw [0]fsr1
 11029  099D  3F80               	movwi [0]fsr0
 11030  099E  3F41               	moviw [1]fsr1
 11031  099F  3F81               	movwi [1]fsr0
 11032  09A0  3F42               	moviw [2]fsr1
 11033  09A1  3F82               	movwi [2]fsr0
 11034  09A2  3F43               	moviw [3]fsr1
 11035  09A3  3F83               	movwi [3]fsr0
 11036  09A4  3F44               	moviw [4]fsr1
 11037  09A5  3F84               	movwi [4]fsr0
 11038  09A6  3188  205D  3189   	fcall	_Dht_CalculateChecksum
 11039  09A9  3A00               	xorlw	0
 11040  09AA  1903               	skipnz
 11041  09AB  29B0               	goto	l4816
 11042                           
 11043                           ;dht11_drv.c: 243: {
 11044                           ;dht11_drv.c: 244: Ret = 1;
 11045  09AC  0020               	movlb	0	; select bank0
 11046  09AD  01A8               	clrf	Dht_GetSensorData@Ret
 11047  09AE  0AA8               	incf	Dht_GetSensorData@Ret,f
 11048                           
 11049                           ;dht11_drv.c: 245: }
 11050  09AF  29B2               	goto	l4818
 11051  09B0                     l4816:	
 11052                           
 11053                           ;dht11_drv.c: 246: else
 11054                           ;dht11_drv.c: 247: {
 11055                           ;dht11_drv.c: 248: Ret = 0;
 11056  09B0  0020               	movlb	0	; select bank0
 11057  09B1  01A8               	clrf	Dht_GetSensorData@Ret
 11058  09B2                     l4818:	
 11059                           
 11060                           ;dht11_drv.c: 249: }
 11061                           ;dht11_drv.c: 251: return Ret;
 11062  09B2  0828               	movf	Dht_GetSensorData@Ret,w
 11063  09B3  0008               	return
 11064  09B4                     __end_of_Dht_GetSensorData:	
 11065                           
 11066                           	psect	text45
 11067  15CB                     __ptext45:	
 11068 ;; *************** function _Mcu_EnableSchedulerInt *****************
 11069 ;; Defined at:
 11070 ;;		line 112 in file "../../../Framework/MercuryFwk/Source/c/01_Hal/02_Drv/mcu_drv.c"
 11071 ;; Parameters:    Size  Location     Type
 11072 ;;		None
 11073 ;; Auto vars:     Size  Location     Type
 11074 ;;		None
 11075 ;; Return value:  Size  Location     Type
 11076 ;;                  1    wreg      void 
 11077 ;; Registers used:
 11078 ;;		None
 11079 ;; Tracked objects:
 11080 ;;		On entry : 0/0
 11081 ;;		On exit  : 0/0
 11082 ;;		Unchanged: 0/0
 11083 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11084 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11085 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11086 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11087 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11088 ;;Total ram usage:        0 bytes
 11089 ;; Hardware stack levels used:    1
 11090 ;; Hardware stack levels required when called:    2
 11091 ;; This function calls:
 11092 ;;		Nothing
 11093 ;; This function is called by:
 11094 ;;		_Dht_GetSensorData
 11095 ;; This function uses a non-reentrant model
 11096 ;;
 11097                           
 11098                           
 11099                           ;psect for function _Mcu_EnableSchedulerInt
 11100  15CB                     _Mcu_EnableSchedulerInt:	
 11101                           
 11102                           ;mcu_drv.c: 114: PIE1bits.TMR2IE = ((UINT8)(1));
 11103                           
 11104                           ;incstack = 0
 11105                           ; Regs used in _Mcu_EnableSchedulerInt: []
 11106  15CB  0021               	movlb	1	; select bank1
 11107  15CC  1491               	bsf	17,1	;volatile
 11108  15CD  0008               	return
 11109  15CE                     __end_of_Mcu_EnableSchedulerInt:	
 11110                           
 11111                           	psect	text46
 11112  15C8                     __ptext46:	
 11113 ;; *************** function _Mcu_DisableSchedulerInt *****************
 11114 ;; Defined at:
 11115 ;;		line 140 in file "../../../Framework/MercuryFwk/Source/c/01_Hal/02_Drv/mcu_drv.c"
 11116 ;; Parameters:    Size  Location     Type
 11117 ;;		None
 11118 ;; Auto vars:     Size  Location     Type
 11119 ;;		None
 11120 ;; Return value:  Size  Location     Type
 11121 ;;                  1    wreg      void 
 11122 ;; Registers used:
 11123 ;;		None
 11124 ;; Tracked objects:
 11125 ;;		On entry : 0/0
 11126 ;;		On exit  : 0/0
 11127 ;;		Unchanged: 0/0
 11128 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11129 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11130 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11131 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11132 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11133 ;;Total ram usage:        0 bytes
 11134 ;; Hardware stack levels used:    1
 11135 ;; Hardware stack levels required when called:    2
 11136 ;; This function calls:
 11137 ;;		Nothing
 11138 ;; This function is called by:
 11139 ;;		_Dht_GetSensorData
 11140 ;; This function uses a non-reentrant model
 11141 ;;
 11142                           
 11143                           
 11144                           ;psect for function _Mcu_DisableSchedulerInt
 11145  15C8                     _Mcu_DisableSchedulerInt:	
 11146                           
 11147                           ;mcu_drv.c: 142: PIE1bits.TMR2IE = ((UINT8)(0));
 11148                           
 11149                           ;incstack = 0
 11150                           ; Regs used in _Mcu_DisableSchedulerInt: []
 11151  15C8  0021               	movlb	1	; select bank1
 11152  15C9  1091               	bcf	17,1	;volatile
 11153  15CA  0008               	return
 11154  15CB                     __end_of_Mcu_DisableSchedulerInt:	
 11155                           
 11156                           	psect	text47
 11157  0801                     __ptext47:	
 11158 ;; *************** function _Dht_RequestData *****************
 11159 ;; Defined at:
 11160 ;;		line 106 in file "../../../Framework/MercuryFwk/Source/c/01_Hal/02_Drv/dht11_drv.c"
 11161 ;; Parameters:    Size  Location     Type
 11162 ;;		None
 11163 ;; Auto vars:     Size  Location     Type
 11164 ;;		None
 11165 ;; Return value:  Size  Location     Type
 11166 ;;                  1    wreg      void 
 11167 ;; Registers used:
 11168 ;;		wreg
 11169 ;; Tracked objects:
 11170 ;;		On entry : 0/0
 11171 ;;		On exit  : 0/0
 11172 ;;		Unchanged: 0/0
 11173 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11174 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11175 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11176 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11177 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11178 ;;Total ram usage:        1 bytes
 11179 ;; Hardware stack levels used:    1
 11180 ;; Hardware stack levels required when called:    2
 11181 ;; This function calls:
 11182 ;;		Nothing
 11183 ;; This function is called by:
 11184 ;;		_Dht_GetSensorData
 11185 ;; This function uses a non-reentrant model
 11186 ;;
 11187                           
 11188                           
 11189                           ;psect for function _Dht_RequestData
 11190  0801                     _Dht_RequestData:	
 11191                           
 11192                           ;dht11_drv.c: 109: TRISAbits.TRISA2 = ((UINT8)(0));
 11193                           
 11194                           ;incstack = 0
 11195                           ; Regs used in _Dht_RequestData: [wreg]
 11196  0801  0021               	movlb	1	; select bank1
 11197  0802  110C               	bcf	12,2	;volatile
 11198                           
 11199                           ;dht11_drv.c: 112: PORTAbits.RA2 = ((UINT8)(0));
 11200  0803  0020               	movlb	0	; select bank0
 11201  0804  110C               	bcf	12,2	;volatile
 11202                           
 11203                           ;dht11_drv.c: 113: _delay((unsigned long)((5u)*(((UINT32)(32000000))/4000.0)));
 11204  0805  3034               	movlw	52
 11205  0806  00F4               	movwf	??_Dht_RequestData
 11206  0807  30F2               	movlw	242
 11207  0808                     u4747:	
 11208  0808  0B89               	decfsz	9,f
 11209  0809  2808               	goto	u4747
 11210  080A  0BF4               	decfsz	??_Dht_RequestData,f
 11211  080B  2808               	goto	u4747
 11212                           
 11213                           ;dht11_drv.c: 114: PORTAbits.RA2 = ((UINT8)(1));
 11214  080C  0020               	movlb	0	; select bank0
 11215  080D  150C               	bsf	12,2	;volatile
 11216                           
 11217                           ;dht11_drv.c: 115: _delay((unsigned long)((30u)*(((UINT32)(32000000))/4000000.0)));
 11218  080E  3050               	movlw	80
 11219  080F                     u4757:	
 11220  080F  0B89               	decfsz	9,f
 11221  0810  280F               	goto	u4757
 11222                           
 11223                           ;dht11_drv.c: 116: PORTAbits.RA2 = ((UINT8)(0));
 11224  0811  0020               	movlb	0	; select bank0
 11225  0812  110C               	bcf	12,2	;volatile
 11226                           
 11227                           ;dht11_drv.c: 119: TRISAbits.TRISA2 = ((UINT8)(1));
 11228  0813  0021               	movlb	1	; select bank1
 11229  0814  150C               	bsf	12,2	;volatile
 11230  0815                     l394:	
 11231                           ;dht11_drv.c: 121: while (PORTAbits.RA2 == ((UINT8)(0)));
 11232                           
 11233  0815  0020               	movlb	0	; select bank0
 11234  0816  1D0C               	btfss	12,2	;volatile
 11235  0817  2815               	goto	l394
 11236  0818                     l397:	
 11237                           ;dht11_drv.c: 123: while (PORTAbits.RA2 == ((UINT8)(1)));
 11238                           
 11239  0818  1D0C               	btfss	12,2	;volatile
 11240  0819  0008               	return
 11241  081A  2818               	goto	l397
 11242  081B                     __end_of_Dht_RequestData:	
 11243                           
 11244                           	psect	text48
 11245  1703                     __ptext48:	
 11246 ;; *************** function _Dht_ReadData *****************
 11247 ;; Defined at:
 11248 ;;		line 172 in file "../../../Framework/MercuryFwk/Source/c/01_Hal/02_Drv/dht11_drv.c"
 11249 ;; Parameters:    Size  Location     Type
 11250 ;;		None
 11251 ;; Auto vars:     Size  Location     Type
 11252 ;;  Index           1    5[BANK0 ] unsigned char 
 11253 ;; Return value:  Size  Location     Type
 11254 ;;                  1    wreg      void 
 11255 ;; Registers used:
 11256 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11257 ;; Tracked objects:
 11258 ;;		On entry : 0/0
 11259 ;;		On exit  : 0/0
 11260 ;;		Unchanged: 0/0
 11261 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11262 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11263 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11264 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11265 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11266 ;;Total ram usage:        2 bytes
 11267 ;; Hardware stack levels used:    1
 11268 ;; Hardware stack levels required when called:    3
 11269 ;; This function calls:
 11270 ;;		_Dht_ReadByte
 11271 ;; This function is called by:
 11272 ;;		_Dht_GetSensorData
 11273 ;; This function uses a non-reentrant model
 11274 ;;
 11275                           
 11276                           
 11277                           ;psect for function _Dht_ReadData
 11278  1703                     _Dht_ReadData:	
 11279                           
 11280                           ;dht11_drv.c: 174: UINT8 Index;
 11281                           ;dht11_drv.c: 177: for (Index = 0; Index < 5; Index++)
 11282                           
 11283                           ;incstack = 0
 11284                           ; Regs used in _Dht_ReadData: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 11285  1703  0020               	movlb	0	; select bank0
 11286  1704  01A5               	clrf	Dht_ReadData@Index
 11287  1705                     L11:	
 11288  1705  3005               	movlw	5
 11289  1706  0225               	subwf	Dht_ReadData@Index,w
 11290  1707  1803               	btfsc	3,0
 11291  1708  0008               	return
 11292                           
 11293                           ;dht11_drv.c: 178: {
 11294                           ;dht11_drv.c: 179: Sensor.Array[Index] = Dht_ReadByte();
 11295  1709  318B  2316  3197   	fcall	_Dht_ReadByte
 11296  170C  0020               	movlb	0	; select bank0
 11297  170D  00A4               	movwf	??_Dht_ReadData
 11298  170E  0825               	movf	Dht_ReadData@Index,w
 11299  170F  3EA0               	addlw	(low (_Sensor| 0))& (0+255)
 11300  1710  0086               	movwf	6
 11301  1711  0187               	clrf	7
 11302  1712  0824               	movf	??_Dht_ReadData,w
 11303  1713  0081               	movwf	1
 11304  1714  3001               	movlw	1
 11305  1715  00A4               	movwf	??_Dht_ReadData
 11306  1716  0824               	movf	??_Dht_ReadData,w
 11307  1717  07A5               	addwf	Dht_ReadData@Index,f
 11308  1718  2F05               	goto	L11
 11309  1719                     __end_of_Dht_ReadData:	
 11310                           
 11311                           	psect	text49
 11312  0B16                     __ptext49:	
 11313 ;; *************** function _Dht_ReadByte *****************
 11314 ;; Defined at:
 11315 ;;		line 134 in file "../../../Framework/MercuryFwk/Source/c/01_Hal/02_Drv/dht11_drv.c"
 11316 ;; Parameters:    Size  Location     Type
 11317 ;;		None
 11318 ;; Auto vars:     Size  Location     Type
 11319 ;;  Counter         2    1[BANK0 ] unsigned short 
 11320 ;;  Index           1    3[BANK0 ] unsigned char 
 11321 ;;  Data            1    0[BANK0 ] unsigned char 
 11322 ;; Return value:  Size  Location     Type
 11323 ;;                  1    wreg      unsigned char 
 11324 ;; Registers used:
 11325 ;;		wreg, status,2, status,0
 11326 ;; Tracked objects:
 11327 ;;		On entry : 0/0
 11328 ;;		On exit  : 0/0
 11329 ;;		Unchanged: 0/0
 11330 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11331 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11332 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11333 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11334 ;;      Totals:         2       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11335 ;;Total ram usage:        6 bytes
 11336 ;; Hardware stack levels used:    1
 11337 ;; Hardware stack levels required when called:    2
 11338 ;; This function calls:
 11339 ;;		Nothing
 11340 ;; This function is called by:
 11341 ;;		_Dht_ReadData
 11342 ;; This function uses a non-reentrant model
 11343 ;;
 11344                           
 11345                           
 11346                           ;psect for function _Dht_ReadByte
 11347  0B16                     _Dht_ReadByte:	
 11348                           
 11349                           ;dht11_drv.c: 136: UINT8 Index;
 11350                           ;dht11_drv.c: 137: UINT8 Data = 0x00;
 11351                           
 11352                           ;incstack = 0
 11353                           ; Regs used in _Dht_ReadByte: [wreg+status,2+status,0]
 11354  0B16  0020               	movlb	0	; select bank0
 11355  0B17  01A0               	clrf	Dht_ReadByte@Data
 11356                           
 11357                           ;dht11_drv.c: 138: UINT16 Counter = 0;
 11358  0B18  01A1               	clrf	Dht_ReadByte@Counter
 11359  0B19  01A2               	clrf	Dht_ReadByte@Counter+1
 11360                           
 11361                           ;dht11_drv.c: 140: for (Index = 0; Index < 8; Index++)
 11362  0B1A  01A3               	clrf	Dht_ReadByte@Index
 11363  0B1B  3008               	movlw	8
 11364  0B1C  0223               	subwf	Dht_ReadByte@Index,w
 11365  0B1D  1803               	btfsc	3,0
 11366  0B1E  2B53               	goto	l4426
 11367  0B1F                     l405:	
 11368                           ;dht11_drv.c: 141: {
 11369                           ;dht11_drv.c: 143: while (PORTAbits.RA2 == ((UINT8)(0)));
 11370                           
 11371  0B1F  1D0C               	btfss	12,2	;volatile
 11372  0B20  2B1F               	goto	l405
 11373                           
 11374                           ;dht11_drv.c: 145: Counter = 0;
 11375  0B21  01A1               	clrf	Dht_ReadByte@Counter
 11376  0B22  01A2               	clrf	Dht_ReadByte@Counter+1
 11377                           
 11378                           ;dht11_drv.c: 147: while ((PORTAbits.RA2 == ((UINT8)(1))) && (Counter < 100))
 11379  0B23  2B2D               	goto	l4416
 11380  0B24                     l4414:	
 11381                           
 11382                           ;dht11_drv.c: 148: {
 11383                           ;dht11_drv.c: 149: _delay((unsigned long)((10u)*(((UINT32)(32000000))/4000000.0)));
 11384  0B24  301A               	movlw	26
 11385  0B25                     u4767:	
 11386  0B25  0B89               	decfsz	9,f
 11387  0B26  2B25               	goto	u4767
 11388  0B27  3200               	nop2
 11389                           
 11390                           ;dht11_drv.c: 150: Counter++;
 11391  0B28  3001               	movlw	1
 11392  0B29  0020               	movlb	0	; select bank0
 11393  0B2A  07A1               	addwf	Dht_ReadByte@Counter,f
 11394  0B2B  3000               	movlw	0
 11395  0B2C  3DA2               	addwfc	Dht_ReadByte@Counter+1,f
 11396  0B2D                     l4416:	
 11397  0B2D  1D0C               	btfss	12,2	;volatile
 11398  0B2E  2B36               	goto	l4420
 11399  0B2F  3000               	movlw	0
 11400  0B30  0222               	subwf	Dht_ReadByte@Counter+1,w
 11401  0B31  3064               	movlw	100
 11402  0B32  1903               	skipnz
 11403  0B33  0221               	subwf	Dht_ReadByte@Counter,w
 11404  0B34  1C03               	skipc
 11405  0B35  2B24               	goto	l4414
 11406  0B36                     l4420:	
 11407                           
 11408                           ;dht11_drv.c: 151: }
 11409                           ;dht11_drv.c: 153: if (Counter > (30u/10u))
 11410  0B36  3000               	movlw	0
 11411  0B37  0222               	subwf	Dht_ReadByte@Counter+1,w
 11412  0B38  3004               	movlw	4
 11413  0B39  1903               	skipnz
 11414  0B3A  0221               	subwf	Dht_ReadByte@Counter,w
 11415  0B3B  1C03               	skipc
 11416  0B3C  2B4B               	goto	l413
 11417                           
 11418                           ;dht11_drv.c: 154: {
 11419                           ;dht11_drv.c: 156: Data |= 0x01 << (7 - Index);
 11420  0B3D  3001               	movlw	1
 11421  0B3E  00F4               	movwf	??_Dht_ReadByte
 11422  0B3F  0323               	decf	Dht_ReadByte@Index,w
 11423  0B40  3AFF               	xorlw	255
 11424  0B41  3E07               	addlw	7
 11425  0B42  0A89               	incf	9,f
 11426  0B43  2B45               	goto	u3554
 11427  0B44                     u3555:	
 11428  0B44  35F4               	lslf	??_Dht_ReadByte,f
 11429  0B45                     u3554:	
 11430  0B45  0B89               	decfsz	9,f
 11431  0B46  2B44               	goto	u3555
 11432  0B47  0874               	movf	??_Dht_ReadByte,w
 11433  0B48  00F5               	movwf	??_Dht_ReadByte+1
 11434  0B49  0875               	movf	??_Dht_ReadByte+1,w
 11435  0B4A  04A0               	iorwf	Dht_ReadByte@Data,f
 11436  0B4B                     l413:	
 11437  0B4B  3001               	movlw	1
 11438  0B4C  00F4               	movwf	??_Dht_ReadByte
 11439  0B4D  0874               	movf	??_Dht_ReadByte,w
 11440  0B4E  07A3               	addwf	Dht_ReadByte@Index,f
 11441  0B4F  3008               	movlw	8
 11442  0B50  0223               	subwf	Dht_ReadByte@Index,w
 11443  0B51  1C03               	skipc
 11444  0B52  2B1F               	goto	l405
 11445  0B53                     l4426:	
 11446                           
 11447                           ;dht11_drv.c: 157: }
 11448                           ;dht11_drv.c: 158: }
 11449                           ;dht11_drv.c: 161: return Data;
 11450  0B53  0820               	movf	Dht_ReadByte@Data,w
 11451  0B54  0008               	return
 11452  0B55                     __end_of_Dht_ReadByte:	
 11453                           
 11454                           	psect	text50
 11455  085D                     __ptext50:	
 11456 ;; *************** function _Dht_CalculateChecksum *****************
 11457 ;; Defined at:
 11458 ;;		line 191 in file "../../../Framework/MercuryFwk/Source/c/01_Hal/02_Drv/dht11_drv.c"
 11459 ;; Parameters:    Size  Location     Type
 11460 ;;  Sens            5    0[BANK0 ] struct _DhtSensor
 11461 ;; Auto vars:     Size  Location     Type
 11462 ;;  Index           1    7[BANK0 ] unsigned char 
 11463 ;;  Ret             1    6[BANK0 ] unsigned char 
 11464 ;;  Checksum        1    5[BANK0 ] unsigned char 
 11465 ;; Return value:  Size  Location     Type
 11466 ;;                  1    wreg      unsigned char 
 11467 ;; Registers used:
 11468 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 11469 ;; Tracked objects:
 11470 ;;		On entry : 0/0
 11471 ;;		On exit  : 0/0
 11472 ;;		Unchanged: 0/0
 11473 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11474 ;;      Params:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11475 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11476 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11477 ;;      Totals:         1       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11478 ;;Total ram usage:        9 bytes
 11479 ;; Hardware stack levels used:    1
 11480 ;; Hardware stack levels required when called:    2
 11481 ;; This function calls:
 11482 ;;		Nothing
 11483 ;; This function is called by:
 11484 ;;		_Dht_GetSensorData
 11485 ;; This function uses a non-reentrant model
 11486 ;;
 11487                           
 11488                           
 11489                           ;psect for function _Dht_CalculateChecksum
 11490  085D                     _Dht_CalculateChecksum:	
 11491                           
 11492                           ;dht11_drv.c: 193: UINT8 Index;
 11493                           ;dht11_drv.c: 194: UINT8 Checksum;
 11494                           ;dht11_drv.c: 195: UINT8 Ret;
 11495                           ;dht11_drv.c: 198: Checksum = 0;
 11496                           
 11497                           ;incstack = 0
 11498                           ; Regs used in _Dht_CalculateChecksum: [wreg+fsr1l+fsr1h+status,2+status,0]
 11499  085D  0020               	movlb	0	; select bank0
 11500  085E  01A5               	clrf	Dht_CalculateChecksum@Checksum
 11501                           
 11502                           ;dht11_drv.c: 199: for (Index = 0; Index < 4; Index++)
 11503  085F  01A7               	clrf	Dht_CalculateChecksum@Index
 11504  0860  3004               	movlw	4
 11505  0861  0227               	subwf	Dht_CalculateChecksum@Index,w
 11506  0862  1803               	btfsc	3,0
 11507  0863  2874               	goto	l4646
 11508  0864                     l4640:	
 11509                           
 11510                           ;dht11_drv.c: 200: {
 11511                           ;dht11_drv.c: 201: Checksum += Sens.Array[Index];
 11512  0864  0827               	movf	Dht_CalculateChecksum@Index,w
 11513  0865  3E20               	addlw	(low (Dht_CalculateChecksum@Sens| 0))& (0+255)
 11514  0866  0086               	movwf	6
 11515  0867  0187               	clrf	7
 11516  0868  0801               	movf	1,w
 11517  0869  00F4               	movwf	??_Dht_CalculateChecksum
 11518  086A  0874               	movf	??_Dht_CalculateChecksum,w
 11519  086B  07A5               	addwf	Dht_CalculateChecksum@Checksum,f
 11520  086C  3001               	movlw	1
 11521  086D  00F4               	movwf	??_Dht_CalculateChecksum
 11522  086E  0874               	movf	??_Dht_CalculateChecksum,w
 11523  086F  07A7               	addwf	Dht_CalculateChecksum@Index,f
 11524  0870  3004               	movlw	4
 11525  0871  0227               	subwf	Dht_CalculateChecksum@Index,w
 11526  0872  1C03               	skipc
 11527  0873  2864               	goto	l4640
 11528  0874                     l4646:	
 11529                           
 11530                           ;dht11_drv.c: 202: }
 11531                           ;dht11_drv.c: 205: if (Checksum == Sens.Data.Checksum)
 11532  0874  0824               	movf	Dht_CalculateChecksum@Sens+4,w
 11533  0875  0625               	xorwf	Dht_CalculateChecksum@Checksum,w
 11534  0876  1D03               	skipz
 11535  0877  287B               	goto	l4650
 11536                           
 11537                           ;dht11_drv.c: 206: {
 11538                           ;dht11_drv.c: 207: Ret = 1;
 11539  0878  01A6               	clrf	Dht_CalculateChecksum@Ret
 11540  0879  0AA6               	incf	Dht_CalculateChecksum@Ret,f
 11541                           
 11542                           ;dht11_drv.c: 208: }
 11543  087A  287C               	goto	l4652
 11544  087B                     l4650:	
 11545                           
 11546                           ;dht11_drv.c: 209: else
 11547                           ;dht11_drv.c: 210: {
 11548                           ;dht11_drv.c: 211: Ret = 0;
 11549  087B  01A6               	clrf	Dht_CalculateChecksum@Ret
 11550  087C                     l4652:	
 11551                           
 11552                           ;dht11_drv.c: 212: }
 11553                           ;dht11_drv.c: 214: return Ret;
 11554  087C  0826               	movf	Dht_CalculateChecksum@Ret,w
 11555  087D  0008               	return
 11556  087E                     __end_of_Dht_CalculateChecksum:	
 11557                           
 11558                           	psect	text51
 11559  095E                     __ptext51:	
 11560 ;; *************** function _AppSm *****************
 11561 ;; Defined at:
 11562 ;;		line 224 in file "../Source/c/04_App/sb330_app.c"
 11563 ;; Parameters:    Size  Location     Type
 11564 ;;		None
 11565 ;; Auto vars:     Size  Location     Type
 11566 ;;		None
 11567 ;; Return value:  Size  Location     Type
 11568 ;;                  1    wreg      void 
 11569 ;; Registers used:
 11570 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11571 ;; Tracked objects:
 11572 ;;		On entry : 0/0
 11573 ;;		On exit  : 0/0
 11574 ;;		Unchanged: 0/0
 11575 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11576 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11577 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11578 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11579 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11580 ;;Total ram usage:        1 bytes
 11581 ;; Hardware stack levels used:    1
 11582 ;; Hardware stack levels required when called:    6
 11583 ;; This function calls:
 11584 ;;		_GenerateEvt
 11585 ;;		_ManageProtocol
 11586 ;;		_StdS_SetI2cAddress
 11587 ;; This function is called by:
 11588 ;;		_App_MainTask
 11589 ;; This function uses a non-reentrant model
 11590 ;;
 11591                           
 11592                           
 11593                           ;psect for function _AppSm
 11594  095E                     _AppSm:	
 11595                           
 11596                           ;sb330_app.c: 226: static AppStateType AppState = WaitWpuSetState;
 11597                           ;sb330_app.c: 227: static UINT8 WpuSetCounter = 0;
 11598                           ;sb330_app.c: 229: switch (AppState)
 11599                           
 11600                           ;incstack = 0
 11601                           ; Regs used in _AppSm: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 11602  095E  297B               	goto	l4926
 11603  095F                     l4912:	
 11604                           ;sb330_app.c: 230: {
 11605                           ;sb330_app.c: 231: case WaitWpuSetState:
 11606                           
 11607                           
 11608                           ;sb330_app.c: 233: WpuSetCounter++;
 11609  095F  3001               	movlw	1
 11610  0960  0020               	movlb	0	; select bank0
 11611  0961  00BA               	movwf	??_AppSm
 11612  0962  083A               	movf	??_AppSm,w
 11613  0963  0021               	movlb	1	; select bank1
 11614  0964  07B4               	addwf	AppSm@WpuSetCounter^(0+128),f
 11615                           
 11616                           ;sb330_app.c: 235: if (WpuSetCounter >= ((UINT16)(100)/((UINT16)(100))))
 11617  0965  0834               	movf	AppSm@WpuSetCounter^(0+128),w
 11618  0966  1903               	btfsc	3,2
 11619  0967  0008               	return
 11620                           
 11621                           ;sb330_app.c: 236: {
 11622                           ;sb330_app.c: 238: StdS_SetI2cAddress();
 11623  0968  318A  22DE         	fcall	_StdS_SetI2cAddress
 11624                           
 11625                           ;sb330_app.c: 240: AppState = SendI2cAddrState;
 11626  096A  0021               	movlb	1	; select bank1
 11627  096B  01B5               	clrf	AppSm@AppState^(0+128)
 11628  096C  0AB5               	incf	AppSm@AppState^(0+128),f
 11629                           
 11630                           ;sb330_app.c: 241: }
 11631                           ;sb330_app.c: 242: break;
 11632  096D  0008               	return
 11633  096E                     l4918:	
 11634                           ;sb330_app.c: 244: case SendI2cAddrState:
 11635                           
 11636                           
 11637                           ;sb330_app.c: 246: GenerateEvt(&I2cSetAddress);
 11638  096E  30E1               	movlw	(low (_I2cSetAddress| 0))& (0+255)
 11639  096F  3188  207E         	fcall	_GenerateEvt
 11640                           
 11641                           ;sb330_app.c: 248: AppState = ManageProtocolState;
 11642  0971  3002               	movlw	2
 11643  0972  0020               	movlb	0	; select bank0
 11644  0973  00BA               	movwf	??_AppSm
 11645  0974  083A               	movf	??_AppSm,w
 11646  0975  0021               	movlb	1	; select bank1
 11647  0976  00B5               	movwf	AppSm@AppState^(0+128)
 11648                           
 11649                           ;sb330_app.c: 249: break;
 11650  0977  0008               	return
 11651  0978                     l4922:	
 11652                           ;sb330_app.c: 251: case ManageProtocolState:
 11653                           
 11654                           
 11655                           ;sb330_app.c: 253: ManageProtocol();
 11656  0978  3180  20A6         	fcall	_ManageProtocol
 11657                           
 11658                           ;sb330_app.c: 258: }
 11659                           
 11660                           ;sb330_app.c: 257: break;
 11661                           
 11662                           ;sb330_app.c: 256: default:
 11663                           
 11664                           ;sb330_app.c: 254: break;
 11665  097A  0008               	return
 11666  097B                     l4926:	
 11667  097B  0021               	movlb	1	; select bank1
 11668  097C  0835               	movf	AppSm@AppState^(0+128),w
 11669                           
 11670                           ; Switch size 1, requested type "space"
 11671                           ; Number of cases is 3, Range of values is 0 to 2
 11672                           ; switch strategies available:
 11673                           ; Name         Instructions Cycles
 11674                           ; simple_byte           10     6 (average)
 11675                           ; direct_byte           12     6 (fixed)
 11676                           ; jumptable            260     6 (fixed)
 11677                           ;	Chosen strategy is simple_byte
 11678  097D  3A00               	xorlw	0	; case 0
 11679  097E  1903               	skipnz
 11680  097F  295F               	goto	l4912
 11681  0980  3A01               	xorlw	1	; case 1
 11682  0981  1903               	skipnz
 11683  0982  296E               	goto	l4918
 11684  0983  3A03               	xorlw	3	; case 2
 11685  0984  1903               	skipnz
 11686  0985  2978               	goto	l4922
 11687  0986  2987               	goto	l981
 11688  0987                     l981:	
 11689  0987  0008               	return
 11690  0988                     __end_of_AppSm:	
 11691                           
 11692                           	psect	text52
 11693  0ADE                     __ptext52:	
 11694 ;; *************** function _StdS_SetI2cAddress *****************
 11695 ;; Defined at:
 11696 ;;		line 317 in file "../../../Framework/MercuryFwk/Source/c/03_Sml/02_Ssl/std_ser.c"
 11697 ;; Parameters:    Size  Location     Type
 11698 ;;		None
 11699 ;; Auto vars:     Size  Location     Type
 11700 ;;		None
 11701 ;; Return value:  Size  Location     Type
 11702 ;;                  1    wreg      void 
 11703 ;; Registers used:
 11704 ;;		wreg, status,2, status,0
 11705 ;; Tracked objects:
 11706 ;;		On entry : 0/0
 11707 ;;		On exit  : 0/0
 11708 ;;		Unchanged: 0/0
 11709 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11710 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11711 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11712 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11713 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11714 ;;Total ram usage:        2 bytes
 11715 ;; Hardware stack levels used:    1
 11716 ;; Hardware stack levels required when called:    2
 11717 ;; This function calls:
 11718 ;;		Nothing
 11719 ;; This function is called by:
 11720 ;;		_AppSm
 11721 ;; This function uses a non-reentrant model
 11722 ;;
 11723                           
 11724                           
 11725                           ;psect for function _StdS_SetI2cAddress
 11726  0ADE                     _StdS_SetI2cAddress:	
 11727                           
 11728                           ;std_ser.c: 321: I2cSlaveAddress |= (!PORTCbits.RC6 << 3);
 11729                           
 11730                           ;incstack = 0
 11731                           ; Regs used in _StdS_SetI2cAddress: [wreg+status,2+status,0]
 11732  0ADE  1003               	clrc
 11733  0ADF  0020               	movlb	0	; select bank0
 11734  0AE0  1F0E               	btfss	14,6	;volatile
 11735  0AE1  1403               	setc
 11736  0AE2  3000               	movlw	0
 11737  0AE3  3D09               	addwfc	9,w
 11738  0AE4  00F4               	movwf	??_StdS_SetI2cAddress
 11739  0AE5  3002               	movlw	2
 11740  0AE6                     u2125:	
 11741  0AE6  35F4               	lslf	??_StdS_SetI2cAddress,f
 11742  0AE7  3EFF               	addlw	-1
 11743  0AE8  1D03               	skipz
 11744  0AE9  2AE6               	goto	u2125
 11745  0AEA  3574               	lslf	??_StdS_SetI2cAddress,w
 11746  0AEB  00F5               	movwf	??_StdS_SetI2cAddress+1
 11747  0AEC  0875               	movf	??_StdS_SetI2cAddress+1,w
 11748  0AED  0021               	movlb	1	; select bank1
 11749  0AEE  04BF               	iorwf	_I2cSlaveAddress^(0+128),f
 11750                           
 11751                           ;std_ser.c: 322: I2cSlaveAddress |= (!PORTCbits.RC3 << 2);
 11752  0AEF  1003               	clrc
 11753  0AF0  0020               	movlb	0	; select bank0
 11754  0AF1  1D8E               	btfss	14,3	;volatile
 11755  0AF2  1403               	setc
 11756  0AF3  3000               	movlw	0
 11757  0AF4  3D09               	addwfc	9,w
 11758  0AF5  00F4               	movwf	??_StdS_SetI2cAddress
 11759  0AF6  3001               	movlw	1
 11760  0AF7                     u2135:	
 11761  0AF7  35F4               	lslf	??_StdS_SetI2cAddress,f
 11762  0AF8  3EFF               	addlw	-1
 11763  0AF9  1D03               	skipz
 11764  0AFA  2AF7               	goto	u2135
 11765  0AFB  3574               	lslf	??_StdS_SetI2cAddress,w
 11766  0AFC  00F5               	movwf	??_StdS_SetI2cAddress+1
 11767  0AFD  0875               	movf	??_StdS_SetI2cAddress+1,w
 11768  0AFE  0021               	movlb	1	; select bank1
 11769  0AFF  04BF               	iorwf	_I2cSlaveAddress^(0+128),f
 11770                           
 11771                           ;std_ser.c: 323: I2cSlaveAddress |= (!PORTCbits.RC4 << 1);
 11772  0B00  1003               	clrc
 11773  0B01  0020               	movlb	0	; select bank0
 11774  0B02  1E0E               	btfss	14,4	;volatile
 11775  0B03  1403               	setc
 11776  0B04  3000               	movlw	0
 11777  0B05  3D09               	addwfc	9,w
 11778  0B06  0709               	addwf	9,w
 11779  0B07  00F4               	movwf	??_StdS_SetI2cAddress
 11780  0B08  0874               	movf	??_StdS_SetI2cAddress,w
 11781  0B09  0021               	movlb	1	; select bank1
 11782  0B0A  04BF               	iorwf	_I2cSlaveAddress^(0+128),f
 11783                           
 11784                           ;std_ser.c: 324: I2cSlaveAddress |= (!PORTCbits.RC5 << 0);
 11785  0B0B  1003               	clrc
 11786  0B0C  0020               	movlb	0	; select bank0
 11787  0B0D  1E8E               	btfss	14,5	;volatile
 11788  0B0E  1403               	setc
 11789  0B0F  3000               	movlw	0
 11790  0B10  3D09               	addwfc	9,w
 11791  0B11  00F4               	movwf	??_StdS_SetI2cAddress
 11792  0B12  0874               	movf	??_StdS_SetI2cAddress,w
 11793  0B13  0021               	movlb	1	; select bank1
 11794  0B14  04BF               	iorwf	_I2cSlaveAddress^(0+128),f
 11795  0B15  0008               	return
 11796  0B16                     __end_of_StdS_SetI2cAddress:	
 11797                           
 11798                           	psect	text53
 11799  00A6                     __ptext53:	
 11800 ;; *************** function _ManageProtocol *****************
 11801 ;; Defined at:
 11802 ;;		line 137 in file "../Source/c/04_App/sb330_app.c"
 11803 ;; Parameters:    Size  Location     Type
 11804 ;;		None
 11805 ;; Auto vars:     Size  Location     Type
 11806 ;;		None
 11807 ;; Return value:  Size  Location     Type
 11808 ;;                  1    wreg      void 
 11809 ;; Registers used:
 11810 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11811 ;; Tracked objects:
 11812 ;;		On entry : 0/0
 11813 ;;		On exit  : 0/0
 11814 ;;		Unchanged: 0/0
 11815 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11816 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11817 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11818 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11819 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11820 ;;Total ram usage:        2 bytes
 11821 ;; Hardware stack levels used:    1
 11822 ;; Hardware stack levels required when called:    5
 11823 ;; This function calls:
 11824 ;;		_GenerateEvt
 11825 ;;		_ReceiveEvt
 11826 ;;		_SetBuffer
 11827 ;;		_StdS_ManageStdServices
 11828 ;;		_itoa
 11829 ;;		_strcat
 11830 ;;		_strcpy
 11831 ;; This function is called by:
 11832 ;;		_AppSm
 11833 ;; This function uses a non-reentrant model
 11834 ;;
 11835                           
 11836                           
 11837                           ;psect for function _ManageProtocol
 11838  00A6                     _ManageProtocol:	
 11839                           
 11840                           ;sb330_app.c: 140: if (ReceiveEvt(&I2cWriteRequest))
 11841                           
 11842                           ;incstack = 0
 11843                           ; Regs used in _ManageProtocol: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 11844  00A6  30DF               	movlw	(low (_I2cWriteRequest| 0))& (0+255)
 11845  00A7  3188  203C  3180   	fcall	_ReceiveEvt
 11846  00AA  3A00               	xorlw	0
 11847  00AB  1903               	skipnz
 11848  00AC  0008               	return
 11849                           
 11850                           ;sb330_app.c: 141: {
 11851                           ;sb330_app.c: 143: StdS_ManageStdServices();
 11852  00AD  3183  23F1  3180   	fcall	_StdS_ManageStdServices
 11853                           
 11854                           ;sb330_app.c: 145: switch (CmdBuffer[((UINT8)(0))])
 11855  00B0  29B5               	goto	l4704
 11856  00B1                     l4660:	
 11857                           ;sb330_app.c: 146: {
 11858                           ;sb330_app.c: 147: case ((UINT8)(0x60)):
 11859                           
 11860                           
 11861                           ;sb330_app.c: 149: RepBuffer[((UINT8)(0))] = TemperatureInt;
 11862  00B1  0021               	movlb	1	; select bank1
 11863  00B2  083A               	movf	_TemperatureInt^(0+128),w
 11864  00B3  0020               	movlb	0	; select bank0
 11865  00B4  00B8               	movwf	??_ManageProtocol
 11866  00B5  0838               	movf	??_ManageProtocol,w
 11867  00B6  0024               	movlb	4	; select bank4
 11868  00B7  00A0               	movwf	_RepBuffer^(0+512)
 11869                           
 11870                           ;sb330_app.c: 150: RepBuffer[((UINT8)(1))] = TemperatureDec;
 11871  00B8  0021               	movlb	1	; select bank1
 11872  00B9  0839               	movf	_TemperatureDec^(0+128),w
 11873  00BA  0020               	movlb	0	; select bank0
 11874  00BB  00B8               	movwf	??_ManageProtocol
 11875  00BC  0838               	movf	??_ManageProtocol,w
 11876  00BD  0024               	movlb	4	; select bank4
 11877  00BE  00A1               	movwf	(_RepBuffer^(0+512)+1)
 11878                           
 11879                           ;sb330_app.c: 152: RepBufferLen = ((UINT8)(2));
 11880  00BF  3002               	movlw	2
 11881  00C0  0020               	movlb	0	; select bank0
 11882  00C1  00B8               	movwf	??_ManageProtocol
 11883  00C2  0838               	movf	??_ManageProtocol,w
 11884  00C3  0021               	movlb	1	; select bank1
 11885  00C4  00C0               	movwf	_RepBufferLen^(0+128)
 11886                           
 11887                           ;sb330_app.c: 154: GenerateEvt(&I2cReplyPacketReady);
 11888  00C5  3077               	movlw	(low (_I2cReplyPacketReady| 0))& (0+255)
 11889  00C6  3188  207E         	fcall	_GenerateEvt
 11890                           
 11891                           ;sb330_app.c: 155: break;
 11892  00C8  0008               	return
 11893  00C9                     l4664:	
 11894                           ;sb330_app.c: 157: case ((UINT8)(0x61)):
 11895                           
 11896                           
 11897                           ;sb330_app.c: 159: SetBuffer(TemperatureStr,'0',5);
 11898  00C9  3030               	movlw	48
 11899  00CA  0020               	movlb	0	; select bank0
 11900  00CB  00B8               	movwf	??_ManageProtocol
 11901  00CC  0838               	movf	??_ManageProtocol,w
 11902  00CD  00A0               	movwf	SetBuffer@Value
 11903  00CE  3005               	movlw	5
 11904  00CF  00A1               	movwf	SetBuffer@Len
 11905  00D0  3000               	movlw	0
 11906  00D1  00A2               	movwf	SetBuffer@Len+1
 11907  00D2  30CE               	movlw	(low (_TemperatureStr| 0))& (0+255)
 11908  00D3  3197  27E2  3180   	fcall	_SetBuffer
 11909                           
 11910                           ;sb330_app.c: 161: itoa(TemperatureIntStr,TemperatureInt,10);
 11911  00D6  0021               	movlb	1	; select bank1
 11912  00D7  083A               	movf	_TemperatureInt^(0+128),w
 11913  00D8  0020               	movlb	0	; select bank0
 11914  00D9  00B0               	movwf	itoa@val
 11915  00DA  01B1               	clrf	itoa@val+1
 11916  00DB  1BB0               	btfsc	itoa@val,7
 11917  00DC  03B1               	decf	itoa@val+1,f
 11918  00DD  300A               	movlw	10
 11919  00DE  00B2               	movwf	itoa@base
 11920  00DF  3000               	movlw	0
 11921  00E0  00B3               	movwf	itoa@base+1
 11922  00E1  30DC               	movlw	(low (_TemperatureIntStr| 0))& (0+255)
 11923  00E2  3188  20C3  3180   	fcall	_itoa
 11924                           
 11925                           ;sb330_app.c: 162: itoa(TemperatureDecStr,TemperatureDec,10);
 11926  00E5  0021               	movlb	1	; select bank1
 11927  00E6  0839               	movf	_TemperatureDec^(0+128),w
 11928  00E7  0020               	movlb	0	; select bank0
 11929  00E8  00B8               	movwf	??_ManageProtocol
 11930  00E9  01B9               	clrf	??_ManageProtocol+1
 11931  00EA  0838               	movf	??_ManageProtocol,w
 11932  00EB  00B0               	movwf	itoa@val
 11933  00EC  0839               	movf	??_ManageProtocol+1,w
 11934  00ED  00B1               	movwf	itoa@val+1
 11935  00EE  300A               	movlw	10
 11936  00EF  00B2               	movwf	itoa@base
 11937  00F0  3000               	movlw	0
 11938  00F1  00B3               	movwf	itoa@base+1
 11939  00F2  30D9               	movlw	(low (_TemperatureDecStr| 0))& (0+255)
 11940  00F3  3188  20C3  3180   	fcall	_itoa
 11941                           
 11942                           ;sb330_app.c: 163: strcpy(TemperatureStr,TemperatureIntStr);
 11943  00F6  30DC               	movlw	(low (_TemperatureIntStr| 0))& (0+255)
 11944  00F7  0020               	movlb	0	; select bank0
 11945  00F8  00B8               	movwf	??_ManageProtocol
 11946  00F9  0838               	movf	??_ManageProtocol,w
 11947  00FA  00F4               	movwf	strcpy@from
 11948  00FB  30CE               	movlw	(low (_TemperatureStr| 0))& (0+255)
 11949  00FC  3197  278F  3180   	fcall	_strcpy
 11950                           
 11951                           ;sb330_app.c: 164: strcat(TemperatureStr,".");
 11952  00FF  3028               	movlw	low (STR_6| (0+32768))
 11953  0100  00F4               	movwf	strcat@from
 11954  0101  3098               	movlw	high (STR_6| (0+32768))
 11955  0102  00F5               	movwf	strcat@from+1
 11956  0103  30CE               	movlw	(low (_TemperatureStr| 0))& (0+255)
 11957  0104  3188  20E7  3180   	fcall	_strcat
 11958                           
 11959                           ;sb330_app.c: 165: strcat(TemperatureStr,TemperatureDecStr);
 11960  0107  30D9               	movlw	low _TemperatureDecStr
 11961  0108  00F4               	movwf	strcat@from
 11962  0109  3000               	movlw	high _TemperatureDecStr
 11963  010A  00F5               	movwf	strcat@from+1
 11964  010B  30CE               	movlw	(low (_TemperatureStr| 0))& (0+255)
 11965  010C  3188  20E7  3180   	fcall	_strcat
 11966                           
 11967                           ;sb330_app.c: 167: __builtin_memcpy(RepBuffer,TemperatureStr,((UINT8)(5)));
 11968  010F  30CE               	movlw	low (_TemperatureStr| 0)
 11969  0110  0084               	movwf	4
 11970  0111  0185               	clrf	5
 11971  0112  3005               	movlw	5
 11972  0113  0020               	movlb	0	; select bank0
 11973  0114  00B8               	movwf	??_ManageProtocol
 11974  0115  0838               	movf	??_ManageProtocol,w
 11975  0116  1903               	skipnz
 11976  0117  2921               	goto	l4674
 11977  0118  3020               	movlw	low (_RepBuffer| (0+512))
 11978  0119  0086               	movwf	6
 11979  011A  3002               	movlw	2	; select bank4/5
 11980  011B  0087               	movwf	7
 11981  011C                     u378m0:	
 11982  011C  0012               	moviw fsr0++
 11983  011D  001E               	movwi fsr1++
 11984  011E  0020               	movlb	0	; select bank0
 11985  011F  0BB8               	decfsz	??_ManageProtocol,f
 11986  0120  291C               	goto	u378m0
 11987  0121                     l4674:	
 11988                           
 11989                           ;sb330_app.c: 169: RepBufferLen = ((UINT8)(5));
 11990  0121  3005               	movlw	5
 11991  0122  0020               	movlb	0	; select bank0
 11992  0123  00B8               	movwf	??_ManageProtocol
 11993  0124  0838               	movf	??_ManageProtocol,w
 11994  0125  0021               	movlb	1	; select bank1
 11995  0126  00C0               	movwf	_RepBufferLen^(0+128)
 11996                           
 11997                           ;sb330_app.c: 171: GenerateEvt(&I2cReplyPacketReady);
 11998  0127  3077               	movlw	(low (_I2cReplyPacketReady| 0))& (0+255)
 11999  0128  3188  207E         	fcall	_GenerateEvt
 12000                           
 12001                           ;sb330_app.c: 172: break;
 12002  012A  0008               	return
 12003  012B                     l4678:	
 12004                           ;sb330_app.c: 174: case ((UINT8)(0x62)):
 12005                           
 12006                           
 12007                           ;sb330_app.c: 176: RepBuffer[((UINT8)(0))] = HumidityInt;
 12008  012B  0021               	movlb	1	; select bank1
 12009  012C  0838               	movf	_HumidityInt^(0+128),w
 12010  012D  0020               	movlb	0	; select bank0
 12011  012E  00B8               	movwf	??_ManageProtocol
 12012  012F  0838               	movf	??_ManageProtocol,w
 12013  0130  0024               	movlb	4	; select bank4
 12014  0131  00A0               	movwf	_RepBuffer^(0+512)
 12015                           
 12016                           ;sb330_app.c: 177: RepBuffer[((UINT8)(1))] = HumidityDec;
 12017  0132  0021               	movlb	1	; select bank1
 12018  0133  0837               	movf	_HumidityDec^(0+128),w
 12019  0134  0020               	movlb	0	; select bank0
 12020  0135  00B8               	movwf	??_ManageProtocol
 12021  0136  0838               	movf	??_ManageProtocol,w
 12022  0137  0024               	movlb	4	; select bank4
 12023  0138  00A1               	movwf	(_RepBuffer^(0+512)+1)
 12024                           
 12025                           ;sb330_app.c: 179: RepBufferLen = ((UINT8)(2));
 12026  0139  3002               	movlw	2
 12027  013A  0020               	movlb	0	; select bank0
 12028  013B  00B8               	movwf	??_ManageProtocol
 12029  013C  0838               	movf	??_ManageProtocol,w
 12030  013D  0021               	movlb	1	; select bank1
 12031  013E  00C0               	movwf	_RepBufferLen^(0+128)
 12032                           
 12033                           ;sb330_app.c: 181: GenerateEvt(&I2cReplyPacketReady);
 12034  013F  3077               	movlw	(low (_I2cReplyPacketReady| 0))& (0+255)
 12035  0140  3188  207E         	fcall	_GenerateEvt
 12036                           
 12037                           ;sb330_app.c: 182: break;
 12038  0142  0008               	return
 12039  0143                     l4682:	
 12040                           ;sb330_app.c: 184: case ((UINT8)(0x63)):
 12041                           
 12042                           
 12043                           ;sb330_app.c: 186: SetBuffer(HumidityStr,'0',5);
 12044  0143  3030               	movlw	48
 12045  0144  0020               	movlb	0	; select bank0
 12046  0145  00B8               	movwf	??_ManageProtocol
 12047  0146  0838               	movf	??_ManageProtocol,w
 12048  0147  00A0               	movwf	SetBuffer@Value
 12049  0148  3005               	movlw	5
 12050  0149  00A1               	movwf	SetBuffer@Len
 12051  014A  3000               	movlw	0
 12052  014B  00A2               	movwf	SetBuffer@Len+1
 12053  014C  30C9               	movlw	(low (_HumidityStr| 0))& (0+255)
 12054  014D  3197  27E2  3180   	fcall	_SetBuffer
 12055                           
 12056                           ;sb330_app.c: 188: itoa(HumidityIntStr,HumidityInt,10);
 12057  0150  0021               	movlb	1	; select bank1
 12058  0151  0838               	movf	_HumidityInt^(0+128),w
 12059  0152  0020               	movlb	0	; select bank0
 12060  0153  00B8               	movwf	??_ManageProtocol
 12061  0154  01B9               	clrf	??_ManageProtocol+1
 12062  0155  0838               	movf	??_ManageProtocol,w
 12063  0156  00B0               	movwf	itoa@val
 12064  0157  0839               	movf	??_ManageProtocol+1,w
 12065  0158  00B1               	movwf	itoa@val+1
 12066  0159  300A               	movlw	10
 12067  015A  00B2               	movwf	itoa@base
 12068  015B  3000               	movlw	0
 12069  015C  00B3               	movwf	itoa@base+1
 12070  015D  30D6               	movlw	(low (_HumidityIntStr| 0))& (0+255)
 12071  015E  3188  20C3  3180   	fcall	_itoa
 12072                           
 12073                           ;sb330_app.c: 189: itoa(HumidityDecStr,HumidityDec,10);
 12074  0161  0021               	movlb	1	; select bank1
 12075  0162  0837               	movf	_HumidityDec^(0+128),w
 12076  0163  0020               	movlb	0	; select bank0
 12077  0164  00B8               	movwf	??_ManageProtocol
 12078  0165  01B9               	clrf	??_ManageProtocol+1
 12079  0166  0838               	movf	??_ManageProtocol,w
 12080  0167  00B0               	movwf	itoa@val
 12081  0168  0839               	movf	??_ManageProtocol+1,w
 12082  0169  00B1               	movwf	itoa@val+1
 12083  016A  300A               	movlw	10
 12084  016B  00B2               	movwf	itoa@base
 12085  016C  3000               	movlw	0
 12086  016D  00B3               	movwf	itoa@base+1
 12087  016E  30D3               	movlw	(low (_HumidityDecStr| 0))& (0+255)
 12088  016F  3188  20C3  3180   	fcall	_itoa
 12089                           
 12090                           ;sb330_app.c: 190: strcpy(HumidityStr,HumidityIntStr);
 12091  0172  30D6               	movlw	(low (_HumidityIntStr| 0))& (0+255)
 12092  0173  0020               	movlb	0	; select bank0
 12093  0174  00B8               	movwf	??_ManageProtocol
 12094  0175  0838               	movf	??_ManageProtocol,w
 12095  0176  00F4               	movwf	strcpy@from
 12096  0177  30C9               	movlw	(low (_HumidityStr| 0))& (0+255)
 12097  0178  3197  278F  3180   	fcall	_strcpy
 12098                           
 12099                           ;sb330_app.c: 191: strcat(HumidityStr,".");
 12100  017B  3028               	movlw	low (STR_6| (0+32768))
 12101  017C  00F4               	movwf	strcat@from
 12102  017D  3098               	movlw	high (STR_6| (0+32768))
 12103  017E  00F5               	movwf	strcat@from+1
 12104  017F  30C9               	movlw	(low (_HumidityStr| 0))& (0+255)
 12105  0180  3188  20E7  3180   	fcall	_strcat
 12106                           
 12107                           ;sb330_app.c: 192: strcat(HumidityStr,HumidityDecStr);
 12108  0183  30D3               	movlw	low _HumidityDecStr
 12109  0184  00F4               	movwf	strcat@from
 12110  0185  3000               	movlw	high _HumidityDecStr
 12111  0186  00F5               	movwf	strcat@from+1
 12112  0187  30C9               	movlw	(low (_HumidityStr| 0))& (0+255)
 12113  0188  3188  20E7  3180   	fcall	_strcat
 12114                           
 12115                           ;sb330_app.c: 194: __builtin_memcpy(RepBuffer,HumidityStr,((UINT8)(4)));
 12116  018B  30C9               	movlw	low (_HumidityStr| 0)
 12117  018C  0084               	movwf	4
 12118  018D  0185               	clrf	5
 12119  018E  3004               	movlw	4
 12120  018F  0020               	movlb	0	; select bank0
 12121  0190  00B8               	movwf	??_ManageProtocol
 12122  0191  0838               	movf	??_ManageProtocol,w
 12123  0192  1903               	skipnz
 12124  0193  299D               	goto	l4692
 12125  0194  3020               	movlw	low (_RepBuffer| (0+512))
 12126  0195  0086               	movwf	6
 12127  0196  3002               	movlw	2	; select bank4/5
 12128  0197  0087               	movwf	7
 12129  0198                     u379m0:	
 12130  0198  0012               	moviw fsr0++
 12131  0199  001E               	movwi fsr1++
 12132  019A  0020               	movlb	0	; select bank0
 12133  019B  0BB8               	decfsz	??_ManageProtocol,f
 12134  019C  2998               	goto	u379m0
 12135  019D                     l4692:	
 12136                           
 12137                           ;sb330_app.c: 196: RepBufferLen = ((UINT8)(4));
 12138  019D  3004               	movlw	4
 12139  019E  0020               	movlb	0	; select bank0
 12140  019F  00B8               	movwf	??_ManageProtocol
 12141  01A0  0838               	movf	??_ManageProtocol,w
 12142  01A1  0021               	movlb	1	; select bank1
 12143  01A2  00C0               	movwf	_RepBufferLen^(0+128)
 12144                           
 12145                           ;sb330_app.c: 198: GenerateEvt(&I2cReplyPacketReady);
 12146  01A3  3077               	movlw	(low (_I2cReplyPacketReady| 0))& (0+255)
 12147  01A4  3188  207E         	fcall	_GenerateEvt
 12148                           
 12149                           ;sb330_app.c: 199: break;
 12150  01A6  0008               	return
 12151  01A7                     l4696:	
 12152                           ;sb330_app.c: 201: case ((UINT8)(0x64)):
 12153                           
 12154                           
 12155                           ;sb330_app.c: 203: RepBuffer[((UINT8)(0))] = ChecksumSts;
 12156  01A7  0021               	movlb	1	; select bank1
 12157  01A8  0836               	movf	_ChecksumSts^(0+128),w
 12158  01A9  0020               	movlb	0	; select bank0
 12159  01AA  00B8               	movwf	??_ManageProtocol
 12160  01AB  0838               	movf	??_ManageProtocol,w
 12161  01AC  0024               	movlb	4	; select bank4
 12162  01AD  00A0               	movwf	_RepBuffer^(0+512)
 12163                           
 12164                           ;sb330_app.c: 205: RepBufferLen = ((UINT8)(1));
 12165  01AE  0021               	movlb	1	; select bank1
 12166  01AF  01C0               	clrf	_RepBufferLen^(0+128)
 12167  01B0  0AC0               	incf	_RepBufferLen^(0+128),f
 12168                           
 12169                           ;sb330_app.c: 207: GenerateEvt(&I2cReplyPacketReady);
 12170  01B1  3077               	movlw	(low (_I2cReplyPacketReady| 0))& (0+255)
 12171  01B2  3188  207E         	fcall	_GenerateEvt
 12172                           
 12173                           ;sb330_app.c: 212: }
 12174                           
 12175                           ;sb330_app.c: 211: break;
 12176                           
 12177                           ;sb330_app.c: 210: default:
 12178                           
 12179                           ;sb330_app.c: 208: break;
 12180  01B4  0008               	return
 12181  01B5                     l4704:	
 12182  01B5  0025               	movlb	5	; select bank5
 12183  01B6  0820               	movf	_CmdBuffer^(0+640),w
 12184                           
 12185                           ; Switch size 1, requested type "space"
 12186                           ; Number of cases is 5, Range of values is 96 to 100
 12187                           ; switch strategies available:
 12188                           ; Name         Instructions Cycles
 12189                           ; simple_byte           16     9 (average)
 12190                           ; direct_byte           19     9 (fixed)
 12191                           ; jumptable            263     9 (fixed)
 12192                           ;	Chosen strategy is simple_byte
 12193  01B7  3A60               	xorlw	96	; case 96
 12194  01B8  1903               	skipnz
 12195  01B9  28B1               	goto	l4660
 12196  01BA  3A01               	xorlw	1	; case 97
 12197  01BB  1903               	skipnz
 12198  01BC  28C9               	goto	l4664
 12199  01BD  3A03               	xorlw	3	; case 98
 12200  01BE  1903               	skipnz
 12201  01BF  292B               	goto	l4678
 12202  01C0  3A01               	xorlw	1	; case 99
 12203  01C1  1903               	skipnz
 12204  01C2  2943               	goto	l4682
 12205  01C3  3A07               	xorlw	7	; case 100
 12206  01C4  1903               	skipnz
 12207  01C5  29A7               	goto	l4696
 12208  01C6  29C8               	goto	l967
 12209  01C7  0008               	return
 12210  01C8                     l967:	
 12211  01C8  0008               	return
 12212  01C9                     __end_of_ManageProtocol:	
 12213                           
 12214                           	psect	text54
 12215  178F                     __ptext54:	
 12216 ;; *************** function _strcpy *****************
 12217 ;; Defined at:
 12218 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\strcpy.c"
 12219 ;; Parameters:    Size  Location     Type
 12220 ;;  to              1    wreg     PTR unsigned char 
 12221 ;;		 -> HumidityStr(5), TemperatureStr(5), 
 12222 ;;  from            1    4[COMMON] PTR const unsigned char 
 12223 ;;		 -> HumidityIntStr(3), TemperatureIntStr(3), 
 12224 ;; Auto vars:     Size  Location     Type
 12225 ;;  to              1    1[BANK0 ] PTR unsigned char 
 12226 ;;		 -> HumidityStr(5), TemperatureStr(5), 
 12227 ;;  cp              1    0[BANK0 ] PTR unsigned char 
 12228 ;;		 -> HumidityStr(5), TemperatureStr(5), 
 12229 ;; Return value:  Size  Location     Type
 12230 ;;                  1    wreg      PTR unsigned char 
 12231 ;; Registers used:
 12232 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0
 12233 ;; Tracked objects:
 12234 ;;		On entry : 0/0
 12235 ;;		On exit  : 0/0
 12236 ;;		Unchanged: 0/0
 12237 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12238 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12239 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12240 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12241 ;;      Totals:         2       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12242 ;;Total ram usage:        4 bytes
 12243 ;; Hardware stack levels used:    1
 12244 ;; Hardware stack levels required when called:    2
 12245 ;; This function calls:
 12246 ;;		Nothing
 12247 ;; This function is called by:
 12248 ;;		_ManageProtocol
 12249 ;; This function uses a non-reentrant model
 12250 ;;
 12251                           
 12252                           
 12253                           ;psect for function _strcpy
 12254  178F                     _strcpy:	
 12255                           
 12256                           ;incstack = 0
 12257                           ; Regs used in _strcpy: [wreg-fsr1h+status,2+status,0]
 12258                           ;strcpy@to stored from wreg
 12259  178F  0020               	movlb	0	; select bank0
 12260  1790  00A1               	movwf	strcpy@to
 12261  1791  0821               	movf	strcpy@to,w
 12262  1792  00F5               	movwf	??_strcpy
 12263  1793  0875               	movf	??_strcpy,w
 12264  1794  00A0               	movwf	strcpy@cp
 12265  1795                     l4516:	
 12266  1795  0820               	movf	strcpy@cp,w
 12267  1796  0086               	movwf	6
 12268  1797  0187               	clrf	7
 12269  1798  0874               	movf	strcpy@from,w
 12270  1799  0084               	movwf	4
 12271  179A  0185               	clrf	5
 12272  179B  0800               	movf	0,w
 12273  179C  3FC0               	movwi [0]fsr1
 12274  179D  0889               	movf	9,f
 12275  179E  1903               	btfsc	3,2
 12276  179F  0008               	return
 12277  17A0  3001               	movlw	1
 12278  17A1  00F5               	movwf	??_strcpy
 12279  17A2  0875               	movf	??_strcpy,w
 12280  17A3  07A0               	addwf	strcpy@cp,f
 12281  17A4  3001               	movlw	1
 12282  17A5  00F5               	movwf	??_strcpy
 12283  17A6  0875               	movf	??_strcpy,w
 12284  17A7  07F4               	addwf	strcpy@from,f
 12285  17A8  2F95               	goto	l4516
 12286  17A9                     __end_of_strcpy:	
 12287                           ;	Return value of _strcpy is never used
 12288                           
 12289                           
 12290                           	psect	text55
 12291  08E7                     __ptext55:	
 12292 ;; *************** function _strcat *****************
 12293 ;; Defined at:
 12294 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\strcat.c"
 12295 ;; Parameters:    Size  Location     Type
 12296 ;;  to              1    wreg     PTR unsigned char 
 12297 ;;		 -> HumidityStr(5), TemperatureStr(5), 
 12298 ;;  from            2    4[COMMON] PTR const unsigned char 
 12299 ;;		 -> STR_7(2), HumidityDecStr(3), STR_6(2), TemperatureDecStr(3), 
 12300 ;; Auto vars:     Size  Location     Type
 12301 ;;  to              1    1[BANK0 ] PTR unsigned char 
 12302 ;;		 -> HumidityStr(5), TemperatureStr(5), 
 12303 ;;  cp              1    2[BANK0 ] PTR unsigned char 
 12304 ;;		 -> HumidityStr(5), TemperatureStr(5), 
 12305 ;; Return value:  Size  Location     Type
 12306 ;;                  1    wreg      PTR unsigned char 
 12307 ;; Registers used:
 12308 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath
 12309 ;; Tracked objects:
 12310 ;;		On entry : 0/0
 12311 ;;		On exit  : 0/0
 12312 ;;		Unchanged: 0/0
 12313 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12314 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12315 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12316 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12317 ;;      Totals:         2       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12318 ;;Total ram usage:        5 bytes
 12319 ;; Hardware stack levels used:    1
 12320 ;; Hardware stack levels required when called:    2
 12321 ;; This function calls:
 12322 ;;		Nothing
 12323 ;; This function is called by:
 12324 ;;		_ManageProtocol
 12325 ;; This function uses a non-reentrant model
 12326 ;;
 12327                           
 12328                           
 12329                           ;psect for function _strcat
 12330  08E7                     _strcat:	
 12331                           
 12332                           ;incstack = 0
 12333                           ; Regs used in _strcat: [wreg-fsr1h+status,2+status,0+pclath]
 12334                           ;strcat@to stored from wreg
 12335  08E7  0020               	movlb	0	; select bank0
 12336  08E8  00A1               	movwf	strcat@to
 12337  08E9  0821               	movf	strcat@to,w
 12338  08EA  00A0               	movwf	??_strcat
 12339  08EB  0820               	movf	??_strcat,w
 12340  08EC  00A2               	movwf	strcat@cp
 12341  08ED                     l4522:	
 12342  08ED  0822               	movf	strcat@cp,w
 12343  08EE  0086               	movwf	6
 12344  08EF  0187               	clrf	7
 12345  08F0  0801               	movf	1,w
 12346  08F1  1903               	btfsc	3,2
 12347  08F2  2900               	goto	l4528
 12348  08F3  3001               	movlw	1
 12349  08F4  00A0               	movwf	??_strcat
 12350  08F5  0820               	movf	??_strcat,w
 12351  08F6  07A2               	addwf	strcat@cp,f
 12352  08F7  28ED               	goto	l4522
 12353  08F8                     l4524:	
 12354  08F8  3001               	movlw	1
 12355  08F9  00A0               	movwf	??_strcat
 12356  08FA  0820               	movf	??_strcat,w
 12357  08FB  07A2               	addwf	strcat@cp,f
 12358  08FC  3001               	movlw	1
 12359  08FD  07F4               	addwf	strcat@from,f
 12360  08FE  3000               	movlw	0
 12361  08FF  3DF5               	addwfc	strcat@from+1,f
 12362  0900                     l4528:	
 12363  0900  0822               	movf	strcat@cp,w
 12364  0901  0086               	movwf	6
 12365  0902  0187               	clrf	7
 12366  0903  0874               	movf	strcat@from,w
 12367  0904  0084               	movwf	4
 12368  0905  0875               	movf	strcat@from+1,w
 12369  0906  0085               	movwf	5
 12370  0907  0800               	movf	0,w	;code access
 12371  0908  3FC0               	movwi [0]fsr1
 12372  0909  0889               	movf	9,f
 12373  090A  1903               	btfsc	3,2
 12374  090B  0008               	return
 12375  090C  28F8               	goto	l4524
 12376  090D                     __end_of_strcat:	
 12377                           ;	Return value of _strcat is never used
 12378                           
 12379                           
 12380                           	psect	text56
 12381  08C3                     __ptext56:	
 12382 ;; *************** function _itoa *****************
 12383 ;; Defined at:
 12384 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\itoa.c"
 12385 ;; Parameters:    Size  Location     Type
 12386 ;;  buf             1    wreg     PTR unsigned char 
 12387 ;;		 -> HumidityDecStr(3), HumidityIntStr(3), TemperatureDecStr(3), TemperatureIntStr(3), 
 12388 ;;  val             2   16[BANK0 ] int 
 12389 ;;  base            2   18[BANK0 ] int 
 12390 ;; Auto vars:     Size  Location     Type
 12391 ;;  buf             1   22[BANK0 ] PTR unsigned char 
 12392 ;;		 -> HumidityDecStr(3), HumidityIntStr(3), TemperatureDecStr(3), TemperatureIntStr(3), 
 12393 ;;  cp              1   21[BANK0 ] PTR unsigned char 
 12394 ;;		 -> HumidityDecStr(3), HumidityIntStr(3), TemperatureDecStr(3), TemperatureIntStr(3), 
 12395 ;; Return value:  Size  Location     Type
 12396 ;;                  1    wreg      PTR unsigned char 
 12397 ;; Registers used:
 12398 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12399 ;; Tracked objects:
 12400 ;;		On entry : 0/0
 12401 ;;		On exit  : 0/0
 12402 ;;		Unchanged: 0/0
 12403 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12404 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12405 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12406 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12407 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12408 ;;Total ram usage:        7 bytes
 12409 ;; Hardware stack levels used:    1
 12410 ;; Hardware stack levels required when called:    4
 12411 ;; This function calls:
 12412 ;;		_utoa
 12413 ;; This function is called by:
 12414 ;;		_ManageProtocol
 12415 ;; This function uses a non-reentrant model
 12416 ;;
 12417                           
 12418                           
 12419                           ;psect for function _itoa
 12420  08C3                     _itoa:	
 12421                           
 12422                           ;incstack = 0
 12423                           ; Regs used in _itoa: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 12424                           ;itoa@buf stored from wreg
 12425  08C3  0020               	movlb	0	; select bank0
 12426  08C4  00B6               	movwf	itoa@buf
 12427  08C5  0836               	movf	itoa@buf,w
 12428  08C6  00B4               	movwf	??_itoa
 12429  08C7  0834               	movf	??_itoa,w
 12430  08C8  00B5               	movwf	itoa@cp
 12431  08C9  1FB1               	btfss	itoa@val+1,7
 12432  08CA  28DB               	goto	l4508
 12433  08CB  302D               	movlw	45
 12434  08CC  00B4               	movwf	??_itoa
 12435  08CD  0836               	movf	itoa@buf,w
 12436  08CE  0086               	movwf	6
 12437  08CF  0187               	clrf	7
 12438  08D0  0834               	movf	??_itoa,w
 12439  08D1  0081               	movwf	1
 12440  08D2  3001               	movlw	1
 12441  08D3  00B4               	movwf	??_itoa
 12442  08D4  0834               	movf	??_itoa,w
 12443  08D5  07B6               	addwf	itoa@buf,f
 12444  08D6  09B0               	comf	itoa@val,f
 12445  08D7  09B1               	comf	itoa@val+1,f
 12446  08D8  0AB0               	incf	itoa@val,f
 12447  08D9  1903               	skipnz
 12448  08DA  0AB1               	incf	itoa@val+1,f
 12449  08DB                     l4508:	
 12450  08DB  0831               	movf	itoa@val+1,w
 12451  08DC  00A8               	movwf	utoa@val+1
 12452  08DD  0830               	movf	itoa@val,w
 12453  08DE  00A7               	movwf	utoa@val
 12454  08DF  0833               	movf	itoa@base+1,w
 12455  08E0  00AA               	movwf	utoa@base+1
 12456  08E1  0832               	movf	itoa@base,w
 12457  08E2  00A9               	movwf	utoa@base
 12458  08E3  0836               	movf	itoa@buf,w
 12459  08E4  318D  2511         	fcall	_utoa
 12460  08E6  0008               	return
 12461  08E7                     __end_of_itoa:	
 12462                           ;	Return value of _itoa is never used
 12463                           
 12464                           
 12465                           	psect	text57
 12466  03F1                     __ptext57:	
 12467 ;; *************** function _StdS_ManageStdServices *****************
 12468 ;; Defined at:
 12469 ;;		line 212 in file "../../../Framework/MercuryFwk/Source/c/03_Sml/02_Ssl/std_ser.c"
 12470 ;; Parameters:    Size  Location     Type
 12471 ;;		None
 12472 ;; Auto vars:     Size  Location     Type
 12473 ;;  DieTempStr      4   18[BANK0 ] unsigned char [4]
 12474 ;;  DieTemp         2   22[BANK0 ] unsigned short 
 12475 ;; Return value:  Size  Location     Type
 12476 ;;                  1    wreg      void 
 12477 ;; Registers used:
 12478 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12479 ;; Tracked objects:
 12480 ;;		On entry : 0/0
 12481 ;;		On exit  : 0/0
 12482 ;;		Unchanged: 0/0
 12483 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12484 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12485 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12486 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12487 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12488 ;;Total ram usage:        8 bytes
 12489 ;; Hardware stack levels used:    1
 12490 ;; Hardware stack levels required when called:    4
 12491 ;; This function calls:
 12492 ;;		_BoardReset
 12493 ;;		_ControlLedDirect
 12494 ;;		_GenerateEvt
 12495 ;;		_GetDieTemperature
 12496 ;;		_LowPowerMode
 12497 ;;		_SetLedBehavSts
 12498 ;;		_StringCopy
 12499 ;;		_utoa
 12500 ;; This function is called by:
 12501 ;;		_ManageProtocol
 12502 ;; This function uses a non-reentrant model
 12503 ;;
 12504                           
 12505                           
 12506                           ;psect for function _StdS_ManageStdServices
 12507  03F1                     _StdS_ManageStdServices:	
 12508                           
 12509                           ;std_ser.c: 214: UINT16 DieTemp;
 12510                           ;std_ser.c: 215: UINT8 DieTempStr[4];
 12511                           ;std_ser.c: 218: switch (CmdBuffer[((UINT8)(0))])
 12512                           
 12513                           ;incstack = 0
 12514                           ; Regs used in _StdS_ManageStdServices: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 12515  03F1  2CC3               	goto	l4496
 12516  03F2                     l4440:	
 12517                           ;std_ser.c: 219: {
 12518                           ;std_ser.c: 220: case ((UINT8)(0x10)):
 12519                           
 12520                           
 12521                           ;std_ser.c: 222: StringCopy((void*)("ECHO"),RepBuffer,((UINT8)(4)));
 12522  03F2  3023               	movlw	low (STR_2| (0+32768))
 12523  03F3  0020               	movlb	0	; select bank0
 12524  03F4  00A0               	movwf	StringCopy@SourceStr
 12525  03F5  3098               	movlw	high (STR_2| (0+32768))
 12526  03F6  00A1               	movwf	StringCopy@SourceStr+1
 12527  03F7  3020               	movlw	(low (_RepBuffer| (0+512)))& (0+255)
 12528  03F8  00B0               	movwf	??_StdS_ManageStdServices
 12529  03F9  0830               	movf	??_StdS_ManageStdServices,w
 12530  03FA  00A2               	movwf	StringCopy@DestStr
 12531  03FB  3004               	movlw	4
 12532  03FC  00B1               	movwf	??_StdS_ManageStdServices+1
 12533  03FD  0831               	movf	??_StdS_ManageStdServices+1,w
 12534  03FE  00A3               	movwf	StringCopy@Len
 12535  03FF  3188  20A0  3183   	fcall	_StringCopy
 12536                           
 12537                           ;std_ser.c: 224: RepBufferLen = ((UINT8)(4));
 12538  0402  3004               	movlw	4
 12539  0403  0020               	movlb	0	; select bank0
 12540  0404  00B0               	movwf	??_StdS_ManageStdServices
 12541  0405  0830               	movf	??_StdS_ManageStdServices,w
 12542  0406  0021               	movlb	1	; select bank1
 12543  0407  00C0               	movwf	_RepBufferLen^(0+128)
 12544                           
 12545                           ;std_ser.c: 226: GenerateEvt(&I2cReplyPacketReady);
 12546  0408  3077               	movlw	(low (_I2cReplyPacketReady| 0))& (0+255)
 12547  0409  3188  207E         	fcall	_GenerateEvt
 12548                           
 12549                           ;std_ser.c: 227: break;
 12550  040B  0008               	return
 12551  040C                     l4446:	
 12552                           ;std_ser.c: 229: case ((UINT8)(0x20)):
 12553                           
 12554                           
 12555                           ;std_ser.c: 231: StringCopy((void*)"SB330",RepBuffer,((UINT8)(5)));
 12556  040C  301D               	movlw	low (STR_3| (0+32768))
 12557  040D  0020               	movlb	0	; select bank0
 12558  040E  00A0               	movwf	StringCopy@SourceStr
 12559  040F  3098               	movlw	high (STR_3| (0+32768))
 12560  0410  00A1               	movwf	StringCopy@SourceStr+1
 12561  0411  3020               	movlw	(low (_RepBuffer| (0+512)))& (0+255)
 12562  0412  00B0               	movwf	??_StdS_ManageStdServices
 12563  0413  0830               	movf	??_StdS_ManageStdServices,w
 12564  0414  00A2               	movwf	StringCopy@DestStr
 12565  0415  3005               	movlw	5
 12566  0416  00B1               	movwf	??_StdS_ManageStdServices+1
 12567  0417  0831               	movf	??_StdS_ManageStdServices+1,w
 12568  0418  00A3               	movwf	StringCopy@Len
 12569  0419  3188  20A0  3183   	fcall	_StringCopy
 12570                           
 12571                           ;std_ser.c: 233: RepBufferLen = ((UINT8)(5));
 12572  041C  3005               	movlw	5
 12573  041D  0020               	movlb	0	; select bank0
 12574  041E  00B0               	movwf	??_StdS_ManageStdServices
 12575  041F  0830               	movf	??_StdS_ManageStdServices,w
 12576  0420  0021               	movlb	1	; select bank1
 12577  0421  00C0               	movwf	_RepBufferLen^(0+128)
 12578                           
 12579                           ;std_ser.c: 235: GenerateEvt(&I2cReplyPacketReady);
 12580  0422  3077               	movlw	(low (_I2cReplyPacketReady| 0))& (0+255)
 12581  0423  3188  207E         	fcall	_GenerateEvt
 12582                           
 12583                           ;std_ser.c: 236: break;
 12584  0425  0008               	return
 12585  0426                     l4452:	
 12586                           ;std_ser.c: 238: case ((UINT8)(0x21)):
 12587                           
 12588                           
 12589                           ;std_ser.c: 240: StringCopy((void*)"01.01.00",RepBuffer,((UINT8)(8)));
 12590  0426  3002               	movlw	low (STR_4| (0+32768))
 12591  0427  0020               	movlb	0	; select bank0
 12592  0428  00A0               	movwf	StringCopy@SourceStr
 12593  0429  3098               	movlw	high (STR_4| (0+32768))
 12594  042A  00A1               	movwf	StringCopy@SourceStr+1
 12595  042B  3020               	movlw	(low (_RepBuffer| (0+512)))& (0+255)
 12596  042C  00B0               	movwf	??_StdS_ManageStdServices
 12597  042D  0830               	movf	??_StdS_ManageStdServices,w
 12598  042E  00A2               	movwf	StringCopy@DestStr
 12599  042F  3008               	movlw	8
 12600  0430  00B1               	movwf	??_StdS_ManageStdServices+1
 12601  0431  0831               	movf	??_StdS_ManageStdServices+1,w
 12602  0432  00A3               	movwf	StringCopy@Len
 12603  0433  3188  20A0  3183   	fcall	_StringCopy
 12604                           
 12605                           ;std_ser.c: 242: RepBufferLen = ((UINT8)(8));
 12606  0436  3008               	movlw	8
 12607  0437  0020               	movlb	0	; select bank0
 12608  0438  00B0               	movwf	??_StdS_ManageStdServices
 12609  0439  0830               	movf	??_StdS_ManageStdServices,w
 12610  043A  0021               	movlb	1	; select bank1
 12611  043B  00C0               	movwf	_RepBufferLen^(0+128)
 12612                           
 12613                           ;std_ser.c: 244: GenerateEvt(&I2cReplyPacketReady);
 12614  043C  3077               	movlw	(low (_I2cReplyPacketReady| 0))& (0+255)
 12615  043D  3188  207E         	fcall	_GenerateEvt
 12616                           
 12617                           ;std_ser.c: 245: break;
 12618  043F  0008               	return
 12619  0440                     l4458:	
 12620                           ;std_ser.c: 247: case ((UINT8)(0x22)):
 12621                           
 12622                           
 12623                           ;std_ser.c: 249: StringCopy((void*)"01.01.00",RepBuffer,((UINT8)(8)));
 12624  0440  3002               	movlw	low (STR_4| (0+32768))
 12625  0441  0020               	movlb	0	; select bank0
 12626  0442  00A0               	movwf	StringCopy@SourceStr
 12627  0443  3098               	movlw	high (STR_4| (0+32768))
 12628  0444  00A1               	movwf	StringCopy@SourceStr+1
 12629  0445  3020               	movlw	(low (_RepBuffer| (0+512)))& (0+255)
 12630  0446  00B0               	movwf	??_StdS_ManageStdServices
 12631  0447  0830               	movf	??_StdS_ManageStdServices,w
 12632  0448  00A2               	movwf	StringCopy@DestStr
 12633  0449  3008               	movlw	8
 12634  044A  00B1               	movwf	??_StdS_ManageStdServices+1
 12635  044B  0831               	movf	??_StdS_ManageStdServices+1,w
 12636  044C  00A3               	movwf	StringCopy@Len
 12637  044D  3188  20A0  3183   	fcall	_StringCopy
 12638                           
 12639                           ;std_ser.c: 251: RepBufferLen = ((UINT8)(8));
 12640  0450  3008               	movlw	8
 12641  0451  0020               	movlb	0	; select bank0
 12642  0452  00B0               	movwf	??_StdS_ManageStdServices
 12643  0453  0830               	movf	??_StdS_ManageStdServices,w
 12644  0454  0021               	movlb	1	; select bank1
 12645  0455  00C0               	movwf	_RepBufferLen^(0+128)
 12646                           
 12647                           ;std_ser.c: 253: GenerateEvt(&I2cReplyPacketReady);
 12648  0456  3077               	movlw	(low (_I2cReplyPacketReady| 0))& (0+255)
 12649  0457  3188  207E         	fcall	_GenerateEvt
 12650                           
 12651                           ;std_ser.c: 255: break;
 12652  0459  0008               	return
 12653  045A                     l4464:	
 12654                           ;std_ser.c: 257: case ((UINT8)(0x30)):
 12655                           
 12656                           
 12657                           ;std_ser.c: 259: BoardReset();
 12658  045A  3195  25C2         	fcall	_BoardReset
 12659                           
 12660                           ;std_ser.c: 260: break;
 12661  045C  0008               	return
 12662  045D                     l4466:	
 12663                           ;std_ser.c: 262: case ((UINT8)(0x31)):
 12664                           
 12665                           
 12666                           ;std_ser.c: 264: LowPowerMode();
 12667  045D  3196  265A         	fcall	_LowPowerMode
 12668                           
 12669                           ;std_ser.c: 265: break;
 12670  045F  0008               	return
 12671  0460                     l4468:	
 12672                           ;std_ser.c: 267: case ((UINT8)(0x41)):
 12673                           
 12674                           
 12675                           ;std_ser.c: 269: SetLedBehavSts(CmdBuffer[((UINT8)(1))]);
 12676  0460  0025               	movlb	5	; select bank5
 12677  0461  0821               	movf	(_CmdBuffer^(0+640)+1),w
 12678  0462  318B  2355         	fcall	_SetLedBehavSts
 12679                           
 12680                           ;std_ser.c: 270: break;
 12681  0464  0008               	return
 12682  0465                     l4470:	
 12683                           ;std_ser.c: 272: case ((UINT8)(0x42)):
 12684                           
 12685                           
 12686                           ;std_ser.c: 274: ControlLedDirect();
 12687  0465  3196  26C7         	fcall	_ControlLedDirect
 12688                           
 12689                           ;std_ser.c: 275: break;
 12690  0467  0008               	return
 12691  0468                     l4472:	
 12692                           ;std_ser.c: 277: case ((UINT8)(0x45)):
 12693                           
 12694                           
 12695                           ;std_ser.c: 279: DieTemp = GetDieTemperature();
 12696  0468  3197  275D  3183   	fcall	_GetDieTemperature
 12697  046B  0020               	movlb	0	; select bank0
 12698  046C  0824               	movf	?_GetDieTemperature+1,w
 12699  046D  00B7               	movwf	StdS_ManageStdServices@DieTemp+1
 12700  046E  0823               	movf	?_GetDieTemperature,w
 12701  046F  00B6               	movwf	StdS_ManageStdServices@DieTemp
 12702                           
 12703                           ;std_ser.c: 281: RepBuffer[0] = ((DieTemp & 0xFF00) >> 8);
 12704  0470  0837               	movf	StdS_ManageStdServices@DieTemp+1,w
 12705  0471  00B0               	movwf	??_StdS_ManageStdServices
 12706  0472  0830               	movf	??_StdS_ManageStdServices,w
 12707  0473  0024               	movlb	4	; select bank4
 12708  0474  00A0               	movwf	_RepBuffer^(0+512)
 12709                           
 12710                           ;std_ser.c: 282: RepBuffer[1] = (DieTemp & 0x00FF);
 12711  0475  0020               	movlb	0	; select bank0
 12712  0476  0836               	movf	StdS_ManageStdServices@DieTemp,w
 12713  0477  00B0               	movwf	??_StdS_ManageStdServices
 12714  0478  0830               	movf	??_StdS_ManageStdServices,w
 12715  0479  0024               	movlb	4	; select bank4
 12716  047A  00A1               	movwf	(_RepBuffer^(0+512)+1)
 12717                           
 12718                           ;std_ser.c: 284: RepBufferLen = ((UINT8)(2));
 12719  047B  3002               	movlw	2
 12720  047C  0020               	movlb	0	; select bank0
 12721  047D  00B0               	movwf	??_StdS_ManageStdServices
 12722  047E  0830               	movf	??_StdS_ManageStdServices,w
 12723  047F  0021               	movlb	1	; select bank1
 12724  0480  00C0               	movwf	_RepBufferLen^(0+128)
 12725                           
 12726                           ;std_ser.c: 286: GenerateEvt(&I2cReplyPacketReady);
 12727  0481  3077               	movlw	(low (_I2cReplyPacketReady| 0))& (0+255)
 12728  0482  3188  207E         	fcall	_GenerateEvt
 12729                           
 12730                           ;std_ser.c: 287: break;
 12731  0484  0008               	return
 12732  0485                     l4482:	
 12733                           ;std_ser.c: 289: case ((UINT8)(0x46)):
 12734                           
 12735                           
 12736                           ;std_ser.c: 291: DieTemp = GetDieTemperature();
 12737  0485  3197  275D  3183   	fcall	_GetDieTemperature
 12738  0488  0020               	movlb	0	; select bank0
 12739  0489  0824               	movf	?_GetDieTemperature+1,w
 12740  048A  00B7               	movwf	StdS_ManageStdServices@DieTemp+1
 12741  048B  0823               	movf	?_GetDieTemperature,w
 12742  048C  00B6               	movwf	StdS_ManageStdServices@DieTemp
 12743                           
 12744                           ;std_ser.c: 293: DieTemp = (DieTemp/8) - 40;
 12745  048D  0837               	movf	StdS_ManageStdServices@DieTemp+1,w
 12746  048E  00B1               	movwf	??_StdS_ManageStdServices+1
 12747  048F  0836               	movf	StdS_ManageStdServices@DieTemp,w
 12748  0490  00B0               	movwf	??_StdS_ManageStdServices
 12749  0491  36B1               	lsrf	??_StdS_ManageStdServices+1,f
 12750  0492  0CB0               	rrf	??_StdS_ManageStdServices,f
 12751  0493  36B1               	lsrf	??_StdS_ManageStdServices+1,f
 12752  0494  0CB0               	rrf	??_StdS_ManageStdServices,f
 12753  0495  36B1               	lsrf	??_StdS_ManageStdServices+1,f
 12754  0496  0CB0               	rrf	??_StdS_ManageStdServices,f
 12755  0497  0830               	movf	??_StdS_ManageStdServices,w
 12756  0498  3ED8               	addlw	216
 12757  0499  00B6               	movwf	StdS_ManageStdServices@DieTemp
 12758  049A  30FF               	movlw	255
 12759  049B  3D31               	addwfc	??_StdS_ManageStdServices+1,w
 12760  049C  00B7               	movwf	StdS_ManageStdServices@DieTemp+1
 12761                           
 12762                           ;std_ser.c: 295: utoa(DieTempStr,DieTemp,10);
 12763  049D  0837               	movf	StdS_ManageStdServices@DieTemp+1,w
 12764  049E  00A8               	movwf	utoa@val+1
 12765  049F  0836               	movf	StdS_ManageStdServices@DieTemp,w
 12766  04A0  00A7               	movwf	utoa@val
 12767  04A1  300A               	movlw	10
 12768  04A2  00A9               	movwf	utoa@base
 12769  04A3  3000               	movlw	0
 12770  04A4  00AA               	movwf	utoa@base+1
 12771  04A5  3032               	movlw	(low (StdS_ManageStdServices@DieTempStr| 0))& (0+255)
 12772  04A6  318D  2511  3183   	fcall	_utoa
 12773                           
 12774                           ;std_ser.c: 297: StringCopy(DieTempStr,RepBuffer,((UINT8)(2)));
 12775  04A9  3032               	movlw	low StdS_ManageStdServices@DieTempStr
 12776  04AA  0020               	movlb	0	; select bank0
 12777  04AB  00A0               	movwf	StringCopy@SourceStr
 12778  04AC  3000               	movlw	high StdS_ManageStdServices@DieTempStr
 12779  04AD  00A1               	movwf	StringCopy@SourceStr+1
 12780  04AE  3020               	movlw	(low (_RepBuffer| (0+512)))& (0+255)
 12781  04AF  00B0               	movwf	??_StdS_ManageStdServices
 12782  04B0  0830               	movf	??_StdS_ManageStdServices,w
 12783  04B1  00A2               	movwf	StringCopy@DestStr
 12784  04B2  3002               	movlw	2
 12785  04B3  00B1               	movwf	??_StdS_ManageStdServices+1
 12786  04B4  0831               	movf	??_StdS_ManageStdServices+1,w
 12787  04B5  00A3               	movwf	StringCopy@Len
 12788  04B6  3188  20A0  3183   	fcall	_StringCopy
 12789                           
 12790                           ;std_ser.c: 299: RepBufferLen = ((UINT8)(2));
 12791  04B9  3002               	movlw	2
 12792  04BA  0020               	movlb	0	; select bank0
 12793  04BB  00B0               	movwf	??_StdS_ManageStdServices
 12794  04BC  0830               	movf	??_StdS_ManageStdServices,w
 12795  04BD  0021               	movlb	1	; select bank1
 12796  04BE  00C0               	movwf	_RepBufferLen^(0+128)
 12797                           
 12798                           ;std_ser.c: 301: GenerateEvt(&I2cReplyPacketReady);
 12799  04BF  3077               	movlw	(low (_I2cReplyPacketReady| 0))& (0+255)
 12800  04C0  3188  207E         	fcall	_GenerateEvt
 12801                           
 12802                           ;std_ser.c: 306: }
 12803                           
 12804                           ;std_ser.c: 305: break;
 12805                           
 12806                           ;std_ser.c: 304: default:
 12807                           
 12808                           ;std_ser.c: 302: break;
 12809  04C2  0008               	return
 12810  04C3                     l4496:	
 12811  04C3  0025               	movlb	5	; select bank5
 12812  04C4  0820               	movf	_CmdBuffer^(0+640),w
 12813                           
 12814                           ; Switch size 1, requested type "space"
 12815                           ; Number of cases is 10, Range of values is 16 to 70
 12816                           ; switch strategies available:
 12817                           ; Name         Instructions Cycles
 12818                           ; simple_byte           31    16 (average)
 12819                           ; direct_byte          119     9 (fixed)
 12820                           ; jumptable            263     9 (fixed)
 12821                           ;	Chosen strategy is simple_byte
 12822  04C5  3A10               	xorlw	16	; case 16
 12823  04C6  1903               	skipnz
 12824  04C7  2BF2               	goto	l4440
 12825  04C8  3A30               	xorlw	48	; case 32
 12826  04C9  1903               	skipnz
 12827  04CA  2C0C               	goto	l4446
 12828  04CB  3A01               	xorlw	1	; case 33
 12829  04CC  1903               	skipnz
 12830  04CD  2C26               	goto	l4452
 12831  04CE  3A03               	xorlw	3	; case 34
 12832  04CF  1903               	skipnz
 12833  04D0  2C40               	goto	l4458
 12834  04D1  3A12               	xorlw	18	; case 48
 12835  04D2  1903               	skipnz
 12836  04D3  2C5A               	goto	l4464
 12837  04D4  3A01               	xorlw	1	; case 49
 12838  04D5  1903               	skipnz
 12839  04D6  2C5D               	goto	l4466
 12840  04D7  3A70               	xorlw	112	; case 65
 12841  04D8  1903               	skipnz
 12842  04D9  2C60               	goto	l4468
 12843  04DA  3A03               	xorlw	3	; case 66
 12844  04DB  1903               	skipnz
 12845  04DC  2C65               	goto	l4470
 12846  04DD  3A07               	xorlw	7	; case 69
 12847  04DE  1903               	skipnz
 12848  04DF  2C68               	goto	l4472
 12849  04E0  3A03               	xorlw	3	; case 70
 12850  04E1  1903               	skipnz
 12851  04E2  2C85               	goto	l4482
 12852  04E3  2CE4               	goto	l830
 12853  04E4                     l830:	
 12854  04E4  0008               	return
 12855  04E5                     __end_of_StdS_ManageStdServices:	
 12856                           
 12857                           	psect	text58
 12858  0D11                     __ptext58:	
 12859 ;; *************** function _utoa *****************
 12860 ;; Defined at:
 12861 ;;		line 17 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\itoa.c"
 12862 ;; Parameters:    Size  Location     Type
 12863 ;;  buf             1    wreg     PTR unsigned char 
 12864 ;;		 -> HumidityDecStr(3), HumidityIntStr(3), TemperatureDecStr(3), TemperatureIntStr(3), 
 12865 ;;		 -> StdS_ManageStdServices@DieTempStr(4), 
 12866 ;;  val             2    7[BANK0 ] unsigned int 
 12867 ;;  base            2    9[BANK0 ] int 
 12868 ;; Auto vars:     Size  Location     Type
 12869 ;;  buf             1   15[BANK0 ] PTR unsigned char 
 12870 ;;		 -> HumidityDecStr(3), HumidityIntStr(3), TemperatureDecStr(3), TemperatureIntStr(3), 
 12871 ;;		 -> StdS_ManageStdServices@DieTempStr(4), 
 12872 ;;  v               2   12[BANK0 ] unsigned int 
 12873 ;;  c               1   14[BANK0 ] unsigned char 
 12874 ;; Return value:  Size  Location     Type
 12875 ;;                  1    wreg      PTR unsigned char 
 12876 ;; Registers used:
 12877 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12878 ;; Tracked objects:
 12879 ;;		On entry : 0/0
 12880 ;;		On exit  : 0/0
 12881 ;;		Unchanged: 0/0
 12882 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12883 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12884 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12885 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12886 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12887 ;;Total ram usage:        9 bytes
 12888 ;; Hardware stack levels used:    1
 12889 ;; Hardware stack levels required when called:    3
 12890 ;; This function calls:
 12891 ;;		___lwdiv
 12892 ;;		___lwmod
 12893 ;; This function is called by:
 12894 ;;		_StdS_ManageStdServices
 12895 ;;		_itoa
 12896 ;; This function uses a non-reentrant model
 12897 ;;
 12898                           
 12899                           
 12900                           ;psect for function _utoa
 12901  0D11                     _utoa:	
 12902                           
 12903                           ;incstack = 0
 12904                           ; Regs used in _utoa: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 12905                           ;utoa@buf stored from wreg
 12906  0D11  0020               	movlb	0	; select bank0
 12907  0D12  00AF               	movwf	utoa@buf
 12908  0D13  0828               	movf	utoa@val+1,w
 12909  0D14  00AD               	movwf	utoa@v+1
 12910  0D15  0827               	movf	utoa@val,w
 12911  0D16  00AC               	movwf	utoa@v
 12912  0D17                     l4360:	
 12913  0D17  082A               	movf	utoa@base+1,w
 12914  0D18  00A1               	movwf	___lwdiv@divisor+1
 12915  0D19  0829               	movf	utoa@base,w
 12916  0D1A  00A0               	movwf	___lwdiv@divisor
 12917  0D1B  082D               	movf	utoa@v+1,w
 12918  0D1C  00A3               	movwf	___lwdiv@dividend+1
 12919  0D1D  082C               	movf	utoa@v,w
 12920  0D1E  00A2               	movwf	___lwdiv@dividend
 12921  0D1F  318A  2272  318D   	fcall	___lwdiv
 12922  0D22  0020               	movlb	0	; select bank0
 12923  0D23  0821               	movf	?___lwdiv+1,w
 12924  0D24  00AD               	movwf	utoa@v+1
 12925  0D25  0820               	movf	?___lwdiv,w
 12926  0D26  00AC               	movwf	utoa@v
 12927  0D27  3001               	movlw	1
 12928  0D28  00AB               	movwf	??_utoa
 12929  0D29  082B               	movf	??_utoa,w
 12930  0D2A  07AF               	addwf	utoa@buf,f
 12931  0D2B  082C               	movf	utoa@v,w
 12932  0D2C  042D               	iorwf	utoa@v+1,w
 12933  0D2D  1D03               	btfss	3,2
 12934  0D2E  2D17               	goto	l4360
 12935  0D2F  082F               	movf	utoa@buf,w
 12936  0D30  0086               	movwf	6
 12937  0D31  0187               	clrf	7
 12938  0D32  0181               	clrf	1
 12939  0D33  3001               	movlw	1
 12940  0D34  02AF               	subwf	utoa@buf,f
 12941  0D35                     l4370:	
 12942  0D35  082A               	movf	utoa@base+1,w
 12943  0D36  00A1               	movwf	___lwmod@divisor+1
 12944  0D37  0829               	movf	utoa@base,w
 12945  0D38  00A0               	movwf	___lwmod@divisor
 12946  0D39  0828               	movf	utoa@val+1,w
 12947  0D3A  00A3               	movwf	___lwmod@dividend+1
 12948  0D3B  0827               	movf	utoa@val,w
 12949  0D3C  00A2               	movwf	___lwmod@dividend
 12950  0D3D  3189  21B4  318D   	fcall	___lwmod
 12951  0D40  0020               	movlb	0	; select bank0
 12952  0D41  0820               	movf	?___lwmod,w
 12953  0D42  00AB               	movwf	??_utoa
 12954  0D43  082B               	movf	??_utoa,w
 12955  0D44  00AE               	movwf	utoa@c
 12956  0D45  082A               	movf	utoa@base+1,w
 12957  0D46  00A1               	movwf	___lwdiv@divisor+1
 12958  0D47  0829               	movf	utoa@base,w
 12959  0D48  00A0               	movwf	___lwdiv@divisor
 12960  0D49  0828               	movf	utoa@val+1,w
 12961  0D4A  00A3               	movwf	___lwdiv@dividend+1
 12962  0D4B  0827               	movf	utoa@val,w
 12963  0D4C  00A2               	movwf	___lwdiv@dividend
 12964  0D4D  318A  2272  318D   	fcall	___lwdiv
 12965  0D50  0020               	movlb	0	; select bank0
 12966  0D51  0821               	movf	?___lwdiv+1,w
 12967  0D52  00A8               	movwf	utoa@val+1
 12968  0D53  0820               	movf	?___lwdiv,w
 12969  0D54  00A7               	movwf	utoa@val
 12970  0D55  300A               	movlw	10
 12971  0D56  022E               	subwf	utoa@c,w
 12972  0D57  1C03               	skipc
 12973  0D58  2D5D               	goto	l1428
 12974  0D59  3007               	movlw	7
 12975  0D5A  00AB               	movwf	??_utoa
 12976  0D5B  082B               	movf	??_utoa,w
 12977  0D5C  07AE               	addwf	utoa@c,f
 12978  0D5D                     l1428:	
 12979  0D5D  3030               	movlw	48
 12980  0D5E  00AB               	movwf	??_utoa
 12981  0D5F  082B               	movf	??_utoa,w
 12982  0D60  07AE               	addwf	utoa@c,f
 12983  0D61  082E               	movf	utoa@c,w
 12984  0D62  00AB               	movwf	??_utoa
 12985  0D63  082F               	movf	utoa@buf,w
 12986  0D64  0086               	movwf	6
 12987  0D65  0187               	clrf	7
 12988  0D66  082B               	movf	??_utoa,w
 12989  0D67  0081               	movwf	1
 12990  0D68  3001               	movlw	1
 12991  0D69  02AF               	subwf	utoa@buf,f
 12992  0D6A  0827               	movf	utoa@val,w
 12993  0D6B  0428               	iorwf	utoa@val+1,w
 12994  0D6C  1D03               	btfss	3,2
 12995  0D6D  2D35               	goto	l4370
 12996                           
 12997                           ;	Return value of _utoa is never used
 12998  0D6E  3001               	movlw	1
 12999  0D6F  00AB               	movwf	??_utoa
 13000  0D70  082B               	movf	??_utoa,w
 13001  0D71  07AF               	addwf	utoa@buf,f
 13002  0D72  0008               	return
 13003  0D73                     __end_of_utoa:	
 13004                           
 13005                           	psect	text59
 13006  09B4                     __ptext59:	
 13007 ;; *************** function ___lwmod *****************
 13008 ;; Defined at:
 13009 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\lwmod.c"
 13010 ;; Parameters:    Size  Location     Type
 13011 ;;  divisor         2    0[BANK0 ] unsigned int 
 13012 ;;  dividend        2    2[BANK0 ] unsigned int 
 13013 ;; Auto vars:     Size  Location     Type
 13014 ;;  counter         1    5[COMMON] unsigned char 
 13015 ;; Return value:  Size  Location     Type
 13016 ;;                  2    0[BANK0 ] unsigned int 
 13017 ;; Registers used:
 13018 ;;		wreg, status,2, status,0
 13019 ;; Tracked objects:
 13020 ;;		On entry : 0/0
 13021 ;;		On exit  : 0/0
 13022 ;;		Unchanged: 0/0
 13023 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13024 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13025 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13026 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13027 ;;      Totals:         2       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13028 ;;Total ram usage:        6 bytes
 13029 ;; Hardware stack levels used:    1
 13030 ;; Hardware stack levels required when called:    2
 13031 ;; This function calls:
 13032 ;;		Nothing
 13033 ;; This function is called by:
 13034 ;;		_App_MainTask
 13035 ;;		_utoa
 13036 ;; This function uses a non-reentrant model
 13037 ;;
 13038                           
 13039                           
 13040                           ;psect for function ___lwmod
 13041  09B4                     ___lwmod:	
 13042                           
 13043                           ;incstack = 0
 13044                           ; Regs used in ___lwmod: [wreg+status,2+status,0]
 13045  09B4  0020               	movlb	0	; select bank0
 13046  09B5  0820               	movf	___lwmod@divisor,w
 13047  09B6  0421               	iorwf	___lwmod@divisor+1,w
 13048  09B7  1903               	btfsc	3,2
 13049  09B8  29DC               	goto	l4292
 13050  09B9  01F5               	clrf	___lwmod@counter
 13051  09BA  0AF5               	incf	___lwmod@counter,f
 13052  09BB                     l4282:	
 13053  09BB  1BA1               	btfsc	___lwmod@divisor+1,7
 13054  09BC  29C7               	goto	l4284
 13055  09BD  3001               	movlw	1
 13056  09BE                     u3335:	
 13057  09BE  35A0               	lslf	___lwmod@divisor,f
 13058  09BF  0DA1               	rlf	___lwmod@divisor+1,f
 13059  09C0  0B89               	decfsz	9,f
 13060  09C1  29BE               	goto	u3335
 13061  09C2  3001               	movlw	1
 13062  09C3  00F4               	movwf	??___lwmod
 13063  09C4  0874               	movf	??___lwmod,w
 13064  09C5  07F5               	addwf	___lwmod@counter,f
 13065  09C6  29BB               	goto	l4282
 13066  09C7                     l4284:	
 13067  09C7  0821               	movf	___lwmod@divisor+1,w
 13068  09C8  0223               	subwf	___lwmod@dividend+1,w
 13069  09C9  1D03               	skipz
 13070  09CA  29CD               	goto	u3355
 13071  09CB  0820               	movf	___lwmod@divisor,w
 13072  09CC  0222               	subwf	___lwmod@dividend,w
 13073  09CD                     u3355:	
 13074  09CD  1C03               	skipc
 13075  09CE  29D3               	goto	l4288
 13076  09CF  0820               	movf	___lwmod@divisor,w
 13077  09D0  02A2               	subwf	___lwmod@dividend,f
 13078  09D1  0821               	movf	___lwmod@divisor+1,w
 13079  09D2  3BA3               	subwfb	___lwmod@dividend+1,f
 13080  09D3                     l4288:	
 13081  09D3  3001               	movlw	1
 13082  09D4                     u3365:	
 13083  09D4  36A1               	lsrf	___lwmod@divisor+1,f
 13084  09D5  0CA0               	rrf	___lwmod@divisor,f
 13085  09D6  0B89               	decfsz	9,f
 13086  09D7  29D4               	goto	u3365
 13087  09D8  3001               	movlw	1
 13088  09D9  02F5               	subwf	___lwmod@counter,f
 13089  09DA  1D03               	btfss	3,2
 13090  09DB  29C7               	goto	l4284
 13091  09DC                     l4292:	
 13092  09DC  0823               	movf	___lwmod@dividend+1,w
 13093  09DD  00A1               	movwf	?___lwmod+1
 13094  09DE  0822               	movf	___lwmod@dividend,w
 13095  09DF  00A0               	movwf	?___lwmod
 13096  09E0  0008               	return
 13097  09E1                     __end_of___lwmod:	
 13098                           
 13099                           	psect	text60
 13100  0A72                     __ptext60:	
 13101 ;; *************** function ___lwdiv *****************
 13102 ;; Defined at:
 13103 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\lwdiv.c"
 13104 ;; Parameters:    Size  Location     Type
 13105 ;;  divisor         2    0[BANK0 ] unsigned int 
 13106 ;;  dividend        2    2[BANK0 ] unsigned int 
 13107 ;; Auto vars:     Size  Location     Type
 13108 ;;  quotient        2    5[BANK0 ] unsigned int 
 13109 ;;  counter         1    4[BANK0 ] unsigned char 
 13110 ;; Return value:  Size  Location     Type
 13111 ;;                  2    0[BANK0 ] unsigned int 
 13112 ;; Registers used:
 13113 ;;		wreg, status,2, status,0
 13114 ;; Tracked objects:
 13115 ;;		On entry : 0/0
 13116 ;;		On exit  : 0/0
 13117 ;;		Unchanged: 0/0
 13118 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13119 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13120 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13121 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13122 ;;      Totals:         1       7       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13123 ;;Total ram usage:        8 bytes
 13124 ;; Hardware stack levels used:    1
 13125 ;; Hardware stack levels required when called:    2
 13126 ;; This function calls:
 13127 ;;		Nothing
 13128 ;; This function is called by:
 13129 ;;		_LedBlinkStateMachine
 13130 ;;		_LedPulseStateMachine
 13131 ;;		_App_MainTask
 13132 ;;		_utoa
 13133 ;; This function uses a non-reentrant model
 13134 ;;
 13135                           
 13136                           
 13137                           ;psect for function ___lwdiv
 13138  0A72                     ___lwdiv:	
 13139                           
 13140                           ;incstack = 0
 13141                           ; Regs used in ___lwdiv: [wreg+status,2+status,0]
 13142  0A72  0020               	movlb	0	; select bank0
 13143  0A73  01A5               	clrf	___lwdiv@quotient
 13144  0A74  01A6               	clrf	___lwdiv@quotient+1
 13145  0A75  0820               	movf	___lwdiv@divisor,w
 13146  0A76  0421               	iorwf	___lwdiv@divisor+1,w
 13147  0A77  1903               	btfsc	3,2
 13148  0A78  2AA2               	goto	l4270
 13149  0A79  01A4               	clrf	___lwdiv@counter
 13150  0A7A  0AA4               	incf	___lwdiv@counter,f
 13151  0A7B                     l4258:	
 13152  0A7B  1BA1               	btfsc	___lwdiv@divisor+1,7
 13153  0A7C  2A87               	goto	l4260
 13154  0A7D  3001               	movlw	1
 13155  0A7E                     u3265:	
 13156  0A7E  35A0               	lslf	___lwdiv@divisor,f
 13157  0A7F  0DA1               	rlf	___lwdiv@divisor+1,f
 13158  0A80  0B89               	decfsz	9,f
 13159  0A81  2A7E               	goto	u3265
 13160  0A82  3001               	movlw	1
 13161  0A83  00F4               	movwf	??___lwdiv
 13162  0A84  0874               	movf	??___lwdiv,w
 13163  0A85  07A4               	addwf	___lwdiv@counter,f
 13164  0A86  2A7B               	goto	l4258
 13165  0A87                     l4260:	
 13166  0A87  3001               	movlw	1
 13167  0A88                     u3285:	
 13168  0A88  35A5               	lslf	___lwdiv@quotient,f
 13169  0A89  0DA6               	rlf	___lwdiv@quotient+1,f
 13170  0A8A  0B89               	decfsz	9,f
 13171  0A8B  2A88               	goto	u3285
 13172  0A8C  0821               	movf	___lwdiv@divisor+1,w
 13173  0A8D  0223               	subwf	___lwdiv@dividend+1,w
 13174  0A8E  1D03               	skipz
 13175  0A8F  2A92               	goto	u3295
 13176  0A90  0820               	movf	___lwdiv@divisor,w
 13177  0A91  0222               	subwf	___lwdiv@dividend,w
 13178  0A92                     u3295:	
 13179  0A92  1C03               	skipc
 13180  0A93  2A99               	goto	l4266
 13181  0A94  0820               	movf	___lwdiv@divisor,w
 13182  0A95  02A2               	subwf	___lwdiv@dividend,f
 13183  0A96  0821               	movf	___lwdiv@divisor+1,w
 13184  0A97  3BA3               	subwfb	___lwdiv@dividend+1,f
 13185  0A98  1425               	bsf	___lwdiv@quotient,0
 13186  0A99                     l4266:	
 13187  0A99  3001               	movlw	1
 13188  0A9A                     u3305:	
 13189  0A9A  36A1               	lsrf	___lwdiv@divisor+1,f
 13190  0A9B  0CA0               	rrf	___lwdiv@divisor,f
 13191  0A9C  0B89               	decfsz	9,f
 13192  0A9D  2A9A               	goto	u3305
 13193  0A9E  3001               	movlw	1
 13194  0A9F  02A4               	subwf	___lwdiv@counter,f
 13195  0AA0  1D03               	btfss	3,2
 13196  0AA1  2A87               	goto	l4260
 13197  0AA2                     l4270:	
 13198  0AA2  0826               	movf	___lwdiv@quotient+1,w
 13199  0AA3  00A1               	movwf	?___lwdiv+1
 13200  0AA4  0825               	movf	___lwdiv@quotient,w
 13201  0AA5  00A0               	movwf	?___lwdiv
 13202  0AA6  0008               	return
 13203  0AA7                     __end_of___lwdiv:	
 13204                           
 13205                           	psect	text61
 13206  08A0                     __ptext61:	
 13207 ;; *************** function _StringCopy *****************
 13208 ;; Defined at:
 13209 ;;		line 104 in file "../../../Framework/MercuryFwk/Source/c/03_Sml/02_Ssl/sf.c"
 13210 ;; Parameters:    Size  Location     Type
 13211 ;;  SourceStr       2    0[BANK0 ] PTR unsigned char 
 13212 ;;		 -> StdS_ManageStdServices@DieTempStr(4), STR_5(9), STR_4(9), STR_3(6), 
 13213 ;;		 -> STR_2(5), 
 13214 ;;  DestStr         1    2[BANK0 ] PTR unsigned char 
 13215 ;;		 -> RepBuffer(80), 
 13216 ;;  Len             1    3[BANK0 ] unsigned char 
 13217 ;; Auto vars:     Size  Location     Type
 13218 ;;  Index           1    4[COMMON] unsigned char 
 13219 ;; Return value:  Size  Location     Type
 13220 ;;                  1    wreg      void 
 13221 ;; Registers used:
 13222 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath
 13223 ;; Tracked objects:
 13224 ;;		On entry : 0/0
 13225 ;;		On exit  : 0/0
 13226 ;;		Unchanged: 0/0
 13227 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13228 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13229 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13230 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13231 ;;      Totals:         1       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13232 ;;Total ram usage:        9 bytes
 13233 ;; Hardware stack levels used:    1
 13234 ;; Hardware stack levels required when called:    2
 13235 ;; This function calls:
 13236 ;;		Nothing
 13237 ;; This function is called by:
 13238 ;;		_StdS_ManageStdServices
 13239 ;; This function uses a non-reentrant model
 13240 ;;
 13241                           
 13242                           
 13243                           ;psect for function _StringCopy
 13244  08A0                     _StringCopy:	
 13245                           
 13246                           ;sf.c: 106: UINT8 Index = 0;
 13247                           
 13248                           ;incstack = 0
 13249                           ; Regs used in _StringCopy: [wreg-fsr1h+status,2+status,0+pclath]
 13250  08A0  01F4               	clrf	StringCopy@Index
 13251                           
 13252                           ;sf.c: 109: for (Index = 0; Index < Len; Index++)
 13253  08A1  01F4               	clrf	StringCopy@Index
 13254  08A2                     l4336:	
 13255  08A2  0020               	movlb	0	; select bank0
 13256  08A3  0823               	movf	StringCopy@Len,w
 13257  08A4  0274               	subwf	StringCopy@Index,w
 13258  08A5  1803               	btfsc	3,0
 13259  08A6  0008               	return
 13260                           
 13261                           ;sf.c: 110: {
 13262                           ;sf.c: 111: DestStr[Index] = SourceStr[Index];
 13263  08A7  0020               	movlb	0	; select bank0
 13264  08A8  0821               	movf	StringCopy@SourceStr+1,w
 13265  08A9  00A5               	movwf	??_StringCopy+1
 13266  08AA  0820               	movf	StringCopy@SourceStr,w
 13267  08AB  00A4               	movwf	??_StringCopy
 13268  08AC  0874               	movf	StringCopy@Index,w
 13269  08AD  0724               	addwf	??_StringCopy,w
 13270  08AE  0084               	movwf	4
 13271  08AF  0825               	movf	??_StringCopy+1,w
 13272  08B0  1803               	skipnc
 13273  08B1  0A25               	incf	??_StringCopy+1,w
 13274  08B2  0085               	movwf	5
 13275  08B3  0800               	movf	0,w	;code access
 13276  08B4  00A6               	movwf	??_StringCopy+2
 13277  08B5  0874               	movf	StringCopy@Index,w
 13278  08B6  0722               	addwf	StringCopy@DestStr,w
 13279  08B7  00A7               	movwf	??_StringCopy+3
 13280  08B8  0827               	movf	??_StringCopy+3,w
 13281  08B9  0086               	movwf	6
 13282  08BA  3002               	movlw	2	; select bank4/5
 13283  08BB  0087               	movwf	7
 13284  08BC  0826               	movf	??_StringCopy+2,w
 13285  08BD  0081               	movwf	1
 13286  08BE  3001               	movlw	1
 13287  08BF  00A4               	movwf	??_StringCopy
 13288  08C0  0824               	movf	??_StringCopy,w
 13289  08C1  07F4               	addwf	StringCopy@Index,f
 13290  08C2  28A2               	goto	l4336
 13291  08C3                     __end_of_StringCopy:	
 13292                           
 13293                           	psect	text62
 13294  0B55                     __ptext62:	
 13295 ;; *************** function _SetLedBehavSts *****************
 13296 ;; Defined at:
 13297 ;;		line 76 in file "../../../Framework/MercuryFwk/Source/c/03_Sml/02_Ssl/std_ser.c"
 13298 ;; Parameters:    Size  Location     Type
 13299 ;;  LedBehav        1    wreg     unsigned char 
 13300 ;; Auto vars:     Size  Location     Type
 13301 ;;  LedBehav        1    5[BANK0 ] unsigned char 
 13302 ;; Return value:  Size  Location     Type
 13303 ;;                  1    wreg      void 
 13304 ;; Registers used:
 13305 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
 13306 ;; Tracked objects:
 13307 ;;		On entry : 0/0
 13308 ;;		On exit  : 0/0
 13309 ;;		Unchanged: 0/0
 13310 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13311 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13312 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13313 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13314 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13315 ;;Total ram usage:        2 bytes
 13316 ;; Hardware stack levels used:    1
 13317 ;; Hardware stack levels required when called:    3
 13318 ;; This function calls:
 13319 ;;		_Led_SetLedBlinkTime
 13320 ;;		_Led_SetLedPulseTime
 13321 ;;		_Led_SetLedStatus
 13322 ;; This function is called by:
 13323 ;;		_Led_MainTask
 13324 ;;		_StdS_ManageStdServices
 13325 ;; This function uses a non-reentrant model
 13326 ;;
 13327                           
 13328                           
 13329                           ;psect for function _SetLedBehavSts
 13330  0B55                     _SetLedBehavSts:	
 13331                           
 13332                           ;incstack = 0
 13333                           ; Regs used in _SetLedBehavSts: [wreg-fsr0h+status,2+status,0+pclath+cstack]
 13334                           ;SetLedBehavSts@LedBehav stored from wreg
 13335  0B55  0020               	movlb	0	; select bank0
 13336  0B56  00A5               	movwf	SetLedBehavSts@LedBehav
 13337                           
 13338                           ;std_ser.c: 79: switch (LedBehav)
 13339  0B57  2B88               	goto	l4328
 13340  0B58                     l4312:	
 13341                           ;std_ser.c: 80: {
 13342                           ;std_ser.c: 81: case ((UINT8)(0)):
 13343                           
 13344                           
 13345                           ;std_ser.c: 83: Led_SetLedStatus(1u,LED_STS_OFF);
 13346  0B58  01F4               	clrf	Led_SetLedStatus@LedSts
 13347  0B59  3001               	movlw	1
 13348  0B5A  3196  2667         	fcall	_Led_SetLedStatus
 13349                           
 13350                           ;std_ser.c: 85: LedBehaviourSts = ((UINT8)(0));
 13351  0B5C  01F9               	clrf	_LedBehaviourSts
 13352                           
 13353                           ;std_ser.c: 86: break;
 13354  0B5D  0008               	return
 13355  0B5E                     l4316:	
 13356                           ;std_ser.c: 88: case ((UINT8)(1)):
 13357                           
 13358                           
 13359                           ;std_ser.c: 90: Led_SetLedPulseTime(1u,50);
 13360  0B5E  3032               	movlw	50
 13361  0B5F  00F4               	movwf	Led_SetLedPulseTime@PulseTimeMs
 13362  0B60  3000               	movlw	0
 13363  0B61  00F5               	movwf	Led_SetLedPulseTime@PulseTimeMs+1
 13364  0B62  3001               	movlw	1
 13365  0B63  3196  2687         	fcall	_Led_SetLedPulseTime
 13366                           
 13367                           ;std_ser.c: 92: LedBehaviourSts = ((UINT8)(1));
 13368  0B65  01F9               	clrf	_LedBehaviourSts
 13369  0B66  0AF9               	incf	_LedBehaviourSts,f
 13370                           
 13371                           ;std_ser.c: 93: break;
 13372  0B67  0008               	return
 13373  0B68                     l4320:	
 13374                           ;std_ser.c: 95: case ((UINT8)(2)):
 13375                           
 13376                           
 13377                           ;std_ser.c: 97: Led_SetLedBlinkTime(1u,50,950);
 13378  0B68  3032               	movlw	50
 13379  0B69  0020               	movlb	0	; select bank0
 13380  0B6A  00A0               	movwf	Led_SetLedBlinkTime@OnTimeMs
 13381  0B6B  3000               	movlw	0
 13382  0B6C  00A1               	movwf	Led_SetLedBlinkTime@OnTimeMs+1
 13383  0B6D  30B6               	movlw	182
 13384  0B6E  00A2               	movwf	Led_SetLedBlinkTime@OffTimeMs
 13385  0B6F  3003               	movlw	3
 13386  0B70  00A3               	movwf	Led_SetLedBlinkTime@OffTimeMs+1
 13387  0B71  3001               	movlw	1
 13388  0B72  3197  2776  318B   	fcall	_Led_SetLedBlinkTime
 13389                           
 13390                           ;std_ser.c: 99: Led_SetLedStatus(1u,LED_STS_BLINK);
 13391  0B75  3002               	movlw	2
 13392  0B76  0020               	movlb	0	; select bank0
 13393  0B77  00A4               	movwf	??_SetLedBehavSts
 13394  0B78  0824               	movf	??_SetLedBehavSts,w
 13395  0B79  00F4               	movwf	Led_SetLedStatus@LedSts
 13396  0B7A  3001               	movlw	1
 13397  0B7B  3196  2667         	fcall	_Led_SetLedStatus
 13398                           
 13399                           ;std_ser.c: 101: LedBehaviourSts = ((UINT8)(2));
 13400  0B7D  3002               	movlw	2
 13401  0B7E  0020               	movlb	0	; select bank0
 13402  0B7F  00A4               	movwf	??_SetLedBehavSts
 13403  0B80  0824               	movf	??_SetLedBehavSts,w
 13404  0B81  00F9               	movwf	_LedBehaviourSts
 13405                           
 13406                           ;std_ser.c: 102: break;
 13407  0B82  0008               	return
 13408  0B83                     l4324:	
 13409                           ;std_ser.c: 104: case ((UINT8)(3)):
 13410                           
 13411                           
 13412                           ;std_ser.c: 106: LedBehaviourSts = ((UINT8)(3));
 13413  0B83  3003               	movlw	3
 13414  0B84  00A4               	movwf	??_SetLedBehavSts
 13415  0B85  0824               	movf	??_SetLedBehavSts,w
 13416  0B86  00F9               	movwf	_LedBehaviourSts
 13417                           
 13418                           ;std_ser.c: 111: }
 13419                           
 13420                           ;std_ser.c: 110: break;
 13421                           
 13422                           ;std_ser.c: 109: default:
 13423                           
 13424                           ;std_ser.c: 107: break;
 13425  0B87  0008               	return
 13426  0B88                     l4328:	
 13427  0B88  0825               	movf	SetLedBehavSts@LedBehav,w
 13428                           
 13429                           ; Switch size 1, requested type "space"
 13430                           ; Number of cases is 4, Range of values is 0 to 3
 13431                           ; switch strategies available:
 13432                           ; Name         Instructions Cycles
 13433                           ; simple_byte           13     7 (average)
 13434                           ; direct_byte           14     6 (fixed)
 13435                           ; jumptable            260     6 (fixed)
 13436                           ;	Chosen strategy is simple_byte
 13437  0B89  3A00               	xorlw	0	; case 0
 13438  0B8A  1903               	skipnz
 13439  0B8B  2B58               	goto	l4312
 13440  0B8C  3A01               	xorlw	1	; case 1
 13441  0B8D  1903               	skipnz
 13442  0B8E  2B5E               	goto	l4316
 13443  0B8F  3A03               	xorlw	3	; case 2
 13444  0B90  1903               	skipnz
 13445  0B91  2B68               	goto	l4320
 13446  0B92  3A01               	xorlw	1	; case 3
 13447  0B93  1903               	skipnz
 13448  0B94  2B83               	goto	l4324
 13449  0B95  2B96               	goto	l796
 13450  0B96                     l796:	
 13451  0B96  0008               	return
 13452  0B97                     __end_of_SetLedBehavSts:	
 13453                           
 13454                           	psect	text63
 13455  1687                     __ptext63:	
 13456 ;; *************** function _Led_SetLedPulseTime *****************
 13457 ;; Defined at:
 13458 ;;		line 269 in file "../../../Framework/MercuryFwk/Source/c/03_Sml/02_Ssl/led.c"
 13459 ;; Parameters:    Size  Location     Type
 13460 ;;  Led             1    wreg     unsigned char 
 13461 ;;  PulseTimeMs     2    4[COMMON] unsigned short 
 13462 ;; Auto vars:     Size  Location     Type
 13463 ;;  Led             1    0[BANK0 ] unsigned char 
 13464 ;; Return value:  Size  Location     Type
 13465 ;;                  1    wreg      void 
 13466 ;; Registers used:
 13467 ;;		wreg, fsr0l, fsr0h, status,2, status,0
 13468 ;; Tracked objects:
 13469 ;;		On entry : 0/0
 13470 ;;		On exit  : 0/0
 13471 ;;		Unchanged: 0/0
 13472 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13473 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13474 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13475 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13476 ;;      Totals:         2       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13477 ;;Total ram usage:        3 bytes
 13478 ;; Hardware stack levels used:    1
 13479 ;; Hardware stack levels required when called:    2
 13480 ;; This function calls:
 13481 ;;		Nothing
 13482 ;; This function is called by:
 13483 ;;		_SetLedBehavSts
 13484 ;; This function uses a non-reentrant model
 13485 ;;
 13486                           
 13487                           
 13488                           ;psect for function _Led_SetLedPulseTime
 13489  1687                     _Led_SetLedPulseTime:	
 13490                           
 13491                           ;incstack = 0
 13492                           ; Regs used in _Led_SetLedPulseTime: [wreg-fsr0h+status,2+status,0]
 13493                           ;Led_SetLedPulseTime@Led stored from wreg
 13494  1687  0020               	movlb	0	; select bank0
 13495  1688  00A0               	movwf	Led_SetLedPulseTime@Led
 13496                           
 13497                           ;led.c: 272: switch (Led)
 13498  1689  2E90               	goto	l4246
 13499  168A                     l4242:	
 13500                           ;led.c: 273: {
 13501                           ;led.c: 274: case 1u:
 13502                           
 13503                           
 13504                           ;led.c: 275: Led1Pulse.LedPulseTimeMs = PulseTimeMs;
 13505  168A  0875               	movf	Led_SetLedPulseTime@PulseTimeMs+1,w
 13506  168B  0022               	movlb	2	; select bank2
 13507  168C  00ED               	movwf	((_Led1Pulse+1)^(0+256)+4)
 13508  168D  0874               	movf	Led_SetLedPulseTime@PulseTimeMs,w
 13509  168E  00EC               	movwf	(_Led1Pulse^(0+256)+4)
 13510                           
 13511                           ;led.c: 280: }
 13512                           
 13513                           ;led.c: 279: break;
 13514                           
 13515                           ;led.c: 278: default:
 13516                           
 13517                           ;led.c: 276: break;
 13518  168F  0008               	return
 13519  1690                     l4246:	
 13520  1690  0020               	movlb	0	; select bank0
 13521  1691  0820               	movf	Led_SetLedPulseTime@Led,w
 13522                           
 13523                           ; Switch size 1, requested type "space"
 13524                           ; Number of cases is 1, Range of values is 1 to 1
 13525                           ; switch strategies available:
 13526                           ; Name         Instructions Cycles
 13527                           ; simple_byte            4     3 (average)
 13528                           ; direct_byte           11     9 (fixed)
 13529                           ; jumptable            263     9 (fixed)
 13530                           ;	Chosen strategy is simple_byte
 13531  1692  3A01               	xorlw	1	; case 1
 13532  1693  1903               	skipnz
 13533  1694  2E8A               	goto	l4242
 13534  1695  2E96               	goto	l700
 13535  1696                     l700:	
 13536  1696  0008               	return
 13537  1697                     __end_of_Led_SetLedPulseTime:	
 13538                           
 13539                           	psect	text64
 13540  1776                     __ptext64:	
 13541 ;; *************** function _Led_SetLedBlinkTime *****************
 13542 ;; Defined at:
 13543 ;;		line 245 in file "../../../Framework/MercuryFwk/Source/c/03_Sml/02_Ssl/led.c"
 13544 ;; Parameters:    Size  Location     Type
 13545 ;;  Led             1    wreg     unsigned char 
 13546 ;;  OnTimeMs        2    0[BANK0 ] unsigned short 
 13547 ;;  OffTimeMs       2    2[BANK0 ] unsigned short 
 13548 ;; Auto vars:     Size  Location     Type
 13549 ;;  Led             1    4[COMMON] unsigned char 
 13550 ;; Return value:  Size  Location     Type
 13551 ;;                  1    wreg      void 
 13552 ;; Registers used:
 13553 ;;		wreg, fsr0l, fsr0h, status,2, status,0
 13554 ;; Tracked objects:
 13555 ;;		On entry : 0/0
 13556 ;;		On exit  : 0/0
 13557 ;;		Unchanged: 0/0
 13558 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13559 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13560 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13561 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13562 ;;      Totals:         1       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13563 ;;Total ram usage:        5 bytes
 13564 ;; Hardware stack levels used:    1
 13565 ;; Hardware stack levels required when called:    2
 13566 ;; This function calls:
 13567 ;;		Nothing
 13568 ;; This function is called by:
 13569 ;;		_SetLedBehavSts
 13570 ;; This function uses a non-reentrant model
 13571 ;;
 13572                           
 13573                           
 13574                           ;psect for function _Led_SetLedBlinkTime
 13575  1776                     _Led_SetLedBlinkTime:	
 13576                           
 13577                           ;incstack = 0
 13578                           ; Regs used in _Led_SetLedBlinkTime: [wreg-fsr0h+status,2+status,0]
 13579                           ;Led_SetLedBlinkTime@Led stored from wreg
 13580  1776  00F4               	movwf	Led_SetLedBlinkTime@Led
 13581                           
 13582                           ;led.c: 248: switch (Led)
 13583  1777  2F89               	goto	l4238
 13584  1778                     l4234:	
 13585                           ;led.c: 249: {
 13586                           ;led.c: 250: case 1u:
 13587                           
 13588                           
 13589                           ;led.c: 251: Led1Blink.LedOnTimeMs = OnTimeMs;
 13590  1778  0020               	movlb	0	; select bank0
 13591  1779  0821               	movf	Led_SetLedBlinkTime@OnTimeMs+1,w
 13592  177A  0022               	movlb	2	; select bank2
 13593  177B  00E4               	movwf	((_Led1Blink+1)^(0+256)+4)
 13594  177C  0020               	movlb	0	; select bank0
 13595  177D  0820               	movf	Led_SetLedBlinkTime@OnTimeMs,w
 13596  177E  0022               	movlb	2	; select bank2
 13597  177F  00E3               	movwf	(_Led1Blink^(0+256)+4)
 13598                           
 13599                           ;led.c: 252: Led1Blink.LedOffTimeMs = OffTimeMs;
 13600  1780  0020               	movlb	0	; select bank0
 13601  1781  0823               	movf	Led_SetLedBlinkTime@OffTimeMs+1,w
 13602  1782  0022               	movlb	2	; select bank2
 13603  1783  00E6               	movwf	((_Led1Blink+1)^(0+256)+6)
 13604  1784  0020               	movlb	0	; select bank0
 13605  1785  0822               	movf	Led_SetLedBlinkTime@OffTimeMs,w
 13606  1786  0022               	movlb	2	; select bank2
 13607  1787  00E5               	movwf	(_Led1Blink^(0+256)+6)
 13608                           
 13609                           ;led.c: 257: }
 13610                           
 13611                           ;led.c: 256: break;
 13612                           
 13613                           ;led.c: 255: default:
 13614                           
 13615                           ;led.c: 253: break;
 13616  1788  0008               	return
 13617  1789                     l4238:	
 13618  1789  0874               	movf	Led_SetLedBlinkTime@Led,w
 13619                           
 13620                           ; Switch size 1, requested type "space"
 13621                           ; Number of cases is 1, Range of values is 1 to 1
 13622                           ; switch strategies available:
 13623                           ; Name         Instructions Cycles
 13624                           ; simple_byte            4     3 (average)
 13625                           ; direct_byte           11     9 (fixed)
 13626                           ; jumptable            263     9 (fixed)
 13627                           ;	Chosen strategy is simple_byte
 13628  178A  3A01               	xorlw	1	; case 1
 13629  178B  1903               	skipnz
 13630  178C  2F78               	goto	l4234
 13631  178D  2F8E               	goto	l693
 13632  178E                     l693:	
 13633  178E  0008               	return
 13634  178F                     __end_of_Led_SetLedBlinkTime:	
 13635                           
 13636                           	psect	text65
 13637  165A                     __ptext65:	
 13638 ;; *************** function _LowPowerMode *****************
 13639 ;; Defined at:
 13640 ;;		line 161 in file "../../../Framework/MercuryFwk/Source/c/03_Sml/02_Ssl/std_ser.c"
 13641 ;; Parameters:    Size  Location     Type
 13642 ;;		None
 13643 ;; Auto vars:     Size  Location     Type
 13644 ;;		None
 13645 ;; Return value:  Size  Location     Type
 13646 ;;                  1    wreg      void 
 13647 ;; Registers used:
 13648 ;;		wreg, status,2, status,0, pclath, cstack
 13649 ;; Tracked objects:
 13650 ;;		On entry : 0/0
 13651 ;;		On exit  : 0/0
 13652 ;;		Unchanged: 0/0
 13653 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13654 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13655 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13656 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13657 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13658 ;;Total ram usage:        0 bytes
 13659 ;; Hardware stack levels used:    1
 13660 ;; Hardware stack levels required when called:    3
 13661 ;; This function calls:
 13662 ;;		_Mcu_SetWdgSts
 13663 ;; This function is called by:
 13664 ;;		_StdS_ManageStdServices
 13665 ;; This function uses a non-reentrant model
 13666 ;;
 13667                           
 13668                           
 13669                           ;psect for function _LowPowerMode
 13670  165A                     _LowPowerMode:	
 13671                           
 13672                           ;std_ser.c: 164: LATA = 0x00;
 13673                           
 13674                           ;incstack = 0
 13675                           ; Regs used in _LowPowerMode: [wreg+status,2+status,0+pclath+cstack]
 13676  165A  0022               	movlb	2	; select bank2
 13677  165B  018C               	clrf	12	;volatile
 13678                           
 13679                           ;std_ser.c: 166: LATB = 0x00;
 13680  165C  018D               	clrf	13	;volatile
 13681                           
 13682                           ;std_ser.c: 168: LATC = 0x00;
 13683  165D  018E               	clrf	14	;volatile
 13684                           
 13685                           ;std_ser.c: 170: Mcu_SetWdgSts(((UINT8)(0)));
 13686  165E  3000               	movlw	0
 13687  165F  3195  25E4  3196   	fcall	_Mcu_SetWdgSts
 13688  1662  0063               	sleep	;# 
 13689                           
 13690                           ;std_ser.c: 177: Mcu_SetWdgSts(((UINT8)(1)));
 13691  1663  3001               	movlw	1
 13692  1664  3195  25E4         	fcall	_Mcu_SetWdgSts
 13693  1666  0008               	return
 13694  1667                     __end_of_LowPowerMode:	
 13695                           
 13696                           	psect	text66
 13697  15E4                     __ptext66:	
 13698 ;; *************** function _Mcu_SetWdgSts *****************
 13699 ;; Defined at:
 13700 ;;		line 237 in file "../../../Framework/MercuryFwk/Source/c/01_Hal/02_Drv/mcu_drv.c"
 13701 ;; Parameters:    Size  Location     Type
 13702 ;;  WdgSts          1    wreg     unsigned char 
 13703 ;; Auto vars:     Size  Location     Type
 13704 ;;  WdgSts          1    4[COMMON] unsigned char 
 13705 ;; Return value:  Size  Location     Type
 13706 ;;                  1    wreg      void 
 13707 ;; Registers used:
 13708 ;;		wreg, status,0
 13709 ;; Tracked objects:
 13710 ;;		On entry : 0/0
 13711 ;;		On exit  : 0/0
 13712 ;;		Unchanged: 0/0
 13713 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13714 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13715 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13716 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13717 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13718 ;;Total ram usage:        1 bytes
 13719 ;; Hardware stack levels used:    1
 13720 ;; Hardware stack levels required when called:    2
 13721 ;; This function calls:
 13722 ;;		Nothing
 13723 ;; This function is called by:
 13724 ;;		_LowPowerMode
 13725 ;;		_Wdg_MainTask
 13726 ;; This function uses a non-reentrant model
 13727 ;;
 13728                           
 13729                           
 13730                           ;psect for function _Mcu_SetWdgSts
 13731  15E4                     _Mcu_SetWdgSts:	
 13732                           
 13733                           ;incstack = 0
 13734                           ; Regs used in _Mcu_SetWdgSts: [wreg+status,0]
 13735                           ;Mcu_SetWdgSts@WdgSts stored from wreg
 13736  15E4  00F4               	movwf	Mcu_SetWdgSts@WdgSts
 13737                           
 13738                           ;mcu_drv.c: 240: WDTCONbits.SWDTEN = WdgSts;
 13739  15E5  0C74               	rrf	Mcu_SetWdgSts@WdgSts,w
 13740  15E6  0021               	movlb	1	; select bank1
 13741  15E7  1C03               	skipc
 13742  15E8  1017               	bcf	23,0	;volatile
 13743  15E9  1803               	skipnc
 13744  15EA  1417               	bsf	23,0	;volatile
 13745  15EB  0008               	return
 13746  15EC                     __end_of_Mcu_SetWdgSts:	
 13747                           
 13748                           	psect	text67
 13749  175D                     __ptext67:	
 13750 ;; *************** function _GetDieTemperature *****************
 13751 ;; Defined at:
 13752 ;;		line 188 in file "../../../Framework/MercuryFwk/Source/c/03_Sml/02_Ssl/std_ser.c"
 13753 ;; Parameters:    Size  Location     Type
 13754 ;;		None
 13755 ;; Auto vars:     Size  Location     Type
 13756 ;;  DieTempRes      2    5[BANK0 ] unsigned short 
 13757 ;; Return value:  Size  Location     Type
 13758 ;;                  2    3[BANK0 ] unsigned short 
 13759 ;; Registers used:
 13760 ;;		wreg, status,2, status,0, pclath, cstack
 13761 ;; Tracked objects:
 13762 ;;		On entry : 0/0
 13763 ;;		On exit  : 0/0
 13764 ;;		Unchanged: 0/0
 13765 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13766 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13767 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13768 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13769 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13770 ;;Total ram usage:        4 bytes
 13771 ;; Hardware stack levels used:    1
 13772 ;; Hardware stack levels required when called:    3
 13773 ;; This function calls:
 13774 ;;		_Adc_GetConvResult
 13775 ;;		_Adc_GetConvSts
 13776 ;;		_Adc_SelectChannel
 13777 ;;		_Adc_StartConversion
 13778 ;; This function is called by:
 13779 ;;		_StdS_ManageStdServices
 13780 ;; This function uses a non-reentrant model
 13781 ;;
 13782                           
 13783                           
 13784                           ;psect for function _GetDieTemperature
 13785  175D                     _GetDieTemperature:	
 13786                           
 13787                           ;std_ser.c: 190: UINT16 DieTempRes;
 13788                           ;std_ser.c: 193: Adc_SelectChannel(((UINT8)(29)));
 13789                           
 13790                           ;incstack = 0
 13791                           ; Regs used in _GetDieTemperature: [wreg+status,2+status,0+pclath+cstack]
 13792  175D  301D               	movlw	29
 13793  175E  3196  2636  3197   	fcall	_Adc_SelectChannel
 13794                           
 13795                           ;std_ser.c: 195: Adc_StartConversion();
 13796  1761  3195  25C5  3197   	fcall	_Adc_StartConversion
 13797  1764                     l4350:	
 13798                           ;std_ser.c: 197: while (Adc_GetConvSts() == AdcConvInProgress);
 13799                           
 13800  1764  3195  25D4  3197   	fcall	_Adc_GetConvSts
 13801  1767  3A00               	xorlw	0
 13802  1768  1903               	skipnz
 13803  1769  2F64               	goto	l4350
 13804                           
 13805                           ;std_ser.c: 199: DieTempRes = Adc_GetConvResult();
 13806  176A  3196  2677         	fcall	_Adc_GetConvResult
 13807  176C  0875               	movf	?_Adc_GetConvResult+1,w
 13808  176D  0020               	movlb	0	; select bank0
 13809  176E  00A6               	movwf	GetDieTemperature@DieTempRes+1
 13810  176F  0874               	movf	?_Adc_GetConvResult,w
 13811  1770  00A5               	movwf	GetDieTemperature@DieTempRes
 13812                           
 13813                           ;std_ser.c: 201: return DieTempRes;
 13814  1771  0826               	movf	GetDieTemperature@DieTempRes+1,w
 13815  1772  00A4               	movwf	?_GetDieTemperature+1
 13816  1773  0825               	movf	GetDieTemperature@DieTempRes,w
 13817  1774  00A3               	movwf	?_GetDieTemperature
 13818  1775  0008               	return
 13819  1776                     __end_of_GetDieTemperature:	
 13820                           
 13821                           	psect	text68
 13822  15C5                     __ptext68:	
 13823 ;; *************** function _Adc_StartConversion *****************
 13824 ;; Defined at:
 13825 ;;		line 144 in file "../../../Framework/MercuryFwk/Source/c/01_Hal/02_Drv/adc_drv.c"
 13826 ;; Parameters:    Size  Location     Type
 13827 ;;		None
 13828 ;; Auto vars:     Size  Location     Type
 13829 ;;		None
 13830 ;; Return value:  Size  Location     Type
 13831 ;;                  1    wreg      void 
 13832 ;; Registers used:
 13833 ;;		None
 13834 ;; Tracked objects:
 13835 ;;		On entry : 0/0
 13836 ;;		On exit  : 0/0
 13837 ;;		Unchanged: 0/0
 13838 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13839 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13840 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13841 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13842 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13843 ;;Total ram usage:        0 bytes
 13844 ;; Hardware stack levels used:    1
 13845 ;; Hardware stack levels required when called:    2
 13846 ;; This function calls:
 13847 ;;		Nothing
 13848 ;; This function is called by:
 13849 ;;		_GetDieTemperature
 13850 ;; This function uses a non-reentrant model
 13851 ;;
 13852                           
 13853                           
 13854                           ;psect for function _Adc_StartConversion
 13855  15C5                     _Adc_StartConversion:	
 13856                           
 13857                           ;adc_drv.c: 147: ADCON0bits.GO_nDONE = ((UINT8)(1));
 13858                           
 13859                           ;incstack = 0
 13860                           ; Regs used in _Adc_StartConversion: []
 13861  15C5  0021               	movlb	1	; select bank1
 13862  15C6  149D               	bsf	29,1	;volatile
 13863  15C7  0008               	return
 13864  15C8                     __end_of_Adc_StartConversion:	
 13865                           
 13866                           	psect	text69
 13867  1636                     __ptext69:	
 13868 ;; *************** function _Adc_SelectChannel *****************
 13869 ;; Defined at:
 13870 ;;		line 130 in file "../../../Framework/MercuryFwk/Source/c/01_Hal/02_Drv/adc_drv.c"
 13871 ;; Parameters:    Size  Location     Type
 13872 ;;  SelCh           1    wreg     unsigned char 
 13873 ;; Auto vars:     Size  Location     Type
 13874 ;;  SelCh           1    5[COMMON] unsigned char 
 13875 ;; Return value:  Size  Location     Type
 13876 ;;                  1    wreg      void 
 13877 ;; Registers used:
 13878 ;;		wreg, status,2, status,0
 13879 ;; Tracked objects:
 13880 ;;		On entry : 0/0
 13881 ;;		On exit  : 0/0
 13882 ;;		Unchanged: 0/0
 13883 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13884 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13885 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13886 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13887 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13888 ;;Total ram usage:        2 bytes
 13889 ;; Hardware stack levels used:    1
 13890 ;; Hardware stack levels required when called:    2
 13891 ;; This function calls:
 13892 ;;		Nothing
 13893 ;; This function is called by:
 13894 ;;		_GetDieTemperature
 13895 ;; This function uses a non-reentrant model
 13896 ;;
 13897                           
 13898                           
 13899                           ;psect for function _Adc_SelectChannel
 13900  1636                     _Adc_SelectChannel:	
 13901                           
 13902                           ;incstack = 0
 13903                           ; Regs used in _Adc_SelectChannel: [wreg+status,2+status,0]
 13904                           ;Adc_SelectChannel@SelCh stored from wreg
 13905  1636  00F5               	movwf	Adc_SelectChannel@SelCh
 13906                           
 13907                           ;adc_drv.c: 133: ADCON0bits.CHS = SelCh;
 13908  1637  0875               	movf	Adc_SelectChannel@SelCh,w
 13909  1638  00F4               	movwf	??_Adc_SelectChannel
 13910  1639  0DF4               	rlf	??_Adc_SelectChannel,f
 13911  163A  0DF4               	rlf	??_Adc_SelectChannel,f
 13912  163B  0021               	movlb	1	; select bank1
 13913  163C  081D               	movf	29,w	;volatile
 13914  163D  0674               	xorwf	??_Adc_SelectChannel,w
 13915  163E  3983               	andlw	-125
 13916  163F  0674               	xorwf	??_Adc_SelectChannel,w
 13917  1640  009D               	movwf	29	;volatile
 13918  1641  0008               	return
 13919  1642                     __end_of_Adc_SelectChannel:	
 13920                           
 13921                           	psect	text70
 13922  15D4                     __ptext70:	
 13923 ;; *************** function _Adc_GetConvSts *****************
 13924 ;; Defined at:
 13925 ;;		line 158 in file "../../../Framework/MercuryFwk/Source/c/01_Hal/02_Drv/adc_drv.c"
 13926 ;; Parameters:    Size  Location     Type
 13927 ;;		None
 13928 ;; Auto vars:     Size  Location     Type
 13929 ;;		None
 13930 ;; Return value:  Size  Location     Type
 13931 ;;                  1    wreg      enum E3655
 13932 ;; Registers used:
 13933 ;;		wreg, status,2, status,0
 13934 ;; Tracked objects:
 13935 ;;		On entry : 0/0
 13936 ;;		On exit  : 0/0
 13937 ;;		Unchanged: 0/0
 13938 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13939 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13940 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13941 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13942 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13943 ;;Total ram usage:        0 bytes
 13944 ;; Hardware stack levels used:    1
 13945 ;; Hardware stack levels required when called:    2
 13946 ;; This function calls:
 13947 ;;		Nothing
 13948 ;; This function is called by:
 13949 ;;		_GetDieTemperature
 13950 ;; This function uses a non-reentrant model
 13951 ;;
 13952                           
 13953                           
 13954                           ;psect for function _Adc_GetConvSts
 13955  15D4                     _Adc_GetConvSts:	
 13956                           
 13957                           ;adc_drv.c: 161: return ((AdcConvStsType)(ADCON0bits.GO_nDONE));
 13958                           
 13959                           ;incstack = 0
 13960                           ; Regs used in _Adc_GetConvSts: [wreg+status,2+status,0]
 13961  15D4  0021               	movlb	1	; select bank1
 13962  15D5  0C1D               	rrf	29,w	;volatile
 13963  15D6  3901               	andlw	1
 13964  15D7  0008               	return
 13965  15D8                     __end_of_Adc_GetConvSts:	
 13966                           
 13967                           	psect	text71
 13968  1677                     __ptext71:	
 13969 ;; *************** function _Adc_GetConvResult *****************
 13970 ;; Defined at:
 13971 ;;		line 172 in file "../../../Framework/MercuryFwk/Source/c/01_Hal/02_Drv/adc_drv.c"
 13972 ;; Parameters:    Size  Location     Type
 13973 ;;		None
 13974 ;; Auto vars:     Size  Location     Type
 13975 ;;  AdcResult       2    1[BANK0 ] unsigned short 
 13976 ;; Return value:  Size  Location     Type
 13977 ;;                  2    4[COMMON] unsigned short 
 13978 ;; Registers used:
 13979 ;;		wreg, status,2, status,0
 13980 ;; Tracked objects:
 13981 ;;		On entry : 0/0
 13982 ;;		On exit  : 0/0
 13983 ;;		Unchanged: 0/0
 13984 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13985 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13986 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13987 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13988 ;;      Totals:         2       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13989 ;;Total ram usage:        5 bytes
 13990 ;; Hardware stack levels used:    1
 13991 ;; Hardware stack levels required when called:    2
 13992 ;; This function calls:
 13993 ;;		Nothing
 13994 ;; This function is called by:
 13995 ;;		_GetDieTemperature
 13996 ;; This function uses a non-reentrant model
 13997 ;;
 13998                           
 13999                           
 14000                           ;psect for function _Adc_GetConvResult
 14001  1677                     _Adc_GetConvResult:	
 14002                           
 14003                           ;adc_drv.c: 174: UINT16 AdcResult;
 14004                           ;adc_drv.c: 177: AdcResult = (((ADRESH & 0x03) << 8) | ADRESL);
 14005                           
 14006                           ;incstack = 0
 14007                           ; Regs used in _Adc_GetConvResult: [wreg+status,2+status,0]
 14008  1677  3003               	movlw	3
 14009  1678  0021               	movlb	1	; select bank1
 14010  1679  051C               	andwf	28,w	;volatile
 14011  167A  0020               	movlb	0	; select bank0
 14012  167B  00A0               	movwf	??_Adc_GetConvResult
 14013  167C  0820               	movf	??_Adc_GetConvResult,w
 14014  167D  00A2               	movwf	Adc_GetConvResult@AdcResult+1
 14015  167E  0021               	movlb	1	; select bank1
 14016  167F  081B               	movf	27,w	;volatile
 14017  1680  0020               	movlb	0	; select bank0
 14018  1681  00A1               	movwf	Adc_GetConvResult@AdcResult
 14019                           
 14020                           ;adc_drv.c: 179: return AdcResult;
 14021  1682  0822               	movf	Adc_GetConvResult@AdcResult+1,w
 14022  1683  00F5               	movwf	?_Adc_GetConvResult+1
 14023  1684  0821               	movf	Adc_GetConvResult@AdcResult,w
 14024  1685  00F4               	movwf	?_Adc_GetConvResult
 14025  1686  0008               	return
 14026  1687                     __end_of_Adc_GetConvResult:	
 14027                           
 14028                           	psect	text72
 14029  087E                     __ptext72:	
 14030 ;; *************** function _GenerateEvt *****************
 14031 ;; Defined at:
 14032 ;;		line 73 in file "../../../Framework/MercuryFwk/Source/c/02_Osl/os_ser.c"
 14033 ;; Parameters:    Size  Location     Type
 14034 ;;  Event           1    wreg     PTR struct _EventStructu
 14035 ;;		 -> I2cReplyPacketReady(2), I2cWriteRequest(2), I2cSetAddress(2), I2cNewTxNotification(2), 
 14036 ;;		 -> I2cNewPacketNotification(2), 
 14037 ;; Auto vars:     Size  Location     Type
 14038 ;;  Event           1    1[BANK0 ] PTR struct _EventStructu
 14039 ;;		 -> I2cReplyPacketReady(2), I2cWriteRequest(2), I2cSetAddress(2), I2cNewTxNotification(2), 
 14040 ;;		 -> I2cNewPacketNotification(2), 
 14041 ;;  EventStatus     1    0[BANK0 ] enum E3633
 14042 ;; Return value:  Size  Location     Type
 14043 ;;                  1    wreg      enum E3629
 14044 ;; Registers used:
 14045 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 14046 ;; Tracked objects:
 14047 ;;		On entry : 0/0
 14048 ;;		On exit  : 0/0
 14049 ;;		Unchanged: 0/0
 14050 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14051 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14052 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14053 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14054 ;;      Totals:         1       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14055 ;;Total ram usage:        3 bytes
 14056 ;; Hardware stack levels used:    1
 14057 ;; Hardware stack levels required when called:    2
 14058 ;; This function calls:
 14059 ;;		Nothing
 14060 ;; This function is called by:
 14061 ;;		_I2c_DataReceiveSm
 14062 ;;		_I2cSlv_I2cDrvHandle
 14063 ;;		_StdS_ManageStdServices
 14064 ;;		_ManageProtocol
 14065 ;;		_AppSm
 14066 ;; This function uses a non-reentrant model
 14067 ;;
 14068                           
 14069                           
 14070                           ;psect for function _GenerateEvt
 14071  087E                     _GenerateEvt:	
 14072                           
 14073                           ;incstack = 0
 14074                           ; Regs used in _GenerateEvt: [wreg+fsr1l+fsr1h+status,2+status,0]
 14075                           ;GenerateEvt@Event stored from wreg
 14076  087E  0020               	movlb	0	; select bank0
 14077  087F  00A1               	movwf	GenerateEvt@Event
 14078                           
 14079                           ;os_ser.c: 76: EventStatusType EventStatus = EventIdle;
 14080  0880  01A0               	clrf	GenerateEvt@EventStatus
 14081                           
 14082                           ;os_ser.c: 78: if ((Event->EventOptions != ((UINT8)(2))) && (Event->EventOptions != ((UI
      +                          NT8)(3))))
 14083  0881  0821               	movf	GenerateEvt@Event,w
 14084  0882  0086               	movwf	6
 14085  0883  0187               	clrf	7
 14086  0884  3002               	movlw	2
 14087  0885  0601               	xorwf	1,w
 14088  0886  1903               	btfsc	3,2
 14089  0887  289B               	goto	l4306
 14090  0888  0821               	movf	GenerateEvt@Event,w
 14091  0889  0086               	movwf	6
 14092  088A  0187               	clrf	7
 14093  088B  3003               	movlw	3
 14094  088C  0601               	xorwf	1,w
 14095  088D  1903               	btfsc	3,2
 14096  088E  289B               	goto	l4306
 14097                           
 14098                           ;os_ser.c: 79: {
 14099                           ;os_ser.c: 81: Event->EventStatus = EventSent;
 14100  088F  3002               	movlw	2
 14101  0890  00F4               	movwf	??_GenerateEvt
 14102  0891  0A21               	incf	GenerateEvt@Event,w
 14103  0892  0086               	movwf	6
 14104  0893  0187               	clrf	7
 14105  0894  0874               	movf	??_GenerateEvt,w
 14106  0895  0081               	movwf	1
 14107                           
 14108                           ;os_ser.c: 83: EventStatus = EventSent;
 14109  0896  3002               	movlw	2
 14110  0897  00F4               	movwf	??_GenerateEvt
 14111  0898  0874               	movf	??_GenerateEvt,w
 14112  0899  00A0               	movwf	GenerateEvt@EventStatus
 14113                           
 14114                           ;os_ser.c: 84: }
 14115  089A  0008               	return
 14116  089B                     l4306:	
 14117                           
 14118                           ;os_ser.c: 85: else
 14119                           ;os_ser.c: 86: {
 14120                           ;os_ser.c: 88: EventStatus = EventNotSent;
 14121  089B  3003               	movlw	3
 14122  089C  00F4               	movwf	??_GenerateEvt
 14123  089D  0874               	movf	??_GenerateEvt,w
 14124  089E  00A0               	movwf	GenerateEvt@EventStatus
 14125  089F  0008               	return
 14126  08A0                     __end_of_GenerateEvt:	
 14127                           ;os_ser.c: 89: }
 14128                           ;os_ser.c: 92: return(EventStatus);
 14129                           ;	Return value of _GenerateEvt is never used
 14130                           
 14131                           
 14132                           	psect	text73
 14133  16C7                     __ptext73:	
 14134 ;; *************** function _ControlLedDirect *****************
 14135 ;; Defined at:
 14136 ;;		line 122 in file "../../../Framework/MercuryFwk/Source/c/03_Sml/02_Ssl/std_ser.c"
 14137 ;; Parameters:    Size  Location     Type
 14138 ;;		None
 14139 ;; Auto vars:     Size  Location     Type
 14140 ;;		None
 14141 ;; Return value:  Size  Location     Type
 14142 ;;                  1    wreg      void 
 14143 ;; Registers used:
 14144 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
 14145 ;; Tracked objects:
 14146 ;;		On entry : 0/0
 14147 ;;		On exit  : 0/0
 14148 ;;		Unchanged: 0/0
 14149 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14150 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14151 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14152 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14153 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14154 ;;Total ram usage:        0 bytes
 14155 ;; Hardware stack levels used:    1
 14156 ;; Hardware stack levels required when called:    3
 14157 ;; This function calls:
 14158 ;;		_Led_SetLedStatus
 14159 ;; This function is called by:
 14160 ;;		_StdS_ManageStdServices
 14161 ;; This function uses a non-reentrant model
 14162 ;;
 14163                           
 14164                           
 14165                           ;psect for function _ControlLedDirect
 14166  16C7                     _ControlLedDirect:	
 14167                           
 14168                           ;std_ser.c: 125: if (LedBehaviourSts == ((UINT8)(3)))
 14169                           
 14170                           ;incstack = 0
 14171                           ; Regs used in _ControlLedDirect: [wreg-fsr0h+status,2+status,0+pclath+cstack]
 14172  16C7  3003               	movlw	3
 14173  16C8  0679               	xorwf	_LedBehaviourSts,w
 14174  16C9  1D03               	btfss	3,2
 14175  16CA  0008               	return
 14176                           
 14177                           ;std_ser.c: 126: {
 14178                           ;std_ser.c: 128: if (CmdBuffer[((UINT8)(1))] == ((UINT8)(1)))
 14179  16CB  0025               	movlb	5	; select bank5
 14180  16CC  0321               	decf	(_CmdBuffer^(0+640)+1),w
 14181  16CD  1D03               	btfss	3,2
 14182  16CE  2ED5               	goto	l4344
 14183                           
 14184                           ;std_ser.c: 129: {
 14185                           ;std_ser.c: 130: Led_SetLedStatus(1u,LED_STS_ON);
 14186  16CF  01F4               	clrf	Led_SetLedStatus@LedSts
 14187  16D0  0AF4               	incf	Led_SetLedStatus@LedSts,f
 14188  16D1  3001               	movlw	1
 14189  16D2  3196  2667         	fcall	_Led_SetLedStatus
 14190                           
 14191                           ;std_ser.c: 131: }
 14192  16D4  0008               	return
 14193  16D5                     l4344:	
 14194                           
 14195                           ;std_ser.c: 132: else
 14196                           ;std_ser.c: 133: {
 14197                           ;std_ser.c: 134: Led_SetLedStatus(1u,LED_STS_OFF);
 14198  16D5  01F4               	clrf	Led_SetLedStatus@LedSts
 14199  16D6  3001               	movlw	1
 14200  16D7  3196  2667         	fcall	_Led_SetLedStatus
 14201  16D9  0008               	return
 14202  16DA                     __end_of_ControlLedDirect:	
 14203                           
 14204                           	psect	text74
 14205  1667                     __ptext74:	
 14206 ;; *************** function _Led_SetLedStatus *****************
 14207 ;; Defined at:
 14208 ;;		line 221 in file "../../../Framework/MercuryFwk/Source/c/03_Sml/02_Ssl/led.c"
 14209 ;; Parameters:    Size  Location     Type
 14210 ;;  Led             1    wreg     unsigned char 
 14211 ;;  LedSts          1    4[COMMON] unsigned char 
 14212 ;; Auto vars:     Size  Location     Type
 14213 ;;  Led             1    0[BANK0 ] unsigned char 
 14214 ;; Return value:  Size  Location     Type
 14215 ;;                  1    wreg      void 
 14216 ;; Registers used:
 14217 ;;		wreg, fsr0l, fsr0h, status,2, status,0
 14218 ;; Tracked objects:
 14219 ;;		On entry : 0/0
 14220 ;;		On exit  : 0/0
 14221 ;;		Unchanged: 0/0
 14222 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14223 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14224 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14225 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14226 ;;      Totals:         2       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14227 ;;Total ram usage:        3 bytes
 14228 ;; Hardware stack levels used:    1
 14229 ;; Hardware stack levels required when called:    2
 14230 ;; This function calls:
 14231 ;;		Nothing
 14232 ;; This function is called by:
 14233 ;;		_LedPulseStateMachine
 14234 ;;		_I2cSlv_I2cDrvHandle
 14235 ;;		_Led_InitSeq
 14236 ;;		_SetLedBehavSts
 14237 ;;		_ControlLedDirect
 14238 ;; This function uses a non-reentrant model
 14239 ;;
 14240                           
 14241                           
 14242                           ;psect for function _Led_SetLedStatus
 14243  1667                     _Led_SetLedStatus:	
 14244                           
 14245                           ;incstack = 0
 14246                           ; Regs used in _Led_SetLedStatus: [wreg-fsr0h+status,2+status,0]
 14247                           ;Led_SetLedStatus@Led stored from wreg
 14248  1667  0020               	movlb	0	; select bank0
 14249  1668  00A0               	movwf	Led_SetLedStatus@Led
 14250                           
 14251                           ;led.c: 224: switch (Led)
 14252  1669  2E70               	goto	l4230
 14253  166A                     l4226:	
 14254                           ;led.c: 225: {
 14255                           ;led.c: 226: case 1u:
 14256                           
 14257                           
 14258                           ;led.c: 227: Led1Sts = LedSts;
 14259  166A  0874               	movf	Led_SetLedStatus@LedSts,w
 14260  166B  00F5               	movwf	??_Led_SetLedStatus
 14261  166C  0875               	movf	??_Led_SetLedStatus,w
 14262  166D  0021               	movlb	1	; select bank1
 14263  166E  00E7               	movwf	_Led1Sts^(0+128)
 14264                           
 14265                           ;led.c: 232: }
 14266                           
 14267                           ;led.c: 231: break;
 14268                           
 14269                           ;led.c: 230: default:
 14270                           
 14271                           ;led.c: 228: break;
 14272  166F  0008               	return
 14273  1670                     l4230:	
 14274  1670  0020               	movlb	0	; select bank0
 14275  1671  0820               	movf	Led_SetLedStatus@Led,w
 14276                           
 14277                           ; Switch size 1, requested type "space"
 14278                           ; Number of cases is 1, Range of values is 1 to 1
 14279                           ; switch strategies available:
 14280                           ; Name         Instructions Cycles
 14281                           ; simple_byte            4     3 (average)
 14282                           ; direct_byte           11     9 (fixed)
 14283                           ; jumptable            263     9 (fixed)
 14284                           ;	Chosen strategy is simple_byte
 14285  1672  3A01               	xorlw	1	; case 1
 14286  1673  1903               	skipnz
 14287  1674  2E6A               	goto	l4226
 14288  1675  2E76               	goto	l686
 14289  1676                     l686:	
 14290  1676  0008               	return
 14291  1677                     __end_of_Led_SetLedStatus:	
 14292                           
 14293                           	psect	text75
 14294  15C2                     __ptext75:	
 14295 ;; *************** function _BoardReset *****************
 14296 ;; Defined at:
 14297 ;;		line 147 in file "../../../Framework/MercuryFwk/Source/c/03_Sml/02_Ssl/std_ser.c"
 14298 ;; Parameters:    Size  Location     Type
 14299 ;;		None
 14300 ;; Auto vars:     Size  Location     Type
 14301 ;;		None
 14302 ;; Return value:  Size  Location     Type
 14303 ;;                  1    wreg      void 
 14304 ;; Registers used:
 14305 ;;		status,2, status,0, pclath, cstack
 14306 ;; Tracked objects:
 14307 ;;		On entry : 0/0
 14308 ;;		On exit  : 0/0
 14309 ;;		Unchanged: 0/0
 14310 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14311 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14312 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14313 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14314 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14315 ;;Total ram usage:        0 bytes
 14316 ;; Hardware stack levels used:    1
 14317 ;; Hardware stack levels required when called:    3
 14318 ;; This function calls:
 14319 ;;		_Mcu_Reset
 14320 ;; This function is called by:
 14321 ;;		_StdS_ManageStdServices
 14322 ;; This function uses a non-reentrant model
 14323 ;;
 14324                           
 14325                           
 14326                           ;psect for function _BoardReset
 14327  15C2                     _BoardReset:	
 14328                           
 14329                           ;std_ser.c: 150: Mcu_Reset();
 14330                           
 14331                           ;incstack = 0
 14332                           ; Regs used in _BoardReset: [status,2+status,0+pclath+cstack]
 14333  15C2  3195  25BE         	fcall	_Mcu_Reset
 14334  15C4  0008               	return
 14335  15C5                     __end_of_BoardReset:	
 14336                           
 14337                           	psect	text76
 14338  15BE                     __ptext76:	
 14339 ;; *************** function _Mcu_Reset *****************
 14340 ;; Defined at:
 14341 ;;		line 293 in file "../../../Framework/MercuryFwk/Source/c/01_Hal/02_Drv/mcu_drv.c"
 14342 ;; Parameters:    Size  Location     Type
 14343 ;;		None
 14344 ;; Auto vars:     Size  Location     Type
 14345 ;;		None
 14346 ;; Return value:  Size  Location     Type
 14347 ;;                  1    wreg      void 
 14348 ;; Registers used:
 14349 ;;		None
 14350 ;; Tracked objects:
 14351 ;;		On entry : 0/0
 14352 ;;		On exit  : 0/0
 14353 ;;		Unchanged: 0/0
 14354 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14355 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14356 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14357 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14358 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14359 ;;Total ram usage:        0 bytes
 14360 ;; Hardware stack levels used:    1
 14361 ;; Hardware stack levels required when called:    2
 14362 ;; This function calls:
 14363 ;;		Nothing
 14364 ;; This function is called by:
 14365 ;;		_I2c_DataReceiveSm
 14366 ;;		_BoardReset
 14367 ;; This function uses a non-reentrant model
 14368 ;;
 14369                           
 14370                           
 14371                           ;psect for function _Mcu_Reset
 14372  15BE                     _Mcu_Reset:	
 14373                           
 14374                           ;incstack = 0
 14375                           ; Regs used in _Mcu_Reset: []
 14376  15BE  0001               	reset	;# 
 14377  15BF  0008               	return
 14378  15C0                     __end_of_Mcu_Reset:	
 14379                           
 14380                           	psect	text77
 14381  17E2                     __ptext77:	
 14382 ;; *************** function _SetBuffer *****************
 14383 ;; Defined at:
 14384 ;;		line 145 in file "../../../Framework/MercuryFwk/Source/c/03_Sml/02_Ssl/sf.c"
 14385 ;; Parameters:    Size  Location     Type
 14386 ;;  Buffer          1    wreg     PTR unsigned char 
 14387 ;;		 -> HumidityStr(5), TemperatureStr(5), 
 14388 ;;  Value           1    0[BANK0 ] unsigned char 
 14389 ;;  Len             2    1[BANK0 ] unsigned short 
 14390 ;; Auto vars:     Size  Location     Type
 14391 ;;  Buffer          1    3[BANK0 ] PTR unsigned char 
 14392 ;;		 -> HumidityStr(5), TemperatureStr(5), 
 14393 ;;  Index           1    4[BANK0 ] unsigned char 
 14394 ;; Return value:  Size  Location     Type
 14395 ;;                  1    wreg      void 
 14396 ;; Registers used:
 14397 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 14398 ;; Tracked objects:
 14399 ;;		On entry : 0/0
 14400 ;;		On exit  : 0/0
 14401 ;;		Unchanged: 0/0
 14402 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14403 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14404 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14405 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14406 ;;      Totals:         2       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14407 ;;Total ram usage:        7 bytes
 14408 ;; Hardware stack levels used:    1
 14409 ;; Hardware stack levels required when called:    2
 14410 ;; This function calls:
 14411 ;;		Nothing
 14412 ;; This function is called by:
 14413 ;;		_ManageProtocol
 14414 ;; This function uses a non-reentrant model
 14415 ;;
 14416                           
 14417                           
 14418                           ;psect for function _SetBuffer
 14419  17E2                     _SetBuffer:	
 14420                           
 14421                           ;incstack = 0
 14422                           ; Regs used in _SetBuffer: [wreg+fsr1l+fsr1h+status,2+status,0]
 14423                           ;SetBuffer@Buffer stored from wreg
 14424  17E2  0020               	movlb	0	; select bank0
 14425  17E3  00A3               	movwf	SetBuffer@Buffer
 14426                           
 14427                           ;sf.c: 147: UINT8 Index = 0;
 14428  17E4  01A4               	clrf	SetBuffer@Index
 14429                           
 14430                           ;sf.c: 150: for (Index = 0; Index <= Len; Index++)
 14431  17E5  01A4               	clrf	SetBuffer@Index
 14432  17E6                     l4436:	
 14433  17E6  0824               	movf	SetBuffer@Index,w
 14434  17E7  00F4               	movwf	??_SetBuffer
 14435  17E8  01F5               	clrf	??_SetBuffer+1
 14436  17E9  0875               	movf	??_SetBuffer+1,w
 14437  17EA  0222               	subwf	SetBuffer@Len+1,w
 14438  17EB  1D03               	skipz
 14439  17EC  2FEF               	goto	u3575
 14440  17ED  0874               	movf	??_SetBuffer,w
 14441  17EE  0221               	subwf	SetBuffer@Len,w
 14442  17EF                     u3575:	
 14443  17EF  1C03               	btfss	3,0
 14444  17F0  0008               	return
 14445                           
 14446                           ;sf.c: 151: {
 14447                           ;sf.c: 152: *(Buffer + Index) = Value;
 14448  17F1  0820               	movf	SetBuffer@Value,w
 14449  17F2  00F4               	movwf	??_SetBuffer
 14450  17F3  0824               	movf	SetBuffer@Index,w
 14451  17F4  0723               	addwf	SetBuffer@Buffer,w
 14452  17F5  00F5               	movwf	??_SetBuffer+1
 14453  17F6  0875               	movf	??_SetBuffer+1,w
 14454  17F7  0086               	movwf	6
 14455  17F8  0187               	clrf	7
 14456  17F9  0874               	movf	??_SetBuffer,w
 14457  17FA  0081               	movwf	1
 14458  17FB  3001               	movlw	1
 14459  17FC  00F4               	movwf	??_SetBuffer
 14460  17FD  0874               	movf	??_SetBuffer,w
 14461  17FE  07A4               	addwf	SetBuffer@Index,f
 14462  17FF  2FE6               	goto	l4436
 14463  1800                     __end_of_SetBuffer:	
 14464                           
 14465                           	psect	text78
 14466  083C                     __ptext78:	
 14467 ;; *************** function _ReceiveEvt *****************
 14468 ;; Defined at:
 14469 ;;		line 103 in file "../../../Framework/MercuryFwk/Source/c/02_Osl/os_ser.c"
 14470 ;; Parameters:    Size  Location     Type
 14471 ;;  Event           1    wreg     PTR struct _EventStructu
 14472 ;;		 -> I2cReplyPacketReady(2), I2cWriteRequest(2), I2cSetAddress(2), I2cNewTxNotification(2), 
 14473 ;;		 -> I2cNewPacketNotification(2), 
 14474 ;; Auto vars:     Size  Location     Type
 14475 ;;  Event           1    5[COMMON] PTR struct _EventStructu
 14476 ;;		 -> I2cReplyPacketReady(2), I2cWriteRequest(2), I2cSetAddress(2), I2cNewTxNotification(2), 
 14477 ;;		 -> I2cNewPacketNotification(2), 
 14478 ;;  EventStatus     1    4[COMMON] enum E3633
 14479 ;; Return value:  Size  Location     Type
 14480 ;;                  1    wreg      enum E3629
 14481 ;; Registers used:
 14482 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 14483 ;; Tracked objects:
 14484 ;;		On entry : 0/0
 14485 ;;		On exit  : 0/0
 14486 ;;		Unchanged: 0/0
 14487 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14488 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14489 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14490 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14491 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14492 ;;Total ram usage:        2 bytes
 14493 ;; Hardware stack levels used:    1
 14494 ;; Hardware stack levels required when called:    2
 14495 ;; This function calls:
 14496 ;;		Nothing
 14497 ;; This function is called by:
 14498 ;;		_I2c_DataReceiveSm
 14499 ;;		_I2cSlv_I2cDrvHandle
 14500 ;;		_ManageProtocol
 14501 ;; This function uses a non-reentrant model
 14502 ;;
 14503                           
 14504                           
 14505                           ;psect for function _ReceiveEvt
 14506  083C                     _ReceiveEvt:	
 14507                           
 14508                           ;incstack = 0
 14509                           ; Regs used in _ReceiveEvt: [wreg+fsr1l+fsr1h+status,2+status,0]
 14510                           ;ReceiveEvt@Event stored from wreg
 14511  083C  00F5               	movwf	ReceiveEvt@Event
 14512                           
 14513                           ;os_ser.c: 106: EventStatusType EventStatus = EventIdle;
 14514  083D  01F4               	clrf	ReceiveEvt@EventStatus
 14515                           
 14516                           ;os_ser.c: 108: if ((Event->EventOptions != ((UINT8)(1))) && (Event->EventOptions != ((U
      +                          INT8)(3))))
 14517  083E  0875               	movf	ReceiveEvt@Event,w
 14518  083F  0086               	movwf	6
 14519  0840  0187               	clrf	7
 14520  0841  0301               	decf	1,w
 14521  0842  1903               	btfsc	3,2
 14522  0843  285B               	goto	l4402
 14523  0844  0875               	movf	ReceiveEvt@Event,w
 14524  0845  0086               	movwf	6
 14525  0846  0187               	clrf	7
 14526  0847  3003               	movlw	3
 14527  0848  0601               	xorwf	1,w
 14528  0849  1903               	btfsc	3,2
 14529  084A  285B               	goto	l4402
 14530                           
 14531                           ;os_ser.c: 109: {
 14532                           ;os_ser.c: 111: if (Event->EventStatus == EventSent)
 14533  084B  0A75               	incf	ReceiveEvt@Event,w
 14534  084C  0086               	movwf	6
 14535  084D  0187               	clrf	7
 14536  084E  3002               	movlw	2
 14537  084F  0601               	xorwf	1,w
 14538  0850  1D03               	btfss	3,2
 14539  0851  285A               	goto	l4400
 14540                           
 14541                           ;os_ser.c: 112: {
 14542                           ;os_ser.c: 114: Event->EventStatus = EventReceived;
 14543  0852  0A75               	incf	ReceiveEvt@Event,w
 14544  0853  0086               	movwf	6
 14545  0854  0187               	clrf	7
 14546  0855  0181               	clrf	1
 14547  0856  0A81               	incf	1,f
 14548                           
 14549                           ;os_ser.c: 116: EventStatus = EventReceived;
 14550  0857  01F4               	clrf	ReceiveEvt@EventStatus
 14551  0858  0AF4               	incf	ReceiveEvt@EventStatus,f
 14552                           
 14553                           ;os_ser.c: 117: }
 14554  0859  285B               	goto	l4402
 14555  085A                     l4400:	
 14556                           
 14557                           ;os_ser.c: 118: else
 14558                           ;os_ser.c: 119: {
 14559                           ;os_ser.c: 121: EventStatus = EventIdle;
 14560  085A  01F4               	clrf	ReceiveEvt@EventStatus
 14561  085B                     l4402:	
 14562                           
 14563                           ;os_ser.c: 122: }
 14564                           ;os_ser.c: 123: }
 14565                           ;os_ser.c: 126: return(EventStatus);
 14566  085B  0874               	movf	ReceiveEvt@EventStatus,w
 14567  085C  0008               	return
 14568  085D                     __end_of_ReceiveEvt:	
 14569                           
 14570                           	psect	text79
 14571  0AA7                     __ptext79:	
 14572 ;; *************** function _Adc_InitAdcModule *****************
 14573 ;; Defined at:
 14574 ;;		line 107 in file "../../../Framework/MercuryFwk/Source/c/01_Hal/02_Drv/adc_drv.c"
 14575 ;; Parameters:    Size  Location     Type
 14576 ;;  AdcConfig       1    wreg     PTR struct _AdcCfgType
 14577 ;;		 -> App_MainTask@AdcConfig(6), 
 14578 ;; Auto vars:     Size  Location     Type
 14579 ;;  AdcConfig       1    4[COMMON] PTR struct _AdcCfgType
 14580 ;;		 -> App_MainTask@AdcConfig(6), 
 14581 ;; Return value:  Size  Location     Type
 14582 ;;                  1    wreg      void 
 14583 ;; Registers used:
 14584 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 14585 ;; Tracked objects:
 14586 ;;		On entry : 0/0
 14587 ;;		On exit  : 0/0
 14588 ;;		Unchanged: 0/0
 14589 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14590 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14591 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14592 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14593 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14594 ;;Total ram usage:        1 bytes
 14595 ;; Hardware stack levels used:    1
 14596 ;; Hardware stack levels required when called:    2
 14597 ;; This function calls:
 14598 ;;		Nothing
 14599 ;; This function is called by:
 14600 ;;		_App_MainTask
 14601 ;; This function uses a non-reentrant model
 14602 ;;
 14603                           
 14604                           
 14605                           ;psect for function _Adc_InitAdcModule
 14606  0AA7                     _Adc_InitAdcModule:	
 14607                           
 14608                           ;incstack = 0
 14609                           ; Regs used in _Adc_InitAdcModule: [wreg+fsr1l+fsr1h+status,2+status,0]
 14610                           ;Adc_InitAdcModule@AdcConfig stored from wreg
 14611  0AA7  00F4               	movwf	Adc_InitAdcModule@AdcConfig
 14612                           
 14613                           ;adc_drv.c: 110: ADCON0bits.ADON = AdcConfig->AdcEnable;
 14614  0AA8  0874               	movf	Adc_InitAdcModule@AdcConfig,w
 14615  0AA9  0086               	movwf	6
 14616  0AAA  0187               	clrf	7
 14617  0AAB  0C01               	rrf	1,w
 14618  0AAC  0021               	movlb	1	; select bank1
 14619  0AAD  1C03               	skipc
 14620  0AAE  101D               	bcf	29,0	;volatile
 14621  0AAF  1803               	skipnc
 14622  0AB0  141D               	bsf	29,0	;volatile
 14623                           
 14624                           ;adc_drv.c: 112: ADCON1bits.ADFM = AdcConfig->AdcResultFormat;
 14625  0AB1  0A74               	incf	Adc_InitAdcModule@AdcConfig,w
 14626  0AB2  0086               	movwf	6
 14627  0AB3  0187               	clrf	7
 14628  0AB4  0C01               	rrf	1,w
 14629  0AB5  1C03               	skipc
 14630  0AB6  139E               	bcf	30,7	;volatile
 14631  0AB7  1803               	skipnc
 14632  0AB8  179E               	bsf	30,7	;volatile
 14633                           
 14634                           ;adc_drv.c: 114: ADCON1bits.ADCS0 = AdcConfig->AdcConvClock;
 14635  0AB9  0874               	movf	Adc_InitAdcModule@AdcConfig,w
 14636  0ABA  3E02               	addlw	2
 14637  0ABB  0086               	movwf	6
 14638  0ABC  0187               	clrf	7
 14639  0ABD  0C01               	rrf	1,w
 14640  0ABE  1C03               	skipc
 14641  0ABF  121E               	bcf	30,4	;volatile
 14642  0AC0  1803               	skipnc
 14643  0AC1  161E               	bsf	30,4	;volatile
 14644                           
 14645                           ;adc_drv.c: 116: ADCON1bits.ADNREF = AdcConfig->AdcNegRef;
 14646  0AC2  0874               	movf	Adc_InitAdcModule@AdcConfig,w
 14647  0AC3  3E03               	addlw	3
 14648  0AC4  0086               	movwf	6
 14649  0AC5  0187               	clrf	7
 14650  0AC6  0C01               	rrf	1,w
 14651  0AC7  1C03               	skipc
 14652  0AC8  111E               	bcf	30,2	;volatile
 14653  0AC9  1803               	skipnc
 14654  0ACA  151E               	bsf	30,2	;volatile
 14655                           
 14656                           ;adc_drv.c: 117: ADCON1bits.ADPREF = AdcConfig->AdcPosRef;
 14657  0ACB  0874               	movf	Adc_InitAdcModule@AdcConfig,w
 14658  0ACC  3E04               	addlw	4
 14659  0ACD  0086               	movwf	6
 14660  0ACE  0187               	clrf	7
 14661  0ACF  081E               	movf	30,w	;volatile
 14662  0AD0  0601               	xorwf	1,w
 14663  0AD1  39FC               	andlw	-4
 14664  0AD2  0601               	xorwf	1,w
 14665  0AD3  009E               	movwf	30	;volatile
 14666                           
 14667                           ;adc_drv.c: 119: PIE1bits.ADIE = AdcConfig->AdcIntEnabled;
 14668  0AD4  0874               	movf	Adc_InitAdcModule@AdcConfig,w
 14669  0AD5  3E05               	addlw	5
 14670  0AD6  0086               	movwf	6
 14671  0AD7  0187               	clrf	7
 14672  0AD8  0C01               	rrf	1,w
 14673  0AD9  1C03               	skipc
 14674  0ADA  1311               	bcf	17,6	;volatile
 14675  0ADB  1803               	skipnc
 14676  0ADC  1711               	bsf	17,6	;volatile
 14677  0ADD  0008               	return
 14678  0ADE                     __end_of_Adc_InitAdcModule:	
 14679                           
 14680                           	psect	text80
 14681  0D73                     __ptext80:	
 14682 ;; *************** function _Adc_ConfigAnCh *****************
 14683 ;; Defined at:
 14684 ;;		line 73 in file "../../../Framework/MercuryFwk/Source/c/01_Hal/02_Drv/adc_drv.c"
 14685 ;; Parameters:    Size  Location     Type
 14686 ;;  AnChSel         1    wreg     PTR struct _AnalogChSelT
 14687 ;;		 -> App_MainTask@AnalogChSel(12), 
 14688 ;; Auto vars:     Size  Location     Type
 14689 ;;  AnChSel         1    4[COMMON] PTR struct _AnalogChSelT
 14690 ;;		 -> App_MainTask@AnalogChSel(12), 
 14691 ;; Return value:  Size  Location     Type
 14692 ;;                  1    wreg      void 
 14693 ;; Registers used:
 14694 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 14695 ;; Tracked objects:
 14696 ;;		On entry : 0/0
 14697 ;;		On exit  : 0/0
 14698 ;;		Unchanged: 0/0
 14699 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14700 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14701 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14702 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14703 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14704 ;;Total ram usage:        1 bytes
 14705 ;; Hardware stack levels used:    1
 14706 ;; Hardware stack levels required when called:    2
 14707 ;; This function calls:
 14708 ;;		Nothing
 14709 ;; This function is called by:
 14710 ;;		_App_MainTask
 14711 ;; This function uses a non-reentrant model
 14712 ;;
 14713                           
 14714                           
 14715                           ;psect for function _Adc_ConfigAnCh
 14716  0D73                     _Adc_ConfigAnCh:	
 14717                           
 14718                           ;incstack = 0
 14719                           ; Regs used in _Adc_ConfigAnCh: [wreg+fsr1l+fsr1h+status,2+status,0]
 14720                           ;Adc_ConfigAnCh@AnChSel stored from wreg
 14721  0D73  00F4               	movwf	Adc_ConfigAnCh@AnChSel
 14722                           
 14723                           ;adc_drv.c: 76: ANSELA = 0x00;
 14724  0D74  0023               	movlb	3	; select bank3
 14725  0D75  018C               	clrf	12	;volatile
 14726                           
 14727                           ;adc_drv.c: 77: ANSELAbits.ANSA0 = AnChSel->AnSelA0An0;
 14728  0D76  0874               	movf	Adc_ConfigAnCh@AnChSel,w
 14729  0D77  0086               	movwf	6
 14730  0D78  0187               	clrf	7
 14731  0D79  0C01               	rrf	1,w
 14732  0D7A  1C03               	skipc
 14733  0D7B  100C               	bcf	12,0	;volatile
 14734  0D7C  1803               	skipnc
 14735  0D7D  140C               	bsf	12,0	;volatile
 14736                           
 14737                           ;adc_drv.c: 78: ANSELAbits.ANSA1 = AnChSel->AnSelA1An1;
 14738  0D7E  0A74               	incf	Adc_ConfigAnCh@AnChSel,w
 14739  0D7F  0086               	movwf	6
 14740  0D80  0187               	clrf	7
 14741  0D81  0C01               	rrf	1,w
 14742  0D82  1C03               	skipc
 14743  0D83  108C               	bcf	12,1	;volatile
 14744  0D84  1803               	skipnc
 14745  0D85  148C               	bsf	12,1	;volatile
 14746                           
 14747                           ;adc_drv.c: 79: ANSELAbits.ANSA2 = AnChSel->AnSelA2An2;
 14748  0D86  0874               	movf	Adc_ConfigAnCh@AnChSel,w
 14749  0D87  3E02               	addlw	2
 14750  0D88  0086               	movwf	6
 14751  0D89  0187               	clrf	7
 14752  0D8A  0C01               	rrf	1,w
 14753  0D8B  1C03               	skipc
 14754  0D8C  110C               	bcf	12,2	;volatile
 14755  0D8D  1803               	skipnc
 14756  0D8E  150C               	bsf	12,2	;volatile
 14757                           
 14758                           ;adc_drv.c: 80: ANSELAbits.ANSA4 = AnChSel->AnSelA4An3;
 14759  0D8F  0874               	movf	Adc_ConfigAnCh@AnChSel,w
 14760  0D90  3E03               	addlw	3
 14761  0D91  0086               	movwf	6
 14762  0D92  0187               	clrf	7
 14763  0D93  0C01               	rrf	1,w
 14764  0D94  1C03               	skipc
 14765  0D95  120C               	bcf	12,4	;volatile
 14766  0D96  1803               	skipnc
 14767  0D97  160C               	bsf	12,4	;volatile
 14768                           
 14769                           ;adc_drv.c: 83: ANSELB = 0x00;
 14770  0D98  018D               	clrf	13	;volatile
 14771                           
 14772                           ;adc_drv.c: 84: ANSELBbits.ANSB4 = AnChSel->AnSelB4An10;
 14773  0D99  0874               	movf	Adc_ConfigAnCh@AnChSel,w
 14774  0D9A  3E04               	addlw	4
 14775  0D9B  0086               	movwf	6
 14776  0D9C  0187               	clrf	7
 14777  0D9D  0C01               	rrf	1,w
 14778  0D9E  1C03               	skipc
 14779  0D9F  120D               	bcf	13,4	;volatile
 14780  0DA0  1803               	skipnc
 14781  0DA1  160D               	bsf	13,4	;volatile
 14782                           
 14783                           ;adc_drv.c: 85: ANSELBbits.ANSB5 = AnChSel->AnSelB5An11;
 14784  0DA2  0874               	movf	Adc_ConfigAnCh@AnChSel,w
 14785  0DA3  3E05               	addlw	5
 14786  0DA4  0086               	movwf	6
 14787  0DA5  0187               	clrf	7
 14788  0DA6  0C01               	rrf	1,w
 14789  0DA7  1C03               	skipc
 14790  0DA8  128D               	bcf	13,5	;volatile
 14791  0DA9  1803               	skipnc
 14792  0DAA  168D               	bsf	13,5	;volatile
 14793                           
 14794                           ;adc_drv.c: 88: ANSELC = 0x00;
 14795  0DAB  018E               	clrf	14	;volatile
 14796                           
 14797                           ;adc_drv.c: 89: ANSELCbits.ANSC0 = AnChSel->AnSelC0An4;
 14798  0DAC  0874               	movf	Adc_ConfigAnCh@AnChSel,w
 14799  0DAD  3E06               	addlw	6
 14800  0DAE  0086               	movwf	6
 14801  0DAF  0187               	clrf	7
 14802  0DB0  0C01               	rrf	1,w
 14803  0DB1  1C03               	skipc
 14804  0DB2  100E               	bcf	14,0	;volatile
 14805  0DB3  1803               	skipnc
 14806  0DB4  140E               	bsf	14,0	;volatile
 14807                           
 14808                           ;adc_drv.c: 90: ANSELCbits.ANSC1 = AnChSel->AnSelC1An5;
 14809  0DB5  0874               	movf	Adc_ConfigAnCh@AnChSel,w
 14810  0DB6  3E07               	addlw	7
 14811  0DB7  0086               	movwf	6
 14812  0DB8  0187               	clrf	7
 14813  0DB9  0C01               	rrf	1,w
 14814  0DBA  1C03               	skipc
 14815  0DBB  108E               	bcf	14,1	;volatile
 14816  0DBC  1803               	skipnc
 14817  0DBD  148E               	bsf	14,1	;volatile
 14818                           
 14819                           ;adc_drv.c: 91: ANSELCbits.ANSC2 = AnChSel->AnSelC2An6;
 14820  0DBE  0874               	movf	Adc_ConfigAnCh@AnChSel,w
 14821  0DBF  3E08               	addlw	8
 14822  0DC0  0086               	movwf	6
 14823  0DC1  0187               	clrf	7
 14824  0DC2  0C01               	rrf	1,w
 14825  0DC3  1C03               	skipc
 14826  0DC4  110E               	bcf	14,2	;volatile
 14827  0DC5  1803               	skipnc
 14828  0DC6  150E               	bsf	14,2	;volatile
 14829                           
 14830                           ;adc_drv.c: 92: ANSELCbits.ANSC3 = AnChSel->AnSelC3An7;
 14831  0DC7  0874               	movf	Adc_ConfigAnCh@AnChSel,w
 14832  0DC8  3E09               	addlw	9
 14833  0DC9  0086               	movwf	6
 14834  0DCA  0187               	clrf	7
 14835  0DCB  0C01               	rrf	1,w
 14836  0DCC  1C03               	skipc
 14837  0DCD  118E               	bcf	14,3	;volatile
 14838  0DCE  1803               	skipnc
 14839  0DCF  158E               	bsf	14,3	;volatile
 14840                           
 14841                           ;adc_drv.c: 94: ANSELCbits.ANSC6 = AnChSel->AnSelC6An8;
 14842  0DD0  0874               	movf	Adc_ConfigAnCh@AnChSel,w
 14843  0DD1  3E0A               	addlw	10
 14844  0DD2  0086               	movwf	6
 14845  0DD3  0187               	clrf	7
 14846  0DD4  0C01               	rrf	1,w
 14847  0DD5  1C03               	skipc
 14848  0DD6  130E               	bcf	14,6	;volatile
 14849  0DD7  1803               	skipnc
 14850  0DD8  170E               	bsf	14,6	;volatile
 14851                           
 14852                           ;adc_drv.c: 95: ANSELCbits.ANSC7 = AnChSel->AnSelC7An9;
 14853  0DD9  0874               	movf	Adc_ConfigAnCh@AnChSel,w
 14854  0DDA  3E0B               	addlw	11
 14855  0DDB  0086               	movwf	6
 14856  0DDC  0187               	clrf	7
 14857  0DDD  0C01               	rrf	1,w
 14858  0DDE  1C03               	skipc
 14859  0DDF  138E               	bcf	14,7	;volatile
 14860  0DE0  1803               	skipnc
 14861  0DE1  178E               	bsf	14,7	;volatile
 14862  0DE2  0008               	return
 14863  0DE3                     __end_of_Adc_ConfigAnCh:	
 14864                           
 14865                           	psect	intentry
 14866  0004                     __pintentry:	
 14867 ;; *************** function _MainInterrupt *****************
 14868 ;; Defined at:
 14869 ;;		line 50 in file "../../../Framework/MercuryFwk/Source/c/02_Osl/interrupts.c"
 14870 ;; Parameters:    Size  Location     Type
 14871 ;;		None
 14872 ;; Auto vars:     Size  Location     Type
 14873 ;;		None
 14874 ;; Return value:  Size  Location     Type
 14875 ;;                  1    wreg      void 
 14876 ;; Registers used:
 14877 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 14878 ;; Tracked objects:
 14879 ;;		On entry : 0/0
 14880 ;;		On exit  : 0/0
 14881 ;;		Unchanged: 0/0
 14882 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14883 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14884 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14885 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14886 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14887 ;;Total ram usage:        1 bytes
 14888 ;; Hardware stack levels used:    1
 14889 ;; Hardware stack levels required when called:    1
 14890 ;; This function calls:
 14891 ;;		i1_GenerateEvt
 14892 ;; This function is called by:
 14893 ;;		Interrupt level 1
 14894 ;; This function uses a non-reentrant model
 14895 ;;
 14896                           
 14897  0004                     _MainInterrupt:	
 14898                           
 14899                           ;incstack = 0
 14900  0004  147E               	bsf	126,0	;set compiler interrupt flag (level 1)
 14901                           
 14902                           ; Regs used in _MainInterrupt: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 14903  0005  3180               	pagesel	$
 14904  0006  0020               	movlb	0	; select bank0
 14905  0007  087F               	movf	127,w
 14906  0008  00F3               	movwf	??_MainInterrupt
 14907                           
 14908                           ;interrupts.c: 53: if (PIR1bits.TMR2IF == ((UINT8)(1)) && PIE1bits.TMR2IE == ((UINT8)(1)
      +                          ))
 14909  0009  1C91               	btfss	17,1	;volatile
 14910  000A  281C               	goto	i1l4190
 14911  000B  0021               	movlb	1	; select bank1
 14912  000C  1C91               	btfss	17,1	;volatile
 14913  000D  281C               	goto	i1l4190
 14914                           
 14915                           ;interrupts.c: 54: {
 14916                           ;interrupts.c: 56: PIR1bits.TMR2IF = ((UINT8)(0));
 14917  000E  0020               	movlb	0	; select bank0
 14918  000F  1091               	bcf	17,1	;volatile
 14919                           
 14920                           ;interrupts.c: 58: InterruptCounter++;
 14921  0010  3001               	movlw	1
 14922  0011  0021               	movlb	1	; select bank1
 14923  0012  07AB               	addwf	_InterruptCounter^(0+128),f
 14924  0013  3000               	movlw	0
 14925  0014  3DAC               	addwfc	(_InterruptCounter+1)^(0+128),f
 14926                           
 14927                           ;interrupts.c: 60: if (InterruptCounter >= ((UINT16)(1)))
 14928  0015  082B               	movf	_InterruptCounter^(0+128),w
 14929  0016  042C               	iorwf	(_InterruptCounter+1)^(0+128),w
 14930  0017  1903               	btfsc	3,2
 14931  0018  281C               	goto	i1l4190
 14932                           
 14933                           ;interrupts.c: 61: {
 14934                           ;interrupts.c: 63: InterruptCounter = 0;
 14935  0019  01AB               	clrf	_InterruptCounter^(0+128)
 14936  001A  01AC               	clrf	(_InterruptCounter+1)^(0+128)
 14937                           
 14938                           ;interrupts.c: 65: MainSystemTimebaseFlag = CallTaskPhase;
 14939  001B  01E9               	clrf	_MainSystemTimebaseFlag^(0+128)
 14940  001C                     i1l4190:	
 14941                           
 14942                           ;interrupts.c: 66: }
 14943                           ;interrupts.c: 67: }
 14944                           ;interrupts.c: 70: if(PIE1bits.SSP1IE == ((UINT8)(1)) && PIR1bits.SSP1IF == ((UINT8)(1))
      +                          )
 14945  001C  0021               	movlb	1	; select bank1
 14946  001D  1D91               	btfss	17,3	;volatile
 14947  001E  2826               	goto	i1l457
 14948  001F  0020               	movlb	0	; select bank0
 14949  0020  1D91               	btfss	17,3	;volatile
 14950  0021  2826               	goto	i1l457
 14951                           
 14952                           ;interrupts.c: 71: {
 14953                           ;interrupts.c: 73: PIR1bits.SSP1IF = ((UINT8)(0));
 14954  0022  1191               	bcf	17,3	;volatile
 14955                           
 14956                           ;interrupts.c: 77: GenerateEvt(&I2cNewTxNotification);
 14957  0023  30E3               	movlw	(low (_I2cNewTxNotification| 0))& (0+255)
 14958  0024  3188  201B         	fcall	i1_GenerateEvt
 14959  0026                     i1l457:	
 14960  0026  0873               	movf	??_MainInterrupt,w
 14961  0027  0020               	movlb	0	; select bank0
 14962  0028  00FF               	movwf	127
 14963  0029  107E               	bcf	126,0	;clear compiler interrupt flag (level 1)
 14964  002A  0009               	retfie
 14965  002B                     __end_of_MainInterrupt:	
 14966                           
 14967                           	psect	text82
 14968  081B                     __ptext82:	
 14969 ;; *************** function i1_GenerateEvt *****************
 14970 ;; Defined at:
 14971 ;;		line 73 in file "../../../Framework/MercuryFwk/Source/c/02_Osl/os_ser.c"
 14972 ;; Parameters:    Size  Location     Type
 14973 ;;  Event           1    wreg     PTR struct _EventStructu
 14974 ;;		 -> I2cReplyPacketReady(2), I2cWriteRequest(2), I2cSetAddress(2), I2cNewTxNotification(2), 
 14975 ;;		 -> I2cNewPacketNotification(2), 
 14976 ;; Auto vars:     Size  Location     Type
 14977 ;;  Event           1    1[COMMON] PTR struct _EventStructu
 14978 ;;		 -> I2cReplyPacketReady(2), I2cWriteRequest(2), I2cSetAddress(2), I2cNewTxNotification(2), 
 14979 ;;		 -> I2cNewPacketNotification(2), 
 14980 ;;  GenerateEvt     1    2[COMMON] enum E3633
 14981 ;; Return value:  Size  Location     Type
 14982 ;;                  1    wreg      enum E3629
 14983 ;; Registers used:
 14984 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 14985 ;; Tracked objects:
 14986 ;;		On entry : 0/0
 14987 ;;		On exit  : 0/0
 14988 ;;		Unchanged: 0/0
 14989 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14990 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14991 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14992 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14993 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14994 ;;Total ram usage:        3 bytes
 14995 ;; Hardware stack levels used:    1
 14996 ;; This function calls:
 14997 ;;		Nothing
 14998 ;; This function is called by:
 14999 ;;		_MainInterrupt
 15000 ;; This function uses a non-reentrant model
 15001 ;;
 15002                           
 15003                           
 15004                           ;psect for function i1_GenerateEvt
 15005  081B                     i1_GenerateEvt:	
 15006                           
 15007                           ;incstack = 0
 15008                           ; Regs used in i1_GenerateEvt: [wreg+fsr1l+fsr1h+status,2+status,0]
 15009                           ;i1GenerateEvt@Event stored from wreg
 15010  081B  00F1               	movwf	i1GenerateEvt@Event
 15011                           
 15012                           ;os_ser.c: 76: EventStatusType EventStatus = EventIdle;
 15013  081C  01F2               	clrf	i1GenerateEvt@EventStatus
 15014                           
 15015                           ;os_ser.c: 78: if ((Event->EventOptions != ((UINT8)(2))) && (Event->EventOptions != ((UI
      +                          NT8)(3))))
 15016  081D  0871               	movf	i1GenerateEvt@Event,w
 15017  081E  0086               	movwf	6
 15018  081F  0187               	clrf	7
 15019  0820  3002               	movlw	2
 15020  0821  0601               	xorwf	1,w
 15021  0822  1903               	btfsc	3,2
 15022  0823  2837               	goto	i1l4170
 15023  0824  0871               	movf	i1GenerateEvt@Event,w
 15024  0825  0086               	movwf	6
 15025  0826  0187               	clrf	7
 15026  0827  3003               	movlw	3
 15027  0828  0601               	xorwf	1,w
 15028  0829  1903               	btfsc	3,2
 15029  082A  2837               	goto	i1l4170
 15030                           
 15031                           ;os_ser.c: 79: {
 15032                           ;os_ser.c: 81: Event->EventStatus = EventSent;
 15033  082B  3002               	movlw	2
 15034  082C  00F0               	movwf	??i1_GenerateEvt
 15035  082D  0A71               	incf	i1GenerateEvt@Event,w
 15036  082E  0086               	movwf	6
 15037  082F  0187               	clrf	7
 15038  0830  0870               	movf	??i1_GenerateEvt,w
 15039  0831  0081               	movwf	1
 15040                           
 15041                           ;os_ser.c: 83: EventStatus = EventSent;
 15042  0832  3002               	movlw	2
 15043  0833  00F0               	movwf	??i1_GenerateEvt
 15044  0834  0870               	movf	??i1_GenerateEvt,w
 15045  0835  00F2               	movwf	i1GenerateEvt@EventStatus
 15046                           
 15047                           ;os_ser.c: 84: }
 15048  0836  0008               	return
 15049  0837                     i1l4170:	
 15050                           
 15051                           ;os_ser.c: 85: else
 15052                           ;os_ser.c: 86: {
 15053                           ;os_ser.c: 88: EventStatus = EventNotSent;
 15054  0837  3003               	movlw	3
 15055  0838  00F0               	movwf	??i1_GenerateEvt
 15056  0839  0870               	movf	??i1_GenerateEvt,w
 15057  083A  00F2               	movwf	i1GenerateEvt@EventStatus
 15058  083B  0008               	return
 15059  083C                     __end_ofi1_GenerateEvt:	
 15060                           ;os_ser.c: 89: }
 15061                           ;os_ser.c: 92: return(EventStatus);
 15062                           ;	Return value of i1_GenerateEvt is never used
 15063                           
 15064  007E                     btemp	set	126	;btemp
 15065  007E                     int$flags	set	126
 15066  007E                     wtemp0	set	126


Data Sizes:
    Strings     30
    Constant    12
    Data        43
    BSS         451
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14      6      10
    BANK0            80     74      74
    BANK1            80      0      74
    BANK2            80      0      78
    BANK3            80      0      18
    BANK4            80      0      80
    BANK5            80      0      80
    BANK6            80      0      80
    BANK7            80      0      80
    BANK8            80      0       0
    BANK9            80      0       0
    BANK10           80      0       0
    BANK11           45      0       0
    BANK12            0      0       0

Pointer List with Targets:

    __builtin_memcpy$1	PTR const void  size(1) Largest target is 5
		 -> HumidityStr(BANK1[5]), TemperatureStr(BANK1[5]), 

    __builtin_memcpy$0	PTR void  size(1) Largest target is 80
		 -> RepBuffer(BANK4[80]), 

    Tmr6IsrCallback	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), 

    Tmr4IsrCallback	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), 

    Tmr2IsrCallback	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), 

    strcpy@from	PTR const unsigned char  size(1) Largest target is 3
		 -> HumidityIntStr(BANK1[3]), TemperatureIntStr(BANK1[3]), 

    strcpy@to	PTR unsigned char  size(1) Largest target is 5
		 -> HumidityStr(BANK1[5]), TemperatureStr(BANK1[5]), 

    strcpy@cp	PTR unsigned char  size(1) Largest target is 5
		 -> HumidityStr(BANK1[5]), TemperatureStr(BANK1[5]), 

    strcat@from	PTR const unsigned char  size(2) Largest target is 3
		 -> STR_7(CODE[2]), HumidityDecStr(BANK1[3]), STR_6(CODE[2]), TemperatureDecStr(BANK1[3]), 

    strcat@to	PTR unsigned char  size(1) Largest target is 5
		 -> HumidityStr(BANK1[5]), TemperatureStr(BANK1[5]), 

    strcat@cp	PTR unsigned char  size(1) Largest target is 5
		 -> HumidityStr(BANK1[5]), TemperatureStr(BANK1[5]), 

    utoa@buf	PTR unsigned char  size(1) Largest target is 4
		 -> HumidityDecStr(BANK1[3]), HumidityIntStr(BANK1[3]), TemperatureDecStr(BANK1[3]), TemperatureIntStr(BANK1[3]), 
		 -> StdS_ManageStdServices@DieTempStr(BANK0[4]), 

    itoa@buf	PTR unsigned char  size(1) Largest target is 3
		 -> HumidityDecStr(BANK1[3]), HumidityIntStr(BANK1[3]), TemperatureDecStr(BANK1[3]), TemperatureIntStr(BANK1[3]), 

    itoa@cp	PTR unsigned char  size(1) Largest target is 3
		 -> HumidityDecStr(BANK1[3]), HumidityIntStr(BANK1[3]), TemperatureDecStr(BANK1[3]), TemperatureIntStr(BANK1[3]), 

    sp____builtin_memcpy	PTR void  size(2) Largest target is 4096
		 -> RAM(DATA[4096]), 

    sp__strcat	PTR unsigned char  size(1) Largest target is 5
		 -> HumidityStr(BANK1[5]), TemperatureStr(BANK1[5]), 

    sp__strcpy	PTR unsigned char  size(1) Largest target is 5
		 -> HumidityStr(BANK1[5]), TemperatureStr(BANK1[5]), 

    sp__itoa	PTR unsigned char  size(1) Largest target is 3
		 -> HumidityDecStr(BANK1[3]), HumidityIntStr(BANK1[3]), TemperatureDecStr(BANK1[3]), TemperatureIntStr(BANK1[3]), 

    sp__utoa	PTR unsigned char  size(1) Largest target is 4
		 -> HumidityDecStr(BANK1[3]), HumidityIntStr(BANK1[3]), TemperatureDecStr(BANK1[3]), TemperatureIntStr(BANK1[3]), 
		 -> StdS_ManageStdServices@DieTempStr(BANK0[4]), 

    SetBuffer@Buffer	PTR unsigned char  size(1) Largest target is 5
		 -> HumidityStr(BANK1[5]), TemperatureStr(BANK1[5]), 

    StringCopy@SourceStr	PTR unsigned char  size(2) Largest target is 9
		 -> StdS_ManageStdServices@DieTempStr(BANK0[4]), STR_5(CODE[9]), STR_4(CODE[9]), STR_3(CODE[6]), 
		 -> STR_2(CODE[5]), 

    StringCopy@DestStr	PTR unsigned char  size(1) Largest target is 80
		 -> RepBuffer(BANK4[80]), 

    LedStateMachine@LedSts	PTR enum E4030 size(1) Largest target is 1
		 -> Led1Sts(BANK1[1]), 

    LedStateMachine@LedPulse	PTR struct _LedPulseType size(1) Largest target is 6
		 -> Led1Pulse(BANK2[6]), 

    LedStateMachine@LedBlink	PTR struct _LedBlinkType size(1) Largest target is 9
		 -> Led1Blink(BANK2[9]), 

    ReceiveEvt@Event	PTR struct _EventStructure size(1) Largest target is 2
		 -> I2cReplyPacketReady(COMMON[2]), I2cWriteRequest(BANK1[2]), I2cSetAddress(BANK1[2]), I2cNewTxNotification(BANK1[2]), 
		 -> I2cNewPacketNotification(BANK1[2]), 

    GenerateEvt@Event	PTR struct _EventStructure size(1) Largest target is 2
		 -> I2cReplyPacketReady(COMMON[2]), I2cWriteRequest(BANK1[2]), I2cSetAddress(BANK1[2]), I2cNewTxNotification(BANK1[2]), 
		 -> I2cNewPacketNotification(BANK1[2]), 

    S1367_SchedTblType$Task	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> App_MainTask(), Led_MainTask(), Wdg_MainTask(), I2cSlv_MainTask(), 
		 -> I2c_DataReceiveSm(), 

    TaskTable.Task	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> App_MainTask(), Led_MainTask(), Wdg_MainTask(), I2cSlv_MainTask(), 
		 -> I2c_DataReceiveSm(), 

    Tmr_TmrBConfig@TmrBConfig	PTR struct _TmrBConfigType size(1) Largest target is 6
		 -> InitSchTimer@TmrBConfig(BANK0[6]), 

    Mcu_ConfigPullUps@WpuCh	PTR struct _WpuChType size(1) Largest target is 18
		 -> App_MainTask@WpuCh(BANK0[18]), 

    LedPulseStateMachine@LedPulse	PTR struct _LedPulseType size(1) Largest target is 6
		 -> Led1Pulse(BANK2[6]), 

    LedBlinkStateMachine@LedBlink	PTR struct _LedBlinkType size(1) Largest target is 9
		 -> Led1Blink(BANK2[9]), 

    I2c_UpdateTxBuffer@DataBuffer	PTR unsigned char  size(1) Largest target is 80
		 -> RepBuffer(BANK4[80]), 

    I2c_InitI2cModule@I2cConfig	PTR struct _I2cConfig size(1) Largest target is 11
		 -> I2cConfig(BANK2[11]), 

    Adc_InitAdcModule@AdcConfig	PTR struct _AdcCfgType size(1) Largest target is 6
		 -> App_MainTask@AdcConfig(BANK0[6]), 

    Adc_ConfigAnCh@AnChSel	PTR struct _AnalogChSelType size(1) Largest target is 12
		 -> App_MainTask@AnalogChSel(BANK0[12]), 


Critical Paths under _main in COMMON

    _Tmr_TmrBConfig->_TmrBInit
    _Tmr_TmrBConfig->_Tmr_TmrBIrqSet
    _Tmr_TmrBPrSet->___wmul
    ___lmul->___wmul
    _Wdg_MainTask->_Mcu_SetWdgPeriod
    _Led_InitSeq->_Led_SetLedStatus
    _LedStateMachine->_LedBlinkStateMachine
    _LedPulseStateMachine->_Led_SetLedStatus
    _LedBlinkStateMachine->___lwdiv
    _I2c_DataReceiveSm->_ClearRxBuffer
    _I2c_DataReceiveSm->_ClearTxBuffer
    _I2c_DataReceiveSm->_ReceiveEvt
    _I2c_InitI2cModule->_ClearRxBuffer
    _I2c_InitI2cModule->_ClearTxBuffer
    _I2cSlv_I2cDrvHandle->_Led_SetLedStatus
    _I2cSlv_I2cDrvHandle->_ReceiveEvt
    _App_MainTask->___lwmod
    _Dht_ReadData->_Dht_ReadByte
    _AppSm->_StdS_SetI2cAddress
    _ManageProtocol->_ReceiveEvt
    _ManageProtocol->_SetBuffer
    _ManageProtocol->_strcat
    _ManageProtocol->_strcpy
    _utoa->___lwmod
    _SetLedBehavSts->_Led_SetLedPulseTime
    _SetLedBehavSts->_Led_SetLedStatus
    _LowPowerMode->_Mcu_SetWdgSts
    _GetDieTemperature->_Adc_GetConvResult
    _GetDieTemperature->_Adc_SelectChannel
    _ControlLedDirect->_Led_SetLedStatus

Critical Paths under _MainInterrupt in COMMON

    _MainInterrupt->i1_GenerateEvt

Critical Paths under _main in BANK0

    _SystemInit->_InitSchTimer
    _InitSchTimer->_Tmr_TmrBConfig
    _Tmr_TmrBConfig->_Tmr_TmrBPrSet
    _Tmr_TmrBPrSet->___lmul
    ___lmul->___wmul
    _MainScheduler->_ScheduleTasks
    _ScheduleTasks->_App_MainTask
    _InitializeTasks->_App_MainTask
    _Led_InitSeq->_Led_SetLedStatus
    _LedStateMachine->_LedPulseStateMachine
    _LedPulseStateMachine->___lwdiv
    _LedBlinkStateMachine->___lwdiv
    _I2cSlv_I2cDrvHandle->_I2c_UpdateTxBuffer
    _App_MainTask->_AppSm
    _Dht_GetSensorData->_Dht_CalculateChecksum
    _Dht_ReadData->_Dht_ReadByte
    _AppSm->_ManageProtocol
    _ManageProtocol->_StdS_ManageStdServices
    _itoa->_utoa
    _StdS_ManageStdServices->_utoa
    _utoa->___lwdiv
    _SetLedBehavSts->_Led_SetLedBlinkTime
    _GetDieTemperature->_Adc_GetConvResult
    _ControlLedDirect->_Led_SetLedStatus

Critical Paths under _MainInterrupt in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _MainInterrupt in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _MainInterrupt in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _MainInterrupt in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _MainInterrupt in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _MainInterrupt in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _MainInterrupt in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _MainInterrupt in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _MainInterrupt in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _MainInterrupt in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _MainInterrupt in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _MainInterrupt in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _MainInterrupt in BANK12

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0   70534
                      _MainScheduler
                         _SystemInit
 ---------------------------------------------------------------------------------
 (1) _SystemInit                                           0     0      0    3546
                       _InitSchTimer
               _Mcu_EnableInterrupts
                 _Mcu_StartSystemPll
 ---------------------------------------------------------------------------------
 (2) _Mcu_StartSystemPll                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _Mcu_EnableInterrupts                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _InitSchTimer                                         7     7      0    3546
                                             37 BANK0      7     7      0
                     _Tmr_TmrBConfig
 ---------------------------------------------------------------------------------
 (3) _Tmr_TmrBConfig                                       3     2      1    3343
                                             34 BANK0      3     2      1
                           _TmrBInit
                       _Tmr_StartTmr
                     _Tmr_TmrBIrqSet
                      _Tmr_TmrBPrSet
 ---------------------------------------------------------------------------------
 (4) _Tmr_TmrBPrSet                                       18    14      4    2222
                                             16 BANK0     18    14      4
                            ___lldiv
                             ___lmul
                             ___wmul
 ---------------------------------------------------------------------------------
 (5) ___wmul                                               6     2      4     456
                                              4 COMMON     2     2      0
                                              0 BANK0      4     0      4
 ---------------------------------------------------------------------------------
 (5) ___lmul                                              12     4      8     244
                                              4 BANK0     12     4      8
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (5) ___lldiv                                             14     6      8     961
                                              4 COMMON     1     1      0
                                              0 BANK0     13     5      8
 ---------------------------------------------------------------------------------
 (4) _Tmr_TmrBIrqSet                                       2     1      1     240
                                              4 COMMON     2     1      1
 ---------------------------------------------------------------------------------
 (4) _Tmr_StartTmr                                         1     1      0      22
                                              4 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (4) _TmrBInit                                             4     2      2     397
                                              4 COMMON     2     0      2
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _MainScheduler                                        0     0      0   66988
                    _InitializeTasks
                      _ScheduleTasks
 ---------------------------------------------------------------------------------
 (2) _ScheduleTasks                                        7     7      0   33587
                                             67 BANK0      7     7      0
                       _App_MainTask *
                    _I2cSlv_MainTask *
                  _I2c_DataReceiveSm *
                       _Led_MainTask *
                       _Wdg_MainTask *
 ---------------------------------------------------------------------------------
 (2) _InitializeTasks                                      5     5      0   33401
                                             67 BANK0      5     5      0
                       _App_MainTask *
                    _I2cSlv_MainTask *
                  _I2c_DataReceiveSm *
                       _Led_MainTask *
                       _Wdg_MainTask *
 ---------------------------------------------------------------------------------
 (3) _Wdg_MainTask                                         1     0      1      44
                                             27 BANK0      1     0      1
                       _Mcu_ClearWdg
                   _Mcu_SetWdgPeriod
                      _Mcu_SetWdgSts
 ---------------------------------------------------------------------------------
 (4) _Mcu_SetWdgPeriod                                     2     2      0      22
                                              4 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (4) _Mcu_ClearWdg                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _Led_MainTask                                         5     4      1    7734
                                             27 BANK0      5     4      1
                    _LedStateMachine
                        _Led_InitSeq
                     _SetLedBehavSts
 ---------------------------------------------------------------------------------
 (4) _Led_InitSeq                                          1     1      0     962
                                              1 BANK0      1     1      0
                   _Led_SetLedStatus
 ---------------------------------------------------------------------------------
 (4) _LedStateMachine                                      7     4      3    5354
                                             11 BANK0      7     4      3
               _LedBlinkStateMachine
               _LedPulseStateMachine
 ---------------------------------------------------------------------------------
 (5) _LedPulseStateMachine                                 4     3      1    2921
                                              7 BANK0      4     3      1
                   _Led_SetLedStatus
                            ___lwdiv
 ---------------------------------------------------------------------------------
 (5) _LedBlinkStateMachine                                 3     3      0    1993
                                              5 COMMON     1     1      0
                                              7 BANK0      2     2      0
                            ___lwdiv
 ---------------------------------------------------------------------------------
 (3) _I2c_DataReceiveSm                                    9     8      1    1321
                                             27 BANK0      9     8      1
                     _CheckAckStatus
                    _CheckByteStatus
                 _CheckStopBitStatus
                      _ClearRxBuffer
                      _ClearTxBuffer
                        _GenerateEvt
                          _Mcu_Reset
                         _ReceiveEvt
 ---------------------------------------------------------------------------------
 (4) _CheckStopBitStatus                                   1     1      0       0
                                              4 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (4) _CheckByteStatus                                      1     1      0       0
                                              4 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (4) _CheckAckStatus                                       1     1      0       0
                                              4 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (3) _I2cSlv_MainTask                                      1     0      1    3065
                                             27 BANK0      1     0      1
                _I2cSlv_I2cDrvHandle
                  _I2c_InitI2cModule
                      _I2c_SetConfig
 ---------------------------------------------------------------------------------
 (4) _I2c_SetConfig                                        1     1      0       0
                                              4 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (4) _I2c_InitI2cModule                                    3     3      0     575
                                              0 BANK0      3     3      0
                      _ClearRxBuffer
                      _ClearTxBuffer
 ---------------------------------------------------------------------------------
 (4) _ClearTxBuffer                                        2     2      0      99
                                              4 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (4) _ClearRxBuffer                                        2     2      0      99
                                              4 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (4) _I2cSlv_I2cDrvHandle                                  6     6      0    2490
                                              4 BANK0      6     6      0
                        _GenerateEvt
                  _I2c_SetI2cAddress
              _I2c_SetI2cAddressMask
                 _I2c_UpdateTxBuffer
                   _Led_SetLedStatus
                         _ReceiveEvt
 ---------------------------------------------------------------------------------
 (5) _I2c_UpdateTxBuffer                                   5     4      1     340
                                              4 COMMON     1     0      1
                                              0 BANK0      4     4      0
 ---------------------------------------------------------------------------------
 (5) _I2c_SetI2cAddressMask                                1     1      0      31
                                              4 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (5) _I2c_SetI2cAddress                                    1     1      0      31
                                              4 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (3) _App_MainTask                                        40    39      1   21104
                                             27 BANK0     40    39      1
                     _Adc_ConfigAnCh
                  _Adc_InitAdcModule
                              _AppSm
                  _Dht_GetSensorData
                  _Mcu_ConfigPullUps
                 _Mcu_SetDieTempMode
                  _Mcu_SetDieTempSts
                  _Mcu_SetPullUpsSts
                            ___awdiv
                            ___awmod
                            ___lwdiv
                            ___lwmod
 ---------------------------------------------------------------------------------
 (4) ___awmod                                              7     3      4     613
                                              4 COMMON     1     1      0
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (4) ___awdiv                                              9     5      4     625
                                              4 COMMON     1     1      0
                                              0 BANK0      8     4      4
 ---------------------------------------------------------------------------------
 (4) _Mcu_SetPullUpsSts                                    1     1      0      22
                                              4 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (4) _Mcu_SetDieTempSts                                    1     1      0      22
                                              4 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (4) _Mcu_SetDieTempMode                                   1     1      0      22
                                              4 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (4) _Mcu_ConfigPullUps                                    1     1      0     429
                                              4 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (4) _Dht_GetSensorData                                    1     1      0     674
                                              8 BANK0      1     1      0
              _Dht_CalculateChecksum
                       _Dht_ReadData
                    _Dht_RequestData
            _Mcu_DisableSchedulerInt
             _Mcu_EnableSchedulerInt
 ---------------------------------------------------------------------------------
 (5) _Mcu_EnableSchedulerInt                               0     0      0       0
 ---------------------------------------------------------------------------------
 (5) _Mcu_DisableSchedulerInt                              0     0      0       0
 ---------------------------------------------------------------------------------
 (5) _Dht_RequestData                                      1     1      0       0
                                              4 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (5) _Dht_ReadData                                         2     2      0     306
                                              4 BANK0      2     2      0
                       _Dht_ReadByte
 ---------------------------------------------------------------------------------
 (6) _Dht_ReadByte                                         6     6      0     207
                                              4 COMMON     2     2      0
                                              0 BANK0      4     4      0
 ---------------------------------------------------------------------------------
 (5) _Dht_CalculateChecksum                                9     4      5     331
                                              4 COMMON     1     1      0
                                              0 BANK0      8     3      5
 ---------------------------------------------------------------------------------
 (4) _AppSm                                                1     1      0   15369
                                             26 BANK0      1     1      0
                        _GenerateEvt
                     _ManageProtocol
                 _StdS_SetI2cAddress
 ---------------------------------------------------------------------------------
 (5) _StdS_SetI2cAddress                                   2     2      0       0
                                              4 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (5) _ManageProtocol                                       2     2      0   14720
                                             24 BANK0      2     2      0
                        _GenerateEvt
                         _ReceiveEvt
                          _SetBuffer
             _StdS_ManageStdServices
                               _itoa
                             _strcat
                             _strcpy
 ---------------------------------------------------------------------------------
 (6) _strcpy                                               4     3      1     361
                                              4 COMMON     2     1      1
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (6) _strcat                                               5     3      2     647
                                              4 COMMON     2     0      2
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (6) _itoa                                                 7     3      4    4162
                                             16 BANK0      7     3      4
                               _utoa
 ---------------------------------------------------------------------------------
 (6) _StdS_ManageStdServices                               8     8      0    7961
                                             16 BANK0      8     8      0
                         _BoardReset
                   _ControlLedDirect
                        _GenerateEvt
                  _GetDieTemperature
                       _LowPowerMode
                     _SetLedBehavSts
                         _StringCopy
                               _utoa
 ---------------------------------------------------------------------------------
 (7) _utoa                                                 9     5      4    3065
                                              7 BANK0      9     5      4
                            ___lwdiv
                            ___lwmod
 ---------------------------------------------------------------------------------
 (4) ___lwmod                                              6     2      4     732
                                              4 COMMON     2     2      0
                                              0 BANK0      4     0      4
 ---------------------------------------------------------------------------------
 (6) ___lwdiv                                              8     4      4    1461
                                              4 COMMON     1     1      0
                                              0 BANK0      7     3      4
 ---------------------------------------------------------------------------------
 (7) _StringCopy                                           9     5      4    1545
                                              4 COMMON     1     1      0
                                              0 BANK0      8     4      4
 ---------------------------------------------------------------------------------
 (4) _SetLedBehavSts                                       2     2      0    1418
                                              4 BANK0      2     2      0
                _Led_SetLedBlinkTime
                _Led_SetLedPulseTime
                   _Led_SetLedStatus
 ---------------------------------------------------------------------------------
 (5) _Led_SetLedPulseTime                                  3     1      2     152
                                              4 COMMON     2     0      2
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (5) _Led_SetLedBlinkTime                                  5     1      4     273
                                              4 COMMON     1     1      0
                                              0 BANK0      4     0      4
 ---------------------------------------------------------------------------------
 (7) _LowPowerMode                                         0     0      0      22
                      _Mcu_SetWdgSts
 ---------------------------------------------------------------------------------
 (4) _Mcu_SetWdgSts                                        1     1      0      22
                                              4 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (7) _GetDieTemperature                                    4     2      2      90
                                              3 BANK0      4     2      2
                  _Adc_GetConvResult
                     _Adc_GetConvSts
                  _Adc_SelectChannel
                _Adc_StartConversion
 ---------------------------------------------------------------------------------
 (8) _Adc_StartConversion                                  0     0      0       0
 ---------------------------------------------------------------------------------
 (8) _Adc_SelectChannel                                    2     2      0      22
                                              4 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (8) _Adc_GetConvSts                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (8) _Adc_GetConvResult                                    5     3      2      34
                                              4 COMMON     2     0      2
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (4) _GenerateEvt                                          3     3      0     649
                                              4 COMMON     1     1      0
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (7) _ControlLedDirect                                     0     0      0     962
                   _Led_SetLedStatus
 ---------------------------------------------------------------------------------
 (5) _Led_SetLedStatus                                     3     2      1     962
                                              4 COMMON     2     1      1
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (7) _BoardReset                                           0     0      0       0
                          _Mcu_Reset
 ---------------------------------------------------------------------------------
 (4) _Mcu_Reset                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (6) _SetBuffer                                            7     4      3     596
                                              4 COMMON     2     2      0
                                              0 BANK0      5     2      3
 ---------------------------------------------------------------------------------
 (4) _ReceiveEvt                                           2     2      0     344
                                              4 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (4) _Adc_InitAdcModule                                    1     1      0     165
                                              4 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (4) _Adc_ConfigAnCh                                       1     1      0     297
                                              4 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 8
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (9) _MainInterrupt                                        1     1      0      75
                                              3 COMMON     1     1      0
                      i1_GenerateEvt
 ---------------------------------------------------------------------------------
 (10) i1_GenerateEvt                                       3     3      0      75
                                              0 COMMON     3     3      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 10
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _MainScheduler
     _InitializeTasks
       _App_MainTask *
         _Adc_ConfigAnCh
         _Adc_InitAdcModule
         _AppSm
           _GenerateEvt
           _ManageProtocol
             _GenerateEvt
             _ReceiveEvt
             _SetBuffer
             _StdS_ManageStdServices
               _BoardReset
                 _Mcu_Reset
               _ControlLedDirect
                 _Led_SetLedStatus
               _GenerateEvt
               _GetDieTemperature
                 _Adc_GetConvResult
                 _Adc_GetConvSts
                 _Adc_SelectChannel
                 _Adc_StartConversion
               _LowPowerMode
                 _Mcu_SetWdgSts
               _SetLedBehavSts
                 _Led_SetLedBlinkTime
                 _Led_SetLedPulseTime
                 _Led_SetLedStatus
               _StringCopy
               _utoa
                 ___lwdiv
                 ___lwmod
             _itoa
               _utoa
                 ___lwdiv
                 ___lwmod
             _strcat
             _strcpy
           _StdS_SetI2cAddress
         _Dht_GetSensorData
           _Dht_CalculateChecksum
           _Dht_ReadData
             _Dht_ReadByte
           _Dht_RequestData
           _Mcu_DisableSchedulerInt
           _Mcu_EnableSchedulerInt
         _Mcu_ConfigPullUps
         _Mcu_SetDieTempMode
         _Mcu_SetDieTempSts
         _Mcu_SetPullUpsSts
         ___awdiv
         ___awmod
         ___lwdiv
         ___lwmod
       _I2cSlv_MainTask *
         _I2cSlv_I2cDrvHandle
           _GenerateEvt
           _I2c_SetI2cAddress
           _I2c_SetI2cAddressMask
           _I2c_UpdateTxBuffer
           _Led_SetLedStatus
           _ReceiveEvt
         _I2c_InitI2cModule
           _ClearRxBuffer
           _ClearTxBuffer
         _I2c_SetConfig
       _I2c_DataReceiveSm *
         _CheckAckStatus
         _CheckByteStatus
         _CheckStopBitStatus
         _ClearRxBuffer
         _ClearTxBuffer
         _GenerateEvt
         _Mcu_Reset
         _ReceiveEvt
       _Led_MainTask *
         _LedStateMachine
           _LedBlinkStateMachine
             ___lwdiv
           _LedPulseStateMachine
             _Led_SetLedStatus
             ___lwdiv
         _Led_InitSeq
           _Led_SetLedStatus
         _SetLedBehavSts
           _Led_SetLedBlinkTime
           _Led_SetLedPulseTime
           _Led_SetLedStatus
       _Wdg_MainTask *
         _Mcu_ClearWdg
         _Mcu_SetWdgPeriod
         _Mcu_SetWdgSts
     _ScheduleTasks
       _App_MainTask *
         _Adc_ConfigAnCh
         _Adc_InitAdcModule
         _AppSm
           _GenerateEvt
           _ManageProtocol
             _GenerateEvt
             _ReceiveEvt
             _SetBuffer
             _StdS_ManageStdServices
               _BoardReset
                 _Mcu_Reset
               _ControlLedDirect
                 _Led_SetLedStatus
               _GenerateEvt
               _GetDieTemperature
                 _Adc_GetConvResult
                 _Adc_GetConvSts
                 _Adc_SelectChannel
                 _Adc_StartConversion
               _LowPowerMode
                 _Mcu_SetWdgSts
               _SetLedBehavSts
                 _Led_SetLedBlinkTime
                 _Led_SetLedPulseTime
                 _Led_SetLedStatus
               _StringCopy
               _utoa
                 ___lwdiv
                 ___lwmod
             _itoa
               _utoa
                 ___lwdiv
                 ___lwmod
             _strcat
             _strcpy
           _StdS_SetI2cAddress
         _Dht_GetSensorData
           _Dht_CalculateChecksum
           _Dht_ReadData
             _Dht_ReadByte
           _Dht_RequestData
           _Mcu_DisableSchedulerInt
           _Mcu_EnableSchedulerInt
         _Mcu_ConfigPullUps
         _Mcu_SetDieTempMode
         _Mcu_SetDieTempSts
         _Mcu_SetPullUpsSts
         ___awdiv
         ___awmod
         ___lwdiv
         ___lwmod
       _I2cSlv_MainTask *
         _I2cSlv_I2cDrvHandle
           _GenerateEvt
           _I2c_SetI2cAddress
           _I2c_SetI2cAddressMask
           _I2c_UpdateTxBuffer
           _Led_SetLedStatus
           _ReceiveEvt
         _I2c_InitI2cModule
           _ClearRxBuffer
           _ClearTxBuffer
         _I2c_SetConfig
       _I2c_DataReceiveSm *
         _CheckAckStatus
         _CheckByteStatus
         _CheckStopBitStatus
         _ClearRxBuffer
         _ClearTxBuffer
         _GenerateEvt
         _Mcu_Reset
         _ReceiveEvt
       _Led_MainTask *
         _LedStateMachine
           _LedBlinkStateMachine
             ___lwdiv
           _LedPulseStateMachine
             _Led_SetLedStatus
             ___lwdiv
         _Led_InitSeq
           _Led_SetLedStatus
         _SetLedBehavSts
           _Led_SetLedBlinkTime
           _Led_SetLedPulseTime
           _Led_SetLedStatus
       _Wdg_MainTask *
         _Mcu_ClearWdg
         _Mcu_SetWdgPeriod
         _Mcu_SetWdgSts
   _SystemInit
     _InitSchTimer
       _Tmr_TmrBConfig
         _TmrBInit
         _Tmr_StartTmr
         _Tmr_TmrBIrqSet
         _Tmr_TmrBPrSet
           ___lldiv
           ___lmul
             ___wmul (ARG)
           ___wmul
     _Mcu_EnableInterrupts
     _Mcu_StartSystemPll

 _MainInterrupt (ROOT)
   i1_GenerateEvt

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             3F0      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            E      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               E      6       A       2       71.4%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0       0       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50     4A      4A       5       92.5%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BANK1               50      0      4A       7       92.5%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BITBANK2            50      0       0       8        0.0%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
BANK2               50      0      4E       9       97.5%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
BITBANK3            50      0       0      10        0.0%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BANK3               50      0      12      11       22.5%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
BITBANK4            50      0       0      12        0.0%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BANK4               50      0      50      13      100.0%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BITBANK5            50      0       0      14        0.0%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
BANK5               50      0      50      15      100.0%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
BITBANK6            50      0       0      16        0.0%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
BANK6               50      0      50      17      100.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BITBANK7            50      0       0      18        0.0%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BANK7               50      0      50      19      100.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
ABS                  0      0     23E      20        0.0%
BITBANK8            50      0       0      21        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BANK8               50      0       0      22        0.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BITBANK9            50      0       0      23        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BANK9               50      0       0      24        0.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BITBANK10           50      0       0      25        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BANK10              50      0       0      26        0.0%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BITBANK11           50      0       0      27        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BANK11              2D      0       0      28        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
BITBANK12           30      0       0      29        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BANK12               0      0       0      30        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
DATA                 0      0     23E      31        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%


Microchip Technology PIC Macro Assembler V1.45 build -152302408 
Symbol Table                                                                                   Sat Mar 28 15:23:48 2020

                                    pc 0002                       _Mcu_SetWdgPeriod 162B  
                          __CFG_CP$OFF 0000                     _Mcu_StartSystemPll 15D1  
           __end_of_I2c_UpdateTxBuffer 17E2                  ?_LedPulseStateMachine 0027  
                         ___awdiv@sign 0025             __size_of_GetDieTemperature 0019  
               ??_LedBlinkStateMachine 0027                    ___wmul@multiplicand 0022  
          __size_of_CheckStopBitStatus 000A                   __end_of_App_MainTask 02E6  
                                  l320 0E5B                                    l321 0E5E  
                                  l413 0B4B                                    l405 0B1F  
                                  l333 0E9E         __end_of_StdS_ManageStdServices 04E5  
                                  l326 0E78                                    l318 0E59  
                                  l335 0EA1                                    l343 0937  
                                  l351 064E                                    l336 0EA5  
                                  l328 0E7B                                    l329 0E7F  
                                  l345 0940                                    l346 0949  
                                  l179 03E0                                    l339 0ED0  
                                  l363 1731                                    l700 1696  
                                  l348 095D                                    l365 1734  
                                  l366 1737                                    l375 0C60  
                                  l616 0F60                                    l368 1745  
                                  l394 0815                                    l397 0818  
                                  l830 04E4                                    l671 0D10  
                                  l648 0A47                                    l594 16ED  
                                  l675 09E2                                    l693 178E  
                                  l686 1676                                    l871 1702  
                                  l679 0A10                                    l796 0B96  
                                  l981 0987                                    l967 01C8  
                                  l991 01E7                                    _PR2 001B  
                                  _PR4 0416                           __CFG_CPD$OFF 0000  
                                  _PR6 041D                   __end_of_Dht_ReadData 1719  
                 __end_of_Dht_ReadByte 0B55                    ?_Mcu_StartSystemPll 0070  
                         ___awmod@sign 0025                           __CFG_BORV$LO 0000  
                                  wreg 0009              Dht_CalculateChecksum@Sens 0020  
                         __CFG_IESO$ON 0000                           __CFG_FOSC$HS 0000  
                     ??_SetLedBehavSts 0024                                   S5292 1000  
               Mcu_SetPullUpsSts@PuSts 0074                        ??_MainInterrupt 0073  
                         __CFG_LVP$OFF 0000                        ??_MainScheduler 0076  
                                 l1000 02E5                                   l1156 17B2  
                                 l1428 0D5D                                   l4032 16EF  
                                 l5002 0C15                                   l4034 16F7  
                                 l5012 02E7                                   l4230 1670  
                                 l5006 0C1D                                   l4038 16FA  
                                 l4400 085A                                   l4320 0B68  
                                 l4312 0B58                                   l5024 0306  
                                 l5032 0310                                   l5104 03E5  
                                 l4402 085B                                   l4226 166A  
                                 l4306 089B                                   l4234 1778  
                                 l4242 168A                                   l5042 0325  
                                 l5026 0308                                   l5130 16E2  
                                 l5210 02DD                                   l4324 0B83  
                                 l4316 0B5E                                   l4260 0A87  
                                 l4420 0B36                                   l5044 032C  
                                 l5140 09EA                                   l5204 02D8  
                                 l5116 0C3F                                   l4350 1764  
                                 l4238 1789                                   l4246 1690  
                                 l4270 0AA2                                   l4414 0B24  
                                 l5070 0379                                   l5126 16DB  
                                 l5134 16E5                                   l5206 02DA  
                                 l3454 0A1A                                   l4344 16D5  
                                 l4328 0B88                                   l4336 08A2  
                                 l4360 0D17                                   l4440 03F2  
                                 l4416 0B2D                                   l4600 0DF2  
                                 l5056 0352                                   l3632 0952  
                                 l4266 0A99                                   l4258 0A7B  
                                 l4282 09BB                                   l4370 0D35  
                                 l4522 08ED                                   l4426 0B53  
                                 l4610 0E34                                   l5082 03A5  
                                 l5058 0359                                   l5146 0A08  
                                 l5170 0219                                   l3458 0A24  
                                 l4436 17E6                                   l4284 09C7  
                                 l4292 09DC                                   l4452 0426  
                                 l4508 08DB                                   l4524 08F8  
                                 l4516 1795                                   l5076 039B  
                                 l5236 06D4                                   l4470 0465  
                                 l4446 040C                                   l5094 03D4  
                                 l5086 03B7                                   l5238 06F5  
                                 l5262 16BC                                   l3662 173A  
                                 l4288 09D3                                   l4472 0468  
                                 l4464 045A                                   l4528 0900  
                                 l4704 01B5                                   l4640 0864  
                                 l4616 0E3F                                   l5088 03BE  
                                 l4800 0650                                   l4482 0485  
                                 l4466 045D                                   l4458 0440  
                                 l4650 087B                                   l4618 0E4F  
                                 l5098 03D9                                   l4468 0460  
                                 l4660 00B1                                   l4652 087C  
                                 l4564 17C9                                   l4580 0FB6  
                                 l4572 0F73                                   l4740 07F2  
                                 l4708 17AB                                   l4646 0874  
                                 l4830 0EE7                                   l4590 0FEE  
                                 l4726 07B9                                   l4496 04C3  
                                 l4664 00C9                                   l4912 095F  
                                 l4816 09B0                                   l4824 0ED4  
                                 l4592 0FFA                                   l4568 0F63  
                                 l4760 0E61                                   l4736 07E7  
                                 l4728 07C7                                   l4682 0143  
                                 l4674 0121                                   l4922 0978  
                                 l4818 09B2                                   l4850 0F2A  
                                 l4762 0E6C                                   l4692 019D  
                                 l4844 0F0C                                   l4836 0EFE  
                                 l4908 0D04                                   l4772 0EA9  
                                 l4678 012B                                   l4918 096E  
                                 l4926 097B                                   l4942 0C83  
                                 l4598 0DE6                                   l4870 0A45  
                                 l4774 0EB4                                   l4766 0E83  
                                 l4790 060E                                   l4696 01A7  
                                 l4960 0CA9                                   l4952 0C8B  
                                 l4936 0C78                                   l4856 0F3A  
                                 l4872 0A4A                                   l4880 0A70  
                                 l4768 0E8E                                   l4792 0626  
                                 l4954 0C97                                   l4866 0F57  
                                 l4874 0A52                                   l4890 0CCD  
                                 l4778 0EC4                                   l4964 0CB2  
                                 l4980 0BE7                                   l4788 05F7  
                                 l4796 063F                                   l4878 0A5F  
                                 l4886 0CC0                                   l4798 064B  
                                 l4968 0CBA                                   l4992 0BF4  
                                 l4984 0BEE                                   l4994 0C00  
                                 l4998 0C0C                                   STR_1 1815  
                                 STR_2 1823                                   STR_3 181D  
                                 STR_4 1802                                   STR_5 1802  
                                 STR_6 1828                                   STR_7 1828  
                                 u2125 0AE6                                   _LATA 010C  
                                 _LATB 010D                                   u2135 0AF7  
                                 _LATC 010E                                   u2225 0A25  
                                 u2235 0A2C                                   u2325 1611  
                                 u4110 0CDD                                   u2335 161B  
                                 u4120 0CDE                                   u3305 0A9A  
                                 u2345 1625                                   u4205 0C98  
                                 u3335 09BE                                   u4215 0CA2  
                                 u3265 0A7E                                   u4225 0CAA  
                                 u4305 0C06                                   u3355 09CD  
                                 u4315 0C0D                                   u4500 01E2  
                                 u3285 0A88                                   u3365 09D4  
                                 u3295 0A92                                   u4185 0C8E  
                                 u3705 0FDE                                   u3554 0B45  
                                 u3555 0B44                                   u3715 0E1C  
                                 u4285 0BF7                                   u4605 0BC1  
                                 u3575 17EF                                   u4535 0236  
                                 u3815 17B3                                   u4705 06D8  
                                 u4625 0666                                   u3825 17B8  
                                 u4490 01D4                                   u3915 04FC  
                                 u4555 0249                                   u4715 06EA  
                                 u4635 066B                                   u3925 0519  
                                 u3685 0FA5                                   u4565 0250  
                                 u4645 067C                                   u3935 052B  
                                 u4655 0690                                   u3855 07BC  
                                 u3945 053D                                   u4585 0BAB  
                                 u4665 0695                                   u4747 0808  
                                 u3955 054F                                   u4595 0BB0  
                                 u4675 06A5                                   u3875 07C8  
                                 u4757 080F                                   u3965 0561  
                                 u4685 06B4                                   u3885 07DC  
                                 u4767 0B25                                   u3975 0589  
                                 u4695 06C5                                   u3895 07E8  
                                 _WPUA 020C                                   _WPUB 020D  
                                 _WPUC 020E                           __CFG_WRT$OFF 0000  
                        __CFG_FCMEN$ON 0000            Led_SetLedBlinkTime@OnTimeMs 0020  
                                 _main 15DD                                   _itoa 08C3  
                                 fsr0h 0005                                   fsr1h 0007  
                                 indf0 0000                                   fsr0l 0004  
                                 indf1 0001                                   fsr1l 0006  
                  __end_of_Led_InitSeq 0D11                                   btemp 007E  
                      _I2cSlaveAddress 00BF                                   _utoa 0D11  
         __size_of_Led_SetLedPulseTime 0010                          __CFG_BOREN$ON 0000  
                 ??_Mcu_StartSystemPll 0074             Dht_CalculateChecksum@Index 0027  
                    _Mcu_SetPullUpsSts 15FC                                   start 002B  
                   AppSm@WpuSetCounter 00B4                    __end_of_GenerateEvt 08A0  
                        ?_InitSchTimer 0070                         ??_Mcu_ClearWdg 0074  
                       ?_Mcu_SetWdgSts 0070                             _BoardReset 15C2  
           __size_of_Mcu_SetDieTempSts 0008                          __CFG_MCLRE$ON 0000  
                   ?_Mcu_SetPullUpsSts 0070                    StringCopy@SourceStr 0020  
                        __CFG_PLLEN$ON 0000                    ??_Mcu_SetPullUpsSts 0074  
                                ?_main 0070                                  ?_itoa 0030  
                      __end_of___awdiv 0CBF                        __end_of___awmod 0C22  
                      __end_of___lldiv 07FB                                  ?_utoa 0027  
                      ___awdiv@divisor 0020                        __end_of___lwdiv 0AA7  
                      __end_of___lwmod 09E1                                  i1l457 0026  
                      ___awdiv@counter 0024                                  u378m0 011C  
                                u379m0 0198           Led_SetLedBlinkTime@OffTimeMs 0022  
            Mcu_SetWdgPeriod@WdgPeriod 0075                __end_of_LedStateMachine 0A72  
                                _AppSm 095E                    ___lmul@multiplicand 0028  
           __size_of_I2c_SetI2cAddress 0005                            _ChecksumSts 00B6  
                     ??_Adc_GetConvSts 0074                   __end_of_Led_MainTask 0A11  
           __size_of_Dht_GetSensorData 002C           LedPulseStateMachine@LedPulse 002A  
                      __end_of_dpowers 1815                                  pclath 000A  
            __end_of_Mcu_SetPullUpsSts 1604                                  utoa@c 002E  
                                utoa@v 002C                                  status 0003  
                      _I2cSlv_MainTask 16DA                                  wtemp0 007E  
                     ??_Adc_ConfigAnCh 0074                         ??_InitSchTimer 0045  
             ?_Mcu_DisableSchedulerInt 0070            __size_of_Mcu_SetDieTempMode 0008  
              LedStateMachine@LedBlink 002C                        __initialization 002D  
                    _I2c_DataReceiveSm 02E6                LedStateMachine@LedPulse 002D  
     StdS_ManageStdServices@DieTempStr 0032                           __end_of_main 15E4  
                         __end_of_itoa 08E7                 ??_LedPulseStateMachine 0028  
                         __end_of_utoa 0D73                          AppSm@AppState 00B5  
                   ?_I2c_DataReceiveSm 003B                                 ??_main 0076  
                               ??_itoa 0034                   Dht_GetSensorData@Ret 0028  
                               ??_utoa 002B         __size_of_I2c_SetI2cAddressMask 0005  
                     __end_of_TmrBInit 0ED1                             _ReceiveEvt 083C  
        __end_of_I2c_SetI2cAddressMask 0800                    ??_I2c_DataReceiveSm 003C  
                               ?_AppSm 0070                      ?_Led_SetLedStatus 0074  
              ??_Dht_CalculateChecksum 0074               I2cSlv_I2cDrvHandle@Index 0029  
                      ReceiveEvt@Event 0075                            _Led_InitSeq 0CBF  
                               _ADRESH 009C                                 _ADRESL 009B  
                   ??_Led_SetLedStatus 0075                       ___awdiv@dividend 0022  
                     ??_ManageProtocol 0038                    App_MainTask@Counter 00B3  
                               _ANSELA 018C                                 _ANSELB 018D  
                               _ANSELC 018E                                 i1l4170 0837  
                               i1l4190 001C                            _GenerateEvt 087E  
                   __size_of_Mcu_Reset 0002                             _TaskNumber 1800  
                  App_MainTask@Options 003B                        ??_Mcu_SetWdgSts 0074  
        I2c_DataReceiveSm@I2cRxAddress 00C7              __end_of_I2c_DataReceiveSm 03F1  
                       __CFG_PWRTE$OFF 0000                            ?_BoardReset 0070  
         __end_of_Mcu_EnableInterrupts 15D1                                 _Sensor 00A0  
                   __size_of_SetBuffer 001E                  __size_of_App_MainTask 011D  
                               ___lmul 0A11                        _LedBehaviourSts 0079  
                               ___wmul 17A9                              ??___awdiv 0074  
                       __CFG_STVREN$ON 0000                              ??___awmod 0074  
                  _Led_SetLedBlinkTime 1776                              ??___lldiv 0074  
                            ??___lwdiv 0074                 Tmr_TmrBPrSet@IntFreqHz 0030  
                            ??___lwmod 0074                  __size_of_Dht_ReadData 0016  
                __size_of_Dht_ReadByte 003F            GetDieTemperature@DieTempRes 0025  
            __size_of_ControlLedDirect 0013                       ___awdiv@quotient 0026  
                      ___awmod@divisor 0020                        _CheckByteStatus 1617  
                      ___awmod@counter 0024                      _Adc_InitAdcModule 0AA7  
                               _strcat 08E7                        _Dht_RequestData 0801  
                               _strcpy 178F                                 itoa@cp 0035  
                         __pdataCOMMON 0079                     ?_Adc_InitAdcModule 0070  
          __end_of_I2cSlv_I2cDrvHandle 0F61                       ?_LedStateMachine 002B  
                        ?_LowPowerMode 0070                 Adc_SelectChannel@SelCh 0075  
                 __end_of_Mcu_ClearWdg 15C2                __end_of_I2cSlv_MainTask 16EE  
                 ?_Led_SetLedBlinkTime 0020                 __size_of_ScheduleTasks 00B0  
             __end_of_Mcu_SetWdgPeriod 1636                    ??_Adc_InitAdcModule 0074  
                __end_ofi1_GenerateEvt 083C        __end_of_Mcu_DisableSchedulerInt 15CB  
           __size_of_Mcu_SetPullUpsSts 0008                          ?_Wdg_MainTask 003B  
              __end_of__initialization 00A2                 Tmr_TmrBPrSet@Prescaler 0032  
                         _App_MainTask 01C9                 InitSchTimer@TmrBConfig 0046  
                         _Dht_ReadData 1703               ??_Mcu_EnableSchedulerInt 0074  
                         _Dht_ReadByte 0B16                             _StringCopy 08A0  
                        __end_of_AppSm 0988                         __pcstackCOMMON 0070  
             LedStateMachine@LedOutSts 0031           __size_of_Adc_StartConversion 0003  
                         __pidataBANK1 0002                           __pidataBANK2 090D  
            __end_of_Adc_InitAdcModule 0ADE               __size_of_InitializeTasks 0045  
                    __end_of_Mcu_Reset 15C0                  LedStateMachine@LedSts 002B  
                   LedStateMachine@Led 0030                  __size_of_Led_MainTask 0030  
                  _Led_SetLedPulseTime 1687                  __end_of_I2c_SetConfig 172F  
                          ?_ReceiveEvt 0070               _I2cNewPacketNotification 00E5  
                       ??_LowPowerMode 0075                         _OPTION_REGbits 0095  
                           _SystemInit 1604                   __end_of_InitSchTimer 175D  
                              ??_AppSm 003A          StdS_ManageStdServices@DieTemp 0036  
                __end_of_Tmr_TmrBPrSet 0652                    __size_of_BoardReset 0003  
          __size_of_StdS_SetI2cAddress 0038                  ??_Led_SetLedBlinkTime 0074  
                   _I2c_UpdateTxBuffer 17C5                      __end_of_SetBuffer 1800  
                       _TemperatureDec 00B9                             __pbssBANK1 00A0  
                           __pbssBANK2 0148                             __pbssBANK3 01A0  
                           __pbssBANK4 0220                             __pbssBANK5 02A0  
                           __pbssBANK6 0320                             __pbssBANK7 03A0  
                       _TemperatureInt 00BA                         _TemperatureStr 00CE  
                       ??_Wdg_MainTask 0076                    ?_I2c_UpdateTxBuffer 0074  
                 ?_Led_SetLedPulseTime 0074                      _Mcu_ConfigPullUps 0702  
           __size_of_I2c_DataReceiveSm 010B                            _HumidityDec 00B7  
                          _HumidityInt 00B8                            _HumidityStr 00C9  
                            ?_TmrBInit 0074                     ?_Mcu_ConfigPullUps 0070  
              __size_of_Tmr_TmrBConfig 004B                             __pmaintext 15DD  
              __end_of_CheckByteStatus 1621                __size_of_Tmr_TmrBIrqSet 0029  
                              ?___lmul 0024                __end_of_Dht_RequestData 081B  
                         _Led_MainTask 09E1                                ?___wmul 0020  
                        _ScheduleTasks 0652             __end_of_CheckStopBitStatus 162B  
                           __pintentry 0004                     ClearRxBuffer@Index 0075  
                  ??_Mcu_ConfigPullUps 0074                         ___lmul@product 002C  
              __size_of_CheckAckStatus 000A                   ??_I2c_UpdateTxBuffer 0020  
             i1GenerateEvt@EventStatus 0072                                ?_strcat 0074  
                              ?_strcpy 0074          __size_of_LedBlinkStateMachine 009F  
                  Wdg_MainTask@Options 003B                 __size_of_ClearRxBuffer 0010  
                              _SSP1ADD 0212                   _Mcu_EnableInterrupts 15CE  
               __size_of_ClearTxBuffer 0010                                _SSP1BUF 0211  
                              _SSP1MSK 0213                       ?_I2cSlv_MainTask 003B  
                      _I2cWriteRequest 00DF         Led_SetLedPulseTime@PulseTimeMs 0074  
                __end_of_MainInterrupt 002B                  __end_of_MainScheduler 16C7  
                              _Led1Sts 00E7              __end_of_Mcu_ConfigPullUps 07A8  
                ??_Led_SetLedPulseTime 0076          I2c_DataReceiveSm@ErrorCounter 00C1  
          __size_of_Mcu_StartSystemPll 0003                            ?_StringCopy 0020  
                  __size_of_ReceiveEvt 0021        __size_of_Mcu_EnableSchedulerInt 0003  
                           ??_TmrBInit 0020                         ?_ScheduleTasks 0070  
        Dht_CalculateChecksum@Checksum 0025                                ___awdiv 0C6D  
                      __size_of___lmul 0030                                ___awmod 0BDC  
                              ___lldiv 07A8                        __size_of___wmul 001C  
                              ___lwdiv 0A72                                ___lwmod 09B4  
           __size_of_Adc_InitAdcModule 0037                       _ControlLedDirect 16C7  
                          _Temperature 00A7                              _I2cConfig 0154  
                            _I2cPacket 239D                  Tmr_TmrBIrqSet@TmrNumb 0075  
                              __ptext1 1604                                __ptext2 15D1  
                              __ptext3 15CE                                __ptext4 1746  
                              __ptext5 0C22                                __ptext6 059C  
                              __ptext7 17A9                                __ptext8 0A11  
                              __ptext9 07A8                  __size_of_Mcu_ClearWdg 0002  
     __size_of_Mcu_DisableSchedulerInt 0003                        __size_of_strcat 0026  
                      __size_of_strcpy 001A                                _dpowers 180B  
                            _T2CONbits 001C                          ?_Tmr_StartTmr 0070  
                          ?_SystemInit 0070                       ___awmod@dividend 0022  
                    ??_InitializeTasks 0063                              _T4CONbits 0417  
                      _Tmr2IsrCallback 00B1                  ?_Mcu_EnableInterrupts 0070  
                            _T6CONbits 041E          I2c_SetI2cAddress@SlaveAddress 0074  
                         ?_Led_InitSeq 0070                    Mcu_SetWdgSts@WdgSts 0074  
                              clrloop0 1643                   end_of_initialization 00A2  
       __size_of_Dht_CalculateChecksum 0021          __end_of_Dht_CalculateChecksum 087E  
                         ?_GenerateEvt 0070                 _MainSystemTimebaseFlag 00E9  
                              itoa@buf 0036                                init_ram 164E  
                              itoa@val 0030             __end_of_Mcu_SetDieTempMode 15F4  
                              initloop 164F                __size_of_SetLedBehavSts 0042  
                      ___lldiv@divisor 0020              __size_of_Led_SetLedStatus 0010  
                 __end_of_LowPowerMode 1667                           ??_BoardReset 0074  
                      ___lldiv@counter 002C                          _ClearRxBuffer 1697  
                        _ClearTxBuffer 16A7                          StringCopy@Len 0023  
                     ?_CheckByteStatus 0070                           _Mcu_ClearWdg 15C0  
             ??_StdS_ManageStdServices 0030                       ?_Dht_RequestData 0070  
                              utoa@buf 002F                                utoa@val 0027  
        __size_of_LedPulseStateMachine 0073                  __size_of_InitSchTimer 0017  
                 __end_of_Wdg_MainTask 1703                           SetBuffer@Len 0021  
                            _PORTAbits 000C                              _PORTCbits 000E  
        Mcu_SetDieTempMode@DieTempMode 0074                         ??_Tmr_StartTmr 0074  
                     _InterruptCounter 00AB                 _Mcu_EnableSchedulerInt 15CB  
                    _TemperatureDecStr 00D9                      StringCopy@DestStr 0022  
                     Dht_ReadByte@Data 0020                        _Tmr4IsrCallback 00AF  
                            _TRISAbits 008C                              _TRISCbits 008E  
                  __size_of_StringCopy 0023                  _I2c_SetI2cAddressMask 07FB  
                    _TemperatureIntStr 00DC                    _Adc_StartConversion 15C5  
                   __end_of_BoardReset 15C5            I2c_DataReceiveSm@I2cRxState 00C8  
                    ?_Mcu_SetWdgPeriod 0070              Tmr_TmrBPrSet@TmrBPrCfgSts 003D  
           __size_of_Mcu_ConfigPullUps 00A6                              _Led1Blink 015F  
                            _CmdBuffer 02A0                     ??_Mcu_SetWdgPeriod 0074  
                            _Led1Pulse 0168                __size_of_Adc_GetConvSts 0004  
                       ?_ClearRxBuffer 0070                        ??_ScheduleTasks 0063  
                    App_MainTask@F4113 0148                         _Tmr_TmrBConfig 0C22  
              Tmr_TmrBPrSet@Postscaler 0033                      App_MainTask@F4099 01A0  
                __end_of_Mcu_SetWdgSts 15EC                           _InitSchTimer 1746  
                       ?_ClearTxBuffer 0070                    __size_of_SystemInit 0009  
                       _Tmr_TmrBIrqSet 0935            Mcu_SetDieTempSts@DieTempSts 0074  
                 ?_Adc_StartConversion 0070             Adc_InitAdcModule@AdcConfig 0074  
                       __end_of___lmul 0A41                         _CheckAckStatus 160D  
                       __end_of___wmul 17C5                __size_of_Adc_ConfigAnCh 0070  
                    App_MainTask@WpuCh 0051                          __pidataCOMMON 0800  
                         ??_ReceiveEvt 0074                         __end_of_strcat 090D  
                       __end_of_strcpy 17A9                 ??_Mcu_EnableInterrupts 0074  
                  start_initialization 002D                              _Mcu_Reset 15BE  
                      _Tmr6IsrCallback 00AD                              _RepBuffer 0220  
           I2c_InitI2cModule@I2cConfig 0022           __size_of_I2cSlv_I2cDrvHandle 0090  
             __size_of_LedStateMachine 0031                              _SetBuffer 17E2  
               __end_of_Tmr_TmrBConfig 0C6D                 __end_of_Tmr_TmrBIrqSet 095E  
                            _TaskTable 0120                            _SystemState 0076  
               Led_SetLedBlinkTime@Led 0074                     __end_of_ReceiveEvt 085D  
              __size_of_ManageProtocol 0123                  ??_Adc_StartConversion 0074  
                Tmr_TmrBConfig@TmrNumb 0044                 __end_of_CheckAckStatus 1617  
                             ??___lmul 0076                Led_InitSeq@DelayCounter 00A9  
                             ??___wmul 0074                      __size_of_TmrBInit 007B  
                         _RepBufferLen 00C0        __size_of_StdS_ManageStdServices 00F4  
                          __pdataBANK1 00E8                            __pdataBANK2 0120  
                   ClearTxBuffer@Index 0075                _Mcu_DisableSchedulerInt 15C8  
               __size_ofi1_GenerateEvt 0021                    Tmr_StartTmr@TmrNumb 0074  
                             ??_strcat 0020                               ??_strcpy 0075  
          __end_of_Led_SetLedBlinkTime 178F                         _HumidityDecStr 00D3  
                          __pbssBIGRAM 239D             __end_of_StdS_SetI2cAddress 0B16  
                   __end_of_TaskNumber 1802                 ?_I2c_SetI2cAddressMask 0070  
                          __pbssCOMMON 0076                             ?_Mcu_Reset 0070  
                       _HumidityIntStr 00D6                              ___latbits 0002  
                App_MainTask@AdcConfig 004B                          __pcstackBANK0 0020  
                   _CheckStopBitStatus 1621                 GenerateEvt@EventStatus 0020  
             __end_of_ControlLedDirect 16DA                   __size_of_Led_InitSeq 0052  
                __size_of_LowPowerMode 000D                    ?_CheckStopBitStatus 0070  
                           ?_SetBuffer 0020           __end_of_LedBlinkStateMachine 1000  
                      ??_ClearRxBuffer 0074                   __size_of_GenerateEvt 0022  
                      ?_Tmr_TmrBConfig 0042                         _SetLedBehavSts 0B55  
                      ??_ClearTxBuffer 0074                        ?_Tmr_TmrBIrqSet 0074  
                 __end_of_Tmr_StartTmr 1746                           ??_StringCopy 0024  
                     _Led_SetLedStatus 1667                 __size_of_I2c_SetConfig 0016  
                     ___lwdiv@dividend 0022                       GenerateEvt@Event 0021  
               __size_of_Tmr_TmrBPrSet 00B6                  __size_of_Wdg_MainTask 0015  
                    _Adc_SelectChannel 1636                App_MainTask@AnalogChSel 003F  
                      ?_CheckAckStatus 0070                Tmr_TmrBIrqSet@TmrIrqSts 0074  
                             ?___awdiv 0020                               ?___awmod 0020  
                      _InitializeTasks 0B97                               ?___lldiv 0020  
                  _I2cReplyPacketReady 0077                               ?___lwdiv 0020  
                             ?___lwmod 0020                     ?_Adc_SelectChannel 0070  
                 ??_CheckStopBitStatus 0074                              __pswtext1 1000  
          __size_of_I2c_UpdateTxBuffer 001D                            _I2cRxBuffer 03A0  
             I2c_DataReceiveSm@Options 003B                  Adc_ConfigAnCh@AnChSel 0074  
                          _I2cTxBuffer 0320                           ??_SystemInit 0076  
       InitializeTasks@ActiveTaskIndex 0067                    ??_Adc_SelectChannel 0074  
                       __size_of_AppSm 002A                           _LowPowerMode 165A  
                     __CFG_WDTE$SWDTEN 0000                     __end_of_StringCopy 08C3  
          __end_of_Led_SetLedPulseTime 1697                       ___lwdiv@quotient 0025  
               _StdS_ManageStdServices 03F1                 __end_of_SetLedBehavSts 0B97  
                        i1_GenerateEvt 081B             __end_of_Mcu_StartSystemPll 15D4  
                         _Wdg_MainTask 16EE                         ___wmul@product 0074  
             Dht_CalculateChecksum@Ret 0026                               _LATCbits 010E  
                       _Adc_GetConvSts 15D4                              clear_ram0 1642  
             __size_of_I2cSlv_MainTask 0014                LedPulseStateMachine@Led 0027  
                             _PIE1bits 0091                               _PIE3bits 0093  
                        _I2cSetAddress 00E1              __end_of_Adc_SelectChannel 1642  
                    _I2c_InitI2cModule 04E5                               _PIR1bits 0011  
                             _PIR3bits 0013                      ??_LedStateMachine 002E  
           Adc_GetConvResult@AdcResult 0021                     __end_of_SystemInit 160D  
                   ?_I2c_InitI2cModule 0070                               _SSP1CON1 0215  
                             _SSP1CON2 0216                               _SSP1CON3 0217  
            ??_Mcu_DisableSchedulerInt 0074                               _SSP1STAT 0214  
                       _Adc_ConfigAnCh 0D73                     _Mcu_SetDieTempMode 15EC  
                   Led_InitSeq@Counter 00BD                ?_Mcu_EnableSchedulerInt 0070  
               __size_of_MainInterrupt 0027             I2c_DataReceiveSm@I2cRxFlag 00C6  
               __size_of_MainScheduler 0010                             _ADCON0bits 009D  
                           _ADCON1bits 009E                      ___wmul@multiplier 0020  
                  ??_I2c_InitI2cModule 0020                               _WPUAbits 020C  
                             _WPUBbits 020D                               _WPUCbits 020E  
                        _I2c_SetConfig 1719                    ?_Mcu_SetDieTempMode 0070  
                          ??_Mcu_Reset 0074                          _Tmr_TmrBPrSet 059C  
                    ___lmul@multiplier 0024                 I2cSlv_MainTask@Options 003B  
         __end_of_LedPulseStateMachine 0E56                         ?i1_GenerateEvt 0070  
             Tmr_TmrBConfig@TmrBConfig 0042                        ?_SetLedBehavSts 0070  
               __end_of_Adc_GetConvSts 15D8           LedBlinkStateMachine@LedBlink 0075  
                          ??_SetBuffer 0074                          ?_App_MainTask 003B  
                _Dht_CalculateChecksum 085D              __end_of_I2c_InitI2cModule 059C  
                    _Adc_GetConvResult 1677                          ?_Dht_ReadData 0070  
              __end_of_InitializeTasks 0BDC                               _Humidity 00A5  
                        ?_Dht_ReadByte 0070                   ??_Mcu_SetDieTempMode 0074  
                             _TmrBInit 0E56                     ?_Adc_GetConvResult 0074  
                       _ManageProtocol 00A6                               _TempSign 00BB  
                 Tmr_TmrBPrSet@Divisor 003E                 __end_of_Adc_ConfigAnCh 0DE3  
            __size_of_Mcu_SetWdgPeriod 000B         __end_of_Mcu_EnableSchedulerInt 15CE  
                     __size_of___awdiv 0052                       __size_of___awmod 0046  
                     __size_of___lldiv 0053                    ??_Adc_GetConvResult 0020  
                  _I2cSlv_I2cDrvHandle 0ED1                       __size_of___lwdiv 0035  
                 Tmr_TmrBPrSet@TmrNumb 003C                       __size_of___lwmod 002D  
                    _GetDieTemperature 175D                             _ANSELAbits 018C  
                           _ANSELBbits 018D                             _ANSELCbits 018E  
             __size_of_CheckByteStatus 000A                   _LedBlinkStateMachine 0F61  
                       ?_I2c_SetConfig 0070               __size_of_Dht_RequestData 001A  
                   ?_GetDieTemperature 0023                             strcat@from 0074  
                       ?_Tmr_TmrBPrSet 0030                        ___lwdiv@divisor 0020  
                      ___lwdiv@counter 0024                               __ptext10 0935  
                             __ptext11 172F                               __ptext20 16EE  
                             __ptext12 0E56                               __ptext21 162B  
                             __ptext13 16B7                               __ptext30 1719  
                             __ptext22 15C0                               __ptext14 0652  
                             __ptext31 04E5                               __ptext23 0CBF  
                             __ptext15 0B97                               __ptext40 15FC  
                             __ptext32 16A7                               __ptext24 0A41  
                             __ptext16 01C9                               __ptext41 15F4  
                             __ptext33 1697                               __ptext25 0DE3  
                             __ptext17 09E1                               __ptext50 085D  
                             __ptext42 15EC                               __ptext34 0ED1  
                             __ptext26 0F61                               __ptext18 16DA  
                             __ptext51 095E                               __ptext43 0702  
                             __ptext35 17C5                               __ptext27 1621  
                             __ptext19 02E6                               __ptext60 0A72  
                             __ptext52 0ADE                               __ptext44 0988  
                             __ptext36 07FB                               __ptext28 1617  
                             __ptext61 08A0                               __ptext53 00A6  
                             __ptext45 15CB                               __ptext37 15D8  
                             __ptext29 160D                               __ptext70 15D4  
                             __ptext62 0B55                               __ptext54 178F  
                             __ptext46 15C8                               __ptext38 0BDC  
                             __ptext71 1677                               __ptext63 1687  
                             __ptext55 08E7                               __ptext47 0801  
                             __ptext39 0C6D                               __ptext80 0D73  
                             __ptext72 087E                               __ptext64 1776  
                             __ptext56 08C3                               __ptext48 1703  
                             __ptext73 16C7                               __ptext65 165A  
                             __ptext57 03F1                               __ptext49 0B16  
                             __ptext82 081B                               __ptext74 1667  
                             __ptext66 15E4                               __ptext58 0D11  
                             __ptext75 15C2                               __ptext67 175D  
                             __ptext59 09B4                               __ptext76 15BE  
                             __ptext68 15C5                               __ptext77 17E2  
                             __ptext69 1636                               __ptext78 083C  
                             __ptext79 0AA7                           _SSP1CON1bits 0215  
              I2c_DataReceiveSm@OpType 00C5                    ??_GetDieTemperature 0076  
                 ?_I2cSlv_I2cDrvHandle 0070                  __size_of_Tmr_StartTmr 0017  
                           strcpy@from 0074              __end_of_Adc_GetConvResult 1687  
                       ??_App_MainTask 003C                          _MainInterrupt 0004  
                   i1GenerateEvt@Event 0071                        ?_Adc_GetConvSts 0070  
                        _MainScheduler 16B7                     TmrBInit@Postscaler 0075  
                        __size_of_main 0007                         ??_Dht_ReadData 0024  
                        __size_of_itoa 0024         I2c_DataReceiveSm@AddressStored 00C2  
                       ??_Dht_ReadByte 0074                          __size_of_utoa 0062  
                  Led_MainTask@Options 003B                 __end_of_ManageProtocol 01C9  
         I2c_UpdateTxBuffer@DataBuffer 0022             __size_of_Adc_SelectChannel 000C  
                __end_of_ScheduleTasks 0702                          ?_Led_MainTask 003B  
                      ?_Adc_ConfigAnCh 0070                        SetBuffer@Buffer 0023  
                  Led_SetLedStatus@Led 0020                               int$flags 007E  
                    _Mcu_SetDieTempSts 15F4                      ??_I2cSlv_MainTask 0076  
                      StringCopy@Index 0074           ScheduleTasks@ActiveTaskIndex 0069  
            __end_of_GetDieTemperature 1776                     ?_Mcu_SetDieTempSts 0070  
              ??_I2c_SetI2cAddressMask 0074                  ?_LedBlinkStateMachine 0070  
                          _OSCSTATbits 009A                             _INTCONbits 000B  
                         _Tmr_StartTmr 172F               __end_of_Led_SetLedStatus 1677  
                  ??_Mcu_SetDieTempSts 0074                             _FVRCONbits 0117  
                             itoa@base 0032                   _I2cNewTxNotification 00E3  
        __size_of_Mcu_EnableInterrupts 0003                 __size_of_Mcu_SetWdgSts 0008  
                      ??i1_GenerateEvt 0070                      _I2c_SetI2cAddress 15D8  
                     ??_Tmr_TmrBConfig 0043                      Dht_ReadData@Index 0025  
                ??_I2cSlv_I2cDrvHandle 0024                       ??_Tmr_TmrBIrqSet 0075  
                    _Dht_GetSensorData 0988                               intlevel1 0000  
                       ?_MainInterrupt 0070                      TmrBInit@Prescaler 0074  
                       ?_MainScheduler 0070                     ?_I2c_SetI2cAddress 0070  
               ?_Dht_CalculateChecksum 0020               I2c_UpdateTxBuffer@Length 0074  
                    ?_ControlLedDirect 0070                 Led_SetLedPulseTime@Led 0020  
                     ___lwmod@dividend 0022                 I2c_DataReceiveSm@Index 0043  
          __end_of_Adc_StartConversion 15C8                     _StdS_SetI2cAddress 0ADE  
                     ___lldiv@dividend 0024                     ?_Dht_GetSensorData 0070  
               Mcu_ConfigPullUps@WpuCh 0074             __size_of_I2c_InitI2cModule 00B7  
               SetLedBehavSts@LedBehav 0025                      __CFG_CLKOUTEN$OFF 0000  
                     ??_CheckAckStatus 0074                        ?_ManageProtocol 0070  
                   ??_ControlLedDirect 0076             I2c_DataReceiveSm@RxCounter 00C4  
                     ?_InitializeTasks 0070                Led_InitSeq@InitSeqState 00BC  
                Led_InitSeq@LedInitSts 00E8                             _OSCCONbits 0099  
                  ??_I2c_SetI2cAddress 0074              __end_of_Mcu_SetDieTempSts 15FC  
                       ??_Led_MainTask 003C             I2c_DataReceiveSm@TxCounter 00C3  
                  ?_StdS_SetI2cAddress 0070                    ??_Dht_GetSensorData 0076  
                       SetBuffer@Index 0024                         SetBuffer@Value 0020  
                 _LedPulseStateMachine 0DE3                        ??_I2c_SetConfig 0074  
                        __pstringtext1 180B                          __pstringtext2 1800  
                        __pstringtext3 1815                          __pstringtext4 181D  
                        __pstringtext5 1823                          __pstringtext6 1828  
                        __pstringtext7 0000                               utoa@base 0029  
                      ??_Tmr_TmrBPrSet 0034                               strcat@cp 0022  
              I2c_UpdateTxBuffer@Index 0023                               strcat@to 0021  
                     ___lldiv@quotient 0028                        ___lwmod@divisor 0020  
                             strcpy@cp 0020                ?_StdS_ManageStdServices 0070  
                             strcpy@to 0021                        ___lwmod@counter 0075  
            __end_of_I2c_SetI2cAddress 15DD                  ReceiveEvt@EventStatus 0074  
                 ??_StdS_SetI2cAddress 0074                          ??_Led_InitSeq 0021  
            __end_of_Dht_GetSensorData 09B4                             _WDTCONbits 0097  
                    ??_CheckByteStatus 0074           __size_of_Led_SetLedBlinkTime 0019  
                    ??_Dht_RequestData 0074                          ??_GenerateEvt 0074  
                      _LedStateMachine 0A41                        TmrBInit@TmrNumb 0021  
           __size_of_Adc_GetConvResult 0010                 Led_SetLedStatus@LedSts 0074  
                  Dht_ReadByte@Counter 0021  I2c_SetI2cAddressMask@SlaveAddressMask 0074  
I2cSlv_I2cDrvHandle@I2cReceiveMsgState 00BE                  __end_of_ClearRxBuffer 16A7  
                    Dht_ReadByte@Index 0023                  __end_of_ClearTxBuffer 16B7  
                        ?_Mcu_ClearWdg 0070                          _Mcu_SetWdgSts 15E4  
