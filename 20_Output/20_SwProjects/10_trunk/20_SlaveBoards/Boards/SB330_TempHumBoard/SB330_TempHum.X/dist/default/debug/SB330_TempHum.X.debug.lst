

Microchip Technology PIC LITE Macro Assembler V1.38 build -256452561 
                                                                                               Wed Apr 24 11:57:57 2019

Microchip Technology Omniscient Code Generator v1.38 (Free mode) build 201607010351
     1                           	processor	16F1829
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	idataCOMMON,global,class=CODE,delta=2
     5                           	psect	idataBANK1,global,class=CODE,delta=2
     6                           	psect	idataBANK2,global,class=CODE,delta=2
     7                           	psect	stringtext,global,class=STRCODE,delta=2
     8                           	psect	cinit,global,class=CODE,merge=1,delta=2
     9                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
    10                           	psect	dataCOMMON,global,class=COMMON,space=1,delta=1
    11                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    12                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    13                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1
    14                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1
    15                           	psect	dataBANK2,global,class=BANK2,space=1,delta=1
    16                           	psect	bssBANK3,global,class=BANK3,space=1,delta=1
    17                           	psect	bssBANK4,global,class=BANK4,space=1,delta=1
    18                           	psect	bssBANK5,global,class=BANK5,space=1,delta=1
    19                           	psect	bssBANK6,global,class=BANK6,space=1,delta=1
    20                           	psect	inittext,global,class=CODE,delta=2
    21                           	psect	clrtext,global,class=CODE,delta=2
    22                           	psect	cstackBANK7,global,class=BANK7,space=1,delta=1
    23                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1
    24                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    25                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    26                           	psect	maintext,global,class=CODE,merge=1,split=1,delta=2
    27                           	psect	text1,local,class=CODE,merge=1,delta=2
    28                           	psect	text2,local,class=CODE,merge=1,delta=2
    29                           	psect	text3,local,class=CODE,merge=1,delta=2
    30                           	psect	text4,local,class=CODE,merge=1,delta=2
    31                           	psect	text5,local,class=CODE,merge=1,delta=2
    32                           	psect	text6,local,class=CODE,merge=1,delta=2
    33                           	psect	text7,local,class=CODE,merge=1,delta=2
    34                           	psect	text8,local,class=CODE,merge=1,delta=2
    35                           	psect	text9,local,class=CODE,merge=1,delta=2
    36                           	psect	text10,local,class=CODE,merge=1,delta=2
    37                           	psect	text11,local,class=CODE,merge=1,delta=2
    38                           	psect	text12,local,class=CODE,merge=1,delta=2
    39                           	psect	text13,local,class=CODE,merge=1,delta=2
    40                           	psect	text14,local,class=CODE,merge=1,delta=2
    41                           	psect	text15,local,class=CODE,merge=1,delta=2
    42                           	psect	text16,local,class=CODE,merge=1,delta=2
    43                           	psect	text17,local,class=CODE,merge=1,delta=2
    44                           	psect	text18,local,class=CODE,merge=1,delta=2
    45                           	psect	text19,local,class=CODE,merge=1,delta=2
    46                           	psect	swtext1,local,class=CONST,delta=2
    47                           	psect	text20,local,class=CODE,merge=1,delta=2
    48                           	psect	text21,local,class=CODE,merge=1,delta=2
    49                           	psect	text22,local,class=CODE,merge=1,delta=2
    50                           	psect	text23,local,class=CODE,merge=1,delta=2
    51                           	psect	text24,local,class=CODE,merge=1,delta=2
    52                           	psect	text25,local,class=CODE,merge=1,delta=2
    53                           	psect	text26,local,class=CODE,merge=1,delta=2
    54                           	psect	text27,local,class=CODE,merge=1,delta=2
    55                           	psect	text28,local,class=CODE,merge=1,delta=2
    56                           	psect	text29,local,class=CODE,merge=1,delta=2
    57                           	psect	text30,local,class=CODE,merge=1,delta=2
    58                           	psect	text31,local,class=CODE,merge=1,delta=2
    59                           	psect	text32,local,class=CODE,merge=1,delta=2
    60                           	psect	text33,local,class=CODE,merge=1,delta=2
    61                           	psect	text34,local,class=CODE,merge=1,delta=2
    62                           	psect	text35,local,class=CODE,merge=1,delta=2
    63                           	psect	text36,local,class=CODE,merge=1,delta=2
    64                           	psect	text37,local,class=CODE,merge=1,delta=2
    65                           	psect	text38,local,class=CODE,merge=1,delta=2
    66                           	psect	text39,local,class=CODE,merge=1,delta=2
    67                           	psect	text40,local,class=CODE,merge=1,delta=2
    68                           	psect	text41,local,class=CODE,merge=1,delta=2
    69                           	psect	text42,local,class=CODE,merge=1,delta=2
    70                           	psect	text43,local,class=CODE,merge=1,delta=2
    71                           	psect	text44,local,class=CODE,merge=1,delta=2
    72                           	psect	text45,local,class=CODE,merge=1,delta=2
    73                           	psect	text46,local,class=CODE,merge=1,delta=2
    74                           	psect	text47,local,class=CODE,merge=1,delta=2
    75                           	psect	text48,local,class=CODE,merge=1,delta=2
    76                           	psect	text49,local,class=CODE,merge=1,delta=2
    77                           	psect	text50,local,class=CODE,merge=1,delta=2
    78                           	psect	text51,local,class=CODE,merge=1,delta=2
    79                           	psect	text52,local,class=CODE,merge=1,delta=2
    80                           	psect	text53,local,class=CODE,merge=1,delta=2
    81                           	psect	text54,local,class=CODE,merge=1,delta=2
    82                           	psect	text55,local,class=CODE,merge=1,delta=2
    83                           	psect	text56,local,class=CODE,merge=1,delta=2
    84                           	psect	text57,local,class=CODE,merge=1,delta=2
    85                           	psect	text58,local,class=CODE,merge=1,delta=2
    86                           	psect	text59,local,class=CODE,merge=1,delta=2
    87                           	psect	text60,local,class=CODE,merge=1,delta=2
    88                           	psect	text61,local,class=CODE,merge=1,delta=2
    89                           	psect	text62,local,class=CODE,merge=1,delta=2
    90                           	psect	text63,local,class=CODE,merge=1,delta=2
    91                           	psect	text64,local,class=CODE,merge=1,delta=2
    92                           	psect	text65,local,class=CODE,merge=1,delta=2
    93                           	psect	text66,local,class=CODE,merge=1,delta=2
    94                           	psect	text67,local,class=CODE,merge=1,delta=2
    95                           	psect	text68,local,class=CODE,merge=1,delta=2
    96                           	psect	text69,local,class=CODE,merge=1,delta=2
    97                           	psect	text70,local,class=CODE,merge=1,delta=2
    98                           	psect	text71,local,class=CODE,merge=1,delta=2
    99                           	psect	text72,local,class=CODE,merge=1,delta=2
   100                           	psect	text73,local,class=CODE,merge=1,delta=2
   101                           	psect	text74,local,class=CODE,merge=1,delta=2
   102                           	psect	text75,local,class=CODE,merge=1,delta=2
   103                           	psect	text76,local,class=CODE,merge=1,delta=2
   104                           	psect	text77,local,class=CODE,merge=1,delta=2
   105                           	psect	text78,local,class=CODE,merge=1,delta=2
   106                           	psect	text79,local,class=CODE,merge=1,delta=2
   107                           	psect	intentry,global,class=CODE,delta=2
   108                           	psect	text81,local,class=CODE,merge=1,delta=2
   109                           	dabs	1,0x620,48
   110                           	dabs	1,0x5CD,35
   111                           	dabs	1,0x239D,0,_I2cPacket
   112                           	dabs	1,0x7E,2
   113  0000                     	;# 
   114  0001                     	;# 
   115  0002                     	;# 
   116  0003                     	;# 
   117  0004                     	;# 
   118  0005                     	;# 
   119  0006                     	;# 
   120  0007                     	;# 
   121  0008                     	;# 
   122  0009                     	;# 
   123  000A                     	;# 
   124  000B                     	;# 
   125  000C                     	;# 
   126  000D                     	;# 
   127  000E                     	;# 
   128  0011                     	;# 
   129  0012                     	;# 
   130  0013                     	;# 
   131  0014                     	;# 
   132  0015                     	;# 
   133  0016                     	;# 
   134  0016                     	;# 
   135  0017                     	;# 
   136  0018                     	;# 
   137  0019                     	;# 
   138  001A                     	;# 
   139  001B                     	;# 
   140  001C                     	;# 
   141  001E                     	;# 
   142  001F                     	;# 
   143  008C                     	;# 
   144  008D                     	;# 
   145  008E                     	;# 
   146  0091                     	;# 
   147  0092                     	;# 
   148  0093                     	;# 
   149  0094                     	;# 
   150  0095                     	;# 
   151  0096                     	;# 
   152  0097                     	;# 
   153  0098                     	;# 
   154  0099                     	;# 
   155  009A                     	;# 
   156  009B                     	;# 
   157  009B                     	;# 
   158  009C                     	;# 
   159  009D                     	;# 
   160  009E                     	;# 
   161  010C                     	;# 
   162  010D                     	;# 
   163  010E                     	;# 
   164  0111                     	;# 
   165  0112                     	;# 
   166  0113                     	;# 
   167  0114                     	;# 
   168  0115                     	;# 
   169  0116                     	;# 
   170  0117                     	;# 
   171  0118                     	;# 
   172  0119                     	;# 
   173  011A                     	;# 
   174  011B                     	;# 
   175  011D                     	;# 
   176  011E                     	;# 
   177  018C                     	;# 
   178  018D                     	;# 
   179  018E                     	;# 
   180  0191                     	;# 
   181  0191                     	;# 
   182  0192                     	;# 
   183  0193                     	;# 
   184  0193                     	;# 
   185  0193                     	;# 
   186  0194                     	;# 
   187  0195                     	;# 
   188  0196                     	;# 
   189  0199                     	;# 
   190  019A                     	;# 
   191  019B                     	;# 
   192  019B                     	;# 
   193  019C                     	;# 
   194  019D                     	;# 
   195  019E                     	;# 
   196  019F                     	;# 
   197  020C                     	;# 
   198  020D                     	;# 
   199  020E                     	;# 
   200  0211                     	;# 
   201  0211                     	;# 
   202  0212                     	;# 
   203  0212                     	;# 
   204  0213                     	;# 
   205  0213                     	;# 
   206  0214                     	;# 
   207  0214                     	;# 
   208  0215                     	;# 
   209  0215                     	;# 
   210  0215                     	;# 
   211  0216                     	;# 
   212  0216                     	;# 
   213  0217                     	;# 
   214  0217                     	;# 
   215  0219                     	;# 
   216  021A                     	;# 
   217  021B                     	;# 
   218  021C                     	;# 
   219  021D                     	;# 
   220  021E                     	;# 
   221  021F                     	;# 
   222  0291                     	;# 
   223  0291                     	;# 
   224  0292                     	;# 
   225  0293                     	;# 
   226  0294                     	;# 
   227  0295                     	;# 
   228  0295                     	;# 
   229  0296                     	;# 
   230  0298                     	;# 
   231  0298                     	;# 
   232  0299                     	;# 
   233  029A                     	;# 
   234  029B                     	;# 
   235  029C                     	;# 
   236  029D                     	;# 
   237  029E                     	;# 
   238  0311                     	;# 
   239  0311                     	;# 
   240  0312                     	;# 
   241  0313                     	;# 
   242  0318                     	;# 
   243  0318                     	;# 
   244  0319                     	;# 
   245  031A                     	;# 
   246  038C                     	;# 
   247  038D                     	;# 
   248  038E                     	;# 
   249  0391                     	;# 
   250  0392                     	;# 
   251  0393                     	;# 
   252  0394                     	;# 
   253  0395                     	;# 
   254  0396                     	;# 
   255  039A                     	;# 
   256  039C                     	;# 
   257  039D                     	;# 
   258  039E                     	;# 
   259  039F                     	;# 
   260  0415                     	;# 
   261  0416                     	;# 
   262  0417                     	;# 
   263  041C                     	;# 
   264  041D                     	;# 
   265  041E                     	;# 
   266  0FE4                     	;# 
   267  0FE5                     	;# 
   268  0FE6                     	;# 
   269  0FE7                     	;# 
   270  0FE8                     	;# 
   271  0FE9                     	;# 
   272  0FEA                     	;# 
   273  0FEB                     	;# 
   274  0FED                     	;# 
   275  0FEE                     	;# 
   276  0FEF                     	;# 
   277  0000                     	;# 
   278  0001                     	;# 
   279  0002                     	;# 
   280  0003                     	;# 
   281  0004                     	;# 
   282  0005                     	;# 
   283  0006                     	;# 
   284  0007                     	;# 
   285  0008                     	;# 
   286  0009                     	;# 
   287  000A                     	;# 
   288  000B                     	;# 
   289  000C                     	;# 
   290  000D                     	;# 
   291  000E                     	;# 
   292  0011                     	;# 
   293  0012                     	;# 
   294  0013                     	;# 
   295  0014                     	;# 
   296  0015                     	;# 
   297  0016                     	;# 
   298  0016                     	;# 
   299  0017                     	;# 
   300  0018                     	;# 
   301  0019                     	;# 
   302  001A                     	;# 
   303  001B                     	;# 
   304  001C                     	;# 
   305  001E                     	;# 
   306  001F                     	;# 
   307  008C                     	;# 
   308  008D                     	;# 
   309  008E                     	;# 
   310  0091                     	;# 
   311  0092                     	;# 
   312  0093                     	;# 
   313  0094                     	;# 
   314  0095                     	;# 
   315  0096                     	;# 
   316  0097                     	;# 
   317  0098                     	;# 
   318  0099                     	;# 
   319  009A                     	;# 
   320  009B                     	;# 
   321  009B                     	;# 
   322  009C                     	;# 
   323  009D                     	;# 
   324  009E                     	;# 
   325  010C                     	;# 
   326  010D                     	;# 
   327  010E                     	;# 
   328  0111                     	;# 
   329  0112                     	;# 
   330  0113                     	;# 
   331  0114                     	;# 
   332  0115                     	;# 
   333  0116                     	;# 
   334  0117                     	;# 
   335  0118                     	;# 
   336  0119                     	;# 
   337  011A                     	;# 
   338  011B                     	;# 
   339  011D                     	;# 
   340  011E                     	;# 
   341  018C                     	;# 
   342  018D                     	;# 
   343  018E                     	;# 
   344  0191                     	;# 
   345  0191                     	;# 
   346  0192                     	;# 
   347  0193                     	;# 
   348  0193                     	;# 
   349  0193                     	;# 
   350  0194                     	;# 
   351  0195                     	;# 
   352  0196                     	;# 
   353  0199                     	;# 
   354  019A                     	;# 
   355  019B                     	;# 
   356  019B                     	;# 
   357  019C                     	;# 
   358  019D                     	;# 
   359  019E                     	;# 
   360  019F                     	;# 
   361  020C                     	;# 
   362  020D                     	;# 
   363  020E                     	;# 
   364  0211                     	;# 
   365  0211                     	;# 
   366  0212                     	;# 
   367  0212                     	;# 
   368  0213                     	;# 
   369  0213                     	;# 
   370  0214                     	;# 
   371  0214                     	;# 
   372  0215                     	;# 
   373  0215                     	;# 
   374  0215                     	;# 
   375  0216                     	;# 
   376  0216                     	;# 
   377  0217                     	;# 
   378  0217                     	;# 
   379  0219                     	;# 
   380  021A                     	;# 
   381  021B                     	;# 
   382  021C                     	;# 
   383  021D                     	;# 
   384  021E                     	;# 
   385  021F                     	;# 
   386  0291                     	;# 
   387  0291                     	;# 
   388  0292                     	;# 
   389  0293                     	;# 
   390  0294                     	;# 
   391  0295                     	;# 
   392  0295                     	;# 
   393  0296                     	;# 
   394  0298                     	;# 
   395  0298                     	;# 
   396  0299                     	;# 
   397  029A                     	;# 
   398  029B                     	;# 
   399  029C                     	;# 
   400  029D                     	;# 
   401  029E                     	;# 
   402  0311                     	;# 
   403  0311                     	;# 
   404  0312                     	;# 
   405  0313                     	;# 
   406  0318                     	;# 
   407  0318                     	;# 
   408  0319                     	;# 
   409  031A                     	;# 
   410  038C                     	;# 
   411  038D                     	;# 
   412  038E                     	;# 
   413  0391                     	;# 
   414  0392                     	;# 
   415  0393                     	;# 
   416  0394                     	;# 
   417  0395                     	;# 
   418  0396                     	;# 
   419  039A                     	;# 
   420  039C                     	;# 
   421  039D                     	;# 
   422  039E                     	;# 
   423  039F                     	;# 
   424  0415                     	;# 
   425  0416                     	;# 
   426  0417                     	;# 
   427  041C                     	;# 
   428  041D                     	;# 
   429  041E                     	;# 
   430  0FE4                     	;# 
   431  0FE5                     	;# 
   432  0FE6                     	;# 
   433  0FE7                     	;# 
   434  0FE8                     	;# 
   435  0FE9                     	;# 
   436  0FEA                     	;# 
   437  0FEB                     	;# 
   438  0FED                     	;# 
   439  0FEE                     	;# 
   440  0FEF                     	;# 
   441  0000                     	;# 
   442  0001                     	;# 
   443  0002                     	;# 
   444  0003                     	;# 
   445  0004                     	;# 
   446  0005                     	;# 
   447  0006                     	;# 
   448  0007                     	;# 
   449  0008                     	;# 
   450  0009                     	;# 
   451  000A                     	;# 
   452  000B                     	;# 
   453  000C                     	;# 
   454  000D                     	;# 
   455  000E                     	;# 
   456  0011                     	;# 
   457  0012                     	;# 
   458  0013                     	;# 
   459  0014                     	;# 
   460  0015                     	;# 
   461  0016                     	;# 
   462  0016                     	;# 
   463  0017                     	;# 
   464  0018                     	;# 
   465  0019                     	;# 
   466  001A                     	;# 
   467  001B                     	;# 
   468  001C                     	;# 
   469  001E                     	;# 
   470  001F                     	;# 
   471  008C                     	;# 
   472  008D                     	;# 
   473  008E                     	;# 
   474  0091                     	;# 
   475  0092                     	;# 
   476  0093                     	;# 
   477  0094                     	;# 
   478  0095                     	;# 
   479  0096                     	;# 
   480  0097                     	;# 
   481  0098                     	;# 
   482  0099                     	;# 
   483  009A                     	;# 
   484  009B                     	;# 
   485  009B                     	;# 
   486  009C                     	;# 
   487  009D                     	;# 
   488  009E                     	;# 
   489  010C                     	;# 
   490  010D                     	;# 
   491  010E                     	;# 
   492  0111                     	;# 
   493  0112                     	;# 
   494  0113                     	;# 
   495  0114                     	;# 
   496  0115                     	;# 
   497  0116                     	;# 
   498  0117                     	;# 
   499  0118                     	;# 
   500  0119                     	;# 
   501  011A                     	;# 
   502  011B                     	;# 
   503  011D                     	;# 
   504  011E                     	;# 
   505  018C                     	;# 
   506  018D                     	;# 
   507  018E                     	;# 
   508  0191                     	;# 
   509  0191                     	;# 
   510  0192                     	;# 
   511  0193                     	;# 
   512  0193                     	;# 
   513  0193                     	;# 
   514  0194                     	;# 
   515  0195                     	;# 
   516  0196                     	;# 
   517  0199                     	;# 
   518  019A                     	;# 
   519  019B                     	;# 
   520  019B                     	;# 
   521  019C                     	;# 
   522  019D                     	;# 
   523  019E                     	;# 
   524  019F                     	;# 
   525  020C                     	;# 
   526  020D                     	;# 
   527  020E                     	;# 
   528  0211                     	;# 
   529  0211                     	;# 
   530  0212                     	;# 
   531  0212                     	;# 
   532  0213                     	;# 
   533  0213                     	;# 
   534  0214                     	;# 
   535  0214                     	;# 
   536  0215                     	;# 
   537  0215                     	;# 
   538  0215                     	;# 
   539  0216                     	;# 
   540  0216                     	;# 
   541  0217                     	;# 
   542  0217                     	;# 
   543  0219                     	;# 
   544  021A                     	;# 
   545  021B                     	;# 
   546  021C                     	;# 
   547  021D                     	;# 
   548  021E                     	;# 
   549  021F                     	;# 
   550  0291                     	;# 
   551  0291                     	;# 
   552  0292                     	;# 
   553  0293                     	;# 
   554  0294                     	;# 
   555  0295                     	;# 
   556  0295                     	;# 
   557  0296                     	;# 
   558  0298                     	;# 
   559  0298                     	;# 
   560  0299                     	;# 
   561  029A                     	;# 
   562  029B                     	;# 
   563  029C                     	;# 
   564  029D                     	;# 
   565  029E                     	;# 
   566  0311                     	;# 
   567  0311                     	;# 
   568  0312                     	;# 
   569  0313                     	;# 
   570  0318                     	;# 
   571  0318                     	;# 
   572  0319                     	;# 
   573  031A                     	;# 
   574  038C                     	;# 
   575  038D                     	;# 
   576  038E                     	;# 
   577  0391                     	;# 
   578  0392                     	;# 
   579  0393                     	;# 
   580  0394                     	;# 
   581  0395                     	;# 
   582  0396                     	;# 
   583  039A                     	;# 
   584  039C                     	;# 
   585  039D                     	;# 
   586  039E                     	;# 
   587  039F                     	;# 
   588  0415                     	;# 
   589  0416                     	;# 
   590  0417                     	;# 
   591  041C                     	;# 
   592  041D                     	;# 
   593  041E                     	;# 
   594  0FE4                     	;# 
   595  0FE5                     	;# 
   596  0FE6                     	;# 
   597  0FE7                     	;# 
   598  0FE8                     	;# 
   599  0FE9                     	;# 
   600  0FEA                     	;# 
   601  0FEB                     	;# 
   602  0FED                     	;# 
   603  0FEE                     	;# 
   604  0FEF                     	;# 
   605  0000                     	;# 
   606  0001                     	;# 
   607  0002                     	;# 
   608  0003                     	;# 
   609  0004                     	;# 
   610  0005                     	;# 
   611  0006                     	;# 
   612  0007                     	;# 
   613  0008                     	;# 
   614  0009                     	;# 
   615  000A                     	;# 
   616  000B                     	;# 
   617  000C                     	;# 
   618  000D                     	;# 
   619  000E                     	;# 
   620  0011                     	;# 
   621  0012                     	;# 
   622  0013                     	;# 
   623  0014                     	;# 
   624  0015                     	;# 
   625  0016                     	;# 
   626  0016                     	;# 
   627  0017                     	;# 
   628  0018                     	;# 
   629  0019                     	;# 
   630  001A                     	;# 
   631  001B                     	;# 
   632  001C                     	;# 
   633  001E                     	;# 
   634  001F                     	;# 
   635  008C                     	;# 
   636  008D                     	;# 
   637  008E                     	;# 
   638  0091                     	;# 
   639  0092                     	;# 
   640  0093                     	;# 
   641  0094                     	;# 
   642  0095                     	;# 
   643  0096                     	;# 
   644  0097                     	;# 
   645  0098                     	;# 
   646  0099                     	;# 
   647  009A                     	;# 
   648  009B                     	;# 
   649  009B                     	;# 
   650  009C                     	;# 
   651  009D                     	;# 
   652  009E                     	;# 
   653  010C                     	;# 
   654  010D                     	;# 
   655  010E                     	;# 
   656  0111                     	;# 
   657  0112                     	;# 
   658  0113                     	;# 
   659  0114                     	;# 
   660  0115                     	;# 
   661  0116                     	;# 
   662  0117                     	;# 
   663  0118                     	;# 
   664  0119                     	;# 
   665  011A                     	;# 
   666  011B                     	;# 
   667  011D                     	;# 
   668  011E                     	;# 
   669  018C                     	;# 
   670  018D                     	;# 
   671  018E                     	;# 
   672  0191                     	;# 
   673  0191                     	;# 
   674  0192                     	;# 
   675  0193                     	;# 
   676  0193                     	;# 
   677  0193                     	;# 
   678  0194                     	;# 
   679  0195                     	;# 
   680  0196                     	;# 
   681  0199                     	;# 
   682  019A                     	;# 
   683  019B                     	;# 
   684  019B                     	;# 
   685  019C                     	;# 
   686  019D                     	;# 
   687  019E                     	;# 
   688  019F                     	;# 
   689  020C                     	;# 
   690  020D                     	;# 
   691  020E                     	;# 
   692  0211                     	;# 
   693  0211                     	;# 
   694  0212                     	;# 
   695  0212                     	;# 
   696  0213                     	;# 
   697  0213                     	;# 
   698  0214                     	;# 
   699  0214                     	;# 
   700  0215                     	;# 
   701  0215                     	;# 
   702  0215                     	;# 
   703  0216                     	;# 
   704  0216                     	;# 
   705  0217                     	;# 
   706  0217                     	;# 
   707  0219                     	;# 
   708  021A                     	;# 
   709  021B                     	;# 
   710  021C                     	;# 
   711  021D                     	;# 
   712  021E                     	;# 
   713  021F                     	;# 
   714  0291                     	;# 
   715  0291                     	;# 
   716  0292                     	;# 
   717  0293                     	;# 
   718  0294                     	;# 
   719  0295                     	;# 
   720  0295                     	;# 
   721  0296                     	;# 
   722  0298                     	;# 
   723  0298                     	;# 
   724  0299                     	;# 
   725  029A                     	;# 
   726  029B                     	;# 
   727  029C                     	;# 
   728  029D                     	;# 
   729  029E                     	;# 
   730  0311                     	;# 
   731  0311                     	;# 
   732  0312                     	;# 
   733  0313                     	;# 
   734  0318                     	;# 
   735  0318                     	;# 
   736  0319                     	;# 
   737  031A                     	;# 
   738  038C                     	;# 
   739  038D                     	;# 
   740  038E                     	;# 
   741  0391                     	;# 
   742  0392                     	;# 
   743  0393                     	;# 
   744  0394                     	;# 
   745  0395                     	;# 
   746  0396                     	;# 
   747  039A                     	;# 
   748  039C                     	;# 
   749  039D                     	;# 
   750  039E                     	;# 
   751  039F                     	;# 
   752  0415                     	;# 
   753  0416                     	;# 
   754  0417                     	;# 
   755  041C                     	;# 
   756  041D                     	;# 
   757  041E                     	;# 
   758  0FE4                     	;# 
   759  0FE5                     	;# 
   760  0FE6                     	;# 
   761  0FE7                     	;# 
   762  0FE8                     	;# 
   763  0FE9                     	;# 
   764  0FEA                     	;# 
   765  0FEB                     	;# 
   766  0FED                     	;# 
   767  0FEE                     	;# 
   768  0FEF                     	;# 
   769  0000                     	;# 
   770  0001                     	;# 
   771  0002                     	;# 
   772  0003                     	;# 
   773  0004                     	;# 
   774  0005                     	;# 
   775  0006                     	;# 
   776  0007                     	;# 
   777  0008                     	;# 
   778  0009                     	;# 
   779  000A                     	;# 
   780  000B                     	;# 
   781  000C                     	;# 
   782  000D                     	;# 
   783  000E                     	;# 
   784  0011                     	;# 
   785  0012                     	;# 
   786  0013                     	;# 
   787  0014                     	;# 
   788  0015                     	;# 
   789  0016                     	;# 
   790  0016                     	;# 
   791  0017                     	;# 
   792  0018                     	;# 
   793  0019                     	;# 
   794  001A                     	;# 
   795  001B                     	;# 
   796  001C                     	;# 
   797  001E                     	;# 
   798  001F                     	;# 
   799  008C                     	;# 
   800  008D                     	;# 
   801  008E                     	;# 
   802  0091                     	;# 
   803  0092                     	;# 
   804  0093                     	;# 
   805  0094                     	;# 
   806  0095                     	;# 
   807  0096                     	;# 
   808  0097                     	;# 
   809  0098                     	;# 
   810  0099                     	;# 
   811  009A                     	;# 
   812  009B                     	;# 
   813  009B                     	;# 
   814  009C                     	;# 
   815  009D                     	;# 
   816  009E                     	;# 
   817  010C                     	;# 
   818  010D                     	;# 
   819  010E                     	;# 
   820  0111                     	;# 
   821  0112                     	;# 
   822  0113                     	;# 
   823  0114                     	;# 
   824  0115                     	;# 
   825  0116                     	;# 
   826  0117                     	;# 
   827  0118                     	;# 
   828  0119                     	;# 
   829  011A                     	;# 
   830  011B                     	;# 
   831  011D                     	;# 
   832  011E                     	;# 
   833  018C                     	;# 
   834  018D                     	;# 
   835  018E                     	;# 
   836  0191                     	;# 
   837  0191                     	;# 
   838  0192                     	;# 
   839  0193                     	;# 
   840  0193                     	;# 
   841  0193                     	;# 
   842  0194                     	;# 
   843  0195                     	;# 
   844  0196                     	;# 
   845  0199                     	;# 
   846  019A                     	;# 
   847  019B                     	;# 
   848  019B                     	;# 
   849  019C                     	;# 
   850  019D                     	;# 
   851  019E                     	;# 
   852  019F                     	;# 
   853  020C                     	;# 
   854  020D                     	;# 
   855  020E                     	;# 
   856  0211                     	;# 
   857  0211                     	;# 
   858  0212                     	;# 
   859  0212                     	;# 
   860  0213                     	;# 
   861  0213                     	;# 
   862  0214                     	;# 
   863  0214                     	;# 
   864  0215                     	;# 
   865  0215                     	;# 
   866  0215                     	;# 
   867  0216                     	;# 
   868  0216                     	;# 
   869  0217                     	;# 
   870  0217                     	;# 
   871  0219                     	;# 
   872  021A                     	;# 
   873  021B                     	;# 
   874  021C                     	;# 
   875  021D                     	;# 
   876  021E                     	;# 
   877  021F                     	;# 
   878  0291                     	;# 
   879  0291                     	;# 
   880  0292                     	;# 
   881  0293                     	;# 
   882  0294                     	;# 
   883  0295                     	;# 
   884  0295                     	;# 
   885  0296                     	;# 
   886  0298                     	;# 
   887  0298                     	;# 
   888  0299                     	;# 
   889  029A                     	;# 
   890  029B                     	;# 
   891  029C                     	;# 
   892  029D                     	;# 
   893  029E                     	;# 
   894  0311                     	;# 
   895  0311                     	;# 
   896  0312                     	;# 
   897  0313                     	;# 
   898  0318                     	;# 
   899  0318                     	;# 
   900  0319                     	;# 
   901  031A                     	;# 
   902  038C                     	;# 
   903  038D                     	;# 
   904  038E                     	;# 
   905  0391                     	;# 
   906  0392                     	;# 
   907  0393                     	;# 
   908  0394                     	;# 
   909  0395                     	;# 
   910  0396                     	;# 
   911  039A                     	;# 
   912  039C                     	;# 
   913  039D                     	;# 
   914  039E                     	;# 
   915  039F                     	;# 
   916  0415                     	;# 
   917  0416                     	;# 
   918  0417                     	;# 
   919  041C                     	;# 
   920  041D                     	;# 
   921  041E                     	;# 
   922  0FE4                     	;# 
   923  0FE5                     	;# 
   924  0FE6                     	;# 
   925  0FE7                     	;# 
   926  0FE8                     	;# 
   927  0FE9                     	;# 
   928  0FEA                     	;# 
   929  0FEB                     	;# 
   930  0FED                     	;# 
   931  0FEE                     	;# 
   932  0FEF                     	;# 
   933  0000                     	;# 
   934  0001                     	;# 
   935  0002                     	;# 
   936  0003                     	;# 
   937  0004                     	;# 
   938  0005                     	;# 
   939  0006                     	;# 
   940  0007                     	;# 
   941  0008                     	;# 
   942  0009                     	;# 
   943  000A                     	;# 
   944  000B                     	;# 
   945  000C                     	;# 
   946  000D                     	;# 
   947  000E                     	;# 
   948  0011                     	;# 
   949  0012                     	;# 
   950  0013                     	;# 
   951  0014                     	;# 
   952  0015                     	;# 
   953  0016                     	;# 
   954  0016                     	;# 
   955  0017                     	;# 
   956  0018                     	;# 
   957  0019                     	;# 
   958  001A                     	;# 
   959  001B                     	;# 
   960  001C                     	;# 
   961  001E                     	;# 
   962  001F                     	;# 
   963  008C                     	;# 
   964  008D                     	;# 
   965  008E                     	;# 
   966  0091                     	;# 
   967  0092                     	;# 
   968  0093                     	;# 
   969  0094                     	;# 
   970  0095                     	;# 
   971  0096                     	;# 
   972  0097                     	;# 
   973  0098                     	;# 
   974  0099                     	;# 
   975  009A                     	;# 
   976  009B                     	;# 
   977  009B                     	;# 
   978  009C                     	;# 
   979  009D                     	;# 
   980  009E                     	;# 
   981  010C                     	;# 
   982  010D                     	;# 
   983  010E                     	;# 
   984  0111                     	;# 
   985  0112                     	;# 
   986  0113                     	;# 
   987  0114                     	;# 
   988  0115                     	;# 
   989  0116                     	;# 
   990  0117                     	;# 
   991  0118                     	;# 
   992  0119                     	;# 
   993  011A                     	;# 
   994  011B                     	;# 
   995  011D                     	;# 
   996  011E                     	;# 
   997  018C                     	;# 
   998  018D                     	;# 
   999  018E                     	;# 
  1000  0191                     	;# 
  1001  0191                     	;# 
  1002  0192                     	;# 
  1003  0193                     	;# 
  1004  0193                     	;# 
  1005  0193                     	;# 
  1006  0194                     	;# 
  1007  0195                     	;# 
  1008  0196                     	;# 
  1009  0199                     	;# 
  1010  019A                     	;# 
  1011  019B                     	;# 
  1012  019B                     	;# 
  1013  019C                     	;# 
  1014  019D                     	;# 
  1015  019E                     	;# 
  1016  019F                     	;# 
  1017  020C                     	;# 
  1018  020D                     	;# 
  1019  020E                     	;# 
  1020  0211                     	;# 
  1021  0211                     	;# 
  1022  0212                     	;# 
  1023  0212                     	;# 
  1024  0213                     	;# 
  1025  0213                     	;# 
  1026  0214                     	;# 
  1027  0214                     	;# 
  1028  0215                     	;# 
  1029  0215                     	;# 
  1030  0215                     	;# 
  1031  0216                     	;# 
  1032  0216                     	;# 
  1033  0217                     	;# 
  1034  0217                     	;# 
  1035  0219                     	;# 
  1036  021A                     	;# 
  1037  021B                     	;# 
  1038  021C                     	;# 
  1039  021D                     	;# 
  1040  021E                     	;# 
  1041  021F                     	;# 
  1042  0291                     	;# 
  1043  0291                     	;# 
  1044  0292                     	;# 
  1045  0293                     	;# 
  1046  0294                     	;# 
  1047  0295                     	;# 
  1048  0295                     	;# 
  1049  0296                     	;# 
  1050  0298                     	;# 
  1051  0298                     	;# 
  1052  0299                     	;# 
  1053  029A                     	;# 
  1054  029B                     	;# 
  1055  029C                     	;# 
  1056  029D                     	;# 
  1057  029E                     	;# 
  1058  0311                     	;# 
  1059  0311                     	;# 
  1060  0312                     	;# 
  1061  0313                     	;# 
  1062  0318                     	;# 
  1063  0318                     	;# 
  1064  0319                     	;# 
  1065  031A                     	;# 
  1066  038C                     	;# 
  1067  038D                     	;# 
  1068  038E                     	;# 
  1069  0391                     	;# 
  1070  0392                     	;# 
  1071  0393                     	;# 
  1072  0394                     	;# 
  1073  0395                     	;# 
  1074  0396                     	;# 
  1075  039A                     	;# 
  1076  039C                     	;# 
  1077  039D                     	;# 
  1078  039E                     	;# 
  1079  039F                     	;# 
  1080  0415                     	;# 
  1081  0416                     	;# 
  1082  0417                     	;# 
  1083  041C                     	;# 
  1084  041D                     	;# 
  1085  041E                     	;# 
  1086  0FE4                     	;# 
  1087  0FE5                     	;# 
  1088  0FE6                     	;# 
  1089  0FE7                     	;# 
  1090  0FE8                     	;# 
  1091  0FE9                     	;# 
  1092  0FEA                     	;# 
  1093  0FEB                     	;# 
  1094  0FED                     	;# 
  1095  0FEE                     	;# 
  1096  0FEF                     	;# 
  1097  0000                     	;# 
  1098  0001                     	;# 
  1099  0002                     	;# 
  1100  0003                     	;# 
  1101  0004                     	;# 
  1102  0005                     	;# 
  1103  0006                     	;# 
  1104  0007                     	;# 
  1105  0008                     	;# 
  1106  0009                     	;# 
  1107  000A                     	;# 
  1108  000B                     	;# 
  1109  000C                     	;# 
  1110  000D                     	;# 
  1111  000E                     	;# 
  1112  0011                     	;# 
  1113  0012                     	;# 
  1114  0013                     	;# 
  1115  0014                     	;# 
  1116  0015                     	;# 
  1117  0016                     	;# 
  1118  0016                     	;# 
  1119  0017                     	;# 
  1120  0018                     	;# 
  1121  0019                     	;# 
  1122  001A                     	;# 
  1123  001B                     	;# 
  1124  001C                     	;# 
  1125  001E                     	;# 
  1126  001F                     	;# 
  1127  008C                     	;# 
  1128  008D                     	;# 
  1129  008E                     	;# 
  1130  0091                     	;# 
  1131  0092                     	;# 
  1132  0093                     	;# 
  1133  0094                     	;# 
  1134  0095                     	;# 
  1135  0096                     	;# 
  1136  0097                     	;# 
  1137  0098                     	;# 
  1138  0099                     	;# 
  1139  009A                     	;# 
  1140  009B                     	;# 
  1141  009B                     	;# 
  1142  009C                     	;# 
  1143  009D                     	;# 
  1144  009E                     	;# 
  1145  010C                     	;# 
  1146  010D                     	;# 
  1147  010E                     	;# 
  1148  0111                     	;# 
  1149  0112                     	;# 
  1150  0113                     	;# 
  1151  0114                     	;# 
  1152  0115                     	;# 
  1153  0116                     	;# 
  1154  0117                     	;# 
  1155  0118                     	;# 
  1156  0119                     	;# 
  1157  011A                     	;# 
  1158  011B                     	;# 
  1159  011D                     	;# 
  1160  011E                     	;# 
  1161  018C                     	;# 
  1162  018D                     	;# 
  1163  018E                     	;# 
  1164  0191                     	;# 
  1165  0191                     	;# 
  1166  0192                     	;# 
  1167  0193                     	;# 
  1168  0193                     	;# 
  1169  0193                     	;# 
  1170  0194                     	;# 
  1171  0195                     	;# 
  1172  0196                     	;# 
  1173  0199                     	;# 
  1174  019A                     	;# 
  1175  019B                     	;# 
  1176  019B                     	;# 
  1177  019C                     	;# 
  1178  019D                     	;# 
  1179  019E                     	;# 
  1180  019F                     	;# 
  1181  020C                     	;# 
  1182  020D                     	;# 
  1183  020E                     	;# 
  1184  0211                     	;# 
  1185  0211                     	;# 
  1186  0212                     	;# 
  1187  0212                     	;# 
  1188  0213                     	;# 
  1189  0213                     	;# 
  1190  0214                     	;# 
  1191  0214                     	;# 
  1192  0215                     	;# 
  1193  0215                     	;# 
  1194  0215                     	;# 
  1195  0216                     	;# 
  1196  0216                     	;# 
  1197  0217                     	;# 
  1198  0217                     	;# 
  1199  0219                     	;# 
  1200  021A                     	;# 
  1201  021B                     	;# 
  1202  021C                     	;# 
  1203  021D                     	;# 
  1204  021E                     	;# 
  1205  021F                     	;# 
  1206  0291                     	;# 
  1207  0291                     	;# 
  1208  0292                     	;# 
  1209  0293                     	;# 
  1210  0294                     	;# 
  1211  0295                     	;# 
  1212  0295                     	;# 
  1213  0296                     	;# 
  1214  0298                     	;# 
  1215  0298                     	;# 
  1216  0299                     	;# 
  1217  029A                     	;# 
  1218  029B                     	;# 
  1219  029C                     	;# 
  1220  029D                     	;# 
  1221  029E                     	;# 
  1222  0311                     	;# 
  1223  0311                     	;# 
  1224  0312                     	;# 
  1225  0313                     	;# 
  1226  0318                     	;# 
  1227  0318                     	;# 
  1228  0319                     	;# 
  1229  031A                     	;# 
  1230  038C                     	;# 
  1231  038D                     	;# 
  1232  038E                     	;# 
  1233  0391                     	;# 
  1234  0392                     	;# 
  1235  0393                     	;# 
  1236  0394                     	;# 
  1237  0395                     	;# 
  1238  0396                     	;# 
  1239  039A                     	;# 
  1240  039C                     	;# 
  1241  039D                     	;# 
  1242  039E                     	;# 
  1243  039F                     	;# 
  1244  0415                     	;# 
  1245  0416                     	;# 
  1246  0417                     	;# 
  1247  041C                     	;# 
  1248  041D                     	;# 
  1249  041E                     	;# 
  1250  0FE4                     	;# 
  1251  0FE5                     	;# 
  1252  0FE6                     	;# 
  1253  0FE7                     	;# 
  1254  0FE8                     	;# 
  1255  0FE9                     	;# 
  1256  0FEA                     	;# 
  1257  0FEB                     	;# 
  1258  0FED                     	;# 
  1259  0FEE                     	;# 
  1260  0FEF                     	;# 
  1261  0000                     	;# 
  1262  0001                     	;# 
  1263  0002                     	;# 
  1264  0003                     	;# 
  1265  0004                     	;# 
  1266  0005                     	;# 
  1267  0006                     	;# 
  1268  0007                     	;# 
  1269  0008                     	;# 
  1270  0009                     	;# 
  1271  000A                     	;# 
  1272  000B                     	;# 
  1273  000C                     	;# 
  1274  000D                     	;# 
  1275  000E                     	;# 
  1276  0011                     	;# 
  1277  0012                     	;# 
  1278  0013                     	;# 
  1279  0014                     	;# 
  1280  0015                     	;# 
  1281  0016                     	;# 
  1282  0016                     	;# 
  1283  0017                     	;# 
  1284  0018                     	;# 
  1285  0019                     	;# 
  1286  001A                     	;# 
  1287  001B                     	;# 
  1288  001C                     	;# 
  1289  001E                     	;# 
  1290  001F                     	;# 
  1291  008C                     	;# 
  1292  008D                     	;# 
  1293  008E                     	;# 
  1294  0091                     	;# 
  1295  0092                     	;# 
  1296  0093                     	;# 
  1297  0094                     	;# 
  1298  0095                     	;# 
  1299  0096                     	;# 
  1300  0097                     	;# 
  1301  0098                     	;# 
  1302  0099                     	;# 
  1303  009A                     	;# 
  1304  009B                     	;# 
  1305  009B                     	;# 
  1306  009C                     	;# 
  1307  009D                     	;# 
  1308  009E                     	;# 
  1309  010C                     	;# 
  1310  010D                     	;# 
  1311  010E                     	;# 
  1312  0111                     	;# 
  1313  0112                     	;# 
  1314  0113                     	;# 
  1315  0114                     	;# 
  1316  0115                     	;# 
  1317  0116                     	;# 
  1318  0117                     	;# 
  1319  0118                     	;# 
  1320  0119                     	;# 
  1321  011A                     	;# 
  1322  011B                     	;# 
  1323  011D                     	;# 
  1324  011E                     	;# 
  1325  018C                     	;# 
  1326  018D                     	;# 
  1327  018E                     	;# 
  1328  0191                     	;# 
  1329  0191                     	;# 
  1330  0192                     	;# 
  1331  0193                     	;# 
  1332  0193                     	;# 
  1333  0193                     	;# 
  1334  0194                     	;# 
  1335  0195                     	;# 
  1336  0196                     	;# 
  1337  0199                     	;# 
  1338  019A                     	;# 
  1339  019B                     	;# 
  1340  019B                     	;# 
  1341  019C                     	;# 
  1342  019D                     	;# 
  1343  019E                     	;# 
  1344  019F                     	;# 
  1345  020C                     	;# 
  1346  020D                     	;# 
  1347  020E                     	;# 
  1348  0211                     	;# 
  1349  0211                     	;# 
  1350  0212                     	;# 
  1351  0212                     	;# 
  1352  0213                     	;# 
  1353  0213                     	;# 
  1354  0214                     	;# 
  1355  0214                     	;# 
  1356  0215                     	;# 
  1357  0215                     	;# 
  1358  0215                     	;# 
  1359  0216                     	;# 
  1360  0216                     	;# 
  1361  0217                     	;# 
  1362  0217                     	;# 
  1363  0219                     	;# 
  1364  021A                     	;# 
  1365  021B                     	;# 
  1366  021C                     	;# 
  1367  021D                     	;# 
  1368  021E                     	;# 
  1369  021F                     	;# 
  1370  0291                     	;# 
  1371  0291                     	;# 
  1372  0292                     	;# 
  1373  0293                     	;# 
  1374  0294                     	;# 
  1375  0295                     	;# 
  1376  0295                     	;# 
  1377  0296                     	;# 
  1378  0298                     	;# 
  1379  0298                     	;# 
  1380  0299                     	;# 
  1381  029A                     	;# 
  1382  029B                     	;# 
  1383  029C                     	;# 
  1384  029D                     	;# 
  1385  029E                     	;# 
  1386  0311                     	;# 
  1387  0311                     	;# 
  1388  0312                     	;# 
  1389  0313                     	;# 
  1390  0318                     	;# 
  1391  0318                     	;# 
  1392  0319                     	;# 
  1393  031A                     	;# 
  1394  038C                     	;# 
  1395  038D                     	;# 
  1396  038E                     	;# 
  1397  0391                     	;# 
  1398  0392                     	;# 
  1399  0393                     	;# 
  1400  0394                     	;# 
  1401  0395                     	;# 
  1402  0396                     	;# 
  1403  039A                     	;# 
  1404  039C                     	;# 
  1405  039D                     	;# 
  1406  039E                     	;# 
  1407  039F                     	;# 
  1408  0415                     	;# 
  1409  0416                     	;# 
  1410  0417                     	;# 
  1411  041C                     	;# 
  1412  041D                     	;# 
  1413  041E                     	;# 
  1414  0FE4                     	;# 
  1415  0FE5                     	;# 
  1416  0FE6                     	;# 
  1417  0FE7                     	;# 
  1418  0FE8                     	;# 
  1419  0FE9                     	;# 
  1420  0FEA                     	;# 
  1421  0FEB                     	;# 
  1422  0FED                     	;# 
  1423  0FEE                     	;# 
  1424  0FEF                     	;# 
  1425  0000                     	;# 
  1426  0001                     	;# 
  1427  0002                     	;# 
  1428  0003                     	;# 
  1429  0004                     	;# 
  1430  0005                     	;# 
  1431  0006                     	;# 
  1432  0007                     	;# 
  1433  0008                     	;# 
  1434  0009                     	;# 
  1435  000A                     	;# 
  1436  000B                     	;# 
  1437  000C                     	;# 
  1438  000D                     	;# 
  1439  000E                     	;# 
  1440  0011                     	;# 
  1441  0012                     	;# 
  1442  0013                     	;# 
  1443  0014                     	;# 
  1444  0015                     	;# 
  1445  0016                     	;# 
  1446  0016                     	;# 
  1447  0017                     	;# 
  1448  0018                     	;# 
  1449  0019                     	;# 
  1450  001A                     	;# 
  1451  001B                     	;# 
  1452  001C                     	;# 
  1453  001E                     	;# 
  1454  001F                     	;# 
  1455  008C                     	;# 
  1456  008D                     	;# 
  1457  008E                     	;# 
  1458  0091                     	;# 
  1459  0092                     	;# 
  1460  0093                     	;# 
  1461  0094                     	;# 
  1462  0095                     	;# 
  1463  0096                     	;# 
  1464  0097                     	;# 
  1465  0098                     	;# 
  1466  0099                     	;# 
  1467  009A                     	;# 
  1468  009B                     	;# 
  1469  009B                     	;# 
  1470  009C                     	;# 
  1471  009D                     	;# 
  1472  009E                     	;# 
  1473  010C                     	;# 
  1474  010D                     	;# 
  1475  010E                     	;# 
  1476  0111                     	;# 
  1477  0112                     	;# 
  1478  0113                     	;# 
  1479  0114                     	;# 
  1480  0115                     	;# 
  1481  0116                     	;# 
  1482  0117                     	;# 
  1483  0118                     	;# 
  1484  0119                     	;# 
  1485  011A                     	;# 
  1486  011B                     	;# 
  1487  011D                     	;# 
  1488  011E                     	;# 
  1489  018C                     	;# 
  1490  018D                     	;# 
  1491  018E                     	;# 
  1492  0191                     	;# 
  1493  0191                     	;# 
  1494  0192                     	;# 
  1495  0193                     	;# 
  1496  0193                     	;# 
  1497  0193                     	;# 
  1498  0194                     	;# 
  1499  0195                     	;# 
  1500  0196                     	;# 
  1501  0199                     	;# 
  1502  019A                     	;# 
  1503  019B                     	;# 
  1504  019B                     	;# 
  1505  019C                     	;# 
  1506  019D                     	;# 
  1507  019E                     	;# 
  1508  019F                     	;# 
  1509  020C                     	;# 
  1510  020D                     	;# 
  1511  020E                     	;# 
  1512  0211                     	;# 
  1513  0211                     	;# 
  1514  0212                     	;# 
  1515  0212                     	;# 
  1516  0213                     	;# 
  1517  0213                     	;# 
  1518  0214                     	;# 
  1519  0214                     	;# 
  1520  0215                     	;# 
  1521  0215                     	;# 
  1522  0215                     	;# 
  1523  0216                     	;# 
  1524  0216                     	;# 
  1525  0217                     	;# 
  1526  0217                     	;# 
  1527  0219                     	;# 
  1528  021A                     	;# 
  1529  021B                     	;# 
  1530  021C                     	;# 
  1531  021D                     	;# 
  1532  021E                     	;# 
  1533  021F                     	;# 
  1534  0291                     	;# 
  1535  0291                     	;# 
  1536  0292                     	;# 
  1537  0293                     	;# 
  1538  0294                     	;# 
  1539  0295                     	;# 
  1540  0295                     	;# 
  1541  0296                     	;# 
  1542  0298                     	;# 
  1543  0298                     	;# 
  1544  0299                     	;# 
  1545  029A                     	;# 
  1546  029B                     	;# 
  1547  029C                     	;# 
  1548  029D                     	;# 
  1549  029E                     	;# 
  1550  0311                     	;# 
  1551  0311                     	;# 
  1552  0312                     	;# 
  1553  0313                     	;# 
  1554  0318                     	;# 
  1555  0318                     	;# 
  1556  0319                     	;# 
  1557  031A                     	;# 
  1558  038C                     	;# 
  1559  038D                     	;# 
  1560  038E                     	;# 
  1561  0391                     	;# 
  1562  0392                     	;# 
  1563  0393                     	;# 
  1564  0394                     	;# 
  1565  0395                     	;# 
  1566  0396                     	;# 
  1567  039A                     	;# 
  1568  039C                     	;# 
  1569  039D                     	;# 
  1570  039E                     	;# 
  1571  039F                     	;# 
  1572  0415                     	;# 
  1573  0416                     	;# 
  1574  0417                     	;# 
  1575  041C                     	;# 
  1576  041D                     	;# 
  1577  041E                     	;# 
  1578  0FE4                     	;# 
  1579  0FE5                     	;# 
  1580  0FE6                     	;# 
  1581  0FE7                     	;# 
  1582  0FE8                     	;# 
  1583  0FE9                     	;# 
  1584  0FEA                     	;# 
  1585  0FEB                     	;# 
  1586  0FED                     	;# 
  1587  0FEE                     	;# 
  1588  0FEF                     	;# 
  1589  0000                     	;# 
  1590  0001                     	;# 
  1591  0002                     	;# 
  1592  0003                     	;# 
  1593  0004                     	;# 
  1594  0005                     	;# 
  1595  0006                     	;# 
  1596  0007                     	;# 
  1597  0008                     	;# 
  1598  0009                     	;# 
  1599  000A                     	;# 
  1600  000B                     	;# 
  1601  000C                     	;# 
  1602  000D                     	;# 
  1603  000E                     	;# 
  1604  0011                     	;# 
  1605  0012                     	;# 
  1606  0013                     	;# 
  1607  0014                     	;# 
  1608  0015                     	;# 
  1609  0016                     	;# 
  1610  0016                     	;# 
  1611  0017                     	;# 
  1612  0018                     	;# 
  1613  0019                     	;# 
  1614  001A                     	;# 
  1615  001B                     	;# 
  1616  001C                     	;# 
  1617  001E                     	;# 
  1618  001F                     	;# 
  1619  008C                     	;# 
  1620  008D                     	;# 
  1621  008E                     	;# 
  1622  0091                     	;# 
  1623  0092                     	;# 
  1624  0093                     	;# 
  1625  0094                     	;# 
  1626  0095                     	;# 
  1627  0096                     	;# 
  1628  0097                     	;# 
  1629  0098                     	;# 
  1630  0099                     	;# 
  1631  009A                     	;# 
  1632  009B                     	;# 
  1633  009B                     	;# 
  1634  009C                     	;# 
  1635  009D                     	;# 
  1636  009E                     	;# 
  1637  010C                     	;# 
  1638  010D                     	;# 
  1639  010E                     	;# 
  1640  0111                     	;# 
  1641  0112                     	;# 
  1642  0113                     	;# 
  1643  0114                     	;# 
  1644  0115                     	;# 
  1645  0116                     	;# 
  1646  0117                     	;# 
  1647  0118                     	;# 
  1648  0119                     	;# 
  1649  011A                     	;# 
  1650  011B                     	;# 
  1651  011D                     	;# 
  1652  011E                     	;# 
  1653  018C                     	;# 
  1654  018D                     	;# 
  1655  018E                     	;# 
  1656  0191                     	;# 
  1657  0191                     	;# 
  1658  0192                     	;# 
  1659  0193                     	;# 
  1660  0193                     	;# 
  1661  0193                     	;# 
  1662  0194                     	;# 
  1663  0195                     	;# 
  1664  0196                     	;# 
  1665  0199                     	;# 
  1666  019A                     	;# 
  1667  019B                     	;# 
  1668  019B                     	;# 
  1669  019C                     	;# 
  1670  019D                     	;# 
  1671  019E                     	;# 
  1672  019F                     	;# 
  1673  020C                     	;# 
  1674  020D                     	;# 
  1675  020E                     	;# 
  1676  0211                     	;# 
  1677  0211                     	;# 
  1678  0212                     	;# 
  1679  0212                     	;# 
  1680  0213                     	;# 
  1681  0213                     	;# 
  1682  0214                     	;# 
  1683  0214                     	;# 
  1684  0215                     	;# 
  1685  0215                     	;# 
  1686  0215                     	;# 
  1687  0216                     	;# 
  1688  0216                     	;# 
  1689  0217                     	;# 
  1690  0217                     	;# 
  1691  0219                     	;# 
  1692  021A                     	;# 
  1693  021B                     	;# 
  1694  021C                     	;# 
  1695  021D                     	;# 
  1696  021E                     	;# 
  1697  021F                     	;# 
  1698  0291                     	;# 
  1699  0291                     	;# 
  1700  0292                     	;# 
  1701  0293                     	;# 
  1702  0294                     	;# 
  1703  0295                     	;# 
  1704  0295                     	;# 
  1705  0296                     	;# 
  1706  0298                     	;# 
  1707  0298                     	;# 
  1708  0299                     	;# 
  1709  029A                     	;# 
  1710  029B                     	;# 
  1711  029C                     	;# 
  1712  029D                     	;# 
  1713  029E                     	;# 
  1714  0311                     	;# 
  1715  0311                     	;# 
  1716  0312                     	;# 
  1717  0313                     	;# 
  1718  0318                     	;# 
  1719  0318                     	;# 
  1720  0319                     	;# 
  1721  031A                     	;# 
  1722  038C                     	;# 
  1723  038D                     	;# 
  1724  038E                     	;# 
  1725  0391                     	;# 
  1726  0392                     	;# 
  1727  0393                     	;# 
  1728  0394                     	;# 
  1729  0395                     	;# 
  1730  0396                     	;# 
  1731  039A                     	;# 
  1732  039C                     	;# 
  1733  039D                     	;# 
  1734  039E                     	;# 
  1735  039F                     	;# 
  1736  0415                     	;# 
  1737  0416                     	;# 
  1738  0417                     	;# 
  1739  041C                     	;# 
  1740  041D                     	;# 
  1741  041E                     	;# 
  1742  0FE4                     	;# 
  1743  0FE5                     	;# 
  1744  0FE6                     	;# 
  1745  0FE7                     	;# 
  1746  0FE8                     	;# 
  1747  0FE9                     	;# 
  1748  0FEA                     	;# 
  1749  0FEB                     	;# 
  1750  0FED                     	;# 
  1751  0FEE                     	;# 
  1752  0FEF                     	;# 
  1753  0000                     	;# 
  1754  0001                     	;# 
  1755  0002                     	;# 
  1756  0003                     	;# 
  1757  0004                     	;# 
  1758  0005                     	;# 
  1759  0006                     	;# 
  1760  0007                     	;# 
  1761  0008                     	;# 
  1762  0009                     	;# 
  1763  000A                     	;# 
  1764  000B                     	;# 
  1765  000C                     	;# 
  1766  000D                     	;# 
  1767  000E                     	;# 
  1768  0011                     	;# 
  1769  0012                     	;# 
  1770  0013                     	;# 
  1771  0014                     	;# 
  1772  0015                     	;# 
  1773  0016                     	;# 
  1774  0016                     	;# 
  1775  0017                     	;# 
  1776  0018                     	;# 
  1777  0019                     	;# 
  1778  001A                     	;# 
  1779  001B                     	;# 
  1780  001C                     	;# 
  1781  001E                     	;# 
  1782  001F                     	;# 
  1783  008C                     	;# 
  1784  008D                     	;# 
  1785  008E                     	;# 
  1786  0091                     	;# 
  1787  0092                     	;# 
  1788  0093                     	;# 
  1789  0094                     	;# 
  1790  0095                     	;# 
  1791  0096                     	;# 
  1792  0097                     	;# 
  1793  0098                     	;# 
  1794  0099                     	;# 
  1795  009A                     	;# 
  1796  009B                     	;# 
  1797  009B                     	;# 
  1798  009C                     	;# 
  1799  009D                     	;# 
  1800  009E                     	;# 
  1801  010C                     	;# 
  1802  010D                     	;# 
  1803  010E                     	;# 
  1804  0111                     	;# 
  1805  0112                     	;# 
  1806  0113                     	;# 
  1807  0114                     	;# 
  1808  0115                     	;# 
  1809  0116                     	;# 
  1810  0117                     	;# 
  1811  0118                     	;# 
  1812  0119                     	;# 
  1813  011A                     	;# 
  1814  011B                     	;# 
  1815  011D                     	;# 
  1816  011E                     	;# 
  1817  018C                     	;# 
  1818  018D                     	;# 
  1819  018E                     	;# 
  1820  0191                     	;# 
  1821  0191                     	;# 
  1822  0192                     	;# 
  1823  0193                     	;# 
  1824  0193                     	;# 
  1825  0193                     	;# 
  1826  0194                     	;# 
  1827  0195                     	;# 
  1828  0196                     	;# 
  1829  0199                     	;# 
  1830  019A                     	;# 
  1831  019B                     	;# 
  1832  019B                     	;# 
  1833  019C                     	;# 
  1834  019D                     	;# 
  1835  019E                     	;# 
  1836  019F                     	;# 
  1837  020C                     	;# 
  1838  020D                     	;# 
  1839  020E                     	;# 
  1840  0211                     	;# 
  1841  0211                     	;# 
  1842  0212                     	;# 
  1843  0212                     	;# 
  1844  0213                     	;# 
  1845  0213                     	;# 
  1846  0214                     	;# 
  1847  0214                     	;# 
  1848  0215                     	;# 
  1849  0215                     	;# 
  1850  0215                     	;# 
  1851  0216                     	;# 
  1852  0216                     	;# 
  1853  0217                     	;# 
  1854  0217                     	;# 
  1855  0219                     	;# 
  1856  021A                     	;# 
  1857  021B                     	;# 
  1858  021C                     	;# 
  1859  021D                     	;# 
  1860  021E                     	;# 
  1861  021F                     	;# 
  1862  0291                     	;# 
  1863  0291                     	;# 
  1864  0292                     	;# 
  1865  0293                     	;# 
  1866  0294                     	;# 
  1867  0295                     	;# 
  1868  0295                     	;# 
  1869  0296                     	;# 
  1870  0298                     	;# 
  1871  0298                     	;# 
  1872  0299                     	;# 
  1873  029A                     	;# 
  1874  029B                     	;# 
  1875  029C                     	;# 
  1876  029D                     	;# 
  1877  029E                     	;# 
  1878  0311                     	;# 
  1879  0311                     	;# 
  1880  0312                     	;# 
  1881  0313                     	;# 
  1882  0318                     	;# 
  1883  0318                     	;# 
  1884  0319                     	;# 
  1885  031A                     	;# 
  1886  038C                     	;# 
  1887  038D                     	;# 
  1888  038E                     	;# 
  1889  0391                     	;# 
  1890  0392                     	;# 
  1891  0393                     	;# 
  1892  0394                     	;# 
  1893  0395                     	;# 
  1894  0396                     	;# 
  1895  039A                     	;# 
  1896  039C                     	;# 
  1897  039D                     	;# 
  1898  039E                     	;# 
  1899  039F                     	;# 
  1900  0415                     	;# 
  1901  0416                     	;# 
  1902  0417                     	;# 
  1903  041C                     	;# 
  1904  041D                     	;# 
  1905  041E                     	;# 
  1906  0FE4                     	;# 
  1907  0FE5                     	;# 
  1908  0FE6                     	;# 
  1909  0FE7                     	;# 
  1910  0FE8                     	;# 
  1911  0FE9                     	;# 
  1912  0FEA                     	;# 
  1913  0FEB                     	;# 
  1914  0FED                     	;# 
  1915  0FEE                     	;# 
  1916  0FEF                     	;# 
  1917  0000                     	;# 
  1918  0001                     	;# 
  1919  0002                     	;# 
  1920  0003                     	;# 
  1921  0004                     	;# 
  1922  0005                     	;# 
  1923  0006                     	;# 
  1924  0007                     	;# 
  1925  0008                     	;# 
  1926  0009                     	;# 
  1927  000A                     	;# 
  1928  000B                     	;# 
  1929  000C                     	;# 
  1930  000D                     	;# 
  1931  000E                     	;# 
  1932  0011                     	;# 
  1933  0012                     	;# 
  1934  0013                     	;# 
  1935  0014                     	;# 
  1936  0015                     	;# 
  1937  0016                     	;# 
  1938  0016                     	;# 
  1939  0017                     	;# 
  1940  0018                     	;# 
  1941  0019                     	;# 
  1942  001A                     	;# 
  1943  001B                     	;# 
  1944  001C                     	;# 
  1945  001E                     	;# 
  1946  001F                     	;# 
  1947  008C                     	;# 
  1948  008D                     	;# 
  1949  008E                     	;# 
  1950  0091                     	;# 
  1951  0092                     	;# 
  1952  0093                     	;# 
  1953  0094                     	;# 
  1954  0095                     	;# 
  1955  0096                     	;# 
  1956  0097                     	;# 
  1957  0098                     	;# 
  1958  0099                     	;# 
  1959  009A                     	;# 
  1960  009B                     	;# 
  1961  009B                     	;# 
  1962  009C                     	;# 
  1963  009D                     	;# 
  1964  009E                     	;# 
  1965  010C                     	;# 
  1966  010D                     	;# 
  1967  010E                     	;# 
  1968  0111                     	;# 
  1969  0112                     	;# 
  1970  0113                     	;# 
  1971  0114                     	;# 
  1972  0115                     	;# 
  1973  0116                     	;# 
  1974  0117                     	;# 
  1975  0118                     	;# 
  1976  0119                     	;# 
  1977  011A                     	;# 
  1978  011B                     	;# 
  1979  011D                     	;# 
  1980  011E                     	;# 
  1981  018C                     	;# 
  1982  018D                     	;# 
  1983  018E                     	;# 
  1984  0191                     	;# 
  1985  0191                     	;# 
  1986  0192                     	;# 
  1987  0193                     	;# 
  1988  0193                     	;# 
  1989  0193                     	;# 
  1990  0194                     	;# 
  1991  0195                     	;# 
  1992  0196                     	;# 
  1993  0199                     	;# 
  1994  019A                     	;# 
  1995  019B                     	;# 
  1996  019B                     	;# 
  1997  019C                     	;# 
  1998  019D                     	;# 
  1999  019E                     	;# 
  2000  019F                     	;# 
  2001  020C                     	;# 
  2002  020D                     	;# 
  2003  020E                     	;# 
  2004  0211                     	;# 
  2005  0211                     	;# 
  2006  0212                     	;# 
  2007  0212                     	;# 
  2008  0213                     	;# 
  2009  0213                     	;# 
  2010  0214                     	;# 
  2011  0214                     	;# 
  2012  0215                     	;# 
  2013  0215                     	;# 
  2014  0215                     	;# 
  2015  0216                     	;# 
  2016  0216                     	;# 
  2017  0217                     	;# 
  2018  0217                     	;# 
  2019  0219                     	;# 
  2020  021A                     	;# 
  2021  021B                     	;# 
  2022  021C                     	;# 
  2023  021D                     	;# 
  2024  021E                     	;# 
  2025  021F                     	;# 
  2026  0291                     	;# 
  2027  0291                     	;# 
  2028  0292                     	;# 
  2029  0293                     	;# 
  2030  0294                     	;# 
  2031  0295                     	;# 
  2032  0295                     	;# 
  2033  0296                     	;# 
  2034  0298                     	;# 
  2035  0298                     	;# 
  2036  0299                     	;# 
  2037  029A                     	;# 
  2038  029B                     	;# 
  2039  029C                     	;# 
  2040  029D                     	;# 
  2041  029E                     	;# 
  2042  0311                     	;# 
  2043  0311                     	;# 
  2044  0312                     	;# 
  2045  0313                     	;# 
  2046  0318                     	;# 
  2047  0318                     	;# 
  2048  0319                     	;# 
  2049  031A                     	;# 
  2050  038C                     	;# 
  2051  038D                     	;# 
  2052  038E                     	;# 
  2053  0391                     	;# 
  2054  0392                     	;# 
  2055  0393                     	;# 
  2056  0394                     	;# 
  2057  0395                     	;# 
  2058  0396                     	;# 
  2059  039A                     	;# 
  2060  039C                     	;# 
  2061  039D                     	;# 
  2062  039E                     	;# 
  2063  039F                     	;# 
  2064  0415                     	;# 
  2065  0416                     	;# 
  2066  0417                     	;# 
  2067  041C                     	;# 
  2068  041D                     	;# 
  2069  041E                     	;# 
  2070  0FE4                     	;# 
  2071  0FE5                     	;# 
  2072  0FE6                     	;# 
  2073  0FE7                     	;# 
  2074  0FE8                     	;# 
  2075  0FE9                     	;# 
  2076  0FEA                     	;# 
  2077  0FEB                     	;# 
  2078  0FED                     	;# 
  2079  0FEE                     	;# 
  2080  0FEF                     	;# 
  2081  0000                     	;# 
  2082  0001                     	;# 
  2083  0002                     	;# 
  2084  0003                     	;# 
  2085  0004                     	;# 
  2086  0005                     	;# 
  2087  0006                     	;# 
  2088  0007                     	;# 
  2089  0008                     	;# 
  2090  0009                     	;# 
  2091  000A                     	;# 
  2092  000B                     	;# 
  2093  000C                     	;# 
  2094  000D                     	;# 
  2095  000E                     	;# 
  2096  0011                     	;# 
  2097  0012                     	;# 
  2098  0013                     	;# 
  2099  0014                     	;# 
  2100  0015                     	;# 
  2101  0016                     	;# 
  2102  0016                     	;# 
  2103  0017                     	;# 
  2104  0018                     	;# 
  2105  0019                     	;# 
  2106  001A                     	;# 
  2107  001B                     	;# 
  2108  001C                     	;# 
  2109  001E                     	;# 
  2110  001F                     	;# 
  2111  008C                     	;# 
  2112  008D                     	;# 
  2113  008E                     	;# 
  2114  0091                     	;# 
  2115  0092                     	;# 
  2116  0093                     	;# 
  2117  0094                     	;# 
  2118  0095                     	;# 
  2119  0096                     	;# 
  2120  0097                     	;# 
  2121  0098                     	;# 
  2122  0099                     	;# 
  2123  009A                     	;# 
  2124  009B                     	;# 
  2125  009B                     	;# 
  2126  009C                     	;# 
  2127  009D                     	;# 
  2128  009E                     	;# 
  2129  010C                     	;# 
  2130  010D                     	;# 
  2131  010E                     	;# 
  2132  0111                     	;# 
  2133  0112                     	;# 
  2134  0113                     	;# 
  2135  0114                     	;# 
  2136  0115                     	;# 
  2137  0116                     	;# 
  2138  0117                     	;# 
  2139  0118                     	;# 
  2140  0119                     	;# 
  2141  011A                     	;# 
  2142  011B                     	;# 
  2143  011D                     	;# 
  2144  011E                     	;# 
  2145  018C                     	;# 
  2146  018D                     	;# 
  2147  018E                     	;# 
  2148  0191                     	;# 
  2149  0191                     	;# 
  2150  0192                     	;# 
  2151  0193                     	;# 
  2152  0193                     	;# 
  2153  0193                     	;# 
  2154  0194                     	;# 
  2155  0195                     	;# 
  2156  0196                     	;# 
  2157  0199                     	;# 
  2158  019A                     	;# 
  2159  019B                     	;# 
  2160  019B                     	;# 
  2161  019C                     	;# 
  2162  019D                     	;# 
  2163  019E                     	;# 
  2164  019F                     	;# 
  2165  020C                     	;# 
  2166  020D                     	;# 
  2167  020E                     	;# 
  2168  0211                     	;# 
  2169  0211                     	;# 
  2170  0212                     	;# 
  2171  0212                     	;# 
  2172  0213                     	;# 
  2173  0213                     	;# 
  2174  0214                     	;# 
  2175  0214                     	;# 
  2176  0215                     	;# 
  2177  0215                     	;# 
  2178  0215                     	;# 
  2179  0216                     	;# 
  2180  0216                     	;# 
  2181  0217                     	;# 
  2182  0217                     	;# 
  2183  0219                     	;# 
  2184  021A                     	;# 
  2185  021B                     	;# 
  2186  021C                     	;# 
  2187  021D                     	;# 
  2188  021E                     	;# 
  2189  021F                     	;# 
  2190  0291                     	;# 
  2191  0291                     	;# 
  2192  0292                     	;# 
  2193  0293                     	;# 
  2194  0294                     	;# 
  2195  0295                     	;# 
  2196  0295                     	;# 
  2197  0296                     	;# 
  2198  0298                     	;# 
  2199  0298                     	;# 
  2200  0299                     	;# 
  2201  029A                     	;# 
  2202  029B                     	;# 
  2203  029C                     	;# 
  2204  029D                     	;# 
  2205  029E                     	;# 
  2206  0311                     	;# 
  2207  0311                     	;# 
  2208  0312                     	;# 
  2209  0313                     	;# 
  2210  0318                     	;# 
  2211  0318                     	;# 
  2212  0319                     	;# 
  2213  031A                     	;# 
  2214  038C                     	;# 
  2215  038D                     	;# 
  2216  038E                     	;# 
  2217  0391                     	;# 
  2218  0392                     	;# 
  2219  0393                     	;# 
  2220  0394                     	;# 
  2221  0395                     	;# 
  2222  0396                     	;# 
  2223  039A                     	;# 
  2224  039C                     	;# 
  2225  039D                     	;# 
  2226  039E                     	;# 
  2227  039F                     	;# 
  2228  0415                     	;# 
  2229  0416                     	;# 
  2230  0417                     	;# 
  2231  041C                     	;# 
  2232  041D                     	;# 
  2233  041E                     	;# 
  2234  0FE4                     	;# 
  2235  0FE5                     	;# 
  2236  0FE6                     	;# 
  2237  0FE7                     	;# 
  2238  0FE8                     	;# 
  2239  0FE9                     	;# 
  2240  0FEA                     	;# 
  2241  0FEB                     	;# 
  2242  0FED                     	;# 
  2243  0FEE                     	;# 
  2244  0FEF                     	;# 
  2245  0000                     	;# 
  2246  0001                     	;# 
  2247  0002                     	;# 
  2248  0003                     	;# 
  2249  0004                     	;# 
  2250  0005                     	;# 
  2251  0006                     	;# 
  2252  0007                     	;# 
  2253  0008                     	;# 
  2254  0009                     	;# 
  2255  000A                     	;# 
  2256  000B                     	;# 
  2257  000C                     	;# 
  2258  000D                     	;# 
  2259  000E                     	;# 
  2260  0011                     	;# 
  2261  0012                     	;# 
  2262  0013                     	;# 
  2263  0014                     	;# 
  2264  0015                     	;# 
  2265  0016                     	;# 
  2266  0016                     	;# 
  2267  0017                     	;# 
  2268  0018                     	;# 
  2269  0019                     	;# 
  2270  001A                     	;# 
  2271  001B                     	;# 
  2272  001C                     	;# 
  2273  001E                     	;# 
  2274  001F                     	;# 
  2275  008C                     	;# 
  2276  008D                     	;# 
  2277  008E                     	;# 
  2278  0091                     	;# 
  2279  0092                     	;# 
  2280  0093                     	;# 
  2281  0094                     	;# 
  2282  0095                     	;# 
  2283  0096                     	;# 
  2284  0097                     	;# 
  2285  0098                     	;# 
  2286  0099                     	;# 
  2287  009A                     	;# 
  2288  009B                     	;# 
  2289  009B                     	;# 
  2290  009C                     	;# 
  2291  009D                     	;# 
  2292  009E                     	;# 
  2293  010C                     	;# 
  2294  010D                     	;# 
  2295  010E                     	;# 
  2296  0111                     	;# 
  2297  0112                     	;# 
  2298  0113                     	;# 
  2299  0114                     	;# 
  2300  0115                     	;# 
  2301  0116                     	;# 
  2302  0117                     	;# 
  2303  0118                     	;# 
  2304  0119                     	;# 
  2305  011A                     	;# 
  2306  011B                     	;# 
  2307  011D                     	;# 
  2308  011E                     	;# 
  2309  018C                     	;# 
  2310  018D                     	;# 
  2311  018E                     	;# 
  2312  0191                     	;# 
  2313  0191                     	;# 
  2314  0192                     	;# 
  2315  0193                     	;# 
  2316  0193                     	;# 
  2317  0193                     	;# 
  2318  0194                     	;# 
  2319  0195                     	;# 
  2320  0196                     	;# 
  2321  0199                     	;# 
  2322  019A                     	;# 
  2323  019B                     	;# 
  2324  019B                     	;# 
  2325  019C                     	;# 
  2326  019D                     	;# 
  2327  019E                     	;# 
  2328  019F                     	;# 
  2329  020C                     	;# 
  2330  020D                     	;# 
  2331  020E                     	;# 
  2332  0211                     	;# 
  2333  0211                     	;# 
  2334  0212                     	;# 
  2335  0212                     	;# 
  2336  0213                     	;# 
  2337  0213                     	;# 
  2338  0214                     	;# 
  2339  0214                     	;# 
  2340  0215                     	;# 
  2341  0215                     	;# 
  2342  0215                     	;# 
  2343  0216                     	;# 
  2344  0216                     	;# 
  2345  0217                     	;# 
  2346  0217                     	;# 
  2347  0219                     	;# 
  2348  021A                     	;# 
  2349  021B                     	;# 
  2350  021C                     	;# 
  2351  021D                     	;# 
  2352  021E                     	;# 
  2353  021F                     	;# 
  2354  0291                     	;# 
  2355  0291                     	;# 
  2356  0292                     	;# 
  2357  0293                     	;# 
  2358  0294                     	;# 
  2359  0295                     	;# 
  2360  0295                     	;# 
  2361  0296                     	;# 
  2362  0298                     	;# 
  2363  0298                     	;# 
  2364  0299                     	;# 
  2365  029A                     	;# 
  2366  029B                     	;# 
  2367  029C                     	;# 
  2368  029D                     	;# 
  2369  029E                     	;# 
  2370  0311                     	;# 
  2371  0311                     	;# 
  2372  0312                     	;# 
  2373  0313                     	;# 
  2374  0318                     	;# 
  2375  0318                     	;# 
  2376  0319                     	;# 
  2377  031A                     	;# 
  2378  038C                     	;# 
  2379  038D                     	;# 
  2380  038E                     	;# 
  2381  0391                     	;# 
  2382  0392                     	;# 
  2383  0393                     	;# 
  2384  0394                     	;# 
  2385  0395                     	;# 
  2386  0396                     	;# 
  2387  039A                     	;# 
  2388  039C                     	;# 
  2389  039D                     	;# 
  2390  039E                     	;# 
  2391  039F                     	;# 
  2392  0415                     	;# 
  2393  0416                     	;# 
  2394  0417                     	;# 
  2395  041C                     	;# 
  2396  041D                     	;# 
  2397  041E                     	;# 
  2398  0FE4                     	;# 
  2399  0FE5                     	;# 
  2400  0FE6                     	;# 
  2401  0FE7                     	;# 
  2402  0FE8                     	;# 
  2403  0FE9                     	;# 
  2404  0FEA                     	;# 
  2405  0FEB                     	;# 
  2406  0FED                     	;# 
  2407  0FEE                     	;# 
  2408  0FEF                     	;# 
  2409  0000                     	;# 
  2410  0001                     	;# 
  2411  0002                     	;# 
  2412  0003                     	;# 
  2413  0004                     	;# 
  2414  0005                     	;# 
  2415  0006                     	;# 
  2416  0007                     	;# 
  2417  0008                     	;# 
  2418  0009                     	;# 
  2419  000A                     	;# 
  2420  000B                     	;# 
  2421  000C                     	;# 
  2422  000D                     	;# 
  2423  000E                     	;# 
  2424  0011                     	;# 
  2425  0012                     	;# 
  2426  0013                     	;# 
  2427  0014                     	;# 
  2428  0015                     	;# 
  2429  0016                     	;# 
  2430  0016                     	;# 
  2431  0017                     	;# 
  2432  0018                     	;# 
  2433  0019                     	;# 
  2434  001A                     	;# 
  2435  001B                     	;# 
  2436  001C                     	;# 
  2437  001E                     	;# 
  2438  001F                     	;# 
  2439  008C                     	;# 
  2440  008D                     	;# 
  2441  008E                     	;# 
  2442  0091                     	;# 
  2443  0092                     	;# 
  2444  0093                     	;# 
  2445  0094                     	;# 
  2446  0095                     	;# 
  2447  0096                     	;# 
  2448  0097                     	;# 
  2449  0098                     	;# 
  2450  0099                     	;# 
  2451  009A                     	;# 
  2452  009B                     	;# 
  2453  009B                     	;# 
  2454  009C                     	;# 
  2455  009D                     	;# 
  2456  009E                     	;# 
  2457  010C                     	;# 
  2458  010D                     	;# 
  2459  010E                     	;# 
  2460  0111                     	;# 
  2461  0112                     	;# 
  2462  0113                     	;# 
  2463  0114                     	;# 
  2464  0115                     	;# 
  2465  0116                     	;# 
  2466  0117                     	;# 
  2467  0118                     	;# 
  2468  0119                     	;# 
  2469  011A                     	;# 
  2470  011B                     	;# 
  2471  011D                     	;# 
  2472  011E                     	;# 
  2473  018C                     	;# 
  2474  018D                     	;# 
  2475  018E                     	;# 
  2476  0191                     	;# 
  2477  0191                     	;# 
  2478  0192                     	;# 
  2479  0193                     	;# 
  2480  0193                     	;# 
  2481  0193                     	;# 
  2482  0194                     	;# 
  2483  0195                     	;# 
  2484  0196                     	;# 
  2485  0199                     	;# 
  2486  019A                     	;# 
  2487  019B                     	;# 
  2488  019B                     	;# 
  2489  019C                     	;# 
  2490  019D                     	;# 
  2491  019E                     	;# 
  2492  019F                     	;# 
  2493  020C                     	;# 
  2494  020D                     	;# 
  2495  020E                     	;# 
  2496  0211                     	;# 
  2497  0211                     	;# 
  2498  0212                     	;# 
  2499  0212                     	;# 
  2500  0213                     	;# 
  2501  0213                     	;# 
  2502  0214                     	;# 
  2503  0214                     	;# 
  2504  0215                     	;# 
  2505  0215                     	;# 
  2506  0215                     	;# 
  2507  0216                     	;# 
  2508  0216                     	;# 
  2509  0217                     	;# 
  2510  0217                     	;# 
  2511  0219                     	;# 
  2512  021A                     	;# 
  2513  021B                     	;# 
  2514  021C                     	;# 
  2515  021D                     	;# 
  2516  021E                     	;# 
  2517  021F                     	;# 
  2518  0291                     	;# 
  2519  0291                     	;# 
  2520  0292                     	;# 
  2521  0293                     	;# 
  2522  0294                     	;# 
  2523  0295                     	;# 
  2524  0295                     	;# 
  2525  0296                     	;# 
  2526  0298                     	;# 
  2527  0298                     	;# 
  2528  0299                     	;# 
  2529  029A                     	;# 
  2530  029B                     	;# 
  2531  029C                     	;# 
  2532  029D                     	;# 
  2533  029E                     	;# 
  2534  0311                     	;# 
  2535  0311                     	;# 
  2536  0312                     	;# 
  2537  0313                     	;# 
  2538  0318                     	;# 
  2539  0318                     	;# 
  2540  0319                     	;# 
  2541  031A                     	;# 
  2542  038C                     	;# 
  2543  038D                     	;# 
  2544  038E                     	;# 
  2545  0391                     	;# 
  2546  0392                     	;# 
  2547  0393                     	;# 
  2548  0394                     	;# 
  2549  0395                     	;# 
  2550  0396                     	;# 
  2551  039A                     	;# 
  2552  039C                     	;# 
  2553  039D                     	;# 
  2554  039E                     	;# 
  2555  039F                     	;# 
  2556  0415                     	;# 
  2557  0416                     	;# 
  2558  0417                     	;# 
  2559  041C                     	;# 
  2560  041D                     	;# 
  2561  041E                     	;# 
  2562  0FE4                     	;# 
  2563  0FE5                     	;# 
  2564  0FE6                     	;# 
  2565  0FE7                     	;# 
  2566  0FE8                     	;# 
  2567  0FE9                     	;# 
  2568  0FEA                     	;# 
  2569  0FEB                     	;# 
  2570  0FED                     	;# 
  2571  0FEE                     	;# 
  2572  0FEF                     	;# 
  2573  0000                     	;# 
  2574  0001                     	;# 
  2575  0002                     	;# 
  2576  0003                     	;# 
  2577  0004                     	;# 
  2578  0005                     	;# 
  2579  0006                     	;# 
  2580  0007                     	;# 
  2581  0008                     	;# 
  2582  0009                     	;# 
  2583  000A                     	;# 
  2584  000B                     	;# 
  2585  000C                     	;# 
  2586  000D                     	;# 
  2587  000E                     	;# 
  2588  0011                     	;# 
  2589  0012                     	;# 
  2590  0013                     	;# 
  2591  0014                     	;# 
  2592  0015                     	;# 
  2593  0016                     	;# 
  2594  0016                     	;# 
  2595  0017                     	;# 
  2596  0018                     	;# 
  2597  0019                     	;# 
  2598  001A                     	;# 
  2599  001B                     	;# 
  2600  001C                     	;# 
  2601  001E                     	;# 
  2602  001F                     	;# 
  2603  008C                     	;# 
  2604  008D                     	;# 
  2605  008E                     	;# 
  2606  0091                     	;# 
  2607  0092                     	;# 
  2608  0093                     	;# 
  2609  0094                     	;# 
  2610  0095                     	;# 
  2611  0096                     	;# 
  2612  0097                     	;# 
  2613  0098                     	;# 
  2614  0099                     	;# 
  2615  009A                     	;# 
  2616  009B                     	;# 
  2617  009B                     	;# 
  2618  009C                     	;# 
  2619  009D                     	;# 
  2620  009E                     	;# 
  2621  010C                     	;# 
  2622  010D                     	;# 
  2623  010E                     	;# 
  2624  0111                     	;# 
  2625  0112                     	;# 
  2626  0113                     	;# 
  2627  0114                     	;# 
  2628  0115                     	;# 
  2629  0116                     	;# 
  2630  0117                     	;# 
  2631  0118                     	;# 
  2632  0119                     	;# 
  2633  011A                     	;# 
  2634  011B                     	;# 
  2635  011D                     	;# 
  2636  011E                     	;# 
  2637  018C                     	;# 
  2638  018D                     	;# 
  2639  018E                     	;# 
  2640  0191                     	;# 
  2641  0191                     	;# 
  2642  0192                     	;# 
  2643  0193                     	;# 
  2644  0193                     	;# 
  2645  0193                     	;# 
  2646  0194                     	;# 
  2647  0195                     	;# 
  2648  0196                     	;# 
  2649  0199                     	;# 
  2650  019A                     	;# 
  2651  019B                     	;# 
  2652  019B                     	;# 
  2653  019C                     	;# 
  2654  019D                     	;# 
  2655  019E                     	;# 
  2656  019F                     	;# 
  2657  020C                     	;# 
  2658  020D                     	;# 
  2659  020E                     	;# 
  2660  0211                     	;# 
  2661  0211                     	;# 
  2662  0212                     	;# 
  2663  0212                     	;# 
  2664  0213                     	;# 
  2665  0213                     	;# 
  2666  0214                     	;# 
  2667  0214                     	;# 
  2668  0215                     	;# 
  2669  0215                     	;# 
  2670  0215                     	;# 
  2671  0216                     	;# 
  2672  0216                     	;# 
  2673  0217                     	;# 
  2674  0217                     	;# 
  2675  0219                     	;# 
  2676  021A                     	;# 
  2677  021B                     	;# 
  2678  021C                     	;# 
  2679  021D                     	;# 
  2680  021E                     	;# 
  2681  021F                     	;# 
  2682  0291                     	;# 
  2683  0291                     	;# 
  2684  0292                     	;# 
  2685  0293                     	;# 
  2686  0294                     	;# 
  2687  0295                     	;# 
  2688  0295                     	;# 
  2689  0296                     	;# 
  2690  0298                     	;# 
  2691  0298                     	;# 
  2692  0299                     	;# 
  2693  029A                     	;# 
  2694  029B                     	;# 
  2695  029C                     	;# 
  2696  029D                     	;# 
  2697  029E                     	;# 
  2698  0311                     	;# 
  2699  0311                     	;# 
  2700  0312                     	;# 
  2701  0313                     	;# 
  2702  0318                     	;# 
  2703  0318                     	;# 
  2704  0319                     	;# 
  2705  031A                     	;# 
  2706  038C                     	;# 
  2707  038D                     	;# 
  2708  038E                     	;# 
  2709  0391                     	;# 
  2710  0392                     	;# 
  2711  0393                     	;# 
  2712  0394                     	;# 
  2713  0395                     	;# 
  2714  0396                     	;# 
  2715  039A                     	;# 
  2716  039C                     	;# 
  2717  039D                     	;# 
  2718  039E                     	;# 
  2719  039F                     	;# 
  2720  0415                     	;# 
  2721  0416                     	;# 
  2722  0417                     	;# 
  2723  041C                     	;# 
  2724  041D                     	;# 
  2725  041E                     	;# 
  2726  0FE4                     	;# 
  2727  0FE5                     	;# 
  2728  0FE6                     	;# 
  2729  0FE7                     	;# 
  2730  0FE8                     	;# 
  2731  0FE9                     	;# 
  2732  0FEA                     	;# 
  2733  0FEB                     	;# 
  2734  0FED                     	;# 
  2735  0FEE                     	;# 
  2736  0FEF                     	;# 
  2737  0000                     	;# 
  2738  0001                     	;# 
  2739  0002                     	;# 
  2740  0003                     	;# 
  2741  0004                     	;# 
  2742  0005                     	;# 
  2743  0006                     	;# 
  2744  0007                     	;# 
  2745  0008                     	;# 
  2746  0009                     	;# 
  2747  000A                     	;# 
  2748  000B                     	;# 
  2749  000C                     	;# 
  2750  000D                     	;# 
  2751  000E                     	;# 
  2752  0011                     	;# 
  2753  0012                     	;# 
  2754  0013                     	;# 
  2755  0014                     	;# 
  2756  0015                     	;# 
  2757  0016                     	;# 
  2758  0016                     	;# 
  2759  0017                     	;# 
  2760  0018                     	;# 
  2761  0019                     	;# 
  2762  001A                     	;# 
  2763  001B                     	;# 
  2764  001C                     	;# 
  2765  001E                     	;# 
  2766  001F                     	;# 
  2767  008C                     	;# 
  2768  008D                     	;# 
  2769  008E                     	;# 
  2770  0091                     	;# 
  2771  0092                     	;# 
  2772  0093                     	;# 
  2773  0094                     	;# 
  2774  0095                     	;# 
  2775  0096                     	;# 
  2776  0097                     	;# 
  2777  0098                     	;# 
  2778  0099                     	;# 
  2779  009A                     	;# 
  2780  009B                     	;# 
  2781  009B                     	;# 
  2782  009C                     	;# 
  2783  009D                     	;# 
  2784  009E                     	;# 
  2785  010C                     	;# 
  2786  010D                     	;# 
  2787  010E                     	;# 
  2788  0111                     	;# 
  2789  0112                     	;# 
  2790  0113                     	;# 
  2791  0114                     	;# 
  2792  0115                     	;# 
  2793  0116                     	;# 
  2794  0117                     	;# 
  2795  0118                     	;# 
  2796  0119                     	;# 
  2797  011A                     	;# 
  2798  011B                     	;# 
  2799  011D                     	;# 
  2800  011E                     	;# 
  2801  018C                     	;# 
  2802  018D                     	;# 
  2803  018E                     	;# 
  2804  0191                     	;# 
  2805  0191                     	;# 
  2806  0192                     	;# 
  2807  0193                     	;# 
  2808  0193                     	;# 
  2809  0193                     	;# 
  2810  0194                     	;# 
  2811  0195                     	;# 
  2812  0196                     	;# 
  2813  0199                     	;# 
  2814  019A                     	;# 
  2815  019B                     	;# 
  2816  019B                     	;# 
  2817  019C                     	;# 
  2818  019D                     	;# 
  2819  019E                     	;# 
  2820  019F                     	;# 
  2821  020C                     	;# 
  2822  020D                     	;# 
  2823  020E                     	;# 
  2824  0211                     	;# 
  2825  0211                     	;# 
  2826  0212                     	;# 
  2827  0212                     	;# 
  2828  0213                     	;# 
  2829  0213                     	;# 
  2830  0214                     	;# 
  2831  0214                     	;# 
  2832  0215                     	;# 
  2833  0215                     	;# 
  2834  0215                     	;# 
  2835  0216                     	;# 
  2836  0216                     	;# 
  2837  0217                     	;# 
  2838  0217                     	;# 
  2839  0219                     	;# 
  2840  021A                     	;# 
  2841  021B                     	;# 
  2842  021C                     	;# 
  2843  021D                     	;# 
  2844  021E                     	;# 
  2845  021F                     	;# 
  2846  0291                     	;# 
  2847  0291                     	;# 
  2848  0292                     	;# 
  2849  0293                     	;# 
  2850  0294                     	;# 
  2851  0295                     	;# 
  2852  0295                     	;# 
  2853  0296                     	;# 
  2854  0298                     	;# 
  2855  0298                     	;# 
  2856  0299                     	;# 
  2857  029A                     	;# 
  2858  029B                     	;# 
  2859  029C                     	;# 
  2860  029D                     	;# 
  2861  029E                     	;# 
  2862  0311                     	;# 
  2863  0311                     	;# 
  2864  0312                     	;# 
  2865  0313                     	;# 
  2866  0318                     	;# 
  2867  0318                     	;# 
  2868  0319                     	;# 
  2869  031A                     	;# 
  2870  038C                     	;# 
  2871  038D                     	;# 
  2872  038E                     	;# 
  2873  0391                     	;# 
  2874  0392                     	;# 
  2875  0393                     	;# 
  2876  0394                     	;# 
  2877  0395                     	;# 
  2878  0396                     	;# 
  2879  039A                     	;# 
  2880  039C                     	;# 
  2881  039D                     	;# 
  2882  039E                     	;# 
  2883  039F                     	;# 
  2884  0415                     	;# 
  2885  0416                     	;# 
  2886  0417                     	;# 
  2887  041C                     	;# 
  2888  041D                     	;# 
  2889  041E                     	;# 
  2890  0FE4                     	;# 
  2891  0FE5                     	;# 
  2892  0FE6                     	;# 
  2893  0FE7                     	;# 
  2894  0FE8                     	;# 
  2895  0FE9                     	;# 
  2896  0FEA                     	;# 
  2897  0FEB                     	;# 
  2898  0FED                     	;# 
  2899  0FEE                     	;# 
  2900  0FEF                     	;# 
  2901  0000                     	;# 
  2902  0001                     	;# 
  2903  0002                     	;# 
  2904  0003                     	;# 
  2905  0004                     	;# 
  2906  0005                     	;# 
  2907  0006                     	;# 
  2908  0007                     	;# 
  2909  0008                     	;# 
  2910  0009                     	;# 
  2911  000A                     	;# 
  2912  000B                     	;# 
  2913  000C                     	;# 
  2914  000D                     	;# 
  2915  000E                     	;# 
  2916  0011                     	;# 
  2917  0012                     	;# 
  2918  0013                     	;# 
  2919  0014                     	;# 
  2920  0015                     	;# 
  2921  0016                     	;# 
  2922  0016                     	;# 
  2923  0017                     	;# 
  2924  0018                     	;# 
  2925  0019                     	;# 
  2926  001A                     	;# 
  2927  001B                     	;# 
  2928  001C                     	;# 
  2929  001E                     	;# 
  2930  001F                     	;# 
  2931  008C                     	;# 
  2932  008D                     	;# 
  2933  008E                     	;# 
  2934  0091                     	;# 
  2935  0092                     	;# 
  2936  0093                     	;# 
  2937  0094                     	;# 
  2938  0095                     	;# 
  2939  0096                     	;# 
  2940  0097                     	;# 
  2941  0098                     	;# 
  2942  0099                     	;# 
  2943  009A                     	;# 
  2944  009B                     	;# 
  2945  009B                     	;# 
  2946  009C                     	;# 
  2947  009D                     	;# 
  2948  009E                     	;# 
  2949  010C                     	;# 
  2950  010D                     	;# 
  2951  010E                     	;# 
  2952  0111                     	;# 
  2953  0112                     	;# 
  2954  0113                     	;# 
  2955  0114                     	;# 
  2956  0115                     	;# 
  2957  0116                     	;# 
  2958  0117                     	;# 
  2959  0118                     	;# 
  2960  0119                     	;# 
  2961  011A                     	;# 
  2962  011B                     	;# 
  2963  011D                     	;# 
  2964  011E                     	;# 
  2965  018C                     	;# 
  2966  018D                     	;# 
  2967  018E                     	;# 
  2968  0191                     	;# 
  2969  0191                     	;# 
  2970  0192                     	;# 
  2971  0193                     	;# 
  2972  0193                     	;# 
  2973  0193                     	;# 
  2974  0194                     	;# 
  2975  0195                     	;# 
  2976  0196                     	;# 
  2977  0199                     	;# 
  2978  019A                     	;# 
  2979  019B                     	;# 
  2980  019B                     	;# 
  2981  019C                     	;# 
  2982  019D                     	;# 
  2983  019E                     	;# 
  2984  019F                     	;# 
  2985  020C                     	;# 
  2986  020D                     	;# 
  2987  020E                     	;# 
  2988  0211                     	;# 
  2989  0211                     	;# 
  2990  0212                     	;# 
  2991  0212                     	;# 
  2992  0213                     	;# 
  2993  0213                     	;# 
  2994  0214                     	;# 
  2995  0214                     	;# 
  2996  0215                     	;# 
  2997  0215                     	;# 
  2998  0215                     	;# 
  2999  0216                     	;# 
  3000  0216                     	;# 
  3001  0217                     	;# 
  3002  0217                     	;# 
  3003  0219                     	;# 
  3004  021A                     	;# 
  3005  021B                     	;# 
  3006  021C                     	;# 
  3007  021D                     	;# 
  3008  021E                     	;# 
  3009  021F                     	;# 
  3010  0291                     	;# 
  3011  0291                     	;# 
  3012  0292                     	;# 
  3013  0293                     	;# 
  3014  0294                     	;# 
  3015  0295                     	;# 
  3016  0295                     	;# 
  3017  0296                     	;# 
  3018  0298                     	;# 
  3019  0298                     	;# 
  3020  0299                     	;# 
  3021  029A                     	;# 
  3022  029B                     	;# 
  3023  029C                     	;# 
  3024  029D                     	;# 
  3025  029E                     	;# 
  3026  0311                     	;# 
  3027  0311                     	;# 
  3028  0312                     	;# 
  3029  0313                     	;# 
  3030  0318                     	;# 
  3031  0318                     	;# 
  3032  0319                     	;# 
  3033  031A                     	;# 
  3034  038C                     	;# 
  3035  038D                     	;# 
  3036  038E                     	;# 
  3037  0391                     	;# 
  3038  0392                     	;# 
  3039  0393                     	;# 
  3040  0394                     	;# 
  3041  0395                     	;# 
  3042  0396                     	;# 
  3043  039A                     	;# 
  3044  039C                     	;# 
  3045  039D                     	;# 
  3046  039E                     	;# 
  3047  039F                     	;# 
  3048  0415                     	;# 
  3049  0416                     	;# 
  3050  0417                     	;# 
  3051  041C                     	;# 
  3052  041D                     	;# 
  3053  041E                     	;# 
  3054  0FE4                     	;# 
  3055  0FE5                     	;# 
  3056  0FE6                     	;# 
  3057  0FE7                     	;# 
  3058  0FE8                     	;# 
  3059  0FE9                     	;# 
  3060  0FEA                     	;# 
  3061  0FEB                     	;# 
  3062  0FED                     	;# 
  3063  0FEE                     	;# 
  3064  0FEF                     	;# 
  3065  0000                     	;# 
  3066  0001                     	;# 
  3067  0002                     	;# 
  3068  0003                     	;# 
  3069  0004                     	;# 
  3070  0005                     	;# 
  3071  0006                     	;# 
  3072  0007                     	;# 
  3073  0008                     	;# 
  3074  0009                     	;# 
  3075  000A                     	;# 
  3076  000B                     	;# 
  3077  000C                     	;# 
  3078  000D                     	;# 
  3079  000E                     	;# 
  3080  0011                     	;# 
  3081  0012                     	;# 
  3082  0013                     	;# 
  3083  0014                     	;# 
  3084  0015                     	;# 
  3085  0016                     	;# 
  3086  0016                     	;# 
  3087  0017                     	;# 
  3088  0018                     	;# 
  3089  0019                     	;# 
  3090  001A                     	;# 
  3091  001B                     	;# 
  3092  001C                     	;# 
  3093  001E                     	;# 
  3094  001F                     	;# 
  3095  008C                     	;# 
  3096  008D                     	;# 
  3097  008E                     	;# 
  3098  0091                     	;# 
  3099  0092                     	;# 
  3100  0093                     	;# 
  3101  0094                     	;# 
  3102  0095                     	;# 
  3103  0096                     	;# 
  3104  0097                     	;# 
  3105  0098                     	;# 
  3106  0099                     	;# 
  3107  009A                     	;# 
  3108  009B                     	;# 
  3109  009B                     	;# 
  3110  009C                     	;# 
  3111  009D                     	;# 
  3112  009E                     	;# 
  3113  010C                     	;# 
  3114  010D                     	;# 
  3115  010E                     	;# 
  3116  0111                     	;# 
  3117  0112                     	;# 
  3118  0113                     	;# 
  3119  0114                     	;# 
  3120  0115                     	;# 
  3121  0116                     	;# 
  3122  0117                     	;# 
  3123  0118                     	;# 
  3124  0119                     	;# 
  3125  011A                     	;# 
  3126  011B                     	;# 
  3127  011D                     	;# 
  3128  011E                     	;# 
  3129  018C                     	;# 
  3130  018D                     	;# 
  3131  018E                     	;# 
  3132  0191                     	;# 
  3133  0191                     	;# 
  3134  0192                     	;# 
  3135  0193                     	;# 
  3136  0193                     	;# 
  3137  0193                     	;# 
  3138  0194                     	;# 
  3139  0195                     	;# 
  3140  0196                     	;# 
  3141  0199                     	;# 
  3142  019A                     	;# 
  3143  019B                     	;# 
  3144  019B                     	;# 
  3145  019C                     	;# 
  3146  019D                     	;# 
  3147  019E                     	;# 
  3148  019F                     	;# 
  3149  020C                     	;# 
  3150  020D                     	;# 
  3151  020E                     	;# 
  3152  0211                     	;# 
  3153  0211                     	;# 
  3154  0212                     	;# 
  3155  0212                     	;# 
  3156  0213                     	;# 
  3157  0213                     	;# 
  3158  0214                     	;# 
  3159  0214                     	;# 
  3160  0215                     	;# 
  3161  0215                     	;# 
  3162  0215                     	;# 
  3163  0216                     	;# 
  3164  0216                     	;# 
  3165  0217                     	;# 
  3166  0217                     	;# 
  3167  0219                     	;# 
  3168  021A                     	;# 
  3169  021B                     	;# 
  3170  021C                     	;# 
  3171  021D                     	;# 
  3172  021E                     	;# 
  3173  021F                     	;# 
  3174  0291                     	;# 
  3175  0291                     	;# 
  3176  0292                     	;# 
  3177  0293                     	;# 
  3178  0294                     	;# 
  3179  0295                     	;# 
  3180  0295                     	;# 
  3181  0296                     	;# 
  3182  0298                     	;# 
  3183  0298                     	;# 
  3184  0299                     	;# 
  3185  029A                     	;# 
  3186  029B                     	;# 
  3187  029C                     	;# 
  3188  029D                     	;# 
  3189  029E                     	;# 
  3190  0311                     	;# 
  3191  0311                     	;# 
  3192  0312                     	;# 
  3193  0313                     	;# 
  3194  0318                     	;# 
  3195  0318                     	;# 
  3196  0319                     	;# 
  3197  031A                     	;# 
  3198  038C                     	;# 
  3199  038D                     	;# 
  3200  038E                     	;# 
  3201  0391                     	;# 
  3202  0392                     	;# 
  3203  0393                     	;# 
  3204  0394                     	;# 
  3205  0395                     	;# 
  3206  0396                     	;# 
  3207  039A                     	;# 
  3208  039C                     	;# 
  3209  039D                     	;# 
  3210  039E                     	;# 
  3211  039F                     	;# 
  3212  0415                     	;# 
  3213  0416                     	;# 
  3214  0417                     	;# 
  3215  041C                     	;# 
  3216  041D                     	;# 
  3217  041E                     	;# 
  3218  0FE4                     	;# 
  3219  0FE5                     	;# 
  3220  0FE6                     	;# 
  3221  0FE7                     	;# 
  3222  0FE8                     	;# 
  3223  0FE9                     	;# 
  3224  0FEA                     	;# 
  3225  0FEB                     	;# 
  3226  0FED                     	;# 
  3227  0FEE                     	;# 
  3228  0FEF                     	;# 
  3229  0000                     	;# 
  3230  0001                     	;# 
  3231  0002                     	;# 
  3232  0003                     	;# 
  3233  0004                     	;# 
  3234  0005                     	;# 
  3235  0006                     	;# 
  3236  0007                     	;# 
  3237  0008                     	;# 
  3238  0009                     	;# 
  3239  000A                     	;# 
  3240  000B                     	;# 
  3241  000C                     	;# 
  3242  000D                     	;# 
  3243  000E                     	;# 
  3244  0011                     	;# 
  3245  0012                     	;# 
  3246  0013                     	;# 
  3247  0014                     	;# 
  3248  0015                     	;# 
  3249  0016                     	;# 
  3250  0016                     	;# 
  3251  0017                     	;# 
  3252  0018                     	;# 
  3253  0019                     	;# 
  3254  001A                     	;# 
  3255  001B                     	;# 
  3256  001C                     	;# 
  3257  001E                     	;# 
  3258  001F                     	;# 
  3259  008C                     	;# 
  3260  008D                     	;# 
  3261  008E                     	;# 
  3262  0091                     	;# 
  3263  0092                     	;# 
  3264  0093                     	;# 
  3265  0094                     	;# 
  3266  0095                     	;# 
  3267  0096                     	;# 
  3268  0097                     	;# 
  3269  0098                     	;# 
  3270  0099                     	;# 
  3271  009A                     	;# 
  3272  009B                     	;# 
  3273  009B                     	;# 
  3274  009C                     	;# 
  3275  009D                     	;# 
  3276  009E                     	;# 
  3277  010C                     	;# 
  3278  010D                     	;# 
  3279  010E                     	;# 
  3280  0111                     	;# 
  3281  0112                     	;# 
  3282  0113                     	;# 
  3283  0114                     	;# 
  3284  0115                     	;# 
  3285  0116                     	;# 
  3286  0117                     	;# 
  3287  0118                     	;# 
  3288  0119                     	;# 
  3289  011A                     	;# 
  3290  011B                     	;# 
  3291  011D                     	;# 
  3292  011E                     	;# 
  3293  018C                     	;# 
  3294  018D                     	;# 
  3295  018E                     	;# 
  3296  0191                     	;# 
  3297  0191                     	;# 
  3298  0192                     	;# 
  3299  0193                     	;# 
  3300  0193                     	;# 
  3301  0193                     	;# 
  3302  0194                     	;# 
  3303  0195                     	;# 
  3304  0196                     	;# 
  3305  0199                     	;# 
  3306  019A                     	;# 
  3307  019B                     	;# 
  3308  019B                     	;# 
  3309  019C                     	;# 
  3310  019D                     	;# 
  3311  019E                     	;# 
  3312  019F                     	;# 
  3313  020C                     	;# 
  3314  020D                     	;# 
  3315  020E                     	;# 
  3316  0211                     	;# 
  3317  0211                     	;# 
  3318  0212                     	;# 
  3319  0212                     	;# 
  3320  0213                     	;# 
  3321  0213                     	;# 
  3322  0214                     	;# 
  3323  0214                     	;# 
  3324  0215                     	;# 
  3325  0215                     	;# 
  3326  0215                     	;# 
  3327  0216                     	;# 
  3328  0216                     	;# 
  3329  0217                     	;# 
  3330  0217                     	;# 
  3331  0219                     	;# 
  3332  021A                     	;# 
  3333  021B                     	;# 
  3334  021C                     	;# 
  3335  021D                     	;# 
  3336  021E                     	;# 
  3337  021F                     	;# 
  3338  0291                     	;# 
  3339  0291                     	;# 
  3340  0292                     	;# 
  3341  0293                     	;# 
  3342  0294                     	;# 
  3343  0295                     	;# 
  3344  0295                     	;# 
  3345  0296                     	;# 
  3346  0298                     	;# 
  3347  0298                     	;# 
  3348  0299                     	;# 
  3349  029A                     	;# 
  3350  029B                     	;# 
  3351  029C                     	;# 
  3352  029D                     	;# 
  3353  029E                     	;# 
  3354  0311                     	;# 
  3355  0311                     	;# 
  3356  0312                     	;# 
  3357  0313                     	;# 
  3358  0318                     	;# 
  3359  0318                     	;# 
  3360  0319                     	;# 
  3361  031A                     	;# 
  3362  038C                     	;# 
  3363  038D                     	;# 
  3364  038E                     	;# 
  3365  0391                     	;# 
  3366  0392                     	;# 
  3367  0393                     	;# 
  3368  0394                     	;# 
  3369  0395                     	;# 
  3370  0396                     	;# 
  3371  039A                     	;# 
  3372  039C                     	;# 
  3373  039D                     	;# 
  3374  039E                     	;# 
  3375  039F                     	;# 
  3376  0415                     	;# 
  3377  0416                     	;# 
  3378  0417                     	;# 
  3379  041C                     	;# 
  3380  041D                     	;# 
  3381  041E                     	;# 
  3382  0FE4                     	;# 
  3383  0FE5                     	;# 
  3384  0FE6                     	;# 
  3385  0FE7                     	;# 
  3386  0FE8                     	;# 
  3387  0FE9                     	;# 
  3388  0FEA                     	;# 
  3389  0FEB                     	;# 
  3390  0FED                     	;# 
  3391  0FEE                     	;# 
  3392  0FEF                     	;# 
  3393  0000                     	;# 
  3394  0001                     	;# 
  3395  0002                     	;# 
  3396  0003                     	;# 
  3397  0004                     	;# 
  3398  0005                     	;# 
  3399  0006                     	;# 
  3400  0007                     	;# 
  3401  0008                     	;# 
  3402  0009                     	;# 
  3403  000A                     	;# 
  3404  000B                     	;# 
  3405  000C                     	;# 
  3406  000D                     	;# 
  3407  000E                     	;# 
  3408  0011                     	;# 
  3409  0012                     	;# 
  3410  0013                     	;# 
  3411  0014                     	;# 
  3412  0015                     	;# 
  3413  0016                     	;# 
  3414  0016                     	;# 
  3415  0017                     	;# 
  3416  0018                     	;# 
  3417  0019                     	;# 
  3418  001A                     	;# 
  3419  001B                     	;# 
  3420  001C                     	;# 
  3421  001E                     	;# 
  3422  001F                     	;# 
  3423  008C                     	;# 
  3424  008D                     	;# 
  3425  008E                     	;# 
  3426  0091                     	;# 
  3427  0092                     	;# 
  3428  0093                     	;# 
  3429  0094                     	;# 
  3430  0095                     	;# 
  3431  0096                     	;# 
  3432  0097                     	;# 
  3433  0098                     	;# 
  3434  0099                     	;# 
  3435  009A                     	;# 
  3436  009B                     	;# 
  3437  009B                     	;# 
  3438  009C                     	;# 
  3439  009D                     	;# 
  3440  009E                     	;# 
  3441  010C                     	;# 
  3442  010D                     	;# 
  3443  010E                     	;# 
  3444  0111                     	;# 
  3445  0112                     	;# 
  3446  0113                     	;# 
  3447  0114                     	;# 
  3448  0115                     	;# 
  3449  0116                     	;# 
  3450  0117                     	;# 
  3451  0118                     	;# 
  3452  0119                     	;# 
  3453  011A                     	;# 
  3454  011B                     	;# 
  3455  011D                     	;# 
  3456  011E                     	;# 
  3457  018C                     	;# 
  3458  018D                     	;# 
  3459  018E                     	;# 
  3460  0191                     	;# 
  3461  0191                     	;# 
  3462  0192                     	;# 
  3463  0193                     	;# 
  3464  0193                     	;# 
  3465  0193                     	;# 
  3466  0194                     	;# 
  3467  0195                     	;# 
  3468  0196                     	;# 
  3469  0199                     	;# 
  3470  019A                     	;# 
  3471  019B                     	;# 
  3472  019B                     	;# 
  3473  019C                     	;# 
  3474  019D                     	;# 
  3475  019E                     	;# 
  3476  019F                     	;# 
  3477  020C                     	;# 
  3478  020D                     	;# 
  3479  020E                     	;# 
  3480  0211                     	;# 
  3481  0211                     	;# 
  3482  0212                     	;# 
  3483  0212                     	;# 
  3484  0213                     	;# 
  3485  0213                     	;# 
  3486  0214                     	;# 
  3487  0214                     	;# 
  3488  0215                     	;# 
  3489  0215                     	;# 
  3490  0215                     	;# 
  3491  0216                     	;# 
  3492  0216                     	;# 
  3493  0217                     	;# 
  3494  0217                     	;# 
  3495  0219                     	;# 
  3496  021A                     	;# 
  3497  021B                     	;# 
  3498  021C                     	;# 
  3499  021D                     	;# 
  3500  021E                     	;# 
  3501  021F                     	;# 
  3502  0291                     	;# 
  3503  0291                     	;# 
  3504  0292                     	;# 
  3505  0293                     	;# 
  3506  0294                     	;# 
  3507  0295                     	;# 
  3508  0295                     	;# 
  3509  0296                     	;# 
  3510  0298                     	;# 
  3511  0298                     	;# 
  3512  0299                     	;# 
  3513  029A                     	;# 
  3514  029B                     	;# 
  3515  029C                     	;# 
  3516  029D                     	;# 
  3517  029E                     	;# 
  3518  0311                     	;# 
  3519  0311                     	;# 
  3520  0312                     	;# 
  3521  0313                     	;# 
  3522  0318                     	;# 
  3523  0318                     	;# 
  3524  0319                     	;# 
  3525  031A                     	;# 
  3526  038C                     	;# 
  3527  038D                     	;# 
  3528  038E                     	;# 
  3529  0391                     	;# 
  3530  0392                     	;# 
  3531  0393                     	;# 
  3532  0394                     	;# 
  3533  0395                     	;# 
  3534  0396                     	;# 
  3535  039A                     	;# 
  3536  039C                     	;# 
  3537  039D                     	;# 
  3538  039E                     	;# 
  3539  039F                     	;# 
  3540  0415                     	;# 
  3541  0416                     	;# 
  3542  0417                     	;# 
  3543  041C                     	;# 
  3544  041D                     	;# 
  3545  041E                     	;# 
  3546  0FE4                     	;# 
  3547  0FE5                     	;# 
  3548  0FE6                     	;# 
  3549  0FE7                     	;# 
  3550  0FE8                     	;# 
  3551  0FE9                     	;# 
  3552  0FEA                     	;# 
  3553  0FEB                     	;# 
  3554  0FED                     	;# 
  3555  0FEE                     	;# 
  3556  0FEF                     	;_I2cPacket
  3557                           
  3558                           	psect	idataCOMMON
  3559  07FF                     __pidataCOMMON:	
  3560                           
  3561                           ;initializer for _LedBehaviourSts
  3562  07FF  3401               	retlw	1
  3563                           
  3564                           	psect	idataBANK1
  3565  0003                     __pidataBANK1:	
  3566                           
  3567                           ;initializer for _MainSystemTimebaseFlag
  3568  0003  3401               	retlw	1
  3569                           
  3570                           	psect	idataBANK2
  3571  0987                     __pidataBANK2:	
  3572                           
  3573                           ;initializer for _TaskTable
  3574  0987  34CD               	retlw	low _I2c_DataReceiveSm
  3575  0988  3402               	retlw	high _I2c_DataReceiveSm
  3576  0989  3400               	retlw	0
  3577  098A  3400               	retlw	0
  3578  098B  3400               	retlw	0
  3579  098C  3401               	retlw	1
  3580  098D  3400               	retlw	0
  3581  098E  3400               	retlw	0
  3582  098F  345F               	retlw	low _I2cSlv_MainTask
  3583  0990  3417               	retlw	high _I2cSlv_MainTask
  3584  0991  3400               	retlw	0
  3585  0992  3400               	retlw	0
  3586  0993  3400               	retlw	0
  3587  0994  3401               	retlw	1
  3588  0995  3400               	retlw	0
  3589  0996  3400               	retlw	0
  3590  0997  348A               	retlw	low _Wdg_MainTask
  3591  0998  3417               	retlw	high _Wdg_MainTask
  3592  0999  3400               	retlw	0
  3593  099A  3400               	retlw	0
  3594  099B  3400               	retlw	0
  3595  099C  34E8               	retlw	232
  3596  099D  3403               	retlw	3
  3597  099E  3400               	retlw	0
  3598  099F  345B               	retlw	low _Led_MainTask
  3599  09A0  340A               	retlw	high _Led_MainTask
  3600  09A1  3400               	retlw	0
  3601  09A2  3400               	retlw	0
  3602  09A3  3400               	retlw	0
  3603  09A4  3464               	retlw	100
  3604  09A5  3400               	retlw	0
  3605  09A6  3400               	retlw	0
  3606  09A7  34A2               	retlw	low _App_MainTask
  3607  09A8  3400               	retlw	high _App_MainTask
  3608  09A9  3400               	retlw	0
  3609  09AA  3400               	retlw	0
  3610  09AB  3400               	retlw	0
  3611  09AC  34E8               	retlw	232
  3612  09AD  3403               	retlw	3
  3613  09AE  3400               	retlw	0
  3614                           
  3615                           	psect	stringtext
  3616  1000                     __pstringtext:	
  3617  1000                     _dpowers:	
  3618  1000  3401               	retlw	1
  3619  1001  3400               	retlw	0
  3620  1002  340A               	retlw	10
  3621  1003  3400               	retlw	0
  3622  1004  3464               	retlw	100
  3623  1005  3400               	retlw	0
  3624  1006  34E8               	retlw	232
  3625  1007  3403               	retlw	3
  3626  1008  3410               	retlw	16
  3627  1009  3427               	retlw	39
  3628  100A                     __end_of_dpowers:	
  3629  100A                     _TaskNumber:	
  3630  100A  3405               	retlw	5
  3631  100B  3400               	retlw	0
  3632  100C                     __end_of_TaskNumber:	
  3633  000B                     _INTCONbits	set	11
  3634  0011                     _PIR1bits	set	17
  3635  0013                     _PIR3bits	set	19
  3636  000C                     _PORTAbits	set	12
  3637  000E                     _PORTCbits	set	14
  3638  001B                     _PR2	set	27
  3639  001C                     _T2CONbits	set	28
  3640  009D                     _ADCON0bits	set	157
  3641  009E                     _ADCON1bits	set	158
  3642  009C                     _ADRESH	set	156
  3643  009B                     _ADRESL	set	155
  3644  0095                     _OPTION_REGbits	set	149
  3645  0099                     _OSCCONbits	set	153
  3646  009A                     _OSCSTATbits	set	154
  3647  0091                     _PIE1bits	set	145
  3648  0093                     _PIE3bits	set	147
  3649  008C                     _TRISAbits	set	140
  3650  008E                     _TRISCbits	set	142
  3651  0097                     _WDTCONbits	set	151
  3652  0117                     _FVRCONbits	set	279
  3653  010C                     _LATA	set	268
  3654  010D                     _LATB	set	269
  3655  010E                     _LATC	set	270
  3656  010E                     _LATCbits	set	270
  3657  018C                     _ANSELA	set	396
  3658  018C                     _ANSELAbits	set	396
  3659  018D                     _ANSELB	set	397
  3660  018D                     _ANSELBbits	set	397
  3661  018E                     _ANSELC	set	398
  3662  018E                     _ANSELCbits	set	398
  3663  0212                     _SSP1ADD	set	530
  3664  0211                     _SSP1BUF	set	529
  3665  0215                     _SSP1CON1	set	533
  3666  0215                     _SSP1CON1bits	set	533
  3667  0216                     _SSP1CON2	set	534
  3668  0217                     _SSP1CON3	set	535
  3669  0213                     _SSP1MSK	set	531
  3670  0214                     _SSP1STAT	set	532
  3671  020C                     _WPUA	set	524
  3672  020C                     _WPUAbits	set	524
  3673  020D                     _WPUB	set	525
  3674  020D                     _WPUBbits	set	525
  3675  020E                     _WPUC	set	526
  3676  020E                     _WPUCbits	set	526
  3677  0416                     _PR4	set	1046
  3678  041D                     _PR6	set	1053
  3679  0417                     _T4CONbits	set	1047
  3680  041E                     _T6CONbits	set	1054
  3681  100C                     STR_4:	
  3682  100C  3430               	retlw	48	;'0'
  3683  100D  3431               	retlw	49	;'1'
  3684  100E  342E               	retlw	46	;'.'
  3685  100F  3430               	retlw	48	;'0'
  3686  1010  3431               	retlw	49	;'1'
  3687  1011  342E               	retlw	46	;'.'
  3688  1012  3430               	retlw	48	;'0'
  3689  1013  3430               	retlw	48	;'0'
  3690  1014  3400               	retlw	0
  3691  1015                     STR_1:	
  3692  1015  3425               	retlw	37	;'%'
  3693  1016  3464               	retlw	100	;'d'
  3694  1017  342E               	retlw	46	;'.'
  3695  1018  3425               	retlw	37	;'%'
  3696  1019  3430               	retlw	48	;'0'
  3697  101A  3431               	retlw	49	;'1'
  3698  101B  3475               	retlw	117	;'u'
  3699  101C  3400               	retlw	0
  3700  101D                     STR_3:	
  3701  101D  3453               	retlw	83	;'S'
  3702  101E  3442               	retlw	66	;'B'
  3703  101F  3433               	retlw	51	;'3'
  3704  1020  3433               	retlw	51	;'3'
  3705  1021  3430               	retlw	48	;'0'
  3706  1022  3400               	retlw	0
  3707  1023                     STR_2:	
  3708  1023  3445               	retlw	69	;'E'
  3709  1024  3443               	retlw	67	;'C'
  3710  1025  3448               	retlw	72	;'H'
  3711  1026  344F               	retlw	79	;'O'
  3712  1027  3400               	retlw	0
  3713  1028                     STR_6:	
  3714  1028  342E               	retlw	46	;'.'
  3715  1029  3400               	retlw	0
  3716  1028                     
  3717                           ; #config settings
  3718  0000                     
  3719                           	psect	cinit
  3720  002D                     start_initialization:	
  3721  002D                     __initialization:		;BIGRAM
  3722                           
  3723                           ; Initialize objects allocated to COMMON
  3724  002D  3187  27FF  3180   	fcall	__pidataCOMMON	;fetch initializer
  3725  0030  00F9               	movwf	__pdataCOMMON& (0+127)
  3726                           
  3727                           ; Initialize objects allocated to BANK1
  3728  0031  0021               	movlb	1	; select bank1
  3729  0032  3180  2003  3180   	fcall	__pidataBANK1	;fetch initializer
  3730  0035  00EF               	movwf	__pdataBANK1& (0+127)
  3731                           
  3732                           ; Initialize objects allocated to BANK2
  3733  0036  3087               	movlw	low __pidataBANK2
  3734  0037  0084               	movwf	4
  3735  0038  3089               	movlw	(high __pidataBANK2)| (0+128)
  3736  0039  0085               	movwf	5
  3737  003A  3020               	movlw	low __pdataBANK2
  3738  003B  0086               	movwf	6
  3739  003C  3001               	movlw	high __pdataBANK2
  3740  003D  0087               	movwf	7
  3741  003E  3000               	movlw	0
  3742  003F  00FF               	movwf	btemp+1
  3743  0040  3028               	movlw	40
  3744  0041  3196  26BE  3180   	fcall	init_ram
  3745                           
  3746                           ; Clear objects allocated to BIGRAM
  3747  0044  309D               	movlw	low (0+9117)
  3748  0045  0084               	movwf	4
  3749  0046  3023               	movlw	high (0+9117)
  3750  0047  0085               	movwf	5
  3751  0048  3053               	movlw	83
  3752  0049  00FE               	movwf	btemp
  3753  004A  3000               	movlw	0
  3754  004B  00FF               	movwf	btemp+1
  3755  004C  3196  26B2  3180   	fcall	clear_ram0
  3756                           
  3757                           ; Clear objects allocated to COMMON
  3758  004F  01F6               	clrf	__pbssCOMMON& (0+127)
  3759  0050  01F7               	clrf	(__pbssCOMMON+1)& (0+127)
  3760  0051  01F8               	clrf	(__pbssCOMMON+2)& (0+127)
  3761                           
  3762                           ; Clear objects allocated to BANK0
  3763  0052  3064               	movlw	low __pbssBANK0
  3764  0053  0084               	movwf	4
  3765  0054  3000               	movlw	high __pbssBANK0
  3766  0055  0085               	movwf	5
  3767  0056  300A               	movlw	10
  3768  0057  00FE               	movwf	btemp
  3769  0058  3000               	movlw	0
  3770  0059  00FF               	movwf	btemp+1
  3771  005A  3196  26B2  3180   	fcall	clear_ram0
  3772                           
  3773                           ; Clear objects allocated to BANK1
  3774  005D  30A0               	movlw	low __pbssBANK1
  3775  005E  0084               	movwf	4
  3776  005F  3000               	movlw	high __pbssBANK1
  3777  0060  0085               	movwf	5
  3778  0061  304B               	movlw	75
  3779  0062  00FE               	movwf	btemp
  3780  0063  3000               	movlw	0
  3781  0064  00FF               	movwf	btemp+1
  3782  0065  3196  26B2  3180   	fcall	clear_ram0
  3783                           
  3784                           ; Clear objects allocated to BANK2
  3785  0068  3048               	movlw	low __pbssBANK2
  3786  0069  0084               	movwf	4
  3787  006A  3001               	movlw	high __pbssBANK2
  3788  006B  0085               	movwf	5
  3789  006C  3027               	movlw	39
  3790  006D  00FE               	movwf	btemp
  3791  006E  3000               	movlw	0
  3792  006F  00FF               	movwf	btemp+1
  3793  0070  3196  26B2  3180   	fcall	clear_ram0
  3794                           
  3795                           ; Clear objects allocated to BANK3
  3796  0073  30A0               	movlw	low __pbssBANK3
  3797  0074  0084               	movwf	4
  3798  0075  3001               	movlw	high __pbssBANK3
  3799  0076  0085               	movwf	5
  3800  0077  3050               	movlw	80
  3801  0078  00FE               	movwf	btemp
  3802  0079  3000               	movlw	0
  3803  007A  00FF               	movwf	btemp+1
  3804  007B  3196  26B2  3180   	fcall	clear_ram0
  3805                           
  3806                           ; Clear objects allocated to BANK4
  3807  007E  3020               	movlw	low __pbssBANK4
  3808  007F  0084               	movwf	4
  3809  0080  3002               	movlw	high __pbssBANK4
  3810  0081  0085               	movwf	5
  3811  0082  3050               	movlw	80
  3812  0083  00FE               	movwf	btemp
  3813  0084  3000               	movlw	0
  3814  0085  00FF               	movwf	btemp+1
  3815  0086  3196  26B2  3180   	fcall	clear_ram0
  3816                           
  3817                           ; Clear objects allocated to BANK5
  3818  0089  30A0               	movlw	low __pbssBANK5
  3819  008A  0084               	movwf	4
  3820  008B  3002               	movlw	high __pbssBANK5
  3821  008C  0085               	movwf	5
  3822  008D  3050               	movlw	80
  3823  008E  00FE               	movwf	btemp
  3824  008F  3000               	movlw	0
  3825  0090  00FF               	movwf	btemp+1
  3826  0091  3196  26B2  3180   	fcall	clear_ram0
  3827                           
  3828                           ; Clear objects allocated to BANK6
  3829  0094  3020               	movlw	low __pbssBANK6
  3830  0095  0084               	movwf	4
  3831  0096  3003               	movlw	high __pbssBANK6
  3832  0097  0085               	movwf	5
  3833  0098  3050               	movlw	80
  3834  0099  00FE               	movwf	btemp
  3835  009A  3000               	movlw	0
  3836  009B  00FF               	movwf	btemp+1
  3837  009C  3196  26B2         	fcall	clear_ram0
  3838  009E                     end_of_initialization:	
  3839                           ;End of C runtime variable initialization code
  3840                           
  3841  009E                     __end_of__initialization:	
  3842  009E  107E               	bcf	int$flags,0	;clear compiler interrupt flag (level 1)
  3843  009F  0020               	movlb	0
  3844  00A0  3196  2E4D         	ljmp	_main	;jump to C main() function
  3845                           
  3846                           	psect	bssCOMMON
  3847  0076                     __pbssCOMMON:	
  3848  0076                     _TemperatureInt:	
  3849  0076                     	ds	1
  3850  0077                     _I2cReplyPacketReady:	
  3851  0077                     	ds	2
  3852                           
  3853                           	psect	dataCOMMON
  3854  0079                     __pdataCOMMON:	
  3855  0079                     _LedBehaviourSts:	
  3856  0079                     	ds	1
  3857                           
  3858                           	psect	bssBANK0
  3859  0064                     __pbssBANK0:	
  3860  0064                     I2c_DataReceiveSm@I2cRxAddress:	
  3861  0064                     	ds	1
  3862  0065                     I2c_DataReceiveSm@I2cRxState:	
  3863  0065                     	ds	1
  3864  0066                     I2c_DataReceiveSm@OpType:	
  3865  0066                     	ds	1
  3866  0067                     I2c_DataReceiveSm@RxCounter:	
  3867  0067                     	ds	1
  3868  0068                     I2c_DataReceiveSm@TxCounter:	
  3869  0068                     	ds	1
  3870  0069                     _HumidityDec:	
  3871  0069                     	ds	1
  3872  006A                     _HumidityInt:	
  3873  006A                     	ds	1
  3874  006B                     _I2cSlaveAddress:	
  3875  006B                     	ds	1
  3876  006C                     _SystemState:	
  3877  006C                     	ds	1
  3878  006D                     _TemperatureDec:	
  3879  006D                     	ds	1
  3880                           
  3881                           	psect	bssBANK1
  3882  00A0                     __pbssBANK1:	
  3883  00A0                     _Sensor:	
  3884  00A0                     	ds	5
  3885  00A5                     _Humidity:	
  3886  00A5                     	ds	2
  3887  00A7                     _InterruptCounter:	
  3888  00A7                     	ds	2
  3889  00A9                     _Temperature:	
  3890  00A9                     	ds	2
  3891  00AB                     _Tmr2IsrCallback:	
  3892  00AB                     	ds	2
  3893  00AD                     _Tmr4IsrCallback:	
  3894  00AD                     	ds	2
  3895  00AF                     _Tmr6IsrCallback:	
  3896  00AF                     	ds	2
  3897  00B1                     AppSm@AppState:	
  3898  00B1                     	ds	1
  3899  00B2                     AppSm@WpuSetCounter:	
  3900  00B2                     	ds	1
  3901  00B3                     App_MainTask@Counter:	
  3902  00B3                     	ds	1
  3903  00B4                     I2cSlv_I2cDrvHandle@I2cReceiveMsgState:	
  3904  00B4                     	ds	1
  3905  00B5                     I2c_DataReceiveSm@AddressStored:	
  3906  00B5                     	ds	1
  3907  00B6                     I2c_DataReceiveSm@ErrorCounter:	
  3908  00B6                     	ds	1
  3909  00B7                     I2c_DataReceiveSm@I2cRxFlag:	
  3910  00B7                     	ds	1
  3911  00B8                     _ChecksumSts:	
  3912  00B8                     	ds	1
  3913  00B9                     _RepBufferLen:	
  3914  00B9                     	ds	1
  3915  00BA                     _TempSign:	
  3916  00BA                     	ds	1
  3917  00BB                     _I2cConfig:	
  3918  00BB                     	ds	11
  3919  00C6                     _Led1Pulse:	
  3920  00C6                     	ds	6
  3921  00CC                     _HumidityStr:	
  3922  00CC                     	ds	5
  3923  00D1                     _TemperatureStr:	
  3924  00D1                     	ds	5
  3925  00D6                     _HumidityDecStr:	
  3926  00D6                     	ds	3
  3927  00D9                     _HumidityIntStr:	
  3928  00D9                     	ds	3
  3929  00DC                     _TemperatureDecStr:	
  3930  00DC                     	ds	3
  3931  00DF                     _TemperatureIntStr:	
  3932  00DF                     	ds	3
  3933  00E2                     _I2cNewPacketNotification:	
  3934  00E2                     	ds	2
  3935  00E4                     _I2cNewTxNotification:	
  3936  00E4                     	ds	2
  3937  00E6                     _I2cSetAddress:	
  3938  00E6                     	ds	2
  3939  00E8                     _I2cWriteRequest:	
  3940  00E8                     	ds	2
  3941  00EA                     _Led1Sts:	
  3942  00EA                     	ds	1
  3943                           
  3944                           	psect	dataBANK1
  3945  00EF                     __pdataBANK1:	
  3946  00EF                     _MainSystemTimebaseFlag:	
  3947  00EF                     	ds	1
  3948                           
  3949                           	psect	bssBANK2
  3950  0148                     __pbssBANK2:	
  3951  0148                     App_MainTask@F4095:	
  3952  0148                     	ds	18
  3953  015A                     App_MainTask@F4109:	
  3954  015A                     	ds	12
  3955  0166                     _Led1Blink:	
  3956  0166                     	ds	9
  3957                           
  3958                           	psect	dataBANK2
  3959  0120                     __pdataBANK2:	
  3960  0120                     _TaskTable:	
  3961  0120                     	ds	40
  3962                           
  3963                           	psect	bssBANK3
  3964  01A0                     __pbssBANK3:	
  3965  01A0                     _RepBuffer:	
  3966  01A0                     	ds	80
  3967                           
  3968                           	psect	bssBANK4
  3969  0220                     __pbssBANK4:	
  3970  0220                     _CmdBuffer:	
  3971  0220                     	ds	80
  3972                           
  3973                           	psect	bssBANK5
  3974  02A0                     __pbssBANK5:	
  3975  02A0                     _I2cTxBuffer:	
  3976  02A0                     	ds	80
  3977                           
  3978                           	psect	bssBANK6
  3979  0320                     __pbssBANK6:	
  3980  0320                     _I2cRxBuffer:	
  3981  0320                     	ds	80
  3982                           
  3983                           	psect	inittext
  3984  16BE                     init_ram:	
  3985  16BE  00FE               	movwf	126
  3986  16BF                     initloop:	
  3987  16BF  0012               	moviw fsr0++
  3988  16C0  001E               	movwi fsr1++
  3989  16C1  3001               	movlw	1
  3990  16C2  02FE               	subwf	126,f
  3991  16C3  3000               	movlw	0
  3992  16C4  3BFF               	subwfb	127,f
  3993  16C5  087F               	movf	127,w
  3994  16C6  047E               	iorwf	126,w
  3995  16C7  1903               	btfsc	3,2
  3996  16C8  3400               	retlw	0
  3997  16C9  2EBF               	goto	initloop
  3998                           
  3999                           	psect	clrtext
  4000  16B2                     clear_ram0:	
  4001                           ;	Called with FSR0 containing the base address, and
  4002                           ;	btemp/btemp+1 has the size to clear
  4003                           
  4004  16B2  0064               	clrwdt	;clear the watchdog before getting into this loop
  4005  16B3                     clrloop0:	
  4006  16B3  0180               	clrf	0	;clear RAM location pointed to by FSR
  4007  16B4  3101               	addfsr 0,1
  4008  16B5  3001               	movlw	1
  4009  16B6  02FE               	subwf	126,f
  4010  16B7  3000               	movlw	0
  4011  16B8  3BFF               	subwfb	127,f
  4012  16B9  087F               	movf	127,w
  4013  16BA  047E               	iorwf	126,w
  4014  16BB  1903               	btfsc	3,2
  4015  16BC  3400               	retlw	0	;all done for this memory range, return
  4016  16BD  2EB3               	goto	clrloop0	;have we reached the end yet?
  4017                           
  4018                           	psect	cstackBANK7
  4019  03A0                     __pcstackBANK7:	
  4020  03A0                     ??_ScheduleTasks:	
  4021                           
  4022                           ; 1 bytes @ 0x0
  4023  03A0                     	ds	6
  4024                           
  4025                           	psect	cstackBANK1
  4026  00EB                     __pcstackBANK1:	
  4027  00EB                     ??_InitializeTasks:	
  4028                           
  4029                           ; 1 bytes @ 0x0
  4030  00EB                     	ds	4
  4031                           
  4032                           	psect	cstackCOMMON
  4033  0070                     __pcstackCOMMON:	
  4034  0070                     ?_SystemInit:	
  4035  0070                     ?_MainScheduler:	
  4036                           ; 1 bytes @ 0x0
  4037                           
  4038  0070                     ?_ReceiveEvt:	
  4039                           ; 1 bytes @ 0x0
  4040                           
  4041  0070                     ?_GenerateEvt:	
  4042                           ; 1 bytes @ 0x0
  4043                           
  4044  0070                     ?_InitializeTasks:	
  4045                           ; 1 bytes @ 0x0
  4046                           
  4047  0070                     ?_ScheduleTasks:	
  4048                           ; 1 bytes @ 0x0
  4049                           
  4050  0070                     ?_I2cSlv_I2cDrvHandle:	
  4051                           ; 1 bytes @ 0x0
  4052                           
  4053  0070                     ?_SetLedBehavSts:	
  4054                           ; 1 bytes @ 0x0
  4055                           
  4056  0070                     ?_Adc_ConfigAnCh:	
  4057                           ; 1 bytes @ 0x0
  4058                           
  4059  0070                     ?_Adc_InitAdcModule:	
  4060                           ; 1 bytes @ 0x0
  4061                           
  4062  0070                     ?_Adc_SelectChannel:	
  4063                           ; 1 bytes @ 0x0
  4064                           
  4065  0070                     ?_Adc_StartConversion:	
  4066                           ; 1 bytes @ 0x0
  4067                           
  4068  0070                     ?_Adc_GetConvSts:	
  4069                           ; 1 bytes @ 0x0
  4070                           
  4071  0070                     ?_CheckAckStatus:	
  4072                           ; 1 bytes @ 0x0
  4073                           
  4074  0070                     ?_CheckByteStatus:	
  4075                           ; 1 bytes @ 0x0
  4076                           
  4077  0070                     ?_CheckStopBitStatus:	
  4078                           ; 1 bytes @ 0x0
  4079                           
  4080  0070                     ?_ClearRxBuffer:	
  4081                           ; 1 bytes @ 0x0
  4082                           
  4083  0070                     ?_ClearTxBuffer:	
  4084                           ; 1 bytes @ 0x0
  4085                           
  4086  0070                     ?_I2c_InitI2cModule:	
  4087                           ; 1 bytes @ 0x0
  4088                           
  4089  0070                     ?_I2c_SetI2cAddress:	
  4090                           ; 1 bytes @ 0x0
  4091                           
  4092  0070                     ?_I2c_SetI2cAddressMask:	
  4093                           ; 1 bytes @ 0x0
  4094                           
  4095  0070                     ?_LedBlinkStateMachine:	
  4096                           ; 1 bytes @ 0x0
  4097                           
  4098  0070                     ?_Mcu_EnableInterrupts:	
  4099                           ; 1 bytes @ 0x0
  4100                           
  4101  0070                     ?_Mcu_EnableSchedulerInt:	
  4102                           ; 1 bytes @ 0x0
  4103                           
  4104  0070                     ?_Mcu_DisableSchedulerInt:	
  4105                           ; 1 bytes @ 0x0
  4106                           
  4107  0070                     ?_Mcu_StartSystemPll:	
  4108                           ; 1 bytes @ 0x0
  4109                           
  4110  0070                     ?_Mcu_SetPullUpsSts:	
  4111                           ; 1 bytes @ 0x0
  4112                           
  4113  0070                     ?_Mcu_ConfigPullUps:	
  4114                           ; 1 bytes @ 0x0
  4115                           
  4116  0070                     ?_Mcu_SetWdgPeriod:	
  4117                           ; 1 bytes @ 0x0
  4118                           
  4119  0070                     ?_Mcu_SetWdgSts:	
  4120                           ; 1 bytes @ 0x0
  4121                           
  4122  0070                     ?_Mcu_ClearWdg:	
  4123                           ; 1 bytes @ 0x0
  4124                           
  4125  0070                     ?_Mcu_SetDieTempSts:	
  4126                           ; 1 bytes @ 0x0
  4127                           
  4128  0070                     ?_Mcu_SetDieTempMode:	
  4129                           ; 1 bytes @ 0x0
  4130                           
  4131  0070                     ?_Tmr_StartTmr:	
  4132                           ; 1 bytes @ 0x0
  4133                           
  4134  0070                     ?_Dht_RequestData:	
  4135                           ; 1 bytes @ 0x0
  4136                           
  4137  0070                     ?_Dht_ReadByte:	
  4138                           ; 1 bytes @ 0x0
  4139                           
  4140  0070                     ?_Dht_ReadData:	
  4141                           ; 1 bytes @ 0x0
  4142                           
  4143  0070                     ?_Dht_GetSensorData:	
  4144                           ; 1 bytes @ 0x0
  4145                           
  4146  0070                     ?_MainInterrupt:	
  4147                           ; 1 bytes @ 0x0
  4148                           
  4149  0070                     ?_I2c_SetConfig:	
  4150                           ; 1 bytes @ 0x0
  4151                           
  4152  0070                     ?_ControlLedDirect:	
  4153                           ; 1 bytes @ 0x0
  4154                           
  4155  0070                     ?_BoardReset:	
  4156                           ; 1 bytes @ 0x0
  4157                           
  4158  0070                     ?_LowPowerMode:	
  4159                           ; 1 bytes @ 0x0
  4160                           
  4161  0070                     ?_StdS_ManageStdServices:	
  4162                           ; 1 bytes @ 0x0
  4163                           
  4164  0070                     ?_StdS_SetI2cAddress:	
  4165                           ; 1 bytes @ 0x0
  4166                           
  4167  0070                     ?_ManageProtocol:	
  4168                           ; 1 bytes @ 0x0
  4169                           
  4170  0070                     ?_AppSm:	
  4171                           ; 1 bytes @ 0x0
  4172                           
  4173  0070                     ?_InitSchTimer:	
  4174                           ; 1 bytes @ 0x0
  4175                           
  4176  0070                     ?i1_GenerateEvt:	
  4177                           ; 1 bytes @ 0x0
  4178                           
  4179  0070                     ??i1_GenerateEvt:	
  4180                           ; 1 bytes @ 0x0
  4181                           
  4182  0070                     ?_Mcu_Reset:	
  4183                           ; 1 bytes @ 0x0
  4184                           
  4185  0070                     ?_main:	
  4186                           ; 2 bytes @ 0x0
  4187                           
  4188                           
  4189                           ; 2 bytes @ 0x0
  4190  0070                     	ds	1
  4191  0071                     i1GenerateEvt@Event:	
  4192                           
  4193                           ; 1 bytes @ 0x1
  4194  0071                     	ds	1
  4195  0072                     i1GenerateEvt@EventStatus:	
  4196                           
  4197                           ; 1 bytes @ 0x2
  4198  0072                     	ds	1
  4199  0073                     ??_MainInterrupt:	
  4200                           
  4201                           ; 1 bytes @ 0x3
  4202  0073                     	ds	1
  4203  0074                     ??_ReceiveEvt:	
  4204  0074                     ??_Mcu_Reset:	
  4205                           ; 1 bytes @ 0x4
  4206                           
  4207  0074                     ??_GenerateEvt:	
  4208                           ; 1 bytes @ 0x4
  4209                           
  4210  0074                     ?_Led_SetLedStatus:	
  4211                           ; 1 bytes @ 0x4
  4212                           
  4213  0074                     ?_strcpy:	
  4214                           ; 1 bytes @ 0x4
  4215                           
  4216  0074                     ?_strcat:	
  4217                           ; 1 bytes @ 0x4
  4218                           
  4219  0074                     ??_Adc_ConfigAnCh:	
  4220                           ; 1 bytes @ 0x4
  4221                           
  4222  0074                     ??_Adc_InitAdcModule:	
  4223                           ; 1 bytes @ 0x4
  4224                           
  4225  0074                     ??_Adc_SelectChannel:	
  4226                           ; 1 bytes @ 0x4
  4227                           
  4228  0074                     ??_Adc_StartConversion:	
  4229                           ; 1 bytes @ 0x4
  4230                           
  4231  0074                     ??_Adc_GetConvSts:	
  4232                           ; 1 bytes @ 0x4
  4233                           
  4234  0074                     ??_CheckAckStatus:	
  4235                           ; 1 bytes @ 0x4
  4236                           
  4237  0074                     ??_CheckByteStatus:	
  4238                           ; 1 bytes @ 0x4
  4239                           
  4240  0074                     ??_CheckStopBitStatus:	
  4241                           ; 1 bytes @ 0x4
  4242                           
  4243  0074                     ??_ClearRxBuffer:	
  4244                           ; 1 bytes @ 0x4
  4245                           
  4246  0074                     ??_ClearTxBuffer:	
  4247                           ; 1 bytes @ 0x4
  4248                           
  4249  0074                     ??_I2c_SetI2cAddress:	
  4250                           ; 1 bytes @ 0x4
  4251                           
  4252  0074                     ??_I2c_SetI2cAddressMask:	
  4253                           ; 1 bytes @ 0x4
  4254                           
  4255  0074                     ?_I2c_UpdateTxBuffer:	
  4256                           ; 1 bytes @ 0x4
  4257                           
  4258  0074                     ??_Mcu_EnableInterrupts:	
  4259                           ; 1 bytes @ 0x4
  4260                           
  4261  0074                     ??_Mcu_EnableSchedulerInt:	
  4262                           ; 1 bytes @ 0x4
  4263                           
  4264  0074                     ??_Mcu_DisableSchedulerInt:	
  4265                           ; 1 bytes @ 0x4
  4266                           
  4267  0074                     ??_Mcu_StartSystemPll:	
  4268                           ; 1 bytes @ 0x4
  4269                           
  4270  0074                     ??_Mcu_SetPullUpsSts:	
  4271                           ; 1 bytes @ 0x4
  4272                           
  4273  0074                     ??_Mcu_ConfigPullUps:	
  4274                           ; 1 bytes @ 0x4
  4275                           
  4276  0074                     ??_Mcu_SetWdgPeriod:	
  4277                           ; 1 bytes @ 0x4
  4278                           
  4279  0074                     ??_Mcu_SetWdgSts:	
  4280                           ; 1 bytes @ 0x4
  4281                           
  4282  0074                     ??_Mcu_ClearWdg:	
  4283                           ; 1 bytes @ 0x4
  4284                           
  4285  0074                     ??_Mcu_SetDieTempSts:	
  4286                           ; 1 bytes @ 0x4
  4287                           
  4288  0074                     ??_Mcu_SetDieTempMode:	
  4289                           ; 1 bytes @ 0x4
  4290                           
  4291  0074                     ?_TmrBInit:	
  4292                           ; 1 bytes @ 0x4
  4293                           
  4294  0074                     ?_Tmr_TmrBIrqSet:	
  4295                           ; 1 bytes @ 0x4
  4296                           
  4297  0074                     ??_Tmr_StartTmr:	
  4298                           ; 1 bytes @ 0x4
  4299                           
  4300  0074                     ??_Dht_RequestData:	
  4301                           ; 1 bytes @ 0x4
  4302                           
  4303  0074                     ??_Dht_ReadByte:	
  4304                           ; 1 bytes @ 0x4
  4305                           
  4306  0074                     ??_Dht_CalculateChecksum:	
  4307                           ; 1 bytes @ 0x4
  4308                           
  4309  0074                     ??_I2c_SetConfig:	
  4310                           ; 1 bytes @ 0x4
  4311                           
  4312  0074                     ??_Led_SetLedBlinkTime:	
  4313                           ; 1 bytes @ 0x4
  4314                           
  4315  0074                     ?_Led_SetLedPulseTime:	
  4316                           ; 1 bytes @ 0x4
  4317                           
  4318  0074                     ??_SetBuffer:	
  4319                           ; 1 bytes @ 0x4
  4320                           
  4321  0074                     ??_BoardReset:	
  4322                           ; 1 bytes @ 0x4
  4323                           
  4324  0074                     ??_StdS_SetI2cAddress:	
  4325                           ; 1 bytes @ 0x4
  4326                           
  4327  0074                     ??___wmul:	
  4328                           ; 1 bytes @ 0x4
  4329                           
  4330  0074                     ??___awdiv:	
  4331                           ; 1 bytes @ 0x4
  4332                           
  4333  0074                     ??___awmod:	
  4334                           ; 1 bytes @ 0x4
  4335                           
  4336  0074                     ??___lldiv:	
  4337                           ; 1 bytes @ 0x4
  4338                           
  4339  0074                     ??___lwdiv:	
  4340                           ; 1 bytes @ 0x4
  4341                           
  4342  0074                     ??___lwmod:	
  4343                           ; 1 bytes @ 0x4
  4344                           
  4345  0074                     ?_Adc_GetConvResult:	
  4346                           ; 1 bytes @ 0x4
  4347                           
  4348  0074                     Adc_ConfigAnCh@AnChSel:	
  4349                           ; 2 bytes @ 0x4
  4350                           
  4351  0074                     Adc_InitAdcModule@AdcConfig:	
  4352                           ; 1 bytes @ 0x4
  4353                           
  4354  0074                     I2c_SetI2cAddress@SlaveAddress:	
  4355                           ; 1 bytes @ 0x4
  4356                           
  4357  0074                     I2c_SetI2cAddressMask@SlaveAddressMask:	
  4358                           ; 1 bytes @ 0x4
  4359                           
  4360  0074                     I2c_UpdateTxBuffer@Length:	
  4361                           ; 1 bytes @ 0x4
  4362                           
  4363  0074                     Mcu_SetPullUpsSts@PuSts:	
  4364                           ; 1 bytes @ 0x4
  4365                           
  4366  0074                     Mcu_ConfigPullUps@WpuCh:	
  4367                           ; 1 bytes @ 0x4
  4368                           
  4369  0074                     Mcu_SetWdgSts@WdgSts:	
  4370                           ; 1 bytes @ 0x4
  4371                           
  4372  0074                     Mcu_SetDieTempSts@DieTempSts:	
  4373                           ; 1 bytes @ 0x4
  4374                           
  4375  0074                     Mcu_SetDieTempMode@DieTempMode:	
  4376                           ; 1 bytes @ 0x4
  4377                           
  4378  0074                     TmrBInit@Prescaler:	
  4379                           ; 1 bytes @ 0x4
  4380                           
  4381  0074                     Tmr_TmrBIrqSet@TmrIrqSts:	
  4382                           ; 1 bytes @ 0x4
  4383                           
  4384  0074                     Tmr_StartTmr@TmrNumb:	
  4385                           ; 1 bytes @ 0x4
  4386                           
  4387  0074                     ReceiveEvt@EventStatus:	
  4388                           ; 1 bytes @ 0x4
  4389                           
  4390  0074                     Led_SetLedStatus@LedSts:	
  4391                           ; 1 bytes @ 0x4
  4392                           
  4393  0074                     Led_SetLedBlinkTime@Led:	
  4394                           ; 1 bytes @ 0x4
  4395                           
  4396  0074                     StringCopy@Index:	
  4397                           ; 1 bytes @ 0x4
  4398                           
  4399  0074                     strcpy@from:	
  4400                           ; 1 bytes @ 0x4
  4401                           
  4402  0074                     Led_SetLedPulseTime@PulseTimeMs:	
  4403                           ; 1 bytes @ 0x4
  4404                           
  4405  0074                     ___wmul@product:	
  4406                           ; 2 bytes @ 0x4
  4407                           
  4408  0074                     strcat@from:	
  4409                           ; 2 bytes @ 0x4
  4410                           
  4411                           
  4412                           ; 2 bytes @ 0x4
  4413  0074                     	ds	1
  4414  0075                     ??_Led_SetLedStatus:	
  4415  0075                     ??_strcpy:	
  4416                           ; 1 bytes @ 0x5
  4417                           
  4418  0075                     ??_Tmr_TmrBIrqSet:	
  4419                           ; 1 bytes @ 0x5
  4420                           
  4421  0075                     ??_LowPowerMode:	
  4422                           ; 1 bytes @ 0x5
  4423                           
  4424  0075                     Adc_SelectChannel@SelCh:	
  4425                           ; 1 bytes @ 0x5
  4426                           
  4427  0075                     ClearRxBuffer@Index:	
  4428                           ; 1 bytes @ 0x5
  4429                           
  4430  0075                     ClearTxBuffer@Index:	
  4431                           ; 1 bytes @ 0x5
  4432                           
  4433  0075                     LedBlinkStateMachine@LedBlink:	
  4434                           ; 1 bytes @ 0x5
  4435                           
  4436  0075                     Mcu_SetWdgPeriod@WdgPeriod:	
  4437                           ; 1 bytes @ 0x5
  4438                           
  4439  0075                     TmrBInit@Postscaler:	
  4440                           ; 1 bytes @ 0x5
  4441                           
  4442  0075                     Tmr_TmrBIrqSet@TmrNumb:	
  4443                           ; 1 bytes @ 0x5
  4444                           
  4445  0075                     ReceiveEvt@Event:	
  4446                           ; 1 bytes @ 0x5
  4447                           
  4448  0075                     ___lwmod@counter:	
  4449                           ; 1 bytes @ 0x5
  4450                           
  4451                           
  4452                           ; 1 bytes @ 0x5
  4453  0075                     	ds	1
  4454  0076                     ??_SystemInit:	
  4455  0076                     ??_MainScheduler:	
  4456                           ; 1 bytes @ 0x6
  4457                           
  4458  0076                     ??_I2cSlv_MainTask:	
  4459                           ; 1 bytes @ 0x6
  4460                           
  4461  0076                     ??_Wdg_MainTask:	
  4462                           ; 1 bytes @ 0x6
  4463                           
  4464  0076                     ??_main:	
  4465                           ; 1 bytes @ 0x6
  4466                           
  4467  0076                     ??_Dht_GetSensorData:	
  4468                           ; 1 bytes @ 0x6
  4469                           
  4470  0076                     ??_Led_SetLedPulseTime:	
  4471                           ; 1 bytes @ 0x6
  4472                           
  4473  0076                     ??_ControlLedDirect:	
  4474                           ; 1 bytes @ 0x6
  4475                           
  4476  0076                     ??_GetDieTemperature:	
  4477                           ; 1 bytes @ 0x6
  4478                           
  4479  0076                     ??___lmul:	
  4480                           ; 1 bytes @ 0x6
  4481                           
  4482                           
  4483                           	psect	cstackBANK0
  4484  0020                     __pcstackBANK0:	
  4485                           ; 1 bytes @ 0x6
  4486                           
  4487  0020                     ??_strcat:	
  4488  0020                     ??_Adc_GetConvResult:	
  4489                           ; 1 bytes @ 0x0
  4490                           
  4491  0020                     ??_I2c_InitI2cModule:	
  4492                           ; 1 bytes @ 0x0
  4493                           
  4494  0020                     ??_I2c_UpdateTxBuffer:	
  4495                           ; 1 bytes @ 0x0
  4496                           
  4497  0020                     ??_TmrBInit:	
  4498                           ; 1 bytes @ 0x0
  4499                           
  4500  0020                     ?_Dht_CalculateChecksum:	
  4501                           ; 1 bytes @ 0x0
  4502                           
  4503  0020                     ?_Led_SetLedBlinkTime:	
  4504                           ; 1 bytes @ 0x0
  4505                           
  4506  0020                     ?_StringCopy:	
  4507                           ; 1 bytes @ 0x0
  4508                           
  4509  0020                     ?_SetBuffer:	
  4510                           ; 1 bytes @ 0x0
  4511                           
  4512  0020                     ?___wmul:	
  4513                           ; 1 bytes @ 0x0
  4514                           
  4515  0020                     ?___awdiv:	
  4516                           ; 2 bytes @ 0x0
  4517                           
  4518  0020                     ?___awmod:	
  4519                           ; 2 bytes @ 0x0
  4520                           
  4521  0020                     ?___lwdiv:	
  4522                           ; 2 bytes @ 0x0
  4523                           
  4524  0020                     ?___lwmod:	
  4525                           ; 2 bytes @ 0x0
  4526                           
  4527  0020                     ?___lldiv:	
  4528                           ; 2 bytes @ 0x0
  4529                           
  4530  0020                     Dht_ReadByte@Data:	
  4531                           ; 4 bytes @ 0x0
  4532                           
  4533  0020                     GenerateEvt@EventStatus:	
  4534                           ; 1 bytes @ 0x0
  4535                           
  4536  0020                     Led_SetLedStatus@Led:	
  4537                           ; 1 bytes @ 0x0
  4538                           
  4539  0020                     Led_SetLedPulseTime@Led:	
  4540                           ; 1 bytes @ 0x0
  4541                           
  4542  0020                     SetBuffer@Value:	
  4543                           ; 1 bytes @ 0x0
  4544                           
  4545  0020                     strcpy@cp:	
  4546                           ; 1 bytes @ 0x0
  4547                           
  4548  0020                     Led_SetLedBlinkTime@OnTimeMs:	
  4549                           ; 1 bytes @ 0x0
  4550                           
  4551  0020                     StringCopy@SourceStr:	
  4552                           ; 2 bytes @ 0x0
  4553                           
  4554  0020                     ___wmul@multiplier:	
  4555                           ; 2 bytes @ 0x0
  4556                           
  4557  0020                     ___awdiv@divisor:	
  4558                           ; 2 bytes @ 0x0
  4559                           
  4560  0020                     ___awmod@divisor:	
  4561                           ; 2 bytes @ 0x0
  4562                           
  4563  0020                     ___lwdiv@divisor:	
  4564                           ; 2 bytes @ 0x0
  4565                           
  4566  0020                     ___lwmod@divisor:	
  4567                           ; 2 bytes @ 0x0
  4568                           
  4569  0020                     ___lldiv@divisor:	
  4570                           ; 2 bytes @ 0x0
  4571                           
  4572  0020                     Dht_CalculateChecksum@Sens:	
  4573                           ; 4 bytes @ 0x0
  4574                           
  4575                           
  4576                           ; 5 bytes @ 0x0
  4577  0020                     	ds	1
  4578  0021                     TmrBInit@TmrNumb:	
  4579  0021                     GenerateEvt@Event:	
  4580                           ; 1 bytes @ 0x1
  4581                           
  4582  0021                     strcat@to:	
  4583                           ; 1 bytes @ 0x1
  4584                           
  4585  0021                     strcpy@to:	
  4586                           ; 1 bytes @ 0x1
  4587                           
  4588  0021                     Adc_GetConvResult@AdcResult:	
  4589                           ; 1 bytes @ 0x1
  4590                           
  4591  0021                     Dht_ReadByte@Counter:	
  4592                           ; 2 bytes @ 0x1
  4593                           
  4594  0021                     SetBuffer@Len:	
  4595                           ; 2 bytes @ 0x1
  4596                           
  4597                           
  4598                           ; 2 bytes @ 0x1
  4599  0021                     	ds	1
  4600  0022                     I2c_InitI2cModule@I2cConfig:	
  4601  0022                     I2c_UpdateTxBuffer@DataBuffer:	
  4602                           ; 1 bytes @ 0x2
  4603                           
  4604  0022                     StringCopy@DestStr:	
  4605                           ; 1 bytes @ 0x2
  4606                           
  4607  0022                     strcat@cp:	
  4608                           ; 1 bytes @ 0x2
  4609                           
  4610  0022                     Led_SetLedBlinkTime@OffTimeMs:	
  4611                           ; 1 bytes @ 0x2
  4612                           
  4613  0022                     ___wmul@multiplicand:	
  4614                           ; 2 bytes @ 0x2
  4615                           
  4616  0022                     ___awdiv@dividend:	
  4617                           ; 2 bytes @ 0x2
  4618                           
  4619  0022                     ___awmod@dividend:	
  4620                           ; 2 bytes @ 0x2
  4621                           
  4622  0022                     ___lwdiv@dividend:	
  4623                           ; 2 bytes @ 0x2
  4624                           
  4625  0022                     ___lwmod@dividend:	
  4626                           ; 2 bytes @ 0x2
  4627                           
  4628                           
  4629                           ; 2 bytes @ 0x2
  4630  0022                     	ds	1
  4631  0023                     ?_GetDieTemperature:	
  4632  0023                     I2c_UpdateTxBuffer@Index:	
  4633                           ; 2 bytes @ 0x3
  4634                           
  4635  0023                     Dht_ReadByte@Index:	
  4636                           ; 1 bytes @ 0x3
  4637                           
  4638  0023                     StringCopy@Len:	
  4639                           ; 1 bytes @ 0x3
  4640                           
  4641  0023                     SetBuffer@Buffer:	
  4642                           ; 1 bytes @ 0x3
  4643                           
  4644                           
  4645                           ; 1 bytes @ 0x3
  4646  0023                     	ds	1
  4647  0024                     ??_I2cSlv_I2cDrvHandle:	
  4648  0024                     ??_SetLedBehavSts:	
  4649                           ; 1 bytes @ 0x4
  4650                           
  4651  0024                     ??_Dht_ReadData:	
  4652                           ; 1 bytes @ 0x4
  4653                           
  4654  0024                     ??_StringCopy:	
  4655                           ; 1 bytes @ 0x4
  4656                           
  4657  0024                     ?___lmul:	
  4658                           ; 1 bytes @ 0x4
  4659                           
  4660  0024                     SetBuffer@Index:	
  4661                           ; 4 bytes @ 0x4
  4662                           
  4663  0024                     ___awdiv@counter:	
  4664                           ; 1 bytes @ 0x4
  4665                           
  4666  0024                     ___awmod@counter:	
  4667                           ; 1 bytes @ 0x4
  4668                           
  4669  0024                     ___lwdiv@counter:	
  4670                           ; 1 bytes @ 0x4
  4671                           
  4672  0024                     ___lmul@multiplier:	
  4673                           ; 1 bytes @ 0x4
  4674                           
  4675  0024                     ___lldiv@dividend:	
  4676                           ; 4 bytes @ 0x4
  4677                           
  4678                           
  4679                           ; 4 bytes @ 0x4
  4680  0024                     	ds	1
  4681  0025                     Dht_ReadData@Index:	
  4682  0025                     Dht_CalculateChecksum@Checksum:	
  4683                           ; 1 bytes @ 0x5
  4684                           
  4685  0025                     SetLedBehavSts@LedBehav:	
  4686                           ; 1 bytes @ 0x5
  4687                           
  4688  0025                     ___awdiv@sign:	
  4689                           ; 1 bytes @ 0x5
  4690                           
  4691  0025                     ___awmod@sign:	
  4692                           ; 1 bytes @ 0x5
  4693                           
  4694  0025                     GetDieTemperature@DieTempRes:	
  4695                           ; 1 bytes @ 0x5
  4696                           
  4697  0025                     ___lwdiv@quotient:	
  4698                           ; 2 bytes @ 0x5
  4699                           
  4700                           
  4701                           ; 2 bytes @ 0x5
  4702  0025                     	ds	1
  4703  0026                     Dht_CalculateChecksum@Ret:	
  4704  0026                     ___awdiv@quotient:	
  4705                           ; 1 bytes @ 0x6
  4706                           
  4707                           
  4708                           ; 2 bytes @ 0x6
  4709  0026                     	ds	1
  4710  0027                     ?_utoa:	
  4711  0027                     ??_LedBlinkStateMachine:	
  4712                           ; 1 bytes @ 0x7
  4713                           
  4714  0027                     ?_LedPulseStateMachine:	
  4715                           ; 1 bytes @ 0x7
  4716                           
  4717  0027                     LedPulseStateMachine@Led:	
  4718                           ; 1 bytes @ 0x7
  4719                           
  4720  0027                     Dht_CalculateChecksum@Index:	
  4721                           ; 1 bytes @ 0x7
  4722                           
  4723  0027                     utoa@val:	
  4724                           ; 1 bytes @ 0x7
  4725                           
  4726                           
  4727                           ; 2 bytes @ 0x7
  4728  0027                     	ds	1
  4729  0028                     ??_LedPulseStateMachine:	
  4730  0028                     Dht_GetSensorData@Ret:	
  4731                           ; 1 bytes @ 0x8
  4732                           
  4733  0028                     ___lmul@multiplicand:	
  4734                           ; 1 bytes @ 0x8
  4735                           
  4736  0028                     ___lldiv@quotient:	
  4737                           ; 4 bytes @ 0x8
  4738                           
  4739                           
  4740                           ; 4 bytes @ 0x8
  4741  0028                     	ds	1
  4742  0029                     I2cSlv_I2cDrvHandle@Index:	
  4743  0029                     utoa@base:	
  4744                           ; 1 bytes @ 0x9
  4745                           
  4746                           
  4747                           ; 2 bytes @ 0x9
  4748  0029                     	ds	1
  4749  002A                     LedPulseStateMachine@LedPulse:	
  4750                           
  4751                           ; 1 bytes @ 0xA
  4752  002A                     	ds	1
  4753  002B                     ??_utoa:	
  4754  002B                     ?_LedStateMachine:	
  4755                           ; 1 bytes @ 0xB
  4756                           
  4757  002B                     LedStateMachine@LedSts:	
  4758                           ; 1 bytes @ 0xB
  4759                           
  4760                           
  4761                           ; 1 bytes @ 0xB
  4762  002B                     	ds	1
  4763  002C                     LedStateMachine@LedBlink:	
  4764  002C                     ___lldiv@counter:	
  4765                           ; 1 bytes @ 0xC
  4766                           
  4767  002C                     utoa@v:	
  4768                           ; 1 bytes @ 0xC
  4769                           
  4770  002C                     ___lmul@product:	
  4771                           ; 2 bytes @ 0xC
  4772                           
  4773                           
  4774                           ; 4 bytes @ 0xC
  4775  002C                     	ds	1
  4776  002D                     LedStateMachine@LedPulse:	
  4777                           
  4778                           ; 1 bytes @ 0xD
  4779  002D                     	ds	1
  4780  002E                     ??_LedStateMachine:	
  4781  002E                     utoa@c:	
  4782                           ; 1 bytes @ 0xE
  4783                           
  4784                           
  4785                           ; 1 bytes @ 0xE
  4786  002E                     	ds	1
  4787  002F                     utoa@buf:	
  4788                           
  4789                           ; 1 bytes @ 0xF
  4790  002F                     	ds	1
  4791  0030                     ?_itoa:	
  4792  0030                     ?_Tmr_TmrBPrSet:	
  4793                           ; 1 bytes @ 0x10
  4794                           
  4795  0030                     ??_StdS_ManageStdServices:	
  4796                           ; 1 bytes @ 0x10
  4797                           
  4798  0030                     LedStateMachine@Led:	
  4799                           ; 1 bytes @ 0x10
  4800                           
  4801  0030                     Tmr_TmrBPrSet@IntFreqHz:	
  4802                           ; 1 bytes @ 0x10
  4803                           
  4804  0030                     itoa@val:	
  4805                           ; 2 bytes @ 0x10
  4806                           
  4807                           
  4808                           ; 2 bytes @ 0x10
  4809  0030                     	ds	1
  4810  0031                     LedStateMachine@LedOutSts:	
  4811                           
  4812                           ; 1 bytes @ 0x11
  4813  0031                     	ds	1
  4814  0032                     Tmr_TmrBPrSet@Prescaler:	
  4815  0032                     itoa@base:	
  4816                           ; 1 bytes @ 0x12
  4817                           
  4818  0032                     StdS_ManageStdServices@DieTempStr:	
  4819                           ; 2 bytes @ 0x12
  4820                           
  4821                           
  4822                           ; 4 bytes @ 0x12
  4823  0032                     	ds	1
  4824  0033                     Tmr_TmrBPrSet@Postscaler:	
  4825                           
  4826                           ; 1 bytes @ 0x13
  4827  0033                     	ds	1
  4828  0034                     ??_itoa:	
  4829  0034                     ??_Tmr_TmrBPrSet:	
  4830                           ; 1 bytes @ 0x14
  4831                           
  4832                           
  4833                           ; 1 bytes @ 0x14
  4834  0034                     	ds	1
  4835  0035                     itoa@cp:	
  4836                           
  4837                           ; 1 bytes @ 0x15
  4838  0035                     	ds	1
  4839  0036                     itoa@buf:	
  4840  0036                     StdS_ManageStdServices@DieTemp:	
  4841                           ; 1 bytes @ 0x16
  4842                           
  4843                           
  4844                           ; 2 bytes @ 0x16
  4845  0036                     	ds	2
  4846  0038                     ??_ManageProtocol:	
  4847                           
  4848                           ; 1 bytes @ 0x18
  4849  0038                     	ds	2
  4850  003A                     ??_AppSm:	
  4851                           
  4852                           ; 1 bytes @ 0x1A
  4853  003A                     	ds	1
  4854  003B                     ?_I2cSlv_MainTask:	
  4855  003B                     ?_Wdg_MainTask:	
  4856                           ; 1 bytes @ 0x1B
  4857                           
  4858  003B                     ?_Led_MainTask:	
  4859                           ; 1 bytes @ 0x1B
  4860                           
  4861  003B                     ?_App_MainTask:	
  4862                           ; 1 bytes @ 0x1B
  4863                           
  4864  003B                     ?_I2c_DataReceiveSm:	
  4865                           ; 1 bytes @ 0x1B
  4866                           
  4867  003B                     I2c_DataReceiveSm@Options:	
  4868                           ; 1 bytes @ 0x1B
  4869                           
  4870  003B                     I2cSlv_MainTask@Options:	
  4871                           ; 1 bytes @ 0x1B
  4872                           
  4873  003B                     Led_MainTask@Options:	
  4874                           ; 1 bytes @ 0x1B
  4875                           
  4876  003B                     Wdg_MainTask@Options:	
  4877                           ; 1 bytes @ 0x1B
  4878                           
  4879  003B                     App_MainTask@Options:	
  4880                           ; 1 bytes @ 0x1B
  4881                           
  4882                           
  4883                           ; 1 bytes @ 0x1B
  4884  003B                     	ds	1
  4885  003C                     ??_Led_MainTask:	
  4886  003C                     ??_App_MainTask:	
  4887                           ; 1 bytes @ 0x1C
  4888                           
  4889  003C                     ??_I2c_DataReceiveSm:	
  4890                           ; 1 bytes @ 0x1C
  4891                           
  4892  003C                     Tmr_TmrBPrSet@TmrNumb:	
  4893                           ; 1 bytes @ 0x1C
  4894                           
  4895                           
  4896                           ; 1 bytes @ 0x1C
  4897  003C                     	ds	1
  4898  003D                     Tmr_TmrBPrSet@TmrBPrCfgSts:	
  4899                           
  4900                           ; 1 bytes @ 0x1D
  4901  003D                     	ds	1
  4902  003E                     Tmr_TmrBPrSet@Divisor:	
  4903                           
  4904                           ; 4 bytes @ 0x1E
  4905  003E                     	ds	1
  4906  003F                     App_MainTask@AnalogChSel:	
  4907                           
  4908                           ; 12 bytes @ 0x1F
  4909  003F                     	ds	3
  4910  0042                     ?_Tmr_TmrBConfig:	
  4911  0042                     Tmr_TmrBConfig@TmrBConfig:	
  4912                           ; 1 bytes @ 0x22
  4913                           
  4914                           
  4915                           ; 1 bytes @ 0x22
  4916  0042                     	ds	1
  4917  0043                     ??_Tmr_TmrBConfig:	
  4918  0043                     I2c_DataReceiveSm@Index:	
  4919                           ; 1 bytes @ 0x23
  4920                           
  4921                           
  4922                           ; 1 bytes @ 0x23
  4923  0043                     	ds	1
  4924  0044                     Tmr_TmrBConfig@TmrNumb:	
  4925                           
  4926                           ; 1 bytes @ 0x24
  4927  0044                     	ds	1
  4928  0045                     ??_InitSchTimer:	
  4929                           
  4930                           ; 1 bytes @ 0x25
  4931  0045                     	ds	1
  4932  0046                     InitSchTimer@TmrBConfig:	
  4933                           
  4934                           ; 6 bytes @ 0x26
  4935  0046                     	ds	5
  4936  004B                     App_MainTask@AdcConfig:	
  4937                           
  4938                           ; 6 bytes @ 0x2B
  4939  004B                     	ds	6
  4940  0051                     App_MainTask@WpuCh:	
  4941                           
  4942                           ; 18 bytes @ 0x31
  4943  0051                     	ds	18
  4944  0063                     InitializeTasks@ActiveTaskIndex:	
  4945  0063                     ScheduleTasks@ActiveTaskIndex:	
  4946                           ; 1 bytes @ 0x43
  4947                           
  4948                           
  4949                           ; 1 bytes @ 0x43
  4950  0063                     	ds	1
  4951                           
  4952                           	psect	maintext
  4953  164D                     __pmaintext:	
  4954 ;;
  4955 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  4956 ;;
  4957 ;; *************** function _main *****************
  4958 ;; Defined at:
  4959 ;;		line 57 in file "../../../Framework/MercuryFwk/Source/c/00_Main/main.c"
  4960 ;; Parameters:    Size  Location     Type
  4961 ;;		None
  4962 ;; Auto vars:     Size  Location     Type
  4963 ;;		None
  4964 ;; Return value:  Size  Location     Type
  4965 ;;                  2   12[None  ] short 
  4966 ;; Registers used:
  4967 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4968 ;; Tracked objects:
  4969 ;;		On entry : B1F/0
  4970 ;;		On exit  : 0/0
  4971 ;;		Unchanged: 0/0
  4972 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4973 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4974 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4975 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4976 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4977 ;;Total ram usage:        0 bytes
  4978 ;; Hardware stack levels required when called:   10
  4979 ;; This function calls:
  4980 ;;		_MainScheduler
  4981 ;;		_SystemInit
  4982 ;; This function is called by:
  4983 ;;		Startup code after reset
  4984 ;; This function uses a non-reentrant model
  4985 ;;
  4986                           
  4987                           
  4988                           ;psect for function _main
  4989  164D                     _main:	
  4990                           
  4991                           ;main.c: 60: SystemInit();
  4992                           
  4993                           ;incstack = 0
  4994                           ; Regs used in _main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  4995  164D  3196  2674  3196   	fcall	_SystemInit
  4996                           
  4997                           ;main.c: 63: MainScheduler();
  4998  1650  3197  2727         	fcall	_MainScheduler
  4999                           
  5000                           ;main.c: 66: return 0;
  5001                           ;	Return value of _main is never used
  5002  1652  3180  282B         	ljmp	start
  5003  1654                     __end_of_main:	
  5004                           
  5005                           	psect	text1
  5006  1674                     __ptext1:	
  5007 ;; *************** function _SystemInit *****************
  5008 ;; Defined at:
  5009 ;;		line 98 in file "../Source/c/04_App/sys_init.c"
  5010 ;; Parameters:    Size  Location     Type
  5011 ;;		None
  5012 ;; Auto vars:     Size  Location     Type
  5013 ;;		None
  5014 ;; Return value:  Size  Location     Type
  5015 ;;                  1    wreg      void 
  5016 ;; Registers used:
  5017 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5018 ;; Tracked objects:
  5019 ;;		On entry : 0/0
  5020 ;;		On exit  : 0/0
  5021 ;;		Unchanged: 0/0
  5022 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5023 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5024 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5025 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5026 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5027 ;;Total ram usage:        0 bytes
  5028 ;; Hardware stack levels used:    1
  5029 ;; Hardware stack levels required when called:    6
  5030 ;; This function calls:
  5031 ;;		_InitSchTimer
  5032 ;;		_Mcu_EnableInterrupts
  5033 ;;		_Mcu_StartSystemPll
  5034 ;; This function is called by:
  5035 ;;		_main
  5036 ;; This function uses a non-reentrant model
  5037 ;;
  5038                           
  5039                           
  5040                           ;psect for function _SystemInit
  5041  1674                     _SystemInit:	
  5042                           
  5043                           ;sys_init.c: 101: Mcu_StartSystemPll();
  5044                           
  5045                           ;incstack = 0
  5046                           ; Regs used in _SystemInit: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  5047  1674  3196  2646  3196   	fcall	_Mcu_StartSystemPll
  5048                           
  5049                           ;sys_init.c: 103: InitSchTimer();
  5050  1677  3197  27B7  3196   	fcall	_InitSchTimer
  5051                           
  5052                           ;sys_init.c: 105: Mcu_EnableInterrupts();
  5053  167A  3196  2643         	fcall	_Mcu_EnableInterrupts
  5054  167C  0008               	return
  5055  167D                     __end_of_SystemInit:	
  5056                           
  5057                           	psect	text2
  5058  1646                     __ptext2:	
  5059 ;; *************** function _Mcu_StartSystemPll *****************
  5060 ;; Defined at:
  5061 ;;		line 153 in file "../../../Framework/MercuryFwk/Source/c/01_Hal/02_Drv/mcu_drv.c"
  5062 ;; Parameters:    Size  Location     Type
  5063 ;;		None
  5064 ;; Auto vars:     Size  Location     Type
  5065 ;;		None
  5066 ;; Return value:  Size  Location     Type
  5067 ;;                  1    wreg      void 
  5068 ;; Registers used:
  5069 ;;		None
  5070 ;; Tracked objects:
  5071 ;;		On entry : 0/0
  5072 ;;		On exit  : 0/0
  5073 ;;		Unchanged: 0/0
  5074 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5075 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5076 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5077 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5078 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5079 ;;Total ram usage:        0 bytes
  5080 ;; Hardware stack levels used:    1
  5081 ;; Hardware stack levels required when called:    2
  5082 ;; This function calls:
  5083 ;;		Nothing
  5084 ;; This function is called by:
  5085 ;;		_SystemInit
  5086 ;; This function uses a non-reentrant model
  5087 ;;
  5088                           
  5089                           
  5090                           ;psect for function _Mcu_StartSystemPll
  5091  1646                     _Mcu_StartSystemPll:	
  5092                           
  5093                           ;mcu_drv.c: 156: OSCCONbits.SPLLEN = ((UINT8)(1));
  5094                           
  5095                           ;incstack = 0
  5096                           ; Regs used in _Mcu_StartSystemPll: []
  5097  1646  0021               	movlb	1	; select bank1
  5098  1647  1799               	bsf	25,7	;volatile
  5099  1648  0008               	return
  5100  1649                     __end_of_Mcu_StartSystemPll:	
  5101                           
  5102                           	psect	text3
  5103  1643                     __ptext3:	
  5104 ;; *************** function _Mcu_EnableInterrupts *****************
  5105 ;; Defined at:
  5106 ;;		line 97 in file "../../../Framework/MercuryFwk/Source/c/01_Hal/02_Drv/mcu_drv.c"
  5107 ;; Parameters:    Size  Location     Type
  5108 ;;		None
  5109 ;; Auto vars:     Size  Location     Type
  5110 ;;		None
  5111 ;; Return value:  Size  Location     Type
  5112 ;;                  1    wreg      void 
  5113 ;; Registers used:
  5114 ;;		None
  5115 ;; Tracked objects:
  5116 ;;		On entry : 0/0
  5117 ;;		On exit  : 0/0
  5118 ;;		Unchanged: 0/0
  5119 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5120 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5121 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5122 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5123 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5124 ;;Total ram usage:        0 bytes
  5125 ;; Hardware stack levels used:    1
  5126 ;; Hardware stack levels required when called:    2
  5127 ;; This function calls:
  5128 ;;		Nothing
  5129 ;; This function is called by:
  5130 ;;		_SystemInit
  5131 ;; This function uses a non-reentrant model
  5132 ;;
  5133                           
  5134                           
  5135                           ;psect for function _Mcu_EnableInterrupts
  5136  1643                     _Mcu_EnableInterrupts:	
  5137                           
  5138                           ;mcu_drv.c: 100: INTCONbits.GIE = ((UINT8)(1));
  5139                           
  5140                           ;incstack = 0
  5141                           ; Regs used in _Mcu_EnableInterrupts: []
  5142  1643  178B               	bsf	11,7	;volatile
  5143                           
  5144                           ;mcu_drv.c: 101: INTCONbits.PEIE = ((UINT8)(1));
  5145  1644  170B               	bsf	11,6	;volatile
  5146  1645  0008               	return
  5147  1646                     __end_of_Mcu_EnableInterrupts:	
  5148                           
  5149                           	psect	text4
  5150  17B7                     __ptext4:	
  5151 ;; *************** function _InitSchTimer *****************
  5152 ;; Defined at:
  5153 ;;		line 71 in file "../Source/c/04_App/sys_init.c"
  5154 ;; Parameters:    Size  Location     Type
  5155 ;;		None
  5156 ;; Auto vars:     Size  Location     Type
  5157 ;;  TmrBConfig      6   38[BANK0 ] struct _TmrBConfigType
  5158 ;; Return value:  Size  Location     Type
  5159 ;;                  1    wreg      void 
  5160 ;; Registers used:
  5161 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5162 ;; Tracked objects:
  5163 ;;		On entry : 0/0
  5164 ;;		On exit  : 0/0
  5165 ;;		Unchanged: 0/0
  5166 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5167 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5168 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5169 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5170 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5171 ;;Total ram usage:        7 bytes
  5172 ;; Hardware stack levels used:    1
  5173 ;; Hardware stack levels required when called:    5
  5174 ;; This function calls:
  5175 ;;		_Tmr_TmrBConfig
  5176 ;; This function is called by:
  5177 ;;		_SystemInit
  5178 ;; This function uses a non-reentrant model
  5179 ;;
  5180                           
  5181                           
  5182                           ;psect for function _InitSchTimer
  5183  17B7                     _InitSchTimer:	
  5184                           
  5185                           ;sys_init.c: 73: TmrBConfigType TmrBConfig;
  5186                           ;sys_init.c: 76: TmrBConfig.PreScaler = 1;
  5187                           
  5188                           ;incstack = 0
  5189                           ; Regs used in _InitSchTimer: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  5190  17B7  0020               	movlb	0	; select bank0
  5191  17B8  01C6               	clrf	InitSchTimer@TmrBConfig
  5192  17B9  0AC6               	incf	InitSchTimer@TmrBConfig,f
  5193                           
  5194                           ;sys_init.c: 77: TmrBConfig.PostScaler = 8;
  5195  17BA  3008               	movlw	8
  5196  17BB  00C5               	movwf	??_InitSchTimer
  5197  17BC  0845               	movf	??_InitSchTimer,w
  5198  17BD  00C7               	movwf	InitSchTimer@TmrBConfig+1
  5199                           
  5200                           ;sys_init.c: 78: TmrBConfig.IntEnable = 1u;
  5201  17BE  01C8               	clrf	InitSchTimer@TmrBConfig+2
  5202  17BF  0AC8               	incf	InitSchTimer@TmrBConfig+2,f
  5203                           
  5204                           ;sys_init.c: 79: TmrBConfig.IntFreqHz = 10000;
  5205  17C0  3010               	movlw	16
  5206  17C1  00C9               	movwf	InitSchTimer@TmrBConfig+3
  5207  17C2  3027               	movlw	39
  5208  17C3  00CA               	movwf	InitSchTimer@TmrBConfig+4
  5209                           
  5210                           ;sys_init.c: 80: TmrBConfig.StartTmrRequest = StartTmrReq;
  5211  17C4  01CB               	clrf	InitSchTimer@TmrBConfig+5
  5212  17C5  0ACB               	incf	InitSchTimer@TmrBConfig+5,f
  5213                           
  5214                           ;sys_init.c: 83: Tmr_TmrBConfig(((UINT8)(2)),&TmrBConfig);
  5215  17C6  3046               	movlw	(low (InitSchTimer@TmrBConfig| 0))& (0+255)
  5216  17C7  00C5               	movwf	??_InitSchTimer
  5217  17C8  0845               	movf	??_InitSchTimer,w
  5218  17C9  00C2               	movwf	Tmr_TmrBConfig@TmrBConfig
  5219  17CA  3002               	movlw	2
  5220  17CB  318C  244F         	fcall	_Tmr_TmrBConfig
  5221  17CD  0008               	return
  5222  17CE                     __end_of_InitSchTimer:	
  5223                           
  5224                           	psect	text5
  5225  0C4F                     __ptext5:	
  5226 ;; *************** function _Tmr_TmrBConfig *****************
  5227 ;; Defined at:
  5228 ;;		line 313 in file "../../../Framework/MercuryFwk/Source/c/01_Hal/02_Drv/tmr_drv.c"
  5229 ;; Parameters:    Size  Location     Type
  5230 ;;  TmrNumb         1    wreg     unsigned char 
  5231 ;;  TmrBConfig      1   34[BANK0 ] PTR struct _TmrBConfigTy
  5232 ;;		 -> InitSchTimer@TmrBConfig(6), 
  5233 ;; Auto vars:     Size  Location     Type
  5234 ;;  TmrNumb         1   36[BANK0 ] unsigned char 
  5235 ;; Return value:  Size  Location     Type
  5236 ;;                  1    wreg      void 
  5237 ;; Registers used:
  5238 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5239 ;; Tracked objects:
  5240 ;;		On entry : 0/0
  5241 ;;		On exit  : 0/0
  5242 ;;		Unchanged: 0/0
  5243 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5244 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5245 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5246 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5247 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5248 ;;Total ram usage:        3 bytes
  5249 ;; Hardware stack levels used:    1
  5250 ;; Hardware stack levels required when called:    4
  5251 ;; This function calls:
  5252 ;;		_TmrBInit
  5253 ;;		_Tmr_StartTmr
  5254 ;;		_Tmr_TmrBIrqSet
  5255 ;;		_Tmr_TmrBPrSet
  5256 ;; This function is called by:
  5257 ;;		_InitSchTimer
  5258 ;; This function uses a non-reentrant model
  5259 ;;
  5260                           
  5261                           
  5262                           ;psect for function _Tmr_TmrBConfig
  5263  0C4F                     _Tmr_TmrBConfig:	
  5264                           
  5265                           ;incstack = 0
  5266                           ; Regs used in _Tmr_TmrBConfig: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  5267                           ;Tmr_TmrBConfig@TmrNumb stored from wreg
  5268  0C4F  0020               	movlb	0	; select bank0
  5269  0C50  00C4               	movwf	Tmr_TmrBConfig@TmrNumb
  5270                           
  5271                           ;tmr_drv.c: 316: TmrBInit(TmrNumb,TmrBConfig->PreScaler,TmrBConfig->PostScaler);
  5272  0C51  0842               	movf	Tmr_TmrBConfig@TmrBConfig,w
  5273  0C52  0086               	movwf	6
  5274  0C53  0187               	clrf	7
  5275  0C54  0801               	movf	1,w
  5276  0C55  00C3               	movwf	??_Tmr_TmrBConfig
  5277  0C56  0843               	movf	??_Tmr_TmrBConfig,w
  5278  0C57  00F4               	movwf	TmrBInit@Prescaler
  5279  0C58  0842               	movf	Tmr_TmrBConfig@TmrBConfig,w
  5280  0C59  0086               	movwf	6
  5281  0C5A  0187               	clrf	7
  5282  0C5B  3F41               	moviw [1]fsr1
  5283  0C5C  00F5               	movwf	TmrBInit@Postscaler
  5284  0C5D  0844               	movf	Tmr_TmrBConfig@TmrNumb,w
  5285  0C5E  318E  2657  318C   	fcall	_TmrBInit
  5286                           
  5287                           ;tmr_drv.c: 318: if (TmrBConfig->IntEnable == EnableInt)
  5288  0C61  0020               	movlb	0	; select bank0
  5289  0C62  0842               	movf	Tmr_TmrBConfig@TmrBConfig,w
  5290  0C63  3E02               	addlw	2
  5291  0C64  0086               	movwf	6
  5292  0C65  0187               	clrf	7
  5293  0C66  0301               	decf	1,w
  5294  0C67  1D03               	btfss	3,2
  5295  0C68  2C6C               	goto	l5023
  5296                           
  5297                           ;tmr_drv.c: 319: {
  5298                           ;tmr_drv.c: 321: Tmr_TmrBIrqSet(TmrNumb,((UINT8)(1)));
  5299  0C69  01F4               	clrf	Tmr_TmrBIrqSet@TmrIrqSts
  5300  0C6A  0AF4               	incf	Tmr_TmrBIrqSet@TmrIrqSts,f
  5301  0C6B  2C6E               	goto	L1
  5302  0C6C                     l5023:	
  5303                           ;tmr_drv.c: 322: }
  5304                           
  5305                           
  5306                           ;tmr_drv.c: 323: else
  5307                           ;tmr_drv.c: 324: {
  5308                           ;tmr_drv.c: 326: Tmr_TmrBIrqSet(TmrNumb,((UINT8)(0)));
  5309  0C6C  01F4               	clrf	Tmr_TmrBIrqSet@TmrIrqSts
  5310  0C6D  0020               	movlb	0	; select bank0
  5311  0C6E                     L1:	
  5312  0C6E  0844               	movf	Tmr_TmrBConfig@TmrNumb,w
  5313  0C6F  3189  21AF  318C   	fcall	_Tmr_TmrBIrqSet
  5314                           
  5315                           ;tmr_drv.c: 327: }
  5316                           ;tmr_drv.c: 329: if (Tmr_TmrBPrSet(TmrNumb,TmrBConfig->IntFreqHz,TmrBConfig->PreScaler,T
      +                          mrBConfig->PostScaler) == CfgError)
  5317  0C72  0020               	movlb	0	; select bank0
  5318  0C73  0842               	movf	Tmr_TmrBConfig@TmrBConfig,w
  5319  0C74  3E03               	addlw	3
  5320  0C75  0086               	movwf	6
  5321  0C76  0187               	clrf	7
  5322  0C77  3F40               	moviw [0]fsr1
  5323  0C78  00B0               	movwf	Tmr_TmrBPrSet@IntFreqHz
  5324  0C79  3F41               	moviw [1]fsr1
  5325  0C7A  00B1               	movwf	Tmr_TmrBPrSet@IntFreqHz+1
  5326  0C7B  0842               	movf	Tmr_TmrBConfig@TmrBConfig,w
  5327  0C7C  0086               	movwf	6
  5328  0C7D  0187               	clrf	7
  5329  0C7E  0801               	movf	1,w
  5330  0C7F  00C3               	movwf	??_Tmr_TmrBConfig
  5331  0C80  0843               	movf	??_Tmr_TmrBConfig,w
  5332  0C81  00B2               	movwf	Tmr_TmrBPrSet@Prescaler
  5333  0C82  0842               	movf	Tmr_TmrBConfig@TmrBConfig,w
  5334  0C83  0086               	movwf	6
  5335  0C84  0187               	clrf	7
  5336  0C85  3F41               	moviw [1]fsr1
  5337  0C86  00B3               	movwf	Tmr_TmrBPrSet@Postscaler
  5338  0C87  0844               	movf	Tmr_TmrBConfig@TmrNumb,w
  5339  0C88  3185  2582  318C   	fcall	_Tmr_TmrBPrSet
  5340  0C8B  3A01               	xorlw	1
  5341  0C8C  1903               	btfsc	3,2
  5342  0C8D                     l373:	
  5343                           ;tmr_drv.c: 330: {
  5344                           ;tmr_drv.c: 332: while(1);
  5345                           
  5346  0C8D  2C8D               	goto	l373
  5347                           
  5348                           ;tmr_drv.c: 333: }
  5349                           ;tmr_drv.c: 335: if (TmrBConfig->StartTmrRequest == StartTmrReq)
  5350  0C8E  0020               	movlb	0	; select bank0
  5351  0C8F  0842               	movf	Tmr_TmrBConfig@TmrBConfig,w
  5352  0C90  3E05               	addlw	5
  5353  0C91  0086               	movwf	6
  5354  0C92  0187               	clrf	7
  5355  0C93  0301               	decf	1,w
  5356  0C94  1D03               	btfss	3,2
  5357  0C95  0008               	return
  5358                           
  5359                           ;tmr_drv.c: 336: {
  5360                           ;tmr_drv.c: 338: Tmr_StartTmr(TmrNumb);
  5361  0C96  0844               	movf	Tmr_TmrBConfig@TmrNumb,w
  5362  0C97  3197  27A0         	fcall	_Tmr_StartTmr
  5363                           
  5364                           ;tmr_drv.c: 339: }
  5365  0C99  0008               	return
  5366  0C9A                     __end_of_Tmr_TmrBConfig:	
  5367                           ;tmr_drv.c: 340: else
  5368                           ;tmr_drv.c: 341: {
  5369                           
  5370                           
  5371                           	psect	text6
  5372  0582                     __ptext6:	
  5373 ;; *************** function _Tmr_TmrBPrSet *****************
  5374 ;; Defined at:
  5375 ;;		line 225 in file "../../../Framework/MercuryFwk/Source/c/01_Hal/02_Drv/tmr_drv.c"
  5376 ;; Parameters:    Size  Location     Type
  5377 ;;  TmrNumb         1    wreg     unsigned char 
  5378 ;;  IntFreqHz       2   16[BANK0 ] unsigned short 
  5379 ;;  Prescaler       1   18[BANK0 ] unsigned char 
  5380 ;;  Postscaler      1   19[BANK0 ] unsigned char 
  5381 ;; Auto vars:     Size  Location     Type
  5382 ;;  TmrNumb         1   28[BANK0 ] unsigned char 
  5383 ;;  Divisor         4   30[BANK0 ] unsigned long 
  5384 ;;  TmrBPrCfgSts    1   29[BANK0 ] enum E3647
  5385 ;; Return value:  Size  Location     Type
  5386 ;;                  1    wreg      enum E3647
  5387 ;; Registers used:
  5388 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  5389 ;; Tracked objects:
  5390 ;;		On entry : 0/0
  5391 ;;		On exit  : 0/0
  5392 ;;		Unchanged: 0/0
  5393 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5394 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5395 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5396 ;;      Temps:          0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5397 ;;      Totals:         0      18       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5398 ;;Total ram usage:       18 bytes
  5399 ;; Hardware stack levels used:    1
  5400 ;; Hardware stack levels required when called:    3
  5401 ;; This function calls:
  5402 ;;		___lldiv
  5403 ;;		___lmul
  5404 ;;		___wmul
  5405 ;; This function is called by:
  5406 ;;		_Tmr_TmrBConfig
  5407 ;; This function uses a non-reentrant model
  5408 ;;
  5409                           
  5410                           
  5411                           ;psect for function _Tmr_TmrBPrSet
  5412  0582                     _Tmr_TmrBPrSet:	
  5413                           
  5414                           ;incstack = 0
  5415                           ; Regs used in _Tmr_TmrBPrSet: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  5416                           ;Tmr_TmrBPrSet@TmrNumb stored from wreg
  5417  0582  0020               	movlb	0	; select bank0
  5418  0583  00BC               	movwf	Tmr_TmrBPrSet@TmrNumb
  5419                           
  5420                           ;tmr_drv.c: 227: CfgStsType TmrBPrCfgSts;
  5421                           ;tmr_drv.c: 228: UINT32 Divisor = 0;
  5422  0584  3000               	movlw	0
  5423  0585  00C1               	movwf	Tmr_TmrBPrSet@Divisor+3
  5424  0586  3000               	movlw	0
  5425  0587  00C0               	movwf	Tmr_TmrBPrSet@Divisor+2
  5426  0588  3000               	movlw	0
  5427  0589  00BF               	movwf	Tmr_TmrBPrSet@Divisor+1
  5428  058A  3000               	movlw	0
  5429  058B  00BE               	movwf	Tmr_TmrBPrSet@Divisor
  5430                           
  5431                           ;tmr_drv.c: 231: Divisor = (UINT32)Prescaler*(UINT32)Postscaler*(UINT32)IntFreqHz;
  5432  058C  0833               	movf	Tmr_TmrBPrSet@Postscaler,w
  5433  058D  00B4               	movwf	??_Tmr_TmrBPrSet
  5434  058E  01B5               	clrf	??_Tmr_TmrBPrSet+1
  5435  058F  0834               	movf	??_Tmr_TmrBPrSet,w
  5436  0590  00A2               	movwf	___wmul@multiplicand
  5437  0591  0835               	movf	??_Tmr_TmrBPrSet+1,w
  5438  0592  00A3               	movwf	___wmul@multiplicand+1
  5439  0593  0832               	movf	Tmr_TmrBPrSet@Prescaler,w
  5440  0594  00B6               	movwf	??_Tmr_TmrBPrSet+2
  5441  0595  01B7               	clrf	??_Tmr_TmrBPrSet+3
  5442  0596  0836               	movf	??_Tmr_TmrBPrSet+2,w
  5443  0597  00A0               	movwf	___wmul@multiplier
  5444  0598  0837               	movf	??_Tmr_TmrBPrSet+3,w
  5445  0599  00A1               	movwf	___wmul@multiplier+1
  5446  059A  3188  2020  3185   	fcall	___wmul
  5447  059D  0020               	movlb	0	; select bank0
  5448  059E  0820               	movf	?___wmul,w
  5449  059F  00B8               	movwf	??_Tmr_TmrBPrSet+4
  5450  05A0  0821               	movf	?___wmul+1,w
  5451  05A1  00B9               	movwf	??_Tmr_TmrBPrSet+5
  5452  05A2  01BA               	clrf	??_Tmr_TmrBPrSet+6
  5453  05A3  01BB               	clrf	??_Tmr_TmrBPrSet+7
  5454  05A4  083B               	movf	??_Tmr_TmrBPrSet+7,w
  5455  05A5  00A7               	movwf	___lmul@multiplier+3
  5456  05A6  083A               	movf	??_Tmr_TmrBPrSet+6,w
  5457  05A7  00A6               	movwf	___lmul@multiplier+2
  5458  05A8  0839               	movf	??_Tmr_TmrBPrSet+5,w
  5459  05A9  00A5               	movwf	___lmul@multiplier+1
  5460  05AA  0838               	movf	??_Tmr_TmrBPrSet+4,w
  5461  05AB  00A4               	movwf	___lmul@multiplier
  5462  05AC  0830               	movf	Tmr_TmrBPrSet@IntFreqHz,w
  5463  05AD  00A8               	movwf	___lmul@multiplicand
  5464  05AE  0831               	movf	Tmr_TmrBPrSet@IntFreqHz+1,w
  5465  05AF  00A9               	movwf	___lmul@multiplicand+1
  5466  05B0  01AA               	clrf	___lmul@multiplicand+2
  5467  05B1  01AB               	clrf	___lmul@multiplicand+3
  5468  05B2  318A  2289  3185   	fcall	___lmul
  5469  05B5  0020               	movlb	0	; select bank0
  5470  05B6  0827               	movf	?___lmul+3,w
  5471  05B7  00C1               	movwf	Tmr_TmrBPrSet@Divisor+3
  5472  05B8  0826               	movf	?___lmul+2,w
  5473  05B9  00C0               	movwf	Tmr_TmrBPrSet@Divisor+2
  5474  05BA  0825               	movf	?___lmul+1,w
  5475  05BB  00BF               	movwf	Tmr_TmrBPrSet@Divisor+1
  5476  05BC  0824               	movf	?___lmul,w
  5477  05BD  00BE               	movwf	Tmr_TmrBPrSet@Divisor
  5478                           
  5479                           ;tmr_drv.c: 234: if (((((UINT32)(32000000))/4)/Divisor) <= 255)
  5480  05BE  0841               	movf	Tmr_TmrBPrSet@Divisor+3,w
  5481  05BF  00A3               	movwf	___lldiv@divisor+3
  5482  05C0  0840               	movf	Tmr_TmrBPrSet@Divisor+2,w
  5483  05C1  00A2               	movwf	___lldiv@divisor+2
  5484  05C2  083F               	movf	Tmr_TmrBPrSet@Divisor+1,w
  5485  05C3  00A1               	movwf	___lldiv@divisor+1
  5486  05C4  083E               	movf	Tmr_TmrBPrSet@Divisor,w
  5487  05C5  00A0               	movwf	___lldiv@divisor
  5488  05C6  3000               	movlw	0
  5489  05C7  00A7               	movwf	___lldiv@dividend+3
  5490  05C8  307A               	movlw	122
  5491  05C9  00A6               	movwf	___lldiv@dividend+2
  5492  05CA  3012               	movlw	18
  5493  05CB  00A5               	movwf	___lldiv@dividend+1
  5494  05CC  3000               	movlw	0
  5495  05CD  00A4               	movwf	___lldiv@dividend
  5496  05CE  318D  253A  3185   	fcall	___lldiv
  5497  05D1  0020               	movlb	0	; select bank0
  5498  05D2  0823               	movf	?___lldiv+3,w
  5499  05D3  1D03               	btfss	3,2
  5500  05D4  2E34               	goto	l349
  5501  05D5  0822               	movf	?___lldiv+2,w
  5502  05D6  1D03               	btfss	3,2
  5503  05D7  2E34               	goto	l349
  5504  05D8  3001               	movlw	1
  5505  05D9  0221               	subwf	?___lldiv+1,w
  5506  05DA  1C03               	btfss	3,0
  5507  05DB  2E25               	goto	l4729
  5508  05DC  2E34               	goto	l349
  5509  05DD                     l4721:	
  5510                           ;tmr_drv.c: 238: {
  5511                           ;tmr_drv.c: 239: case ((UINT8)(2)):
  5512                           
  5513                           ;tmr_drv.c: 235: {
  5514                           ;tmr_drv.c: 237: switch (TmrNumb)
  5515                           
  5516                           
  5517                           ;tmr_drv.c: 241: PR2 = (((UINT32)(32000000))/4)/Divisor;
  5518  05DD  0841               	movf	Tmr_TmrBPrSet@Divisor+3,w
  5519  05DE  00A3               	movwf	___lldiv@divisor+3
  5520  05DF  0840               	movf	Tmr_TmrBPrSet@Divisor+2,w
  5521  05E0  00A2               	movwf	___lldiv@divisor+2
  5522  05E1  083F               	movf	Tmr_TmrBPrSet@Divisor+1,w
  5523  05E2  00A1               	movwf	___lldiv@divisor+1
  5524  05E3  083E               	movf	Tmr_TmrBPrSet@Divisor,w
  5525  05E4  00A0               	movwf	___lldiv@divisor
  5526  05E5  3000               	movlw	0
  5527  05E6  00A7               	movwf	___lldiv@dividend+3
  5528  05E7  307A               	movlw	122
  5529  05E8  00A6               	movwf	___lldiv@dividend+2
  5530  05E9  3012               	movlw	18
  5531  05EA  00A5               	movwf	___lldiv@dividend+1
  5532  05EB  3000               	movlw	0
  5533  05EC  00A4               	movwf	___lldiv@dividend
  5534  05ED  318D  253A  3185   	fcall	___lldiv
  5535  05F0  0020               	movlb	0	; select bank0
  5536  05F1  0820               	movf	?___lldiv,w
  5537  05F2  009B               	movwf	27	;volatile
  5538                           
  5539                           ;tmr_drv.c: 242: break;
  5540  05F3  2E31               	goto	l4731
  5541  05F4                     l4723:	
  5542                           ;tmr_drv.c: 244: case ((UINT8)(4)):
  5543                           
  5544                           
  5545                           ;tmr_drv.c: 246: PR4 = (((UINT32)(32000000))/4)/Divisor;
  5546  05F4  0841               	movf	Tmr_TmrBPrSet@Divisor+3,w
  5547  05F5  00A3               	movwf	___lldiv@divisor+3
  5548  05F6  0840               	movf	Tmr_TmrBPrSet@Divisor+2,w
  5549  05F7  00A2               	movwf	___lldiv@divisor+2
  5550  05F8  083F               	movf	Tmr_TmrBPrSet@Divisor+1,w
  5551  05F9  00A1               	movwf	___lldiv@divisor+1
  5552  05FA  083E               	movf	Tmr_TmrBPrSet@Divisor,w
  5553  05FB  00A0               	movwf	___lldiv@divisor
  5554  05FC  3000               	movlw	0
  5555  05FD  00A7               	movwf	___lldiv@dividend+3
  5556  05FE  307A               	movlw	122
  5557  05FF  00A6               	movwf	___lldiv@dividend+2
  5558  0600  3012               	movlw	18
  5559  0601  00A5               	movwf	___lldiv@dividend+1
  5560  0602  3000               	movlw	0
  5561  0603  00A4               	movwf	___lldiv@dividend
  5562  0604  318D  253A  3185   	fcall	___lldiv
  5563  0607  0020               	movlb	0	; select bank0
  5564  0608  0820               	movf	?___lldiv,w
  5565  0609  0028               	movlb	8	; select bank8
  5566  060A  0096               	movwf	22	;volatile
  5567                           
  5568                           ;tmr_drv.c: 247: break;
  5569  060B  2E31               	goto	l4731
  5570  060C                     l4725:	
  5571                           ;tmr_drv.c: 249: case ((UINT8)(6)):
  5572                           
  5573                           
  5574                           ;tmr_drv.c: 251: PR6 = (((UINT32)(32000000))/4)/Divisor;
  5575  060C  0020               	movlb	0	; select bank0
  5576  060D  0841               	movf	Tmr_TmrBPrSet@Divisor+3,w
  5577  060E  00A3               	movwf	___lldiv@divisor+3
  5578  060F  0840               	movf	Tmr_TmrBPrSet@Divisor+2,w
  5579  0610  00A2               	movwf	___lldiv@divisor+2
  5580  0611  083F               	movf	Tmr_TmrBPrSet@Divisor+1,w
  5581  0612  00A1               	movwf	___lldiv@divisor+1
  5582  0613  083E               	movf	Tmr_TmrBPrSet@Divisor,w
  5583  0614  00A0               	movwf	___lldiv@divisor
  5584  0615  3000               	movlw	0
  5585  0616  00A7               	movwf	___lldiv@dividend+3
  5586  0617  307A               	movlw	122
  5587  0618  00A6               	movwf	___lldiv@dividend+2
  5588  0619  3012               	movlw	18
  5589  061A  00A5               	movwf	___lldiv@dividend+1
  5590  061B  3000               	movlw	0
  5591  061C  00A4               	movwf	___lldiv@dividend
  5592  061D  318D  253A  3185   	fcall	___lldiv
  5593  0620  0020               	movlb	0	; select bank0
  5594  0621  0820               	movf	?___lldiv,w
  5595  0622  0028               	movlb	8	; select bank8
  5596  0623  009D               	movwf	29	;volatile
  5597                           
  5598                           ;tmr_drv.c: 256: }
  5599                           
  5600                           ;tmr_drv.c: 255: break;
  5601                           
  5602                           ;tmr_drv.c: 254: default:
  5603                           
  5604                           ;tmr_drv.c: 252: break;
  5605  0624  2E31               	goto	l4731
  5606  0625                     l4729:	
  5607  0625  0020               	movlb	0	; select bank0
  5608  0626  083C               	movf	Tmr_TmrBPrSet@TmrNumb,w
  5609                           
  5610                           ; Switch size 1, requested type "space"
  5611                           ; Number of cases is 3, Range of values is 2 to 6
  5612                           ; switch strategies available:
  5613                           ; Name         Instructions Cycles
  5614                           ; simple_byte           10     6 (average)
  5615                           ; direct_byte           19     9 (fixed)
  5616                           ; jumptable            263     9 (fixed)
  5617                           ;	Chosen strategy is simple_byte
  5618  0627  3A02               	xorlw	2	; case 2
  5619  0628  1903               	skipnz
  5620  0629  2DDD               	goto	l4721
  5621  062A  3A06               	xorlw	6	; case 4
  5622  062B  1903               	skipnz
  5623  062C  2DF4               	goto	l4723
  5624  062D  3A02               	xorlw	2	; case 6
  5625  062E  1903               	skipnz
  5626  062F  2E0C               	goto	l4725
  5627  0630  2E31               	goto	l4731
  5628  0631                     l4731:	
  5629                           
  5630                           ;tmr_drv.c: 259: TmrBPrCfgSts = CfgOk;
  5631  0631  0020               	movlb	0	; select bank0
  5632  0632  01BD               	clrf	Tmr_TmrBPrSet@TmrBPrCfgSts
  5633                           
  5634                           ;tmr_drv.c: 260: }
  5635  0633  2E36               	goto	l4733
  5636  0634                     l349:	
  5637                           
  5638                           ;tmr_drv.c: 261: else
  5639                           ;tmr_drv.c: 262: {
  5640                           ;tmr_drv.c: 264: TmrBPrCfgSts = CfgError;
  5641  0634  01BD               	clrf	Tmr_TmrBPrSet@TmrBPrCfgSts
  5642  0635  0ABD               	incf	Tmr_TmrBPrSet@TmrBPrCfgSts,f
  5643  0636                     l4733:	
  5644                           
  5645                           ;tmr_drv.c: 265: }
  5646                           ;tmr_drv.c: 268: return TmrBPrCfgSts;
  5647  0636  083D               	movf	Tmr_TmrBPrSet@TmrBPrCfgSts,w
  5648  0637  0008               	return
  5649  0638                     __end_of_Tmr_TmrBPrSet:	
  5650                           
  5651                           	psect	text7
  5652  0820                     __ptext7:	
  5653 ;; *************** function ___wmul *****************
  5654 ;; Defined at:
  5655 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\Umul16.c"
  5656 ;; Parameters:    Size  Location     Type
  5657 ;;  multiplier      2    0[BANK0 ] unsigned int 
  5658 ;;  multiplicand    2    2[BANK0 ] unsigned int 
  5659 ;; Auto vars:     Size  Location     Type
  5660 ;;  product         2    4[COMMON] unsigned int 
  5661 ;; Return value:  Size  Location     Type
  5662 ;;                  2    0[BANK0 ] unsigned int 
  5663 ;; Registers used:
  5664 ;;		wreg, status,2, status,0
  5665 ;; Tracked objects:
  5666 ;;		On entry : 0/0
  5667 ;;		On exit  : 0/0
  5668 ;;		Unchanged: 0/0
  5669 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5670 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5671 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5672 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5673 ;;      Totals:         2       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5674 ;;Total ram usage:        6 bytes
  5675 ;; Hardware stack levels used:    1
  5676 ;; Hardware stack levels required when called:    2
  5677 ;; This function calls:
  5678 ;;		Nothing
  5679 ;; This function is called by:
  5680 ;;		_Tmr_TmrBPrSet
  5681 ;; This function uses a non-reentrant model
  5682 ;;
  5683                           
  5684                           
  5685                           ;psect for function ___wmul
  5686  0820                     ___wmul:	
  5687                           
  5688                           ;incstack = 0
  5689                           ; Regs used in ___wmul: [wreg+status,2+status,0]
  5690  0820  01F4               	clrf	___wmul@product
  5691  0821  01F5               	clrf	___wmul@product+1
  5692  0822                     l4641:	
  5693  0822  0020               	movlb	0	; select bank0
  5694  0823  1C20               	btfss	___wmul@multiplier,0
  5695  0824  2829               	goto	l1131
  5696  0825  0822               	movf	___wmul@multiplicand,w
  5697  0826  07F4               	addwf	___wmul@product,f
  5698  0827  0823               	movf	___wmul@multiplicand+1,w
  5699  0828  3DF5               	addwfc	___wmul@product+1,f
  5700  0829                     l1131:	
  5701  0829  3001               	movlw	1
  5702  082A                     u3875:	
  5703  082A  35A2               	lslf	___wmul@multiplicand,f
  5704  082B  0DA3               	rlf	___wmul@multiplicand+1,f
  5705  082C  0B89               	decfsz	9,f
  5706  082D  282A               	goto	u3875
  5707  082E  3001               	movlw	1
  5708  082F                     u3885:	
  5709  082F  36A1               	lsrf	___wmul@multiplier+1,f
  5710  0830  0CA0               	rrf	___wmul@multiplier,f
  5711  0831  0B89               	decfsz	9,f
  5712  0832  282F               	goto	u3885
  5713  0833  0820               	movf	___wmul@multiplier,w
  5714  0834  0421               	iorwf	___wmul@multiplier+1,w
  5715  0835  1D03               	btfss	3,2
  5716  0836  2822               	goto	l4641
  5717  0837  0875               	movf	___wmul@product+1,w
  5718  0838  00A1               	movwf	?___wmul+1
  5719  0839  0874               	movf	___wmul@product,w
  5720  083A  00A0               	movwf	?___wmul
  5721  083B  0008               	return
  5722  083C                     __end_of___wmul:	
  5723                           
  5724                           	psect	text8
  5725  0A89                     __ptext8:	
  5726 ;; *************** function ___lmul *****************
  5727 ;; Defined at:
  5728 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\Umul32.c"
  5729 ;; Parameters:    Size  Location     Type
  5730 ;;  multiplier      4    4[BANK0 ] unsigned long 
  5731 ;;  multiplicand    4    8[BANK0 ] unsigned long 
  5732 ;; Auto vars:     Size  Location     Type
  5733 ;;  product         4   12[BANK0 ] unsigned long 
  5734 ;; Return value:  Size  Location     Type
  5735 ;;                  4    4[BANK0 ] unsigned long 
  5736 ;; Registers used:
  5737 ;;		wreg, status,2, status,0
  5738 ;; Tracked objects:
  5739 ;;		On entry : 0/0
  5740 ;;		On exit  : 0/0
  5741 ;;		Unchanged: 0/0
  5742 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5743 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5744 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5745 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5746 ;;      Totals:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5747 ;;Total ram usage:       12 bytes
  5748 ;; Hardware stack levels used:    1
  5749 ;; Hardware stack levels required when called:    2
  5750 ;; This function calls:
  5751 ;;		Nothing
  5752 ;; This function is called by:
  5753 ;;		_Tmr_TmrBPrSet
  5754 ;; This function uses a non-reentrant model
  5755 ;;
  5756                           
  5757                           
  5758                           ;psect for function ___lmul
  5759  0A89                     ___lmul:	
  5760                           
  5761                           ;incstack = 0
  5762                           ; Regs used in ___lmul: [wreg+status,2+status,0]
  5763  0A89  3000               	movlw	0
  5764  0A8A  0020               	movlb	0	; select bank0
  5765  0A8B  00AF               	movwf	___lmul@product+3
  5766  0A8C  3000               	movlw	0
  5767  0A8D  00AE               	movwf	___lmul@product+2
  5768  0A8E  3000               	movlw	0
  5769  0A8F  00AD               	movwf	___lmul@product+1
  5770  0A90  3000               	movlw	0
  5771  0A91  00AC               	movwf	___lmul@product
  5772  0A92                     l3409:	
  5773  0A92  1C24               	btfss	___lmul@multiplier,0
  5774  0A93  2A9C               	goto	l3413
  5775  0A94  0828               	movf	___lmul@multiplicand,w
  5776  0A95  07AC               	addwf	___lmul@product,f
  5777  0A96  0829               	movf	___lmul@multiplicand+1,w
  5778  0A97  3DAD               	addwfc	___lmul@product+1,f
  5779  0A98  082A               	movf	___lmul@multiplicand+2,w
  5780  0A99  3DAE               	addwfc	___lmul@product+2,f
  5781  0A9A  082B               	movf	___lmul@multiplicand+3,w
  5782  0A9B  3DAF               	addwfc	___lmul@product+3,f
  5783  0A9C                     l3413:	
  5784  0A9C  3001               	movlw	1
  5785  0A9D                     u2325:	
  5786  0A9D  35A8               	lslf	___lmul@multiplicand,f
  5787  0A9E  0DA9               	rlf	___lmul@multiplicand+1,f
  5788  0A9F  0DAA               	rlf	___lmul@multiplicand+2,f
  5789  0AA0  0DAB               	rlf	___lmul@multiplicand+3,f
  5790  0AA1  0B89               	decfsz	9,f
  5791  0AA2  2A9D               	goto	u2325
  5792  0AA3  3001               	movlw	1
  5793  0AA4                     u2335:	
  5794  0AA4  36A7               	lsrf	___lmul@multiplier+3,f
  5795  0AA5  0CA6               	rrf	___lmul@multiplier+2,f
  5796  0AA6  0CA5               	rrf	___lmul@multiplier+1,f
  5797  0AA7  0CA4               	rrf	___lmul@multiplier,f
  5798  0AA8  0B89               	decfsz	9,f
  5799  0AA9  2AA4               	goto	u2335
  5800  0AAA  0827               	movf	___lmul@multiplier+3,w
  5801  0AAB  0426               	iorwf	___lmul@multiplier+2,w
  5802  0AAC  0425               	iorwf	___lmul@multiplier+1,w
  5803  0AAD  0424               	iorwf	___lmul@multiplier,w
  5804  0AAE  1D03               	skipz
  5805  0AAF  2A92               	goto	l3409
  5806  0AB0  082F               	movf	___lmul@product+3,w
  5807  0AB1  00A7               	movwf	?___lmul+3
  5808  0AB2  082E               	movf	___lmul@product+2,w
  5809  0AB3  00A6               	movwf	?___lmul+2
  5810  0AB4  082D               	movf	___lmul@product+1,w
  5811  0AB5  00A5               	movwf	?___lmul+1
  5812  0AB6  082C               	movf	___lmul@product,w
  5813  0AB7  00A4               	movwf	?___lmul
  5814  0AB8  0008               	return
  5815  0AB9                     __end_of___lmul:	
  5816                           
  5817                           	psect	text9
  5818  0D3A                     __ptext9:	
  5819 ;; *************** function ___lldiv *****************
  5820 ;; Defined at:
  5821 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\lldiv.c"
  5822 ;; Parameters:    Size  Location     Type
  5823 ;;  divisor         4    0[BANK0 ] unsigned long 
  5824 ;;  dividend        4    4[BANK0 ] unsigned long 
  5825 ;; Auto vars:     Size  Location     Type
  5826 ;;  quotient        4    8[BANK0 ] unsigned long 
  5827 ;;  counter         1   12[BANK0 ] unsigned char 
  5828 ;; Return value:  Size  Location     Type
  5829 ;;                  4    0[BANK0 ] unsigned long 
  5830 ;; Registers used:
  5831 ;;		wreg, status,2, status,0
  5832 ;; Tracked objects:
  5833 ;;		On entry : 0/0
  5834 ;;		On exit  : 0/0
  5835 ;;		Unchanged: 0/0
  5836 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5837 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5838 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5839 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5840 ;;      Totals:         1      13       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5841 ;;Total ram usage:       14 bytes
  5842 ;; Hardware stack levels used:    1
  5843 ;; Hardware stack levels required when called:    2
  5844 ;; This function calls:
  5845 ;;		Nothing
  5846 ;; This function is called by:
  5847 ;;		_Tmr_TmrBPrSet
  5848 ;; This function uses a non-reentrant model
  5849 ;;
  5850                           
  5851                           
  5852                           ;psect for function ___lldiv
  5853  0D3A                     ___lldiv:	
  5854                           
  5855                           ;incstack = 0
  5856                           ; Regs used in ___lldiv: [wreg+status,2+status,0]
  5857  0D3A  3000               	movlw	0
  5858  0D3B  0020               	movlb	0	; select bank0
  5859  0D3C  00AB               	movwf	___lldiv@quotient+3
  5860  0D3D  3000               	movlw	0
  5861  0D3E  00AA               	movwf	___lldiv@quotient+2
  5862  0D3F  3000               	movlw	0
  5863  0D40  00A9               	movwf	___lldiv@quotient+1
  5864  0D41  3000               	movlw	0
  5865  0D42  00A8               	movwf	___lldiv@quotient
  5866  0D43  0823               	movf	___lldiv@divisor+3,w
  5867  0D44  0422               	iorwf	___lldiv@divisor+2,w
  5868  0D45  0421               	iorwf	___lldiv@divisor+1,w
  5869  0D46  0420               	iorwf	___lldiv@divisor,w
  5870  0D47  1903               	skipnz
  5871  0D48  2D84               	goto	l4673
  5872  0D49  01AC               	clrf	___lldiv@counter
  5873  0D4A  0AAC               	incf	___lldiv@counter,f
  5874  0D4B                     l4659:	
  5875  0D4B  1BA3               	btfsc	___lldiv@divisor+3,7
  5876  0D4C  2D59               	goto	l4661
  5877  0D4D  3001               	movlw	1
  5878  0D4E                     u3915:	
  5879  0D4E  35A0               	lslf	___lldiv@divisor,f
  5880  0D4F  0DA1               	rlf	___lldiv@divisor+1,f
  5881  0D50  0DA2               	rlf	___lldiv@divisor+2,f
  5882  0D51  0DA3               	rlf	___lldiv@divisor+3,f
  5883  0D52  0B89               	decfsz	9,f
  5884  0D53  2D4E               	goto	u3915
  5885  0D54  3001               	movlw	1
  5886  0D55  00F4               	movwf	??___lldiv
  5887  0D56  0874               	movf	??___lldiv,w
  5888  0D57  07AC               	addwf	___lldiv@counter,f
  5889  0D58  2D4B               	goto	l4659
  5890  0D59                     l4661:	
  5891  0D59  3001               	movlw	1
  5892  0D5A                     u3935:	
  5893  0D5A  35A8               	lslf	___lldiv@quotient,f
  5894  0D5B  0DA9               	rlf	___lldiv@quotient+1,f
  5895  0D5C  0DAA               	rlf	___lldiv@quotient+2,f
  5896  0D5D  0DAB               	rlf	___lldiv@quotient+3,f
  5897  0D5E  0B89               	decfsz	9,f
  5898  0D5F  2D5A               	goto	u3935
  5899  0D60  0823               	movf	___lldiv@divisor+3,w
  5900  0D61  0227               	subwf	___lldiv@dividend+3,w
  5901  0D62  1D03               	skipz
  5902  0D63  2D6E               	goto	u3945
  5903  0D64  0822               	movf	___lldiv@divisor+2,w
  5904  0D65  0226               	subwf	___lldiv@dividend+2,w
  5905  0D66  1D03               	skipz
  5906  0D67  2D6E               	goto	u3945
  5907  0D68  0821               	movf	___lldiv@divisor+1,w
  5908  0D69  0225               	subwf	___lldiv@dividend+1,w
  5909  0D6A  1D03               	skipz
  5910  0D6B  2D6E               	goto	u3945
  5911  0D6C  0820               	movf	___lldiv@divisor,w
  5912  0D6D  0224               	subwf	___lldiv@dividend,w
  5913  0D6E                     u3945:	
  5914  0D6E  1C03               	skipc
  5915  0D6F  2D79               	goto	l4669
  5916  0D70  0820               	movf	___lldiv@divisor,w
  5917  0D71  02A4               	subwf	___lldiv@dividend,f
  5918  0D72  0821               	movf	___lldiv@divisor+1,w
  5919  0D73  3BA5               	subwfb	___lldiv@dividend+1,f
  5920  0D74  0822               	movf	___lldiv@divisor+2,w
  5921  0D75  3BA6               	subwfb	___lldiv@dividend+2,f
  5922  0D76  0823               	movf	___lldiv@divisor+3,w
  5923  0D77  3BA7               	subwfb	___lldiv@dividend+3,f
  5924  0D78  1428               	bsf	___lldiv@quotient,0
  5925  0D79                     l4669:	
  5926  0D79  3001               	movlw	1
  5927  0D7A                     u3955:	
  5928  0D7A  36A3               	lsrf	___lldiv@divisor+3,f
  5929  0D7B  0CA2               	rrf	___lldiv@divisor+2,f
  5930  0D7C  0CA1               	rrf	___lldiv@divisor+1,f
  5931  0D7D  0CA0               	rrf	___lldiv@divisor,f
  5932  0D7E  0B89               	decfsz	9,f
  5933  0D7F  2D7A               	goto	u3955
  5934  0D80  3001               	movlw	1
  5935  0D81  02AC               	subwf	___lldiv@counter,f
  5936  0D82  1D03               	btfss	3,2
  5937  0D83  2D59               	goto	l4661
  5938  0D84                     l4673:	
  5939  0D84  082B               	movf	___lldiv@quotient+3,w
  5940  0D85  00A3               	movwf	?___lldiv+3
  5941  0D86  082A               	movf	___lldiv@quotient+2,w
  5942  0D87  00A2               	movwf	?___lldiv+2
  5943  0D88  0829               	movf	___lldiv@quotient+1,w
  5944  0D89  00A1               	movwf	?___lldiv+1
  5945  0D8A  0828               	movf	___lldiv@quotient,w
  5946  0D8B  00A0               	movwf	?___lldiv
  5947  0D8C  0008               	return
  5948  0D8D                     __end_of___lldiv:	
  5949                           
  5950                           	psect	text10
  5951  09AF                     __ptext10:	
  5952 ;; *************** function _Tmr_TmrBIrqSet *****************
  5953 ;; Defined at:
  5954 ;;		line 182 in file "../../../Framework/MercuryFwk/Source/c/01_Hal/02_Drv/tmr_drv.c"
  5955 ;; Parameters:    Size  Location     Type
  5956 ;;  TmrNumb         1    wreg     unsigned char 
  5957 ;;  TmrIrqSts       1    4[COMMON] unsigned char 
  5958 ;; Auto vars:     Size  Location     Type
  5959 ;;  TmrNumb         1    5[COMMON] unsigned char 
  5960 ;; Return value:  Size  Location     Type
  5961 ;;                  1    wreg      void 
  5962 ;; Registers used:
  5963 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  5964 ;; Tracked objects:
  5965 ;;		On entry : 0/0
  5966 ;;		On exit  : 0/0
  5967 ;;		Unchanged: 0/0
  5968 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5969 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5970 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5971 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5972 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5973 ;;Total ram usage:        2 bytes
  5974 ;; Hardware stack levels used:    1
  5975 ;; Hardware stack levels required when called:    2
  5976 ;; This function calls:
  5977 ;;		Nothing
  5978 ;; This function is called by:
  5979 ;;		_Tmr_TmrBConfig
  5980 ;; This function uses a non-reentrant model
  5981 ;;
  5982                           
  5983                           
  5984                           ;psect for function _Tmr_TmrBIrqSet
  5985  09AF                     _Tmr_TmrBIrqSet:	
  5986                           
  5987                           ;incstack = 0
  5988                           ; Regs used in _Tmr_TmrBIrqSet: [wreg-fsr0h+status,2+status,0]
  5989                           ;Tmr_TmrBIrqSet@TmrNumb stored from wreg
  5990  09AF  00F5               	movwf	Tmr_TmrBIrqSet@TmrNumb
  5991                           
  5992                           ;tmr_drv.c: 185: switch (TmrNumb)
  5993  09B0  29CC               	goto	l3587
  5994  09B1                     l341:	
  5995                           ;tmr_drv.c: 186: {
  5996                           ;tmr_drv.c: 187: case ((UINT8)(2)):
  5997                           
  5998                           
  5999                           ;tmr_drv.c: 189: PIR1bits.TMR2IF = 0u;
  6000  09B1  0020               	movlb	0	; select bank0
  6001  09B2  1091               	bcf	17,1	;volatile
  6002                           
  6003                           ;tmr_drv.c: 191: PIE1bits.TMR2IE = TmrIrqSts;
  6004  09B3  0C74               	rrf	Tmr_TmrBIrqSet@TmrIrqSts,w
  6005  09B4  0021               	movlb	1	; select bank1
  6006  09B5  1C03               	skipc
  6007  09B6  1091               	bcf	17,1	;volatile
  6008  09B7  1803               	skipnc
  6009  09B8  1491               	bsf	17,1	;volatile
  6010                           
  6011                           ;tmr_drv.c: 192: break;
  6012  09B9  0008               	return
  6013  09BA                     l343:	
  6014                           ;tmr_drv.c: 194: case ((UINT8)(4)):
  6015                           
  6016                           
  6017                           ;tmr_drv.c: 196: PIR3bits.TMR4IF = 0u;
  6018  09BA  0020               	movlb	0	; select bank0
  6019  09BB  1093               	bcf	19,1	;volatile
  6020                           
  6021                           ;tmr_drv.c: 198: PIE3bits.TMR4IE = TmrIrqSts;
  6022  09BC  0C74               	rrf	Tmr_TmrBIrqSet@TmrIrqSts,w
  6023  09BD  0021               	movlb	1	; select bank1
  6024  09BE  1C03               	skipc
  6025  09BF  1093               	bcf	19,1	;volatile
  6026  09C0  1803               	skipnc
  6027  09C1  1493               	bsf	19,1	;volatile
  6028                           
  6029                           ;tmr_drv.c: 199: break;
  6030  09C2  0008               	return
  6031  09C3                     l344:	
  6032                           ;tmr_drv.c: 201: case ((UINT8)(6)):
  6033                           
  6034                           
  6035                           ;tmr_drv.c: 203: PIR3bits.TMR6IF = 0u;
  6036  09C3  0020               	movlb	0	; select bank0
  6037  09C4  1193               	bcf	19,3	;volatile
  6038                           
  6039                           ;tmr_drv.c: 205: PIE3bits.TMR6IE = TmrIrqSts;
  6040  09C5  0C74               	rrf	Tmr_TmrBIrqSet@TmrIrqSts,w
  6041  09C6  0021               	movlb	1	; select bank1
  6042  09C7  1C03               	skipc
  6043  09C8  1193               	bcf	19,3	;volatile
  6044  09C9  1803               	skipnc
  6045  09CA  1593               	bsf	19,3	;volatile
  6046                           
  6047                           ;tmr_drv.c: 210: }
  6048                           
  6049                           ;tmr_drv.c: 209: break;
  6050                           
  6051                           ;tmr_drv.c: 208: default:
  6052                           
  6053                           ;tmr_drv.c: 206: break;
  6054  09CB  0008               	return
  6055  09CC                     l3587:	
  6056  09CC  0875               	movf	Tmr_TmrBIrqSet@TmrNumb,w
  6057                           
  6058                           ; Switch size 1, requested type "space"
  6059                           ; Number of cases is 3, Range of values is 2 to 6
  6060                           ; switch strategies available:
  6061                           ; Name         Instructions Cycles
  6062                           ; simple_byte           10     6 (average)
  6063                           ; direct_byte           19     9 (fixed)
  6064                           ; jumptable            263     9 (fixed)
  6065                           ;	Chosen strategy is simple_byte
  6066  09CD  3A02               	xorlw	2	; case 2
  6067  09CE  1903               	skipnz
  6068  09CF  29B1               	goto	l341
  6069  09D0  3A06               	xorlw	6	; case 4
  6070  09D1  1903               	skipnz
  6071  09D2  29BA               	goto	l343
  6072  09D3  3A02               	xorlw	2	; case 6
  6073  09D4  1903               	skipnz
  6074  09D5  29C3               	goto	l344
  6075  09D6  29D7               	goto	l346
  6076  09D7                     l346:	
  6077  09D7  0008               	return
  6078  09D8                     __end_of_Tmr_TmrBIrqSet:	
  6079                           
  6080                           	psect	text11
  6081  17A0                     __ptext11:	
  6082 ;; *************** function _Tmr_StartTmr *****************
  6083 ;; Defined at:
  6084 ;;		line 279 in file "../../../Framework/MercuryFwk/Source/c/01_Hal/02_Drv/tmr_drv.c"
  6085 ;; Parameters:    Size  Location     Type
  6086 ;;  TmrNumb         1    wreg     unsigned char 
  6087 ;; Auto vars:     Size  Location     Type
  6088 ;;  TmrNumb         1    4[COMMON] unsigned char 
  6089 ;; Return value:  Size  Location     Type
  6090 ;;                  1    wreg      void 
  6091 ;; Registers used:
  6092 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  6093 ;; Tracked objects:
  6094 ;;		On entry : 0/0
  6095 ;;		On exit  : 0/0
  6096 ;;		Unchanged: 0/0
  6097 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6098 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6099 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6100 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6101 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6102 ;;Total ram usage:        1 bytes
  6103 ;; Hardware stack levels used:    1
  6104 ;; Hardware stack levels required when called:    2
  6105 ;; This function calls:
  6106 ;;		Nothing
  6107 ;; This function is called by:
  6108 ;;		_Tmr_TmrBConfig
  6109 ;; This function uses a non-reentrant model
  6110 ;;
  6111                           
  6112                           
  6113                           ;psect for function _Tmr_StartTmr
  6114  17A0                     _Tmr_StartTmr:	
  6115                           
  6116                           ;incstack = 0
  6117                           ; Regs used in _Tmr_StartTmr: [wreg-fsr0h+status,2+status,0]
  6118                           ;Tmr_StartTmr@TmrNumb stored from wreg
  6119  17A0  00F4               	movwf	Tmr_StartTmr@TmrNumb
  6120                           
  6121                           ;tmr_drv.c: 282: switch (TmrNumb)
  6122  17A1  2FAB               	goto	l3617
  6123  17A2                     l361:	
  6124                           ;tmr_drv.c: 283: {
  6125                           ;tmr_drv.c: 284: case ((UINT8)(2)):
  6126                           
  6127                           
  6128                           ;tmr_drv.c: 286: T2CONbits.TMR2ON = 1u;
  6129  17A2  0020               	movlb	0	; select bank0
  6130  17A3  151C               	bsf	28,2	;volatile
  6131                           
  6132                           ;tmr_drv.c: 287: break;
  6133  17A4  0008               	return
  6134  17A5                     l363:	
  6135                           ;tmr_drv.c: 289: case ((UINT8)(4)):
  6136                           
  6137                           
  6138                           ;tmr_drv.c: 291: T4CONbits.TMR4ON = 1u;
  6139  17A5  0028               	movlb	8	; select bank8
  6140  17A6  1517               	bsf	23,2	;volatile
  6141                           
  6142                           ;tmr_drv.c: 292: break;
  6143  17A7  0008               	return
  6144  17A8                     l364:	
  6145                           ;tmr_drv.c: 294: case ((UINT8)(6)):
  6146                           
  6147                           
  6148                           ;tmr_drv.c: 296: T6CONbits.TMR6ON = 1u;
  6149  17A8  0028               	movlb	8	; select bank8
  6150  17A9  151E               	bsf	30,2	;volatile
  6151                           
  6152                           ;tmr_drv.c: 301: }
  6153                           
  6154                           ;tmr_drv.c: 300: break;
  6155                           
  6156                           ;tmr_drv.c: 299: default:
  6157                           
  6158                           ;tmr_drv.c: 297: break;
  6159  17AA  0008               	return
  6160  17AB                     l3617:	
  6161  17AB  0874               	movf	Tmr_StartTmr@TmrNumb,w
  6162                           
  6163                           ; Switch size 1, requested type "space"
  6164                           ; Number of cases is 3, Range of values is 2 to 6
  6165                           ; switch strategies available:
  6166                           ; Name         Instructions Cycles
  6167                           ; simple_byte           10     6 (average)
  6168                           ; direct_byte           19     9 (fixed)
  6169                           ; jumptable            263     9 (fixed)
  6170                           ;	Chosen strategy is simple_byte
  6171  17AC  3A02               	xorlw	2	; case 2
  6172  17AD  1903               	skipnz
  6173  17AE  2FA2               	goto	l361
  6174  17AF  3A06               	xorlw	6	; case 4
  6175  17B0  1903               	skipnz
  6176  17B1  2FA5               	goto	l363
  6177  17B2  3A02               	xorlw	2	; case 6
  6178  17B3  1903               	skipnz
  6179  17B4  2FA8               	goto	l364
  6180  17B5  2FB6               	goto	l366
  6181  17B6                     l366:	
  6182  17B6  0008               	return
  6183  17B7                     __end_of_Tmr_StartTmr:	
  6184                           
  6185                           	psect	text12
  6186  0E57                     __ptext12:	
  6187 ;; *************** function _TmrBInit *****************
  6188 ;; Defined at:
  6189 ;;		line 72 in file "../../../Framework/MercuryFwk/Source/c/01_Hal/02_Drv/tmr_drv.c"
  6190 ;; Parameters:    Size  Location     Type
  6191 ;;  TmrNumb         1    wreg     unsigned char 
  6192 ;;  Prescaler       1    4[COMMON] unsigned char 
  6193 ;;  Postscaler      1    5[COMMON] unsigned char 
  6194 ;; Auto vars:     Size  Location     Type
  6195 ;;  TmrNumb         1    1[BANK0 ] unsigned char 
  6196 ;; Return value:  Size  Location     Type
  6197 ;;                  1    wreg      void 
  6198 ;; Registers used:
  6199 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  6200 ;; Tracked objects:
  6201 ;;		On entry : 0/0
  6202 ;;		On exit  : 0/0
  6203 ;;		Unchanged: 0/0
  6204 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6205 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6206 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6207 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6208 ;;      Totals:         2       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6209 ;;Total ram usage:        4 bytes
  6210 ;; Hardware stack levels used:    1
  6211 ;; Hardware stack levels required when called:    2
  6212 ;; This function calls:
  6213 ;;		Nothing
  6214 ;; This function is called by:
  6215 ;;		_Tmr_TmrBConfig
  6216 ;; This function uses a non-reentrant model
  6217 ;;
  6218                           
  6219                           
  6220                           ;psect for function _TmrBInit
  6221  0E57                     _TmrBInit:	
  6222                           
  6223                           ;incstack = 0
  6224                           ; Regs used in _TmrBInit: [wreg-fsr0h+status,2+status,0]
  6225                           ;TmrBInit@TmrNumb stored from wreg
  6226  0E57  0020               	movlb	0	; select bank0
  6227  0E58  00A1               	movwf	TmrBInit@TmrNumb
  6228                           
  6229                           ;tmr_drv.c: 75: switch (TmrNumb)
  6230  0E59  2EC5               	goto	l4711
  6231  0E5A                     l316:	
  6232                           ;tmr_drv.c: 80: {
  6233                           ;tmr_drv.c: 81: case ((UINT8)(1)):
  6234                           
  6235                           ;tmr_drv.c: 79: switch (Prescaler)
  6236                           
  6237                           ;tmr_drv.c: 76: {
  6238                           ;tmr_drv.c: 77: case ((UINT8)(2)):
  6239                           
  6240                           
  6241                           ;tmr_drv.c: 83: T2CONbits.T2CKPS0 = 0u;
  6242  0E5A  101C               	bcf	28,0	;volatile
  6243  0E5B  2E5D               	goto	L2
  6244  0E5C                     l318:	
  6245                           ;tmr_drv.c: 87: case ((UINT8)(4)):
  6246                           
  6247                           ;tmr_drv.c: 85: break;
  6248                           
  6249                           ;tmr_drv.c: 84: T2CONbits.T2CKPS1 = 0u;
  6250                           
  6251                           
  6252                           ;tmr_drv.c: 89: T2CONbits.T2CKPS0 = 1u;
  6253  0E5C  141C               	bsf	28,0	;volatile
  6254  0E5D                     L2:	
  6255                           
  6256                           ;tmr_drv.c: 90: T2CONbits.T2CKPS1 = 0u;
  6257  0E5D  109C               	bcf	28,1	;volatile
  6258                           
  6259                           ;tmr_drv.c: 91: break;
  6260  0E5E  2E6D               	goto	l4695
  6261  0E5F                     l319:	
  6262                           ;tmr_drv.c: 93: case ((UINT8)(16)):
  6263                           
  6264                           
  6265                           ;tmr_drv.c: 94: T2CONbits.T2CKPS0 = 0u;
  6266  0E5F  101C               	bcf	28,0	;volatile
  6267                           
  6268                           ;tmr_drv.c: 95: T2CONbits.T2CKPS1 = 1u;
  6269  0E60  149C               	bsf	28,1	;volatile
  6270                           
  6271                           ;tmr_drv.c: 100: }
  6272                           
  6273                           ;tmr_drv.c: 99: break;
  6274                           
  6275                           ;tmr_drv.c: 98: default:
  6276                           
  6277                           ;tmr_drv.c: 96: break;
  6278  0E61  2E6D               	goto	l4695
  6279  0E62                     l4693:	
  6280  0E62  0874               	movf	TmrBInit@Prescaler,w
  6281                           
  6282                           ; Switch size 1, requested type "space"
  6283                           ; Number of cases is 3, Range of values is 1 to 16
  6284                           ; switch strategies available:
  6285                           ; Name         Instructions Cycles
  6286                           ; simple_byte           10     6 (average)
  6287                           ; direct_byte           41     9 (fixed)
  6288                           ; jumptable            263     9 (fixed)
  6289                           ;	Chosen strategy is simple_byte
  6290  0E63  3A01               	xorlw	1	; case 1
  6291  0E64  1903               	skipnz
  6292  0E65  2E5A               	goto	l316
  6293  0E66  3A05               	xorlw	5	; case 4
  6294  0E67  1903               	skipnz
  6295  0E68  2E5C               	goto	l318
  6296  0E69  3A14               	xorlw	20	; case 16
  6297  0E6A  1903               	skipnz
  6298  0E6B  2E5F               	goto	l319
  6299  0E6C  2E6D               	goto	l4695
  6300  0E6D                     l4695:	
  6301                           
  6302                           ;tmr_drv.c: 103: T2CONbits.T2OUTPS = (Postscaler - 1);
  6303  0E6D  0875               	movf	TmrBInit@Postscaler,w
  6304  0E6E  3EFF               	addlw	255
  6305  0E6F  00A0               	movwf	??_TmrBInit
  6306  0E70  0DA0               	rlf	??_TmrBInit,f
  6307  0E71  0DA0               	rlf	??_TmrBInit,f
  6308  0E72  0DA0               	rlf	??_TmrBInit,f
  6309  0E73  081C               	movf	28,w	;volatile
  6310  0E74  0620               	xorwf	??_TmrBInit,w
  6311  0E75  3987               	andlw	-121
  6312  0E76  0620               	xorwf	??_TmrBInit,w
  6313  0E77  009C               	movwf	28	;volatile
  6314                           
  6315                           ;tmr_drv.c: 104: break;
  6316  0E78  0008               	return
  6317  0E79                     l324:	
  6318                           ;tmr_drv.c: 109: {
  6319                           ;tmr_drv.c: 110: case ((UINT8)(1)):
  6320                           
  6321                           ;tmr_drv.c: 108: switch (Prescaler)
  6322                           
  6323                           ;tmr_drv.c: 106: case ((UINT8)(4)):
  6324                           
  6325                           
  6326                           ;tmr_drv.c: 112: T4CONbits.T4CKPS0 = 0u;
  6327  0E79  0028               	movlb	8	; select bank8
  6328  0E7A  1017               	bcf	23,0	;volatile
  6329  0E7B  2E7E               	goto	L3
  6330  0E7C                     l326:	
  6331                           ;tmr_drv.c: 116: case ((UINT8)(4)):
  6332                           
  6333                           ;tmr_drv.c: 114: break;
  6334                           
  6335                           ;tmr_drv.c: 113: T4CONbits.T4CKPS1 = 0u;
  6336                           
  6337                           
  6338                           ;tmr_drv.c: 118: T4CONbits.T4CKPS0 = 1u;
  6339  0E7C  0028               	movlb	8	; select bank8
  6340  0E7D  1417               	bsf	23,0	;volatile
  6341  0E7E                     L3:	
  6342                           
  6343                           ;tmr_drv.c: 119: T4CONbits.T4CKPS1 = 0u;
  6344  0E7E  1097               	bcf	23,1	;volatile
  6345                           
  6346                           ;tmr_drv.c: 120: break;
  6347  0E7F  2E8F               	goto	l4701
  6348  0E80                     l327:	
  6349                           ;tmr_drv.c: 122: case ((UINT8)(16)):
  6350                           
  6351                           
  6352                           ;tmr_drv.c: 123: T4CONbits.T4CKPS0 = 0u;
  6353  0E80  0028               	movlb	8	; select bank8
  6354  0E81  1017               	bcf	23,0	;volatile
  6355                           
  6356                           ;tmr_drv.c: 124: T4CONbits.T4CKPS1 = 1u;
  6357  0E82  1497               	bsf	23,1	;volatile
  6358                           
  6359                           ;tmr_drv.c: 129: }
  6360                           
  6361                           ;tmr_drv.c: 128: break;
  6362                           
  6363                           ;tmr_drv.c: 127: default:
  6364                           
  6365                           ;tmr_drv.c: 125: break;
  6366  0E83  2E8F               	goto	l4701
  6367  0E84                     l4699:	
  6368  0E84  0874               	movf	TmrBInit@Prescaler,w
  6369                           
  6370                           ; Switch size 1, requested type "space"
  6371                           ; Number of cases is 3, Range of values is 1 to 16
  6372                           ; switch strategies available:
  6373                           ; Name         Instructions Cycles
  6374                           ; simple_byte           10     6 (average)
  6375                           ; direct_byte           41     9 (fixed)
  6376                           ; jumptable            263     9 (fixed)
  6377                           ;	Chosen strategy is simple_byte
  6378  0E85  3A01               	xorlw	1	; case 1
  6379  0E86  1903               	skipnz
  6380  0E87  2E79               	goto	l324
  6381  0E88  3A05               	xorlw	5	; case 4
  6382  0E89  1903               	skipnz
  6383  0E8A  2E7C               	goto	l326
  6384  0E8B  3A14               	xorlw	20	; case 16
  6385  0E8C  1903               	skipnz
  6386  0E8D  2E80               	goto	l327
  6387  0E8E  2E8F               	goto	l4701
  6388  0E8F                     l4701:	
  6389                           
  6390                           ;tmr_drv.c: 132: T4CONbits.T4OUTPS = (Postscaler - 1);
  6391  0E8F  0875               	movf	TmrBInit@Postscaler,w
  6392  0E90  3EFF               	addlw	255
  6393  0E91  0020               	movlb	0	; select bank0
  6394  0E92  00A0               	movwf	??_TmrBInit
  6395  0E93  0DA0               	rlf	??_TmrBInit,f
  6396  0E94  0DA0               	rlf	??_TmrBInit,f
  6397  0E95  0DA0               	rlf	??_TmrBInit,f
  6398  0E96  0028               	movlb	8	; select bank8
  6399  0E97  0817               	movf	23,w	;volatile
  6400  0E98  0020               	movlb	0	; select bank0
  6401  0E99  0620               	xorwf	??_TmrBInit,w
  6402  0E9A  3987               	andlw	-121
  6403  0E9B  0620               	xorwf	??_TmrBInit,w
  6404  0E9C  0028               	movlb	8	; select bank8
  6405  0E9D  0097               	movwf	23	;volatile
  6406                           
  6407                           ;tmr_drv.c: 133: break;
  6408  0E9E  0008               	return
  6409  0E9F                     l331:	
  6410                           ;tmr_drv.c: 138: {
  6411                           ;tmr_drv.c: 139: case ((UINT8)(1)):
  6412                           
  6413                           ;tmr_drv.c: 137: switch (Prescaler)
  6414                           
  6415                           ;tmr_drv.c: 135: case ((UINT8)(6)):
  6416                           
  6417                           
  6418                           ;tmr_drv.c: 141: T6CONbits.T6CKPS0 = 0u;
  6419  0E9F  0028               	movlb	8	; select bank8
  6420  0EA0  101E               	bcf	30,0	;volatile
  6421  0EA1  2EA4               	goto	L4
  6422  0EA2                     l333:	
  6423                           ;tmr_drv.c: 145: case ((UINT8)(4)):
  6424                           
  6425                           ;tmr_drv.c: 143: break;
  6426                           
  6427                           ;tmr_drv.c: 142: T6CONbits.T6CKPS1 = 0u;
  6428                           
  6429                           
  6430                           ;tmr_drv.c: 147: T6CONbits.T6CKPS0 = 1u;
  6431  0EA2  0028               	movlb	8	; select bank8
  6432  0EA3  141E               	bsf	30,0	;volatile
  6433  0EA4                     L4:	
  6434                           
  6435                           ;tmr_drv.c: 148: T6CONbits.T6CKPS1 = 0u;
  6436  0EA4  109E               	bcf	30,1	;volatile
  6437                           
  6438                           ;tmr_drv.c: 149: break;
  6439  0EA5  2EB5               	goto	l4707
  6440  0EA6                     l334:	
  6441                           ;tmr_drv.c: 151: case ((UINT8)(16)):
  6442                           
  6443                           
  6444                           ;tmr_drv.c: 152: T6CONbits.T6CKPS0 = 0u;
  6445  0EA6  0028               	movlb	8	; select bank8
  6446  0EA7  101E               	bcf	30,0	;volatile
  6447                           
  6448                           ;tmr_drv.c: 153: T6CONbits.T6CKPS1 = 1u;
  6449  0EA8  149E               	bsf	30,1	;volatile
  6450                           
  6451                           ;tmr_drv.c: 158: }
  6452                           
  6453                           ;tmr_drv.c: 157: break;
  6454                           
  6455                           ;tmr_drv.c: 156: default:
  6456                           
  6457                           ;tmr_drv.c: 154: break;
  6458  0EA9  2EB5               	goto	l4707
  6459  0EAA                     l4705:	
  6460  0EAA  0874               	movf	TmrBInit@Prescaler,w
  6461                           
  6462                           ; Switch size 1, requested type "space"
  6463                           ; Number of cases is 3, Range of values is 1 to 16
  6464                           ; switch strategies available:
  6465                           ; Name         Instructions Cycles
  6466                           ; simple_byte           10     6 (average)
  6467                           ; direct_byte           41     9 (fixed)
  6468                           ; jumptable            263     9 (fixed)
  6469                           ;	Chosen strategy is simple_byte
  6470  0EAB  3A01               	xorlw	1	; case 1
  6471  0EAC  1903               	skipnz
  6472  0EAD  2E9F               	goto	l331
  6473  0EAE  3A05               	xorlw	5	; case 4
  6474  0EAF  1903               	skipnz
  6475  0EB0  2EA2               	goto	l333
  6476  0EB1  3A14               	xorlw	20	; case 16
  6477  0EB2  1903               	skipnz
  6478  0EB3  2EA6               	goto	l334
  6479  0EB4  2EB5               	goto	l4707
  6480  0EB5                     l4707:	
  6481                           
  6482                           ;tmr_drv.c: 161: T6CONbits.T6OUTPS = (Postscaler - 1);
  6483  0EB5  0875               	movf	TmrBInit@Postscaler,w
  6484  0EB6  3EFF               	addlw	255
  6485  0EB7  0020               	movlb	0	; select bank0
  6486  0EB8  00A0               	movwf	??_TmrBInit
  6487  0EB9  0DA0               	rlf	??_TmrBInit,f
  6488  0EBA  0DA0               	rlf	??_TmrBInit,f
  6489  0EBB  0DA0               	rlf	??_TmrBInit,f
  6490  0EBC  0028               	movlb	8	; select bank8
  6491  0EBD  081E               	movf	30,w	;volatile
  6492  0EBE  0020               	movlb	0	; select bank0
  6493  0EBF  0620               	xorwf	??_TmrBInit,w
  6494  0EC0  3987               	andlw	-121
  6495  0EC1  0620               	xorwf	??_TmrBInit,w
  6496  0EC2  0028               	movlb	8	; select bank8
  6497  0EC3  009E               	movwf	30	;volatile
  6498                           
  6499                           ;tmr_drv.c: 166: }
  6500                           
  6501                           ;tmr_drv.c: 165: break;
  6502                           
  6503                           ;tmr_drv.c: 164: default:
  6504                           
  6505                           ;tmr_drv.c: 162: break;
  6506  0EC4  0008               	return
  6507  0EC5                     l4711:	
  6508  0EC5  0020               	movlb	0	; select bank0
  6509  0EC6  0821               	movf	TmrBInit@TmrNumb,w
  6510                           
  6511                           ; Switch size 1, requested type "space"
  6512                           ; Number of cases is 3, Range of values is 2 to 6
  6513                           ; switch strategies available:
  6514                           ; Name         Instructions Cycles
  6515                           ; simple_byte           10     6 (average)
  6516                           ; direct_byte           19     9 (fixed)
  6517                           ; jumptable            263     9 (fixed)
  6518                           ;	Chosen strategy is simple_byte
  6519  0EC7  3A02               	xorlw	2	; case 2
  6520  0EC8  1903               	skipnz
  6521  0EC9  2E62               	goto	l4693
  6522  0ECA  3A06               	xorlw	6	; case 4
  6523  0ECB  1903               	skipnz
  6524  0ECC  2E84               	goto	l4699
  6525  0ECD  3A02               	xorlw	2	; case 6
  6526  0ECE  1903               	skipnz
  6527  0ECF  2EAA               	goto	l4705
  6528  0ED0  2ED1               	goto	l337
  6529  0ED1                     l337:	
  6530  0ED1  0008               	return
  6531  0ED2                     __end_of_TmrBInit:	
  6532                           
  6533                           	psect	text13
  6534  1727                     __ptext13:	
  6535 ;; *************** function _MainScheduler *****************
  6536 ;; Defined at:
  6537 ;;		line 79 in file "../../../Framework/MercuryFwk/Source/c/02_Osl/os_sched.c"
  6538 ;; Parameters:    Size  Location     Type
  6539 ;;		None
  6540 ;; Auto vars:     Size  Location     Type
  6541 ;;		None
  6542 ;; Return value:  Size  Location     Type
  6543 ;;                  1    wreg      void 
  6544 ;; Registers used:
  6545 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6546 ;; Tracked objects:
  6547 ;;		On entry : 0/0
  6548 ;;		On exit  : 0/0
  6549 ;;		Unchanged: 0/0
  6550 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6551 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6552 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6553 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6554 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6555 ;;Total ram usage:        0 bytes
  6556 ;; Hardware stack levels used:    1
  6557 ;; Hardware stack levels required when called:    9
  6558 ;; This function calls:
  6559 ;;		_InitializeTasks
  6560 ;;		_ScheduleTasks
  6561 ;; This function is called by:
  6562 ;;		_main
  6563 ;; This function uses a non-reentrant model
  6564 ;;
  6565                           
  6566                           
  6567                           ;psect for function _MainScheduler
  6568  1727                     _MainScheduler:	
  6569                           
  6570                           ;os_sched.c: 82: InitializeTasks();
  6571                           
  6572                           ;incstack = 0
  6573                           ; Regs used in _MainScheduler: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  6574  1727  318C  249A  3197   	fcall	_InitializeTasks
  6575                           
  6576                           ;os_sched.c: 84: SystemState = RunningState;
  6577  172A  0020               	movlb	0	; select bank0
  6578  172B  01EC               	clrf	_SystemState
  6579  172C  0AEC               	incf	_SystemState,f
  6580  172D                     l5167:	
  6581                           ;os_sched.c: 91: while(((UINT8)(1)))
  6582                           
  6583                           
  6584                           ;os_sched.c: 92: {
  6585                           ;os_sched.c: 94: if (MainSystemTimebaseFlag == CallTaskPhase)
  6586  172D  0021               	movlb	1	; select bank1
  6587  172E  086F               	movf	_MainSystemTimebaseFlag^(0+128),w
  6588  172F  1D03               	btfss	3,2
  6589  1730  2F2D               	goto	l5167
  6590                           
  6591                           ;os_sched.c: 95: {
  6592                           ;os_sched.c: 97: ScheduleTasks();
  6593  1731  3184  24BE  3197   	fcall	_ScheduleTasks
  6594                           
  6595                           ;os_sched.c: 99: MainSystemTimebaseFlag = WaitTriggerPhase;
  6596  1734  0021               	movlb	1	; select bank1
  6597  1735  01EF               	clrf	_MainSystemTimebaseFlag^(0+128)
  6598  1736  0AEF               	incf	_MainSystemTimebaseFlag^(0+128),f
  6599  1737  2F2D               	goto	l5167
  6600  1738                     __end_of_MainScheduler:	
  6601                           
  6602                           	psect	text14
  6603  04BE                     __ptext14:	
  6604 ;; *************** function _ScheduleTasks *****************
  6605 ;; Defined at:
  6606 ;;		line 130 in file "../../../Framework/MercuryFwk/Source/c/02_Osl/os_sched.c"
  6607 ;; Parameters:    Size  Location     Type
  6608 ;;		None
  6609 ;; Auto vars:     Size  Location     Type
  6610 ;;  ActiveTaskIn    1   67[BANK0 ] unsigned char 
  6611 ;; Return value:  Size  Location     Type
  6612 ;;                  1    wreg      void 
  6613 ;; Registers used:
  6614 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6615 ;; Tracked objects:
  6616 ;;		On entry : 0/0
  6617 ;;		On exit  : 0/0
  6618 ;;		Unchanged: 0/0
  6619 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6620 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6621 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6622 ;;      Temps:          0       0       0       0       0       0       0       0       6       0       0       0       
      +0       0
  6623 ;;      Totals:         0       1       0       0       0       0       0       0       6       0       0       0       
      +0       0
  6624 ;;Total ram usage:        7 bytes
  6625 ;; Hardware stack levels used:    1
  6626 ;; Hardware stack levels required when called:    8
  6627 ;; This function calls:
  6628 ;;		_App_MainTask
  6629 ;;		_I2cSlv_MainTask
  6630 ;;		_I2c_DataReceiveSm
  6631 ;;		_Led_MainTask
  6632 ;;		_Wdg_MainTask
  6633 ;; This function is called by:
  6634 ;;		_MainScheduler
  6635 ;; This function uses a non-reentrant model
  6636 ;;
  6637                           
  6638                           
  6639                           ;psect for function _ScheduleTasks
  6640  04BE                     _ScheduleTasks:	
  6641                           
  6642                           ;os_sched.c: 133: UINT8 ActiveTaskIndex = 0u;
  6643                           
  6644                           ;incstack = 0
  6645                           ; Regs used in _ScheduleTasks: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  6646  04BE  0020               	movlb	0	; select bank0
  6647  04BF  01E3               	clrf	ScheduleTasks@ActiveTaskIndex
  6648                           
  6649                           ;os_sched.c: 136: for (ActiveTaskIndex = 0u; ActiveTaskIndex < TaskNumber; ActiveTaskInd
      +                          ex++)
  6650  04C0  01E3               	clrf	ScheduleTasks@ActiveTaskIndex
  6651  04C1  300A               	movlw	low (_TaskNumber| (0+32768))
  6652  04C2  0084               	movwf	4
  6653  04C3  3090               	movlw	high (_TaskNumber| (0+32768))
  6654  04C4  0085               	movwf	5
  6655  04C5  3F00               	moviw [0]fsr0
  6656  04C6  0027               	movlb	7	; select bank7
  6657  04C7  00A0               	movwf	??_ScheduleTasks^(0+896)
  6658  04C8  3F01               	moviw [1]fsr0
  6659  04C9                     L5:	
  6660  04C9  00A1               	movwf	(??_ScheduleTasks^(0+896)+1)
  6661  04CA  0020               	movlb	0	; select bank0
  6662  04CB  0863               	movf	ScheduleTasks@ActiveTaskIndex,w
  6663  04CC  0027               	movlb	7	; select bank7
  6664  04CD  00A2               	movwf	(??_ScheduleTasks+2)^(0+896)
  6665  04CE  01A3               	clrf	((??_ScheduleTasks+2)^(0+896)+1)
  6666  04CF  0821               	movf	(??_ScheduleTasks+1)^(0+896),w
  6667  04D0  0223               	subwf	(??_ScheduleTasks+3)^(0+896),w
  6668  04D1  1D03               	skipz
  6669  04D2  2CD5               	goto	u4645
  6670  04D3  0820               	movf	??_ScheduleTasks^(0+896),w
  6671  04D4  0222               	subwf	(??_ScheduleTasks+2)^(0+896),w
  6672  04D5                     u4645:	
  6673  04D5  1803               	btfsc	3,0
  6674  04D6  0008               	return
  6675                           
  6676                           ;os_sched.c: 137: {
  6677                           ;os_sched.c: 138: if (TaskTable[ActiveTaskIndex].Counter >= (TaskTable[ActiveTaskIndex].
      +                          Timeout))
  6678  04D7  0020               	movlb	0	; select bank0
  6679  04D8  0863               	movf	ScheduleTasks@ActiveTaskIndex,w
  6680  04D9  0027               	movlb	7	; select bank7
  6681  04DA  00A0               	movwf	??_ScheduleTasks^(0+896)
  6682  04DB  3002               	movlw	2
  6683  04DC                     u4655:	
  6684  04DC  35A0               	lslf	??_ScheduleTasks^(0+896),f
  6685  04DD  3EFF               	addlw	-1
  6686  04DE  1D03               	skipz
  6687  04DF  2CDC               	goto	u4655
  6688  04E0  3520               	lslf	??_ScheduleTasks^(0+896),w
  6689  04E1  3E05               	addlw	5
  6690  04E2  3E20               	addlw	(low (_TaskTable| (0+256)))& (0+255)
  6691  04E3  0086               	movwf	6
  6692  04E4  3001               	movlw	1	; select bank2/3
  6693  04E5  0087               	movwf	7
  6694  04E6  3F40               	moviw [0]fsr1
  6695  04E7  00A1               	movwf	(??_ScheduleTasks+1)^(0+896)
  6696  04E8  3F41               	moviw [1]fsr1
  6697  04E9  00A2               	movwf	((??_ScheduleTasks+1)^(0+896)+1)
  6698  04EA  0020               	movlb	0	; select bank0
  6699  04EB  0863               	movf	ScheduleTasks@ActiveTaskIndex,w
  6700  04EC  0027               	movlb	7	; select bank7
  6701  04ED  00A3               	movwf	(??_ScheduleTasks+3)^(0+896)
  6702  04EE  3002               	movlw	2
  6703  04EF                     u4665:	
  6704  04EF  35A3               	lslf	(??_ScheduleTasks+3)^(0+896),f
  6705  04F0  3EFF               	addlw	-1
  6706  04F1  1D03               	skipz
  6707  04F2  2CEF               	goto	u4665
  6708  04F3  3523               	lslf	(??_ScheduleTasks+3)^(0+896),w
  6709  04F4  3E03               	addlw	3
  6710  04F5  3E20               	addlw	(low (_TaskTable| (0+256)))& (0+255)
  6711  04F6  0086               	movwf	6
  6712  04F7  3001               	movlw	1	; select bank2/3
  6713  04F8  0087               	movwf	7
  6714  04F9  3F40               	moviw [0]fsr1
  6715  04FA  00A4               	movwf	(??_ScheduleTasks+4)^(0+896)
  6716  04FB  3F41               	moviw [1]fsr1
  6717  04FC  00A5               	movwf	((??_ScheduleTasks+4)^(0+896)+1)
  6718  04FD  0822               	movf	(??_ScheduleTasks+2)^(0+896),w
  6719  04FE  0225               	subwf	(??_ScheduleTasks+5)^(0+896),w
  6720  04FF  1D03               	skipz
  6721  0500  2D03               	goto	u4675
  6722  0501  0821               	movf	(??_ScheduleTasks+1)^(0+896),w
  6723  0502  0224               	subwf	(??_ScheduleTasks+4)^(0+896),w
  6724  0503                     u4675:	
  6725  0503  1C03               	skipc
  6726  0504  2D4F               	goto	l5141
  6727                           
  6728                           ;os_sched.c: 139: {
  6729                           ;os_sched.c: 140: TaskTable[ActiveTaskIndex].Counter = ((UINT8)(0));
  6730  0505  0020               	movlb	0	; select bank0
  6731  0506  0863               	movf	ScheduleTasks@ActiveTaskIndex,w
  6732  0507  0027               	movlb	7	; select bank7
  6733  0508  00A0               	movwf	??_ScheduleTasks^(0+896)
  6734  0509  3002               	movlw	2
  6735  050A                     u4685:	
  6736  050A  35A0               	lslf	??_ScheduleTasks^(0+896),f
  6737  050B  3EFF               	addlw	-1
  6738  050C  1D03               	skipz
  6739  050D  2D0A               	goto	u4685
  6740  050E  3520               	lslf	??_ScheduleTasks^(0+896),w
  6741  050F  3E03               	addlw	3
  6742  0510  3E20               	addlw	(low (_TaskTable| (0+256)))& (0+255)
  6743  0511  0086               	movwf	6
  6744  0512  3001               	movlw	1	; select bank2/3
  6745  0513  0087               	movwf	7
  6746  0514  3000               	movlw	0
  6747  0515  3FC0               	movwi [0]fsr1
  6748  0516  3FC1               	movwi [1]fsr1
  6749                           
  6750                           ;os_sched.c: 141: TaskTable[ActiveTaskIndex].State = TaskRunning;
  6751  0517  0020               	movlb	0	; select bank0
  6752  0518  0863               	movf	ScheduleTasks@ActiveTaskIndex,w
  6753  0519  0027               	movlb	7	; select bank7
  6754  051A  00A0               	movwf	??_ScheduleTasks^(0+896)
  6755  051B  3002               	movlw	2
  6756  051C                     u4695:	
  6757  051C  35A0               	lslf	??_ScheduleTasks^(0+896),f
  6758  051D  3EFF               	addlw	-1
  6759  051E  1D03               	skipz
  6760  051F  2D1C               	goto	u4695
  6761  0520  3520               	lslf	??_ScheduleTasks^(0+896),w
  6762  0521  3E02               	addlw	2
  6763  0522  3E20               	addlw	(low (_TaskTable| (0+256)))& (0+255)
  6764  0523  0086               	movwf	6
  6765  0524  3001               	movlw	1	; select bank2/3
  6766  0525  0087               	movwf	7
  6767  0526  0181               	clrf	1
  6768  0527  0A81               	incf	1,f
  6769                           
  6770                           ;os_sched.c: 142: TaskTable[ActiveTaskIndex].Task(TaskTable[ActiveTaskIndex].Options);
  6771  0528  0020               	movlb	0	; select bank0
  6772  0529  0863               	movf	ScheduleTasks@ActiveTaskIndex,w
  6773  052A  0027               	movlb	7	; select bank7
  6774  052B  00A0               	movwf	??_ScheduleTasks^(0+896)
  6775  052C  3002               	movlw	2
  6776  052D                     u4705:	
  6777  052D  35A0               	lslf	??_ScheduleTasks^(0+896),f
  6778  052E  3EFF               	addlw	-1
  6779  052F  1D03               	skipz
  6780  0530  2D2D               	goto	u4705
  6781  0531  3520               	lslf	??_ScheduleTasks^(0+896),w
  6782  0532  3E07               	addlw	7
  6783  0533  3E20               	addlw	(low (_TaskTable| (0+256)))& (0+255)
  6784  0534  0086               	movwf	6
  6785  0535  3001               	movlw	1	; select bank2/3
  6786  0536  0087               	movwf	7
  6787  0537  0801               	movf	1,w
  6788  0538  00A1               	movwf	(??_ScheduleTasks+1)^(0+896)
  6789  0539  0821               	movf	(??_ScheduleTasks+1)^(0+896),w
  6790  053A  0020               	movlb	0	; select bank0
  6791  053B  00BB               	movwf	App_MainTask@Options
  6792  053C  0863               	movf	ScheduleTasks@ActiveTaskIndex,w
  6793  053D  0027               	movlb	7	; select bank7
  6794  053E  00A2               	movwf	(??_ScheduleTasks+2)^(0+896)
  6795  053F  3002               	movlw	2
  6796  0540                     u4715:	
  6797  0540  35A2               	lslf	(??_ScheduleTasks+2)^(0+896),f
  6798  0541  3EFF               	addlw	-1
  6799  0542  1D03               	skipz
  6800  0543  2D40               	goto	u4715
  6801  0544  3522               	lslf	(??_ScheduleTasks+2)^(0+896),w
  6802  0545  3E20               	addlw	(low (_TaskTable| (0+256)))& (0+255)
  6803  0546  0086               	movwf	6
  6804  0547  3001               	movlw	1	; select bank2/3
  6805  0548  0087               	movwf	7
  6806  0549  3F41               	moviw [1]fsr1
  6807  054A  008A               	movwf	10
  6808  054B  3F40               	moviw [0]fsr1
  6809  054C  000A               	callw
  6810  054D  3184               	pagesel	$
  6811                           
  6812                           ;os_sched.c: 143: }
  6813  054E  2D73               	goto	l5143
  6814  054F                     l5141:	
  6815                           
  6816                           ;os_sched.c: 144: else
  6817                           ;os_sched.c: 145: {
  6818                           ;os_sched.c: 146: TaskTable[ActiveTaskIndex].Counter++;
  6819  054F  0020               	movlb	0	; select bank0
  6820  0550  0863               	movf	ScheduleTasks@ActiveTaskIndex,w
  6821  0551  0027               	movlb	7	; select bank7
  6822  0552  00A0               	movwf	??_ScheduleTasks^(0+896)
  6823  0553  3002               	movlw	2
  6824  0554                     u4725:	
  6825  0554  35A0               	lslf	??_ScheduleTasks^(0+896),f
  6826  0555  3EFF               	addlw	-1
  6827  0556  1D03               	skipz
  6828  0557  2D54               	goto	u4725
  6829  0558  3520               	lslf	??_ScheduleTasks^(0+896),w
  6830  0559  3E03               	addlw	3
  6831  055A  3E20               	addlw	(low (_TaskTable| (0+256)))& (0+255)
  6832  055B  0086               	movwf	6
  6833  055C  3001               	movlw	1	; select bank2/3
  6834  055D  0087               	movwf	7
  6835  055E  3001               	movlw	1
  6836  055F  0781               	addwf	1,f
  6837  0560  3141               	addfsr 1,1
  6838  0561  1803               	skipnc
  6839  0562  0A81               	incf	1,f
  6840                           
  6841                           ;os_sched.c: 147: TaskTable[ActiveTaskIndex].State = TaskIdle;
  6842  0563  0020               	movlb	0	; select bank0
  6843  0564  0863               	movf	ScheduleTasks@ActiveTaskIndex,w
  6844  0565  0027               	movlb	7	; select bank7
  6845  0566  00A0               	movwf	??_ScheduleTasks^(0+896)
  6846  0567  3002               	movlw	2
  6847  0568                     u4735:	
  6848  0568  35A0               	lslf	??_ScheduleTasks^(0+896),f
  6849  0569  3EFF               	addlw	-1
  6850  056A  1D03               	skipz
  6851  056B  2D68               	goto	u4735
  6852  056C  3520               	lslf	??_ScheduleTasks^(0+896),w
  6853  056D  3E02               	addlw	2
  6854  056E  3E20               	addlw	(low (_TaskTable| (0+256)))& (0+255)
  6855  056F  0086               	movwf	6
  6856  0570  3001               	movlw	1	; select bank2/3
  6857  0571  0087               	movwf	7
  6858  0572  0181               	clrf	1
  6859  0573                     l5143:	
  6860  0573  3001               	movlw	1
  6861  0574  0027               	movlb	7	; select bank7
  6862  0575  00A0               	movwf	??_ScheduleTasks^(0+896)
  6863  0576  0820               	movf	??_ScheduleTasks^(0+896),w
  6864  0577  0020               	movlb	0	; select bank0
  6865  0578  07E3               	addwf	ScheduleTasks@ActiveTaskIndex,f
  6866  0579  300A               	movlw	low (_TaskNumber| (0+32768))
  6867  057A  0084               	movwf	4
  6868  057B  3090               	movlw	high (_TaskNumber| (0+32768))
  6869  057C  0085               	movwf	5
  6870  057D  3F00               	moviw [0]fsr0
  6871  057E  0027               	movlb	7	; select bank7
  6872  057F  00A0               	movwf	??_ScheduleTasks^(0+896)
  6873  0580  3F01               	moviw [1]fsr0
  6874  0581  2CC9               	goto	L5
  6875  0582                     __end_of_ScheduleTasks:	
  6876                           
  6877                           	psect	text15
  6878  0C9A                     __ptext15:	
  6879 ;; *************** function _InitializeTasks *****************
  6880 ;; Defined at:
  6881 ;;		line 111 in file "../../../Framework/MercuryFwk/Source/c/02_Osl/os_sched.c"
  6882 ;; Parameters:    Size  Location     Type
  6883 ;;		None
  6884 ;; Auto vars:     Size  Location     Type
  6885 ;;  ActiveTaskIn    1   67[BANK0 ] unsigned char 
  6886 ;; Return value:  Size  Location     Type
  6887 ;;                  1    wreg      void 
  6888 ;; Registers used:
  6889 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6890 ;; Tracked objects:
  6891 ;;		On entry : 0/0
  6892 ;;		On exit  : 0/0
  6893 ;;		Unchanged: 0/0
  6894 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6895 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6896 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6897 ;;      Temps:          0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0
  6898 ;;      Totals:         0       1       4       0       0       0       0       0       0       0       0       0       
      +0       0
  6899 ;;Total ram usage:        5 bytes
  6900 ;; Hardware stack levels used:    1
  6901 ;; Hardware stack levels required when called:    8
  6902 ;; This function calls:
  6903 ;;		_App_MainTask
  6904 ;;		_I2cSlv_MainTask
  6905 ;;		_I2c_DataReceiveSm
  6906 ;;		_Led_MainTask
  6907 ;;		_Wdg_MainTask
  6908 ;; This function is called by:
  6909 ;;		_MainScheduler
  6910 ;; This function uses a non-reentrant model
  6911 ;;
  6912                           
  6913                           
  6914                           ;psect for function _InitializeTasks
  6915  0C9A                     _InitializeTasks:	
  6916                           
  6917                           ;os_sched.c: 114: UINT8 ActiveTaskIndex = 0u;
  6918                           
  6919                           ;incstack = 0
  6920                           ; Regs used in _InitializeTasks: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  6921  0C9A  0020               	movlb	0	; select bank0
  6922  0C9B  01E3               	clrf	InitializeTasks@ActiveTaskIndex
  6923                           
  6924                           ;os_sched.c: 117: for (ActiveTaskIndex = 0u; ActiveTaskIndex < TaskNumber; ActiveTaskInd
      +                          ex++)
  6925  0C9C  01E3               	clrf	InitializeTasks@ActiveTaskIndex
  6926  0C9D  300A               	movlw	low (_TaskNumber| (0+32768))
  6927  0C9E  0084               	movwf	4
  6928  0C9F  3090               	movlw	high (_TaskNumber| (0+32768))
  6929  0CA0  0085               	movwf	5
  6930  0CA1  3F00               	moviw [0]fsr0
  6931  0CA2  0021               	movlb	1	; select bank1
  6932  0CA3  00EB               	movwf	??_InitializeTasks^(0+128)
  6933  0CA4  3F01               	moviw [1]fsr0
  6934  0CA5                     L6:	
  6935  0CA5  00EC               	movwf	(??_InitializeTasks^(0+128)+1)
  6936  0CA6  0020               	movlb	0	; select bank0
  6937  0CA7  0863               	movf	InitializeTasks@ActiveTaskIndex,w
  6938  0CA8  0021               	movlb	1	; select bank1
  6939  0CA9  00ED               	movwf	(??_InitializeTasks+2)^(0+128)
  6940  0CAA  01EE               	clrf	((??_InitializeTasks+2)^(0+128)+1)
  6941  0CAB  086C               	movf	(??_InitializeTasks+1)^(0+128),w
  6942  0CAC  026E               	subwf	(??_InitializeTasks+3)^(0+128),w
  6943  0CAD  1D03               	skipz
  6944  0CAE  2CB1               	goto	u4605
  6945  0CAF  086B               	movf	??_InitializeTasks^(0+128),w
  6946  0CB0  026D               	subwf	(??_InitializeTasks+2)^(0+128),w
  6947  0CB1                     u4605:	
  6948  0CB1  1803               	btfsc	3,0
  6949  0CB2  0008               	return
  6950                           
  6951                           ;os_sched.c: 118: {
  6952                           ;os_sched.c: 119: TaskTable[ActiveTaskIndex].Task(TaskTable[ActiveTaskIndex].Options);
  6953  0CB3  0020               	movlb	0	; select bank0
  6954  0CB4  0863               	movf	InitializeTasks@ActiveTaskIndex,w
  6955  0CB5  0021               	movlb	1	; select bank1
  6956  0CB6  00EB               	movwf	??_InitializeTasks^(0+128)
  6957  0CB7  3002               	movlw	2
  6958  0CB8                     u4615:	
  6959  0CB8  35EB               	lslf	??_InitializeTasks^(0+128),f
  6960  0CB9  3EFF               	addlw	-1
  6961  0CBA  1D03               	skipz
  6962  0CBB  2CB8               	goto	u4615
  6963  0CBC  356B               	lslf	??_InitializeTasks^(0+128),w
  6964  0CBD  3E07               	addlw	7
  6965  0CBE  3E20               	addlw	(low (_TaskTable| (0+256)))& (0+255)
  6966  0CBF  0086               	movwf	6
  6967  0CC0  3001               	movlw	1	; select bank2/3
  6968  0CC1  0087               	movwf	7
  6969  0CC2  0801               	movf	1,w
  6970  0CC3  00EC               	movwf	(??_InitializeTasks+1)^(0+128)
  6971  0CC4  086C               	movf	(??_InitializeTasks+1)^(0+128),w
  6972  0CC5  0020               	movlb	0	; select bank0
  6973  0CC6  00BB               	movwf	App_MainTask@Options
  6974  0CC7  0863               	movf	InitializeTasks@ActiveTaskIndex,w
  6975  0CC8  0021               	movlb	1	; select bank1
  6976  0CC9  00ED               	movwf	(??_InitializeTasks+2)^(0+128)
  6977  0CCA  3002               	movlw	2
  6978  0CCB                     u4625:	
  6979  0CCB  35ED               	lslf	(??_InitializeTasks+2)^(0+128),f
  6980  0CCC  3EFF               	addlw	-1
  6981  0CCD  1D03               	skipz
  6982  0CCE  2CCB               	goto	u4625
  6983  0CCF  356D               	lslf	(??_InitializeTasks+2)^(0+128),w
  6984  0CD0  3E20               	addlw	(low (_TaskTable| (0+256)))& (0+255)
  6985  0CD1  0086               	movwf	6
  6986  0CD2  3001               	movlw	1	; select bank2/3
  6987  0CD3  0087               	movwf	7
  6988  0CD4  3F41               	moviw [1]fsr1
  6989  0CD5  008A               	movwf	10
  6990  0CD6  3F40               	moviw [0]fsr1
  6991  0CD7  000A               	callw
  6992  0CD8  318C               	pagesel	$
  6993  0CD9  3001               	movlw	1
  6994  0CDA  0021               	movlb	1	; select bank1
  6995  0CDB  00EB               	movwf	??_InitializeTasks^(0+128)
  6996  0CDC  086B               	movf	??_InitializeTasks^(0+128),w
  6997  0CDD  0020               	movlb	0	; select bank0
  6998  0CDE  07E3               	addwf	InitializeTasks@ActiveTaskIndex,f
  6999  0CDF  300A               	movlw	low (_TaskNumber| (0+32768))
  7000  0CE0  0084               	movwf	4
  7001  0CE1  3090               	movlw	high (_TaskNumber| (0+32768))
  7002  0CE2  0085               	movwf	5
  7003  0CE3  3F00               	moviw [0]fsr0
  7004  0CE4  0021               	movlb	1	; select bank1
  7005  0CE5  00EB               	movwf	??_InitializeTasks^(0+128)
  7006  0CE6  3F01               	moviw [1]fsr0
  7007  0CE7  2CA5               	goto	L6
  7008  0CE8                     __end_of_InitializeTasks:	
  7009                           
  7010                           	psect	text16
  7011  00A2                     __ptext16:	
  7012 ;; *************** function _App_MainTask *****************
  7013 ;; Defined at:
  7014 ;;		line 273 in file "../Source/c/04_App/sb330_app.c"
  7015 ;; Parameters:    Size  Location     Type
  7016 ;;  Options         1   27[BANK0 ] unsigned char 
  7017 ;; Auto vars:     Size  Location     Type
  7018 ;;  WpuCh          18   49[BANK0 ] struct _WpuChType
  7019 ;;  AnalogChSel    12   31[BANK0 ] struct _AnalogChSelType
  7020 ;;  AdcConfig       6   43[BANK0 ] struct _AdcCfgType
  7021 ;; Return value:  Size  Location     Type
  7022 ;;                  1    wreg      void 
  7023 ;; Registers used:
  7024 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7025 ;; Tracked objects:
  7026 ;;		On entry : 0/0
  7027 ;;		On exit  : 0/0
  7028 ;;		Unchanged: 0/0
  7029 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7030 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7031 ;;      Locals:         0      36       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7032 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7033 ;;      Totals:         0      40       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7034 ;;Total ram usage:       40 bytes
  7035 ;; Hardware stack levels used:    1
  7036 ;; Hardware stack levels required when called:    7
  7037 ;; This function calls:
  7038 ;;		_Adc_ConfigAnCh
  7039 ;;		_Adc_InitAdcModule
  7040 ;;		_AppSm
  7041 ;;		_Dht_GetSensorData
  7042 ;;		_Mcu_ConfigPullUps
  7043 ;;		_Mcu_SetDieTempMode
  7044 ;;		_Mcu_SetDieTempSts
  7045 ;;		_Mcu_SetPullUpsSts
  7046 ;;		___awdiv
  7047 ;;		___awmod
  7048 ;;		___lwdiv
  7049 ;;		___lwmod
  7050 ;; This function is called by:
  7051 ;;		_InitializeTasks
  7052 ;;		_ScheduleTasks
  7053 ;; This function uses a non-reentrant model
  7054 ;;
  7055                           
  7056                           
  7057                           ;psect for function _App_MainTask
  7058  00A2                     _App_MainTask:	
  7059                           
  7060                           ;sb330_app.c: 275: WpuChType WpuCh = {((UINT8)(0)),((UINT8)(0)),((UINT8)(0)),((UINT8)(0)
      +                          ),((UINT8)(0)),((UINT8)(0)),((UINT8)(0)),((UINT8)(0)),((UINT8)(0)),((UINT8)(0)),((UINT8)
      +                          (0)),((UINT8)(0))};
  7061                           
  7062                           ;incstack = 0
  7063                           ; Regs used in _App_MainTask: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  7064  00A2  3048               	movlw	low App_MainTask@F4095
  7065  00A3  0086               	movwf	6
  7066  00A4  3001               	movlw	high App_MainTask@F4095
  7067  00A5  0087               	movwf	7
  7068  00A6  3051               	movlw	low App_MainTask@WpuCh
  7069  00A7  0084               	movwf	4
  7070  00A8  3000               	movlw	high App_MainTask@WpuCh
  7071  00A9  0085               	movwf	5
  7072  00AA  3012               	movlw	18
  7073  00AB  0020               	movlb	0	; select bank0
  7074  00AC  00BC               	movwf	??_App_MainTask
  7075  00AD                     u4510:	
  7076  00AD  0016               	moviw fsr1++
  7077  00AE  001A               	movwi fsr0++
  7078  00AF  0BBC               	decfsz	??_App_MainTask,f
  7079  00B0  28AD               	goto	u4510
  7080                           
  7081                           ;sb330_app.c: 276: AnalogChSelType AnalogChSel = {((UINT8)(0)),((UINT8)(0)),((UINT8)(0))
      +                          ,((UINT8)(0)),((UINT8)(0)),((UINT8)(0)),((UINT8)(0)),((UINT8)(0))};
  7082  00B1  305A               	movlw	low App_MainTask@F4109
  7083  00B2  0086               	movwf	6
  7084  00B3  3001               	movlw	high App_MainTask@F4109
  7085  00B4  0087               	movwf	7
  7086  00B5  303F               	movlw	low App_MainTask@AnalogChSel
  7087  00B6  0084               	movwf	4
  7088  00B7  3000               	movlw	high App_MainTask@AnalogChSel
  7089  00B8  0085               	movwf	5
  7090  00B9  300C               	movlw	12
  7091  00BA  00BC               	movwf	??_App_MainTask
  7092  00BB                     u4520:	
  7093  00BB  0016               	moviw fsr1++
  7094  00BC  001A               	movwi fsr0++
  7095  00BD  0BBC               	decfsz	??_App_MainTask,f
  7096  00BE  28BB               	goto	u4520
  7097                           
  7098                           ;sb330_app.c: 277: AdcConfigType AdcConfig;
  7099                           ;sb330_app.c: 278: static UINT8 Counter = 0;
  7100                           ;sb330_app.c: 280: switch (SystemState)
  7101  00BF  29B0               	goto	l5115
  7102  00C0                     l966:	
  7103                           ;sb330_app.c: 281: {
  7104                           ;sb330_app.c: 283: case InitializationState:
  7105                           
  7106                           
  7107                           ;sb330_app.c: 285: TRISCbits.TRISC5 = ((UINT8)(1));
  7108  00C0  0021               	movlb	1	; select bank1
  7109  00C1  168E               	bsf	14,5	;volatile
  7110                           
  7111                           ;sb330_app.c: 286: TRISCbits.TRISC4 = ((UINT8)(1));
  7112  00C2  160E               	bsf	14,4	;volatile
  7113                           
  7114                           ;sb330_app.c: 287: TRISCbits.TRISC3 = ((UINT8)(1));
  7115  00C3  158E               	bsf	14,3	;volatile
  7116                           
  7117                           ;sb330_app.c: 288: TRISCbits.TRISC6 = ((UINT8)(1));
  7118  00C4  170E               	bsf	14,6	;volatile
  7119                           
  7120                           ;sb330_app.c: 291: WpuCh.WpuC5 = ((UINT8)(1));
  7121  00C5  0020               	movlb	0	; select bank0
  7122  00C6  01E0               	clrf	App_MainTask@WpuCh+15
  7123  00C7  0AE0               	incf	App_MainTask@WpuCh+15,f
  7124                           
  7125                           ;sb330_app.c: 292: WpuCh.WpuC4 = ((UINT8)(1));
  7126  00C8  01DF               	clrf	App_MainTask@WpuCh+14
  7127  00C9  0ADF               	incf	App_MainTask@WpuCh+14,f
  7128                           
  7129                           ;sb330_app.c: 293: WpuCh.WpuC3 = ((UINT8)(1));
  7130  00CA  01DE               	clrf	App_MainTask@WpuCh+13
  7131  00CB  0ADE               	incf	App_MainTask@WpuCh+13,f
  7132                           
  7133                           ;sb330_app.c: 294: WpuCh.WpuC6 = ((UINT8)(1));
  7134  00CC  01E1               	clrf	App_MainTask@WpuCh+16
  7135  00CD  0AE1               	incf	App_MainTask@WpuCh+16,f
  7136                           
  7137                           ;sb330_app.c: 296: Mcu_ConfigPullUps(&WpuCh);
  7138  00CE  3051               	movlw	(low (App_MainTask@WpuCh| 0))& (0+255)
  7139  00CF  3186  26E4  3180   	fcall	_Mcu_ConfigPullUps
  7140                           
  7141                           ;sb330_app.c: 297: Mcu_SetPullUpsSts(Mcu_GlobalPuEnabled);
  7142  00D2  3000               	movlw	0
  7143  00D3  3196  266C  3180   	fcall	_Mcu_SetPullUpsSts
  7144                           
  7145                           ;sb330_app.c: 300: Adc_ConfigAnCh(&AnalogChSel);
  7146  00D6  303F               	movlw	(low (App_MainTask@AnalogChSel| 0))& (0+255)
  7147  00D7  3187  278A  3180   	fcall	_Adc_ConfigAnCh
  7148                           
  7149                           ;sb330_app.c: 303: Mcu_SetDieTempSts(((UINT8)(1)));
  7150  00DA  3001               	movlw	1
  7151  00DB  3196  2664  3180   	fcall	_Mcu_SetDieTempSts
  7152                           
  7153                           ;sb330_app.c: 304: Mcu_SetDieTempMode(((UINT8)(0)));
  7154  00DE  3000               	movlw	0
  7155  00DF  3196  265C  3180   	fcall	_Mcu_SetDieTempMode
  7156                           
  7157                           ;sb330_app.c: 307: AdcConfig.AdcConvClock = ((UINT8)(3));
  7158  00E2  3003               	movlw	3
  7159  00E3  0020               	movlb	0	; select bank0
  7160  00E4  00BC               	movwf	??_App_MainTask
  7161  00E5  083C               	movf	??_App_MainTask,w
  7162  00E6  00CD               	movwf	App_MainTask@AdcConfig+2
  7163                           
  7164                           ;sb330_app.c: 308: AdcConfig.AdcIntEnabled = ((UINT8)(0));
  7165  00E7  01D0               	clrf	App_MainTask@AdcConfig+5
  7166                           
  7167                           ;sb330_app.c: 309: AdcConfig.AdcNegRef = ((UINT8)(0));
  7168  00E8  01CE               	clrf	App_MainTask@AdcConfig+3
  7169                           
  7170                           ;sb330_app.c: 310: AdcConfig.AdcPosRef = ((UINT8)(0));
  7171  00E9  01CF               	clrf	App_MainTask@AdcConfig+4
  7172                           
  7173                           ;sb330_app.c: 311: AdcConfig.AdcResultFormat = ((UINT8)(1));
  7174  00EA  01CC               	clrf	App_MainTask@AdcConfig+1
  7175  00EB  0ACC               	incf	App_MainTask@AdcConfig+1,f
  7176                           
  7177                           ;sb330_app.c: 312: AdcConfig.AdcEnable = ((UINT8)(1));
  7178  00EC  01CB               	clrf	App_MainTask@AdcConfig
  7179  00ED  0ACB               	incf	App_MainTask@AdcConfig,f
  7180                           
  7181                           ;sb330_app.c: 313: Adc_InitAdcModule(&AdcConfig);
  7182  00EE  304B               	movlw	(low (App_MainTask@AdcConfig| 0))& (0+255)
  7183  00EF  318B  2350         	fcall	_Adc_InitAdcModule
  7184                           
  7185                           ;sb330_app.c: 314: break;
  7186  00F1  0008               	return
  7187  00F2                     l5075:	
  7188                           ;sb330_app.c: 317: case RunningState:
  7189                           
  7190                           
  7191                           ;sb330_app.c: 319: Counter++;
  7192  00F2  3001               	movlw	1
  7193  00F3  0020               	movlb	0	; select bank0
  7194  00F4  00BC               	movwf	??_App_MainTask
  7195  00F5  083C               	movf	??_App_MainTask,w
  7196  00F6  0021               	movlb	1	; select bank1
  7197  00F7  07B3               	addwf	App_MainTask@Counter^(0+128),f
  7198                           
  7199                           ;sb330_app.c: 321: if (Counter > ((UINT16)(4000)/((UINT16)(100))))
  7200  00F8  3029               	movlw	41
  7201  00F9  0233               	subwf	App_MainTask@Counter^(0+128),w
  7202  00FA  1C03               	skipc
  7203  00FB  29AD               	goto	l5111
  7204                           
  7205                           ;sb330_app.c: 322: {
  7206                           ;sb330_app.c: 324: Counter = 0;
  7207  00FC  01B3               	clrf	App_MainTask@Counter^(0+128)
  7208                           
  7209                           ;sb330_app.c: 326: if (Dht_GetSensorData())
  7210  00FD  318A  2202  3180   	fcall	_Dht_GetSensorData
  7211  0100  3A00               	xorlw	0
  7212  0101  1903               	skipnz
  7213  0102  29AB               	goto	l5109
  7214                           
  7215                           ;sb330_app.c: 327: {
  7216                           ;sb330_app.c: 348: if (((Sensor.Data.HumidityLow | (Sensor.Data.HumidityHigh << 8)) <= 1
      +                          000) &&
  7217                           ;sb330_app.c: 349: ((Sensor.Data.HumidityLow | (Sensor.Data.HumidityHigh << 8)) >= 0) &&
  7218                           ;sb330_app.c: 350: ((Sensor.Data.TemperatureLow | ((Sensor.Data.TemperatureHigh & 0x7F) 
      +                          << 8)) <= 800))
  7219  0103  0021               	movlb	1	; select bank1
  7220  0104  0820               	movf	_Sensor^(0+128),w
  7221  0105  3A80               	xorlw	128
  7222  0106  0020               	movlb	0	; select bank0
  7223  0107  00BC               	movwf	??_App_MainTask
  7224  0108  3083               	movlw	131
  7225  0109  023C               	subwf	??_App_MainTask,w
  7226  010A  1D03               	skipz
  7227  010B  290F               	goto	u4555
  7228  010C  30E9               	movlw	233
  7229  010D  0021               	movlb	1	; select bank1
  7230  010E  0221               	subwf	(_Sensor^(0+128)+1),w
  7231  010F                     u4555:	
  7232  010F  1803               	skipnc
  7233  0110  29AD               	goto	l5111
  7234  0111  0021               	movlb	1	; select bank1
  7235  0112  1BA0               	btfsc	_Sensor^(0+128),7
  7236  0113  29AD               	goto	l5111
  7237  0114  307F               	movlw	127
  7238  0115  0522               	andwf	(_Sensor^(0+128)+2),w
  7239  0116  0020               	movlb	0	; select bank0
  7240  0117  00BC               	movwf	??_App_MainTask
  7241  0118  083C               	movf	??_App_MainTask,w
  7242  0119  3A80               	xorlw	128
  7243  011A  00BD               	movwf	??_App_MainTask+1
  7244  011B  3083               	movlw	131
  7245  011C  023D               	subwf	??_App_MainTask+1,w
  7246  011D  1D03               	skipz
  7247  011E  2922               	goto	u4575
  7248  011F  3021               	movlw	33
  7249  0120  0021               	movlb	1	; select bank1
  7250  0121  0223               	subwf	(_Sensor^(0+128)+3),w
  7251  0122                     u4575:	
  7252  0122  1803               	skipnc
  7253  0123  29AD               	goto	l5111
  7254                           
  7255                           ;sb330_app.c: 351: {
  7256                           ;sb330_app.c: 356: TempSign = (Sensor.Data.TemperatureHigh & 0x80) >> 7;
  7257  0124  0021               	movlb	1	; select bank1
  7258  0125  0822               	movf	(_Sensor^(0+128)+2),w
  7259  0126  0020               	movlb	0	; select bank0
  7260  0127  00BC               	movwf	??_App_MainTask
  7261  0128  3007               	movlw	7
  7262  0129                     u4585:	
  7263  0129  36BC               	lsrf	??_App_MainTask,f
  7264  012A  0B89               	decfsz	9,f
  7265  012B  2929               	goto	u4585
  7266  012C  083C               	movf	??_App_MainTask,w
  7267  012D  3901               	andlw	1
  7268  012E  00BD               	movwf	??_App_MainTask+1
  7269  012F  083D               	movf	??_App_MainTask+1,w
  7270  0130  0021               	movlb	1	; select bank1
  7271  0131  00BA               	movwf	_TempSign^(0+128)
  7272                           
  7273                           ;sb330_app.c: 358: Temperature = Sensor.Data.TemperatureLow | ((Sensor.Data.TemperatureH
      +                          igh & 0x7F) << 8);
  7274  0132  0822               	movf	(_Sensor^(0+128)+2),w
  7275  0133  397F               	andlw	127
  7276  0134  0020               	movlb	0	; select bank0
  7277  0135  00BC               	movwf	??_App_MainTask
  7278  0136  01BD               	clrf	??_App_MainTask+1
  7279  0137  083C               	movf	??_App_MainTask,w
  7280  0138  00BD               	movwf	??_App_MainTask+1
  7281  0139  01BC               	clrf	??_App_MainTask
  7282  013A  083C               	movf	??_App_MainTask,w
  7283  013B  0021               	movlb	1	; select bank1
  7284  013C  0423               	iorwf	(_Sensor^(0+128)+3),w
  7285  013D  00A9               	movwf	_Temperature^(0+128)
  7286  013E  0020               	movlb	0	; select bank0
  7287  013F  083D               	movf	??_App_MainTask+1,w
  7288  0140  0021               	movlb	1	; select bank1
  7289  0141  00AA               	movwf	(_Temperature+1)^(0+128)
  7290                           
  7291                           ;sb330_app.c: 359: Humidity = Sensor.Data.HumidityLow | (Sensor.Data.HumidityHigh << 8);
  7292  0142  0820               	movf	_Sensor^(0+128),w
  7293  0143  0020               	movlb	0	; select bank0
  7294  0144  00BC               	movwf	??_App_MainTask
  7295  0145  01BD               	clrf	??_App_MainTask+1
  7296  0146  083C               	movf	??_App_MainTask,w
  7297  0147  00BD               	movwf	??_App_MainTask+1
  7298  0148  01BC               	clrf	??_App_MainTask
  7299  0149  083C               	movf	??_App_MainTask,w
  7300  014A  0021               	movlb	1	; select bank1
  7301  014B  0421               	iorwf	(_Sensor^(0+128)+1),w
  7302  014C  00A5               	movwf	_Humidity^(0+128)
  7303  014D  0020               	movlb	0	; select bank0
  7304  014E  083D               	movf	??_App_MainTask+1,w
  7305  014F  0021               	movlb	1	; select bank1
  7306  0150  00A6               	movwf	(_Humidity+1)^(0+128)
  7307                           
  7308                           ;sb330_app.c: 361: TemperatureInt = Temperature/10;
  7309  0151  300A               	movlw	10
  7310  0152  0020               	movlb	0	; select bank0
  7311  0153  00A0               	movwf	___awdiv@divisor
  7312  0154  3000               	movlw	0
  7313  0155  00A1               	movwf	___awdiv@divisor+1
  7314  0156  0021               	movlb	1	; select bank1
  7315  0157  082A               	movf	(_Temperature+1)^(0+128),w
  7316  0158  0020               	movlb	0	; select bank0
  7317  0159  00A3               	movwf	___awdiv@dividend+1
  7318  015A  0021               	movlb	1	; select bank1
  7319  015B  0829               	movf	_Temperature^(0+128),w
  7320  015C  0020               	movlb	0	; select bank0
  7321  015D  00A2               	movwf	___awdiv@dividend
  7322  015E  318C  24E8  3180   	fcall	___awdiv
  7323  0161  0020               	movlb	0	; select bank0
  7324  0162  0820               	movf	?___awdiv,w
  7325  0163  00BC               	movwf	??_App_MainTask
  7326  0164  083C               	movf	??_App_MainTask,w
  7327  0165  00F6               	movwf	_TemperatureInt
  7328                           
  7329                           ;sb330_app.c: 362: TemperatureDec = Temperature%10;
  7330  0166  300A               	movlw	10
  7331  0167  00A0               	movwf	___awmod@divisor
  7332  0168  3000               	movlw	0
  7333  0169  00A1               	movwf	___awmod@divisor+1
  7334  016A  0021               	movlb	1	; select bank1
  7335  016B  082A               	movf	(_Temperature+1)^(0+128),w
  7336  016C  0020               	movlb	0	; select bank0
  7337  016D  00A3               	movwf	___awmod@dividend+1
  7338  016E  0021               	movlb	1	; select bank1
  7339  016F  0829               	movf	_Temperature^(0+128),w
  7340  0170  0020               	movlb	0	; select bank0
  7341  0171  00A2               	movwf	___awmod@dividend
  7342  0172  318C  2409  3180   	fcall	___awmod
  7343  0175  0020               	movlb	0	; select bank0
  7344  0176  0820               	movf	?___awmod,w
  7345  0177  00BC               	movwf	??_App_MainTask
  7346  0178  083C               	movf	??_App_MainTask,w
  7347  0179  00ED               	movwf	_TemperatureDec
  7348                           
  7349                           ;sb330_app.c: 363: HumidityInt = Humidity/10;
  7350  017A  300A               	movlw	10
  7351  017B  00A0               	movwf	___lwdiv@divisor
  7352  017C  3000               	movlw	0
  7353  017D  00A1               	movwf	___lwdiv@divisor+1
  7354  017E  0021               	movlb	1	; select bank1
  7355  017F  0826               	movf	(_Humidity+1)^(0+128),w
  7356  0180  0020               	movlb	0	; select bank0
  7357  0181  00A3               	movwf	___lwdiv@dividend+1
  7358  0182  0021               	movlb	1	; select bank1
  7359  0183  0825               	movf	_Humidity^(0+128),w
  7360  0184  0020               	movlb	0	; select bank0
  7361  0185  00A2               	movwf	___lwdiv@dividend
  7362  0186  318B  231B  3180   	fcall	___lwdiv
  7363  0189  0020               	movlb	0	; select bank0
  7364  018A  0820               	movf	?___lwdiv,w
  7365  018B  00BC               	movwf	??_App_MainTask
  7366  018C  083C               	movf	??_App_MainTask,w
  7367  018D  00EA               	movwf	_HumidityInt
  7368                           
  7369                           ;sb330_app.c: 364: HumidityDec = Humidity%10;
  7370  018E  300A               	movlw	10
  7371  018F  00A0               	movwf	___lwmod@divisor
  7372  0190  3000               	movlw	0
  7373  0191  00A1               	movwf	___lwmod@divisor+1
  7374  0192  0021               	movlb	1	; select bank1
  7375  0193  0826               	movf	(_Humidity+1)^(0+128),w
  7376  0194  0020               	movlb	0	; select bank0
  7377  0195  00A3               	movwf	___lwmod@dividend+1
  7378  0196  0021               	movlb	1	; select bank1
  7379  0197  0825               	movf	_Humidity^(0+128),w
  7380  0198  0020               	movlb	0	; select bank0
  7381  0199  00A2               	movwf	___lwmod@dividend
  7382  019A  318A  222E  3180   	fcall	___lwmod
  7383  019D  0020               	movlb	0	; select bank0
  7384  019E  0820               	movf	?___lwmod,w
  7385  019F  00BC               	movwf	??_App_MainTask
  7386  01A0  083C               	movf	??_App_MainTask,w
  7387  01A1  00E9               	movwf	_HumidityDec
  7388                           
  7389                           ;sb330_app.c: 365: ChecksumSts = 1u;
  7390  01A2  0021               	movlb	1	; select bank1
  7391  01A3  01B8               	clrf	_ChecksumSts^(0+128)
  7392  01A4  0AB8               	incf	_ChecksumSts^(0+128),f
  7393                           
  7394                           ;sb330_app.c: 367: if (TempSign)
  7395  01A5  083A               	movf	_TempSign^(0+128),w
  7396  01A6  1903               	btfsc	3,2
  7397  01A7  29AD               	goto	l5111
  7398                           
  7399                           ;sb330_app.c: 368: {
  7400                           ;sb330_app.c: 369: TemperatureInt = -TemperatureInt;
  7401  01A8  09F6               	comf	_TemperatureInt,f
  7402  01A9  0AF6               	incf	_TemperatureInt,f
  7403                           
  7404                           ;sb330_app.c: 370: }
  7405                           ;sb330_app.c: 371: }
  7406                           ;sb330_app.c: 373: }
  7407  01AA  29AD               	goto	l5111
  7408  01AB                     l5109:	
  7409                           
  7410                           ;sb330_app.c: 374: else
  7411                           ;sb330_app.c: 375: {
  7412                           ;sb330_app.c: 377: ChecksumSts = 0u;
  7413  01AB  0021               	movlb	1	; select bank1
  7414  01AC  01B8               	clrf	_ChecksumSts^(0+128)
  7415  01AD                     l5111:	
  7416                           
  7417                           ;sb330_app.c: 378: }
  7418                           ;sb330_app.c: 379: }
  7419                           ;sb330_app.c: 381: AppSm();
  7420  01AD  3189  21D8         	fcall	_AppSm
  7421                           
  7422                           ;sb330_app.c: 387: }
  7423                           
  7424                           ;sb330_app.c: 386: break;
  7425                           
  7426                           ;sb330_app.c: 385: default:
  7427                           
  7428                           ;sb330_app.c: 382: break;
  7429  01AF  0008               	return
  7430  01B0                     l5115:	
  7431  01B0  0020               	movlb	0	; select bank0
  7432  01B1  086C               	movf	_SystemState,w
  7433                           
  7434                           ; Switch size 1, requested type "space"
  7435                           ; Number of cases is 2, Range of values is 0 to 1
  7436                           ; switch strategies available:
  7437                           ; Name         Instructions Cycles
  7438                           ; simple_byte            7     4 (average)
  7439                           ; direct_byte           10     6 (fixed)
  7440                           ; jumptable            260     6 (fixed)
  7441                           ;	Chosen strategy is simple_byte
  7442  01B2  3A00               	xorlw	0	; case 0
  7443  01B3  1903               	skipnz
  7444  01B4  28C0               	goto	l966
  7445  01B5  3A01               	xorlw	1	; case 1
  7446  01B6  1903               	skipnz
  7447  01B7  28F2               	goto	l5075
  7448  01B8  29B9               	goto	l975
  7449  01B9                     l975:	
  7450  01B9  0008               	return
  7451  01BA                     __end_of_App_MainTask:	
  7452                           
  7453                           	psect	text17
  7454  0A5B                     __ptext17:	
  7455 ;; *************** function _Led_MainTask *****************
  7456 ;; Defined at:
  7457 ;;		line 122 in file "../../../Framework/MercuryFwk/Source/c/03_Sml/02_Ssl/led.c"
  7458 ;; Parameters:    Size  Location     Type
  7459 ;;  Options         1   27[BANK0 ] unsigned char 
  7460 ;; Auto vars:     Size  Location     Type
  7461 ;;		None
  7462 ;; Return value:  Size  Location     Type
  7463 ;;                  1    wreg      void 
  7464 ;; Registers used:
  7465 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7466 ;; Tracked objects:
  7467 ;;		On entry : 0/0
  7468 ;;		On exit  : 0/0
  7469 ;;		Unchanged: 0/0
  7470 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7471 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7472 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7473 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7474 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7475 ;;Total ram usage:        5 bytes
  7476 ;; Hardware stack levels used:    1
  7477 ;; Hardware stack levels required when called:    5
  7478 ;; This function calls:
  7479 ;;		_LedStateMachine
  7480 ;;		_SetLedBehavSts
  7481 ;; This function is called by:
  7482 ;;		_InitializeTasks
  7483 ;;		_ScheduleTasks
  7484 ;; This function uses a non-reentrant model
  7485 ;;
  7486                           
  7487                           
  7488                           ;psect for function _Led_MainTask
  7489  0A5B                     _Led_MainTask:	
  7490                           
  7491                           ;led.c: 124: switch (SystemState)
  7492                           
  7493                           ;incstack = 0
  7494                           ; Regs used in _Led_MainTask: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  7495  0A5B  2A7F               	goto	l5051
  7496  0A5C                     l650:	
  7497                           ;led.c: 125: {
  7498                           ;led.c: 127: case InitializationState:
  7499                           
  7500                           
  7501                           ;led.c: 129: TRISCbits.TRISC0 = ((UINT8)(0));
  7502  0A5C  0021               	movlb	1	; select bank1
  7503  0A5D  100E               	bcf	14,0	;volatile
  7504                           
  7505                           ;led.c: 130: LATCbits.LATC0 = ((UINT8)(0));
  7506  0A5E  0022               	movlb	2	; select bank2
  7507  0A5F  100E               	bcf	14,0	;volatile
  7508                           
  7509                           ;led.c: 132: SetLedBehavSts(((UINT8)(1)));
  7510  0A60  3001               	movlw	1
  7511  0A61  318B  23C7         	fcall	_SetLedBehavSts
  7512                           
  7513                           ;led.c: 133: break;
  7514  0A63  0008               	return
  7515  0A64                     l5047:	
  7516                           ;led.c: 136: case RunningState:
  7517                           
  7518                           
  7519                           ;led.c: 138: LATCbits.LATC0 = LedStateMachine(1u,&Led1Sts,&Led1Blink,&Led1Pulse);
  7520  0A64  30EA               	movlw	(low (_Led1Sts| 0))& (0+255)
  7521  0A65  0020               	movlb	0	; select bank0
  7522  0A66  00BC               	movwf	??_Led_MainTask
  7523  0A67  083C               	movf	??_Led_MainTask,w
  7524  0A68  00AB               	movwf	LedStateMachine@LedSts
  7525  0A69  3066               	movlw	(low (_Led1Blink| (0+256)))& (0+255)
  7526  0A6A  00BD               	movwf	??_Led_MainTask+1
  7527  0A6B  083D               	movf	??_Led_MainTask+1,w
  7528  0A6C  00AC               	movwf	LedStateMachine@LedBlink
  7529  0A6D  30C6               	movlw	(low (_Led1Pulse| 0))& (0+255)
  7530  0A6E  00BE               	movwf	??_Led_MainTask+2
  7531  0A6F  083E               	movf	??_Led_MainTask+2,w
  7532  0A70  00AD               	movwf	LedStateMachine@LedPulse
  7533  0A71  3001               	movlw	1
  7534  0A72  318A  22EA         	fcall	_LedStateMachine
  7535  0A74  0020               	movlb	0	; select bank0
  7536  0A75  00BF               	movwf	??_Led_MainTask+3
  7537  0A76  0022               	movlb	2	; select bank2
  7538  0A77  080E               	movf	14,w	;volatile
  7539  0A78  0020               	movlb	0	; select bank0
  7540  0A79  063F               	xorwf	??_Led_MainTask+3,w
  7541  0A7A  39FE               	andlw	-2
  7542  0A7B  063F               	xorwf	??_Led_MainTask+3,w
  7543  0A7C  0022               	movlb	2	; select bank2
  7544  0A7D  008E               	movwf	14	;volatile
  7545                           
  7546                           ;led.c: 144: }
  7547                           
  7548                           ;led.c: 143: break;
  7549                           
  7550                           ;led.c: 142: default:
  7551                           
  7552                           ;led.c: 139: break;
  7553  0A7E  0008               	return
  7554  0A7F                     l5051:	
  7555  0A7F  0020               	movlb	0	; select bank0
  7556  0A80  086C               	movf	_SystemState,w
  7557                           
  7558                           ; Switch size 1, requested type "space"
  7559                           ; Number of cases is 2, Range of values is 0 to 1
  7560                           ; switch strategies available:
  7561                           ; Name         Instructions Cycles
  7562                           ; simple_byte            7     4 (average)
  7563                           ; direct_byte           10     6 (fixed)
  7564                           ; jumptable            260     6 (fixed)
  7565                           ;	Chosen strategy is simple_byte
  7566  0A81  3A00               	xorlw	0	; case 0
  7567  0A82  1903               	skipnz
  7568  0A83  2A5C               	goto	l650
  7569  0A84  3A01               	xorlw	1	; case 1
  7570  0A85  1903               	skipnz
  7571  0A86  2A64               	goto	l5047
  7572  0A87  2A88               	goto	l654
  7573  0A88                     l654:	
  7574  0A88  0008               	return
  7575  0A89                     __end_of_Led_MainTask:	
  7576                           
  7577                           	psect	text18
  7578  175F                     __ptext18:	
  7579 ;; *************** function _I2cSlv_MainTask *****************
  7580 ;; Defined at:
  7581 ;;		line 109 in file "../../../Framework/MercuryFwk/Source/c/03_Sml/01_Pml/01_SlvI2c/i2c_slv.c"
  7582 ;; Parameters:    Size  Location     Type
  7583 ;;  Options         1   27[BANK0 ] unsigned char 
  7584 ;; Auto vars:     Size  Location     Type
  7585 ;;		None
  7586 ;; Return value:  Size  Location     Type
  7587 ;;                  1    wreg      void 
  7588 ;; Registers used:
  7589 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7590 ;; Tracked objects:
  7591 ;;		On entry : 0/0
  7592 ;;		On exit  : 0/0
  7593 ;;		Unchanged: 0/0
  7594 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7595 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7596 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7597 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7598 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7599 ;;Total ram usage:        1 bytes
  7600 ;; Hardware stack levels used:    1
  7601 ;; Hardware stack levels required when called:    4
  7602 ;; This function calls:
  7603 ;;		_I2cSlv_I2cDrvHandle
  7604 ;;		_I2c_InitI2cModule
  7605 ;;		_I2c_SetConfig
  7606 ;; This function is called by:
  7607 ;;		_InitializeTasks
  7608 ;;		_ScheduleTasks
  7609 ;; This function uses a non-reentrant model
  7610 ;;
  7611                           
  7612                           
  7613                           ;psect for function _I2cSlv_MainTask
  7614  175F                     _I2cSlv_MainTask:	
  7615                           
  7616                           ;i2c_slv.c: 111: switch (SystemState)
  7617                           
  7618                           ;incstack = 0
  7619                           ; Regs used in _I2cSlv_MainTask: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  7620  175F  2F6A               	goto	l5041
  7621  1760                     l5033:	
  7622                           ;i2c_slv.c: 112: {
  7623                           ;i2c_slv.c: 114: case InitializationState:
  7624                           
  7625                           
  7626                           ;i2c_slv.c: 116: I2c_SetConfig();
  7627  1760  3197  274B  3197   	fcall	_I2c_SetConfig
  7628                           
  7629                           ;i2c_slv.c: 118: I2c_InitI2cModule(&I2cConfig);
  7630  1763  30BB               	movlw	(low (_I2cConfig| 0))& (0+255)
  7631  1764  3186  2638         	fcall	_I2c_InitI2cModule
  7632                           
  7633                           ;i2c_slv.c: 119: break;
  7634  1766  0008               	return
  7635  1767                     l5037:	
  7636                           ;i2c_slv.c: 122: case RunningState:
  7637                           
  7638                           
  7639                           ;i2c_slv.c: 124: I2cSlv_I2cDrvHandle();
  7640  1767  318E  26D2         	fcall	_I2cSlv_I2cDrvHandle
  7641                           
  7642                           ;i2c_slv.c: 130: }
  7643                           
  7644                           ;i2c_slv.c: 129: break;
  7645                           
  7646                           ;i2c_slv.c: 128: default:
  7647                           
  7648                           ;i2c_slv.c: 125: break;
  7649  1769  0008               	return
  7650  176A                     l5041:	
  7651  176A  0020               	movlb	0	; select bank0
  7652  176B  086C               	movf	_SystemState,w
  7653                           
  7654                           ; Switch size 1, requested type "space"
  7655                           ; Number of cases is 2, Range of values is 0 to 1
  7656                           ; switch strategies available:
  7657                           ; Name         Instructions Cycles
  7658                           ; simple_byte            7     4 (average)
  7659                           ; direct_byte           10     6 (fixed)
  7660                           ; jumptable            260     6 (fixed)
  7661                           ;	Chosen strategy is simple_byte
  7662  176C  3A00               	xorlw	0	; case 0
  7663  176D  1903               	skipnz
  7664  176E  2F60               	goto	l5033
  7665  176F  3A01               	xorlw	1	; case 1
  7666  1770  1903               	skipnz
  7667  1771  2F67               	goto	l5037
  7668  1772  2F73               	goto	l590
  7669  1773                     l590:	
  7670  1773  0008               	return
  7671  1774                     __end_of_I2cSlv_MainTask:	
  7672                           
  7673                           	psect	text19
  7674  02CD                     __ptext19:	
  7675 ;; *************** function _I2c_DataReceiveSm *****************
  7676 ;; Defined at:
  7677 ;;		line 297 in file "../../../Framework/MercuryFwk/Source/c/01_Hal/02_Drv/i2c_slv_drv.c"
  7678 ;; Parameters:    Size  Location     Type
  7679 ;;  Options         1   27[BANK0 ] unsigned char 
  7680 ;; Auto vars:     Size  Location     Type
  7681 ;;  Index           1   35[BANK0 ] unsigned char 
  7682 ;; Return value:  Size  Location     Type
  7683 ;;                  1    wreg      void 
  7684 ;; Registers used:
  7685 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7686 ;; Tracked objects:
  7687 ;;		On entry : 0/0
  7688 ;;		On exit  : 0/0
  7689 ;;		Unchanged: 0/0
  7690 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7691 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7692 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7693 ;;      Temps:          0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7694 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7695 ;;Total ram usage:        9 bytes
  7696 ;; Hardware stack levels used:    1
  7697 ;; Hardware stack levels required when called:    3
  7698 ;; This function calls:
  7699 ;;		_CheckAckStatus
  7700 ;;		_CheckByteStatus
  7701 ;;		_CheckStopBitStatus
  7702 ;;		_ClearRxBuffer
  7703 ;;		_ClearTxBuffer
  7704 ;;		_GenerateEvt
  7705 ;;		_Mcu_Reset
  7706 ;;		_ReceiveEvt
  7707 ;; This function is called by:
  7708 ;;		_InitializeTasks
  7709 ;;		_ScheduleTasks
  7710 ;; This function uses a non-reentrant model
  7711 ;;
  7712                           
  7713                           
  7714                           ;psect for function _I2c_DataReceiveSm
  7715  02CD                     _I2c_DataReceiveSm:	
  7716                           
  7717                           ;i2c_slv_drv.c: 300: static I2cRxStateType I2cRxState = CheckRxByte;
  7718                           ;i2c_slv_drv.c: 301: static UINT8 I2cRxAddress;
  7719                           ;i2c_slv_drv.c: 302: static UINT8 I2cRxFlag = ((UINT8)(0));
  7720                           ;i2c_slv_drv.c: 303: static UINT8 OpType;
  7721                           ;i2c_slv_drv.c: 304: static UINT8 RxCounter = 0;
  7722                           ;i2c_slv_drv.c: 305: static UINT8 TxCounter = 0;
  7723                           ;i2c_slv_drv.c: 306: static UINT8 AddressStored = 0;
  7724                           ;i2c_slv_drv.c: 307: static UINT8 ErrorCounter = 0;
  7725                           ;i2c_slv_drv.c: 308: UINT8 Index;
  7726                           ;i2c_slv_drv.c: 310: switch (I2cRxState)
  7727                           
  7728                           ;incstack = 0
  7729                           ; Regs used in _I2c_DataReceiveSm: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  7730  02CD  2BBE               	goto	l5011
  7731  02CE                     l4919:	
  7732                           ;i2c_slv_drv.c: 311: {
  7733                           ;i2c_slv_drv.c: 312: case CheckRxByte:
  7734                           
  7735                           
  7736                           ;i2c_slv_drv.c: 314: if (ReceiveEvt(&I2cNewTxNotification))
  7737  02CE  30E4               	movlw	(low (_I2cNewTxNotification| 0))& (0+255)
  7738  02CF  3188  20B6  3182   	fcall	_ReceiveEvt
  7739  02D2  3A00               	xorlw	0
  7740  02D3  1903               	skipnz
  7741  02D4  0008               	return
  7742                           
  7743                           ;i2c_slv_drv.c: 315: {
  7744                           ;i2c_slv_drv.c: 317: if (CheckByteStatus() == ((UINT8)(0)))
  7745  02D5  3196  2687  3182   	fcall	_CheckByteStatus
  7746  02D8  3A00               	xorlw	0
  7747  02D9  1D03               	skipz
  7748  02DA  2AF8               	goto	l4939
  7749                           
  7750                           ;i2c_slv_drv.c: 318: {
  7751                           ;i2c_slv_drv.c: 319: if (AddressStored == 1)
  7752  02DB  0021               	movlb	1	; select bank1
  7753  02DC  0335               	decf	I2c_DataReceiveSm@AddressStored^(0+128),w
  7754  02DD  1D03               	btfss	3,2
  7755  02DE  2AED               	goto	l4931
  7756                           
  7757                           ;i2c_slv_drv.c: 320: {
  7758                           ;i2c_slv_drv.c: 322: ErrorCounter++;
  7759  02DF  3001               	movlw	1
  7760  02E0  0020               	movlb	0	; select bank0
  7761  02E1  00BC               	movwf	??_I2c_DataReceiveSm
  7762  02E2  083C               	movf	??_I2c_DataReceiveSm,w
  7763  02E3  0021               	movlb	1	; select bank1
  7764  02E4  07B6               	addwf	I2c_DataReceiveSm@ErrorCounter^(0+128),f
  7765                           
  7766                           ;i2c_slv_drv.c: 324: if (ErrorCounter > 10u)
  7767  02E5  300B               	movlw	11
  7768  02E6  0236               	subwf	I2c_DataReceiveSm@ErrorCounter^(0+128),w
  7769  02E7  1C03               	skipc
  7770  02E8  2AEF               	goto	l4933
  7771                           
  7772                           ;i2c_slv_drv.c: 325: {
  7773                           ;i2c_slv_drv.c: 326: Mcu_Reset();
  7774  02E9  3196  2633  3182   	fcall	_Mcu_Reset
  7775                           
  7776                           ;i2c_slv_drv.c: 327: }
  7777                           ;i2c_slv_drv.c: 328: }
  7778  02EC  2AEF               	goto	l4933
  7779  02ED                     l4931:	
  7780                           
  7781                           ;i2c_slv_drv.c: 329: else
  7782                           ;i2c_slv_drv.c: 330: {
  7783                           ;i2c_slv_drv.c: 332: ErrorCounter = 0;
  7784  02ED  0021               	movlb	1	; select bank1
  7785  02EE  01B6               	clrf	I2c_DataReceiveSm@ErrorCounter^(0+128)
  7786  02EF                     l4933:	
  7787                           
  7788                           ;i2c_slv_drv.c: 333: }
  7789                           ;i2c_slv_drv.c: 335: AddressStored = 1;
  7790  02EF  0021               	movlb	1	; select bank1
  7791  02F0  01B5               	clrf	I2c_DataReceiveSm@AddressStored^(0+128)
  7792  02F1  0AB5               	incf	I2c_DataReceiveSm@AddressStored^(0+128),f
  7793                           
  7794                           ;i2c_slv_drv.c: 337: I2cRxFlag = ((UINT8)(1));
  7795  02F2  01B7               	clrf	I2c_DataReceiveSm@I2cRxFlag^(0+128)
  7796  02F3  0AB7               	incf	I2c_DataReceiveSm@I2cRxFlag^(0+128),f
  7797                           
  7798                           ;i2c_slv_drv.c: 339: I2cRxState = StoreAddrByte;
  7799  02F4  0020               	movlb	0	; select bank0
  7800  02F5  01E5               	clrf	I2c_DataReceiveSm@I2cRxState
  7801  02F6  0AE5               	incf	I2c_DataReceiveSm@I2cRxState,f
  7802                           
  7803                           ;i2c_slv_drv.c: 340: }
  7804  02F7  0008               	return
  7805  02F8                     l4939:	
  7806                           
  7807                           ;i2c_slv_drv.c: 341: else if ((CheckByteStatus() == ((UINT8)(1))) && (I2cRxFlag == ((UIN
      +                          T8)(1))))
  7808  02F8  3196  2687  3182   	fcall	_CheckByteStatus
  7809  02FB  3A01               	xorlw	1
  7810  02FC  1D03               	skipz
  7811  02FD  0008               	return
  7812  02FE  0021               	movlb	1	; select bank1
  7813  02FF  0337               	decf	I2c_DataReceiveSm@I2cRxFlag^(0+128),w
  7814  0300  1D03               	btfss	3,2
  7815  0301  0008               	return
  7816                           
  7817                           ;i2c_slv_drv.c: 342: {
  7818                           ;i2c_slv_drv.c: 344: AddressStored = 0;
  7819  0302  01B5               	clrf	I2c_DataReceiveSm@AddressStored^(0+128)
  7820                           
  7821                           ;i2c_slv_drv.c: 345: if (OpType == ((UINT8)(0)))
  7822  0303  0020               	movlb	0	; select bank0
  7823  0304  0866               	movf	I2c_DataReceiveSm@OpType,w
  7824  0305  1D03               	btfss	3,2
  7825  0306  2B0C               	goto	l4949
  7826                           
  7827                           ;i2c_slv_drv.c: 346: {
  7828                           ;i2c_slv_drv.c: 348: I2cRxState = HandleWrite;
  7829  0307  3002               	movlw	2
  7830  0308  00BC               	movwf	??_I2c_DataReceiveSm
  7831  0309  083C               	movf	??_I2c_DataReceiveSm,w
  7832  030A  00E5               	movwf	I2c_DataReceiveSm@I2cRxState
  7833                           
  7834                           ;i2c_slv_drv.c: 349: }
  7835  030B  0008               	return
  7836  030C                     l4949:	
  7837                           
  7838                           ;i2c_slv_drv.c: 350: else
  7839                           ;i2c_slv_drv.c: 351: {
  7840                           ;i2c_slv_drv.c: 353: I2cRxState = HandleRead;
  7841  030C  3003               	movlw	3
  7842  030D  00BC               	movwf	??_I2c_DataReceiveSm
  7843  030E  083C               	movf	??_I2c_DataReceiveSm,w
  7844  030F  00E5               	movwf	I2c_DataReceiveSm@I2cRxState
  7845                           
  7846                           ;i2c_slv_drv.c: 359: }
  7847                           ;i2c_slv_drv.c: 360: }
  7848                           ;i2c_slv_drv.c: 361: break;
  7849                           
  7850                           ;i2c_slv_drv.c: 356: else
  7851                           ;i2c_slv_drv.c: 357: {
  7852                           
  7853                           ;i2c_slv_drv.c: 354: }
  7854                           ;i2c_slv_drv.c: 355: }
  7855  0310  0008               	return
  7856  0311                     l4951:	
  7857                           ;i2c_slv_drv.c: 363: case StoreAddrByte:
  7858                           
  7859                           
  7860                           ;i2c_slv_drv.c: 365: I2cRxAddress = SSP1BUF;
  7861  0311  0024               	movlb	4	; select bank4
  7862  0312  0811               	movf	17,w	;volatile
  7863  0313  0020               	movlb	0	; select bank0
  7864  0314  00BC               	movwf	??_I2c_DataReceiveSm
  7865  0315  083C               	movf	??_I2c_DataReceiveSm,w
  7866  0316  00E4               	movwf	I2c_DataReceiveSm@I2cRxAddress
  7867                           
  7868                           ;i2c_slv_drv.c: 367: I2cRxAddress = (I2cRxAddress >> ((UINT8)(1)));
  7869  0317  3664               	lsrf	I2c_DataReceiveSm@I2cRxAddress,w
  7870  0318  00BC               	movwf	??_I2c_DataReceiveSm
  7871  0319  083C               	movf	??_I2c_DataReceiveSm,w
  7872  031A  00E4               	movwf	I2c_DataReceiveSm@I2cRxAddress
  7873                           
  7874                           ;i2c_slv_drv.c: 369: OpType = (SSP1BUF & ((UINT8)(0x01)));
  7875  031B  0024               	movlb	4	; select bank4
  7876  031C  0811               	movf	17,w	;volatile
  7877  031D  3901               	andlw	1
  7878  031E  0020               	movlb	0	; select bank0
  7879  031F  00BC               	movwf	??_I2c_DataReceiveSm
  7880  0320  083C               	movf	??_I2c_DataReceiveSm,w
  7881  0321  00E6               	movwf	I2c_DataReceiveSm@OpType
  7882                           
  7883                           ;i2c_slv_drv.c: 371: if (OpType == ((UINT8)(1)))
  7884  0322  0366               	decf	I2c_DataReceiveSm@OpType,w
  7885  0323  1D03               	btfss	3,2
  7886  0324  2B32               	goto	l4963
  7887                           
  7888                           ;i2c_slv_drv.c: 372: {
  7889                           ;i2c_slv_drv.c: 374: SSP1BUF = I2cTxBuffer[TxCounter];
  7890  0325  0868               	movf	I2c_DataReceiveSm@TxCounter,w
  7891  0326  3EA0               	addlw	(low (_I2cTxBuffer| (0+512)))& (0+255)
  7892  0327  0086               	movwf	6
  7893  0328  3002               	movlw	2	; select bank5/6
  7894  0329  0087               	movwf	7
  7895  032A  0801               	movf	1,w
  7896  032B  0024               	movlb	4	; select bank4
  7897  032C  0091               	movwf	17	;volatile
  7898                           
  7899                           ;i2c_slv_drv.c: 376: TxCounter++;
  7900  032D  3001               	movlw	1
  7901  032E  0020               	movlb	0	; select bank0
  7902  032F  00BC               	movwf	??_I2c_DataReceiveSm
  7903  0330  083C               	movf	??_I2c_DataReceiveSm,w
  7904  0331  07E8               	addwf	I2c_DataReceiveSm@TxCounter,f
  7905  0332                     l4963:	
  7906                           ;i2c_slv_drv.c: 378: else
  7907                           ;i2c_slv_drv.c: 379: {
  7908                           
  7909                           ;i2c_slv_drv.c: 377: }
  7910                           
  7911                           
  7912                           ;i2c_slv_drv.c: 381: }
  7913                           ;i2c_slv_drv.c: 383: I2cRxState = StopClkStretch;
  7914  0332  3004               	movlw	4
  7915  0333  00BC               	movwf	??_I2c_DataReceiveSm
  7916  0334  083C               	movf	??_I2c_DataReceiveSm,w
  7917  0335  00E5               	movwf	I2c_DataReceiveSm@I2cRxState
  7918                           
  7919                           ;i2c_slv_drv.c: 384: break;
  7920  0336  0008               	return
  7921  0337                     l4965:	
  7922                           ;i2c_slv_drv.c: 386: case HandleWrite:
  7923                           
  7924                           
  7925                           ;i2c_slv_drv.c: 388: if (CheckStopBitStatus() == ((UINT8)(1)))
  7926  0337  3196  2691  3182   	fcall	_CheckStopBitStatus
  7927  033A  3A01               	xorlw	1
  7928  033B  1D03               	skipz
  7929  033C  2B83               	goto	l4989
  7930                           
  7931                           ;i2c_slv_drv.c: 389: {
  7932                           ;i2c_slv_drv.c: 391: I2cRxFlag = ((UINT8)(0));
  7933  033D  0021               	movlb	1	; select bank1
  7934  033E  01B7               	clrf	I2c_DataReceiveSm@I2cRxFlag^(0+128)
  7935                           
  7936                           ;i2c_slv_drv.c: 393: I2cPacket.Lenght = RxCounter;
  7937  033F  30EF               	movlw	239
  7938  0340  0086               	movwf	6
  7939  0341  3023               	movlw	35
  7940  0342  0087               	movwf	7
  7941  0343  0020               	movlb	0	; select bank0
  7942  0344  0867               	movf	I2c_DataReceiveSm@RxCounter,w
  7943  0345  0081               	movwf	1
  7944                           
  7945                           ;i2c_slv_drv.c: 394: I2cPacket.ReadWrite = ((UINT8)(0));
  7946  0346  309D               	movlw	157
  7947  0347  0086               	movwf	6
  7948  0348  3023               	movlw	35
  7949  0349  0087               	movwf	7
  7950  034A  3141               	addfsr 1,1
  7951  034B  0181               	clrf	1
  7952                           
  7953                           ;i2c_slv_drv.c: 395: I2cPacket.SlaveAddress = I2cRxAddress;
  7954  034C  309D               	movlw	157
  7955  034D  0086               	movwf	6
  7956  034E  3023               	movlw	35
  7957  034F  0087               	movwf	7
  7958  0350  0864               	movf	I2c_DataReceiveSm@I2cRxAddress,w
  7959  0351  3FC0               	movwi [0]fsr1
  7960                           
  7961                           ;i2c_slv_drv.c: 396: for (Index = 0; Index < ((UINT8)(80)); Index++)
  7962  0352  01C3               	clrf	I2c_DataReceiveSm@Index
  7963  0353  3050               	movlw	80
  7964  0354  0243               	subwf	I2c_DataReceiveSm@Index,w
  7965  0355  1803               	btfsc	3,0
  7966  0356  2B79               	goto	l4983
  7967  0357                     l4977:	
  7968                           
  7969                           ;i2c_slv_drv.c: 397: {
  7970                           ;i2c_slv_drv.c: 398: I2cPacket.Buffer[Index] = I2cRxBuffer[Index];
  7971  0357  0843               	movf	I2c_DataReceiveSm@Index,w
  7972  0358  3E20               	addlw	(low (_I2cRxBuffer| (0+768)))& (0+255)
  7973  0359  0086               	movwf	6
  7974  035A  3003               	movlw	3	; select bank6/7
  7975  035B  0087               	movwf	7
  7976  035C  0801               	movf	1,w
  7977  035D  00BC               	movwf	??_I2c_DataReceiveSm
  7978  035E  0843               	movf	I2c_DataReceiveSm@Index,w
  7979  035F  00BD               	movwf	??_I2c_DataReceiveSm+1
  7980  0360  01BE               	clrf	??_I2c_DataReceiveSm+2
  7981  0361  309F               	movlw	159
  7982  0362  00BF               	movwf	??_I2c_DataReceiveSm+3
  7983  0363  3023               	movlw	35
  7984  0364  00C0               	movwf	??_I2c_DataReceiveSm+4
  7985  0365  083D               	movf	??_I2c_DataReceiveSm+1,w
  7986  0366  073F               	addwf	??_I2c_DataReceiveSm+3,w
  7987  0367  00C1               	movwf	??_I2c_DataReceiveSm+5
  7988  0368  083E               	movf	??_I2c_DataReceiveSm+2,w
  7989  0369  3D40               	addwfc	??_I2c_DataReceiveSm+4,w
  7990  036A  00C2               	movwf	??_I2c_DataReceiveSm+6
  7991  036B  0841               	movf	??_I2c_DataReceiveSm+5,w
  7992  036C  0086               	movwf	6
  7993  036D  0842               	movf	??_I2c_DataReceiveSm+6,w
  7994  036E  0087               	movwf	7
  7995  036F  083C               	movf	??_I2c_DataReceiveSm,w
  7996  0370  0081               	movwf	1
  7997  0371  3001               	movlw	1
  7998  0372  00BC               	movwf	??_I2c_DataReceiveSm
  7999  0373  083C               	movf	??_I2c_DataReceiveSm,w
  8000  0374  07C3               	addwf	I2c_DataReceiveSm@Index,f
  8001  0375  3050               	movlw	80
  8002  0376  0243               	subwf	I2c_DataReceiveSm@Index,w
  8003  0377  1C03               	skipc
  8004  0378  2B57               	goto	l4977
  8005  0379                     l4983:	
  8006                           
  8007                           ;i2c_slv_drv.c: 399: }
  8008                           ;i2c_slv_drv.c: 402: GenerateEvt(&I2cNewPacketNotification);
  8009  0379  30E2               	movlw	(low (_I2cNewPacketNotification| 0))& (0+255)
  8010  037A  3188  20F8  3182   	fcall	_GenerateEvt
  8011                           
  8012                           ;i2c_slv_drv.c: 405: RxCounter = 0;
  8013  037D  0020               	movlb	0	; select bank0
  8014  037E  01E7               	clrf	I2c_DataReceiveSm@RxCounter
  8015                           
  8016                           ;i2c_slv_drv.c: 407: ClearRxBuffer();
  8017  037F  3197  2707  3182   	fcall	_ClearRxBuffer
  8018                           
  8019                           ;i2c_slv_drv.c: 408: }
  8020  0382  2B92               	goto	l4993
  8021  0383                     l4989:	
  8022                           
  8023                           ;i2c_slv_drv.c: 409: else
  8024                           ;i2c_slv_drv.c: 410: {
  8025                           ;i2c_slv_drv.c: 412: I2cRxBuffer[RxCounter] = SSP1BUF;
  8026  0383  0024               	movlb	4	; select bank4
  8027  0384  0811               	movf	17,w	;volatile
  8028  0385  0020               	movlb	0	; select bank0
  8029  0386  00BC               	movwf	??_I2c_DataReceiveSm
  8030  0387  0867               	movf	I2c_DataReceiveSm@RxCounter,w
  8031  0388  3E20               	addlw	(low (_I2cRxBuffer| (0+768)))& (0+255)
  8032  0389  0086               	movwf	6
  8033  038A  3003               	movlw	3	; select bank6/7
  8034  038B  0087               	movwf	7
  8035  038C  083C               	movf	??_I2c_DataReceiveSm,w
  8036  038D  0081               	movwf	1
  8037                           
  8038                           ;i2c_slv_drv.c: 414: RxCounter++;
  8039  038E  3001               	movlw	1
  8040  038F  00BC               	movwf	??_I2c_DataReceiveSm
  8041  0390  083C               	movf	??_I2c_DataReceiveSm,w
  8042  0391  07E7               	addwf	I2c_DataReceiveSm@RxCounter,f
  8043  0392                     l4993:	
  8044                           
  8045                           ;i2c_slv_drv.c: 415: }
  8046                           ;i2c_slv_drv.c: 417: I2cRxState = StopClkStretch;
  8047  0392  3004               	movlw	4
  8048  0393  0020               	movlb	0	; select bank0
  8049  0394  00BC               	movwf	??_I2c_DataReceiveSm
  8050  0395  083C               	movf	??_I2c_DataReceiveSm,w
  8051  0396  00E5               	movwf	I2c_DataReceiveSm@I2cRxState
  8052                           
  8053                           ;i2c_slv_drv.c: 418: break;
  8054  0397  0008               	return
  8055  0398                     l4995:	
  8056                           ;i2c_slv_drv.c: 420: case HandleRead:
  8057                           
  8058                           
  8059                           ;i2c_slv_drv.c: 422: if (CheckAckStatus() == ((UINT8)(0)))
  8060  0398  3196  267D  3182   	fcall	_CheckAckStatus
  8061  039B  3A00               	xorlw	0
  8062  039C  1D03               	skipz
  8063  039D  2BAD               	goto	l5001
  8064                           
  8065                           ;i2c_slv_drv.c: 423: {
  8066                           ;i2c_slv_drv.c: 425: SSP1BUF = I2cTxBuffer[TxCounter];
  8067  039E  0020               	movlb	0	; select bank0
  8068  039F  0868               	movf	I2c_DataReceiveSm@TxCounter,w
  8069  03A0  3EA0               	addlw	(low (_I2cTxBuffer| (0+512)))& (0+255)
  8070  03A1  0086               	movwf	6
  8071  03A2  3002               	movlw	2	; select bank5/6
  8072  03A3  0087               	movwf	7
  8073  03A4  0801               	movf	1,w
  8074  03A5  0024               	movlb	4	; select bank4
  8075  03A6  0091               	movwf	17	;volatile
  8076                           
  8077                           ;i2c_slv_drv.c: 427: TxCounter++;
  8078  03A7  3001               	movlw	1
  8079  03A8  0020               	movlb	0	; select bank0
  8080  03A9  00BC               	movwf	??_I2c_DataReceiveSm
  8081  03AA  083C               	movf	??_I2c_DataReceiveSm,w
  8082  03AB  07E8               	addwf	I2c_DataReceiveSm@TxCounter,f
  8083                           
  8084                           ;i2c_slv_drv.c: 428: }
  8085  03AC  2BB3               	goto	l5005
  8086  03AD                     l5001:	
  8087                           
  8088                           ;i2c_slv_drv.c: 429: else
  8089                           ;i2c_slv_drv.c: 430: {
  8090                           ;i2c_slv_drv.c: 432: TxCounter = 0;
  8091  03AD  0020               	movlb	0	; select bank0
  8092  03AE  01E8               	clrf	I2c_DataReceiveSm@TxCounter
  8093                           
  8094                           ;i2c_slv_drv.c: 434: I2cRxFlag = ((UINT8)(0));
  8095  03AF  0021               	movlb	1	; select bank1
  8096  03B0  01B7               	clrf	I2c_DataReceiveSm@I2cRxFlag^(0+128)
  8097                           
  8098                           ;i2c_slv_drv.c: 436: ClearTxBuffer();
  8099  03B1  3197  2717         	fcall	_ClearTxBuffer
  8100  03B3                     l5005:	
  8101                           
  8102                           ;i2c_slv_drv.c: 438: }
  8103                           ;i2c_slv_drv.c: 440: I2cRxState = StopClkStretch;
  8104  03B3  3004               	movlw	4
  8105  03B4  0020               	movlb	0	; select bank0
  8106  03B5  00BC               	movwf	??_I2c_DataReceiveSm
  8107  03B6  083C               	movf	??_I2c_DataReceiveSm,w
  8108  03B7  00E5               	movwf	I2c_DataReceiveSm@I2cRxState
  8109                           
  8110                           ;i2c_slv_drv.c: 441: break;
  8111  03B8  0008               	return
  8112  03B9                     l177:	
  8113                           ;i2c_slv_drv.c: 443: case StopClkStretch:
  8114                           
  8115                           
  8116                           ;i2c_slv_drv.c: 445: SSP1CON1bits.CKP = ((UINT8)(1));
  8117  03B9  0024               	movlb	4	; select bank4
  8118  03BA  1615               	bsf	21,4	;volatile
  8119                           
  8120                           ;i2c_slv_drv.c: 447: I2cRxState = CheckRxByte;
  8121  03BB  0020               	movlb	0	; select bank0
  8122  03BC  01E5               	clrf	I2c_DataReceiveSm@I2cRxState
  8123                           
  8124                           ;i2c_slv_drv.c: 452: }
  8125                           
  8126                           ;i2c_slv_drv.c: 451: break;
  8127                           
  8128                           ;i2c_slv_drv.c: 450: default:
  8129                           
  8130                           ;i2c_slv_drv.c: 448: break;
  8131  03BD  0008               	return
  8132  03BE                     l5011:	
  8133  03BE  0020               	movlb	0	; select bank0
  8134  03BF  0865               	movf	I2c_DataReceiveSm@I2cRxState,w
  8135                           
  8136                           ; Switch size 1, requested type "space"
  8137                           ; Number of cases is 5, Range of values is 0 to 4
  8138                           ; switch strategies available:
  8139                           ; Name         Instructions Cycles
  8140                           ; direct_byte           16     6 (fixed)
  8141                           ; simple_byte           16     9 (average)
  8142                           ; jumptable            260     6 (fixed)
  8143                           ;	Chosen strategy is direct_byte
  8144  03C0  0084               	movwf	4
  8145  03C1  3005               	movlw	5
  8146  03C2  0204               	subwf	4,w
  8147  03C3  1803               	skipnc
  8148  03C4  0008               	return
  8149  03C5  3190               	movlp	high S5197
  8150  03C6  3504               	lslf	4,w
  8151  03C7  3E2A               	addlw	low S5197
  8152  03C8  0082               	movwf	2
  8153  03C9  0008               	return
  8154  03CA                     __end_of_I2c_DataReceiveSm:	
  8155                           
  8156                           	psect	swtext1
  8157  102A                     __pswtext1:	
  8158  102A                     S5197:	
  8159  102A  3182  2ACE         	ljmp	l4919
  8160  102C  3183  2B11         	ljmp	l4951
  8161  102E  3183  2B37         	ljmp	l4965
  8162  1030  3183  2B98         	ljmp	l4995
  8163  1032  3183  2BB9         	ljmp	l177
  8164                           
  8165                           	psect	text20
  8166  178A                     __ptext20:	
  8167 ;; *************** function _Wdg_MainTask *****************
  8168 ;; Defined at:
  8169 ;;		line 73 in file "../../../Framework/MercuryFwk/Source/c/03_Sml/02_Ssl/wdg.c"
  8170 ;; Parameters:    Size  Location     Type
  8171 ;;  Options         1   27[BANK0 ] unsigned char 
  8172 ;; Auto vars:     Size  Location     Type
  8173 ;;		None
  8174 ;; Return value:  Size  Location     Type
  8175 ;;                  1    wreg      void 
  8176 ;; Registers used:
  8177 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  8178 ;; Tracked objects:
  8179 ;;		On entry : 0/0
  8180 ;;		On exit  : 0/0
  8181 ;;		Unchanged: 0/0
  8182 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8183 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8184 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8185 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8186 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8187 ;;Total ram usage:        1 bytes
  8188 ;; Hardware stack levels used:    1
  8189 ;; Hardware stack levels required when called:    3
  8190 ;; This function calls:
  8191 ;;		_Mcu_ClearWdg
  8192 ;;		_Mcu_SetWdgPeriod
  8193 ;;		_Mcu_SetWdgSts
  8194 ;; This function is called by:
  8195 ;;		_InitializeTasks
  8196 ;;		_ScheduleTasks
  8197 ;; This function uses a non-reentrant model
  8198 ;;
  8199                           
  8200                           
  8201                           ;psect for function _Wdg_MainTask
  8202  178A                     _Wdg_MainTask:	
  8203                           
  8204                           ;wdg.c: 75: switch (SystemState)
  8205                           
  8206                           ;incstack = 0
  8207                           ; Regs used in _Wdg_MainTask: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  8208  178A  2F96               	goto	l3965
  8209  178B                     l3959:	
  8210                           ;wdg.c: 76: {
  8211                           ;wdg.c: 78: case InitializationState:
  8212                           
  8213                           
  8214                           ;wdg.c: 80: Mcu_SetWdgPeriod(WdgPer_2s);
  8215  178B  300B               	movlw	11
  8216  178C  3196  269B  3197   	fcall	_Mcu_SetWdgPeriod
  8217                           
  8218                           ;wdg.c: 82: Mcu_SetWdgSts(((UINT8)(1)));
  8219  178F  3001               	movlw	1
  8220  1790  3196  2654         	fcall	_Mcu_SetWdgSts
  8221                           
  8222                           ;wdg.c: 83: break;
  8223  1792  0008               	return
  8224  1793                     l3961:	
  8225                           ;wdg.c: 86: case RunningState:
  8226                           
  8227                           
  8228                           ;wdg.c: 88: Mcu_ClearWdg();
  8229  1793  3196  2635         	fcall	_Mcu_ClearWdg
  8230                           
  8231                           ;wdg.c: 94: }
  8232                           
  8233                           ;wdg.c: 93: break;
  8234                           
  8235                           ;wdg.c: 92: default:
  8236                           
  8237                           ;wdg.c: 89: break;
  8238  1795  0008               	return
  8239  1796                     l3965:	
  8240  1796  0020               	movlb	0	; select bank0
  8241  1797  086C               	movf	_SystemState,w
  8242                           
  8243                           ; Switch size 1, requested type "space"
  8244                           ; Number of cases is 2, Range of values is 0 to 1
  8245                           ; switch strategies available:
  8246                           ; Name         Instructions Cycles
  8247                           ; simple_byte            7     4 (average)
  8248                           ; direct_byte           10     6 (fixed)
  8249                           ; jumptable            260     6 (fixed)
  8250                           ;	Chosen strategy is simple_byte
  8251  1798  3A00               	xorlw	0	; case 0
  8252  1799  1903               	skipnz
  8253  179A  2F8B               	goto	l3959
  8254  179B  3A01               	xorlw	1	; case 1
  8255  179C  1903               	skipnz
  8256  179D  2F93               	goto	l3961
  8257  179E  2F9F               	goto	l846
  8258  179F                     l846:	
  8259  179F  0008               	return
  8260  17A0                     __end_of_Wdg_MainTask:	
  8261                           
  8262                           	psect	text21
  8263  169B                     __ptext21:	
  8264 ;; *************** function _Mcu_SetWdgPeriod *****************
  8265 ;; Defined at:
  8266 ;;		line 223 in file "../../../Framework/MercuryFwk/Source/c/01_Hal/02_Drv/mcu_drv.c"
  8267 ;; Parameters:    Size  Location     Type
  8268 ;;  WdgPeriod       1    wreg     enum E3675
  8269 ;; Auto vars:     Size  Location     Type
  8270 ;;  WdgPeriod       1    5[COMMON] enum E3675
  8271 ;; Return value:  Size  Location     Type
  8272 ;;                  1    wreg      void 
  8273 ;; Registers used:
  8274 ;;		wreg, status,2, status,0
  8275 ;; Tracked objects:
  8276 ;;		On entry : 0/0
  8277 ;;		On exit  : 0/0
  8278 ;;		Unchanged: 0/0
  8279 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8280 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8281 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8282 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8283 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8284 ;;Total ram usage:        2 bytes
  8285 ;; Hardware stack levels used:    1
  8286 ;; Hardware stack levels required when called:    2
  8287 ;; This function calls:
  8288 ;;		Nothing
  8289 ;; This function is called by:
  8290 ;;		_Wdg_MainTask
  8291 ;; This function uses a non-reentrant model
  8292 ;;
  8293                           
  8294                           
  8295                           ;psect for function _Mcu_SetWdgPeriod
  8296  169B                     _Mcu_SetWdgPeriod:	
  8297                           
  8298                           ;incstack = 0
  8299                           ; Regs used in _Mcu_SetWdgPeriod: [wreg+status,2+status,0]
  8300                           ;Mcu_SetWdgPeriod@WdgPeriod stored from wreg
  8301  169B  00F5               	movwf	Mcu_SetWdgPeriod@WdgPeriod
  8302                           
  8303                           ;mcu_drv.c: 226: WDTCONbits.WDTPS = WdgPeriod;
  8304  169C  0875               	movf	Mcu_SetWdgPeriod@WdgPeriod,w
  8305  169D  00F4               	movwf	??_Mcu_SetWdgPeriod
  8306  169E  0DF4               	rlf	??_Mcu_SetWdgPeriod,f
  8307  169F  0021               	movlb	1	; select bank1
  8308  16A0  0817               	movf	23,w	;volatile
  8309  16A1  0674               	xorwf	??_Mcu_SetWdgPeriod,w
  8310  16A2  39C1               	andlw	-63
  8311  16A3  0674               	xorwf	??_Mcu_SetWdgPeriod,w
  8312  16A4  0097               	movwf	23	;volatile
  8313  16A5  0008               	return
  8314  16A6                     __end_of_Mcu_SetWdgPeriod:	
  8315                           
  8316                           	psect	text22
  8317  1635                     __ptext22:	
  8318 ;; *************** function _Mcu_ClearWdg *****************
  8319 ;; Defined at:
  8320 ;;		line 251 in file "../../../Framework/MercuryFwk/Source/c/01_Hal/02_Drv/mcu_drv.c"
  8321 ;; Parameters:    Size  Location     Type
  8322 ;;		None
  8323 ;; Auto vars:     Size  Location     Type
  8324 ;;		None
  8325 ;; Return value:  Size  Location     Type
  8326 ;;                  1    wreg      void 
  8327 ;; Registers used:
  8328 ;;		None
  8329 ;; Tracked objects:
  8330 ;;		On entry : 0/0
  8331 ;;		On exit  : 0/0
  8332 ;;		Unchanged: 0/0
  8333 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8334 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8335 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8336 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8337 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8338 ;;Total ram usage:        0 bytes
  8339 ;; Hardware stack levels used:    1
  8340 ;; Hardware stack levels required when called:    2
  8341 ;; This function calls:
  8342 ;;		Nothing
  8343 ;; This function is called by:
  8344 ;;		_Wdg_MainTask
  8345 ;; This function uses a non-reentrant model
  8346 ;;
  8347                           
  8348                           
  8349                           ;psect for function _Mcu_ClearWdg
  8350  1635                     _Mcu_ClearWdg:	
  8351                           
  8352                           ;incstack = 0
  8353                           ; Regs used in _Mcu_ClearWdg: []
  8354  1635  0064               	clrwdt	;# 
  8355  1636  0008               	return
  8356  1637                     __end_of_Mcu_ClearWdg:	
  8357                           
  8358                           	psect	text23
  8359  0AEA                     __ptext23:	
  8360 ;; *************** function _LedStateMachine *****************
  8361 ;; Defined at:
  8362 ;;		line 75 in file "../../../Framework/MercuryFwk/Source/c/03_Sml/02_Ssl/led.c"
  8363 ;; Parameters:    Size  Location     Type
  8364 ;;  Led             1    wreg     unsigned char 
  8365 ;;  LedSts          1   11[BANK0 ] PTR enum E4026
  8366 ;;		 -> Led1Sts(1), 
  8367 ;;  LedBlink        1   12[BANK0 ] PTR struct _LedBlinkType
  8368 ;;		 -> Led1Blink(9), 
  8369 ;;  LedPulse        1   13[BANK0 ] PTR struct _LedPulseType
  8370 ;;		 -> Led1Pulse(6), 
  8371 ;; Auto vars:     Size  Location     Type
  8372 ;;  Led             1   16[BANK0 ] unsigned char 
  8373 ;;  LedOutSts       1   17[BANK0 ] unsigned char 
  8374 ;; Return value:  Size  Location     Type
  8375 ;;                  1    wreg      unsigned char 
  8376 ;; Registers used:
  8377 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8378 ;; Tracked objects:
  8379 ;;		On entry : 0/0
  8380 ;;		On exit  : 0/0
  8381 ;;		Unchanged: 0/0
  8382 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8383 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8384 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8385 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8386 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8387 ;;Total ram usage:        7 bytes
  8388 ;; Hardware stack levels used:    1
  8389 ;; Hardware stack levels required when called:    4
  8390 ;; This function calls:
  8391 ;;		_LedBlinkStateMachine
  8392 ;;		_LedPulseStateMachine
  8393 ;; This function is called by:
  8394 ;;		_Led_MainTask
  8395 ;; This function uses a non-reentrant model
  8396 ;;
  8397                           
  8398                           
  8399                           ;psect for function _LedStateMachine
  8400  0AEA                     _LedStateMachine:	
  8401                           
  8402                           ;incstack = 0
  8403                           ; Regs used in _LedStateMachine: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  8404                           ;LedStateMachine@Led stored from wreg
  8405  0AEA  0020               	movlb	0	; select bank0
  8406  0AEB  00B0               	movwf	LedStateMachine@Led
  8407                           
  8408                           ;led.c: 78: UINT8 LedOutSts = 0u;
  8409  0AEC  01B1               	clrf	LedStateMachine@LedOutSts
  8410                           
  8411                           ;led.c: 81: switch (*LedSts)
  8412  0AED  2B08               	goto	l4811
  8413  0AEE                     l4803:	
  8414                           ;led.c: 82: {
  8415                           ;led.c: 83: case LED_STS_OFF:
  8416                           
  8417                           
  8418                           ;led.c: 85: LedOutSts = ((UINT8)(0));
  8419  0AEE  01B1               	clrf	LedStateMachine@LedOutSts
  8420                           
  8421                           ;led.c: 86: break;
  8422  0AEF  2B19               	goto	l4813
  8423  0AF0                     l642:	
  8424                           ;led.c: 88: case LED_STS_ON:
  8425                           
  8426                           
  8427                           ;led.c: 90: LedOutSts = ((UINT8)(1));
  8428  0AF0  01B1               	clrf	LedStateMachine@LedOutSts
  8429  0AF1  0AB1               	incf	LedStateMachine@LedOutSts,f
  8430                           
  8431                           ;led.c: 91: break;
  8432  0AF2  2B19               	goto	l4813
  8433  0AF3                     l4805:	
  8434                           ;led.c: 93: case LED_STS_BLINK:
  8435                           
  8436                           
  8437                           ;led.c: 95: LedOutSts = LedBlinkStateMachine(LedBlink);
  8438  0AF3  082C               	movf	LedStateMachine@LedBlink,w
  8439  0AF4  318F  2761  318A   	fcall	_LedBlinkStateMachine
  8440  0AF7  0020               	movlb	0	; select bank0
  8441  0AF8  00AE               	movwf	??_LedStateMachine
  8442  0AF9  082E               	movf	??_LedStateMachine,w
  8443  0AFA  2B06               	goto	L7
  8444  0AFB                     l4807:	
  8445                           ;led.c: 98: case LED_STS_PULSE:
  8446                           
  8447                           ;led.c: 96: break;
  8448                           
  8449                           
  8450                           ;led.c: 100: LedOutSts = LedPulseStateMachine(LedPulse, Led);
  8451  0AFB  0830               	movf	LedStateMachine@Led,w
  8452  0AFC  00AE               	movwf	??_LedStateMachine
  8453  0AFD  082E               	movf	??_LedStateMachine,w
  8454  0AFE  00A7               	movwf	LedPulseStateMachine@Led
  8455  0AFF  082D               	movf	LedStateMachine@LedPulse,w
  8456  0B00  318D  25EF  318A   	fcall	_LedPulseStateMachine
  8457  0B03  0020               	movlb	0	; select bank0
  8458  0B04  00AF               	movwf	??_LedStateMachine+1
  8459  0B05  082F               	movf	??_LedStateMachine+1,w
  8460  0B06                     L7:	
  8461  0B06  00B1               	movwf	LedStateMachine@LedOutSts
  8462                           
  8463                           ;led.c: 105: }
  8464                           
  8465                           ;led.c: 104: break;
  8466                           
  8467                           ;led.c: 103: default:
  8468                           
  8469                           ;led.c: 101: break;
  8470  0B07  2B19               	goto	l4813
  8471  0B08                     l4811:	
  8472  0B08  082B               	movf	LedStateMachine@LedSts,w
  8473  0B09  0086               	movwf	6
  8474  0B0A  0187               	clrf	7
  8475  0B0B  0801               	movf	1,w
  8476                           
  8477                           ; Switch size 1, requested type "space"
  8478                           ; Number of cases is 4, Range of values is 0 to 3
  8479                           ; switch strategies available:
  8480                           ; Name         Instructions Cycles
  8481                           ; simple_byte           13     7 (average)
  8482                           ; direct_byte           14     6 (fixed)
  8483                           ; jumptable            260     6 (fixed)
  8484                           ;	Chosen strategy is simple_byte
  8485  0B0C  3A00               	xorlw	0	; case 0
  8486  0B0D  1903               	skipnz
  8487  0B0E  2AEE               	goto	l4803
  8488  0B0F  3A01               	xorlw	1	; case 1
  8489  0B10  1903               	skipnz
  8490  0B11  2AF0               	goto	l642
  8491  0B12  3A03               	xorlw	3	; case 2
  8492  0B13  1903               	skipnz
  8493  0B14  2AF3               	goto	l4805
  8494  0B15  3A01               	xorlw	1	; case 3
  8495  0B16  1903               	skipnz
  8496  0B17  2AFB               	goto	l4807
  8497  0B18  2B19               	goto	l4813
  8498  0B19                     l4813:	
  8499                           
  8500                           ;led.c: 107: return LedOutSts;
  8501  0B19  0831               	movf	LedStateMachine@LedOutSts,w
  8502  0B1A  0008               	return
  8503  0B1B                     __end_of_LedStateMachine:	
  8504                           
  8505                           	psect	text24
  8506  0DEF                     __ptext24:	
  8507 ;; *************** function _LedPulseStateMachine *****************
  8508 ;; Defined at:
  8509 ;;		line 131 in file "../../../Framework/MercuryFwk/Source/c/01_Hal/02_Drv/led_drv.c"
  8510 ;; Parameters:    Size  Location     Type
  8511 ;;  LedPulse        1    wreg     PTR struct _LedPulseType
  8512 ;;		 -> Led1Pulse(6), 
  8513 ;;  Led             1    7[BANK0 ] unsigned char 
  8514 ;; Auto vars:     Size  Location     Type
  8515 ;;  LedPulse        1   10[BANK0 ] PTR struct _LedPulseType
  8516 ;;		 -> Led1Pulse(6), 
  8517 ;; Return value:  Size  Location     Type
  8518 ;;                  1    wreg      unsigned char 
  8519 ;; Registers used:
  8520 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8521 ;; Tracked objects:
  8522 ;;		On entry : 0/0
  8523 ;;		On exit  : 0/0
  8524 ;;		Unchanged: 0/0
  8525 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8526 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8527 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8528 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8529 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8530 ;;Total ram usage:        4 bytes
  8531 ;; Hardware stack levels used:    1
  8532 ;; Hardware stack levels required when called:    3
  8533 ;; This function calls:
  8534 ;;		_Led_SetLedStatus
  8535 ;;		___lwdiv
  8536 ;; This function is called by:
  8537 ;;		_LedStateMachine
  8538 ;; This function uses a non-reentrant model
  8539 ;;
  8540                           
  8541                           
  8542                           ;psect for function _LedPulseStateMachine
  8543  0DEF                     _LedPulseStateMachine:	
  8544                           
  8545                           ;incstack = 0
  8546                           ; Regs used in _LedPulseStateMachine: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  8547                           ;LedPulseStateMachine@LedPulse stored from wreg
  8548  0DEF  0020               	movlb	0	; select bank0
  8549  0DF0  00AA               	movwf	LedPulseStateMachine@LedPulse
  8550                           
  8551                           ;led_drv.c: 134: switch (LedPulse->LedPulseState)
  8552  0DF1  2E42               	goto	l4549
  8553  0DF2                     l4531:	
  8554                           ;led_drv.c: 135: {
  8555                           ;led_drv.c: 136: case LedPulseOn:
  8556                           
  8557                           
  8558                           ;led_drv.c: 138: LedPulse->LedOutState = ((UINT8)(1));
  8559  0DF2  0A2A               	incf	LedPulseStateMachine@LedPulse,w
  8560  0DF3  0086               	movwf	6
  8561  0DF4  0187               	clrf	7
  8562  0DF5  0181               	clrf	1
  8563  0DF6  0A81               	incf	1,f
  8564                           
  8565                           ;led_drv.c: 140: LedPulse->LedPulseState = LedPulseDelay;
  8566  0DF7  082A               	movf	LedPulseStateMachine@LedPulse,w
  8567  0DF8  0086               	movwf	6
  8568  0DF9  0187               	clrf	7
  8569  0DFA  0181               	clrf	1
  8570  0DFB  0A81               	incf	1,f
  8571  0DFC                     l4533:	
  8572                           ;led_drv.c: 143: case LedPulseDelay:
  8573                           
  8574                           
  8575                           ;led_drv.c: 145: LedPulse->LedPulseCounter++;
  8576  0DFC  082A               	movf	LedPulseStateMachine@LedPulse,w
  8577  0DFD  3E02               	addlw	2
  8578  0DFE  0086               	movwf	6
  8579  0DFF  0187               	clrf	7
  8580  0E00  3001               	movlw	1
  8581  0E01  0781               	addwf	1,f
  8582  0E02  3141               	addfsr 1,1
  8583  0E03  1803               	skipnc
  8584  0E04  0A81               	incf	1,f
  8585                           
  8586                           ;led_drv.c: 147: if (LedPulse->LedPulseCounter >= (LedPulse->LedPulseTimeMs/((UINT16)(10
      +                          ))))
  8587  0E05  300A               	movlw	10
  8588  0E06  00A0               	movwf	___lwdiv@divisor
  8589  0E07  3000               	movlw	0
  8590  0E08  00A1               	movwf	___lwdiv@divisor+1
  8591  0E09  082A               	movf	LedPulseStateMachine@LedPulse,w
  8592  0E0A  3E04               	addlw	4
  8593  0E0B  0086               	movwf	6
  8594  0E0C  0187               	clrf	7
  8595  0E0D  3F40               	moviw [0]fsr1
  8596  0E0E  00A2               	movwf	___lwdiv@dividend
  8597  0E0F  3F41               	moviw [1]fsr1
  8598  0E10  00A3               	movwf	___lwdiv@dividend+1
  8599  0E11  318B  231B  318D   	fcall	___lwdiv
  8600  0E14  0020               	movlb	0	; select bank0
  8601  0E15  082A               	movf	LedPulseStateMachine@LedPulse,w
  8602  0E16  3E02               	addlw	2
  8603  0E17  0086               	movwf	6
  8604  0E18  0187               	clrf	7
  8605  0E19  3F40               	moviw [0]fsr1
  8606  0E1A  00A8               	movwf	??_LedPulseStateMachine
  8607  0E1B  3F41               	moviw [1]fsr1
  8608  0E1C  00A9               	movwf	??_LedPulseStateMachine+1
  8609  0E1D  0821               	movf	?___lwdiv+1,w
  8610  0E1E  0229               	subwf	??_LedPulseStateMachine+1,w
  8611  0E1F  1D03               	skipz
  8612  0E20  2E23               	goto	u3775
  8613  0E21  0820               	movf	?___lwdiv,w
  8614  0E22  0228               	subwf	??_LedPulseStateMachine,w
  8615  0E23                     u3775:	
  8616  0E23  1C03               	skipc
  8617  0E24  2E51               	goto	l4551
  8618                           
  8619                           ;led_drv.c: 148: {
  8620                           ;led_drv.c: 150: LedPulse->LedPulseCounter = 0;
  8621  0E25  082A               	movf	LedPulseStateMachine@LedPulse,w
  8622  0E26  3E02               	addlw	2
  8623  0E27  0086               	movwf	6
  8624  0E28  0187               	clrf	7
  8625  0E29  3000               	movlw	0
  8626  0E2A  3FC0               	movwi [0]fsr1
  8627  0E2B  3FC1               	movwi [1]fsr1
  8628                           
  8629                           ;led_drv.c: 152: LedPulse->LedOutState = ((UINT8)(0));
  8630  0E2C  0A2A               	incf	LedPulseStateMachine@LedPulse,w
  8631  0E2D  0086               	movwf	6
  8632  0E2E  0187               	clrf	7
  8633  0E2F  0181               	clrf	1
  8634                           
  8635                           ;led_drv.c: 154: LedPulse->LedPulseState = LedPulseOff;
  8636  0E30  3002               	movlw	2
  8637  0E31  00A8               	movwf	??_LedPulseStateMachine
  8638  0E32  082A               	movf	LedPulseStateMachine@LedPulse,w
  8639  0E33  0086               	movwf	6
  8640  0E34  0187               	clrf	7
  8641  0E35  0828               	movf	??_LedPulseStateMachine,w
  8642  0E36  0081               	movwf	1
  8643                           
  8644                           ;led_drv.c: 155: }
  8645                           ;led_drv.c: 156: break;
  8646  0E37  2E51               	goto	l4551
  8647  0E38                     l4543:	
  8648                           ;led_drv.c: 158: case LedPulseOff:
  8649                           
  8650                           
  8651                           ;led_drv.c: 160: LedPulse->LedPulseState = LedPulseOn;
  8652  0E38  082A               	movf	LedPulseStateMachine@LedPulse,w
  8653  0E39  0086               	movwf	6
  8654  0E3A  0187               	clrf	7
  8655  0E3B  0181               	clrf	1
  8656                           
  8657                           ;led_drv.c: 162: Led_SetLedStatus(Led,LED_STS_OFF);
  8658  0E3C  01F4               	clrf	Led_SetLedStatus@LedSts
  8659  0E3D  0827               	movf	LedPulseStateMachine@Led,w
  8660  0E3E  3196  26D7  318D   	fcall	_Led_SetLedStatus
  8661                           
  8662                           ;led_drv.c: 167: }
  8663                           
  8664                           ;led_drv.c: 166: break;
  8665                           
  8666                           ;led_drv.c: 165: default:
  8667                           
  8668                           ;led_drv.c: 163: break;
  8669  0E41  2E51               	goto	l4551
  8670  0E42                     l4549:	
  8671  0E42  0020               	movlb	0	; select bank0
  8672  0E43  082A               	movf	LedPulseStateMachine@LedPulse,w
  8673  0E44  0086               	movwf	6
  8674  0E45  0187               	clrf	7
  8675  0E46  0801               	movf	1,w
  8676                           
  8677                           ; Switch size 1, requested type "space"
  8678                           ; Number of cases is 3, Range of values is 0 to 2
  8679                           ; switch strategies available:
  8680                           ; Name         Instructions Cycles
  8681                           ; simple_byte           10     6 (average)
  8682                           ; direct_byte           12     6 (fixed)
  8683                           ; jumptable            260     6 (fixed)
  8684                           ;	Chosen strategy is simple_byte
  8685  0E47  3A00               	xorlw	0	; case 0
  8686  0E48  1903               	skipnz
  8687  0E49  2DF2               	goto	l4531
  8688  0E4A  3A01               	xorlw	1	; case 1
  8689  0E4B  1903               	skipnz
  8690  0E4C  2DFC               	goto	l4533
  8691  0E4D  3A03               	xorlw	3	; case 2
  8692  0E4E  1903               	skipnz
  8693  0E4F  2E38               	goto	l4543
  8694  0E50  2E51               	goto	l4551
  8695  0E51                     l4551:	
  8696                           
  8697                           ;led_drv.c: 170: return (LedPulse->LedOutState);
  8698  0E51  0020               	movlb	0	; select bank0
  8699  0E52  0A2A               	incf	LedPulseStateMachine@LedPulse,w
  8700  0E53  0086               	movwf	6
  8701  0E54  0187               	clrf	7
  8702  0E55  0801               	movf	1,w
  8703  0E56  0008               	return
  8704  0E57                     __end_of_LedPulseStateMachine:	
  8705                           
  8706                           	psect	text25
  8707  0F61                     __ptext25:	
  8708 ;; *************** function _LedBlinkStateMachine *****************
  8709 ;; Defined at:
  8710 ;;		line 74 in file "../../../Framework/MercuryFwk/Source/c/01_Hal/02_Drv/led_drv.c"
  8711 ;; Parameters:    Size  Location     Type
  8712 ;;  LedBlink        1    wreg     PTR struct _LedBlinkType
  8713 ;;		 -> Led1Blink(9), 
  8714 ;; Auto vars:     Size  Location     Type
  8715 ;;  LedBlink        1    5[COMMON] PTR struct _LedBlinkType
  8716 ;;		 -> Led1Blink(9), 
  8717 ;; Return value:  Size  Location     Type
  8718 ;;                  1    wreg      unsigned char 
  8719 ;; Registers used:
  8720 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8721 ;; Tracked objects:
  8722 ;;		On entry : 0/0
  8723 ;;		On exit  : 0/0
  8724 ;;		Unchanged: 0/0
  8725 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8726 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8727 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8728 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8729 ;;      Totals:         1       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8730 ;;Total ram usage:        3 bytes
  8731 ;; Hardware stack levels used:    1
  8732 ;; Hardware stack levels required when called:    3
  8733 ;; This function calls:
  8734 ;;		___lwdiv
  8735 ;; This function is called by:
  8736 ;;		_LedStateMachine
  8737 ;; This function uses a non-reentrant model
  8738 ;;
  8739                           
  8740                           
  8741                           ;psect for function _LedBlinkStateMachine
  8742  0F61                     _LedBlinkStateMachine:	
  8743                           
  8744                           ;incstack = 0
  8745                           ; Regs used in _LedBlinkStateMachine: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  8746                           ;LedBlinkStateMachine@LedBlink stored from wreg
  8747  0F61  00F5               	movwf	LedBlinkStateMachine@LedBlink
  8748                           
  8749                           ;led_drv.c: 77: switch (LedBlink->LedBlinkState)
  8750  0F62  2FEE               	goto	l4523
  8751  0F63                     l4501:	
  8752                           ;led_drv.c: 78: {
  8753                           ;led_drv.c: 79: case LedBlinkInit:
  8754                           
  8755                           
  8756                           ;led_drv.c: 81: LedBlink->LedOutState = LedBlink->LedInitStatus;
  8757  0F63  0875               	movf	LedBlinkStateMachine@LedBlink,w
  8758  0F64  3E08               	addlw	8
  8759  0F65  0086               	movwf	6
  8760  0F66  3001               	movlw	1	; select bank2/3
  8761  0F67  0087               	movwf	7
  8762  0F68  0801               	movf	1,w
  8763  0F69  0020               	movlb	0	; select bank0
  8764  0F6A  00A7               	movwf	??_LedBlinkStateMachine
  8765  0F6B  0A75               	incf	LedBlinkStateMachine@LedBlink,w
  8766  0F6C  0086               	movwf	6
  8767  0F6D  3001               	movlw	1	; select bank2/3
  8768  0F6E  0087               	movwf	7
  8769  0F6F  0827               	movf	??_LedBlinkStateMachine,w
  8770  0F70  0081               	movwf	1
  8771                           
  8772                           ;led_drv.c: 83: LedBlink->LedBlinkState = LedBlinkRunning;
  8773  0F71  0875               	movf	LedBlinkStateMachine@LedBlink,w
  8774  0F72  2FB0               	goto	L8
  8775  0F73                     l4505:	
  8776                           ;led_drv.c: 86: case LedBlinkRunning:
  8777                           
  8778                           ;led_drv.c: 84: break;
  8779                           
  8780                           
  8781                           ;led_drv.c: 88: LedBlink->LedBlinkCounter++;
  8782  0F73  0875               	movf	LedBlinkStateMachine@LedBlink,w
  8783  0F74  3E02               	addlw	2
  8784  0F75  0086               	movwf	6
  8785  0F76  3001               	movlw	1	; select bank2/3
  8786  0F77  0087               	movwf	7
  8787  0F78  3001               	movlw	1
  8788  0F79  0781               	addwf	1,f
  8789  0F7A  3141               	addfsr 1,1
  8790  0F7B  1803               	skipnc
  8791  0F7C  0A81               	incf	1,f
  8792                           
  8793                           ;led_drv.c: 90: if (LedBlink->LedOutState == OffState)
  8794  0F7D  0A75               	incf	LedBlinkStateMachine@LedBlink,w
  8795  0F7E  0086               	movwf	6
  8796  0F7F  3001               	movlw	1	; select bank2/3
  8797  0F80  0087               	movwf	7
  8798  0F81  0801               	movf	1,w
  8799  0F82  1D03               	btfss	3,2
  8800  0F83  2FB6               	goto	l4513
  8801                           
  8802                           ;led_drv.c: 91: {
  8803                           ;led_drv.c: 93: if (LedBlink->LedBlinkCounter >= (LedBlink->LedOffTimeMs/((UINT16)(10)))
      +                          )
  8804  0F84  300A               	movlw	10
  8805  0F85  0020               	movlb	0	; select bank0
  8806  0F86  00A0               	movwf	___lwdiv@divisor
  8807  0F87  3000               	movlw	0
  8808  0F88  00A1               	movwf	___lwdiv@divisor+1
  8809  0F89  0875               	movf	LedBlinkStateMachine@LedBlink,w
  8810  0F8A  3E06               	addlw	6
  8811  0F8B  0086               	movwf	6
  8812  0F8C  3001               	movlw	1	; select bank2/3
  8813  0F8D  0087               	movwf	7
  8814  0F8E  3F40               	moviw [0]fsr1
  8815  0F8F  00A2               	movwf	___lwdiv@dividend
  8816  0F90  3F41               	moviw [1]fsr1
  8817  0F91  00A3               	movwf	___lwdiv@dividend+1
  8818  0F92  318B  231B  318F   	fcall	___lwdiv
  8819  0F95  0875               	movf	LedBlinkStateMachine@LedBlink,w
  8820  0F96  3E02               	addlw	2
  8821  0F97  0086               	movwf	6
  8822  0F98  3001               	movlw	1	; select bank2/3
  8823  0F99  0087               	movwf	7
  8824  0F9A  3F40               	moviw [0]fsr1
  8825  0F9B  0020               	movlb	0	; select bank0
  8826  0F9C  00A7               	movwf	??_LedBlinkStateMachine
  8827  0F9D  3F41               	moviw [1]fsr1
  8828  0F9E  00A8               	movwf	??_LedBlinkStateMachine+1
  8829  0F9F  0821               	movf	?___lwdiv+1,w
  8830  0FA0  0228               	subwf	??_LedBlinkStateMachine+1,w
  8831  0FA1  1D03               	skipz
  8832  0FA2  2FA5               	goto	u3745
  8833  0FA3  0820               	movf	?___lwdiv,w
  8834  0FA4  0227               	subwf	??_LedBlinkStateMachine,w
  8835  0FA5                     u3745:	
  8836  0FA5  1C03               	skipc
  8837  0FA6  2FFA               	goto	l4525
  8838                           
  8839                           ;led_drv.c: 94: {
  8840                           ;led_drv.c: 96: LedBlink->LedBlinkCounter = 0;
  8841  0FA7  0875               	movf	LedBlinkStateMachine@LedBlink,w
  8842  0FA8  3E02               	addlw	2
  8843  0FA9  0086               	movwf	6
  8844  0FAA  3001               	movlw	1	; select bank2/3
  8845  0FAB  0087               	movwf	7
  8846  0FAC  3000               	movlw	0
  8847  0FAD  3FC0               	movwi [0]fsr1
  8848  0FAE  3FC1               	movwi [1]fsr1
  8849                           
  8850                           ;led_drv.c: 98: LedBlink->LedOutState = OnState;
  8851  0FAF  0A75               	incf	LedBlinkStateMachine@LedBlink,w
  8852  0FB0                     L8:	
  8853  0FB0  0086               	movwf	6
  8854  0FB1  3001               	movlw	1	; select bank2/3
  8855  0FB2  0087               	movwf	7
  8856  0FB3  0181               	clrf	1
  8857  0FB4  0A81               	incf	1,f
  8858                           
  8859                           ;led_drv.c: 99: }
  8860                           ;led_drv.c: 100: }
  8861  0FB5  2FFA               	goto	l4525
  8862  0FB6                     l4513:	
  8863                           
  8864                           ;led_drv.c: 101: else if (LedBlink->LedOutState == OnState)
  8865  0FB6  0A75               	incf	LedBlinkStateMachine@LedBlink,w
  8866  0FB7  0086               	movwf	6
  8867  0FB8  3001               	movlw	1	; select bank2/3
  8868  0FB9  0087               	movwf	7
  8869  0FBA  0301               	decf	1,w
  8870  0FBB  1D03               	btfss	3,2
  8871  0FBC  2FFA               	goto	l4525
  8872                           
  8873                           ;led_drv.c: 102: {
  8874                           ;led_drv.c: 104: if (LedBlink->LedBlinkCounter >= (LedBlink->LedOnTimeMs/((UINT16)(10)))
      +                          )
  8875  0FBD  300A               	movlw	10
  8876  0FBE  0020               	movlb	0	; select bank0
  8877  0FBF  00A0               	movwf	___lwdiv@divisor
  8878  0FC0  3000               	movlw	0
  8879  0FC1  00A1               	movwf	___lwdiv@divisor+1
  8880  0FC2  0875               	movf	LedBlinkStateMachine@LedBlink,w
  8881  0FC3  3E04               	addlw	4
  8882  0FC4  0086               	movwf	6
  8883  0FC5  3001               	movlw	1	; select bank2/3
  8884  0FC6  0087               	movwf	7
  8885  0FC7  3F40               	moviw [0]fsr1
  8886  0FC8  00A2               	movwf	___lwdiv@dividend
  8887  0FC9  3F41               	moviw [1]fsr1
  8888  0FCA  00A3               	movwf	___lwdiv@dividend+1
  8889  0FCB  318B  231B  318F   	fcall	___lwdiv
  8890  0FCE  0875               	movf	LedBlinkStateMachine@LedBlink,w
  8891  0FCF  3E02               	addlw	2
  8892  0FD0  0086               	movwf	6
  8893  0FD1  3001               	movlw	1	; select bank2/3
  8894  0FD2  0087               	movwf	7
  8895  0FD3  3F40               	moviw [0]fsr1
  8896  0FD4  0020               	movlb	0	; select bank0
  8897  0FD5  00A7               	movwf	??_LedBlinkStateMachine
  8898  0FD6  3F41               	moviw [1]fsr1
  8899  0FD7  00A8               	movwf	??_LedBlinkStateMachine+1
  8900  0FD8  0821               	movf	?___lwdiv+1,w
  8901  0FD9  0228               	subwf	??_LedBlinkStateMachine+1,w
  8902  0FDA  1D03               	skipz
  8903  0FDB  2FDE               	goto	u3765
  8904  0FDC  0820               	movf	?___lwdiv,w
  8905  0FDD  0227               	subwf	??_LedBlinkStateMachine,w
  8906  0FDE                     u3765:	
  8907  0FDE  1C03               	skipc
  8908  0FDF  2FFA               	goto	l4525
  8909                           
  8910                           ;led_drv.c: 105: {
  8911                           ;led_drv.c: 107: LedBlink->LedBlinkCounter = 0;
  8912  0FE0  0875               	movf	LedBlinkStateMachine@LedBlink,w
  8913  0FE1  3E02               	addlw	2
  8914  0FE2  0086               	movwf	6
  8915  0FE3  3001               	movlw	1	; select bank2/3
  8916  0FE4  0087               	movwf	7
  8917  0FE5  3000               	movlw	0
  8918  0FE6  3FC0               	movwi [0]fsr1
  8919  0FE7  3FC1               	movwi [1]fsr1
  8920                           
  8921                           ;led_drv.c: 109: LedBlink->LedOutState = OffState;
  8922  0FE8  0A75               	incf	LedBlinkStateMachine@LedBlink,w
  8923  0FE9  0086               	movwf	6
  8924  0FEA  3001               	movlw	1	; select bank2/3
  8925  0FEB  0087               	movwf	7
  8926  0FEC  0181               	clrf	1
  8927                           
  8928                           ;led_drv.c: 116: }
  8929                           
  8930                           ;led_drv.c: 115: break;
  8931                           
  8932                           ;led_drv.c: 114: default:
  8933                           
  8934                           ;led_drv.c: 110: }
  8935                           ;led_drv.c: 111: }
  8936                           ;led_drv.c: 112: break;
  8937  0FED  2FFA               	goto	l4525
  8938  0FEE                     l4523:	
  8939  0FEE  0875               	movf	LedBlinkStateMachine@LedBlink,w
  8940  0FEF  0086               	movwf	6
  8941  0FF0  3001               	movlw	1	; select bank2/3
  8942  0FF1  0087               	movwf	7
  8943  0FF2  0801               	movf	1,w
  8944                           
  8945                           ; Switch size 1, requested type "space"
  8946                           ; Number of cases is 2, Range of values is 0 to 1
  8947                           ; switch strategies available:
  8948                           ; Name         Instructions Cycles
  8949                           ; simple_byte            7     4 (average)
  8950                           ; direct_byte           10     6 (fixed)
  8951                           ; jumptable            260     6 (fixed)
  8952                           ;	Chosen strategy is simple_byte
  8953  0FF3  3A00               	xorlw	0	; case 0
  8954  0FF4  1903               	skipnz
  8955  0FF5  2F63               	goto	l4501
  8956  0FF6  3A01               	xorlw	1	; case 1
  8957  0FF7  1903               	skipnz
  8958  0FF8  2F73               	goto	l4505
  8959  0FF9  2FFA               	goto	l4525
  8960  0FFA                     l4525:	
  8961                           
  8962                           ;led_drv.c: 119: return (LedBlink->LedOutState);
  8963  0FFA  0A75               	incf	LedBlinkStateMachine@LedBlink,w
  8964  0FFB  0086               	movwf	6
  8965  0FFC  3001               	movlw	1	; select bank2/3
  8966  0FFD  0087               	movwf	7
  8967  0FFE  0801               	movf	1,w
  8968  0FFF  0008               	return
  8969  1000                     __end_of_LedBlinkStateMachine:	
  8970                           
  8971                           	psect	text26
  8972  1691                     __ptext26:	
  8973 ;; *************** function _CheckStopBitStatus *****************
  8974 ;; Defined at:
  8975 ;;		line 150 in file "../../../Framework/MercuryFwk/Source/c/01_Hal/02_Drv/i2c_slv_drv.c"
  8976 ;; Parameters:    Size  Location     Type
  8977 ;;		None
  8978 ;; Auto vars:     Size  Location     Type
  8979 ;;		None
  8980 ;; Return value:  Size  Location     Type
  8981 ;;                  1    wreg      unsigned char 
  8982 ;; Registers used:
  8983 ;;		wreg, status,2, status,0
  8984 ;; Tracked objects:
  8985 ;;		On entry : 0/0
  8986 ;;		On exit  : 0/0
  8987 ;;		Unchanged: 0/0
  8988 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8989 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8990 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8991 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8992 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8993 ;;Total ram usage:        1 bytes
  8994 ;; Hardware stack levels used:    1
  8995 ;; Hardware stack levels required when called:    2
  8996 ;; This function calls:
  8997 ;;		Nothing
  8998 ;; This function is called by:
  8999 ;;		_I2c_DataReceiveSm
  9000 ;; This function uses a non-reentrant model
  9001 ;;
  9002                           
  9003                           
  9004                           ;psect for function _CheckStopBitStatus
  9005  1691                     _CheckStopBitStatus:	
  9006                           
  9007                           ;i2c_slv_drv.c: 153: return ((SSP1STAT & ((UINT8)(0x10))) >> ((UINT8)(4)));
  9008                           
  9009                           ;incstack = 0
  9010                           ; Regs used in _CheckStopBitStatus: [wreg+status,2+status,0]
  9011  1691  0024               	movlb	4	; select bank4
  9012  1692  0814               	movf	20,w	;volatile
  9013  1693  00F4               	movwf	??_CheckStopBitStatus
  9014  1694  3004               	movlw	4
  9015  1695                     u2445:	
  9016  1695  36F4               	lsrf	??_CheckStopBitStatus,f
  9017  1696  0B89               	decfsz	9,f
  9018  1697  2E95               	goto	u2445
  9019  1698  0874               	movf	??_CheckStopBitStatus,w
  9020  1699  3901               	andlw	1
  9021  169A  0008               	return
  9022  169B                     __end_of_CheckStopBitStatus:	
  9023                           
  9024                           	psect	text27
  9025  1687                     __ptext27:	
  9026 ;; *************** function _CheckByteStatus *****************
  9027 ;; Defined at:
  9028 ;;		line 136 in file "../../../Framework/MercuryFwk/Source/c/01_Hal/02_Drv/i2c_slv_drv.c"
  9029 ;; Parameters:    Size  Location     Type
  9030 ;;		None
  9031 ;; Auto vars:     Size  Location     Type
  9032 ;;		None
  9033 ;; Return value:  Size  Location     Type
  9034 ;;                  1    wreg      unsigned char 
  9035 ;; Registers used:
  9036 ;;		wreg, status,2, status,0
  9037 ;; Tracked objects:
  9038 ;;		On entry : 0/0
  9039 ;;		On exit  : 0/0
  9040 ;;		Unchanged: 0/0
  9041 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9042 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9043 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9044 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9045 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9046 ;;Total ram usage:        1 bytes
  9047 ;; Hardware stack levels used:    1
  9048 ;; Hardware stack levels required when called:    2
  9049 ;; This function calls:
  9050 ;;		Nothing
  9051 ;; This function is called by:
  9052 ;;		_I2c_DataReceiveSm
  9053 ;; This function uses a non-reentrant model
  9054 ;;
  9055                           
  9056                           
  9057                           ;psect for function _CheckByteStatus
  9058  1687                     _CheckByteStatus:	
  9059                           
  9060                           ;i2c_slv_drv.c: 139: return ((SSP1STAT & ((UINT8)(0x20))) >> ((UINT8)(5)));
  9061                           
  9062                           ;incstack = 0
  9063                           ; Regs used in _CheckByteStatus: [wreg+status,2+status,0]
  9064  1687  0024               	movlb	4	; select bank4
  9065  1688  0814               	movf	20,w	;volatile
  9066  1689  00F4               	movwf	??_CheckByteStatus
  9067  168A  3005               	movlw	5
  9068  168B                     u2435:	
  9069  168B  36F4               	lsrf	??_CheckByteStatus,f
  9070  168C  0B89               	decfsz	9,f
  9071  168D  2E8B               	goto	u2435
  9072  168E  0874               	movf	??_CheckByteStatus,w
  9073  168F  3901               	andlw	1
  9074  1690  0008               	return
  9075  1691                     __end_of_CheckByteStatus:	
  9076                           
  9077                           	psect	text28
  9078  167D                     __ptext28:	
  9079 ;; *************** function _CheckAckStatus *****************
  9080 ;; Defined at:
  9081 ;;		line 108 in file "../../../Framework/MercuryFwk/Source/c/01_Hal/02_Drv/i2c_slv_drv.c"
  9082 ;; Parameters:    Size  Location     Type
  9083 ;;		None
  9084 ;; Auto vars:     Size  Location     Type
  9085 ;;		None
  9086 ;; Return value:  Size  Location     Type
  9087 ;;                  1    wreg      unsigned char 
  9088 ;; Registers used:
  9089 ;;		wreg, status,2, status,0
  9090 ;; Tracked objects:
  9091 ;;		On entry : 0/0
  9092 ;;		On exit  : 0/0
  9093 ;;		Unchanged: 0/0
  9094 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9095 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9096 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9097 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9098 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9099 ;;Total ram usage:        1 bytes
  9100 ;; Hardware stack levels used:    1
  9101 ;; Hardware stack levels required when called:    2
  9102 ;; This function calls:
  9103 ;;		Nothing
  9104 ;; This function is called by:
  9105 ;;		_I2c_DataReceiveSm
  9106 ;; This function uses a non-reentrant model
  9107 ;;
  9108                           
  9109                           
  9110                           ;psect for function _CheckAckStatus
  9111  167D                     _CheckAckStatus:	
  9112                           
  9113                           ;i2c_slv_drv.c: 111: return ((SSP1CON2 & ((UINT8)(0x40))) >> ((UINT8)(6)));
  9114                           
  9115                           ;incstack = 0
  9116                           ; Regs used in _CheckAckStatus: [wreg+status,2+status,0]
  9117  167D  0024               	movlb	4	; select bank4
  9118  167E  0816               	movf	22,w	;volatile
  9119  167F  00F4               	movwf	??_CheckAckStatus
  9120  1680  3006               	movlw	6
  9121  1681                     u2425:	
  9122  1681  36F4               	lsrf	??_CheckAckStatus,f
  9123  1682  0B89               	decfsz	9,f
  9124  1683  2E81               	goto	u2425
  9125  1684  0874               	movf	??_CheckAckStatus,w
  9126  1685  3901               	andlw	1
  9127  1686  0008               	return
  9128  1687                     __end_of_CheckAckStatus:	
  9129                           
  9130                           	psect	text29
  9131  174B                     __ptext29:	
  9132 ;; *************** function _I2c_SetConfig *****************
  9133 ;; Defined at:
  9134 ;;		line 82 in file "../../../Framework/MercuryFwk/Source/c/03_Sml/01_Pml/01_SlvI2c/i2c_slv.c"
  9135 ;; Parameters:    Size  Location     Type
  9136 ;;		None
  9137 ;; Auto vars:     Size  Location     Type
  9138 ;;		None
  9139 ;; Return value:  Size  Location     Type
  9140 ;;                  1    wreg      void 
  9141 ;; Registers used:
  9142 ;;		wreg, status,2
  9143 ;; Tracked objects:
  9144 ;;		On entry : 0/0
  9145 ;;		On exit  : 0/0
  9146 ;;		Unchanged: 0/0
  9147 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9148 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9149 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9150 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9151 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9152 ;;Total ram usage:        1 bytes
  9153 ;; Hardware stack levels used:    1
  9154 ;; Hardware stack levels required when called:    2
  9155 ;; This function calls:
  9156 ;;		Nothing
  9157 ;; This function is called by:
  9158 ;;		_I2cSlv_MainTask
  9159 ;; This function uses a non-reentrant model
  9160 ;;
  9161                           
  9162                           
  9163                           ;psect for function _I2c_SetConfig
  9164  174B                     _I2c_SetConfig:	
  9165                           
  9166                           ;i2c_slv.c: 84: I2cConfig.I2cModuleMode = ((UINT8)(0b0110));
  9167                           
  9168                           ;incstack = 0
  9169                           ; Regs used in _I2c_SetConfig: [wreg+status,2]
  9170  174B  3006               	movlw	6
  9171  174C  00F4               	movwf	??_I2c_SetConfig
  9172  174D  0874               	movf	??_I2c_SetConfig,w
  9173  174E  0021               	movlb	1	; select bank1
  9174  174F  00BB               	movwf	_I2cConfig^(0+128)
  9175                           
  9176                           ;i2c_slv.c: 85: I2cConfig.I2cReceiverEnable = ((UINT8)(0));
  9177  1750  01BC               	clrf	(_I2cConfig^(0+128)+1)
  9178                           
  9179                           ;i2c_slv.c: 86: I2cConfig.EnableI2cModule = ((UINT8)(1));
  9180  1751  01BD               	clrf	(_I2cConfig^(0+128)+2)
  9181  1752  0ABD               	incf	(_I2cConfig^(0+128)+2),f
  9182                           
  9183                           ;i2c_slv.c: 87: I2cConfig.ClockStretchEnable = ((UINT8)(0));
  9184  1753  01BE               	clrf	(_I2cConfig^(0+128)+3)
  9185                           
  9186                           ;i2c_slv.c: 88: I2cConfig.StopCondIntEnable = ((UINT8)(1));
  9187  1754  01BF               	clrf	(_I2cConfig^(0+128)+4)
  9188  1755  0ABF               	incf	(_I2cConfig^(0+128)+4),f
  9189                           
  9190                           ;i2c_slv.c: 89: I2cConfig.StartCondIntEnable = ((UINT8)(1));
  9191  1756  01C0               	clrf	(_I2cConfig^(0+128)+5)
  9192  1757  0AC0               	incf	(_I2cConfig^(0+128)+5),f
  9193                           
  9194                           ;i2c_slv.c: 90: I2cConfig.BufferOverwriteEnable = ((UINT8)(0));
  9195  1758  01C1               	clrf	(_I2cConfig^(0+128)+6)
  9196                           
  9197                           ;i2c_slv.c: 91: I2cConfig.BusCollisionDetectEnable = ((UINT8)(0));
  9198  1759  01C2               	clrf	(_I2cConfig^(0+128)+7)
  9199                           
  9200                           ;i2c_slv.c: 92: I2cConfig.AddrHoldEnable = ((UINT8)(0));
  9201  175A  01C3               	clrf	(_I2cConfig^(0+128)+8)
  9202                           
  9203                           ;i2c_slv.c: 93: I2cConfig.DataHoldEnable = ((UINT8)(0));
  9204  175B  01C4               	clrf	(_I2cConfig^(0+128)+9)
  9205                           
  9206                           ;i2c_slv.c: 94: I2cConfig.GeneralCallEnable = ((UINT8)(1));
  9207  175C  01C5               	clrf	(_I2cConfig^(0+128)+10)
  9208  175D  0AC5               	incf	(_I2cConfig^(0+128)+10),f
  9209  175E  0008               	return
  9210  175F                     __end_of_I2c_SetConfig:	
  9211                           
  9212                           	psect	text30
  9213  0638                     __ptext30:	
  9214 ;; *************** function _I2c_InitI2cModule *****************
  9215 ;; Defined at:
  9216 ;;		line 206 in file "../../../Framework/MercuryFwk/Source/c/01_Hal/02_Drv/i2c_slv_drv.c"
  9217 ;; Parameters:    Size  Location     Type
  9218 ;;  I2cConfig       1    wreg     PTR struct _I2cConfig
  9219 ;;		 -> I2cConfig(11), 
  9220 ;; Auto vars:     Size  Location     Type
  9221 ;;  I2cConfig       1    2[BANK0 ] PTR struct _I2cConfig
  9222 ;;		 -> I2cConfig(11), 
  9223 ;; Return value:  Size  Location     Type
  9224 ;;                  1    wreg      void 
  9225 ;; Registers used:
  9226 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9227 ;; Tracked objects:
  9228 ;;		On entry : 0/0
  9229 ;;		On exit  : 0/0
  9230 ;;		Unchanged: 0/0
  9231 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9232 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9233 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9234 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9235 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9236 ;;Total ram usage:        3 bytes
  9237 ;; Hardware stack levels used:    1
  9238 ;; Hardware stack levels required when called:    3
  9239 ;; This function calls:
  9240 ;;		_ClearRxBuffer
  9241 ;;		_ClearTxBuffer
  9242 ;; This function is called by:
  9243 ;;		_I2cSlv_MainTask
  9244 ;; This function uses a non-reentrant model
  9245 ;;
  9246                           
  9247                           
  9248                           ;psect for function _I2c_InitI2cModule
  9249  0638                     _I2c_InitI2cModule:	
  9250                           
  9251                           ;incstack = 0
  9252                           ; Regs used in _I2c_InitI2cModule: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  9253                           ;I2c_InitI2cModule@I2cConfig stored from wreg
  9254  0638  0020               	movlb	0	; select bank0
  9255  0639  00A2               	movwf	I2c_InitI2cModule@I2cConfig
  9256                           
  9257                           ;i2c_slv_drv.c: 209: TRISCbits.TRISC1 = ((UINT8)(1));
  9258  063A  0021               	movlb	1	; select bank1
  9259  063B  148E               	bsf	14,1	;volatile
  9260                           
  9261                           ;i2c_slv_drv.c: 210: TRISCbits.TRISC0 = ((UINT8)(1));
  9262  063C  140E               	bsf	14,0	;volatile
  9263                           
  9264                           ;i2c_slv_drv.c: 214: SSP1CON1 |= (I2cConfig->I2cModuleMode) << ((UINT8)(0));
  9265  063D  0020               	movlb	0	; select bank0
  9266  063E  0822               	movf	I2c_InitI2cModule@I2cConfig,w
  9267  063F  0086               	movwf	6
  9268  0640  0187               	clrf	7
  9269  0641  0801               	movf	1,w
  9270  0642  00A0               	movwf	??_I2c_InitI2cModule
  9271  0643  0820               	movf	??_I2c_InitI2cModule,w
  9272  0644  0024               	movlb	4	; select bank4
  9273  0645  0495               	iorwf	21,f	;volatile
  9274                           
  9275                           ;i2c_slv_drv.c: 217: SSP1CON2 |= (I2cConfig->I2cReceiverEnable) << ((UINT8)(3));
  9276  0646  0020               	movlb	0	; select bank0
  9277  0647  0A22               	incf	I2c_InitI2cModule@I2cConfig,w
  9278  0648  0086               	movwf	6
  9279  0649  0187               	clrf	7
  9280  064A  0801               	movf	1,w
  9281  064B  00A0               	movwf	??_I2c_InitI2cModule
  9282  064C  3002               	movlw	2
  9283  064D                     u3975:	
  9284  064D  35A0               	lslf	??_I2c_InitI2cModule,f
  9285  064E  3EFF               	addlw	-1
  9286  064F  1D03               	skipz
  9287  0650  2E4D               	goto	u3975
  9288  0651  3520               	lslf	??_I2c_InitI2cModule,w
  9289  0652  00A1               	movwf	??_I2c_InitI2cModule+1
  9290  0653  0821               	movf	??_I2c_InitI2cModule+1,w
  9291  0654  0024               	movlb	4	; select bank4
  9292  0655  0496               	iorwf	22,f	;volatile
  9293                           
  9294                           ;i2c_slv_drv.c: 218: SSP1CON2 |= (I2cConfig->ClockStretchEnable) << ((UINT8)(0));
  9295  0656  0020               	movlb	0	; select bank0
  9296  0657  0822               	movf	I2c_InitI2cModule@I2cConfig,w
  9297  0658  3E03               	addlw	3
  9298  0659  0086               	movwf	6
  9299  065A  0187               	clrf	7
  9300  065B  0801               	movf	1,w
  9301  065C  00A0               	movwf	??_I2c_InitI2cModule
  9302  065D  0820               	movf	??_I2c_InitI2cModule,w
  9303  065E  0024               	movlb	4	; select bank4
  9304  065F  0496               	iorwf	22,f	;volatile
  9305                           
  9306                           ;i2c_slv_drv.c: 219: SSP1CON2 |= (I2cConfig->GeneralCallEnable) << ((UINT8)(7));
  9307  0660  0020               	movlb	0	; select bank0
  9308  0661  0822               	movf	I2c_InitI2cModule@I2cConfig,w
  9309  0662  3E0A               	addlw	10
  9310  0663  0086               	movwf	6
  9311  0664  0187               	clrf	7
  9312  0665  0801               	movf	1,w
  9313  0666  00A0               	movwf	??_I2c_InitI2cModule
  9314  0667  3006               	movlw	6
  9315  0668                     u3985:	
  9316  0668  35A0               	lslf	??_I2c_InitI2cModule,f
  9317  0669  3EFF               	addlw	-1
  9318  066A  1D03               	skipz
  9319  066B  2E68               	goto	u3985
  9320  066C  3520               	lslf	??_I2c_InitI2cModule,w
  9321  066D  00A1               	movwf	??_I2c_InitI2cModule+1
  9322  066E  0821               	movf	??_I2c_InitI2cModule+1,w
  9323  066F  0024               	movlb	4	; select bank4
  9324  0670  0496               	iorwf	22,f	;volatile
  9325                           
  9326                           ;i2c_slv_drv.c: 222: SSP1CON3 |= (I2cConfig->StopCondIntEnable) << ((UINT8)(6));
  9327  0671  0020               	movlb	0	; select bank0
  9328  0672  0822               	movf	I2c_InitI2cModule@I2cConfig,w
  9329  0673  3E04               	addlw	4
  9330  0674  0086               	movwf	6
  9331  0675  0187               	clrf	7
  9332  0676  0801               	movf	1,w
  9333  0677  00A0               	movwf	??_I2c_InitI2cModule
  9334  0678  3005               	movlw	5
  9335  0679                     u3995:	
  9336  0679  35A0               	lslf	??_I2c_InitI2cModule,f
  9337  067A  3EFF               	addlw	-1
  9338  067B  1D03               	skipz
  9339  067C  2E79               	goto	u3995
  9340  067D  3520               	lslf	??_I2c_InitI2cModule,w
  9341  067E  00A1               	movwf	??_I2c_InitI2cModule+1
  9342  067F  0821               	movf	??_I2c_InitI2cModule+1,w
  9343  0680  0024               	movlb	4	; select bank4
  9344  0681  0497               	iorwf	23,f	;volatile
  9345                           
  9346                           ;i2c_slv_drv.c: 223: SSP1CON3 |= (I2cConfig->StartCondIntEnable) << ((UINT8)(5));
  9347  0682  0020               	movlb	0	; select bank0
  9348  0683  0822               	movf	I2c_InitI2cModule@I2cConfig,w
  9349  0684  3E05               	addlw	5
  9350  0685  0086               	movwf	6
  9351  0686  0187               	clrf	7
  9352  0687  0801               	movf	1,w
  9353  0688  00A0               	movwf	??_I2c_InitI2cModule
  9354  0689  3004               	movlw	4
  9355  068A                     u4005:	
  9356  068A  35A0               	lslf	??_I2c_InitI2cModule,f
  9357  068B  3EFF               	addlw	-1
  9358  068C  1D03               	skipz
  9359  068D  2E8A               	goto	u4005
  9360  068E  3520               	lslf	??_I2c_InitI2cModule,w
  9361  068F  00A1               	movwf	??_I2c_InitI2cModule+1
  9362  0690  0821               	movf	??_I2c_InitI2cModule+1,w
  9363  0691  0024               	movlb	4	; select bank4
  9364  0692  0497               	iorwf	23,f	;volatile
  9365                           
  9366                           ;i2c_slv_drv.c: 224: SSP1CON3 |= (I2cConfig->BufferOverwriteEnable) << ((UINT8)(4));
  9367  0693  0020               	movlb	0	; select bank0
  9368  0694  0822               	movf	I2c_InitI2cModule@I2cConfig,w
  9369  0695  3E06               	addlw	6
  9370  0696  0086               	movwf	6
  9371  0697  0187               	clrf	7
  9372  0698  0801               	movf	1,w
  9373  0699  00A0               	movwf	??_I2c_InitI2cModule
  9374  069A  3003               	movlw	3
  9375  069B                     u4015:	
  9376  069B  35A0               	lslf	??_I2c_InitI2cModule,f
  9377  069C  3EFF               	addlw	-1
  9378  069D  1D03               	skipz
  9379  069E  2E9B               	goto	u4015
  9380  069F  3520               	lslf	??_I2c_InitI2cModule,w
  9381  06A0  00A1               	movwf	??_I2c_InitI2cModule+1
  9382  06A1  0821               	movf	??_I2c_InitI2cModule+1,w
  9383  06A2  0024               	movlb	4	; select bank4
  9384  06A3  0497               	iorwf	23,f	;volatile
  9385                           
  9386                           ;i2c_slv_drv.c: 225: SSP1CON3 |= (I2cConfig->BusCollisionDetectEnable) << ((UINT8)(2));
  9387  06A4  0020               	movlb	0	; select bank0
  9388  06A5  0822               	movf	I2c_InitI2cModule@I2cConfig,w
  9389  06A6  3E07               	addlw	7
  9390  06A7  0086               	movwf	6
  9391  06A8  0187               	clrf	7
  9392  06A9  0801               	movf	1,w
  9393  06AA  00A0               	movwf	??_I2c_InitI2cModule
  9394  06AB  3001               	movlw	1
  9395  06AC                     u4025:	
  9396  06AC  35A0               	lslf	??_I2c_InitI2cModule,f
  9397  06AD  3EFF               	addlw	-1
  9398  06AE  1D03               	skipz
  9399  06AF  2EAC               	goto	u4025
  9400  06B0  3520               	lslf	??_I2c_InitI2cModule,w
  9401  06B1  00A1               	movwf	??_I2c_InitI2cModule+1
  9402  06B2  0821               	movf	??_I2c_InitI2cModule+1,w
  9403  06B3  0024               	movlb	4	; select bank4
  9404  06B4  0497               	iorwf	23,f	;volatile
  9405                           
  9406                           ;i2c_slv_drv.c: 226: SSP1CON3 |= (I2cConfig->AddrHoldEnable) << ((UINT8)(1));
  9407  06B5  0020               	movlb	0	; select bank0
  9408  06B6  0822               	movf	I2c_InitI2cModule@I2cConfig,w
  9409  06B7  3E08               	addlw	8
  9410  06B8  0086               	movwf	6
  9411  06B9  0187               	clrf	7
  9412  06BA  3501               	lslf	1,w
  9413  06BB  00A0               	movwf	??_I2c_InitI2cModule
  9414  06BC  0820               	movf	??_I2c_InitI2cModule,w
  9415  06BD  0024               	movlb	4	; select bank4
  9416  06BE  0497               	iorwf	23,f	;volatile
  9417                           
  9418                           ;i2c_slv_drv.c: 227: SSP1CON3 |= (I2cConfig->DataHoldEnable) << ((UINT8)(0));
  9419  06BF  0020               	movlb	0	; select bank0
  9420  06C0  0822               	movf	I2c_InitI2cModule@I2cConfig,w
  9421  06C1  3E09               	addlw	9
  9422  06C2  0086               	movwf	6
  9423  06C3  0187               	clrf	7
  9424  06C4  0801               	movf	1,w
  9425  06C5  00A0               	movwf	??_I2c_InitI2cModule
  9426  06C6  0820               	movf	??_I2c_InitI2cModule,w
  9427  06C7  0024               	movlb	4	; select bank4
  9428  06C8  0497               	iorwf	23,f	;volatile
  9429                           
  9430                           ;i2c_slv_drv.c: 230: SSP1CON1 |= (I2cConfig->EnableI2cModule) << ((UINT8)(5));
  9431  06C9  0020               	movlb	0	; select bank0
  9432  06CA  0822               	movf	I2c_InitI2cModule@I2cConfig,w
  9433  06CB  3E02               	addlw	2
  9434  06CC  0086               	movwf	6
  9435  06CD  0187               	clrf	7
  9436  06CE  0801               	movf	1,w
  9437  06CF  00A0               	movwf	??_I2c_InitI2cModule
  9438  06D0  3004               	movlw	4
  9439  06D1                     u4035:	
  9440  06D1  35A0               	lslf	??_I2c_InitI2cModule,f
  9441  06D2  3EFF               	addlw	-1
  9442  06D3  1D03               	skipz
  9443  06D4  2ED1               	goto	u4035
  9444  06D5  3520               	lslf	??_I2c_InitI2cModule,w
  9445  06D6  00A1               	movwf	??_I2c_InitI2cModule+1
  9446  06D7  0821               	movf	??_I2c_InitI2cModule+1,w
  9447  06D8  0024               	movlb	4	; select bank4
  9448  06D9  0495               	iorwf	21,f	;volatile
  9449                           
  9450                           ;i2c_slv_drv.c: 233: PIR1bits.SSP1IF = ((UINT8)(0));
  9451  06DA  0020               	movlb	0	; select bank0
  9452  06DB  1191               	bcf	17,3	;volatile
  9453                           
  9454                           ;i2c_slv_drv.c: 234: PIE1bits.SSP1IE = ((UINT8)(1));
  9455  06DC  0021               	movlb	1	; select bank1
  9456  06DD  1591               	bsf	17,3	;volatile
  9457                           
  9458                           ;i2c_slv_drv.c: 237: ClearRxBuffer();
  9459  06DE  3197  2707  3186   	fcall	_ClearRxBuffer
  9460                           
  9461                           ;i2c_slv_drv.c: 238: ClearTxBuffer();
  9462  06E1  3197  2717         	fcall	_ClearTxBuffer
  9463  06E3  0008               	return
  9464  06E4                     __end_of_I2c_InitI2cModule:	
  9465                           
  9466                           	psect	text31
  9467  1717                     __ptext31:	
  9468 ;; *************** function _ClearTxBuffer *****************
  9469 ;; Defined at:
  9470 ;;		line 183 in file "../../../Framework/MercuryFwk/Source/c/01_Hal/02_Drv/i2c_slv_drv.c"
  9471 ;; Parameters:    Size  Location     Type
  9472 ;;		None
  9473 ;; Auto vars:     Size  Location     Type
  9474 ;;  Index           1    5[COMMON] unsigned char 
  9475 ;; Return value:  Size  Location     Type
  9476 ;;                  1    wreg      void 
  9477 ;; Registers used:
  9478 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  9479 ;; Tracked objects:
  9480 ;;		On entry : 0/0
  9481 ;;		On exit  : 0/0
  9482 ;;		Unchanged: 0/0
  9483 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9484 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9485 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9486 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9487 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9488 ;;Total ram usage:        2 bytes
  9489 ;; Hardware stack levels used:    1
  9490 ;; Hardware stack levels required when called:    2
  9491 ;; This function calls:
  9492 ;;		Nothing
  9493 ;; This function is called by:
  9494 ;;		_I2c_InitI2cModule
  9495 ;;		_I2c_DataReceiveSm
  9496 ;; This function uses a non-reentrant model
  9497 ;;
  9498                           
  9499                           
  9500                           ;psect for function _ClearTxBuffer
  9501  1717                     _ClearTxBuffer:	
  9502                           
  9503                           ;i2c_slv_drv.c: 185: UINT8 Index;
  9504                           ;i2c_slv_drv.c: 188: for (Index = 0; Index < ((UINT8)(80)); Index++)
  9505                           
  9506                           ;incstack = 0
  9507                           ; Regs used in _ClearTxBuffer: [wreg+fsr1l+fsr1h+status,2+status,0]
  9508  1717  01F5               	clrf	ClearTxBuffer@Index
  9509  1718                     L9:	
  9510  1718  3050               	movlw	80
  9511  1719  0275               	subwf	ClearTxBuffer@Index,w
  9512  171A  1803               	btfsc	3,0
  9513  171B  0008               	return
  9514                           
  9515                           ;i2c_slv_drv.c: 189: {
  9516                           ;i2c_slv_drv.c: 190: I2cTxBuffer[Index] = 0x00;
  9517  171C  0875               	movf	ClearTxBuffer@Index,w
  9518  171D  3EA0               	addlw	(low (_I2cTxBuffer| (0+512)))& (0+255)
  9519  171E  0086               	movwf	6
  9520  171F  3002               	movlw	2	; select bank5/6
  9521  1720  0087               	movwf	7
  9522  1721  0181               	clrf	1
  9523  1722  3001               	movlw	1
  9524  1723  00F4               	movwf	??_ClearTxBuffer
  9525  1724  0874               	movf	??_ClearTxBuffer,w
  9526  1725  07F5               	addwf	ClearTxBuffer@Index,f
  9527  1726  2F18               	goto	L9
  9528  1727                     __end_of_ClearTxBuffer:	
  9529                           
  9530                           	psect	text32
  9531  1707                     __ptext32:	
  9532 ;; *************** function _ClearRxBuffer *****************
  9533 ;; Defined at:
  9534 ;;		line 164 in file "../../../Framework/MercuryFwk/Source/c/01_Hal/02_Drv/i2c_slv_drv.c"
  9535 ;; Parameters:    Size  Location     Type
  9536 ;;		None
  9537 ;; Auto vars:     Size  Location     Type
  9538 ;;  Index           1    5[COMMON] unsigned char 
  9539 ;; Return value:  Size  Location     Type
  9540 ;;                  1    wreg      void 
  9541 ;; Registers used:
  9542 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  9543 ;; Tracked objects:
  9544 ;;		On entry : 0/0
  9545 ;;		On exit  : 0/0
  9546 ;;		Unchanged: 0/0
  9547 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9548 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9549 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9550 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9551 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9552 ;;Total ram usage:        2 bytes
  9553 ;; Hardware stack levels used:    1
  9554 ;; Hardware stack levels required when called:    2
  9555 ;; This function calls:
  9556 ;;		Nothing
  9557 ;; This function is called by:
  9558 ;;		_I2c_InitI2cModule
  9559 ;;		_I2c_DataReceiveSm
  9560 ;; This function uses a non-reentrant model
  9561 ;;
  9562                           
  9563                           
  9564                           ;psect for function _ClearRxBuffer
  9565  1707                     _ClearRxBuffer:	
  9566                           
  9567                           ;i2c_slv_drv.c: 166: UINT8 Index;
  9568                           ;i2c_slv_drv.c: 169: for (Index = 0; Index < ((UINT8)(80)); Index++)
  9569                           
  9570                           ;incstack = 0
  9571                           ; Regs used in _ClearRxBuffer: [wreg+fsr1l+fsr1h+status,2+status,0]
  9572  1707  01F5               	clrf	ClearRxBuffer@Index
  9573  1708                     L10:	
  9574  1708  3050               	movlw	80
  9575  1709  0275               	subwf	ClearRxBuffer@Index,w
  9576  170A  1803               	btfsc	3,0
  9577  170B  0008               	return
  9578                           
  9579                           ;i2c_slv_drv.c: 170: {
  9580                           ;i2c_slv_drv.c: 171: I2cRxBuffer[Index] = 0x00;
  9581  170C  0875               	movf	ClearRxBuffer@Index,w
  9582  170D  3E20               	addlw	(low (_I2cRxBuffer| (0+768)))& (0+255)
  9583  170E  0086               	movwf	6
  9584  170F  3003               	movlw	3	; select bank6/7
  9585  1710  0087               	movwf	7
  9586  1711  0181               	clrf	1
  9587  1712  3001               	movlw	1
  9588  1713  00F4               	movwf	??_ClearRxBuffer
  9589  1714  0874               	movf	??_ClearRxBuffer,w
  9590  1715  07F5               	addwf	ClearRxBuffer@Index,f
  9591  1716  2F08               	goto	L10
  9592  1717                     __end_of_ClearRxBuffer:	
  9593                           
  9594                           	psect	text33
  9595  0ED2                     __ptext33:	
  9596 ;; *************** function _I2cSlv_I2cDrvHandle *****************
  9597 ;; Defined at:
  9598 ;;		line 141 in file "../../../Framework/MercuryFwk/Source/c/03_Sml/01_Pml/01_SlvI2c/i2c_slv.c"
  9599 ;; Parameters:    Size  Location     Type
  9600 ;;		None
  9601 ;; Auto vars:     Size  Location     Type
  9602 ;;  Index           1    9[BANK0 ] unsigned char 
  9603 ;; Return value:  Size  Location     Type
  9604 ;;                  1    wreg      void 
  9605 ;; Registers used:
  9606 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9607 ;; Tracked objects:
  9608 ;;		On entry : 0/0
  9609 ;;		On exit  : 0/0
  9610 ;;		Unchanged: 0/0
  9611 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9612 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9613 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9614 ;;      Temps:          0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9615 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9616 ;;Total ram usage:        6 bytes
  9617 ;; Hardware stack levels used:    1
  9618 ;; Hardware stack levels required when called:    3
  9619 ;; This function calls:
  9620 ;;		_GenerateEvt
  9621 ;;		_I2c_SetI2cAddress
  9622 ;;		_I2c_SetI2cAddressMask
  9623 ;;		_I2c_UpdateTxBuffer
  9624 ;;		_Led_SetLedStatus
  9625 ;;		_ReceiveEvt
  9626 ;; This function is called by:
  9627 ;;		_I2cSlv_MainTask
  9628 ;; This function uses a non-reentrant model
  9629 ;;
  9630                           
  9631                           
  9632                           ;psect for function _I2cSlv_I2cDrvHandle
  9633  0ED2                     _I2cSlv_I2cDrvHandle:	
  9634                           
  9635                           ;i2c_slv.c: 143: static I2cReceiveMsgStateType I2cReceiveMsgState = I2cSetSlaveAddres;
  9636                           ;i2c_slv.c: 144: UINT8 Index = 0;
  9637                           
  9638                           ;incstack = 0
  9639                           ; Regs used in _I2cSlv_I2cDrvHandle: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  9640  0ED2  0020               	movlb	0	; select bank0
  9641  0ED3  01A9               	clrf	I2cSlv_I2cDrvHandle@Index
  9642                           
  9643                           ;i2c_slv.c: 146: switch (I2cReceiveMsgState)
  9644  0ED4  2F57               	goto	l4799
  9645  0ED5                     l4757:	
  9646                           ;i2c_slv.c: 147: {
  9647                           ;i2c_slv.c: 148: case I2cSetSlaveAddres:
  9648                           
  9649                           
  9650                           ;i2c_slv.c: 150: if (ReceiveEvt(&I2cSetAddress))
  9651  0ED5  30E6               	movlw	(low (_I2cSetAddress| 0))& (0+255)
  9652  0ED6  3188  20B6  318E   	fcall	_ReceiveEvt
  9653  0ED9  3A00               	xorlw	0
  9654  0EDA  1903               	skipnz
  9655  0EDB  0008               	return
  9656                           
  9657                           ;i2c_slv.c: 151: {
  9658                           ;i2c_slv.c: 153: I2c_SetI2cAddress(I2cSlaveAddress);
  9659  0EDC  0020               	movlb	0	; select bank0
  9660  0EDD  086B               	movf	_I2cSlaveAddress,w
  9661  0EDE  3188  2001  318E   	fcall	_I2c_SetI2cAddress
  9662                           
  9663                           ;i2c_slv.c: 154: I2c_SetI2cAddressMask(((UINT8)(0x7F)));
  9664  0EE1  307F               	movlw	127
  9665  0EE2  3187  27FA         	fcall	_I2c_SetI2cAddressMask
  9666                           
  9667                           ;i2c_slv.c: 156: I2cReceiveMsgState = I2cReceiveData;
  9668  0EE4  0021               	movlb	1	; select bank1
  9669  0EE5  01B4               	clrf	I2cSlv_I2cDrvHandle@I2cReceiveMsgState^(0+128)
  9670  0EE6  0AB4               	incf	I2cSlv_I2cDrvHandle@I2cReceiveMsgState^(0+128),f
  9671                           
  9672                           ;i2c_slv.c: 157: }
  9673                           ;i2c_slv.c: 158: break;
  9674  0EE7  0008               	return
  9675  0EE8                     l4763:	
  9676                           ;i2c_slv.c: 160: case I2cReceiveData:
  9677                           
  9678                           
  9679                           ;i2c_slv.c: 162: if (ReceiveEvt(&I2cNewPacketNotification))
  9680  0EE8  30E2               	movlw	(low (_I2cNewPacketNotification| 0))& (0+255)
  9681  0EE9  3188  20B6  318E   	fcall	_ReceiveEvt
  9682  0EEC  3A00               	xorlw	0
  9683  0EED  1903               	skipnz
  9684  0EEE  2F3A               	goto	l4789
  9685                           
  9686                           ;i2c_slv.c: 163: {
  9687                           ;i2c_slv.c: 165: if ((I2cPacket.SlaveAddress == I2cSlaveAddress) || (I2cPacket.SlaveAddr
      +                          ess == ((UINT8)(0x00))))
  9688  0EEF  309D               	movlw	157
  9689  0EF0  0086               	movwf	6
  9690  0EF1  3023               	movlw	35
  9691  0EF2  0087               	movwf	7
  9692  0EF3  0801               	movf	1,w
  9693  0EF4  0020               	movlb	0	; select bank0
  9694  0EF5  066B               	xorwf	_I2cSlaveAddress,w
  9695  0EF6  1903               	skipnz
  9696  0EF7  2EFF               	goto	l4769
  9697  0EF8  309D               	movlw	157
  9698  0EF9  0086               	movwf	6
  9699  0EFA  3023               	movlw	35
  9700  0EFB  0087               	movwf	7
  9701  0EFC  0801               	movf	1,w
  9702  0EFD  1D03               	btfss	3,2
  9703  0EFE  0008               	return
  9704  0EFF                     l4769:	
  9705                           
  9706                           ;i2c_slv.c: 166: {
  9707                           ;i2c_slv.c: 167: if (I2cPacket.ReadWrite == ((UINT8)(0)))
  9708  0EFF  309D               	movlw	157
  9709  0F00  0086               	movwf	6
  9710  0F01  3023               	movlw	35
  9711  0F02  0087               	movwf	7
  9712  0F03  3141               	addfsr 1,1
  9713  0F04  0801               	movf	1,w
  9714  0F05  1D03               	btfss	3,2
  9715  0F06  0008               	return
  9716                           
  9717                           ;i2c_slv.c: 168: {
  9718                           ;i2c_slv.c: 170: for (Index = 0; Index < ((UINT8)(80));Index++)
  9719  0F07  01A9               	clrf	I2cSlv_I2cDrvHandle@Index
  9720  0F08  3050               	movlw	80
  9721  0F09  0229               	subwf	I2cSlv_I2cDrvHandle@Index,w
  9722  0F0A  1803               	btfsc	3,0
  9723  0F0B  2F2A               	goto	l4783
  9724  0F0C                     l4777:	
  9725                           
  9726                           ;i2c_slv.c: 171: {
  9727                           ;i2c_slv.c: 172: CmdBuffer[Index] = I2cPacket.Buffer[Index];
  9728  0F0C  0829               	movf	I2cSlv_I2cDrvHandle@Index,w
  9729  0F0D  00A4               	movwf	??_I2cSlv_I2cDrvHandle
  9730  0F0E  01A5               	clrf	??_I2cSlv_I2cDrvHandle+1
  9731  0F0F  309F               	movlw	159
  9732  0F10  00A6               	movwf	??_I2cSlv_I2cDrvHandle+2
  9733  0F11  3023               	movlw	35
  9734  0F12  00A7               	movwf	??_I2cSlv_I2cDrvHandle+3
  9735  0F13  0824               	movf	??_I2cSlv_I2cDrvHandle,w
  9736  0F14  0726               	addwf	??_I2cSlv_I2cDrvHandle+2,w
  9737  0F15  0086               	movwf	6
  9738  0F16  0825               	movf	??_I2cSlv_I2cDrvHandle+1,w
  9739  0F17  3D27               	addwfc	??_I2cSlv_I2cDrvHandle+3,w
  9740  0F18  0087               	movwf	7
  9741  0F19  0801               	movf	1,w
  9742  0F1A  00A8               	movwf	??_I2cSlv_I2cDrvHandle+4
  9743  0F1B  0829               	movf	I2cSlv_I2cDrvHandle@Index,w
  9744  0F1C  3E20               	addlw	(low (_CmdBuffer| (0+512)))& (0+255)
  9745  0F1D  0086               	movwf	6
  9746  0F1E  3002               	movlw	2	; select bank4/5
  9747  0F1F  0087               	movwf	7
  9748  0F20  0828               	movf	??_I2cSlv_I2cDrvHandle+4,w
  9749  0F21  0081               	movwf	1
  9750  0F22  3001               	movlw	1
  9751  0F23  00A4               	movwf	??_I2cSlv_I2cDrvHandle
  9752  0F24  0824               	movf	??_I2cSlv_I2cDrvHandle,w
  9753  0F25  07A9               	addwf	I2cSlv_I2cDrvHandle@Index,f
  9754  0F26  3050               	movlw	80
  9755  0F27  0229               	subwf	I2cSlv_I2cDrvHandle@Index,w
  9756  0F28  1C03               	skipc
  9757  0F29  2F0C               	goto	l4777
  9758  0F2A                     l4783:	
  9759                           
  9760                           ;i2c_slv.c: 173: }
  9761                           ;i2c_slv.c: 175: GenerateEvt(&I2cWriteRequest);
  9762  0F2A  30E8               	movlw	(low (_I2cWriteRequest| 0))& (0+255)
  9763  0F2B  3188  20F8  318E   	fcall	_GenerateEvt
  9764                           
  9765                           ;i2c_slv.c: 177: if (LedBehaviourSts == ((UINT8)(1)))
  9766  0F2E  0379               	decf	_LedBehaviourSts,w
  9767  0F2F  1D03               	btfss	3,2
  9768  0F30  0008               	return
  9769                           
  9770                           ;i2c_slv.c: 178: {
  9771                           ;i2c_slv.c: 179: Led_SetLedStatus(1u, LED_STS_PULSE);
  9772  0F31  3003               	movlw	3
  9773  0F32  0020               	movlb	0	; select bank0
  9774  0F33  00A4               	movwf	??_I2cSlv_I2cDrvHandle
  9775  0F34  0824               	movf	??_I2cSlv_I2cDrvHandle,w
  9776  0F35  00F4               	movwf	Led_SetLedStatus@LedSts
  9777  0F36  3001               	movlw	1
  9778  0F37  3196  26D7         	fcall	_Led_SetLedStatus
  9779                           
  9780                           ;i2c_slv.c: 180: }
  9781                           ;i2c_slv.c: 181: }
  9782                           ;i2c_slv.c: 182: }
  9783                           ;i2c_slv.c: 183: }
  9784  0F39  0008               	return
  9785  0F3A                     l4789:	
  9786                           
  9787                           ;i2c_slv.c: 185: else if (ReceiveEvt(&I2cReplyPacketReady))
  9788  0F3A  3077               	movlw	(low (_I2cReplyPacketReady| 0))& (0+255)
  9789  0F3B  3188  20B6  318E   	fcall	_ReceiveEvt
  9790  0F3E  3A00               	xorlw	0
  9791  0F3F  1903               	skipnz
  9792  0F40  0008               	return
  9793                           
  9794                           ;i2c_slv.c: 186: {
  9795                           ;i2c_slv.c: 188: I2c_UpdateTxBuffer(RepBuffer,RepBufferLen);
  9796  0F41  0021               	movlb	1	; select bank1
  9797  0F42  0839               	movf	_RepBufferLen^(0+128),w
  9798  0F43  0020               	movlb	0	; select bank0
  9799  0F44  00A4               	movwf	??_I2cSlv_I2cDrvHandle
  9800  0F45  0824               	movf	??_I2cSlv_I2cDrvHandle,w
  9801  0F46  00F4               	movwf	I2c_UpdateTxBuffer@Length
  9802  0F47  30A0               	movlw	(low (_RepBuffer| (0+256)))& (0+255)
  9803  0F48  3188  203C  318E   	fcall	_I2c_UpdateTxBuffer
  9804                           
  9805                           ;i2c_slv.c: 190: if (LedBehaviourSts == ((UINT8)(1)))
  9806  0F4B  0379               	decf	_LedBehaviourSts,w
  9807  0F4C  1D03               	btfss	3,2
  9808  0F4D  0008               	return
  9809                           
  9810                           ;i2c_slv.c: 191: {
  9811                           ;i2c_slv.c: 192: Led_SetLedStatus(1u, LED_STS_PULSE);
  9812  0F4E  3003               	movlw	3
  9813  0F4F  0020               	movlb	0	; select bank0
  9814  0F50  00A4               	movwf	??_I2cSlv_I2cDrvHandle
  9815  0F51  0824               	movf	??_I2cSlv_I2cDrvHandle,w
  9816  0F52  00F4               	movwf	Led_SetLedStatus@LedSts
  9817  0F53  3001               	movlw	1
  9818  0F54  3196  26D7         	fcall	_Led_SetLedStatus
  9819                           
  9820                           ;i2c_slv.c: 199: }
  9821                           
  9822                           ;i2c_slv.c: 198: break;
  9823                           
  9824                           ;i2c_slv.c: 197: default:
  9825                           
  9826                           ;i2c_slv.c: 193: }
  9827                           ;i2c_slv.c: 194: }
  9828                           ;i2c_slv.c: 195: break;
  9829  0F56  0008               	return
  9830  0F57                     l4799:	
  9831  0F57  0021               	movlb	1	; select bank1
  9832  0F58  0834               	movf	I2cSlv_I2cDrvHandle@I2cReceiveMsgState^(0+128),w
  9833                           
  9834                           ; Switch size 1, requested type "space"
  9835                           ; Number of cases is 2, Range of values is 0 to 1
  9836                           ; switch strategies available:
  9837                           ; Name         Instructions Cycles
  9838                           ; simple_byte            7     4 (average)
  9839                           ; direct_byte           10     6 (fixed)
  9840                           ; jumptable            260     6 (fixed)
  9841                           ;	Chosen strategy is simple_byte
  9842  0F59  3A00               	xorlw	0	; case 0
  9843  0F5A  1903               	skipnz
  9844  0F5B  2ED5               	goto	l4757
  9845  0F5C  3A01               	xorlw	1	; case 1
  9846  0F5D  1903               	skipnz
  9847  0F5E  2EE8               	goto	l4763
  9848  0F5F  2F60               	goto	l612
  9849  0F60                     l612:	
  9850  0F60  0008               	return
  9851  0F61                     __end_of_I2cSlv_I2cDrvHandle:	
  9852                           
  9853                           	psect	text34
  9854  083C                     __ptext34:	
  9855 ;; *************** function _I2c_UpdateTxBuffer *****************
  9856 ;; Defined at:
  9857 ;;		line 278 in file "../../../Framework/MercuryFwk/Source/c/01_Hal/02_Drv/i2c_slv_drv.c"
  9858 ;; Parameters:    Size  Location     Type
  9859 ;;  DataBuffer      1    wreg     PTR unsigned char 
  9860 ;;		 -> RepBuffer(80), 
  9861 ;;  Length          1    4[COMMON] unsigned char 
  9862 ;; Auto vars:     Size  Location     Type
  9863 ;;  DataBuffer      1    2[BANK0 ] PTR unsigned char 
  9864 ;;		 -> RepBuffer(80), 
  9865 ;;  Index           1    3[BANK0 ] unsigned char 
  9866 ;; Return value:  Size  Location     Type
  9867 ;;                  1    wreg      void 
  9868 ;; Registers used:
  9869 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  9870 ;; Tracked objects:
  9871 ;;		On entry : 0/0
  9872 ;;		On exit  : 0/0
  9873 ;;		Unchanged: 0/0
  9874 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9875 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9876 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9877 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9878 ;;      Totals:         1       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9879 ;;Total ram usage:        5 bytes
  9880 ;; Hardware stack levels used:    1
  9881 ;; Hardware stack levels required when called:    2
  9882 ;; This function calls:
  9883 ;;		Nothing
  9884 ;; This function is called by:
  9885 ;;		_I2cSlv_I2cDrvHandle
  9886 ;; This function uses a non-reentrant model
  9887 ;;
  9888                           
  9889                           
  9890                           ;psect for function _I2c_UpdateTxBuffer
  9891  083C                     _I2c_UpdateTxBuffer:	
  9892                           
  9893                           ;incstack = 0
  9894                           ; Regs used in _I2c_UpdateTxBuffer: [wreg+fsr1l+fsr1h+status,2+status,0]
  9895                           ;I2c_UpdateTxBuffer@DataBuffer stored from wreg
  9896  083C  0020               	movlb	0	; select bank0
  9897  083D  00A2               	movwf	I2c_UpdateTxBuffer@DataBuffer
  9898                           
  9899                           ;i2c_slv_drv.c: 280: UINT8 Index = 0;
  9900  083E  01A3               	clrf	I2c_UpdateTxBuffer@Index
  9901                           
  9902                           ;i2c_slv_drv.c: 283: for (Index = 0; Index < Length; Index++)
  9903  083F  01A3               	clrf	I2c_UpdateTxBuffer@Index
  9904  0840                     l4497:	
  9905  0840  0874               	movf	I2c_UpdateTxBuffer@Length,w
  9906  0841  0223               	subwf	I2c_UpdateTxBuffer@Index,w
  9907  0842  1803               	btfsc	3,0
  9908  0843  0008               	return
  9909                           
  9910                           ;i2c_slv_drv.c: 284: {
  9911                           ;i2c_slv_drv.c: 285: I2cTxBuffer[Index] = *(DataBuffer + Index);
  9912  0844  0823               	movf	I2c_UpdateTxBuffer@Index,w
  9913  0845  0722               	addwf	I2c_UpdateTxBuffer@DataBuffer,w
  9914  0846  00A0               	movwf	??_I2c_UpdateTxBuffer
  9915  0847  0820               	movf	??_I2c_UpdateTxBuffer,w
  9916  0848  0086               	movwf	6
  9917  0849  3001               	movlw	1	; select bank2/3
  9918  084A  0087               	movwf	7
  9919  084B  0801               	movf	1,w
  9920  084C  00A1               	movwf	??_I2c_UpdateTxBuffer+1
  9921  084D  0823               	movf	I2c_UpdateTxBuffer@Index,w
  9922  084E  3EA0               	addlw	(low (_I2cTxBuffer| (0+512)))& (0+255)
  9923  084F  0086               	movwf	6
  9924  0850  3002               	movlw	2	; select bank5/6
  9925  0851  0087               	movwf	7
  9926  0852  0821               	movf	??_I2c_UpdateTxBuffer+1,w
  9927  0853  0081               	movwf	1
  9928  0854  3001               	movlw	1
  9929  0855  00A0               	movwf	??_I2c_UpdateTxBuffer
  9930  0856  0820               	movf	??_I2c_UpdateTxBuffer,w
  9931  0857  07A3               	addwf	I2c_UpdateTxBuffer@Index,f
  9932  0858  2840               	goto	l4497
  9933  0859                     __end_of_I2c_UpdateTxBuffer:	
  9934                           
  9935                           	psect	text35
  9936  07FA                     __ptext35:	
  9937 ;; *************** function _I2c_SetI2cAddressMask *****************
  9938 ;; Defined at:
  9939 ;;		line 263 in file "../../../Framework/MercuryFwk/Source/c/01_Hal/02_Drv/i2c_slv_drv.c"
  9940 ;; Parameters:    Size  Location     Type
  9941 ;;  SlaveAddress    1    wreg     unsigned char 
  9942 ;; Auto vars:     Size  Location     Type
  9943 ;;  SlaveAddress    1    4[COMMON] unsigned char 
  9944 ;; Return value:  Size  Location     Type
  9945 ;;                  1    wreg      void 
  9946 ;; Registers used:
  9947 ;;		wreg, status,2, status,0
  9948 ;; Tracked objects:
  9949 ;;		On entry : 0/0
  9950 ;;		On exit  : 0/0
  9951 ;;		Unchanged: 0/0
  9952 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9953 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9954 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9955 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9956 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9957 ;;Total ram usage:        1 bytes
  9958 ;; Hardware stack levels used:    1
  9959 ;; Hardware stack levels required when called:    2
  9960 ;; This function calls:
  9961 ;;		Nothing
  9962 ;; This function is called by:
  9963 ;;		_I2cSlv_I2cDrvHandle
  9964 ;; This function uses a non-reentrant model
  9965 ;;
  9966                           
  9967                           
  9968                           ;psect for function _I2c_SetI2cAddressMask
  9969  07FA                     _I2c_SetI2cAddressMask:	
  9970                           
  9971                           ;incstack = 0
  9972                           ; Regs used in _I2c_SetI2cAddressMask: [wreg+status,2+status,0]
  9973                           ;I2c_SetI2cAddressMask@SlaveAddressMask stored from wreg
  9974  07FA  00F4               	movwf	I2c_SetI2cAddressMask@SlaveAddressMask
  9975                           
  9976                           ;i2c_slv_drv.c: 266: SSP1MSK = (SlaveAddressMask << ((UINT8)(1)));
  9977  07FB  3574               	lslf	I2c_SetI2cAddressMask@SlaveAddressMask,w
  9978  07FC  0024               	movlb	4	; select bank4
  9979  07FD  0093               	movwf	19	;volatile
  9980  07FE  0008               	return
  9981  07FF                     __end_of_I2c_SetI2cAddressMask:	
  9982                           
  9983                           	psect	text36
  9984  0801                     __ptext36:	
  9985 ;; *************** function _I2c_SetI2cAddress *****************
  9986 ;; Defined at:
  9987 ;;		line 249 in file "../../../Framework/MercuryFwk/Source/c/01_Hal/02_Drv/i2c_slv_drv.c"
  9988 ;; Parameters:    Size  Location     Type
  9989 ;;  SlaveAddress    1    wreg     unsigned char 
  9990 ;; Auto vars:     Size  Location     Type
  9991 ;;  SlaveAddress    1    4[COMMON] unsigned char 
  9992 ;; Return value:  Size  Location     Type
  9993 ;;                  1    wreg      void 
  9994 ;; Registers used:
  9995 ;;		wreg, status,2, status,0
  9996 ;; Tracked objects:
  9997 ;;		On entry : 0/0
  9998 ;;		On exit  : 0/0
  9999 ;;		Unchanged: 0/0
 10000 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10001 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10002 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10003 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10004 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10005 ;;Total ram usage:        1 bytes
 10006 ;; Hardware stack levels used:    1
 10007 ;; Hardware stack levels required when called:    2
 10008 ;; This function calls:
 10009 ;;		Nothing
 10010 ;; This function is called by:
 10011 ;;		_I2cSlv_I2cDrvHandle
 10012 ;; This function uses a non-reentrant model
 10013 ;;
 10014                           
 10015                           
 10016                           ;psect for function _I2c_SetI2cAddress
 10017  0801                     _I2c_SetI2cAddress:	
 10018                           
 10019                           ;incstack = 0
 10020                           ; Regs used in _I2c_SetI2cAddress: [wreg+status,2+status,0]
 10021                           ;I2c_SetI2cAddress@SlaveAddress stored from wreg
 10022  0801  00F4               	movwf	I2c_SetI2cAddress@SlaveAddress
 10023                           
 10024                           ;i2c_slv_drv.c: 252: SSP1ADD = (SlaveAddress << ((UINT8)(1)));
 10025  0802  3574               	lslf	I2c_SetI2cAddress@SlaveAddress,w
 10026  0803  0024               	movlb	4	; select bank4
 10027  0804  0092               	movwf	18	;volatile
 10028  0805  0008               	return
 10029  0806                     __end_of_I2c_SetI2cAddress:	
 10030                           
 10031                           	psect	text37
 10032  0C09                     __ptext37:	
 10033 ;; *************** function ___awmod *****************
 10034 ;; Defined at:
 10035 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\awmod.c"
 10036 ;; Parameters:    Size  Location     Type
 10037 ;;  divisor         2    0[BANK0 ] int 
 10038 ;;  dividend        2    2[BANK0 ] int 
 10039 ;; Auto vars:     Size  Location     Type
 10040 ;;  sign            1    5[BANK0 ] unsigned char 
 10041 ;;  counter         1    4[BANK0 ] unsigned char 
 10042 ;; Return value:  Size  Location     Type
 10043 ;;                  2    0[BANK0 ] int 
 10044 ;; Registers used:
 10045 ;;		wreg, status,2, status,0
 10046 ;; Tracked objects:
 10047 ;;		On entry : 0/0
 10048 ;;		On exit  : 0/0
 10049 ;;		Unchanged: 0/0
 10050 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10051 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10052 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10053 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10054 ;;      Totals:         1       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10055 ;;Total ram usage:        7 bytes
 10056 ;; Hardware stack levels used:    1
 10057 ;; Hardware stack levels required when called:    2
 10058 ;; This function calls:
 10059 ;;		Nothing
 10060 ;; This function is called by:
 10061 ;;		_App_MainTask
 10062 ;; This function uses a non-reentrant model
 10063 ;;
 10064                           
 10065                           
 10066                           ;psect for function ___awmod
 10067  0C09                     ___awmod:	
 10068                           
 10069                           ;incstack = 0
 10070                           ; Regs used in ___awmod: [wreg+status,2+status,0]
 10071  0C09  0020               	movlb	0	; select bank0
 10072  0C0A  01A5               	clrf	___awmod@sign
 10073  0C0B  1FA3               	btfss	___awmod@dividend+1,7
 10074  0C0C  2C14               	goto	l4887
 10075  0C0D  09A2               	comf	___awmod@dividend,f
 10076  0C0E  09A3               	comf	___awmod@dividend+1,f
 10077  0C0F  0AA2               	incf	___awmod@dividend,f
 10078  0C10  1903               	skipnz
 10079  0C11  0AA3               	incf	___awmod@dividend+1,f
 10080  0C12  01A5               	clrf	___awmod@sign
 10081  0C13  0AA5               	incf	___awmod@sign,f
 10082  0C14                     l4887:	
 10083  0C14  1FA1               	btfss	___awmod@divisor+1,7
 10084  0C15  2C1B               	goto	l4891
 10085  0C16  09A0               	comf	___awmod@divisor,f
 10086  0C17  09A1               	comf	___awmod@divisor+1,f
 10087  0C18  0AA0               	incf	___awmod@divisor,f
 10088  0C19  1903               	skipnz
 10089  0C1A  0AA1               	incf	___awmod@divisor+1,f
 10090  0C1B                     l4891:	
 10091  0C1B  0820               	movf	___awmod@divisor,w
 10092  0C1C  0421               	iorwf	___awmod@divisor+1,w
 10093  0C1D  1903               	btfsc	3,2
 10094  0C1E  2C42               	goto	l4909
 10095  0C1F  01A4               	clrf	___awmod@counter
 10096  0C20  0AA4               	incf	___awmod@counter,f
 10097  0C21                     l4899:	
 10098  0C21  1BA1               	btfsc	___awmod@divisor+1,7
 10099  0C22  2C2D               	goto	l4901
 10100  0C23  3001               	movlw	1
 10101  0C24                     u4305:	
 10102  0C24  35A0               	lslf	___awmod@divisor,f
 10103  0C25  0DA1               	rlf	___awmod@divisor+1,f
 10104  0C26  0B89               	decfsz	9,f
 10105  0C27  2C24               	goto	u4305
 10106  0C28  3001               	movlw	1
 10107  0C29  00F4               	movwf	??___awmod
 10108  0C2A  0874               	movf	??___awmod,w
 10109  0C2B  07A4               	addwf	___awmod@counter,f
 10110  0C2C  2C21               	goto	l4899
 10111  0C2D                     l4901:	
 10112  0C2D  0821               	movf	___awmod@divisor+1,w
 10113  0C2E  0223               	subwf	___awmod@dividend+1,w
 10114  0C2F  1D03               	skipz
 10115  0C30  2C33               	goto	u4325
 10116  0C31  0820               	movf	___awmod@divisor,w
 10117  0C32  0222               	subwf	___awmod@dividend,w
 10118  0C33                     u4325:	
 10119  0C33  1C03               	skipc
 10120  0C34  2C39               	goto	l4905
 10121  0C35  0820               	movf	___awmod@divisor,w
 10122  0C36  02A2               	subwf	___awmod@dividend,f
 10123  0C37  0821               	movf	___awmod@divisor+1,w
 10124  0C38  3BA3               	subwfb	___awmod@dividend+1,f
 10125  0C39                     l4905:	
 10126  0C39  3001               	movlw	1
 10127  0C3A                     u4335:	
 10128  0C3A  36A1               	lsrf	___awmod@divisor+1,f
 10129  0C3B  0CA0               	rrf	___awmod@divisor,f
 10130  0C3C  0B89               	decfsz	9,f
 10131  0C3D  2C3A               	goto	u4335
 10132  0C3E  3001               	movlw	1
 10133  0C3F  02A4               	subwf	___awmod@counter,f
 10134  0C40  1D03               	btfss	3,2
 10135  0C41  2C2D               	goto	l4901
 10136  0C42                     l4909:	
 10137  0C42  0825               	movf	___awmod@sign,w
 10138  0C43  1903               	btfsc	3,2
 10139  0C44  2C4A               	goto	l4913
 10140  0C45  09A2               	comf	___awmod@dividend,f
 10141  0C46  09A3               	comf	___awmod@dividend+1,f
 10142  0C47  0AA2               	incf	___awmod@dividend,f
 10143  0C48  1903               	skipnz
 10144  0C49  0AA3               	incf	___awmod@dividend+1,f
 10145  0C4A                     l4913:	
 10146  0C4A  0823               	movf	___awmod@dividend+1,w
 10147  0C4B  00A1               	movwf	?___awmod+1
 10148  0C4C  0822               	movf	___awmod@dividend,w
 10149  0C4D  00A0               	movwf	?___awmod
 10150  0C4E  0008               	return
 10151  0C4F                     __end_of___awmod:	
 10152                           
 10153                           	psect	text38
 10154  0CE8                     __ptext38:	
 10155 ;; *************** function ___awdiv *****************
 10156 ;; Defined at:
 10157 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\awdiv.c"
 10158 ;; Parameters:    Size  Location     Type
 10159 ;;  divisor         2    0[BANK0 ] int 
 10160 ;;  dividend        2    2[BANK0 ] int 
 10161 ;; Auto vars:     Size  Location     Type
 10162 ;;  quotient        2    6[BANK0 ] int 
 10163 ;;  sign            1    5[BANK0 ] unsigned char 
 10164 ;;  counter         1    4[BANK0 ] unsigned char 
 10165 ;; Return value:  Size  Location     Type
 10166 ;;                  2    0[BANK0 ] int 
 10167 ;; Registers used:
 10168 ;;		wreg, status,2, status,0
 10169 ;; Tracked objects:
 10170 ;;		On entry : 0/0
 10171 ;;		On exit  : 0/0
 10172 ;;		Unchanged: 0/0
 10173 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10174 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10175 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10176 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10177 ;;      Totals:         1       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10178 ;;Total ram usage:        9 bytes
 10179 ;; Hardware stack levels used:    1
 10180 ;; Hardware stack levels required when called:    2
 10181 ;; This function calls:
 10182 ;;		Nothing
 10183 ;; This function is called by:
 10184 ;;		_App_MainTask
 10185 ;; This function uses a non-reentrant model
 10186 ;;
 10187                           
 10188                           
 10189                           ;psect for function ___awdiv
 10190  0CE8                     ___awdiv:	
 10191                           
 10192                           ;incstack = 0
 10193                           ; Regs used in ___awdiv: [wreg+status,2+status,0]
 10194  0CE8  0020               	movlb	0	; select bank0
 10195  0CE9  01A5               	clrf	___awdiv@sign
 10196  0CEA  1FA1               	btfss	___awdiv@divisor+1,7
 10197  0CEB  2CF3               	goto	l4843
 10198  0CEC  09A0               	comf	___awdiv@divisor,f
 10199  0CED  09A1               	comf	___awdiv@divisor+1,f
 10200  0CEE  0AA0               	incf	___awdiv@divisor,f
 10201  0CEF  1903               	skipnz
 10202  0CF0  0AA1               	incf	___awdiv@divisor+1,f
 10203  0CF1  01A5               	clrf	___awdiv@sign
 10204  0CF2  0AA5               	incf	___awdiv@sign,f
 10205  0CF3                     l4843:	
 10206  0CF3  1FA3               	btfss	___awdiv@dividend+1,7
 10207  0CF4  2CFE               	goto	l4849
 10208  0CF5  09A2               	comf	___awdiv@dividend,f
 10209  0CF6  09A3               	comf	___awdiv@dividend+1,f
 10210  0CF7  0AA2               	incf	___awdiv@dividend,f
 10211  0CF8  1903               	skipnz
 10212  0CF9  0AA3               	incf	___awdiv@dividend+1,f
 10213  0CFA  3001               	movlw	1
 10214  0CFB  00F4               	movwf	??___awdiv
 10215  0CFC  0874               	movf	??___awdiv,w
 10216  0CFD  06A5               	xorwf	___awdiv@sign,f
 10217  0CFE                     l4849:	
 10218  0CFE  01A6               	clrf	___awdiv@quotient
 10219  0CFF  01A7               	clrf	___awdiv@quotient+1
 10220  0D00  0820               	movf	___awdiv@divisor,w
 10221  0D01  0421               	iorwf	___awdiv@divisor+1,w
 10222  0D02  1903               	btfsc	3,2
 10223  0D03  2D2D               	goto	l4871
 10224  0D04  01A4               	clrf	___awdiv@counter
 10225  0D05  0AA4               	incf	___awdiv@counter,f
 10226  0D06                     l4859:	
 10227  0D06  1BA1               	btfsc	___awdiv@divisor+1,7
 10228  0D07  2D12               	goto	l4861
 10229  0D08  3001               	movlw	1
 10230  0D09                     u4205:	
 10231  0D09  35A0               	lslf	___awdiv@divisor,f
 10232  0D0A  0DA1               	rlf	___awdiv@divisor+1,f
 10233  0D0B  0B89               	decfsz	9,f
 10234  0D0C  2D09               	goto	u4205
 10235  0D0D  3001               	movlw	1
 10236  0D0E  00F4               	movwf	??___awdiv
 10237  0D0F  0874               	movf	??___awdiv,w
 10238  0D10  07A4               	addwf	___awdiv@counter,f
 10239  0D11  2D06               	goto	l4859
 10240  0D12                     l4861:	
 10241  0D12  3001               	movlw	1
 10242  0D13                     u4225:	
 10243  0D13  35A6               	lslf	___awdiv@quotient,f
 10244  0D14  0DA7               	rlf	___awdiv@quotient+1,f
 10245  0D15  0B89               	decfsz	9,f
 10246  0D16  2D13               	goto	u4225
 10247  0D17  0821               	movf	___awdiv@divisor+1,w
 10248  0D18  0223               	subwf	___awdiv@dividend+1,w
 10249  0D19  1D03               	skipz
 10250  0D1A  2D1D               	goto	u4235
 10251  0D1B  0820               	movf	___awdiv@divisor,w
 10252  0D1C  0222               	subwf	___awdiv@dividend,w
 10253  0D1D                     u4235:	
 10254  0D1D  1C03               	skipc
 10255  0D1E  2D24               	goto	l4867
 10256  0D1F  0820               	movf	___awdiv@divisor,w
 10257  0D20  02A2               	subwf	___awdiv@dividend,f
 10258  0D21  0821               	movf	___awdiv@divisor+1,w
 10259  0D22  3BA3               	subwfb	___awdiv@dividend+1,f
 10260  0D23  1426               	bsf	___awdiv@quotient,0
 10261  0D24                     l4867:	
 10262  0D24  3001               	movlw	1
 10263  0D25                     u4245:	
 10264  0D25  36A1               	lsrf	___awdiv@divisor+1,f
 10265  0D26  0CA0               	rrf	___awdiv@divisor,f
 10266  0D27  0B89               	decfsz	9,f
 10267  0D28  2D25               	goto	u4245
 10268  0D29  3001               	movlw	1
 10269  0D2A  02A4               	subwf	___awdiv@counter,f
 10270  0D2B  1D03               	btfss	3,2
 10271  0D2C  2D12               	goto	l4861
 10272  0D2D                     l4871:	
 10273  0D2D  0825               	movf	___awdiv@sign,w
 10274  0D2E  1903               	btfsc	3,2
 10275  0D2F  2D35               	goto	l4875
 10276  0D30  09A6               	comf	___awdiv@quotient,f
 10277  0D31  09A7               	comf	___awdiv@quotient+1,f
 10278  0D32  0AA6               	incf	___awdiv@quotient,f
 10279  0D33  1903               	skipnz
 10280  0D34  0AA7               	incf	___awdiv@quotient+1,f
 10281  0D35                     l4875:	
 10282  0D35  0827               	movf	___awdiv@quotient+1,w
 10283  0D36  00A1               	movwf	?___awdiv+1
 10284  0D37  0826               	movf	___awdiv@quotient,w
 10285  0D38  00A0               	movwf	?___awdiv
 10286  0D39  0008               	return
 10287  0D3A                     __end_of___awdiv:	
 10288                           
 10289                           	psect	text39
 10290  166C                     __ptext39:	
 10291 ;; *************** function _Mcu_SetPullUpsSts *****************
 10292 ;; Defined at:
 10293 ;;		line 167 in file "../../../Framework/MercuryFwk/Source/c/01_Hal/02_Drv/mcu_drv.c"
 10294 ;; Parameters:    Size  Location     Type
 10295 ;;  PuSts           1    wreg     enum E3651
 10296 ;; Auto vars:     Size  Location     Type
 10297 ;;  PuSts           1    4[COMMON] enum E3651
 10298 ;; Return value:  Size  Location     Type
 10299 ;;                  1    wreg      void 
 10300 ;; Registers used:
 10301 ;;		wreg, status,0
 10302 ;; Tracked objects:
 10303 ;;		On entry : 0/0
 10304 ;;		On exit  : 0/0
 10305 ;;		Unchanged: 0/0
 10306 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10307 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10308 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10309 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10310 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10311 ;;Total ram usage:        1 bytes
 10312 ;; Hardware stack levels used:    1
 10313 ;; Hardware stack levels required when called:    2
 10314 ;; This function calls:
 10315 ;;		Nothing
 10316 ;; This function is called by:
 10317 ;;		_App_MainTask
 10318 ;; This function uses a non-reentrant model
 10319 ;;
 10320                           
 10321                           
 10322                           ;psect for function _Mcu_SetPullUpsSts
 10323  166C                     _Mcu_SetPullUpsSts:	
 10324                           
 10325                           ;incstack = 0
 10326                           ; Regs used in _Mcu_SetPullUpsSts: [wreg+status,0]
 10327                           ;Mcu_SetPullUpsSts@PuSts stored from wreg
 10328  166C  00F4               	movwf	Mcu_SetPullUpsSts@PuSts
 10329                           
 10330                           ;mcu_drv.c: 170: OPTION_REGbits.nWPUEN = PuSts;
 10331  166D  0C74               	rrf	Mcu_SetPullUpsSts@PuSts,w
 10332  166E  0021               	movlb	1	; select bank1
 10333  166F  1C03               	skipc
 10334  1670  1395               	bcf	21,7	;volatile
 10335  1671  1803               	skipnc
 10336  1672  1795               	bsf	21,7	;volatile
 10337  1673  0008               	return
 10338  1674                     __end_of_Mcu_SetPullUpsSts:	
 10339                           
 10340                           	psect	text40
 10341  1664                     __ptext40:	
 10342 ;; *************** function _Mcu_SetDieTempSts *****************
 10343 ;; Defined at:
 10344 ;;		line 265 in file "../../../Framework/MercuryFwk/Source/c/01_Hal/02_Drv/mcu_drv.c"
 10345 ;; Parameters:    Size  Location     Type
 10346 ;;  DieTempSts      1    wreg     unsigned char 
 10347 ;; Auto vars:     Size  Location     Type
 10348 ;;  DieTempSts      1    4[COMMON] unsigned char 
 10349 ;; Return value:  Size  Location     Type
 10350 ;;                  1    wreg      void 
 10351 ;; Registers used:
 10352 ;;		wreg, status,0
 10353 ;; Tracked objects:
 10354 ;;		On entry : 0/0
 10355 ;;		On exit  : 0/0
 10356 ;;		Unchanged: 0/0
 10357 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10358 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10359 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10360 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10361 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10362 ;;Total ram usage:        1 bytes
 10363 ;; Hardware stack levels used:    1
 10364 ;; Hardware stack levels required when called:    2
 10365 ;; This function calls:
 10366 ;;		Nothing
 10367 ;; This function is called by:
 10368 ;;		_App_MainTask
 10369 ;; This function uses a non-reentrant model
 10370 ;;
 10371                           
 10372                           
 10373                           ;psect for function _Mcu_SetDieTempSts
 10374  1664                     _Mcu_SetDieTempSts:	
 10375                           
 10376                           ;incstack = 0
 10377                           ; Regs used in _Mcu_SetDieTempSts: [wreg+status,0]
 10378                           ;Mcu_SetDieTempSts@DieTempSts stored from wreg
 10379  1664  00F4               	movwf	Mcu_SetDieTempSts@DieTempSts
 10380                           
 10381                           ;mcu_drv.c: 268: FVRCONbits.TSEN = DieTempSts;
 10382  1665  0C74               	rrf	Mcu_SetDieTempSts@DieTempSts,w
 10383  1666  0022               	movlb	2	; select bank2
 10384  1667  1C03               	skipc
 10385  1668  1297               	bcf	23,5	;volatile
 10386  1669  1803               	skipnc
 10387  166A  1697               	bsf	23,5	;volatile
 10388  166B  0008               	return
 10389  166C                     __end_of_Mcu_SetDieTempSts:	
 10390                           
 10391                           	psect	text41
 10392  165C                     __ptext41:	
 10393 ;; *************** function _Mcu_SetDieTempMode *****************
 10394 ;; Defined at:
 10395 ;;		line 279 in file "../../../Framework/MercuryFwk/Source/c/01_Hal/02_Drv/mcu_drv.c"
 10396 ;; Parameters:    Size  Location     Type
 10397 ;;  DieTempMode     1    wreg     unsigned char 
 10398 ;; Auto vars:     Size  Location     Type
 10399 ;;  DieTempMode     1    4[COMMON] unsigned char 
 10400 ;; Return value:  Size  Location     Type
 10401 ;;                  1    wreg      void 
 10402 ;; Registers used:
 10403 ;;		wreg, status,0
 10404 ;; Tracked objects:
 10405 ;;		On entry : 0/0
 10406 ;;		On exit  : 0/0
 10407 ;;		Unchanged: 0/0
 10408 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10409 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10410 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10411 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10412 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10413 ;;Total ram usage:        1 bytes
 10414 ;; Hardware stack levels used:    1
 10415 ;; Hardware stack levels required when called:    2
 10416 ;; This function calls:
 10417 ;;		Nothing
 10418 ;; This function is called by:
 10419 ;;		_App_MainTask
 10420 ;; This function uses a non-reentrant model
 10421 ;;
 10422                           
 10423                           
 10424                           ;psect for function _Mcu_SetDieTempMode
 10425  165C                     _Mcu_SetDieTempMode:	
 10426                           
 10427                           ;incstack = 0
 10428                           ; Regs used in _Mcu_SetDieTempMode: [wreg+status,0]
 10429                           ;Mcu_SetDieTempMode@DieTempMode stored from wreg
 10430  165C  00F4               	movwf	Mcu_SetDieTempMode@DieTempMode
 10431                           
 10432                           ;mcu_drv.c: 282: FVRCONbits.TSRNG = DieTempMode;
 10433  165D  0C74               	rrf	Mcu_SetDieTempMode@DieTempMode,w
 10434  165E  0022               	movlb	2	; select bank2
 10435  165F  1C03               	skipc
 10436  1660  1217               	bcf	23,4	;volatile
 10437  1661  1803               	skipnc
 10438  1662  1617               	bsf	23,4	;volatile
 10439  1663  0008               	return
 10440  1664                     __end_of_Mcu_SetDieTempMode:	
 10441                           
 10442                           	psect	text42
 10443  06E4                     __ptext42:	
 10444 ;; *************** function _Mcu_ConfigPullUps *****************
 10445 ;; Defined at:
 10446 ;;		line 181 in file "../../../Framework/MercuryFwk/Source/c/01_Hal/02_Drv/mcu_drv.c"
 10447 ;; Parameters:    Size  Location     Type
 10448 ;;  WpuCh           1    wreg     PTR struct _WpuChType
 10449 ;;		 -> App_MainTask@WpuCh(18), 
 10450 ;; Auto vars:     Size  Location     Type
 10451 ;;  WpuCh           1    4[COMMON] PTR struct _WpuChType
 10452 ;;		 -> App_MainTask@WpuCh(18), 
 10453 ;; Return value:  Size  Location     Type
 10454 ;;                  1    wreg      void 
 10455 ;; Registers used:
 10456 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 10457 ;; Tracked objects:
 10458 ;;		On entry : 0/0
 10459 ;;		On exit  : 0/0
 10460 ;;		Unchanged: 0/0
 10461 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10462 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10463 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10464 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10465 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10466 ;;Total ram usage:        1 bytes
 10467 ;; Hardware stack levels used:    1
 10468 ;; Hardware stack levels required when called:    2
 10469 ;; This function calls:
 10470 ;;		Nothing
 10471 ;; This function is called by:
 10472 ;;		_App_MainTask
 10473 ;; This function uses a non-reentrant model
 10474 ;;
 10475                           
 10476                           
 10477                           ;psect for function _Mcu_ConfigPullUps
 10478  06E4                     _Mcu_ConfigPullUps:	
 10479                           
 10480                           ;incstack = 0
 10481                           ; Regs used in _Mcu_ConfigPullUps: [wreg+fsr1l+fsr1h+status,2+status,0]
 10482                           ;Mcu_ConfigPullUps@WpuCh stored from wreg
 10483  06E4  00F4               	movwf	Mcu_ConfigPullUps@WpuCh
 10484                           
 10485                           ;mcu_drv.c: 184: WPUA = 0x00;
 10486  06E5  0024               	movlb	4	; select bank4
 10487  06E6  018C               	clrf	12	;volatile
 10488                           
 10489                           ;mcu_drv.c: 185: WPUAbits.WPUA0 = WpuCh->WpuA0;
 10490  06E7  0874               	movf	Mcu_ConfigPullUps@WpuCh,w
 10491  06E8  0086               	movwf	6
 10492  06E9  0187               	clrf	7
 10493  06EA  0C01               	rrf	1,w
 10494  06EB  1C03               	skipc
 10495  06EC  100C               	bcf	12,0	;volatile
 10496  06ED  1803               	skipnc
 10497  06EE  140C               	bsf	12,0	;volatile
 10498                           
 10499                           ;mcu_drv.c: 186: WPUAbits.WPUA1 = WpuCh->WpuA1;
 10500  06EF  0A74               	incf	Mcu_ConfigPullUps@WpuCh,w
 10501  06F0  0086               	movwf	6
 10502  06F1  0187               	clrf	7
 10503  06F2  0C01               	rrf	1,w
 10504  06F3  1C03               	skipc
 10505  06F4  108C               	bcf	12,1	;volatile
 10506  06F5  1803               	skipnc
 10507  06F6  148C               	bsf	12,1	;volatile
 10508                           
 10509                           ;mcu_drv.c: 187: WPUAbits.WPUA2 = WpuCh->WpuA2;
 10510  06F7  0874               	movf	Mcu_ConfigPullUps@WpuCh,w
 10511  06F8  3E02               	addlw	2
 10512  06F9  0086               	movwf	6
 10513  06FA  0187               	clrf	7
 10514  06FB  0C01               	rrf	1,w
 10515  06FC  1C03               	skipc
 10516  06FD  110C               	bcf	12,2	;volatile
 10517  06FE  1803               	skipnc
 10518  06FF  150C               	bsf	12,2	;volatile
 10519                           
 10520                           ;mcu_drv.c: 188: WPUAbits.WPUA3 = WpuCh->WpuA3;
 10521  0700  0874               	movf	Mcu_ConfigPullUps@WpuCh,w
 10522  0701  3E03               	addlw	3
 10523  0702  0086               	movwf	6
 10524  0703  0187               	clrf	7
 10525  0704  0C01               	rrf	1,w
 10526  0705  1C03               	skipc
 10527  0706  118C               	bcf	12,3	;volatile
 10528  0707  1803               	skipnc
 10529  0708  158C               	bsf	12,3	;volatile
 10530                           
 10531                           ;mcu_drv.c: 189: WPUAbits.WPUA4 = WpuCh->WpuA4;
 10532  0709  0874               	movf	Mcu_ConfigPullUps@WpuCh,w
 10533  070A  3E04               	addlw	4
 10534  070B  0086               	movwf	6
 10535  070C  0187               	clrf	7
 10536  070D  0C01               	rrf	1,w
 10537  070E  1C03               	skipc
 10538  070F  120C               	bcf	12,4	;volatile
 10539  0710  1803               	skipnc
 10540  0711  160C               	bsf	12,4	;volatile
 10541                           
 10542                           ;mcu_drv.c: 190: WPUAbits.WPUA5 = WpuCh->WpuA5;
 10543  0712  0874               	movf	Mcu_ConfigPullUps@WpuCh,w
 10544  0713  3E05               	addlw	5
 10545  0714  0086               	movwf	6
 10546  0715  0187               	clrf	7
 10547  0716  0C01               	rrf	1,w
 10548  0717  1C03               	skipc
 10549  0718  128C               	bcf	12,5	;volatile
 10550  0719  1803               	skipnc
 10551  071A  168C               	bsf	12,5	;volatile
 10552                           
 10553                           ;mcu_drv.c: 194: WPUB = 0x00;
 10554  071B  018D               	clrf	13	;volatile
 10555                           
 10556                           ;mcu_drv.c: 195: WPUBbits.WPUB4 = WpuCh->WpuB4;
 10557  071C  0874               	movf	Mcu_ConfigPullUps@WpuCh,w
 10558  071D  3E06               	addlw	6
 10559  071E  0086               	movwf	6
 10560  071F  0187               	clrf	7
 10561  0720  0C01               	rrf	1,w
 10562  0721  1C03               	skipc
 10563  0722  120D               	bcf	13,4	;volatile
 10564  0723  1803               	skipnc
 10565  0724  160D               	bsf	13,4	;volatile
 10566                           
 10567                           ;mcu_drv.c: 196: WPUBbits.WPUB5 = WpuCh->WpuB5;
 10568  0725  0874               	movf	Mcu_ConfigPullUps@WpuCh,w
 10569  0726  3E07               	addlw	7
 10570  0727  0086               	movwf	6
 10571  0728  0187               	clrf	7
 10572  0729  0C01               	rrf	1,w
 10573  072A  1C03               	skipc
 10574  072B  128D               	bcf	13,5	;volatile
 10575  072C  1803               	skipnc
 10576  072D  168D               	bsf	13,5	;volatile
 10577                           
 10578                           ;mcu_drv.c: 197: WPUBbits.WPUB6 = WpuCh->WpuB6;
 10579  072E  0874               	movf	Mcu_ConfigPullUps@WpuCh,w
 10580  072F  3E08               	addlw	8
 10581  0730  0086               	movwf	6
 10582  0731  0187               	clrf	7
 10583  0732  0C01               	rrf	1,w
 10584  0733  1C03               	skipc
 10585  0734  130D               	bcf	13,6	;volatile
 10586  0735  1803               	skipnc
 10587  0736  170D               	bsf	13,6	;volatile
 10588                           
 10589                           ;mcu_drv.c: 198: WPUBbits.WPUB7 = WpuCh->WpuB7;
 10590  0737  0874               	movf	Mcu_ConfigPullUps@WpuCh,w
 10591  0738  3E09               	addlw	9
 10592  0739  0086               	movwf	6
 10593  073A  0187               	clrf	7
 10594  073B  0C01               	rrf	1,w
 10595  073C  1C03               	skipc
 10596  073D  138D               	bcf	13,7	;volatile
 10597  073E  1803               	skipnc
 10598  073F  178D               	bsf	13,7	;volatile
 10599                           
 10600                           ;mcu_drv.c: 202: WPUC = 0x00;
 10601  0740  018E               	clrf	14	;volatile
 10602                           
 10603                           ;mcu_drv.c: 203: WPUCbits.WPUC0 = WpuCh->WpuC0;
 10604  0741  0874               	movf	Mcu_ConfigPullUps@WpuCh,w
 10605  0742  3E0A               	addlw	10
 10606  0743  0086               	movwf	6
 10607  0744  0187               	clrf	7
 10608  0745  0C01               	rrf	1,w
 10609  0746  1C03               	skipc
 10610  0747  100E               	bcf	14,0	;volatile
 10611  0748  1803               	skipnc
 10612  0749  140E               	bsf	14,0	;volatile
 10613                           
 10614                           ;mcu_drv.c: 204: WPUCbits.WPUC1 = WpuCh->WpuC1;
 10615  074A  0874               	movf	Mcu_ConfigPullUps@WpuCh,w
 10616  074B  3E0B               	addlw	11
 10617  074C  0086               	movwf	6
 10618  074D  0187               	clrf	7
 10619  074E  0C01               	rrf	1,w
 10620  074F  1C03               	skipc
 10621  0750  108E               	bcf	14,1	;volatile
 10622  0751  1803               	skipnc
 10623  0752  148E               	bsf	14,1	;volatile
 10624                           
 10625                           ;mcu_drv.c: 205: WPUCbits.WPUC2 = WpuCh->WpuC2;
 10626  0753  0874               	movf	Mcu_ConfigPullUps@WpuCh,w
 10627  0754  3E0C               	addlw	12
 10628  0755  0086               	movwf	6
 10629  0756  0187               	clrf	7
 10630  0757  0C01               	rrf	1,w
 10631  0758  1C03               	skipc
 10632  0759  110E               	bcf	14,2	;volatile
 10633  075A  1803               	skipnc
 10634  075B  150E               	bsf	14,2	;volatile
 10635                           
 10636                           ;mcu_drv.c: 206: WPUCbits.WPUC3 = WpuCh->WpuC3;
 10637  075C  0874               	movf	Mcu_ConfigPullUps@WpuCh,w
 10638  075D  3E0D               	addlw	13
 10639  075E  0086               	movwf	6
 10640  075F  0187               	clrf	7
 10641  0760  0C01               	rrf	1,w
 10642  0761  1C03               	skipc
 10643  0762  118E               	bcf	14,3	;volatile
 10644  0763  1803               	skipnc
 10645  0764  158E               	bsf	14,3	;volatile
 10646                           
 10647                           ;mcu_drv.c: 207: WPUCbits.WPUC4 = WpuCh->WpuC4;
 10648  0765  0874               	movf	Mcu_ConfigPullUps@WpuCh,w
 10649  0766  3E0E               	addlw	14
 10650  0767  0086               	movwf	6
 10651  0768  0187               	clrf	7
 10652  0769  0C01               	rrf	1,w
 10653  076A  1C03               	skipc
 10654  076B  120E               	bcf	14,4	;volatile
 10655  076C  1803               	skipnc
 10656  076D  160E               	bsf	14,4	;volatile
 10657                           
 10658                           ;mcu_drv.c: 208: WPUCbits.WPUC5 = WpuCh->WpuC5;
 10659  076E  0874               	movf	Mcu_ConfigPullUps@WpuCh,w
 10660  076F  3E0F               	addlw	15
 10661  0770  0086               	movwf	6
 10662  0771  0187               	clrf	7
 10663  0772  0C01               	rrf	1,w
 10664  0773  1C03               	skipc
 10665  0774  128E               	bcf	14,5	;volatile
 10666  0775  1803               	skipnc
 10667  0776  168E               	bsf	14,5	;volatile
 10668                           
 10669                           ;mcu_drv.c: 210: WPUCbits.WPUC6 = WpuCh->WpuC6;
 10670  0777  0874               	movf	Mcu_ConfigPullUps@WpuCh,w
 10671  0778  3E10               	addlw	16
 10672  0779  0086               	movwf	6
 10673  077A  0187               	clrf	7
 10674  077B  0C01               	rrf	1,w
 10675  077C  1C03               	skipc
 10676  077D  130E               	bcf	14,6	;volatile
 10677  077E  1803               	skipnc
 10678  077F  170E               	bsf	14,6	;volatile
 10679                           
 10680                           ;mcu_drv.c: 211: WPUCbits.WPUC7 = WpuCh->WpuC7;
 10681  0780  0874               	movf	Mcu_ConfigPullUps@WpuCh,w
 10682  0781  3E11               	addlw	17
 10683  0782  0086               	movwf	6
 10684  0783  0187               	clrf	7
 10685  0784  0C01               	rrf	1,w
 10686  0785  1C03               	skipc
 10687  0786  138E               	bcf	14,7	;volatile
 10688  0787  1803               	skipnc
 10689  0788  178E               	bsf	14,7	;volatile
 10690  0789  0008               	return
 10691  078A                     __end_of_Mcu_ConfigPullUps:	
 10692                           
 10693                           	psect	text43
 10694  0A02                     __ptext43:	
 10695 ;; *************** function _Dht_GetSensorData *****************
 10696 ;; Defined at:
 10697 ;;		line 225 in file "../../../Framework/MercuryFwk/Source/c/01_Hal/02_Drv/dht11_drv.c"
 10698 ;; Parameters:    Size  Location     Type
 10699 ;;		None
 10700 ;; Auto vars:     Size  Location     Type
 10701 ;;  Ret             1    8[BANK0 ] unsigned char 
 10702 ;; Return value:  Size  Location     Type
 10703 ;;                  1    wreg      unsigned char 
 10704 ;; Registers used:
 10705 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10706 ;; Tracked objects:
 10707 ;;		On entry : 0/0
 10708 ;;		On exit  : 0/0
 10709 ;;		Unchanged: 0/0
 10710 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10711 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10712 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10713 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10714 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10715 ;;Total ram usage:        1 bytes
 10716 ;; Hardware stack levels used:    1
 10717 ;; Hardware stack levels required when called:    4
 10718 ;; This function calls:
 10719 ;;		_Dht_CalculateChecksum
 10720 ;;		_Dht_ReadData
 10721 ;;		_Dht_RequestData
 10722 ;;		_Mcu_DisableSchedulerInt
 10723 ;;		_Mcu_EnableSchedulerInt
 10724 ;; This function is called by:
 10725 ;;		_App_MainTask
 10726 ;; This function uses a non-reentrant model
 10727 ;;
 10728                           
 10729                           
 10730                           ;psect for function _Dht_GetSensorData
 10731  0A02                     _Dht_GetSensorData:	
 10732                           
 10733                           ;dht11_drv.c: 227: UINT8 Ret;
 10734                           ;dht11_drv.c: 231: Mcu_DisableSchedulerInt();
 10735                           
 10736                           ;incstack = 0
 10737                           ; Regs used in _Dht_GetSensorData: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 10738  0A02  3196  263D  318A   	fcall	_Mcu_DisableSchedulerInt
 10739                           
 10740                           ;dht11_drv.c: 234: Dht_RequestData();
 10741  0A05  3188  2077  318A   	fcall	_Dht_RequestData
 10742                           
 10743                           ;dht11_drv.c: 236: Dht_ReadData();
 10744  0A08  3197  2774  318A   	fcall	_Dht_ReadData
 10745                           
 10746                           ;dht11_drv.c: 239: Mcu_EnableSchedulerInt();
 10747  0A0B  3196  2640  318A   	fcall	_Mcu_EnableSchedulerInt
 10748                           
 10749                           ;dht11_drv.c: 242: if (Dht_CalculateChecksum(Sensor))
 10750  0A0E  30A0               	movlw	low _Sensor
 10751  0A0F  0086               	movwf	6
 10752  0A10  3000               	movlw	high _Sensor
 10753  0A11  0087               	movwf	7
 10754  0A12  3020               	movlw	low Dht_CalculateChecksum@Sens
 10755  0A13  0084               	movwf	4
 10756  0A14  3000               	movlw	high Dht_CalculateChecksum@Sens
 10757  0A15  0085               	movwf	5
 10758  0A16  3F40               	moviw [0]fsr1
 10759  0A17  3F80               	movwi [0]fsr0
 10760  0A18  3F41               	moviw [1]fsr1
 10761  0A19  3F81               	movwi [1]fsr0
 10762  0A1A  3F42               	moviw [2]fsr1
 10763  0A1B  3F82               	movwi [2]fsr0
 10764  0A1C  3F43               	moviw [3]fsr1
 10765  0A1D  3F83               	movwi [3]fsr0
 10766  0A1E  3F44               	moviw [4]fsr1
 10767  0A1F  3F84               	movwi [4]fsr0
 10768  0A20  3188  20D7  318A   	fcall	_Dht_CalculateChecksum
 10769  0A23  3A00               	xorlw	0
 10770  0A24  1903               	skipnz
 10771  0A25  2A2A               	goto	l4749
 10772                           
 10773                           ;dht11_drv.c: 243: {
 10774                           ;dht11_drv.c: 244: Ret = 1;
 10775  0A26  0020               	movlb	0	; select bank0
 10776  0A27  01A8               	clrf	Dht_GetSensorData@Ret
 10777  0A28  0AA8               	incf	Dht_GetSensorData@Ret,f
 10778                           
 10779                           ;dht11_drv.c: 245: }
 10780  0A29  2A2C               	goto	l4751
 10781  0A2A                     l4749:	
 10782                           
 10783                           ;dht11_drv.c: 246: else
 10784                           ;dht11_drv.c: 247: {
 10785                           ;dht11_drv.c: 248: Ret = 0;
 10786  0A2A  0020               	movlb	0	; select bank0
 10787  0A2B  01A8               	clrf	Dht_GetSensorData@Ret
 10788  0A2C                     l4751:	
 10789                           
 10790                           ;dht11_drv.c: 249: }
 10791                           ;dht11_drv.c: 251: return Ret;
 10792  0A2C  0828               	movf	Dht_GetSensorData@Ret,w
 10793  0A2D  0008               	return
 10794  0A2E                     __end_of_Dht_GetSensorData:	
 10795                           
 10796                           	psect	text44
 10797  1640                     __ptext44:	
 10798 ;; *************** function _Mcu_EnableSchedulerInt *****************
 10799 ;; Defined at:
 10800 ;;		line 112 in file "../../../Framework/MercuryFwk/Source/c/01_Hal/02_Drv/mcu_drv.c"
 10801 ;; Parameters:    Size  Location     Type
 10802 ;;		None
 10803 ;; Auto vars:     Size  Location     Type
 10804 ;;		None
 10805 ;; Return value:  Size  Location     Type
 10806 ;;                  1    wreg      void 
 10807 ;; Registers used:
 10808 ;;		None
 10809 ;; Tracked objects:
 10810 ;;		On entry : 0/0
 10811 ;;		On exit  : 0/0
 10812 ;;		Unchanged: 0/0
 10813 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10814 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10815 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10816 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10817 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10818 ;;Total ram usage:        0 bytes
 10819 ;; Hardware stack levels used:    1
 10820 ;; Hardware stack levels required when called:    2
 10821 ;; This function calls:
 10822 ;;		Nothing
 10823 ;; This function is called by:
 10824 ;;		_Dht_GetSensorData
 10825 ;; This function uses a non-reentrant model
 10826 ;;
 10827                           
 10828                           
 10829                           ;psect for function _Mcu_EnableSchedulerInt
 10830  1640                     _Mcu_EnableSchedulerInt:	
 10831                           
 10832                           ;mcu_drv.c: 114: PIE1bits.TMR2IE = ((UINT8)(1));
 10833                           
 10834                           ;incstack = 0
 10835                           ; Regs used in _Mcu_EnableSchedulerInt: []
 10836  1640  0021               	movlb	1	; select bank1
 10837  1641  1491               	bsf	17,1	;volatile
 10838  1642  0008               	return
 10839  1643                     __end_of_Mcu_EnableSchedulerInt:	
 10840                           
 10841                           	psect	text45
 10842  163D                     __ptext45:	
 10843 ;; *************** function _Mcu_DisableSchedulerInt *****************
 10844 ;; Defined at:
 10845 ;;		line 140 in file "../../../Framework/MercuryFwk/Source/c/01_Hal/02_Drv/mcu_drv.c"
 10846 ;; Parameters:    Size  Location     Type
 10847 ;;		None
 10848 ;; Auto vars:     Size  Location     Type
 10849 ;;		None
 10850 ;; Return value:  Size  Location     Type
 10851 ;;                  1    wreg      void 
 10852 ;; Registers used:
 10853 ;;		None
 10854 ;; Tracked objects:
 10855 ;;		On entry : 0/0
 10856 ;;		On exit  : 0/0
 10857 ;;		Unchanged: 0/0
 10858 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10859 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10860 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10861 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10862 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10863 ;;Total ram usage:        0 bytes
 10864 ;; Hardware stack levels used:    1
 10865 ;; Hardware stack levels required when called:    2
 10866 ;; This function calls:
 10867 ;;		Nothing
 10868 ;; This function is called by:
 10869 ;;		_Dht_GetSensorData
 10870 ;; This function uses a non-reentrant model
 10871 ;;
 10872                           
 10873                           
 10874                           ;psect for function _Mcu_DisableSchedulerInt
 10875  163D                     _Mcu_DisableSchedulerInt:	
 10876                           
 10877                           ;mcu_drv.c: 142: PIE1bits.TMR2IE = ((UINT8)(0));
 10878                           
 10879                           ;incstack = 0
 10880                           ; Regs used in _Mcu_DisableSchedulerInt: []
 10881  163D  0021               	movlb	1	; select bank1
 10882  163E  1091               	bcf	17,1	;volatile
 10883  163F  0008               	return
 10884  1640                     __end_of_Mcu_DisableSchedulerInt:	
 10885                           
 10886                           	psect	text46
 10887  0877                     __ptext46:	
 10888 ;; *************** function _Dht_RequestData *****************
 10889 ;; Defined at:
 10890 ;;		line 106 in file "../../../Framework/MercuryFwk/Source/c/01_Hal/02_Drv/dht11_drv.c"
 10891 ;; Parameters:    Size  Location     Type
 10892 ;;		None
 10893 ;; Auto vars:     Size  Location     Type
 10894 ;;		None
 10895 ;; Return value:  Size  Location     Type
 10896 ;;                  1    wreg      void 
 10897 ;; Registers used:
 10898 ;;		wreg
 10899 ;; Tracked objects:
 10900 ;;		On entry : 0/0
 10901 ;;		On exit  : 0/0
 10902 ;;		Unchanged: 0/0
 10903 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10904 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10905 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10906 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10907 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10908 ;;Total ram usage:        2 bytes
 10909 ;; Hardware stack levels used:    1
 10910 ;; Hardware stack levels required when called:    2
 10911 ;; This function calls:
 10912 ;;		Nothing
 10913 ;; This function is called by:
 10914 ;;		_Dht_GetSensorData
 10915 ;; This function uses a non-reentrant model
 10916 ;;
 10917                           
 10918                           
 10919                           ;psect for function _Dht_RequestData
 10920  0877                     _Dht_RequestData:	
 10921                           
 10922                           ;dht11_drv.c: 109: TRISAbits.TRISA2 = ((UINT8)(0));
 10923                           
 10924                           ;incstack = 0
 10925                           ; Regs used in _Dht_RequestData: [wreg]
 10926  0877  0021               	movlb	1	; select bank1
 10927  0878  110C               	bcf	12,2	;volatile
 10928                           
 10929                           ;dht11_drv.c: 112: PORTAbits.RA2 = ((UINT8)(0));
 10930  0879  0020               	movlb	0	; select bank0
 10931  087A  110C               	bcf	12,2	;volatile
 10932                           
 10933                           ;dht11_drv.c: 113: _delay((unsigned long)((5u)*(((UINT32)(32000000))/4000.0)));
 10934  087B  3034               	movlw	52
 10935  087C  00F5               	movwf	??_Dht_RequestData+1
 10936  087D  30F1               	movlw	241
 10937  087E  00F4               	movwf	??_Dht_RequestData
 10938  087F                     u4767:	
 10939  087F  0BF4               	decfsz	??_Dht_RequestData,f
 10940  0880  287F               	goto	u4767
 10941  0881  0BF5               	decfsz	??_Dht_RequestData+1,f
 10942  0882  287F               	goto	u4767
 10943  0883  3200               	nop2
 10944                           
 10945                           ;dht11_drv.c: 114: PORTAbits.RA2 = ((UINT8)(1));
 10946  0884  0020               	movlb	0	; select bank0
 10947  0885  150C               	bsf	12,2	;volatile
 10948                           
 10949                           ;dht11_drv.c: 115: _delay((unsigned long)((30u)*(((UINT32)(32000000))/4000000.0)));
 10950  0886  304F               	movlw	79
 10951  0887  00F4               	movwf	??_Dht_RequestData
 10952  0888                     u4777:	
 10953  0888  0BF4               	decfsz	??_Dht_RequestData,f
 10954  0889  2888               	goto	u4777
 10955  088A  3200               	nop2	;nop
 10956                           
 10957                           ;dht11_drv.c: 116: PORTAbits.RA2 = ((UINT8)(0));
 10958  088B  0020               	movlb	0	; select bank0
 10959  088C  110C               	bcf	12,2	;volatile
 10960                           
 10961                           ;dht11_drv.c: 119: TRISAbits.TRISA2 = ((UINT8)(1));
 10962  088D  0021               	movlb	1	; select bank1
 10963  088E  150C               	bsf	12,2	;volatile
 10964  088F                     l392:	
 10965                           ;dht11_drv.c: 121: while (PORTAbits.RA2 == ((UINT8)(0)));
 10966                           
 10967  088F  0020               	movlb	0	; select bank0
 10968  0890  1D0C               	btfss	12,2	;volatile
 10969  0891  288F               	goto	l392
 10970  0892                     l395:	
 10971                           ;dht11_drv.c: 123: while (PORTAbits.RA2 == ((UINT8)(1)));
 10972                           
 10973  0892  1D0C               	btfss	12,2	;volatile
 10974  0893  0008               	return
 10975  0894  2892               	goto	l395
 10976  0895                     __end_of_Dht_RequestData:	
 10977                           
 10978                           	psect	text47
 10979  1774                     __ptext47:	
 10980 ;; *************** function _Dht_ReadData *****************
 10981 ;; Defined at:
 10982 ;;		line 172 in file "../../../Framework/MercuryFwk/Source/c/01_Hal/02_Drv/dht11_drv.c"
 10983 ;; Parameters:    Size  Location     Type
 10984 ;;		None
 10985 ;; Auto vars:     Size  Location     Type
 10986 ;;  Index           1    5[BANK0 ] unsigned char 
 10987 ;; Return value:  Size  Location     Type
 10988 ;;                  1    wreg      void 
 10989 ;; Registers used:
 10990 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10991 ;; Tracked objects:
 10992 ;;		On entry : 0/0
 10993 ;;		On exit  : 0/0
 10994 ;;		Unchanged: 0/0
 10995 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10996 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10997 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10998 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10999 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11000 ;;Total ram usage:        2 bytes
 11001 ;; Hardware stack levels used:    1
 11002 ;; Hardware stack levels required when called:    3
 11003 ;; This function calls:
 11004 ;;		_Dht_ReadByte
 11005 ;; This function is called by:
 11006 ;;		_Dht_GetSensorData
 11007 ;; This function uses a non-reentrant model
 11008 ;;
 11009                           
 11010                           
 11011                           ;psect for function _Dht_ReadData
 11012  1774                     _Dht_ReadData:	
 11013                           
 11014                           ;dht11_drv.c: 174: UINT8 Index;
 11015                           ;dht11_drv.c: 177: for (Index = 0; Index < 5; Index++)
 11016                           
 11017                           ;incstack = 0
 11018                           ; Regs used in _Dht_ReadData: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 11019  1774  0020               	movlb	0	; select bank0
 11020  1775  01A5               	clrf	Dht_ReadData@Index
 11021  1776                     L11:	
 11022  1776  3005               	movlw	5
 11023  1777  0225               	subwf	Dht_ReadData@Index,w
 11024  1778  1803               	btfsc	3,0
 11025  1779  0008               	return
 11026                           
 11027                           ;dht11_drv.c: 178: {
 11028                           ;dht11_drv.c: 179: Sensor.Array[Index] = Dht_ReadByte();
 11029  177A  318B  2387  3197   	fcall	_Dht_ReadByte
 11030  177D  0020               	movlb	0	; select bank0
 11031  177E  00A4               	movwf	??_Dht_ReadData
 11032  177F  0825               	movf	Dht_ReadData@Index,w
 11033  1780  3EA0               	addlw	(low (_Sensor| 0))& (0+255)
 11034  1781  0086               	movwf	6
 11035  1782  0187               	clrf	7
 11036  1783  0824               	movf	??_Dht_ReadData,w
 11037  1784  0081               	movwf	1
 11038  1785  3001               	movlw	1
 11039  1786  00A4               	movwf	??_Dht_ReadData
 11040  1787  0824               	movf	??_Dht_ReadData,w
 11041  1788  07A5               	addwf	Dht_ReadData@Index,f
 11042  1789  2F76               	goto	L11
 11043  178A                     __end_of_Dht_ReadData:	
 11044                           
 11045                           	psect	text48
 11046  0B87                     __ptext48:	
 11047 ;; *************** function _Dht_ReadByte *****************
 11048 ;; Defined at:
 11049 ;;		line 134 in file "../../../Framework/MercuryFwk/Source/c/01_Hal/02_Drv/dht11_drv.c"
 11050 ;; Parameters:    Size  Location     Type
 11051 ;;		None
 11052 ;; Auto vars:     Size  Location     Type
 11053 ;;  Counter         2    1[BANK0 ] unsigned short 
 11054 ;;  Index           1    3[BANK0 ] unsigned char 
 11055 ;;  Data            1    0[BANK0 ] unsigned char 
 11056 ;; Return value:  Size  Location     Type
 11057 ;;                  1    wreg      unsigned char 
 11058 ;; Registers used:
 11059 ;;		wreg, status,2, status,0
 11060 ;; Tracked objects:
 11061 ;;		On entry : 0/0
 11062 ;;		On exit  : 0/0
 11063 ;;		Unchanged: 0/0
 11064 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11065 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11066 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11067 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11068 ;;      Totals:         2       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11069 ;;Total ram usage:        6 bytes
 11070 ;; Hardware stack levels used:    1
 11071 ;; Hardware stack levels required when called:    2
 11072 ;; This function calls:
 11073 ;;		Nothing
 11074 ;; This function is called by:
 11075 ;;		_Dht_ReadData
 11076 ;; This function uses a non-reentrant model
 11077 ;;
 11078                           
 11079                           
 11080                           ;psect for function _Dht_ReadByte
 11081  0B87                     _Dht_ReadByte:	
 11082                           
 11083                           ;dht11_drv.c: 136: UINT8 Index;
 11084                           ;dht11_drv.c: 137: UINT8 Data = 0x00;
 11085                           
 11086                           ;incstack = 0
 11087                           ; Regs used in _Dht_ReadByte: [wreg+status,2+status,0]
 11088  0B87  0020               	movlb	0	; select bank0
 11089  0B88  01A0               	clrf	Dht_ReadByte@Data
 11090                           
 11091                           ;dht11_drv.c: 138: UINT16 Counter = 0;
 11092  0B89  01A1               	clrf	Dht_ReadByte@Counter
 11093  0B8A  01A2               	clrf	Dht_ReadByte@Counter+1
 11094                           
 11095                           ;dht11_drv.c: 140: for (Index = 0; Index < 8; Index++)
 11096  0B8B  01A3               	clrf	Dht_ReadByte@Index
 11097  0B8C  3008               	movlw	8
 11098  0B8D  0223               	subwf	Dht_ReadByte@Index,w
 11099  0B8E  1803               	btfsc	3,0
 11100  0B8F  2BC5               	goto	l4359
 11101  0B90                     l403:	
 11102                           ;dht11_drv.c: 141: {
 11103                           ;dht11_drv.c: 143: while (PORTAbits.RA2 == ((UINT8)(0)));
 11104                           
 11105  0B90  1D0C               	btfss	12,2	;volatile
 11106  0B91  2B90               	goto	l403
 11107                           
 11108                           ;dht11_drv.c: 145: Counter = 0;
 11109  0B92  01A1               	clrf	Dht_ReadByte@Counter
 11110  0B93  01A2               	clrf	Dht_ReadByte@Counter+1
 11111                           
 11112                           ;dht11_drv.c: 147: while ((PORTAbits.RA2 == ((UINT8)(1))) && (Counter < 100))
 11113  0B94  2B9F               	goto	l4349
 11114  0B95                     l4347:	
 11115                           
 11116                           ;dht11_drv.c: 148: {
 11117                           ;dht11_drv.c: 149: _delay((unsigned long)((10u)*(((UINT32)(32000000))/4000000.0)));
 11118  0B95  301A               	movlw	26
 11119  0B96  00F4               	movwf	??_Dht_ReadByte
 11120  0B97                     u4787:	
 11121  0B97  0BF4               	decfsz	??_Dht_ReadByte,f
 11122  0B98  2B97               	goto	u4787
 11123  0B99  0000               	nop
 11124                           
 11125                           ;dht11_drv.c: 150: Counter++;
 11126  0B9A  3001               	movlw	1
 11127  0B9B  0020               	movlb	0	; select bank0
 11128  0B9C  07A1               	addwf	Dht_ReadByte@Counter,f
 11129  0B9D  3000               	movlw	0
 11130  0B9E  3DA2               	addwfc	Dht_ReadByte@Counter+1,f
 11131  0B9F                     l4349:	
 11132  0B9F  1D0C               	btfss	12,2	;volatile
 11133  0BA0  2BA8               	goto	l4353
 11134  0BA1  3000               	movlw	0
 11135  0BA2  0222               	subwf	Dht_ReadByte@Counter+1,w
 11136  0BA3  3064               	movlw	100
 11137  0BA4  1903               	skipnz
 11138  0BA5  0221               	subwf	Dht_ReadByte@Counter,w
 11139  0BA6  1C03               	skipc
 11140  0BA7  2B95               	goto	l4347
 11141  0BA8                     l4353:	
 11142                           
 11143                           ;dht11_drv.c: 151: }
 11144                           ;dht11_drv.c: 153: if (Counter > (30u/10u))
 11145  0BA8  3000               	movlw	0
 11146  0BA9  0222               	subwf	Dht_ReadByte@Counter+1,w
 11147  0BAA  3004               	movlw	4
 11148  0BAB  1903               	skipnz
 11149  0BAC  0221               	subwf	Dht_ReadByte@Counter,w
 11150  0BAD  1C03               	skipc
 11151  0BAE  2BBD               	goto	l411
 11152                           
 11153                           ;dht11_drv.c: 154: {
 11154                           ;dht11_drv.c: 156: Data |= 0x01 << (7 - Index);
 11155  0BAF  3001               	movlw	1
 11156  0BB0  00F4               	movwf	??_Dht_ReadByte
 11157  0BB1  0323               	decf	Dht_ReadByte@Index,w
 11158  0BB2  3AFF               	xorlw	255
 11159  0BB3  3E07               	addlw	7
 11160  0BB4  0A89               	incf	9,f
 11161  0BB5  2BB7               	goto	u3614
 11162  0BB6                     u3615:	
 11163  0BB6  35F4               	lslf	??_Dht_ReadByte,f
 11164  0BB7                     u3614:	
 11165  0BB7  0B89               	decfsz	9,f
 11166  0BB8  2BB6               	goto	u3615
 11167  0BB9  0874               	movf	??_Dht_ReadByte,w
 11168  0BBA  00F5               	movwf	??_Dht_ReadByte+1
 11169  0BBB  0875               	movf	??_Dht_ReadByte+1,w
 11170  0BBC  04A0               	iorwf	Dht_ReadByte@Data,f
 11171  0BBD                     l411:	
 11172  0BBD  3001               	movlw	1
 11173  0BBE  00F4               	movwf	??_Dht_ReadByte
 11174  0BBF  0874               	movf	??_Dht_ReadByte,w
 11175  0BC0  07A3               	addwf	Dht_ReadByte@Index,f
 11176  0BC1  3008               	movlw	8
 11177  0BC2  0223               	subwf	Dht_ReadByte@Index,w
 11178  0BC3  1C03               	skipc
 11179  0BC4  2B90               	goto	l403
 11180  0BC5                     l4359:	
 11181                           
 11182                           ;dht11_drv.c: 157: }
 11183                           ;dht11_drv.c: 158: }
 11184                           ;dht11_drv.c: 161: return Data;
 11185  0BC5  0820               	movf	Dht_ReadByte@Data,w
 11186  0BC6  0008               	return
 11187  0BC7                     __end_of_Dht_ReadByte:	
 11188                           
 11189                           	psect	text49
 11190  08D7                     __ptext49:	
 11191 ;; *************** function _Dht_CalculateChecksum *****************
 11192 ;; Defined at:
 11193 ;;		line 191 in file "../../../Framework/MercuryFwk/Source/c/01_Hal/02_Drv/dht11_drv.c"
 11194 ;; Parameters:    Size  Location     Type
 11195 ;;  Sens            5    0[BANK0 ] struct _DhtSensor
 11196 ;; Auto vars:     Size  Location     Type
 11197 ;;  Index           1    7[BANK0 ] unsigned char 
 11198 ;;  Ret             1    6[BANK0 ] unsigned char 
 11199 ;;  Checksum        1    5[BANK0 ] unsigned char 
 11200 ;; Return value:  Size  Location     Type
 11201 ;;                  1    wreg      unsigned char 
 11202 ;; Registers used:
 11203 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 11204 ;; Tracked objects:
 11205 ;;		On entry : 0/0
 11206 ;;		On exit  : 0/0
 11207 ;;		Unchanged: 0/0
 11208 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11209 ;;      Params:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11210 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11211 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11212 ;;      Totals:         1       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11213 ;;Total ram usage:        9 bytes
 11214 ;; Hardware stack levels used:    1
 11215 ;; Hardware stack levels required when called:    2
 11216 ;; This function calls:
 11217 ;;		Nothing
 11218 ;; This function is called by:
 11219 ;;		_Dht_GetSensorData
 11220 ;; This function uses a non-reentrant model
 11221 ;;
 11222                           
 11223                           
 11224                           ;psect for function _Dht_CalculateChecksum
 11225  08D7                     _Dht_CalculateChecksum:	
 11226                           
 11227                           ;dht11_drv.c: 193: UINT8 Index;
 11228                           ;dht11_drv.c: 194: UINT8 Checksum;
 11229                           ;dht11_drv.c: 195: UINT8 Ret;
 11230                           ;dht11_drv.c: 198: Checksum = 0;
 11231                           
 11232                           ;incstack = 0
 11233                           ; Regs used in _Dht_CalculateChecksum: [wreg+fsr1l+fsr1h+status,2+status,0]
 11234  08D7  0020               	movlb	0	; select bank0
 11235  08D8  01A5               	clrf	Dht_CalculateChecksum@Checksum
 11236                           
 11237                           ;dht11_drv.c: 199: for (Index = 0; Index < 4; Index++)
 11238  08D9  01A7               	clrf	Dht_CalculateChecksum@Index
 11239  08DA  3004               	movlw	4
 11240  08DB  0227               	subwf	Dht_CalculateChecksum@Index,w
 11241  08DC  1803               	btfsc	3,0
 11242  08DD  28EE               	goto	l4579
 11243  08DE                     l4573:	
 11244                           
 11245                           ;dht11_drv.c: 200: {
 11246                           ;dht11_drv.c: 201: Checksum += Sens.Array[Index];
 11247  08DE  0827               	movf	Dht_CalculateChecksum@Index,w
 11248  08DF  3E20               	addlw	(low (Dht_CalculateChecksum@Sens| 0))& (0+255)
 11249  08E0  0086               	movwf	6
 11250  08E1  0187               	clrf	7
 11251  08E2  0801               	movf	1,w
 11252  08E3  00F4               	movwf	??_Dht_CalculateChecksum
 11253  08E4  0874               	movf	??_Dht_CalculateChecksum,w
 11254  08E5  07A5               	addwf	Dht_CalculateChecksum@Checksum,f
 11255  08E6  3001               	movlw	1
 11256  08E7  00F4               	movwf	??_Dht_CalculateChecksum
 11257  08E8  0874               	movf	??_Dht_CalculateChecksum,w
 11258  08E9  07A7               	addwf	Dht_CalculateChecksum@Index,f
 11259  08EA  3004               	movlw	4
 11260  08EB  0227               	subwf	Dht_CalculateChecksum@Index,w
 11261  08EC  1C03               	skipc
 11262  08ED  28DE               	goto	l4573
 11263  08EE                     l4579:	
 11264                           
 11265                           ;dht11_drv.c: 202: }
 11266                           ;dht11_drv.c: 205: if (Checksum == Sens.Data.Checksum)
 11267  08EE  0824               	movf	Dht_CalculateChecksum@Sens+4,w
 11268  08EF  0625               	xorwf	Dht_CalculateChecksum@Checksum,w
 11269  08F0  1D03               	skipz
 11270  08F1  28F5               	goto	l4583
 11271                           
 11272                           ;dht11_drv.c: 206: {
 11273                           ;dht11_drv.c: 207: Ret = 1;
 11274  08F2  01A6               	clrf	Dht_CalculateChecksum@Ret
 11275  08F3  0AA6               	incf	Dht_CalculateChecksum@Ret,f
 11276                           
 11277                           ;dht11_drv.c: 208: }
 11278  08F4  28F6               	goto	l4585
 11279  08F5                     l4583:	
 11280                           
 11281                           ;dht11_drv.c: 209: else
 11282                           ;dht11_drv.c: 210: {
 11283                           ;dht11_drv.c: 211: Ret = 0;
 11284  08F5  01A6               	clrf	Dht_CalculateChecksum@Ret
 11285  08F6                     l4585:	
 11286                           
 11287                           ;dht11_drv.c: 212: }
 11288                           ;dht11_drv.c: 214: return Ret;
 11289  08F6  0826               	movf	Dht_CalculateChecksum@Ret,w
 11290  08F7  0008               	return
 11291  08F8                     __end_of_Dht_CalculateChecksum:	
 11292                           
 11293                           	psect	text50
 11294  09D8                     __ptext50:	
 11295 ;; *************** function _AppSm *****************
 11296 ;; Defined at:
 11297 ;;		line 224 in file "../Source/c/04_App/sb330_app.c"
 11298 ;; Parameters:    Size  Location     Type
 11299 ;;		None
 11300 ;; Auto vars:     Size  Location     Type
 11301 ;;		None
 11302 ;; Return value:  Size  Location     Type
 11303 ;;                  1    wreg      void 
 11304 ;; Registers used:
 11305 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11306 ;; Tracked objects:
 11307 ;;		On entry : 0/0
 11308 ;;		On exit  : 0/0
 11309 ;;		Unchanged: 0/0
 11310 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11311 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11312 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11313 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11314 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11315 ;;Total ram usage:        1 bytes
 11316 ;; Hardware stack levels used:    1
 11317 ;; Hardware stack levels required when called:    6
 11318 ;; This function calls:
 11319 ;;		_GenerateEvt
 11320 ;;		_ManageProtocol
 11321 ;;		_StdS_SetI2cAddress
 11322 ;; This function is called by:
 11323 ;;		_App_MainTask
 11324 ;; This function uses a non-reentrant model
 11325 ;;
 11326                           
 11327                           
 11328                           ;psect for function _AppSm
 11329  09D8                     _AppSm:	
 11330                           
 11331                           ;sb330_app.c: 226: static AppStateType AppState = WaitWpuSetState;
 11332                           ;sb330_app.c: 227: static UINT8 WpuSetCounter = 0;
 11333                           ;sb330_app.c: 229: switch (AppState)
 11334                           
 11335                           ;incstack = 0
 11336                           ; Regs used in _AppSm: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 11337  09D8  29F5               	goto	l4833
 11338  09D9                     l4819:	
 11339                           ;sb330_app.c: 230: {
 11340                           ;sb330_app.c: 231: case WaitWpuSetState:
 11341                           
 11342                           
 11343                           ;sb330_app.c: 233: WpuSetCounter++;
 11344  09D9  3001               	movlw	1
 11345  09DA  0020               	movlb	0	; select bank0
 11346  09DB  00BA               	movwf	??_AppSm
 11347  09DC  083A               	movf	??_AppSm,w
 11348  09DD  0021               	movlb	1	; select bank1
 11349  09DE  07B2               	addwf	AppSm@WpuSetCounter^(0+128),f
 11350                           
 11351                           ;sb330_app.c: 235: if (WpuSetCounter >= ((UINT16)(100)/((UINT16)(100))))
 11352  09DF  0832               	movf	AppSm@WpuSetCounter^(0+128),w
 11353  09E0  1903               	btfsc	3,2
 11354  09E1  0008               	return
 11355                           
 11356                           ;sb330_app.c: 236: {
 11357                           ;sb330_app.c: 238: StdS_SetI2cAddress();
 11358  09E2  318A  22B9         	fcall	_StdS_SetI2cAddress
 11359                           
 11360                           ;sb330_app.c: 240: AppState = SendI2cAddrState;
 11361  09E4  0021               	movlb	1	; select bank1
 11362  09E5  01B1               	clrf	AppSm@AppState^(0+128)
 11363  09E6  0AB1               	incf	AppSm@AppState^(0+128),f
 11364                           
 11365                           ;sb330_app.c: 241: }
 11366                           ;sb330_app.c: 242: break;
 11367  09E7  0008               	return
 11368  09E8                     l4825:	
 11369                           ;sb330_app.c: 244: case SendI2cAddrState:
 11370                           
 11371                           
 11372                           ;sb330_app.c: 246: GenerateEvt(&I2cSetAddress);
 11373  09E8  30E6               	movlw	(low (_I2cSetAddress| 0))& (0+255)
 11374  09E9  3188  20F8         	fcall	_GenerateEvt
 11375                           
 11376                           ;sb330_app.c: 248: AppState = ManageProtocolState;
 11377  09EB  3002               	movlw	2
 11378  09EC  0020               	movlb	0	; select bank0
 11379  09ED  00BA               	movwf	??_AppSm
 11380  09EE  083A               	movf	??_AppSm,w
 11381  09EF  0021               	movlb	1	; select bank1
 11382  09F0  00B1               	movwf	AppSm@AppState^(0+128)
 11383                           
 11384                           ;sb330_app.c: 249: break;
 11385  09F1  0008               	return
 11386  09F2                     l4829:	
 11387                           ;sb330_app.c: 251: case ManageProtocolState:
 11388                           
 11389                           
 11390                           ;sb330_app.c: 253: ManageProtocol();
 11391  09F2  3181  21BA         	fcall	_ManageProtocol
 11392                           
 11393                           ;sb330_app.c: 258: }
 11394                           
 11395                           ;sb330_app.c: 257: break;
 11396                           
 11397                           ;sb330_app.c: 256: default:
 11398                           
 11399                           ;sb330_app.c: 254: break;
 11400  09F4  0008               	return
 11401  09F5                     l4833:	
 11402  09F5  0021               	movlb	1	; select bank1
 11403  09F6  0831               	movf	AppSm@AppState^(0+128),w
 11404                           
 11405                           ; Switch size 1, requested type "space"
 11406                           ; Number of cases is 3, Range of values is 0 to 2
 11407                           ; switch strategies available:
 11408                           ; Name         Instructions Cycles
 11409                           ; simple_byte           10     6 (average)
 11410                           ; direct_byte           12     6 (fixed)
 11411                           ; jumptable            260     6 (fixed)
 11412                           ;	Chosen strategy is simple_byte
 11413  09F7  3A00               	xorlw	0	; case 0
 11414  09F8  1903               	skipnz
 11415  09F9  29D9               	goto	l4819
 11416  09FA  3A01               	xorlw	1	; case 1
 11417  09FB  1903               	skipnz
 11418  09FC  29E8               	goto	l4825
 11419  09FD  3A03               	xorlw	3	; case 2
 11420  09FE  1903               	skipnz
 11421  09FF  29F2               	goto	l4829
 11422  0A00  2A01               	goto	l956
 11423  0A01                     l956:	
 11424  0A01  0008               	return
 11425  0A02                     __end_of_AppSm:	
 11426                           
 11427                           	psect	text51
 11428  0AB9                     __ptext51:	
 11429 ;; *************** function _StdS_SetI2cAddress *****************
 11430 ;; Defined at:
 11431 ;;		line 317 in file "../../../Framework/MercuryFwk/Source/c/03_Sml/02_Ssl/std_ser.c"
 11432 ;; Parameters:    Size  Location     Type
 11433 ;;		None
 11434 ;; Auto vars:     Size  Location     Type
 11435 ;;		None
 11436 ;; Return value:  Size  Location     Type
 11437 ;;                  1    wreg      void 
 11438 ;; Registers used:
 11439 ;;		wreg, status,2, status,0
 11440 ;; Tracked objects:
 11441 ;;		On entry : 0/0
 11442 ;;		On exit  : 0/0
 11443 ;;		Unchanged: 0/0
 11444 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11445 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11446 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11447 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11448 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11449 ;;Total ram usage:        2 bytes
 11450 ;; Hardware stack levels used:    1
 11451 ;; Hardware stack levels required when called:    2
 11452 ;; This function calls:
 11453 ;;		Nothing
 11454 ;; This function is called by:
 11455 ;;		_AppSm
 11456 ;; This function uses a non-reentrant model
 11457 ;;
 11458                           
 11459                           
 11460                           ;psect for function _StdS_SetI2cAddress
 11461  0AB9                     _StdS_SetI2cAddress:	
 11462                           
 11463                           ;std_ser.c: 321: I2cSlaveAddress |= (!PORTCbits.RC6 << 3);
 11464                           
 11465                           ;incstack = 0
 11466                           ; Regs used in _StdS_SetI2cAddress: [wreg+status,2+status,0]
 11467  0AB9  1003               	clrc
 11468  0ABA  0020               	movlb	0	; select bank0
 11469  0ABB  1F0E               	btfss	14,6	;volatile
 11470  0ABC  1403               	setc
 11471  0ABD  3000               	movlw	0
 11472  0ABE  3D09               	addwfc	9,w
 11473  0ABF  00F4               	movwf	??_StdS_SetI2cAddress
 11474  0AC0  3002               	movlw	2
 11475  0AC1                     u2225:	
 11476  0AC1  35F4               	lslf	??_StdS_SetI2cAddress,f
 11477  0AC2  3EFF               	addlw	-1
 11478  0AC3  1D03               	skipz
 11479  0AC4  2AC1               	goto	u2225
 11480  0AC5  3574               	lslf	??_StdS_SetI2cAddress,w
 11481  0AC6  00F5               	movwf	??_StdS_SetI2cAddress+1
 11482  0AC7  0875               	movf	??_StdS_SetI2cAddress+1,w
 11483  0AC8  04EB               	iorwf	_I2cSlaveAddress,f
 11484                           
 11485                           ;std_ser.c: 322: I2cSlaveAddress |= (!PORTCbits.RC3 << 2);
 11486  0AC9  1003               	clrc
 11487  0ACA  1D8E               	btfss	14,3	;volatile
 11488  0ACB  1403               	setc
 11489  0ACC  3000               	movlw	0
 11490  0ACD  3D09               	addwfc	9,w
 11491  0ACE  00F4               	movwf	??_StdS_SetI2cAddress
 11492  0ACF  3001               	movlw	1
 11493  0AD0                     u2235:	
 11494  0AD0  35F4               	lslf	??_StdS_SetI2cAddress,f
 11495  0AD1  3EFF               	addlw	-1
 11496  0AD2  1D03               	skipz
 11497  0AD3  2AD0               	goto	u2235
 11498  0AD4  3574               	lslf	??_StdS_SetI2cAddress,w
 11499  0AD5  00F5               	movwf	??_StdS_SetI2cAddress+1
 11500  0AD6  0875               	movf	??_StdS_SetI2cAddress+1,w
 11501  0AD7  04EB               	iorwf	_I2cSlaveAddress,f
 11502                           
 11503                           ;std_ser.c: 323: I2cSlaveAddress |= (!PORTCbits.RC4 << 1);
 11504  0AD8  1003               	clrc
 11505  0AD9  1E0E               	btfss	14,4	;volatile
 11506  0ADA  1403               	setc
 11507  0ADB  3000               	movlw	0
 11508  0ADC  3D09               	addwfc	9,w
 11509  0ADD  0709               	addwf	9,w
 11510  0ADE  00F4               	movwf	??_StdS_SetI2cAddress
 11511  0ADF  0874               	movf	??_StdS_SetI2cAddress,w
 11512  0AE0  04EB               	iorwf	_I2cSlaveAddress,f
 11513                           
 11514                           ;std_ser.c: 324: I2cSlaveAddress |= (!PORTCbits.RC5 << 0);
 11515  0AE1  1003               	clrc
 11516  0AE2  1E8E               	btfss	14,5	;volatile
 11517  0AE3  1403               	setc
 11518  0AE4  3000               	movlw	0
 11519  0AE5  3D09               	addwfc	9,w
 11520  0AE6  00F4               	movwf	??_StdS_SetI2cAddress
 11521  0AE7  0874               	movf	??_StdS_SetI2cAddress,w
 11522  0AE8  04EB               	iorwf	_I2cSlaveAddress,f
 11523  0AE9  0008               	return
 11524  0AEA                     __end_of_StdS_SetI2cAddress:	
 11525                           
 11526                           	psect	text52
 11527  01BA                     __ptext52:	
 11528 ;; *************** function _ManageProtocol *****************
 11529 ;; Defined at:
 11530 ;;		line 137 in file "../Source/c/04_App/sb330_app.c"
 11531 ;; Parameters:    Size  Location     Type
 11532 ;;		None
 11533 ;; Auto vars:     Size  Location     Type
 11534 ;;		None
 11535 ;; Return value:  Size  Location     Type
 11536 ;;                  1    wreg      void 
 11537 ;; Registers used:
 11538 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11539 ;; Tracked objects:
 11540 ;;		On entry : 0/0
 11541 ;;		On exit  : 0/0
 11542 ;;		Unchanged: 0/0
 11543 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11544 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11545 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11546 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11547 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11548 ;;Total ram usage:        2 bytes
 11549 ;; Hardware stack levels used:    1
 11550 ;; Hardware stack levels required when called:    5
 11551 ;; This function calls:
 11552 ;;		_GenerateEvt
 11553 ;;		_ReceiveEvt
 11554 ;;		_SetBuffer
 11555 ;;		_StdS_ManageStdServices
 11556 ;;		_itoa
 11557 ;;		_strcat
 11558 ;;		_strcpy
 11559 ;; This function is called by:
 11560 ;;		_AppSm
 11561 ;; This function uses a non-reentrant model
 11562 ;;
 11563                           
 11564                           
 11565                           ;psect for function _ManageProtocol
 11566  01BA                     _ManageProtocol:	
 11567                           
 11568                           ;sb330_app.c: 140: if (ReceiveEvt(&I2cWriteRequest))
 11569                           
 11570                           ;incstack = 0
 11571                           ; Regs used in _ManageProtocol: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 11572  01BA  30E8               	movlw	(low (_I2cWriteRequest| 0))& (0+255)
 11573  01BB  3188  20B6  3181   	fcall	_ReceiveEvt
 11574  01BE  3A00               	xorlw	0
 11575  01BF  1903               	skipnz
 11576  01C0  0008               	return
 11577                           
 11578                           ;sb330_app.c: 141: {
 11579                           ;sb330_app.c: 143: StdS_ManageStdServices();
 11580  01C1  3183  23CA  3181   	fcall	_StdS_ManageStdServices
 11581                           
 11582                           ;sb330_app.c: 145: switch (CmdBuffer[((UINT8)(0))])
 11583  01C4  2AB9               	goto	l4637
 11584  01C5                     l4593:	
 11585                           ;sb330_app.c: 146: {
 11586                           ;sb330_app.c: 147: case ((UINT8)(0x60)):
 11587                           
 11588                           
 11589                           ;sb330_app.c: 149: RepBuffer[((UINT8)(0))] = TemperatureInt;
 11590  01C5  0876               	movf	_TemperatureInt,w
 11591  01C6  0020               	movlb	0	; select bank0
 11592  01C7  00B8               	movwf	??_ManageProtocol
 11593  01C8  0838               	movf	??_ManageProtocol,w
 11594  01C9  0023               	movlb	3	; select bank3
 11595  01CA  00A0               	movwf	_RepBuffer^(0+384)
 11596                           
 11597                           ;sb330_app.c: 150: RepBuffer[((UINT8)(1))] = TemperatureDec;
 11598  01CB  0020               	movlb	0	; select bank0
 11599  01CC  086D               	movf	_TemperatureDec,w
 11600  01CD  00B8               	movwf	??_ManageProtocol
 11601  01CE  0838               	movf	??_ManageProtocol,w
 11602  01CF  0023               	movlb	3	; select bank3
 11603  01D0  00A1               	movwf	(_RepBuffer^(0+384)+1)
 11604                           
 11605                           ;sb330_app.c: 152: RepBufferLen = ((UINT8)(2));
 11606  01D1  3002               	movlw	2
 11607  01D2  0020               	movlb	0	; select bank0
 11608  01D3  00B8               	movwf	??_ManageProtocol
 11609  01D4  0838               	movf	??_ManageProtocol,w
 11610  01D5  0021               	movlb	1	; select bank1
 11611  01D6  00B9               	movwf	_RepBufferLen^(0+128)
 11612                           
 11613                           ;sb330_app.c: 154: GenerateEvt(&I2cReplyPacketReady);
 11614  01D7  3077               	movlw	(low (_I2cReplyPacketReady| 0))& (0+255)
 11615  01D8  3188  20F8         	fcall	_GenerateEvt
 11616                           
 11617                           ;sb330_app.c: 155: break;
 11618  01DA  0008               	return
 11619  01DB                     l4597:	
 11620                           ;sb330_app.c: 157: case ((UINT8)(0x61)):
 11621                           
 11622                           
 11623                           ;sb330_app.c: 159: SetBuffer(TemperatureStr,'0',5);
 11624  01DB  3030               	movlw	48
 11625  01DC  0020               	movlb	0	; select bank0
 11626  01DD  00B8               	movwf	??_ManageProtocol
 11627  01DE  0838               	movf	??_ManageProtocol,w
 11628  01DF  00A0               	movwf	SetBuffer@Value
 11629  01E0  3005               	movlw	5
 11630  01E1  00A1               	movwf	SetBuffer@Len
 11631  01E2  3000               	movlw	0
 11632  01E3  00A2               	movwf	SetBuffer@Len+1
 11633  01E4  30D1               	movlw	(low (_TemperatureStr| 0))& (0+255)
 11634  01E5  3188  2059  3181   	fcall	_SetBuffer
 11635                           
 11636                           ;sb330_app.c: 161: itoa(TemperatureIntStr,TemperatureInt,10);
 11637  01E8  0876               	movf	_TemperatureInt,w
 11638  01E9  0020               	movlb	0	; select bank0
 11639  01EA  00B0               	movwf	itoa@val
 11640  01EB  01B1               	clrf	itoa@val+1
 11641  01EC  1BB0               	btfsc	itoa@val,7
 11642  01ED  03B1               	decf	itoa@val+1,f
 11643  01EE  300A               	movlw	10
 11644  01EF  00B2               	movwf	itoa@base
 11645  01F0  3000               	movlw	0
 11646  01F1  00B3               	movwf	itoa@base+1
 11647  01F2  30DF               	movlw	(low (_TemperatureIntStr| 0))& (0+255)
 11648  01F3  3189  213D  3181   	fcall	_itoa
 11649                           
 11650                           ;sb330_app.c: 162: itoa(TemperatureDecStr,TemperatureDec,10);
 11651  01F6  0020               	movlb	0	; select bank0
 11652  01F7  086D               	movf	_TemperatureDec,w
 11653  01F8  00B8               	movwf	??_ManageProtocol
 11654  01F9  01B9               	clrf	??_ManageProtocol+1
 11655  01FA  0838               	movf	??_ManageProtocol,w
 11656  01FB  00B0               	movwf	itoa@val
 11657  01FC  0839               	movf	??_ManageProtocol+1,w
 11658  01FD  00B1               	movwf	itoa@val+1
 11659  01FE  300A               	movlw	10
 11660  01FF  00B2               	movwf	itoa@base
 11661  0200  3000               	movlw	0
 11662  0201  00B3               	movwf	itoa@base+1
 11663  0202  30DC               	movlw	(low (_TemperatureDecStr| 0))& (0+255)
 11664  0203  3189  213D  3181   	fcall	_itoa
 11665                           
 11666                           ;sb330_app.c: 163: strcpy(TemperatureStr,TemperatureIntStr);
 11667  0206  30DF               	movlw	(low (_TemperatureIntStr| 0))& (0+255)
 11668  0207  0020               	movlb	0	; select bank0
 11669  0208  00B8               	movwf	??_ManageProtocol
 11670  0209  0838               	movf	??_ManageProtocol,w
 11671  020A  00F4               	movwf	strcpy@from
 11672  020B  30D1               	movlw	(low (_TemperatureStr| 0))& (0+255)
 11673  020C  3188  2006  3181   	fcall	_strcpy
 11674                           
 11675                           ;sb330_app.c: 164: strcat(TemperatureStr,".");
 11676  020F  3028               	movlw	low (STR_6| (0+32768))
 11677  0210  00F4               	movwf	strcat@from
 11678  0211  3090               	movlw	high (STR_6| (0+32768))
 11679  0212  00F5               	movwf	strcat@from+1
 11680  0213  30D1               	movlw	(low (_TemperatureStr| 0))& (0+255)
 11681  0214  3189  2161  3181   	fcall	_strcat
 11682                           
 11683                           ;sb330_app.c: 165: strcat(TemperatureStr,TemperatureDecStr);
 11684  0217  30DC               	movlw	low _TemperatureDecStr
 11685  0218  00F4               	movwf	strcat@from
 11686  0219  3000               	movlw	high _TemperatureDecStr
 11687  021A  00F5               	movwf	strcat@from+1
 11688  021B  30D1               	movlw	(low (_TemperatureStr| 0))& (0+255)
 11689  021C  3189  2161  3181   	fcall	_strcat
 11690                           
 11691                           ;sb330_app.c: 167: __builtin_memcpy(RepBuffer,TemperatureStr,((UINT8)(5)));
 11692  021F  30A0               	movlw	low (_RepBuffer| (0+256))
 11693  0220  0086               	movwf	6
 11694  0221  3001               	movlw	1	; select bank3/4
 11695  0222  0087               	movwf	7
 11696  0223  30D1               	movlw	low (_TemperatureStr| 0)
 11697  0224  0084               	movwf	4
 11698  0225  0185               	clrf	5
 11699  0226  3005               	movlw	5
 11700  0227  0020               	movlb	0	; select bank0
 11701  0228  00B8               	movwf	??_ManageProtocol
 11702  0229                     u384m0:	
 11703  0229  0012               	moviw fsr0++
 11704  022A  001E               	movwi fsr1++
 11705  022B  0BB8               	decfsz	??_ManageProtocol,f
 11706  022C  2A29               	goto	u384m0
 11707                           
 11708                           ;sb330_app.c: 169: RepBufferLen = ((UINT8)(5));
 11709  022D  3005               	movlw	5
 11710  022E  0020               	movlb	0	; select bank0
 11711  022F  00B8               	movwf	??_ManageProtocol
 11712  0230  0838               	movf	??_ManageProtocol,w
 11713  0231  0021               	movlb	1	; select bank1
 11714  0232  00B9               	movwf	_RepBufferLen^(0+128)
 11715                           
 11716                           ;sb330_app.c: 171: GenerateEvt(&I2cReplyPacketReady);
 11717  0233  3077               	movlw	(low (_I2cReplyPacketReady| 0))& (0+255)
 11718  0234  3188  20F8         	fcall	_GenerateEvt
 11719                           
 11720                           ;sb330_app.c: 172: break;
 11721  0236  0008               	return
 11722  0237                     l4611:	
 11723                           ;sb330_app.c: 174: case ((UINT8)(0x62)):
 11724                           
 11725                           
 11726                           ;sb330_app.c: 176: RepBuffer[((UINT8)(0))] = HumidityInt;
 11727  0237  0020               	movlb	0	; select bank0
 11728  0238  086A               	movf	_HumidityInt,w
 11729  0239  00B8               	movwf	??_ManageProtocol
 11730  023A  0838               	movf	??_ManageProtocol,w
 11731  023B  0023               	movlb	3	; select bank3
 11732  023C  00A0               	movwf	_RepBuffer^(0+384)
 11733                           
 11734                           ;sb330_app.c: 177: RepBuffer[((UINT8)(1))] = HumidityDec;
 11735  023D  0020               	movlb	0	; select bank0
 11736  023E  0869               	movf	_HumidityDec,w
 11737  023F  00B8               	movwf	??_ManageProtocol
 11738  0240  0838               	movf	??_ManageProtocol,w
 11739  0241  0023               	movlb	3	; select bank3
 11740  0242  00A1               	movwf	(_RepBuffer^(0+384)+1)
 11741                           
 11742                           ;sb330_app.c: 179: RepBufferLen = ((UINT8)(2));
 11743  0243  3002               	movlw	2
 11744  0244  0020               	movlb	0	; select bank0
 11745  0245  00B8               	movwf	??_ManageProtocol
 11746  0246  0838               	movf	??_ManageProtocol,w
 11747  0247  0021               	movlb	1	; select bank1
 11748  0248  00B9               	movwf	_RepBufferLen^(0+128)
 11749                           
 11750                           ;sb330_app.c: 181: GenerateEvt(&I2cReplyPacketReady);
 11751  0249  3077               	movlw	(low (_I2cReplyPacketReady| 0))& (0+255)
 11752  024A  3188  20F8         	fcall	_GenerateEvt
 11753                           
 11754                           ;sb330_app.c: 182: break;
 11755  024C  0008               	return
 11756  024D                     l4615:	
 11757                           ;sb330_app.c: 184: case ((UINT8)(0x63)):
 11758                           
 11759                           
 11760                           ;sb330_app.c: 186: SetBuffer(HumidityStr,'0',5);
 11761  024D  3030               	movlw	48
 11762  024E  0020               	movlb	0	; select bank0
 11763  024F  00B8               	movwf	??_ManageProtocol
 11764  0250  0838               	movf	??_ManageProtocol,w
 11765  0251  00A0               	movwf	SetBuffer@Value
 11766  0252  3005               	movlw	5
 11767  0253  00A1               	movwf	SetBuffer@Len
 11768  0254  3000               	movlw	0
 11769  0255  00A2               	movwf	SetBuffer@Len+1
 11770  0256  30CC               	movlw	(low (_HumidityStr| 0))& (0+255)
 11771  0257  3188  2059  3181   	fcall	_SetBuffer
 11772                           
 11773                           ;sb330_app.c: 188: itoa(HumidityIntStr,HumidityInt,10);
 11774  025A  0020               	movlb	0	; select bank0
 11775  025B  086A               	movf	_HumidityInt,w
 11776  025C  00B8               	movwf	??_ManageProtocol
 11777  025D  01B9               	clrf	??_ManageProtocol+1
 11778  025E  0838               	movf	??_ManageProtocol,w
 11779  025F  00B0               	movwf	itoa@val
 11780  0260  0839               	movf	??_ManageProtocol+1,w
 11781  0261  00B1               	movwf	itoa@val+1
 11782  0262  300A               	movlw	10
 11783  0263  00B2               	movwf	itoa@base
 11784  0264  3000               	movlw	0
 11785  0265  00B3               	movwf	itoa@base+1
 11786  0266  30D9               	movlw	(low (_HumidityIntStr| 0))& (0+255)
 11787  0267  3189  213D  3181   	fcall	_itoa
 11788                           
 11789                           ;sb330_app.c: 189: itoa(HumidityDecStr,HumidityDec,10);
 11790  026A  0020               	movlb	0	; select bank0
 11791  026B  0869               	movf	_HumidityDec,w
 11792  026C  00B8               	movwf	??_ManageProtocol
 11793  026D  01B9               	clrf	??_ManageProtocol+1
 11794  026E  0838               	movf	??_ManageProtocol,w
 11795  026F  00B0               	movwf	itoa@val
 11796  0270  0839               	movf	??_ManageProtocol+1,w
 11797  0271  00B1               	movwf	itoa@val+1
 11798  0272  300A               	movlw	10
 11799  0273  00B2               	movwf	itoa@base
 11800  0274  3000               	movlw	0
 11801  0275  00B3               	movwf	itoa@base+1
 11802  0276  30D6               	movlw	(low (_HumidityDecStr| 0))& (0+255)
 11803  0277  3189  213D  3181   	fcall	_itoa
 11804                           
 11805                           ;sb330_app.c: 190: strcpy(HumidityStr,HumidityIntStr);
 11806  027A  30D9               	movlw	(low (_HumidityIntStr| 0))& (0+255)
 11807  027B  0020               	movlb	0	; select bank0
 11808  027C  00B8               	movwf	??_ManageProtocol
 11809  027D  0838               	movf	??_ManageProtocol,w
 11810  027E  00F4               	movwf	strcpy@from
 11811  027F  30CC               	movlw	(low (_HumidityStr| 0))& (0+255)
 11812  0280  3188  2006  3181   	fcall	_strcpy
 11813                           
 11814                           ;sb330_app.c: 191: strcat(HumidityStr,".");
 11815  0283  3028               	movlw	low (STR_6| (0+32768))
 11816  0284  00F4               	movwf	strcat@from
 11817  0285  3090               	movlw	high (STR_6| (0+32768))
 11818  0286  00F5               	movwf	strcat@from+1
 11819  0287  30CC               	movlw	(low (_HumidityStr| 0))& (0+255)
 11820  0288  3189  2161  3181   	fcall	_strcat
 11821                           
 11822                           ;sb330_app.c: 192: strcat(HumidityStr,HumidityDecStr);
 11823  028B  30D6               	movlw	low _HumidityDecStr
 11824  028C  00F4               	movwf	strcat@from
 11825  028D  3000               	movlw	high _HumidityDecStr
 11826  028E  00F5               	movwf	strcat@from+1
 11827  028F  30CC               	movlw	(low (_HumidityStr| 0))& (0+255)
 11828  0290  3189  2161  3181   	fcall	_strcat
 11829                           
 11830                           ;sb330_app.c: 194: __builtin_memcpy(RepBuffer,HumidityStr,((UINT8)(4)));
 11831  0293  30A0               	movlw	low (_RepBuffer| (0+256))
 11832  0294  0086               	movwf	6
 11833  0295  3001               	movlw	1	; select bank3/4
 11834  0296  0087               	movwf	7
 11835  0297  30CC               	movlw	low (_HumidityStr| 0)
 11836  0298  0084               	movwf	4
 11837  0299  0185               	clrf	5
 11838  029A  3004               	movlw	4
 11839  029B  0020               	movlb	0	; select bank0
 11840  029C  00B8               	movwf	??_ManageProtocol
 11841  029D                     u385m0:	
 11842  029D  0012               	moviw fsr0++
 11843  029E  001E               	movwi fsr1++
 11844  029F  0BB8               	decfsz	??_ManageProtocol,f
 11845  02A0  2A9D               	goto	u385m0
 11846                           
 11847                           ;sb330_app.c: 196: RepBufferLen = ((UINT8)(4));
 11848  02A1  3004               	movlw	4
 11849  02A2  0020               	movlb	0	; select bank0
 11850  02A3  00B8               	movwf	??_ManageProtocol
 11851  02A4  0838               	movf	??_ManageProtocol,w
 11852  02A5  0021               	movlb	1	; select bank1
 11853  02A6  00B9               	movwf	_RepBufferLen^(0+128)
 11854                           
 11855                           ;sb330_app.c: 198: GenerateEvt(&I2cReplyPacketReady);
 11856  02A7  3077               	movlw	(low (_I2cReplyPacketReady| 0))& (0+255)
 11857  02A8  3188  20F8         	fcall	_GenerateEvt
 11858                           
 11859                           ;sb330_app.c: 199: break;
 11860  02AA  0008               	return
 11861  02AB                     l4629:	
 11862                           ;sb330_app.c: 201: case ((UINT8)(0x64)):
 11863                           
 11864                           
 11865                           ;sb330_app.c: 203: RepBuffer[((UINT8)(0))] = ChecksumSts;
 11866  02AB  0021               	movlb	1	; select bank1
 11867  02AC  0838               	movf	_ChecksumSts^(0+128),w
 11868  02AD  0020               	movlb	0	; select bank0
 11869  02AE  00B8               	movwf	??_ManageProtocol
 11870  02AF  0838               	movf	??_ManageProtocol,w
 11871  02B0  0023               	movlb	3	; select bank3
 11872  02B1  00A0               	movwf	_RepBuffer^(0+384)
 11873                           
 11874                           ;sb330_app.c: 205: RepBufferLen = ((UINT8)(1));
 11875  02B2  0021               	movlb	1	; select bank1
 11876  02B3  01B9               	clrf	_RepBufferLen^(0+128)
 11877  02B4  0AB9               	incf	_RepBufferLen^(0+128),f
 11878                           
 11879                           ;sb330_app.c: 207: GenerateEvt(&I2cReplyPacketReady);
 11880  02B5  3077               	movlw	(low (_I2cReplyPacketReady| 0))& (0+255)
 11881  02B6  3188  20F8         	fcall	_GenerateEvt
 11882                           
 11883                           ;sb330_app.c: 212: }
 11884                           
 11885                           ;sb330_app.c: 211: break;
 11886                           
 11887                           ;sb330_app.c: 210: default:
 11888                           
 11889                           ;sb330_app.c: 208: break;
 11890  02B8  0008               	return
 11891  02B9                     l4637:	
 11892  02B9  0024               	movlb	4	; select bank4
 11893  02BA  0820               	movf	_CmdBuffer^(0+512),w
 11894                           
 11895                           ; Switch size 1, requested type "space"
 11896                           ; Number of cases is 5, Range of values is 96 to 100
 11897                           ; switch strategies available:
 11898                           ; Name         Instructions Cycles
 11899                           ; simple_byte           16     9 (average)
 11900                           ; direct_byte           19     9 (fixed)
 11901                           ; jumptable            263     9 (fixed)
 11902                           ;	Chosen strategy is simple_byte
 11903  02BB  3A60               	xorlw	96	; case 96
 11904  02BC  1903               	skipnz
 11905  02BD  29C5               	goto	l4593
 11906  02BE  3A01               	xorlw	1	; case 97
 11907  02BF  1903               	skipnz
 11908  02C0  29DB               	goto	l4597
 11909  02C1  3A03               	xorlw	3	; case 98
 11910  02C2  1903               	skipnz
 11911  02C3  2A37               	goto	l4611
 11912  02C4  3A01               	xorlw	1	; case 99
 11913  02C5  1903               	skipnz
 11914  02C6  2A4D               	goto	l4615
 11915  02C7  3A07               	xorlw	7	; case 100
 11916  02C8  1903               	skipnz
 11917  02C9  2AAB               	goto	l4629
 11918  02CA  2ACC               	goto	l942
 11919  02CB  0008               	return
 11920  02CC                     l942:	
 11921  02CC  0008               	return
 11922  02CD                     __end_of_ManageProtocol:	
 11923                           
 11924                           	psect	text53
 11925  0806                     __ptext53:	
 11926 ;; *************** function _strcpy *****************
 11927 ;; Defined at:
 11928 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\strcpy.c"
 11929 ;; Parameters:    Size  Location     Type
 11930 ;;  to              1    wreg     PTR unsigned char 
 11931 ;;		 -> HumidityStr(5), TemperatureStr(5), 
 11932 ;;  from            1    4[COMMON] PTR const unsigned char 
 11933 ;;		 -> HumidityIntStr(3), TemperatureIntStr(3), 
 11934 ;; Auto vars:     Size  Location     Type
 11935 ;;  to              1    1[BANK0 ] PTR unsigned char 
 11936 ;;		 -> HumidityStr(5), TemperatureStr(5), 
 11937 ;;  cp              1    0[BANK0 ] PTR unsigned char 
 11938 ;;		 -> HumidityStr(5), TemperatureStr(5), 
 11939 ;; Return value:  Size  Location     Type
 11940 ;;                  1    wreg      PTR unsigned char 
 11941 ;; Registers used:
 11942 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0
 11943 ;; Tracked objects:
 11944 ;;		On entry : 0/0
 11945 ;;		On exit  : 0/0
 11946 ;;		Unchanged: 0/0
 11947 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11948 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11949 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11950 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11951 ;;      Totals:         2       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11952 ;;Total ram usage:        4 bytes
 11953 ;; Hardware stack levels used:    1
 11954 ;; Hardware stack levels required when called:    2
 11955 ;; This function calls:
 11956 ;;		Nothing
 11957 ;; This function is called by:
 11958 ;;		_ManageProtocol
 11959 ;; This function uses a non-reentrant model
 11960 ;;
 11961                           
 11962                           
 11963                           ;psect for function _strcpy
 11964  0806                     _strcpy:	
 11965                           
 11966                           ;incstack = 0
 11967                           ; Regs used in _strcpy: [wreg-fsr1h+status,2+status,0]
 11968                           ;strcpy@to stored from wreg
 11969  0806  0020               	movlb	0	; select bank0
 11970  0807  00A1               	movwf	strcpy@to
 11971  0808  0821               	movf	strcpy@to,w
 11972  0809  00F5               	movwf	??_strcpy
 11973  080A  0875               	movf	??_strcpy,w
 11974  080B  00A0               	movwf	strcpy@cp
 11975  080C                     l4449:	
 11976  080C  0820               	movf	strcpy@cp,w
 11977  080D  0086               	movwf	6
 11978  080E  0187               	clrf	7
 11979  080F  0874               	movf	strcpy@from,w
 11980  0810  0084               	movwf	4
 11981  0811  0185               	clrf	5
 11982  0812  0800               	movf	0,w
 11983  0813  3FC0               	movwi [0]fsr1
 11984  0814  0889               	movf	9,f
 11985  0815  1903               	btfsc	3,2
 11986  0816  0008               	return
 11987  0817  3001               	movlw	1
 11988  0818  00F5               	movwf	??_strcpy
 11989  0819  0875               	movf	??_strcpy,w
 11990  081A  07A0               	addwf	strcpy@cp,f
 11991  081B  3001               	movlw	1
 11992  081C  00F5               	movwf	??_strcpy
 11993  081D  0875               	movf	??_strcpy,w
 11994  081E  07F4               	addwf	strcpy@from,f
 11995  081F  280C               	goto	l4449
 11996  0820                     __end_of_strcpy:	
 11997                           ;	Return value of _strcpy is never used
 11998                           
 11999                           
 12000                           	psect	text54
 12001  0961                     __ptext54:	
 12002 ;; *************** function _strcat *****************
 12003 ;; Defined at:
 12004 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\strcat.c"
 12005 ;; Parameters:    Size  Location     Type
 12006 ;;  to              1    wreg     PTR unsigned char 
 12007 ;;		 -> HumidityStr(5), TemperatureStr(5), 
 12008 ;;  from            2    4[COMMON] PTR const unsigned char 
 12009 ;;		 -> STR_7(2), HumidityDecStr(3), STR_6(2), TemperatureDecStr(3), 
 12010 ;; Auto vars:     Size  Location     Type
 12011 ;;  to              1    1[BANK0 ] PTR unsigned char 
 12012 ;;		 -> HumidityStr(5), TemperatureStr(5), 
 12013 ;;  cp              1    2[BANK0 ] PTR unsigned char 
 12014 ;;		 -> HumidityStr(5), TemperatureStr(5), 
 12015 ;; Return value:  Size  Location     Type
 12016 ;;                  1    wreg      PTR unsigned char 
 12017 ;; Registers used:
 12018 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath
 12019 ;; Tracked objects:
 12020 ;;		On entry : 0/0
 12021 ;;		On exit  : 0/0
 12022 ;;		Unchanged: 0/0
 12023 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12024 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12025 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12026 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12027 ;;      Totals:         2       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12028 ;;Total ram usage:        5 bytes
 12029 ;; Hardware stack levels used:    1
 12030 ;; Hardware stack levels required when called:    2
 12031 ;; This function calls:
 12032 ;;		Nothing
 12033 ;; This function is called by:
 12034 ;;		_ManageProtocol
 12035 ;; This function uses a non-reentrant model
 12036 ;;
 12037                           
 12038                           
 12039                           ;psect for function _strcat
 12040  0961                     _strcat:	
 12041                           
 12042                           ;incstack = 0
 12043                           ; Regs used in _strcat: [wreg-fsr1h+status,2+status,0+pclath]
 12044                           ;strcat@to stored from wreg
 12045  0961  0020               	movlb	0	; select bank0
 12046  0962  00A1               	movwf	strcat@to
 12047  0963  0821               	movf	strcat@to,w
 12048  0964  00A0               	movwf	??_strcat
 12049  0965  0820               	movf	??_strcat,w
 12050  0966  00A2               	movwf	strcat@cp
 12051  0967                     l4455:	
 12052  0967  0822               	movf	strcat@cp,w
 12053  0968  0086               	movwf	6
 12054  0969  0187               	clrf	7
 12055  096A  0801               	movf	1,w
 12056  096B  1903               	btfsc	3,2
 12057  096C  297A               	goto	l4461
 12058  096D  3001               	movlw	1
 12059  096E  00A0               	movwf	??_strcat
 12060  096F  0820               	movf	??_strcat,w
 12061  0970  07A2               	addwf	strcat@cp,f
 12062  0971  2967               	goto	l4455
 12063  0972                     l4457:	
 12064  0972  3001               	movlw	1
 12065  0973  00A0               	movwf	??_strcat
 12066  0974  0820               	movf	??_strcat,w
 12067  0975  07A2               	addwf	strcat@cp,f
 12068  0976  3001               	movlw	1
 12069  0977  07F4               	addwf	strcat@from,f
 12070  0978  3000               	movlw	0
 12071  0979  3DF5               	addwfc	strcat@from+1,f
 12072  097A                     l4461:	
 12073  097A  0822               	movf	strcat@cp,w
 12074  097B  0086               	movwf	6
 12075  097C  0187               	clrf	7
 12076  097D  0874               	movf	strcat@from,w
 12077  097E  0084               	movwf	4
 12078  097F  0875               	movf	strcat@from+1,w
 12079  0980  0085               	movwf	5
 12080  0981  0800               	movf	0,w	;code access
 12081  0982  3FC0               	movwi [0]fsr1
 12082  0983  0889               	movf	9,f
 12083  0984  1903               	btfsc	3,2
 12084  0985  0008               	return
 12085  0986  2972               	goto	l4457
 12086  0987                     __end_of_strcat:	
 12087                           ;	Return value of _strcat is never used
 12088                           
 12089                           
 12090                           	psect	text55
 12091  093D                     __ptext55:	
 12092 ;; *************** function _itoa *****************
 12093 ;; Defined at:
 12094 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\itoa.c"
 12095 ;; Parameters:    Size  Location     Type
 12096 ;;  buf             1    wreg     PTR unsigned char 
 12097 ;;		 -> HumidityDecStr(3), HumidityIntStr(3), TemperatureDecStr(3), TemperatureIntStr(3), 
 12098 ;;  val             2   16[BANK0 ] int 
 12099 ;;  base            2   18[BANK0 ] int 
 12100 ;; Auto vars:     Size  Location     Type
 12101 ;;  buf             1   22[BANK0 ] PTR unsigned char 
 12102 ;;		 -> HumidityDecStr(3), HumidityIntStr(3), TemperatureDecStr(3), TemperatureIntStr(3), 
 12103 ;;  cp              1   21[BANK0 ] PTR unsigned char 
 12104 ;;		 -> HumidityDecStr(3), HumidityIntStr(3), TemperatureDecStr(3), TemperatureIntStr(3), 
 12105 ;; Return value:  Size  Location     Type
 12106 ;;                  1    wreg      PTR unsigned char 
 12107 ;; Registers used:
 12108 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12109 ;; Tracked objects:
 12110 ;;		On entry : 0/0
 12111 ;;		On exit  : 0/0
 12112 ;;		Unchanged: 0/0
 12113 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12114 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12115 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12116 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12117 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12118 ;;Total ram usage:        7 bytes
 12119 ;; Hardware stack levels used:    1
 12120 ;; Hardware stack levels required when called:    4
 12121 ;; This function calls:
 12122 ;;		_utoa
 12123 ;; This function is called by:
 12124 ;;		_ManageProtocol
 12125 ;; This function uses a non-reentrant model
 12126 ;;
 12127                           
 12128                           
 12129                           ;psect for function _itoa
 12130  093D                     _itoa:	
 12131                           
 12132                           ;incstack = 0
 12133                           ; Regs used in _itoa: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 12134                           ;itoa@buf stored from wreg
 12135  093D  0020               	movlb	0	; select bank0
 12136  093E  00B6               	movwf	itoa@buf
 12137  093F  0836               	movf	itoa@buf,w
 12138  0940  00B4               	movwf	??_itoa
 12139  0941  0834               	movf	??_itoa,w
 12140  0942  00B5               	movwf	itoa@cp
 12141  0943  1FB1               	btfss	itoa@val+1,7
 12142  0944  2955               	goto	l4441
 12143  0945  302D               	movlw	45
 12144  0946  00B4               	movwf	??_itoa
 12145  0947  0836               	movf	itoa@buf,w
 12146  0948  0086               	movwf	6
 12147  0949  0187               	clrf	7
 12148  094A  0834               	movf	??_itoa,w
 12149  094B  0081               	movwf	1
 12150  094C  3001               	movlw	1
 12151  094D  00B4               	movwf	??_itoa
 12152  094E  0834               	movf	??_itoa,w
 12153  094F  07B6               	addwf	itoa@buf,f
 12154  0950  09B0               	comf	itoa@val,f
 12155  0951  09B1               	comf	itoa@val+1,f
 12156  0952  0AB0               	incf	itoa@val,f
 12157  0953  1903               	skipnz
 12158  0954  0AB1               	incf	itoa@val+1,f
 12159  0955                     l4441:	
 12160  0955  0831               	movf	itoa@val+1,w
 12161  0956  00A8               	movwf	utoa@val+1
 12162  0957  0830               	movf	itoa@val,w
 12163  0958  00A7               	movwf	utoa@val
 12164  0959  0833               	movf	itoa@base+1,w
 12165  095A  00AA               	movwf	utoa@base+1
 12166  095B  0832               	movf	itoa@base,w
 12167  095C  00A9               	movwf	utoa@base
 12168  095D  0836               	movf	itoa@buf,w
 12169  095E  318D  258D         	fcall	_utoa
 12170  0960  0008               	return
 12171  0961                     __end_of_itoa:	
 12172                           ;	Return value of _itoa is never used
 12173                           
 12174                           
 12175                           	psect	text56
 12176  03CA                     __ptext56:	
 12177 ;; *************** function _StdS_ManageStdServices *****************
 12178 ;; Defined at:
 12179 ;;		line 212 in file "../../../Framework/MercuryFwk/Source/c/03_Sml/02_Ssl/std_ser.c"
 12180 ;; Parameters:    Size  Location     Type
 12181 ;;		None
 12182 ;; Auto vars:     Size  Location     Type
 12183 ;;  DieTempStr      4   18[BANK0 ] unsigned char [4]
 12184 ;;  DieTemp         2   22[BANK0 ] unsigned short 
 12185 ;; Return value:  Size  Location     Type
 12186 ;;                  1    wreg      void 
 12187 ;; Registers used:
 12188 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12189 ;; Tracked objects:
 12190 ;;		On entry : 0/0
 12191 ;;		On exit  : 0/0
 12192 ;;		Unchanged: 0/0
 12193 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12194 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12195 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12196 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12197 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12198 ;;Total ram usage:        8 bytes
 12199 ;; Hardware stack levels used:    1
 12200 ;; Hardware stack levels required when called:    4
 12201 ;; This function calls:
 12202 ;;		_BoardReset
 12203 ;;		_ControlLedDirect
 12204 ;;		_GenerateEvt
 12205 ;;		_GetDieTemperature
 12206 ;;		_LowPowerMode
 12207 ;;		_SetLedBehavSts
 12208 ;;		_StringCopy
 12209 ;;		_utoa
 12210 ;; This function is called by:
 12211 ;;		_ManageProtocol
 12212 ;; This function uses a non-reentrant model
 12213 ;;
 12214                           
 12215                           
 12216                           ;psect for function _StdS_ManageStdServices
 12217  03CA                     _StdS_ManageStdServices:	
 12218                           
 12219                           ;std_ser.c: 214: UINT16 DieTemp;
 12220                           ;std_ser.c: 215: UINT8 DieTempStr[4];
 12221                           ;std_ser.c: 218: switch (CmdBuffer[((UINT8)(0))])
 12222                           
 12223                           ;incstack = 0
 12224                           ; Regs used in _StdS_ManageStdServices: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 12225  03CA  2C9C               	goto	l4429
 12226  03CB                     l4373:	
 12227                           ;std_ser.c: 219: {
 12228                           ;std_ser.c: 220: case ((UINT8)(0x10)):
 12229                           
 12230                           
 12231                           ;std_ser.c: 222: StringCopy((void*)("ECHO"),RepBuffer,((UINT8)(4)));
 12232  03CB  3023               	movlw	low (STR_2| (0+32768))
 12233  03CC  0020               	movlb	0	; select bank0
 12234  03CD  00A0               	movwf	StringCopy@SourceStr
 12235  03CE  3090               	movlw	high (STR_2| (0+32768))
 12236  03CF  00A1               	movwf	StringCopy@SourceStr+1
 12237  03D0  30A0               	movlw	(low (_RepBuffer| (0+256)))& (0+255)
 12238  03D1  00B0               	movwf	??_StdS_ManageStdServices
 12239  03D2  0830               	movf	??_StdS_ManageStdServices,w
 12240  03D3  00A2               	movwf	StringCopy@DestStr
 12241  03D4  3004               	movlw	4
 12242  03D5  00B1               	movwf	??_StdS_ManageStdServices+1
 12243  03D6  0831               	movf	??_StdS_ManageStdServices+1,w
 12244  03D7  00A3               	movwf	StringCopy@Len
 12245  03D8  3189  211A  3183   	fcall	_StringCopy
 12246                           
 12247                           ;std_ser.c: 224: RepBufferLen = ((UINT8)(4));
 12248  03DB  3004               	movlw	4
 12249  03DC  0020               	movlb	0	; select bank0
 12250  03DD  00B0               	movwf	??_StdS_ManageStdServices
 12251  03DE  0830               	movf	??_StdS_ManageStdServices,w
 12252  03DF  0021               	movlb	1	; select bank1
 12253  03E0  00B9               	movwf	_RepBufferLen^(0+128)
 12254                           
 12255                           ;std_ser.c: 226: GenerateEvt(&I2cReplyPacketReady);
 12256  03E1  3077               	movlw	(low (_I2cReplyPacketReady| 0))& (0+255)
 12257  03E2  3188  20F8         	fcall	_GenerateEvt
 12258                           
 12259                           ;std_ser.c: 227: break;
 12260  03E4  0008               	return
 12261  03E5                     l4379:	
 12262                           ;std_ser.c: 229: case ((UINT8)(0x20)):
 12263                           
 12264                           
 12265                           ;std_ser.c: 231: StringCopy((void*)"SB330",RepBuffer,((UINT8)(5)));
 12266  03E5  301D               	movlw	low (STR_3| (0+32768))
 12267  03E6  0020               	movlb	0	; select bank0
 12268  03E7  00A0               	movwf	StringCopy@SourceStr
 12269  03E8  3090               	movlw	high (STR_3| (0+32768))
 12270  03E9  00A1               	movwf	StringCopy@SourceStr+1
 12271  03EA  30A0               	movlw	(low (_RepBuffer| (0+256)))& (0+255)
 12272  03EB  00B0               	movwf	??_StdS_ManageStdServices
 12273  03EC  0830               	movf	??_StdS_ManageStdServices,w
 12274  03ED  00A2               	movwf	StringCopy@DestStr
 12275  03EE  3005               	movlw	5
 12276  03EF  00B1               	movwf	??_StdS_ManageStdServices+1
 12277  03F0  0831               	movf	??_StdS_ManageStdServices+1,w
 12278  03F1  00A3               	movwf	StringCopy@Len
 12279  03F2  3189  211A  3183   	fcall	_StringCopy
 12280                           
 12281                           ;std_ser.c: 233: RepBufferLen = ((UINT8)(5));
 12282  03F5  3005               	movlw	5
 12283  03F6  0020               	movlb	0	; select bank0
 12284  03F7  00B0               	movwf	??_StdS_ManageStdServices
 12285  03F8  0830               	movf	??_StdS_ManageStdServices,w
 12286  03F9  0021               	movlb	1	; select bank1
 12287  03FA  00B9               	movwf	_RepBufferLen^(0+128)
 12288                           
 12289                           ;std_ser.c: 235: GenerateEvt(&I2cReplyPacketReady);
 12290  03FB  3077               	movlw	(low (_I2cReplyPacketReady| 0))& (0+255)
 12291  03FC  3188  20F8         	fcall	_GenerateEvt
 12292                           
 12293                           ;std_ser.c: 236: break;
 12294  03FE  0008               	return
 12295  03FF                     l4385:	
 12296                           ;std_ser.c: 238: case ((UINT8)(0x21)):
 12297                           
 12298                           
 12299                           ;std_ser.c: 240: StringCopy((void*)"01.01.00",RepBuffer,((UINT8)(8)));
 12300  03FF  300C               	movlw	low (STR_4| (0+32768))
 12301  0400  0020               	movlb	0	; select bank0
 12302  0401  00A0               	movwf	StringCopy@SourceStr
 12303  0402  3090               	movlw	high (STR_4| (0+32768))
 12304  0403  00A1               	movwf	StringCopy@SourceStr+1
 12305  0404  30A0               	movlw	(low (_RepBuffer| (0+256)))& (0+255)
 12306  0405  00B0               	movwf	??_StdS_ManageStdServices
 12307  0406  0830               	movf	??_StdS_ManageStdServices,w
 12308  0407  00A2               	movwf	StringCopy@DestStr
 12309  0408  3008               	movlw	8
 12310  0409  00B1               	movwf	??_StdS_ManageStdServices+1
 12311  040A  0831               	movf	??_StdS_ManageStdServices+1,w
 12312  040B  00A3               	movwf	StringCopy@Len
 12313  040C  3189  211A  3183   	fcall	_StringCopy
 12314                           
 12315                           ;std_ser.c: 242: RepBufferLen = ((UINT8)(8));
 12316  040F  3008               	movlw	8
 12317  0410  0020               	movlb	0	; select bank0
 12318  0411  00B0               	movwf	??_StdS_ManageStdServices
 12319  0412  0830               	movf	??_StdS_ManageStdServices,w
 12320  0413  0021               	movlb	1	; select bank1
 12321  0414  00B9               	movwf	_RepBufferLen^(0+128)
 12322                           
 12323                           ;std_ser.c: 244: GenerateEvt(&I2cReplyPacketReady);
 12324  0415  3077               	movlw	(low (_I2cReplyPacketReady| 0))& (0+255)
 12325  0416  3188  20F8         	fcall	_GenerateEvt
 12326                           
 12327                           ;std_ser.c: 245: break;
 12328  0418  0008               	return
 12329  0419                     l4391:	
 12330                           ;std_ser.c: 247: case ((UINT8)(0x22)):
 12331                           
 12332                           
 12333                           ;std_ser.c: 249: StringCopy((void*)"01.01.00",RepBuffer,((UINT8)(8)));
 12334  0419  300C               	movlw	low (STR_4| (0+32768))
 12335  041A  0020               	movlb	0	; select bank0
 12336  041B  00A0               	movwf	StringCopy@SourceStr
 12337  041C  3090               	movlw	high (STR_4| (0+32768))
 12338  041D  00A1               	movwf	StringCopy@SourceStr+1
 12339  041E  30A0               	movlw	(low (_RepBuffer| (0+256)))& (0+255)
 12340  041F  00B0               	movwf	??_StdS_ManageStdServices
 12341  0420  0830               	movf	??_StdS_ManageStdServices,w
 12342  0421  00A2               	movwf	StringCopy@DestStr
 12343  0422  3008               	movlw	8
 12344  0423  00B1               	movwf	??_StdS_ManageStdServices+1
 12345  0424  0831               	movf	??_StdS_ManageStdServices+1,w
 12346  0425  00A3               	movwf	StringCopy@Len
 12347  0426  3189  211A  3183   	fcall	_StringCopy
 12348                           
 12349                           ;std_ser.c: 251: RepBufferLen = ((UINT8)(8));
 12350  0429  3008               	movlw	8
 12351  042A  0020               	movlb	0	; select bank0
 12352  042B  00B0               	movwf	??_StdS_ManageStdServices
 12353  042C  0830               	movf	??_StdS_ManageStdServices,w
 12354  042D  0021               	movlb	1	; select bank1
 12355  042E  00B9               	movwf	_RepBufferLen^(0+128)
 12356                           
 12357                           ;std_ser.c: 253: GenerateEvt(&I2cReplyPacketReady);
 12358  042F  3077               	movlw	(low (_I2cReplyPacketReady| 0))& (0+255)
 12359  0430  3188  20F8         	fcall	_GenerateEvt
 12360                           
 12361                           ;std_ser.c: 255: break;
 12362  0432  0008               	return
 12363  0433                     l4397:	
 12364                           ;std_ser.c: 257: case ((UINT8)(0x30)):
 12365                           
 12366                           
 12367                           ;std_ser.c: 259: BoardReset();
 12368  0433  3196  2637         	fcall	_BoardReset
 12369                           
 12370                           ;std_ser.c: 260: break;
 12371  0435  0008               	return
 12372  0436                     l4399:	
 12373                           ;std_ser.c: 262: case ((UINT8)(0x31)):
 12374                           
 12375                           
 12376                           ;std_ser.c: 264: LowPowerMode();
 12377  0436  3196  26CA         	fcall	_LowPowerMode
 12378                           
 12379                           ;std_ser.c: 265: break;
 12380  0438  0008               	return
 12381  0439                     l4401:	
 12382                           ;std_ser.c: 267: case ((UINT8)(0x41)):
 12383                           
 12384                           
 12385                           ;std_ser.c: 269: SetLedBehavSts(CmdBuffer[((UINT8)(1))]);
 12386  0439  0024               	movlb	4	; select bank4
 12387  043A  0821               	movf	(_CmdBuffer^(0+512)+1),w
 12388  043B  318B  23C7         	fcall	_SetLedBehavSts
 12389                           
 12390                           ;std_ser.c: 270: break;
 12391  043D  0008               	return
 12392  043E                     l4403:	
 12393                           ;std_ser.c: 272: case ((UINT8)(0x42)):
 12394                           
 12395                           
 12396                           ;std_ser.c: 274: ControlLedDirect();
 12397  043E  3197  2738         	fcall	_ControlLedDirect
 12398                           
 12399                           ;std_ser.c: 275: break;
 12400  0440  0008               	return
 12401  0441                     l4405:	
 12402                           ;std_ser.c: 277: case ((UINT8)(0x45)):
 12403                           
 12404                           
 12405                           ;std_ser.c: 279: DieTemp = GetDieTemperature();
 12406  0441  3197  27CE  3183   	fcall	_GetDieTemperature
 12407  0444  0020               	movlb	0	; select bank0
 12408  0445  0824               	movf	?_GetDieTemperature+1,w
 12409  0446  00B7               	movwf	StdS_ManageStdServices@DieTemp+1
 12410  0447  0823               	movf	?_GetDieTemperature,w
 12411  0448  00B6               	movwf	StdS_ManageStdServices@DieTemp
 12412                           
 12413                           ;std_ser.c: 281: RepBuffer[0] = ((DieTemp & 0xFF00) >> 8);
 12414  0449  0837               	movf	StdS_ManageStdServices@DieTemp+1,w
 12415  044A  00B0               	movwf	??_StdS_ManageStdServices
 12416  044B  0830               	movf	??_StdS_ManageStdServices,w
 12417  044C  0023               	movlb	3	; select bank3
 12418  044D  00A0               	movwf	_RepBuffer^(0+384)
 12419                           
 12420                           ;std_ser.c: 282: RepBuffer[1] = (DieTemp & 0x00FF);
 12421  044E  0020               	movlb	0	; select bank0
 12422  044F  0836               	movf	StdS_ManageStdServices@DieTemp,w
 12423  0450  00B0               	movwf	??_StdS_ManageStdServices
 12424  0451  0830               	movf	??_StdS_ManageStdServices,w
 12425  0452  0023               	movlb	3	; select bank3
 12426  0453  00A1               	movwf	(_RepBuffer^(0+384)+1)
 12427                           
 12428                           ;std_ser.c: 284: RepBufferLen = ((UINT8)(2));
 12429  0454  3002               	movlw	2
 12430  0455  0020               	movlb	0	; select bank0
 12431  0456  00B0               	movwf	??_StdS_ManageStdServices
 12432  0457  0830               	movf	??_StdS_ManageStdServices,w
 12433  0458  0021               	movlb	1	; select bank1
 12434  0459  00B9               	movwf	_RepBufferLen^(0+128)
 12435                           
 12436                           ;std_ser.c: 286: GenerateEvt(&I2cReplyPacketReady);
 12437  045A  3077               	movlw	(low (_I2cReplyPacketReady| 0))& (0+255)
 12438  045B  3188  20F8         	fcall	_GenerateEvt
 12439                           
 12440                           ;std_ser.c: 287: break;
 12441  045D  0008               	return
 12442  045E                     l4415:	
 12443                           ;std_ser.c: 289: case ((UINT8)(0x46)):
 12444                           
 12445                           
 12446                           ;std_ser.c: 291: DieTemp = GetDieTemperature();
 12447  045E  3197  27CE  3183   	fcall	_GetDieTemperature
 12448  0461  0020               	movlb	0	; select bank0
 12449  0462  0824               	movf	?_GetDieTemperature+1,w
 12450  0463  00B7               	movwf	StdS_ManageStdServices@DieTemp+1
 12451  0464  0823               	movf	?_GetDieTemperature,w
 12452  0465  00B6               	movwf	StdS_ManageStdServices@DieTemp
 12453                           
 12454                           ;std_ser.c: 293: DieTemp = (DieTemp/8) - 40;
 12455  0466  0837               	movf	StdS_ManageStdServices@DieTemp+1,w
 12456  0467  00B1               	movwf	??_StdS_ManageStdServices+1
 12457  0468  0836               	movf	StdS_ManageStdServices@DieTemp,w
 12458  0469  00B0               	movwf	??_StdS_ManageStdServices
 12459  046A  36B1               	lsrf	??_StdS_ManageStdServices+1,f
 12460  046B  0CB0               	rrf	??_StdS_ManageStdServices,f
 12461  046C  36B1               	lsrf	??_StdS_ManageStdServices+1,f
 12462  046D  0CB0               	rrf	??_StdS_ManageStdServices,f
 12463  046E  36B1               	lsrf	??_StdS_ManageStdServices+1,f
 12464  046F  0CB0               	rrf	??_StdS_ManageStdServices,f
 12465  0470  0830               	movf	??_StdS_ManageStdServices,w
 12466  0471  3ED8               	addlw	216
 12467  0472  00B6               	movwf	StdS_ManageStdServices@DieTemp
 12468  0473  30FF               	movlw	255
 12469  0474  3D31               	addwfc	??_StdS_ManageStdServices+1,w
 12470  0475  00B7               	movwf	StdS_ManageStdServices@DieTemp+1
 12471                           
 12472                           ;std_ser.c: 295: utoa(DieTempStr,DieTemp,10);
 12473  0476  0837               	movf	StdS_ManageStdServices@DieTemp+1,w
 12474  0477  00A8               	movwf	utoa@val+1
 12475  0478  0836               	movf	StdS_ManageStdServices@DieTemp,w
 12476  0479  00A7               	movwf	utoa@val
 12477  047A  300A               	movlw	10
 12478  047B  00A9               	movwf	utoa@base
 12479  047C  3000               	movlw	0
 12480  047D  00AA               	movwf	utoa@base+1
 12481  047E  3032               	movlw	(low (StdS_ManageStdServices@DieTempStr| 0))& (0+255)
 12482  047F  318D  258D  3183   	fcall	_utoa
 12483                           
 12484                           ;std_ser.c: 297: StringCopy(DieTempStr,RepBuffer,((UINT8)(2)));
 12485  0482  3032               	movlw	low StdS_ManageStdServices@DieTempStr
 12486  0483  0020               	movlb	0	; select bank0
 12487  0484  00A0               	movwf	StringCopy@SourceStr
 12488  0485  3000               	movlw	high StdS_ManageStdServices@DieTempStr
 12489  0486  00A1               	movwf	StringCopy@SourceStr+1
 12490  0487  30A0               	movlw	(low (_RepBuffer| (0+256)))& (0+255)
 12491  0488  00B0               	movwf	??_StdS_ManageStdServices
 12492  0489  0830               	movf	??_StdS_ManageStdServices,w
 12493  048A  00A2               	movwf	StringCopy@DestStr
 12494  048B  3002               	movlw	2
 12495  048C  00B1               	movwf	??_StdS_ManageStdServices+1
 12496  048D  0831               	movf	??_StdS_ManageStdServices+1,w
 12497  048E  00A3               	movwf	StringCopy@Len
 12498  048F  3189  211A  3183   	fcall	_StringCopy
 12499                           
 12500                           ;std_ser.c: 299: RepBufferLen = ((UINT8)(2));
 12501  0492  3002               	movlw	2
 12502  0493  0020               	movlb	0	; select bank0
 12503  0494  00B0               	movwf	??_StdS_ManageStdServices
 12504  0495  0830               	movf	??_StdS_ManageStdServices,w
 12505  0496  0021               	movlb	1	; select bank1
 12506  0497  00B9               	movwf	_RepBufferLen^(0+128)
 12507                           
 12508                           ;std_ser.c: 301: GenerateEvt(&I2cReplyPacketReady);
 12509  0498  3077               	movlw	(low (_I2cReplyPacketReady| 0))& (0+255)
 12510  0499  3188  20F8         	fcall	_GenerateEvt
 12511                           
 12512                           ;std_ser.c: 306: }
 12513                           
 12514                           ;std_ser.c: 305: break;
 12515                           
 12516                           ;std_ser.c: 304: default:
 12517                           
 12518                           ;std_ser.c: 302: break;
 12519  049B  0008               	return
 12520  049C                     l4429:	
 12521  049C  0024               	movlb	4	; select bank4
 12522  049D  0820               	movf	_CmdBuffer^(0+512),w
 12523                           
 12524                           ; Switch size 1, requested type "space"
 12525                           ; Number of cases is 10, Range of values is 16 to 70
 12526                           ; switch strategies available:
 12527                           ; Name         Instructions Cycles
 12528                           ; simple_byte           31    16 (average)
 12529                           ; direct_byte          119     9 (fixed)
 12530                           ; jumptable            263     9 (fixed)
 12531                           ;	Chosen strategy is simple_byte
 12532  049E  3A10               	xorlw	16	; case 16
 12533  049F  1903               	skipnz
 12534  04A0  2BCB               	goto	l4373
 12535  04A1  3A30               	xorlw	48	; case 32
 12536  04A2  1903               	skipnz
 12537  04A3  2BE5               	goto	l4379
 12538  04A4  3A01               	xorlw	1	; case 33
 12539  04A5  1903               	skipnz
 12540  04A6  2BFF               	goto	l4385
 12541  04A7  3A03               	xorlw	3	; case 34
 12542  04A8  1903               	skipnz
 12543  04A9  2C19               	goto	l4391
 12544  04AA  3A12               	xorlw	18	; case 48
 12545  04AB  1903               	skipnz
 12546  04AC  2C33               	goto	l4397
 12547  04AD  3A01               	xorlw	1	; case 49
 12548  04AE  1903               	skipnz
 12549  04AF  2C36               	goto	l4399
 12550  04B0  3A70               	xorlw	112	; case 65
 12551  04B1  1903               	skipnz
 12552  04B2  2C39               	goto	l4401
 12553  04B3  3A03               	xorlw	3	; case 66
 12554  04B4  1903               	skipnz
 12555  04B5  2C3E               	goto	l4403
 12556  04B6  3A07               	xorlw	7	; case 69
 12557  04B7  1903               	skipnz
 12558  04B8  2C41               	goto	l4405
 12559  04B9  3A03               	xorlw	3	; case 70
 12560  04BA  1903               	skipnz
 12561  04BB  2C5E               	goto	l4415
 12562  04BC  2CBD               	goto	l805
 12563  04BD                     l805:	
 12564  04BD  0008               	return
 12565  04BE                     __end_of_StdS_ManageStdServices:	
 12566                           
 12567                           	psect	text57
 12568  0D8D                     __ptext57:	
 12569 ;; *************** function _utoa *****************
 12570 ;; Defined at:
 12571 ;;		line 17 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\itoa.c"
 12572 ;; Parameters:    Size  Location     Type
 12573 ;;  buf             1    wreg     PTR unsigned char 
 12574 ;;		 -> HumidityDecStr(3), HumidityIntStr(3), TemperatureDecStr(3), TemperatureIntStr(3), 
 12575 ;;		 -> StdS_ManageStdServices@DieTempStr(4), 
 12576 ;;  val             2    7[BANK0 ] unsigned int 
 12577 ;;  base            2    9[BANK0 ] int 
 12578 ;; Auto vars:     Size  Location     Type
 12579 ;;  buf             1   15[BANK0 ] PTR unsigned char 
 12580 ;;		 -> HumidityDecStr(3), HumidityIntStr(3), TemperatureDecStr(3), TemperatureIntStr(3), 
 12581 ;;		 -> StdS_ManageStdServices@DieTempStr(4), 
 12582 ;;  v               2   12[BANK0 ] unsigned int 
 12583 ;;  c               1   14[BANK0 ] unsigned char 
 12584 ;; Return value:  Size  Location     Type
 12585 ;;                  1    wreg      PTR unsigned char 
 12586 ;; Registers used:
 12587 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12588 ;; Tracked objects:
 12589 ;;		On entry : 0/0
 12590 ;;		On exit  : 0/0
 12591 ;;		Unchanged: 0/0
 12592 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12593 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12594 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12595 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12596 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12597 ;;Total ram usage:        9 bytes
 12598 ;; Hardware stack levels used:    1
 12599 ;; Hardware stack levels required when called:    3
 12600 ;; This function calls:
 12601 ;;		___lwdiv
 12602 ;;		___lwmod
 12603 ;; This function is called by:
 12604 ;;		_StdS_ManageStdServices
 12605 ;;		_itoa
 12606 ;; This function uses a non-reentrant model
 12607 ;;
 12608                           
 12609                           
 12610                           ;psect for function _utoa
 12611  0D8D                     _utoa:	
 12612                           
 12613                           ;incstack = 0
 12614                           ; Regs used in _utoa: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 12615                           ;utoa@buf stored from wreg
 12616  0D8D  0020               	movlb	0	; select bank0
 12617  0D8E  00AF               	movwf	utoa@buf
 12618  0D8F  0828               	movf	utoa@val+1,w
 12619  0D90  00AD               	movwf	utoa@v+1
 12620  0D91  0827               	movf	utoa@val,w
 12621  0D92  00AC               	movwf	utoa@v
 12622  0D93                     l4293:	
 12623  0D93  082A               	movf	utoa@base+1,w
 12624  0D94  00A1               	movwf	___lwdiv@divisor+1
 12625  0D95  0829               	movf	utoa@base,w
 12626  0D96  00A0               	movwf	___lwdiv@divisor
 12627  0D97  082D               	movf	utoa@v+1,w
 12628  0D98  00A3               	movwf	___lwdiv@dividend+1
 12629  0D99  082C               	movf	utoa@v,w
 12630  0D9A  00A2               	movwf	___lwdiv@dividend
 12631  0D9B  318B  231B  318D   	fcall	___lwdiv
 12632  0D9E  0020               	movlb	0	; select bank0
 12633  0D9F  0821               	movf	?___lwdiv+1,w
 12634  0DA0  00AD               	movwf	utoa@v+1
 12635  0DA1  0820               	movf	?___lwdiv,w
 12636  0DA2  00AC               	movwf	utoa@v
 12637  0DA3  3001               	movlw	1
 12638  0DA4  00AB               	movwf	??_utoa
 12639  0DA5  082B               	movf	??_utoa,w
 12640  0DA6  07AF               	addwf	utoa@buf,f
 12641  0DA7  082C               	movf	utoa@v,w
 12642  0DA8  042D               	iorwf	utoa@v+1,w
 12643  0DA9  1D03               	btfss	3,2
 12644  0DAA  2D93               	goto	l4293
 12645  0DAB  082F               	movf	utoa@buf,w
 12646  0DAC  0086               	movwf	6
 12647  0DAD  0187               	clrf	7
 12648  0DAE  0181               	clrf	1
 12649  0DAF  3001               	movlw	1
 12650  0DB0  02AF               	subwf	utoa@buf,f
 12651  0DB1                     l4303:	
 12652  0DB1  082A               	movf	utoa@base+1,w
 12653  0DB2  00A1               	movwf	___lwmod@divisor+1
 12654  0DB3  0829               	movf	utoa@base,w
 12655  0DB4  00A0               	movwf	___lwmod@divisor
 12656  0DB5  0828               	movf	utoa@val+1,w
 12657  0DB6  00A3               	movwf	___lwmod@dividend+1
 12658  0DB7  0827               	movf	utoa@val,w
 12659  0DB8  00A2               	movwf	___lwmod@dividend
 12660  0DB9  318A  222E  318D   	fcall	___lwmod
 12661  0DBC  0020               	movlb	0	; select bank0
 12662  0DBD  0820               	movf	?___lwmod,w
 12663  0DBE  00AB               	movwf	??_utoa
 12664  0DBF  082B               	movf	??_utoa,w
 12665  0DC0  00AE               	movwf	utoa@c
 12666  0DC1  082A               	movf	utoa@base+1,w
 12667  0DC2  00A1               	movwf	___lwdiv@divisor+1
 12668  0DC3  0829               	movf	utoa@base,w
 12669  0DC4  00A0               	movwf	___lwdiv@divisor
 12670  0DC5  0828               	movf	utoa@val+1,w
 12671  0DC6  00A3               	movwf	___lwdiv@dividend+1
 12672  0DC7  0827               	movf	utoa@val,w
 12673  0DC8  00A2               	movwf	___lwdiv@dividend
 12674  0DC9  318B  231B  318D   	fcall	___lwdiv
 12675  0DCC  0020               	movlb	0	; select bank0
 12676  0DCD  0821               	movf	?___lwdiv+1,w
 12677  0DCE  00A8               	movwf	utoa@val+1
 12678  0DCF  0820               	movf	?___lwdiv,w
 12679  0DD0  00A7               	movwf	utoa@val
 12680  0DD1  300A               	movlw	10
 12681  0DD2  022E               	subwf	utoa@c,w
 12682  0DD3  1C03               	skipc
 12683  0DD4  2DD9               	goto	l1403
 12684  0DD5  3007               	movlw	7
 12685  0DD6  00AB               	movwf	??_utoa
 12686  0DD7  082B               	movf	??_utoa,w
 12687  0DD8  07AE               	addwf	utoa@c,f
 12688  0DD9                     l1403:	
 12689  0DD9  3030               	movlw	48
 12690  0DDA  00AB               	movwf	??_utoa
 12691  0DDB  082B               	movf	??_utoa,w
 12692  0DDC  07AE               	addwf	utoa@c,f
 12693  0DDD  082E               	movf	utoa@c,w
 12694  0DDE  00AB               	movwf	??_utoa
 12695  0DDF  082F               	movf	utoa@buf,w
 12696  0DE0  0086               	movwf	6
 12697  0DE1  0187               	clrf	7
 12698  0DE2  082B               	movf	??_utoa,w
 12699  0DE3  0081               	movwf	1
 12700  0DE4  3001               	movlw	1
 12701  0DE5  02AF               	subwf	utoa@buf,f
 12702  0DE6  0827               	movf	utoa@val,w
 12703  0DE7  0428               	iorwf	utoa@val+1,w
 12704  0DE8  1D03               	btfss	3,2
 12705  0DE9  2DB1               	goto	l4303
 12706                           
 12707                           ;	Return value of _utoa is never used
 12708  0DEA  3001               	movlw	1
 12709  0DEB  00AB               	movwf	??_utoa
 12710  0DEC  082B               	movf	??_utoa,w
 12711  0DED  07AF               	addwf	utoa@buf,f
 12712  0DEE  0008               	return
 12713  0DEF                     __end_of_utoa:	
 12714                           
 12715                           	psect	text58
 12716  0A2E                     __ptext58:	
 12717 ;; *************** function ___lwmod *****************
 12718 ;; Defined at:
 12719 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\lwmod.c"
 12720 ;; Parameters:    Size  Location     Type
 12721 ;;  divisor         2    0[BANK0 ] unsigned int 
 12722 ;;  dividend        2    2[BANK0 ] unsigned int 
 12723 ;; Auto vars:     Size  Location     Type
 12724 ;;  counter         1    5[COMMON] unsigned char 
 12725 ;; Return value:  Size  Location     Type
 12726 ;;                  2    0[BANK0 ] unsigned int 
 12727 ;; Registers used:
 12728 ;;		wreg, status,2, status,0
 12729 ;; Tracked objects:
 12730 ;;		On entry : 0/0
 12731 ;;		On exit  : 0/0
 12732 ;;		Unchanged: 0/0
 12733 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12734 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12735 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12736 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12737 ;;      Totals:         2       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12738 ;;Total ram usage:        6 bytes
 12739 ;; Hardware stack levels used:    1
 12740 ;; Hardware stack levels required when called:    2
 12741 ;; This function calls:
 12742 ;;		Nothing
 12743 ;; This function is called by:
 12744 ;;		_App_MainTask
 12745 ;;		_utoa
 12746 ;; This function uses a non-reentrant model
 12747 ;;
 12748                           
 12749                           
 12750                           ;psect for function ___lwmod
 12751  0A2E                     ___lwmod:	
 12752                           
 12753                           ;incstack = 0
 12754                           ; Regs used in ___lwmod: [wreg+status,2+status,0]
 12755  0A2E  0020               	movlb	0	; select bank0
 12756  0A2F  0820               	movf	___lwmod@divisor,w
 12757  0A30  0421               	iorwf	___lwmod@divisor+1,w
 12758  0A31  1903               	btfsc	3,2
 12759  0A32  2A56               	goto	l4225
 12760  0A33  01F5               	clrf	___lwmod@counter
 12761  0A34  0AF5               	incf	___lwmod@counter,f
 12762  0A35                     l4215:	
 12763  0A35  1BA1               	btfsc	___lwmod@divisor+1,7
 12764  0A36  2A41               	goto	l4217
 12765  0A37  3001               	movlw	1
 12766  0A38                     u3395:	
 12767  0A38  35A0               	lslf	___lwmod@divisor,f
 12768  0A39  0DA1               	rlf	___lwmod@divisor+1,f
 12769  0A3A  0B89               	decfsz	9,f
 12770  0A3B  2A38               	goto	u3395
 12771  0A3C  3001               	movlw	1
 12772  0A3D  00F4               	movwf	??___lwmod
 12773  0A3E  0874               	movf	??___lwmod,w
 12774  0A3F  07F5               	addwf	___lwmod@counter,f
 12775  0A40  2A35               	goto	l4215
 12776  0A41                     l4217:	
 12777  0A41  0821               	movf	___lwmod@divisor+1,w
 12778  0A42  0223               	subwf	___lwmod@dividend+1,w
 12779  0A43  1D03               	skipz
 12780  0A44  2A47               	goto	u3415
 12781  0A45  0820               	movf	___lwmod@divisor,w
 12782  0A46  0222               	subwf	___lwmod@dividend,w
 12783  0A47                     u3415:	
 12784  0A47  1C03               	skipc
 12785  0A48  2A4D               	goto	l4221
 12786  0A49  0820               	movf	___lwmod@divisor,w
 12787  0A4A  02A2               	subwf	___lwmod@dividend,f
 12788  0A4B  0821               	movf	___lwmod@divisor+1,w
 12789  0A4C  3BA3               	subwfb	___lwmod@dividend+1,f
 12790  0A4D                     l4221:	
 12791  0A4D  3001               	movlw	1
 12792  0A4E                     u3425:	
 12793  0A4E  36A1               	lsrf	___lwmod@divisor+1,f
 12794  0A4F  0CA0               	rrf	___lwmod@divisor,f
 12795  0A50  0B89               	decfsz	9,f
 12796  0A51  2A4E               	goto	u3425
 12797  0A52  3001               	movlw	1
 12798  0A53  02F5               	subwf	___lwmod@counter,f
 12799  0A54  1D03               	btfss	3,2
 12800  0A55  2A41               	goto	l4217
 12801  0A56                     l4225:	
 12802  0A56  0823               	movf	___lwmod@dividend+1,w
 12803  0A57  00A1               	movwf	?___lwmod+1
 12804  0A58  0822               	movf	___lwmod@dividend,w
 12805  0A59  00A0               	movwf	?___lwmod
 12806  0A5A  0008               	return
 12807  0A5B                     __end_of___lwmod:	
 12808                           
 12809                           	psect	text59
 12810  0B1B                     __ptext59:	
 12811 ;; *************** function ___lwdiv *****************
 12812 ;; Defined at:
 12813 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\lwdiv.c"
 12814 ;; Parameters:    Size  Location     Type
 12815 ;;  divisor         2    0[BANK0 ] unsigned int 
 12816 ;;  dividend        2    2[BANK0 ] unsigned int 
 12817 ;; Auto vars:     Size  Location     Type
 12818 ;;  quotient        2    5[BANK0 ] unsigned int 
 12819 ;;  counter         1    4[BANK0 ] unsigned char 
 12820 ;; Return value:  Size  Location     Type
 12821 ;;                  2    0[BANK0 ] unsigned int 
 12822 ;; Registers used:
 12823 ;;		wreg, status,2, status,0
 12824 ;; Tracked objects:
 12825 ;;		On entry : 0/0
 12826 ;;		On exit  : 0/0
 12827 ;;		Unchanged: 0/0
 12828 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12829 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12830 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12831 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12832 ;;      Totals:         1       7       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12833 ;;Total ram usage:        8 bytes
 12834 ;; Hardware stack levels used:    1
 12835 ;; Hardware stack levels required when called:    2
 12836 ;; This function calls:
 12837 ;;		Nothing
 12838 ;; This function is called by:
 12839 ;;		_LedBlinkStateMachine
 12840 ;;		_LedPulseStateMachine
 12841 ;;		_App_MainTask
 12842 ;;		_utoa
 12843 ;; This function uses a non-reentrant model
 12844 ;;
 12845                           
 12846                           
 12847                           ;psect for function ___lwdiv
 12848  0B1B                     ___lwdiv:	
 12849                           
 12850                           ;incstack = 0
 12851                           ; Regs used in ___lwdiv: [wreg+status,2+status,0]
 12852  0B1B  0020               	movlb	0	; select bank0
 12853  0B1C  01A5               	clrf	___lwdiv@quotient
 12854  0B1D  01A6               	clrf	___lwdiv@quotient+1
 12855  0B1E  0820               	movf	___lwdiv@divisor,w
 12856  0B1F  0421               	iorwf	___lwdiv@divisor+1,w
 12857  0B20  1903               	btfsc	3,2
 12858  0B21  2B4B               	goto	l4203
 12859  0B22  01A4               	clrf	___lwdiv@counter
 12860  0B23  0AA4               	incf	___lwdiv@counter,f
 12861  0B24                     l4191:	
 12862  0B24  1BA1               	btfsc	___lwdiv@divisor+1,7
 12863  0B25  2B30               	goto	l4193
 12864  0B26  3001               	movlw	1
 12865  0B27                     u3325:	
 12866  0B27  35A0               	lslf	___lwdiv@divisor,f
 12867  0B28  0DA1               	rlf	___lwdiv@divisor+1,f
 12868  0B29  0B89               	decfsz	9,f
 12869  0B2A  2B27               	goto	u3325
 12870  0B2B  3001               	movlw	1
 12871  0B2C  00F4               	movwf	??___lwdiv
 12872  0B2D  0874               	movf	??___lwdiv,w
 12873  0B2E  07A4               	addwf	___lwdiv@counter,f
 12874  0B2F  2B24               	goto	l4191
 12875  0B30                     l4193:	
 12876  0B30  3001               	movlw	1
 12877  0B31                     u3345:	
 12878  0B31  35A5               	lslf	___lwdiv@quotient,f
 12879  0B32  0DA6               	rlf	___lwdiv@quotient+1,f
 12880  0B33  0B89               	decfsz	9,f
 12881  0B34  2B31               	goto	u3345
 12882  0B35  0821               	movf	___lwdiv@divisor+1,w
 12883  0B36  0223               	subwf	___lwdiv@dividend+1,w
 12884  0B37  1D03               	skipz
 12885  0B38  2B3B               	goto	u3355
 12886  0B39  0820               	movf	___lwdiv@divisor,w
 12887  0B3A  0222               	subwf	___lwdiv@dividend,w
 12888  0B3B                     u3355:	
 12889  0B3B  1C03               	skipc
 12890  0B3C  2B42               	goto	l4199
 12891  0B3D  0820               	movf	___lwdiv@divisor,w
 12892  0B3E  02A2               	subwf	___lwdiv@dividend,f
 12893  0B3F  0821               	movf	___lwdiv@divisor+1,w
 12894  0B40  3BA3               	subwfb	___lwdiv@dividend+1,f
 12895  0B41  1425               	bsf	___lwdiv@quotient,0
 12896  0B42                     l4199:	
 12897  0B42  3001               	movlw	1
 12898  0B43                     u3365:	
 12899  0B43  36A1               	lsrf	___lwdiv@divisor+1,f
 12900  0B44  0CA0               	rrf	___lwdiv@divisor,f
 12901  0B45  0B89               	decfsz	9,f
 12902  0B46  2B43               	goto	u3365
 12903  0B47  3001               	movlw	1
 12904  0B48  02A4               	subwf	___lwdiv@counter,f
 12905  0B49  1D03               	btfss	3,2
 12906  0B4A  2B30               	goto	l4193
 12907  0B4B                     l4203:	
 12908  0B4B  0826               	movf	___lwdiv@quotient+1,w
 12909  0B4C  00A1               	movwf	?___lwdiv+1
 12910  0B4D  0825               	movf	___lwdiv@quotient,w
 12911  0B4E  00A0               	movwf	?___lwdiv
 12912  0B4F  0008               	return
 12913  0B50                     __end_of___lwdiv:	
 12914                           
 12915                           	psect	text60
 12916  091A                     __ptext60:	
 12917 ;; *************** function _StringCopy *****************
 12918 ;; Defined at:
 12919 ;;		line 104 in file "../../../Framework/MercuryFwk/Source/c/03_Sml/02_Ssl/sf.c"
 12920 ;; Parameters:    Size  Location     Type
 12921 ;;  SourceStr       2    0[BANK0 ] PTR unsigned char 
 12922 ;;		 -> StdS_ManageStdServices@DieTempStr(4), STR_5(9), STR_4(9), STR_3(6), 
 12923 ;;		 -> STR_2(5), 
 12924 ;;  DestStr         1    2[BANK0 ] PTR unsigned char 
 12925 ;;		 -> RepBuffer(80), 
 12926 ;;  Len             1    3[BANK0 ] unsigned char 
 12927 ;; Auto vars:     Size  Location     Type
 12928 ;;  Index           1    4[COMMON] unsigned char 
 12929 ;; Return value:  Size  Location     Type
 12930 ;;                  1    wreg      void 
 12931 ;; Registers used:
 12932 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath
 12933 ;; Tracked objects:
 12934 ;;		On entry : 0/0
 12935 ;;		On exit  : 0/0
 12936 ;;		Unchanged: 0/0
 12937 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12938 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12939 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12940 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12941 ;;      Totals:         1       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12942 ;;Total ram usage:        9 bytes
 12943 ;; Hardware stack levels used:    1
 12944 ;; Hardware stack levels required when called:    2
 12945 ;; This function calls:
 12946 ;;		Nothing
 12947 ;; This function is called by:
 12948 ;;		_StdS_ManageStdServices
 12949 ;; This function uses a non-reentrant model
 12950 ;;
 12951                           
 12952                           
 12953                           ;psect for function _StringCopy
 12954  091A                     _StringCopy:	
 12955                           
 12956                           ;sf.c: 106: UINT8 Index = 0;
 12957                           
 12958                           ;incstack = 0
 12959                           ; Regs used in _StringCopy: [wreg-fsr1h+status,2+status,0+pclath]
 12960  091A  01F4               	clrf	StringCopy@Index
 12961                           
 12962                           ;sf.c: 109: for (Index = 0; Index < Len; Index++)
 12963  091B  01F4               	clrf	StringCopy@Index
 12964  091C                     l4269:	
 12965  091C  0020               	movlb	0	; select bank0
 12966  091D  0823               	movf	StringCopy@Len,w
 12967  091E  0274               	subwf	StringCopy@Index,w
 12968  091F  1803               	btfsc	3,0
 12969  0920  0008               	return
 12970                           
 12971                           ;sf.c: 110: {
 12972                           ;sf.c: 111: DestStr[Index] = SourceStr[Index];
 12973  0921  0020               	movlb	0	; select bank0
 12974  0922  0821               	movf	StringCopy@SourceStr+1,w
 12975  0923  00A5               	movwf	??_StringCopy+1
 12976  0924  0820               	movf	StringCopy@SourceStr,w
 12977  0925  00A4               	movwf	??_StringCopy
 12978  0926  0874               	movf	StringCopy@Index,w
 12979  0927  0724               	addwf	??_StringCopy,w
 12980  0928  0084               	movwf	4
 12981  0929  0825               	movf	??_StringCopy+1,w
 12982  092A  1803               	skipnc
 12983  092B  0A25               	incf	??_StringCopy+1,w
 12984  092C  0085               	movwf	5
 12985  092D  0800               	movf	0,w	;code access
 12986  092E  00A6               	movwf	??_StringCopy+2
 12987  092F  0874               	movf	StringCopy@Index,w
 12988  0930  0722               	addwf	StringCopy@DestStr,w
 12989  0931  00A7               	movwf	??_StringCopy+3
 12990  0932  0827               	movf	??_StringCopy+3,w
 12991  0933  0086               	movwf	6
 12992  0934  3001               	movlw	1	; select bank2/3
 12993  0935  0087               	movwf	7
 12994  0936  0826               	movf	??_StringCopy+2,w
 12995  0937  0081               	movwf	1
 12996  0938  3001               	movlw	1
 12997  0939  00A4               	movwf	??_StringCopy
 12998  093A  0824               	movf	??_StringCopy,w
 12999  093B  07F4               	addwf	StringCopy@Index,f
 13000  093C  291C               	goto	l4269
 13001  093D                     __end_of_StringCopy:	
 13002                           
 13003                           	psect	text61
 13004  0BC7                     __ptext61:	
 13005 ;; *************** function _SetLedBehavSts *****************
 13006 ;; Defined at:
 13007 ;;		line 76 in file "../../../Framework/MercuryFwk/Source/c/03_Sml/02_Ssl/std_ser.c"
 13008 ;; Parameters:    Size  Location     Type
 13009 ;;  LedBehav        1    wreg     unsigned char 
 13010 ;; Auto vars:     Size  Location     Type
 13011 ;;  LedBehav        1    5[BANK0 ] unsigned char 
 13012 ;; Return value:  Size  Location     Type
 13013 ;;                  1    wreg      void 
 13014 ;; Registers used:
 13015 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
 13016 ;; Tracked objects:
 13017 ;;		On entry : 0/0
 13018 ;;		On exit  : 0/0
 13019 ;;		Unchanged: 0/0
 13020 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13021 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13022 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13023 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13024 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13025 ;;Total ram usage:        2 bytes
 13026 ;; Hardware stack levels used:    1
 13027 ;; Hardware stack levels required when called:    3
 13028 ;; This function calls:
 13029 ;;		_Led_SetLedBlinkTime
 13030 ;;		_Led_SetLedPulseTime
 13031 ;;		_Led_SetLedStatus
 13032 ;; This function is called by:
 13033 ;;		_Led_MainTask
 13034 ;;		_StdS_ManageStdServices
 13035 ;; This function uses a non-reentrant model
 13036 ;;
 13037                           
 13038                           
 13039                           ;psect for function _SetLedBehavSts
 13040  0BC7                     _SetLedBehavSts:	
 13041                           
 13042                           ;incstack = 0
 13043                           ; Regs used in _SetLedBehavSts: [wreg-fsr0h+status,2+status,0+pclath+cstack]
 13044                           ;SetLedBehavSts@LedBehav stored from wreg
 13045  0BC7  0020               	movlb	0	; select bank0
 13046  0BC8  00A5               	movwf	SetLedBehavSts@LedBehav
 13047                           
 13048                           ;std_ser.c: 79: switch (LedBehav)
 13049  0BC9  2BFA               	goto	l4261
 13050  0BCA                     l4245:	
 13051                           ;std_ser.c: 80: {
 13052                           ;std_ser.c: 81: case ((UINT8)(0)):
 13053                           
 13054                           
 13055                           ;std_ser.c: 83: Led_SetLedStatus(1u,LED_STS_OFF);
 13056  0BCA  01F4               	clrf	Led_SetLedStatus@LedSts
 13057  0BCB  3001               	movlw	1
 13058  0BCC  3196  26D7         	fcall	_Led_SetLedStatus
 13059                           
 13060                           ;std_ser.c: 85: LedBehaviourSts = ((UINT8)(0));
 13061  0BCE  01F9               	clrf	_LedBehaviourSts
 13062                           
 13063                           ;std_ser.c: 86: break;
 13064  0BCF  0008               	return
 13065  0BD0                     l4249:	
 13066                           ;std_ser.c: 88: case ((UINT8)(1)):
 13067                           
 13068                           
 13069                           ;std_ser.c: 90: Led_SetLedPulseTime(1u,50);
 13070  0BD0  3032               	movlw	50
 13071  0BD1  00F4               	movwf	Led_SetLedPulseTime@PulseTimeMs
 13072  0BD2  3000               	movlw	0
 13073  0BD3  00F5               	movwf	Led_SetLedPulseTime@PulseTimeMs+1
 13074  0BD4  3001               	movlw	1
 13075  0BD5  3196  26F7         	fcall	_Led_SetLedPulseTime
 13076                           
 13077                           ;std_ser.c: 92: LedBehaviourSts = ((UINT8)(1));
 13078  0BD7  01F9               	clrf	_LedBehaviourSts
 13079  0BD8  0AF9               	incf	_LedBehaviourSts,f
 13080                           
 13081                           ;std_ser.c: 93: break;
 13082  0BD9  0008               	return
 13083  0BDA                     l4253:	
 13084                           ;std_ser.c: 95: case ((UINT8)(2)):
 13085                           
 13086                           
 13087                           ;std_ser.c: 97: Led_SetLedBlinkTime(1u,50,950);
 13088  0BDA  3032               	movlw	50
 13089  0BDB  0020               	movlb	0	; select bank0
 13090  0BDC  00A0               	movwf	Led_SetLedBlinkTime@OnTimeMs
 13091  0BDD  3000               	movlw	0
 13092  0BDE  00A1               	movwf	Led_SetLedBlinkTime@OnTimeMs+1
 13093  0BDF  30B6               	movlw	182
 13094  0BE0  00A2               	movwf	Led_SetLedBlinkTime@OffTimeMs
 13095  0BE1  3003               	movlw	3
 13096  0BE2  00A3               	movwf	Led_SetLedBlinkTime@OffTimeMs+1
 13097  0BE3  3001               	movlw	1
 13098  0BE4  3197  27E7  318B   	fcall	_Led_SetLedBlinkTime
 13099                           
 13100                           ;std_ser.c: 99: Led_SetLedStatus(1u,LED_STS_BLINK);
 13101  0BE7  3002               	movlw	2
 13102  0BE8  0020               	movlb	0	; select bank0
 13103  0BE9  00A4               	movwf	??_SetLedBehavSts
 13104  0BEA  0824               	movf	??_SetLedBehavSts,w
 13105  0BEB  00F4               	movwf	Led_SetLedStatus@LedSts
 13106  0BEC  3001               	movlw	1
 13107  0BED  3196  26D7         	fcall	_Led_SetLedStatus
 13108                           
 13109                           ;std_ser.c: 101: LedBehaviourSts = ((UINT8)(2));
 13110  0BEF  3002               	movlw	2
 13111  0BF0  0020               	movlb	0	; select bank0
 13112  0BF1  00A4               	movwf	??_SetLedBehavSts
 13113  0BF2  0824               	movf	??_SetLedBehavSts,w
 13114  0BF3  00F9               	movwf	_LedBehaviourSts
 13115                           
 13116                           ;std_ser.c: 102: break;
 13117  0BF4  0008               	return
 13118  0BF5                     l4257:	
 13119                           ;std_ser.c: 104: case ((UINT8)(3)):
 13120                           
 13121                           
 13122                           ;std_ser.c: 106: LedBehaviourSts = ((UINT8)(3));
 13123  0BF5  3003               	movlw	3
 13124  0BF6  00A4               	movwf	??_SetLedBehavSts
 13125  0BF7  0824               	movf	??_SetLedBehavSts,w
 13126  0BF8  00F9               	movwf	_LedBehaviourSts
 13127                           
 13128                           ;std_ser.c: 111: }
 13129                           
 13130                           ;std_ser.c: 110: break;
 13131                           
 13132                           ;std_ser.c: 109: default:
 13133                           
 13134                           ;std_ser.c: 107: break;
 13135  0BF9  0008               	return
 13136  0BFA                     l4261:	
 13137  0BFA  0825               	movf	SetLedBehavSts@LedBehav,w
 13138                           
 13139                           ; Switch size 1, requested type "space"
 13140                           ; Number of cases is 4, Range of values is 0 to 3
 13141                           ; switch strategies available:
 13142                           ; Name         Instructions Cycles
 13143                           ; simple_byte           13     7 (average)
 13144                           ; direct_byte           14     6 (fixed)
 13145                           ; jumptable            260     6 (fixed)
 13146                           ;	Chosen strategy is simple_byte
 13147  0BFB  3A00               	xorlw	0	; case 0
 13148  0BFC  1903               	skipnz
 13149  0BFD  2BCA               	goto	l4245
 13150  0BFE  3A01               	xorlw	1	; case 1
 13151  0BFF  1903               	skipnz
 13152  0C00  2BD0               	goto	l4249
 13153  0C01  3A03               	xorlw	3	; case 2
 13154  0C02  1903               	skipnz
 13155  0C03  2BDA               	goto	l4253
 13156  0C04  3A01               	xorlw	1	; case 3
 13157  0C05  1903               	skipnz
 13158  0C06  2BF5               	goto	l4257
 13159  0C07  2C08               	goto	l771
 13160  0C08                     l771:	
 13161  0C08  0008               	return
 13162  0C09                     __end_of_SetLedBehavSts:	
 13163                           
 13164                           	psect	text62
 13165  16F7                     __ptext62:	
 13166 ;; *************** function _Led_SetLedPulseTime *****************
 13167 ;; Defined at:
 13168 ;;		line 204 in file "../../../Framework/MercuryFwk/Source/c/03_Sml/02_Ssl/led.c"
 13169 ;; Parameters:    Size  Location     Type
 13170 ;;  Led             1    wreg     unsigned char 
 13171 ;;  PulseTimeMs     2    4[COMMON] unsigned short 
 13172 ;; Auto vars:     Size  Location     Type
 13173 ;;  Led             1    0[BANK0 ] unsigned char 
 13174 ;; Return value:  Size  Location     Type
 13175 ;;                  1    wreg      void 
 13176 ;; Registers used:
 13177 ;;		wreg, fsr0l, fsr0h, status,2, status,0
 13178 ;; Tracked objects:
 13179 ;;		On entry : 0/0
 13180 ;;		On exit  : 0/0
 13181 ;;		Unchanged: 0/0
 13182 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13183 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13184 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13185 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13186 ;;      Totals:         2       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13187 ;;Total ram usage:        3 bytes
 13188 ;; Hardware stack levels used:    1
 13189 ;; Hardware stack levels required when called:    2
 13190 ;; This function calls:
 13191 ;;		Nothing
 13192 ;; This function is called by:
 13193 ;;		_SetLedBehavSts
 13194 ;; This function uses a non-reentrant model
 13195 ;;
 13196                           
 13197                           
 13198                           ;psect for function _Led_SetLedPulseTime
 13199  16F7                     _Led_SetLedPulseTime:	
 13200                           
 13201                           ;incstack = 0
 13202                           ; Regs used in _Led_SetLedPulseTime: [wreg-fsr0h+status,2+status,0]
 13203                           ;Led_SetLedPulseTime@Led stored from wreg
 13204  16F7  0020               	movlb	0	; select bank0
 13205  16F8  00A0               	movwf	Led_SetLedPulseTime@Led
 13206                           
 13207                           ;led.c: 207: switch (Led)
 13208  16F9  2F00               	goto	l4179
 13209  16FA                     l4175:	
 13210                           ;led.c: 208: {
 13211                           ;led.c: 209: case 1u:
 13212                           
 13213                           
 13214                           ;led.c: 210: Led1Pulse.LedPulseTimeMs = PulseTimeMs;
 13215  16FA  0875               	movf	Led_SetLedPulseTime@PulseTimeMs+1,w
 13216  16FB  0021               	movlb	1	; select bank1
 13217  16FC  00CB               	movwf	((_Led1Pulse+1)^(0+128)+4)
 13218  16FD  0874               	movf	Led_SetLedPulseTime@PulseTimeMs,w
 13219  16FE  00CA               	movwf	(_Led1Pulse^(0+128)+4)
 13220                           
 13221                           ;led.c: 215: }
 13222                           
 13223                           ;led.c: 214: break;
 13224                           
 13225                           ;led.c: 213: default:
 13226                           
 13227                           ;led.c: 211: break;
 13228  16FF  0008               	return
 13229  1700                     l4179:	
 13230  1700  0020               	movlb	0	; select bank0
 13231  1701  0820               	movf	Led_SetLedPulseTime@Led,w
 13232                           
 13233                           ; Switch size 1, requested type "space"
 13234                           ; Number of cases is 1, Range of values is 1 to 1
 13235                           ; switch strategies available:
 13236                           ; Name         Instructions Cycles
 13237                           ; simple_byte            4     3 (average)
 13238                           ; direct_byte           11     9 (fixed)
 13239                           ; jumptable            263     9 (fixed)
 13240                           ;	Chosen strategy is simple_byte
 13241  1702  3A01               	xorlw	1	; case 1
 13242  1703  1903               	skipnz
 13243  1704  2EFA               	goto	l4175
 13244  1705  2F06               	goto	l675
 13245  1706                     l675:	
 13246  1706  0008               	return
 13247  1707                     __end_of_Led_SetLedPulseTime:	
 13248                           
 13249                           	psect	text63
 13250  17E7                     __ptext63:	
 13251 ;; *************** function _Led_SetLedBlinkTime *****************
 13252 ;; Defined at:
 13253 ;;		line 180 in file "../../../Framework/MercuryFwk/Source/c/03_Sml/02_Ssl/led.c"
 13254 ;; Parameters:    Size  Location     Type
 13255 ;;  Led             1    wreg     unsigned char 
 13256 ;;  OnTimeMs        2    0[BANK0 ] unsigned short 
 13257 ;;  OffTimeMs       2    2[BANK0 ] unsigned short 
 13258 ;; Auto vars:     Size  Location     Type
 13259 ;;  Led             1    4[COMMON] unsigned char 
 13260 ;; Return value:  Size  Location     Type
 13261 ;;                  1    wreg      void 
 13262 ;; Registers used:
 13263 ;;		wreg, fsr0l, fsr0h, status,2, status,0
 13264 ;; Tracked objects:
 13265 ;;		On entry : 0/0
 13266 ;;		On exit  : 0/0
 13267 ;;		Unchanged: 0/0
 13268 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13269 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13270 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13271 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13272 ;;      Totals:         1       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13273 ;;Total ram usage:        5 bytes
 13274 ;; Hardware stack levels used:    1
 13275 ;; Hardware stack levels required when called:    2
 13276 ;; This function calls:
 13277 ;;		Nothing
 13278 ;; This function is called by:
 13279 ;;		_SetLedBehavSts
 13280 ;; This function uses a non-reentrant model
 13281 ;;
 13282                           
 13283                           
 13284                           ;psect for function _Led_SetLedBlinkTime
 13285  17E7                     _Led_SetLedBlinkTime:	
 13286                           
 13287                           ;incstack = 0
 13288                           ; Regs used in _Led_SetLedBlinkTime: [wreg-fsr0h+status,2+status,0]
 13289                           ;Led_SetLedBlinkTime@Led stored from wreg
 13290  17E7  00F4               	movwf	Led_SetLedBlinkTime@Led
 13291                           
 13292                           ;led.c: 183: switch (Led)
 13293  17E8  2FFA               	goto	l4171
 13294  17E9                     l4167:	
 13295                           ;led.c: 184: {
 13296                           ;led.c: 185: case 1u:
 13297                           
 13298                           
 13299                           ;led.c: 186: Led1Blink.LedOnTimeMs = OnTimeMs;
 13300  17E9  0020               	movlb	0	; select bank0
 13301  17EA  0821               	movf	Led_SetLedBlinkTime@OnTimeMs+1,w
 13302  17EB  0022               	movlb	2	; select bank2
 13303  17EC  00EB               	movwf	((_Led1Blink+1)^(0+256)+4)
 13304  17ED  0020               	movlb	0	; select bank0
 13305  17EE  0820               	movf	Led_SetLedBlinkTime@OnTimeMs,w
 13306  17EF  0022               	movlb	2	; select bank2
 13307  17F0  00EA               	movwf	(_Led1Blink^(0+256)+4)
 13308                           
 13309                           ;led.c: 187: Led1Blink.LedOffTimeMs = OffTimeMs;
 13310  17F1  0020               	movlb	0	; select bank0
 13311  17F2  0823               	movf	Led_SetLedBlinkTime@OffTimeMs+1,w
 13312  17F3  0022               	movlb	2	; select bank2
 13313  17F4  00ED               	movwf	((_Led1Blink+1)^(0+256)+6)
 13314  17F5  0020               	movlb	0	; select bank0
 13315  17F6  0822               	movf	Led_SetLedBlinkTime@OffTimeMs,w
 13316  17F7  0022               	movlb	2	; select bank2
 13317  17F8  00EC               	movwf	(_Led1Blink^(0+256)+6)
 13318                           
 13319                           ;led.c: 192: }
 13320                           
 13321                           ;led.c: 191: break;
 13322                           
 13323                           ;led.c: 190: default:
 13324                           
 13325                           ;led.c: 188: break;
 13326  17F9  0008               	return
 13327  17FA                     l4171:	
 13328  17FA  0874               	movf	Led_SetLedBlinkTime@Led,w
 13329                           
 13330                           ; Switch size 1, requested type "space"
 13331                           ; Number of cases is 1, Range of values is 1 to 1
 13332                           ; switch strategies available:
 13333                           ; Name         Instructions Cycles
 13334                           ; simple_byte            4     3 (average)
 13335                           ; direct_byte           11     9 (fixed)
 13336                           ; jumptable            263     9 (fixed)
 13337                           ;	Chosen strategy is simple_byte
 13338  17FB  3A01               	xorlw	1	; case 1
 13339  17FC  1903               	skipnz
 13340  17FD  2FE9               	goto	l4167
 13341  17FE  2FFF               	goto	l668
 13342  17FF                     l668:	
 13343  17FF  0008               	return
 13344  1800                     __end_of_Led_SetLedBlinkTime:	
 13345                           
 13346                           	psect	text64
 13347  16CA                     __ptext64:	
 13348 ;; *************** function _LowPowerMode *****************
 13349 ;; Defined at:
 13350 ;;		line 161 in file "../../../Framework/MercuryFwk/Source/c/03_Sml/02_Ssl/std_ser.c"
 13351 ;; Parameters:    Size  Location     Type
 13352 ;;		None
 13353 ;; Auto vars:     Size  Location     Type
 13354 ;;		None
 13355 ;; Return value:  Size  Location     Type
 13356 ;;                  1    wreg      void 
 13357 ;; Registers used:
 13358 ;;		wreg, status,2, status,0, pclath, cstack
 13359 ;; Tracked objects:
 13360 ;;		On entry : 0/0
 13361 ;;		On exit  : 0/0
 13362 ;;		Unchanged: 0/0
 13363 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13364 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13365 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13366 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13367 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13368 ;;Total ram usage:        0 bytes
 13369 ;; Hardware stack levels used:    1
 13370 ;; Hardware stack levels required when called:    3
 13371 ;; This function calls:
 13372 ;;		_Mcu_SetWdgSts
 13373 ;; This function is called by:
 13374 ;;		_StdS_ManageStdServices
 13375 ;; This function uses a non-reentrant model
 13376 ;;
 13377                           
 13378                           
 13379                           ;psect for function _LowPowerMode
 13380  16CA                     _LowPowerMode:	
 13381                           
 13382                           ;std_ser.c: 164: LATA = 0x00;
 13383                           
 13384                           ;incstack = 0
 13385                           ; Regs used in _LowPowerMode: [wreg+status,2+status,0+pclath+cstack]
 13386  16CA  0022               	movlb	2	; select bank2
 13387  16CB  018C               	clrf	12	;volatile
 13388                           
 13389                           ;std_ser.c: 166: LATB = 0x00;
 13390  16CC  018D               	clrf	13	;volatile
 13391                           
 13392                           ;std_ser.c: 168: LATC = 0x00;
 13393  16CD  018E               	clrf	14	;volatile
 13394                           
 13395                           ;std_ser.c: 170: Mcu_SetWdgSts(((UINT8)(0)));
 13396  16CE  3000               	movlw	0
 13397  16CF  3196  2654  3196   	fcall	_Mcu_SetWdgSts
 13398  16D2  0063               	sleep	;# 
 13399                           
 13400                           ;std_ser.c: 177: Mcu_SetWdgSts(((UINT8)(1)));
 13401  16D3  3001               	movlw	1
 13402  16D4  3196  2654         	fcall	_Mcu_SetWdgSts
 13403  16D6  0008               	return
 13404  16D7                     __end_of_LowPowerMode:	
 13405                           
 13406                           	psect	text65
 13407  1654                     __ptext65:	
 13408 ;; *************** function _Mcu_SetWdgSts *****************
 13409 ;; Defined at:
 13410 ;;		line 237 in file "../../../Framework/MercuryFwk/Source/c/01_Hal/02_Drv/mcu_drv.c"
 13411 ;; Parameters:    Size  Location     Type
 13412 ;;  WdgSts          1    wreg     unsigned char 
 13413 ;; Auto vars:     Size  Location     Type
 13414 ;;  WdgSts          1    4[COMMON] unsigned char 
 13415 ;; Return value:  Size  Location     Type
 13416 ;;                  1    wreg      void 
 13417 ;; Registers used:
 13418 ;;		wreg, status,0
 13419 ;; Tracked objects:
 13420 ;;		On entry : 0/0
 13421 ;;		On exit  : 0/0
 13422 ;;		Unchanged: 0/0
 13423 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13424 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13425 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13426 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13427 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13428 ;;Total ram usage:        1 bytes
 13429 ;; Hardware stack levels used:    1
 13430 ;; Hardware stack levels required when called:    2
 13431 ;; This function calls:
 13432 ;;		Nothing
 13433 ;; This function is called by:
 13434 ;;		_LowPowerMode
 13435 ;;		_Wdg_MainTask
 13436 ;; This function uses a non-reentrant model
 13437 ;;
 13438                           
 13439                           
 13440                           ;psect for function _Mcu_SetWdgSts
 13441  1654                     _Mcu_SetWdgSts:	
 13442                           
 13443                           ;incstack = 0
 13444                           ; Regs used in _Mcu_SetWdgSts: [wreg+status,0]
 13445                           ;Mcu_SetWdgSts@WdgSts stored from wreg
 13446  1654  00F4               	movwf	Mcu_SetWdgSts@WdgSts
 13447                           
 13448                           ;mcu_drv.c: 240: WDTCONbits.SWDTEN = WdgSts;
 13449  1655  0C74               	rrf	Mcu_SetWdgSts@WdgSts,w
 13450  1656  0021               	movlb	1	; select bank1
 13451  1657  1C03               	skipc
 13452  1658  1017               	bcf	23,0	;volatile
 13453  1659  1803               	skipnc
 13454  165A  1417               	bsf	23,0	;volatile
 13455  165B  0008               	return
 13456  165C                     __end_of_Mcu_SetWdgSts:	
 13457                           
 13458                           	psect	text66
 13459  17CE                     __ptext66:	
 13460 ;; *************** function _GetDieTemperature *****************
 13461 ;; Defined at:
 13462 ;;		line 188 in file "../../../Framework/MercuryFwk/Source/c/03_Sml/02_Ssl/std_ser.c"
 13463 ;; Parameters:    Size  Location     Type
 13464 ;;		None
 13465 ;; Auto vars:     Size  Location     Type
 13466 ;;  DieTempRes      2    5[BANK0 ] unsigned short 
 13467 ;; Return value:  Size  Location     Type
 13468 ;;                  2    3[BANK0 ] unsigned short 
 13469 ;; Registers used:
 13470 ;;		wreg, status,2, status,0, pclath, cstack
 13471 ;; Tracked objects:
 13472 ;;		On entry : 0/0
 13473 ;;		On exit  : 0/0
 13474 ;;		Unchanged: 0/0
 13475 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13476 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13477 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13478 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13479 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13480 ;;Total ram usage:        4 bytes
 13481 ;; Hardware stack levels used:    1
 13482 ;; Hardware stack levels required when called:    3
 13483 ;; This function calls:
 13484 ;;		_Adc_GetConvResult
 13485 ;;		_Adc_GetConvSts
 13486 ;;		_Adc_SelectChannel
 13487 ;;		_Adc_StartConversion
 13488 ;; This function is called by:
 13489 ;;		_StdS_ManageStdServices
 13490 ;; This function uses a non-reentrant model
 13491 ;;
 13492                           
 13493                           
 13494                           ;psect for function _GetDieTemperature
 13495  17CE                     _GetDieTemperature:	
 13496                           
 13497                           ;std_ser.c: 190: UINT16 DieTempRes;
 13498                           ;std_ser.c: 193: Adc_SelectChannel(((UINT8)(29)));
 13499                           
 13500                           ;incstack = 0
 13501                           ; Regs used in _GetDieTemperature: [wreg+status,2+status,0+pclath+cstack]
 13502  17CE  301D               	movlw	29
 13503  17CF  3196  26A6  3197   	fcall	_Adc_SelectChannel
 13504                           
 13505                           ;std_ser.c: 195: Adc_StartConversion();
 13506  17D2  3196  263A  3197   	fcall	_Adc_StartConversion
 13507  17D5                     l4283:	
 13508                           ;std_ser.c: 197: while (Adc_GetConvSts() == AdcConvInProgress);
 13509                           
 13510  17D5  3196  2649  3197   	fcall	_Adc_GetConvSts
 13511  17D8  3A00               	xorlw	0
 13512  17D9  1903               	skipnz
 13513  17DA  2FD5               	goto	l4283
 13514                           
 13515                           ;std_ser.c: 199: DieTempRes = Adc_GetConvResult();
 13516  17DB  3196  26E7         	fcall	_Adc_GetConvResult
 13517  17DD  0875               	movf	?_Adc_GetConvResult+1,w
 13518  17DE  0020               	movlb	0	; select bank0
 13519  17DF  00A6               	movwf	GetDieTemperature@DieTempRes+1
 13520  17E0  0874               	movf	?_Adc_GetConvResult,w
 13521  17E1  00A5               	movwf	GetDieTemperature@DieTempRes
 13522                           
 13523                           ;std_ser.c: 201: return DieTempRes;
 13524  17E2  0826               	movf	GetDieTemperature@DieTempRes+1,w
 13525  17E3  00A4               	movwf	?_GetDieTemperature+1
 13526  17E4  0825               	movf	GetDieTemperature@DieTempRes,w
 13527  17E5  00A3               	movwf	?_GetDieTemperature
 13528  17E6  0008               	return
 13529  17E7                     __end_of_GetDieTemperature:	
 13530                           
 13531                           	psect	text67
 13532  163A                     __ptext67:	
 13533 ;; *************** function _Adc_StartConversion *****************
 13534 ;; Defined at:
 13535 ;;		line 144 in file "../../../Framework/MercuryFwk/Source/c/01_Hal/02_Drv/adc_drv.c"
 13536 ;; Parameters:    Size  Location     Type
 13537 ;;		None
 13538 ;; Auto vars:     Size  Location     Type
 13539 ;;		None
 13540 ;; Return value:  Size  Location     Type
 13541 ;;                  1    wreg      void 
 13542 ;; Registers used:
 13543 ;;		None
 13544 ;; Tracked objects:
 13545 ;;		On entry : 0/0
 13546 ;;		On exit  : 0/0
 13547 ;;		Unchanged: 0/0
 13548 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13549 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13550 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13551 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13552 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13553 ;;Total ram usage:        0 bytes
 13554 ;; Hardware stack levels used:    1
 13555 ;; Hardware stack levels required when called:    2
 13556 ;; This function calls:
 13557 ;;		Nothing
 13558 ;; This function is called by:
 13559 ;;		_GetDieTemperature
 13560 ;; This function uses a non-reentrant model
 13561 ;;
 13562                           
 13563                           
 13564                           ;psect for function _Adc_StartConversion
 13565  163A                     _Adc_StartConversion:	
 13566                           
 13567                           ;adc_drv.c: 147: ADCON0bits.GO_nDONE = ((UINT8)(1));
 13568                           
 13569                           ;incstack = 0
 13570                           ; Regs used in _Adc_StartConversion: []
 13571  163A  0021               	movlb	1	; select bank1
 13572  163B  149D               	bsf	29,1	;volatile
 13573  163C  0008               	return
 13574  163D                     __end_of_Adc_StartConversion:	
 13575                           
 13576                           	psect	text68
 13577  16A6                     __ptext68:	
 13578 ;; *************** function _Adc_SelectChannel *****************
 13579 ;; Defined at:
 13580 ;;		line 130 in file "../../../Framework/MercuryFwk/Source/c/01_Hal/02_Drv/adc_drv.c"
 13581 ;; Parameters:    Size  Location     Type
 13582 ;;  SelCh           1    wreg     unsigned char 
 13583 ;; Auto vars:     Size  Location     Type
 13584 ;;  SelCh           1    5[COMMON] unsigned char 
 13585 ;; Return value:  Size  Location     Type
 13586 ;;                  1    wreg      void 
 13587 ;; Registers used:
 13588 ;;		wreg, status,2, status,0
 13589 ;; Tracked objects:
 13590 ;;		On entry : 0/0
 13591 ;;		On exit  : 0/0
 13592 ;;		Unchanged: 0/0
 13593 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13594 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13595 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13596 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13597 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13598 ;;Total ram usage:        2 bytes
 13599 ;; Hardware stack levels used:    1
 13600 ;; Hardware stack levels required when called:    2
 13601 ;; This function calls:
 13602 ;;		Nothing
 13603 ;; This function is called by:
 13604 ;;		_GetDieTemperature
 13605 ;; This function uses a non-reentrant model
 13606 ;;
 13607                           
 13608                           
 13609                           ;psect for function _Adc_SelectChannel
 13610  16A6                     _Adc_SelectChannel:	
 13611                           
 13612                           ;incstack = 0
 13613                           ; Regs used in _Adc_SelectChannel: [wreg+status,2+status,0]
 13614                           ;Adc_SelectChannel@SelCh stored from wreg
 13615  16A6  00F5               	movwf	Adc_SelectChannel@SelCh
 13616                           
 13617                           ;adc_drv.c: 133: ADCON0bits.CHS = SelCh;
 13618  16A7  0875               	movf	Adc_SelectChannel@SelCh,w
 13619  16A8  00F4               	movwf	??_Adc_SelectChannel
 13620  16A9  0DF4               	rlf	??_Adc_SelectChannel,f
 13621  16AA  0DF4               	rlf	??_Adc_SelectChannel,f
 13622  16AB  0021               	movlb	1	; select bank1
 13623  16AC  081D               	movf	29,w	;volatile
 13624  16AD  0674               	xorwf	??_Adc_SelectChannel,w
 13625  16AE  3983               	andlw	-125
 13626  16AF  0674               	xorwf	??_Adc_SelectChannel,w
 13627  16B0  009D               	movwf	29	;volatile
 13628  16B1  0008               	return
 13629  16B2                     __end_of_Adc_SelectChannel:	
 13630                           
 13631                           	psect	text69
 13632  1649                     __ptext69:	
 13633 ;; *************** function _Adc_GetConvSts *****************
 13634 ;; Defined at:
 13635 ;;		line 158 in file "../../../Framework/MercuryFwk/Source/c/01_Hal/02_Drv/adc_drv.c"
 13636 ;; Parameters:    Size  Location     Type
 13637 ;;		None
 13638 ;; Auto vars:     Size  Location     Type
 13639 ;;		None
 13640 ;; Return value:  Size  Location     Type
 13641 ;;                  1    wreg      enum E3651
 13642 ;; Registers used:
 13643 ;;		wreg, status,2, status,0
 13644 ;; Tracked objects:
 13645 ;;		On entry : 0/0
 13646 ;;		On exit  : 0/0
 13647 ;;		Unchanged: 0/0
 13648 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13649 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13650 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13651 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13652 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13653 ;;Total ram usage:        0 bytes
 13654 ;; Hardware stack levels used:    1
 13655 ;; Hardware stack levels required when called:    2
 13656 ;; This function calls:
 13657 ;;		Nothing
 13658 ;; This function is called by:
 13659 ;;		_GetDieTemperature
 13660 ;; This function uses a non-reentrant model
 13661 ;;
 13662                           
 13663                           
 13664                           ;psect for function _Adc_GetConvSts
 13665  1649                     _Adc_GetConvSts:	
 13666                           
 13667                           ;adc_drv.c: 161: return ((AdcConvStsType)(ADCON0bits.GO_nDONE));
 13668                           
 13669                           ;incstack = 0
 13670                           ; Regs used in _Adc_GetConvSts: [wreg+status,2+status,0]
 13671  1649  0021               	movlb	1	; select bank1
 13672  164A  0C1D               	rrf	29,w	;volatile
 13673  164B  3901               	andlw	1
 13674  164C  0008               	return
 13675  164D                     __end_of_Adc_GetConvSts:	
 13676                           
 13677                           	psect	text70
 13678  16E7                     __ptext70:	
 13679 ;; *************** function _Adc_GetConvResult *****************
 13680 ;; Defined at:
 13681 ;;		line 172 in file "../../../Framework/MercuryFwk/Source/c/01_Hal/02_Drv/adc_drv.c"
 13682 ;; Parameters:    Size  Location     Type
 13683 ;;		None
 13684 ;; Auto vars:     Size  Location     Type
 13685 ;;  AdcResult       2    1[BANK0 ] unsigned short 
 13686 ;; Return value:  Size  Location     Type
 13687 ;;                  2    4[COMMON] unsigned short 
 13688 ;; Registers used:
 13689 ;;		wreg, status,2, status,0
 13690 ;; Tracked objects:
 13691 ;;		On entry : 0/0
 13692 ;;		On exit  : 0/0
 13693 ;;		Unchanged: 0/0
 13694 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13695 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13696 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13697 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13698 ;;      Totals:         2       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13699 ;;Total ram usage:        5 bytes
 13700 ;; Hardware stack levels used:    1
 13701 ;; Hardware stack levels required when called:    2
 13702 ;; This function calls:
 13703 ;;		Nothing
 13704 ;; This function is called by:
 13705 ;;		_GetDieTemperature
 13706 ;; This function uses a non-reentrant model
 13707 ;;
 13708                           
 13709                           
 13710                           ;psect for function _Adc_GetConvResult
 13711  16E7                     _Adc_GetConvResult:	
 13712                           
 13713                           ;adc_drv.c: 174: UINT16 AdcResult;
 13714                           ;adc_drv.c: 177: AdcResult = (((ADRESH & 0x03) << 8) | ADRESL);
 13715                           
 13716                           ;incstack = 0
 13717                           ; Regs used in _Adc_GetConvResult: [wreg+status,2+status,0]
 13718  16E7  3003               	movlw	3
 13719  16E8  0021               	movlb	1	; select bank1
 13720  16E9  051C               	andwf	28,w	;volatile
 13721  16EA  0020               	movlb	0	; select bank0
 13722  16EB  00A0               	movwf	??_Adc_GetConvResult
 13723  16EC  0820               	movf	??_Adc_GetConvResult,w
 13724  16ED  00A2               	movwf	Adc_GetConvResult@AdcResult+1
 13725  16EE  0021               	movlb	1	; select bank1
 13726  16EF  081B               	movf	27,w	;volatile
 13727  16F0  0020               	movlb	0	; select bank0
 13728  16F1  00A1               	movwf	Adc_GetConvResult@AdcResult
 13729                           
 13730                           ;adc_drv.c: 179: return AdcResult;
 13731  16F2  0822               	movf	Adc_GetConvResult@AdcResult+1,w
 13732  16F3  00F5               	movwf	?_Adc_GetConvResult+1
 13733  16F4  0821               	movf	Adc_GetConvResult@AdcResult,w
 13734  16F5  00F4               	movwf	?_Adc_GetConvResult
 13735  16F6  0008               	return
 13736  16F7                     __end_of_Adc_GetConvResult:	
 13737                           
 13738                           	psect	text71
 13739  08F8                     __ptext71:	
 13740 ;; *************** function _GenerateEvt *****************
 13741 ;; Defined at:
 13742 ;;		line 73 in file "../../../Framework/MercuryFwk/Source/c/02_Osl/os_ser.c"
 13743 ;; Parameters:    Size  Location     Type
 13744 ;;  Event           1    wreg     PTR struct _EventStructu
 13745 ;;		 -> I2cReplyPacketReady(2), I2cWriteRequest(2), I2cSetAddress(2), I2cNewTxNotification(2), 
 13746 ;;		 -> I2cNewPacketNotification(2), 
 13747 ;; Auto vars:     Size  Location     Type
 13748 ;;  Event           1    1[BANK0 ] PTR struct _EventStructu
 13749 ;;		 -> I2cReplyPacketReady(2), I2cWriteRequest(2), I2cSetAddress(2), I2cNewTxNotification(2), 
 13750 ;;		 -> I2cNewPacketNotification(2), 
 13751 ;;  EventStatus     1    0[BANK0 ] enum E3629
 13752 ;; Return value:  Size  Location     Type
 13753 ;;                  1    wreg      enum E3625
 13754 ;; Registers used:
 13755 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 13756 ;; Tracked objects:
 13757 ;;		On entry : 0/0
 13758 ;;		On exit  : 0/0
 13759 ;;		Unchanged: 0/0
 13760 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13761 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13762 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13763 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13764 ;;      Totals:         1       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13765 ;;Total ram usage:        3 bytes
 13766 ;; Hardware stack levels used:    1
 13767 ;; Hardware stack levels required when called:    2
 13768 ;; This function calls:
 13769 ;;		Nothing
 13770 ;; This function is called by:
 13771 ;;		_I2c_DataReceiveSm
 13772 ;;		_I2cSlv_I2cDrvHandle
 13773 ;;		_StdS_ManageStdServices
 13774 ;;		_ManageProtocol
 13775 ;;		_AppSm
 13776 ;; This function uses a non-reentrant model
 13777 ;;
 13778                           
 13779                           
 13780                           ;psect for function _GenerateEvt
 13781  08F8                     _GenerateEvt:	
 13782                           
 13783                           ;incstack = 0
 13784                           ; Regs used in _GenerateEvt: [wreg+fsr1l+fsr1h+status,2+status,0]
 13785                           ;GenerateEvt@Event stored from wreg
 13786  08F8  0020               	movlb	0	; select bank0
 13787  08F9  00A1               	movwf	GenerateEvt@Event
 13788                           
 13789                           ;os_ser.c: 76: EventStatusType EventStatus = EventIdle;
 13790  08FA  01A0               	clrf	GenerateEvt@EventStatus
 13791                           
 13792                           ;os_ser.c: 78: if ((Event->EventOptions != ((UINT8)(2))) && (Event->EventOptions != ((UI
      +                          NT8)(3))))
 13793  08FB  0821               	movf	GenerateEvt@Event,w
 13794  08FC  0086               	movwf	6
 13795  08FD  0187               	clrf	7
 13796  08FE  3002               	movlw	2
 13797  08FF  0601               	xorwf	1,w
 13798  0900  1903               	btfsc	3,2
 13799  0901  2915               	goto	l4239
 13800  0902  0821               	movf	GenerateEvt@Event,w
 13801  0903  0086               	movwf	6
 13802  0904  0187               	clrf	7
 13803  0905  3003               	movlw	3
 13804  0906  0601               	xorwf	1,w
 13805  0907  1903               	btfsc	3,2
 13806  0908  2915               	goto	l4239
 13807                           
 13808                           ;os_ser.c: 79: {
 13809                           ;os_ser.c: 81: Event->EventStatus = EventSent;
 13810  0909  3002               	movlw	2
 13811  090A  00F4               	movwf	??_GenerateEvt
 13812  090B  0A21               	incf	GenerateEvt@Event,w
 13813  090C  0086               	movwf	6
 13814  090D  0187               	clrf	7
 13815  090E  0874               	movf	??_GenerateEvt,w
 13816  090F  0081               	movwf	1
 13817                           
 13818                           ;os_ser.c: 83: EventStatus = EventSent;
 13819  0910  3002               	movlw	2
 13820  0911  00F4               	movwf	??_GenerateEvt
 13821  0912  0874               	movf	??_GenerateEvt,w
 13822  0913  00A0               	movwf	GenerateEvt@EventStatus
 13823                           
 13824                           ;os_ser.c: 84: }
 13825  0914  0008               	return
 13826  0915                     l4239:	
 13827                           
 13828                           ;os_ser.c: 85: else
 13829                           ;os_ser.c: 86: {
 13830                           ;os_ser.c: 88: EventStatus = EventNotSent;
 13831  0915  3003               	movlw	3
 13832  0916  00F4               	movwf	??_GenerateEvt
 13833  0917  0874               	movf	??_GenerateEvt,w
 13834  0918  00A0               	movwf	GenerateEvt@EventStatus
 13835  0919  0008               	return
 13836  091A                     __end_of_GenerateEvt:	
 13837                           ;os_ser.c: 89: }
 13838                           ;os_ser.c: 92: return(EventStatus);
 13839                           ;	Return value of _GenerateEvt is never used
 13840                           
 13841                           
 13842                           	psect	text72
 13843  1738                     __ptext72:	
 13844 ;; *************** function _ControlLedDirect *****************
 13845 ;; Defined at:
 13846 ;;		line 122 in file "../../../Framework/MercuryFwk/Source/c/03_Sml/02_Ssl/std_ser.c"
 13847 ;; Parameters:    Size  Location     Type
 13848 ;;		None
 13849 ;; Auto vars:     Size  Location     Type
 13850 ;;		None
 13851 ;; Return value:  Size  Location     Type
 13852 ;;                  1    wreg      void 
 13853 ;; Registers used:
 13854 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
 13855 ;; Tracked objects:
 13856 ;;		On entry : 0/0
 13857 ;;		On exit  : 0/0
 13858 ;;		Unchanged: 0/0
 13859 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13860 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13861 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13862 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13863 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13864 ;;Total ram usage:        0 bytes
 13865 ;; Hardware stack levels used:    1
 13866 ;; Hardware stack levels required when called:    3
 13867 ;; This function calls:
 13868 ;;		_Led_SetLedStatus
 13869 ;; This function is called by:
 13870 ;;		_StdS_ManageStdServices
 13871 ;; This function uses a non-reentrant model
 13872 ;;
 13873                           
 13874                           
 13875                           ;psect for function _ControlLedDirect
 13876  1738                     _ControlLedDirect:	
 13877                           
 13878                           ;std_ser.c: 125: if (LedBehaviourSts == ((UINT8)(3)))
 13879                           
 13880                           ;incstack = 0
 13881                           ; Regs used in _ControlLedDirect: [wreg-fsr0h+status,2+status,0+pclath+cstack]
 13882  1738  3003               	movlw	3
 13883  1739  0679               	xorwf	_LedBehaviourSts,w
 13884  173A  1D03               	btfss	3,2
 13885  173B  0008               	return
 13886                           
 13887                           ;std_ser.c: 126: {
 13888                           ;std_ser.c: 128: if (CmdBuffer[((UINT8)(1))] == ((UINT8)(1)))
 13889  173C  0024               	movlb	4	; select bank4
 13890  173D  0321               	decf	(_CmdBuffer^(0+512)+1),w
 13891  173E  1D03               	btfss	3,2
 13892  173F  2F46               	goto	l4277
 13893                           
 13894                           ;std_ser.c: 129: {
 13895                           ;std_ser.c: 130: Led_SetLedStatus(1u,LED_STS_ON);
 13896  1740  01F4               	clrf	Led_SetLedStatus@LedSts
 13897  1741  0AF4               	incf	Led_SetLedStatus@LedSts,f
 13898  1742  3001               	movlw	1
 13899  1743  3196  26D7         	fcall	_Led_SetLedStatus
 13900                           
 13901                           ;std_ser.c: 131: }
 13902  1745  0008               	return
 13903  1746                     l4277:	
 13904                           
 13905                           ;std_ser.c: 132: else
 13906                           ;std_ser.c: 133: {
 13907                           ;std_ser.c: 134: Led_SetLedStatus(1u,LED_STS_OFF);
 13908  1746  01F4               	clrf	Led_SetLedStatus@LedSts
 13909  1747  3001               	movlw	1
 13910  1748  3196  26D7         	fcall	_Led_SetLedStatus
 13911  174A  0008               	return
 13912  174B                     __end_of_ControlLedDirect:	
 13913                           
 13914                           	psect	text73
 13915  16D7                     __ptext73:	
 13916 ;; *************** function _Led_SetLedStatus *****************
 13917 ;; Defined at:
 13918 ;;		line 156 in file "../../../Framework/MercuryFwk/Source/c/03_Sml/02_Ssl/led.c"
 13919 ;; Parameters:    Size  Location     Type
 13920 ;;  Led             1    wreg     unsigned char 
 13921 ;;  LedSts          1    4[COMMON] unsigned char 
 13922 ;; Auto vars:     Size  Location     Type
 13923 ;;  Led             1    0[BANK0 ] unsigned char 
 13924 ;; Return value:  Size  Location     Type
 13925 ;;                  1    wreg      void 
 13926 ;; Registers used:
 13927 ;;		wreg, fsr0l, fsr0h, status,2, status,0
 13928 ;; Tracked objects:
 13929 ;;		On entry : 0/0
 13930 ;;		On exit  : 0/0
 13931 ;;		Unchanged: 0/0
 13932 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13933 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13934 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13935 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13936 ;;      Totals:         2       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13937 ;;Total ram usage:        3 bytes
 13938 ;; Hardware stack levels used:    1
 13939 ;; Hardware stack levels required when called:    2
 13940 ;; This function calls:
 13941 ;;		Nothing
 13942 ;; This function is called by:
 13943 ;;		_LedPulseStateMachine
 13944 ;;		_I2cSlv_I2cDrvHandle
 13945 ;;		_SetLedBehavSts
 13946 ;;		_ControlLedDirect
 13947 ;; This function uses a non-reentrant model
 13948 ;;
 13949                           
 13950                           
 13951                           ;psect for function _Led_SetLedStatus
 13952  16D7                     _Led_SetLedStatus:	
 13953                           
 13954                           ;incstack = 0
 13955                           ; Regs used in _Led_SetLedStatus: [wreg-fsr0h+status,2+status,0]
 13956                           ;Led_SetLedStatus@Led stored from wreg
 13957  16D7  0020               	movlb	0	; select bank0
 13958  16D8  00A0               	movwf	Led_SetLedStatus@Led
 13959                           
 13960                           ;led.c: 159: switch (Led)
 13961  16D9  2EE0               	goto	l4163
 13962  16DA                     l4159:	
 13963                           ;led.c: 160: {
 13964                           ;led.c: 161: case 1u:
 13965                           
 13966                           
 13967                           ;led.c: 162: Led1Sts = LedSts;
 13968  16DA  0874               	movf	Led_SetLedStatus@LedSts,w
 13969  16DB  00F5               	movwf	??_Led_SetLedStatus
 13970  16DC  0875               	movf	??_Led_SetLedStatus,w
 13971  16DD  0021               	movlb	1	; select bank1
 13972  16DE  00EA               	movwf	_Led1Sts^(0+128)
 13973                           
 13974                           ;led.c: 167: }
 13975                           
 13976                           ;led.c: 166: break;
 13977                           
 13978                           ;led.c: 165: default:
 13979                           
 13980                           ;led.c: 163: break;
 13981  16DF  0008               	return
 13982  16E0                     l4163:	
 13983  16E0  0020               	movlb	0	; select bank0
 13984  16E1  0820               	movf	Led_SetLedStatus@Led,w
 13985                           
 13986                           ; Switch size 1, requested type "space"
 13987                           ; Number of cases is 1, Range of values is 1 to 1
 13988                           ; switch strategies available:
 13989                           ; Name         Instructions Cycles
 13990                           ; simple_byte            4     3 (average)
 13991                           ; direct_byte           11     9 (fixed)
 13992                           ; jumptable            263     9 (fixed)
 13993                           ;	Chosen strategy is simple_byte
 13994  16E2  3A01               	xorlw	1	; case 1
 13995  16E3  1903               	skipnz
 13996  16E4  2EDA               	goto	l4159
 13997  16E5  2EE6               	goto	l661
 13998  16E6                     l661:	
 13999  16E6  0008               	return
 14000  16E7                     __end_of_Led_SetLedStatus:	
 14001                           
 14002                           	psect	text74
 14003  1637                     __ptext74:	
 14004 ;; *************** function _BoardReset *****************
 14005 ;; Defined at:
 14006 ;;		line 147 in file "../../../Framework/MercuryFwk/Source/c/03_Sml/02_Ssl/std_ser.c"
 14007 ;; Parameters:    Size  Location     Type
 14008 ;;		None
 14009 ;; Auto vars:     Size  Location     Type
 14010 ;;		None
 14011 ;; Return value:  Size  Location     Type
 14012 ;;                  1    wreg      void 
 14013 ;; Registers used:
 14014 ;;		status,2, status,0, pclath, cstack
 14015 ;; Tracked objects:
 14016 ;;		On entry : 0/0
 14017 ;;		On exit  : 0/0
 14018 ;;		Unchanged: 0/0
 14019 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14020 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14021 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14022 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14023 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14024 ;;Total ram usage:        0 bytes
 14025 ;; Hardware stack levels used:    1
 14026 ;; Hardware stack levels required when called:    3
 14027 ;; This function calls:
 14028 ;;		_Mcu_Reset
 14029 ;; This function is called by:
 14030 ;;		_StdS_ManageStdServices
 14031 ;; This function uses a non-reentrant model
 14032 ;;
 14033                           
 14034                           
 14035                           ;psect for function _BoardReset
 14036  1637                     _BoardReset:	
 14037                           
 14038                           ;std_ser.c: 150: Mcu_Reset();
 14039                           
 14040                           ;incstack = 0
 14041                           ; Regs used in _BoardReset: [status,2+status,0+pclath+cstack]
 14042  1637  3196  2633         	fcall	_Mcu_Reset
 14043  1639  0008               	return
 14044  163A                     __end_of_BoardReset:	
 14045                           
 14046                           	psect	text75
 14047  1633                     __ptext75:	
 14048 ;; *************** function _Mcu_Reset *****************
 14049 ;; Defined at:
 14050 ;;		line 293 in file "../../../Framework/MercuryFwk/Source/c/01_Hal/02_Drv/mcu_drv.c"
 14051 ;; Parameters:    Size  Location     Type
 14052 ;;		None
 14053 ;; Auto vars:     Size  Location     Type
 14054 ;;		None
 14055 ;; Return value:  Size  Location     Type
 14056 ;;                  2   75[None  ] int 
 14057 ;; Registers used:
 14058 ;;		None
 14059 ;; Tracked objects:
 14060 ;;		On entry : 0/0
 14061 ;;		On exit  : 0/0
 14062 ;;		Unchanged: 0/0
 14063 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14064 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14065 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14066 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14067 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14068 ;;Total ram usage:        0 bytes
 14069 ;; Hardware stack levels used:    1
 14070 ;; Hardware stack levels required when called:    2
 14071 ;; This function calls:
 14072 ;;		Nothing
 14073 ;; This function is called by:
 14074 ;;		_I2c_DataReceiveSm
 14075 ;;		_BoardReset
 14076 ;; This function uses a non-reentrant model
 14077 ;;
 14078                           
 14079                           
 14080                           ;psect for function _Mcu_Reset
 14081  1633                     _Mcu_Reset:	
 14082                           
 14083                           ;incstack = 0
 14084                           ; Regs used in _Mcu_Reset: []
 14085  1633  0001               	reset	;# 
 14086  1634  0008               	return
 14087  1635                     __end_of_Mcu_Reset:	
 14088                           
 14089                           	psect	text76
 14090  0859                     __ptext76:	
 14091 ;; *************** function _SetBuffer *****************
 14092 ;; Defined at:
 14093 ;;		line 145 in file "../../../Framework/MercuryFwk/Source/c/03_Sml/02_Ssl/sf.c"
 14094 ;; Parameters:    Size  Location     Type
 14095 ;;  Buffer          1    wreg     PTR unsigned char 
 14096 ;;		 -> HumidityStr(5), TemperatureStr(5), 
 14097 ;;  Value           1    0[BANK0 ] unsigned char 
 14098 ;;  Len             2    1[BANK0 ] unsigned short 
 14099 ;; Auto vars:     Size  Location     Type
 14100 ;;  Buffer          1    3[BANK0 ] PTR unsigned char 
 14101 ;;		 -> HumidityStr(5), TemperatureStr(5), 
 14102 ;;  Index           1    4[BANK0 ] unsigned char 
 14103 ;; Return value:  Size  Location     Type
 14104 ;;                  1    wreg      void 
 14105 ;; Registers used:
 14106 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 14107 ;; Tracked objects:
 14108 ;;		On entry : 0/0
 14109 ;;		On exit  : 0/0
 14110 ;;		Unchanged: 0/0
 14111 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14112 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14113 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14114 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14115 ;;      Totals:         2       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14116 ;;Total ram usage:        7 bytes
 14117 ;; Hardware stack levels used:    1
 14118 ;; Hardware stack levels required when called:    2
 14119 ;; This function calls:
 14120 ;;		Nothing
 14121 ;; This function is called by:
 14122 ;;		_ManageProtocol
 14123 ;; This function uses a non-reentrant model
 14124 ;;
 14125                           
 14126                           
 14127                           ;psect for function _SetBuffer
 14128  0859                     _SetBuffer:	
 14129                           
 14130                           ;incstack = 0
 14131                           ; Regs used in _SetBuffer: [wreg+fsr1l+fsr1h+status,2+status,0]
 14132                           ;SetBuffer@Buffer stored from wreg
 14133  0859  0020               	movlb	0	; select bank0
 14134  085A  00A3               	movwf	SetBuffer@Buffer
 14135                           
 14136                           ;sf.c: 147: UINT8 Index = 0;
 14137  085B  01A4               	clrf	SetBuffer@Index
 14138                           
 14139                           ;sf.c: 150: for (Index = 0; Index <= Len; Index++)
 14140  085C  01A4               	clrf	SetBuffer@Index
 14141  085D                     l4369:	
 14142  085D  0824               	movf	SetBuffer@Index,w
 14143  085E  00F4               	movwf	??_SetBuffer
 14144  085F  01F5               	clrf	??_SetBuffer+1
 14145  0860  0875               	movf	??_SetBuffer+1,w
 14146  0861  0222               	subwf	SetBuffer@Len+1,w
 14147  0862  1D03               	skipz
 14148  0863  2866               	goto	u3635
 14149  0864  0874               	movf	??_SetBuffer,w
 14150  0865  0221               	subwf	SetBuffer@Len,w
 14151  0866                     u3635:	
 14152  0866  1C03               	btfss	3,0
 14153  0867  0008               	return
 14154                           
 14155                           ;sf.c: 151: {
 14156                           ;sf.c: 152: *(Buffer + Index) = Value;
 14157  0868  0820               	movf	SetBuffer@Value,w
 14158  0869  00F4               	movwf	??_SetBuffer
 14159  086A  0824               	movf	SetBuffer@Index,w
 14160  086B  0723               	addwf	SetBuffer@Buffer,w
 14161  086C  00F5               	movwf	??_SetBuffer+1
 14162  086D  0875               	movf	??_SetBuffer+1,w
 14163  086E  0086               	movwf	6
 14164  086F  0187               	clrf	7
 14165  0870  0874               	movf	??_SetBuffer,w
 14166  0871  0081               	movwf	1
 14167  0872  3001               	movlw	1
 14168  0873  00F4               	movwf	??_SetBuffer
 14169  0874  0874               	movf	??_SetBuffer,w
 14170  0875  07A4               	addwf	SetBuffer@Index,f
 14171  0876  285D               	goto	l4369
 14172  0877                     __end_of_SetBuffer:	
 14173                           
 14174                           	psect	text77
 14175  08B6                     __ptext77:	
 14176 ;; *************** function _ReceiveEvt *****************
 14177 ;; Defined at:
 14178 ;;		line 103 in file "../../../Framework/MercuryFwk/Source/c/02_Osl/os_ser.c"
 14179 ;; Parameters:    Size  Location     Type
 14180 ;;  Event           1    wreg     PTR struct _EventStructu
 14181 ;;		 -> I2cReplyPacketReady(2), I2cWriteRequest(2), I2cSetAddress(2), I2cNewTxNotification(2), 
 14182 ;;		 -> I2cNewPacketNotification(2), 
 14183 ;; Auto vars:     Size  Location     Type
 14184 ;;  Event           1    5[COMMON] PTR struct _EventStructu
 14185 ;;		 -> I2cReplyPacketReady(2), I2cWriteRequest(2), I2cSetAddress(2), I2cNewTxNotification(2), 
 14186 ;;		 -> I2cNewPacketNotification(2), 
 14187 ;;  EventStatus     1    4[COMMON] enum E3629
 14188 ;; Return value:  Size  Location     Type
 14189 ;;                  1    wreg      enum E3625
 14190 ;; Registers used:
 14191 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 14192 ;; Tracked objects:
 14193 ;;		On entry : 0/0
 14194 ;;		On exit  : 0/0
 14195 ;;		Unchanged: 0/0
 14196 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14197 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14198 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14199 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14200 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14201 ;;Total ram usage:        2 bytes
 14202 ;; Hardware stack levels used:    1
 14203 ;; Hardware stack levels required when called:    2
 14204 ;; This function calls:
 14205 ;;		Nothing
 14206 ;; This function is called by:
 14207 ;;		_I2c_DataReceiveSm
 14208 ;;		_I2cSlv_I2cDrvHandle
 14209 ;;		_ManageProtocol
 14210 ;; This function uses a non-reentrant model
 14211 ;;
 14212                           
 14213                           
 14214                           ;psect for function _ReceiveEvt
 14215  08B6                     _ReceiveEvt:	
 14216                           
 14217                           ;incstack = 0
 14218                           ; Regs used in _ReceiveEvt: [wreg+fsr1l+fsr1h+status,2+status,0]
 14219                           ;ReceiveEvt@Event stored from wreg
 14220  08B6  00F5               	movwf	ReceiveEvt@Event
 14221                           
 14222                           ;os_ser.c: 106: EventStatusType EventStatus = EventIdle;
 14223  08B7  01F4               	clrf	ReceiveEvt@EventStatus
 14224                           
 14225                           ;os_ser.c: 108: if ((Event->EventOptions != ((UINT8)(1))) && (Event->EventOptions != ((U
      +                          INT8)(3))))
 14226  08B8  0875               	movf	ReceiveEvt@Event,w
 14227  08B9  0086               	movwf	6
 14228  08BA  0187               	clrf	7
 14229  08BB  0301               	decf	1,w
 14230  08BC  1903               	btfsc	3,2
 14231  08BD  28D5               	goto	l4335
 14232  08BE  0875               	movf	ReceiveEvt@Event,w
 14233  08BF  0086               	movwf	6
 14234  08C0  0187               	clrf	7
 14235  08C1  3003               	movlw	3
 14236  08C2  0601               	xorwf	1,w
 14237  08C3  1903               	btfsc	3,2
 14238  08C4  28D5               	goto	l4335
 14239                           
 14240                           ;os_ser.c: 109: {
 14241                           ;os_ser.c: 111: if (Event->EventStatus == EventSent)
 14242  08C5  0A75               	incf	ReceiveEvt@Event,w
 14243  08C6  0086               	movwf	6
 14244  08C7  0187               	clrf	7
 14245  08C8  3002               	movlw	2
 14246  08C9  0601               	xorwf	1,w
 14247  08CA  1D03               	btfss	3,2
 14248  08CB  28D4               	goto	l4333
 14249                           
 14250                           ;os_ser.c: 112: {
 14251                           ;os_ser.c: 114: Event->EventStatus = EventReceived;
 14252  08CC  0A75               	incf	ReceiveEvt@Event,w
 14253  08CD  0086               	movwf	6
 14254  08CE  0187               	clrf	7
 14255  08CF  0181               	clrf	1
 14256  08D0  0A81               	incf	1,f
 14257                           
 14258                           ;os_ser.c: 116: EventStatus = EventReceived;
 14259  08D1  01F4               	clrf	ReceiveEvt@EventStatus
 14260  08D2  0AF4               	incf	ReceiveEvt@EventStatus,f
 14261                           
 14262                           ;os_ser.c: 117: }
 14263  08D3  28D5               	goto	l4335
 14264  08D4                     l4333:	
 14265                           
 14266                           ;os_ser.c: 118: else
 14267                           ;os_ser.c: 119: {
 14268                           ;os_ser.c: 121: EventStatus = EventIdle;
 14269  08D4  01F4               	clrf	ReceiveEvt@EventStatus
 14270  08D5                     l4335:	
 14271                           
 14272                           ;os_ser.c: 122: }
 14273                           ;os_ser.c: 123: }
 14274                           ;os_ser.c: 126: return(EventStatus);
 14275  08D5  0874               	movf	ReceiveEvt@EventStatus,w
 14276  08D6  0008               	return
 14277  08D7                     __end_of_ReceiveEvt:	
 14278                           
 14279                           	psect	text78
 14280  0B50                     __ptext78:	
 14281 ;; *************** function _Adc_InitAdcModule *****************
 14282 ;; Defined at:
 14283 ;;		line 107 in file "../../../Framework/MercuryFwk/Source/c/01_Hal/02_Drv/adc_drv.c"
 14284 ;; Parameters:    Size  Location     Type
 14285 ;;  AdcConfig       1    wreg     PTR struct _AdcCfgType
 14286 ;;		 -> App_MainTask@AdcConfig(6), 
 14287 ;; Auto vars:     Size  Location     Type
 14288 ;;  AdcConfig       1    4[COMMON] PTR struct _AdcCfgType
 14289 ;;		 -> App_MainTask@AdcConfig(6), 
 14290 ;; Return value:  Size  Location     Type
 14291 ;;                  1    wreg      void 
 14292 ;; Registers used:
 14293 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 14294 ;; Tracked objects:
 14295 ;;		On entry : 0/0
 14296 ;;		On exit  : 0/0
 14297 ;;		Unchanged: 0/0
 14298 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14299 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14300 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14301 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14302 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14303 ;;Total ram usage:        1 bytes
 14304 ;; Hardware stack levels used:    1
 14305 ;; Hardware stack levels required when called:    2
 14306 ;; This function calls:
 14307 ;;		Nothing
 14308 ;; This function is called by:
 14309 ;;		_App_MainTask
 14310 ;; This function uses a non-reentrant model
 14311 ;;
 14312                           
 14313                           
 14314                           ;psect for function _Adc_InitAdcModule
 14315  0B50                     _Adc_InitAdcModule:	
 14316                           
 14317                           ;incstack = 0
 14318                           ; Regs used in _Adc_InitAdcModule: [wreg+fsr1l+fsr1h+status,2+status,0]
 14319                           ;Adc_InitAdcModule@AdcConfig stored from wreg
 14320  0B50  00F4               	movwf	Adc_InitAdcModule@AdcConfig
 14321                           
 14322                           ;adc_drv.c: 110: ADCON0bits.ADON = AdcConfig->AdcEnable;
 14323  0B51  0874               	movf	Adc_InitAdcModule@AdcConfig,w
 14324  0B52  0086               	movwf	6
 14325  0B53  0187               	clrf	7
 14326  0B54  0C01               	rrf	1,w
 14327  0B55  0021               	movlb	1	; select bank1
 14328  0B56  1C03               	skipc
 14329  0B57  101D               	bcf	29,0	;volatile
 14330  0B58  1803               	skipnc
 14331  0B59  141D               	bsf	29,0	;volatile
 14332                           
 14333                           ;adc_drv.c: 112: ADCON1bits.ADFM = AdcConfig->AdcResultFormat;
 14334  0B5A  0A74               	incf	Adc_InitAdcModule@AdcConfig,w
 14335  0B5B  0086               	movwf	6
 14336  0B5C  0187               	clrf	7
 14337  0B5D  0C01               	rrf	1,w
 14338  0B5E  1C03               	skipc
 14339  0B5F  139E               	bcf	30,7	;volatile
 14340  0B60  1803               	skipnc
 14341  0B61  179E               	bsf	30,7	;volatile
 14342                           
 14343                           ;adc_drv.c: 114: ADCON1bits.ADCS0 = AdcConfig->AdcConvClock;
 14344  0B62  0874               	movf	Adc_InitAdcModule@AdcConfig,w
 14345  0B63  3E02               	addlw	2
 14346  0B64  0086               	movwf	6
 14347  0B65  0187               	clrf	7
 14348  0B66  0C01               	rrf	1,w
 14349  0B67  1C03               	skipc
 14350  0B68  121E               	bcf	30,4	;volatile
 14351  0B69  1803               	skipnc
 14352  0B6A  161E               	bsf	30,4	;volatile
 14353                           
 14354                           ;adc_drv.c: 116: ADCON1bits.ADNREF = AdcConfig->AdcNegRef;
 14355  0B6B  0874               	movf	Adc_InitAdcModule@AdcConfig,w
 14356  0B6C  3E03               	addlw	3
 14357  0B6D  0086               	movwf	6
 14358  0B6E  0187               	clrf	7
 14359  0B6F  0C01               	rrf	1,w
 14360  0B70  1C03               	skipc
 14361  0B71  111E               	bcf	30,2	;volatile
 14362  0B72  1803               	skipnc
 14363  0B73  151E               	bsf	30,2	;volatile
 14364                           
 14365                           ;adc_drv.c: 117: ADCON1bits.ADPREF = AdcConfig->AdcPosRef;
 14366  0B74  0874               	movf	Adc_InitAdcModule@AdcConfig,w
 14367  0B75  3E04               	addlw	4
 14368  0B76  0086               	movwf	6
 14369  0B77  0187               	clrf	7
 14370  0B78  081E               	movf	30,w	;volatile
 14371  0B79  0601               	xorwf	1,w
 14372  0B7A  39FC               	andlw	-4
 14373  0B7B  0601               	xorwf	1,w
 14374  0B7C  009E               	movwf	30	;volatile
 14375                           
 14376                           ;adc_drv.c: 119: PIE1bits.ADIE = AdcConfig->AdcIntEnabled;
 14377  0B7D  0874               	movf	Adc_InitAdcModule@AdcConfig,w
 14378  0B7E  3E05               	addlw	5
 14379  0B7F  0086               	movwf	6
 14380  0B80  0187               	clrf	7
 14381  0B81  0C01               	rrf	1,w
 14382  0B82  1C03               	skipc
 14383  0B83  1311               	bcf	17,6	;volatile
 14384  0B84  1803               	skipnc
 14385  0B85  1711               	bsf	17,6	;volatile
 14386  0B86  0008               	return
 14387  0B87                     __end_of_Adc_InitAdcModule:	
 14388                           
 14389                           	psect	text79
 14390  078A                     __ptext79:	
 14391 ;; *************** function _Adc_ConfigAnCh *****************
 14392 ;; Defined at:
 14393 ;;		line 73 in file "../../../Framework/MercuryFwk/Source/c/01_Hal/02_Drv/adc_drv.c"
 14394 ;; Parameters:    Size  Location     Type
 14395 ;;  AnChSel         1    wreg     PTR struct _AnalogChSelT
 14396 ;;		 -> App_MainTask@AnalogChSel(12), 
 14397 ;; Auto vars:     Size  Location     Type
 14398 ;;  AnChSel         1    4[COMMON] PTR struct _AnalogChSelT
 14399 ;;		 -> App_MainTask@AnalogChSel(12), 
 14400 ;; Return value:  Size  Location     Type
 14401 ;;                  1    wreg      void 
 14402 ;; Registers used:
 14403 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 14404 ;; Tracked objects:
 14405 ;;		On entry : 0/0
 14406 ;;		On exit  : 0/0
 14407 ;;		Unchanged: 0/0
 14408 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14409 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14410 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14411 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14412 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14413 ;;Total ram usage:        1 bytes
 14414 ;; Hardware stack levels used:    1
 14415 ;; Hardware stack levels required when called:    2
 14416 ;; This function calls:
 14417 ;;		Nothing
 14418 ;; This function is called by:
 14419 ;;		_App_MainTask
 14420 ;; This function uses a non-reentrant model
 14421 ;;
 14422                           
 14423                           
 14424                           ;psect for function _Adc_ConfigAnCh
 14425  078A                     _Adc_ConfigAnCh:	
 14426                           
 14427                           ;incstack = 0
 14428                           ; Regs used in _Adc_ConfigAnCh: [wreg+fsr1l+fsr1h+status,2+status,0]
 14429                           ;Adc_ConfigAnCh@AnChSel stored from wreg
 14430  078A  00F4               	movwf	Adc_ConfigAnCh@AnChSel
 14431                           
 14432                           ;adc_drv.c: 76: ANSELA = 0x00;
 14433  078B  0023               	movlb	3	; select bank3
 14434  078C  018C               	clrf	12	;volatile
 14435                           
 14436                           ;adc_drv.c: 77: ANSELAbits.ANSA0 = AnChSel->AnSelA0An0;
 14437  078D  0874               	movf	Adc_ConfigAnCh@AnChSel,w
 14438  078E  0086               	movwf	6
 14439  078F  0187               	clrf	7
 14440  0790  0C01               	rrf	1,w
 14441  0791  1C03               	skipc
 14442  0792  100C               	bcf	12,0	;volatile
 14443  0793  1803               	skipnc
 14444  0794  140C               	bsf	12,0	;volatile
 14445                           
 14446                           ;adc_drv.c: 78: ANSELAbits.ANSA1 = AnChSel->AnSelA1An1;
 14447  0795  0A74               	incf	Adc_ConfigAnCh@AnChSel,w
 14448  0796  0086               	movwf	6
 14449  0797  0187               	clrf	7
 14450  0798  0C01               	rrf	1,w
 14451  0799  1C03               	skipc
 14452  079A  108C               	bcf	12,1	;volatile
 14453  079B  1803               	skipnc
 14454  079C  148C               	bsf	12,1	;volatile
 14455                           
 14456                           ;adc_drv.c: 79: ANSELAbits.ANSA2 = AnChSel->AnSelA2An2;
 14457  079D  0874               	movf	Adc_ConfigAnCh@AnChSel,w
 14458  079E  3E02               	addlw	2
 14459  079F  0086               	movwf	6
 14460  07A0  0187               	clrf	7
 14461  07A1  0C01               	rrf	1,w
 14462  07A2  1C03               	skipc
 14463  07A3  110C               	bcf	12,2	;volatile
 14464  07A4  1803               	skipnc
 14465  07A5  150C               	bsf	12,2	;volatile
 14466                           
 14467                           ;adc_drv.c: 80: ANSELAbits.ANSA4 = AnChSel->AnSelA4An3;
 14468  07A6  0874               	movf	Adc_ConfigAnCh@AnChSel,w
 14469  07A7  3E03               	addlw	3
 14470  07A8  0086               	movwf	6
 14471  07A9  0187               	clrf	7
 14472  07AA  0C01               	rrf	1,w
 14473  07AB  1C03               	skipc
 14474  07AC  120C               	bcf	12,4	;volatile
 14475  07AD  1803               	skipnc
 14476  07AE  160C               	bsf	12,4	;volatile
 14477                           
 14478                           ;adc_drv.c: 83: ANSELB = 0x00;
 14479  07AF  018D               	clrf	13	;volatile
 14480                           
 14481                           ;adc_drv.c: 84: ANSELBbits.ANSB4 = AnChSel->AnSelB4An10;
 14482  07B0  0874               	movf	Adc_ConfigAnCh@AnChSel,w
 14483  07B1  3E04               	addlw	4
 14484  07B2  0086               	movwf	6
 14485  07B3  0187               	clrf	7
 14486  07B4  0C01               	rrf	1,w
 14487  07B5  1C03               	skipc
 14488  07B6  120D               	bcf	13,4	;volatile
 14489  07B7  1803               	skipnc
 14490  07B8  160D               	bsf	13,4	;volatile
 14491                           
 14492                           ;adc_drv.c: 85: ANSELBbits.ANSB5 = AnChSel->AnSelB5An11;
 14493  07B9  0874               	movf	Adc_ConfigAnCh@AnChSel,w
 14494  07BA  3E05               	addlw	5
 14495  07BB  0086               	movwf	6
 14496  07BC  0187               	clrf	7
 14497  07BD  0C01               	rrf	1,w
 14498  07BE  1C03               	skipc
 14499  07BF  128D               	bcf	13,5	;volatile
 14500  07C0  1803               	skipnc
 14501  07C1  168D               	bsf	13,5	;volatile
 14502                           
 14503                           ;adc_drv.c: 88: ANSELC = 0x00;
 14504  07C2  018E               	clrf	14	;volatile
 14505                           
 14506                           ;adc_drv.c: 89: ANSELCbits.ANSC0 = AnChSel->AnSelC0An4;
 14507  07C3  0874               	movf	Adc_ConfigAnCh@AnChSel,w
 14508  07C4  3E06               	addlw	6
 14509  07C5  0086               	movwf	6
 14510  07C6  0187               	clrf	7
 14511  07C7  0C01               	rrf	1,w
 14512  07C8  1C03               	skipc
 14513  07C9  100E               	bcf	14,0	;volatile
 14514  07CA  1803               	skipnc
 14515  07CB  140E               	bsf	14,0	;volatile
 14516                           
 14517                           ;adc_drv.c: 90: ANSELCbits.ANSC1 = AnChSel->AnSelC1An5;
 14518  07CC  0874               	movf	Adc_ConfigAnCh@AnChSel,w
 14519  07CD  3E07               	addlw	7
 14520  07CE  0086               	movwf	6
 14521  07CF  0187               	clrf	7
 14522  07D0  0C01               	rrf	1,w
 14523  07D1  1C03               	skipc
 14524  07D2  108E               	bcf	14,1	;volatile
 14525  07D3  1803               	skipnc
 14526  07D4  148E               	bsf	14,1	;volatile
 14527                           
 14528                           ;adc_drv.c: 91: ANSELCbits.ANSC2 = AnChSel->AnSelC2An6;
 14529  07D5  0874               	movf	Adc_ConfigAnCh@AnChSel,w
 14530  07D6  3E08               	addlw	8
 14531  07D7  0086               	movwf	6
 14532  07D8  0187               	clrf	7
 14533  07D9  0C01               	rrf	1,w
 14534  07DA  1C03               	skipc
 14535  07DB  110E               	bcf	14,2	;volatile
 14536  07DC  1803               	skipnc
 14537  07DD  150E               	bsf	14,2	;volatile
 14538                           
 14539                           ;adc_drv.c: 92: ANSELCbits.ANSC3 = AnChSel->AnSelC3An7;
 14540  07DE  0874               	movf	Adc_ConfigAnCh@AnChSel,w
 14541  07DF  3E09               	addlw	9
 14542  07E0  0086               	movwf	6
 14543  07E1  0187               	clrf	7
 14544  07E2  0C01               	rrf	1,w
 14545  07E3  1C03               	skipc
 14546  07E4  118E               	bcf	14,3	;volatile
 14547  07E5  1803               	skipnc
 14548  07E6  158E               	bsf	14,3	;volatile
 14549                           
 14550                           ;adc_drv.c: 94: ANSELCbits.ANSC6 = AnChSel->AnSelC6An8;
 14551  07E7  0874               	movf	Adc_ConfigAnCh@AnChSel,w
 14552  07E8  3E0A               	addlw	10
 14553  07E9  0086               	movwf	6
 14554  07EA  0187               	clrf	7
 14555  07EB  0C01               	rrf	1,w
 14556  07EC  1C03               	skipc
 14557  07ED  130E               	bcf	14,6	;volatile
 14558  07EE  1803               	skipnc
 14559  07EF  170E               	bsf	14,6	;volatile
 14560                           
 14561                           ;adc_drv.c: 95: ANSELCbits.ANSC7 = AnChSel->AnSelC7An9;
 14562  07F0  0874               	movf	Adc_ConfigAnCh@AnChSel,w
 14563  07F1  3E0B               	addlw	11
 14564  07F2  0086               	movwf	6
 14565  07F3  0187               	clrf	7
 14566  07F4  0C01               	rrf	1,w
 14567  07F5  1C03               	skipc
 14568  07F6  138E               	bcf	14,7	;volatile
 14569  07F7  1803               	skipnc
 14570  07F8  178E               	bsf	14,7	;volatile
 14571  07F9  0008               	return
 14572  07FA                     __end_of_Adc_ConfigAnCh:	
 14573                           
 14574                           	psect	intentry
 14575  0004                     __pintentry:	
 14576 ;; *************** function _MainInterrupt *****************
 14577 ;; Defined at:
 14578 ;;		line 50 in file "../../../Framework/MercuryFwk/Source/c/02_Osl/interrupts.c"
 14579 ;; Parameters:    Size  Location     Type
 14580 ;;		None
 14581 ;; Auto vars:     Size  Location     Type
 14582 ;;		None
 14583 ;; Return value:  Size  Location     Type
 14584 ;;                  1    wreg      void 
 14585 ;; Registers used:
 14586 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 14587 ;; Tracked objects:
 14588 ;;		On entry : 0/0
 14589 ;;		On exit  : 0/0
 14590 ;;		Unchanged: 0/0
 14591 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14592 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14593 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14594 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14595 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14596 ;;Total ram usage:        1 bytes
 14597 ;; Hardware stack levels used:    1
 14598 ;; Hardware stack levels required when called:    1
 14599 ;; This function calls:
 14600 ;;		i1_GenerateEvt
 14601 ;; This function is called by:
 14602 ;;		Interrupt level 1
 14603 ;; This function uses a non-reentrant model
 14604 ;;
 14605                           
 14606  0004                     _MainInterrupt:	
 14607                           
 14608                           ;incstack = 0
 14609  0004  147E               	bsf	126,0	;set compiler interrupt flag (level 1)
 14610                           
 14611                           ; Regs used in _MainInterrupt: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 14612  0005  3180               	pagesel	$
 14613  0006  0020               	movlb	0	; select bank0
 14614  0007  087F               	movf	127,w
 14615  0008  00F3               	movwf	??_MainInterrupt
 14616                           
 14617                           ;interrupts.c: 53: if (PIR1bits.TMR2IF == ((UINT8)(1)) && PIE1bits.TMR2IE == ((UINT8)(1)
      +                          ))
 14618  0009  1C91               	btfss	17,1	;volatile
 14619  000A  281C               	goto	i1l4117
 14620  000B  0021               	movlb	1	; select bank1
 14621  000C  1C91               	btfss	17,1	;volatile
 14622  000D  281C               	goto	i1l4117
 14623                           
 14624                           ;interrupts.c: 54: {
 14625                           ;interrupts.c: 56: PIR1bits.TMR2IF = ((UINT8)(0));
 14626  000E  0020               	movlb	0	; select bank0
 14627  000F  1091               	bcf	17,1	;volatile
 14628                           
 14629                           ;interrupts.c: 58: InterruptCounter++;
 14630  0010  3001               	movlw	1
 14631  0011  0021               	movlb	1	; select bank1
 14632  0012  07A7               	addwf	_InterruptCounter^(0+128),f
 14633  0013  3000               	movlw	0
 14634  0014  3DA8               	addwfc	(_InterruptCounter+1)^(0+128),f
 14635                           
 14636                           ;interrupts.c: 60: if (InterruptCounter >= ((UINT16)(1)))
 14637  0015  0827               	movf	_InterruptCounter^(0+128),w
 14638  0016  0428               	iorwf	(_InterruptCounter+1)^(0+128),w
 14639  0017  1903               	btfsc	3,2
 14640  0018  281C               	goto	i1l4117
 14641                           
 14642                           ;interrupts.c: 61: {
 14643                           ;interrupts.c: 63: InterruptCounter = 0;
 14644  0019  01A7               	clrf	_InterruptCounter^(0+128)
 14645  001A  01A8               	clrf	(_InterruptCounter+1)^(0+128)
 14646                           
 14647                           ;interrupts.c: 65: MainSystemTimebaseFlag = CallTaskPhase;
 14648  001B  01EF               	clrf	_MainSystemTimebaseFlag^(0+128)
 14649  001C                     i1l4117:	
 14650                           
 14651                           ;interrupts.c: 66: }
 14652                           ;interrupts.c: 67: }
 14653                           ;interrupts.c: 70: if(PIE1bits.SSP1IE == ((UINT8)(1)) && PIR1bits.SSP1IF == ((UINT8)(1))
      +                          )
 14654  001C  0021               	movlb	1	; select bank1
 14655  001D  1D91               	btfss	17,3	;volatile
 14656  001E  2826               	goto	i1l453
 14657  001F  0020               	movlb	0	; select bank0
 14658  0020  1D91               	btfss	17,3	;volatile
 14659  0021  2826               	goto	i1l453
 14660                           
 14661                           ;interrupts.c: 71: {
 14662                           ;interrupts.c: 73: PIR1bits.SSP1IF = ((UINT8)(0));
 14663  0022  1191               	bcf	17,3	;volatile
 14664                           
 14665                           ;interrupts.c: 77: GenerateEvt(&I2cNewTxNotification);
 14666  0023  30E4               	movlw	(low (_I2cNewTxNotification| 0))& (0+255)
 14667  0024  3188  2095         	fcall	i1_GenerateEvt
 14668  0026                     i1l453:	
 14669  0026  0873               	movf	??_MainInterrupt,w
 14670  0027  0020               	movlb	0	; select bank0
 14671  0028  00FF               	movwf	127
 14672  0029  107E               	bcf	126,0	;clear compiler interrupt flag (level 1)
 14673  002A  0009               	retfie
 14674  002B                     __end_of_MainInterrupt:	
 14675                           
 14676                           	psect	text81
 14677  0895                     __ptext81:	
 14678 ;; *************** function i1_GenerateEvt *****************
 14679 ;; Defined at:
 14680 ;;		line 73 in file "../../../Framework/MercuryFwk/Source/c/02_Osl/os_ser.c"
 14681 ;; Parameters:    Size  Location     Type
 14682 ;;  Event           1    wreg     PTR struct _EventStructu
 14683 ;;		 -> I2cReplyPacketReady(2), I2cWriteRequest(2), I2cSetAddress(2), I2cNewTxNotification(2), 
 14684 ;;		 -> I2cNewPacketNotification(2), 
 14685 ;; Auto vars:     Size  Location     Type
 14686 ;;  Event           1    1[COMMON] PTR struct _EventStructu
 14687 ;;		 -> I2cReplyPacketReady(2), I2cWriteRequest(2), I2cSetAddress(2), I2cNewTxNotification(2), 
 14688 ;;		 -> I2cNewPacketNotification(2), 
 14689 ;;  GenerateEvt     1    2[COMMON] enum E3629
 14690 ;; Return value:  Size  Location     Type
 14691 ;;                  1    wreg      enum E3625
 14692 ;; Registers used:
 14693 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 14694 ;; Tracked objects:
 14695 ;;		On entry : 0/0
 14696 ;;		On exit  : 0/0
 14697 ;;		Unchanged: 0/0
 14698 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14699 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14700 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14701 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14702 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14703 ;;Total ram usage:        3 bytes
 14704 ;; Hardware stack levels used:    1
 14705 ;; This function calls:
 14706 ;;		Nothing
 14707 ;; This function is called by:
 14708 ;;		_MainInterrupt
 14709 ;; This function uses a non-reentrant model
 14710 ;;
 14711                           
 14712                           
 14713                           ;psect for function i1_GenerateEvt
 14714  0895                     i1_GenerateEvt:	
 14715                           
 14716                           ;incstack = 0
 14717                           ; Regs used in i1_GenerateEvt: [wreg+fsr1l+fsr1h+status,2+status,0]
 14718                           ;i1GenerateEvt@Event stored from wreg
 14719  0895  00F1               	movwf	i1GenerateEvt@Event
 14720                           
 14721                           ;os_ser.c: 76: EventStatusType EventStatus = EventIdle;
 14722  0896  01F2               	clrf	i1GenerateEvt@EventStatus
 14723                           
 14724                           ;os_ser.c: 78: if ((Event->EventOptions != ((UINT8)(2))) && (Event->EventOptions != ((UI
      +                          NT8)(3))))
 14725  0897  0871               	movf	i1GenerateEvt@Event,w
 14726  0898  0086               	movwf	6
 14727  0899  0187               	clrf	7
 14728  089A  3002               	movlw	2
 14729  089B  0601               	xorwf	1,w
 14730  089C  1903               	btfsc	3,2
 14731  089D  28B1               	goto	i1l4097
 14732  089E  0871               	movf	i1GenerateEvt@Event,w
 14733  089F  0086               	movwf	6
 14734  08A0  0187               	clrf	7
 14735  08A1  3003               	movlw	3
 14736  08A2  0601               	xorwf	1,w
 14737  08A3  1903               	btfsc	3,2
 14738  08A4  28B1               	goto	i1l4097
 14739                           
 14740                           ;os_ser.c: 79: {
 14741                           ;os_ser.c: 81: Event->EventStatus = EventSent;
 14742  08A5  3002               	movlw	2
 14743  08A6  00F0               	movwf	??i1_GenerateEvt
 14744  08A7  0A71               	incf	i1GenerateEvt@Event,w
 14745  08A8  0086               	movwf	6
 14746  08A9  0187               	clrf	7
 14747  08AA  0870               	movf	??i1_GenerateEvt,w
 14748  08AB  0081               	movwf	1
 14749                           
 14750                           ;os_ser.c: 83: EventStatus = EventSent;
 14751  08AC  3002               	movlw	2
 14752  08AD  00F0               	movwf	??i1_GenerateEvt
 14753  08AE  0870               	movf	??i1_GenerateEvt,w
 14754  08AF  00F2               	movwf	i1GenerateEvt@EventStatus
 14755                           
 14756                           ;os_ser.c: 84: }
 14757  08B0  0008               	return
 14758  08B1                     i1l4097:	
 14759                           
 14760                           ;os_ser.c: 85: else
 14761                           ;os_ser.c: 86: {
 14762                           ;os_ser.c: 88: EventStatus = EventNotSent;
 14763  08B1  3003               	movlw	3
 14764  08B2  00F0               	movwf	??i1_GenerateEvt
 14765  08B3  0870               	movf	??i1_GenerateEvt,w
 14766  08B4  00F2               	movwf	i1GenerateEvt@EventStatus
 14767  08B5  0008               	return
 14768  08B6                     __end_ofi1_GenerateEvt:	
 14769                           ;os_ser.c: 89: }
 14770                           ;os_ser.c: 92: return(EventStatus);
 14771                           ;	Return value of i1_GenerateEvt is never used
 14772                           
 14773  007E                     btemp	set	126	;btemp
 14774  007E                     int$flags	set	126
 14775  007E                     wtemp	set	126
 14776  007E                     wtemp0	set	126
 14777  0080                     wtemp1	set	128
 14778  0082                     wtemp2	set	130
 14779  0084                     wtemp3	set	132
 14780  0086                     wtemp4	set	134
 14781  0088                     wtemp5	set	136
 14782  007F                     wtemp6	set	127
 14783  007E                     ttemp	set	126
 14784  007E                     ttemp0	set	126
 14785  0081                     ttemp1	set	129
 14786  0084                     ttemp2	set	132
 14787  0087                     ttemp3	set	135
 14788  007F                     ttemp4	set	127
 14789  007E                     ltemp	set	126
 14790  007E                     ltemp0	set	126
 14791  0082                     ltemp1	set	130
 14792  0086                     ltemp2	set	134
 14793  0080                     ltemp3	set	128


Data Sizes:
    Strings     30
    Constant    12
    Data        42
    BSS         447
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14      6      10
    BANK0            80     68      78
    BANK1            80      4      80
    BANK2            80      0      79
    BANK3            80      0      80
    BANK4            80      0      80
    BANK5            80      0      80
    BANK6            80      0      80
    BANK7            80      6       6
    BANK8            80      0       0
    BANK9            80      0       0
    BANK10           80      0       0
    BANK11           45      0       0
    BANK12            0      0       0

Pointer List with Targets:

    __builtin_memcpy$1	PTR const void  size(1) Largest target is 5
		 -> HumidityStr(BANK1[5]), TemperatureStr(BANK1[5]), 

    __builtin_memcpy$0	PTR void  size(1) Largest target is 80
		 -> RepBuffer(BANK3[80]), 

    Tmr6IsrCallback	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), 

    Tmr4IsrCallback	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), 

    Tmr2IsrCallback	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), 

    strcpy@from	PTR const unsigned char  size(1) Largest target is 3
		 -> HumidityIntStr(BANK1[3]), TemperatureIntStr(BANK1[3]), 

    strcpy@to	PTR unsigned char  size(1) Largest target is 5
		 -> HumidityStr(BANK1[5]), TemperatureStr(BANK1[5]), 

    strcpy@cp	PTR unsigned char  size(1) Largest target is 5
		 -> HumidityStr(BANK1[5]), TemperatureStr(BANK1[5]), 

    strcat@from	PTR const unsigned char  size(2) Largest target is 3
		 -> STR_7(CODE[2]), HumidityDecStr(BANK1[3]), STR_6(CODE[2]), TemperatureDecStr(BANK1[3]), 

    strcat@to	PTR unsigned char  size(1) Largest target is 5
		 -> HumidityStr(BANK1[5]), TemperatureStr(BANK1[5]), 

    strcat@cp	PTR unsigned char  size(1) Largest target is 5
		 -> HumidityStr(BANK1[5]), TemperatureStr(BANK1[5]), 

    utoa@buf	PTR unsigned char  size(1) Largest target is 4
		 -> HumidityDecStr(BANK1[3]), HumidityIntStr(BANK1[3]), TemperatureDecStr(BANK1[3]), TemperatureIntStr(BANK1[3]), 
		 -> StdS_ManageStdServices@DieTempStr(BANK0[4]), 

    itoa@buf	PTR unsigned char  size(1) Largest target is 3
		 -> HumidityDecStr(BANK1[3]), HumidityIntStr(BANK1[3]), TemperatureDecStr(BANK1[3]), TemperatureIntStr(BANK1[3]), 

    itoa@cp	PTR unsigned char  size(1) Largest target is 3
		 -> HumidityDecStr(BANK1[3]), HumidityIntStr(BANK1[3]), TemperatureDecStr(BANK1[3]), TemperatureIntStr(BANK1[3]), 

    sp____builtin_memcpy	PTR void  size(2) Largest target is 4096
		 -> RAM(DATA[4096]), 

    sp__strcat	PTR unsigned char  size(1) Largest target is 5
		 -> HumidityStr(BANK1[5]), TemperatureStr(BANK1[5]), 

    sp__strcpy	PTR unsigned char  size(1) Largest target is 5
		 -> HumidityStr(BANK1[5]), TemperatureStr(BANK1[5]), 

    sp__itoa	PTR unsigned char  size(1) Largest target is 3
		 -> HumidityDecStr(BANK1[3]), HumidityIntStr(BANK1[3]), TemperatureDecStr(BANK1[3]), TemperatureIntStr(BANK1[3]), 

    sp__utoa	PTR unsigned char  size(1) Largest target is 4
		 -> HumidityDecStr(BANK1[3]), HumidityIntStr(BANK1[3]), TemperatureDecStr(BANK1[3]), TemperatureIntStr(BANK1[3]), 
		 -> StdS_ManageStdServices@DieTempStr(BANK0[4]), 

    SetBuffer@Buffer	PTR unsigned char  size(1) Largest target is 5
		 -> HumidityStr(BANK1[5]), TemperatureStr(BANK1[5]), 

    StringCopy@SourceStr	PTR unsigned char  size(2) Largest target is 9
		 -> StdS_ManageStdServices@DieTempStr(BANK0[4]), STR_5(CODE[9]), STR_4(CODE[9]), STR_3(CODE[6]), 
		 -> STR_2(CODE[5]), 

    StringCopy@DestStr	PTR unsigned char  size(1) Largest target is 80
		 -> RepBuffer(BANK3[80]), 

    LedStateMachine@LedSts	PTR enum E4026 size(1) Largest target is 1
		 -> Led1Sts(BANK1[1]), 

    LedStateMachine@LedPulse	PTR struct _LedPulseType size(1) Largest target is 6
		 -> Led1Pulse(BANK1[6]), 

    LedStateMachine@LedBlink	PTR struct _LedBlinkType size(1) Largest target is 9
		 -> Led1Blink(BANK2[9]), 

    ReceiveEvt@Event	PTR struct _EventStructure size(1) Largest target is 2
		 -> I2cReplyPacketReady(COMMON[2]), I2cWriteRequest(BANK1[2]), I2cSetAddress(BANK1[2]), I2cNewTxNotification(BANK1[2]), 
		 -> I2cNewPacketNotification(BANK1[2]), 

    GenerateEvt@Event	PTR struct _EventStructure size(1) Largest target is 2
		 -> I2cReplyPacketReady(COMMON[2]), I2cWriteRequest(BANK1[2]), I2cSetAddress(BANK1[2]), I2cNewTxNotification(BANK1[2]), 
		 -> I2cNewPacketNotification(BANK1[2]), 

    S1359_SchedTblType$Task	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> App_MainTask(), Led_MainTask(), Wdg_MainTask(), I2cSlv_MainTask(), 
		 -> I2c_DataReceiveSm(), 

    TaskTable.Task	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> App_MainTask(), Led_MainTask(), Wdg_MainTask(), I2cSlv_MainTask(), 
		 -> I2c_DataReceiveSm(), 

    Tmr_TmrBConfig@TmrBConfig	PTR struct _TmrBConfigType size(1) Largest target is 6
		 -> InitSchTimer@TmrBConfig(BANK0[6]), 

    Mcu_ConfigPullUps@WpuCh	PTR struct _WpuChType size(1) Largest target is 18
		 -> App_MainTask@WpuCh(BANK0[18]), 

    LedPulseStateMachine@LedPulse	PTR struct _LedPulseType size(1) Largest target is 6
		 -> Led1Pulse(BANK1[6]), 

    LedBlinkStateMachine@LedBlink	PTR struct _LedBlinkType size(1) Largest target is 9
		 -> Led1Blink(BANK2[9]), 

    I2c_UpdateTxBuffer@DataBuffer	PTR unsigned char  size(1) Largest target is 80
		 -> RepBuffer(BANK3[80]), 

    I2c_InitI2cModule@I2cConfig	PTR struct _I2cConfig size(1) Largest target is 11
		 -> I2cConfig(BANK1[11]), 

    Adc_InitAdcModule@AdcConfig	PTR struct _AdcCfgType size(1) Largest target is 6
		 -> App_MainTask@AdcConfig(BANK0[6]), 

    Adc_ConfigAnCh@AnChSel	PTR struct _AnalogChSelType size(1) Largest target is 12
		 -> App_MainTask@AnalogChSel(BANK0[12]), 


Critical Paths under _main in COMMON

    _Tmr_TmrBConfig->_TmrBInit
    _Tmr_TmrBConfig->_Tmr_TmrBIrqSet
    _Tmr_TmrBPrSet->___wmul
    ___lmul->___wmul
    _Wdg_MainTask->_Mcu_SetWdgPeriod
    _LedStateMachine->_LedBlinkStateMachine
    _LedPulseStateMachine->_Led_SetLedStatus
    _LedBlinkStateMachine->___lwdiv
    _I2c_DataReceiveSm->_ClearRxBuffer
    _I2c_DataReceiveSm->_ClearTxBuffer
    _I2c_DataReceiveSm->_ReceiveEvt
    _I2c_InitI2cModule->_ClearRxBuffer
    _I2c_InitI2cModule->_ClearTxBuffer
    _I2cSlv_I2cDrvHandle->_Led_SetLedStatus
    _I2cSlv_I2cDrvHandle->_ReceiveEvt
    _App_MainTask->___lwmod
    _Dht_GetSensorData->_Dht_RequestData
    _Dht_ReadData->_Dht_ReadByte
    _AppSm->_StdS_SetI2cAddress
    _ManageProtocol->_ReceiveEvt
    _ManageProtocol->_SetBuffer
    _ManageProtocol->_strcat
    _ManageProtocol->_strcpy
    _utoa->___lwmod
    _SetLedBehavSts->_Led_SetLedPulseTime
    _SetLedBehavSts->_Led_SetLedStatus
    _LowPowerMode->_Mcu_SetWdgSts
    _GetDieTemperature->_Adc_GetConvResult
    _GetDieTemperature->_Adc_SelectChannel
    _ControlLedDirect->_Led_SetLedStatus

Critical Paths under _MainInterrupt in COMMON

    _MainInterrupt->i1_GenerateEvt

Critical Paths under _main in BANK0

    _SystemInit->_InitSchTimer
    _InitSchTimer->_Tmr_TmrBConfig
    _Tmr_TmrBConfig->_Tmr_TmrBPrSet
    _Tmr_TmrBPrSet->___lmul
    ___lmul->___wmul
    _MainScheduler->_InitializeTasks
    _MainScheduler->_ScheduleTasks
    _ScheduleTasks->_App_MainTask
    _InitializeTasks->_App_MainTask
    _LedStateMachine->_LedPulseStateMachine
    _LedPulseStateMachine->___lwdiv
    _LedBlinkStateMachine->___lwdiv
    _I2cSlv_I2cDrvHandle->_I2c_UpdateTxBuffer
    _App_MainTask->_AppSm
    _Dht_GetSensorData->_Dht_CalculateChecksum
    _Dht_ReadData->_Dht_ReadByte
    _AppSm->_ManageProtocol
    _ManageProtocol->_StdS_ManageStdServices
    _itoa->_utoa
    _StdS_ManageStdServices->_utoa
    _utoa->___lwdiv
    _SetLedBehavSts->_Led_SetLedBlinkTime
    _GetDieTemperature->_Adc_GetConvResult
    _ControlLedDirect->_Led_SetLedStatus

Critical Paths under _MainInterrupt in BANK0

    None.

Critical Paths under _main in BANK1

    _MainScheduler->_InitializeTasks

Critical Paths under _MainInterrupt in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _MainInterrupt in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _MainInterrupt in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _MainInterrupt in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _MainInterrupt in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _MainInterrupt in BANK6

    None.

Critical Paths under _main in BANK7

    _MainScheduler->_ScheduleTasks

Critical Paths under _MainInterrupt in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _MainInterrupt in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _MainInterrupt in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _MainInterrupt in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _MainInterrupt in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _MainInterrupt in BANK12

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0   65810
                      _MainScheduler
                         _SystemInit
 ---------------------------------------------------------------------------------
 (1) _SystemInit                                           0     0      0    3546
                       _InitSchTimer
               _Mcu_EnableInterrupts
                 _Mcu_StartSystemPll
 ---------------------------------------------------------------------------------
 (2) _Mcu_StartSystemPll                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _Mcu_EnableInterrupts                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _InitSchTimer                                         7     7      0    3546
                                             37 BANK0      7     7      0
                     _Tmr_TmrBConfig
 ---------------------------------------------------------------------------------
 (3) _Tmr_TmrBConfig                                       3     2      1    3343
                                             34 BANK0      3     2      1
                           _TmrBInit
                       _Tmr_StartTmr
                     _Tmr_TmrBIrqSet
                      _Tmr_TmrBPrSet
 ---------------------------------------------------------------------------------
 (4) _Tmr_TmrBPrSet                                       18    14      4    2222
                                             16 BANK0     18    14      4
                            ___lldiv
                             ___lmul
                             ___wmul
 ---------------------------------------------------------------------------------
 (5) ___wmul                                               6     2      4     456
                                              4 COMMON     2     2      0
                                              0 BANK0      4     0      4
 ---------------------------------------------------------------------------------
 (5) ___lmul                                              12     4      8     244
                                              4 BANK0     12     4      8
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (5) ___lldiv                                             14     6      8     961
                                              4 COMMON     1     1      0
                                              0 BANK0     13     5      8
 ---------------------------------------------------------------------------------
 (4) _Tmr_TmrBIrqSet                                       2     1      1     240
                                              4 COMMON     2     1      1
 ---------------------------------------------------------------------------------
 (4) _Tmr_StartTmr                                         1     1      0      22
                                              4 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (4) _TmrBInit                                             4     2      2     397
                                              4 COMMON     2     0      2
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _MainScheduler                                        0     0      0   62264
                    _InitializeTasks
                      _ScheduleTasks
 ---------------------------------------------------------------------------------
 (2) _ScheduleTasks                                        7     7      0   31225
                                             67 BANK0      1     1      0
                                              0 BANK7      6     6      0
                       _App_MainTask *
                    _I2cSlv_MainTask *
                  _I2c_DataReceiveSm *
                       _Led_MainTask *
                       _Wdg_MainTask *
 ---------------------------------------------------------------------------------
 (2) _InitializeTasks                                      5     5      0   31039
                                             67 BANK0      1     1      0
                                              0 BANK1      4     4      0
                       _App_MainTask *
                    _I2cSlv_MainTask *
                  _I2c_DataReceiveSm *
                       _Led_MainTask *
                       _Wdg_MainTask *
 ---------------------------------------------------------------------------------
 (3) _Wdg_MainTask                                         1     0      1      44
                                             27 BANK0      1     0      1
                       _Mcu_ClearWdg
                   _Mcu_SetWdgPeriod
                      _Mcu_SetWdgSts
 ---------------------------------------------------------------------------------
 (4) _Mcu_SetWdgPeriod                                     2     2      0      22
                                              4 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (4) _Mcu_ClearWdg                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _Led_MainTask                                         5     4      1    6232
                                             27 BANK0      5     4      1
                    _LedStateMachine
                     _SetLedBehavSts
 ---------------------------------------------------------------------------------
 (4) _LedStateMachine                                      7     4      3    5084
                                             11 BANK0      7     4      3
               _LedBlinkStateMachine
               _LedPulseStateMachine
 ---------------------------------------------------------------------------------
 (5) _LedPulseStateMachine                                 4     3      1    2651
                                              7 BANK0      4     3      1
                   _Led_SetLedStatus
                            ___lwdiv
 ---------------------------------------------------------------------------------
 (5) _LedBlinkStateMachine                                 3     3      0    1993
                                              5 COMMON     1     1      0
                                              7 BANK0      2     2      0
                            ___lwdiv
 ---------------------------------------------------------------------------------
 (3) _I2c_DataReceiveSm                                    9     8      1    1321
                                             27 BANK0      9     8      1
                     _CheckAckStatus
                    _CheckByteStatus
                 _CheckStopBitStatus
                      _ClearRxBuffer
                      _ClearTxBuffer
                        _GenerateEvt
                          _Mcu_Reset
                         _ReceiveEvt
 ---------------------------------------------------------------------------------
 (4) _CheckStopBitStatus                                   1     1      0       0
                                              4 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (4) _CheckByteStatus                                      1     1      0       0
                                              4 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (4) _CheckAckStatus                                       1     1      0       0
                                              4 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (3) _I2cSlv_MainTask                                      1     0      1    2745
                                             27 BANK0      1     0      1
                _I2cSlv_I2cDrvHandle
                  _I2c_InitI2cModule
                      _I2c_SetConfig
 ---------------------------------------------------------------------------------
 (4) _I2c_SetConfig                                        1     1      0       0
                                              4 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (4) _I2c_InitI2cModule                                    3     3      0     575
                                              0 BANK0      3     3      0
                      _ClearRxBuffer
                      _ClearTxBuffer
 ---------------------------------------------------------------------------------
 (4) _ClearTxBuffer                                        2     2      0      99
                                              4 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (4) _ClearRxBuffer                                        2     2      0      99
                                              4 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (4) _I2cSlv_I2cDrvHandle                                  6     6      0    2170
                                              4 BANK0      6     6      0
                        _GenerateEvt
                  _I2c_SetI2cAddress
              _I2c_SetI2cAddressMask
                 _I2c_UpdateTxBuffer
                   _Led_SetLedStatus
                         _ReceiveEvt
 ---------------------------------------------------------------------------------
 (5) _I2c_UpdateTxBuffer                                   5     4      1     290
                                              4 COMMON     1     0      1
                                              0 BANK0      4     4      0
 ---------------------------------------------------------------------------------
 (5) _I2c_SetI2cAddressMask                                1     1      0      31
                                              4 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (5) _I2c_SetI2cAddress                                    1     1      0      31
                                              4 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (3) _App_MainTask                                        40    39      1   20564
                                             27 BANK0     40    39      1
                     _Adc_ConfigAnCh
                  _Adc_InitAdcModule
                              _AppSm
                  _Dht_GetSensorData
                  _Mcu_ConfigPullUps
                 _Mcu_SetDieTempMode
                  _Mcu_SetDieTempSts
                  _Mcu_SetPullUpsSts
                            ___awdiv
                            ___awmod
                            ___lwdiv
                            ___lwmod
 ---------------------------------------------------------------------------------
 (4) ___awmod                                              7     3      4     613
                                              4 COMMON     1     1      0
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (4) ___awdiv                                              9     5      4     625
                                              4 COMMON     1     1      0
                                              0 BANK0      8     4      4
 ---------------------------------------------------------------------------------
 (4) _Mcu_SetPullUpsSts                                    1     1      0      22
                                              4 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (4) _Mcu_SetDieTempSts                                    1     1      0      22
                                              4 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (4) _Mcu_SetDieTempMode                                   1     1      0      22
                                              4 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (4) _Mcu_ConfigPullUps                                    1     1      0     429
                                              4 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (4) _Dht_GetSensorData                                    1     1      0     674
                                              8 BANK0      1     1      0
              _Dht_CalculateChecksum
                       _Dht_ReadData
                    _Dht_RequestData
            _Mcu_DisableSchedulerInt
             _Mcu_EnableSchedulerInt
 ---------------------------------------------------------------------------------
 (5) _Mcu_EnableSchedulerInt                               0     0      0       0
 ---------------------------------------------------------------------------------
 (5) _Mcu_DisableSchedulerInt                              0     0      0       0
 ---------------------------------------------------------------------------------
 (5) _Dht_RequestData                                      2     2      0       0
                                              4 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (5) _Dht_ReadData                                         2     2      0     306
                                              4 BANK0      2     2      0
                       _Dht_ReadByte
 ---------------------------------------------------------------------------------
 (6) _Dht_ReadByte                                         6     6      0     207
                                              4 COMMON     2     2      0
                                              0 BANK0      4     4      0
 ---------------------------------------------------------------------------------
 (5) _Dht_CalculateChecksum                                9     4      5     331
                                              4 COMMON     1     1      0
                                              0 BANK0      8     3      5
 ---------------------------------------------------------------------------------
 (4) _AppSm                                                1     1      0   14829
                                             26 BANK0      1     1      0
                        _GenerateEvt
                     _ManageProtocol
                 _StdS_SetI2cAddress
 ---------------------------------------------------------------------------------
 (5) _StdS_SetI2cAddress                                   2     2      0       0
                                              4 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (5) _ManageProtocol                                       2     2      0   14180
                                             24 BANK0      2     2      0
                        _GenerateEvt
                         _ReceiveEvt
                          _SetBuffer
             _StdS_ManageStdServices
                               _itoa
                             _strcat
                             _strcpy
 ---------------------------------------------------------------------------------
 (6) _strcpy                                               4     3      1     361
                                              4 COMMON     2     1      1
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (6) _strcat                                               5     3      2     647
                                              4 COMMON     2     0      2
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (6) _itoa                                                 7     3      4    4162
                                             16 BANK0      7     3      4
                               _utoa
 ---------------------------------------------------------------------------------
 (6) _StdS_ManageStdServices                               8     8      0    7421
                                             16 BANK0      8     8      0
                         _BoardReset
                   _ControlLedDirect
                        _GenerateEvt
                  _GetDieTemperature
                       _LowPowerMode
                     _SetLedBehavSts
                         _StringCopy
                               _utoa
 ---------------------------------------------------------------------------------
 (7) _utoa                                                 9     5      4    3065
                                              7 BANK0      9     5      4
                            ___lwdiv
                            ___lwmod
 ---------------------------------------------------------------------------------
 (4) ___lwmod                                              6     2      4     732
                                              4 COMMON     2     2      0
                                              0 BANK0      4     0      4
 ---------------------------------------------------------------------------------
 (6) ___lwdiv                                              8     4      4    1461
                                              4 COMMON     1     1      0
                                              0 BANK0      7     3      4
 ---------------------------------------------------------------------------------
 (7) _StringCopy                                           9     5      4    1545
                                              4 COMMON     1     1      0
                                              0 BANK0      8     4      4
 ---------------------------------------------------------------------------------
 (4) _SetLedBehavSts                                       2     2      0    1148
                                              4 BANK0      2     2      0
                _Led_SetLedBlinkTime
                _Led_SetLedPulseTime
                   _Led_SetLedStatus
 ---------------------------------------------------------------------------------
 (5) _Led_SetLedPulseTime                                  3     1      2     152
                                              4 COMMON     2     0      2
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (5) _Led_SetLedBlinkTime                                  5     1      4     273
                                              4 COMMON     1     1      0
                                              0 BANK0      4     0      4
 ---------------------------------------------------------------------------------
 (7) _LowPowerMode                                         0     0      0      22
                      _Mcu_SetWdgSts
 ---------------------------------------------------------------------------------
 (4) _Mcu_SetWdgSts                                        1     1      0      22
                                              4 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (7) _GetDieTemperature                                    4     2      2      90
                                              3 BANK0      4     2      2
                  _Adc_GetConvResult
                     _Adc_GetConvSts
                  _Adc_SelectChannel
                _Adc_StartConversion
 ---------------------------------------------------------------------------------
 (8) _Adc_StartConversion                                  0     0      0       0
 ---------------------------------------------------------------------------------
 (8) _Adc_SelectChannel                                    2     2      0      22
                                              4 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (8) _Adc_GetConvSts                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (8) _Adc_GetConvResult                                    5     3      2      34
                                              4 COMMON     2     0      2
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (4) _GenerateEvt                                          3     3      0     649
                                              4 COMMON     1     1      0
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (7) _ControlLedDirect                                     0     0      0     692
                   _Led_SetLedStatus
 ---------------------------------------------------------------------------------
 (5) _Led_SetLedStatus                                     3     2      1     692
                                              4 COMMON     2     1      1
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (7) _BoardReset                                           0     0      0       0
                          _Mcu_Reset
 ---------------------------------------------------------------------------------
 (4) _Mcu_Reset                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (6) _SetBuffer                                            7     4      3     596
                                              4 COMMON     2     2      0
                                              0 BANK0      5     2      3
 ---------------------------------------------------------------------------------
 (4) _ReceiveEvt                                           2     2      0     344
                                              4 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (4) _Adc_InitAdcModule                                    1     1      0     165
                                              4 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (4) _Adc_ConfigAnCh                                       1     1      0     297
                                              4 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 8
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (9) _MainInterrupt                                        1     1      0      75
                                              3 COMMON     1     1      0
                      i1_GenerateEvt
 ---------------------------------------------------------------------------------
 (10) i1_GenerateEvt                                       3     3      0      75
                                              0 COMMON     3     3      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 10
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _MainScheduler
     _InitializeTasks
       _App_MainTask *
         _Adc_ConfigAnCh
         _Adc_InitAdcModule
         _AppSm
           _GenerateEvt
           _ManageProtocol
             _GenerateEvt
             _ReceiveEvt
             _SetBuffer
             _StdS_ManageStdServices
               _BoardReset
                 _Mcu_Reset
               _ControlLedDirect
                 _Led_SetLedStatus
               _GenerateEvt
               _GetDieTemperature
                 _Adc_GetConvResult
                 _Adc_GetConvSts
                 _Adc_SelectChannel
                 _Adc_StartConversion
               _LowPowerMode
                 _Mcu_SetWdgSts
               _SetLedBehavSts
                 _Led_SetLedBlinkTime
                 _Led_SetLedPulseTime
                 _Led_SetLedStatus
               _StringCopy
               _utoa
                 ___lwdiv
                 ___lwmod
             _itoa
               _utoa
                 ___lwdiv
                 ___lwmod
             _strcat
             _strcpy
           _StdS_SetI2cAddress
         _Dht_GetSensorData
           _Dht_CalculateChecksum
           _Dht_ReadData
             _Dht_ReadByte
           _Dht_RequestData
           _Mcu_DisableSchedulerInt
           _Mcu_EnableSchedulerInt
         _Mcu_ConfigPullUps
         _Mcu_SetDieTempMode
         _Mcu_SetDieTempSts
         _Mcu_SetPullUpsSts
         ___awdiv
         ___awmod
         ___lwdiv
         ___lwmod
       _I2cSlv_MainTask *
         _I2cSlv_I2cDrvHandle
           _GenerateEvt
           _I2c_SetI2cAddress
           _I2c_SetI2cAddressMask
           _I2c_UpdateTxBuffer
           _Led_SetLedStatus
           _ReceiveEvt
         _I2c_InitI2cModule
           _ClearRxBuffer
           _ClearTxBuffer
         _I2c_SetConfig
       _I2c_DataReceiveSm *
         _CheckAckStatus
         _CheckByteStatus
         _CheckStopBitStatus
         _ClearRxBuffer
         _ClearTxBuffer
         _GenerateEvt
         _Mcu_Reset
         _ReceiveEvt
       _Led_MainTask *
         _LedStateMachine
           _LedBlinkStateMachine
             ___lwdiv
           _LedPulseStateMachine
             _Led_SetLedStatus
             ___lwdiv
         _SetLedBehavSts
           _Led_SetLedBlinkTime
           _Led_SetLedPulseTime
           _Led_SetLedStatus
       _Wdg_MainTask *
         _Mcu_ClearWdg
         _Mcu_SetWdgPeriod
         _Mcu_SetWdgSts
     _ScheduleTasks
       _App_MainTask *
         _Adc_ConfigAnCh
         _Adc_InitAdcModule
         _AppSm
           _GenerateEvt
           _ManageProtocol
             _GenerateEvt
             _ReceiveEvt
             _SetBuffer
             _StdS_ManageStdServices
               _BoardReset
                 _Mcu_Reset
               _ControlLedDirect
                 _Led_SetLedStatus
               _GenerateEvt
               _GetDieTemperature
                 _Adc_GetConvResult
                 _Adc_GetConvSts
                 _Adc_SelectChannel
                 _Adc_StartConversion
               _LowPowerMode
                 _Mcu_SetWdgSts
               _SetLedBehavSts
                 _Led_SetLedBlinkTime
                 _Led_SetLedPulseTime
                 _Led_SetLedStatus
               _StringCopy
               _utoa
                 ___lwdiv
                 ___lwmod
             _itoa
               _utoa
                 ___lwdiv
                 ___lwmod
             _strcat
             _strcpy
           _StdS_SetI2cAddress
         _Dht_GetSensorData
           _Dht_CalculateChecksum
           _Dht_ReadData
             _Dht_ReadByte
           _Dht_RequestData
           _Mcu_DisableSchedulerInt
           _Mcu_EnableSchedulerInt
         _Mcu_ConfigPullUps
         _Mcu_SetDieTempMode
         _Mcu_SetDieTempSts
         _Mcu_SetPullUpsSts
         ___awdiv
         ___awmod
         ___lwdiv
         ___lwmod
       _I2cSlv_MainTask *
         _I2cSlv_I2cDrvHandle
           _GenerateEvt
           _I2c_SetI2cAddress
           _I2c_SetI2cAddressMask
           _I2c_UpdateTxBuffer
           _Led_SetLedStatus
           _ReceiveEvt
         _I2c_InitI2cModule
           _ClearRxBuffer
           _ClearTxBuffer
         _I2c_SetConfig
       _I2c_DataReceiveSm *
         _CheckAckStatus
         _CheckByteStatus
         _CheckStopBitStatus
         _ClearRxBuffer
         _ClearTxBuffer
         _GenerateEvt
         _Mcu_Reset
         _ReceiveEvt
       _Led_MainTask *
         _LedStateMachine
           _LedBlinkStateMachine
             ___lwdiv
           _LedPulseStateMachine
             _Led_SetLedStatus
             ___lwdiv
         _SetLedBehavSts
           _Led_SetLedBlinkTime
           _Led_SetLedPulseTime
           _Led_SetLedStatus
       _Wdg_MainTask *
         _Mcu_ClearWdg
         _Mcu_SetWdgPeriod
         _Mcu_SetWdgSts
   _SystemInit
     _InitSchTimer
       _Tmr_TmrBConfig
         _TmrBInit
         _Tmr_StartTmr
         _Tmr_TmrBIrqSet
         _Tmr_TmrBPrSet
           ___lldiv
           ___lmul
             ___wmul (ARG)
           ___wmul
     _Mcu_EnableInterrupts
     _Mcu_StartSystemPll

 _MainInterrupt (ROOT)
   i1_GenerateEvt

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             3F0      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            E      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               E      6       A       2       71.4%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0       0       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50     44      4E       5       97.5%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BANK1               50      4      50       7      100.0%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BITBANK2            50      0       0       8        0.0%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
BANK2               50      0      4F       9       98.8%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
BITBANK3            50      0       0      10        0.0%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BANK3               50      0      50      11      100.0%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
BITBANK4            50      0       0      12        0.0%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BANK4               50      0      50      13      100.0%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BITBANK5            50      0       0      14        0.0%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
BANK5               50      0      50      15      100.0%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
BITBANK6            50      0       0      16        0.0%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
BANK6               50      0      50      17      100.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BITBANK7            50      0       0      18        0.0%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BANK7               50      6       6      19        7.5%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
ABS                  0      0     23D      20        0.0%
BITBANK8            50      0       0      21        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BANK8               50      0       0      22        0.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BITBANK9            50      0       0      23        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BANK9               50      0       0      24        0.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BITBANK10           50      0       0      25        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BANK10              50      0       0      26        0.0%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BITBANK11           50      0       0      27        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BANK11              2D      0       0      28        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
BITBANK12           30      0       0      29        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BANK12               0      0       0      30        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
DATA                 0      0     23D      31        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%


Microchip Technology PIC Macro Assembler V1.38 build -256452561 
Symbol Table                                                                                   Wed Apr 24 11:57:57 2019

                                    pc 0002                       _Mcu_SetWdgPeriod 169B  
                          __CFG_CP$OFF 0000                     _Mcu_StartSystemPll 1646  
           __end_of_I2c_UpdateTxBuffer 0859                  ?_LedPulseStateMachine 0027  
                         ___awdiv@sign 0025             __size_of_GetDieTemperature 0019  
               ??_LedBlinkStateMachine 0027                    ___wmul@multiplicand 0022  
          __size_of_CheckStopBitStatus 000A                   __end_of_App_MainTask 01BA  
                                  l411 0BBD                                    l403 0B90  
                                  l331 0E9F                                    l324 0E79  
                                  l316 0E5A                                    l333 0EA2  
                                  l341 09B1         __end_of_StdS_ManageStdServices 04BE  
                                  l334 0EA6                                    l326 0E7C  
                                  l318 0E5C                                    l327 0E80  
                                  l319 0E5F                                    l343 09BA  
                                  l344 09C3                                    l177 03B9  
                                  l337 0ED1                                    l361 17A2  
                                  l346 09D7                                    l363 17A5  
                                  l612 0F60                                    l364 17A8  
                                  l349 0634                                    l373 0C8D  
                                  l366 17B6                                    l392 088F  
                                  l642 0AF0                                    l650 0A5C  
                                  l395 0892                                    l661 16E6  
                                  l805 04BD                                    l590 1773  
                                  l654 0A88                                    l675 1706  
                                  l771 0C08                                    l668 17FF  
                                  l942 02CC                                    l846 179F  
                                  l956 0A01                                    l966 00C0  
                                  l975 01B9                                    _PR2 001B  
                                  _PR4 0416                           __CFG_CPD$OFF 0000  
                                  _PR6 041D                   __end_of_Dht_ReadData 178A  
                 __end_of_Dht_ReadByte 0BC7                    ?_Mcu_StartSystemPll 0070  
                         ___awmod@sign 0025                           __CFG_BORV$LO 0000  
                                  wreg 0009              Dht_CalculateChecksum@Sens 0020  
                         __CFG_IESO$ON 0000                           __CFG_FOSC$HS 0000  
                     ??_SetLedBehavSts 0024                                   S5197 102A  
               Mcu_SetPullUpsSts@PuSts 0074                        ??_MainInterrupt 0073  
                         __CFG_LVP$OFF 0000                        ??_MainScheduler 0076  
                                 l1131 0829                                   l1403 0DD9  
                                 l5001 03AD                                   l4203 0B4B  
                                 l5011 03BE                                   l4221 0A4D  
                                 l5005 03B3                                   l3413 0A9C  
                                 l4215 0A35                                   l4303 0DB1  
                                 l5111 01AD                                   l5023 0C6C  
                                 l4217 0A41                                   l4225 0A56  
                                 l4401 0439                                   l5033 1760  
                                 l5041 176A                                   l3409 0A92  
                                 l4163 16E0                                   l4171 17FA  
                                 l4403 043E                                   l5051 0A7F  
                                 l5115 01B0                                   l4333 08D4  
                                 l4253 0BDA                                   l4245 0BCA  
                                 l4261 0BFA                                   l4405 0441  
                                 l4501 0F63                                   l5037 1767  
                                 l5109 01AB                                   l5141 054F  
                                 l4335 08D5                                   l4159 16DA  
                                 l4239 0915                                   l4167 17E9  
                                 l4175 16FA                                   l4191 0B24  
                                 l4415 045E                                   l5047 0A64  
                                 l5143 0573                                   l4257 0BF5  
                                 l4249 0BD0                                   l4193 0B30  
                                 l4441 0955                                   l4353 0BA8  
                                 l4513 0FB6                                   l4505 0F73  
                                 l3617 17AB                                   l4283 17D5  
                                 l4179 1700                                   l4611 0237  
                                 l4347 0B95                                   l4523 0FEE  
                                 l4531 0DF2                                   l5075 00F2  
                                 l4277 1746                                   l4269 091C  
                                 l4293 0D93                                   l4373 03CB  
                                 l4429 049C                                   l4461 097A  
                                 l4349 0B9F                                   l4525 0FFA  
                                 l4533 0DFC                                   l4701 0E8F  
                                 l4199 0B42                                   l4391 0419  
                                 l4455 0967                                   l4615 024D  
                                 l4359 0BC5                                   l4543 0E38  
                                 l4551 0E51                                   l5167 172D  
                                 l4711 0EC5                                   l4369 085D  
                                 l4385 03FF                                   l4457 0972  
                                 l4449 080C                                   l4705 0EAA  
                                 l4641 0822                                   l4721 05DD  
                                 l4379 03E5                                   l4803 0AEE  
                                 l4811 0B08                                   l4707 0EB5  
                                 l3587 09CC                                   l4723 05F4  
                                 l4731 0631                                   l4397 0433  
                                 l4629 02AB                                   l4637 02B9  
                                 l4573 08DE                                   l4901 0C2D  
                                 l4549 0E42                                   l4805 0AF3  
                                 l4813 0B19                                   l4661 0D59  
                                 l4733 0636                                   l4725 060C  
                                 l4399 0436                                   l4583 08F5  
                                 l4751 0A2C                                   l4807 0AFB  
                                 l4593 01C5                                   l4825 09E8  
                                 l4833 09F5                                   l4585 08F6  
                                 l4913 0C4A                                   l4905 0C39  
                                 l4497 0840                                   l3961 1793  
                                 l4673 0D84                                   l4729 0625  
                                 l4819 09D9                                   l4579 08EE  
                                 l4843 0CF3                                   l4763 0EE8  
                                 l4931 02ED                                   l4659 0D4B  
                                 l4597 01DB                                   l4829 09F2  
                                 l4749 0A2A                                   l4861 0D12  
                                 l4909 0C42                                   l4757 0ED5  
                                 l3965 1796                                   l4933 02EF  
                                 l4693 0E62                                   l4669 0D79  
                                 l4871 0D2D                                   l4783 0F2A  
                                 l3959 178B                                   l4951 0311  
                                 l4919 02CE                                   l4695 0E6D  
                                 l4849 0CFE                                   l4777 0F0C  
                                 l4769 0EFF                                   l4875 0D35  
                                 l4867 0D24                                   l4859 0D06  
                                 l4891 0C1B                                   l4963 0332  
                                 l4939 02F8                                   l4699 0E84  
                                 l4789 0F3A                                   l4965 0337  
                                 l4949 030C                                   l4887 0C14  
                                 l4799 0F57                                   l4983 0379  
                                 l4993 0392                                   l4977 0357  
                                 l4899 0C21                                   l4995 0398  
                                 l4989 0383                                   STR_1 1015  
                                 STR_2 1023                                   STR_3 101D  
                                 STR_4 100C                                   STR_5 100C  
                                 STR_6 1028                                   STR_7 1028  
                                 _LATA 010C                                   _LATB 010D  
                                 _LATC 010E                                   u2225 0AC1  
                                 u2235 0AD0                                   u4005 068A  
                                 u2325 0A9D                                   u4015 069B  
                                 u2335 0AA4                                   u4025 06AC  
                                 u2425 1681                                   u4035 06D1  
                                 u2435 168B                                   u3325 0B27  
                                 u4205 0D09                                   u2445 1695  
                                 u3415 0A47                                   u3345 0B31  
                                 u3425 0A4E                                   u4225 0D13  
                                 u4305 0C24                                   u3355 0B3B  
                                 u4235 0D1D                                   u3365 0B43  
                                 u4245 0D25                                   u4325 0C33  
                                 u3614 0BB7                                   u4510 00AD  
                                 u3615 0BB6                                   u4335 0C3A  
                                 u4520 00BB                                   u3635 0866  
                                 u3395 0A38                                   u4605 0CB1  
                                 u4615 0CB8                                   u3745 0FA5  
                                 u4625 0CCB                                   u4705 052D  
                                 u4555 010F                                   u4715 0540  
                                 u3915 0D4E                                   u3765 0FDE  
                                 u4725 0554                                   u4645 04D5  
                                 u3775 0E23                                   u4575 0122  
                                 u4735 0568                                   u4655 04DC  
                                 u3935 0D5A                                   u4585 0129  
                                 u4665 04EF                                   u3945 0D6E  
                                 u4675 0503                                   u3955 0D7A  
                                 u3875 082A                                   u4685 050A  
                                 u3885 082F                                   u4767 087F  
                                 u3975 064D                                   u4695 051C  
                                 u4777 0888                                   u3985 0668  
                                 u4787 0B97                                   u3995 0679  
                                 _WPUA 020C                                   _WPUB 020D  
                                 _WPUC 020E                           __CFG_WRT$OFF 0000  
                        __CFG_FCMEN$ON 0000            Led_SetLedBlinkTime@OnTimeMs 0020  
                                 _main 164D                                   _itoa 093D  
                                 fsr0h 0005                                   fsr1h 0007  
                                 fsr0l 0004                                   indf0 0000  
                                 indf1 0001                                   fsr1l 0006  
                                 btemp 007E                        _I2cSlaveAddress 006B  
                                 _utoa 0D8D           __size_of_Led_SetLedPulseTime 0010  
                        __CFG_BOREN$ON 0000                                   ltemp 007E  
                 ??_Mcu_StartSystemPll 0074             Dht_CalculateChecksum@Index 0027  
                    _Mcu_SetPullUpsSts 166C                                   start 002B  
                                 ttemp 007E                                   wtemp 007E  
                   AppSm@WpuSetCounter 00B2                    __end_of_GenerateEvt 091A  
                        ?_InitSchTimer 0070                         ??_Mcu_ClearWdg 0074  
                       ?_Mcu_SetWdgSts 0070                             _BoardReset 1637  
           __size_of_Mcu_SetDieTempSts 0008                          __CFG_MCLRE$ON 0000  
                   ?_Mcu_SetPullUpsSts 0070                    StringCopy@SourceStr 0020  
                        __CFG_PLLEN$ON 0000                    ??_Mcu_SetPullUpsSts 0074  
                                ?_main 0070                                  ?_itoa 0030  
                      __end_of___awdiv 0D3A                        __end_of___awmod 0C4F  
                      __end_of___lldiv 0D8D                                  ?_utoa 0027  
                      ___awdiv@divisor 0020                        __end_of___lwdiv 0B50  
                      __end_of___lwmod 0A5B                                  i1l453 0026  
                      ___awdiv@counter 0024                                  u384m0 0229  
                                u385m0 029D           Led_SetLedBlinkTime@OffTimeMs 0022  
            Mcu_SetWdgPeriod@WdgPeriod 0075                __end_of_LedStateMachine 0B1B  
                                _AppSm 09D8                    ___lmul@multiplicand 0028  
           __size_of_I2c_SetI2cAddress 0005                            _ChecksumSts 00B8  
                     ??_Adc_GetConvSts 0074                   __end_of_Led_MainTask 0A89  
           __size_of_Dht_GetSensorData 002C           LedPulseStateMachine@LedPulse 002A  
                      __end_of_dpowers 100A                                  pclath 000A  
                                ltemp0 007E                                  ltemp1 0082  
                                ltemp2 0086                                  ltemp3 0080  
            __end_of_Mcu_SetPullUpsSts 1674                                  ttemp0 007E  
                                ttemp1 0081                                  ttemp2 0084  
                                ttemp3 0087                                  ttemp4 007F  
                                utoa@c 002E                                  utoa@v 002C  
                                status 0003                        _I2cSlv_MainTask 175F  
                                wtemp0 007E                                  wtemp1 0080  
                                wtemp2 0082                                  wtemp3 0084  
                                wtemp4 0086                                  wtemp5 0088  
                                wtemp6 007F                       ??_Adc_ConfigAnCh 0074  
                       ??_InitSchTimer 0045               ?_Mcu_DisableSchedulerInt 0070  
          __size_of_Mcu_SetDieTempMode 0008                LedStateMachine@LedBlink 002C  
                      __initialization 002D                      _I2c_DataReceiveSm 02CD  
              LedStateMachine@LedPulse 002D       StdS_ManageStdServices@DieTempStr 0032  
                         __end_of_main 1654                           __end_of_itoa 0961  
               ??_LedPulseStateMachine 0028                           __end_of_utoa 0DEF  
                        AppSm@AppState 00B1                     ?_I2c_DataReceiveSm 003B  
                               ??_main 0076                                 ??_itoa 0034  
                 Dht_GetSensorData@Ret 0028                                 ??_utoa 002B  
       __size_of_I2c_SetI2cAddressMask 0005                       __end_of_TmrBInit 0ED2  
                           _ReceiveEvt 08B6          __end_of_I2c_SetI2cAddressMask 07FF  
                  ??_I2c_DataReceiveSm 003C                                 ?_AppSm 0070  
                    ?_Led_SetLedStatus 0074                ??_Dht_CalculateChecksum 0074  
             I2cSlv_I2cDrvHandle@Index 0029                        ReceiveEvt@Event 0075  
                               _ADRESH 009C                                 _ADRESL 009B  
                   ??_Led_SetLedStatus 0075                       ___awdiv@dividend 0022  
                     ??_ManageProtocol 0038                    App_MainTask@Counter 00B3  
                               _ANSELA 018C                                 _ANSELB 018D  
                               _ANSELC 018E                                 i1l4117 001C  
                               i1l4097 08B1                            _GenerateEvt 08F8  
                   __size_of_Mcu_Reset 0002                             _TaskNumber 100A  
                  App_MainTask@Options 003B                        ??_Mcu_SetWdgSts 0074  
        I2c_DataReceiveSm@I2cRxAddress 0064              __end_of_I2c_DataReceiveSm 03CA  
                       __CFG_PWRTE$OFF 0000                            ?_BoardReset 0070  
         __end_of_Mcu_EnableInterrupts 1646                                 _Sensor 00A0  
                   __size_of_SetBuffer 001E                  __size_of_App_MainTask 0118  
                               ___lmul 0A89                        _LedBehaviourSts 0079  
                               ___wmul 0820                              ??___awdiv 0074  
                       __CFG_STVREN$ON 0000                              ??___awmod 0074  
                  _Led_SetLedBlinkTime 17E7                              ??___lldiv 0074  
                            ??___lwdiv 0074                 Tmr_TmrBPrSet@IntFreqHz 0030  
                            ??___lwmod 0074                  __size_of_Dht_ReadData 0016  
                __size_of_Dht_ReadByte 0040            GetDieTemperature@DieTempRes 0025  
            __size_of_ControlLedDirect 0013                       ___awdiv@quotient 0026  
                      ___awmod@divisor 0020                        _CheckByteStatus 1687  
                      ___awmod@counter 0024                      _Adc_InitAdcModule 0B50  
                               _strcat 0961                        _Dht_RequestData 0877  
                               _strcpy 0806                                 itoa@cp 0035  
                         __pdataCOMMON 0079                     ?_Adc_InitAdcModule 0070  
          __end_of_I2cSlv_I2cDrvHandle 0F61                       ?_LedStateMachine 002B  
                        ?_LowPowerMode 0070                 Adc_SelectChannel@SelCh 0075  
                 __end_of_Mcu_ClearWdg 1637                __end_of_I2cSlv_MainTask 1774  
                 ?_Led_SetLedBlinkTime 0020                 __size_of_ScheduleTasks 00C4  
             __end_of_Mcu_SetWdgPeriod 16A6                    ??_Adc_InitAdcModule 0074  
                __end_ofi1_GenerateEvt 08B6        __end_of_Mcu_DisableSchedulerInt 1640  
           __size_of_Mcu_SetPullUpsSts 0008                          ?_Wdg_MainTask 003B  
              __end_of__initialization 009E                 Tmr_TmrBPrSet@Prescaler 0032  
                         _App_MainTask 00A2                 InitSchTimer@TmrBConfig 0046  
                         _Dht_ReadData 1774               ??_Mcu_EnableSchedulerInt 0074  
                         _Dht_ReadByte 0B87                             _StringCopy 091A  
                        __end_of_AppSm 0A02                         __pcstackCOMMON 0070  
             LedStateMachine@LedOutSts 0031           __size_of_Adc_StartConversion 0003  
                         __pidataBANK1 0003                           __pidataBANK2 0987  
            __end_of_Adc_InitAdcModule 0B87               __size_of_InitializeTasks 004E  
                    __end_of_Mcu_Reset 1635                  LedStateMachine@LedSts 002B  
                   LedStateMachine@Led 0030                  __size_of_Led_MainTask 002E  
                  _Led_SetLedPulseTime 16F7                  __end_of_I2c_SetConfig 175F  
                          ?_ReceiveEvt 0070               _I2cNewPacketNotification 00E2  
                       ??_LowPowerMode 0075                         _OPTION_REGbits 0095  
                           _SystemInit 1674                   __end_of_InitSchTimer 17CE  
                              ??_AppSm 003A          StdS_ManageStdServices@DieTemp 0036  
                __end_of_Tmr_TmrBPrSet 0638                    __size_of_BoardReset 0003  
          __size_of_StdS_SetI2cAddress 0031                  ??_Led_SetLedBlinkTime 0074  
                   _I2c_UpdateTxBuffer 083C                      __end_of_SetBuffer 0877  
                       _TemperatureDec 006D                             __pbssBANK0 0064  
                           __pbssBANK1 00A0                             __pbssBANK2 0148  
                           __pbssBANK3 01A0                             __pbssBANK4 0220  
                           __pbssBANK5 02A0                             __pbssBANK6 0320  
                       _TemperatureInt 0076                         _TemperatureStr 00D1  
                       ??_Wdg_MainTask 0076                    ?_I2c_UpdateTxBuffer 0074  
                 ?_Led_SetLedPulseTime 0074                      _Mcu_ConfigPullUps 06E4  
           __size_of_I2c_DataReceiveSm 00FD                            _HumidityDec 0069  
                          _HumidityInt 006A                            _HumidityStr 00CC  
                            ?_TmrBInit 0074                     ?_Mcu_ConfigPullUps 0070  
              __size_of_Tmr_TmrBConfig 004B                             __pmaintext 164D  
              __end_of_CheckByteStatus 1691                __size_of_Tmr_TmrBIrqSet 0029  
                              ?___lmul 0024                __end_of_Dht_RequestData 0895  
                         _Led_MainTask 0A5B                                ?___wmul 0020  
                        _ScheduleTasks 04BE             __end_of_CheckStopBitStatus 169B  
                           __pintentry 0004                     ClearRxBuffer@Index 0075  
                  ??_Mcu_ConfigPullUps 0074                         ___lmul@product 002C  
              __size_of_CheckAckStatus 000A                   ??_I2c_UpdateTxBuffer 0020  
             i1GenerateEvt@EventStatus 0072                                ?_strcat 0074  
                              ?_strcpy 0074          __size_of_LedBlinkStateMachine 009F  
                  Wdg_MainTask@Options 003B                 __size_of_ClearRxBuffer 0010  
                              _SSP1ADD 0212                   _Mcu_EnableInterrupts 1643  
               __size_of_ClearTxBuffer 0010                                _SSP1BUF 0211  
                              _SSP1MSK 0213                       ?_I2cSlv_MainTask 003B  
                      _I2cWriteRequest 00E8         Led_SetLedPulseTime@PulseTimeMs 0074  
                __end_of_MainInterrupt 002B                  __end_of_MainScheduler 1738  
                              _Led1Sts 00EA              __end_of_Mcu_ConfigPullUps 078A  
                ??_Led_SetLedPulseTime 0076          I2c_DataReceiveSm@ErrorCounter 00B6  
          __size_of_Mcu_StartSystemPll 0003                            ?_StringCopy 0020  
                  __size_of_ReceiveEvt 0021        __size_of_Mcu_EnableSchedulerInt 0003  
                           ??_TmrBInit 0020                         ?_ScheduleTasks 0070  
        Dht_CalculateChecksum@Checksum 0025                                ___awdiv 0CE8  
                      __size_of___lmul 0030                                ___awmod 0C09  
                              ___lldiv 0D3A                        __size_of___wmul 001C  
                              ___lwdiv 0B1B                                ___lwmod 0A2E  
           __size_of_Adc_InitAdcModule 0037                       _ControlLedDirect 1738  
                          _Temperature 00A9                              _I2cConfig 00BB  
                            _I2cPacket 239D                  Tmr_TmrBIrqSet@TmrNumb 0075  
                              __ptext1 1674                                __ptext2 1646  
                              __ptext3 1643                                __ptext4 17B7  
                              __ptext5 0C4F                                __ptext6 0582  
                              __ptext7 0820                                __ptext8 0A89  
                              __ptext9 0D3A                  __size_of_Mcu_ClearWdg 0002  
     __size_of_Mcu_DisableSchedulerInt 0003                        __size_of_strcat 0026  
                      __size_of_strcpy 001A                                _dpowers 1000  
                            _T2CONbits 001C                          ?_Tmr_StartTmr 0070  
                          ?_SystemInit 0070                       ___awmod@dividend 0022  
                    ??_InitializeTasks 00EB                              _T4CONbits 0417  
                      _Tmr2IsrCallback 00AB                  ?_Mcu_EnableInterrupts 0070  
                            _T6CONbits 041E          I2c_SetI2cAddress@SlaveAddress 0074  
                  Mcu_SetWdgSts@WdgSts 0074                                clrloop0 16B3  
                 end_of_initialization 009E         __size_of_Dht_CalculateChecksum 0021  
        __end_of_Dht_CalculateChecksum 08F8                           ?_GenerateEvt 0070  
               _MainSystemTimebaseFlag 00EF                                itoa@buf 0036  
                              init_ram 16BE                                itoa@val 0030  
           __end_of_Mcu_SetDieTempMode 1664                                initloop 16BF  
              __size_of_SetLedBehavSts 0042                        ___lldiv@divisor 0020  
            __size_of_Led_SetLedStatus 0010                   __end_of_LowPowerMode 16D7  
                         ??_BoardReset 0074                        ___lldiv@counter 002C  
                        _ClearRxBuffer 1707                          _ClearTxBuffer 1717  
                        StringCopy@Len 0023                       ?_CheckByteStatus 0070  
                         _Mcu_ClearWdg 1635               ??_StdS_ManageStdServices 0030  
                     ?_Dht_RequestData 0070                           __pstringtext 1000  
                              utoa@buf 002F                                utoa@val 0027  
        __size_of_LedPulseStateMachine 0068                  __size_of_InitSchTimer 0017  
                 __end_of_Wdg_MainTask 17A0                           SetBuffer@Len 0021  
                            _PORTAbits 000C                              _PORTCbits 000E  
        Mcu_SetDieTempMode@DieTempMode 0074                         ??_Tmr_StartTmr 0074  
                     _InterruptCounter 00A7                 _Mcu_EnableSchedulerInt 1640  
                    _TemperatureDecStr 00DC                      StringCopy@DestStr 0022  
                     Dht_ReadByte@Data 0020                        _Tmr4IsrCallback 00AD  
                            _TRISAbits 008C                              _TRISCbits 008E  
                  __size_of_StringCopy 0023                  _I2c_SetI2cAddressMask 07FA  
                    _TemperatureIntStr 00DF                    _Adc_StartConversion 163A  
                   __end_of_BoardReset 163A            I2c_DataReceiveSm@I2cRxState 0065  
                    ?_Mcu_SetWdgPeriod 0070              Tmr_TmrBPrSet@TmrBPrCfgSts 003D  
           __size_of_Mcu_ConfigPullUps 00A6                              _Led1Blink 0166  
                            _CmdBuffer 0220                     ??_Mcu_SetWdgPeriod 0074  
                            _Led1Pulse 00C6                __size_of_Adc_GetConvSts 0004  
                       ?_ClearRxBuffer 0070                        ??_ScheduleTasks 03A0  
                    App_MainTask@F4109 015A                         _Tmr_TmrBConfig 0C4F  
                    App_MainTask@F4095 0148                Tmr_TmrBPrSet@Postscaler 0033  
                __end_of_Mcu_SetWdgSts 165C                           _InitSchTimer 17B7  
                       ?_ClearTxBuffer 0070                    __size_of_SystemInit 0009  
                       _Tmr_TmrBIrqSet 09AF            Mcu_SetDieTempSts@DieTempSts 0074  
                 ?_Adc_StartConversion 0070             Adc_InitAdcModule@AdcConfig 0074  
                       __end_of___lmul 0AB9                         _CheckAckStatus 167D  
                       __end_of___wmul 083C                __size_of_Adc_ConfigAnCh 0070  
                    App_MainTask@WpuCh 0051                          __pidataCOMMON 07FF  
                         ??_ReceiveEvt 0074                         __end_of_strcat 0987  
                       __end_of_strcpy 0820                 ??_Mcu_EnableInterrupts 0074  
                  start_initialization 002D                              _Mcu_Reset 1633  
                      _Tmr6IsrCallback 00AF                              _RepBuffer 01A0  
           I2c_InitI2cModule@I2cConfig 0022           __size_of_I2cSlv_I2cDrvHandle 008F  
             __size_of_LedStateMachine 0031                              _SetBuffer 0859  
               __end_of_Tmr_TmrBConfig 0C9A                 __end_of_Tmr_TmrBIrqSet 09D8  
                            _TaskTable 0120                            _SystemState 006C  
               Led_SetLedBlinkTime@Led 0074                     __end_of_ReceiveEvt 08D7  
              __size_of_ManageProtocol 0113                  ??_Adc_StartConversion 0074  
                Tmr_TmrBConfig@TmrNumb 0044                 __end_of_CheckAckStatus 1687  
                             ??___lmul 0076                               ??___wmul 0074  
                    __size_of_TmrBInit 007B                           _RepBufferLen 00B9  
      __size_of_StdS_ManageStdServices 00F4                            __pdataBANK1 00EF  
                          __pdataBANK2 0120                     ClearTxBuffer@Index 0075  
              _Mcu_DisableSchedulerInt 163D                 __size_ofi1_GenerateEvt 0021  
                  Tmr_StartTmr@TmrNumb 0074                               ??_strcat 0020  
                             ??_strcpy 0075            __end_of_Led_SetLedBlinkTime 1800  
                       _HumidityDecStr 00D6                            __pbssBIGRAM 239D  
           __end_of_StdS_SetI2cAddress 0AEA                     __end_of_TaskNumber 100C  
               ?_I2c_SetI2cAddressMask 0070                            __pbssCOMMON 0076  
                           ?_Mcu_Reset 0070                         _HumidityIntStr 00D9  
                            ___latbits 0002                  App_MainTask@AdcConfig 004B  
                        __pcstackBANK0 0020                          __pcstackBANK1 00EB  
                        __pcstackBANK7 03A0                     _CheckStopBitStatus 1691  
               GenerateEvt@EventStatus 0020               __end_of_ControlLedDirect 174B  
                __size_of_LowPowerMode 000D                    ?_CheckStopBitStatus 0070  
                           ?_SetBuffer 0020           __end_of_LedBlinkStateMachine 1000  
                      ??_ClearRxBuffer 0074                   __size_of_GenerateEvt 0022  
                      ?_Tmr_TmrBConfig 0042                         _SetLedBehavSts 0BC7  
                      ??_ClearTxBuffer 0074                        ?_Tmr_TmrBIrqSet 0074  
                 __end_of_Tmr_StartTmr 17B7                           ??_StringCopy 0024  
                     _Led_SetLedStatus 16D7                 __size_of_I2c_SetConfig 0014  
                     ___lwdiv@dividend 0022                       GenerateEvt@Event 0021  
               __size_of_Tmr_TmrBPrSet 00B6                  __size_of_Wdg_MainTask 0016  
                    _Adc_SelectChannel 16A6                App_MainTask@AnalogChSel 003F  
                      ?_CheckAckStatus 0070                Tmr_TmrBIrqSet@TmrIrqSts 0074  
                             ?___awdiv 0020                               ?___awmod 0020  
                      _InitializeTasks 0C9A                               ?___lldiv 0020  
                  _I2cReplyPacketReady 0077                               ?___lwdiv 0020  
                             ?___lwmod 0020                     ?_Adc_SelectChannel 0070  
                 ??_CheckStopBitStatus 0074                              __pswtext1 102A  
          __size_of_I2c_UpdateTxBuffer 001D                            _I2cRxBuffer 0320  
             I2c_DataReceiveSm@Options 003B                  Adc_ConfigAnCh@AnChSel 0074  
                          _I2cTxBuffer 02A0                           ??_SystemInit 0076  
       InitializeTasks@ActiveTaskIndex 0063                    ??_Adc_SelectChannel 0074  
                       __size_of_AppSm 002A                           _LowPowerMode 16CA  
                     __CFG_WDTE$SWDTEN 0000                     __end_of_StringCopy 093D  
          __end_of_Led_SetLedPulseTime 1707                       ___lwdiv@quotient 0025  
               _StdS_ManageStdServices 03CA                 __end_of_SetLedBehavSts 0C09  
                        i1_GenerateEvt 0895             __end_of_Mcu_StartSystemPll 1649  
                         _Wdg_MainTask 178A                         ___wmul@product 0074  
             Dht_CalculateChecksum@Ret 0026                               _LATCbits 010E  
                       _Adc_GetConvSts 1649                              clear_ram0 16B2  
             __size_of_I2cSlv_MainTask 0015                LedPulseStateMachine@Led 0027  
                             _PIE1bits 0091                               _PIE3bits 0093  
                        _I2cSetAddress 00E6              __end_of_Adc_SelectChannel 16B2  
                    _I2c_InitI2cModule 0638                               _PIR1bits 0011  
                             _PIR3bits 0013                      ??_LedStateMachine 002E  
           Adc_GetConvResult@AdcResult 0021                     __end_of_SystemInit 167D  
                   ?_I2c_InitI2cModule 0070                               _SSP1CON1 0215  
                             _SSP1CON2 0216                               _SSP1CON3 0217  
            ??_Mcu_DisableSchedulerInt 0074                               _SSP1STAT 0214  
                       _Adc_ConfigAnCh 078A                     _Mcu_SetDieTempMode 165C  
              ?_Mcu_EnableSchedulerInt 0070                 __size_of_MainInterrupt 0027  
           I2c_DataReceiveSm@I2cRxFlag 00B7                 __size_of_MainScheduler 0011  
                           _ADCON0bits 009D                             _ADCON1bits 009E  
                    ___wmul@multiplier 0020                    ??_I2c_InitI2cModule 0020  
                             _WPUAbits 020C                               _WPUBbits 020D  
                             _WPUCbits 020E                          _I2c_SetConfig 174B  
                  ?_Mcu_SetDieTempMode 0070                            ??_Mcu_Reset 0074  
                        _Tmr_TmrBPrSet 0582                      ___lmul@multiplier 0024  
               I2cSlv_MainTask@Options 003B           __end_of_LedPulseStateMachine 0E57  
                       ?i1_GenerateEvt 0070               Tmr_TmrBConfig@TmrBConfig 0042  
                      ?_SetLedBehavSts 0070                 __end_of_Adc_GetConvSts 164D  
         LedBlinkStateMachine@LedBlink 0075                            ??_SetBuffer 0074  
                        ?_App_MainTask 003B                  _Dht_CalculateChecksum 08D7  
            __end_of_I2c_InitI2cModule 06E4                      _Adc_GetConvResult 16E7  
                        ?_Dht_ReadData 0070                __end_of_InitializeTasks 0CE8  
                             _Humidity 00A5                          ?_Dht_ReadByte 0070  
                 ??_Mcu_SetDieTempMode 0074                               _TmrBInit 0E57  
                   ?_Adc_GetConvResult 0074                         _ManageProtocol 01BA  
                             _TempSign 00BA                   Tmr_TmrBPrSet@Divisor 003E  
               __end_of_Adc_ConfigAnCh 07FA              __size_of_Mcu_SetWdgPeriod 000B  
       __end_of_Mcu_EnableSchedulerInt 1643                       __size_of___awdiv 0052  
                     __size_of___awmod 0046                       __size_of___lldiv 0053  
                  ??_Adc_GetConvResult 0020                    _I2cSlv_I2cDrvHandle 0ED2  
                     __size_of___lwdiv 0035                   Tmr_TmrBPrSet@TmrNumb 003C  
                     __size_of___lwmod 002D                      _GetDieTemperature 17CE  
                           _ANSELAbits 018C                             _ANSELBbits 018D  
                           _ANSELCbits 018E               __size_of_CheckByteStatus 000A  
                 _LedBlinkStateMachine 0F61                         ?_I2c_SetConfig 0070  
             __size_of_Dht_RequestData 001E                     ?_GetDieTemperature 0023  
                           strcat@from 0074                         ?_Tmr_TmrBPrSet 0030  
                      ___lwdiv@divisor 0020                        ___lwdiv@counter 0024  
                             __ptext10 09AF                               __ptext11 17A0  
                             __ptext20 178A                               __ptext12 0E57  
                             __ptext21 169B                               __ptext13 1727  
                             __ptext30 0638                               __ptext22 1635  
                             __ptext14 04BE                               __ptext31 1717  
                             __ptext23 0AEA                               __ptext15 0C9A  
                             __ptext40 1664                               __ptext32 1707  
                             __ptext24 0DEF                               __ptext16 00A2  
                             __ptext41 165C                               __ptext33 0ED2  
                             __ptext25 0F61                               __ptext17 0A5B  
                             __ptext50 09D8                               __ptext42 06E4  
                             __ptext34 083C                               __ptext26 1691  
                             __ptext18 175F                               __ptext51 0AB9  
                             __ptext43 0A02                               __ptext35 07FA  
                             __ptext27 1687                               __ptext19 02CD  
                             __ptext60 091A                               __ptext52 01BA  
                             __ptext44 1640                               __ptext36 0801  
                             __ptext28 167D                               __ptext61 0BC7  
                             __ptext53 0806                               __ptext45 163D  
                             __ptext37 0C09                               __ptext29 174B  
                             __ptext70 16E7                               __ptext62 16F7  
                             __ptext54 0961                               __ptext46 0877  
                             __ptext38 0CE8                               __ptext71 08F8  
                             __ptext63 17E7                               __ptext55 093D  
                             __ptext47 1774                               __ptext39 166C  
                             __ptext72 1738                               __ptext64 16CA  
                             __ptext56 03CA                               __ptext48 0B87  
                             __ptext81 0895                               __ptext73 16D7  
                             __ptext65 1654                               __ptext57 0D8D  
                             __ptext49 08D7                               __ptext74 1637  
                             __ptext66 17CE                               __ptext58 0A2E  
                             __ptext75 1633                               __ptext67 163A  
                             __ptext59 0B1B                               __ptext76 0859  
                             __ptext68 16A6                               __ptext77 08B6  
                             __ptext69 1649                               __ptext78 0B50  
                             __ptext79 078A                           _SSP1CON1bits 0215  
              I2c_DataReceiveSm@OpType 0066                    ??_GetDieTemperature 0076  
                 ?_I2cSlv_I2cDrvHandle 0070                  __size_of_Tmr_StartTmr 0017  
                           strcpy@from 0074              __end_of_Adc_GetConvResult 16F7  
                       ??_App_MainTask 003C                          _MainInterrupt 0004  
                   i1GenerateEvt@Event 0071                        ?_Adc_GetConvSts 0070  
                        _MainScheduler 1727                     TmrBInit@Postscaler 0075  
                        __size_of_main 0007                         ??_Dht_ReadData 0024  
                        __size_of_itoa 0024         I2c_DataReceiveSm@AddressStored 00B5  
                       ??_Dht_ReadByte 0074                          __size_of_utoa 0062  
                  Led_MainTask@Options 003B                 __end_of_ManageProtocol 02CD  
         I2c_UpdateTxBuffer@DataBuffer 0022             __size_of_Adc_SelectChannel 000C  
                __end_of_ScheduleTasks 0582                          ?_Led_MainTask 003B  
                      ?_Adc_ConfigAnCh 0070                        SetBuffer@Buffer 0023  
                  Led_SetLedStatus@Led 0020                               int$flags 007E  
                    _Mcu_SetDieTempSts 1664                      ??_I2cSlv_MainTask 0076  
                      StringCopy@Index 0074           ScheduleTasks@ActiveTaskIndex 0063  
            __end_of_GetDieTemperature 17E7                     ?_Mcu_SetDieTempSts 0070  
              ??_I2c_SetI2cAddressMask 0074                  ?_LedBlinkStateMachine 0070  
                          _OSCSTATbits 009A                             _INTCONbits 000B  
                         _Tmr_StartTmr 17A0               __end_of_Led_SetLedStatus 16E7  
                  ??_Mcu_SetDieTempSts 0074                             _FVRCONbits 0117  
                             itoa@base 0032                   _I2cNewTxNotification 00E4  
        __size_of_Mcu_EnableInterrupts 0003                 __size_of_Mcu_SetWdgSts 0008  
                      ??i1_GenerateEvt 0070                      _I2c_SetI2cAddress 0801  
                     ??_Tmr_TmrBConfig 0043                      Dht_ReadData@Index 0025  
                ??_I2cSlv_I2cDrvHandle 0024                       ??_Tmr_TmrBIrqSet 0075  
                    _Dht_GetSensorData 0A02                               intlevel1 0000  
                       ?_MainInterrupt 0070                      TmrBInit@Prescaler 0074  
                       ?_MainScheduler 0070                     ?_I2c_SetI2cAddress 0070  
               ?_Dht_CalculateChecksum 0020               I2c_UpdateTxBuffer@Length 0074  
                    ?_ControlLedDirect 0070                 Led_SetLedPulseTime@Led 0020  
                     ___lwmod@dividend 0022                 I2c_DataReceiveSm@Index 0043  
          __end_of_Adc_StartConversion 163D                     _StdS_SetI2cAddress 0AB9  
                     ___lldiv@dividend 0024                     ?_Dht_GetSensorData 0070  
               Mcu_ConfigPullUps@WpuCh 0074             __size_of_I2c_InitI2cModule 00AC  
               SetLedBehavSts@LedBehav 0025                      __CFG_CLKOUTEN$OFF 0000  
                     ??_CheckAckStatus 0074                        ?_ManageProtocol 0070  
                   ??_ControlLedDirect 0076             I2c_DataReceiveSm@RxCounter 0067  
                     ?_InitializeTasks 0070                             _OSCCONbits 0099  
                  ??_I2c_SetI2cAddress 0074              __end_of_Mcu_SetDieTempSts 166C  
                       ??_Led_MainTask 003C             I2c_DataReceiveSm@TxCounter 0068  
                  ?_StdS_SetI2cAddress 0070                    ??_Dht_GetSensorData 0076  
                       SetBuffer@Index 0024                         SetBuffer@Value 0020  
                 _LedPulseStateMachine 0DEF                        ??_I2c_SetConfig 0074  
                             utoa@base 0029                        ??_Tmr_TmrBPrSet 0034  
                             strcat@cp 0022                I2c_UpdateTxBuffer@Index 0023  
                             strcat@to 0021                       ___lldiv@quotient 0028  
                      ___lwmod@divisor 0020                               strcpy@cp 0020  
              ?_StdS_ManageStdServices 0070                               strcpy@to 0021  
                      ___lwmod@counter 0075              __end_of_I2c_SetI2cAddress 0806  
                ReceiveEvt@EventStatus 0074                   ??_StdS_SetI2cAddress 0074  
            __end_of_Dht_GetSensorData 0A2E                             _WDTCONbits 0097  
                    ??_CheckByteStatus 0074           __size_of_Led_SetLedBlinkTime 0019  
                    ??_Dht_RequestData 0074                          ??_GenerateEvt 0074  
                      _LedStateMachine 0AEA                        TmrBInit@TmrNumb 0021  
           __size_of_Adc_GetConvResult 0010                 Led_SetLedStatus@LedSts 0074  
                  Dht_ReadByte@Counter 0021  I2c_SetI2cAddressMask@SlaveAddressMask 0074  
I2cSlv_I2cDrvHandle@I2cReceiveMsgState 00B4                  __end_of_ClearRxBuffer 1717  
                    Dht_ReadByte@Index 0023                  __end_of_ClearTxBuffer 1727  
                        ?_Mcu_ClearWdg 0070                          _Mcu_SetWdgSts 1654  
