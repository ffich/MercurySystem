

Microchip Technology PIC LITE Macro Assembler V1.45 build -152302408 
                                                                                               Fri Mar 27 20:41:26 2020

Microchip Technology Omniscient Code Generator v1.45 (Free mode) build 201711160504
     1                           	processor	16F1825
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	idataCOMMON,global,class=CODE,delta=2
     5                           	psect	idataBANK0,global,class=CODE,delta=2
     6                           	psect	idataBANK1,global,class=CODE,delta=2
     7                           	psect	idataBANK2,global,class=CODE,delta=2
     8                           	psect	stringtext1,global,class=STRCODE,delta=2
     9                           	psect	stringtext2,global,class=STRCODE,delta=2
    10                           	psect	stringtext3,global,class=STRCODE,delta=2
    11                           	psect	stringtext4,global,class=STRCODE,delta=2
    12                           	psect	stringtext5,global,class=STRCODE,delta=2
    13                           	psect	stringtext6,global,class=STRCODE,delta=2
    14                           	psect	cinit,global,class=CODE,merge=1,delta=2
    15                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
    16                           	psect	dataCOMMON,global,class=COMMON,space=1,delta=1
    17                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    18                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1
    19                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    20                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1
    21                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1
    22                           	psect	dataBANK2,global,class=BANK2,space=1,delta=1
    23                           	psect	bssBANK3,global,class=BANK3,space=1,delta=1
    24                           	psect	bssBANK4,global,class=BANK4,space=1,delta=1
    25                           	psect	bssBANK5,global,class=BANK5,space=1,delta=1
    26                           	psect	bssBANK6,global,class=BANK6,space=1,delta=1
    27                           	psect	inittext,global,class=CODE,delta=2
    28                           	psect	clrtext,global,class=CODE,delta=2
    29                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    30                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    31                           	psect	maintext,global,class=CODE,merge=1,split=1,delta=2
    32                           	psect	text1,local,class=CODE,merge=1,delta=2
    33                           	psect	text2,local,class=CODE,merge=1,delta=2
    34                           	psect	text3,local,class=CODE,merge=1,delta=2
    35                           	psect	text4,local,class=CODE,merge=1,delta=2
    36                           	psect	text5,local,class=CODE,merge=1,delta=2
    37                           	psect	text6,local,class=CODE,merge=1,delta=2
    38                           	psect	text7,local,class=CODE,merge=1,delta=2,group=2
    39                           	psect	text8,local,class=CODE,merge=1,delta=2,group=2
    40                           	psect	text9,local,class=CODE,merge=1,delta=2,group=2
    41                           	psect	text10,local,class=CODE,merge=1,delta=2
    42                           	psect	text11,local,class=CODE,merge=1,delta=2
    43                           	psect	text12,local,class=CODE,merge=1,delta=2
    44                           	psect	text13,local,class=CODE,merge=1,delta=2
    45                           	psect	text14,local,class=CODE,merge=1,delta=2
    46                           	psect	text15,local,class=CODE,merge=1,delta=2
    47                           	psect	text16,local,class=CODE,merge=1,delta=2
    48                           	psect	text17,local,class=CODE,merge=1,delta=2
    49                           	psect	text18,local,class=CODE,merge=1,delta=2
    50                           	psect	text19,local,class=CODE,merge=1,delta=2
    51                           	psect	swtext1,local,class=CONST,delta=2
    52                           	psect	text20,local,class=CODE,merge=1,delta=2
    53                           	psect	text21,local,class=CODE,merge=1,delta=2
    54                           	psect	text22,local,class=CODE,merge=1,delta=2
    55                           	psect	text23,local,class=CODE,merge=1,delta=2
    56                           	psect	text24,local,class=CODE,merge=1,delta=2
    57                           	psect	text25,local,class=CODE,merge=1,delta=2
    58                           	psect	text26,local,class=CODE,merge=1,delta=2
    59                           	psect	text27,local,class=CODE,merge=1,delta=2
    60                           	psect	text28,local,class=CODE,merge=1,delta=2
    61                           	psect	text29,local,class=CODE,merge=1,delta=2
    62                           	psect	text30,local,class=CODE,merge=1,delta=2
    63                           	psect	text31,local,class=CODE,merge=1,delta=2
    64                           	psect	text32,local,class=CODE,merge=1,delta=2
    65                           	psect	text33,local,class=CODE,merge=1,delta=2
    66                           	psect	text34,local,class=CODE,merge=1,delta=2
    67                           	psect	text35,local,class=CODE,merge=1,delta=2
    68                           	psect	text36,local,class=CODE,merge=1,delta=2
    69                           	psect	text37,local,class=CODE,merge=1,delta=2
    70                           	psect	text38,local,class=CODE,merge=1,delta=2
    71                           	psect	text39,local,class=CODE,merge=1,delta=2
    72                           	psect	text40,local,class=CODE,merge=1,delta=2
    73                           	psect	text41,local,class=CODE,merge=1,delta=2
    74                           	psect	text42,local,class=CODE,merge=1,delta=2
    75                           	psect	text43,local,class=CODE,merge=1,delta=2
    76                           	psect	text44,local,class=CODE,merge=1,delta=2
    77                           	psect	text45,local,class=CODE,merge=1,delta=2
    78                           	psect	text46,local,class=CODE,merge=1,delta=2
    79                           	psect	text47,local,class=CODE,merge=1,delta=2
    80                           	psect	text48,local,class=CODE,merge=1,delta=2
    81                           	psect	text49,local,class=CODE,merge=1,delta=2,group=2
    82                           	psect	text50,local,class=CODE,merge=1,delta=2,group=2
    83                           	psect	text51,local,class=CODE,merge=1,delta=2,group=2
    84                           	psect	text52,local,class=CODE,merge=1,delta=2
    85                           	psect	text53,local,class=CODE,merge=1,delta=2
    86                           	psect	text54,local,class=CODE,merge=1,delta=2
    87                           	psect	text55,local,class=CODE,merge=1,delta=2
    88                           	psect	text56,local,class=CODE,merge=1,delta=2
    89                           	psect	text57,local,class=CODE,merge=1,delta=2
    90                           	psect	text58,local,class=CODE,merge=1,delta=2
    91                           	psect	text59,local,class=CODE,merge=1,delta=2
    92                           	psect	text60,local,class=CODE,merge=1,delta=2
    93                           	psect	text61,local,class=CODE,merge=1,delta=2
    94                           	psect	text62,local,class=CODE,merge=1,delta=2
    95                           	psect	text63,local,class=CODE,merge=1,delta=2
    96                           	psect	text64,local,class=CODE,merge=1,delta=2
    97                           	psect	text65,local,class=CODE,merge=1,delta=2
    98                           	psect	text66,local,class=CODE,merge=1,delta=2
    99                           	psect	text67,local,class=CODE,merge=1,delta=2
   100                           	psect	text68,local,class=CODE,merge=1,delta=2
   101                           	psect	text69,local,class=CODE,merge=1,delta=2
   102                           	psect	text70,local,class=CODE,merge=1,delta=2
   103                           	psect	intentry,global,class=CODE,delta=2
   104                           	psect	text72,local,class=CODE,merge=1,delta=2
   105                           	dabs	1,0x620,48
   106                           	dabs	1,0x5CD,35
   107                           	dabs	1,0x239D,0,_I2cPacket
   108                           	dabs	1,0x7E,2
   109  0000                     
   110                           ; Version 1.45
   111                           ; Generated 16/11/2017 GMT
   112                           ; 
   113                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
   114                           ; All rights reserved.
   115                           ; 
   116                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
   117                           ; 
   118                           ; Redistribution and use in source and binary forms, with or without modification, are
   119                           ; permitted provided that the following conditions are met:
   120                           ; 
   121                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
   122                           ;        conditions and the following disclaimer.
   123                           ; 
   124                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
   125                           ;        of conditions and the following disclaimer in the documentation and/or other
   126                           ;        materials provided with the distribution.
   127                           ; 
   128                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
   129                           ;        software without specific prior written permission.
   130                           ; 
   131                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
   132                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
   133                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
   134                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
   135                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
   136                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
   137                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   138                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   139                           ; 
   140                           ; 
   141                           ; Code-generator required, PIC16F1825 Definitions
   142                           ; 
   143                           ; SFR Addresses
   144  0000                     	;# 
   145  0001                     	;# 
   146  0002                     	;# 
   147  0003                     	;# 
   148  0004                     	;# 
   149  0005                     	;# 
   150  0006                     	;# 
   151  0007                     	;# 
   152  0008                     	;# 
   153  0009                     	;# 
   154  000A                     	;# 
   155  000B                     	;# 
   156  000C                     	;# 
   157  000E                     	;# 
   158  0011                     	;# 
   159  0012                     	;# 
   160  0013                     	;# 
   161  0015                     	;# 
   162  0016                     	;# 
   163  0016                     	;# 
   164  0017                     	;# 
   165  0018                     	;# 
   166  0019                     	;# 
   167  001A                     	;# 
   168  001B                     	;# 
   169  001C                     	;# 
   170  001E                     	;# 
   171  001F                     	;# 
   172  008C                     	;# 
   173  008E                     	;# 
   174  0091                     	;# 
   175  0092                     	;# 
   176  0093                     	;# 
   177  0095                     	;# 
   178  0096                     	;# 
   179  0097                     	;# 
   180  0098                     	;# 
   181  0099                     	;# 
   182  009A                     	;# 
   183  009B                     	;# 
   184  009B                     	;# 
   185  009C                     	;# 
   186  009D                     	;# 
   187  009E                     	;# 
   188  010C                     	;# 
   189  010E                     	;# 
   190  0111                     	;# 
   191  0112                     	;# 
   192  0113                     	;# 
   193  0114                     	;# 
   194  0115                     	;# 
   195  0116                     	;# 
   196  0117                     	;# 
   197  0118                     	;# 
   198  0119                     	;# 
   199  011A                     	;# 
   200  011B                     	;# 
   201  011D                     	;# 
   202  011E                     	;# 
   203  018C                     	;# 
   204  018E                     	;# 
   205  0191                     	;# 
   206  0191                     	;# 
   207  0192                     	;# 
   208  0193                     	;# 
   209  0193                     	;# 
   210  0193                     	;# 
   211  0194                     	;# 
   212  0195                     	;# 
   213  0196                     	;# 
   214  0199                     	;# 
   215  019A                     	;# 
   216  019B                     	;# 
   217  019B                     	;# 
   218  019C                     	;# 
   219  019D                     	;# 
   220  019E                     	;# 
   221  019F                     	;# 
   222  020C                     	;# 
   223  020E                     	;# 
   224  0211                     	;# 
   225  0211                     	;# 
   226  0212                     	;# 
   227  0212                     	;# 
   228  0213                     	;# 
   229  0213                     	;# 
   230  0214                     	;# 
   231  0214                     	;# 
   232  0215                     	;# 
   233  0215                     	;# 
   234  0215                     	;# 
   235  0216                     	;# 
   236  0216                     	;# 
   237  0217                     	;# 
   238  0217                     	;# 
   239  0291                     	;# 
   240  0291                     	;# 
   241  0292                     	;# 
   242  0293                     	;# 
   243  0294                     	;# 
   244  0295                     	;# 
   245  0295                     	;# 
   246  0296                     	;# 
   247  0298                     	;# 
   248  0298                     	;# 
   249  0299                     	;# 
   250  029A                     	;# 
   251  029B                     	;# 
   252  029C                     	;# 
   253  029D                     	;# 
   254  029E                     	;# 
   255  0311                     	;# 
   256  0311                     	;# 
   257  0312                     	;# 
   258  0313                     	;# 
   259  0318                     	;# 
   260  0318                     	;# 
   261  0319                     	;# 
   262  031A                     	;# 
   263  038C                     	;# 
   264  038E                     	;# 
   265  0391                     	;# 
   266  0392                     	;# 
   267  0393                     	;# 
   268  039A                     	;# 
   269  039C                     	;# 
   270  039D                     	;# 
   271  039E                     	;# 
   272  039F                     	;# 
   273  0415                     	;# 
   274  0416                     	;# 
   275  0417                     	;# 
   276  041C                     	;# 
   277  041D                     	;# 
   278  041E                     	;# 
   279  0FE4                     	;# 
   280  0FE5                     	;# 
   281  0FE6                     	;# 
   282  0FE7                     	;# 
   283  0FE8                     	;# 
   284  0FE9                     	;# 
   285  0FEA                     	;# 
   286  0FEB                     	;# 
   287  0FED                     	;# 
   288  0FEE                     	;# 
   289  0FEF                     	;# 
   290  0000                     	;# 
   291  0001                     	;# 
   292  0002                     	;# 
   293  0003                     	;# 
   294  0004                     	;# 
   295  0005                     	;# 
   296  0006                     	;# 
   297  0007                     	;# 
   298  0008                     	;# 
   299  0009                     	;# 
   300  000A                     	;# 
   301  000B                     	;# 
   302  000C                     	;# 
   303  000E                     	;# 
   304  0011                     	;# 
   305  0012                     	;# 
   306  0013                     	;# 
   307  0015                     	;# 
   308  0016                     	;# 
   309  0016                     	;# 
   310  0017                     	;# 
   311  0018                     	;# 
   312  0019                     	;# 
   313  001A                     	;# 
   314  001B                     	;# 
   315  001C                     	;# 
   316  001E                     	;# 
   317  001F                     	;# 
   318  008C                     	;# 
   319  008E                     	;# 
   320  0091                     	;# 
   321  0092                     	;# 
   322  0093                     	;# 
   323  0095                     	;# 
   324  0096                     	;# 
   325  0097                     	;# 
   326  0098                     	;# 
   327  0099                     	;# 
   328  009A                     	;# 
   329  009B                     	;# 
   330  009B                     	;# 
   331  009C                     	;# 
   332  009D                     	;# 
   333  009E                     	;# 
   334  010C                     	;# 
   335  010E                     	;# 
   336  0111                     	;# 
   337  0112                     	;# 
   338  0113                     	;# 
   339  0114                     	;# 
   340  0115                     	;# 
   341  0116                     	;# 
   342  0117                     	;# 
   343  0118                     	;# 
   344  0119                     	;# 
   345  011A                     	;# 
   346  011B                     	;# 
   347  011D                     	;# 
   348  011E                     	;# 
   349  018C                     	;# 
   350  018E                     	;# 
   351  0191                     	;# 
   352  0191                     	;# 
   353  0192                     	;# 
   354  0193                     	;# 
   355  0193                     	;# 
   356  0193                     	;# 
   357  0194                     	;# 
   358  0195                     	;# 
   359  0196                     	;# 
   360  0199                     	;# 
   361  019A                     	;# 
   362  019B                     	;# 
   363  019B                     	;# 
   364  019C                     	;# 
   365  019D                     	;# 
   366  019E                     	;# 
   367  019F                     	;# 
   368  020C                     	;# 
   369  020E                     	;# 
   370  0211                     	;# 
   371  0211                     	;# 
   372  0212                     	;# 
   373  0212                     	;# 
   374  0213                     	;# 
   375  0213                     	;# 
   376  0214                     	;# 
   377  0214                     	;# 
   378  0215                     	;# 
   379  0215                     	;# 
   380  0215                     	;# 
   381  0216                     	;# 
   382  0216                     	;# 
   383  0217                     	;# 
   384  0217                     	;# 
   385  0291                     	;# 
   386  0291                     	;# 
   387  0292                     	;# 
   388  0293                     	;# 
   389  0294                     	;# 
   390  0295                     	;# 
   391  0295                     	;# 
   392  0296                     	;# 
   393  0298                     	;# 
   394  0298                     	;# 
   395  0299                     	;# 
   396  029A                     	;# 
   397  029B                     	;# 
   398  029C                     	;# 
   399  029D                     	;# 
   400  029E                     	;# 
   401  0311                     	;# 
   402  0311                     	;# 
   403  0312                     	;# 
   404  0313                     	;# 
   405  0318                     	;# 
   406  0318                     	;# 
   407  0319                     	;# 
   408  031A                     	;# 
   409  038C                     	;# 
   410  038E                     	;# 
   411  0391                     	;# 
   412  0392                     	;# 
   413  0393                     	;# 
   414  039A                     	;# 
   415  039C                     	;# 
   416  039D                     	;# 
   417  039E                     	;# 
   418  039F                     	;# 
   419  0415                     	;# 
   420  0416                     	;# 
   421  0417                     	;# 
   422  041C                     	;# 
   423  041D                     	;# 
   424  041E                     	;# 
   425  0FE4                     	;# 
   426  0FE5                     	;# 
   427  0FE6                     	;# 
   428  0FE7                     	;# 
   429  0FE8                     	;# 
   430  0FE9                     	;# 
   431  0FEA                     	;# 
   432  0FEB                     	;# 
   433  0FED                     	;# 
   434  0FEE                     	;# 
   435  0FEF                     	;# 
   436  0000                     	;# 
   437  0001                     	;# 
   438  0002                     	;# 
   439  0003                     	;# 
   440  0004                     	;# 
   441  0005                     	;# 
   442  0006                     	;# 
   443  0007                     	;# 
   444  0008                     	;# 
   445  0009                     	;# 
   446  000A                     	;# 
   447  000B                     	;# 
   448  000C                     	;# 
   449  000E                     	;# 
   450  0011                     	;# 
   451  0012                     	;# 
   452  0013                     	;# 
   453  0015                     	;# 
   454  0016                     	;# 
   455  0016                     	;# 
   456  0017                     	;# 
   457  0018                     	;# 
   458  0019                     	;# 
   459  001A                     	;# 
   460  001B                     	;# 
   461  001C                     	;# 
   462  001E                     	;# 
   463  001F                     	;# 
   464  008C                     	;# 
   465  008E                     	;# 
   466  0091                     	;# 
   467  0092                     	;# 
   468  0093                     	;# 
   469  0095                     	;# 
   470  0096                     	;# 
   471  0097                     	;# 
   472  0098                     	;# 
   473  0099                     	;# 
   474  009A                     	;# 
   475  009B                     	;# 
   476  009B                     	;# 
   477  009C                     	;# 
   478  009D                     	;# 
   479  009E                     	;# 
   480  010C                     	;# 
   481  010E                     	;# 
   482  0111                     	;# 
   483  0112                     	;# 
   484  0113                     	;# 
   485  0114                     	;# 
   486  0115                     	;# 
   487  0116                     	;# 
   488  0117                     	;# 
   489  0118                     	;# 
   490  0119                     	;# 
   491  011A                     	;# 
   492  011B                     	;# 
   493  011D                     	;# 
   494  011E                     	;# 
   495  018C                     	;# 
   496  018E                     	;# 
   497  0191                     	;# 
   498  0191                     	;# 
   499  0192                     	;# 
   500  0193                     	;# 
   501  0193                     	;# 
   502  0193                     	;# 
   503  0194                     	;# 
   504  0195                     	;# 
   505  0196                     	;# 
   506  0199                     	;# 
   507  019A                     	;# 
   508  019B                     	;# 
   509  019B                     	;# 
   510  019C                     	;# 
   511  019D                     	;# 
   512  019E                     	;# 
   513  019F                     	;# 
   514  020C                     	;# 
   515  020E                     	;# 
   516  0211                     	;# 
   517  0211                     	;# 
   518  0212                     	;# 
   519  0212                     	;# 
   520  0213                     	;# 
   521  0213                     	;# 
   522  0214                     	;# 
   523  0214                     	;# 
   524  0215                     	;# 
   525  0215                     	;# 
   526  0215                     	;# 
   527  0216                     	;# 
   528  0216                     	;# 
   529  0217                     	;# 
   530  0217                     	;# 
   531  0291                     	;# 
   532  0291                     	;# 
   533  0292                     	;# 
   534  0293                     	;# 
   535  0294                     	;# 
   536  0295                     	;# 
   537  0295                     	;# 
   538  0296                     	;# 
   539  0298                     	;# 
   540  0298                     	;# 
   541  0299                     	;# 
   542  029A                     	;# 
   543  029B                     	;# 
   544  029C                     	;# 
   545  029D                     	;# 
   546  029E                     	;# 
   547  0311                     	;# 
   548  0311                     	;# 
   549  0312                     	;# 
   550  0313                     	;# 
   551  0318                     	;# 
   552  0318                     	;# 
   553  0319                     	;# 
   554  031A                     	;# 
   555  038C                     	;# 
   556  038E                     	;# 
   557  0391                     	;# 
   558  0392                     	;# 
   559  0393                     	;# 
   560  039A                     	;# 
   561  039C                     	;# 
   562  039D                     	;# 
   563  039E                     	;# 
   564  039F                     	;# 
   565  0415                     	;# 
   566  0416                     	;# 
   567  0417                     	;# 
   568  041C                     	;# 
   569  041D                     	;# 
   570  041E                     	;# 
   571  0FE4                     	;# 
   572  0FE5                     	;# 
   573  0FE6                     	;# 
   574  0FE7                     	;# 
   575  0FE8                     	;# 
   576  0FE9                     	;# 
   577  0FEA                     	;# 
   578  0FEB                     	;# 
   579  0FED                     	;# 
   580  0FEE                     	;# 
   581  0FEF                     	;# 
   582  0000                     	;# 
   583  0001                     	;# 
   584  0002                     	;# 
   585  0003                     	;# 
   586  0004                     	;# 
   587  0005                     	;# 
   588  0006                     	;# 
   589  0007                     	;# 
   590  0008                     	;# 
   591  0009                     	;# 
   592  000A                     	;# 
   593  000B                     	;# 
   594  000C                     	;# 
   595  000E                     	;# 
   596  0011                     	;# 
   597  0012                     	;# 
   598  0013                     	;# 
   599  0015                     	;# 
   600  0016                     	;# 
   601  0016                     	;# 
   602  0017                     	;# 
   603  0018                     	;# 
   604  0019                     	;# 
   605  001A                     	;# 
   606  001B                     	;# 
   607  001C                     	;# 
   608  001E                     	;# 
   609  001F                     	;# 
   610  008C                     	;# 
   611  008E                     	;# 
   612  0091                     	;# 
   613  0092                     	;# 
   614  0093                     	;# 
   615  0095                     	;# 
   616  0096                     	;# 
   617  0097                     	;# 
   618  0098                     	;# 
   619  0099                     	;# 
   620  009A                     	;# 
   621  009B                     	;# 
   622  009B                     	;# 
   623  009C                     	;# 
   624  009D                     	;# 
   625  009E                     	;# 
   626  010C                     	;# 
   627  010E                     	;# 
   628  0111                     	;# 
   629  0112                     	;# 
   630  0113                     	;# 
   631  0114                     	;# 
   632  0115                     	;# 
   633  0116                     	;# 
   634  0117                     	;# 
   635  0118                     	;# 
   636  0119                     	;# 
   637  011A                     	;# 
   638  011B                     	;# 
   639  011D                     	;# 
   640  011E                     	;# 
   641  018C                     	;# 
   642  018E                     	;# 
   643  0191                     	;# 
   644  0191                     	;# 
   645  0192                     	;# 
   646  0193                     	;# 
   647  0193                     	;# 
   648  0193                     	;# 
   649  0194                     	;# 
   650  0195                     	;# 
   651  0196                     	;# 
   652  0199                     	;# 
   653  019A                     	;# 
   654  019B                     	;# 
   655  019B                     	;# 
   656  019C                     	;# 
   657  019D                     	;# 
   658  019E                     	;# 
   659  019F                     	;# 
   660  020C                     	;# 
   661  020E                     	;# 
   662  0211                     	;# 
   663  0211                     	;# 
   664  0212                     	;# 
   665  0212                     	;# 
   666  0213                     	;# 
   667  0213                     	;# 
   668  0214                     	;# 
   669  0214                     	;# 
   670  0215                     	;# 
   671  0215                     	;# 
   672  0215                     	;# 
   673  0216                     	;# 
   674  0216                     	;# 
   675  0217                     	;# 
   676  0217                     	;# 
   677  0291                     	;# 
   678  0291                     	;# 
   679  0292                     	;# 
   680  0293                     	;# 
   681  0294                     	;# 
   682  0295                     	;# 
   683  0295                     	;# 
   684  0296                     	;# 
   685  0298                     	;# 
   686  0298                     	;# 
   687  0299                     	;# 
   688  029A                     	;# 
   689  029B                     	;# 
   690  029C                     	;# 
   691  029D                     	;# 
   692  029E                     	;# 
   693  0311                     	;# 
   694  0311                     	;# 
   695  0312                     	;# 
   696  0313                     	;# 
   697  0318                     	;# 
   698  0318                     	;# 
   699  0319                     	;# 
   700  031A                     	;# 
   701  038C                     	;# 
   702  038E                     	;# 
   703  0391                     	;# 
   704  0392                     	;# 
   705  0393                     	;# 
   706  039A                     	;# 
   707  039C                     	;# 
   708  039D                     	;# 
   709  039E                     	;# 
   710  039F                     	;# 
   711  0415                     	;# 
   712  0416                     	;# 
   713  0417                     	;# 
   714  041C                     	;# 
   715  041D                     	;# 
   716  041E                     	;# 
   717  0FE4                     	;# 
   718  0FE5                     	;# 
   719  0FE6                     	;# 
   720  0FE7                     	;# 
   721  0FE8                     	;# 
   722  0FE9                     	;# 
   723  0FEA                     	;# 
   724  0FEB                     	;# 
   725  0FED                     	;# 
   726  0FEE                     	;# 
   727  0FEF                     	;# 
   728  0000                     	;# 
   729  0001                     	;# 
   730  0002                     	;# 
   731  0003                     	;# 
   732  0004                     	;# 
   733  0005                     	;# 
   734  0006                     	;# 
   735  0007                     	;# 
   736  0008                     	;# 
   737  0009                     	;# 
   738  000A                     	;# 
   739  000B                     	;# 
   740  000C                     	;# 
   741  000E                     	;# 
   742  0011                     	;# 
   743  0012                     	;# 
   744  0013                     	;# 
   745  0015                     	;# 
   746  0016                     	;# 
   747  0016                     	;# 
   748  0017                     	;# 
   749  0018                     	;# 
   750  0019                     	;# 
   751  001A                     	;# 
   752  001B                     	;# 
   753  001C                     	;# 
   754  001E                     	;# 
   755  001F                     	;# 
   756  008C                     	;# 
   757  008E                     	;# 
   758  0091                     	;# 
   759  0092                     	;# 
   760  0093                     	;# 
   761  0095                     	;# 
   762  0096                     	;# 
   763  0097                     	;# 
   764  0098                     	;# 
   765  0099                     	;# 
   766  009A                     	;# 
   767  009B                     	;# 
   768  009B                     	;# 
   769  009C                     	;# 
   770  009D                     	;# 
   771  009E                     	;# 
   772  010C                     	;# 
   773  010E                     	;# 
   774  0111                     	;# 
   775  0112                     	;# 
   776  0113                     	;# 
   777  0114                     	;# 
   778  0115                     	;# 
   779  0116                     	;# 
   780  0117                     	;# 
   781  0118                     	;# 
   782  0119                     	;# 
   783  011A                     	;# 
   784  011B                     	;# 
   785  011D                     	;# 
   786  011E                     	;# 
   787  018C                     	;# 
   788  018E                     	;# 
   789  0191                     	;# 
   790  0191                     	;# 
   791  0192                     	;# 
   792  0193                     	;# 
   793  0193                     	;# 
   794  0193                     	;# 
   795  0194                     	;# 
   796  0195                     	;# 
   797  0196                     	;# 
   798  0199                     	;# 
   799  019A                     	;# 
   800  019B                     	;# 
   801  019B                     	;# 
   802  019C                     	;# 
   803  019D                     	;# 
   804  019E                     	;# 
   805  019F                     	;# 
   806  020C                     	;# 
   807  020E                     	;# 
   808  0211                     	;# 
   809  0211                     	;# 
   810  0212                     	;# 
   811  0212                     	;# 
   812  0213                     	;# 
   813  0213                     	;# 
   814  0214                     	;# 
   815  0214                     	;# 
   816  0215                     	;# 
   817  0215                     	;# 
   818  0215                     	;# 
   819  0216                     	;# 
   820  0216                     	;# 
   821  0217                     	;# 
   822  0217                     	;# 
   823  0291                     	;# 
   824  0291                     	;# 
   825  0292                     	;# 
   826  0293                     	;# 
   827  0294                     	;# 
   828  0295                     	;# 
   829  0295                     	;# 
   830  0296                     	;# 
   831  0298                     	;# 
   832  0298                     	;# 
   833  0299                     	;# 
   834  029A                     	;# 
   835  029B                     	;# 
   836  029C                     	;# 
   837  029D                     	;# 
   838  029E                     	;# 
   839  0311                     	;# 
   840  0311                     	;# 
   841  0312                     	;# 
   842  0313                     	;# 
   843  0318                     	;# 
   844  0318                     	;# 
   845  0319                     	;# 
   846  031A                     	;# 
   847  038C                     	;# 
   848  038E                     	;# 
   849  0391                     	;# 
   850  0392                     	;# 
   851  0393                     	;# 
   852  039A                     	;# 
   853  039C                     	;# 
   854  039D                     	;# 
   855  039E                     	;# 
   856  039F                     	;# 
   857  0415                     	;# 
   858  0416                     	;# 
   859  0417                     	;# 
   860  041C                     	;# 
   861  041D                     	;# 
   862  041E                     	;# 
   863  0FE4                     	;# 
   864  0FE5                     	;# 
   865  0FE6                     	;# 
   866  0FE7                     	;# 
   867  0FE8                     	;# 
   868  0FE9                     	;# 
   869  0FEA                     	;# 
   870  0FEB                     	;# 
   871  0FED                     	;# 
   872  0FEE                     	;# 
   873  0FEF                     	;# 
   874  0000                     	;# 
   875  0001                     	;# 
   876  0002                     	;# 
   877  0003                     	;# 
   878  0004                     	;# 
   879  0005                     	;# 
   880  0006                     	;# 
   881  0007                     	;# 
   882  0008                     	;# 
   883  0009                     	;# 
   884  000A                     	;# 
   885  000B                     	;# 
   886  000C                     	;# 
   887  000E                     	;# 
   888  0011                     	;# 
   889  0012                     	;# 
   890  0013                     	;# 
   891  0015                     	;# 
   892  0016                     	;# 
   893  0016                     	;# 
   894  0017                     	;# 
   895  0018                     	;# 
   896  0019                     	;# 
   897  001A                     	;# 
   898  001B                     	;# 
   899  001C                     	;# 
   900  001E                     	;# 
   901  001F                     	;# 
   902  008C                     	;# 
   903  008E                     	;# 
   904  0091                     	;# 
   905  0092                     	;# 
   906  0093                     	;# 
   907  0095                     	;# 
   908  0096                     	;# 
   909  0097                     	;# 
   910  0098                     	;# 
   911  0099                     	;# 
   912  009A                     	;# 
   913  009B                     	;# 
   914  009B                     	;# 
   915  009C                     	;# 
   916  009D                     	;# 
   917  009E                     	;# 
   918  010C                     	;# 
   919  010E                     	;# 
   920  0111                     	;# 
   921  0112                     	;# 
   922  0113                     	;# 
   923  0114                     	;# 
   924  0115                     	;# 
   925  0116                     	;# 
   926  0117                     	;# 
   927  0118                     	;# 
   928  0119                     	;# 
   929  011A                     	;# 
   930  011B                     	;# 
   931  011D                     	;# 
   932  011E                     	;# 
   933  018C                     	;# 
   934  018E                     	;# 
   935  0191                     	;# 
   936  0191                     	;# 
   937  0192                     	;# 
   938  0193                     	;# 
   939  0193                     	;# 
   940  0193                     	;# 
   941  0194                     	;# 
   942  0195                     	;# 
   943  0196                     	;# 
   944  0199                     	;# 
   945  019A                     	;# 
   946  019B                     	;# 
   947  019B                     	;# 
   948  019C                     	;# 
   949  019D                     	;# 
   950  019E                     	;# 
   951  019F                     	;# 
   952  020C                     	;# 
   953  020E                     	;# 
   954  0211                     	;# 
   955  0211                     	;# 
   956  0212                     	;# 
   957  0212                     	;# 
   958  0213                     	;# 
   959  0213                     	;# 
   960  0214                     	;# 
   961  0214                     	;# 
   962  0215                     	;# 
   963  0215                     	;# 
   964  0215                     	;# 
   965  0216                     	;# 
   966  0216                     	;# 
   967  0217                     	;# 
   968  0217                     	;# 
   969  0291                     	;# 
   970  0291                     	;# 
   971  0292                     	;# 
   972  0293                     	;# 
   973  0294                     	;# 
   974  0295                     	;# 
   975  0295                     	;# 
   976  0296                     	;# 
   977  0298                     	;# 
   978  0298                     	;# 
   979  0299                     	;# 
   980  029A                     	;# 
   981  029B                     	;# 
   982  029C                     	;# 
   983  029D                     	;# 
   984  029E                     	;# 
   985  0311                     	;# 
   986  0311                     	;# 
   987  0312                     	;# 
   988  0313                     	;# 
   989  0318                     	;# 
   990  0318                     	;# 
   991  0319                     	;# 
   992  031A                     	;# 
   993  038C                     	;# 
   994  038E                     	;# 
   995  0391                     	;# 
   996  0392                     	;# 
   997  0393                     	;# 
   998  039A                     	;# 
   999  039C                     	;# 
  1000  039D                     	;# 
  1001  039E                     	;# 
  1002  039F                     	;# 
  1003  0415                     	;# 
  1004  0416                     	;# 
  1005  0417                     	;# 
  1006  041C                     	;# 
  1007  041D                     	;# 
  1008  041E                     	;# 
  1009  0FE4                     	;# 
  1010  0FE5                     	;# 
  1011  0FE6                     	;# 
  1012  0FE7                     	;# 
  1013  0FE8                     	;# 
  1014  0FE9                     	;# 
  1015  0FEA                     	;# 
  1016  0FEB                     	;# 
  1017  0FED                     	;# 
  1018  0FEE                     	;# 
  1019  0FEF                     	;# 
  1020  0000                     	;# 
  1021  0001                     	;# 
  1022  0002                     	;# 
  1023  0003                     	;# 
  1024  0004                     	;# 
  1025  0005                     	;# 
  1026  0006                     	;# 
  1027  0007                     	;# 
  1028  0008                     	;# 
  1029  0009                     	;# 
  1030  000A                     	;# 
  1031  000B                     	;# 
  1032  000C                     	;# 
  1033  000E                     	;# 
  1034  0011                     	;# 
  1035  0012                     	;# 
  1036  0013                     	;# 
  1037  0015                     	;# 
  1038  0016                     	;# 
  1039  0016                     	;# 
  1040  0017                     	;# 
  1041  0018                     	;# 
  1042  0019                     	;# 
  1043  001A                     	;# 
  1044  001B                     	;# 
  1045  001C                     	;# 
  1046  001E                     	;# 
  1047  001F                     	;# 
  1048  008C                     	;# 
  1049  008E                     	;# 
  1050  0091                     	;# 
  1051  0092                     	;# 
  1052  0093                     	;# 
  1053  0095                     	;# 
  1054  0096                     	;# 
  1055  0097                     	;# 
  1056  0098                     	;# 
  1057  0099                     	;# 
  1058  009A                     	;# 
  1059  009B                     	;# 
  1060  009B                     	;# 
  1061  009C                     	;# 
  1062  009D                     	;# 
  1063  009E                     	;# 
  1064  010C                     	;# 
  1065  010E                     	;# 
  1066  0111                     	;# 
  1067  0112                     	;# 
  1068  0113                     	;# 
  1069  0114                     	;# 
  1070  0115                     	;# 
  1071  0116                     	;# 
  1072  0117                     	;# 
  1073  0118                     	;# 
  1074  0119                     	;# 
  1075  011A                     	;# 
  1076  011B                     	;# 
  1077  011D                     	;# 
  1078  011E                     	;# 
  1079  018C                     	;# 
  1080  018E                     	;# 
  1081  0191                     	;# 
  1082  0191                     	;# 
  1083  0192                     	;# 
  1084  0193                     	;# 
  1085  0193                     	;# 
  1086  0193                     	;# 
  1087  0194                     	;# 
  1088  0195                     	;# 
  1089  0196                     	;# 
  1090  0199                     	;# 
  1091  019A                     	;# 
  1092  019B                     	;# 
  1093  019B                     	;# 
  1094  019C                     	;# 
  1095  019D                     	;# 
  1096  019E                     	;# 
  1097  019F                     	;# 
  1098  020C                     	;# 
  1099  020E                     	;# 
  1100  0211                     	;# 
  1101  0211                     	;# 
  1102  0212                     	;# 
  1103  0212                     	;# 
  1104  0213                     	;# 
  1105  0213                     	;# 
  1106  0214                     	;# 
  1107  0214                     	;# 
  1108  0215                     	;# 
  1109  0215                     	;# 
  1110  0215                     	;# 
  1111  0216                     	;# 
  1112  0216                     	;# 
  1113  0217                     	;# 
  1114  0217                     	;# 
  1115  0291                     	;# 
  1116  0291                     	;# 
  1117  0292                     	;# 
  1118  0293                     	;# 
  1119  0294                     	;# 
  1120  0295                     	;# 
  1121  0295                     	;# 
  1122  0296                     	;# 
  1123  0298                     	;# 
  1124  0298                     	;# 
  1125  0299                     	;# 
  1126  029A                     	;# 
  1127  029B                     	;# 
  1128  029C                     	;# 
  1129  029D                     	;# 
  1130  029E                     	;# 
  1131  0311                     	;# 
  1132  0311                     	;# 
  1133  0312                     	;# 
  1134  0313                     	;# 
  1135  0318                     	;# 
  1136  0318                     	;# 
  1137  0319                     	;# 
  1138  031A                     	;# 
  1139  038C                     	;# 
  1140  038E                     	;# 
  1141  0391                     	;# 
  1142  0392                     	;# 
  1143  0393                     	;# 
  1144  039A                     	;# 
  1145  039C                     	;# 
  1146  039D                     	;# 
  1147  039E                     	;# 
  1148  039F                     	;# 
  1149  0415                     	;# 
  1150  0416                     	;# 
  1151  0417                     	;# 
  1152  041C                     	;# 
  1153  041D                     	;# 
  1154  041E                     	;# 
  1155  0FE4                     	;# 
  1156  0FE5                     	;# 
  1157  0FE6                     	;# 
  1158  0FE7                     	;# 
  1159  0FE8                     	;# 
  1160  0FE9                     	;# 
  1161  0FEA                     	;# 
  1162  0FEB                     	;# 
  1163  0FED                     	;# 
  1164  0FEE                     	;# 
  1165  0FEF                     	;# 
  1166  0000                     	;# 
  1167  0001                     	;# 
  1168  0002                     	;# 
  1169  0003                     	;# 
  1170  0004                     	;# 
  1171  0005                     	;# 
  1172  0006                     	;# 
  1173  0007                     	;# 
  1174  0008                     	;# 
  1175  0009                     	;# 
  1176  000A                     	;# 
  1177  000B                     	;# 
  1178  000C                     	;# 
  1179  000E                     	;# 
  1180  0011                     	;# 
  1181  0012                     	;# 
  1182  0013                     	;# 
  1183  0015                     	;# 
  1184  0016                     	;# 
  1185  0016                     	;# 
  1186  0017                     	;# 
  1187  0018                     	;# 
  1188  0019                     	;# 
  1189  001A                     	;# 
  1190  001B                     	;# 
  1191  001C                     	;# 
  1192  001E                     	;# 
  1193  001F                     	;# 
  1194  008C                     	;# 
  1195  008E                     	;# 
  1196  0091                     	;# 
  1197  0092                     	;# 
  1198  0093                     	;# 
  1199  0095                     	;# 
  1200  0096                     	;# 
  1201  0097                     	;# 
  1202  0098                     	;# 
  1203  0099                     	;# 
  1204  009A                     	;# 
  1205  009B                     	;# 
  1206  009B                     	;# 
  1207  009C                     	;# 
  1208  009D                     	;# 
  1209  009E                     	;# 
  1210  010C                     	;# 
  1211  010E                     	;# 
  1212  0111                     	;# 
  1213  0112                     	;# 
  1214  0113                     	;# 
  1215  0114                     	;# 
  1216  0115                     	;# 
  1217  0116                     	;# 
  1218  0117                     	;# 
  1219  0118                     	;# 
  1220  0119                     	;# 
  1221  011A                     	;# 
  1222  011B                     	;# 
  1223  011D                     	;# 
  1224  011E                     	;# 
  1225  018C                     	;# 
  1226  018E                     	;# 
  1227  0191                     	;# 
  1228  0191                     	;# 
  1229  0192                     	;# 
  1230  0193                     	;# 
  1231  0193                     	;# 
  1232  0193                     	;# 
  1233  0194                     	;# 
  1234  0195                     	;# 
  1235  0196                     	;# 
  1236  0199                     	;# 
  1237  019A                     	;# 
  1238  019B                     	;# 
  1239  019B                     	;# 
  1240  019C                     	;# 
  1241  019D                     	;# 
  1242  019E                     	;# 
  1243  019F                     	;# 
  1244  020C                     	;# 
  1245  020E                     	;# 
  1246  0211                     	;# 
  1247  0211                     	;# 
  1248  0212                     	;# 
  1249  0212                     	;# 
  1250  0213                     	;# 
  1251  0213                     	;# 
  1252  0214                     	;# 
  1253  0214                     	;# 
  1254  0215                     	;# 
  1255  0215                     	;# 
  1256  0215                     	;# 
  1257  0216                     	;# 
  1258  0216                     	;# 
  1259  0217                     	;# 
  1260  0217                     	;# 
  1261  0291                     	;# 
  1262  0291                     	;# 
  1263  0292                     	;# 
  1264  0293                     	;# 
  1265  0294                     	;# 
  1266  0295                     	;# 
  1267  0295                     	;# 
  1268  0296                     	;# 
  1269  0298                     	;# 
  1270  0298                     	;# 
  1271  0299                     	;# 
  1272  029A                     	;# 
  1273  029B                     	;# 
  1274  029C                     	;# 
  1275  029D                     	;# 
  1276  029E                     	;# 
  1277  0311                     	;# 
  1278  0311                     	;# 
  1279  0312                     	;# 
  1280  0313                     	;# 
  1281  0318                     	;# 
  1282  0318                     	;# 
  1283  0319                     	;# 
  1284  031A                     	;# 
  1285  038C                     	;# 
  1286  038E                     	;# 
  1287  0391                     	;# 
  1288  0392                     	;# 
  1289  0393                     	;# 
  1290  039A                     	;# 
  1291  039C                     	;# 
  1292  039D                     	;# 
  1293  039E                     	;# 
  1294  039F                     	;# 
  1295  0415                     	;# 
  1296  0416                     	;# 
  1297  0417                     	;# 
  1298  041C                     	;# 
  1299  041D                     	;# 
  1300  041E                     	;# 
  1301  0FE4                     	;# 
  1302  0FE5                     	;# 
  1303  0FE6                     	;# 
  1304  0FE7                     	;# 
  1305  0FE8                     	;# 
  1306  0FE9                     	;# 
  1307  0FEA                     	;# 
  1308  0FEB                     	;# 
  1309  0FED                     	;# 
  1310  0FEE                     	;# 
  1311  0FEF                     	;# 
  1312  0000                     	;# 
  1313  0001                     	;# 
  1314  0002                     	;# 
  1315  0003                     	;# 
  1316  0004                     	;# 
  1317  0005                     	;# 
  1318  0006                     	;# 
  1319  0007                     	;# 
  1320  0008                     	;# 
  1321  0009                     	;# 
  1322  000A                     	;# 
  1323  000B                     	;# 
  1324  000C                     	;# 
  1325  000E                     	;# 
  1326  0011                     	;# 
  1327  0012                     	;# 
  1328  0013                     	;# 
  1329  0015                     	;# 
  1330  0016                     	;# 
  1331  0016                     	;# 
  1332  0017                     	;# 
  1333  0018                     	;# 
  1334  0019                     	;# 
  1335  001A                     	;# 
  1336  001B                     	;# 
  1337  001C                     	;# 
  1338  001E                     	;# 
  1339  001F                     	;# 
  1340  008C                     	;# 
  1341  008E                     	;# 
  1342  0091                     	;# 
  1343  0092                     	;# 
  1344  0093                     	;# 
  1345  0095                     	;# 
  1346  0096                     	;# 
  1347  0097                     	;# 
  1348  0098                     	;# 
  1349  0099                     	;# 
  1350  009A                     	;# 
  1351  009B                     	;# 
  1352  009B                     	;# 
  1353  009C                     	;# 
  1354  009D                     	;# 
  1355  009E                     	;# 
  1356  010C                     	;# 
  1357  010E                     	;# 
  1358  0111                     	;# 
  1359  0112                     	;# 
  1360  0113                     	;# 
  1361  0114                     	;# 
  1362  0115                     	;# 
  1363  0116                     	;# 
  1364  0117                     	;# 
  1365  0118                     	;# 
  1366  0119                     	;# 
  1367  011A                     	;# 
  1368  011B                     	;# 
  1369  011D                     	;# 
  1370  011E                     	;# 
  1371  018C                     	;# 
  1372  018E                     	;# 
  1373  0191                     	;# 
  1374  0191                     	;# 
  1375  0192                     	;# 
  1376  0193                     	;# 
  1377  0193                     	;# 
  1378  0193                     	;# 
  1379  0194                     	;# 
  1380  0195                     	;# 
  1381  0196                     	;# 
  1382  0199                     	;# 
  1383  019A                     	;# 
  1384  019B                     	;# 
  1385  019B                     	;# 
  1386  019C                     	;# 
  1387  019D                     	;# 
  1388  019E                     	;# 
  1389  019F                     	;# 
  1390  020C                     	;# 
  1391  020E                     	;# 
  1392  0211                     	;# 
  1393  0211                     	;# 
  1394  0212                     	;# 
  1395  0212                     	;# 
  1396  0213                     	;# 
  1397  0213                     	;# 
  1398  0214                     	;# 
  1399  0214                     	;# 
  1400  0215                     	;# 
  1401  0215                     	;# 
  1402  0215                     	;# 
  1403  0216                     	;# 
  1404  0216                     	;# 
  1405  0217                     	;# 
  1406  0217                     	;# 
  1407  0291                     	;# 
  1408  0291                     	;# 
  1409  0292                     	;# 
  1410  0293                     	;# 
  1411  0294                     	;# 
  1412  0295                     	;# 
  1413  0295                     	;# 
  1414  0296                     	;# 
  1415  0298                     	;# 
  1416  0298                     	;# 
  1417  0299                     	;# 
  1418  029A                     	;# 
  1419  029B                     	;# 
  1420  029C                     	;# 
  1421  029D                     	;# 
  1422  029E                     	;# 
  1423  0311                     	;# 
  1424  0311                     	;# 
  1425  0312                     	;# 
  1426  0313                     	;# 
  1427  0318                     	;# 
  1428  0318                     	;# 
  1429  0319                     	;# 
  1430  031A                     	;# 
  1431  038C                     	;# 
  1432  038E                     	;# 
  1433  0391                     	;# 
  1434  0392                     	;# 
  1435  0393                     	;# 
  1436  039A                     	;# 
  1437  039C                     	;# 
  1438  039D                     	;# 
  1439  039E                     	;# 
  1440  039F                     	;# 
  1441  0415                     	;# 
  1442  0416                     	;# 
  1443  0417                     	;# 
  1444  041C                     	;# 
  1445  041D                     	;# 
  1446  041E                     	;# 
  1447  0FE4                     	;# 
  1448  0FE5                     	;# 
  1449  0FE6                     	;# 
  1450  0FE7                     	;# 
  1451  0FE8                     	;# 
  1452  0FE9                     	;# 
  1453  0FEA                     	;# 
  1454  0FEB                     	;# 
  1455  0FED                     	;# 
  1456  0FEE                     	;# 
  1457  0FEF                     	;# 
  1458  0000                     	;# 
  1459  0001                     	;# 
  1460  0002                     	;# 
  1461  0003                     	;# 
  1462  0004                     	;# 
  1463  0005                     	;# 
  1464  0006                     	;# 
  1465  0007                     	;# 
  1466  0008                     	;# 
  1467  0009                     	;# 
  1468  000A                     	;# 
  1469  000B                     	;# 
  1470  000C                     	;# 
  1471  000E                     	;# 
  1472  0011                     	;# 
  1473  0012                     	;# 
  1474  0013                     	;# 
  1475  0015                     	;# 
  1476  0016                     	;# 
  1477  0016                     	;# 
  1478  0017                     	;# 
  1479  0018                     	;# 
  1480  0019                     	;# 
  1481  001A                     	;# 
  1482  001B                     	;# 
  1483  001C                     	;# 
  1484  001E                     	;# 
  1485  001F                     	;# 
  1486  008C                     	;# 
  1487  008E                     	;# 
  1488  0091                     	;# 
  1489  0092                     	;# 
  1490  0093                     	;# 
  1491  0095                     	;# 
  1492  0096                     	;# 
  1493  0097                     	;# 
  1494  0098                     	;# 
  1495  0099                     	;# 
  1496  009A                     	;# 
  1497  009B                     	;# 
  1498  009B                     	;# 
  1499  009C                     	;# 
  1500  009D                     	;# 
  1501  009E                     	;# 
  1502  010C                     	;# 
  1503  010E                     	;# 
  1504  0111                     	;# 
  1505  0112                     	;# 
  1506  0113                     	;# 
  1507  0114                     	;# 
  1508  0115                     	;# 
  1509  0116                     	;# 
  1510  0117                     	;# 
  1511  0118                     	;# 
  1512  0119                     	;# 
  1513  011A                     	;# 
  1514  011B                     	;# 
  1515  011D                     	;# 
  1516  011E                     	;# 
  1517  018C                     	;# 
  1518  018E                     	;# 
  1519  0191                     	;# 
  1520  0191                     	;# 
  1521  0192                     	;# 
  1522  0193                     	;# 
  1523  0193                     	;# 
  1524  0193                     	;# 
  1525  0194                     	;# 
  1526  0195                     	;# 
  1527  0196                     	;# 
  1528  0199                     	;# 
  1529  019A                     	;# 
  1530  019B                     	;# 
  1531  019B                     	;# 
  1532  019C                     	;# 
  1533  019D                     	;# 
  1534  019E                     	;# 
  1535  019F                     	;# 
  1536  020C                     	;# 
  1537  020E                     	;# 
  1538  0211                     	;# 
  1539  0211                     	;# 
  1540  0212                     	;# 
  1541  0212                     	;# 
  1542  0213                     	;# 
  1543  0213                     	;# 
  1544  0214                     	;# 
  1545  0214                     	;# 
  1546  0215                     	;# 
  1547  0215                     	;# 
  1548  0215                     	;# 
  1549  0216                     	;# 
  1550  0216                     	;# 
  1551  0217                     	;# 
  1552  0217                     	;# 
  1553  0291                     	;# 
  1554  0291                     	;# 
  1555  0292                     	;# 
  1556  0293                     	;# 
  1557  0294                     	;# 
  1558  0295                     	;# 
  1559  0295                     	;# 
  1560  0296                     	;# 
  1561  0298                     	;# 
  1562  0298                     	;# 
  1563  0299                     	;# 
  1564  029A                     	;# 
  1565  029B                     	;# 
  1566  029C                     	;# 
  1567  029D                     	;# 
  1568  029E                     	;# 
  1569  0311                     	;# 
  1570  0311                     	;# 
  1571  0312                     	;# 
  1572  0313                     	;# 
  1573  0318                     	;# 
  1574  0318                     	;# 
  1575  0319                     	;# 
  1576  031A                     	;# 
  1577  038C                     	;# 
  1578  038E                     	;# 
  1579  0391                     	;# 
  1580  0392                     	;# 
  1581  0393                     	;# 
  1582  039A                     	;# 
  1583  039C                     	;# 
  1584  039D                     	;# 
  1585  039E                     	;# 
  1586  039F                     	;# 
  1587  0415                     	;# 
  1588  0416                     	;# 
  1589  0417                     	;# 
  1590  041C                     	;# 
  1591  041D                     	;# 
  1592  041E                     	;# 
  1593  0FE4                     	;# 
  1594  0FE5                     	;# 
  1595  0FE6                     	;# 
  1596  0FE7                     	;# 
  1597  0FE8                     	;# 
  1598  0FE9                     	;# 
  1599  0FEA                     	;# 
  1600  0FEB                     	;# 
  1601  0FED                     	;# 
  1602  0FEE                     	;# 
  1603  0FEF                     	;# 
  1604  0000                     	;# 
  1605  0001                     	;# 
  1606  0002                     	;# 
  1607  0003                     	;# 
  1608  0004                     	;# 
  1609  0005                     	;# 
  1610  0006                     	;# 
  1611  0007                     	;# 
  1612  0008                     	;# 
  1613  0009                     	;# 
  1614  000A                     	;# 
  1615  000B                     	;# 
  1616  000C                     	;# 
  1617  000E                     	;# 
  1618  0011                     	;# 
  1619  0012                     	;# 
  1620  0013                     	;# 
  1621  0015                     	;# 
  1622  0016                     	;# 
  1623  0016                     	;# 
  1624  0017                     	;# 
  1625  0018                     	;# 
  1626  0019                     	;# 
  1627  001A                     	;# 
  1628  001B                     	;# 
  1629  001C                     	;# 
  1630  001E                     	;# 
  1631  001F                     	;# 
  1632  008C                     	;# 
  1633  008E                     	;# 
  1634  0091                     	;# 
  1635  0092                     	;# 
  1636  0093                     	;# 
  1637  0095                     	;# 
  1638  0096                     	;# 
  1639  0097                     	;# 
  1640  0098                     	;# 
  1641  0099                     	;# 
  1642  009A                     	;# 
  1643  009B                     	;# 
  1644  009B                     	;# 
  1645  009C                     	;# 
  1646  009D                     	;# 
  1647  009E                     	;# 
  1648  010C                     	;# 
  1649  010E                     	;# 
  1650  0111                     	;# 
  1651  0112                     	;# 
  1652  0113                     	;# 
  1653  0114                     	;# 
  1654  0115                     	;# 
  1655  0116                     	;# 
  1656  0117                     	;# 
  1657  0118                     	;# 
  1658  0119                     	;# 
  1659  011A                     	;# 
  1660  011B                     	;# 
  1661  011D                     	;# 
  1662  011E                     	;# 
  1663  018C                     	;# 
  1664  018E                     	;# 
  1665  0191                     	;# 
  1666  0191                     	;# 
  1667  0192                     	;# 
  1668  0193                     	;# 
  1669  0193                     	;# 
  1670  0193                     	;# 
  1671  0194                     	;# 
  1672  0195                     	;# 
  1673  0196                     	;# 
  1674  0199                     	;# 
  1675  019A                     	;# 
  1676  019B                     	;# 
  1677  019B                     	;# 
  1678  019C                     	;# 
  1679  019D                     	;# 
  1680  019E                     	;# 
  1681  019F                     	;# 
  1682  020C                     	;# 
  1683  020E                     	;# 
  1684  0211                     	;# 
  1685  0211                     	;# 
  1686  0212                     	;# 
  1687  0212                     	;# 
  1688  0213                     	;# 
  1689  0213                     	;# 
  1690  0214                     	;# 
  1691  0214                     	;# 
  1692  0215                     	;# 
  1693  0215                     	;# 
  1694  0215                     	;# 
  1695  0216                     	;# 
  1696  0216                     	;# 
  1697  0217                     	;# 
  1698  0217                     	;# 
  1699  0291                     	;# 
  1700  0291                     	;# 
  1701  0292                     	;# 
  1702  0293                     	;# 
  1703  0294                     	;# 
  1704  0295                     	;# 
  1705  0295                     	;# 
  1706  0296                     	;# 
  1707  0298                     	;# 
  1708  0298                     	;# 
  1709  0299                     	;# 
  1710  029A                     	;# 
  1711  029B                     	;# 
  1712  029C                     	;# 
  1713  029D                     	;# 
  1714  029E                     	;# 
  1715  0311                     	;# 
  1716  0311                     	;# 
  1717  0312                     	;# 
  1718  0313                     	;# 
  1719  0318                     	;# 
  1720  0318                     	;# 
  1721  0319                     	;# 
  1722  031A                     	;# 
  1723  038C                     	;# 
  1724  038E                     	;# 
  1725  0391                     	;# 
  1726  0392                     	;# 
  1727  0393                     	;# 
  1728  039A                     	;# 
  1729  039C                     	;# 
  1730  039D                     	;# 
  1731  039E                     	;# 
  1732  039F                     	;# 
  1733  0415                     	;# 
  1734  0416                     	;# 
  1735  0417                     	;# 
  1736  041C                     	;# 
  1737  041D                     	;# 
  1738  041E                     	;# 
  1739  0FE4                     	;# 
  1740  0FE5                     	;# 
  1741  0FE6                     	;# 
  1742  0FE7                     	;# 
  1743  0FE8                     	;# 
  1744  0FE9                     	;# 
  1745  0FEA                     	;# 
  1746  0FEB                     	;# 
  1747  0FED                     	;# 
  1748  0FEE                     	;# 
  1749  0FEF                     	;# 
  1750  0000                     	;# 
  1751  0001                     	;# 
  1752  0002                     	;# 
  1753  0003                     	;# 
  1754  0004                     	;# 
  1755  0005                     	;# 
  1756  0006                     	;# 
  1757  0007                     	;# 
  1758  0008                     	;# 
  1759  0009                     	;# 
  1760  000A                     	;# 
  1761  000B                     	;# 
  1762  000C                     	;# 
  1763  000E                     	;# 
  1764  0011                     	;# 
  1765  0012                     	;# 
  1766  0013                     	;# 
  1767  0015                     	;# 
  1768  0016                     	;# 
  1769  0016                     	;# 
  1770  0017                     	;# 
  1771  0018                     	;# 
  1772  0019                     	;# 
  1773  001A                     	;# 
  1774  001B                     	;# 
  1775  001C                     	;# 
  1776  001E                     	;# 
  1777  001F                     	;# 
  1778  008C                     	;# 
  1779  008E                     	;# 
  1780  0091                     	;# 
  1781  0092                     	;# 
  1782  0093                     	;# 
  1783  0095                     	;# 
  1784  0096                     	;# 
  1785  0097                     	;# 
  1786  0098                     	;# 
  1787  0099                     	;# 
  1788  009A                     	;# 
  1789  009B                     	;# 
  1790  009B                     	;# 
  1791  009C                     	;# 
  1792  009D                     	;# 
  1793  009E                     	;# 
  1794  010C                     	;# 
  1795  010E                     	;# 
  1796  0111                     	;# 
  1797  0112                     	;# 
  1798  0113                     	;# 
  1799  0114                     	;# 
  1800  0115                     	;# 
  1801  0116                     	;# 
  1802  0117                     	;# 
  1803  0118                     	;# 
  1804  0119                     	;# 
  1805  011A                     	;# 
  1806  011B                     	;# 
  1807  011D                     	;# 
  1808  011E                     	;# 
  1809  018C                     	;# 
  1810  018E                     	;# 
  1811  0191                     	;# 
  1812  0191                     	;# 
  1813  0192                     	;# 
  1814  0193                     	;# 
  1815  0193                     	;# 
  1816  0193                     	;# 
  1817  0194                     	;# 
  1818  0195                     	;# 
  1819  0196                     	;# 
  1820  0199                     	;# 
  1821  019A                     	;# 
  1822  019B                     	;# 
  1823  019B                     	;# 
  1824  019C                     	;# 
  1825  019D                     	;# 
  1826  019E                     	;# 
  1827  019F                     	;# 
  1828  020C                     	;# 
  1829  020E                     	;# 
  1830  0211                     	;# 
  1831  0211                     	;# 
  1832  0212                     	;# 
  1833  0212                     	;# 
  1834  0213                     	;# 
  1835  0213                     	;# 
  1836  0214                     	;# 
  1837  0214                     	;# 
  1838  0215                     	;# 
  1839  0215                     	;# 
  1840  0215                     	;# 
  1841  0216                     	;# 
  1842  0216                     	;# 
  1843  0217                     	;# 
  1844  0217                     	;# 
  1845  0291                     	;# 
  1846  0291                     	;# 
  1847  0292                     	;# 
  1848  0293                     	;# 
  1849  0294                     	;# 
  1850  0295                     	;# 
  1851  0295                     	;# 
  1852  0296                     	;# 
  1853  0298                     	;# 
  1854  0298                     	;# 
  1855  0299                     	;# 
  1856  029A                     	;# 
  1857  029B                     	;# 
  1858  029C                     	;# 
  1859  029D                     	;# 
  1860  029E                     	;# 
  1861  0311                     	;# 
  1862  0311                     	;# 
  1863  0312                     	;# 
  1864  0313                     	;# 
  1865  0318                     	;# 
  1866  0318                     	;# 
  1867  0319                     	;# 
  1868  031A                     	;# 
  1869  038C                     	;# 
  1870  038E                     	;# 
  1871  0391                     	;# 
  1872  0392                     	;# 
  1873  0393                     	;# 
  1874  039A                     	;# 
  1875  039C                     	;# 
  1876  039D                     	;# 
  1877  039E                     	;# 
  1878  039F                     	;# 
  1879  0415                     	;# 
  1880  0416                     	;# 
  1881  0417                     	;# 
  1882  041C                     	;# 
  1883  041D                     	;# 
  1884  041E                     	;# 
  1885  0FE4                     	;# 
  1886  0FE5                     	;# 
  1887  0FE6                     	;# 
  1888  0FE7                     	;# 
  1889  0FE8                     	;# 
  1890  0FE9                     	;# 
  1891  0FEA                     	;# 
  1892  0FEB                     	;# 
  1893  0FED                     	;# 
  1894  0FEE                     	;# 
  1895  0FEF                     	;# 
  1896  0000                     	;# 
  1897  0001                     	;# 
  1898  0002                     	;# 
  1899  0003                     	;# 
  1900  0004                     	;# 
  1901  0005                     	;# 
  1902  0006                     	;# 
  1903  0007                     	;# 
  1904  0008                     	;# 
  1905  0009                     	;# 
  1906  000A                     	;# 
  1907  000B                     	;# 
  1908  000C                     	;# 
  1909  000E                     	;# 
  1910  0011                     	;# 
  1911  0012                     	;# 
  1912  0013                     	;# 
  1913  0015                     	;# 
  1914  0016                     	;# 
  1915  0016                     	;# 
  1916  0017                     	;# 
  1917  0018                     	;# 
  1918  0019                     	;# 
  1919  001A                     	;# 
  1920  001B                     	;# 
  1921  001C                     	;# 
  1922  001E                     	;# 
  1923  001F                     	;# 
  1924  008C                     	;# 
  1925  008E                     	;# 
  1926  0091                     	;# 
  1927  0092                     	;# 
  1928  0093                     	;# 
  1929  0095                     	;# 
  1930  0096                     	;# 
  1931  0097                     	;# 
  1932  0098                     	;# 
  1933  0099                     	;# 
  1934  009A                     	;# 
  1935  009B                     	;# 
  1936  009B                     	;# 
  1937  009C                     	;# 
  1938  009D                     	;# 
  1939  009E                     	;# 
  1940  010C                     	;# 
  1941  010E                     	;# 
  1942  0111                     	;# 
  1943  0112                     	;# 
  1944  0113                     	;# 
  1945  0114                     	;# 
  1946  0115                     	;# 
  1947  0116                     	;# 
  1948  0117                     	;# 
  1949  0118                     	;# 
  1950  0119                     	;# 
  1951  011A                     	;# 
  1952  011B                     	;# 
  1953  011D                     	;# 
  1954  011E                     	;# 
  1955  018C                     	;# 
  1956  018E                     	;# 
  1957  0191                     	;# 
  1958  0191                     	;# 
  1959  0192                     	;# 
  1960  0193                     	;# 
  1961  0193                     	;# 
  1962  0193                     	;# 
  1963  0194                     	;# 
  1964  0195                     	;# 
  1965  0196                     	;# 
  1966  0199                     	;# 
  1967  019A                     	;# 
  1968  019B                     	;# 
  1969  019B                     	;# 
  1970  019C                     	;# 
  1971  019D                     	;# 
  1972  019E                     	;# 
  1973  019F                     	;# 
  1974  020C                     	;# 
  1975  020E                     	;# 
  1976  0211                     	;# 
  1977  0211                     	;# 
  1978  0212                     	;# 
  1979  0212                     	;# 
  1980  0213                     	;# 
  1981  0213                     	;# 
  1982  0214                     	;# 
  1983  0214                     	;# 
  1984  0215                     	;# 
  1985  0215                     	;# 
  1986  0215                     	;# 
  1987  0216                     	;# 
  1988  0216                     	;# 
  1989  0217                     	;# 
  1990  0217                     	;# 
  1991  0291                     	;# 
  1992  0291                     	;# 
  1993  0292                     	;# 
  1994  0293                     	;# 
  1995  0294                     	;# 
  1996  0295                     	;# 
  1997  0295                     	;# 
  1998  0296                     	;# 
  1999  0298                     	;# 
  2000  0298                     	;# 
  2001  0299                     	;# 
  2002  029A                     	;# 
  2003  029B                     	;# 
  2004  029C                     	;# 
  2005  029D                     	;# 
  2006  029E                     	;# 
  2007  0311                     	;# 
  2008  0311                     	;# 
  2009  0312                     	;# 
  2010  0313                     	;# 
  2011  0318                     	;# 
  2012  0318                     	;# 
  2013  0319                     	;# 
  2014  031A                     	;# 
  2015  038C                     	;# 
  2016  038E                     	;# 
  2017  0391                     	;# 
  2018  0392                     	;# 
  2019  0393                     	;# 
  2020  039A                     	;# 
  2021  039C                     	;# 
  2022  039D                     	;# 
  2023  039E                     	;# 
  2024  039F                     	;# 
  2025  0415                     	;# 
  2026  0416                     	;# 
  2027  0417                     	;# 
  2028  041C                     	;# 
  2029  041D                     	;# 
  2030  041E                     	;# 
  2031  0FE4                     	;# 
  2032  0FE5                     	;# 
  2033  0FE6                     	;# 
  2034  0FE7                     	;# 
  2035  0FE8                     	;# 
  2036  0FE9                     	;# 
  2037  0FEA                     	;# 
  2038  0FEB                     	;# 
  2039  0FED                     	;# 
  2040  0FEE                     	;# 
  2041  0FEF                     	;# 
  2042  0000                     	;# 
  2043  0001                     	;# 
  2044  0002                     	;# 
  2045  0003                     	;# 
  2046  0004                     	;# 
  2047  0005                     	;# 
  2048  0006                     	;# 
  2049  0007                     	;# 
  2050  0008                     	;# 
  2051  0009                     	;# 
  2052  000A                     	;# 
  2053  000B                     	;# 
  2054  000C                     	;# 
  2055  000E                     	;# 
  2056  0011                     	;# 
  2057  0012                     	;# 
  2058  0013                     	;# 
  2059  0015                     	;# 
  2060  0016                     	;# 
  2061  0016                     	;# 
  2062  0017                     	;# 
  2063  0018                     	;# 
  2064  0019                     	;# 
  2065  001A                     	;# 
  2066  001B                     	;# 
  2067  001C                     	;# 
  2068  001E                     	;# 
  2069  001F                     	;# 
  2070  008C                     	;# 
  2071  008E                     	;# 
  2072  0091                     	;# 
  2073  0092                     	;# 
  2074  0093                     	;# 
  2075  0095                     	;# 
  2076  0096                     	;# 
  2077  0097                     	;# 
  2078  0098                     	;# 
  2079  0099                     	;# 
  2080  009A                     	;# 
  2081  009B                     	;# 
  2082  009B                     	;# 
  2083  009C                     	;# 
  2084  009D                     	;# 
  2085  009E                     	;# 
  2086  010C                     	;# 
  2087  010E                     	;# 
  2088  0111                     	;# 
  2089  0112                     	;# 
  2090  0113                     	;# 
  2091  0114                     	;# 
  2092  0115                     	;# 
  2093  0116                     	;# 
  2094  0117                     	;# 
  2095  0118                     	;# 
  2096  0119                     	;# 
  2097  011A                     	;# 
  2098  011B                     	;# 
  2099  011D                     	;# 
  2100  011E                     	;# 
  2101  018C                     	;# 
  2102  018E                     	;# 
  2103  0191                     	;# 
  2104  0191                     	;# 
  2105  0192                     	;# 
  2106  0193                     	;# 
  2107  0193                     	;# 
  2108  0193                     	;# 
  2109  0194                     	;# 
  2110  0195                     	;# 
  2111  0196                     	;# 
  2112  0199                     	;# 
  2113  019A                     	;# 
  2114  019B                     	;# 
  2115  019B                     	;# 
  2116  019C                     	;# 
  2117  019D                     	;# 
  2118  019E                     	;# 
  2119  019F                     	;# 
  2120  020C                     	;# 
  2121  020E                     	;# 
  2122  0211                     	;# 
  2123  0211                     	;# 
  2124  0212                     	;# 
  2125  0212                     	;# 
  2126  0213                     	;# 
  2127  0213                     	;# 
  2128  0214                     	;# 
  2129  0214                     	;# 
  2130  0215                     	;# 
  2131  0215                     	;# 
  2132  0215                     	;# 
  2133  0216                     	;# 
  2134  0216                     	;# 
  2135  0217                     	;# 
  2136  0217                     	;# 
  2137  0291                     	;# 
  2138  0291                     	;# 
  2139  0292                     	;# 
  2140  0293                     	;# 
  2141  0294                     	;# 
  2142  0295                     	;# 
  2143  0295                     	;# 
  2144  0296                     	;# 
  2145  0298                     	;# 
  2146  0298                     	;# 
  2147  0299                     	;# 
  2148  029A                     	;# 
  2149  029B                     	;# 
  2150  029C                     	;# 
  2151  029D                     	;# 
  2152  029E                     	;# 
  2153  0311                     	;# 
  2154  0311                     	;# 
  2155  0312                     	;# 
  2156  0313                     	;# 
  2157  0318                     	;# 
  2158  0318                     	;# 
  2159  0319                     	;# 
  2160  031A                     	;# 
  2161  038C                     	;# 
  2162  038E                     	;# 
  2163  0391                     	;# 
  2164  0392                     	;# 
  2165  0393                     	;# 
  2166  039A                     	;# 
  2167  039C                     	;# 
  2168  039D                     	;# 
  2169  039E                     	;# 
  2170  039F                     	;# 
  2171  0415                     	;# 
  2172  0416                     	;# 
  2173  0417                     	;# 
  2174  041C                     	;# 
  2175  041D                     	;# 
  2176  041E                     	;# 
  2177  0FE4                     	;# 
  2178  0FE5                     	;# 
  2179  0FE6                     	;# 
  2180  0FE7                     	;# 
  2181  0FE8                     	;# 
  2182  0FE9                     	;# 
  2183  0FEA                     	;# 
  2184  0FEB                     	;# 
  2185  0FED                     	;# 
  2186  0FEE                     	;# 
  2187  0FEF                     	;# 
  2188  0000                     	;# 
  2189  0001                     	;# 
  2190  0002                     	;# 
  2191  0003                     	;# 
  2192  0004                     	;# 
  2193  0005                     	;# 
  2194  0006                     	;# 
  2195  0007                     	;# 
  2196  0008                     	;# 
  2197  0009                     	;# 
  2198  000A                     	;# 
  2199  000B                     	;# 
  2200  000C                     	;# 
  2201  000E                     	;# 
  2202  0011                     	;# 
  2203  0012                     	;# 
  2204  0013                     	;# 
  2205  0015                     	;# 
  2206  0016                     	;# 
  2207  0016                     	;# 
  2208  0017                     	;# 
  2209  0018                     	;# 
  2210  0019                     	;# 
  2211  001A                     	;# 
  2212  001B                     	;# 
  2213  001C                     	;# 
  2214  001E                     	;# 
  2215  001F                     	;# 
  2216  008C                     	;# 
  2217  008E                     	;# 
  2218  0091                     	;# 
  2219  0092                     	;# 
  2220  0093                     	;# 
  2221  0095                     	;# 
  2222  0096                     	;# 
  2223  0097                     	;# 
  2224  0098                     	;# 
  2225  0099                     	;# 
  2226  009A                     	;# 
  2227  009B                     	;# 
  2228  009B                     	;# 
  2229  009C                     	;# 
  2230  009D                     	;# 
  2231  009E                     	;# 
  2232  010C                     	;# 
  2233  010E                     	;# 
  2234  0111                     	;# 
  2235  0112                     	;# 
  2236  0113                     	;# 
  2237  0114                     	;# 
  2238  0115                     	;# 
  2239  0116                     	;# 
  2240  0117                     	;# 
  2241  0118                     	;# 
  2242  0119                     	;# 
  2243  011A                     	;# 
  2244  011B                     	;# 
  2245  011D                     	;# 
  2246  011E                     	;# 
  2247  018C                     	;# 
  2248  018E                     	;# 
  2249  0191                     	;# 
  2250  0191                     	;# 
  2251  0192                     	;# 
  2252  0193                     	;# 
  2253  0193                     	;# 
  2254  0193                     	;# 
  2255  0194                     	;# 
  2256  0195                     	;# 
  2257  0196                     	;# 
  2258  0199                     	;# 
  2259  019A                     	;# 
  2260  019B                     	;# 
  2261  019B                     	;# 
  2262  019C                     	;# 
  2263  019D                     	;# 
  2264  019E                     	;# 
  2265  019F                     	;# 
  2266  020C                     	;# 
  2267  020E                     	;# 
  2268  0211                     	;# 
  2269  0211                     	;# 
  2270  0212                     	;# 
  2271  0212                     	;# 
  2272  0213                     	;# 
  2273  0213                     	;# 
  2274  0214                     	;# 
  2275  0214                     	;# 
  2276  0215                     	;# 
  2277  0215                     	;# 
  2278  0215                     	;# 
  2279  0216                     	;# 
  2280  0216                     	;# 
  2281  0217                     	;# 
  2282  0217                     	;# 
  2283  0291                     	;# 
  2284  0291                     	;# 
  2285  0292                     	;# 
  2286  0293                     	;# 
  2287  0294                     	;# 
  2288  0295                     	;# 
  2289  0295                     	;# 
  2290  0296                     	;# 
  2291  0298                     	;# 
  2292  0298                     	;# 
  2293  0299                     	;# 
  2294  029A                     	;# 
  2295  029B                     	;# 
  2296  029C                     	;# 
  2297  029D                     	;# 
  2298  029E                     	;# 
  2299  0311                     	;# 
  2300  0311                     	;# 
  2301  0312                     	;# 
  2302  0313                     	;# 
  2303  0318                     	;# 
  2304  0318                     	;# 
  2305  0319                     	;# 
  2306  031A                     	;# 
  2307  038C                     	;# 
  2308  038E                     	;# 
  2309  0391                     	;# 
  2310  0392                     	;# 
  2311  0393                     	;# 
  2312  039A                     	;# 
  2313  039C                     	;# 
  2314  039D                     	;# 
  2315  039E                     	;# 
  2316  039F                     	;# 
  2317  0415                     	;# 
  2318  0416                     	;# 
  2319  0417                     	;# 
  2320  041C                     	;# 
  2321  041D                     	;# 
  2322  041E                     	;# 
  2323  0FE4                     	;# 
  2324  0FE5                     	;# 
  2325  0FE6                     	;# 
  2326  0FE7                     	;# 
  2327  0FE8                     	;# 
  2328  0FE9                     	;# 
  2329  0FEA                     	;# 
  2330  0FEB                     	;# 
  2331  0FED                     	;# 
  2332  0FEE                     	;# 
  2333  0FEF                     	;# 
  2334  0000                     	;# 
  2335  0001                     	;# 
  2336  0002                     	;# 
  2337  0003                     	;# 
  2338  0004                     	;# 
  2339  0005                     	;# 
  2340  0006                     	;# 
  2341  0007                     	;# 
  2342  0008                     	;# 
  2343  0009                     	;# 
  2344  000A                     	;# 
  2345  000B                     	;# 
  2346  000C                     	;# 
  2347  000E                     	;# 
  2348  0011                     	;# 
  2349  0012                     	;# 
  2350  0013                     	;# 
  2351  0015                     	;# 
  2352  0016                     	;# 
  2353  0016                     	;# 
  2354  0017                     	;# 
  2355  0018                     	;# 
  2356  0019                     	;# 
  2357  001A                     	;# 
  2358  001B                     	;# 
  2359  001C                     	;# 
  2360  001E                     	;# 
  2361  001F                     	;# 
  2362  008C                     	;# 
  2363  008E                     	;# 
  2364  0091                     	;# 
  2365  0092                     	;# 
  2366  0093                     	;# 
  2367  0095                     	;# 
  2368  0096                     	;# 
  2369  0097                     	;# 
  2370  0098                     	;# 
  2371  0099                     	;# 
  2372  009A                     	;# 
  2373  009B                     	;# 
  2374  009B                     	;# 
  2375  009C                     	;# 
  2376  009D                     	;# 
  2377  009E                     	;# 
  2378  010C                     	;# 
  2379  010E                     	;# 
  2380  0111                     	;# 
  2381  0112                     	;# 
  2382  0113                     	;# 
  2383  0114                     	;# 
  2384  0115                     	;# 
  2385  0116                     	;# 
  2386  0117                     	;# 
  2387  0118                     	;# 
  2388  0119                     	;# 
  2389  011A                     	;# 
  2390  011B                     	;# 
  2391  011D                     	;# 
  2392  011E                     	;# 
  2393  018C                     	;# 
  2394  018E                     	;# 
  2395  0191                     	;# 
  2396  0191                     	;# 
  2397  0192                     	;# 
  2398  0193                     	;# 
  2399  0193                     	;# 
  2400  0193                     	;# 
  2401  0194                     	;# 
  2402  0195                     	;# 
  2403  0196                     	;# 
  2404  0199                     	;# 
  2405  019A                     	;# 
  2406  019B                     	;# 
  2407  019B                     	;# 
  2408  019C                     	;# 
  2409  019D                     	;# 
  2410  019E                     	;# 
  2411  019F                     	;# 
  2412  020C                     	;# 
  2413  020E                     	;# 
  2414  0211                     	;# 
  2415  0211                     	;# 
  2416  0212                     	;# 
  2417  0212                     	;# 
  2418  0213                     	;# 
  2419  0213                     	;# 
  2420  0214                     	;# 
  2421  0214                     	;# 
  2422  0215                     	;# 
  2423  0215                     	;# 
  2424  0215                     	;# 
  2425  0216                     	;# 
  2426  0216                     	;# 
  2427  0217                     	;# 
  2428  0217                     	;# 
  2429  0291                     	;# 
  2430  0291                     	;# 
  2431  0292                     	;# 
  2432  0293                     	;# 
  2433  0294                     	;# 
  2434  0295                     	;# 
  2435  0295                     	;# 
  2436  0296                     	;# 
  2437  0298                     	;# 
  2438  0298                     	;# 
  2439  0299                     	;# 
  2440  029A                     	;# 
  2441  029B                     	;# 
  2442  029C                     	;# 
  2443  029D                     	;# 
  2444  029E                     	;# 
  2445  0311                     	;# 
  2446  0311                     	;# 
  2447  0312                     	;# 
  2448  0313                     	;# 
  2449  0318                     	;# 
  2450  0318                     	;# 
  2451  0319                     	;# 
  2452  031A                     	;# 
  2453  038C                     	;# 
  2454  038E                     	;# 
  2455  0391                     	;# 
  2456  0392                     	;# 
  2457  0393                     	;# 
  2458  039A                     	;# 
  2459  039C                     	;# 
  2460  039D                     	;# 
  2461  039E                     	;# 
  2462  039F                     	;# 
  2463  0415                     	;# 
  2464  0416                     	;# 
  2465  0417                     	;# 
  2466  041C                     	;# 
  2467  041D                     	;# 
  2468  041E                     	;# 
  2469  0FE4                     	;# 
  2470  0FE5                     	;# 
  2471  0FE6                     	;# 
  2472  0FE7                     	;# 
  2473  0FE8                     	;# 
  2474  0FE9                     	;# 
  2475  0FEA                     	;# 
  2476  0FEB                     	;# 
  2477  0FED                     	;# 
  2478  0FEE                     	;# 
  2479  0FEF                     	;# 
  2480  0000                     	;# 
  2481  0001                     	;# 
  2482  0002                     	;# 
  2483  0003                     	;# 
  2484  0004                     	;# 
  2485  0005                     	;# 
  2486  0006                     	;# 
  2487  0007                     	;# 
  2488  0008                     	;# 
  2489  0009                     	;# 
  2490  000A                     	;# 
  2491  000B                     	;# 
  2492  000C                     	;# 
  2493  000E                     	;# 
  2494  0011                     	;# 
  2495  0012                     	;# 
  2496  0013                     	;# 
  2497  0015                     	;# 
  2498  0016                     	;# 
  2499  0016                     	;# 
  2500  0017                     	;# 
  2501  0018                     	;# 
  2502  0019                     	;# 
  2503  001A                     	;# 
  2504  001B                     	;# 
  2505  001C                     	;# 
  2506  001E                     	;# 
  2507  001F                     	;# 
  2508  008C                     	;# 
  2509  008E                     	;# 
  2510  0091                     	;# 
  2511  0092                     	;# 
  2512  0093                     	;# 
  2513  0095                     	;# 
  2514  0096                     	;# 
  2515  0097                     	;# 
  2516  0098                     	;# 
  2517  0099                     	;# 
  2518  009A                     	;# 
  2519  009B                     	;# 
  2520  009B                     	;# 
  2521  009C                     	;# 
  2522  009D                     	;# 
  2523  009E                     	;# 
  2524  010C                     	;# 
  2525  010E                     	;# 
  2526  0111                     	;# 
  2527  0112                     	;# 
  2528  0113                     	;# 
  2529  0114                     	;# 
  2530  0115                     	;# 
  2531  0116                     	;# 
  2532  0117                     	;# 
  2533  0118                     	;# 
  2534  0119                     	;# 
  2535  011A                     	;# 
  2536  011B                     	;# 
  2537  011D                     	;# 
  2538  011E                     	;# 
  2539  018C                     	;# 
  2540  018E                     	;# 
  2541  0191                     	;# 
  2542  0191                     	;# 
  2543  0192                     	;# 
  2544  0193                     	;# 
  2545  0193                     	;# 
  2546  0193                     	;# 
  2547  0194                     	;# 
  2548  0195                     	;# 
  2549  0196                     	;# 
  2550  0199                     	;# 
  2551  019A                     	;# 
  2552  019B                     	;# 
  2553  019B                     	;# 
  2554  019C                     	;# 
  2555  019D                     	;# 
  2556  019E                     	;# 
  2557  019F                     	;# 
  2558  020C                     	;# 
  2559  020E                     	;# 
  2560  0211                     	;# 
  2561  0211                     	;# 
  2562  0212                     	;# 
  2563  0212                     	;# 
  2564  0213                     	;# 
  2565  0213                     	;# 
  2566  0214                     	;# 
  2567  0214                     	;# 
  2568  0215                     	;# 
  2569  0215                     	;# 
  2570  0215                     	;# 
  2571  0216                     	;# 
  2572  0216                     	;# 
  2573  0217                     	;# 
  2574  0217                     	;# 
  2575  0291                     	;# 
  2576  0291                     	;# 
  2577  0292                     	;# 
  2578  0293                     	;# 
  2579  0294                     	;# 
  2580  0295                     	;# 
  2581  0295                     	;# 
  2582  0296                     	;# 
  2583  0298                     	;# 
  2584  0298                     	;# 
  2585  0299                     	;# 
  2586  029A                     	;# 
  2587  029B                     	;# 
  2588  029C                     	;# 
  2589  029D                     	;# 
  2590  029E                     	;# 
  2591  0311                     	;# 
  2592  0311                     	;# 
  2593  0312                     	;# 
  2594  0313                     	;# 
  2595  0318                     	;# 
  2596  0318                     	;# 
  2597  0319                     	;# 
  2598  031A                     	;# 
  2599  038C                     	;# 
  2600  038E                     	;# 
  2601  0391                     	;# 
  2602  0392                     	;# 
  2603  0393                     	;# 
  2604  039A                     	;# 
  2605  039C                     	;# 
  2606  039D                     	;# 
  2607  039E                     	;# 
  2608  039F                     	;# 
  2609  0415                     	;# 
  2610  0416                     	;# 
  2611  0417                     	;# 
  2612  041C                     	;# 
  2613  041D                     	;# 
  2614  041E                     	;# 
  2615  0FE4                     	;# 
  2616  0FE5                     	;# 
  2617  0FE6                     	;# 
  2618  0FE7                     	;# 
  2619  0FE8                     	;# 
  2620  0FE9                     	;# 
  2621  0FEA                     	;# 
  2622  0FEB                     	;# 
  2623  0FED                     	;# 
  2624  0FEE                     	;# 
  2625  0FEF                     	;# 
  2626  0000                     	;# 
  2627  0001                     	;# 
  2628  0002                     	;# 
  2629  0003                     	;# 
  2630  0004                     	;# 
  2631  0005                     	;# 
  2632  0006                     	;# 
  2633  0007                     	;# 
  2634  0008                     	;# 
  2635  0009                     	;# 
  2636  000A                     	;# 
  2637  000B                     	;# 
  2638  000C                     	;# 
  2639  000E                     	;# 
  2640  0011                     	;# 
  2641  0012                     	;# 
  2642  0013                     	;# 
  2643  0015                     	;# 
  2644  0016                     	;# 
  2645  0016                     	;# 
  2646  0017                     	;# 
  2647  0018                     	;# 
  2648  0019                     	;# 
  2649  001A                     	;# 
  2650  001B                     	;# 
  2651  001C                     	;# 
  2652  001E                     	;# 
  2653  001F                     	;# 
  2654  008C                     	;# 
  2655  008E                     	;# 
  2656  0091                     	;# 
  2657  0092                     	;# 
  2658  0093                     	;# 
  2659  0095                     	;# 
  2660  0096                     	;# 
  2661  0097                     	;# 
  2662  0098                     	;# 
  2663  0099                     	;# 
  2664  009A                     	;# 
  2665  009B                     	;# 
  2666  009B                     	;# 
  2667  009C                     	;# 
  2668  009D                     	;# 
  2669  009E                     	;# 
  2670  010C                     	;# 
  2671  010E                     	;# 
  2672  0111                     	;# 
  2673  0112                     	;# 
  2674  0113                     	;# 
  2675  0114                     	;# 
  2676  0115                     	;# 
  2677  0116                     	;# 
  2678  0117                     	;# 
  2679  0118                     	;# 
  2680  0119                     	;# 
  2681  011A                     	;# 
  2682  011B                     	;# 
  2683  011D                     	;# 
  2684  011E                     	;# 
  2685  018C                     	;# 
  2686  018E                     	;# 
  2687  0191                     	;# 
  2688  0191                     	;# 
  2689  0192                     	;# 
  2690  0193                     	;# 
  2691  0193                     	;# 
  2692  0193                     	;# 
  2693  0194                     	;# 
  2694  0195                     	;# 
  2695  0196                     	;# 
  2696  0199                     	;# 
  2697  019A                     	;# 
  2698  019B                     	;# 
  2699  019B                     	;# 
  2700  019C                     	;# 
  2701  019D                     	;# 
  2702  019E                     	;# 
  2703  019F                     	;# 
  2704  020C                     	;# 
  2705  020E                     	;# 
  2706  0211                     	;# 
  2707  0211                     	;# 
  2708  0212                     	;# 
  2709  0212                     	;# 
  2710  0213                     	;# 
  2711  0213                     	;# 
  2712  0214                     	;# 
  2713  0214                     	;# 
  2714  0215                     	;# 
  2715  0215                     	;# 
  2716  0215                     	;# 
  2717  0216                     	;# 
  2718  0216                     	;# 
  2719  0217                     	;# 
  2720  0217                     	;# 
  2721  0291                     	;# 
  2722  0291                     	;# 
  2723  0292                     	;# 
  2724  0293                     	;# 
  2725  0294                     	;# 
  2726  0295                     	;# 
  2727  0295                     	;# 
  2728  0296                     	;# 
  2729  0298                     	;# 
  2730  0298                     	;# 
  2731  0299                     	;# 
  2732  029A                     	;# 
  2733  029B                     	;# 
  2734  029C                     	;# 
  2735  029D                     	;# 
  2736  029E                     	;# 
  2737  0311                     	;# 
  2738  0311                     	;# 
  2739  0312                     	;# 
  2740  0313                     	;# 
  2741  0318                     	;# 
  2742  0318                     	;# 
  2743  0319                     	;# 
  2744  031A                     	;# 
  2745  038C                     	;# 
  2746  038E                     	;# 
  2747  0391                     	;# 
  2748  0392                     	;# 
  2749  0393                     	;# 
  2750  039A                     	;# 
  2751  039C                     	;# 
  2752  039D                     	;# 
  2753  039E                     	;# 
  2754  039F                     	;# 
  2755  0415                     	;# 
  2756  0416                     	;# 
  2757  0417                     	;# 
  2758  041C                     	;# 
  2759  041D                     	;# 
  2760  041E                     	;# 
  2761  0FE4                     	;# 
  2762  0FE5                     	;# 
  2763  0FE6                     	;# 
  2764  0FE7                     	;# 
  2765  0FE8                     	;# 
  2766  0FE9                     	;# 
  2767  0FEA                     	;# 
  2768  0FEB                     	;# 
  2769  0FED                     	;# 
  2770  0FEE                     	;# 
  2771  0FEF                     	;# 
  2772  0000                     	;# 
  2773  0001                     	;# 
  2774  0002                     	;# 
  2775  0003                     	;# 
  2776  0004                     	;# 
  2777  0005                     	;# 
  2778  0006                     	;# 
  2779  0007                     	;# 
  2780  0008                     	;# 
  2781  0009                     	;# 
  2782  000A                     	;# 
  2783  000B                     	;# 
  2784  000C                     	;# 
  2785  000E                     	;# 
  2786  0011                     	;# 
  2787  0012                     	;# 
  2788  0013                     	;# 
  2789  0015                     	;# 
  2790  0016                     	;# 
  2791  0016                     	;# 
  2792  0017                     	;# 
  2793  0018                     	;# 
  2794  0019                     	;# 
  2795  001A                     	;# 
  2796  001B                     	;# 
  2797  001C                     	;# 
  2798  001E                     	;# 
  2799  001F                     	;# 
  2800  008C                     	;# 
  2801  008E                     	;# 
  2802  0091                     	;# 
  2803  0092                     	;# 
  2804  0093                     	;# 
  2805  0095                     	;# 
  2806  0096                     	;# 
  2807  0097                     	;# 
  2808  0098                     	;# 
  2809  0099                     	;# 
  2810  009A                     	;# 
  2811  009B                     	;# 
  2812  009B                     	;# 
  2813  009C                     	;# 
  2814  009D                     	;# 
  2815  009E                     	;# 
  2816  010C                     	;# 
  2817  010E                     	;# 
  2818  0111                     	;# 
  2819  0112                     	;# 
  2820  0113                     	;# 
  2821  0114                     	;# 
  2822  0115                     	;# 
  2823  0116                     	;# 
  2824  0117                     	;# 
  2825  0118                     	;# 
  2826  0119                     	;# 
  2827  011A                     	;# 
  2828  011B                     	;# 
  2829  011D                     	;# 
  2830  011E                     	;# 
  2831  018C                     	;# 
  2832  018E                     	;# 
  2833  0191                     	;# 
  2834  0191                     	;# 
  2835  0192                     	;# 
  2836  0193                     	;# 
  2837  0193                     	;# 
  2838  0193                     	;# 
  2839  0194                     	;# 
  2840  0195                     	;# 
  2841  0196                     	;# 
  2842  0199                     	;# 
  2843  019A                     	;# 
  2844  019B                     	;# 
  2845  019B                     	;# 
  2846  019C                     	;# 
  2847  019D                     	;# 
  2848  019E                     	;# 
  2849  019F                     	;# 
  2850  020C                     	;# 
  2851  020E                     	;# 
  2852  0211                     	;# 
  2853  0211                     	;# 
  2854  0212                     	;# 
  2855  0212                     	;# 
  2856  0213                     	;# 
  2857  0213                     	;# 
  2858  0214                     	;# 
  2859  0214                     	;# 
  2860  0215                     	;# 
  2861  0215                     	;# 
  2862  0215                     	;# 
  2863  0216                     	;# 
  2864  0216                     	;# 
  2865  0217                     	;# 
  2866  0217                     	;# 
  2867  0291                     	;# 
  2868  0291                     	;# 
  2869  0292                     	;# 
  2870  0293                     	;# 
  2871  0294                     	;# 
  2872  0295                     	;# 
  2873  0295                     	;# 
  2874  0296                     	;# 
  2875  0298                     	;# 
  2876  0298                     	;# 
  2877  0299                     	;# 
  2878  029A                     	;# 
  2879  029B                     	;# 
  2880  029C                     	;# 
  2881  029D                     	;# 
  2882  029E                     	;# 
  2883  0311                     	;# 
  2884  0311                     	;# 
  2885  0312                     	;# 
  2886  0313                     	;# 
  2887  0318                     	;# 
  2888  0318                     	;# 
  2889  0319                     	;# 
  2890  031A                     	;# 
  2891  038C                     	;# 
  2892  038E                     	;# 
  2893  0391                     	;# 
  2894  0392                     	;# 
  2895  0393                     	;# 
  2896  039A                     	;# 
  2897  039C                     	;# 
  2898  039D                     	;# 
  2899  039E                     	;# 
  2900  039F                     	;# 
  2901  0415                     	;# 
  2902  0416                     	;# 
  2903  0417                     	;# 
  2904  041C                     	;# 
  2905  041D                     	;# 
  2906  041E                     	;# 
  2907  0FE4                     	;# 
  2908  0FE5                     	;# 
  2909  0FE6                     	;# 
  2910  0FE7                     	;# 
  2911  0FE8                     	;# 
  2912  0FE9                     	;# 
  2913  0FEA                     	;# 
  2914  0FEB                     	;# 
  2915  0FED                     	;# 
  2916  0FEE                     	;# 
  2917  0FEF                     	;# 
  2918  0000                     	;# 
  2919  0001                     	;# 
  2920  0002                     	;# 
  2921  0003                     	;# 
  2922  0004                     	;# 
  2923  0005                     	;# 
  2924  0006                     	;# 
  2925  0007                     	;# 
  2926  0008                     	;# 
  2927  0009                     	;# 
  2928  000A                     	;# 
  2929  000B                     	;# 
  2930  000C                     	;# 
  2931  000E                     	;# 
  2932  0011                     	;# 
  2933  0012                     	;# 
  2934  0013                     	;# 
  2935  0015                     	;# 
  2936  0016                     	;# 
  2937  0016                     	;# 
  2938  0017                     	;# 
  2939  0018                     	;# 
  2940  0019                     	;# 
  2941  001A                     	;# 
  2942  001B                     	;# 
  2943  001C                     	;# 
  2944  001E                     	;# 
  2945  001F                     	;# 
  2946  008C                     	;# 
  2947  008E                     	;# 
  2948  0091                     	;# 
  2949  0092                     	;# 
  2950  0093                     	;# 
  2951  0095                     	;# 
  2952  0096                     	;# 
  2953  0097                     	;# 
  2954  0098                     	;# 
  2955  0099                     	;# 
  2956  009A                     	;# 
  2957  009B                     	;# 
  2958  009B                     	;# 
  2959  009C                     	;# 
  2960  009D                     	;# 
  2961  009E                     	;# 
  2962  010C                     	;# 
  2963  010E                     	;# 
  2964  0111                     	;# 
  2965  0112                     	;# 
  2966  0113                     	;# 
  2967  0114                     	;# 
  2968  0115                     	;# 
  2969  0116                     	;# 
  2970  0117                     	;# 
  2971  0118                     	;# 
  2972  0119                     	;# 
  2973  011A                     	;# 
  2974  011B                     	;# 
  2975  011D                     	;# 
  2976  011E                     	;# 
  2977  018C                     	;# 
  2978  018E                     	;# 
  2979  0191                     	;# 
  2980  0191                     	;# 
  2981  0192                     	;# 
  2982  0193                     	;# 
  2983  0193                     	;# 
  2984  0193                     	;# 
  2985  0194                     	;# 
  2986  0195                     	;# 
  2987  0196                     	;# 
  2988  0199                     	;# 
  2989  019A                     	;# 
  2990  019B                     	;# 
  2991  019B                     	;# 
  2992  019C                     	;# 
  2993  019D                     	;# 
  2994  019E                     	;# 
  2995  019F                     	;# 
  2996  020C                     	;# 
  2997  020E                     	;# 
  2998  0211                     	;# 
  2999  0211                     	;# 
  3000  0212                     	;# 
  3001  0212                     	;# 
  3002  0213                     	;# 
  3003  0213                     	;# 
  3004  0214                     	;# 
  3005  0214                     	;# 
  3006  0215                     	;# 
  3007  0215                     	;# 
  3008  0215                     	;# 
  3009  0216                     	;# 
  3010  0216                     	;# 
  3011  0217                     	;# 
  3012  0217                     	;# 
  3013  0291                     	;# 
  3014  0291                     	;# 
  3015  0292                     	;# 
  3016  0293                     	;# 
  3017  0294                     	;# 
  3018  0295                     	;# 
  3019  0295                     	;# 
  3020  0296                     	;# 
  3021  0298                     	;# 
  3022  0298                     	;# 
  3023  0299                     	;# 
  3024  029A                     	;# 
  3025  029B                     	;# 
  3026  029C                     	;# 
  3027  029D                     	;# 
  3028  029E                     	;# 
  3029  0311                     	;# 
  3030  0311                     	;# 
  3031  0312                     	;# 
  3032  0313                     	;# 
  3033  0318                     	;# 
  3034  0318                     	;# 
  3035  0319                     	;# 
  3036  031A                     	;# 
  3037  038C                     	;# 
  3038  038E                     	;# 
  3039  0391                     	;# 
  3040  0392                     	;# 
  3041  0393                     	;# 
  3042  039A                     	;# 
  3043  039C                     	;# 
  3044  039D                     	;# 
  3045  039E                     	;# 
  3046  039F                     	;# 
  3047  0415                     	;# 
  3048  0416                     	;# 
  3049  0417                     	;# 
  3050  041C                     	;# 
  3051  041D                     	;# 
  3052  041E                     	;# 
  3053  0FE4                     	;# 
  3054  0FE5                     	;# 
  3055  0FE6                     	;# 
  3056  0FE7                     	;# 
  3057  0FE8                     	;# 
  3058  0FE9                     	;# 
  3059  0FEA                     	;# 
  3060  0FEB                     	;# 
  3061  0FED                     	;# 
  3062  0FEE                     	;# 
  3063  0FEF                     	;_I2cPacket
  3064                           
  3065                           	psect	idataCOMMON
  3066  08AB                     __pidataCOMMON:	
  3067                           
  3068                           ;initializer for Led_InitSeq@LedInitSts
  3069  08AB  3401               	retlw	1
  3070                           
  3071                           	psect	idataBANK0
  3072  08AA                     __pidataBANK0:	
  3073                           
  3074                           ;initializer for _LedBehaviourSts
  3075  08AA  3401               	retlw	1
  3076                           
  3077                           	psect	idataBANK1
  3078  08A9                     __pidataBANK1:	
  3079                           
  3080                           ;initializer for _MainSystemTimebaseFlag
  3081  08A9  3401               	retlw	1
  3082                           
  3083                           	psect	idataBANK2
  3084  0B64                     __pidataBANK2:	
  3085                           
  3086                           ;initializer for _TaskTable
  3087  0B64  34A5               	retlw	low _I2c_DataReceiveSm
  3088  0B65  3400               	retlw	high _I2c_DataReceiveSm
  3089  0B66  3400               	retlw	0
  3090  0B67  3400               	retlw	0
  3091  0B68  3400               	retlw	0
  3092  0B69  3401               	retlw	1
  3093  0B6A  3400               	retlw	0
  3094  0B6B  3400               	retlw	0
  3095  0B6C  34C5               	retlw	low _I2cSlv_MainTask
  3096  0B6D  3409               	retlw	high _I2cSlv_MainTask
  3097  0B6E  3400               	retlw	0
  3098  0B6F  3400               	retlw	0
  3099  0B70  3400               	retlw	0
  3100  0B71  3401               	retlw	1
  3101  0B72  3400               	retlw	0
  3102  0B73  3400               	retlw	0
  3103  0B74  34F0               	retlw	low _Wdg_MainTask
  3104  0B75  3409               	retlw	high _Wdg_MainTask
  3105  0B76  3400               	retlw	0
  3106  0B77  3400               	retlw	0
  3107  0B78  3400               	retlw	0
  3108  0B79  34E8               	retlw	232
  3109  0B7A  3403               	retlw	3
  3110  0B7B  3400               	retlw	0
  3111  0B7C  349F               	retlw	low _Led_MainTask
  3112  0B7D  340C               	retlw	high _Led_MainTask
  3113  0B7E  3400               	retlw	0
  3114  0B7F  3400               	retlw	0
  3115  0B80  3400               	retlw	0
  3116  0B81  3464               	retlw	100
  3117  0B82  3400               	retlw	0
  3118  0B83  3400               	retlw	0
  3119  0B84  34C5               	retlw	low _App_MainTask
  3120  0B85  3405               	retlw	high _App_MainTask
  3121  0B86  3400               	retlw	0
  3122  0B87  3400               	retlw	0
  3123  0B88  3400               	retlw	0
  3124  0B89  34F4               	retlw	244
  3125  0B8A  3401               	retlw	1
  3126  0B8B  3400               	retlw	0
  3127                           
  3128                           	psect	stringtext1
  3129  100B                     __pstringtext1:	
  3130  100B                     _dpowers:	
  3131  100B  3401               	retlw	1
  3132  100C  3400               	retlw	0
  3133  100D  340A               	retlw	10
  3134  100E  3400               	retlw	0
  3135  100F  3464               	retlw	100
  3136  1010  3400               	retlw	0
  3137  1011  34E8               	retlw	232
  3138  1012  3403               	retlw	3
  3139  1013  3410               	retlw	16
  3140  1014  3427               	retlw	39
  3141  1015                     __end_of_dpowers:	
  3142                           
  3143                           	psect	stringtext2
  3144  1000                     __pstringtext2:	
  3145  1000                     _TaskNumber:	
  3146  1000  3405               	retlw	5
  3147  1001  3400               	retlw	0
  3148  1002                     __end_of_TaskNumber:	
  3149  000C                     _PORTAbits	set	12
  3150  000E                     _PORTCbits	set	14
  3151  001B                     _PR2	set	27
  3152  0013                     _PIR3bits	set	19
  3153  001C                     _T2CONbits	set	28
  3154  000B                     _INTCONbits	set	11
  3155  0011                     _PIR1bits	set	17
  3156  008C                     _TRISAbits	set	140
  3157  0093                     _PIE3bits	set	147
  3158  009B                     _ADRESL	set	155
  3159  009C                     _ADRESH	set	156
  3160  009E                     _ADCON1bits	set	158
  3161  009D                     _ADCON0bits	set	157
  3162  0097                     _WDTCONbits	set	151
  3163  0095                     _OPTION_REGbits	set	149
  3164  009A                     _OSCSTATbits	set	154
  3165  0099                     _OSCCONbits	set	153
  3166  0091                     _PIE1bits	set	145
  3167  008E                     _TRISCbits	set	142
  3168  010E                     _LATCbits	set	270
  3169  010E                     _LATC	set	270
  3170  010C                     _LATA	set	268
  3171  010C                     _LATAbits	set	268
  3172  0117                     _FVRCONbits	set	279
  3173  018E                     _ANSELCbits	set	398
  3174  018E                     _ANSELC	set	398
  3175  018C                     _ANSELAbits	set	396
  3176  018C                     _ANSELA	set	396
  3177  020E                     _WPUCbits	set	526
  3178  020E                     _WPUC	set	526
  3179  020C                     _WPUAbits	set	524
  3180  020C                     _WPUA	set	524
  3181  0215                     _SSP1CON1bits	set	533
  3182  0211                     _SSP1BUF	set	529
  3183  0213                     _SSP1MSK	set	531
  3184  0212                     _SSP1ADD	set	530
  3185  0217                     _SSP1CON3	set	535
  3186  0215                     _SSP1CON1	set	533
  3187  0214                     _SSP1STAT	set	532
  3188  0216                     _SSP1CON2	set	534
  3189  041D                     _PR6	set	1053
  3190  0416                     _PR4	set	1046
  3191  041E                     _T6CONbits	set	1054
  3192  0417                     _T4CONbits	set	1047
  3193  1002                     STR_4:	
  3194  1002  3430               	retlw	48	;'0'
  3195  1003  3431               	retlw	49	;'1'
  3196  1004  342E               	retlw	46	;'.'
  3197  1005  3430               	retlw	48	;'0'
  3198  1006  3431               	retlw	49	;'1'
  3199  1007  342E               	retlw	46	;'.'
  3200  1008  3430               	retlw	48	;'0'
  3201  1009  3430               	retlw	48	;'0'
  3202  100A  3400               	retlw	0
  3203                           
  3204                           	psect	stringtext3
  3205  1015                     __pstringtext3:	
  3206  1015                     STR_1:	
  3207  1015  3425               	retlw	37	;'%'
  3208  1016  3464               	retlw	100	;'d'
  3209  1017  342E               	retlw	46	;'.'
  3210  1018  3425               	retlw	37	;'%'
  3211  1019  3430               	retlw	48	;'0'
  3212  101A  3431               	retlw	49	;'1'
  3213  101B  3475               	retlw	117	;'u'
  3214  101C  3400               	retlw	0
  3215                           
  3216                           	psect	stringtext4
  3217  101D                     __pstringtext4:	
  3218  101D                     STR_3:	
  3219  101D  3453               	retlw	83	;'S'
  3220  101E  3442               	retlw	66	;'B'
  3221  101F  3431               	retlw	49	;'1'
  3222  1020  3431               	retlw	49	;'1'
  3223  1021  3430               	retlw	48	;'0'
  3224  1022  3400               	retlw	0
  3225                           
  3226                           	psect	stringtext5
  3227  1023                     __pstringtext5:	
  3228  1023                     STR_2:	
  3229  1023  3445               	retlw	69	;'E'
  3230  1024  3443               	retlw	67	;'C'
  3231  1025  3448               	retlw	72	;'H'
  3232  1026  344F               	retlw	79	;'O'
  3233  1027  3400               	retlw	0
  3234                           
  3235                           	psect	stringtext6
  3236  0000                     __pstringtext6:	
  3237  1002                     
  3238                           ; #config settings
  3239  0000                     
  3240                           	psect	cinit
  3241  002D                     start_initialization:	
  3242  002D                     __initialization:		;BIGRAM
  3243                           
  3244                           ; Initialize objects allocated to COMMON
  3245  002D  3188  20AB  3180   	fcall	__pidataCOMMON	;fetch initializer
  3246  0030  00F9               	movwf	__pdataCOMMON& (0+127)
  3247                           
  3248                           ; Initialize objects allocated to BANK0
  3249  0031  3188  20AA  3180   	fcall	__pidataBANK0	;fetch initializer
  3250  0034  00E8               	movwf	__pdataBANK0& (0+127)
  3251                           
  3252                           ; Initialize objects allocated to BANK1
  3253  0035  0021               	movlb	1	; select bank1
  3254  0036  3188  20A9  3180   	fcall	__pidataBANK1	;fetch initializer
  3255  0039  00E9               	movwf	__pdataBANK1& (0+127)
  3256                           
  3257                           ; Initialize objects allocated to BANK2
  3258  003A  3064               	movlw	low __pidataBANK2
  3259  003B  0084               	movwf	4
  3260  003C  308B               	movlw	(high __pidataBANK2)| (0+128)
  3261  003D  0085               	movwf	5
  3262  003E  3020               	movlw	low __pdataBANK2
  3263  003F  0086               	movwf	6
  3264  0040  3001               	movlw	high __pdataBANK2
  3265  0041  0087               	movwf	7
  3266  0042  3000               	movlw	0
  3267  0043  00FF               	movwf	btemp+1
  3268  0044  3028               	movlw	40
  3269  0045  3189  2144  3180   	fcall	init_ram
  3270                           
  3271                           ; Clear objects allocated to BIGRAM
  3272  0048  309D               	movlw	low (0+9117)
  3273  0049  0084               	movwf	4
  3274  004A  3023               	movlw	high (0+9117)
  3275  004B  0085               	movwf	5
  3276  004C  3053               	movlw	83
  3277  004D  00FE               	movwf	btemp
  3278  004E  3000               	movlw	0
  3279  004F  00FF               	movwf	btemp+1
  3280  0050  3189  2138  3180   	fcall	clear_ram0
  3281                           
  3282                           ; Clear objects allocated to COMMON
  3283  0053  01F6               	clrf	__pbssCOMMON& (0+127)
  3284  0054  01F7               	clrf	(__pbssCOMMON+1)& (0+127)
  3285  0055  01F8               	clrf	(__pbssCOMMON+2)& (0+127)
  3286                           
  3287                           ; Clear objects allocated to BANK0
  3288  0056  0020               	movlb	0	; select bank0
  3289  0057  01DF               	clrf	__pbssBANK0& (0+127)
  3290  0058  01E0               	clrf	(__pbssBANK0+1)& (0+127)
  3291  0059  01E1               	clrf	(__pbssBANK0+2)& (0+127)
  3292  005A  01E2               	clrf	(__pbssBANK0+3)& (0+127)
  3293  005B  01E3               	clrf	(__pbssBANK0+4)& (0+127)
  3294  005C  01E4               	clrf	(__pbssBANK0+5)& (0+127)
  3295  005D  01E5               	clrf	(__pbssBANK0+6)& (0+127)
  3296  005E  01E6               	clrf	(__pbssBANK0+7)& (0+127)
  3297  005F  01E7               	clrf	(__pbssBANK0+8)& (0+127)
  3298                           
  3299                           ; Clear objects allocated to BANK1
  3300  0060  30A0               	movlw	low __pbssBANK1
  3301  0061  0084               	movwf	4
  3302  0062  3000               	movlw	high __pbssBANK1
  3303  0063  0085               	movwf	5
  3304  0064  3049               	movlw	73
  3305  0065  00FE               	movwf	btemp
  3306  0066  3000               	movlw	0
  3307  0067  00FF               	movwf	btemp+1
  3308  0068  3189  2138  3180   	fcall	clear_ram0
  3309                           
  3310                           ; Clear objects allocated to BANK2
  3311  006B  3048               	movlw	low __pbssBANK2
  3312  006C  0084               	movwf	4
  3313  006D  3001               	movlw	high __pbssBANK2
  3314  006E  0085               	movwf	5
  3315  006F  3014               	movlw	20
  3316  0070  00FE               	movwf	btemp
  3317  0071  3000               	movlw	0
  3318  0072  00FF               	movwf	btemp+1
  3319  0073  3189  2138  3180   	fcall	clear_ram0
  3320                           
  3321                           ; Clear objects allocated to BANK3
  3322  0076  30A0               	movlw	low __pbssBANK3
  3323  0077  0084               	movwf	4
  3324  0078  3001               	movlw	high __pbssBANK3
  3325  0079  0085               	movwf	5
  3326  007A  3050               	movlw	80
  3327  007B  00FE               	movwf	btemp
  3328  007C  3000               	movlw	0
  3329  007D  00FF               	movwf	btemp+1
  3330  007E  3189  2138  3180   	fcall	clear_ram0
  3331                           
  3332                           ; Clear objects allocated to BANK4
  3333  0081  3020               	movlw	low __pbssBANK4
  3334  0082  0084               	movwf	4
  3335  0083  3002               	movlw	high __pbssBANK4
  3336  0084  0085               	movwf	5
  3337  0085  3050               	movlw	80
  3338  0086  00FE               	movwf	btemp
  3339  0087  3000               	movlw	0
  3340  0088  00FF               	movwf	btemp+1
  3341  0089  3189  2138  3180   	fcall	clear_ram0
  3342                           
  3343                           ; Clear objects allocated to BANK5
  3344  008C  30A0               	movlw	low __pbssBANK5
  3345  008D  0084               	movwf	4
  3346  008E  3002               	movlw	high __pbssBANK5
  3347  008F  0085               	movwf	5
  3348  0090  3050               	movlw	80
  3349  0091  00FE               	movwf	btemp
  3350  0092  3000               	movlw	0
  3351  0093  00FF               	movwf	btemp+1
  3352  0094  3189  2138  3180   	fcall	clear_ram0
  3353                           
  3354                           ; Clear objects allocated to BANK6
  3355  0097  3020               	movlw	low __pbssBANK6
  3356  0098  0084               	movwf	4
  3357  0099  3003               	movlw	high __pbssBANK6
  3358  009A  0085               	movwf	5
  3359  009B  3050               	movlw	80
  3360  009C  00FE               	movwf	btemp
  3361  009D  3000               	movlw	0
  3362  009E  00FF               	movwf	btemp+1
  3363  009F  3189  2138         	fcall	clear_ram0
  3364  00A1                     end_of_initialization:	
  3365                           ;End of C runtime variable initialization code
  3366                           
  3367  00A1                     __end_of__initialization:	
  3368  00A1  107E               	bcf	int$flags,0	;clear compiler interrupt flag (level 1)
  3369  00A2  0020               	movlb	0
  3370  00A3  3188  28C7         	ljmp	_main	;jump to C main() function
  3371                           
  3372                           	psect	bssCOMMON
  3373  0076                     __pbssCOMMON:	
  3374  0076                     _Relay2Sts:	
  3375  0076                     	ds	1
  3376  0077                     _Relay1Sts:	
  3377  0077                     	ds	1
  3378  0078                     I2c_DataReceiveSm@I2cRxFlag:	
  3379  0078                     	ds	1
  3380                           
  3381                           	psect	dataCOMMON
  3382  0079                     __pdataCOMMON:	
  3383  0079                     Led_InitSeq@LedInitSts:	
  3384  0079                     	ds	1
  3385                           
  3386                           	psect	bssBANK0
  3387  005F                     __pbssBANK0:	
  3388  005F                     _I2cSlaveAddress:	
  3389  005F                     	ds	1
  3390  0060                     _SystemState:	
  3391  0060                     	ds	1
  3392  0061                     I2c_DataReceiveSm@TxCounter:	
  3393  0061                     	ds	1
  3394  0062                     I2c_DataReceiveSm@RxCounter:	
  3395  0062                     	ds	1
  3396  0063                     I2c_DataReceiveSm@OpType:	
  3397  0063                     	ds	1
  3398  0064                     I2c_DataReceiveSm@I2cRxAddress:	
  3399  0064                     	ds	1
  3400  0065                     I2c_DataReceiveSm@I2cRxState:	
  3401  0065                     	ds	1
  3402  0066                     _I2cReplyPacketReady:	
  3403  0066                     	ds	2
  3404                           
  3405                           	psect	dataBANK0
  3406  0068                     __pdataBANK0:	
  3407  0068                     _LedBehaviourSts:	
  3408  0068                     	ds	1
  3409                           
  3410                           	psect	bssBANK1
  3411  00A0                     __pbssBANK1:	
  3412  00A0                     Led_InitSeq@DelayCounter:	
  3413  00A0                     	ds	2
  3414  00A2                     _InterruptCounter:	
  3415  00A2                     	ds	2
  3416  00A4                     _Tmr6IsrCallback:	
  3417  00A4                     	ds	2
  3418  00A6                     _Tmr4IsrCallback:	
  3419  00A6                     	ds	2
  3420  00A8                     _Tmr2IsrCallback:	
  3421  00A8                     	ds	2
  3422  00AA                     AppSm@WpuSetCounter:	
  3423  00AA                     	ds	1
  3424  00AB                     AppSm@AppState:	
  3425  00AB                     	ds	1
  3426  00AC                     Led_InitSeq@InitSeqState:	
  3427  00AC                     	ds	1
  3428  00AD                     Led_InitSeq@Counter:	
  3429  00AD                     	ds	1
  3430  00AE                     I2cSlv_I2cDrvHandle@I2cReceiveMsgState:	
  3431  00AE                     	ds	1
  3432  00AF                     _RepBufferLen:	
  3433  00AF                     	ds	1
  3434  00B0                     I2c_DataReceiveSm@ErrorCounter:	
  3435  00B0                     	ds	1
  3436  00B1                     I2c_DataReceiveSm@AddressStored:	
  3437  00B1                     	ds	1
  3438  00B2                     _I2cConfig:	
  3439  00B2                     	ds	11
  3440  00BD                     _Relay2Set:	
  3441  00BD                     	ds	10
  3442  00C7                     _Relay1Set:	
  3443  00C7                     	ds	10
  3444  00D1                     _Led1Blink:	
  3445  00D1                     	ds	9
  3446  00DA                     _Led1Pulse:	
  3447  00DA                     	ds	6
  3448  00E0                     _I2cWriteRequest:	
  3449  00E0                     	ds	2
  3450  00E2                     _I2cSetAddress:	
  3451  00E2                     	ds	2
  3452  00E4                     _I2cNewTxNotification:	
  3453  00E4                     	ds	2
  3454  00E6                     _I2cNewPacketNotification:	
  3455  00E6                     	ds	2
  3456  00E8                     _Led1Sts:	
  3457  00E8                     	ds	1
  3458                           
  3459                           	psect	dataBANK1
  3460  00E9                     __pdataBANK1:	
  3461  00E9                     _MainSystemTimebaseFlag:	
  3462  00E9                     	ds	1
  3463                           
  3464                           	psect	bssBANK2
  3465  0148                     __pbssBANK2:	
  3466  0148                     App_MainTask@F3846:	
  3467  0148                     	ds	12
  3468  0154                     App_MainTask@F3860:	
  3469  0154                     	ds	8
  3470                           
  3471                           	psect	dataBANK2
  3472  0120                     __pdataBANK2:	
  3473  0120                     _TaskTable:	
  3474  0120                     	ds	40
  3475                           
  3476                           	psect	bssBANK3
  3477  01A0                     __pbssBANK3:	
  3478  01A0                     _CmdBuffer:	
  3479  01A0                     	ds	80
  3480                           
  3481                           	psect	bssBANK4
  3482  0220                     __pbssBANK4:	
  3483  0220                     _RepBuffer:	
  3484  0220                     	ds	80
  3485                           
  3486                           	psect	bssBANK5
  3487  02A0                     __pbssBANK5:	
  3488  02A0                     _I2cTxBuffer:	
  3489  02A0                     	ds	80
  3490                           
  3491                           	psect	bssBANK6
  3492  0320                     __pbssBANK6:	
  3493  0320                     _I2cRxBuffer:	
  3494  0320                     	ds	80
  3495                           
  3496                           	psect	inittext
  3497  0944                     init_ram:	
  3498  0944  00FE               	movwf	126
  3499  0945                     initloop:	
  3500  0945  0012               	moviw fsr0++
  3501  0946  001E               	movwi fsr1++
  3502  0947  3001               	movlw	1
  3503  0948  02FE               	subwf	126,f
  3504  0949  3000               	movlw	0
  3505  094A  3BFF               	subwfb	127,f
  3506  094B  087F               	movf	127,w
  3507  094C  047E               	iorwf	126,w
  3508  094D  1903               	btfsc	3,2
  3509  094E  3400               	retlw	0
  3510  094F  2945               	goto	initloop
  3511                           
  3512                           	psect	clrtext
  3513  0938                     clear_ram0:	
  3514                           ;	Called with FSR0 containing the base address, and
  3515                           ;	btemp/btemp+1 has the size to clear
  3516                           
  3517  0938  0064               	clrwdt	;clear the watchdog before getting into this loop
  3518  0939                     clrloop0:	
  3519  0939  0180               	clrf	0	;clear RAM location pointed to by FSR
  3520  093A  3101               	addfsr 0,1
  3521  093B  3001               	movlw	1
  3522  093C  02FE               	subwf	126,f
  3523  093D  3000               	movlw	0
  3524  093E  3BFF               	subwfb	127,f
  3525  093F  087F               	movf	127,w
  3526  0940  047E               	iorwf	126,w
  3527  0941  1903               	btfsc	3,2
  3528  0942  3400               	retlw	0	;all done for this memory range, return
  3529  0943  2939               	goto	clrloop0	;have we reached the end yet?
  3530                           
  3531                           	psect	cstackCOMMON
  3532  0070                     __pcstackCOMMON:	
  3533  0070                     ?_SystemInit:	
  3534  0070                     ?_MainScheduler:	
  3535                           ; 1 bytes @ 0x0
  3536                           
  3537  0070                     ?_ReceiveEvt:	
  3538                           ; 1 bytes @ 0x0
  3539                           
  3540  0070                     ?_Mcu_Reset:	
  3541                           ; 1 bytes @ 0x0
  3542                           
  3543  0070                     ?_GenerateEvt:	
  3544                           ; 1 bytes @ 0x0
  3545                           
  3546  0070                     ?_InitializeTasks:	
  3547                           ; 1 bytes @ 0x0
  3548                           
  3549  0070                     ?_ScheduleTasks:	
  3550                           ; 1 bytes @ 0x0
  3551                           
  3552  0070                     ?_I2cSlv_I2cDrvHandle:	
  3553                           ; 1 bytes @ 0x0
  3554                           
  3555  0070                     ?_SetLedBehavSts:	
  3556                           ; 1 bytes @ 0x0
  3557                           
  3558  0070                     ?_CheckAckStatus:	
  3559                           ; 1 bytes @ 0x0
  3560                           
  3561  0070                     ?_CheckByteStatus:	
  3562                           ; 1 bytes @ 0x0
  3563                           
  3564  0070                     ?_CheckStopBitStatus:	
  3565                           ; 1 bytes @ 0x0
  3566                           
  3567  0070                     ?_ClearRxBuffer:	
  3568                           ; 1 bytes @ 0x0
  3569                           
  3570  0070                     ?_ClearTxBuffer:	
  3571                           ; 1 bytes @ 0x0
  3572                           
  3573  0070                     ?_I2c_InitI2cModule:	
  3574                           ; 1 bytes @ 0x0
  3575                           
  3576  0070                     ?_I2c_SetI2cAddress:	
  3577                           ; 1 bytes @ 0x0
  3578                           
  3579  0070                     ?_I2c_SetI2cAddressMask:	
  3580                           ; 1 bytes @ 0x0
  3581                           
  3582  0070                     ?_Mcu_InitIntOsc:	
  3583                           ; 1 bytes @ 0x0
  3584                           
  3585  0070                     ?_Mcu_EnableInterrupts:	
  3586                           ; 1 bytes @ 0x0
  3587                           
  3588  0070                     ?_Mcu_SetPullUpsSts:	
  3589                           ; 1 bytes @ 0x0
  3590                           
  3591  0070                     ?_Mcu_ConfigPullUps:	
  3592                           ; 1 bytes @ 0x0
  3593                           
  3594  0070                     ?_Mcu_SetWdgPeriod:	
  3595                           ; 1 bytes @ 0x0
  3596                           
  3597  0070                     ?_Mcu_SetWdgSts:	
  3598                           ; 1 bytes @ 0x0
  3599                           
  3600  0070                     ?_Mcu_ClearWdg:	
  3601                           ; 1 bytes @ 0x0
  3602                           
  3603  0070                     ?_Mcu_SetDieTempSts:	
  3604                           ; 1 bytes @ 0x0
  3605                           
  3606  0070                     ?_Mcu_SetDieTempMode:	
  3607                           ; 1 bytes @ 0x0
  3608                           
  3609  0070                     ?_Adc_ConfigAnCh:	
  3610                           ; 1 bytes @ 0x0
  3611                           
  3612  0070                     ?_Adc_InitAdcModule:	
  3613                           ; 1 bytes @ 0x0
  3614                           
  3615  0070                     ?_Adc_SelectChannel:	
  3616                           ; 1 bytes @ 0x0
  3617                           
  3618  0070                     ?_Adc_StartConversion:	
  3619                           ; 1 bytes @ 0x0
  3620                           
  3621  0070                     ?_Adc_GetConvSts:	
  3622                           ; 1 bytes @ 0x0
  3623                           
  3624  0070                     ?_Tmr_StartTmr:	
  3625                           ; 1 bytes @ 0x0
  3626                           
  3627  0070                     ?_LedBlinkStateMachine:	
  3628                           ; 1 bytes @ 0x0
  3629                           
  3630  0070                     ?_MainInterrupt:	
  3631                           ; 1 bytes @ 0x0
  3632                           
  3633  0070                     ?_I2c_SetConfig:	
  3634                           ; 1 bytes @ 0x0
  3635                           
  3636  0070                     ?_Led_InitSeq:	
  3637                           ; 1 bytes @ 0x0
  3638                           
  3639  0070                     ?_ControlLedDirect:	
  3640                           ; 1 bytes @ 0x0
  3641                           
  3642  0070                     ?_BoardReset:	
  3643                           ; 1 bytes @ 0x0
  3644                           
  3645  0070                     ?_LowPowerMode:	
  3646                           ; 1 bytes @ 0x0
  3647                           
  3648  0070                     ?_StdS_ManageStdServices:	
  3649                           ; 1 bytes @ 0x0
  3650                           
  3651  0070                     ?_StdS_SetI2cAddress:	
  3652                           ; 1 bytes @ 0x0
  3653                           
  3654  0070                     ?_UpdateRelaysSts:	
  3655                           ; 1 bytes @ 0x0
  3656                           
  3657  0070                     ?_GenerateImpulse:	
  3658                           ; 1 bytes @ 0x0
  3659                           
  3660  0070                     ?_ManageProtocol:	
  3661                           ; 1 bytes @ 0x0
  3662                           
  3663  0070                     ?_AppSm:	
  3664                           ; 1 bytes @ 0x0
  3665                           
  3666  0070                     ?_InitSchTimer:	
  3667                           ; 1 bytes @ 0x0
  3668                           
  3669  0070                     ?i1_GenerateEvt:	
  3670                           ; 1 bytes @ 0x0
  3671                           
  3672  0070                     ??i1_GenerateEvt:	
  3673                           ; 1 bytes @ 0x0
  3674                           
  3675  0070                     ?_main:	
  3676                           ; 1 bytes @ 0x0
  3677                           
  3678                           
  3679                           ; 2 bytes @ 0x0
  3680  0070                     	ds	1
  3681  0071                     i1GenerateEvt@Event:	
  3682                           
  3683                           ; 1 bytes @ 0x1
  3684  0071                     	ds	1
  3685  0072                     i1GenerateEvt@EventStatus:	
  3686                           
  3687                           ; 1 bytes @ 0x2
  3688  0072                     	ds	1
  3689  0073                     ??_MainInterrupt:	
  3690                           
  3691                           ; 1 bytes @ 0x3
  3692  0073                     	ds	1
  3693  0074                     ??_ReceiveEvt:	
  3694  0074                     ??_Mcu_Reset:	
  3695                           ; 1 bytes @ 0x4
  3696                           
  3697  0074                     ??_GenerateEvt:	
  3698                           ; 1 bytes @ 0x4
  3699                           
  3700  0074                     ?_Led_SetLedStatus:	
  3701                           ; 1 bytes @ 0x4
  3702                           
  3703  0074                     ??_CheckAckStatus:	
  3704                           ; 1 bytes @ 0x4
  3705                           
  3706  0074                     ??_CheckByteStatus:	
  3707                           ; 1 bytes @ 0x4
  3708                           
  3709  0074                     ??_CheckStopBitStatus:	
  3710                           ; 1 bytes @ 0x4
  3711                           
  3712  0074                     ??_ClearRxBuffer:	
  3713                           ; 1 bytes @ 0x4
  3714                           
  3715  0074                     ??_ClearTxBuffer:	
  3716                           ; 1 bytes @ 0x4
  3717                           
  3718  0074                     ??_I2c_SetI2cAddress:	
  3719                           ; 1 bytes @ 0x4
  3720                           
  3721  0074                     ??_I2c_SetI2cAddressMask:	
  3722                           ; 1 bytes @ 0x4
  3723                           
  3724  0074                     ?_I2c_UpdateTxBuffer:	
  3725                           ; 1 bytes @ 0x4
  3726                           
  3727  0074                     ??_Mcu_InitIntOsc:	
  3728                           ; 1 bytes @ 0x4
  3729                           
  3730  0074                     ??_Mcu_EnableInterrupts:	
  3731                           ; 1 bytes @ 0x4
  3732                           
  3733  0074                     ??_Mcu_SetPullUpsSts:	
  3734                           ; 1 bytes @ 0x4
  3735                           
  3736  0074                     ??_Mcu_ConfigPullUps:	
  3737                           ; 1 bytes @ 0x4
  3738                           
  3739  0074                     ??_Mcu_SetWdgPeriod:	
  3740                           ; 1 bytes @ 0x4
  3741                           
  3742  0074                     ??_Mcu_SetWdgSts:	
  3743                           ; 1 bytes @ 0x4
  3744                           
  3745  0074                     ??_Mcu_ClearWdg:	
  3746                           ; 1 bytes @ 0x4
  3747                           
  3748  0074                     ??_Mcu_SetDieTempSts:	
  3749                           ; 1 bytes @ 0x4
  3750                           
  3751  0074                     ??_Mcu_SetDieTempMode:	
  3752                           ; 1 bytes @ 0x4
  3753                           
  3754  0074                     ??_Adc_ConfigAnCh:	
  3755                           ; 1 bytes @ 0x4
  3756                           
  3757  0074                     ??_Adc_InitAdcModule:	
  3758                           ; 1 bytes @ 0x4
  3759                           
  3760  0074                     ??_Adc_SelectChannel:	
  3761                           ; 1 bytes @ 0x4
  3762                           
  3763  0074                     ??_Adc_StartConversion:	
  3764                           ; 1 bytes @ 0x4
  3765                           
  3766  0074                     ??_Adc_GetConvSts:	
  3767                           ; 1 bytes @ 0x4
  3768                           
  3769  0074                     ?_TmrBInit:	
  3770                           ; 1 bytes @ 0x4
  3771                           
  3772  0074                     ?_Tmr_TmrBIrqSet:	
  3773                           ; 1 bytes @ 0x4
  3774                           
  3775  0074                     ??_Tmr_StartTmr:	
  3776                           ; 1 bytes @ 0x4
  3777                           
  3778  0074                     ??_I2c_SetConfig:	
  3779                           ; 1 bytes @ 0x4
  3780                           
  3781  0074                     ??_Led_SetLedBlinkTime:	
  3782                           ; 1 bytes @ 0x4
  3783                           
  3784  0074                     ?_Led_SetLedPulseTime:	
  3785                           ; 1 bytes @ 0x4
  3786                           
  3787  0074                     ??_BoardReset:	
  3788                           ; 1 bytes @ 0x4
  3789                           
  3790  0074                     ??_StdS_SetI2cAddress:	
  3791                           ; 1 bytes @ 0x4
  3792                           
  3793  0074                     ?_SetOutChSts:	
  3794                           ; 1 bytes @ 0x4
  3795                           
  3796  0074                     ??___wmul:	
  3797                           ; 1 bytes @ 0x4
  3798                           
  3799  0074                     ??___lldiv:	
  3800                           ; 1 bytes @ 0x4
  3801                           
  3802  0074                     ??___lwdiv:	
  3803                           ; 1 bytes @ 0x4
  3804                           
  3805  0074                     ??___lwmod:	
  3806                           ; 1 bytes @ 0x4
  3807                           
  3808  0074                     ?_Adc_GetConvResult:	
  3809                           ; 1 bytes @ 0x4
  3810                           
  3811  0074                     I2c_SetI2cAddress@SlaveAddress:	
  3812                           ; 2 bytes @ 0x4
  3813                           
  3814  0074                     I2c_SetI2cAddressMask@SlaveAddressMask:	
  3815                           ; 1 bytes @ 0x4
  3816                           
  3817  0074                     I2c_UpdateTxBuffer@Length:	
  3818                           ; 1 bytes @ 0x4
  3819                           
  3820  0074                     Mcu_SetPullUpsSts@PuSts:	
  3821                           ; 1 bytes @ 0x4
  3822                           
  3823  0074                     Mcu_ConfigPullUps@WpuCh:	
  3824                           ; 1 bytes @ 0x4
  3825                           
  3826  0074                     Mcu_SetWdgSts@WdgSts:	
  3827                           ; 1 bytes @ 0x4
  3828                           
  3829  0074                     Mcu_SetDieTempSts@DieTempSts:	
  3830                           ; 1 bytes @ 0x4
  3831                           
  3832  0074                     Mcu_SetDieTempMode@DieTempMode:	
  3833                           ; 1 bytes @ 0x4
  3834                           
  3835  0074                     Adc_ConfigAnCh@AnChSel:	
  3836                           ; 1 bytes @ 0x4
  3837                           
  3838  0074                     Adc_InitAdcModule@AdcConfig:	
  3839                           ; 1 bytes @ 0x4
  3840                           
  3841  0074                     TmrBInit@Prescaler:	
  3842                           ; 1 bytes @ 0x4
  3843                           
  3844  0074                     Tmr_TmrBIrqSet@TmrIrqSts:	
  3845                           ; 1 bytes @ 0x4
  3846                           
  3847  0074                     Tmr_StartTmr@TmrNumb:	
  3848                           ; 1 bytes @ 0x4
  3849                           
  3850  0074                     ReceiveEvt@EventStatus:	
  3851                           ; 1 bytes @ 0x4
  3852                           
  3853  0074                     Led_SetLedStatus@LedSts:	
  3854                           ; 1 bytes @ 0x4
  3855                           
  3856  0074                     Led_SetLedBlinkTime@Led:	
  3857                           ; 1 bytes @ 0x4
  3858                           
  3859  0074                     StringCopy@Index:	
  3860                           ; 1 bytes @ 0x4
  3861                           
  3862  0074                     SetOutChSts@Sts:	
  3863                           ; 1 bytes @ 0x4
  3864                           
  3865  0074                     Led_SetLedPulseTime@PulseTimeMs:	
  3866                           ; 1 bytes @ 0x4
  3867                           
  3868  0074                     ___wmul@product:	
  3869                           ; 2 bytes @ 0x4
  3870                           
  3871                           
  3872                           ; 2 bytes @ 0x4
  3873  0074                     	ds	1
  3874  0075                     ??_Led_SetLedStatus:	
  3875  0075                     ??_Tmr_TmrBIrqSet:	
  3876                           ; 1 bytes @ 0x5
  3877                           
  3878  0075                     ??_LowPowerMode:	
  3879                           ; 1 bytes @ 0x5
  3880                           
  3881  0075                     ??_SetOutChSts:	
  3882                           ; 1 bytes @ 0x5
  3883                           
  3884  0075                     ClearRxBuffer@Index:	
  3885                           ; 1 bytes @ 0x5
  3886                           
  3887  0075                     ClearTxBuffer@Index:	
  3888                           ; 1 bytes @ 0x5
  3889                           
  3890  0075                     Mcu_SetWdgPeriod@WdgPeriod:	
  3891                           ; 1 bytes @ 0x5
  3892                           
  3893  0075                     Adc_SelectChannel@SelCh:	
  3894                           ; 1 bytes @ 0x5
  3895                           
  3896  0075                     TmrBInit@Postscaler:	
  3897                           ; 1 bytes @ 0x5
  3898                           
  3899  0075                     Tmr_TmrBIrqSet@TmrNumb:	
  3900                           ; 1 bytes @ 0x5
  3901                           
  3902  0075                     LedBlinkStateMachine@LedBlink:	
  3903                           ; 1 bytes @ 0x5
  3904                           
  3905  0075                     ReceiveEvt@Event:	
  3906                           ; 1 bytes @ 0x5
  3907                           
  3908  0075                     SetOutChSts@Ch:	
  3909                           ; 1 bytes @ 0x5
  3910                           
  3911  0075                     ___lwmod@counter:	
  3912                           ; 1 bytes @ 0x5
  3913                           
  3914                           
  3915                           ; 1 bytes @ 0x5
  3916  0075                     	ds	1
  3917  0076                     ??_SystemInit:	
  3918  0076                     ??_MainScheduler:	
  3919                           ; 1 bytes @ 0x6
  3920                           
  3921  0076                     ??_I2cSlv_MainTask:	
  3922                           ; 1 bytes @ 0x6
  3923                           
  3924  0076                     ??_Wdg_MainTask:	
  3925                           ; 1 bytes @ 0x6
  3926                           
  3927  0076                     ??_main:	
  3928                           ; 1 bytes @ 0x6
  3929                           
  3930  0076                     ??_Led_SetLedPulseTime:	
  3931                           ; 1 bytes @ 0x6
  3932                           
  3933  0076                     ??_ControlLedDirect:	
  3934                           ; 1 bytes @ 0x6
  3935                           
  3936  0076                     ??_GetDieTemperature:	
  3937                           ; 1 bytes @ 0x6
  3938                           
  3939  0076                     ??___lmul:	
  3940                           ; 1 bytes @ 0x6
  3941                           
  3942                           
  3943                           	psect	cstackBANK0
  3944  0020                     __pcstackBANK0:	
  3945                           ; 1 bytes @ 0x6
  3946                           
  3947  0020                     ??_I2c_InitI2cModule:	
  3948  0020                     ??_I2c_UpdateTxBuffer:	
  3949                           ; 1 bytes @ 0x0
  3950                           
  3951  0020                     ??_Adc_GetConvResult:	
  3952                           ; 1 bytes @ 0x0
  3953                           
  3954  0020                     ??_TmrBInit:	
  3955                           ; 1 bytes @ 0x0
  3956                           
  3957  0020                     ?_Led_SetLedBlinkTime:	
  3958                           ; 1 bytes @ 0x0
  3959                           
  3960  0020                     ?_StringCopy:	
  3961                           ; 1 bytes @ 0x0
  3962                           
  3963  0020                     ??_UpdateRelaysSts:	
  3964                           ; 1 bytes @ 0x0
  3965                           
  3966  0020                     ??_GenerateImpulse:	
  3967                           ; 1 bytes @ 0x0
  3968                           
  3969  0020                     ?___wmul:	
  3970                           ; 1 bytes @ 0x0
  3971                           
  3972  0020                     ?___lwdiv:	
  3973                           ; 2 bytes @ 0x0
  3974                           
  3975  0020                     ?___lwmod:	
  3976                           ; 2 bytes @ 0x0
  3977                           
  3978  0020                     ?___lldiv:	
  3979                           ; 2 bytes @ 0x0
  3980                           
  3981  0020                     GenerateEvt@EventStatus:	
  3982                           ; 4 bytes @ 0x0
  3983                           
  3984  0020                     Led_SetLedStatus@Led:	
  3985                           ; 1 bytes @ 0x0
  3986                           
  3987  0020                     Led_SetLedPulseTime@Led:	
  3988                           ; 1 bytes @ 0x0
  3989                           
  3990  0020                     Led_SetLedBlinkTime@OnTimeMs:	
  3991                           ; 1 bytes @ 0x0
  3992                           
  3993  0020                     StringCopy@SourceStr:	
  3994                           ; 2 bytes @ 0x0
  3995                           
  3996  0020                     ___wmul@multiplier:	
  3997                           ; 2 bytes @ 0x0
  3998                           
  3999  0020                     ___lwdiv@divisor:	
  4000                           ; 2 bytes @ 0x0
  4001                           
  4002  0020                     ___lwmod@divisor:	
  4003                           ; 2 bytes @ 0x0
  4004                           
  4005  0020                     ___lldiv@divisor:	
  4006                           ; 2 bytes @ 0x0
  4007                           
  4008                           
  4009                           ; 4 bytes @ 0x0
  4010  0020                     	ds	1
  4011  0021                     ??_Led_InitSeq:	
  4012  0021                     TmrBInit@TmrNumb:	
  4013                           ; 1 bytes @ 0x1
  4014                           
  4015  0021                     GenerateEvt@Event:	
  4016                           ; 1 bytes @ 0x1
  4017                           
  4018  0021                     Adc_GetConvResult@AdcResult:	
  4019                           ; 1 bytes @ 0x1
  4020                           
  4021                           
  4022                           ; 2 bytes @ 0x1
  4023  0021                     	ds	1
  4024  0022                     I2c_InitI2cModule@I2cConfig:	
  4025  0022                     I2c_UpdateTxBuffer@DataBuffer:	
  4026                           ; 1 bytes @ 0x2
  4027                           
  4028  0022                     StringCopy@DestStr:	
  4029                           ; 1 bytes @ 0x2
  4030                           
  4031  0022                     Led_SetLedBlinkTime@OffTimeMs:	
  4032                           ; 1 bytes @ 0x2
  4033                           
  4034  0022                     ___wmul@multiplicand:	
  4035                           ; 2 bytes @ 0x2
  4036                           
  4037  0022                     ___lwdiv@dividend:	
  4038                           ; 2 bytes @ 0x2
  4039                           
  4040  0022                     ___lwmod@dividend:	
  4041                           ; 2 bytes @ 0x2
  4042                           
  4043                           
  4044                           ; 2 bytes @ 0x2
  4045  0022                     	ds	1
  4046  0023                     ?_GetDieTemperature:	
  4047  0023                     I2c_UpdateTxBuffer@Index:	
  4048                           ; 2 bytes @ 0x3
  4049                           
  4050  0023                     StringCopy@Len:	
  4051                           ; 1 bytes @ 0x3
  4052                           
  4053                           
  4054                           ; 1 bytes @ 0x3
  4055  0023                     	ds	1
  4056  0024                     ??_I2cSlv_I2cDrvHandle:	
  4057  0024                     ??_SetLedBehavSts:	
  4058                           ; 1 bytes @ 0x4
  4059                           
  4060  0024                     ??_StringCopy:	
  4061                           ; 1 bytes @ 0x4
  4062                           
  4063  0024                     ?___lmul:	
  4064                           ; 1 bytes @ 0x4
  4065                           
  4066  0024                     GenerateImpulse@Impulse:	
  4067                           ; 4 bytes @ 0x4
  4068                           
  4069  0024                     ___lwdiv@counter:	
  4070                           ; 1 bytes @ 0x4
  4071                           
  4072  0024                     ___lmul@multiplier:	
  4073                           ; 1 bytes @ 0x4
  4074                           
  4075  0024                     ___lldiv@dividend:	
  4076                           ; 4 bytes @ 0x4
  4077                           
  4078                           
  4079                           ; 4 bytes @ 0x4
  4080  0024                     	ds	1
  4081  0025                     SetLedBehavSts@LedBehav:	
  4082  0025                     GetDieTemperature@DieTempRes:	
  4083                           ; 1 bytes @ 0x5
  4084                           
  4085  0025                     ___lwdiv@quotient:	
  4086                           ; 2 bytes @ 0x5
  4087                           
  4088                           
  4089                           ; 2 bytes @ 0x5
  4090  0025                     	ds	2
  4091  0027                     ?_utoa:	
  4092  0027                     ??_LedBlinkStateMachine:	
  4093                           ; 1 bytes @ 0x7
  4094                           
  4095  0027                     ?_LedPulseStateMachine:	
  4096                           ; 1 bytes @ 0x7
  4097                           
  4098  0027                     LedPulseStateMachine@Led:	
  4099                           ; 1 bytes @ 0x7
  4100                           
  4101  0027                     utoa@val:	
  4102                           ; 1 bytes @ 0x7
  4103                           
  4104                           
  4105                           ; 2 bytes @ 0x7
  4106  0027                     	ds	1
  4107  0028                     ??_LedPulseStateMachine:	
  4108  0028                     ___lmul@multiplicand:	
  4109                           ; 1 bytes @ 0x8
  4110                           
  4111  0028                     ___lldiv@quotient:	
  4112                           ; 4 bytes @ 0x8
  4113                           
  4114                           
  4115                           ; 4 bytes @ 0x8
  4116  0028                     	ds	1
  4117  0029                     I2cSlv_I2cDrvHandle@Index:	
  4118  0029                     utoa@base:	
  4119                           ; 1 bytes @ 0x9
  4120                           
  4121                           
  4122                           ; 2 bytes @ 0x9
  4123  0029                     	ds	1
  4124  002A                     LedPulseStateMachine@LedPulse:	
  4125                           
  4126                           ; 1 bytes @ 0xA
  4127  002A                     	ds	1
  4128  002B                     ??_utoa:	
  4129  002B                     ?_LedStateMachine:	
  4130                           ; 1 bytes @ 0xB
  4131                           
  4132  002B                     LedStateMachine@LedSts:	
  4133                           ; 1 bytes @ 0xB
  4134                           
  4135                           
  4136                           ; 1 bytes @ 0xB
  4137  002B                     	ds	1
  4138  002C                     LedStateMachine@LedBlink:	
  4139  002C                     ___lldiv@counter:	
  4140                           ; 1 bytes @ 0xC
  4141                           
  4142  002C                     utoa@v:	
  4143                           ; 1 bytes @ 0xC
  4144                           
  4145  002C                     ___lmul@product:	
  4146                           ; 2 bytes @ 0xC
  4147                           
  4148                           
  4149                           ; 4 bytes @ 0xC
  4150  002C                     	ds	1
  4151  002D                     LedStateMachine@LedPulse:	
  4152                           
  4153                           ; 1 bytes @ 0xD
  4154  002D                     	ds	1
  4155  002E                     ??_LedStateMachine:	
  4156  002E                     utoa@c:	
  4157                           ; 1 bytes @ 0xE
  4158                           
  4159                           
  4160                           ; 1 bytes @ 0xE
  4161  002E                     	ds	1
  4162  002F                     utoa@buf:	
  4163                           
  4164                           ; 1 bytes @ 0xF
  4165  002F                     	ds	1
  4166  0030                     ?_Tmr_TmrBPrSet:	
  4167  0030                     ??_StdS_ManageStdServices:	
  4168                           ; 1 bytes @ 0x10
  4169                           
  4170  0030                     LedStateMachine@Led:	
  4171                           ; 1 bytes @ 0x10
  4172                           
  4173  0030                     Tmr_TmrBPrSet@IntFreqHz:	
  4174                           ; 1 bytes @ 0x10
  4175                           
  4176                           
  4177                           ; 2 bytes @ 0x10
  4178  0030                     	ds	1
  4179  0031                     LedStateMachine@LedOutSts:	
  4180                           
  4181                           ; 1 bytes @ 0x11
  4182  0031                     	ds	1
  4183  0032                     Tmr_TmrBPrSet@Prescaler:	
  4184  0032                     StdS_ManageStdServices@DieTempStr:	
  4185                           ; 1 bytes @ 0x12
  4186                           
  4187                           
  4188                           ; 4 bytes @ 0x12
  4189  0032                     	ds	1
  4190  0033                     Tmr_TmrBPrSet@Postscaler:	
  4191                           
  4192                           ; 1 bytes @ 0x13
  4193  0033                     	ds	1
  4194  0034                     ??_Tmr_TmrBPrSet:	
  4195                           
  4196                           ; 1 bytes @ 0x14
  4197  0034                     	ds	2
  4198  0036                     StdS_ManageStdServices@DieTemp:	
  4199                           
  4200                           ; 2 bytes @ 0x16
  4201  0036                     	ds	2
  4202  0038                     ??_ManageProtocol:	
  4203                           
  4204                           ; 1 bytes @ 0x18
  4205  0038                     	ds	3
  4206  003B                     ??_AppSm:	
  4207                           
  4208                           ; 1 bytes @ 0x1B
  4209  003B                     	ds	1
  4210  003C                     ?_I2cSlv_MainTask:	
  4211  003C                     ?_Wdg_MainTask:	
  4212                           ; 1 bytes @ 0x1C
  4213                           
  4214  003C                     ?_Led_MainTask:	
  4215                           ; 1 bytes @ 0x1C
  4216                           
  4217  003C                     ?_App_MainTask:	
  4218                           ; 1 bytes @ 0x1C
  4219                           
  4220  003C                     ?_I2c_DataReceiveSm:	
  4221                           ; 1 bytes @ 0x1C
  4222                           
  4223  003C                     I2c_DataReceiveSm@Options:	
  4224                           ; 1 bytes @ 0x1C
  4225                           
  4226  003C                     Tmr_TmrBPrSet@TmrNumb:	
  4227                           ; 1 bytes @ 0x1C
  4228                           
  4229  003C                     I2cSlv_MainTask@Options:	
  4230                           ; 1 bytes @ 0x1C
  4231                           
  4232  003C                     Led_MainTask@Options:	
  4233                           ; 1 bytes @ 0x1C
  4234                           
  4235  003C                     Wdg_MainTask@Options:	
  4236                           ; 1 bytes @ 0x1C
  4237                           
  4238  003C                     App_MainTask@Options:	
  4239                           ; 1 bytes @ 0x1C
  4240                           
  4241                           
  4242                           ; 1 bytes @ 0x1C
  4243  003C                     	ds	1
  4244  003D                     ??_Led_MainTask:	
  4245  003D                     ??_App_MainTask:	
  4246                           ; 1 bytes @ 0x1D
  4247                           
  4248  003D                     ??_I2c_DataReceiveSm:	
  4249                           ; 1 bytes @ 0x1D
  4250                           
  4251  003D                     Tmr_TmrBPrSet@TmrBPrCfgSts:	
  4252                           ; 1 bytes @ 0x1D
  4253                           
  4254                           
  4255                           ; 1 bytes @ 0x1D
  4256  003D                     	ds	1
  4257  003E                     Tmr_TmrBPrSet@Divisor:	
  4258  003E                     App_MainTask@AnalogChSel:	
  4259                           ; 4 bytes @ 0x1E
  4260                           
  4261                           
  4262                           ; 8 bytes @ 0x1E
  4263  003E                     	ds	4
  4264  0042                     ?_Tmr_TmrBConfig:	
  4265  0042                     Tmr_TmrBConfig@TmrBConfig:	
  4266                           ; 1 bytes @ 0x22
  4267                           
  4268                           
  4269                           ; 1 bytes @ 0x22
  4270  0042                     	ds	1
  4271  0043                     ??_Tmr_TmrBConfig:	
  4272                           
  4273                           ; 1 bytes @ 0x23
  4274  0043                     	ds	1
  4275  0044                     I2c_DataReceiveSm@Index:	
  4276  0044                     Tmr_TmrBConfig@TmrNumb:	
  4277                           ; 1 bytes @ 0x24
  4278                           
  4279                           
  4280                           ; 1 bytes @ 0x24
  4281  0044                     	ds	1
  4282  0045                     ??_InitSchTimer:	
  4283                           
  4284                           ; 1 bytes @ 0x25
  4285  0045                     	ds	1
  4286  0046                     InitSchTimer@TmrBConfig:	
  4287  0046                     App_MainTask@WpuCh:	
  4288                           ; 6 bytes @ 0x26
  4289                           
  4290                           
  4291                           ; 12 bytes @ 0x26
  4292  0046                     	ds	12
  4293  0052                     App_MainTask@AdcConfig:	
  4294                           
  4295                           ; 6 bytes @ 0x32
  4296  0052                     	ds	6
  4297  0058                     ??_InitializeTasks:	
  4298  0058                     ??_ScheduleTasks:	
  4299                           ; 1 bytes @ 0x38
  4300                           
  4301                           
  4302                           ; 1 bytes @ 0x38
  4303  0058                     	ds	4
  4304  005C                     InitializeTasks@ActiveTaskIndex:	
  4305                           
  4306                           ; 1 bytes @ 0x3C
  4307  005C                     	ds	2
  4308  005E                     ScheduleTasks@ActiveTaskIndex:	
  4309                           
  4310                           ; 1 bytes @ 0x3E
  4311  005E                     	ds	1
  4312                           
  4313                           	psect	maintext
  4314  08C7                     __pmaintext:	
  4315 ;;
  4316 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  4317 ;;
  4318 ;; *************** function _main *****************
  4319 ;; Defined at:
  4320 ;;		line 57 in file "../../../Framework/MercuryFwk/Source/c/00_Main/main.c"
  4321 ;; Parameters:    Size  Location     Type
  4322 ;;		None
  4323 ;; Auto vars:     Size  Location     Type
  4324 ;;		None
  4325 ;; Return value:  Size  Location     Type
  4326 ;;                  2   14[None  ] short 
  4327 ;; Registers used:
  4328 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4329 ;; Tracked objects:
  4330 ;;		On entry : B1F/0
  4331 ;;		On exit  : 0/0
  4332 ;;		Unchanged: 0/0
  4333 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4334 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4335 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4336 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4337 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4338 ;;Total ram usage:        0 bytes
  4339 ;; Hardware stack levels required when called:   10
  4340 ;; This function calls:
  4341 ;;		_MainScheduler
  4342 ;;		_SystemInit
  4343 ;; This function is called by:
  4344 ;;		Startup code after reset
  4345 ;; This function uses a non-reentrant model
  4346 ;;
  4347                           
  4348                           
  4349                           ;psect for function _main
  4350  08C7                     _main:	
  4351                           
  4352                           ;main.c: 60: SystemInit();
  4353                           
  4354                           ;incstack = 0
  4355                           ; Regs used in _main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  4356  08C7  3188  20EE  3188   	fcall	_SystemInit
  4357                           
  4358                           ;main.c: 63: MainScheduler();
  4359  08CA  3189  21A0         	fcall	_MainScheduler
  4360                           
  4361                           ;main.c: 66: return 0;
  4362                           ;	Return value of _main is never used
  4363  08CC  3180  282B         	ljmp	start
  4364  08CE                     __end_of_main:	
  4365                           
  4366                           	psect	text1
  4367  08EE                     __ptext1:	
  4368 ;; *************** function _SystemInit *****************
  4369 ;; Defined at:
  4370 ;;		line 98 in file "../Source/c/04_App/sys_init.c"
  4371 ;; Parameters:    Size  Location     Type
  4372 ;;		None
  4373 ;; Auto vars:     Size  Location     Type
  4374 ;;		None
  4375 ;; Return value:  Size  Location     Type
  4376 ;;                  1    wreg      void 
  4377 ;; Registers used:
  4378 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4379 ;; Tracked objects:
  4380 ;;		On entry : 0/0
  4381 ;;		On exit  : 0/0
  4382 ;;		Unchanged: 0/0
  4383 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4384 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4385 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4386 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4387 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4388 ;;Total ram usage:        0 bytes
  4389 ;; Hardware stack levels used:    1
  4390 ;; Hardware stack levels required when called:    6
  4391 ;; This function calls:
  4392 ;;		_InitSchTimer
  4393 ;;		_Mcu_EnableInterrupts
  4394 ;;		_Mcu_InitIntOsc
  4395 ;; This function is called by:
  4396 ;;		_main
  4397 ;; This function uses a non-reentrant model
  4398 ;;
  4399                           
  4400                           
  4401                           ;psect for function _SystemInit
  4402  08EE                     _SystemInit:	
  4403                           
  4404                           ;sys_init.c: 101: Mcu_InitIntOsc();
  4405                           
  4406                           ;incstack = 0
  4407                           ; Regs used in _SystemInit: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  4408  08EE  3188  20C0  3188   	fcall	_Mcu_InitIntOsc
  4409                           
  4410                           ;sys_init.c: 103: InitSchTimer();
  4411  08F1  318A  221D  3188   	fcall	_InitSchTimer
  4412                           
  4413                           ;sys_init.c: 105: Mcu_EnableInterrupts();
  4414  08F4  3188  20B4         	fcall	_Mcu_EnableInterrupts
  4415  08F6  0008               	return
  4416  08F7                     __end_of_SystemInit:	
  4417                           
  4418                           	psect	text2
  4419  08C0                     __ptext2:	
  4420 ;; *************** function _Mcu_InitIntOsc *****************
  4421 ;; Defined at:
  4422 ;;		line 79 in file "../../../Framework/MercuryFwk/Source/c/01_Hal/02_Drv/mcu_drv.c"
  4423 ;; Parameters:    Size  Location     Type
  4424 ;;		None
  4425 ;; Auto vars:     Size  Location     Type
  4426 ;;		None
  4427 ;; Return value:  Size  Location     Type
  4428 ;;                  1    wreg      void 
  4429 ;; Registers used:
  4430 ;;		wreg, status,2, status,0
  4431 ;; Tracked objects:
  4432 ;;		On entry : 0/0
  4433 ;;		On exit  : 0/0
  4434 ;;		Unchanged: 0/0
  4435 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4436 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4437 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4438 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4439 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4440 ;;Total ram usage:        0 bytes
  4441 ;; Hardware stack levels used:    1
  4442 ;; Hardware stack levels required when called:    2
  4443 ;; This function calls:
  4444 ;;		Nothing
  4445 ;; This function is called by:
  4446 ;;		_SystemInit
  4447 ;; This function uses a non-reentrant model
  4448 ;;
  4449                           
  4450                           
  4451                           ;psect for function _Mcu_InitIntOsc
  4452  08C0                     _Mcu_InitIntOsc:	
  4453                           
  4454                           ;mcu_drv.c: 82: OSCCONbits.SCS1 = ((UINT8)(1));
  4455                           
  4456                           ;incstack = 0
  4457                           ; Regs used in _Mcu_InitIntOsc: [wreg+status,2+status,0]
  4458  08C0  0021               	movlb	1	; select bank1
  4459  08C1  1499               	bsf	25,1	;volatile
  4460                           
  4461                           ;mcu_drv.c: 84: OSCCONbits.IRCF = 0b1111;
  4462  08C2  3078               	movlw	120
  4463  08C3  0499               	iorwf	25,f	;volatile
  4464  08C4                     l169:	
  4465                           ;mcu_drv.c: 86: while (OSCSTATbits.HFIOFS == 0);
  4466                           
  4467  08C4  181A               	btfsc	26,0	;volatile
  4468  08C5  0008               	return
  4469  08C6  28C4               	goto	l169
  4470  08C7                     __end_of_Mcu_InitIntOsc:	
  4471                           
  4472                           	psect	text3
  4473  08B4                     __ptext3:	
  4474 ;; *************** function _Mcu_EnableInterrupts *****************
  4475 ;; Defined at:
  4476 ;;		line 97 in file "../../../Framework/MercuryFwk/Source/c/01_Hal/02_Drv/mcu_drv.c"
  4477 ;; Parameters:    Size  Location     Type
  4478 ;;		None
  4479 ;; Auto vars:     Size  Location     Type
  4480 ;;		None
  4481 ;; Return value:  Size  Location     Type
  4482 ;;                  1    wreg      void 
  4483 ;; Registers used:
  4484 ;;		None
  4485 ;; Tracked objects:
  4486 ;;		On entry : 0/0
  4487 ;;		On exit  : 0/0
  4488 ;;		Unchanged: 0/0
  4489 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4490 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4491 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4492 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4493 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4494 ;;Total ram usage:        0 bytes
  4495 ;; Hardware stack levels used:    1
  4496 ;; Hardware stack levels required when called:    2
  4497 ;; This function calls:
  4498 ;;		Nothing
  4499 ;; This function is called by:
  4500 ;;		_SystemInit
  4501 ;; This function uses a non-reentrant model
  4502 ;;
  4503                           
  4504                           
  4505                           ;psect for function _Mcu_EnableInterrupts
  4506  08B4                     _Mcu_EnableInterrupts:	
  4507                           
  4508                           ;mcu_drv.c: 100: INTCONbits.GIE = ((UINT8)(1));
  4509                           
  4510                           ;incstack = 0
  4511                           ; Regs used in _Mcu_EnableInterrupts: []
  4512  08B4  178B               	bsf	11,7	;volatile
  4513                           
  4514                           ;mcu_drv.c: 101: INTCONbits.PEIE = ((UINT8)(1));
  4515  08B5  170B               	bsf	11,6	;volatile
  4516  08B6  0008               	return
  4517  08B7                     __end_of_Mcu_EnableInterrupts:	
  4518                           
  4519                           	psect	text4
  4520  0A1D                     __ptext4:	
  4521 ;; *************** function _InitSchTimer *****************
  4522 ;; Defined at:
  4523 ;;		line 71 in file "../Source/c/04_App/sys_init.c"
  4524 ;; Parameters:    Size  Location     Type
  4525 ;;		None
  4526 ;; Auto vars:     Size  Location     Type
  4527 ;;  TmrBConfig      6   38[BANK0 ] struct _TmrBConfigType
  4528 ;; Return value:  Size  Location     Type
  4529 ;;                  1    wreg      void 
  4530 ;; Registers used:
  4531 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4532 ;; Tracked objects:
  4533 ;;		On entry : 0/0
  4534 ;;		On exit  : 0/0
  4535 ;;		Unchanged: 0/0
  4536 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4537 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4538 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4539 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4540 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4541 ;;Total ram usage:        7 bytes
  4542 ;; Hardware stack levels used:    1
  4543 ;; Hardware stack levels required when called:    5
  4544 ;; This function calls:
  4545 ;;		_Tmr_TmrBConfig
  4546 ;; This function is called by:
  4547 ;;		_SystemInit
  4548 ;; This function uses a non-reentrant model
  4549 ;;
  4550                           
  4551                           
  4552                           ;psect for function _InitSchTimer
  4553  0A1D                     _InitSchTimer:	
  4554                           
  4555                           ;sys_init.c: 73: TmrBConfigType TmrBConfig;
  4556                           ;sys_init.c: 76: TmrBConfig.PreScaler = 1;
  4557                           
  4558                           ;incstack = 0
  4559                           ; Regs used in _InitSchTimer: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  4560  0A1D  0020               	movlb	0	; select bank0
  4561  0A1E  01C6               	clrf	InitSchTimer@TmrBConfig
  4562  0A1F  0AC6               	incf	InitSchTimer@TmrBConfig,f
  4563                           
  4564                           ;sys_init.c: 77: TmrBConfig.PostScaler = 8;
  4565  0A20  3008               	movlw	8
  4566  0A21  00C5               	movwf	??_InitSchTimer
  4567  0A22  0845               	movf	??_InitSchTimer,w
  4568  0A23  00C7               	movwf	InitSchTimer@TmrBConfig+1
  4569                           
  4570                           ;sys_init.c: 78: TmrBConfig.IntEnable = 1u;
  4571  0A24  01C8               	clrf	InitSchTimer@TmrBConfig+2
  4572  0A25  0AC8               	incf	InitSchTimer@TmrBConfig+2,f
  4573                           
  4574                           ;sys_init.c: 79: TmrBConfig.IntFreqHz = 10000;
  4575  0A26  3010               	movlw	16
  4576  0A27  00C9               	movwf	InitSchTimer@TmrBConfig+3
  4577  0A28  3027               	movlw	39
  4578  0A29  00CA               	movwf	InitSchTimer@TmrBConfig+4
  4579                           
  4580                           ;sys_init.c: 80: TmrBConfig.StartTmrRequest = StartTmrReq;
  4581  0A2A  01CB               	clrf	InitSchTimer@TmrBConfig+5
  4582  0A2B  0ACB               	incf	InitSchTimer@TmrBConfig+5,f
  4583                           
  4584                           ;sys_init.c: 83: Tmr_TmrBConfig(((UINT8)(2)),&TmrBConfig);
  4585  0A2C  3046               	movlw	(low (InitSchTimer@TmrBConfig| 0))& (0+255)
  4586  0A2D  00C5               	movwf	??_InitSchTimer
  4587  0A2E  0845               	movf	??_InitSchTimer,w
  4588  0A2F  00C2               	movwf	Tmr_TmrBConfig@TmrBConfig
  4589  0A30  3002               	movlw	2
  4590  0A31  318D  25DA         	fcall	_Tmr_TmrBConfig
  4591  0A33  0008               	return
  4592  0A34                     __end_of_InitSchTimer:	
  4593                           
  4594                           	psect	text5
  4595  0DDA                     __ptext5:	
  4596 ;; *************** function _Tmr_TmrBConfig *****************
  4597 ;; Defined at:
  4598 ;;		line 313 in file "../../../Framework/MercuryFwk/Source/c/01_Hal/02_Drv/tmr_drv.c"
  4599 ;; Parameters:    Size  Location     Type
  4600 ;;  TmrNumb         1    wreg     unsigned char 
  4601 ;;  TmrBConfig      1   34[BANK0 ] PTR struct _TmrBConfigTy
  4602 ;;		 -> InitSchTimer@TmrBConfig(6), 
  4603 ;; Auto vars:     Size  Location     Type
  4604 ;;  TmrNumb         1   36[BANK0 ] unsigned char 
  4605 ;; Return value:  Size  Location     Type
  4606 ;;                  1    wreg      void 
  4607 ;; Registers used:
  4608 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4609 ;; Tracked objects:
  4610 ;;		On entry : 0/0
  4611 ;;		On exit  : 0/0
  4612 ;;		Unchanged: 0/0
  4613 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4614 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4615 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4616 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4617 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4618 ;;Total ram usage:        3 bytes
  4619 ;; Hardware stack levels used:    1
  4620 ;; Hardware stack levels required when called:    4
  4621 ;; This function calls:
  4622 ;;		_TmrBInit
  4623 ;;		_Tmr_StartTmr
  4624 ;;		_Tmr_TmrBIrqSet
  4625 ;;		_Tmr_TmrBPrSet
  4626 ;; This function is called by:
  4627 ;;		_InitSchTimer
  4628 ;; This function uses a non-reentrant model
  4629 ;;
  4630                           
  4631                           
  4632                           ;psect for function _Tmr_TmrBConfig
  4633  0DDA                     _Tmr_TmrBConfig:	
  4634                           
  4635                           ;incstack = 0
  4636                           ; Regs used in _Tmr_TmrBConfig: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  4637                           ;Tmr_TmrBConfig@TmrNumb stored from wreg
  4638  0DDA  0020               	movlb	0	; select bank0
  4639  0DDB  00C4               	movwf	Tmr_TmrBConfig@TmrNumb
  4640                           
  4641                           ;tmr_drv.c: 316: TmrBInit(TmrNumb,TmrBConfig->PreScaler,TmrBConfig->PostScaler);
  4642  0DDC  0842               	movf	Tmr_TmrBConfig@TmrBConfig,w
  4643  0DDD  0086               	movwf	6
  4644  0DDE  0187               	clrf	7
  4645  0DDF  0801               	movf	1,w
  4646  0DE0  00C3               	movwf	??_Tmr_TmrBConfig
  4647  0DE1  0843               	movf	??_Tmr_TmrBConfig,w
  4648  0DE2  00F4               	movwf	TmrBInit@Prescaler
  4649  0DE3  0842               	movf	Tmr_TmrBConfig@TmrBConfig,w
  4650  0DE4  0086               	movwf	6
  4651  0DE5  0187               	clrf	7
  4652  0DE6  3F41               	moviw [1]fsr1
  4653  0DE7  00F5               	movwf	TmrBInit@Postscaler
  4654  0DE8  0844               	movf	Tmr_TmrBConfig@TmrNumb,w
  4655  0DE9  3186  26CF  318D   	fcall	_TmrBInit
  4656                           
  4657                           ;tmr_drv.c: 318: if (TmrBConfig->IntEnable == EnableInt)
  4658  0DEC  0020               	movlb	0	; select bank0
  4659  0DED  0842               	movf	Tmr_TmrBConfig@TmrBConfig,w
  4660  0DEE  3E02               	addlw	2
  4661  0DEF  0086               	movwf	6
  4662  0DF0  0187               	clrf	7
  4663  0DF1  0301               	decf	1,w
  4664  0DF2  1D03               	btfss	3,2
  4665  0DF3  2DF7               	goto	l4459
  4666                           
  4667                           ;tmr_drv.c: 319: {
  4668                           ;tmr_drv.c: 321: Tmr_TmrBIrqSet(TmrNumb,((UINT8)(1)));
  4669  0DF4  01F4               	clrf	Tmr_TmrBIrqSet@TmrIrqSts
  4670  0DF5  0AF4               	incf	Tmr_TmrBIrqSet@TmrIrqSts,f
  4671  0DF6  2DF9               	goto	L1
  4672  0DF7                     l4459:	
  4673                           ;tmr_drv.c: 322: }
  4674                           
  4675                           
  4676                           ;tmr_drv.c: 323: else
  4677                           ;tmr_drv.c: 324: {
  4678                           ;tmr_drv.c: 326: Tmr_TmrBIrqSet(TmrNumb,((UINT8)(0)));
  4679  0DF7  01F4               	clrf	Tmr_TmrBIrqSet@TmrIrqSts
  4680  0DF8  0020               	movlb	0	; select bank0
  4681  0DF9                     L1:	
  4682  0DF9  0844               	movf	Tmr_TmrBConfig@TmrNumb,w
  4683  0DFA  318B  238C  318D   	fcall	_Tmr_TmrBIrqSet
  4684                           
  4685                           ;tmr_drv.c: 327: }
  4686                           ;tmr_drv.c: 329: if (Tmr_TmrBPrSet(TmrNumb,TmrBConfig->IntFreqHz,TmrBConfig->PreScaler,T
      +                          mrBConfig->PostScaler) == CfgError)
  4687  0DFD  0020               	movlb	0	; select bank0
  4688  0DFE  0842               	movf	Tmr_TmrBConfig@TmrBConfig,w
  4689  0DFF  3E03               	addlw	3
  4690  0E00  0086               	movwf	6
  4691  0E01  0187               	clrf	7
  4692  0E02  3F40               	moviw [0]fsr1
  4693  0E03  00B0               	movwf	Tmr_TmrBPrSet@IntFreqHz
  4694  0E04  3F41               	moviw [1]fsr1
  4695  0E05  00B1               	movwf	Tmr_TmrBPrSet@IntFreqHz+1
  4696  0E06  0842               	movf	Tmr_TmrBConfig@TmrBConfig,w
  4697  0E07  0086               	movwf	6
  4698  0E08  0187               	clrf	7
  4699  0E09  0801               	movf	1,w
  4700  0E0A  00C3               	movwf	??_Tmr_TmrBConfig
  4701  0E0B  0843               	movf	??_Tmr_TmrBConfig,w
  4702  0E0C  00B2               	movwf	Tmr_TmrBPrSet@Prescaler
  4703  0E0D  0842               	movf	Tmr_TmrBConfig@TmrBConfig,w
  4704  0E0E  0086               	movwf	6
  4705  0E0F  0187               	clrf	7
  4706  0E10  3F41               	moviw [1]fsr1
  4707  0E11  00B3               	movwf	Tmr_TmrBPrSet@Postscaler
  4708  0E12  0844               	movf	Tmr_TmrBConfig@TmrNumb,w
  4709  0E13  3182  2294  318D   	fcall	_Tmr_TmrBPrSet
  4710  0E16  3A01               	xorlw	1
  4711  0E17  1903               	btfsc	3,2
  4712  0E18                     l336:	
  4713                           ;tmr_drv.c: 330: {
  4714                           ;tmr_drv.c: 332: while(1);
  4715                           
  4716  0E18  2E18               	goto	l336
  4717                           
  4718                           ;tmr_drv.c: 333: }
  4719                           ;tmr_drv.c: 335: if (TmrBConfig->StartTmrRequest == StartTmrReq)
  4720  0E19  0020               	movlb	0	; select bank0
  4721  0E1A  0842               	movf	Tmr_TmrBConfig@TmrBConfig,w
  4722  0E1B  3E05               	addlw	5
  4723  0E1C  0086               	movwf	6
  4724  0E1D  0187               	clrf	7
  4725  0E1E  0301               	decf	1,w
  4726  0E1F  1D03               	btfss	3,2
  4727  0E20  0008               	return
  4728                           
  4729                           ;tmr_drv.c: 336: {
  4730                           ;tmr_drv.c: 338: Tmr_StartTmr(TmrNumb);
  4731  0E21  0844               	movf	Tmr_TmrBConfig@TmrNumb,w
  4732  0E22  318A  2206         	fcall	_Tmr_StartTmr
  4733                           
  4734                           ;tmr_drv.c: 339: }
  4735  0E24  0008               	return
  4736  0E25                     __end_of_Tmr_TmrBConfig:	
  4737                           ;tmr_drv.c: 340: else
  4738                           ;tmr_drv.c: 341: {
  4739                           
  4740                           
  4741                           	psect	text6
  4742  0294                     __ptext6:	
  4743 ;; *************** function _Tmr_TmrBPrSet *****************
  4744 ;; Defined at:
  4745 ;;		line 225 in file "../../../Framework/MercuryFwk/Source/c/01_Hal/02_Drv/tmr_drv.c"
  4746 ;; Parameters:    Size  Location     Type
  4747 ;;  TmrNumb         1    wreg     unsigned char 
  4748 ;;  IntFreqHz       2   16[BANK0 ] unsigned short 
  4749 ;;  Prescaler       1   18[BANK0 ] unsigned char 
  4750 ;;  Postscaler      1   19[BANK0 ] unsigned char 
  4751 ;; Auto vars:     Size  Location     Type
  4752 ;;  TmrNumb         1   28[BANK0 ] unsigned char 
  4753 ;;  Divisor         4   30[BANK0 ] unsigned long 
  4754 ;;  TmrBPrCfgSts    1   29[BANK0 ] enum E3374
  4755 ;; Return value:  Size  Location     Type
  4756 ;;                  1    wreg      enum E3374
  4757 ;; Registers used:
  4758 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  4759 ;; Tracked objects:
  4760 ;;		On entry : 0/0
  4761 ;;		On exit  : 0/0
  4762 ;;		Unchanged: 0/0
  4763 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4764 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4765 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4766 ;;      Temps:          0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4767 ;;      Totals:         0      18       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4768 ;;Total ram usage:       18 bytes
  4769 ;; Hardware stack levels used:    1
  4770 ;; Hardware stack levels required when called:    3
  4771 ;; This function calls:
  4772 ;;		___lldiv
  4773 ;;		___lmul
  4774 ;;		___wmul
  4775 ;; This function is called by:
  4776 ;;		_Tmr_TmrBConfig
  4777 ;; This function uses a non-reentrant model
  4778 ;;
  4779                           
  4780                           
  4781                           ;psect for function _Tmr_TmrBPrSet
  4782  0294                     _Tmr_TmrBPrSet:	
  4783                           
  4784                           ;incstack = 0
  4785                           ; Regs used in _Tmr_TmrBPrSet: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  4786                           ;Tmr_TmrBPrSet@TmrNumb stored from wreg
  4787  0294  0020               	movlb	0	; select bank0
  4788  0295  00BC               	movwf	Tmr_TmrBPrSet@TmrNumb
  4789                           
  4790                           ;tmr_drv.c: 227: CfgStsType TmrBPrCfgSts;
  4791                           ;tmr_drv.c: 228: UINT32 Divisor = 0;
  4792  0296  3000               	movlw	0
  4793  0297  00C1               	movwf	Tmr_TmrBPrSet@Divisor+3
  4794  0298  3000               	movlw	0
  4795  0299  00C0               	movwf	Tmr_TmrBPrSet@Divisor+2
  4796  029A  3000               	movlw	0
  4797  029B  00BF               	movwf	Tmr_TmrBPrSet@Divisor+1
  4798  029C  3000               	movlw	0
  4799  029D  00BE               	movwf	Tmr_TmrBPrSet@Divisor
  4800                           
  4801                           ;tmr_drv.c: 231: Divisor = (UINT32)Prescaler*(UINT32)Postscaler*(UINT32)IntFreqHz;
  4802  029E  0833               	movf	Tmr_TmrBPrSet@Postscaler,w
  4803  029F  00B4               	movwf	??_Tmr_TmrBPrSet
  4804  02A0  01B5               	clrf	??_Tmr_TmrBPrSet+1
  4805  02A1  0834               	movf	??_Tmr_TmrBPrSet,w
  4806  02A2  00A2               	movwf	___wmul@multiplicand
  4807  02A3  0835               	movf	??_Tmr_TmrBPrSet+1,w
  4808  02A4  00A3               	movwf	___wmul@multiplicand+1
  4809  02A5  0832               	movf	Tmr_TmrBPrSet@Prescaler,w
  4810  02A6  00B6               	movwf	??_Tmr_TmrBPrSet+2
  4811  02A7  01B7               	clrf	??_Tmr_TmrBPrSet+3
  4812  02A8  0836               	movf	??_Tmr_TmrBPrSet+2,w
  4813  02A9  00A0               	movwf	___wmul@multiplier
  4814  02AA  0837               	movf	??_Tmr_TmrBPrSet+3,w
  4815  02AB  00A1               	movwf	___wmul@multiplier+1
  4816  02AC  318A  227F  3182   	fcall	___wmul
  4817  02AF  0020               	movlb	0	; select bank0
  4818  02B0  0820               	movf	?___wmul,w
  4819  02B1  00B8               	movwf	??_Tmr_TmrBPrSet+4
  4820  02B2  0821               	movf	?___wmul+1,w
  4821  02B3  00B9               	movwf	??_Tmr_TmrBPrSet+5
  4822  02B4  01BA               	clrf	??_Tmr_TmrBPrSet+6
  4823  02B5  01BB               	clrf	??_Tmr_TmrBPrSet+7
  4824  02B6  083B               	movf	??_Tmr_TmrBPrSet+7,w
  4825  02B7  00A7               	movwf	___lmul@multiplier+3
  4826  02B8  083A               	movf	??_Tmr_TmrBPrSet+6,w
  4827  02B9  00A6               	movwf	___lmul@multiplier+2
  4828  02BA  0839               	movf	??_Tmr_TmrBPrSet+5,w
  4829  02BB  00A5               	movwf	___lmul@multiplier+1
  4830  02BC  0838               	movf	??_Tmr_TmrBPrSet+4,w
  4831  02BD  00A4               	movwf	___lmul@multiplier
  4832  02BE  0830               	movf	Tmr_TmrBPrSet@IntFreqHz,w
  4833  02BF  00A8               	movwf	___lmul@multiplicand
  4834  02C0  0831               	movf	Tmr_TmrBPrSet@IntFreqHz+1,w
  4835  02C1  00A9               	movwf	___lmul@multiplicand+1
  4836  02C2  01AA               	clrf	___lmul@multiplicand+2
  4837  02C3  01AB               	clrf	___lmul@multiplicand+3
  4838  02C4  318C  240D  3182   	fcall	___lmul
  4839  02C7  0020               	movlb	0	; select bank0
  4840  02C8  0827               	movf	?___lmul+3,w
  4841  02C9  00C1               	movwf	Tmr_TmrBPrSet@Divisor+3
  4842  02CA  0826               	movf	?___lmul+2,w
  4843  02CB  00C0               	movwf	Tmr_TmrBPrSet@Divisor+2
  4844  02CC  0825               	movf	?___lmul+1,w
  4845  02CD  00BF               	movwf	Tmr_TmrBPrSet@Divisor+1
  4846  02CE  0824               	movf	?___lmul,w
  4847  02CF  00BE               	movwf	Tmr_TmrBPrSet@Divisor
  4848                           
  4849                           ;tmr_drv.c: 234: if (((((UINT32)(16000000))/4)/Divisor) <= 255)
  4850  02D0  0841               	movf	Tmr_TmrBPrSet@Divisor+3,w
  4851  02D1  00A3               	movwf	___lldiv@divisor+3
  4852  02D2  0840               	movf	Tmr_TmrBPrSet@Divisor+2,w
  4853  02D3  00A2               	movwf	___lldiv@divisor+2
  4854  02D4  083F               	movf	Tmr_TmrBPrSet@Divisor+1,w
  4855  02D5  00A1               	movwf	___lldiv@divisor+1
  4856  02D6  083E               	movf	Tmr_TmrBPrSet@Divisor,w
  4857  02D7  00A0               	movwf	___lldiv@divisor
  4858  02D8  3000               	movlw	0
  4859  02D9  00A7               	movwf	___lldiv@dividend+3
  4860  02DA  303D               	movlw	61
  4861  02DB  00A6               	movwf	___lldiv@dividend+2
  4862  02DC  3009               	movlw	9
  4863  02DD  00A5               	movwf	___lldiv@dividend+1
  4864  02DE  3000               	movlw	0
  4865  02DF  00A4               	movwf	___lldiv@dividend
  4866  02E0  318E  2674  3182   	fcall	___lldiv
  4867  02E3  0020               	movlb	0	; select bank0
  4868  02E4  0823               	movf	?___lldiv+3,w
  4869  02E5  1D03               	btfss	3,2
  4870  02E6  2B46               	goto	l312
  4871  02E7  0822               	movf	?___lldiv+2,w
  4872  02E8  1D03               	btfss	3,2
  4873  02E9  2B46               	goto	l312
  4874  02EA  3001               	movlw	1
  4875  02EB  0221               	subwf	?___lldiv+1,w
  4876  02EC  1C03               	btfss	3,0
  4877  02ED  2B37               	goto	l4209
  4878  02EE  2B46               	goto	l312
  4879  02EF                     l4201:	
  4880                           ;tmr_drv.c: 238: {
  4881                           ;tmr_drv.c: 239: case ((UINT8)(2)):
  4882                           
  4883                           ;tmr_drv.c: 235: {
  4884                           ;tmr_drv.c: 237: switch (TmrNumb)
  4885                           
  4886                           
  4887                           ;tmr_drv.c: 241: PR2 = (((UINT32)(16000000))/4)/Divisor;
  4888  02EF  0841               	movf	Tmr_TmrBPrSet@Divisor+3,w
  4889  02F0  00A3               	movwf	___lldiv@divisor+3
  4890  02F1  0840               	movf	Tmr_TmrBPrSet@Divisor+2,w
  4891  02F2  00A2               	movwf	___lldiv@divisor+2
  4892  02F3  083F               	movf	Tmr_TmrBPrSet@Divisor+1,w
  4893  02F4  00A1               	movwf	___lldiv@divisor+1
  4894  02F5  083E               	movf	Tmr_TmrBPrSet@Divisor,w
  4895  02F6  00A0               	movwf	___lldiv@divisor
  4896  02F7  3000               	movlw	0
  4897  02F8  00A7               	movwf	___lldiv@dividend+3
  4898  02F9  303D               	movlw	61
  4899  02FA  00A6               	movwf	___lldiv@dividend+2
  4900  02FB  3009               	movlw	9
  4901  02FC  00A5               	movwf	___lldiv@dividend+1
  4902  02FD  3000               	movlw	0
  4903  02FE  00A4               	movwf	___lldiv@dividend
  4904  02FF  318E  2674  3182   	fcall	___lldiv
  4905  0302  0020               	movlb	0	; select bank0
  4906  0303  0820               	movf	?___lldiv,w
  4907  0304  009B               	movwf	27	;volatile
  4908                           
  4909                           ;tmr_drv.c: 242: break;
  4910  0305  2B43               	goto	l4211
  4911  0306                     l4203:	
  4912                           ;tmr_drv.c: 244: case ((UINT8)(4)):
  4913                           
  4914                           
  4915                           ;tmr_drv.c: 246: PR4 = (((UINT32)(16000000))/4)/Divisor;
  4916  0306  0841               	movf	Tmr_TmrBPrSet@Divisor+3,w
  4917  0307  00A3               	movwf	___lldiv@divisor+3
  4918  0308  0840               	movf	Tmr_TmrBPrSet@Divisor+2,w
  4919  0309  00A2               	movwf	___lldiv@divisor+2
  4920  030A  083F               	movf	Tmr_TmrBPrSet@Divisor+1,w
  4921  030B  00A1               	movwf	___lldiv@divisor+1
  4922  030C  083E               	movf	Tmr_TmrBPrSet@Divisor,w
  4923  030D  00A0               	movwf	___lldiv@divisor
  4924  030E  3000               	movlw	0
  4925  030F  00A7               	movwf	___lldiv@dividend+3
  4926  0310  303D               	movlw	61
  4927  0311  00A6               	movwf	___lldiv@dividend+2
  4928  0312  3009               	movlw	9
  4929  0313  00A5               	movwf	___lldiv@dividend+1
  4930  0314  3000               	movlw	0
  4931  0315  00A4               	movwf	___lldiv@dividend
  4932  0316  318E  2674  3182   	fcall	___lldiv
  4933  0319  0020               	movlb	0	; select bank0
  4934  031A  0820               	movf	?___lldiv,w
  4935  031B  0028               	movlb	8	; select bank8
  4936  031C  0096               	movwf	22	;volatile
  4937                           
  4938                           ;tmr_drv.c: 247: break;
  4939  031D  2B43               	goto	l4211
  4940  031E                     l4205:	
  4941                           ;tmr_drv.c: 249: case ((UINT8)(6)):
  4942                           
  4943                           
  4944                           ;tmr_drv.c: 251: PR6 = (((UINT32)(16000000))/4)/Divisor;
  4945  031E  0020               	movlb	0	; select bank0
  4946  031F  0841               	movf	Tmr_TmrBPrSet@Divisor+3,w
  4947  0320  00A3               	movwf	___lldiv@divisor+3
  4948  0321  0840               	movf	Tmr_TmrBPrSet@Divisor+2,w
  4949  0322  00A2               	movwf	___lldiv@divisor+2
  4950  0323  083F               	movf	Tmr_TmrBPrSet@Divisor+1,w
  4951  0324  00A1               	movwf	___lldiv@divisor+1
  4952  0325  083E               	movf	Tmr_TmrBPrSet@Divisor,w
  4953  0326  00A0               	movwf	___lldiv@divisor
  4954  0327  3000               	movlw	0
  4955  0328  00A7               	movwf	___lldiv@dividend+3
  4956  0329  303D               	movlw	61
  4957  032A  00A6               	movwf	___lldiv@dividend+2
  4958  032B  3009               	movlw	9
  4959  032C  00A5               	movwf	___lldiv@dividend+1
  4960  032D  3000               	movlw	0
  4961  032E  00A4               	movwf	___lldiv@dividend
  4962  032F  318E  2674  3182   	fcall	___lldiv
  4963  0332  0020               	movlb	0	; select bank0
  4964  0333  0820               	movf	?___lldiv,w
  4965  0334  0028               	movlb	8	; select bank8
  4966  0335  009D               	movwf	29	;volatile
  4967                           
  4968                           ;tmr_drv.c: 256: }
  4969                           
  4970                           ;tmr_drv.c: 255: break;
  4971                           
  4972                           ;tmr_drv.c: 254: default:
  4973                           
  4974                           ;tmr_drv.c: 252: break;
  4975  0336  2B43               	goto	l4211
  4976  0337                     l4209:	
  4977  0337  0020               	movlb	0	; select bank0
  4978  0338  083C               	movf	Tmr_TmrBPrSet@TmrNumb,w
  4979                           
  4980                           ; Switch size 1, requested type "space"
  4981                           ; Number of cases is 3, Range of values is 2 to 6
  4982                           ; switch strategies available:
  4983                           ; Name         Instructions Cycles
  4984                           ; simple_byte           10     6 (average)
  4985                           ; direct_byte           19     9 (fixed)
  4986                           ; jumptable            263     9 (fixed)
  4987                           ;	Chosen strategy is simple_byte
  4988  0339  3A02               	xorlw	2	; case 2
  4989  033A  1903               	skipnz
  4990  033B  2AEF               	goto	l4201
  4991  033C  3A06               	xorlw	6	; case 4
  4992  033D  1903               	skipnz
  4993  033E  2B06               	goto	l4203
  4994  033F  3A02               	xorlw	2	; case 6
  4995  0340  1903               	skipnz
  4996  0341  2B1E               	goto	l4205
  4997  0342  2B43               	goto	l4211
  4998  0343                     l4211:	
  4999                           
  5000                           ;tmr_drv.c: 259: TmrBPrCfgSts = CfgOk;
  5001  0343  0020               	movlb	0	; select bank0
  5002  0344  01BD               	clrf	Tmr_TmrBPrSet@TmrBPrCfgSts
  5003                           
  5004                           ;tmr_drv.c: 260: }
  5005  0345  2B48               	goto	l4213
  5006  0346                     l312:	
  5007                           
  5008                           ;tmr_drv.c: 261: else
  5009                           ;tmr_drv.c: 262: {
  5010                           ;tmr_drv.c: 264: TmrBPrCfgSts = CfgError;
  5011  0346  01BD               	clrf	Tmr_TmrBPrSet@TmrBPrCfgSts
  5012  0347  0ABD               	incf	Tmr_TmrBPrSet@TmrBPrCfgSts,f
  5013  0348                     l4213:	
  5014                           
  5015                           ;tmr_drv.c: 265: }
  5016                           ;tmr_drv.c: 268: return TmrBPrCfgSts;
  5017  0348  083D               	movf	Tmr_TmrBPrSet@TmrBPrCfgSts,w
  5018  0349  0008               	return
  5019  034A                     __end_of_Tmr_TmrBPrSet:	
  5020                           
  5021                           	psect	text7
  5022  0A7F                     __ptext7:	
  5023 ;; *************** function ___wmul *****************
  5024 ;; Defined at:
  5025 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\Umul16.c"
  5026 ;; Parameters:    Size  Location     Type
  5027 ;;  multiplier      2    0[BANK0 ] unsigned int 
  5028 ;;  multiplicand    2    2[BANK0 ] unsigned int 
  5029 ;; Auto vars:     Size  Location     Type
  5030 ;;  product         2    4[COMMON] unsigned int 
  5031 ;; Return value:  Size  Location     Type
  5032 ;;                  2    0[BANK0 ] unsigned int 
  5033 ;; Registers used:
  5034 ;;		wreg, status,2, status,0
  5035 ;; Tracked objects:
  5036 ;;		On entry : 0/0
  5037 ;;		On exit  : 0/0
  5038 ;;		Unchanged: 0/0
  5039 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5040 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5041 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5042 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5043 ;;      Totals:         2       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5044 ;;Total ram usage:        6 bytes
  5045 ;; Hardware stack levels used:    1
  5046 ;; Hardware stack levels required when called:    2
  5047 ;; This function calls:
  5048 ;;		Nothing
  5049 ;; This function is called by:
  5050 ;;		_Tmr_TmrBPrSet
  5051 ;; This function uses a non-reentrant model
  5052 ;;
  5053                           
  5054                           
  5055                           ;psect for function ___wmul
  5056  0A7F                     ___wmul:	
  5057                           
  5058                           ;incstack = 0
  5059                           ; Regs used in ___wmul: [wreg+status,2+status,0]
  5060  0A7F  01F4               	clrf	___wmul@product
  5061  0A80  01F5               	clrf	___wmul@product+1
  5062  0A81                     l4121:	
  5063  0A81  0020               	movlb	0	; select bank0
  5064  0A82  1C20               	btfss	___wmul@multiplier,0
  5065  0A83  2A88               	goto	l1086
  5066  0A84  0822               	movf	___wmul@multiplicand,w
  5067  0A85  07F4               	addwf	___wmul@product,f
  5068  0A86  0823               	movf	___wmul@multiplicand+1,w
  5069  0A87  3DF5               	addwfc	___wmul@product+1,f
  5070  0A88                     l1086:	
  5071  0A88  3001               	movlw	1
  5072  0A89                     u2835:	
  5073  0A89  35A2               	lslf	___wmul@multiplicand,f
  5074  0A8A  0DA3               	rlf	___wmul@multiplicand+1,f
  5075  0A8B  0B89               	decfsz	9,f
  5076  0A8C  2A89               	goto	u2835
  5077  0A8D  3001               	movlw	1
  5078  0A8E                     u2845:	
  5079  0A8E  36A1               	lsrf	___wmul@multiplier+1,f
  5080  0A8F  0CA0               	rrf	___wmul@multiplier,f
  5081  0A90  0B89               	decfsz	9,f
  5082  0A91  2A8E               	goto	u2845
  5083  0A92  0820               	movf	___wmul@multiplier,w
  5084  0A93  0421               	iorwf	___wmul@multiplier+1,w
  5085  0A94  1D03               	btfss	3,2
  5086  0A95  2A81               	goto	l4121
  5087  0A96  0875               	movf	___wmul@product+1,w
  5088  0A97  00A1               	movwf	?___wmul+1
  5089  0A98  0874               	movf	___wmul@product,w
  5090  0A99  00A0               	movwf	?___wmul
  5091  0A9A  0008               	return
  5092  0A9B                     __end_of___wmul:	
  5093                           
  5094                           	psect	text8
  5095  0C0D                     __ptext8:	
  5096 ;; *************** function ___lmul *****************
  5097 ;; Defined at:
  5098 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\Umul32.c"
  5099 ;; Parameters:    Size  Location     Type
  5100 ;;  multiplier      4    4[BANK0 ] unsigned long 
  5101 ;;  multiplicand    4    8[BANK0 ] unsigned long 
  5102 ;; Auto vars:     Size  Location     Type
  5103 ;;  product         4   12[BANK0 ] unsigned long 
  5104 ;; Return value:  Size  Location     Type
  5105 ;;                  4    4[BANK0 ] unsigned long 
  5106 ;; Registers used:
  5107 ;;		wreg, status,2, status,0
  5108 ;; Tracked objects:
  5109 ;;		On entry : 0/0
  5110 ;;		On exit  : 0/0
  5111 ;;		Unchanged: 0/0
  5112 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5113 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5114 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5115 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5116 ;;      Totals:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5117 ;;Total ram usage:       12 bytes
  5118 ;; Hardware stack levels used:    1
  5119 ;; Hardware stack levels required when called:    2
  5120 ;; This function calls:
  5121 ;;		Nothing
  5122 ;; This function is called by:
  5123 ;;		_Tmr_TmrBPrSet
  5124 ;; This function uses a non-reentrant model
  5125 ;;
  5126                           
  5127                           
  5128                           ;psect for function ___lmul
  5129  0C0D                     ___lmul:	
  5130                           
  5131                           ;incstack = 0
  5132                           ; Regs used in ___lmul: [wreg+status,2+status,0]
  5133  0C0D  3000               	movlw	0
  5134  0C0E  0020               	movlb	0	; select bank0
  5135  0C0F  00AF               	movwf	___lmul@product+3
  5136  0C10  3000               	movlw	0
  5137  0C11  00AE               	movwf	___lmul@product+2
  5138  0C12  3000               	movlw	0
  5139  0C13  00AD               	movwf	___lmul@product+1
  5140  0C14  3000               	movlw	0
  5141  0C15  00AC               	movwf	___lmul@product
  5142  0C16                     l3061:	
  5143  0C16  1C24               	btfss	___lmul@multiplier,0
  5144  0C17  2C20               	goto	l3065
  5145  0C18  0828               	movf	___lmul@multiplicand,w
  5146  0C19  07AC               	addwf	___lmul@product,f
  5147  0C1A  0829               	movf	___lmul@multiplicand+1,w
  5148  0C1B  3DAD               	addwfc	___lmul@product+1,f
  5149  0C1C  082A               	movf	___lmul@multiplicand+2,w
  5150  0C1D  3DAE               	addwfc	___lmul@product+2,f
  5151  0C1E  082B               	movf	___lmul@multiplicand+3,w
  5152  0C1F  3DAF               	addwfc	___lmul@product+3,f
  5153  0C20                     l3065:	
  5154  0C20  3001               	movlw	1
  5155  0C21                     u1645:	
  5156  0C21  35A8               	lslf	___lmul@multiplicand,f
  5157  0C22  0DA9               	rlf	___lmul@multiplicand+1,f
  5158  0C23  0DAA               	rlf	___lmul@multiplicand+2,f
  5159  0C24  0DAB               	rlf	___lmul@multiplicand+3,f
  5160  0C25  0B89               	decfsz	9,f
  5161  0C26  2C21               	goto	u1645
  5162  0C27  3001               	movlw	1
  5163  0C28                     u1655:	
  5164  0C28  36A7               	lsrf	___lmul@multiplier+3,f
  5165  0C29  0CA6               	rrf	___lmul@multiplier+2,f
  5166  0C2A  0CA5               	rrf	___lmul@multiplier+1,f
  5167  0C2B  0CA4               	rrf	___lmul@multiplier,f
  5168  0C2C  0B89               	decfsz	9,f
  5169  0C2D  2C28               	goto	u1655
  5170  0C2E  0827               	movf	___lmul@multiplier+3,w
  5171  0C2F  0426               	iorwf	___lmul@multiplier+2,w
  5172  0C30  0425               	iorwf	___lmul@multiplier+1,w
  5173  0C31  0424               	iorwf	___lmul@multiplier,w
  5174  0C32  1D03               	skipz
  5175  0C33  2C16               	goto	l3061
  5176  0C34  082F               	movf	___lmul@product+3,w
  5177  0C35  00A7               	movwf	?___lmul+3
  5178  0C36  082E               	movf	___lmul@product+2,w
  5179  0C37  00A6               	movwf	?___lmul+2
  5180  0C38  082D               	movf	___lmul@product+1,w
  5181  0C39  00A5               	movwf	?___lmul+1
  5182  0C3A  082C               	movf	___lmul@product,w
  5183  0C3B  00A4               	movwf	?___lmul
  5184  0C3C  0008               	return
  5185  0C3D                     __end_of___lmul:	
  5186                           
  5187                           	psect	text9
  5188  0E74                     __ptext9:	
  5189 ;; *************** function ___lldiv *****************
  5190 ;; Defined at:
  5191 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\lldiv.c"
  5192 ;; Parameters:    Size  Location     Type
  5193 ;;  divisor         4    0[BANK0 ] unsigned long 
  5194 ;;  dividend        4    4[BANK0 ] unsigned long 
  5195 ;; Auto vars:     Size  Location     Type
  5196 ;;  quotient        4    8[BANK0 ] unsigned long 
  5197 ;;  counter         1   12[BANK0 ] unsigned char 
  5198 ;; Return value:  Size  Location     Type
  5199 ;;                  4    0[BANK0 ] unsigned long 
  5200 ;; Registers used:
  5201 ;;		wreg, status,2, status,0
  5202 ;; Tracked objects:
  5203 ;;		On entry : 0/0
  5204 ;;		On exit  : 0/0
  5205 ;;		Unchanged: 0/0
  5206 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5207 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5208 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5209 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5210 ;;      Totals:         1      13       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5211 ;;Total ram usage:       14 bytes
  5212 ;; Hardware stack levels used:    1
  5213 ;; Hardware stack levels required when called:    2
  5214 ;; This function calls:
  5215 ;;		Nothing
  5216 ;; This function is called by:
  5217 ;;		_Tmr_TmrBPrSet
  5218 ;; This function uses a non-reentrant model
  5219 ;;
  5220                           
  5221                           
  5222                           ;psect for function ___lldiv
  5223  0E74                     ___lldiv:	
  5224                           
  5225                           ;incstack = 0
  5226                           ; Regs used in ___lldiv: [wreg+status,2+status,0]
  5227  0E74  3000               	movlw	0
  5228  0E75  0020               	movlb	0	; select bank0
  5229  0E76  00AB               	movwf	___lldiv@quotient+3
  5230  0E77  3000               	movlw	0
  5231  0E78  00AA               	movwf	___lldiv@quotient+2
  5232  0E79  3000               	movlw	0
  5233  0E7A  00A9               	movwf	___lldiv@quotient+1
  5234  0E7B  3000               	movlw	0
  5235  0E7C  00A8               	movwf	___lldiv@quotient
  5236  0E7D  0823               	movf	___lldiv@divisor+3,w
  5237  0E7E  0422               	iorwf	___lldiv@divisor+2,w
  5238  0E7F  0421               	iorwf	___lldiv@divisor+1,w
  5239  0E80  0420               	iorwf	___lldiv@divisor,w
  5240  0E81  1903               	skipnz
  5241  0E82  2EBE               	goto	l4153
  5242  0E83  01AC               	clrf	___lldiv@counter
  5243  0E84  0AAC               	incf	___lldiv@counter,f
  5244  0E85                     l4139:	
  5245  0E85  1BA3               	btfsc	___lldiv@divisor+3,7
  5246  0E86  2E93               	goto	l4141
  5247  0E87  3001               	movlw	1
  5248  0E88                     u2875:	
  5249  0E88  35A0               	lslf	___lldiv@divisor,f
  5250  0E89  0DA1               	rlf	___lldiv@divisor+1,f
  5251  0E8A  0DA2               	rlf	___lldiv@divisor+2,f
  5252  0E8B  0DA3               	rlf	___lldiv@divisor+3,f
  5253  0E8C  0B89               	decfsz	9,f
  5254  0E8D  2E88               	goto	u2875
  5255  0E8E  3001               	movlw	1
  5256  0E8F  00F4               	movwf	??___lldiv
  5257  0E90  0874               	movf	??___lldiv,w
  5258  0E91  07AC               	addwf	___lldiv@counter,f
  5259  0E92  2E85               	goto	l4139
  5260  0E93                     l4141:	
  5261  0E93  3001               	movlw	1
  5262  0E94                     u2895:	
  5263  0E94  35A8               	lslf	___lldiv@quotient,f
  5264  0E95  0DA9               	rlf	___lldiv@quotient+1,f
  5265  0E96  0DAA               	rlf	___lldiv@quotient+2,f
  5266  0E97  0DAB               	rlf	___lldiv@quotient+3,f
  5267  0E98  0B89               	decfsz	9,f
  5268  0E99  2E94               	goto	u2895
  5269  0E9A  0823               	movf	___lldiv@divisor+3,w
  5270  0E9B  0227               	subwf	___lldiv@dividend+3,w
  5271  0E9C  1D03               	skipz
  5272  0E9D  2EA8               	goto	u2905
  5273  0E9E  0822               	movf	___lldiv@divisor+2,w
  5274  0E9F  0226               	subwf	___lldiv@dividend+2,w
  5275  0EA0  1D03               	skipz
  5276  0EA1  2EA8               	goto	u2905
  5277  0EA2  0821               	movf	___lldiv@divisor+1,w
  5278  0EA3  0225               	subwf	___lldiv@dividend+1,w
  5279  0EA4  1D03               	skipz
  5280  0EA5  2EA8               	goto	u2905
  5281  0EA6  0820               	movf	___lldiv@divisor,w
  5282  0EA7  0224               	subwf	___lldiv@dividend,w
  5283  0EA8                     u2905:	
  5284  0EA8  1C03               	skipc
  5285  0EA9  2EB3               	goto	l4149
  5286  0EAA  0820               	movf	___lldiv@divisor,w
  5287  0EAB  02A4               	subwf	___lldiv@dividend,f
  5288  0EAC  0821               	movf	___lldiv@divisor+1,w
  5289  0EAD  3BA5               	subwfb	___lldiv@dividend+1,f
  5290  0EAE  0822               	movf	___lldiv@divisor+2,w
  5291  0EAF  3BA6               	subwfb	___lldiv@dividend+2,f
  5292  0EB0  0823               	movf	___lldiv@divisor+3,w
  5293  0EB1  3BA7               	subwfb	___lldiv@dividend+3,f
  5294  0EB2  1428               	bsf	___lldiv@quotient,0
  5295  0EB3                     l4149:	
  5296  0EB3  3001               	movlw	1
  5297  0EB4                     u2915:	
  5298  0EB4  36A3               	lsrf	___lldiv@divisor+3,f
  5299  0EB5  0CA2               	rrf	___lldiv@divisor+2,f
  5300  0EB6  0CA1               	rrf	___lldiv@divisor+1,f
  5301  0EB7  0CA0               	rrf	___lldiv@divisor,f
  5302  0EB8  0B89               	decfsz	9,f
  5303  0EB9  2EB4               	goto	u2915
  5304  0EBA  3001               	movlw	1
  5305  0EBB  02AC               	subwf	___lldiv@counter,f
  5306  0EBC  1D03               	btfss	3,2
  5307  0EBD  2E93               	goto	l4141
  5308  0EBE                     l4153:	
  5309  0EBE  082B               	movf	___lldiv@quotient+3,w
  5310  0EBF  00A3               	movwf	?___lldiv+3
  5311  0EC0  082A               	movf	___lldiv@quotient+2,w
  5312  0EC1  00A2               	movwf	?___lldiv+2
  5313  0EC2  0829               	movf	___lldiv@quotient+1,w
  5314  0EC3  00A1               	movwf	?___lldiv+1
  5315  0EC4  0828               	movf	___lldiv@quotient,w
  5316  0EC5  00A0               	movwf	?___lldiv
  5317  0EC6  0008               	return
  5318  0EC7                     __end_of___lldiv:	
  5319                           
  5320                           	psect	text10
  5321  0B8C                     __ptext10:	
  5322 ;; *************** function _Tmr_TmrBIrqSet *****************
  5323 ;; Defined at:
  5324 ;;		line 182 in file "../../../Framework/MercuryFwk/Source/c/01_Hal/02_Drv/tmr_drv.c"
  5325 ;; Parameters:    Size  Location     Type
  5326 ;;  TmrNumb         1    wreg     unsigned char 
  5327 ;;  TmrIrqSts       1    4[COMMON] unsigned char 
  5328 ;; Auto vars:     Size  Location     Type
  5329 ;;  TmrNumb         1    5[COMMON] unsigned char 
  5330 ;; Return value:  Size  Location     Type
  5331 ;;                  1    wreg      void 
  5332 ;; Registers used:
  5333 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  5334 ;; Tracked objects:
  5335 ;;		On entry : 0/0
  5336 ;;		On exit  : 0/0
  5337 ;;		Unchanged: 0/0
  5338 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5339 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5340 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5341 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5342 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5343 ;;Total ram usage:        2 bytes
  5344 ;; Hardware stack levels used:    1
  5345 ;; Hardware stack levels required when called:    2
  5346 ;; This function calls:
  5347 ;;		Nothing
  5348 ;; This function is called by:
  5349 ;;		_Tmr_TmrBConfig
  5350 ;; This function uses a non-reentrant model
  5351 ;;
  5352                           
  5353                           
  5354                           ;psect for function _Tmr_TmrBIrqSet
  5355  0B8C                     _Tmr_TmrBIrqSet:	
  5356                           
  5357                           ;incstack = 0
  5358                           ; Regs used in _Tmr_TmrBIrqSet: [wreg-fsr0h+status,2+status,0]
  5359                           ;Tmr_TmrBIrqSet@TmrNumb stored from wreg
  5360  0B8C  00F5               	movwf	Tmr_TmrBIrqSet@TmrNumb
  5361                           
  5362                           ;tmr_drv.c: 185: switch (TmrNumb)
  5363  0B8D  2BA9               	goto	l3219
  5364  0B8E                     l304:	
  5365                           ;tmr_drv.c: 186: {
  5366                           ;tmr_drv.c: 187: case ((UINT8)(2)):
  5367                           
  5368                           
  5369                           ;tmr_drv.c: 189: PIR1bits.TMR2IF = 0u;
  5370  0B8E  0020               	movlb	0	; select bank0
  5371  0B8F  1091               	bcf	17,1	;volatile
  5372                           
  5373                           ;tmr_drv.c: 191: PIE1bits.TMR2IE = TmrIrqSts;
  5374  0B90  0C74               	rrf	Tmr_TmrBIrqSet@TmrIrqSts,w
  5375  0B91  0021               	movlb	1	; select bank1
  5376  0B92  1C03               	skipc
  5377  0B93  1091               	bcf	17,1	;volatile
  5378  0B94  1803               	skipnc
  5379  0B95  1491               	bsf	17,1	;volatile
  5380                           
  5381                           ;tmr_drv.c: 192: break;
  5382  0B96  0008               	return
  5383  0B97                     l306:	
  5384                           ;tmr_drv.c: 194: case ((UINT8)(4)):
  5385                           
  5386                           
  5387                           ;tmr_drv.c: 196: PIR3bits.TMR4IF = 0u;
  5388  0B97  0020               	movlb	0	; select bank0
  5389  0B98  1093               	bcf	19,1	;volatile
  5390                           
  5391                           ;tmr_drv.c: 198: PIE3bits.TMR4IE = TmrIrqSts;
  5392  0B99  0C74               	rrf	Tmr_TmrBIrqSet@TmrIrqSts,w
  5393  0B9A  0021               	movlb	1	; select bank1
  5394  0B9B  1C03               	skipc
  5395  0B9C  1093               	bcf	19,1	;volatile
  5396  0B9D  1803               	skipnc
  5397  0B9E  1493               	bsf	19,1	;volatile
  5398                           
  5399                           ;tmr_drv.c: 199: break;
  5400  0B9F  0008               	return
  5401  0BA0                     l307:	
  5402                           ;tmr_drv.c: 201: case ((UINT8)(6)):
  5403                           
  5404                           
  5405                           ;tmr_drv.c: 203: PIR3bits.TMR6IF = 0u;
  5406  0BA0  0020               	movlb	0	; select bank0
  5407  0BA1  1193               	bcf	19,3	;volatile
  5408                           
  5409                           ;tmr_drv.c: 205: PIE3bits.TMR6IE = TmrIrqSts;
  5410  0BA2  0C74               	rrf	Tmr_TmrBIrqSet@TmrIrqSts,w
  5411  0BA3  0021               	movlb	1	; select bank1
  5412  0BA4  1C03               	skipc
  5413  0BA5  1193               	bcf	19,3	;volatile
  5414  0BA6  1803               	skipnc
  5415  0BA7  1593               	bsf	19,3	;volatile
  5416                           
  5417                           ;tmr_drv.c: 210: }
  5418                           
  5419                           ;tmr_drv.c: 209: break;
  5420                           
  5421                           ;tmr_drv.c: 208: default:
  5422                           
  5423                           ;tmr_drv.c: 206: break;
  5424  0BA8  0008               	return
  5425  0BA9                     l3219:	
  5426  0BA9  0875               	movf	Tmr_TmrBIrqSet@TmrNumb,w
  5427                           
  5428                           ; Switch size 1, requested type "space"
  5429                           ; Number of cases is 3, Range of values is 2 to 6
  5430                           ; switch strategies available:
  5431                           ; Name         Instructions Cycles
  5432                           ; simple_byte           10     6 (average)
  5433                           ; direct_byte           19     9 (fixed)
  5434                           ; jumptable            263     9 (fixed)
  5435                           ;	Chosen strategy is simple_byte
  5436  0BAA  3A02               	xorlw	2	; case 2
  5437  0BAB  1903               	skipnz
  5438  0BAC  2B8E               	goto	l304
  5439  0BAD  3A06               	xorlw	6	; case 4
  5440  0BAE  1903               	skipnz
  5441  0BAF  2B97               	goto	l306
  5442  0BB0  3A02               	xorlw	2	; case 6
  5443  0BB1  1903               	skipnz
  5444  0BB2  2BA0               	goto	l307
  5445  0BB3  2BB4               	goto	l309
  5446  0BB4                     l309:	
  5447  0BB4  0008               	return
  5448  0BB5                     __end_of_Tmr_TmrBIrqSet:	
  5449                           
  5450                           	psect	text11
  5451  0A06                     __ptext11:	
  5452 ;; *************** function _Tmr_StartTmr *****************
  5453 ;; Defined at:
  5454 ;;		line 279 in file "../../../Framework/MercuryFwk/Source/c/01_Hal/02_Drv/tmr_drv.c"
  5455 ;; Parameters:    Size  Location     Type
  5456 ;;  TmrNumb         1    wreg     unsigned char 
  5457 ;; Auto vars:     Size  Location     Type
  5458 ;;  TmrNumb         1    4[COMMON] unsigned char 
  5459 ;; Return value:  Size  Location     Type
  5460 ;;                  1    wreg      void 
  5461 ;; Registers used:
  5462 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  5463 ;; Tracked objects:
  5464 ;;		On entry : 0/0
  5465 ;;		On exit  : 0/0
  5466 ;;		Unchanged: 0/0
  5467 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5468 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5469 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5470 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5471 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5472 ;;Total ram usage:        1 bytes
  5473 ;; Hardware stack levels used:    1
  5474 ;; Hardware stack levels required when called:    2
  5475 ;; This function calls:
  5476 ;;		Nothing
  5477 ;; This function is called by:
  5478 ;;		_Tmr_TmrBConfig
  5479 ;; This function uses a non-reentrant model
  5480 ;;
  5481                           
  5482                           
  5483                           ;psect for function _Tmr_StartTmr
  5484  0A06                     _Tmr_StartTmr:	
  5485                           
  5486                           ;incstack = 0
  5487                           ; Regs used in _Tmr_StartTmr: [wreg-fsr0h+status,2+status,0]
  5488                           ;Tmr_StartTmr@TmrNumb stored from wreg
  5489  0A06  00F4               	movwf	Tmr_StartTmr@TmrNumb
  5490                           
  5491                           ;tmr_drv.c: 282: switch (TmrNumb)
  5492  0A07  2A11               	goto	l3249
  5493  0A08                     l324:	
  5494                           ;tmr_drv.c: 283: {
  5495                           ;tmr_drv.c: 284: case ((UINT8)(2)):
  5496                           
  5497                           
  5498                           ;tmr_drv.c: 286: T2CONbits.TMR2ON = 1u;
  5499  0A08  0020               	movlb	0	; select bank0
  5500  0A09  151C               	bsf	28,2	;volatile
  5501                           
  5502                           ;tmr_drv.c: 287: break;
  5503  0A0A  0008               	return
  5504  0A0B                     l326:	
  5505                           ;tmr_drv.c: 289: case ((UINT8)(4)):
  5506                           
  5507                           
  5508                           ;tmr_drv.c: 291: T4CONbits.TMR4ON = 1u;
  5509  0A0B  0028               	movlb	8	; select bank8
  5510  0A0C  1517               	bsf	23,2	;volatile
  5511                           
  5512                           ;tmr_drv.c: 292: break;
  5513  0A0D  0008               	return
  5514  0A0E                     l327:	
  5515                           ;tmr_drv.c: 294: case ((UINT8)(6)):
  5516                           
  5517                           
  5518                           ;tmr_drv.c: 296: T6CONbits.TMR6ON = 1u;
  5519  0A0E  0028               	movlb	8	; select bank8
  5520  0A0F  151E               	bsf	30,2	;volatile
  5521                           
  5522                           ;tmr_drv.c: 301: }
  5523                           
  5524                           ;tmr_drv.c: 300: break;
  5525                           
  5526                           ;tmr_drv.c: 299: default:
  5527                           
  5528                           ;tmr_drv.c: 297: break;
  5529  0A10  0008               	return
  5530  0A11                     l3249:	
  5531  0A11  0874               	movf	Tmr_StartTmr@TmrNumb,w
  5532                           
  5533                           ; Switch size 1, requested type "space"
  5534                           ; Number of cases is 3, Range of values is 2 to 6
  5535                           ; switch strategies available:
  5536                           ; Name         Instructions Cycles
  5537                           ; simple_byte           10     6 (average)
  5538                           ; direct_byte           19     9 (fixed)
  5539                           ; jumptable            263     9 (fixed)
  5540                           ;	Chosen strategy is simple_byte
  5541  0A12  3A02               	xorlw	2	; case 2
  5542  0A13  1903               	skipnz
  5543  0A14  2A08               	goto	l324
  5544  0A15  3A06               	xorlw	6	; case 4
  5545  0A16  1903               	skipnz
  5546  0A17  2A0B               	goto	l326
  5547  0A18  3A02               	xorlw	2	; case 6
  5548  0A19  1903               	skipnz
  5549  0A1A  2A0E               	goto	l327
  5550  0A1B  2A1C               	goto	l329
  5551  0A1C                     l329:	
  5552  0A1C  0008               	return
  5553  0A1D                     __end_of_Tmr_StartTmr:	
  5554                           
  5555                           	psect	text12
  5556  06CF                     __ptext12:	
  5557 ;; *************** function _TmrBInit *****************
  5558 ;; Defined at:
  5559 ;;		line 72 in file "../../../Framework/MercuryFwk/Source/c/01_Hal/02_Drv/tmr_drv.c"
  5560 ;; Parameters:    Size  Location     Type
  5561 ;;  TmrNumb         1    wreg     unsigned char 
  5562 ;;  Prescaler       1    4[COMMON] unsigned char 
  5563 ;;  Postscaler      1    5[COMMON] unsigned char 
  5564 ;; Auto vars:     Size  Location     Type
  5565 ;;  TmrNumb         1    1[BANK0 ] unsigned char 
  5566 ;; Return value:  Size  Location     Type
  5567 ;;                  1    wreg      void 
  5568 ;; Registers used:
  5569 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  5570 ;; Tracked objects:
  5571 ;;		On entry : 0/0
  5572 ;;		On exit  : 0/0
  5573 ;;		Unchanged: 0/0
  5574 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5575 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5576 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5577 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5578 ;;      Totals:         2       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5579 ;;Total ram usage:        4 bytes
  5580 ;; Hardware stack levels used:    1
  5581 ;; Hardware stack levels required when called:    2
  5582 ;; This function calls:
  5583 ;;		Nothing
  5584 ;; This function is called by:
  5585 ;;		_Tmr_TmrBConfig
  5586 ;; This function uses a non-reentrant model
  5587 ;;
  5588                           
  5589                           
  5590                           ;psect for function _TmrBInit
  5591  06CF                     _TmrBInit:	
  5592                           
  5593                           ;incstack = 0
  5594                           ; Regs used in _TmrBInit: [wreg-fsr0h+status,2+status,0]
  5595                           ;TmrBInit@TmrNumb stored from wreg
  5596  06CF  0020               	movlb	0	; select bank0
  5597  06D0  00A1               	movwf	TmrBInit@TmrNumb
  5598                           
  5599                           ;tmr_drv.c: 75: switch (TmrNumb)
  5600  06D1  2F3D               	goto	l4191
  5601  06D2                     l279:	
  5602                           ;tmr_drv.c: 80: {
  5603                           ;tmr_drv.c: 81: case ((UINT8)(1)):
  5604                           
  5605                           ;tmr_drv.c: 79: switch (Prescaler)
  5606                           
  5607                           ;tmr_drv.c: 76: {
  5608                           ;tmr_drv.c: 77: case ((UINT8)(2)):
  5609                           
  5610                           
  5611                           ;tmr_drv.c: 83: T2CONbits.T2CKPS0 = 0u;
  5612  06D2  101C               	bcf	28,0	;volatile
  5613  06D3  2ED5               	goto	L2
  5614  06D4                     l281:	
  5615                           ;tmr_drv.c: 87: case ((UINT8)(4)):
  5616                           
  5617                           ;tmr_drv.c: 85: break;
  5618                           
  5619                           ;tmr_drv.c: 84: T2CONbits.T2CKPS1 = 0u;
  5620                           
  5621                           
  5622                           ;tmr_drv.c: 89: T2CONbits.T2CKPS0 = 1u;
  5623  06D4  141C               	bsf	28,0	;volatile
  5624  06D5                     L2:	
  5625                           
  5626                           ;tmr_drv.c: 90: T2CONbits.T2CKPS1 = 0u;
  5627  06D5  109C               	bcf	28,1	;volatile
  5628                           
  5629                           ;tmr_drv.c: 91: break;
  5630  06D6  2EE5               	goto	l4175
  5631  06D7                     l282:	
  5632                           ;tmr_drv.c: 93: case ((UINT8)(16)):
  5633                           
  5634                           
  5635                           ;tmr_drv.c: 94: T2CONbits.T2CKPS0 = 0u;
  5636  06D7  101C               	bcf	28,0	;volatile
  5637                           
  5638                           ;tmr_drv.c: 95: T2CONbits.T2CKPS1 = 1u;
  5639  06D8  149C               	bsf	28,1	;volatile
  5640                           
  5641                           ;tmr_drv.c: 100: }
  5642                           
  5643                           ;tmr_drv.c: 99: break;
  5644                           
  5645                           ;tmr_drv.c: 98: default:
  5646                           
  5647                           ;tmr_drv.c: 96: break;
  5648  06D9  2EE5               	goto	l4175
  5649  06DA                     l4173:	
  5650  06DA  0874               	movf	TmrBInit@Prescaler,w
  5651                           
  5652                           ; Switch size 1, requested type "space"
  5653                           ; Number of cases is 3, Range of values is 1 to 16
  5654                           ; switch strategies available:
  5655                           ; Name         Instructions Cycles
  5656                           ; simple_byte           10     6 (average)
  5657                           ; direct_byte           41     9 (fixed)
  5658                           ; jumptable            263     9 (fixed)
  5659                           ;	Chosen strategy is simple_byte
  5660  06DB  3A01               	xorlw	1	; case 1
  5661  06DC  1903               	skipnz
  5662  06DD  2ED2               	goto	l279
  5663  06DE  3A05               	xorlw	5	; case 4
  5664  06DF  1903               	skipnz
  5665  06E0  2ED4               	goto	l281
  5666  06E1  3A14               	xorlw	20	; case 16
  5667  06E2  1903               	skipnz
  5668  06E3  2ED7               	goto	l282
  5669  06E4  2EE5               	goto	l4175
  5670  06E5                     l4175:	
  5671                           
  5672                           ;tmr_drv.c: 103: T2CONbits.T2OUTPS = (Postscaler - 1);
  5673  06E5  0875               	movf	TmrBInit@Postscaler,w
  5674  06E6  3EFF               	addlw	255
  5675  06E7  00A0               	movwf	??_TmrBInit
  5676  06E8  0DA0               	rlf	??_TmrBInit,f
  5677  06E9  0DA0               	rlf	??_TmrBInit,f
  5678  06EA  0DA0               	rlf	??_TmrBInit,f
  5679  06EB  081C               	movf	28,w	;volatile
  5680  06EC  0620               	xorwf	??_TmrBInit,w
  5681  06ED  3987               	andlw	-121
  5682  06EE  0620               	xorwf	??_TmrBInit,w
  5683  06EF  009C               	movwf	28	;volatile
  5684                           
  5685                           ;tmr_drv.c: 104: break;
  5686  06F0  0008               	return
  5687  06F1                     l287:	
  5688                           ;tmr_drv.c: 109: {
  5689                           ;tmr_drv.c: 110: case ((UINT8)(1)):
  5690                           
  5691                           ;tmr_drv.c: 108: switch (Prescaler)
  5692                           
  5693                           ;tmr_drv.c: 106: case ((UINT8)(4)):
  5694                           
  5695                           
  5696                           ;tmr_drv.c: 112: T4CONbits.T4CKPS0 = 0u;
  5697  06F1  0028               	movlb	8	; select bank8
  5698  06F2  1017               	bcf	23,0	;volatile
  5699  06F3  2EF6               	goto	L3
  5700  06F4                     l289:	
  5701                           ;tmr_drv.c: 116: case ((UINT8)(4)):
  5702                           
  5703                           ;tmr_drv.c: 114: break;
  5704                           
  5705                           ;tmr_drv.c: 113: T4CONbits.T4CKPS1 = 0u;
  5706                           
  5707                           
  5708                           ;tmr_drv.c: 118: T4CONbits.T4CKPS0 = 1u;
  5709  06F4  0028               	movlb	8	; select bank8
  5710  06F5  1417               	bsf	23,0	;volatile
  5711  06F6                     L3:	
  5712                           
  5713                           ;tmr_drv.c: 119: T4CONbits.T4CKPS1 = 0u;
  5714  06F6  1097               	bcf	23,1	;volatile
  5715                           
  5716                           ;tmr_drv.c: 120: break;
  5717  06F7  2F07               	goto	l4181
  5718  06F8                     l290:	
  5719                           ;tmr_drv.c: 122: case ((UINT8)(16)):
  5720                           
  5721                           
  5722                           ;tmr_drv.c: 123: T4CONbits.T4CKPS0 = 0u;
  5723  06F8  0028               	movlb	8	; select bank8
  5724  06F9  1017               	bcf	23,0	;volatile
  5725                           
  5726                           ;tmr_drv.c: 124: T4CONbits.T4CKPS1 = 1u;
  5727  06FA  1497               	bsf	23,1	;volatile
  5728                           
  5729                           ;tmr_drv.c: 129: }
  5730                           
  5731                           ;tmr_drv.c: 128: break;
  5732                           
  5733                           ;tmr_drv.c: 127: default:
  5734                           
  5735                           ;tmr_drv.c: 125: break;
  5736  06FB  2F07               	goto	l4181
  5737  06FC                     l4179:	
  5738  06FC  0874               	movf	TmrBInit@Prescaler,w
  5739                           
  5740                           ; Switch size 1, requested type "space"
  5741                           ; Number of cases is 3, Range of values is 1 to 16
  5742                           ; switch strategies available:
  5743                           ; Name         Instructions Cycles
  5744                           ; simple_byte           10     6 (average)
  5745                           ; direct_byte           41     9 (fixed)
  5746                           ; jumptable            263     9 (fixed)
  5747                           ;	Chosen strategy is simple_byte
  5748  06FD  3A01               	xorlw	1	; case 1
  5749  06FE  1903               	skipnz
  5750  06FF  2EF1               	goto	l287
  5751  0700  3A05               	xorlw	5	; case 4
  5752  0701  1903               	skipnz
  5753  0702  2EF4               	goto	l289
  5754  0703  3A14               	xorlw	20	; case 16
  5755  0704  1903               	skipnz
  5756  0705  2EF8               	goto	l290
  5757  0706  2F07               	goto	l4181
  5758  0707                     l4181:	
  5759                           
  5760                           ;tmr_drv.c: 132: T4CONbits.T4OUTPS = (Postscaler - 1);
  5761  0707  0875               	movf	TmrBInit@Postscaler,w
  5762  0708  3EFF               	addlw	255
  5763  0709  0020               	movlb	0	; select bank0
  5764  070A  00A0               	movwf	??_TmrBInit
  5765  070B  0DA0               	rlf	??_TmrBInit,f
  5766  070C  0DA0               	rlf	??_TmrBInit,f
  5767  070D  0DA0               	rlf	??_TmrBInit,f
  5768  070E  0028               	movlb	8	; select bank8
  5769  070F  0817               	movf	23,w	;volatile
  5770  0710  0020               	movlb	0	; select bank0
  5771  0711  0620               	xorwf	??_TmrBInit,w
  5772  0712  3987               	andlw	-121
  5773  0713  0620               	xorwf	??_TmrBInit,w
  5774  0714  0028               	movlb	8	; select bank8
  5775  0715  0097               	movwf	23	;volatile
  5776                           
  5777                           ;tmr_drv.c: 133: break;
  5778  0716  0008               	return
  5779  0717                     l294:	
  5780                           ;tmr_drv.c: 138: {
  5781                           ;tmr_drv.c: 139: case ((UINT8)(1)):
  5782                           
  5783                           ;tmr_drv.c: 137: switch (Prescaler)
  5784                           
  5785                           ;tmr_drv.c: 135: case ((UINT8)(6)):
  5786                           
  5787                           
  5788                           ;tmr_drv.c: 141: T6CONbits.T6CKPS0 = 0u;
  5789  0717  0028               	movlb	8	; select bank8
  5790  0718  101E               	bcf	30,0	;volatile
  5791  0719  2F1C               	goto	L4
  5792  071A                     l296:	
  5793                           ;tmr_drv.c: 145: case ((UINT8)(4)):
  5794                           
  5795                           ;tmr_drv.c: 143: break;
  5796                           
  5797                           ;tmr_drv.c: 142: T6CONbits.T6CKPS1 = 0u;
  5798                           
  5799                           
  5800                           ;tmr_drv.c: 147: T6CONbits.T6CKPS0 = 1u;
  5801  071A  0028               	movlb	8	; select bank8
  5802  071B  141E               	bsf	30,0	;volatile
  5803  071C                     L4:	
  5804                           
  5805                           ;tmr_drv.c: 148: T6CONbits.T6CKPS1 = 0u;
  5806  071C  109E               	bcf	30,1	;volatile
  5807                           
  5808                           ;tmr_drv.c: 149: break;
  5809  071D  2F2D               	goto	l4187
  5810  071E                     l297:	
  5811                           ;tmr_drv.c: 151: case ((UINT8)(16)):
  5812                           
  5813                           
  5814                           ;tmr_drv.c: 152: T6CONbits.T6CKPS0 = 0u;
  5815  071E  0028               	movlb	8	; select bank8
  5816  071F  101E               	bcf	30,0	;volatile
  5817                           
  5818                           ;tmr_drv.c: 153: T6CONbits.T6CKPS1 = 1u;
  5819  0720  149E               	bsf	30,1	;volatile
  5820                           
  5821                           ;tmr_drv.c: 158: }
  5822                           
  5823                           ;tmr_drv.c: 157: break;
  5824                           
  5825                           ;tmr_drv.c: 156: default:
  5826                           
  5827                           ;tmr_drv.c: 154: break;
  5828  0721  2F2D               	goto	l4187
  5829  0722                     l4185:	
  5830  0722  0874               	movf	TmrBInit@Prescaler,w
  5831                           
  5832                           ; Switch size 1, requested type "space"
  5833                           ; Number of cases is 3, Range of values is 1 to 16
  5834                           ; switch strategies available:
  5835                           ; Name         Instructions Cycles
  5836                           ; simple_byte           10     6 (average)
  5837                           ; direct_byte           41     9 (fixed)
  5838                           ; jumptable            263     9 (fixed)
  5839                           ;	Chosen strategy is simple_byte
  5840  0723  3A01               	xorlw	1	; case 1
  5841  0724  1903               	skipnz
  5842  0725  2F17               	goto	l294
  5843  0726  3A05               	xorlw	5	; case 4
  5844  0727  1903               	skipnz
  5845  0728  2F1A               	goto	l296
  5846  0729  3A14               	xorlw	20	; case 16
  5847  072A  1903               	skipnz
  5848  072B  2F1E               	goto	l297
  5849  072C  2F2D               	goto	l4187
  5850  072D                     l4187:	
  5851                           
  5852                           ;tmr_drv.c: 161: T6CONbits.T6OUTPS = (Postscaler - 1);
  5853  072D  0875               	movf	TmrBInit@Postscaler,w
  5854  072E  3EFF               	addlw	255
  5855  072F  0020               	movlb	0	; select bank0
  5856  0730  00A0               	movwf	??_TmrBInit
  5857  0731  0DA0               	rlf	??_TmrBInit,f
  5858  0732  0DA0               	rlf	??_TmrBInit,f
  5859  0733  0DA0               	rlf	??_TmrBInit,f
  5860  0734  0028               	movlb	8	; select bank8
  5861  0735  081E               	movf	30,w	;volatile
  5862  0736  0020               	movlb	0	; select bank0
  5863  0737  0620               	xorwf	??_TmrBInit,w
  5864  0738  3987               	andlw	-121
  5865  0739  0620               	xorwf	??_TmrBInit,w
  5866  073A  0028               	movlb	8	; select bank8
  5867  073B  009E               	movwf	30	;volatile
  5868                           
  5869                           ;tmr_drv.c: 166: }
  5870                           
  5871                           ;tmr_drv.c: 165: break;
  5872                           
  5873                           ;tmr_drv.c: 164: default:
  5874                           
  5875                           ;tmr_drv.c: 162: break;
  5876  073C  0008               	return
  5877  073D                     l4191:	
  5878  073D  0020               	movlb	0	; select bank0
  5879  073E  0821               	movf	TmrBInit@TmrNumb,w
  5880                           
  5881                           ; Switch size 1, requested type "space"
  5882                           ; Number of cases is 3, Range of values is 2 to 6
  5883                           ; switch strategies available:
  5884                           ; Name         Instructions Cycles
  5885                           ; simple_byte           10     6 (average)
  5886                           ; direct_byte           19     9 (fixed)
  5887                           ; jumptable            263     9 (fixed)
  5888                           ;	Chosen strategy is simple_byte
  5889  073F  3A02               	xorlw	2	; case 2
  5890  0740  1903               	skipnz
  5891  0741  2EDA               	goto	l4173
  5892  0742  3A06               	xorlw	6	; case 4
  5893  0743  1903               	skipnz
  5894  0744  2EFC               	goto	l4179
  5895  0745  3A02               	xorlw	2	; case 6
  5896  0746  1903               	skipnz
  5897  0747  2F22               	goto	l4185
  5898  0748  2F49               	goto	l300
  5899  0749                     l300:	
  5900  0749  0008               	return
  5901  074A                     __end_of_TmrBInit:	
  5902                           
  5903                           	psect	text13
  5904  09A0                     __ptext13:	
  5905 ;; *************** function _MainScheduler *****************
  5906 ;; Defined at:
  5907 ;;		line 79 in file "../../../Framework/MercuryFwk/Source/c/02_Osl/os_sched.c"
  5908 ;; Parameters:    Size  Location     Type
  5909 ;;		None
  5910 ;; Auto vars:     Size  Location     Type
  5911 ;;		None
  5912 ;; Return value:  Size  Location     Type
  5913 ;;                  1    wreg      void 
  5914 ;; Registers used:
  5915 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5916 ;; Tracked objects:
  5917 ;;		On entry : 0/0
  5918 ;;		On exit  : 0/0
  5919 ;;		Unchanged: 0/0
  5920 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5921 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5922 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5923 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5924 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5925 ;;Total ram usage:        0 bytes
  5926 ;; Hardware stack levels used:    1
  5927 ;; Hardware stack levels required when called:    9
  5928 ;; This function calls:
  5929 ;;		_InitializeTasks
  5930 ;;		_ScheduleTasks
  5931 ;; This function is called by:
  5932 ;;		_main
  5933 ;; This function uses a non-reentrant model
  5934 ;;
  5935                           
  5936                           
  5937                           ;psect for function _MainScheduler
  5938  09A0                     _MainScheduler:	
  5939                           
  5940                           ;os_sched.c: 82: InitializeTasks();
  5941                           
  5942                           ;incstack = 0
  5943                           ; Regs used in _MainScheduler: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  5944  09A0  318D  254A  3189   	fcall	_InitializeTasks
  5945                           
  5946                           ;os_sched.c: 84: SystemState = RunningState;
  5947  09A3  0020               	movlb	0	; select bank0
  5948  09A4  01E0               	clrf	_SystemState
  5949  09A5  0AE0               	incf	_SystemState,f
  5950  09A6                     l4597:	
  5951                           ;os_sched.c: 91: while(((UINT8)(1)))
  5952                           
  5953                           
  5954                           ;os_sched.c: 92: {
  5955                           ;os_sched.c: 94: if (MainSystemTimebaseFlag == CallTaskPhase)
  5956  09A6  0021               	movlb	1	; select bank1
  5957  09A7  0869               	movf	_MainSystemTimebaseFlag^(0+128),w
  5958  09A8  1D03               	btfss	3,2
  5959  09A9  29A6               	goto	l4597
  5960                           
  5961                           ;os_sched.c: 95: {
  5962                           ;os_sched.c: 97: ScheduleTasks();
  5963  09AA  3183  234A  3189   	fcall	_ScheduleTasks
  5964                           
  5965                           ;os_sched.c: 99: MainSystemTimebaseFlag = WaitTriggerPhase;
  5966  09AD  0021               	movlb	1	; select bank1
  5967  09AE  01E9               	clrf	_MainSystemTimebaseFlag^(0+128)
  5968  09AF  0AE9               	incf	_MainSystemTimebaseFlag^(0+128),f
  5969  09B0  29A6               	goto	l4597
  5970  09B1                     __end_of_MainScheduler:	
  5971                           
  5972                           	psect	text14
  5973  034A                     __ptext14:	
  5974 ;; *************** function _ScheduleTasks *****************
  5975 ;; Defined at:
  5976 ;;		line 130 in file "../../../Framework/MercuryFwk/Source/c/02_Osl/os_sched.c"
  5977 ;; Parameters:    Size  Location     Type
  5978 ;;		None
  5979 ;; Auto vars:     Size  Location     Type
  5980 ;;  ActiveTaskIn    1   62[BANK0 ] unsigned char 
  5981 ;; Return value:  Size  Location     Type
  5982 ;;                  1    wreg      void 
  5983 ;; Registers used:
  5984 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5985 ;; Tracked objects:
  5986 ;;		On entry : 0/0
  5987 ;;		On exit  : 0/0
  5988 ;;		Unchanged: 0/0
  5989 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5990 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5991 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5992 ;;      Temps:          0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5993 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5994 ;;Total ram usage:        7 bytes
  5995 ;; Hardware stack levels used:    1
  5996 ;; Hardware stack levels required when called:    8
  5997 ;; This function calls:
  5998 ;;		_App_MainTask
  5999 ;;		_I2cSlv_MainTask
  6000 ;;		_I2c_DataReceiveSm
  6001 ;;		_Led_MainTask
  6002 ;;		_Wdg_MainTask
  6003 ;; This function is called by:
  6004 ;;		_MainScheduler
  6005 ;; This function uses a non-reentrant model
  6006 ;;
  6007                           
  6008                           
  6009                           ;psect for function _ScheduleTasks
  6010  034A                     _ScheduleTasks:	
  6011                           
  6012                           ;os_sched.c: 133: UINT8 ActiveTaskIndex = 0u;
  6013                           
  6014                           ;incstack = 0
  6015                           ; Regs used in _ScheduleTasks: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  6016  034A  0020               	movlb	0	; select bank0
  6017  034B  01DE               	clrf	ScheduleTasks@ActiveTaskIndex
  6018                           
  6019                           ;os_sched.c: 136: for (ActiveTaskIndex = 0u; ActiveTaskIndex < TaskNumber; ActiveTaskInd
      +                          ex++)
  6020  034C  01DE               	clrf	ScheduleTasks@ActiveTaskIndex
  6021  034D  3000               	movlw	low (_TaskNumber| (0+32768))
  6022  034E  0084               	movwf	4
  6023  034F  3090               	movlw	high (_TaskNumber| (0+32768))
  6024  0350  0085               	movwf	5
  6025  0351  3F00               	moviw [0]fsr0
  6026  0352  00D8               	movwf	??_ScheduleTasks
  6027  0353  3F01               	moviw [1]fsr0
  6028  0354                     L5:	
  6029  0354  00D9               	movwf	??_ScheduleTasks+1
  6030  0355  085E               	movf	ScheduleTasks@ActiveTaskIndex,w
  6031  0356  00DA               	movwf	??_ScheduleTasks+2
  6032  0357  01DB               	clrf	??_ScheduleTasks+3
  6033  0358  0859               	movf	??_ScheduleTasks+1,w
  6034  0359  025B               	subwf	??_ScheduleTasks+3,w
  6035  035A  1D03               	skipz
  6036  035B  2B5E               	goto	u3405
  6037  035C  0858               	movf	??_ScheduleTasks,w
  6038  035D  025A               	subwf	??_ScheduleTasks+2,w
  6039  035E                     u3405:	
  6040  035E  1803               	btfsc	3,0
  6041  035F  0008               	return
  6042                           
  6043                           ;os_sched.c: 137: {
  6044                           ;os_sched.c: 138: if (TaskTable[ActiveTaskIndex].Counter >= (TaskTable[ActiveTaskIndex].
      +                          Timeout))
  6045  0360  085E               	movf	ScheduleTasks@ActiveTaskIndex,w
  6046  0361  00D8               	movwf	??_ScheduleTasks
  6047  0362  3002               	movlw	2
  6048  0363                     u3415:	
  6049  0363  35D8               	lslf	??_ScheduleTasks,f
  6050  0364  3EFF               	addlw	-1
  6051  0365  1D03               	skipz
  6052  0366  2B63               	goto	u3415
  6053  0367  3558               	lslf	??_ScheduleTasks,w
  6054  0368  3E05               	addlw	5
  6055  0369  3E20               	addlw	(low (_TaskTable| (0+256)))& (0+255)
  6056  036A  0086               	movwf	6
  6057  036B  3001               	movlw	1	; select bank2/3
  6058  036C  0087               	movwf	7
  6059  036D  3F40               	moviw [0]fsr1
  6060  036E  00D9               	movwf	??_ScheduleTasks+1
  6061  036F  3F41               	moviw [1]fsr1
  6062  0370  00DA               	movwf	??_ScheduleTasks+2
  6063  0371  085E               	movf	ScheduleTasks@ActiveTaskIndex,w
  6064  0372  00DB               	movwf	??_ScheduleTasks+3
  6065  0373  3002               	movlw	2
  6066  0374                     u3425:	
  6067  0374  35DB               	lslf	??_ScheduleTasks+3,f
  6068  0375  3EFF               	addlw	-1
  6069  0376  1D03               	skipz
  6070  0377  2B74               	goto	u3425
  6071  0378  355B               	lslf	??_ScheduleTasks+3,w
  6072  0379  3E03               	addlw	3
  6073  037A  3E20               	addlw	(low (_TaskTable| (0+256)))& (0+255)
  6074  037B  0086               	movwf	6
  6075  037C  3001               	movlw	1	; select bank2/3
  6076  037D  0087               	movwf	7
  6077  037E  3F40               	moviw [0]fsr1
  6078  037F  00DC               	movwf	??_ScheduleTasks+4
  6079  0380  3F41               	moviw [1]fsr1
  6080  0381  00DD               	movwf	??_ScheduleTasks+5
  6081  0382  085A               	movf	??_ScheduleTasks+2,w
  6082  0383  025D               	subwf	??_ScheduleTasks+5,w
  6083  0384  1D03               	skipz
  6084  0385  2B88               	goto	u3435
  6085  0386  0859               	movf	??_ScheduleTasks+1,w
  6086  0387  025C               	subwf	??_ScheduleTasks+4,w
  6087  0388                     u3435:	
  6088  0388  1C03               	skipc
  6089  0389  2BCC               	goto	l4571
  6090                           
  6091                           ;os_sched.c: 139: {
  6092                           ;os_sched.c: 140: TaskTable[ActiveTaskIndex].Counter = ((UINT8)(0));
  6093  038A  085E               	movf	ScheduleTasks@ActiveTaskIndex,w
  6094  038B  00D8               	movwf	??_ScheduleTasks
  6095  038C  3002               	movlw	2
  6096  038D                     u3445:	
  6097  038D  35D8               	lslf	??_ScheduleTasks,f
  6098  038E  3EFF               	addlw	-1
  6099  038F  1D03               	skipz
  6100  0390  2B8D               	goto	u3445
  6101  0391  3558               	lslf	??_ScheduleTasks,w
  6102  0392  3E03               	addlw	3
  6103  0393  3E20               	addlw	(low (_TaskTable| (0+256)))& (0+255)
  6104  0394  0086               	movwf	6
  6105  0395  3001               	movlw	1	; select bank2/3
  6106  0396  0087               	movwf	7
  6107  0397  3000               	movlw	0
  6108  0398  3FC0               	movwi [0]fsr1
  6109  0399  3FC1               	movwi [1]fsr1
  6110                           
  6111                           ;os_sched.c: 141: TaskTable[ActiveTaskIndex].State = TaskRunning;
  6112  039A  085E               	movf	ScheduleTasks@ActiveTaskIndex,w
  6113  039B  00D8               	movwf	??_ScheduleTasks
  6114  039C  3002               	movlw	2
  6115  039D                     u3455:	
  6116  039D  35D8               	lslf	??_ScheduleTasks,f
  6117  039E  3EFF               	addlw	-1
  6118  039F  1D03               	skipz
  6119  03A0  2B9D               	goto	u3455
  6120  03A1  3558               	lslf	??_ScheduleTasks,w
  6121  03A2  3E02               	addlw	2
  6122  03A3  3E20               	addlw	(low (_TaskTable| (0+256)))& (0+255)
  6123  03A4  0086               	movwf	6
  6124  03A5  3001               	movlw	1	; select bank2/3
  6125  03A6  0087               	movwf	7
  6126  03A7  0181               	clrf	1
  6127  03A8  0A81               	incf	1,f
  6128                           
  6129                           ;os_sched.c: 142: TaskTable[ActiveTaskIndex].Task(TaskTable[ActiveTaskIndex].Options);
  6130  03A9  085E               	movf	ScheduleTasks@ActiveTaskIndex,w
  6131  03AA  00D8               	movwf	??_ScheduleTasks
  6132  03AB  3002               	movlw	2
  6133  03AC                     u3465:	
  6134  03AC  35D8               	lslf	??_ScheduleTasks,f
  6135  03AD  3EFF               	addlw	-1
  6136  03AE  1D03               	skipz
  6137  03AF  2BAC               	goto	u3465
  6138  03B0  3558               	lslf	??_ScheduleTasks,w
  6139  03B1  3E07               	addlw	7
  6140  03B2  3E20               	addlw	(low (_TaskTable| (0+256)))& (0+255)
  6141  03B3  0086               	movwf	6
  6142  03B4  3001               	movlw	1	; select bank2/3
  6143  03B5  0087               	movwf	7
  6144  03B6  0801               	movf	1,w
  6145  03B7  00D9               	movwf	??_ScheduleTasks+1
  6146  03B8  0859               	movf	??_ScheduleTasks+1,w
  6147  03B9  00BC               	movwf	App_MainTask@Options
  6148  03BA  085E               	movf	ScheduleTasks@ActiveTaskIndex,w
  6149  03BB  00DA               	movwf	??_ScheduleTasks+2
  6150  03BC  3002               	movlw	2
  6151  03BD                     u3475:	
  6152  03BD  35DA               	lslf	??_ScheduleTasks+2,f
  6153  03BE  3EFF               	addlw	-1
  6154  03BF  1D03               	skipz
  6155  03C0  2BBD               	goto	u3475
  6156  03C1  355A               	lslf	??_ScheduleTasks+2,w
  6157  03C2  3E20               	addlw	(low (_TaskTable| (0+256)))& (0+255)
  6158  03C3  0086               	movwf	6
  6159  03C4  3001               	movlw	1	; select bank2/3
  6160  03C5  0087               	movwf	7
  6161  03C6  3F41               	moviw [1]fsr1
  6162  03C7  008A               	movwf	10
  6163  03C8  3F40               	moviw [0]fsr1
  6164  03C9  000A               	callw
  6165  03CA  3183               	pagesel	$
  6166                           
  6167                           ;os_sched.c: 143: }
  6168  03CB  2BED               	goto	l4573
  6169  03CC                     l4571:	
  6170                           
  6171                           ;os_sched.c: 144: else
  6172                           ;os_sched.c: 145: {
  6173                           ;os_sched.c: 146: TaskTable[ActiveTaskIndex].Counter++;
  6174  03CC  0020               	movlb	0	; select bank0
  6175  03CD  085E               	movf	ScheduleTasks@ActiveTaskIndex,w
  6176  03CE  00D8               	movwf	??_ScheduleTasks
  6177  03CF  3002               	movlw	2
  6178  03D0                     u3485:	
  6179  03D0  35D8               	lslf	??_ScheduleTasks,f
  6180  03D1  3EFF               	addlw	-1
  6181  03D2  1D03               	skipz
  6182  03D3  2BD0               	goto	u3485
  6183  03D4  3558               	lslf	??_ScheduleTasks,w
  6184  03D5  3E03               	addlw	3
  6185  03D6  3E20               	addlw	(low (_TaskTable| (0+256)))& (0+255)
  6186  03D7  0086               	movwf	6
  6187  03D8  3001               	movlw	1	; select bank2/3
  6188  03D9  0087               	movwf	7
  6189  03DA  3001               	movlw	1
  6190  03DB  0781               	addwf	1,f
  6191  03DC  3141               	addfsr 1,1
  6192  03DD  1803               	skipnc
  6193  03DE  0A81               	incf	1,f
  6194                           
  6195                           ;os_sched.c: 147: TaskTable[ActiveTaskIndex].State = TaskIdle;
  6196  03DF  085E               	movf	ScheduleTasks@ActiveTaskIndex,w
  6197  03E0  00D8               	movwf	??_ScheduleTasks
  6198  03E1  3002               	movlw	2
  6199  03E2                     u3495:	
  6200  03E2  35D8               	lslf	??_ScheduleTasks,f
  6201  03E3  3EFF               	addlw	-1
  6202  03E4  1D03               	skipz
  6203  03E5  2BE2               	goto	u3495
  6204  03E6  3558               	lslf	??_ScheduleTasks,w
  6205  03E7  3E02               	addlw	2
  6206  03E8  3E20               	addlw	(low (_TaskTable| (0+256)))& (0+255)
  6207  03E9  0086               	movwf	6
  6208  03EA  3001               	movlw	1	; select bank2/3
  6209  03EB  0087               	movwf	7
  6210  03EC  0181               	clrf	1
  6211  03ED                     l4573:	
  6212  03ED  3001               	movlw	1
  6213  03EE  0020               	movlb	0	; select bank0
  6214  03EF  00D8               	movwf	??_ScheduleTasks
  6215  03F0  0858               	movf	??_ScheduleTasks,w
  6216  03F1  07DE               	addwf	ScheduleTasks@ActiveTaskIndex,f
  6217  03F2  3000               	movlw	low (_TaskNumber| (0+32768))
  6218  03F3  0084               	movwf	4
  6219  03F4  3090               	movlw	high (_TaskNumber| (0+32768))
  6220  03F5  0085               	movwf	5
  6221  03F6  3F00               	moviw [0]fsr0
  6222  03F7  00D8               	movwf	??_ScheduleTasks
  6223  03F8  3F01               	moviw [1]fsr0
  6224  03F9  2B54               	goto	L5
  6225  03FA                     __end_of_ScheduleTasks:	
  6226                           
  6227                           	psect	text15
  6228  0D4A                     __ptext15:	
  6229 ;; *************** function _InitializeTasks *****************
  6230 ;; Defined at:
  6231 ;;		line 111 in file "../../../Framework/MercuryFwk/Source/c/02_Osl/os_sched.c"
  6232 ;; Parameters:    Size  Location     Type
  6233 ;;		None
  6234 ;; Auto vars:     Size  Location     Type
  6235 ;;  ActiveTaskIn    1   60[BANK0 ] unsigned char 
  6236 ;; Return value:  Size  Location     Type
  6237 ;;                  1    wreg      void 
  6238 ;; Registers used:
  6239 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6240 ;; Tracked objects:
  6241 ;;		On entry : 0/0
  6242 ;;		On exit  : 0/0
  6243 ;;		Unchanged: 0/0
  6244 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6245 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6246 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6247 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6248 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6249 ;;Total ram usage:        5 bytes
  6250 ;; Hardware stack levels used:    1
  6251 ;; Hardware stack levels required when called:    8
  6252 ;; This function calls:
  6253 ;;		_App_MainTask
  6254 ;;		_I2cSlv_MainTask
  6255 ;;		_I2c_DataReceiveSm
  6256 ;;		_Led_MainTask
  6257 ;;		_Wdg_MainTask
  6258 ;; This function is called by:
  6259 ;;		_MainScheduler
  6260 ;; This function uses a non-reentrant model
  6261 ;;
  6262                           
  6263                           
  6264                           ;psect for function _InitializeTasks
  6265  0D4A                     _InitializeTasks:	
  6266                           
  6267                           ;os_sched.c: 114: UINT8 ActiveTaskIndex = 0u;
  6268                           
  6269                           ;incstack = 0
  6270                           ; Regs used in _InitializeTasks: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  6271  0D4A  0020               	movlb	0	; select bank0
  6272  0D4B  01DC               	clrf	InitializeTasks@ActiveTaskIndex
  6273                           
  6274                           ;os_sched.c: 117: for (ActiveTaskIndex = 0u; ActiveTaskIndex < TaskNumber; ActiveTaskInd
      +                          ex++)
  6275  0D4C  01DC               	clrf	InitializeTasks@ActiveTaskIndex
  6276  0D4D  3000               	movlw	low (_TaskNumber| (0+32768))
  6277  0D4E  0084               	movwf	4
  6278  0D4F  3090               	movlw	high (_TaskNumber| (0+32768))
  6279  0D50  0085               	movwf	5
  6280  0D51  3F00               	moviw [0]fsr0
  6281  0D52  00D8               	movwf	??_InitializeTasks
  6282  0D53  3F01               	moviw [1]fsr0
  6283  0D54                     L6:	
  6284  0D54  00D9               	movwf	??_InitializeTasks+1
  6285  0D55  085C               	movf	InitializeTasks@ActiveTaskIndex,w
  6286  0D56  00DA               	movwf	??_InitializeTasks+2
  6287  0D57  01DB               	clrf	??_InitializeTasks+3
  6288  0D58  0859               	movf	??_InitializeTasks+1,w
  6289  0D59  025B               	subwf	??_InitializeTasks+3,w
  6290  0D5A  1D03               	skipz
  6291  0D5B  2D5E               	goto	u3365
  6292  0D5C  0858               	movf	??_InitializeTasks,w
  6293  0D5D  025A               	subwf	??_InitializeTasks+2,w
  6294  0D5E                     u3365:	
  6295  0D5E  1803               	btfsc	3,0
  6296  0D5F  0008               	return
  6297                           
  6298                           ;os_sched.c: 118: {
  6299                           ;os_sched.c: 119: TaskTable[ActiveTaskIndex].Task(TaskTable[ActiveTaskIndex].Options);
  6300  0D60  085C               	movf	InitializeTasks@ActiveTaskIndex,w
  6301  0D61  00D8               	movwf	??_InitializeTasks
  6302  0D62  3002               	movlw	2
  6303  0D63                     u3375:	
  6304  0D63  35D8               	lslf	??_InitializeTasks,f
  6305  0D64  3EFF               	addlw	-1
  6306  0D65  1D03               	skipz
  6307  0D66  2D63               	goto	u3375
  6308  0D67  3558               	lslf	??_InitializeTasks,w
  6309  0D68  3E07               	addlw	7
  6310  0D69  3E20               	addlw	(low (_TaskTable| (0+256)))& (0+255)
  6311  0D6A  0086               	movwf	6
  6312  0D6B  3001               	movlw	1	; select bank2/3
  6313  0D6C  0087               	movwf	7
  6314  0D6D  0801               	movf	1,w
  6315  0D6E  00D9               	movwf	??_InitializeTasks+1
  6316  0D6F  0859               	movf	??_InitializeTasks+1,w
  6317  0D70  00BC               	movwf	App_MainTask@Options
  6318  0D71  085C               	movf	InitializeTasks@ActiveTaskIndex,w
  6319  0D72  00DA               	movwf	??_InitializeTasks+2
  6320  0D73  3002               	movlw	2
  6321  0D74                     u3385:	
  6322  0D74  35DA               	lslf	??_InitializeTasks+2,f
  6323  0D75  3EFF               	addlw	-1
  6324  0D76  1D03               	skipz
  6325  0D77  2D74               	goto	u3385
  6326  0D78  355A               	lslf	??_InitializeTasks+2,w
  6327  0D79  3E20               	addlw	(low (_TaskTable| (0+256)))& (0+255)
  6328  0D7A  0086               	movwf	6
  6329  0D7B  3001               	movlw	1	; select bank2/3
  6330  0D7C  0087               	movwf	7
  6331  0D7D  3F41               	moviw [1]fsr1
  6332  0D7E  008A               	movwf	10
  6333  0D7F  3F40               	moviw [0]fsr1
  6334  0D80  000A               	callw
  6335  0D81  318D               	pagesel	$
  6336  0D82  3001               	movlw	1
  6337  0D83  0020               	movlb	0	; select bank0
  6338  0D84  00D8               	movwf	??_InitializeTasks
  6339  0D85  0858               	movf	??_InitializeTasks,w
  6340  0D86  07DC               	addwf	InitializeTasks@ActiveTaskIndex,f
  6341  0D87  3000               	movlw	low (_TaskNumber| (0+32768))
  6342  0D88  0084               	movwf	4
  6343  0D89  3090               	movlw	high (_TaskNumber| (0+32768))
  6344  0D8A  0085               	movwf	5
  6345  0D8B  3F00               	moviw [0]fsr0
  6346  0D8C  00D8               	movwf	??_InitializeTasks
  6347  0D8D  3F01               	moviw [1]fsr0
  6348  0D8E  2D54               	goto	L6
  6349  0D8F                     __end_of_InitializeTasks:	
  6350                           
  6351                           	psect	text16
  6352  05C5                     __ptext16:	
  6353 ;; *************** function _App_MainTask *****************
  6354 ;; Defined at:
  6355 ;;		line 358 in file "../Source/c/04_App/sb110_app.c"
  6356 ;; Parameters:    Size  Location     Type
  6357 ;;  Options         1   28[BANK0 ] unsigned char 
  6358 ;; Auto vars:     Size  Location     Type
  6359 ;;  WpuCh          12   38[BANK0 ] struct _WpuChType
  6360 ;;  AnalogChSel     8   30[BANK0 ] struct _AnalogChSelType
  6361 ;;  AdcConfig       6   50[BANK0 ] struct _AdcCfgType
  6362 ;; Return value:  Size  Location     Type
  6363 ;;                  1    wreg      void 
  6364 ;; Registers used:
  6365 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6366 ;; Tracked objects:
  6367 ;;		On entry : 0/0
  6368 ;;		On exit  : 0/0
  6369 ;;		Unchanged: 0/0
  6370 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6371 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6372 ;;      Locals:         0      26       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6373 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6374 ;;      Totals:         0      28       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6375 ;;Total ram usage:       28 bytes
  6376 ;; Hardware stack levels used:    1
  6377 ;; Hardware stack levels required when called:    7
  6378 ;; This function calls:
  6379 ;;		_Adc_ConfigAnCh
  6380 ;;		_Adc_InitAdcModule
  6381 ;;		_AppSm
  6382 ;;		_GenerateImpulse
  6383 ;;		_Mcu_ConfigPullUps
  6384 ;;		_Mcu_SetDieTempMode
  6385 ;;		_Mcu_SetDieTempSts
  6386 ;;		_Mcu_SetPullUpsSts
  6387 ;; This function is called by:
  6388 ;;		_InitializeTasks
  6389 ;;		_ScheduleTasks
  6390 ;; This function uses a non-reentrant model
  6391 ;;
  6392                           
  6393                           
  6394                           ;psect for function _App_MainTask
  6395  05C5                     _App_MainTask:	
  6396                           
  6397                           ;sb110_app.c: 360: WpuChType WpuCh = {((UINT8)(0)),((UINT8)(0)),((UINT8)(0)),((UINT8)(0)
      +                          ),((UINT8)(0)),((UINT8)(0)),((UINT8)(0)),((UINT8)(0)),((UINT8)(0)),((UINT8)(0)),((UINT8)
      +                          (0)),((UINT8)(0))};
  6398                           
  6399                           ;incstack = 0
  6400                           ; Regs used in _App_MainTask: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  6401  05C5  3048               	movlw	low App_MainTask@F3846
  6402  05C6  0086               	movwf	6
  6403  05C7  3001               	movlw	high App_MainTask@F3846
  6404  05C8  0087               	movwf	7
  6405  05C9  3046               	movlw	low App_MainTask@WpuCh
  6406  05CA  0084               	movwf	4
  6407  05CB  3000               	movlw	high App_MainTask@WpuCh
  6408  05CC  0085               	movwf	5
  6409  05CD  300C               	movlw	12
  6410  05CE  0020               	movlb	0	; select bank0
  6411  05CF  00BD               	movwf	??_App_MainTask
  6412  05D0                     u3340:	
  6413  05D0  0016               	moviw fsr1++
  6414  05D1  001A               	movwi fsr0++
  6415  05D2  0BBD               	decfsz	??_App_MainTask,f
  6416  05D3  2DD0               	goto	u3340
  6417                           
  6418                           ;sb110_app.c: 361: AnalogChSelType AnalogChSel = {((UINT8)(0)),((UINT8)(0)),((UINT8)(0))
      +                          ,((UINT8)(0)),((UINT8)(0)),((UINT8)(0)),((UINT8)(0)),((UINT8)(0))};
  6419  05D4  3054               	movlw	low App_MainTask@F3860
  6420  05D5  0086               	movwf	6
  6421  05D6  3001               	movlw	high App_MainTask@F3860
  6422  05D7  0087               	movwf	7
  6423  05D8  303E               	movlw	low App_MainTask@AnalogChSel
  6424  05D9  0084               	movwf	4
  6425  05DA  3000               	movlw	high App_MainTask@AnalogChSel
  6426  05DB  0085               	movwf	5
  6427  05DC  3008               	movlw	8
  6428  05DD  00BD               	movwf	??_App_MainTask
  6429  05DE                     u3350:	
  6430  05DE  0016               	moviw fsr1++
  6431  05DF  001A               	movwi fsr0++
  6432  05E0  0BBD               	decfsz	??_App_MainTask,f
  6433  05E1  2DDE               	goto	u3350
  6434                           
  6435                           ;sb110_app.c: 362: AdcConfigType AdcConfig;
  6436                           ;sb110_app.c: 364: switch (SystemState)
  6437  05E2  2E41               	goto	l4545
  6438  05E3                     l926:	
  6439                           ;sb110_app.c: 365: {
  6440                           ;sb110_app.c: 367: case InitializationState:
  6441                           
  6442                           
  6443                           ;sb110_app.c: 369: TRISCbits.TRISC2 = ((UINT8)(0));
  6444  05E3  0021               	movlb	1	; select bank1
  6445  05E4  110E               	bcf	14,2	;volatile
  6446                           
  6447                           ;sb110_app.c: 370: TRISCbits.TRISC3 = ((UINT8)(0));
  6448  05E5  118E               	bcf	14,3	;volatile
  6449                           
  6450                           ;sb110_app.c: 371: LATCbits.LATC2 = ((UINT8)(0));
  6451  05E6  0022               	movlb	2	; select bank2
  6452  05E7  110E               	bcf	14,2	;volatile
  6453                           
  6454                           ;sb110_app.c: 372: LATCbits.LATC3 = ((UINT8)(0));
  6455  05E8  118E               	bcf	14,3	;volatile
  6456                           
  6457                           ;sb110_app.c: 375: TRISAbits.TRISA5 = ((UINT8)(1));
  6458  05E9  0021               	movlb	1	; select bank1
  6459  05EA  168C               	bsf	12,5	;volatile
  6460                           
  6461                           ;sb110_app.c: 376: TRISAbits.TRISA4 = ((UINT8)(1));
  6462  05EB  160C               	bsf	12,4	;volatile
  6463                           
  6464                           ;sb110_app.c: 377: TRISCbits.TRISC5 = ((UINT8)(1));
  6465  05EC  168E               	bsf	14,5	;volatile
  6466                           
  6467                           ;sb110_app.c: 378: TRISCbits.TRISC4 = ((UINT8)(1));
  6468  05ED  160E               	bsf	14,4	;volatile
  6469                           
  6470                           ;sb110_app.c: 381: WpuCh.WpuA4 = ((UINT8)(1));
  6471  05EE  0020               	movlb	0	; select bank0
  6472  05EF  01CA               	clrf	App_MainTask@WpuCh+4
  6473  05F0  0ACA               	incf	App_MainTask@WpuCh+4,f
  6474                           
  6475                           ;sb110_app.c: 382: WpuCh.WpuA5 = ((UINT8)(1));
  6476  05F1  01CB               	clrf	App_MainTask@WpuCh+5
  6477  05F2  0ACB               	incf	App_MainTask@WpuCh+5,f
  6478                           
  6479                           ;sb110_app.c: 383: WpuCh.WpuC4 = ((UINT8)(1));
  6480  05F3  01D0               	clrf	App_MainTask@WpuCh+10
  6481  05F4  0AD0               	incf	App_MainTask@WpuCh+10,f
  6482                           
  6483                           ;sb110_app.c: 384: WpuCh.WpuC5 = ((UINT8)(1));
  6484  05F5  01D1               	clrf	App_MainTask@WpuCh+11
  6485  05F6  0AD1               	incf	App_MainTask@WpuCh+11,f
  6486                           
  6487                           ;sb110_app.c: 386: Mcu_ConfigPullUps(&WpuCh);
  6488  05F7  3046               	movlw	(low (App_MainTask@WpuCh| 0))& (0+255)
  6489  05F8  318F  2791  3185   	fcall	_Mcu_ConfigPullUps
  6490                           
  6491                           ;sb110_app.c: 387: Mcu_SetPullUpsSts(Mcu_GlobalPuEnabled);
  6492  05FB  3000               	movlw	0
  6493  05FC  3188  20E6  3185   	fcall	_Mcu_SetPullUpsSts
  6494                           
  6495                           ;sb110_app.c: 390: Adc_ConfigAnCh(&AnalogChSel);
  6496  05FF  303E               	movlw	(low (App_MainTask@AnalogChSel| 0))& (0+255)
  6497  0600  318D  258F  3185   	fcall	_Adc_ConfigAnCh
  6498                           
  6499                           ;sb110_app.c: 393: Mcu_SetDieTempSts(((UINT8)(1)));
  6500  0603  3001               	movlw	1
  6501  0604  3188  20DE  3185   	fcall	_Mcu_SetDieTempSts
  6502                           
  6503                           ;sb110_app.c: 394: Mcu_SetDieTempMode(((UINT8)(0)));
  6504  0607  3000               	movlw	0
  6505  0608  3188  20D6  3185   	fcall	_Mcu_SetDieTempMode
  6506                           
  6507                           ;sb110_app.c: 397: AdcConfig.AdcConvClock = ((UINT8)(3));
  6508  060B  3003               	movlw	3
  6509  060C  0020               	movlb	0	; select bank0
  6510  060D  00BD               	movwf	??_App_MainTask
  6511  060E  083D               	movf	??_App_MainTask,w
  6512  060F  00D4               	movwf	App_MainTask@AdcConfig+2
  6513                           
  6514                           ;sb110_app.c: 398: AdcConfig.AdcIntEnabled = ((UINT8)(0));
  6515  0610  01D7               	clrf	App_MainTask@AdcConfig+5
  6516                           
  6517                           ;sb110_app.c: 399: AdcConfig.AdcNegRef = ((UINT8)(0));
  6518  0611  01D5               	clrf	App_MainTask@AdcConfig+3
  6519                           
  6520                           ;sb110_app.c: 400: AdcConfig.AdcPosRef = ((UINT8)(0));
  6521  0612  01D6               	clrf	App_MainTask@AdcConfig+4
  6522                           
  6523                           ;sb110_app.c: 401: AdcConfig.AdcResultFormat = ((UINT8)(1));
  6524  0613  01D3               	clrf	App_MainTask@AdcConfig+1
  6525  0614  0AD3               	incf	App_MainTask@AdcConfig+1,f
  6526                           
  6527                           ;sb110_app.c: 402: AdcConfig.AdcEnable = ((UINT8)(1));
  6528  0615  01D2               	clrf	App_MainTask@AdcConfig
  6529  0616  0AD2               	incf	App_MainTask@AdcConfig,f
  6530                           
  6531                           ;sb110_app.c: 403: Adc_InitAdcModule(&AdcConfig);
  6532  0617  3052               	movlw	(low (App_MainTask@AdcConfig| 0))& (0+255)
  6533  0618  3187  27C4         	fcall	_Adc_InitAdcModule
  6534                           
  6535                           ;sb110_app.c: 406: Relay1Set.ImpulseState = Imp_Idle;
  6536  061A  0021               	movlb	1	; select bank1
  6537  061B  01C7               	clrf	_Relay1Set^(0+128)
  6538                           
  6539                           ;sb110_app.c: 407: Relay1Set.CounterMs = 0;
  6540  061C  01C8               	clrf	(_Relay1Set^(0+128)+1)
  6541  061D  01C9               	clrf	((_Relay1Set+1)^(0+128)+1)
  6542                           
  6543                           ;sb110_app.c: 408: Relay1Set.CounterS = 0;
  6544  061E  01CA               	clrf	(_Relay1Set^(0+128)+3)
  6545  061F  01CB               	clrf	((_Relay1Set+1)^(0+128)+3)
  6546                           
  6547                           ;sb110_app.c: 409: Relay1Set.ImpulseLen = 0;
  6548  0620  01CC               	clrf	(_Relay1Set^(0+128)+5)
  6549  0621  01CD               	clrf	((_Relay1Set+1)^(0+128)+5)
  6550                           
  6551                           ;sb110_app.c: 410: Relay1Set.Channel = ((UINT8)(1));
  6552  0622  01CE               	clrf	(_Relay1Set^(0+128)+7)
  6553  0623  0ACE               	incf	(_Relay1Set^(0+128)+7),f
  6554                           
  6555                           ;sb110_app.c: 411: Relay1Set.StartEvt.EventOptions = 0;
  6556  0624  01CF               	clrf	(_Relay1Set^(0+128)+8)
  6557                           
  6558                           ;sb110_app.c: 412: Relay1Set.StartEvt.EventStatus = EventIdle;
  6559  0625  01D0               	clrf	(_Relay1Set^(0+128)+9)
  6560                           
  6561                           ;sb110_app.c: 414: Relay2Set.ImpulseState = Imp_Idle;
  6562  0626  01BD               	clrf	_Relay2Set^(0+128)
  6563                           
  6564                           ;sb110_app.c: 415: Relay2Set.CounterMs = 0;
  6565  0627  01BE               	clrf	(_Relay2Set^(0+128)+1)
  6566  0628  01BF               	clrf	((_Relay2Set+1)^(0+128)+1)
  6567                           
  6568                           ;sb110_app.c: 416: Relay2Set.CounterS = 0;
  6569  0629  01C0               	clrf	(_Relay2Set^(0+128)+3)
  6570  062A  01C1               	clrf	((_Relay2Set+1)^(0+128)+3)
  6571                           
  6572                           ;sb110_app.c: 417: Relay2Set.ImpulseLen = 0;
  6573  062B  01C2               	clrf	(_Relay2Set^(0+128)+5)
  6574  062C  01C3               	clrf	((_Relay2Set+1)^(0+128)+5)
  6575                           
  6576                           ;sb110_app.c: 418: Relay2Set.Channel = ((UINT8)(2));
  6577  062D  3002               	movlw	2
  6578  062E  0020               	movlb	0	; select bank0
  6579  062F  00BD               	movwf	??_App_MainTask
  6580  0630  083D               	movf	??_App_MainTask,w
  6581  0631  0021               	movlb	1	; select bank1
  6582  0632  00C4               	movwf	(_Relay2Set^(0+128)+7)
  6583                           
  6584                           ;sb110_app.c: 419: Relay2Set.StartEvt.EventOptions = 0;
  6585  0633  01C5               	clrf	(_Relay2Set^(0+128)+8)
  6586                           
  6587                           ;sb110_app.c: 420: Relay2Set.StartEvt.EventStatus = EventIdle;
  6588  0634  01C6               	clrf	(_Relay2Set^(0+128)+9)
  6589                           
  6590                           ;sb110_app.c: 421: break;
  6591  0635  0008               	return
  6592  0636                     l4541:	
  6593                           ;sb110_app.c: 424: case RunningState:
  6594                           
  6595                           
  6596                           ;sb110_app.c: 426: AppSm();
  6597  0636  318B  23B5  3185   	fcall	_AppSm
  6598                           
  6599                           ;sb110_app.c: 428: GenerateImpulse(&Relay1Set);
  6600  0639  30C7               	movlw	(low (_Relay1Set| 0))& (0+255)
  6601  063A  3187  274A  3185   	fcall	_GenerateImpulse
  6602                           
  6603                           ;sb110_app.c: 429: GenerateImpulse(&Relay2Set);
  6604  063D  30BD               	movlw	(low (_Relay2Set| 0))& (0+255)
  6605  063E  3187  274A         	fcall	_GenerateImpulse
  6606                           
  6607                           ;sb110_app.c: 435: }
  6608                           
  6609                           ;sb110_app.c: 434: break;
  6610                           
  6611                           ;sb110_app.c: 433: default:
  6612                           
  6613                           ;sb110_app.c: 430: break;
  6614  0640  0008               	return
  6615  0641                     l4545:	
  6616  0641  0020               	movlb	0	; select bank0
  6617  0642  0860               	movf	_SystemState,w
  6618                           
  6619                           ; Switch size 1, requested type "space"
  6620                           ; Number of cases is 2, Range of values is 0 to 1
  6621                           ; switch strategies available:
  6622                           ; Name         Instructions Cycles
  6623                           ; simple_byte            7     4 (average)
  6624                           ; direct_byte           10     6 (fixed)
  6625                           ; jumptable            260     6 (fixed)
  6626                           ;	Chosen strategy is simple_byte
  6627  0643  3A00               	xorlw	0	; case 0
  6628  0644  1903               	skipnz
  6629  0645  2DE3               	goto	l926
  6630  0646  3A01               	xorlw	1	; case 1
  6631  0647  1903               	skipnz
  6632  0648  2E36               	goto	l4541
  6633  0649  2E4A               	goto	l930
  6634  064A                     l930:	
  6635  064A  0008               	return
  6636  064B                     __end_of_App_MainTask:	
  6637                           
  6638                           	psect	text17
  6639  0C9F                     __ptext17:	
  6640 ;; *************** function _Led_MainTask *****************
  6641 ;; Defined at:
  6642 ;;		line 185 in file "../../../Framework/MercuryFwk/Source/c/03_Sml/02_Ssl/led.c"
  6643 ;; Parameters:    Size  Location     Type
  6644 ;;  Options         1   28[BANK0 ] unsigned char 
  6645 ;; Auto vars:     Size  Location     Type
  6646 ;;		None
  6647 ;; Return value:  Size  Location     Type
  6648 ;;                  1    wreg      void 
  6649 ;; Registers used:
  6650 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6651 ;; Tracked objects:
  6652 ;;		On entry : 0/0
  6653 ;;		On exit  : 0/0
  6654 ;;		Unchanged: 0/0
  6655 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6656 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6657 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6658 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6659 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6660 ;;Total ram usage:        5 bytes
  6661 ;; Hardware stack levels used:    1
  6662 ;; Hardware stack levels required when called:    5
  6663 ;; This function calls:
  6664 ;;		_LedStateMachine
  6665 ;;		_Led_InitSeq
  6666 ;;		_SetLedBehavSts
  6667 ;; This function is called by:
  6668 ;;		_InitializeTasks
  6669 ;;		_ScheduleTasks
  6670 ;; This function uses a non-reentrant model
  6671 ;;
  6672                           
  6673                           
  6674                           ;psect for function _Led_MainTask
  6675  0C9F                     _Led_MainTask:	
  6676                           
  6677                           ;led.c: 187: switch (SystemState)
  6678                           
  6679                           ;incstack = 0
  6680                           ; Regs used in _Led_MainTask: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  6681  0C9F  2CC8               	goto	l4489
  6682  0CA0                     l615:	
  6683                           ;led.c: 188: {
  6684                           ;led.c: 190: case InitializationState:
  6685                           
  6686                           
  6687                           ;led.c: 192: TRISAbits.TRISA2 = ((UINT8)(0));
  6688  0CA0  0021               	movlb	1	; select bank1
  6689  0CA1  110C               	bcf	12,2	;volatile
  6690                           
  6691                           ;led.c: 193: LATAbits.LATA2 = ((UINT8)(0));
  6692  0CA2  0022               	movlb	2	; select bank2
  6693  0CA3  110C               	bcf	12,2	;volatile
  6694                           
  6695                           ;led.c: 195: SetLedBehavSts(((UINT8)(1)));
  6696  0CA4  3001               	movlw	1
  6697  0CA5  318D  2507         	fcall	_SetLedBehavSts
  6698                           
  6699                           ;led.c: 196: break;
  6700  0CA7  0008               	return
  6701  0CA8                     l4483:	
  6702                           ;led.c: 199: case RunningState:
  6703                           
  6704                           
  6705                           ;led.c: 201: Led_InitSeq();
  6706  0CA8  318E  2625  318C   	fcall	_Led_InitSeq
  6707                           
  6708                           ;led.c: 203: LATAbits.LATA2 = LedStateMachine(1u,&Led1Sts,&Led1Blink,&Led1Pulse);
  6709  0CAB  30E8               	movlw	(low (_Led1Sts| 0))& (0+255)
  6710  0CAC  0020               	movlb	0	; select bank0
  6711  0CAD  00BD               	movwf	??_Led_MainTask
  6712  0CAE  083D               	movf	??_Led_MainTask,w
  6713  0CAF  00AB               	movwf	LedStateMachine@LedSts
  6714  0CB0  30D1               	movlw	(low (_Led1Blink| 0))& (0+255)
  6715  0CB1  00BE               	movwf	??_Led_MainTask+1
  6716  0CB2  083E               	movf	??_Led_MainTask+1,w
  6717  0CB3  00AC               	movwf	LedStateMachine@LedBlink
  6718  0CB4  30DA               	movlw	(low (_Led1Pulse| 0))& (0+255)
  6719  0CB5  00BF               	movwf	??_Led_MainTask+2
  6720  0CB6  083F               	movf	??_Led_MainTask+2,w
  6721  0CB7  00AD               	movwf	LedStateMachine@LedPulse
  6722  0CB8  3001               	movlw	1
  6723  0CB9  318C  246E         	fcall	_LedStateMachine
  6724  0CBB  0020               	movlb	0	; select bank0
  6725  0CBC  00C0               	movwf	??_Led_MainTask+3
  6726  0CBD  0DC0               	rlf	??_Led_MainTask+3,f
  6727  0CBE  0DC0               	rlf	??_Led_MainTask+3,f
  6728  0CBF  0022               	movlb	2	; select bank2
  6729  0CC0  080C               	movf	12,w	;volatile
  6730  0CC1  0020               	movlb	0	; select bank0
  6731  0CC2  0640               	xorwf	??_Led_MainTask+3,w
  6732  0CC3  39FB               	andlw	-5
  6733  0CC4  0640               	xorwf	??_Led_MainTask+3,w
  6734  0CC5  0022               	movlb	2	; select bank2
  6735  0CC6  008C               	movwf	12	;volatile
  6736                           
  6737                           ;led.c: 209: }
  6738                           
  6739                           ;led.c: 208: break;
  6740                           
  6741                           ;led.c: 207: default:
  6742                           
  6743                           ;led.c: 204: break;
  6744  0CC7  0008               	return
  6745  0CC8                     l4489:	
  6746  0CC8  0020               	movlb	0	; select bank0
  6747  0CC9  0860               	movf	_SystemState,w
  6748                           
  6749                           ; Switch size 1, requested type "space"
  6750                           ; Number of cases is 2, Range of values is 0 to 1
  6751                           ; switch strategies available:
  6752                           ; Name         Instructions Cycles
  6753                           ; simple_byte            7     4 (average)
  6754                           ; direct_byte           10     6 (fixed)
  6755                           ; jumptable            260     6 (fixed)
  6756                           ;	Chosen strategy is simple_byte
  6757  0CCA  3A00               	xorlw	0	; case 0
  6758  0CCB  1903               	skipnz
  6759  0CCC  2CA0               	goto	l615
  6760  0CCD  3A01               	xorlw	1	; case 1
  6761  0CCE  1903               	skipnz
  6762  0CCF  2CA8               	goto	l4483
  6763  0CD0  2CD1               	goto	l619
  6764  0CD1                     l619:	
  6765  0CD1  0008               	return
  6766  0CD2                     __end_of_Led_MainTask:	
  6767                           
  6768                           	psect	text18
  6769  09C5                     __ptext18:	
  6770 ;; *************** function _I2cSlv_MainTask *****************
  6771 ;; Defined at:
  6772 ;;		line 109 in file "../../../Framework/MercuryFwk/Source/c/03_Sml/01_Pml/01_SlvI2c/i2c_slv.c"
  6773 ;; Parameters:    Size  Location     Type
  6774 ;;  Options         1   28[BANK0 ] unsigned char 
  6775 ;; Auto vars:     Size  Location     Type
  6776 ;;		None
  6777 ;; Return value:  Size  Location     Type
  6778 ;;                  1    wreg      void 
  6779 ;; Registers used:
  6780 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6781 ;; Tracked objects:
  6782 ;;		On entry : 0/0
  6783 ;;		On exit  : 0/0
  6784 ;;		Unchanged: 0/0
  6785 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6786 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6787 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6788 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6789 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6790 ;;Total ram usage:        1 bytes
  6791 ;; Hardware stack levels used:    1
  6792 ;; Hardware stack levels required when called:    4
  6793 ;; This function calls:
  6794 ;;		_I2cSlv_I2cDrvHandle
  6795 ;;		_I2c_InitI2cModule
  6796 ;;		_I2c_SetConfig
  6797 ;; This function is called by:
  6798 ;;		_InitializeTasks
  6799 ;;		_ScheduleTasks
  6800 ;; This function uses a non-reentrant model
  6801 ;;
  6802                           
  6803                           
  6804                           ;psect for function _I2cSlv_MainTask
  6805  09C5                     _I2cSlv_MainTask:	
  6806                           
  6807                           ;i2c_slv.c: 111: switch (SystemState)
  6808                           
  6809                           ;incstack = 0
  6810                           ; Regs used in _I2cSlv_MainTask: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  6811  09C5  29D0               	goto	l4477
  6812  09C6                     l4469:	
  6813                           ;i2c_slv.c: 112: {
  6814                           ;i2c_slv.c: 114: case InitializationState:
  6815                           
  6816                           
  6817                           ;i2c_slv.c: 116: I2c_SetConfig();
  6818  09C6  3189  21DA  3189   	fcall	_I2c_SetConfig
  6819                           
  6820                           ;i2c_slv.c: 118: I2c_InitI2cModule(&I2cConfig);
  6821  09C9  30B2               	movlw	(low (_I2cConfig| 0))& (0+255)
  6822  09CA  3183  23FA         	fcall	_I2c_InitI2cModule
  6823                           
  6824                           ;i2c_slv.c: 119: break;
  6825  09CC  0008               	return
  6826  09CD                     l4473:	
  6827                           ;i2c_slv.c: 122: case RunningState:
  6828                           
  6829                           
  6830                           ;i2c_slv.c: 124: I2cSlv_I2cDrvHandle();
  6831  09CD  3185  2536         	fcall	_I2cSlv_I2cDrvHandle
  6832                           
  6833                           ;i2c_slv.c: 130: }
  6834                           
  6835                           ;i2c_slv.c: 129: break;
  6836                           
  6837                           ;i2c_slv.c: 128: default:
  6838                           
  6839                           ;i2c_slv.c: 125: break;
  6840  09CF  0008               	return
  6841  09D0                     l4477:	
  6842  09D0  0020               	movlb	0	; select bank0
  6843  09D1  0860               	movf	_SystemState,w
  6844                           
  6845                           ; Switch size 1, requested type "space"
  6846                           ; Number of cases is 2, Range of values is 0 to 1
  6847                           ; switch strategies available:
  6848                           ; Name         Instructions Cycles
  6849                           ; simple_byte            7     4 (average)
  6850                           ; direct_byte           10     6 (fixed)
  6851                           ; jumptable            260     6 (fixed)
  6852                           ;	Chosen strategy is simple_byte
  6853  09D2  3A00               	xorlw	0	; case 0
  6854  09D3  1903               	skipnz
  6855  09D4  29C6               	goto	l4469
  6856  09D5  3A01               	xorlw	1	; case 1
  6857  09D6  1903               	skipnz
  6858  09D7  29CD               	goto	l4473
  6859  09D8  29D9               	goto	l534
  6860  09D9                     l534:	
  6861  09D9  0008               	return
  6862  09DA                     __end_of_I2cSlv_MainTask:	
  6863                           
  6864                           	psect	text19
  6865  00A5                     __ptext19:	
  6866 ;; *************** function _I2c_DataReceiveSm *****************
  6867 ;; Defined at:
  6868 ;;		line 298 in file "../../../Framework/MercuryFwk/Source/c/01_Hal/02_Drv/i2c_slv_drv.c"
  6869 ;; Parameters:    Size  Location     Type
  6870 ;;  Options         1   28[BANK0 ] unsigned char 
  6871 ;; Auto vars:     Size  Location     Type
  6872 ;;  Index           1   36[BANK0 ] unsigned char 
  6873 ;; Return value:  Size  Location     Type
  6874 ;;                  1    wreg      void 
  6875 ;; Registers used:
  6876 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6877 ;; Tracked objects:
  6878 ;;		On entry : 0/0
  6879 ;;		On exit  : 0/0
  6880 ;;		Unchanged: 0/0
  6881 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6882 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6883 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6884 ;;      Temps:          0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6885 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6886 ;;Total ram usage:        9 bytes
  6887 ;; Hardware stack levels used:    1
  6888 ;; Hardware stack levels required when called:    3
  6889 ;; This function calls:
  6890 ;;		_CheckAckStatus
  6891 ;;		_CheckByteStatus
  6892 ;;		_CheckStopBitStatus
  6893 ;;		_ClearRxBuffer
  6894 ;;		_ClearTxBuffer
  6895 ;;		_GenerateEvt
  6896 ;;		_Mcu_Reset
  6897 ;;		_ReceiveEvt
  6898 ;; This function is called by:
  6899 ;;		_InitializeTasks
  6900 ;;		_ScheduleTasks
  6901 ;; This function uses a non-reentrant model
  6902 ;;
  6903                           
  6904                           
  6905                           ;psect for function _I2c_DataReceiveSm
  6906  00A5                     _I2c_DataReceiveSm:	
  6907                           
  6908                           ;i2c_slv_drv.c: 301: static I2cRxStateType I2cRxState = CheckRxByte;
  6909                           ;i2c_slv_drv.c: 302: static UINT8 I2cRxAddress;
  6910                           ;i2c_slv_drv.c: 303: static UINT8 I2cRxFlag = ((UINT8)(0));
  6911                           ;i2c_slv_drv.c: 304: static UINT8 OpType;
  6912                           ;i2c_slv_drv.c: 305: static UINT8 RxCounter = 0;
  6913                           ;i2c_slv_drv.c: 306: static UINT8 TxCounter = 0;
  6914                           ;i2c_slv_drv.c: 307: static UINT8 AddressStored = 0;
  6915                           ;i2c_slv_drv.c: 308: static UINT8 ErrorCounter = 0;
  6916                           ;i2c_slv_drv.c: 309: UINT8 Index;
  6917                           ;i2c_slv_drv.c: 311: switch (I2cRxState)
  6918                           
  6919                           ;incstack = 0
  6920                           ; Regs used in _I2c_DataReceiveSm: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  6921  00A5  2994               	goto	l4447
  6922  00A6                     l4355:	
  6923                           ;i2c_slv_drv.c: 312: {
  6924                           ;i2c_slv_drv.c: 313: case CheckRxByte:
  6925                           
  6926                           
  6927                           ;i2c_slv_drv.c: 315: if (ReceiveEvt(&I2cNewTxNotification))
  6928  00A6  30E4               	movlw	(low (_I2cNewTxNotification| 0))& (0+255)
  6929  00A7  318A  22D9  3180   	fcall	_ReceiveEvt
  6930  00AA  3A00               	xorlw	0
  6931  00AB  1903               	skipnz
  6932  00AC  0008               	return
  6933                           
  6934                           ;i2c_slv_drv.c: 316: {
  6935                           ;i2c_slv_drv.c: 318: if (CheckByteStatus() == ((UINT8)(0)))
  6936  00AD  3189  2101  3180   	fcall	_CheckByteStatus
  6937  00B0  3A00               	xorlw	0
  6938  00B1  1D03               	skipz
  6939  00B2  28D0               	goto	l4375
  6940                           
  6941                           ;i2c_slv_drv.c: 319: {
  6942                           ;i2c_slv_drv.c: 320: if (AddressStored == 1)
  6943  00B3  0021               	movlb	1	; select bank1
  6944  00B4  0331               	decf	I2c_DataReceiveSm@AddressStored^(0+128),w
  6945  00B5  1D03               	btfss	3,2
  6946  00B6  28C5               	goto	l4367
  6947                           
  6948                           ;i2c_slv_drv.c: 321: {
  6949                           ;i2c_slv_drv.c: 323: ErrorCounter++;
  6950  00B7  3001               	movlw	1
  6951  00B8  0020               	movlb	0	; select bank0
  6952  00B9  00BD               	movwf	??_I2c_DataReceiveSm
  6953  00BA  083D               	movf	??_I2c_DataReceiveSm,w
  6954  00BB  0021               	movlb	1	; select bank1
  6955  00BC  07B0               	addwf	I2c_DataReceiveSm@ErrorCounter^(0+128),f
  6956                           
  6957                           ;i2c_slv_drv.c: 325: if (ErrorCounter > 10u)
  6958  00BD  300B               	movlw	11
  6959  00BE  0230               	subwf	I2c_DataReceiveSm@ErrorCounter^(0+128),w
  6960  00BF  1C03               	skipc
  6961  00C0  28C7               	goto	l4369
  6962                           
  6963                           ;i2c_slv_drv.c: 326: {
  6964                           ;i2c_slv_drv.c: 327: Mcu_Reset();
  6965  00C1  3188  20AC  3180   	fcall	_Mcu_Reset
  6966                           
  6967                           ;i2c_slv_drv.c: 328: }
  6968                           ;i2c_slv_drv.c: 329: }
  6969  00C4  28C7               	goto	l4369
  6970  00C5                     l4367:	
  6971                           
  6972                           ;i2c_slv_drv.c: 330: else
  6973                           ;i2c_slv_drv.c: 331: {
  6974                           ;i2c_slv_drv.c: 333: ErrorCounter = 0;
  6975  00C5  0021               	movlb	1	; select bank1
  6976  00C6  01B0               	clrf	I2c_DataReceiveSm@ErrorCounter^(0+128)
  6977  00C7                     l4369:	
  6978                           
  6979                           ;i2c_slv_drv.c: 334: }
  6980                           ;i2c_slv_drv.c: 336: AddressStored = 1;
  6981  00C7  0021               	movlb	1	; select bank1
  6982  00C8  01B1               	clrf	I2c_DataReceiveSm@AddressStored^(0+128)
  6983  00C9  0AB1               	incf	I2c_DataReceiveSm@AddressStored^(0+128),f
  6984                           
  6985                           ;i2c_slv_drv.c: 338: I2cRxFlag = ((UINT8)(1));
  6986  00CA  01F8               	clrf	I2c_DataReceiveSm@I2cRxFlag
  6987  00CB  0AF8               	incf	I2c_DataReceiveSm@I2cRxFlag,f
  6988                           
  6989                           ;i2c_slv_drv.c: 340: I2cRxState = StoreAddrByte;
  6990  00CC  0020               	movlb	0	; select bank0
  6991  00CD  01E5               	clrf	I2c_DataReceiveSm@I2cRxState
  6992  00CE  0AE5               	incf	I2c_DataReceiveSm@I2cRxState,f
  6993                           
  6994                           ;i2c_slv_drv.c: 341: }
  6995  00CF  0008               	return
  6996  00D0                     l4375:	
  6997                           
  6998                           ;i2c_slv_drv.c: 342: else if ((CheckByteStatus() == ((UINT8)(1))) && (I2cRxFlag == ((UIN
      +                          T8)(1))))
  6999  00D0  3189  2101  3180   	fcall	_CheckByteStatus
  7000  00D3  3A01               	xorlw	1
  7001  00D4  1D03               	skipz
  7002  00D5  0008               	return
  7003  00D6  0378               	decf	I2c_DataReceiveSm@I2cRxFlag,w
  7004  00D7  1D03               	btfss	3,2
  7005  00D8  0008               	return
  7006                           
  7007                           ;i2c_slv_drv.c: 343: {
  7008                           ;i2c_slv_drv.c: 345: AddressStored = 0;
  7009  00D9  0021               	movlb	1	; select bank1
  7010  00DA  01B1               	clrf	I2c_DataReceiveSm@AddressStored^(0+128)
  7011                           
  7012                           ;i2c_slv_drv.c: 346: if (OpType == ((UINT8)(0)))
  7013  00DB  0020               	movlb	0	; select bank0
  7014  00DC  0863               	movf	I2c_DataReceiveSm@OpType,w
  7015  00DD  1D03               	btfss	3,2
  7016  00DE  28E4               	goto	l4385
  7017                           
  7018                           ;i2c_slv_drv.c: 347: {
  7019                           ;i2c_slv_drv.c: 349: I2cRxState = HandleWrite;
  7020  00DF  3002               	movlw	2
  7021  00E0  00BD               	movwf	??_I2c_DataReceiveSm
  7022  00E1  083D               	movf	??_I2c_DataReceiveSm,w
  7023  00E2  00E5               	movwf	I2c_DataReceiveSm@I2cRxState
  7024                           
  7025                           ;i2c_slv_drv.c: 350: }
  7026  00E3  0008               	return
  7027  00E4                     l4385:	
  7028                           
  7029                           ;i2c_slv_drv.c: 351: else
  7030                           ;i2c_slv_drv.c: 352: {
  7031                           ;i2c_slv_drv.c: 354: I2cRxState = HandleRead;
  7032  00E4  3003               	movlw	3
  7033  00E5  00BD               	movwf	??_I2c_DataReceiveSm
  7034  00E6  083D               	movf	??_I2c_DataReceiveSm,w
  7035  00E7  00E5               	movwf	I2c_DataReceiveSm@I2cRxState
  7036                           
  7037                           ;i2c_slv_drv.c: 360: }
  7038                           ;i2c_slv_drv.c: 361: }
  7039                           ;i2c_slv_drv.c: 362: break;
  7040                           
  7041                           ;i2c_slv_drv.c: 357: else
  7042                           ;i2c_slv_drv.c: 358: {
  7043                           
  7044                           ;i2c_slv_drv.c: 355: }
  7045                           ;i2c_slv_drv.c: 356: }
  7046  00E8  0008               	return
  7047  00E9                     l4387:	
  7048                           ;i2c_slv_drv.c: 364: case StoreAddrByte:
  7049                           
  7050                           
  7051                           ;i2c_slv_drv.c: 366: I2cRxAddress = SSP1BUF;
  7052  00E9  0024               	movlb	4	; select bank4
  7053  00EA  0811               	movf	17,w	;volatile
  7054  00EB  0020               	movlb	0	; select bank0
  7055  00EC  00BD               	movwf	??_I2c_DataReceiveSm
  7056  00ED  083D               	movf	??_I2c_DataReceiveSm,w
  7057  00EE  00E4               	movwf	I2c_DataReceiveSm@I2cRxAddress
  7058                           
  7059                           ;i2c_slv_drv.c: 368: I2cRxAddress = (I2cRxAddress >> ((UINT8)(1)));
  7060  00EF  3664               	lsrf	I2c_DataReceiveSm@I2cRxAddress,w
  7061  00F0  00BD               	movwf	??_I2c_DataReceiveSm
  7062  00F1  083D               	movf	??_I2c_DataReceiveSm,w
  7063  00F2  00E4               	movwf	I2c_DataReceiveSm@I2cRxAddress
  7064                           
  7065                           ;i2c_slv_drv.c: 370: OpType = (SSP1BUF & ((UINT8)(0x01)));
  7066  00F3  0024               	movlb	4	; select bank4
  7067  00F4  0811               	movf	17,w	;volatile
  7068  00F5  3901               	andlw	1
  7069  00F6  0020               	movlb	0	; select bank0
  7070  00F7  00BD               	movwf	??_I2c_DataReceiveSm
  7071  00F8  083D               	movf	??_I2c_DataReceiveSm,w
  7072  00F9  00E3               	movwf	I2c_DataReceiveSm@OpType
  7073                           
  7074                           ;i2c_slv_drv.c: 372: if (OpType == ((UINT8)(1)))
  7075  00FA  0363               	decf	I2c_DataReceiveSm@OpType,w
  7076  00FB  1D03               	btfss	3,2
  7077  00FC  290A               	goto	l4399
  7078                           
  7079                           ;i2c_slv_drv.c: 373: {
  7080                           ;i2c_slv_drv.c: 375: SSP1BUF = I2cTxBuffer[TxCounter];
  7081  00FD  0861               	movf	I2c_DataReceiveSm@TxCounter,w
  7082  00FE  3EA0               	addlw	(low (_I2cTxBuffer| (0+512)))& (0+255)
  7083  00FF  0086               	movwf	6
  7084  0100  3002               	movlw	2	; select bank5/6
  7085  0101  0087               	movwf	7
  7086  0102  0801               	movf	1,w
  7087  0103  0024               	movlb	4	; select bank4
  7088  0104  0091               	movwf	17	;volatile
  7089                           
  7090                           ;i2c_slv_drv.c: 377: TxCounter++;
  7091  0105  3001               	movlw	1
  7092  0106  0020               	movlb	0	; select bank0
  7093  0107  00BD               	movwf	??_I2c_DataReceiveSm
  7094  0108  083D               	movf	??_I2c_DataReceiveSm,w
  7095  0109  07E1               	addwf	I2c_DataReceiveSm@TxCounter,f
  7096  010A                     l4399:	
  7097                           ;i2c_slv_drv.c: 379: else
  7098                           ;i2c_slv_drv.c: 380: {
  7099                           
  7100                           ;i2c_slv_drv.c: 378: }
  7101                           
  7102                           
  7103                           ;i2c_slv_drv.c: 382: }
  7104                           ;i2c_slv_drv.c: 384: I2cRxState = StopClkStretch;
  7105  010A  3004               	movlw	4
  7106  010B  00BD               	movwf	??_I2c_DataReceiveSm
  7107  010C  083D               	movf	??_I2c_DataReceiveSm,w
  7108  010D  00E5               	movwf	I2c_DataReceiveSm@I2cRxState
  7109                           
  7110                           ;i2c_slv_drv.c: 385: break;
  7111  010E  0008               	return
  7112  010F                     l4401:	
  7113                           ;i2c_slv_drv.c: 387: case HandleWrite:
  7114                           
  7115                           
  7116                           ;i2c_slv_drv.c: 389: if (CheckStopBitStatus() == ((UINT8)(1)))
  7117  010F  3189  210B  3180   	fcall	_CheckStopBitStatus
  7118  0112  3A01               	xorlw	1
  7119  0113  1D03               	skipz
  7120  0114  295A               	goto	l4425
  7121                           
  7122                           ;i2c_slv_drv.c: 390: {
  7123                           ;i2c_slv_drv.c: 392: I2cRxFlag = ((UINT8)(0));
  7124  0115  01F8               	clrf	I2c_DataReceiveSm@I2cRxFlag
  7125                           
  7126                           ;i2c_slv_drv.c: 394: I2cPacket.Lenght = RxCounter;
  7127  0116  30EF               	movlw	239
  7128  0117  0086               	movwf	6
  7129  0118  3023               	movlw	35
  7130  0119  0087               	movwf	7
  7131  011A  0020               	movlb	0	; select bank0
  7132  011B  0862               	movf	I2c_DataReceiveSm@RxCounter,w
  7133  011C  0081               	movwf	1
  7134                           
  7135                           ;i2c_slv_drv.c: 395: I2cPacket.ReadWrite = ((UINT8)(0));
  7136  011D  309D               	movlw	157
  7137  011E  0086               	movwf	6
  7138  011F  3023               	movlw	35
  7139  0120  0087               	movwf	7
  7140  0121  3141               	addfsr 1,1
  7141  0122  0181               	clrf	1
  7142                           
  7143                           ;i2c_slv_drv.c: 396: I2cPacket.SlaveAddress = I2cRxAddress;
  7144  0123  309D               	movlw	157
  7145  0124  0086               	movwf	6
  7146  0125  3023               	movlw	35
  7147  0126  0087               	movwf	7
  7148  0127  0864               	movf	I2c_DataReceiveSm@I2cRxAddress,w
  7149  0128  3FC0               	movwi [0]fsr1
  7150                           
  7151                           ;i2c_slv_drv.c: 397: for (Index = 0; Index < ((UINT8)(80)); Index++)
  7152  0129  01C4               	clrf	I2c_DataReceiveSm@Index
  7153  012A  3050               	movlw	80
  7154  012B  0244               	subwf	I2c_DataReceiveSm@Index,w
  7155  012C  1803               	btfsc	3,0
  7156  012D  2950               	goto	l4419
  7157  012E                     l4413:	
  7158                           
  7159                           ;i2c_slv_drv.c: 398: {
  7160                           ;i2c_slv_drv.c: 399: I2cPacket.Buffer[Index] = I2cRxBuffer[Index];
  7161  012E  0844               	movf	I2c_DataReceiveSm@Index,w
  7162  012F  3E20               	addlw	(low (_I2cRxBuffer| (0+768)))& (0+255)
  7163  0130  0086               	movwf	6
  7164  0131  3003               	movlw	3	; select bank6/7
  7165  0132  0087               	movwf	7
  7166  0133  0801               	movf	1,w
  7167  0134  00BD               	movwf	??_I2c_DataReceiveSm
  7168  0135  0844               	movf	I2c_DataReceiveSm@Index,w
  7169  0136  00BE               	movwf	??_I2c_DataReceiveSm+1
  7170  0137  01BF               	clrf	??_I2c_DataReceiveSm+2
  7171  0138  309F               	movlw	159
  7172  0139  00C0               	movwf	??_I2c_DataReceiveSm+3
  7173  013A  3023               	movlw	35
  7174  013B  00C1               	movwf	??_I2c_DataReceiveSm+4
  7175  013C  083E               	movf	??_I2c_DataReceiveSm+1,w
  7176  013D  0740               	addwf	??_I2c_DataReceiveSm+3,w
  7177  013E  00C2               	movwf	??_I2c_DataReceiveSm+5
  7178  013F  083F               	movf	??_I2c_DataReceiveSm+2,w
  7179  0140  3D41               	addwfc	??_I2c_DataReceiveSm+4,w
  7180  0141  00C3               	movwf	??_I2c_DataReceiveSm+6
  7181  0142  0842               	movf	??_I2c_DataReceiveSm+5,w
  7182  0143  0086               	movwf	6
  7183  0144  0843               	movf	??_I2c_DataReceiveSm+6,w
  7184  0145  0087               	movwf	7
  7185  0146  083D               	movf	??_I2c_DataReceiveSm,w
  7186  0147  0081               	movwf	1
  7187  0148  3001               	movlw	1
  7188  0149  00BD               	movwf	??_I2c_DataReceiveSm
  7189  014A  083D               	movf	??_I2c_DataReceiveSm,w
  7190  014B  07C4               	addwf	I2c_DataReceiveSm@Index,f
  7191  014C  3050               	movlw	80
  7192  014D  0244               	subwf	I2c_DataReceiveSm@Index,w
  7193  014E  1C03               	skipc
  7194  014F  292E               	goto	l4413
  7195  0150                     l4419:	
  7196                           
  7197                           ;i2c_slv_drv.c: 400: }
  7198                           ;i2c_slv_drv.c: 403: GenerateEvt(&I2cNewPacketNotification);
  7199  0150  30E6               	movlw	(low (_I2cNewPacketNotification| 0))& (0+255)
  7200  0151  318A  22FA  3180   	fcall	_GenerateEvt
  7201                           
  7202                           ;i2c_slv_drv.c: 406: RxCounter = 0;
  7203  0154  0020               	movlb	0	; select bank0
  7204  0155  01E2               	clrf	I2c_DataReceiveSm@RxCounter
  7205                           
  7206                           ;i2c_slv_drv.c: 408: ClearRxBuffer();
  7207  0156  3189  2180  3180   	fcall	_ClearRxBuffer
  7208                           
  7209                           ;i2c_slv_drv.c: 409: }
  7210  0159  2969               	goto	l4429
  7211  015A                     l4425:	
  7212                           
  7213                           ;i2c_slv_drv.c: 410: else
  7214                           ;i2c_slv_drv.c: 411: {
  7215                           ;i2c_slv_drv.c: 413: I2cRxBuffer[RxCounter] = SSP1BUF;
  7216  015A  0024               	movlb	4	; select bank4
  7217  015B  0811               	movf	17,w	;volatile
  7218  015C  0020               	movlb	0	; select bank0
  7219  015D  00BD               	movwf	??_I2c_DataReceiveSm
  7220  015E  0862               	movf	I2c_DataReceiveSm@RxCounter,w
  7221  015F  3E20               	addlw	(low (_I2cRxBuffer| (0+768)))& (0+255)
  7222  0160  0086               	movwf	6
  7223  0161  3003               	movlw	3	; select bank6/7
  7224  0162  0087               	movwf	7
  7225  0163  083D               	movf	??_I2c_DataReceiveSm,w
  7226  0164  0081               	movwf	1
  7227                           
  7228                           ;i2c_slv_drv.c: 415: RxCounter++;
  7229  0165  3001               	movlw	1
  7230  0166  00BD               	movwf	??_I2c_DataReceiveSm
  7231  0167  083D               	movf	??_I2c_DataReceiveSm,w
  7232  0168  07E2               	addwf	I2c_DataReceiveSm@RxCounter,f
  7233  0169                     l4429:	
  7234                           
  7235                           ;i2c_slv_drv.c: 416: }
  7236                           ;i2c_slv_drv.c: 418: I2cRxState = StopClkStretch;
  7237  0169  3004               	movlw	4
  7238  016A  0020               	movlb	0	; select bank0
  7239  016B  00BD               	movwf	??_I2c_DataReceiveSm
  7240  016C  083D               	movf	??_I2c_DataReceiveSm,w
  7241  016D  00E5               	movwf	I2c_DataReceiveSm@I2cRxState
  7242                           
  7243                           ;i2c_slv_drv.c: 419: break;
  7244  016E  0008               	return
  7245  016F                     l4431:	
  7246                           ;i2c_slv_drv.c: 421: case HandleRead:
  7247                           
  7248                           
  7249                           ;i2c_slv_drv.c: 423: if (CheckAckStatus() == ((UINT8)(0)))
  7250  016F  3188  20F7  3180   	fcall	_CheckAckStatus
  7251  0172  3A00               	xorlw	0
  7252  0173  1D03               	skipz
  7253  0174  2984               	goto	l4437
  7254                           
  7255                           ;i2c_slv_drv.c: 424: {
  7256                           ;i2c_slv_drv.c: 426: SSP1BUF = I2cTxBuffer[TxCounter];
  7257  0175  0020               	movlb	0	; select bank0
  7258  0176  0861               	movf	I2c_DataReceiveSm@TxCounter,w
  7259  0177  3EA0               	addlw	(low (_I2cTxBuffer| (0+512)))& (0+255)
  7260  0178  0086               	movwf	6
  7261  0179  3002               	movlw	2	; select bank5/6
  7262  017A  0087               	movwf	7
  7263  017B  0801               	movf	1,w
  7264  017C  0024               	movlb	4	; select bank4
  7265  017D  0091               	movwf	17	;volatile
  7266                           
  7267                           ;i2c_slv_drv.c: 428: TxCounter++;
  7268  017E  3001               	movlw	1
  7269  017F  0020               	movlb	0	; select bank0
  7270  0180  00BD               	movwf	??_I2c_DataReceiveSm
  7271  0181  083D               	movf	??_I2c_DataReceiveSm,w
  7272  0182  07E1               	addwf	I2c_DataReceiveSm@TxCounter,f
  7273                           
  7274                           ;i2c_slv_drv.c: 429: }
  7275  0183  2989               	goto	l4441
  7276  0184                     l4437:	
  7277                           
  7278                           ;i2c_slv_drv.c: 430: else
  7279                           ;i2c_slv_drv.c: 431: {
  7280                           ;i2c_slv_drv.c: 433: TxCounter = 0;
  7281  0184  0020               	movlb	0	; select bank0
  7282  0185  01E1               	clrf	I2c_DataReceiveSm@TxCounter
  7283                           
  7284                           ;i2c_slv_drv.c: 435: I2cRxFlag = ((UINT8)(0));
  7285  0186  01F8               	clrf	I2c_DataReceiveSm@I2cRxFlag
  7286                           
  7287                           ;i2c_slv_drv.c: 437: ClearTxBuffer();
  7288  0187  3189  2190         	fcall	_ClearTxBuffer
  7289  0189                     l4441:	
  7290                           
  7291                           ;i2c_slv_drv.c: 439: }
  7292                           ;i2c_slv_drv.c: 441: I2cRxState = StopClkStretch;
  7293  0189  3004               	movlw	4
  7294  018A  0020               	movlb	0	; select bank0
  7295  018B  00BD               	movwf	??_I2c_DataReceiveSm
  7296  018C  083D               	movf	??_I2c_DataReceiveSm,w
  7297  018D  00E5               	movwf	I2c_DataReceiveSm@I2cRxState
  7298                           
  7299                           ;i2c_slv_drv.c: 442: break;
  7300  018E  0008               	return
  7301  018F                     l139:	
  7302                           ;i2c_slv_drv.c: 444: case StopClkStretch:
  7303                           
  7304                           
  7305                           ;i2c_slv_drv.c: 446: SSP1CON1bits.CKP = ((UINT8)(1));
  7306  018F  0024               	movlb	4	; select bank4
  7307  0190  1615               	bsf	21,4	;volatile
  7308                           
  7309                           ;i2c_slv_drv.c: 448: I2cRxState = CheckRxByte;
  7310  0191  0020               	movlb	0	; select bank0
  7311  0192  01E5               	clrf	I2c_DataReceiveSm@I2cRxState
  7312                           
  7313                           ;i2c_slv_drv.c: 453: }
  7314                           
  7315                           ;i2c_slv_drv.c: 452: break;
  7316                           
  7317                           ;i2c_slv_drv.c: 451: default:
  7318                           
  7319                           ;i2c_slv_drv.c: 449: break;
  7320  0193  0008               	return
  7321  0194                     l4447:	
  7322  0194  0020               	movlb	0	; select bank0
  7323  0195  0865               	movf	I2c_DataReceiveSm@I2cRxState,w
  7324                           
  7325                           ; Switch size 1, requested type "space"
  7326                           ; Number of cases is 5, Range of values is 0 to 4
  7327                           ; switch strategies available:
  7328                           ; Name         Instructions Cycles
  7329                           ; direct_byte           16     6 (fixed)
  7330                           ; simple_byte           16     9 (average)
  7331                           ; jumptable            260     6 (fixed)
  7332                           ;	Chosen strategy is direct_byte
  7333  0196  0084               	movwf	4
  7334  0197  3005               	movlw	5
  7335  0198  0204               	subwf	4,w
  7336  0199  1803               	skipnc
  7337  019A  0008               	return
  7338  019B  3188               	movlp	high S4627
  7339  019C  3504               	lslf	4,w
  7340  019D  3E00               	addlw	low S4627
  7341  019E  0082               	movwf	2
  7342  019F  0008               	return
  7343  01A0                     __end_of_I2c_DataReceiveSm:	
  7344                           
  7345                           	psect	swtext1
  7346  0800                     __pswtext1:	
  7347  0800                     S4627:	
  7348  0800  3180  28A6         	ljmp	l4355
  7349  0802  3180  28E9         	ljmp	l4387
  7350  0804  3181  290F         	ljmp	l4401
  7351  0806  3181  296F         	ljmp	l4431
  7352  0808  3181  298F         	ljmp	l139
  7353                           
  7354                           	psect	text20
  7355  09F0                     __ptext20:	
  7356 ;; *************** function _Wdg_MainTask *****************
  7357 ;; Defined at:
  7358 ;;		line 73 in file "../../../Framework/MercuryFwk/Source/c/03_Sml/02_Ssl/wdg.c"
  7359 ;; Parameters:    Size  Location     Type
  7360 ;;  Options         1   28[BANK0 ] unsigned char 
  7361 ;; Auto vars:     Size  Location     Type
  7362 ;;		None
  7363 ;; Return value:  Size  Location     Type
  7364 ;;                  1    wreg      void 
  7365 ;; Registers used:
  7366 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  7367 ;; Tracked objects:
  7368 ;;		On entry : 0/0
  7369 ;;		On exit  : 0/0
  7370 ;;		Unchanged: 0/0
  7371 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7372 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7373 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7374 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7375 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7376 ;;Total ram usage:        1 bytes
  7377 ;; Hardware stack levels used:    1
  7378 ;; Hardware stack levels required when called:    3
  7379 ;; This function calls:
  7380 ;;		_Mcu_ClearWdg
  7381 ;;		_Mcu_SetWdgPeriod
  7382 ;;		_Mcu_SetWdgSts
  7383 ;; This function is called by:
  7384 ;;		_InitializeTasks
  7385 ;;		_ScheduleTasks
  7386 ;; This function uses a non-reentrant model
  7387 ;;
  7388                           
  7389                           
  7390                           ;psect for function _Wdg_MainTask
  7391  09F0                     _Wdg_MainTask:	
  7392                           
  7393                           ;wdg.c: 75: switch (SystemState)
  7394                           
  7395                           ;incstack = 0
  7396                           ; Regs used in _Wdg_MainTask: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  7397  09F0  29FC               	goto	l3555
  7398  09F1                     l3549:	
  7399                           ;wdg.c: 76: {
  7400                           ;wdg.c: 78: case InitializationState:
  7401                           
  7402                           
  7403                           ;wdg.c: 80: Mcu_SetWdgPeriod(WdgPer_2s);
  7404  09F1  300B               	movlw	11
  7405  09F2  3189  2115  3189   	fcall	_Mcu_SetWdgPeriod
  7406                           
  7407                           ;wdg.c: 82: Mcu_SetWdgSts(((UINT8)(1)));
  7408  09F5  3001               	movlw	1
  7409  09F6  3188  20CE         	fcall	_Mcu_SetWdgSts
  7410                           
  7411                           ;wdg.c: 83: break;
  7412  09F8  0008               	return
  7413  09F9                     l3551:	
  7414                           ;wdg.c: 86: case RunningState:
  7415                           
  7416                           
  7417                           ;wdg.c: 88: Mcu_ClearWdg();
  7418  09F9  3180  2002         	fcall	_Mcu_ClearWdg
  7419                           
  7420                           ;wdg.c: 94: }
  7421                           
  7422                           ;wdg.c: 93: break;
  7423                           
  7424                           ;wdg.c: 92: default:
  7425                           
  7426                           ;wdg.c: 89: break;
  7427  09FB  0008               	return
  7428  09FC                     l3555:	
  7429  09FC  0020               	movlb	0	; select bank0
  7430  09FD  0860               	movf	_SystemState,w
  7431                           
  7432                           ; Switch size 1, requested type "space"
  7433                           ; Number of cases is 2, Range of values is 0 to 1
  7434                           ; switch strategies available:
  7435                           ; Name         Instructions Cycles
  7436                           ; simple_byte            7     4 (average)
  7437                           ; direct_byte           10     6 (fixed)
  7438                           ; jumptable            260     6 (fixed)
  7439                           ;	Chosen strategy is simple_byte
  7440  09FE  3A00               	xorlw	0	; case 0
  7441  09FF  1903               	skipnz
  7442  0A00  29F1               	goto	l3549
  7443  0A01  3A01               	xorlw	1	; case 1
  7444  0A02  1903               	skipnz
  7445  0A03  29F9               	goto	l3551
  7446  0A04  2A05               	goto	l811
  7447  0A05                     l811:	
  7448  0A05  0008               	return
  7449  0A06                     __end_of_Wdg_MainTask:	
  7450                           
  7451                           	psect	text21
  7452  0915                     __ptext21:	
  7453 ;; *************** function _Mcu_SetWdgPeriod *****************
  7454 ;; Defined at:
  7455 ;;		line 223 in file "../../../Framework/MercuryFwk/Source/c/01_Hal/02_Drv/mcu_drv.c"
  7456 ;; Parameters:    Size  Location     Type
  7457 ;;  WdgPeriod       1    wreg     enum E3396
  7458 ;; Auto vars:     Size  Location     Type
  7459 ;;  WdgPeriod       1    5[COMMON] enum E3396
  7460 ;; Return value:  Size  Location     Type
  7461 ;;                  1    wreg      void 
  7462 ;; Registers used:
  7463 ;;		wreg, status,2, status,0
  7464 ;; Tracked objects:
  7465 ;;		On entry : 0/0
  7466 ;;		On exit  : 0/0
  7467 ;;		Unchanged: 0/0
  7468 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7469 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7470 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7471 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7472 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7473 ;;Total ram usage:        2 bytes
  7474 ;; Hardware stack levels used:    1
  7475 ;; Hardware stack levels required when called:    2
  7476 ;; This function calls:
  7477 ;;		Nothing
  7478 ;; This function is called by:
  7479 ;;		_Wdg_MainTask
  7480 ;; This function uses a non-reentrant model
  7481 ;;
  7482                           
  7483                           
  7484                           ;psect for function _Mcu_SetWdgPeriod
  7485  0915                     _Mcu_SetWdgPeriod:	
  7486                           
  7487                           ;incstack = 0
  7488                           ; Regs used in _Mcu_SetWdgPeriod: [wreg+status,2+status,0]
  7489                           ;Mcu_SetWdgPeriod@WdgPeriod stored from wreg
  7490  0915  00F5               	movwf	Mcu_SetWdgPeriod@WdgPeriod
  7491                           
  7492                           ;mcu_drv.c: 226: WDTCONbits.WDTPS = WdgPeriod;
  7493  0916  0875               	movf	Mcu_SetWdgPeriod@WdgPeriod,w
  7494  0917  00F4               	movwf	??_Mcu_SetWdgPeriod
  7495  0918  0DF4               	rlf	??_Mcu_SetWdgPeriod,f
  7496  0919  0021               	movlb	1	; select bank1
  7497  091A  0817               	movf	23,w	;volatile
  7498  091B  0674               	xorwf	??_Mcu_SetWdgPeriod,w
  7499  091C  39C1               	andlw	-63
  7500  091D  0674               	xorwf	??_Mcu_SetWdgPeriod,w
  7501  091E  0097               	movwf	23	;volatile
  7502  091F  0008               	return
  7503  0920                     __end_of_Mcu_SetWdgPeriod:	
  7504                           
  7505                           	psect	text22
  7506  0002                     __ptext22:	
  7507 ;; *************** function _Mcu_ClearWdg *****************
  7508 ;; Defined at:
  7509 ;;		line 251 in file "../../../Framework/MercuryFwk/Source/c/01_Hal/02_Drv/mcu_drv.c"
  7510 ;; Parameters:    Size  Location     Type
  7511 ;;		None
  7512 ;; Auto vars:     Size  Location     Type
  7513 ;;		None
  7514 ;; Return value:  Size  Location     Type
  7515 ;;                  1    wreg      void 
  7516 ;; Registers used:
  7517 ;;		None
  7518 ;; Tracked objects:
  7519 ;;		On entry : 0/0
  7520 ;;		On exit  : 0/0
  7521 ;;		Unchanged: 0/0
  7522 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7523 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7524 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7525 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7526 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7527 ;;Total ram usage:        0 bytes
  7528 ;; Hardware stack levels used:    1
  7529 ;; Hardware stack levels required when called:    2
  7530 ;; This function calls:
  7531 ;;		Nothing
  7532 ;; This function is called by:
  7533 ;;		_Wdg_MainTask
  7534 ;; This function uses a non-reentrant model
  7535 ;;
  7536                           
  7537                           
  7538                           ;psect for function _Mcu_ClearWdg
  7539  0002                     _Mcu_ClearWdg:	
  7540                           
  7541                           ;incstack = 0
  7542                           ; Regs used in _Mcu_ClearWdg: []
  7543  0002  0064               	clrwdt	;# 
  7544  0003  0008               	return
  7545  0004                     __end_of_Mcu_ClearWdg:	
  7546                           
  7547                           	psect	text23
  7548  0E25                     __ptext23:	
  7549 ;; *************** function _Led_InitSeq *****************
  7550 ;; Defined at:
  7551 ;;		line 128 in file "../../../Framework/MercuryFwk/Source/c/03_Sml/02_Ssl/led.c"
  7552 ;; Parameters:    Size  Location     Type
  7553 ;;		None
  7554 ;; Auto vars:     Size  Location     Type
  7555 ;;		None
  7556 ;; Return value:  Size  Location     Type
  7557 ;;                  1    wreg      void 
  7558 ;; Registers used:
  7559 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  7560 ;; Tracked objects:
  7561 ;;		On entry : 0/0
  7562 ;;		On exit  : 0/0
  7563 ;;		Unchanged: 0/0
  7564 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7565 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7566 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7567 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7568 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7569 ;;Total ram usage:        1 bytes
  7570 ;; Hardware stack levels used:    1
  7571 ;; Hardware stack levels required when called:    3
  7572 ;; This function calls:
  7573 ;;		_Led_SetLedStatus
  7574 ;; This function is called by:
  7575 ;;		_Led_MainTask
  7576 ;; This function uses a non-reentrant model
  7577 ;;
  7578                           
  7579                           
  7580                           ;psect for function _Led_InitSeq
  7581  0E25                     _Led_InitSeq:	
  7582                           
  7583                           ;led.c: 130: static UINT16 DelayCounter = 0;
  7584                           ;led.c: 131: static UINT8 Counter = 0;
  7585                           ;led.c: 132: static UINT8 LedInitSts = LED_STS_ON;
  7586                           ;led.c: 133: static InitSeqStateType InitSeqState = Startup;
  7587                           ;led.c: 135: switch (InitSeqState)
  7588                           
  7589                           ;incstack = 0
  7590                           ; Regs used in _Led_InitSeq: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  7591  0E25  2E67               	goto	l4303
  7592  0E26                     l4281:	
  7593                           ;led.c: 136: {
  7594                           ;led.c: 137: case Startup:
  7595                           
  7596                           
  7597                           ;led.c: 139: Led_SetLedStatus(1u,LedInitSts);
  7598  0E26  0879               	movf	Led_InitSeq@LedInitSts,w
  7599  0E27  0020               	movlb	0	; select bank0
  7600  0E28  00A1               	movwf	??_Led_InitSeq
  7601  0E29  0821               	movf	??_Led_InitSeq,w
  7602  0E2A  00F4               	movwf	Led_SetLedStatus@LedSts
  7603  0E2B  3001               	movlw	1
  7604  0E2C  3189  2150         	fcall	_Led_SetLedStatus
  7605                           
  7606                           ;led.c: 141: InitSeqState = Initializing;
  7607  0E2E  0021               	movlb	1	; select bank1
  7608  0E2F  01AC               	clrf	Led_InitSeq@InitSeqState^(0+128)
  7609  0E30  0AAC               	incf	Led_InitSeq@InitSeqState^(0+128),f
  7610                           
  7611                           ;led.c: 142: break;
  7612  0E31  0008               	return
  7613  0E32                     l4285:	
  7614                           ;led.c: 144: case Initializing:
  7615                           
  7616                           
  7617                           ;led.c: 146: DelayCounter++;
  7618  0E32  3001               	movlw	1
  7619  0E33  07A0               	addwf	Led_InitSeq@DelayCounter^(0+128),f
  7620  0E34  3000               	movlw	0
  7621  0E35  3DA1               	addwfc	(Led_InitSeq@DelayCounter+1)^(0+128),f
  7622                           
  7623                           ;led.c: 148: if (DelayCounter > (50u)/(((UINT16)(10))))
  7624  0E36  3000               	movlw	0
  7625  0E37  0221               	subwf	(Led_InitSeq@DelayCounter+1)^(0+128),w
  7626  0E38  3006               	movlw	6
  7627  0E39  1903               	skipnz
  7628  0E3A  0220               	subwf	Led_InitSeq@DelayCounter^(0+128),w
  7629  0E3B  1C03               	skipc
  7630  0E3C  0008               	return
  7631                           
  7632                           ;led.c: 149: {
  7633                           ;led.c: 151: LedInitSts = !LedInitSts;
  7634  0E3D  0879               	movf	Led_InitSeq@LedInitSts,w
  7635  0E3E  1D03               	btfss	3,2
  7636  0E3F  2E42               	goto	u3120
  7637  0E40  3001               	movlw	1
  7638  0E41  2E43               	goto	u3130
  7639  0E42                     u3120:	
  7640  0E42  3000               	movlw	0
  7641  0E43                     u3130:	
  7642  0E43  0020               	movlb	0	; select bank0
  7643  0E44  00A1               	movwf	??_Led_InitSeq
  7644  0E45  0821               	movf	??_Led_InitSeq,w
  7645  0E46  00F9               	movwf	Led_InitSeq@LedInitSts
  7646                           
  7647                           ;led.c: 153: Led_SetLedStatus(1u,LedInitSts);
  7648  0E47  0879               	movf	Led_InitSeq@LedInitSts,w
  7649  0E48  00A1               	movwf	??_Led_InitSeq
  7650  0E49  0821               	movf	??_Led_InitSeq,w
  7651  0E4A  00F4               	movwf	Led_SetLedStatus@LedSts
  7652  0E4B  3001               	movlw	1
  7653  0E4C  3189  2150  318E   	fcall	_Led_SetLedStatus
  7654                           
  7655                           ;led.c: 155: DelayCounter = 0;
  7656  0E4F  0021               	movlb	1	; select bank1
  7657  0E50  01A0               	clrf	Led_InitSeq@DelayCounter^(0+128)
  7658  0E51  01A1               	clrf	(Led_InitSeq@DelayCounter+1)^(0+128)
  7659                           
  7660                           ;led.c: 157: Counter++;
  7661  0E52  3001               	movlw	1
  7662  0E53  0020               	movlb	0	; select bank0
  7663  0E54  00A1               	movwf	??_Led_InitSeq
  7664  0E55  0821               	movf	??_Led_InitSeq,w
  7665  0E56  0021               	movlb	1	; select bank1
  7666  0E57  07AD               	addwf	Led_InitSeq@Counter^(0+128),f
  7667                           
  7668                           ;led.c: 159: if (Counter > 5u)
  7669  0E58  3006               	movlw	6
  7670  0E59  022D               	subwf	Led_InitSeq@Counter^(0+128),w
  7671  0E5A  1C03               	skipc
  7672  0E5B  0008               	return
  7673                           
  7674                           ;led.c: 160: {
  7675                           ;led.c: 162: Led_SetLedStatus(1u,LED_STS_OFF);
  7676  0E5C  01F4               	clrf	Led_SetLedStatus@LedSts
  7677  0E5D  3001               	movlw	1
  7678  0E5E  3189  2150         	fcall	_Led_SetLedStatus
  7679                           
  7680                           ;led.c: 164: InitSeqState = Done;
  7681  0E60  3002               	movlw	2
  7682  0E61  0020               	movlb	0	; select bank0
  7683  0E62  00A1               	movwf	??_Led_InitSeq
  7684  0E63  0821               	movf	??_Led_InitSeq,w
  7685  0E64  0021               	movlb	1	; select bank1
  7686  0E65  00AC               	movwf	Led_InitSeq@InitSeqState^(0+128)
  7687                           
  7688                           ;led.c: 174: }
  7689                           
  7690                           ;led.c: 173: break;
  7691                           
  7692                           ;led.c: 172: default:
  7693                           
  7694                           ;led.c: 170: break;
  7695                           
  7696                           ;led.c: 169: case Done:
  7697                           
  7698                           ;led.c: 165: }
  7699                           ;led.c: 166: }
  7700                           ;led.c: 167: break;
  7701  0E66  0008               	return
  7702  0E67                     l4303:	
  7703  0E67  0021               	movlb	1	; select bank1
  7704  0E68  082C               	movf	Led_InitSeq@InitSeqState^(0+128),w
  7705                           
  7706                           ; Switch size 1, requested type "space"
  7707                           ; Number of cases is 3, Range of values is 0 to 2
  7708                           ; switch strategies available:
  7709                           ; Name         Instructions Cycles
  7710                           ; simple_byte           10     6 (average)
  7711                           ; direct_byte           12     6 (fixed)
  7712                           ; jumptable            260     6 (fixed)
  7713                           ;	Chosen strategy is simple_byte
  7714  0E69  3A00               	xorlw	0	; case 0
  7715  0E6A  1903               	skipnz
  7716  0E6B  2E26               	goto	l4281
  7717  0E6C  3A01               	xorlw	1	; case 1
  7718  0E6D  1903               	skipnz
  7719  0E6E  2E32               	goto	l4285
  7720  0E6F  3A03               	xorlw	3	; case 2
  7721  0E70  1903               	skipnz
  7722  0E71  2E73               	goto	l611
  7723  0E72  2E73               	goto	l611
  7724  0E73                     l611:	
  7725  0E73  0008               	return
  7726  0E74                     __end_of_Led_InitSeq:	
  7727                           
  7728                           	psect	text24
  7729  0C6E                     __ptext24:	
  7730 ;; *************** function _LedStateMachine *****************
  7731 ;; Defined at:
  7732 ;;		line 82 in file "../../../Framework/MercuryFwk/Source/c/03_Sml/02_Ssl/led.c"
  7733 ;; Parameters:    Size  Location     Type
  7734 ;;  Led             1    wreg     unsigned char 
  7735 ;;  LedSts          1   11[BANK0 ] PTR enum E3743
  7736 ;;		 -> Led1Sts(1), 
  7737 ;;  LedBlink        1   12[BANK0 ] PTR struct _LedBlinkType
  7738 ;;		 -> Led1Blink(9), 
  7739 ;;  LedPulse        1   13[BANK0 ] PTR struct _LedPulseType
  7740 ;;		 -> Led1Pulse(6), 
  7741 ;; Auto vars:     Size  Location     Type
  7742 ;;  Led             1   16[BANK0 ] unsigned char 
  7743 ;;  LedOutSts       1   17[BANK0 ] unsigned char 
  7744 ;; Return value:  Size  Location     Type
  7745 ;;                  1    wreg      unsigned char 
  7746 ;; Registers used:
  7747 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7748 ;; Tracked objects:
  7749 ;;		On entry : 0/0
  7750 ;;		On exit  : 0/0
  7751 ;;		Unchanged: 0/0
  7752 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7753 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7754 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7755 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7756 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7757 ;;Total ram usage:        7 bytes
  7758 ;; Hardware stack levels used:    1
  7759 ;; Hardware stack levels required when called:    4
  7760 ;; This function calls:
  7761 ;;		_LedBlinkStateMachine
  7762 ;;		_LedPulseStateMachine
  7763 ;; This function is called by:
  7764 ;;		_Led_MainTask
  7765 ;; This function uses a non-reentrant model
  7766 ;;
  7767                           
  7768                           
  7769                           ;psect for function _LedStateMachine
  7770  0C6E                     _LedStateMachine:	
  7771                           
  7772                           ;incstack = 0
  7773                           ; Regs used in _LedStateMachine: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  7774                           ;LedStateMachine@Led stored from wreg
  7775  0C6E  0020               	movlb	0	; select bank0
  7776  0C6F  00B0               	movwf	LedStateMachine@Led
  7777                           
  7778                           ;led.c: 85: UINT8 LedOutSts = 0u;
  7779  0C70  01B1               	clrf	LedStateMachine@LedOutSts
  7780                           
  7781                           ;led.c: 88: switch (*LedSts)
  7782  0C71  2C8C               	goto	l4273
  7783  0C72                     l4265:	
  7784                           ;led.c: 89: {
  7785                           ;led.c: 90: case LED_STS_OFF:
  7786                           
  7787                           
  7788                           ;led.c: 92: LedOutSts = ((UINT8)(0));
  7789  0C72  01B1               	clrf	LedStateMachine@LedOutSts
  7790                           
  7791                           ;led.c: 93: break;
  7792  0C73  2C9D               	goto	l4275
  7793  0C74                     l588:	
  7794                           ;led.c: 95: case LED_STS_ON:
  7795                           
  7796                           
  7797                           ;led.c: 97: LedOutSts = ((UINT8)(1));
  7798  0C74  01B1               	clrf	LedStateMachine@LedOutSts
  7799  0C75  0AB1               	incf	LedStateMachine@LedOutSts,f
  7800                           
  7801                           ;led.c: 98: break;
  7802  0C76  2C9D               	goto	l4275
  7803  0C77                     l4267:	
  7804                           ;led.c: 100: case LED_STS_BLINK:
  7805                           
  7806                           
  7807                           ;led.c: 102: LedOutSts = LedBlinkStateMachine(LedBlink);
  7808  0C77  082C               	movf	LedStateMachine@LedBlink,w
  7809  0C78  3184  24A6  318C   	fcall	_LedBlinkStateMachine
  7810  0C7B  0020               	movlb	0	; select bank0
  7811  0C7C  00AE               	movwf	??_LedStateMachine
  7812  0C7D  082E               	movf	??_LedStateMachine,w
  7813  0C7E  2C8A               	goto	L7
  7814  0C7F                     l4269:	
  7815                           ;led.c: 105: case LED_STS_PULSE:
  7816                           
  7817                           ;led.c: 103: break;
  7818                           
  7819                           
  7820                           ;led.c: 107: LedOutSts = LedPulseStateMachine(LedPulse, Led);
  7821  0C7F  0830               	movf	LedStateMachine@Led,w
  7822  0C80  00AE               	movwf	??_LedStateMachine
  7823  0C81  082E               	movf	??_LedStateMachine,w
  7824  0C82  00A7               	movwf	LedPulseStateMachine@Led
  7825  0C83  082D               	movf	LedStateMachine@LedPulse,w
  7826  0C84  318F  2729  318C   	fcall	_LedPulseStateMachine
  7827  0C87  0020               	movlb	0	; select bank0
  7828  0C88  00AF               	movwf	??_LedStateMachine+1
  7829  0C89  082F               	movf	??_LedStateMachine+1,w
  7830  0C8A                     L7:	
  7831  0C8A  00B1               	movwf	LedStateMachine@LedOutSts
  7832                           
  7833                           ;led.c: 112: }
  7834                           
  7835                           ;led.c: 111: break;
  7836                           
  7837                           ;led.c: 110: default:
  7838                           
  7839                           ;led.c: 108: break;
  7840  0C8B  2C9D               	goto	l4275
  7841  0C8C                     l4273:	
  7842  0C8C  082B               	movf	LedStateMachine@LedSts,w
  7843  0C8D  0086               	movwf	6
  7844  0C8E  0187               	clrf	7
  7845  0C8F  0801               	movf	1,w
  7846                           
  7847                           ; Switch size 1, requested type "space"
  7848                           ; Number of cases is 4, Range of values is 0 to 3
  7849                           ; switch strategies available:
  7850                           ; Name         Instructions Cycles
  7851                           ; simple_byte           13     7 (average)
  7852                           ; direct_byte           14     6 (fixed)
  7853                           ; jumptable            260     6 (fixed)
  7854                           ;	Chosen strategy is simple_byte
  7855  0C90  3A00               	xorlw	0	; case 0
  7856  0C91  1903               	skipnz
  7857  0C92  2C72               	goto	l4265
  7858  0C93  3A01               	xorlw	1	; case 1
  7859  0C94  1903               	skipnz
  7860  0C95  2C74               	goto	l588
  7861  0C96  3A03               	xorlw	3	; case 2
  7862  0C97  1903               	skipnz
  7863  0C98  2C77               	goto	l4267
  7864  0C99  3A01               	xorlw	1	; case 3
  7865  0C9A  1903               	skipnz
  7866  0C9B  2C7F               	goto	l4269
  7867  0C9C  2C9D               	goto	l4275
  7868  0C9D                     l4275:	
  7869                           
  7870                           ;led.c: 114: return LedOutSts;
  7871  0C9D  0831               	movf	LedStateMachine@LedOutSts,w
  7872  0C9E  0008               	return
  7873  0C9F                     __end_of_LedStateMachine:	
  7874                           
  7875                           	psect	text25
  7876  0F29                     __ptext25:	
  7877 ;; *************** function _LedPulseStateMachine *****************
  7878 ;; Defined at:
  7879 ;;		line 131 in file "../../../Framework/MercuryFwk/Source/c/01_Hal/02_Drv/led_drv.c"
  7880 ;; Parameters:    Size  Location     Type
  7881 ;;  LedPulse        1    wreg     PTR struct _LedPulseType
  7882 ;;		 -> Led1Pulse(6), 
  7883 ;;  Led             1    7[BANK0 ] unsigned char 
  7884 ;; Auto vars:     Size  Location     Type
  7885 ;;  LedPulse        1   10[BANK0 ] PTR struct _LedPulseType
  7886 ;;		 -> Led1Pulse(6), 
  7887 ;; Return value:  Size  Location     Type
  7888 ;;                  1    wreg      unsigned char 
  7889 ;; Registers used:
  7890 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7891 ;; Tracked objects:
  7892 ;;		On entry : 0/0
  7893 ;;		On exit  : 0/0
  7894 ;;		Unchanged: 0/0
  7895 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7896 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7897 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7898 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7899 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7900 ;;Total ram usage:        4 bytes
  7901 ;; Hardware stack levels used:    1
  7902 ;; Hardware stack levels required when called:    3
  7903 ;; This function calls:
  7904 ;;		_Led_SetLedStatus
  7905 ;;		___lwdiv
  7906 ;; This function is called by:
  7907 ;;		_LedStateMachine
  7908 ;; This function uses a non-reentrant model
  7909 ;;
  7910                           
  7911                           
  7912                           ;psect for function _LedPulseStateMachine
  7913  0F29                     _LedPulseStateMachine:	
  7914                           
  7915                           ;incstack = 0
  7916                           ; Regs used in _LedPulseStateMachine: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  7917                           ;LedPulseStateMachine@LedPulse stored from wreg
  7918  0F29  0020               	movlb	0	; select bank0
  7919  0F2A  00AA               	movwf	LedPulseStateMachine@LedPulse
  7920                           
  7921                           ;led_drv.c: 134: switch (LedPulse->LedPulseState)
  7922  0F2B  2F7C               	goto	l4083
  7923  0F2C                     l4065:	
  7924                           ;led_drv.c: 135: {
  7925                           ;led_drv.c: 136: case LedPulseOn:
  7926                           
  7927                           
  7928                           ;led_drv.c: 138: LedPulse->LedOutState = ((UINT8)(1));
  7929  0F2C  0A2A               	incf	LedPulseStateMachine@LedPulse,w
  7930  0F2D  0086               	movwf	6
  7931  0F2E  0187               	clrf	7
  7932  0F2F  0181               	clrf	1
  7933  0F30  0A81               	incf	1,f
  7934                           
  7935                           ;led_drv.c: 140: LedPulse->LedPulseState = LedPulseDelay;
  7936  0F31  082A               	movf	LedPulseStateMachine@LedPulse,w
  7937  0F32  0086               	movwf	6
  7938  0F33  0187               	clrf	7
  7939  0F34  0181               	clrf	1
  7940  0F35  0A81               	incf	1,f
  7941  0F36                     l4067:	
  7942                           ;led_drv.c: 143: case LedPulseDelay:
  7943                           
  7944                           
  7945                           ;led_drv.c: 145: LedPulse->LedPulseCounter++;
  7946  0F36  082A               	movf	LedPulseStateMachine@LedPulse,w
  7947  0F37  3E02               	addlw	2
  7948  0F38  0086               	movwf	6
  7949  0F39  0187               	clrf	7
  7950  0F3A  3001               	movlw	1
  7951  0F3B  0781               	addwf	1,f
  7952  0F3C  3141               	addfsr 1,1
  7953  0F3D  1803               	skipnc
  7954  0F3E  0A81               	incf	1,f
  7955                           
  7956                           ;led_drv.c: 147: if (LedPulse->LedPulseCounter >= (LedPulse->LedPulseTimeMs/((UINT16)(10
      +                          ))))
  7957  0F3F  300A               	movlw	10
  7958  0F40  00A0               	movwf	___lwdiv@divisor
  7959  0F41  3000               	movlw	0
  7960  0F42  00A1               	movwf	___lwdiv@divisor+1
  7961  0F43  082A               	movf	LedPulseStateMachine@LedPulse,w
  7962  0F44  3E04               	addlw	4
  7963  0F45  0086               	movwf	6
  7964  0F46  0187               	clrf	7
  7965  0F47  3F40               	moviw [0]fsr1
  7966  0F48  00A2               	movwf	___lwdiv@dividend
  7967  0F49  3F41               	moviw [1]fsr1
  7968  0F4A  00A3               	movwf	___lwdiv@dividend+1
  7969  0F4B  318C  24D2  318F   	fcall	___lwdiv
  7970  0F4E  0020               	movlb	0	; select bank0
  7971  0F4F  082A               	movf	LedPulseStateMachine@LedPulse,w
  7972  0F50  3E02               	addlw	2
  7973  0F51  0086               	movwf	6
  7974  0F52  0187               	clrf	7
  7975  0F53  3F40               	moviw [0]fsr1
  7976  0F54  00A8               	movwf	??_LedPulseStateMachine
  7977  0F55  3F41               	moviw [1]fsr1
  7978  0F56  00A9               	movwf	??_LedPulseStateMachine+1
  7979  0F57  0821               	movf	?___lwdiv+1,w
  7980  0F58  0229               	subwf	??_LedPulseStateMachine+1,w
  7981  0F59  1D03               	skipz
  7982  0F5A  2F5D               	goto	u2805
  7983  0F5B  0820               	movf	?___lwdiv,w
  7984  0F5C  0228               	subwf	??_LedPulseStateMachine,w
  7985  0F5D                     u2805:	
  7986  0F5D  1C03               	skipc
  7987  0F5E  2F8B               	goto	l4085
  7988                           
  7989                           ;led_drv.c: 148: {
  7990                           ;led_drv.c: 150: LedPulse->LedPulseCounter = 0;
  7991  0F5F  082A               	movf	LedPulseStateMachine@LedPulse,w
  7992  0F60  3E02               	addlw	2
  7993  0F61  0086               	movwf	6
  7994  0F62  0187               	clrf	7
  7995  0F63  3000               	movlw	0
  7996  0F64  3FC0               	movwi [0]fsr1
  7997  0F65  3FC1               	movwi [1]fsr1
  7998                           
  7999                           ;led_drv.c: 152: LedPulse->LedOutState = ((UINT8)(0));
  8000  0F66  0A2A               	incf	LedPulseStateMachine@LedPulse,w
  8001  0F67  0086               	movwf	6
  8002  0F68  0187               	clrf	7
  8003  0F69  0181               	clrf	1
  8004                           
  8005                           ;led_drv.c: 154: LedPulse->LedPulseState = LedPulseOff;
  8006  0F6A  3002               	movlw	2
  8007  0F6B  00A8               	movwf	??_LedPulseStateMachine
  8008  0F6C  082A               	movf	LedPulseStateMachine@LedPulse,w
  8009  0F6D  0086               	movwf	6
  8010  0F6E  0187               	clrf	7
  8011  0F6F  0828               	movf	??_LedPulseStateMachine,w
  8012  0F70  0081               	movwf	1
  8013                           
  8014                           ;led_drv.c: 155: }
  8015                           ;led_drv.c: 156: break;
  8016  0F71  2F8B               	goto	l4085
  8017  0F72                     l4077:	
  8018                           ;led_drv.c: 158: case LedPulseOff:
  8019                           
  8020                           
  8021                           ;led_drv.c: 160: LedPulse->LedPulseState = LedPulseOn;
  8022  0F72  082A               	movf	LedPulseStateMachine@LedPulse,w
  8023  0F73  0086               	movwf	6
  8024  0F74  0187               	clrf	7
  8025  0F75  0181               	clrf	1
  8026                           
  8027                           ;led_drv.c: 162: Led_SetLedStatus(Led,LED_STS_OFF);
  8028  0F76  01F4               	clrf	Led_SetLedStatus@LedSts
  8029  0F77  0827               	movf	LedPulseStateMachine@Led,w
  8030  0F78  3189  2150  318F   	fcall	_Led_SetLedStatus
  8031                           
  8032                           ;led_drv.c: 167: }
  8033                           
  8034                           ;led_drv.c: 166: break;
  8035                           
  8036                           ;led_drv.c: 165: default:
  8037                           
  8038                           ;led_drv.c: 163: break;
  8039  0F7B  2F8B               	goto	l4085
  8040  0F7C                     l4083:	
  8041  0F7C  0020               	movlb	0	; select bank0
  8042  0F7D  082A               	movf	LedPulseStateMachine@LedPulse,w
  8043  0F7E  0086               	movwf	6
  8044  0F7F  0187               	clrf	7
  8045  0F80  0801               	movf	1,w
  8046                           
  8047                           ; Switch size 1, requested type "space"
  8048                           ; Number of cases is 3, Range of values is 0 to 2
  8049                           ; switch strategies available:
  8050                           ; Name         Instructions Cycles
  8051                           ; simple_byte           10     6 (average)
  8052                           ; direct_byte           12     6 (fixed)
  8053                           ; jumptable            260     6 (fixed)
  8054                           ;	Chosen strategy is simple_byte
  8055  0F81  3A00               	xorlw	0	; case 0
  8056  0F82  1903               	skipnz
  8057  0F83  2F2C               	goto	l4065
  8058  0F84  3A01               	xorlw	1	; case 1
  8059  0F85  1903               	skipnz
  8060  0F86  2F36               	goto	l4067
  8061  0F87  3A03               	xorlw	3	; case 2
  8062  0F88  1903               	skipnz
  8063  0F89  2F72               	goto	l4077
  8064  0F8A  2F8B               	goto	l4085
  8065  0F8B                     l4085:	
  8066                           
  8067                           ;led_drv.c: 170: return (LedPulse->LedOutState);
  8068  0F8B  0020               	movlb	0	; select bank0
  8069  0F8C  0A2A               	incf	LedPulseStateMachine@LedPulse,w
  8070  0F8D  0086               	movwf	6
  8071  0F8E  0187               	clrf	7
  8072  0F8F  0801               	movf	1,w
  8073  0F90  0008               	return
  8074  0F91                     __end_of_LedPulseStateMachine:	
  8075                           
  8076                           	psect	text26
  8077  04A6                     __ptext26:	
  8078 ;; *************** function _LedBlinkStateMachine *****************
  8079 ;; Defined at:
  8080 ;;		line 74 in file "../../../Framework/MercuryFwk/Source/c/01_Hal/02_Drv/led_drv.c"
  8081 ;; Parameters:    Size  Location     Type
  8082 ;;  LedBlink        1    wreg     PTR struct _LedBlinkType
  8083 ;;		 -> Led1Blink(9), 
  8084 ;; Auto vars:     Size  Location     Type
  8085 ;;  LedBlink        1    5[COMMON] PTR struct _LedBlinkType
  8086 ;;		 -> Led1Blink(9), 
  8087 ;; Return value:  Size  Location     Type
  8088 ;;                  1    wreg      unsigned char 
  8089 ;; Registers used:
  8090 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8091 ;; Tracked objects:
  8092 ;;		On entry : 0/0
  8093 ;;		On exit  : 0/0
  8094 ;;		Unchanged: 0/0
  8095 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8096 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8097 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8098 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8099 ;;      Totals:         1       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8100 ;;Total ram usage:        3 bytes
  8101 ;; Hardware stack levels used:    1
  8102 ;; Hardware stack levels required when called:    3
  8103 ;; This function calls:
  8104 ;;		___lwdiv
  8105 ;; This function is called by:
  8106 ;;		_LedStateMachine
  8107 ;; This function uses a non-reentrant model
  8108 ;;
  8109                           
  8110                           
  8111                           ;psect for function _LedBlinkStateMachine
  8112  04A6                     _LedBlinkStateMachine:	
  8113                           
  8114                           ;incstack = 0
  8115                           ; Regs used in _LedBlinkStateMachine: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  8116                           ;LedBlinkStateMachine@LedBlink stored from wreg
  8117  04A6  00F5               	movwf	LedBlinkStateMachine@LedBlink
  8118                           
  8119                           ;led_drv.c: 77: switch (LedBlink->LedBlinkState)
  8120  04A7  2D26               	goto	l4057
  8121  04A8                     l4035:	
  8122                           ;led_drv.c: 78: {
  8123                           ;led_drv.c: 79: case LedBlinkInit:
  8124                           
  8125                           
  8126                           ;led_drv.c: 81: LedBlink->LedOutState = LedBlink->LedInitStatus;
  8127  04A8  0875               	movf	LedBlinkStateMachine@LedBlink,w
  8128  04A9  3E08               	addlw	8
  8129  04AA  0086               	movwf	6
  8130  04AB  0187               	clrf	7
  8131  04AC  0801               	movf	1,w
  8132  04AD  0020               	movlb	0	; select bank0
  8133  04AE  00A7               	movwf	??_LedBlinkStateMachine
  8134  04AF  0A75               	incf	LedBlinkStateMachine@LedBlink,w
  8135  04B0  0086               	movwf	6
  8136  04B1  0187               	clrf	7
  8137  04B2  0827               	movf	??_LedBlinkStateMachine,w
  8138  04B3  0081               	movwf	1
  8139                           
  8140                           ;led_drv.c: 83: LedBlink->LedBlinkState = LedBlinkRunning;
  8141  04B4  0875               	movf	LedBlinkStateMachine@LedBlink,w
  8142  04B5  2CEE               	goto	L8
  8143  04B6                     l4039:	
  8144                           ;led_drv.c: 86: case LedBlinkRunning:
  8145                           
  8146                           ;led_drv.c: 84: break;
  8147                           
  8148                           
  8149                           ;led_drv.c: 88: LedBlink->LedBlinkCounter++;
  8150  04B6  0875               	movf	LedBlinkStateMachine@LedBlink,w
  8151  04B7  3E02               	addlw	2
  8152  04B8  0086               	movwf	6
  8153  04B9  0187               	clrf	7
  8154  04BA  3001               	movlw	1
  8155  04BB  0781               	addwf	1,f
  8156  04BC  3141               	addfsr 1,1
  8157  04BD  1803               	skipnc
  8158  04BE  0A81               	incf	1,f
  8159                           
  8160                           ;led_drv.c: 90: if (LedBlink->LedOutState == OffState)
  8161  04BF  0A75               	incf	LedBlinkStateMachine@LedBlink,w
  8162  04C0  0086               	movwf	6
  8163  04C1  0187               	clrf	7
  8164  04C2  0801               	movf	1,w
  8165  04C3  1D03               	btfss	3,2
  8166  04C4  2CF3               	goto	l4047
  8167                           
  8168                           ;led_drv.c: 91: {
  8169                           ;led_drv.c: 93: if (LedBlink->LedBlinkCounter >= (LedBlink->LedOffTimeMs/((UINT16)(10)))
      +                          )
  8170  04C5  300A               	movlw	10
  8171  04C6  0020               	movlb	0	; select bank0
  8172  04C7  00A0               	movwf	___lwdiv@divisor
  8173  04C8  3000               	movlw	0
  8174  04C9  00A1               	movwf	___lwdiv@divisor+1
  8175  04CA  0875               	movf	LedBlinkStateMachine@LedBlink,w
  8176  04CB  3E06               	addlw	6
  8177  04CC  0086               	movwf	6
  8178  04CD  0187               	clrf	7
  8179  04CE  3F40               	moviw [0]fsr1
  8180  04CF  00A2               	movwf	___lwdiv@dividend
  8181  04D0  3F41               	moviw [1]fsr1
  8182  04D1  00A3               	movwf	___lwdiv@dividend+1
  8183  04D2  318C  24D2  3184   	fcall	___lwdiv
  8184  04D5  0875               	movf	LedBlinkStateMachine@LedBlink,w
  8185  04D6  3E02               	addlw	2
  8186  04D7  0086               	movwf	6
  8187  04D8  0187               	clrf	7
  8188  04D9  3F40               	moviw [0]fsr1
  8189  04DA  0020               	movlb	0	; select bank0
  8190  04DB  00A7               	movwf	??_LedBlinkStateMachine
  8191  04DC  3F41               	moviw [1]fsr1
  8192  04DD  00A8               	movwf	??_LedBlinkStateMachine+1
  8193  04DE  0821               	movf	?___lwdiv+1,w
  8194  04DF  0228               	subwf	??_LedBlinkStateMachine+1,w
  8195  04E0  1D03               	skipz
  8196  04E1  2CE4               	goto	u2775
  8197  04E2  0820               	movf	?___lwdiv,w
  8198  04E3  0227               	subwf	??_LedBlinkStateMachine,w
  8199  04E4                     u2775:	
  8200  04E4  1C03               	skipc
  8201  04E5  2D31               	goto	l4059
  8202                           
  8203                           ;led_drv.c: 94: {
  8204                           ;led_drv.c: 96: LedBlink->LedBlinkCounter = 0;
  8205  04E6  0875               	movf	LedBlinkStateMachine@LedBlink,w
  8206  04E7  3E02               	addlw	2
  8207  04E8  0086               	movwf	6
  8208  04E9  0187               	clrf	7
  8209  04EA  3000               	movlw	0
  8210  04EB  3FC0               	movwi [0]fsr1
  8211  04EC  3FC1               	movwi [1]fsr1
  8212                           
  8213                           ;led_drv.c: 98: LedBlink->LedOutState = OnState;
  8214  04ED  0A75               	incf	LedBlinkStateMachine@LedBlink,w
  8215  04EE                     L8:	
  8216  04EE  0086               	movwf	6
  8217  04EF  0187               	clrf	7
  8218  04F0  0181               	clrf	1
  8219  04F1  0A81               	incf	1,f
  8220                           
  8221                           ;led_drv.c: 99: }
  8222                           ;led_drv.c: 100: }
  8223  04F2  2D31               	goto	l4059
  8224  04F3                     l4047:	
  8225                           
  8226                           ;led_drv.c: 101: else if (LedBlink->LedOutState == OnState)
  8227  04F3  0A75               	incf	LedBlinkStateMachine@LedBlink,w
  8228  04F4  0086               	movwf	6
  8229  04F5  0187               	clrf	7
  8230  04F6  0301               	decf	1,w
  8231  04F7  1D03               	btfss	3,2
  8232  04F8  2D31               	goto	l4059
  8233                           
  8234                           ;led_drv.c: 102: {
  8235                           ;led_drv.c: 104: if (LedBlink->LedBlinkCounter >= (LedBlink->LedOnTimeMs/((UINT16)(10)))
      +                          )
  8236  04F9  300A               	movlw	10
  8237  04FA  0020               	movlb	0	; select bank0
  8238  04FB  00A0               	movwf	___lwdiv@divisor
  8239  04FC  3000               	movlw	0
  8240  04FD  00A1               	movwf	___lwdiv@divisor+1
  8241  04FE  0875               	movf	LedBlinkStateMachine@LedBlink,w
  8242  04FF  3E04               	addlw	4
  8243  0500  0086               	movwf	6
  8244  0501  0187               	clrf	7
  8245  0502  3F40               	moviw [0]fsr1
  8246  0503  00A2               	movwf	___lwdiv@dividend
  8247  0504  3F41               	moviw [1]fsr1
  8248  0505  00A3               	movwf	___lwdiv@dividend+1
  8249  0506  318C  24D2  3184   	fcall	___lwdiv
  8250  0509  0875               	movf	LedBlinkStateMachine@LedBlink,w
  8251  050A  3E02               	addlw	2
  8252  050B  0086               	movwf	6
  8253  050C  0187               	clrf	7
  8254  050D  3F40               	moviw [0]fsr1
  8255  050E  0020               	movlb	0	; select bank0
  8256  050F  00A7               	movwf	??_LedBlinkStateMachine
  8257  0510  3F41               	moviw [1]fsr1
  8258  0511  00A8               	movwf	??_LedBlinkStateMachine+1
  8259  0512  0821               	movf	?___lwdiv+1,w
  8260  0513  0228               	subwf	??_LedBlinkStateMachine+1,w
  8261  0514  1D03               	skipz
  8262  0515  2D18               	goto	u2795
  8263  0516  0820               	movf	?___lwdiv,w
  8264  0517  0227               	subwf	??_LedBlinkStateMachine,w
  8265  0518                     u2795:	
  8266  0518  1C03               	skipc
  8267  0519  2D31               	goto	l4059
  8268                           
  8269                           ;led_drv.c: 105: {
  8270                           ;led_drv.c: 107: LedBlink->LedBlinkCounter = 0;
  8271  051A  0875               	movf	LedBlinkStateMachine@LedBlink,w
  8272  051B  3E02               	addlw	2
  8273  051C  0086               	movwf	6
  8274  051D  0187               	clrf	7
  8275  051E  3000               	movlw	0
  8276  051F  3FC0               	movwi [0]fsr1
  8277  0520  3FC1               	movwi [1]fsr1
  8278                           
  8279                           ;led_drv.c: 109: LedBlink->LedOutState = OffState;
  8280  0521  0A75               	incf	LedBlinkStateMachine@LedBlink,w
  8281  0522  0086               	movwf	6
  8282  0523  0187               	clrf	7
  8283  0524  0181               	clrf	1
  8284                           
  8285                           ;led_drv.c: 116: }
  8286                           
  8287                           ;led_drv.c: 115: break;
  8288                           
  8289                           ;led_drv.c: 114: default:
  8290                           
  8291                           ;led_drv.c: 110: }
  8292                           ;led_drv.c: 111: }
  8293                           ;led_drv.c: 112: break;
  8294  0525  2D31               	goto	l4059
  8295  0526                     l4057:	
  8296  0526  0875               	movf	LedBlinkStateMachine@LedBlink,w
  8297  0527  0086               	movwf	6
  8298  0528  0187               	clrf	7
  8299  0529  0801               	movf	1,w
  8300                           
  8301                           ; Switch size 1, requested type "space"
  8302                           ; Number of cases is 2, Range of values is 0 to 1
  8303                           ; switch strategies available:
  8304                           ; Name         Instructions Cycles
  8305                           ; simple_byte            7     4 (average)
  8306                           ; direct_byte           10     6 (fixed)
  8307                           ; jumptable            260     6 (fixed)
  8308                           ;	Chosen strategy is simple_byte
  8309  052A  3A00               	xorlw	0	; case 0
  8310  052B  1903               	skipnz
  8311  052C  2CA8               	goto	l4035
  8312  052D  3A01               	xorlw	1	; case 1
  8313  052E  1903               	skipnz
  8314  052F  2CB6               	goto	l4039
  8315  0530  2D31               	goto	l4059
  8316  0531                     l4059:	
  8317                           
  8318                           ;led_drv.c: 119: return (LedBlink->LedOutState);
  8319  0531  0A75               	incf	LedBlinkStateMachine@LedBlink,w
  8320  0532  0086               	movwf	6
  8321  0533  0187               	clrf	7
  8322  0534  0801               	movf	1,w
  8323  0535  0008               	return
  8324  0536                     __end_of_LedBlinkStateMachine:	
  8325                           
  8326                           	psect	text27
  8327  090B                     __ptext27:	
  8328 ;; *************** function _CheckStopBitStatus *****************
  8329 ;; Defined at:
  8330 ;;		line 151 in file "../../../Framework/MercuryFwk/Source/c/01_Hal/02_Drv/i2c_slv_drv.c"
  8331 ;; Parameters:    Size  Location     Type
  8332 ;;		None
  8333 ;; Auto vars:     Size  Location     Type
  8334 ;;		None
  8335 ;; Return value:  Size  Location     Type
  8336 ;;                  1    wreg      unsigned char 
  8337 ;; Registers used:
  8338 ;;		wreg, status,2, status,0
  8339 ;; Tracked objects:
  8340 ;;		On entry : 0/0
  8341 ;;		On exit  : 0/0
  8342 ;;		Unchanged: 0/0
  8343 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8344 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8345 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8346 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8347 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8348 ;;Total ram usage:        1 bytes
  8349 ;; Hardware stack levels used:    1
  8350 ;; Hardware stack levels required when called:    2
  8351 ;; This function calls:
  8352 ;;		Nothing
  8353 ;; This function is called by:
  8354 ;;		_I2c_DataReceiveSm
  8355 ;; This function uses a non-reentrant model
  8356 ;;
  8357                           
  8358                           
  8359                           ;psect for function _CheckStopBitStatus
  8360  090B                     _CheckStopBitStatus:	
  8361                           
  8362                           ;i2c_slv_drv.c: 154: return ((SSP1STAT & ((UINT8)(0x10))) >> ((UINT8)(4)));
  8363                           
  8364                           ;incstack = 0
  8365                           ; Regs used in _CheckStopBitStatus: [wreg+status,2+status,0]
  8366  090B  0024               	movlb	4	; select bank4
  8367  090C  0814               	movf	20,w	;volatile
  8368  090D  00F4               	movwf	??_CheckStopBitStatus
  8369  090E  3004               	movlw	4
  8370  090F                     u1765:	
  8371  090F  36F4               	lsrf	??_CheckStopBitStatus,f
  8372  0910  0B89               	decfsz	9,f
  8373  0911  290F               	goto	u1765
  8374  0912  0874               	movf	??_CheckStopBitStatus,w
  8375  0913  3901               	andlw	1
  8376  0914  0008               	return
  8377  0915                     __end_of_CheckStopBitStatus:	
  8378                           
  8379                           	psect	text28
  8380  0901                     __ptext28:	
  8381 ;; *************** function _CheckByteStatus *****************
  8382 ;; Defined at:
  8383 ;;		line 137 in file "../../../Framework/MercuryFwk/Source/c/01_Hal/02_Drv/i2c_slv_drv.c"
  8384 ;; Parameters:    Size  Location     Type
  8385 ;;		None
  8386 ;; Auto vars:     Size  Location     Type
  8387 ;;		None
  8388 ;; Return value:  Size  Location     Type
  8389 ;;                  1    wreg      unsigned char 
  8390 ;; Registers used:
  8391 ;;		wreg, status,2, status,0
  8392 ;; Tracked objects:
  8393 ;;		On entry : 0/0
  8394 ;;		On exit  : 0/0
  8395 ;;		Unchanged: 0/0
  8396 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8397 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8398 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8399 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8400 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8401 ;;Total ram usage:        1 bytes
  8402 ;; Hardware stack levels used:    1
  8403 ;; Hardware stack levels required when called:    2
  8404 ;; This function calls:
  8405 ;;		Nothing
  8406 ;; This function is called by:
  8407 ;;		_I2c_DataReceiveSm
  8408 ;; This function uses a non-reentrant model
  8409 ;;
  8410                           
  8411                           
  8412                           ;psect for function _CheckByteStatus
  8413  0901                     _CheckByteStatus:	
  8414                           
  8415                           ;i2c_slv_drv.c: 140: return ((SSP1STAT & ((UINT8)(0x20))) >> ((UINT8)(5)));
  8416                           
  8417                           ;incstack = 0
  8418                           ; Regs used in _CheckByteStatus: [wreg+status,2+status,0]
  8419  0901  0024               	movlb	4	; select bank4
  8420  0902  0814               	movf	20,w	;volatile
  8421  0903  00F4               	movwf	??_CheckByteStatus
  8422  0904  3005               	movlw	5
  8423  0905                     u1755:	
  8424  0905  36F4               	lsrf	??_CheckByteStatus,f
  8425  0906  0B89               	decfsz	9,f
  8426  0907  2905               	goto	u1755
  8427  0908  0874               	movf	??_CheckByteStatus,w
  8428  0909  3901               	andlw	1
  8429  090A  0008               	return
  8430  090B                     __end_of_CheckByteStatus:	
  8431                           
  8432                           	psect	text29
  8433  08F7                     __ptext29:	
  8434 ;; *************** function _CheckAckStatus *****************
  8435 ;; Defined at:
  8436 ;;		line 109 in file "../../../Framework/MercuryFwk/Source/c/01_Hal/02_Drv/i2c_slv_drv.c"
  8437 ;; Parameters:    Size  Location     Type
  8438 ;;		None
  8439 ;; Auto vars:     Size  Location     Type
  8440 ;;		None
  8441 ;; Return value:  Size  Location     Type
  8442 ;;                  1    wreg      unsigned char 
  8443 ;; Registers used:
  8444 ;;		wreg, status,2, status,0
  8445 ;; Tracked objects:
  8446 ;;		On entry : 0/0
  8447 ;;		On exit  : 0/0
  8448 ;;		Unchanged: 0/0
  8449 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8450 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8451 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8452 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8453 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8454 ;;Total ram usage:        1 bytes
  8455 ;; Hardware stack levels used:    1
  8456 ;; Hardware stack levels required when called:    2
  8457 ;; This function calls:
  8458 ;;		Nothing
  8459 ;; This function is called by:
  8460 ;;		_I2c_DataReceiveSm
  8461 ;; This function uses a non-reentrant model
  8462 ;;
  8463                           
  8464                           
  8465                           ;psect for function _CheckAckStatus
  8466  08F7                     _CheckAckStatus:	
  8467                           
  8468                           ;i2c_slv_drv.c: 112: return ((SSP1CON2 & ((UINT8)(0x40))) >> ((UINT8)(6)));
  8469                           
  8470                           ;incstack = 0
  8471                           ; Regs used in _CheckAckStatus: [wreg+status,2+status,0]
  8472  08F7  0024               	movlb	4	; select bank4
  8473  08F8  0816               	movf	22,w	;volatile
  8474  08F9  00F4               	movwf	??_CheckAckStatus
  8475  08FA  3006               	movlw	6
  8476  08FB                     u1745:	
  8477  08FB  36F4               	lsrf	??_CheckAckStatus,f
  8478  08FC  0B89               	decfsz	9,f
  8479  08FD  28FB               	goto	u1745
  8480  08FE  0874               	movf	??_CheckAckStatus,w
  8481  08FF  3901               	andlw	1
  8482  0900  0008               	return
  8483  0901                     __end_of_CheckAckStatus:	
  8484                           
  8485                           	psect	text30
  8486  09DA                     __ptext30:	
  8487 ;; *************** function _I2c_SetConfig *****************
  8488 ;; Defined at:
  8489 ;;		line 82 in file "../../../Framework/MercuryFwk/Source/c/03_Sml/01_Pml/01_SlvI2c/i2c_slv.c"
  8490 ;; Parameters:    Size  Location     Type
  8491 ;;		None
  8492 ;; Auto vars:     Size  Location     Type
  8493 ;;		None
  8494 ;; Return value:  Size  Location     Type
  8495 ;;                  1    wreg      void 
  8496 ;; Registers used:
  8497 ;;		wreg, status,2
  8498 ;; Tracked objects:
  8499 ;;		On entry : 0/0
  8500 ;;		On exit  : 0/0
  8501 ;;		Unchanged: 0/0
  8502 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8503 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8504 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8505 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8506 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8507 ;;Total ram usage:        1 bytes
  8508 ;; Hardware stack levels used:    1
  8509 ;; Hardware stack levels required when called:    2
  8510 ;; This function calls:
  8511 ;;		Nothing
  8512 ;; This function is called by:
  8513 ;;		_I2cSlv_MainTask
  8514 ;; This function uses a non-reentrant model
  8515 ;;
  8516                           
  8517                           
  8518                           ;psect for function _I2c_SetConfig
  8519  09DA                     _I2c_SetConfig:	
  8520                           
  8521                           ;i2c_slv.c: 84: I2cConfig.I2cModuleMode = ((UINT8)(0b0110));
  8522                           
  8523                           ;incstack = 0
  8524                           ; Regs used in _I2c_SetConfig: [wreg+status,2]
  8525  09DA  3006               	movlw	6
  8526  09DB  00F4               	movwf	??_I2c_SetConfig
  8527  09DC  0874               	movf	??_I2c_SetConfig,w
  8528  09DD  0021               	movlb	1	; select bank1
  8529  09DE  00B2               	movwf	_I2cConfig^(0+128)
  8530                           
  8531                           ;i2c_slv.c: 85: I2cConfig.I2cReceiverEnable = ((UINT8)(0));
  8532  09DF  01B3               	clrf	(_I2cConfig^(0+128)+1)
  8533                           
  8534                           ;i2c_slv.c: 86: I2cConfig.EnableI2cModule = ((UINT8)(1));
  8535  09E0  01B4               	clrf	(_I2cConfig^(0+128)+2)
  8536  09E1  0AB4               	incf	(_I2cConfig^(0+128)+2),f
  8537                           
  8538                           ;i2c_slv.c: 87: I2cConfig.ClockStretchEnable = ((UINT8)(1));
  8539  09E2  01B5               	clrf	(_I2cConfig^(0+128)+3)
  8540  09E3  0AB5               	incf	(_I2cConfig^(0+128)+3),f
  8541                           
  8542                           ;i2c_slv.c: 88: I2cConfig.StopCondIntEnable = ((UINT8)(1));
  8543  09E4  01B6               	clrf	(_I2cConfig^(0+128)+4)
  8544  09E5  0AB6               	incf	(_I2cConfig^(0+128)+4),f
  8545                           
  8546                           ;i2c_slv.c: 89: I2cConfig.StartCondIntEnable = ((UINT8)(1));
  8547  09E6  01B7               	clrf	(_I2cConfig^(0+128)+5)
  8548  09E7  0AB7               	incf	(_I2cConfig^(0+128)+5),f
  8549                           
  8550                           ;i2c_slv.c: 90: I2cConfig.BufferOverwriteEnable = ((UINT8)(0));
  8551  09E8  01B8               	clrf	(_I2cConfig^(0+128)+6)
  8552                           
  8553                           ;i2c_slv.c: 91: I2cConfig.BusCollisionDetectEnable = ((UINT8)(1));
  8554  09E9  01B9               	clrf	(_I2cConfig^(0+128)+7)
  8555  09EA  0AB9               	incf	(_I2cConfig^(0+128)+7),f
  8556                           
  8557                           ;i2c_slv.c: 92: I2cConfig.AddrHoldEnable = ((UINT8)(0));
  8558  09EB  01BA               	clrf	(_I2cConfig^(0+128)+8)
  8559                           
  8560                           ;i2c_slv.c: 93: I2cConfig.DataHoldEnable = ((UINT8)(0));
  8561  09EC  01BB               	clrf	(_I2cConfig^(0+128)+9)
  8562                           
  8563                           ;i2c_slv.c: 94: I2cConfig.GeneralCallEnable = ((UINT8)(1));
  8564  09ED  01BC               	clrf	(_I2cConfig^(0+128)+10)
  8565  09EE  0ABC               	incf	(_I2cConfig^(0+128)+10),f
  8566  09EF  0008               	return
  8567  09F0                     __end_of_I2c_SetConfig:	
  8568                           
  8569                           	psect	text31
  8570  03FA                     __ptext31:	
  8571 ;; *************** function _I2c_InitI2cModule *****************
  8572 ;; Defined at:
  8573 ;;		line 207 in file "../../../Framework/MercuryFwk/Source/c/01_Hal/02_Drv/i2c_slv_drv.c"
  8574 ;; Parameters:    Size  Location     Type
  8575 ;;  I2cConfig       1    wreg     PTR struct _I2cConfig
  8576 ;;		 -> I2cConfig(11), 
  8577 ;; Auto vars:     Size  Location     Type
  8578 ;;  I2cConfig       1    2[BANK0 ] PTR struct _I2cConfig
  8579 ;;		 -> I2cConfig(11), 
  8580 ;; Return value:  Size  Location     Type
  8581 ;;                  1    wreg      void 
  8582 ;; Registers used:
  8583 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8584 ;; Tracked objects:
  8585 ;;		On entry : 0/0
  8586 ;;		On exit  : 0/0
  8587 ;;		Unchanged: 0/0
  8588 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8589 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8590 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8591 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8592 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8593 ;;Total ram usage:        3 bytes
  8594 ;; Hardware stack levels used:    1
  8595 ;; Hardware stack levels required when called:    3
  8596 ;; This function calls:
  8597 ;;		_ClearRxBuffer
  8598 ;;		_ClearTxBuffer
  8599 ;; This function is called by:
  8600 ;;		_I2cSlv_MainTask
  8601 ;; This function uses a non-reentrant model
  8602 ;;
  8603                           
  8604                           
  8605                           ;psect for function _I2c_InitI2cModule
  8606  03FA                     _I2c_InitI2cModule:	
  8607                           
  8608                           ;incstack = 0
  8609                           ; Regs used in _I2c_InitI2cModule: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  8610                           ;I2c_InitI2cModule@I2cConfig stored from wreg
  8611  03FA  0020               	movlb	0	; select bank0
  8612  03FB  00A2               	movwf	I2c_InitI2cModule@I2cConfig
  8613                           
  8614                           ;i2c_slv_drv.c: 210: TRISCbits.TRISC1 = ((UINT8)(1));
  8615  03FC  0021               	movlb	1	; select bank1
  8616  03FD  148E               	bsf	14,1	;volatile
  8617                           
  8618                           ;i2c_slv_drv.c: 211: TRISCbits.TRISC0 = ((UINT8)(1));
  8619  03FE  140E               	bsf	14,0	;volatile
  8620                           
  8621                           ;i2c_slv_drv.c: 215: SSP1CON1 |= (I2cConfig->I2cModuleMode) << ((UINT8)(0));
  8622  03FF  0020               	movlb	0	; select bank0
  8623  0400  0822               	movf	I2c_InitI2cModule@I2cConfig,w
  8624  0401  0086               	movwf	6
  8625  0402  0187               	clrf	7
  8626  0403  0801               	movf	1,w
  8627  0404  00A0               	movwf	??_I2c_InitI2cModule
  8628  0405  0820               	movf	??_I2c_InitI2cModule,w
  8629  0406  0024               	movlb	4	; select bank4
  8630  0407  0495               	iorwf	21,f	;volatile
  8631                           
  8632                           ;i2c_slv_drv.c: 218: SSP1CON2 |= (I2cConfig->I2cReceiverEnable) << ((UINT8)(3));
  8633  0408  0020               	movlb	0	; select bank0
  8634  0409  0A22               	incf	I2c_InitI2cModule@I2cConfig,w
  8635  040A  0086               	movwf	6
  8636  040B  0187               	clrf	7
  8637  040C  0801               	movf	1,w
  8638  040D  00A0               	movwf	??_I2c_InitI2cModule
  8639  040E  3002               	movlw	2
  8640  040F                     u2935:	
  8641  040F  35A0               	lslf	??_I2c_InitI2cModule,f
  8642  0410  3EFF               	addlw	-1
  8643  0411  1D03               	skipz
  8644  0412  2C0F               	goto	u2935
  8645  0413  3520               	lslf	??_I2c_InitI2cModule,w
  8646  0414  00A1               	movwf	??_I2c_InitI2cModule+1
  8647  0415  0821               	movf	??_I2c_InitI2cModule+1,w
  8648  0416  0024               	movlb	4	; select bank4
  8649  0417  0496               	iorwf	22,f	;volatile
  8650                           
  8651                           ;i2c_slv_drv.c: 219: SSP1CON2 |= (I2cConfig->ClockStretchEnable) << ((UINT8)(0));
  8652  0418  0020               	movlb	0	; select bank0
  8653  0419  0822               	movf	I2c_InitI2cModule@I2cConfig,w
  8654  041A  3E03               	addlw	3
  8655  041B  0086               	movwf	6
  8656  041C  0187               	clrf	7
  8657  041D  0801               	movf	1,w
  8658  041E  00A0               	movwf	??_I2c_InitI2cModule
  8659  041F  0820               	movf	??_I2c_InitI2cModule,w
  8660  0420  0024               	movlb	4	; select bank4
  8661  0421  0496               	iorwf	22,f	;volatile
  8662                           
  8663                           ;i2c_slv_drv.c: 220: SSP1CON2 |= (I2cConfig->GeneralCallEnable) << ((UINT8)(7));
  8664  0422  0020               	movlb	0	; select bank0
  8665  0423  0822               	movf	I2c_InitI2cModule@I2cConfig,w
  8666  0424  3E0A               	addlw	10
  8667  0425  0086               	movwf	6
  8668  0426  0187               	clrf	7
  8669  0427  0801               	movf	1,w
  8670  0428  00A0               	movwf	??_I2c_InitI2cModule
  8671  0429  3006               	movlw	6
  8672  042A                     u2945:	
  8673  042A  35A0               	lslf	??_I2c_InitI2cModule,f
  8674  042B  3EFF               	addlw	-1
  8675  042C  1D03               	skipz
  8676  042D  2C2A               	goto	u2945
  8677  042E  3520               	lslf	??_I2c_InitI2cModule,w
  8678  042F  00A1               	movwf	??_I2c_InitI2cModule+1
  8679  0430  0821               	movf	??_I2c_InitI2cModule+1,w
  8680  0431  0024               	movlb	4	; select bank4
  8681  0432  0496               	iorwf	22,f	;volatile
  8682                           
  8683                           ;i2c_slv_drv.c: 223: SSP1CON3 |= (I2cConfig->StopCondIntEnable) << ((UINT8)(6));
  8684  0433  0020               	movlb	0	; select bank0
  8685  0434  0822               	movf	I2c_InitI2cModule@I2cConfig,w
  8686  0435  3E04               	addlw	4
  8687  0436  0086               	movwf	6
  8688  0437  0187               	clrf	7
  8689  0438  0801               	movf	1,w
  8690  0439  00A0               	movwf	??_I2c_InitI2cModule
  8691  043A  3005               	movlw	5
  8692  043B                     u2955:	
  8693  043B  35A0               	lslf	??_I2c_InitI2cModule,f
  8694  043C  3EFF               	addlw	-1
  8695  043D  1D03               	skipz
  8696  043E  2C3B               	goto	u2955
  8697  043F  3520               	lslf	??_I2c_InitI2cModule,w
  8698  0440  00A1               	movwf	??_I2c_InitI2cModule+1
  8699  0441  0821               	movf	??_I2c_InitI2cModule+1,w
  8700  0442  0024               	movlb	4	; select bank4
  8701  0443  0497               	iorwf	23,f	;volatile
  8702                           
  8703                           ;i2c_slv_drv.c: 224: SSP1CON3 |= (I2cConfig->StartCondIntEnable) << ((UINT8)(5));
  8704  0444  0020               	movlb	0	; select bank0
  8705  0445  0822               	movf	I2c_InitI2cModule@I2cConfig,w
  8706  0446  3E05               	addlw	5
  8707  0447  0086               	movwf	6
  8708  0448  0187               	clrf	7
  8709  0449  0801               	movf	1,w
  8710  044A  00A0               	movwf	??_I2c_InitI2cModule
  8711  044B  3004               	movlw	4
  8712  044C                     u2965:	
  8713  044C  35A0               	lslf	??_I2c_InitI2cModule,f
  8714  044D  3EFF               	addlw	-1
  8715  044E  1D03               	skipz
  8716  044F  2C4C               	goto	u2965
  8717  0450  3520               	lslf	??_I2c_InitI2cModule,w
  8718  0451  00A1               	movwf	??_I2c_InitI2cModule+1
  8719  0452  0821               	movf	??_I2c_InitI2cModule+1,w
  8720  0453  0024               	movlb	4	; select bank4
  8721  0454  0497               	iorwf	23,f	;volatile
  8722                           
  8723                           ;i2c_slv_drv.c: 225: SSP1CON3 |= (I2cConfig->BufferOverwriteEnable) << ((UINT8)(4));
  8724  0455  0020               	movlb	0	; select bank0
  8725  0456  0822               	movf	I2c_InitI2cModule@I2cConfig,w
  8726  0457  3E06               	addlw	6
  8727  0458  0086               	movwf	6
  8728  0459  0187               	clrf	7
  8729  045A  0801               	movf	1,w
  8730  045B  00A0               	movwf	??_I2c_InitI2cModule
  8731  045C  3003               	movlw	3
  8732  045D                     u2975:	
  8733  045D  35A0               	lslf	??_I2c_InitI2cModule,f
  8734  045E  3EFF               	addlw	-1
  8735  045F  1D03               	skipz
  8736  0460  2C5D               	goto	u2975
  8737  0461  3520               	lslf	??_I2c_InitI2cModule,w
  8738  0462  00A1               	movwf	??_I2c_InitI2cModule+1
  8739  0463  0821               	movf	??_I2c_InitI2cModule+1,w
  8740  0464  0024               	movlb	4	; select bank4
  8741  0465  0497               	iorwf	23,f	;volatile
  8742                           
  8743                           ;i2c_slv_drv.c: 226: SSP1CON3 |= (I2cConfig->BusCollisionDetectEnable) << ((UINT8)(2));
  8744  0466  0020               	movlb	0	; select bank0
  8745  0467  0822               	movf	I2c_InitI2cModule@I2cConfig,w
  8746  0468  3E07               	addlw	7
  8747  0469  0086               	movwf	6
  8748  046A  0187               	clrf	7
  8749  046B  0801               	movf	1,w
  8750  046C  00A0               	movwf	??_I2c_InitI2cModule
  8751  046D  3001               	movlw	1
  8752  046E                     u2985:	
  8753  046E  35A0               	lslf	??_I2c_InitI2cModule,f
  8754  046F  3EFF               	addlw	-1
  8755  0470  1D03               	skipz
  8756  0471  2C6E               	goto	u2985
  8757  0472  3520               	lslf	??_I2c_InitI2cModule,w
  8758  0473  00A1               	movwf	??_I2c_InitI2cModule+1
  8759  0474  0821               	movf	??_I2c_InitI2cModule+1,w
  8760  0475  0024               	movlb	4	; select bank4
  8761  0476  0497               	iorwf	23,f	;volatile
  8762                           
  8763                           ;i2c_slv_drv.c: 227: SSP1CON3 |= (I2cConfig->AddrHoldEnable) << ((UINT8)(1));
  8764  0477  0020               	movlb	0	; select bank0
  8765  0478  0822               	movf	I2c_InitI2cModule@I2cConfig,w
  8766  0479  3E08               	addlw	8
  8767  047A  0086               	movwf	6
  8768  047B  0187               	clrf	7
  8769  047C  3501               	lslf	1,w
  8770  047D  00A0               	movwf	??_I2c_InitI2cModule
  8771  047E  0820               	movf	??_I2c_InitI2cModule,w
  8772  047F  0024               	movlb	4	; select bank4
  8773  0480  0497               	iorwf	23,f	;volatile
  8774                           
  8775                           ;i2c_slv_drv.c: 228: SSP1CON3 |= (I2cConfig->DataHoldEnable) << ((UINT8)(0));
  8776  0481  0020               	movlb	0	; select bank0
  8777  0482  0822               	movf	I2c_InitI2cModule@I2cConfig,w
  8778  0483  3E09               	addlw	9
  8779  0484  0086               	movwf	6
  8780  0485  0187               	clrf	7
  8781  0486  0801               	movf	1,w
  8782  0487  00A0               	movwf	??_I2c_InitI2cModule
  8783  0488  0820               	movf	??_I2c_InitI2cModule,w
  8784  0489  0024               	movlb	4	; select bank4
  8785  048A  0497               	iorwf	23,f	;volatile
  8786                           
  8787                           ;i2c_slv_drv.c: 231: SSP1CON1 |= (I2cConfig->EnableI2cModule) << ((UINT8)(5));
  8788  048B  0020               	movlb	0	; select bank0
  8789  048C  0822               	movf	I2c_InitI2cModule@I2cConfig,w
  8790  048D  3E02               	addlw	2
  8791  048E  0086               	movwf	6
  8792  048F  0187               	clrf	7
  8793  0490  0801               	movf	1,w
  8794  0491  00A0               	movwf	??_I2c_InitI2cModule
  8795  0492  3004               	movlw	4
  8796  0493                     u2995:	
  8797  0493  35A0               	lslf	??_I2c_InitI2cModule,f
  8798  0494  3EFF               	addlw	-1
  8799  0495  1D03               	skipz
  8800  0496  2C93               	goto	u2995
  8801  0497  3520               	lslf	??_I2c_InitI2cModule,w
  8802  0498  00A1               	movwf	??_I2c_InitI2cModule+1
  8803  0499  0821               	movf	??_I2c_InitI2cModule+1,w
  8804  049A  0024               	movlb	4	; select bank4
  8805  049B  0495               	iorwf	21,f	;volatile
  8806                           
  8807                           ;i2c_slv_drv.c: 234: PIR1bits.SSP1IF = ((UINT8)(0));
  8808  049C  0020               	movlb	0	; select bank0
  8809  049D  1191               	bcf	17,3	;volatile
  8810                           
  8811                           ;i2c_slv_drv.c: 235: PIE1bits.SSP1IE = ((UINT8)(1));
  8812  049E  0021               	movlb	1	; select bank1
  8813  049F  1591               	bsf	17,3	;volatile
  8814                           
  8815                           ;i2c_slv_drv.c: 238: ClearRxBuffer();
  8816  04A0  3189  2180  3183   	fcall	_ClearRxBuffer
  8817                           
  8818                           ;i2c_slv_drv.c: 239: ClearTxBuffer();
  8819  04A3  3189  2190         	fcall	_ClearTxBuffer
  8820  04A5  0008               	return
  8821  04A6                     __end_of_I2c_InitI2cModule:	
  8822                           
  8823                           	psect	text32
  8824  0990                     __ptext32:	
  8825 ;; *************** function _ClearTxBuffer *****************
  8826 ;; Defined at:
  8827 ;;		line 184 in file "../../../Framework/MercuryFwk/Source/c/01_Hal/02_Drv/i2c_slv_drv.c"
  8828 ;; Parameters:    Size  Location     Type
  8829 ;;		None
  8830 ;; Auto vars:     Size  Location     Type
  8831 ;;  Index           1    5[COMMON] unsigned char 
  8832 ;; Return value:  Size  Location     Type
  8833 ;;                  1    wreg      void 
  8834 ;; Registers used:
  8835 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  8836 ;; Tracked objects:
  8837 ;;		On entry : 0/0
  8838 ;;		On exit  : 0/0
  8839 ;;		Unchanged: 0/0
  8840 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8841 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8842 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8843 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8844 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8845 ;;Total ram usage:        2 bytes
  8846 ;; Hardware stack levels used:    1
  8847 ;; Hardware stack levels required when called:    2
  8848 ;; This function calls:
  8849 ;;		Nothing
  8850 ;; This function is called by:
  8851 ;;		_I2c_InitI2cModule
  8852 ;;		_I2c_DataReceiveSm
  8853 ;; This function uses a non-reentrant model
  8854 ;;
  8855                           
  8856                           
  8857                           ;psect for function _ClearTxBuffer
  8858  0990                     _ClearTxBuffer:	
  8859                           
  8860                           ;i2c_slv_drv.c: 186: UINT8 Index;
  8861                           ;i2c_slv_drv.c: 189: for (Index = 0; Index < ((UINT8)(80)); Index++)
  8862                           
  8863                           ;incstack = 0
  8864                           ; Regs used in _ClearTxBuffer: [wreg+fsr1l+fsr1h+status,2+status,0]
  8865  0990  01F5               	clrf	ClearTxBuffer@Index
  8866  0991                     L9:	
  8867  0991  3050               	movlw	80
  8868  0992  0275               	subwf	ClearTxBuffer@Index,w
  8869  0993  1803               	btfsc	3,0
  8870  0994  0008               	return
  8871                           
  8872                           ;i2c_slv_drv.c: 190: {
  8873                           ;i2c_slv_drv.c: 191: I2cTxBuffer[Index] = 0x00;
  8874  0995  0875               	movf	ClearTxBuffer@Index,w
  8875  0996  3EA0               	addlw	(low (_I2cTxBuffer| (0+512)))& (0+255)
  8876  0997  0086               	movwf	6
  8877  0998  3002               	movlw	2	; select bank5/6
  8878  0999  0087               	movwf	7
  8879  099A  0181               	clrf	1
  8880  099B  3001               	movlw	1
  8881  099C  00F4               	movwf	??_ClearTxBuffer
  8882  099D  0874               	movf	??_ClearTxBuffer,w
  8883  099E  07F5               	addwf	ClearTxBuffer@Index,f
  8884  099F  2991               	goto	L9
  8885  09A0                     __end_of_ClearTxBuffer:	
  8886                           
  8887                           	psect	text33
  8888  0980                     __ptext33:	
  8889 ;; *************** function _ClearRxBuffer *****************
  8890 ;; Defined at:
  8891 ;;		line 165 in file "../../../Framework/MercuryFwk/Source/c/01_Hal/02_Drv/i2c_slv_drv.c"
  8892 ;; Parameters:    Size  Location     Type
  8893 ;;		None
  8894 ;; Auto vars:     Size  Location     Type
  8895 ;;  Index           1    5[COMMON] unsigned char 
  8896 ;; Return value:  Size  Location     Type
  8897 ;;                  1    wreg      void 
  8898 ;; Registers used:
  8899 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  8900 ;; Tracked objects:
  8901 ;;		On entry : 0/0
  8902 ;;		On exit  : 0/0
  8903 ;;		Unchanged: 0/0
  8904 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8905 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8906 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8907 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8908 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8909 ;;Total ram usage:        2 bytes
  8910 ;; Hardware stack levels used:    1
  8911 ;; Hardware stack levels required when called:    2
  8912 ;; This function calls:
  8913 ;;		Nothing
  8914 ;; This function is called by:
  8915 ;;		_I2c_InitI2cModule
  8916 ;;		_I2c_DataReceiveSm
  8917 ;; This function uses a non-reentrant model
  8918 ;;
  8919                           
  8920                           
  8921                           ;psect for function _ClearRxBuffer
  8922  0980                     _ClearRxBuffer:	
  8923                           
  8924                           ;i2c_slv_drv.c: 167: UINT8 Index;
  8925                           ;i2c_slv_drv.c: 170: for (Index = 0; Index < ((UINT8)(80)); Index++)
  8926                           
  8927                           ;incstack = 0
  8928                           ; Regs used in _ClearRxBuffer: [wreg+fsr1l+fsr1h+status,2+status,0]
  8929  0980  01F5               	clrf	ClearRxBuffer@Index
  8930  0981                     L10:	
  8931  0981  3050               	movlw	80
  8932  0982  0275               	subwf	ClearRxBuffer@Index,w
  8933  0983  1803               	btfsc	3,0
  8934  0984  0008               	return
  8935                           
  8936                           ;i2c_slv_drv.c: 171: {
  8937                           ;i2c_slv_drv.c: 172: I2cRxBuffer[Index] = 0x00;
  8938  0985  0875               	movf	ClearRxBuffer@Index,w
  8939  0986  3E20               	addlw	(low (_I2cRxBuffer| (0+768)))& (0+255)
  8940  0987  0086               	movwf	6
  8941  0988  3003               	movlw	3	; select bank6/7
  8942  0989  0087               	movwf	7
  8943  098A  0181               	clrf	1
  8944  098B  3001               	movlw	1
  8945  098C  00F4               	movwf	??_ClearRxBuffer
  8946  098D  0874               	movf	??_ClearRxBuffer,w
  8947  098E  07F5               	addwf	ClearRxBuffer@Index,f
  8948  098F  2981               	goto	L10
  8949  0990                     __end_of_ClearRxBuffer:	
  8950                           
  8951                           	psect	text34
  8952  0536                     __ptext34:	
  8953 ;; *************** function _I2cSlv_I2cDrvHandle *****************
  8954 ;; Defined at:
  8955 ;;		line 141 in file "../../../Framework/MercuryFwk/Source/c/03_Sml/01_Pml/01_SlvI2c/i2c_slv.c"
  8956 ;; Parameters:    Size  Location     Type
  8957 ;;		None
  8958 ;; Auto vars:     Size  Location     Type
  8959 ;;  Index           1    9[BANK0 ] unsigned char 
  8960 ;; Return value:  Size  Location     Type
  8961 ;;                  1    wreg      void 
  8962 ;; Registers used:
  8963 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8964 ;; Tracked objects:
  8965 ;;		On entry : 0/0
  8966 ;;		On exit  : 0/0
  8967 ;;		Unchanged: 0/0
  8968 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8969 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8970 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8971 ;;      Temps:          0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8972 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8973 ;;Total ram usage:        6 bytes
  8974 ;; Hardware stack levels used:    1
  8975 ;; Hardware stack levels required when called:    3
  8976 ;; This function calls:
  8977 ;;		_GenerateEvt
  8978 ;;		_I2c_SetI2cAddress
  8979 ;;		_I2c_SetI2cAddressMask
  8980 ;;		_I2c_UpdateTxBuffer
  8981 ;;		_Led_SetLedStatus
  8982 ;;		_ReceiveEvt
  8983 ;; This function is called by:
  8984 ;;		_I2cSlv_MainTask
  8985 ;; This function uses a non-reentrant model
  8986 ;;
  8987                           
  8988                           
  8989                           ;psect for function _I2cSlv_I2cDrvHandle
  8990  0536                     _I2cSlv_I2cDrvHandle:	
  8991                           
  8992                           ;i2c_slv.c: 143: static I2cReceiveMsgStateType I2cReceiveMsgState = I2cSetSlaveAddres;
  8993                           ;i2c_slv.c: 144: UINT8 Index = 0;
  8994                           
  8995                           ;incstack = 0
  8996                           ; Regs used in _I2cSlv_I2cDrvHandle: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  8997  0536  0020               	movlb	0	; select bank0
  8998  0537  01A9               	clrf	I2cSlv_I2cDrvHandle@Index
  8999                           
  9000                           ;i2c_slv.c: 146: switch (I2cReceiveMsgState)
  9001  0538  2DBB               	goto	l4261
  9002  0539                     l4219:	
  9003                           ;i2c_slv.c: 147: {
  9004                           ;i2c_slv.c: 148: case I2cSetSlaveAddres:
  9005                           
  9006                           
  9007                           ;i2c_slv.c: 150: if (ReceiveEvt(&I2cSetAddress))
  9008  0539  30E2               	movlw	(low (_I2cSetAddress| 0))& (0+255)
  9009  053A  318A  22D9  3185   	fcall	_ReceiveEvt
  9010  053D  3A00               	xorlw	0
  9011  053E  1903               	skipnz
  9012  053F  0008               	return
  9013                           
  9014                           ;i2c_slv.c: 151: {
  9015                           ;i2c_slv.c: 153: I2c_SetI2cAddress(I2cSlaveAddress);
  9016  0540  0020               	movlb	0	; select bank0
  9017  0541  085F               	movf	_I2cSlaveAddress,w
  9018  0542  3188  20BB  3185   	fcall	_I2c_SetI2cAddress
  9019                           
  9020                           ;i2c_slv.c: 154: I2c_SetI2cAddressMask(((UINT8)(0x7F)));
  9021  0545  307F               	movlw	127
  9022  0546  3187  27FB         	fcall	_I2c_SetI2cAddressMask
  9023                           
  9024                           ;i2c_slv.c: 156: I2cReceiveMsgState = I2cReceiveData;
  9025  0548  0021               	movlb	1	; select bank1
  9026  0549  01AE               	clrf	I2cSlv_I2cDrvHandle@I2cReceiveMsgState^(0+128)
  9027  054A  0AAE               	incf	I2cSlv_I2cDrvHandle@I2cReceiveMsgState^(0+128),f
  9028                           
  9029                           ;i2c_slv.c: 157: }
  9030                           ;i2c_slv.c: 158: break;
  9031  054B  0008               	return
  9032  054C                     l4225:	
  9033                           ;i2c_slv.c: 160: case I2cReceiveData:
  9034                           
  9035                           
  9036                           ;i2c_slv.c: 162: if (ReceiveEvt(&I2cNewPacketNotification))
  9037  054C  30E6               	movlw	(low (_I2cNewPacketNotification| 0))& (0+255)
  9038  054D  318A  22D9  3185   	fcall	_ReceiveEvt
  9039  0550  3A00               	xorlw	0
  9040  0551  1903               	skipnz
  9041  0552  2D9E               	goto	l4251
  9042                           
  9043                           ;i2c_slv.c: 163: {
  9044                           ;i2c_slv.c: 165: if ((I2cPacket.SlaveAddress == I2cSlaveAddress) || (I2cPacket.SlaveAddr
      +                          ess == ((UINT8)(0x00))))
  9045  0553  309D               	movlw	157
  9046  0554  0086               	movwf	6
  9047  0555  3023               	movlw	35
  9048  0556  0087               	movwf	7
  9049  0557  0801               	movf	1,w
  9050  0558  0020               	movlb	0	; select bank0
  9051  0559  065F               	xorwf	_I2cSlaveAddress,w
  9052  055A  1903               	skipnz
  9053  055B  2D63               	goto	l4231
  9054  055C  309D               	movlw	157
  9055  055D  0086               	movwf	6
  9056  055E  3023               	movlw	35
  9057  055F  0087               	movwf	7
  9058  0560  0801               	movf	1,w
  9059  0561  1D03               	btfss	3,2
  9060  0562  0008               	return
  9061  0563                     l4231:	
  9062                           
  9063                           ;i2c_slv.c: 166: {
  9064                           ;i2c_slv.c: 167: if (I2cPacket.ReadWrite == ((UINT8)(0)))
  9065  0563  309D               	movlw	157
  9066  0564  0086               	movwf	6
  9067  0565  3023               	movlw	35
  9068  0566  0087               	movwf	7
  9069  0567  3141               	addfsr 1,1
  9070  0568  0801               	movf	1,w
  9071  0569  1D03               	btfss	3,2
  9072  056A  0008               	return
  9073                           
  9074                           ;i2c_slv.c: 168: {
  9075                           ;i2c_slv.c: 170: for (Index = 0; Index < ((UINT8)(80));Index++)
  9076  056B  01A9               	clrf	I2cSlv_I2cDrvHandle@Index
  9077  056C  3050               	movlw	80
  9078  056D  0229               	subwf	I2cSlv_I2cDrvHandle@Index,w
  9079  056E  1803               	btfsc	3,0
  9080  056F  2D8E               	goto	l4245
  9081  0570                     l4239:	
  9082                           
  9083                           ;i2c_slv.c: 171: {
  9084                           ;i2c_slv.c: 172: CmdBuffer[Index] = I2cPacket.Buffer[Index];
  9085  0570  0829               	movf	I2cSlv_I2cDrvHandle@Index,w
  9086  0571  00A4               	movwf	??_I2cSlv_I2cDrvHandle
  9087  0572  01A5               	clrf	??_I2cSlv_I2cDrvHandle+1
  9088  0573  309F               	movlw	159
  9089  0574  00A6               	movwf	??_I2cSlv_I2cDrvHandle+2
  9090  0575  3023               	movlw	35
  9091  0576  00A7               	movwf	??_I2cSlv_I2cDrvHandle+3
  9092  0577  0824               	movf	??_I2cSlv_I2cDrvHandle,w
  9093  0578  0726               	addwf	??_I2cSlv_I2cDrvHandle+2,w
  9094  0579  0086               	movwf	6
  9095  057A  0825               	movf	??_I2cSlv_I2cDrvHandle+1,w
  9096  057B  3D27               	addwfc	??_I2cSlv_I2cDrvHandle+3,w
  9097  057C  0087               	movwf	7
  9098  057D  0801               	movf	1,w
  9099  057E  00A8               	movwf	??_I2cSlv_I2cDrvHandle+4
  9100  057F  0829               	movf	I2cSlv_I2cDrvHandle@Index,w
  9101  0580  3EA0               	addlw	(low (_CmdBuffer| (0+256)))& (0+255)
  9102  0581  0086               	movwf	6
  9103  0582  3001               	movlw	1	; select bank3/4
  9104  0583  0087               	movwf	7
  9105  0584  0828               	movf	??_I2cSlv_I2cDrvHandle+4,w
  9106  0585  0081               	movwf	1
  9107  0586  3001               	movlw	1
  9108  0587  00A4               	movwf	??_I2cSlv_I2cDrvHandle
  9109  0588  0824               	movf	??_I2cSlv_I2cDrvHandle,w
  9110  0589  07A9               	addwf	I2cSlv_I2cDrvHandle@Index,f
  9111  058A  3050               	movlw	80
  9112  058B  0229               	subwf	I2cSlv_I2cDrvHandle@Index,w
  9113  058C  1C03               	skipc
  9114  058D  2D70               	goto	l4239
  9115  058E                     l4245:	
  9116                           
  9117                           ;i2c_slv.c: 173: }
  9118                           ;i2c_slv.c: 175: GenerateEvt(&I2cWriteRequest);
  9119  058E  30E0               	movlw	(low (_I2cWriteRequest| 0))& (0+255)
  9120  058F  318A  22FA  3185   	fcall	_GenerateEvt
  9121                           
  9122                           ;i2c_slv.c: 177: if (LedBehaviourSts == ((UINT8)(1)))
  9123  0592  0020               	movlb	0	; select bank0
  9124  0593  0368               	decf	_LedBehaviourSts,w
  9125  0594  1D03               	btfss	3,2
  9126  0595  0008               	return
  9127                           
  9128                           ;i2c_slv.c: 178: {
  9129                           ;i2c_slv.c: 179: Led_SetLedStatus(1u, LED_STS_PULSE);
  9130  0596  3003               	movlw	3
  9131  0597  00A4               	movwf	??_I2cSlv_I2cDrvHandle
  9132  0598  0824               	movf	??_I2cSlv_I2cDrvHandle,w
  9133  0599  00F4               	movwf	Led_SetLedStatus@LedSts
  9134  059A  3001               	movlw	1
  9135  059B  3189  2150         	fcall	_Led_SetLedStatus
  9136                           
  9137                           ;i2c_slv.c: 180: }
  9138                           ;i2c_slv.c: 181: }
  9139                           ;i2c_slv.c: 182: }
  9140                           ;i2c_slv.c: 183: }
  9141  059D  0008               	return
  9142  059E                     l4251:	
  9143                           
  9144                           ;i2c_slv.c: 185: else if (ReceiveEvt(&I2cReplyPacketReady))
  9145  059E  3066               	movlw	(low (_I2cReplyPacketReady| 0))& (0+255)
  9146  059F  318A  22D9  3185   	fcall	_ReceiveEvt
  9147  05A2  3A00               	xorlw	0
  9148  05A3  1903               	skipnz
  9149  05A4  0008               	return
  9150                           
  9151                           ;i2c_slv.c: 186: {
  9152                           ;i2c_slv.c: 188: I2c_UpdateTxBuffer(RepBuffer,RepBufferLen);
  9153  05A5  0021               	movlb	1	; select bank1
  9154  05A6  082F               	movf	_RepBufferLen^(0+128),w
  9155  05A7  0020               	movlb	0	; select bank0
  9156  05A8  00A4               	movwf	??_I2cSlv_I2cDrvHandle
  9157  05A9  0824               	movf	??_I2cSlv_I2cDrvHandle,w
  9158  05AA  00F4               	movwf	I2c_UpdateTxBuffer@Length
  9159  05AB  3020               	movlw	(low (_RepBuffer| (0+512)))& (0+255)
  9160  05AC  318A  229B  3185   	fcall	_I2c_UpdateTxBuffer
  9161                           
  9162                           ;i2c_slv.c: 190: if (LedBehaviourSts == ((UINT8)(1)))
  9163  05AF  0020               	movlb	0	; select bank0
  9164  05B0  0368               	decf	_LedBehaviourSts,w
  9165  05B1  1D03               	btfss	3,2
  9166  05B2  0008               	return
  9167                           
  9168                           ;i2c_slv.c: 191: {
  9169                           ;i2c_slv.c: 192: Led_SetLedStatus(1u, LED_STS_PULSE);
  9170  05B3  3003               	movlw	3
  9171  05B4  00A4               	movwf	??_I2cSlv_I2cDrvHandle
  9172  05B5  0824               	movf	??_I2cSlv_I2cDrvHandle,w
  9173  05B6  00F4               	movwf	Led_SetLedStatus@LedSts
  9174  05B7  3001               	movlw	1
  9175  05B8  3189  2150         	fcall	_Led_SetLedStatus
  9176                           
  9177                           ;i2c_slv.c: 199: }
  9178                           
  9179                           ;i2c_slv.c: 198: break;
  9180                           
  9181                           ;i2c_slv.c: 197: default:
  9182                           
  9183                           ;i2c_slv.c: 193: }
  9184                           ;i2c_slv.c: 194: }
  9185                           ;i2c_slv.c: 195: break;
  9186  05BA  0008               	return
  9187  05BB                     l4261:	
  9188  05BB  0021               	movlb	1	; select bank1
  9189  05BC  082E               	movf	I2cSlv_I2cDrvHandle@I2cReceiveMsgState^(0+128),w
  9190                           
  9191                           ; Switch size 1, requested type "space"
  9192                           ; Number of cases is 2, Range of values is 0 to 1
  9193                           ; switch strategies available:
  9194                           ; Name         Instructions Cycles
  9195                           ; simple_byte            7     4 (average)
  9196                           ; direct_byte           10     6 (fixed)
  9197                           ; jumptable            260     6 (fixed)
  9198                           ;	Chosen strategy is simple_byte
  9199  05BD  3A00               	xorlw	0	; case 0
  9200  05BE  1903               	skipnz
  9201  05BF  2D39               	goto	l4219
  9202  05C0  3A01               	xorlw	1	; case 1
  9203  05C1  1903               	skipnz
  9204  05C2  2D4C               	goto	l4225
  9205  05C3  2DC4               	goto	l556
  9206  05C4                     l556:	
  9207  05C4  0008               	return
  9208  05C5                     __end_of_I2cSlv_I2cDrvHandle:	
  9209                           
  9210                           	psect	text35
  9211  0A9B                     __ptext35:	
  9212 ;; *************** function _I2c_UpdateTxBuffer *****************
  9213 ;; Defined at:
  9214 ;;		line 279 in file "../../../Framework/MercuryFwk/Source/c/01_Hal/02_Drv/i2c_slv_drv.c"
  9215 ;; Parameters:    Size  Location     Type
  9216 ;;  DataBuffer      1    wreg     PTR unsigned char 
  9217 ;;		 -> RepBuffer(80), 
  9218 ;;  Length          1    4[COMMON] unsigned char 
  9219 ;; Auto vars:     Size  Location     Type
  9220 ;;  DataBuffer      1    2[BANK0 ] PTR unsigned char 
  9221 ;;		 -> RepBuffer(80), 
  9222 ;;  Index           1    3[BANK0 ] unsigned char 
  9223 ;; Return value:  Size  Location     Type
  9224 ;;                  1    wreg      void 
  9225 ;; Registers used:
  9226 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  9227 ;; Tracked objects:
  9228 ;;		On entry : 0/0
  9229 ;;		On exit  : 0/0
  9230 ;;		Unchanged: 0/0
  9231 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9232 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9233 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9234 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9235 ;;      Totals:         1       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9236 ;;Total ram usage:        5 bytes
  9237 ;; Hardware stack levels used:    1
  9238 ;; Hardware stack levels required when called:    2
  9239 ;; This function calls:
  9240 ;;		Nothing
  9241 ;; This function is called by:
  9242 ;;		_I2cSlv_I2cDrvHandle
  9243 ;; This function uses a non-reentrant model
  9244 ;;
  9245                           
  9246                           
  9247                           ;psect for function _I2c_UpdateTxBuffer
  9248  0A9B                     _I2c_UpdateTxBuffer:	
  9249                           
  9250                           ;incstack = 0
  9251                           ; Regs used in _I2c_UpdateTxBuffer: [wreg+fsr1l+fsr1h+status,2+status,0]
  9252                           ;I2c_UpdateTxBuffer@DataBuffer stored from wreg
  9253  0A9B  0020               	movlb	0	; select bank0
  9254  0A9C  00A2               	movwf	I2c_UpdateTxBuffer@DataBuffer
  9255                           
  9256                           ;i2c_slv_drv.c: 281: UINT8 Index = 0;
  9257  0A9D  01A3               	clrf	I2c_UpdateTxBuffer@Index
  9258                           
  9259                           ;i2c_slv_drv.c: 284: for (Index = 0; Index < Length; Index++)
  9260  0A9E  01A3               	clrf	I2c_UpdateTxBuffer@Index
  9261  0A9F                     l4031:	
  9262  0A9F  0874               	movf	I2c_UpdateTxBuffer@Length,w
  9263  0AA0  0223               	subwf	I2c_UpdateTxBuffer@Index,w
  9264  0AA1  1803               	btfsc	3,0
  9265  0AA2  0008               	return
  9266                           
  9267                           ;i2c_slv_drv.c: 285: {
  9268                           ;i2c_slv_drv.c: 286: I2cTxBuffer[Index] = *(DataBuffer + Index);
  9269  0AA3  0823               	movf	I2c_UpdateTxBuffer@Index,w
  9270  0AA4  0722               	addwf	I2c_UpdateTxBuffer@DataBuffer,w
  9271  0AA5  00A0               	movwf	??_I2c_UpdateTxBuffer
  9272  0AA6  0820               	movf	??_I2c_UpdateTxBuffer,w
  9273  0AA7  0086               	movwf	6
  9274  0AA8  3002               	movlw	2	; select bank4/5
  9275  0AA9  0087               	movwf	7
  9276  0AAA  0801               	movf	1,w
  9277  0AAB  00A1               	movwf	??_I2c_UpdateTxBuffer+1
  9278  0AAC  0823               	movf	I2c_UpdateTxBuffer@Index,w
  9279  0AAD  3EA0               	addlw	(low (_I2cTxBuffer| (0+512)))& (0+255)
  9280  0AAE  0086               	movwf	6
  9281  0AAF  3002               	movlw	2	; select bank5/6
  9282  0AB0  0087               	movwf	7
  9283  0AB1  0821               	movf	??_I2c_UpdateTxBuffer+1,w
  9284  0AB2  0081               	movwf	1
  9285  0AB3  3001               	movlw	1
  9286  0AB4  00A0               	movwf	??_I2c_UpdateTxBuffer
  9287  0AB5  0820               	movf	??_I2c_UpdateTxBuffer,w
  9288  0AB6  07A3               	addwf	I2c_UpdateTxBuffer@Index,f
  9289  0AB7  2A9F               	goto	l4031
  9290  0AB8                     __end_of_I2c_UpdateTxBuffer:	
  9291                           
  9292                           	psect	text36
  9293  07FB                     __ptext36:	
  9294 ;; *************** function _I2c_SetI2cAddressMask *****************
  9295 ;; Defined at:
  9296 ;;		line 264 in file "../../../Framework/MercuryFwk/Source/c/01_Hal/02_Drv/i2c_slv_drv.c"
  9297 ;; Parameters:    Size  Location     Type
  9298 ;;  SlaveAddress    1    wreg     unsigned char 
  9299 ;; Auto vars:     Size  Location     Type
  9300 ;;  SlaveAddress    1    4[COMMON] unsigned char 
  9301 ;; Return value:  Size  Location     Type
  9302 ;;                  1    wreg      void 
  9303 ;; Registers used:
  9304 ;;		wreg, status,2, status,0
  9305 ;; Tracked objects:
  9306 ;;		On entry : 0/0
  9307 ;;		On exit  : 0/0
  9308 ;;		Unchanged: 0/0
  9309 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9310 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9311 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9312 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9313 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9314 ;;Total ram usage:        1 bytes
  9315 ;; Hardware stack levels used:    1
  9316 ;; Hardware stack levels required when called:    2
  9317 ;; This function calls:
  9318 ;;		Nothing
  9319 ;; This function is called by:
  9320 ;;		_I2cSlv_I2cDrvHandle
  9321 ;; This function uses a non-reentrant model
  9322 ;;
  9323                           
  9324                           
  9325                           ;psect for function _I2c_SetI2cAddressMask
  9326  07FB                     _I2c_SetI2cAddressMask:	
  9327                           
  9328                           ;incstack = 0
  9329                           ; Regs used in _I2c_SetI2cAddressMask: [wreg+status,2+status,0]
  9330                           ;I2c_SetI2cAddressMask@SlaveAddressMask stored from wreg
  9331  07FB  00F4               	movwf	I2c_SetI2cAddressMask@SlaveAddressMask
  9332                           
  9333                           ;i2c_slv_drv.c: 267: SSP1MSK = (SlaveAddressMask << ((UINT8)(1)));
  9334  07FC  3574               	lslf	I2c_SetI2cAddressMask@SlaveAddressMask,w
  9335  07FD  0024               	movlb	4	; select bank4
  9336  07FE  0093               	movwf	19	;volatile
  9337  07FF  0008               	return
  9338  0800                     __end_of_I2c_SetI2cAddressMask:	
  9339                           
  9340                           	psect	text37
  9341  08BB                     __ptext37:	
  9342 ;; *************** function _I2c_SetI2cAddress *****************
  9343 ;; Defined at:
  9344 ;;		line 250 in file "../../../Framework/MercuryFwk/Source/c/01_Hal/02_Drv/i2c_slv_drv.c"
  9345 ;; Parameters:    Size  Location     Type
  9346 ;;  SlaveAddress    1    wreg     unsigned char 
  9347 ;; Auto vars:     Size  Location     Type
  9348 ;;  SlaveAddress    1    4[COMMON] unsigned char 
  9349 ;; Return value:  Size  Location     Type
  9350 ;;                  1    wreg      void 
  9351 ;; Registers used:
  9352 ;;		wreg, status,2, status,0
  9353 ;; Tracked objects:
  9354 ;;		On entry : 0/0
  9355 ;;		On exit  : 0/0
  9356 ;;		Unchanged: 0/0
  9357 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9358 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9359 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9360 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9361 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9362 ;;Total ram usage:        1 bytes
  9363 ;; Hardware stack levels used:    1
  9364 ;; Hardware stack levels required when called:    2
  9365 ;; This function calls:
  9366 ;;		Nothing
  9367 ;; This function is called by:
  9368 ;;		_I2cSlv_I2cDrvHandle
  9369 ;; This function uses a non-reentrant model
  9370 ;;
  9371                           
  9372                           
  9373                           ;psect for function _I2c_SetI2cAddress
  9374  08BB                     _I2c_SetI2cAddress:	
  9375                           
  9376                           ;incstack = 0
  9377                           ; Regs used in _I2c_SetI2cAddress: [wreg+status,2+status,0]
  9378                           ;I2c_SetI2cAddress@SlaveAddress stored from wreg
  9379  08BB  00F4               	movwf	I2c_SetI2cAddress@SlaveAddress
  9380                           
  9381                           ;i2c_slv_drv.c: 253: SSP1ADD = (SlaveAddress << ((UINT8)(1)));
  9382  08BC  3574               	lslf	I2c_SetI2cAddress@SlaveAddress,w
  9383  08BD  0024               	movlb	4	; select bank4
  9384  08BE  0092               	movwf	18	;volatile
  9385  08BF  0008               	return
  9386  08C0                     __end_of_I2c_SetI2cAddress:	
  9387                           
  9388                           	psect	text38
  9389  08E6                     __ptext38:	
  9390 ;; *************** function _Mcu_SetPullUpsSts *****************
  9391 ;; Defined at:
  9392 ;;		line 167 in file "../../../Framework/MercuryFwk/Source/c/01_Hal/02_Drv/mcu_drv.c"
  9393 ;; Parameters:    Size  Location     Type
  9394 ;;  PuSts           1    wreg     enum E3378
  9395 ;; Auto vars:     Size  Location     Type
  9396 ;;  PuSts           1    4[COMMON] enum E3378
  9397 ;; Return value:  Size  Location     Type
  9398 ;;                  1    wreg      void 
  9399 ;; Registers used:
  9400 ;;		wreg, status,0
  9401 ;; Tracked objects:
  9402 ;;		On entry : 0/0
  9403 ;;		On exit  : 0/0
  9404 ;;		Unchanged: 0/0
  9405 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9406 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9407 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9408 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9409 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9410 ;;Total ram usage:        1 bytes
  9411 ;; Hardware stack levels used:    1
  9412 ;; Hardware stack levels required when called:    2
  9413 ;; This function calls:
  9414 ;;		Nothing
  9415 ;; This function is called by:
  9416 ;;		_App_MainTask
  9417 ;; This function uses a non-reentrant model
  9418 ;;
  9419                           
  9420                           
  9421                           ;psect for function _Mcu_SetPullUpsSts
  9422  08E6                     _Mcu_SetPullUpsSts:	
  9423                           
  9424                           ;incstack = 0
  9425                           ; Regs used in _Mcu_SetPullUpsSts: [wreg+status,0]
  9426                           ;Mcu_SetPullUpsSts@PuSts stored from wreg
  9427  08E6  00F4               	movwf	Mcu_SetPullUpsSts@PuSts
  9428                           
  9429                           ;mcu_drv.c: 170: OPTION_REGbits.nWPUEN = PuSts;
  9430  08E7  0C74               	rrf	Mcu_SetPullUpsSts@PuSts,w
  9431  08E8  0021               	movlb	1	; select bank1
  9432  08E9  1C03               	skipc
  9433  08EA  1395               	bcf	21,7	;volatile
  9434  08EB  1803               	skipnc
  9435  08EC  1795               	bsf	21,7	;volatile
  9436  08ED  0008               	return
  9437  08EE                     __end_of_Mcu_SetPullUpsSts:	
  9438                           
  9439                           	psect	text39
  9440  08DE                     __ptext39:	
  9441 ;; *************** function _Mcu_SetDieTempSts *****************
  9442 ;; Defined at:
  9443 ;;		line 265 in file "../../../Framework/MercuryFwk/Source/c/01_Hal/02_Drv/mcu_drv.c"
  9444 ;; Parameters:    Size  Location     Type
  9445 ;;  DieTempSts      1    wreg     unsigned char 
  9446 ;; Auto vars:     Size  Location     Type
  9447 ;;  DieTempSts      1    4[COMMON] unsigned char 
  9448 ;; Return value:  Size  Location     Type
  9449 ;;                  1    wreg      void 
  9450 ;; Registers used:
  9451 ;;		wreg, status,0
  9452 ;; Tracked objects:
  9453 ;;		On entry : 0/0
  9454 ;;		On exit  : 0/0
  9455 ;;		Unchanged: 0/0
  9456 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9457 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9458 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9459 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9460 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9461 ;;Total ram usage:        1 bytes
  9462 ;; Hardware stack levels used:    1
  9463 ;; Hardware stack levels required when called:    2
  9464 ;; This function calls:
  9465 ;;		Nothing
  9466 ;; This function is called by:
  9467 ;;		_App_MainTask
  9468 ;; This function uses a non-reentrant model
  9469 ;;
  9470                           
  9471                           
  9472                           ;psect for function _Mcu_SetDieTempSts
  9473  08DE                     _Mcu_SetDieTempSts:	
  9474                           
  9475                           ;incstack = 0
  9476                           ; Regs used in _Mcu_SetDieTempSts: [wreg+status,0]
  9477                           ;Mcu_SetDieTempSts@DieTempSts stored from wreg
  9478  08DE  00F4               	movwf	Mcu_SetDieTempSts@DieTempSts
  9479                           
  9480                           ;mcu_drv.c: 268: FVRCONbits.TSEN = DieTempSts;
  9481  08DF  0C74               	rrf	Mcu_SetDieTempSts@DieTempSts,w
  9482  08E0  0022               	movlb	2	; select bank2
  9483  08E1  1C03               	skipc
  9484  08E2  1297               	bcf	23,5	;volatile
  9485  08E3  1803               	skipnc
  9486  08E4  1697               	bsf	23,5	;volatile
  9487  08E5  0008               	return
  9488  08E6                     __end_of_Mcu_SetDieTempSts:	
  9489                           
  9490                           	psect	text40
  9491  08D6                     __ptext40:	
  9492 ;; *************** function _Mcu_SetDieTempMode *****************
  9493 ;; Defined at:
  9494 ;;		line 279 in file "../../../Framework/MercuryFwk/Source/c/01_Hal/02_Drv/mcu_drv.c"
  9495 ;; Parameters:    Size  Location     Type
  9496 ;;  DieTempMode     1    wreg     unsigned char 
  9497 ;; Auto vars:     Size  Location     Type
  9498 ;;  DieTempMode     1    4[COMMON] unsigned char 
  9499 ;; Return value:  Size  Location     Type
  9500 ;;                  1    wreg      void 
  9501 ;; Registers used:
  9502 ;;		wreg, status,0
  9503 ;; Tracked objects:
  9504 ;;		On entry : 0/0
  9505 ;;		On exit  : 0/0
  9506 ;;		Unchanged: 0/0
  9507 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9508 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9509 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9510 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9511 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9512 ;;Total ram usage:        1 bytes
  9513 ;; Hardware stack levels used:    1
  9514 ;; Hardware stack levels required when called:    2
  9515 ;; This function calls:
  9516 ;;		Nothing
  9517 ;; This function is called by:
  9518 ;;		_App_MainTask
  9519 ;; This function uses a non-reentrant model
  9520 ;;
  9521                           
  9522                           
  9523                           ;psect for function _Mcu_SetDieTempMode
  9524  08D6                     _Mcu_SetDieTempMode:	
  9525                           
  9526                           ;incstack = 0
  9527                           ; Regs used in _Mcu_SetDieTempMode: [wreg+status,0]
  9528                           ;Mcu_SetDieTempMode@DieTempMode stored from wreg
  9529  08D6  00F4               	movwf	Mcu_SetDieTempMode@DieTempMode
  9530                           
  9531                           ;mcu_drv.c: 282: FVRCONbits.TSRNG = DieTempMode;
  9532  08D7  0C74               	rrf	Mcu_SetDieTempMode@DieTempMode,w
  9533  08D8  0022               	movlb	2	; select bank2
  9534  08D9  1C03               	skipc
  9535  08DA  1217               	bcf	23,4	;volatile
  9536  08DB  1803               	skipnc
  9537  08DC  1617               	bsf	23,4	;volatile
  9538  08DD  0008               	return
  9539  08DE                     __end_of_Mcu_SetDieTempMode:	
  9540                           
  9541                           	psect	text41
  9542  0F91                     __ptext41:	
  9543 ;; *************** function _Mcu_ConfigPullUps *****************
  9544 ;; Defined at:
  9545 ;;		line 181 in file "../../../Framework/MercuryFwk/Source/c/01_Hal/02_Drv/mcu_drv.c"
  9546 ;; Parameters:    Size  Location     Type
  9547 ;;  WpuCh           1    wreg     PTR struct _WpuChType
  9548 ;;		 -> App_MainTask@WpuCh(12), 
  9549 ;; Auto vars:     Size  Location     Type
  9550 ;;  WpuCh           1    4[COMMON] PTR struct _WpuChType
  9551 ;;		 -> App_MainTask@WpuCh(12), 
  9552 ;; Return value:  Size  Location     Type
  9553 ;;                  1    wreg      void 
  9554 ;; Registers used:
  9555 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  9556 ;; Tracked objects:
  9557 ;;		On entry : 0/0
  9558 ;;		On exit  : 0/0
  9559 ;;		Unchanged: 0/0
  9560 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9561 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9562 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9563 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9564 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9565 ;;Total ram usage:        1 bytes
  9566 ;; Hardware stack levels used:    1
  9567 ;; Hardware stack levels required when called:    2
  9568 ;; This function calls:
  9569 ;;		Nothing
  9570 ;; This function is called by:
  9571 ;;		_App_MainTask
  9572 ;; This function uses a non-reentrant model
  9573 ;;
  9574                           
  9575                           
  9576                           ;psect for function _Mcu_ConfigPullUps
  9577  0F91                     _Mcu_ConfigPullUps:	
  9578                           
  9579                           ;incstack = 0
  9580                           ; Regs used in _Mcu_ConfigPullUps: [wreg+fsr1l+fsr1h+status,2+status,0]
  9581                           ;Mcu_ConfigPullUps@WpuCh stored from wreg
  9582  0F91  00F4               	movwf	Mcu_ConfigPullUps@WpuCh
  9583                           
  9584                           ;mcu_drv.c: 184: WPUA = 0x00;
  9585  0F92  0024               	movlb	4	; select bank4
  9586  0F93  018C               	clrf	12	;volatile
  9587                           
  9588                           ;mcu_drv.c: 185: WPUAbits.WPUA0 = WpuCh->WpuA0;
  9589  0F94  0874               	movf	Mcu_ConfigPullUps@WpuCh,w
  9590  0F95  0086               	movwf	6
  9591  0F96  0187               	clrf	7
  9592  0F97  0C01               	rrf	1,w
  9593  0F98  1C03               	skipc
  9594  0F99  100C               	bcf	12,0	;volatile
  9595  0F9A  1803               	skipnc
  9596  0F9B  140C               	bsf	12,0	;volatile
  9597                           
  9598                           ;mcu_drv.c: 186: WPUAbits.WPUA1 = WpuCh->WpuA1;
  9599  0F9C  0A74               	incf	Mcu_ConfigPullUps@WpuCh,w
  9600  0F9D  0086               	movwf	6
  9601  0F9E  0187               	clrf	7
  9602  0F9F  0C01               	rrf	1,w
  9603  0FA0  1C03               	skipc
  9604  0FA1  108C               	bcf	12,1	;volatile
  9605  0FA2  1803               	skipnc
  9606  0FA3  148C               	bsf	12,1	;volatile
  9607                           
  9608                           ;mcu_drv.c: 187: WPUAbits.WPUA2 = WpuCh->WpuA2;
  9609  0FA4  0874               	movf	Mcu_ConfigPullUps@WpuCh,w
  9610  0FA5  3E02               	addlw	2
  9611  0FA6  0086               	movwf	6
  9612  0FA7  0187               	clrf	7
  9613  0FA8  0C01               	rrf	1,w
  9614  0FA9  1C03               	skipc
  9615  0FAA  110C               	bcf	12,2	;volatile
  9616  0FAB  1803               	skipnc
  9617  0FAC  150C               	bsf	12,2	;volatile
  9618                           
  9619                           ;mcu_drv.c: 188: WPUAbits.WPUA3 = WpuCh->WpuA3;
  9620  0FAD  0874               	movf	Mcu_ConfigPullUps@WpuCh,w
  9621  0FAE  3E03               	addlw	3
  9622  0FAF  0086               	movwf	6
  9623  0FB0  0187               	clrf	7
  9624  0FB1  0C01               	rrf	1,w
  9625  0FB2  1C03               	skipc
  9626  0FB3  118C               	bcf	12,3	;volatile
  9627  0FB4  1803               	skipnc
  9628  0FB5  158C               	bsf	12,3	;volatile
  9629                           
  9630                           ;mcu_drv.c: 189: WPUAbits.WPUA4 = WpuCh->WpuA4;
  9631  0FB6  0874               	movf	Mcu_ConfigPullUps@WpuCh,w
  9632  0FB7  3E04               	addlw	4
  9633  0FB8  0086               	movwf	6
  9634  0FB9  0187               	clrf	7
  9635  0FBA  0C01               	rrf	1,w
  9636  0FBB  1C03               	skipc
  9637  0FBC  120C               	bcf	12,4	;volatile
  9638  0FBD  1803               	skipnc
  9639  0FBE  160C               	bsf	12,4	;volatile
  9640                           
  9641                           ;mcu_drv.c: 190: WPUAbits.WPUA5 = WpuCh->WpuA5;
  9642  0FBF  0874               	movf	Mcu_ConfigPullUps@WpuCh,w
  9643  0FC0  3E05               	addlw	5
  9644  0FC1  0086               	movwf	6
  9645  0FC2  0187               	clrf	7
  9646  0FC3  0C01               	rrf	1,w
  9647  0FC4  1C03               	skipc
  9648  0FC5  128C               	bcf	12,5	;volatile
  9649  0FC6  1803               	skipnc
  9650  0FC7  168C               	bsf	12,5	;volatile
  9651                           
  9652                           ;mcu_drv.c: 202: WPUC = 0x00;
  9653  0FC8  018E               	clrf	14	;volatile
  9654                           
  9655                           ;mcu_drv.c: 203: WPUCbits.WPUC0 = WpuCh->WpuC0;
  9656  0FC9  0874               	movf	Mcu_ConfigPullUps@WpuCh,w
  9657  0FCA  3E06               	addlw	6
  9658  0FCB  0086               	movwf	6
  9659  0FCC  0187               	clrf	7
  9660  0FCD  0C01               	rrf	1,w
  9661  0FCE  1C03               	skipc
  9662  0FCF  100E               	bcf	14,0	;volatile
  9663  0FD0  1803               	skipnc
  9664  0FD1  140E               	bsf	14,0	;volatile
  9665                           
  9666                           ;mcu_drv.c: 204: WPUCbits.WPUC1 = WpuCh->WpuC1;
  9667  0FD2  0874               	movf	Mcu_ConfigPullUps@WpuCh,w
  9668  0FD3  3E07               	addlw	7
  9669  0FD4  0086               	movwf	6
  9670  0FD5  0187               	clrf	7
  9671  0FD6  0C01               	rrf	1,w
  9672  0FD7  1C03               	skipc
  9673  0FD8  108E               	bcf	14,1	;volatile
  9674  0FD9  1803               	skipnc
  9675  0FDA  148E               	bsf	14,1	;volatile
  9676                           
  9677                           ;mcu_drv.c: 205: WPUCbits.WPUC2 = WpuCh->WpuC2;
  9678  0FDB  0874               	movf	Mcu_ConfigPullUps@WpuCh,w
  9679  0FDC  3E08               	addlw	8
  9680  0FDD  0086               	movwf	6
  9681  0FDE  0187               	clrf	7
  9682  0FDF  0C01               	rrf	1,w
  9683  0FE0  1C03               	skipc
  9684  0FE1  110E               	bcf	14,2	;volatile
  9685  0FE2  1803               	skipnc
  9686  0FE3  150E               	bsf	14,2	;volatile
  9687                           
  9688                           ;mcu_drv.c: 206: WPUCbits.WPUC3 = WpuCh->WpuC3;
  9689  0FE4  0874               	movf	Mcu_ConfigPullUps@WpuCh,w
  9690  0FE5  3E09               	addlw	9
  9691  0FE6  0086               	movwf	6
  9692  0FE7  0187               	clrf	7
  9693  0FE8  0C01               	rrf	1,w
  9694  0FE9  1C03               	skipc
  9695  0FEA  118E               	bcf	14,3	;volatile
  9696  0FEB  1803               	skipnc
  9697  0FEC  158E               	bsf	14,3	;volatile
  9698                           
  9699                           ;mcu_drv.c: 207: WPUCbits.WPUC4 = WpuCh->WpuC4;
  9700  0FED  0874               	movf	Mcu_ConfigPullUps@WpuCh,w
  9701  0FEE  3E0A               	addlw	10
  9702  0FEF  0086               	movwf	6
  9703  0FF0  0187               	clrf	7
  9704  0FF1  0C01               	rrf	1,w
  9705  0FF2  1C03               	skipc
  9706  0FF3  120E               	bcf	14,4	;volatile
  9707  0FF4  1803               	skipnc
  9708  0FF5  160E               	bsf	14,4	;volatile
  9709                           
  9710                           ;mcu_drv.c: 208: WPUCbits.WPUC5 = WpuCh->WpuC5;
  9711  0FF6  0874               	movf	Mcu_ConfigPullUps@WpuCh,w
  9712  0FF7  3E0B               	addlw	11
  9713  0FF8  0086               	movwf	6
  9714  0FF9  0187               	clrf	7
  9715  0FFA  0C01               	rrf	1,w
  9716  0FFB  1C03               	skipc
  9717  0FFC  128E               	bcf	14,5	;volatile
  9718  0FFD  1803               	skipnc
  9719  0FFE  168E               	bsf	14,5	;volatile
  9720  0FFF  0008               	return
  9721  1000                     __end_of_Mcu_ConfigPullUps:	
  9722                           
  9723                           	psect	text42
  9724  074A                     __ptext42:	
  9725 ;; *************** function _GenerateImpulse *****************
  9726 ;; Defined at:
  9727 ;;		line 194 in file "../Source/c/04_App/sb110_app.c"
  9728 ;; Parameters:    Size  Location     Type
  9729 ;;  Impulse         1    wreg     PTR struct _ImpulseType
  9730 ;;		 -> Relay2Set(10), Relay1Set(10), 
  9731 ;; Auto vars:     Size  Location     Type
  9732 ;;  Impulse         1    4[BANK0 ] PTR struct _ImpulseType
  9733 ;;		 -> Relay2Set(10), Relay1Set(10), 
  9734 ;; Return value:  Size  Location     Type
  9735 ;;                  1    wreg      void 
  9736 ;; Registers used:
  9737 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9738 ;; Tracked objects:
  9739 ;;		On entry : 0/0
  9740 ;;		On exit  : 0/0
  9741 ;;		Unchanged: 0/0
  9742 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9743 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9744 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9745 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9746 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9747 ;;Total ram usage:        5 bytes
  9748 ;; Hardware stack levels used:    1
  9749 ;; Hardware stack levels required when called:    3
  9750 ;; This function calls:
  9751 ;;		_ReceiveEvt
  9752 ;;		_SetOutChSts
  9753 ;; This function is called by:
  9754 ;;		_App_MainTask
  9755 ;; This function uses a non-reentrant model
  9756 ;;
  9757                           
  9758                           
  9759                           ;psect for function _GenerateImpulse
  9760  074A                     _GenerateImpulse:	
  9761                           
  9762                           ;incstack = 0
  9763                           ; Regs used in _GenerateImpulse: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  9764                           ;GenerateImpulse@Impulse stored from wreg
  9765  074A  0020               	movlb	0	; select bank0
  9766  074B  00A4               	movwf	GenerateImpulse@Impulse
  9767                           
  9768                           ;sb110_app.c: 196: switch (Impulse->ImpulseState)
  9769  074C  2FB8               	goto	l4331
  9770  074D                     l4307:	
  9771                           ;sb110_app.c: 197: {
  9772                           ;sb110_app.c: 198: case Imp_Idle:
  9773                           
  9774                           
  9775                           ;sb110_app.c: 200: if (ReceiveEvt(&(Impulse->StartEvt)))
  9776  074D  0824               	movf	GenerateImpulse@Impulse,w
  9777  074E  3E08               	addlw	8
  9778  074F  318A  22D9  3187   	fcall	_ReceiveEvt
  9779  0752  3A00               	xorlw	0
  9780  0753  1903               	skipnz
  9781  0754  0008               	return
  9782                           
  9783                           ;sb110_app.c: 201: {
  9784                           ;sb110_app.c: 203: SetOutChSts(Impulse->Channel,((UINT8)(1)));
  9785  0755  01F4               	clrf	SetOutChSts@Sts
  9786  0756  0AF4               	incf	SetOutChSts@Sts,f
  9787  0757  0020               	movlb	0	; select bank0
  9788  0758  0824               	movf	GenerateImpulse@Impulse,w
  9789  0759  3E07               	addlw	7
  9790  075A  0086               	movwf	6
  9791  075B  0187               	clrf	7
  9792  075C  0801               	movf	1,w
  9793  075D  318A  2266         	fcall	_SetOutChSts
  9794                           
  9795                           ;sb110_app.c: 204: Impulse->ImpulseState = Imp_Delay;
  9796  075F  0020               	movlb	0	; select bank0
  9797  0760  0824               	movf	GenerateImpulse@Impulse,w
  9798  0761  0086               	movwf	6
  9799  0762  0187               	clrf	7
  9800  0763  0181               	clrf	1
  9801  0764  0A81               	incf	1,f
  9802                           
  9803                           ;sb110_app.c: 205: }
  9804                           ;sb110_app.c: 206: break;
  9805  0765  0008               	return
  9806  0766                     l4313:	
  9807                           ;sb110_app.c: 208: case Imp_Delay:
  9808                           
  9809                           
  9810                           ;sb110_app.c: 210: (Impulse->CounterMs)++;
  9811  0766  0A24               	incf	GenerateImpulse@Impulse,w
  9812  0767  0086               	movwf	6
  9813  0768  0187               	clrf	7
  9814  0769  3001               	movlw	1
  9815  076A  0781               	addwf	1,f
  9816  076B  3141               	addfsr 1,1
  9817  076C  1803               	skipnc
  9818  076D  0A81               	incf	1,f
  9819                           
  9820                           ;sb110_app.c: 212: if (Impulse->CounterMs >= 1000/((UINT16)(50)))
  9821  076E  0A24               	incf	GenerateImpulse@Impulse,w
  9822  076F  0086               	movwf	6
  9823  0770  0187               	clrf	7
  9824  0771  3F40               	moviw [0]fsr1
  9825  0772  00A0               	movwf	??_GenerateImpulse
  9826  0773  3F41               	moviw [1]fsr1
  9827  0774  00A1               	movwf	??_GenerateImpulse+1
  9828  0775  3000               	movlw	0
  9829  0776  0221               	subwf	??_GenerateImpulse+1,w
  9830  0777  3014               	movlw	20
  9831  0778  1903               	skipnz
  9832  0779  0220               	subwf	??_GenerateImpulse,w
  9833  077A  1C03               	skipc
  9834  077B  2F8B               	goto	l4321
  9835                           
  9836                           ;sb110_app.c: 213: {
  9837                           ;sb110_app.c: 215: Impulse->CounterMs = 0;
  9838  077C  0A24               	incf	GenerateImpulse@Impulse,w
  9839  077D  0086               	movwf	6
  9840  077E  0187               	clrf	7
  9841  077F  3000               	movlw	0
  9842  0780  3FC0               	movwi [0]fsr1
  9843  0781  3FC1               	movwi [1]fsr1
  9844                           
  9845                           ;sb110_app.c: 217: (Impulse->CounterS)++;
  9846  0782  0824               	movf	GenerateImpulse@Impulse,w
  9847  0783  3E03               	addlw	3
  9848  0784  0086               	movwf	6
  9849  0785  0187               	clrf	7
  9850  0786  3001               	movlw	1
  9851  0787  0781               	addwf	1,f
  9852  0788  3141               	addfsr 1,1
  9853  0789  1803               	skipnc
  9854  078A  0A81               	incf	1,f
  9855  078B                     l4321:	
  9856                           
  9857                           ;sb110_app.c: 218: }
  9858                           ;sb110_app.c: 220: if (Impulse->CounterS >= Impulse->ImpulseLen)
  9859  078B  0824               	movf	GenerateImpulse@Impulse,w
  9860  078C  3E05               	addlw	5
  9861  078D  0086               	movwf	6
  9862  078E  0187               	clrf	7
  9863  078F  3F40               	moviw [0]fsr1
  9864  0790  00A0               	movwf	??_GenerateImpulse
  9865  0791  3F41               	moviw [1]fsr1
  9866  0792  00A1               	movwf	??_GenerateImpulse+1
  9867  0793  0824               	movf	GenerateImpulse@Impulse,w
  9868  0794  3E03               	addlw	3
  9869  0795  0086               	movwf	6
  9870  0796  0187               	clrf	7
  9871  0797  3F40               	moviw [0]fsr1
  9872  0798  00A2               	movwf	??_GenerateImpulse+2
  9873  0799  3F41               	moviw [1]fsr1
  9874  079A  00A3               	movwf	??_GenerateImpulse+3
  9875  079B  0821               	movf	??_GenerateImpulse+1,w
  9876  079C  0223               	subwf	??_GenerateImpulse+3,w
  9877  079D  1D03               	skipz
  9878  079E  2FA1               	goto	u3175
  9879  079F  0820               	movf	??_GenerateImpulse,w
  9880  07A0  0222               	subwf	??_GenerateImpulse+2,w
  9881  07A1                     u3175:	
  9882  07A1  1C03               	skipc
  9883  07A2  0008               	return
  9884                           
  9885                           ;sb110_app.c: 221: {
  9886                           ;sb110_app.c: 223: Impulse->CounterS = 0;
  9887  07A3  0824               	movf	GenerateImpulse@Impulse,w
  9888  07A4  3E03               	addlw	3
  9889  07A5  0086               	movwf	6
  9890  07A6  0187               	clrf	7
  9891  07A7  3000               	movlw	0
  9892  07A8  3FC0               	movwi [0]fsr1
  9893  07A9  3FC1               	movwi [1]fsr1
  9894                           
  9895                           ;sb110_app.c: 225: SetOutChSts(Impulse->Channel,((UINT8)(0)));
  9896  07AA  01F4               	clrf	SetOutChSts@Sts
  9897  07AB  0824               	movf	GenerateImpulse@Impulse,w
  9898  07AC  3E07               	addlw	7
  9899  07AD  0086               	movwf	6
  9900  07AE  0187               	clrf	7
  9901  07AF  0801               	movf	1,w
  9902  07B0  318A  2266         	fcall	_SetOutChSts
  9903                           
  9904                           ;sb110_app.c: 227: Impulse->ImpulseState = Imp_Idle;
  9905  07B2  0020               	movlb	0	; select bank0
  9906  07B3  0824               	movf	GenerateImpulse@Impulse,w
  9907  07B4  0086               	movwf	6
  9908  07B5  0187               	clrf	7
  9909  07B6  0181               	clrf	1
  9910                           
  9911                           ;sb110_app.c: 237: }
  9912                           
  9913                           ;sb110_app.c: 236: break;
  9914                           
  9915                           ;sb110_app.c: 235: default:
  9916                           
  9917                           ;sb110_app.c: 232: }
  9918                           ;sb110_app.c: 233: break;
  9919                           
  9920                           ;sb110_app.c: 229: else
  9921                           ;sb110_app.c: 230: {
  9922                           
  9923                           ;sb110_app.c: 228: }
  9924  07B7  0008               	return
  9925  07B8                     l4331:	
  9926  07B8  0824               	movf	GenerateImpulse@Impulse,w
  9927  07B9  0086               	movwf	6
  9928  07BA  0187               	clrf	7
  9929  07BB  0801               	movf	1,w
  9930                           
  9931                           ; Switch size 1, requested type "space"
  9932                           ; Number of cases is 2, Range of values is 0 to 1
  9933                           ; switch strategies available:
  9934                           ; Name         Instructions Cycles
  9935                           ; simple_byte            7     4 (average)
  9936                           ; direct_byte           10     6 (fixed)
  9937                           ; jumptable            260     6 (fixed)
  9938                           ;	Chosen strategy is simple_byte
  9939  07BC  3A00               	xorlw	0	; case 0
  9940  07BD  1903               	skipnz
  9941  07BE  2F4D               	goto	l4307
  9942  07BF  3A01               	xorlw	1	; case 1
  9943  07C0  1903               	skipnz
  9944  07C1  2F66               	goto	l4313
  9945  07C2  2FC3               	goto	l892
  9946  07C3                     l892:	
  9947  07C3  0008               	return
  9948  07C4                     __end_of_GenerateImpulse:	
  9949                           
  9950                           	psect	text43
  9951  0BB5                     __ptext43:	
  9952 ;; *************** function _AppSm *****************
  9953 ;; Defined at:
  9954 ;;		line 309 in file "../Source/c/04_App/sb110_app.c"
  9955 ;; Parameters:    Size  Location     Type
  9956 ;;		None
  9957 ;; Auto vars:     Size  Location     Type
  9958 ;;		None
  9959 ;; Return value:  Size  Location     Type
  9960 ;;                  1    wreg      void 
  9961 ;; Registers used:
  9962 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9963 ;; Tracked objects:
  9964 ;;		On entry : 0/0
  9965 ;;		On exit  : 0/0
  9966 ;;		Unchanged: 0/0
  9967 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9968 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9969 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9970 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9971 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9972 ;;Total ram usage:        1 bytes
  9973 ;; Hardware stack levels used:    1
  9974 ;; Hardware stack levels required when called:    6
  9975 ;; This function calls:
  9976 ;;		_GenerateEvt
  9977 ;;		_ManageProtocol
  9978 ;;		_StdS_SetI2cAddress
  9979 ;; This function is called by:
  9980 ;;		_App_MainTask
  9981 ;; This function uses a non-reentrant model
  9982 ;;
  9983                           
  9984                           
  9985                           ;psect for function _AppSm
  9986  0BB5                     _AppSm:	
  9987                           
  9988                           ;sb110_app.c: 311: static AppStateType AppState = WaitWpuSetState;
  9989                           ;sb110_app.c: 312: static UINT8 WpuSetCounter = 0;
  9990                           ;sb110_app.c: 314: switch (AppState)
  9991                           
  9992                           ;incstack = 0
  9993                           ; Regs used in _AppSm: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  9994  0BB5  2BD3               	goto	l4351
  9995  0BB6                     l4335:	
  9996                           ;sb110_app.c: 315: {
  9997                           ;sb110_app.c: 316: case WaitWpuSetState:
  9998                           
  9999                           
 10000                           ;sb110_app.c: 318: WpuSetCounter++;
 10001  0BB6  3001               	movlw	1
 10002  0BB7  0020               	movlb	0	; select bank0
 10003  0BB8  00BB               	movwf	??_AppSm
 10004  0BB9  083B               	movf	??_AppSm,w
 10005  0BBA  0021               	movlb	1	; select bank1
 10006  0BBB  07AA               	addwf	AppSm@WpuSetCounter^(0+128),f
 10007                           
 10008                           ;sb110_app.c: 320: if (WpuSetCounter >= ((UINT16)(100)/((UINT16)(50))))
 10009  0BBC  3002               	movlw	2
 10010  0BBD  022A               	subwf	AppSm@WpuSetCounter^(0+128),w
 10011  0BBE  1C03               	skipc
 10012  0BBF  0008               	return
 10013                           
 10014                           ;sb110_app.c: 321: {
 10015                           ;sb110_app.c: 323: StdS_SetI2cAddress();
 10016  0BC0  318C  243D         	fcall	_StdS_SetI2cAddress
 10017                           
 10018                           ;sb110_app.c: 325: AppState = SendI2cAddrState;
 10019  0BC2  0021               	movlb	1	; select bank1
 10020  0BC3  01AB               	clrf	AppSm@AppState^(0+128)
 10021  0BC4  0AAB               	incf	AppSm@AppState^(0+128),f
 10022                           
 10023                           ;sb110_app.c: 326: }
 10024                           ;sb110_app.c: 327: break;
 10025  0BC5  0008               	return
 10026  0BC6                     l4343:	
 10027                           ;sb110_app.c: 329: case SendI2cAddrState:
 10028                           
 10029                           
 10030                           ;sb110_app.c: 331: GenerateEvt(&I2cSetAddress);
 10031  0BC6  30E2               	movlw	(low (_I2cSetAddress| 0))& (0+255)
 10032  0BC7  318A  22FA         	fcall	_GenerateEvt
 10033                           
 10034                           ;sb110_app.c: 333: AppState = ManageProtocolState;
 10035  0BC9  3002               	movlw	2
 10036  0BCA  0020               	movlb	0	; select bank0
 10037  0BCB  00BB               	movwf	??_AppSm
 10038  0BCC  083B               	movf	??_AppSm,w
 10039  0BCD  0021               	movlb	1	; select bank1
 10040  0BCE  00AB               	movwf	AppSm@AppState^(0+128)
 10041                           
 10042                           ;sb110_app.c: 334: break;
 10043  0BCF  0008               	return
 10044  0BD0                     l4347:	
 10045                           ;sb110_app.c: 336: case ManageProtocolState:
 10046                           
 10047                           
 10048                           ;sb110_app.c: 338: ManageProtocol();
 10049  0BD0  3186  264B         	fcall	_ManageProtocol
 10050                           
 10051                           ;sb110_app.c: 343: }
 10052                           
 10053                           ;sb110_app.c: 342: break;
 10054                           
 10055                           ;sb110_app.c: 341: default:
 10056                           
 10057                           ;sb110_app.c: 339: break;
 10058  0BD2  0008               	return
 10059  0BD3                     l4351:	
 10060  0BD3  0021               	movlb	1	; select bank1
 10061  0BD4  082B               	movf	AppSm@AppState^(0+128),w
 10062                           
 10063                           ; Switch size 1, requested type "space"
 10064                           ; Number of cases is 3, Range of values is 0 to 2
 10065                           ; switch strategies available:
 10066                           ; Name         Instructions Cycles
 10067                           ; simple_byte           10     6 (average)
 10068                           ; direct_byte           12     6 (fixed)
 10069                           ; jumptable            260     6 (fixed)
 10070                           ;	Chosen strategy is simple_byte
 10071  0BD5  3A00               	xorlw	0	; case 0
 10072  0BD6  1903               	skipnz
 10073  0BD7  2BB6               	goto	l4335
 10074  0BD8  3A01               	xorlw	1	; case 1
 10075  0BD9  1903               	skipnz
 10076  0BDA  2BC6               	goto	l4343
 10077  0BDB  3A03               	xorlw	3	; case 2
 10078  0BDC  1903               	skipnz
 10079  0BDD  2BD0               	goto	l4347
 10080  0BDE  2BDF               	goto	l918
 10081  0BDF                     l918:	
 10082  0BDF  0008               	return
 10083  0BE0                     __end_of_AppSm:	
 10084                           
 10085                           	psect	text44
 10086  0C3D                     __ptext44:	
 10087 ;; *************** function _StdS_SetI2cAddress *****************
 10088 ;; Defined at:
 10089 ;;		line 317 in file "../../../Framework/MercuryFwk/Source/c/03_Sml/02_Ssl/std_ser.c"
 10090 ;; Parameters:    Size  Location     Type
 10091 ;;		None
 10092 ;; Auto vars:     Size  Location     Type
 10093 ;;		None
 10094 ;; Return value:  Size  Location     Type
 10095 ;;                  1    wreg      void 
 10096 ;; Registers used:
 10097 ;;		wreg, status,2, status,0
 10098 ;; Tracked objects:
 10099 ;;		On entry : 0/0
 10100 ;;		On exit  : 0/0
 10101 ;;		Unchanged: 0/0
 10102 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10103 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10104 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10105 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10106 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10107 ;;Total ram usage:        2 bytes
 10108 ;; Hardware stack levels used:    1
 10109 ;; Hardware stack levels required when called:    2
 10110 ;; This function calls:
 10111 ;;		Nothing
 10112 ;; This function is called by:
 10113 ;;		_AppSm
 10114 ;; This function uses a non-reentrant model
 10115 ;;
 10116                           
 10117                           
 10118                           ;psect for function _StdS_SetI2cAddress
 10119  0C3D                     _StdS_SetI2cAddress:	
 10120                           
 10121                           ;std_ser.c: 321: I2cSlaveAddress |= (!PORTCbits.RC4 << 3);
 10122                           
 10123                           ;incstack = 0
 10124                           ; Regs used in _StdS_SetI2cAddress: [wreg+status,2+status,0]
 10125  0C3D  1003               	clrc
 10126  0C3E  0020               	movlb	0	; select bank0
 10127  0C3F  1E0E               	btfss	14,4	;volatile
 10128  0C40  1403               	setc
 10129  0C41  3000               	movlw	0
 10130  0C42  3D09               	addwfc	9,w
 10131  0C43  00F4               	movwf	??_StdS_SetI2cAddress
 10132  0C44  3002               	movlw	2
 10133  0C45                     u1565:	
 10134  0C45  35F4               	lslf	??_StdS_SetI2cAddress,f
 10135  0C46  3EFF               	addlw	-1
 10136  0C47  1D03               	skipz
 10137  0C48  2C45               	goto	u1565
 10138  0C49  3574               	lslf	??_StdS_SetI2cAddress,w
 10139  0C4A  00F5               	movwf	??_StdS_SetI2cAddress+1
 10140  0C4B  0875               	movf	??_StdS_SetI2cAddress+1,w
 10141  0C4C  04DF               	iorwf	_I2cSlaveAddress,f
 10142                           
 10143                           ;std_ser.c: 322: I2cSlaveAddress |= (!PORTCbits.RC5 << 2);
 10144  0C4D  1003               	clrc
 10145  0C4E  1E8E               	btfss	14,5	;volatile
 10146  0C4F  1403               	setc
 10147  0C50  3000               	movlw	0
 10148  0C51  3D09               	addwfc	9,w
 10149  0C52  00F4               	movwf	??_StdS_SetI2cAddress
 10150  0C53  3001               	movlw	1
 10151  0C54                     u1575:	
 10152  0C54  35F4               	lslf	??_StdS_SetI2cAddress,f
 10153  0C55  3EFF               	addlw	-1
 10154  0C56  1D03               	skipz
 10155  0C57  2C54               	goto	u1575
 10156  0C58  3574               	lslf	??_StdS_SetI2cAddress,w
 10157  0C59  00F5               	movwf	??_StdS_SetI2cAddress+1
 10158  0C5A  0875               	movf	??_StdS_SetI2cAddress+1,w
 10159  0C5B  04DF               	iorwf	_I2cSlaveAddress,f
 10160                           
 10161                           ;std_ser.c: 323: I2cSlaveAddress |= (!PORTAbits.RA4 << 1);
 10162  0C5C  1003               	clrc
 10163  0C5D  1E0C               	btfss	12,4	;volatile
 10164  0C5E  1403               	setc
 10165  0C5F  3000               	movlw	0
 10166  0C60  3D09               	addwfc	9,w
 10167  0C61  0709               	addwf	9,w
 10168  0C62  00F4               	movwf	??_StdS_SetI2cAddress
 10169  0C63  0874               	movf	??_StdS_SetI2cAddress,w
 10170  0C64  04DF               	iorwf	_I2cSlaveAddress,f
 10171                           
 10172                           ;std_ser.c: 324: I2cSlaveAddress |= (!PORTAbits.RA5 << 0);
 10173  0C65  1003               	clrc
 10174  0C66  1E8C               	btfss	12,5	;volatile
 10175  0C67  1403               	setc
 10176  0C68  3000               	movlw	0
 10177  0C69  3D09               	addwfc	9,w
 10178  0C6A  00F4               	movwf	??_StdS_SetI2cAddress
 10179  0C6B  0874               	movf	??_StdS_SetI2cAddress,w
 10180  0C6C  04DF               	iorwf	_I2cSlaveAddress,f
 10181  0C6D  0008               	return
 10182  0C6E                     __end_of_StdS_SetI2cAddress:	
 10183                           
 10184                           	psect	text45
 10185  064B                     __ptext45:	
 10186 ;; *************** function _ManageProtocol *****************
 10187 ;; Defined at:
 10188 ;;		line 248 in file "../Source/c/04_App/sb110_app.c"
 10189 ;; Parameters:    Size  Location     Type
 10190 ;;		None
 10191 ;; Auto vars:     Size  Location     Type
 10192 ;;		None
 10193 ;; Return value:  Size  Location     Type
 10194 ;;                  1    wreg      void 
 10195 ;; Registers used:
 10196 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10197 ;; Tracked objects:
 10198 ;;		On entry : 0/0
 10199 ;;		On exit  : 0/0
 10200 ;;		Unchanged: 0/0
 10201 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10202 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10203 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10204 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10205 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10206 ;;Total ram usage:        3 bytes
 10207 ;; Hardware stack levels used:    1
 10208 ;; Hardware stack levels required when called:    5
 10209 ;; This function calls:
 10210 ;;		_GenerateEvt
 10211 ;;		_ReceiveEvt
 10212 ;;		_StdS_ManageStdServices
 10213 ;;		_UpdateRelaysSts
 10214 ;; This function is called by:
 10215 ;;		_AppSm
 10216 ;; This function uses a non-reentrant model
 10217 ;;
 10218                           
 10219                           
 10220                           ;psect for function _ManageProtocol
 10221  064B                     _ManageProtocol:	
 10222                           
 10223                           ;sb110_app.c: 251: if (ReceiveEvt(&I2cWriteRequest))
 10224                           
 10225                           ;incstack = 0
 10226                           ; Regs used in _ManageProtocol: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 10227  064B  30E0               	movlw	(low (_I2cWriteRequest| 0))& (0+255)
 10228  064C  318A  22D9  3186   	fcall	_ReceiveEvt
 10229  064F  3A00               	xorlw	0
 10230  0650  1903               	skipnz
 10231  0651  0008               	return
 10232                           
 10233                           ;sb110_app.c: 252: {
 10234                           ;sb110_app.c: 254: StdS_ManageStdServices();
 10235  0652  3181  21A0  3186   	fcall	_StdS_ManageStdServices
 10236                           
 10237                           ;sb110_app.c: 256: switch (CmdBuffer[((UINT8)(0))])
 10238  0655  2EBB               	goto	l4117
 10239  0656                     l4093:	
 10240                           ;sb110_app.c: 257: {
 10241                           ;sb110_app.c: 258: case ((UINT8)(0x50)):
 10242                           
 10243                           
 10244                           ;sb110_app.c: 260: UpdateRelaysSts();
 10245  0656  318B  233F         	fcall	_UpdateRelaysSts
 10246                           
 10247                           ;sb110_app.c: 261: break;
 10248  0658  0008               	return
 10249  0659                     l4095:	
 10250                           ;sb110_app.c: 263: case ((UINT8)(0x51)):
 10251                           
 10252                           
 10253                           ;sb110_app.c: 265: Relay1Set.ImpulseLen = CmdBuffer[((UINT8)(2))] | (((UINT16)(CmdBuffer
      +                          [((UINT8)(1))]) << 8));
 10254  0659  0023               	movlb	3	; select bank3
 10255  065A  0821               	movf	(_CmdBuffer^(0+384)+1),w
 10256  065B  0020               	movlb	0	; select bank0
 10257  065C  00B8               	movwf	??_ManageProtocol
 10258  065D  01B9               	clrf	??_ManageProtocol+1
 10259  065E  0838               	movf	??_ManageProtocol,w
 10260  065F  00B9               	movwf	??_ManageProtocol+1
 10261  0660  01B8               	clrf	??_ManageProtocol
 10262  0661  0838               	movf	??_ManageProtocol,w
 10263  0662  0023               	movlb	3	; select bank3
 10264  0663  0422               	iorwf	(_CmdBuffer^(0+384)+2),w
 10265  0664  0021               	movlb	1	; select bank1
 10266  0665  00CC               	movwf	(_Relay1Set^(0+128)+5)
 10267  0666  0020               	movlb	0	; select bank0
 10268  0667  0839               	movf	??_ManageProtocol+1,w
 10269  0668  0021               	movlb	1	; select bank1
 10270  0669  00CD               	movwf	((_Relay1Set+1)^(0+128)+5)
 10271                           
 10272                           ;sb110_app.c: 267: GenerateEvt(&(Relay1Set.StartEvt));
 10273  066A  30CF               	movlw	(low ((_Relay1Set| 0+8)))& (0+255)
 10274  066B  318A  22FA         	fcall	_GenerateEvt
 10275                           
 10276                           ;sb110_app.c: 268: break;
 10277  066D  0008               	return
 10278  066E                     l4099:	
 10279                           ;sb110_app.c: 270: case ((UINT8)(0x52)):
 10280                           
 10281                           
 10282                           ;sb110_app.c: 272: Relay2Set.ImpulseLen = CmdBuffer[((UINT8)(2))] | (((UINT16)(CmdBuffer
      +                          [((UINT8)(1))]) << 8));
 10283  066E  0023               	movlb	3	; select bank3
 10284  066F  0821               	movf	(_CmdBuffer^(0+384)+1),w
 10285  0670  0020               	movlb	0	; select bank0
 10286  0671  00B8               	movwf	??_ManageProtocol
 10287  0672  01B9               	clrf	??_ManageProtocol+1
 10288  0673  0838               	movf	??_ManageProtocol,w
 10289  0674  00B9               	movwf	??_ManageProtocol+1
 10290  0675  01B8               	clrf	??_ManageProtocol
 10291  0676  0838               	movf	??_ManageProtocol,w
 10292  0677  0023               	movlb	3	; select bank3
 10293  0678  0422               	iorwf	(_CmdBuffer^(0+384)+2),w
 10294  0679  0021               	movlb	1	; select bank1
 10295  067A  00C2               	movwf	(_Relay2Set^(0+128)+5)
 10296  067B  0020               	movlb	0	; select bank0
 10297  067C  0839               	movf	??_ManageProtocol+1,w
 10298  067D  0021               	movlb	1	; select bank1
 10299  067E  00C3               	movwf	((_Relay2Set+1)^(0+128)+5)
 10300                           
 10301                           ;sb110_app.c: 274: GenerateEvt(&(Relay2Set.StartEvt));
 10302  067F  30C5               	movlw	(low ((_Relay2Set| 0+8)))& (0+255)
 10303  0680  318A  22FA         	fcall	_GenerateEvt
 10304                           
 10305                           ;sb110_app.c: 275: break;
 10306  0682  0008               	return
 10307  0683                     l4103:	
 10308                           ;sb110_app.c: 277: case ((UINT8)(0x53)):
 10309                           
 10310                           
 10311                           ;sb110_app.c: 279: Relay1Set.ImpulseLen = CmdBuffer[((UINT8)(2))] | (((UINT16)(CmdBuffer
      +                          [((UINT8)(1))]) << 8));
 10312  0683  0023               	movlb	3	; select bank3
 10313  0684  0821               	movf	(_CmdBuffer^(0+384)+1),w
 10314  0685  0020               	movlb	0	; select bank0
 10315  0686  00B8               	movwf	??_ManageProtocol
 10316  0687  01B9               	clrf	??_ManageProtocol+1
 10317  0688  0838               	movf	??_ManageProtocol,w
 10318  0689  00B9               	movwf	??_ManageProtocol+1
 10319  068A  01B8               	clrf	??_ManageProtocol
 10320  068B  0838               	movf	??_ManageProtocol,w
 10321  068C  0023               	movlb	3	; select bank3
 10322  068D  0422               	iorwf	(_CmdBuffer^(0+384)+2),w
 10323  068E  0021               	movlb	1	; select bank1
 10324  068F  00CC               	movwf	(_Relay1Set^(0+128)+5)
 10325  0690  0020               	movlb	0	; select bank0
 10326  0691  0839               	movf	??_ManageProtocol+1,w
 10327  0692  0021               	movlb	1	; select bank1
 10328  0693  00CD               	movwf	((_Relay1Set+1)^(0+128)+5)
 10329                           
 10330                           ;sb110_app.c: 280: Relay2Set.ImpulseLen = CmdBuffer[((UINT8)(2))] | (((UINT16)(CmdBuffer
      +                          [((UINT8)(1))]) << 8));
 10331  0694  0023               	movlb	3	; select bank3
 10332  0695  0821               	movf	(_CmdBuffer^(0+384)+1),w
 10333  0696  0020               	movlb	0	; select bank0
 10334  0697  00B8               	movwf	??_ManageProtocol
 10335  0698  01B9               	clrf	??_ManageProtocol+1
 10336  0699  0838               	movf	??_ManageProtocol,w
 10337  069A  00B9               	movwf	??_ManageProtocol+1
 10338  069B  01B8               	clrf	??_ManageProtocol
 10339  069C  0838               	movf	??_ManageProtocol,w
 10340  069D  0023               	movlb	3	; select bank3
 10341  069E  0422               	iorwf	(_CmdBuffer^(0+384)+2),w
 10342  069F  0021               	movlb	1	; select bank1
 10343  06A0  00C2               	movwf	(_Relay2Set^(0+128)+5)
 10344  06A1  0020               	movlb	0	; select bank0
 10345  06A2  0839               	movf	??_ManageProtocol+1,w
 10346  06A3  0021               	movlb	1	; select bank1
 10347  06A4  00C3               	movwf	((_Relay2Set+1)^(0+128)+5)
 10348                           
 10349                           ;sb110_app.c: 282: GenerateEvt(&(Relay1Set.StartEvt));
 10350  06A5  30CF               	movlw	(low ((_Relay1Set| 0+8)))& (0+255)
 10351  06A6  318A  22FA  3186   	fcall	_GenerateEvt
 10352                           
 10353                           ;sb110_app.c: 283: GenerateEvt(&(Relay2Set.StartEvt));
 10354  06A9  30C5               	movlw	(low ((_Relay2Set| 0+8)))& (0+255)
 10355  06AA  318A  22FA         	fcall	_GenerateEvt
 10356                           
 10357                           ;sb110_app.c: 284: break;
 10358  06AC  0008               	return
 10359  06AD                     l4109:	
 10360                           ;sb110_app.c: 286: case ((UINT8)(0x60)):
 10361                           
 10362                           
 10363                           ;sb110_app.c: 288: RepBuffer[((UINT8)(0))] = (Relay1Sts | (Relay2Sts << ((UINT8)(1))));
 10364  06AD  3576               	lslf	_Relay2Sts,w
 10365  06AE  0477               	iorwf	_Relay1Sts,w
 10366  06AF  0020               	movlb	0	; select bank0
 10367  06B0  00B8               	movwf	??_ManageProtocol
 10368  06B1  0838               	movf	??_ManageProtocol,w
 10369  06B2  0024               	movlb	4	; select bank4
 10370  06B3  00A0               	movwf	_RepBuffer^(0+512)
 10371                           
 10372                           ;sb110_app.c: 290: RepBufferLen = ((UINT8)(1));
 10373  06B4  0021               	movlb	1	; select bank1
 10374  06B5  01AF               	clrf	_RepBufferLen^(0+128)
 10375  06B6  0AAF               	incf	_RepBufferLen^(0+128),f
 10376                           
 10377                           ;sb110_app.c: 292: GenerateEvt(&I2cReplyPacketReady);
 10378  06B7  3066               	movlw	(low (_I2cReplyPacketReady| 0))& (0+255)
 10379  06B8  318A  22FA         	fcall	_GenerateEvt
 10380                           
 10381                           ;sb110_app.c: 297: }
 10382                           
 10383                           ;sb110_app.c: 296: break;
 10384                           
 10385                           ;sb110_app.c: 295: default:
 10386                           
 10387                           ;sb110_app.c: 293: break;
 10388  06BA  0008               	return
 10389  06BB                     l4117:	
 10390  06BB  0023               	movlb	3	; select bank3
 10391  06BC  0820               	movf	_CmdBuffer^(0+384),w
 10392                           
 10393                           ; Switch size 1, requested type "space"
 10394                           ; Number of cases is 5, Range of values is 80 to 96
 10395                           ; switch strategies available:
 10396                           ; Name         Instructions Cycles
 10397                           ; simple_byte           16     9 (average)
 10398                           ; direct_byte           43     9 (fixed)
 10399                           ; jumptable            263     9 (fixed)
 10400                           ;	Chosen strategy is simple_byte
 10401  06BD  3A50               	xorlw	80	; case 80
 10402  06BE  1903               	skipnz
 10403  06BF  2E56               	goto	l4093
 10404  06C0  3A01               	xorlw	1	; case 81
 10405  06C1  1903               	skipnz
 10406  06C2  2E59               	goto	l4095
 10407  06C3  3A03               	xorlw	3	; case 82
 10408  06C4  1903               	skipnz
 10409  06C5  2E6E               	goto	l4099
 10410  06C6  3A01               	xorlw	1	; case 83
 10411  06C7  1903               	skipnz
 10412  06C8  2E83               	goto	l4103
 10413  06C9  3A33               	xorlw	51	; case 96
 10414  06CA  1903               	skipnz
 10415  06CB  2EAD               	goto	l4109
 10416  06CC  2ECE               	goto	l904
 10417  06CD  0008               	return
 10418  06CE                     l904:	
 10419  06CE  0008               	return
 10420  06CF                     __end_of_ManageProtocol:	
 10421                           
 10422                           	psect	text46
 10423  0B3F                     __ptext46:	
 10424 ;; *************** function _UpdateRelaysSts *****************
 10425 ;; Defined at:
 10426 ;;		line 157 in file "../Source/c/04_App/sb110_app.c"
 10427 ;; Parameters:    Size  Location     Type
 10428 ;;		None
 10429 ;; Auto vars:     Size  Location     Type
 10430 ;;		None
 10431 ;; Return value:  Size  Location     Type
 10432 ;;                  1    wreg      void 
 10433 ;; Registers used:
 10434 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
 10435 ;; Tracked objects:
 10436 ;;		On entry : 0/0
 10437 ;;		On exit  : 0/0
 10438 ;;		Unchanged: 0/0
 10439 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10440 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10441 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10442 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10443 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10444 ;;Total ram usage:        1 bytes
 10445 ;; Hardware stack levels used:    1
 10446 ;; Hardware stack levels required when called:    3
 10447 ;; This function calls:
 10448 ;;		_SetOutChSts
 10449 ;; This function is called by:
 10450 ;;		_ManageProtocol
 10451 ;; This function uses a non-reentrant model
 10452 ;;
 10453                           
 10454                           
 10455                           ;psect for function _UpdateRelaysSts
 10456  0B3F                     _UpdateRelaysSts:	
 10457                           
 10458                           ;sb110_app.c: 160: if (((CmdBuffer[((UINT8)(1))] & ((UINT8)(0b00000001))) >> ((UINT8)(0)
      +                          )) == ((UINT8)(1)))
 10459                           
 10460                           ;incstack = 0
 10461                           ; Regs used in _UpdateRelaysSts: [wreg-fsr0h+status,2+status,0+pclath+cstack]
 10462  0B3F  0023               	movlb	3	; select bank3
 10463  0B40  1C21               	btfss	(_CmdBuffer^(0+384)+1),0
 10464  0B41  2B45               	goto	l3985
 10465                           
 10466                           ;sb110_app.c: 161: {
 10467                           ;sb110_app.c: 162: Relay1Sts = ((UINT8)(1));
 10468  0B42  01F7               	clrf	_Relay1Sts
 10469  0B43  0AF7               	incf	_Relay1Sts,f
 10470                           
 10471                           ;sb110_app.c: 163: }
 10472  0B44  2B46               	goto	l3987
 10473  0B45                     l3985:	
 10474                           
 10475                           ;sb110_app.c: 164: else
 10476                           ;sb110_app.c: 165: {
 10477                           ;sb110_app.c: 166: Relay1Sts = ((UINT8)(0));
 10478  0B45  01F7               	clrf	_Relay1Sts
 10479  0B46                     l3987:	
 10480                           
 10481                           ;sb110_app.c: 167: }
 10482                           ;sb110_app.c: 170: if (((CmdBuffer[((UINT8)(1))] & ((UINT8)(0b00000010))) >> ((UINT8)(1)
      +                          )) == ((UINT8)(1)))
 10483  0B46  0821               	movf	(_CmdBuffer^(0+384)+1),w
 10484  0B47  0020               	movlb	0	; select bank0
 10485  0B48  00A0               	movwf	??_UpdateRelaysSts
 10486  0B49  3001               	movlw	1
 10487  0B4A                     u2695:	
 10488  0B4A  36A0               	lsrf	??_UpdateRelaysSts,f
 10489  0B4B  0B89               	decfsz	9,f
 10490  0B4C  2B4A               	goto	u2695
 10491  0B4D  1C20               	btfss	??_UpdateRelaysSts,0
 10492  0B4E  2B52               	goto	l3991
 10493                           
 10494                           ;sb110_app.c: 171: {
 10495                           ;sb110_app.c: 172: Relay2Sts = ((UINT8)(1));
 10496  0B4F  01F6               	clrf	_Relay2Sts
 10497  0B50  0AF6               	incf	_Relay2Sts,f
 10498                           
 10499                           ;sb110_app.c: 174: }
 10500  0B51  2B53               	goto	l3993
 10501  0B52                     l3991:	
 10502                           
 10503                           ;sb110_app.c: 175: else
 10504                           ;sb110_app.c: 176: {
 10505                           ;sb110_app.c: 177: Relay2Sts = ((UINT8)(0));
 10506  0B52  01F6               	clrf	_Relay2Sts
 10507  0B53                     l3993:	
 10508                           
 10509                           ;sb110_app.c: 178: }
 10510                           ;sb110_app.c: 181: SetOutChSts(((UINT8)(1)),Relay1Sts);
 10511  0B53  0877               	movf	_Relay1Sts,w
 10512  0B54  00A0               	movwf	??_UpdateRelaysSts
 10513  0B55  0820               	movf	??_UpdateRelaysSts,w
 10514  0B56  00F4               	movwf	SetOutChSts@Sts
 10515  0B57  3001               	movlw	1
 10516  0B58  318A  2266  318B   	fcall	_SetOutChSts
 10517                           
 10518                           ;sb110_app.c: 182: SetOutChSts(((UINT8)(2)),Relay2Sts);
 10519  0B5B  0876               	movf	_Relay2Sts,w
 10520  0B5C  0020               	movlb	0	; select bank0
 10521  0B5D  00A0               	movwf	??_UpdateRelaysSts
 10522  0B5E  0820               	movf	??_UpdateRelaysSts,w
 10523  0B5F  00F4               	movwf	SetOutChSts@Sts
 10524  0B60  3002               	movlw	2
 10525  0B61  318A  2266         	fcall	_SetOutChSts
 10526  0B63  0008               	return
 10527  0B64                     __end_of_UpdateRelaysSts:	
 10528                           
 10529                           	psect	text47
 10530  0A66                     __ptext47:	
 10531 ;; *************** function _SetOutChSts *****************
 10532 ;; Defined at:
 10533 ;;		line 129 in file "../Source/c/04_App/sb110_app.c"
 10534 ;; Parameters:    Size  Location     Type
 10535 ;;  Ch              1    wreg     unsigned char 
 10536 ;;  Sts             1    4[COMMON] unsigned char 
 10537 ;; Auto vars:     Size  Location     Type
 10538 ;;  Ch              1    5[COMMON] unsigned char 
 10539 ;; Return value:  Size  Location     Type
 10540 ;;                  1    wreg      void 
 10541 ;; Registers used:
 10542 ;;		wreg, fsr0l, fsr0h, status,2, status,0
 10543 ;; Tracked objects:
 10544 ;;		On entry : 0/0
 10545 ;;		On exit  : 0/0
 10546 ;;		Unchanged: 0/0
 10547 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10548 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10549 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10550 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10551 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10552 ;;Total ram usage:        2 bytes
 10553 ;; Hardware stack levels used:    1
 10554 ;; Hardware stack levels required when called:    2
 10555 ;; This function calls:
 10556 ;;		Nothing
 10557 ;; This function is called by:
 10558 ;;		_UpdateRelaysSts
 10559 ;;		_GenerateImpulse
 10560 ;; This function uses a non-reentrant model
 10561 ;;
 10562                           
 10563                           
 10564                           ;psect for function _SetOutChSts
 10565  0A66                     _SetOutChSts:	
 10566                           
 10567                           ;incstack = 0
 10568                           ; Regs used in _SetOutChSts: [wreg-fsr0h+status,2+status,0]
 10569                           ;SetOutChSts@Ch stored from wreg
 10570  0A66  00F5               	movwf	SetOutChSts@Ch
 10571                           
 10572                           ;sb110_app.c: 132: switch (Ch)
 10573  0A67  2A76               	goto	l2825
 10574  0A68                     l2819:	
 10575                           ;sb110_app.c: 133: {
 10576                           ;sb110_app.c: 134: case ((UINT8)(1)):
 10577                           
 10578                           
 10579                           ;sb110_app.c: 136: LATCbits.LATC2 = Sts;
 10580  0A68  0C74               	rrf	SetOutChSts@Sts,w
 10581  0A69  0022               	movlb	2	; select bank2
 10582  0A6A  1C03               	skipc
 10583  0A6B  110E               	bcf	14,2	;volatile
 10584  0A6C  1803               	skipnc
 10585  0A6D  150E               	bsf	14,2	;volatile
 10586                           
 10587                           ;sb110_app.c: 137: break;
 10588  0A6E  0008               	return
 10589  0A6F                     l2821:	
 10590                           ;sb110_app.c: 139: case ((UINT8)(2)):
 10591                           
 10592                           
 10593                           ;sb110_app.c: 141: LATCbits.LATC3 = Sts;
 10594  0A6F  0C74               	rrf	SetOutChSts@Sts,w
 10595  0A70  0022               	movlb	2	; select bank2
 10596  0A71  1C03               	skipc
 10597  0A72  118E               	bcf	14,3	;volatile
 10598  0A73  1803               	skipnc
 10599  0A74  158E               	bsf	14,3	;volatile
 10600                           
 10601                           ;sb110_app.c: 146: }
 10602                           
 10603                           ;sb110_app.c: 145: break;
 10604                           
 10605                           ;sb110_app.c: 144: default:
 10606                           
 10607                           ;sb110_app.c: 142: break;
 10608  0A75  0008               	return
 10609  0A76                     l2825:	
 10610  0A76  0875               	movf	SetOutChSts@Ch,w
 10611                           
 10612                           ; Switch size 1, requested type "space"
 10613                           ; Number of cases is 2, Range of values is 1 to 2
 10614                           ; switch strategies available:
 10615                           ; Name         Instructions Cycles
 10616                           ; simple_byte            7     4 (average)
 10617                           ; direct_byte           13     9 (fixed)
 10618                           ; jumptable            263     9 (fixed)
 10619                           ;	Chosen strategy is simple_byte
 10620  0A77  3A01               	xorlw	1	; case 1
 10621  0A78  1903               	skipnz
 10622  0A79  2A68               	goto	l2819
 10623  0A7A  3A03               	xorlw	3	; case 2
 10624  0A7B  1903               	skipnz
 10625  0A7C  2A6F               	goto	l2821
 10626  0A7D  2A7E               	goto	l873
 10627  0A7E                     l873:	
 10628  0A7E  0008               	return
 10629  0A7F                     __end_of_SetOutChSts:	
 10630                           
 10631                           	psect	text48
 10632  01A0                     __ptext48:	
 10633 ;; *************** function _StdS_ManageStdServices *****************
 10634 ;; Defined at:
 10635 ;;		line 212 in file "../../../Framework/MercuryFwk/Source/c/03_Sml/02_Ssl/std_ser.c"
 10636 ;; Parameters:    Size  Location     Type
 10637 ;;		None
 10638 ;; Auto vars:     Size  Location     Type
 10639 ;;  DieTempStr      4   18[BANK0 ] unsigned char [4]
 10640 ;;  DieTemp         2   22[BANK0 ] unsigned short 
 10641 ;; Return value:  Size  Location     Type
 10642 ;;                  1    wreg      void 
 10643 ;; Registers used:
 10644 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10645 ;; Tracked objects:
 10646 ;;		On entry : 0/0
 10647 ;;		On exit  : 0/0
 10648 ;;		Unchanged: 0/0
 10649 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10650 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10651 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10652 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10653 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10654 ;;Total ram usage:        8 bytes
 10655 ;; Hardware stack levels used:    1
 10656 ;; Hardware stack levels required when called:    4
 10657 ;; This function calls:
 10658 ;;		_BoardReset
 10659 ;;		_ControlLedDirect
 10660 ;;		_GenerateEvt
 10661 ;;		_GetDieTemperature
 10662 ;;		_LowPowerMode
 10663 ;;		_SetLedBehavSts
 10664 ;;		_StringCopy
 10665 ;;		_utoa
 10666 ;; This function is called by:
 10667 ;;		_ManageProtocol
 10668 ;; This function uses a non-reentrant model
 10669 ;;
 10670                           
 10671                           
 10672                           ;psect for function _StdS_ManageStdServices
 10673  01A0                     _StdS_ManageStdServices:	
 10674                           
 10675                           ;std_ser.c: 214: UINT16 DieTemp;
 10676                           ;std_ser.c: 215: UINT8 DieTempStr[4];
 10677                           ;std_ser.c: 218: switch (CmdBuffer[((UINT8)(0))])
 10678                           
 10679                           ;incstack = 0
 10680                           ; Regs used in _StdS_ManageStdServices: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 10681  01A0  2A72               	goto	l3979
 10682  01A1                     l3923:	
 10683                           ;std_ser.c: 219: {
 10684                           ;std_ser.c: 220: case ((UINT8)(0x10)):
 10685                           
 10686                           
 10687                           ;std_ser.c: 222: StringCopy((void*)("ECHO"),RepBuffer,((UINT8)(4)));
 10688  01A1  3023               	movlw	low (STR_2| (0+32768))
 10689  01A2  0020               	movlb	0	; select bank0
 10690  01A3  00A0               	movwf	StringCopy@SourceStr
 10691  01A4  3090               	movlw	high (STR_2| (0+32768))
 10692  01A5  00A1               	movwf	StringCopy@SourceStr+1
 10693  01A6  3020               	movlw	(low (_RepBuffer| (0+512)))& (0+255)
 10694  01A7  00B0               	movwf	??_StdS_ManageStdServices
 10695  01A8  0830               	movf	??_StdS_ManageStdServices,w
 10696  01A9  00A2               	movwf	StringCopy@DestStr
 10697  01AA  3004               	movlw	4
 10698  01AB  00B1               	movwf	??_StdS_ManageStdServices+1
 10699  01AC  0831               	movf	??_StdS_ManageStdServices+1,w
 10700  01AD  00A3               	movwf	StringCopy@Len
 10701  01AE  318B  231C  3181   	fcall	_StringCopy
 10702                           
 10703                           ;std_ser.c: 224: RepBufferLen = ((UINT8)(4));
 10704  01B1  3004               	movlw	4
 10705  01B2  0020               	movlb	0	; select bank0
 10706  01B3  00B0               	movwf	??_StdS_ManageStdServices
 10707  01B4  0830               	movf	??_StdS_ManageStdServices,w
 10708  01B5  0021               	movlb	1	; select bank1
 10709  01B6  00AF               	movwf	_RepBufferLen^(0+128)
 10710                           
 10711                           ;std_ser.c: 226: GenerateEvt(&I2cReplyPacketReady);
 10712  01B7  3066               	movlw	(low (_I2cReplyPacketReady| 0))& (0+255)
 10713  01B8  318A  22FA         	fcall	_GenerateEvt
 10714                           
 10715                           ;std_ser.c: 227: break;
 10716  01BA  0008               	return
 10717  01BB                     l3929:	
 10718                           ;std_ser.c: 229: case ((UINT8)(0x20)):
 10719                           
 10720                           
 10721                           ;std_ser.c: 231: StringCopy((void*)"SB110",RepBuffer,((UINT8)(5)));
 10722  01BB  301D               	movlw	low (STR_3| (0+32768))
 10723  01BC  0020               	movlb	0	; select bank0
 10724  01BD  00A0               	movwf	StringCopy@SourceStr
 10725  01BE  3090               	movlw	high (STR_3| (0+32768))
 10726  01BF  00A1               	movwf	StringCopy@SourceStr+1
 10727  01C0  3020               	movlw	(low (_RepBuffer| (0+512)))& (0+255)
 10728  01C1  00B0               	movwf	??_StdS_ManageStdServices
 10729  01C2  0830               	movf	??_StdS_ManageStdServices,w
 10730  01C3  00A2               	movwf	StringCopy@DestStr
 10731  01C4  3005               	movlw	5
 10732  01C5  00B1               	movwf	??_StdS_ManageStdServices+1
 10733  01C6  0831               	movf	??_StdS_ManageStdServices+1,w
 10734  01C7  00A3               	movwf	StringCopy@Len
 10735  01C8  318B  231C  3181   	fcall	_StringCopy
 10736                           
 10737                           ;std_ser.c: 233: RepBufferLen = ((UINT8)(5));
 10738  01CB  3005               	movlw	5
 10739  01CC  0020               	movlb	0	; select bank0
 10740  01CD  00B0               	movwf	??_StdS_ManageStdServices
 10741  01CE  0830               	movf	??_StdS_ManageStdServices,w
 10742  01CF  0021               	movlb	1	; select bank1
 10743  01D0  00AF               	movwf	_RepBufferLen^(0+128)
 10744                           
 10745                           ;std_ser.c: 235: GenerateEvt(&I2cReplyPacketReady);
 10746  01D1  3066               	movlw	(low (_I2cReplyPacketReady| 0))& (0+255)
 10747  01D2  318A  22FA         	fcall	_GenerateEvt
 10748                           
 10749                           ;std_ser.c: 236: break;
 10750  01D4  0008               	return
 10751  01D5                     l3935:	
 10752                           ;std_ser.c: 238: case ((UINT8)(0x21)):
 10753                           
 10754                           
 10755                           ;std_ser.c: 240: StringCopy((void*)"01.01.00",RepBuffer,((UINT8)(8)));
 10756  01D5  3002               	movlw	low (STR_4| (0+32768))
 10757  01D6  0020               	movlb	0	; select bank0
 10758  01D7  00A0               	movwf	StringCopy@SourceStr
 10759  01D8  3090               	movlw	high (STR_4| (0+32768))
 10760  01D9  00A1               	movwf	StringCopy@SourceStr+1
 10761  01DA  3020               	movlw	(low (_RepBuffer| (0+512)))& (0+255)
 10762  01DB  00B0               	movwf	??_StdS_ManageStdServices
 10763  01DC  0830               	movf	??_StdS_ManageStdServices,w
 10764  01DD  00A2               	movwf	StringCopy@DestStr
 10765  01DE  3008               	movlw	8
 10766  01DF  00B1               	movwf	??_StdS_ManageStdServices+1
 10767  01E0  0831               	movf	??_StdS_ManageStdServices+1,w
 10768  01E1  00A3               	movwf	StringCopy@Len
 10769  01E2  318B  231C  3181   	fcall	_StringCopy
 10770                           
 10771                           ;std_ser.c: 242: RepBufferLen = ((UINT8)(8));
 10772  01E5  3008               	movlw	8
 10773  01E6  0020               	movlb	0	; select bank0
 10774  01E7  00B0               	movwf	??_StdS_ManageStdServices
 10775  01E8  0830               	movf	??_StdS_ManageStdServices,w
 10776  01E9  0021               	movlb	1	; select bank1
 10777  01EA  00AF               	movwf	_RepBufferLen^(0+128)
 10778                           
 10779                           ;std_ser.c: 244: GenerateEvt(&I2cReplyPacketReady);
 10780  01EB  3066               	movlw	(low (_I2cReplyPacketReady| 0))& (0+255)
 10781  01EC  318A  22FA         	fcall	_GenerateEvt
 10782                           
 10783                           ;std_ser.c: 245: break;
 10784  01EE  0008               	return
 10785  01EF                     l3941:	
 10786                           ;std_ser.c: 247: case ((UINT8)(0x22)):
 10787                           
 10788                           
 10789                           ;std_ser.c: 249: StringCopy((void*)"01.01.00",RepBuffer,((UINT8)(8)));
 10790  01EF  3002               	movlw	low (STR_4| (0+32768))
 10791  01F0  0020               	movlb	0	; select bank0
 10792  01F1  00A0               	movwf	StringCopy@SourceStr
 10793  01F2  3090               	movlw	high (STR_4| (0+32768))
 10794  01F3  00A1               	movwf	StringCopy@SourceStr+1
 10795  01F4  3020               	movlw	(low (_RepBuffer| (0+512)))& (0+255)
 10796  01F5  00B0               	movwf	??_StdS_ManageStdServices
 10797  01F6  0830               	movf	??_StdS_ManageStdServices,w
 10798  01F7  00A2               	movwf	StringCopy@DestStr
 10799  01F8  3008               	movlw	8
 10800  01F9  00B1               	movwf	??_StdS_ManageStdServices+1
 10801  01FA  0831               	movf	??_StdS_ManageStdServices+1,w
 10802  01FB  00A3               	movwf	StringCopy@Len
 10803  01FC  318B  231C  3181   	fcall	_StringCopy
 10804                           
 10805                           ;std_ser.c: 251: RepBufferLen = ((UINT8)(8));
 10806  01FF  3008               	movlw	8
 10807  0200  0020               	movlb	0	; select bank0
 10808  0201  00B0               	movwf	??_StdS_ManageStdServices
 10809  0202  0830               	movf	??_StdS_ManageStdServices,w
 10810  0203  0021               	movlb	1	; select bank1
 10811  0204  00AF               	movwf	_RepBufferLen^(0+128)
 10812                           
 10813                           ;std_ser.c: 253: GenerateEvt(&I2cReplyPacketReady);
 10814  0205  3066               	movlw	(low (_I2cReplyPacketReady| 0))& (0+255)
 10815  0206  318A  22FA         	fcall	_GenerateEvt
 10816                           
 10817                           ;std_ser.c: 255: break;
 10818  0208  0008               	return
 10819  0209                     l3947:	
 10820                           ;std_ser.c: 257: case ((UINT8)(0x30)):
 10821                           
 10822                           
 10823                           ;std_ser.c: 259: BoardReset();
 10824  0209  3188  20AE         	fcall	_BoardReset
 10825                           
 10826                           ;std_ser.c: 260: break;
 10827  020B  0008               	return
 10828  020C                     l3949:	
 10829                           ;std_ser.c: 262: case ((UINT8)(0x31)):
 10830                           
 10831                           
 10832                           ;std_ser.c: 264: LowPowerMode();
 10833  020C  3189  212C         	fcall	_LowPowerMode
 10834                           
 10835                           ;std_ser.c: 265: break;
 10836  020E  0008               	return
 10837  020F                     l3951:	
 10838                           ;std_ser.c: 267: case ((UINT8)(0x41)):
 10839                           
 10840                           
 10841                           ;std_ser.c: 269: SetLedBehavSts(CmdBuffer[((UINT8)(1))]);
 10842  020F  0023               	movlb	3	; select bank3
 10843  0210  0821               	movf	(_CmdBuffer^(0+384)+1),w
 10844  0211  318D  2507         	fcall	_SetLedBehavSts
 10845                           
 10846                           ;std_ser.c: 270: break;
 10847  0213  0008               	return
 10848  0214                     l3953:	
 10849                           ;std_ser.c: 272: case ((UINT8)(0x42)):
 10850                           
 10851                           
 10852                           ;std_ser.c: 274: ControlLedDirect();
 10853  0214  3189  21B1         	fcall	_ControlLedDirect
 10854                           
 10855                           ;std_ser.c: 275: break;
 10856  0216  0008               	return
 10857  0217                     l3955:	
 10858                           ;std_ser.c: 277: case ((UINT8)(0x45)):
 10859                           
 10860                           
 10861                           ;std_ser.c: 279: DieTemp = GetDieTemperature();
 10862  0217  318A  2234  3181   	fcall	_GetDieTemperature
 10863  021A  0020               	movlb	0	; select bank0
 10864  021B  0824               	movf	?_GetDieTemperature+1,w
 10865  021C  00B7               	movwf	StdS_ManageStdServices@DieTemp+1
 10866  021D  0823               	movf	?_GetDieTemperature,w
 10867  021E  00B6               	movwf	StdS_ManageStdServices@DieTemp
 10868                           
 10869                           ;std_ser.c: 281: RepBuffer[0] = ((DieTemp & 0xFF00) >> 8);
 10870  021F  0837               	movf	StdS_ManageStdServices@DieTemp+1,w
 10871  0220  00B0               	movwf	??_StdS_ManageStdServices
 10872  0221  0830               	movf	??_StdS_ManageStdServices,w
 10873  0222  0024               	movlb	4	; select bank4
 10874  0223  00A0               	movwf	_RepBuffer^(0+512)
 10875                           
 10876                           ;std_ser.c: 282: RepBuffer[1] = (DieTemp & 0x00FF);
 10877  0224  0020               	movlb	0	; select bank0
 10878  0225  0836               	movf	StdS_ManageStdServices@DieTemp,w
 10879  0226  00B0               	movwf	??_StdS_ManageStdServices
 10880  0227  0830               	movf	??_StdS_ManageStdServices,w
 10881  0228  0024               	movlb	4	; select bank4
 10882  0229  00A1               	movwf	(_RepBuffer^(0+512)+1)
 10883                           
 10884                           ;std_ser.c: 284: RepBufferLen = ((UINT8)(2));
 10885  022A  3002               	movlw	2
 10886  022B  0020               	movlb	0	; select bank0
 10887  022C  00B0               	movwf	??_StdS_ManageStdServices
 10888  022D  0830               	movf	??_StdS_ManageStdServices,w
 10889  022E  0021               	movlb	1	; select bank1
 10890  022F  00AF               	movwf	_RepBufferLen^(0+128)
 10891                           
 10892                           ;std_ser.c: 286: GenerateEvt(&I2cReplyPacketReady);
 10893  0230  3066               	movlw	(low (_I2cReplyPacketReady| 0))& (0+255)
 10894  0231  318A  22FA         	fcall	_GenerateEvt
 10895                           
 10896                           ;std_ser.c: 287: break;
 10897  0233  0008               	return
 10898  0234                     l3965:	
 10899                           ;std_ser.c: 289: case ((UINT8)(0x46)):
 10900                           
 10901                           
 10902                           ;std_ser.c: 291: DieTemp = GetDieTemperature();
 10903  0234  318A  2234  3181   	fcall	_GetDieTemperature
 10904  0237  0020               	movlb	0	; select bank0
 10905  0238  0824               	movf	?_GetDieTemperature+1,w
 10906  0239  00B7               	movwf	StdS_ManageStdServices@DieTemp+1
 10907  023A  0823               	movf	?_GetDieTemperature,w
 10908  023B  00B6               	movwf	StdS_ManageStdServices@DieTemp
 10909                           
 10910                           ;std_ser.c: 293: DieTemp = (DieTemp/8) - 40;
 10911  023C  0837               	movf	StdS_ManageStdServices@DieTemp+1,w
 10912  023D  00B1               	movwf	??_StdS_ManageStdServices+1
 10913  023E  0836               	movf	StdS_ManageStdServices@DieTemp,w
 10914  023F  00B0               	movwf	??_StdS_ManageStdServices
 10915  0240  36B1               	lsrf	??_StdS_ManageStdServices+1,f
 10916  0241  0CB0               	rrf	??_StdS_ManageStdServices,f
 10917  0242  36B1               	lsrf	??_StdS_ManageStdServices+1,f
 10918  0243  0CB0               	rrf	??_StdS_ManageStdServices,f
 10919  0244  36B1               	lsrf	??_StdS_ManageStdServices+1,f
 10920  0245  0CB0               	rrf	??_StdS_ManageStdServices,f
 10921  0246  0830               	movf	??_StdS_ManageStdServices,w
 10922  0247  3ED8               	addlw	216
 10923  0248  00B6               	movwf	StdS_ManageStdServices@DieTemp
 10924  0249  30FF               	movlw	255
 10925  024A  3D31               	addwfc	??_StdS_ManageStdServices+1,w
 10926  024B  00B7               	movwf	StdS_ManageStdServices@DieTemp+1
 10927                           
 10928                           ;std_ser.c: 295: utoa(DieTempStr,DieTemp,10);
 10929  024C  0837               	movf	StdS_ManageStdServices@DieTemp+1,w
 10930  024D  00A8               	movwf	utoa@val+1
 10931  024E  0836               	movf	StdS_ManageStdServices@DieTemp,w
 10932  024F  00A7               	movwf	utoa@val
 10933  0250  300A               	movlw	10
 10934  0251  00A9               	movwf	utoa@base
 10935  0252  3000               	movlw	0
 10936  0253  00AA               	movwf	utoa@base+1
 10937  0254  3032               	movlw	(low (StdS_ManageStdServices@DieTempStr| 0))& (0+255)
 10938  0255  318E  26C7  3181   	fcall	_utoa
 10939                           
 10940                           ;std_ser.c: 297: StringCopy(DieTempStr,RepBuffer,((UINT8)(2)));
 10941  0258  3032               	movlw	low StdS_ManageStdServices@DieTempStr
 10942  0259  0020               	movlb	0	; select bank0
 10943  025A  00A0               	movwf	StringCopy@SourceStr
 10944  025B  3000               	movlw	high StdS_ManageStdServices@DieTempStr
 10945  025C  00A1               	movwf	StringCopy@SourceStr+1
 10946  025D  3020               	movlw	(low (_RepBuffer| (0+512)))& (0+255)
 10947  025E  00B0               	movwf	??_StdS_ManageStdServices
 10948  025F  0830               	movf	??_StdS_ManageStdServices,w
 10949  0260  00A2               	movwf	StringCopy@DestStr
 10950  0261  3002               	movlw	2
 10951  0262  00B1               	movwf	??_StdS_ManageStdServices+1
 10952  0263  0831               	movf	??_StdS_ManageStdServices+1,w
 10953  0264  00A3               	movwf	StringCopy@Len
 10954  0265  318B  231C  3181   	fcall	_StringCopy
 10955                           
 10956                           ;std_ser.c: 299: RepBufferLen = ((UINT8)(2));
 10957  0268  3002               	movlw	2
 10958  0269  0020               	movlb	0	; select bank0
 10959  026A  00B0               	movwf	??_StdS_ManageStdServices
 10960  026B  0830               	movf	??_StdS_ManageStdServices,w
 10961  026C  0021               	movlb	1	; select bank1
 10962  026D  00AF               	movwf	_RepBufferLen^(0+128)
 10963                           
 10964                           ;std_ser.c: 301: GenerateEvt(&I2cReplyPacketReady);
 10965  026E  3066               	movlw	(low (_I2cReplyPacketReady| 0))& (0+255)
 10966  026F  318A  22FA         	fcall	_GenerateEvt
 10967                           
 10968                           ;std_ser.c: 306: }
 10969                           
 10970                           ;std_ser.c: 305: break;
 10971                           
 10972                           ;std_ser.c: 304: default:
 10973                           
 10974                           ;std_ser.c: 302: break;
 10975  0271  0008               	return
 10976  0272                     l3979:	
 10977  0272  0023               	movlb	3	; select bank3
 10978  0273  0820               	movf	_CmdBuffer^(0+384),w
 10979                           
 10980                           ; Switch size 1, requested type "space"
 10981                           ; Number of cases is 10, Range of values is 16 to 70
 10982                           ; switch strategies available:
 10983                           ; Name         Instructions Cycles
 10984                           ; simple_byte           31    16 (average)
 10985                           ; direct_byte          119     9 (fixed)
 10986                           ; jumptable            263     9 (fixed)
 10987                           ;	Chosen strategy is simple_byte
 10988  0274  3A10               	xorlw	16	; case 16
 10989  0275  1903               	skipnz
 10990  0276  29A1               	goto	l3923
 10991  0277  3A30               	xorlw	48	; case 32
 10992  0278  1903               	skipnz
 10993  0279  29BB               	goto	l3929
 10994  027A  3A01               	xorlw	1	; case 33
 10995  027B  1903               	skipnz
 10996  027C  29D5               	goto	l3935
 10997  027D  3A03               	xorlw	3	; case 34
 10998  027E  1903               	skipnz
 10999  027F  29EF               	goto	l3941
 11000  0280  3A12               	xorlw	18	; case 48
 11001  0281  1903               	skipnz
 11002  0282  2A09               	goto	l3947
 11003  0283  3A01               	xorlw	1	; case 49
 11004  0284  1903               	skipnz
 11005  0285  2A0C               	goto	l3949
 11006  0286  3A70               	xorlw	112	; case 65
 11007  0287  1903               	skipnz
 11008  0288  2A0F               	goto	l3951
 11009  0289  3A03               	xorlw	3	; case 66
 11010  028A  1903               	skipnz
 11011  028B  2A14               	goto	l3953
 11012  028C  3A07               	xorlw	7	; case 69
 11013  028D  1903               	skipnz
 11014  028E  2A17               	goto	l3955
 11015  028F  3A03               	xorlw	3	; case 70
 11016  0290  1903               	skipnz
 11017  0291  2A34               	goto	l3965
 11018  0292  2A93               	goto	l786
 11019  0293                     l786:	
 11020  0293  0008               	return
 11021  0294                     __end_of_StdS_ManageStdServices:	
 11022                           
 11023                           	psect	text49
 11024  0EC7                     __ptext49:	
 11025 ;; *************** function _utoa *****************
 11026 ;; Defined at:
 11027 ;;		line 17 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\itoa.c"
 11028 ;; Parameters:    Size  Location     Type
 11029 ;;  buf             1    wreg     PTR unsigned char 
 11030 ;;		 -> StdS_ManageStdServices@DieTempStr(4), 
 11031 ;;  val             2    7[BANK0 ] unsigned int 
 11032 ;;  base            2    9[BANK0 ] int 
 11033 ;; Auto vars:     Size  Location     Type
 11034 ;;  buf             1   15[BANK0 ] PTR unsigned char 
 11035 ;;		 -> StdS_ManageStdServices@DieTempStr(4), 
 11036 ;;  v               2   12[BANK0 ] unsigned int 
 11037 ;;  c               1   14[BANK0 ] unsigned char 
 11038 ;; Return value:  Size  Location     Type
 11039 ;;                  1    wreg      PTR unsigned char 
 11040 ;; Registers used:
 11041 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11042 ;; Tracked objects:
 11043 ;;		On entry : 0/0
 11044 ;;		On exit  : 0/0
 11045 ;;		Unchanged: 0/0
 11046 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11047 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11048 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11049 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11050 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11051 ;;Total ram usage:        9 bytes
 11052 ;; Hardware stack levels used:    1
 11053 ;; Hardware stack levels required when called:    3
 11054 ;; This function calls:
 11055 ;;		___lwdiv
 11056 ;;		___lwmod
 11057 ;; This function is called by:
 11058 ;;		_StdS_ManageStdServices
 11059 ;; This function uses a non-reentrant model
 11060 ;;
 11061                           
 11062                           
 11063                           ;psect for function _utoa
 11064  0EC7                     _utoa:	
 11065                           
 11066                           ;incstack = 0
 11067                           ; Regs used in _utoa: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 11068                           ;utoa@buf stored from wreg
 11069  0EC7  0020               	movlb	0	; select bank0
 11070  0EC8  00AF               	movwf	utoa@buf
 11071  0EC9  0828               	movf	utoa@val+1,w
 11072  0ECA  00AD               	movwf	utoa@v+1
 11073  0ECB  0827               	movf	utoa@val,w
 11074  0ECC  00AC               	movwf	utoa@v
 11075  0ECD                     l3875:	
 11076  0ECD  082A               	movf	utoa@base+1,w
 11077  0ECE  00A1               	movwf	___lwdiv@divisor+1
 11078  0ECF  0829               	movf	utoa@base,w
 11079  0ED0  00A0               	movwf	___lwdiv@divisor
 11080  0ED1  082D               	movf	utoa@v+1,w
 11081  0ED2  00A3               	movwf	___lwdiv@dividend+1
 11082  0ED3  082C               	movf	utoa@v,w
 11083  0ED4  00A2               	movwf	___lwdiv@dividend
 11084  0ED5  318C  24D2  318E   	fcall	___lwdiv
 11085  0ED8  0020               	movlb	0	; select bank0
 11086  0ED9  0821               	movf	?___lwdiv+1,w
 11087  0EDA  00AD               	movwf	utoa@v+1
 11088  0EDB  0820               	movf	?___lwdiv,w
 11089  0EDC  00AC               	movwf	utoa@v
 11090  0EDD  3001               	movlw	1
 11091  0EDE  00AB               	movwf	??_utoa
 11092  0EDF  082B               	movf	??_utoa,w
 11093  0EE0  07AF               	addwf	utoa@buf,f
 11094  0EE1  082C               	movf	utoa@v,w
 11095  0EE2  042D               	iorwf	utoa@v+1,w
 11096  0EE3  1D03               	btfss	3,2
 11097  0EE4  2ECD               	goto	l3875
 11098  0EE5  082F               	movf	utoa@buf,w
 11099  0EE6  0086               	movwf	6
 11100  0EE7  0187               	clrf	7
 11101  0EE8  0181               	clrf	1
 11102  0EE9  3001               	movlw	1
 11103  0EEA  02AF               	subwf	utoa@buf,f
 11104  0EEB                     l3885:	
 11105  0EEB  082A               	movf	utoa@base+1,w
 11106  0EEC  00A1               	movwf	___lwmod@divisor+1
 11107  0EED  0829               	movf	utoa@base,w
 11108  0EEE  00A0               	movwf	___lwmod@divisor
 11109  0EEF  0828               	movf	utoa@val+1,w
 11110  0EF0  00A3               	movwf	___lwmod@dividend+1
 11111  0EF1  0827               	movf	utoa@val,w
 11112  0EF2  00A2               	movwf	___lwmod@dividend
 11113  0EF3  318B  23E0  318E   	fcall	___lwmod
 11114  0EF6  0020               	movlb	0	; select bank0
 11115  0EF7  0820               	movf	?___lwmod,w
 11116  0EF8  00AB               	movwf	??_utoa
 11117  0EF9  082B               	movf	??_utoa,w
 11118  0EFA  00AE               	movwf	utoa@c
 11119  0EFB  082A               	movf	utoa@base+1,w
 11120  0EFC  00A1               	movwf	___lwdiv@divisor+1
 11121  0EFD  0829               	movf	utoa@base,w
 11122  0EFE  00A0               	movwf	___lwdiv@divisor
 11123  0EFF  0828               	movf	utoa@val+1,w
 11124  0F00  00A3               	movwf	___lwdiv@dividend+1
 11125  0F01  0827               	movf	utoa@val,w
 11126  0F02  00A2               	movwf	___lwdiv@dividend
 11127  0F03  318C  24D2  318E   	fcall	___lwdiv
 11128  0F06  0020               	movlb	0	; select bank0
 11129  0F07  0821               	movf	?___lwdiv+1,w
 11130  0F08  00A8               	movwf	utoa@val+1
 11131  0F09  0820               	movf	?___lwdiv,w
 11132  0F0A  00A7               	movwf	utoa@val
 11133  0F0B  300A               	movlw	10
 11134  0F0C  022E               	subwf	utoa@c,w
 11135  0F0D  1C03               	skipc
 11136  0F0E  2F13               	goto	l1358
 11137  0F0F  3007               	movlw	7
 11138  0F10  00AB               	movwf	??_utoa
 11139  0F11  082B               	movf	??_utoa,w
 11140  0F12  07AE               	addwf	utoa@c,f
 11141  0F13                     l1358:	
 11142  0F13  3030               	movlw	48
 11143  0F14  00AB               	movwf	??_utoa
 11144  0F15  082B               	movf	??_utoa,w
 11145  0F16  07AE               	addwf	utoa@c,f
 11146  0F17  082E               	movf	utoa@c,w
 11147  0F18  00AB               	movwf	??_utoa
 11148  0F19  082F               	movf	utoa@buf,w
 11149  0F1A  0086               	movwf	6
 11150  0F1B  0187               	clrf	7
 11151  0F1C  082B               	movf	??_utoa,w
 11152  0F1D  0081               	movwf	1
 11153  0F1E  3001               	movlw	1
 11154  0F1F  02AF               	subwf	utoa@buf,f
 11155  0F20  0827               	movf	utoa@val,w
 11156  0F21  0428               	iorwf	utoa@val+1,w
 11157  0F22  1D03               	btfss	3,2
 11158  0F23  2EEB               	goto	l3885
 11159                           
 11160                           ;	Return value of _utoa is never used
 11161  0F24  3001               	movlw	1
 11162  0F25  00AB               	movwf	??_utoa
 11163  0F26  082B               	movf	??_utoa,w
 11164  0F27  07AF               	addwf	utoa@buf,f
 11165  0F28  0008               	return
 11166  0F29                     __end_of_utoa:	
 11167                           
 11168                           	psect	text50
 11169  0BE0                     __ptext50:	
 11170 ;; *************** function ___lwmod *****************
 11171 ;; Defined at:
 11172 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\lwmod.c"
 11173 ;; Parameters:    Size  Location     Type
 11174 ;;  divisor         2    0[BANK0 ] unsigned int 
 11175 ;;  dividend        2    2[BANK0 ] unsigned int 
 11176 ;; Auto vars:     Size  Location     Type
 11177 ;;  counter         1    5[COMMON] unsigned char 
 11178 ;; Return value:  Size  Location     Type
 11179 ;;                  2    0[BANK0 ] unsigned int 
 11180 ;; Registers used:
 11181 ;;		wreg, status,2, status,0
 11182 ;; Tracked objects:
 11183 ;;		On entry : 0/0
 11184 ;;		On exit  : 0/0
 11185 ;;		Unchanged: 0/0
 11186 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11187 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11188 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11189 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11190 ;;      Totals:         2       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11191 ;;Total ram usage:        6 bytes
 11192 ;; Hardware stack levels used:    1
 11193 ;; Hardware stack levels required when called:    2
 11194 ;; This function calls:
 11195 ;;		Nothing
 11196 ;; This function is called by:
 11197 ;;		_utoa
 11198 ;; This function uses a non-reentrant model
 11199 ;;
 11200                           
 11201                           
 11202                           ;psect for function ___lwmod
 11203  0BE0                     ___lwmod:	
 11204                           
 11205                           ;incstack = 0
 11206                           ; Regs used in ___lwmod: [wreg+status,2+status,0]
 11207  0BE0  0020               	movlb	0	; select bank0
 11208  0BE1  0820               	movf	___lwmod@divisor,w
 11209  0BE2  0421               	iorwf	___lwmod@divisor+1,w
 11210  0BE3  1903               	btfsc	3,2
 11211  0BE4  2C08               	goto	l3807
 11212  0BE5  01F5               	clrf	___lwmod@counter
 11213  0BE6  0AF5               	incf	___lwmod@counter,f
 11214  0BE7                     l3797:	
 11215  0BE7  1BA1               	btfsc	___lwmod@divisor+1,7
 11216  0BE8  2BF3               	goto	l3799
 11217  0BE9  3001               	movlw	1
 11218  0BEA                     u2515:	
 11219  0BEA  35A0               	lslf	___lwmod@divisor,f
 11220  0BEB  0DA1               	rlf	___lwmod@divisor+1,f
 11221  0BEC  0B89               	decfsz	9,f
 11222  0BED  2BEA               	goto	u2515
 11223  0BEE  3001               	movlw	1
 11224  0BEF  00F4               	movwf	??___lwmod
 11225  0BF0  0874               	movf	??___lwmod,w
 11226  0BF1  07F5               	addwf	___lwmod@counter,f
 11227  0BF2  2BE7               	goto	l3797
 11228  0BF3                     l3799:	
 11229  0BF3  0821               	movf	___lwmod@divisor+1,w
 11230  0BF4  0223               	subwf	___lwmod@dividend+1,w
 11231  0BF5  1D03               	skipz
 11232  0BF6  2BF9               	goto	u2535
 11233  0BF7  0820               	movf	___lwmod@divisor,w
 11234  0BF8  0222               	subwf	___lwmod@dividend,w
 11235  0BF9                     u2535:	
 11236  0BF9  1C03               	skipc
 11237  0BFA  2BFF               	goto	l3803
 11238  0BFB  0820               	movf	___lwmod@divisor,w
 11239  0BFC  02A2               	subwf	___lwmod@dividend,f
 11240  0BFD  0821               	movf	___lwmod@divisor+1,w
 11241  0BFE  3BA3               	subwfb	___lwmod@dividend+1,f
 11242  0BFF                     l3803:	
 11243  0BFF  3001               	movlw	1
 11244  0C00                     u2545:	
 11245  0C00  36A1               	lsrf	___lwmod@divisor+1,f
 11246  0C01  0CA0               	rrf	___lwmod@divisor,f
 11247  0C02  0B89               	decfsz	9,f
 11248  0C03  2C00               	goto	u2545
 11249  0C04  3001               	movlw	1
 11250  0C05  02F5               	subwf	___lwmod@counter,f
 11251  0C06  1D03               	btfss	3,2
 11252  0C07  2BF3               	goto	l3799
 11253  0C08                     l3807:	
 11254  0C08  0823               	movf	___lwmod@dividend+1,w
 11255  0C09  00A1               	movwf	?___lwmod+1
 11256  0C0A  0822               	movf	___lwmod@dividend,w
 11257  0C0B  00A0               	movwf	?___lwmod
 11258  0C0C  0008               	return
 11259  0C0D                     __end_of___lwmod:	
 11260                           
 11261                           	psect	text51
 11262  0CD2                     __ptext51:	
 11263 ;; *************** function ___lwdiv *****************
 11264 ;; Defined at:
 11265 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\lwdiv.c"
 11266 ;; Parameters:    Size  Location     Type
 11267 ;;  divisor         2    0[BANK0 ] unsigned int 
 11268 ;;  dividend        2    2[BANK0 ] unsigned int 
 11269 ;; Auto vars:     Size  Location     Type
 11270 ;;  quotient        2    5[BANK0 ] unsigned int 
 11271 ;;  counter         1    4[BANK0 ] unsigned char 
 11272 ;; Return value:  Size  Location     Type
 11273 ;;                  2    0[BANK0 ] unsigned int 
 11274 ;; Registers used:
 11275 ;;		wreg, status,2, status,0
 11276 ;; Tracked objects:
 11277 ;;		On entry : 0/0
 11278 ;;		On exit  : 0/0
 11279 ;;		Unchanged: 0/0
 11280 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11281 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11282 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11283 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11284 ;;      Totals:         1       7       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11285 ;;Total ram usage:        8 bytes
 11286 ;; Hardware stack levels used:    1
 11287 ;; Hardware stack levels required when called:    2
 11288 ;; This function calls:
 11289 ;;		Nothing
 11290 ;; This function is called by:
 11291 ;;		_LedBlinkStateMachine
 11292 ;;		_LedPulseStateMachine
 11293 ;;		_utoa
 11294 ;; This function uses a non-reentrant model
 11295 ;;
 11296                           
 11297                           
 11298                           ;psect for function ___lwdiv
 11299  0CD2                     ___lwdiv:	
 11300                           
 11301                           ;incstack = 0
 11302                           ; Regs used in ___lwdiv: [wreg+status,2+status,0]
 11303  0CD2  0020               	movlb	0	; select bank0
 11304  0CD3  01A5               	clrf	___lwdiv@quotient
 11305  0CD4  01A6               	clrf	___lwdiv@quotient+1
 11306  0CD5  0820               	movf	___lwdiv@divisor,w
 11307  0CD6  0421               	iorwf	___lwdiv@divisor+1,w
 11308  0CD7  1903               	btfsc	3,2
 11309  0CD8  2D02               	goto	l3785
 11310  0CD9  01A4               	clrf	___lwdiv@counter
 11311  0CDA  0AA4               	incf	___lwdiv@counter,f
 11312  0CDB                     l3773:	
 11313  0CDB  1BA1               	btfsc	___lwdiv@divisor+1,7
 11314  0CDC  2CE7               	goto	l3775
 11315  0CDD  3001               	movlw	1
 11316  0CDE                     u2445:	
 11317  0CDE  35A0               	lslf	___lwdiv@divisor,f
 11318  0CDF  0DA1               	rlf	___lwdiv@divisor+1,f
 11319  0CE0  0B89               	decfsz	9,f
 11320  0CE1  2CDE               	goto	u2445
 11321  0CE2  3001               	movlw	1
 11322  0CE3  00F4               	movwf	??___lwdiv
 11323  0CE4  0874               	movf	??___lwdiv,w
 11324  0CE5  07A4               	addwf	___lwdiv@counter,f
 11325  0CE6  2CDB               	goto	l3773
 11326  0CE7                     l3775:	
 11327  0CE7  3001               	movlw	1
 11328  0CE8                     u2465:	
 11329  0CE8  35A5               	lslf	___lwdiv@quotient,f
 11330  0CE9  0DA6               	rlf	___lwdiv@quotient+1,f
 11331  0CEA  0B89               	decfsz	9,f
 11332  0CEB  2CE8               	goto	u2465
 11333  0CEC  0821               	movf	___lwdiv@divisor+1,w
 11334  0CED  0223               	subwf	___lwdiv@dividend+1,w
 11335  0CEE  1D03               	skipz
 11336  0CEF  2CF2               	goto	u2475
 11337  0CF0  0820               	movf	___lwdiv@divisor,w
 11338  0CF1  0222               	subwf	___lwdiv@dividend,w
 11339  0CF2                     u2475:	
 11340  0CF2  1C03               	skipc
 11341  0CF3  2CF9               	goto	l3781
 11342  0CF4  0820               	movf	___lwdiv@divisor,w
 11343  0CF5  02A2               	subwf	___lwdiv@dividend,f
 11344  0CF6  0821               	movf	___lwdiv@divisor+1,w
 11345  0CF7  3BA3               	subwfb	___lwdiv@dividend+1,f
 11346  0CF8  1425               	bsf	___lwdiv@quotient,0
 11347  0CF9                     l3781:	
 11348  0CF9  3001               	movlw	1
 11349  0CFA                     u2485:	
 11350  0CFA  36A1               	lsrf	___lwdiv@divisor+1,f
 11351  0CFB  0CA0               	rrf	___lwdiv@divisor,f
 11352  0CFC  0B89               	decfsz	9,f
 11353  0CFD  2CFA               	goto	u2485
 11354  0CFE  3001               	movlw	1
 11355  0CFF  02A4               	subwf	___lwdiv@counter,f
 11356  0D00  1D03               	btfss	3,2
 11357  0D01  2CE7               	goto	l3775
 11358  0D02                     l3785:	
 11359  0D02  0826               	movf	___lwdiv@quotient+1,w
 11360  0D03  00A1               	movwf	?___lwdiv+1
 11361  0D04  0825               	movf	___lwdiv@quotient,w
 11362  0D05  00A0               	movwf	?___lwdiv
 11363  0D06  0008               	return
 11364  0D07                     __end_of___lwdiv:	
 11365                           
 11366                           	psect	text52
 11367  0B1C                     __ptext52:	
 11368 ;; *************** function _StringCopy *****************
 11369 ;; Defined at:
 11370 ;;		line 104 in file "../../../Framework/MercuryFwk/Source/c/03_Sml/02_Ssl/sf.c"
 11371 ;; Parameters:    Size  Location     Type
 11372 ;;  SourceStr       2    0[BANK0 ] PTR unsigned char 
 11373 ;;		 -> StdS_ManageStdServices@DieTempStr(4), STR_5(9), STR_4(9), STR_3(6), 
 11374 ;;		 -> STR_2(5), 
 11375 ;;  DestStr         1    2[BANK0 ] PTR unsigned char 
 11376 ;;		 -> RepBuffer(80), 
 11377 ;;  Len             1    3[BANK0 ] unsigned char 
 11378 ;; Auto vars:     Size  Location     Type
 11379 ;;  Index           1    4[COMMON] unsigned char 
 11380 ;; Return value:  Size  Location     Type
 11381 ;;                  1    wreg      void 
 11382 ;; Registers used:
 11383 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath
 11384 ;; Tracked objects:
 11385 ;;		On entry : 0/0
 11386 ;;		On exit  : 0/0
 11387 ;;		Unchanged: 0/0
 11388 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11389 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11390 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11391 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11392 ;;      Totals:         1       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11393 ;;Total ram usage:        9 bytes
 11394 ;; Hardware stack levels used:    1
 11395 ;; Hardware stack levels required when called:    2
 11396 ;; This function calls:
 11397 ;;		Nothing
 11398 ;; This function is called by:
 11399 ;;		_StdS_ManageStdServices
 11400 ;; This function uses a non-reentrant model
 11401 ;;
 11402                           
 11403                           
 11404                           ;psect for function _StringCopy
 11405  0B1C                     _StringCopy:	
 11406                           
 11407                           ;sf.c: 106: UINT8 Index = 0;
 11408                           
 11409                           ;incstack = 0
 11410                           ; Regs used in _StringCopy: [wreg-fsr1h+status,2+status,0+pclath]
 11411  0B1C  01F4               	clrf	StringCopy@Index
 11412                           
 11413                           ;sf.c: 109: for (Index = 0; Index < Len; Index++)
 11414  0B1D  01F4               	clrf	StringCopy@Index
 11415  0B1E                     l3851:	
 11416  0B1E  0020               	movlb	0	; select bank0
 11417  0B1F  0823               	movf	StringCopy@Len,w
 11418  0B20  0274               	subwf	StringCopy@Index,w
 11419  0B21  1803               	btfsc	3,0
 11420  0B22  0008               	return
 11421                           
 11422                           ;sf.c: 110: {
 11423                           ;sf.c: 111: DestStr[Index] = SourceStr[Index];
 11424  0B23  0020               	movlb	0	; select bank0
 11425  0B24  0821               	movf	StringCopy@SourceStr+1,w
 11426  0B25  00A5               	movwf	??_StringCopy+1
 11427  0B26  0820               	movf	StringCopy@SourceStr,w
 11428  0B27  00A4               	movwf	??_StringCopy
 11429  0B28  0874               	movf	StringCopy@Index,w
 11430  0B29  0724               	addwf	??_StringCopy,w
 11431  0B2A  0084               	movwf	4
 11432  0B2B  0825               	movf	??_StringCopy+1,w
 11433  0B2C  1803               	skipnc
 11434  0B2D  0A25               	incf	??_StringCopy+1,w
 11435  0B2E  0085               	movwf	5
 11436  0B2F  0800               	movf	0,w	;code access
 11437  0B30  00A6               	movwf	??_StringCopy+2
 11438  0B31  0874               	movf	StringCopy@Index,w
 11439  0B32  0722               	addwf	StringCopy@DestStr,w
 11440  0B33  00A7               	movwf	??_StringCopy+3
 11441  0B34  0827               	movf	??_StringCopy+3,w
 11442  0B35  0086               	movwf	6
 11443  0B36  3002               	movlw	2	; select bank4/5
 11444  0B37  0087               	movwf	7
 11445  0B38  0826               	movf	??_StringCopy+2,w
 11446  0B39  0081               	movwf	1
 11447  0B3A  3001               	movlw	1
 11448  0B3B  00A4               	movwf	??_StringCopy
 11449  0B3C  0824               	movf	??_StringCopy,w
 11450  0B3D  07F4               	addwf	StringCopy@Index,f
 11451  0B3E  2B1E               	goto	l3851
 11452  0B3F                     __end_of_StringCopy:	
 11453                           
 11454                           	psect	text53
 11455  0D07                     __ptext53:	
 11456 ;; *************** function _SetLedBehavSts *****************
 11457 ;; Defined at:
 11458 ;;		line 76 in file "../../../Framework/MercuryFwk/Source/c/03_Sml/02_Ssl/std_ser.c"
 11459 ;; Parameters:    Size  Location     Type
 11460 ;;  LedBehav        1    wreg     unsigned char 
 11461 ;; Auto vars:     Size  Location     Type
 11462 ;;  LedBehav        1    5[BANK0 ] unsigned char 
 11463 ;; Return value:  Size  Location     Type
 11464 ;;                  1    wreg      void 
 11465 ;; Registers used:
 11466 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
 11467 ;; Tracked objects:
 11468 ;;		On entry : 0/0
 11469 ;;		On exit  : 0/0
 11470 ;;		Unchanged: 0/0
 11471 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11472 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11473 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11474 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11475 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11476 ;;Total ram usage:        2 bytes
 11477 ;; Hardware stack levels used:    1
 11478 ;; Hardware stack levels required when called:    3
 11479 ;; This function calls:
 11480 ;;		_Led_SetLedBlinkTime
 11481 ;;		_Led_SetLedPulseTime
 11482 ;;		_Led_SetLedStatus
 11483 ;; This function is called by:
 11484 ;;		_Led_MainTask
 11485 ;;		_StdS_ManageStdServices
 11486 ;; This function uses a non-reentrant model
 11487 ;;
 11488                           
 11489                           
 11490                           ;psect for function _SetLedBehavSts
 11491  0D07                     _SetLedBehavSts:	
 11492                           
 11493                           ;incstack = 0
 11494                           ; Regs used in _SetLedBehavSts: [wreg-fsr0h+status,2+status,0+pclath+cstack]
 11495                           ;SetLedBehavSts@LedBehav stored from wreg
 11496  0D07  0020               	movlb	0	; select bank0
 11497  0D08  00A5               	movwf	SetLedBehavSts@LedBehav
 11498                           
 11499                           ;std_ser.c: 79: switch (LedBehav)
 11500  0D09  2D3B               	goto	l3843
 11501  0D0A                     l3827:	
 11502                           ;std_ser.c: 80: {
 11503                           ;std_ser.c: 81: case ((UINT8)(0)):
 11504                           
 11505                           
 11506                           ;std_ser.c: 83: Led_SetLedStatus(1u,LED_STS_OFF);
 11507  0D0A  01F4               	clrf	Led_SetLedStatus@LedSts
 11508  0D0B  3001               	movlw	1
 11509  0D0C  3189  2150         	fcall	_Led_SetLedStatus
 11510                           
 11511                           ;std_ser.c: 85: LedBehaviourSts = ((UINT8)(0));
 11512  0D0E  0020               	movlb	0	; select bank0
 11513  0D0F  01E8               	clrf	_LedBehaviourSts
 11514                           
 11515                           ;std_ser.c: 86: break;
 11516  0D10  0008               	return
 11517  0D11                     l3831:	
 11518                           ;std_ser.c: 88: case ((UINT8)(1)):
 11519                           
 11520                           
 11521                           ;std_ser.c: 90: Led_SetLedPulseTime(1u,50);
 11522  0D11  3032               	movlw	50
 11523  0D12  00F4               	movwf	Led_SetLedPulseTime@PulseTimeMs
 11524  0D13  3000               	movlw	0
 11525  0D14  00F5               	movwf	Led_SetLedPulseTime@PulseTimeMs+1
 11526  0D15  3001               	movlw	1
 11527  0D16  3189  2170         	fcall	_Led_SetLedPulseTime
 11528                           
 11529                           ;std_ser.c: 92: LedBehaviourSts = ((UINT8)(1));
 11530  0D18  0020               	movlb	0	; select bank0
 11531  0D19  01E8               	clrf	_LedBehaviourSts
 11532  0D1A  0AE8               	incf	_LedBehaviourSts,f
 11533                           
 11534                           ;std_ser.c: 93: break;
 11535  0D1B  0008               	return
 11536  0D1C                     l3835:	
 11537                           ;std_ser.c: 95: case ((UINT8)(2)):
 11538                           
 11539                           
 11540                           ;std_ser.c: 97: Led_SetLedBlinkTime(1u,50,950);
 11541  0D1C  3032               	movlw	50
 11542  0D1D  00A0               	movwf	Led_SetLedBlinkTime@OnTimeMs
 11543  0D1E  3000               	movlw	0
 11544  0D1F  00A1               	movwf	Led_SetLedBlinkTime@OnTimeMs+1
 11545  0D20  30B6               	movlw	182
 11546  0D21  00A2               	movwf	Led_SetLedBlinkTime@OffTimeMs
 11547  0D22  3003               	movlw	3
 11548  0D23  00A3               	movwf	Led_SetLedBlinkTime@OffTimeMs+1
 11549  0D24  3001               	movlw	1
 11550  0D25  318A  224D  318D   	fcall	_Led_SetLedBlinkTime
 11551                           
 11552                           ;std_ser.c: 99: Led_SetLedStatus(1u,LED_STS_BLINK);
 11553  0D28  3002               	movlw	2
 11554  0D29  0020               	movlb	0	; select bank0
 11555  0D2A  00A4               	movwf	??_SetLedBehavSts
 11556  0D2B  0824               	movf	??_SetLedBehavSts,w
 11557  0D2C  00F4               	movwf	Led_SetLedStatus@LedSts
 11558  0D2D  3001               	movlw	1
 11559  0D2E  3189  2150         	fcall	_Led_SetLedStatus
 11560                           
 11561                           ;std_ser.c: 101: LedBehaviourSts = ((UINT8)(2));
 11562  0D30  3002               	movlw	2
 11563  0D31  0020               	movlb	0	; select bank0
 11564  0D32  00A4               	movwf	??_SetLedBehavSts
 11565  0D33  0824               	movf	??_SetLedBehavSts,w
 11566  0D34  00E8               	movwf	_LedBehaviourSts
 11567                           
 11568                           ;std_ser.c: 102: break;
 11569  0D35  0008               	return
 11570  0D36                     l3839:	
 11571                           ;std_ser.c: 104: case ((UINT8)(3)):
 11572                           
 11573                           
 11574                           ;std_ser.c: 106: LedBehaviourSts = ((UINT8)(3));
 11575  0D36  3003               	movlw	3
 11576  0D37  00A4               	movwf	??_SetLedBehavSts
 11577  0D38  0824               	movf	??_SetLedBehavSts,w
 11578  0D39  00E8               	movwf	_LedBehaviourSts
 11579                           
 11580                           ;std_ser.c: 111: }
 11581                           
 11582                           ;std_ser.c: 110: break;
 11583                           
 11584                           ;std_ser.c: 109: default:
 11585                           
 11586                           ;std_ser.c: 107: break;
 11587  0D3A  0008               	return
 11588  0D3B                     l3843:	
 11589  0D3B  0825               	movf	SetLedBehavSts@LedBehav,w
 11590                           
 11591                           ; Switch size 1, requested type "space"
 11592                           ; Number of cases is 4, Range of values is 0 to 3
 11593                           ; switch strategies available:
 11594                           ; Name         Instructions Cycles
 11595                           ; simple_byte           13     7 (average)
 11596                           ; direct_byte           14     6 (fixed)
 11597                           ; jumptable            260     6 (fixed)
 11598                           ;	Chosen strategy is simple_byte
 11599  0D3C  3A00               	xorlw	0	; case 0
 11600  0D3D  1903               	skipnz
 11601  0D3E  2D0A               	goto	l3827
 11602  0D3F  3A01               	xorlw	1	; case 1
 11603  0D40  1903               	skipnz
 11604  0D41  2D11               	goto	l3831
 11605  0D42  3A03               	xorlw	3	; case 2
 11606  0D43  1903               	skipnz
 11607  0D44  2D1C               	goto	l3835
 11608  0D45  3A01               	xorlw	1	; case 3
 11609  0D46  1903               	skipnz
 11610  0D47  2D36               	goto	l3839
 11611  0D48  2D49               	goto	l752
 11612  0D49                     l752:	
 11613  0D49  0008               	return
 11614  0D4A                     __end_of_SetLedBehavSts:	
 11615                           
 11616                           	psect	text54
 11617  0970                     __ptext54:	
 11618 ;; *************** function _Led_SetLedPulseTime *****************
 11619 ;; Defined at:
 11620 ;;		line 269 in file "../../../Framework/MercuryFwk/Source/c/03_Sml/02_Ssl/led.c"
 11621 ;; Parameters:    Size  Location     Type
 11622 ;;  Led             1    wreg     unsigned char 
 11623 ;;  PulseTimeMs     2    4[COMMON] unsigned short 
 11624 ;; Auto vars:     Size  Location     Type
 11625 ;;  Led             1    0[BANK0 ] unsigned char 
 11626 ;; Return value:  Size  Location     Type
 11627 ;;                  1    wreg      void 
 11628 ;; Registers used:
 11629 ;;		wreg, fsr0l, fsr0h, status,2, status,0
 11630 ;; Tracked objects:
 11631 ;;		On entry : 0/0
 11632 ;;		On exit  : 0/0
 11633 ;;		Unchanged: 0/0
 11634 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11635 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11636 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11637 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11638 ;;      Totals:         2       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11639 ;;Total ram usage:        3 bytes
 11640 ;; Hardware stack levels used:    1
 11641 ;; Hardware stack levels required when called:    2
 11642 ;; This function calls:
 11643 ;;		Nothing
 11644 ;; This function is called by:
 11645 ;;		_SetLedBehavSts
 11646 ;; This function uses a non-reentrant model
 11647 ;;
 11648                           
 11649                           
 11650                           ;psect for function _Led_SetLedPulseTime
 11651  0970                     _Led_SetLedPulseTime:	
 11652                           
 11653                           ;incstack = 0
 11654                           ; Regs used in _Led_SetLedPulseTime: [wreg-fsr0h+status,2+status,0]
 11655                           ;Led_SetLedPulseTime@Led stored from wreg
 11656  0970  0020               	movlb	0	; select bank0
 11657  0971  00A0               	movwf	Led_SetLedPulseTime@Led
 11658                           
 11659                           ;led.c: 272: switch (Led)
 11660  0972  2979               	goto	l3761
 11661  0973                     l3757:	
 11662                           ;led.c: 273: {
 11663                           ;led.c: 274: case 1u:
 11664                           
 11665                           
 11666                           ;led.c: 275: Led1Pulse.LedPulseTimeMs = PulseTimeMs;
 11667  0973  0875               	movf	Led_SetLedPulseTime@PulseTimeMs+1,w
 11668  0974  0021               	movlb	1	; select bank1
 11669  0975  00DF               	movwf	((_Led1Pulse+1)^(0+128)+4)
 11670  0976  0874               	movf	Led_SetLedPulseTime@PulseTimeMs,w
 11671  0977  00DE               	movwf	(_Led1Pulse^(0+128)+4)
 11672                           
 11673                           ;led.c: 280: }
 11674                           
 11675                           ;led.c: 279: break;
 11676                           
 11677                           ;led.c: 278: default:
 11678                           
 11679                           ;led.c: 276: break;
 11680  0978  0008               	return
 11681  0979                     l3761:	
 11682  0979  0020               	movlb	0	; select bank0
 11683  097A  0820               	movf	Led_SetLedPulseTime@Led,w
 11684                           
 11685                           ; Switch size 1, requested type "space"
 11686                           ; Number of cases is 1, Range of values is 1 to 1
 11687                           ; switch strategies available:
 11688                           ; Name         Instructions Cycles
 11689                           ; simple_byte            4     3 (average)
 11690                           ; direct_byte           11     9 (fixed)
 11691                           ; jumptable            263     9 (fixed)
 11692                           ;	Chosen strategy is simple_byte
 11693  097B  3A01               	xorlw	1	; case 1
 11694  097C  1903               	skipnz
 11695  097D  2973               	goto	l3757
 11696  097E  297F               	goto	l640
 11697  097F                     l640:	
 11698  097F  0008               	return
 11699  0980                     __end_of_Led_SetLedPulseTime:	
 11700                           
 11701                           	psect	text55
 11702  0A4D                     __ptext55:	
 11703 ;; *************** function _Led_SetLedBlinkTime *****************
 11704 ;; Defined at:
 11705 ;;		line 245 in file "../../../Framework/MercuryFwk/Source/c/03_Sml/02_Ssl/led.c"
 11706 ;; Parameters:    Size  Location     Type
 11707 ;;  Led             1    wreg     unsigned char 
 11708 ;;  OnTimeMs        2    0[BANK0 ] unsigned short 
 11709 ;;  OffTimeMs       2    2[BANK0 ] unsigned short 
 11710 ;; Auto vars:     Size  Location     Type
 11711 ;;  Led             1    4[COMMON] unsigned char 
 11712 ;; Return value:  Size  Location     Type
 11713 ;;                  1    wreg      void 
 11714 ;; Registers used:
 11715 ;;		wreg, fsr0l, fsr0h, status,2, status,0
 11716 ;; Tracked objects:
 11717 ;;		On entry : 0/0
 11718 ;;		On exit  : 0/0
 11719 ;;		Unchanged: 0/0
 11720 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11721 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11722 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11723 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11724 ;;      Totals:         1       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11725 ;;Total ram usage:        5 bytes
 11726 ;; Hardware stack levels used:    1
 11727 ;; Hardware stack levels required when called:    2
 11728 ;; This function calls:
 11729 ;;		Nothing
 11730 ;; This function is called by:
 11731 ;;		_SetLedBehavSts
 11732 ;; This function uses a non-reentrant model
 11733 ;;
 11734                           
 11735                           
 11736                           ;psect for function _Led_SetLedBlinkTime
 11737  0A4D                     _Led_SetLedBlinkTime:	
 11738                           
 11739                           ;incstack = 0
 11740                           ; Regs used in _Led_SetLedBlinkTime: [wreg-fsr0h+status,2+status,0]
 11741                           ;Led_SetLedBlinkTime@Led stored from wreg
 11742  0A4D  00F4               	movwf	Led_SetLedBlinkTime@Led
 11743                           
 11744                           ;led.c: 248: switch (Led)
 11745  0A4E  2A60               	goto	l3753
 11746  0A4F                     l3749:	
 11747                           ;led.c: 249: {
 11748                           ;led.c: 250: case 1u:
 11749                           
 11750                           
 11751                           ;led.c: 251: Led1Blink.LedOnTimeMs = OnTimeMs;
 11752  0A4F  0020               	movlb	0	; select bank0
 11753  0A50  0821               	movf	Led_SetLedBlinkTime@OnTimeMs+1,w
 11754  0A51  0021               	movlb	1	; select bank1
 11755  0A52  00D6               	movwf	((_Led1Blink+1)^(0+128)+4)
 11756  0A53  0020               	movlb	0	; select bank0
 11757  0A54  0820               	movf	Led_SetLedBlinkTime@OnTimeMs,w
 11758  0A55  0021               	movlb	1	; select bank1
 11759  0A56  00D5               	movwf	(_Led1Blink^(0+128)+4)
 11760                           
 11761                           ;led.c: 252: Led1Blink.LedOffTimeMs = OffTimeMs;
 11762  0A57  0020               	movlb	0	; select bank0
 11763  0A58  0823               	movf	Led_SetLedBlinkTime@OffTimeMs+1,w
 11764  0A59  0021               	movlb	1	; select bank1
 11765  0A5A  00D8               	movwf	((_Led1Blink+1)^(0+128)+6)
 11766  0A5B  0020               	movlb	0	; select bank0
 11767  0A5C  0822               	movf	Led_SetLedBlinkTime@OffTimeMs,w
 11768  0A5D  0021               	movlb	1	; select bank1
 11769  0A5E  00D7               	movwf	(_Led1Blink^(0+128)+6)
 11770                           
 11771                           ;led.c: 257: }
 11772                           
 11773                           ;led.c: 256: break;
 11774                           
 11775                           ;led.c: 255: default:
 11776                           
 11777                           ;led.c: 253: break;
 11778  0A5F  0008               	return
 11779  0A60                     l3753:	
 11780  0A60  0874               	movf	Led_SetLedBlinkTime@Led,w
 11781                           
 11782                           ; Switch size 1, requested type "space"
 11783                           ; Number of cases is 1, Range of values is 1 to 1
 11784                           ; switch strategies available:
 11785                           ; Name         Instructions Cycles
 11786                           ; simple_byte            4     3 (average)
 11787                           ; direct_byte           11     9 (fixed)
 11788                           ; jumptable            263     9 (fixed)
 11789                           ;	Chosen strategy is simple_byte
 11790  0A61  3A01               	xorlw	1	; case 1
 11791  0A62  1903               	skipnz
 11792  0A63  2A4F               	goto	l3749
 11793  0A64  2A65               	goto	l633
 11794  0A65                     l633:	
 11795  0A65  0008               	return
 11796  0A66                     __end_of_Led_SetLedBlinkTime:	
 11797                           
 11798                           	psect	text56
 11799  092C                     __ptext56:	
 11800 ;; *************** function _LowPowerMode *****************
 11801 ;; Defined at:
 11802 ;;		line 161 in file "../../../Framework/MercuryFwk/Source/c/03_Sml/02_Ssl/std_ser.c"
 11803 ;; Parameters:    Size  Location     Type
 11804 ;;		None
 11805 ;; Auto vars:     Size  Location     Type
 11806 ;;		None
 11807 ;; Return value:  Size  Location     Type
 11808 ;;                  1    wreg      void 
 11809 ;; Registers used:
 11810 ;;		wreg, status,2, status,0, pclath, cstack
 11811 ;; Tracked objects:
 11812 ;;		On entry : 0/0
 11813 ;;		On exit  : 0/0
 11814 ;;		Unchanged: 0/0
 11815 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11816 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11817 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11818 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11819 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11820 ;;Total ram usage:        0 bytes
 11821 ;; Hardware stack levels used:    1
 11822 ;; Hardware stack levels required when called:    3
 11823 ;; This function calls:
 11824 ;;		_Mcu_SetWdgSts
 11825 ;; This function is called by:
 11826 ;;		_StdS_ManageStdServices
 11827 ;; This function uses a non-reentrant model
 11828 ;;
 11829                           
 11830                           
 11831                           ;psect for function _LowPowerMode
 11832  092C                     _LowPowerMode:	
 11833                           
 11834                           ;std_ser.c: 164: LATA = 0x00;
 11835                           
 11836                           ;incstack = 0
 11837                           ; Regs used in _LowPowerMode: [wreg+status,2+status,0+pclath+cstack]
 11838  092C  0022               	movlb	2	; select bank2
 11839  092D  018C               	clrf	12	;volatile
 11840                           
 11841                           ;std_ser.c: 168: LATC = 0x00;
 11842  092E  018E               	clrf	14	;volatile
 11843                           
 11844                           ;std_ser.c: 170: Mcu_SetWdgSts(((UINT8)(0)));
 11845  092F  3000               	movlw	0
 11846  0930  3188  20CE  3189   	fcall	_Mcu_SetWdgSts
 11847  0933  0063               	sleep	;# 
 11848                           
 11849                           ;std_ser.c: 177: Mcu_SetWdgSts(((UINT8)(1)));
 11850  0934  3001               	movlw	1
 11851  0935  3188  20CE         	fcall	_Mcu_SetWdgSts
 11852  0937  0008               	return
 11853  0938                     __end_of_LowPowerMode:	
 11854                           
 11855                           	psect	text57
 11856  08CE                     __ptext57:	
 11857 ;; *************** function _Mcu_SetWdgSts *****************
 11858 ;; Defined at:
 11859 ;;		line 237 in file "../../../Framework/MercuryFwk/Source/c/01_Hal/02_Drv/mcu_drv.c"
 11860 ;; Parameters:    Size  Location     Type
 11861 ;;  WdgSts          1    wreg     unsigned char 
 11862 ;; Auto vars:     Size  Location     Type
 11863 ;;  WdgSts          1    4[COMMON] unsigned char 
 11864 ;; Return value:  Size  Location     Type
 11865 ;;                  1    wreg      void 
 11866 ;; Registers used:
 11867 ;;		wreg, status,0
 11868 ;; Tracked objects:
 11869 ;;		On entry : 0/0
 11870 ;;		On exit  : 0/0
 11871 ;;		Unchanged: 0/0
 11872 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11873 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11874 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11875 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11876 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11877 ;;Total ram usage:        1 bytes
 11878 ;; Hardware stack levels used:    1
 11879 ;; Hardware stack levels required when called:    2
 11880 ;; This function calls:
 11881 ;;		Nothing
 11882 ;; This function is called by:
 11883 ;;		_LowPowerMode
 11884 ;;		_Wdg_MainTask
 11885 ;; This function uses a non-reentrant model
 11886 ;;
 11887                           
 11888                           
 11889                           ;psect for function _Mcu_SetWdgSts
 11890  08CE                     _Mcu_SetWdgSts:	
 11891                           
 11892                           ;incstack = 0
 11893                           ; Regs used in _Mcu_SetWdgSts: [wreg+status,0]
 11894                           ;Mcu_SetWdgSts@WdgSts stored from wreg
 11895  08CE  00F4               	movwf	Mcu_SetWdgSts@WdgSts
 11896                           
 11897                           ;mcu_drv.c: 240: WDTCONbits.SWDTEN = WdgSts;
 11898  08CF  0C74               	rrf	Mcu_SetWdgSts@WdgSts,w
 11899  08D0  0021               	movlb	1	; select bank1
 11900  08D1  1C03               	skipc
 11901  08D2  1017               	bcf	23,0	;volatile
 11902  08D3  1803               	skipnc
 11903  08D4  1417               	bsf	23,0	;volatile
 11904  08D5  0008               	return
 11905  08D6                     __end_of_Mcu_SetWdgSts:	
 11906                           
 11907                           	psect	text58
 11908  0A34                     __ptext58:	
 11909 ;; *************** function _GetDieTemperature *****************
 11910 ;; Defined at:
 11911 ;;		line 188 in file "../../../Framework/MercuryFwk/Source/c/03_Sml/02_Ssl/std_ser.c"
 11912 ;; Parameters:    Size  Location     Type
 11913 ;;		None
 11914 ;; Auto vars:     Size  Location     Type
 11915 ;;  DieTempRes      2    5[BANK0 ] unsigned short 
 11916 ;; Return value:  Size  Location     Type
 11917 ;;                  2    3[BANK0 ] unsigned short 
 11918 ;; Registers used:
 11919 ;;		wreg, status,2, status,0, pclath, cstack
 11920 ;; Tracked objects:
 11921 ;;		On entry : 0/0
 11922 ;;		On exit  : 0/0
 11923 ;;		Unchanged: 0/0
 11924 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11925 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11926 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11927 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11928 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11929 ;;Total ram usage:        4 bytes
 11930 ;; Hardware stack levels used:    1
 11931 ;; Hardware stack levels required when called:    3
 11932 ;; This function calls:
 11933 ;;		_Adc_GetConvResult
 11934 ;;		_Adc_GetConvSts
 11935 ;;		_Adc_SelectChannel
 11936 ;;		_Adc_StartConversion
 11937 ;; This function is called by:
 11938 ;;		_StdS_ManageStdServices
 11939 ;; This function uses a non-reentrant model
 11940 ;;
 11941                           
 11942                           
 11943                           ;psect for function _GetDieTemperature
 11944  0A34                     _GetDieTemperature:	
 11945                           
 11946                           ;std_ser.c: 190: UINT16 DieTempRes;
 11947                           ;std_ser.c: 193: Adc_SelectChannel(((UINT8)(29)));
 11948                           
 11949                           ;incstack = 0
 11950                           ; Regs used in _GetDieTemperature: [wreg+status,2+status,0+pclath+cstack]
 11951  0A34  301D               	movlw	29
 11952  0A35  3189  2120  318A   	fcall	_Adc_SelectChannel
 11953                           
 11954                           ;std_ser.c: 195: Adc_StartConversion();
 11955  0A38  3188  20B1  318A   	fcall	_Adc_StartConversion
 11956  0A3B                     l3865:	
 11957                           ;std_ser.c: 197: while (Adc_GetConvSts() == AdcConvInProgress);
 11958                           
 11959  0A3B  3188  20B7  318A   	fcall	_Adc_GetConvSts
 11960  0A3E  3A00               	xorlw	0
 11961  0A3F  1903               	skipnz
 11962  0A40  2A3B               	goto	l3865
 11963                           
 11964                           ;std_ser.c: 199: DieTempRes = Adc_GetConvResult();
 11965  0A41  3189  2160         	fcall	_Adc_GetConvResult
 11966  0A43  0875               	movf	?_Adc_GetConvResult+1,w
 11967  0A44  0020               	movlb	0	; select bank0
 11968  0A45  00A6               	movwf	GetDieTemperature@DieTempRes+1
 11969  0A46  0874               	movf	?_Adc_GetConvResult,w
 11970  0A47  00A5               	movwf	GetDieTemperature@DieTempRes
 11971                           
 11972                           ;std_ser.c: 201: return DieTempRes;
 11973  0A48  0826               	movf	GetDieTemperature@DieTempRes+1,w
 11974  0A49  00A4               	movwf	?_GetDieTemperature+1
 11975  0A4A  0825               	movf	GetDieTemperature@DieTempRes,w
 11976  0A4B  00A3               	movwf	?_GetDieTemperature
 11977  0A4C  0008               	return
 11978  0A4D                     __end_of_GetDieTemperature:	
 11979                           
 11980                           	psect	text59
 11981  08B1                     __ptext59:	
 11982 ;; *************** function _Adc_StartConversion *****************
 11983 ;; Defined at:
 11984 ;;		line 144 in file "../../../Framework/MercuryFwk/Source/c/01_Hal/02_Drv/adc_drv.c"
 11985 ;; Parameters:    Size  Location     Type
 11986 ;;		None
 11987 ;; Auto vars:     Size  Location     Type
 11988 ;;		None
 11989 ;; Return value:  Size  Location     Type
 11990 ;;                  1    wreg      void 
 11991 ;; Registers used:
 11992 ;;		None
 11993 ;; Tracked objects:
 11994 ;;		On entry : 0/0
 11995 ;;		On exit  : 0/0
 11996 ;;		Unchanged: 0/0
 11997 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11998 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11999 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12000 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12001 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12002 ;;Total ram usage:        0 bytes
 12003 ;; Hardware stack levels used:    1
 12004 ;; Hardware stack levels required when called:    2
 12005 ;; This function calls:
 12006 ;;		Nothing
 12007 ;; This function is called by:
 12008 ;;		_GetDieTemperature
 12009 ;; This function uses a non-reentrant model
 12010 ;;
 12011                           
 12012                           
 12013                           ;psect for function _Adc_StartConversion
 12014  08B1                     _Adc_StartConversion:	
 12015                           
 12016                           ;adc_drv.c: 147: ADCON0bits.GO_nDONE = ((UINT8)(1));
 12017                           
 12018                           ;incstack = 0
 12019                           ; Regs used in _Adc_StartConversion: []
 12020  08B1  0021               	movlb	1	; select bank1
 12021  08B2  149D               	bsf	29,1	;volatile
 12022  08B3  0008               	return
 12023  08B4                     __end_of_Adc_StartConversion:	
 12024                           
 12025                           	psect	text60
 12026  0920                     __ptext60:	
 12027 ;; *************** function _Adc_SelectChannel *****************
 12028 ;; Defined at:
 12029 ;;		line 130 in file "../../../Framework/MercuryFwk/Source/c/01_Hal/02_Drv/adc_drv.c"
 12030 ;; Parameters:    Size  Location     Type
 12031 ;;  SelCh           1    wreg     unsigned char 
 12032 ;; Auto vars:     Size  Location     Type
 12033 ;;  SelCh           1    5[COMMON] unsigned char 
 12034 ;; Return value:  Size  Location     Type
 12035 ;;                  1    wreg      void 
 12036 ;; Registers used:
 12037 ;;		wreg, status,2, status,0
 12038 ;; Tracked objects:
 12039 ;;		On entry : 0/0
 12040 ;;		On exit  : 0/0
 12041 ;;		Unchanged: 0/0
 12042 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12043 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12044 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12045 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12046 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12047 ;;Total ram usage:        2 bytes
 12048 ;; Hardware stack levels used:    1
 12049 ;; Hardware stack levels required when called:    2
 12050 ;; This function calls:
 12051 ;;		Nothing
 12052 ;; This function is called by:
 12053 ;;		_GetDieTemperature
 12054 ;; This function uses a non-reentrant model
 12055 ;;
 12056                           
 12057                           
 12058                           ;psect for function _Adc_SelectChannel
 12059  0920                     _Adc_SelectChannel:	
 12060                           
 12061                           ;incstack = 0
 12062                           ; Regs used in _Adc_SelectChannel: [wreg+status,2+status,0]
 12063                           ;Adc_SelectChannel@SelCh stored from wreg
 12064  0920  00F5               	movwf	Adc_SelectChannel@SelCh
 12065                           
 12066                           ;adc_drv.c: 133: ADCON0bits.CHS = SelCh;
 12067  0921  0875               	movf	Adc_SelectChannel@SelCh,w
 12068  0922  00F4               	movwf	??_Adc_SelectChannel
 12069  0923  0DF4               	rlf	??_Adc_SelectChannel,f
 12070  0924  0DF4               	rlf	??_Adc_SelectChannel,f
 12071  0925  0021               	movlb	1	; select bank1
 12072  0926  081D               	movf	29,w	;volatile
 12073  0927  0674               	xorwf	??_Adc_SelectChannel,w
 12074  0928  3983               	andlw	-125
 12075  0929  0674               	xorwf	??_Adc_SelectChannel,w
 12076  092A  009D               	movwf	29	;volatile
 12077  092B  0008               	return
 12078  092C                     __end_of_Adc_SelectChannel:	
 12079                           
 12080                           	psect	text61
 12081  08B7                     __ptext61:	
 12082 ;; *************** function _Adc_GetConvSts *****************
 12083 ;; Defined at:
 12084 ;;		line 158 in file "../../../Framework/MercuryFwk/Source/c/01_Hal/02_Drv/adc_drv.c"
 12085 ;; Parameters:    Size  Location     Type
 12086 ;;		None
 12087 ;; Auto vars:     Size  Location     Type
 12088 ;;		None
 12089 ;; Return value:  Size  Location     Type
 12090 ;;                  1    wreg      enum E3378
 12091 ;; Registers used:
 12092 ;;		wreg, status,2, status,0
 12093 ;; Tracked objects:
 12094 ;;		On entry : 0/0
 12095 ;;		On exit  : 0/0
 12096 ;;		Unchanged: 0/0
 12097 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12098 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12099 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12100 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12101 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12102 ;;Total ram usage:        0 bytes
 12103 ;; Hardware stack levels used:    1
 12104 ;; Hardware stack levels required when called:    2
 12105 ;; This function calls:
 12106 ;;		Nothing
 12107 ;; This function is called by:
 12108 ;;		_GetDieTemperature
 12109 ;; This function uses a non-reentrant model
 12110 ;;
 12111                           
 12112                           
 12113                           ;psect for function _Adc_GetConvSts
 12114  08B7                     _Adc_GetConvSts:	
 12115                           
 12116                           ;adc_drv.c: 161: return ((AdcConvStsType)(ADCON0bits.GO_nDONE));
 12117                           
 12118                           ;incstack = 0
 12119                           ; Regs used in _Adc_GetConvSts: [wreg+status,2+status,0]
 12120  08B7  0021               	movlb	1	; select bank1
 12121  08B8  0C1D               	rrf	29,w	;volatile
 12122  08B9  3901               	andlw	1
 12123  08BA  0008               	return
 12124  08BB                     __end_of_Adc_GetConvSts:	
 12125                           
 12126                           	psect	text62
 12127  0960                     __ptext62:	
 12128 ;; *************** function _Adc_GetConvResult *****************
 12129 ;; Defined at:
 12130 ;;		line 172 in file "../../../Framework/MercuryFwk/Source/c/01_Hal/02_Drv/adc_drv.c"
 12131 ;; Parameters:    Size  Location     Type
 12132 ;;		None
 12133 ;; Auto vars:     Size  Location     Type
 12134 ;;  AdcResult       2    1[BANK0 ] unsigned short 
 12135 ;; Return value:  Size  Location     Type
 12136 ;;                  2    4[COMMON] unsigned short 
 12137 ;; Registers used:
 12138 ;;		wreg, status,2, status,0
 12139 ;; Tracked objects:
 12140 ;;		On entry : 0/0
 12141 ;;		On exit  : 0/0
 12142 ;;		Unchanged: 0/0
 12143 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12144 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12145 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12146 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12147 ;;      Totals:         2       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12148 ;;Total ram usage:        5 bytes
 12149 ;; Hardware stack levels used:    1
 12150 ;; Hardware stack levels required when called:    2
 12151 ;; This function calls:
 12152 ;;		Nothing
 12153 ;; This function is called by:
 12154 ;;		_GetDieTemperature
 12155 ;; This function uses a non-reentrant model
 12156 ;;
 12157                           
 12158                           
 12159                           ;psect for function _Adc_GetConvResult
 12160  0960                     _Adc_GetConvResult:	
 12161                           
 12162                           ;adc_drv.c: 174: UINT16 AdcResult;
 12163                           ;adc_drv.c: 177: AdcResult = (((ADRESH & 0x03) << 8) | ADRESL);
 12164                           
 12165                           ;incstack = 0
 12166                           ; Regs used in _Adc_GetConvResult: [wreg+status,2+status,0]
 12167  0960  3003               	movlw	3
 12168  0961  0021               	movlb	1	; select bank1
 12169  0962  051C               	andwf	28,w	;volatile
 12170  0963  0020               	movlb	0	; select bank0
 12171  0964  00A0               	movwf	??_Adc_GetConvResult
 12172  0965  0820               	movf	??_Adc_GetConvResult,w
 12173  0966  00A2               	movwf	Adc_GetConvResult@AdcResult+1
 12174  0967  0021               	movlb	1	; select bank1
 12175  0968  081B               	movf	27,w	;volatile
 12176  0969  0020               	movlb	0	; select bank0
 12177  096A  00A1               	movwf	Adc_GetConvResult@AdcResult
 12178                           
 12179                           ;adc_drv.c: 179: return AdcResult;
 12180  096B  0822               	movf	Adc_GetConvResult@AdcResult+1,w
 12181  096C  00F5               	movwf	?_Adc_GetConvResult+1
 12182  096D  0821               	movf	Adc_GetConvResult@AdcResult,w
 12183  096E  00F4               	movwf	?_Adc_GetConvResult
 12184  096F  0008               	return
 12185  0970                     __end_of_Adc_GetConvResult:	
 12186                           
 12187                           	psect	text63
 12188  0AFA                     __ptext63:	
 12189 ;; *************** function _GenerateEvt *****************
 12190 ;; Defined at:
 12191 ;;		line 73 in file "../../../Framework/MercuryFwk/Source/c/02_Osl/os_ser.c"
 12192 ;; Parameters:    Size  Location     Type
 12193 ;;  Event           1    wreg     PTR struct _EventStructu
 12194 ;;		 -> Relay2Set(10), Relay1Set(10), I2cReplyPacketReady(2), I2cWriteRequest(2), 
 12195 ;;		 -> I2cSetAddress(2), I2cNewTxNotification(2), I2cNewPacketNotification(2), 
 12196 ;; Auto vars:     Size  Location     Type
 12197 ;;  Event           1    1[BANK0 ] PTR struct _EventStructu
 12198 ;;		 -> Relay2Set(10), Relay1Set(10), I2cReplyPacketReady(2), I2cWriteRequest(2), 
 12199 ;;		 -> I2cSetAddress(2), I2cNewTxNotification(2), I2cNewPacketNotification(2), 
 12200 ;;  EventStatus     1    0[BANK0 ] enum E3356
 12201 ;; Return value:  Size  Location     Type
 12202 ;;                  1    wreg      enum E3352
 12203 ;; Registers used:
 12204 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 12205 ;; Tracked objects:
 12206 ;;		On entry : 0/0
 12207 ;;		On exit  : 0/0
 12208 ;;		Unchanged: 0/0
 12209 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12210 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12211 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12212 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12213 ;;      Totals:         1       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12214 ;;Total ram usage:        3 bytes
 12215 ;; Hardware stack levels used:    1
 12216 ;; Hardware stack levels required when called:    2
 12217 ;; This function calls:
 12218 ;;		Nothing
 12219 ;; This function is called by:
 12220 ;;		_I2c_DataReceiveSm
 12221 ;;		_I2cSlv_I2cDrvHandle
 12222 ;;		_StdS_ManageStdServices
 12223 ;;		_ManageProtocol
 12224 ;;		_AppSm
 12225 ;; This function uses a non-reentrant model
 12226 ;;
 12227                           
 12228                           
 12229                           ;psect for function _GenerateEvt
 12230  0AFA                     _GenerateEvt:	
 12231                           
 12232                           ;incstack = 0
 12233                           ; Regs used in _GenerateEvt: [wreg+fsr1l+fsr1h+status,2+status,0]
 12234                           ;GenerateEvt@Event stored from wreg
 12235  0AFA  0020               	movlb	0	; select bank0
 12236  0AFB  00A1               	movwf	GenerateEvt@Event
 12237                           
 12238                           ;os_ser.c: 76: EventStatusType EventStatus = EventIdle;
 12239  0AFC  01A0               	clrf	GenerateEvt@EventStatus
 12240                           
 12241                           ;os_ser.c: 78: if ((Event->EventOptions != ((UINT8)(2))) && (Event->EventOptions != ((UI
      +                          NT8)(3))))
 12242  0AFD  0821               	movf	GenerateEvt@Event,w
 12243  0AFE  0086               	movwf	6
 12244  0AFF  0187               	clrf	7
 12245  0B00  3002               	movlw	2
 12246  0B01  0601               	xorwf	1,w
 12247  0B02  1903               	btfsc	3,2
 12248  0B03  2B17               	goto	l3821
 12249  0B04  0821               	movf	GenerateEvt@Event,w
 12250  0B05  0086               	movwf	6
 12251  0B06  0187               	clrf	7
 12252  0B07  3003               	movlw	3
 12253  0B08  0601               	xorwf	1,w
 12254  0B09  1903               	btfsc	3,2
 12255  0B0A  2B17               	goto	l3821
 12256                           
 12257                           ;os_ser.c: 79: {
 12258                           ;os_ser.c: 81: Event->EventStatus = EventSent;
 12259  0B0B  3002               	movlw	2
 12260  0B0C  00F4               	movwf	??_GenerateEvt
 12261  0B0D  0A21               	incf	GenerateEvt@Event,w
 12262  0B0E  0086               	movwf	6
 12263  0B0F  0187               	clrf	7
 12264  0B10  0874               	movf	??_GenerateEvt,w
 12265  0B11  0081               	movwf	1
 12266                           
 12267                           ;os_ser.c: 83: EventStatus = EventSent;
 12268  0B12  3002               	movlw	2
 12269  0B13  00F4               	movwf	??_GenerateEvt
 12270  0B14  0874               	movf	??_GenerateEvt,w
 12271  0B15  00A0               	movwf	GenerateEvt@EventStatus
 12272                           
 12273                           ;os_ser.c: 84: }
 12274  0B16  0008               	return
 12275  0B17                     l3821:	
 12276                           
 12277                           ;os_ser.c: 85: else
 12278                           ;os_ser.c: 86: {
 12279                           ;os_ser.c: 88: EventStatus = EventNotSent;
 12280  0B17  3003               	movlw	3
 12281  0B18  00F4               	movwf	??_GenerateEvt
 12282  0B19  0874               	movf	??_GenerateEvt,w
 12283  0B1A  00A0               	movwf	GenerateEvt@EventStatus
 12284  0B1B  0008               	return
 12285  0B1C                     __end_of_GenerateEvt:	
 12286                           ;os_ser.c: 89: }
 12287                           ;os_ser.c: 92: return(EventStatus);
 12288                           ;	Return value of _GenerateEvt is never used
 12289                           
 12290                           
 12291                           	psect	text64
 12292  09B1                     __ptext64:	
 12293 ;; *************** function _ControlLedDirect *****************
 12294 ;; Defined at:
 12295 ;;		line 122 in file "../../../Framework/MercuryFwk/Source/c/03_Sml/02_Ssl/std_ser.c"
 12296 ;; Parameters:    Size  Location     Type
 12297 ;;		None
 12298 ;; Auto vars:     Size  Location     Type
 12299 ;;		None
 12300 ;; Return value:  Size  Location     Type
 12301 ;;                  1    wreg      void 
 12302 ;; Registers used:
 12303 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
 12304 ;; Tracked objects:
 12305 ;;		On entry : 0/0
 12306 ;;		On exit  : 0/0
 12307 ;;		Unchanged: 0/0
 12308 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12309 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12310 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12311 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12312 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12313 ;;Total ram usage:        0 bytes
 12314 ;; Hardware stack levels used:    1
 12315 ;; Hardware stack levels required when called:    3
 12316 ;; This function calls:
 12317 ;;		_Led_SetLedStatus
 12318 ;; This function is called by:
 12319 ;;		_StdS_ManageStdServices
 12320 ;; This function uses a non-reentrant model
 12321 ;;
 12322                           
 12323                           
 12324                           ;psect for function _ControlLedDirect
 12325  09B1                     _ControlLedDirect:	
 12326                           
 12327                           ;std_ser.c: 125: if (LedBehaviourSts == ((UINT8)(3)))
 12328                           
 12329                           ;incstack = 0
 12330                           ; Regs used in _ControlLedDirect: [wreg-fsr0h+status,2+status,0+pclath+cstack]
 12331  09B1  3003               	movlw	3
 12332  09B2  0020               	movlb	0	; select bank0
 12333  09B3  0668               	xorwf	_LedBehaviourSts,w
 12334  09B4  1D03               	btfss	3,2
 12335  09B5  0008               	return
 12336                           
 12337                           ;std_ser.c: 126: {
 12338                           ;std_ser.c: 128: if (CmdBuffer[((UINT8)(1))] == ((UINT8)(1)))
 12339  09B6  0023               	movlb	3	; select bank3
 12340  09B7  0321               	decf	(_CmdBuffer^(0+384)+1),w
 12341  09B8  1D03               	btfss	3,2
 12342  09B9  29C0               	goto	l3859
 12343                           
 12344                           ;std_ser.c: 129: {
 12345                           ;std_ser.c: 130: Led_SetLedStatus(1u,LED_STS_ON);
 12346  09BA  01F4               	clrf	Led_SetLedStatus@LedSts
 12347  09BB  0AF4               	incf	Led_SetLedStatus@LedSts,f
 12348  09BC  3001               	movlw	1
 12349  09BD  3189  2150         	fcall	_Led_SetLedStatus
 12350                           
 12351                           ;std_ser.c: 131: }
 12352  09BF  0008               	return
 12353  09C0                     l3859:	
 12354                           
 12355                           ;std_ser.c: 132: else
 12356                           ;std_ser.c: 133: {
 12357                           ;std_ser.c: 134: Led_SetLedStatus(1u,LED_STS_OFF);
 12358  09C0  01F4               	clrf	Led_SetLedStatus@LedSts
 12359  09C1  3001               	movlw	1
 12360  09C2  3189  2150         	fcall	_Led_SetLedStatus
 12361  09C4  0008               	return
 12362  09C5                     __end_of_ControlLedDirect:	
 12363                           
 12364                           	psect	text65
 12365  0950                     __ptext65:	
 12366 ;; *************** function _Led_SetLedStatus *****************
 12367 ;; Defined at:
 12368 ;;		line 221 in file "../../../Framework/MercuryFwk/Source/c/03_Sml/02_Ssl/led.c"
 12369 ;; Parameters:    Size  Location     Type
 12370 ;;  Led             1    wreg     unsigned char 
 12371 ;;  LedSts          1    4[COMMON] unsigned char 
 12372 ;; Auto vars:     Size  Location     Type
 12373 ;;  Led             1    0[BANK0 ] unsigned char 
 12374 ;; Return value:  Size  Location     Type
 12375 ;;                  1    wreg      void 
 12376 ;; Registers used:
 12377 ;;		wreg, fsr0l, fsr0h, status,2, status,0
 12378 ;; Tracked objects:
 12379 ;;		On entry : 0/0
 12380 ;;		On exit  : 0/0
 12381 ;;		Unchanged: 0/0
 12382 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12383 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12384 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12385 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12386 ;;      Totals:         2       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12387 ;;Total ram usage:        3 bytes
 12388 ;; Hardware stack levels used:    1
 12389 ;; Hardware stack levels required when called:    2
 12390 ;; This function calls:
 12391 ;;		Nothing
 12392 ;; This function is called by:
 12393 ;;		_LedPulseStateMachine
 12394 ;;		_I2cSlv_I2cDrvHandle
 12395 ;;		_Led_InitSeq
 12396 ;;		_SetLedBehavSts
 12397 ;;		_ControlLedDirect
 12398 ;; This function uses a non-reentrant model
 12399 ;;
 12400                           
 12401                           
 12402                           ;psect for function _Led_SetLedStatus
 12403  0950                     _Led_SetLedStatus:	
 12404                           
 12405                           ;incstack = 0
 12406                           ; Regs used in _Led_SetLedStatus: [wreg-fsr0h+status,2+status,0]
 12407                           ;Led_SetLedStatus@Led stored from wreg
 12408  0950  0020               	movlb	0	; select bank0
 12409  0951  00A0               	movwf	Led_SetLedStatus@Led
 12410                           
 12411                           ;led.c: 224: switch (Led)
 12412  0952  2959               	goto	l3745
 12413  0953                     l3741:	
 12414                           ;led.c: 225: {
 12415                           ;led.c: 226: case 1u:
 12416                           
 12417                           
 12418                           ;led.c: 227: Led1Sts = LedSts;
 12419  0953  0874               	movf	Led_SetLedStatus@LedSts,w
 12420  0954  00F5               	movwf	??_Led_SetLedStatus
 12421  0955  0875               	movf	??_Led_SetLedStatus,w
 12422  0956  0021               	movlb	1	; select bank1
 12423  0957  00E8               	movwf	_Led1Sts^(0+128)
 12424                           
 12425                           ;led.c: 232: }
 12426                           
 12427                           ;led.c: 231: break;
 12428                           
 12429                           ;led.c: 230: default:
 12430                           
 12431                           ;led.c: 228: break;
 12432  0958  0008               	return
 12433  0959                     l3745:	
 12434  0959  0020               	movlb	0	; select bank0
 12435  095A  0820               	movf	Led_SetLedStatus@Led,w
 12436                           
 12437                           ; Switch size 1, requested type "space"
 12438                           ; Number of cases is 1, Range of values is 1 to 1
 12439                           ; switch strategies available:
 12440                           ; Name         Instructions Cycles
 12441                           ; simple_byte            4     3 (average)
 12442                           ; direct_byte           11     9 (fixed)
 12443                           ; jumptable            263     9 (fixed)
 12444                           ;	Chosen strategy is simple_byte
 12445  095B  3A01               	xorlw	1	; case 1
 12446  095C  1903               	skipnz
 12447  095D  2953               	goto	l3741
 12448  095E  295F               	goto	l626
 12449  095F                     l626:	
 12450  095F  0008               	return
 12451  0960                     __end_of_Led_SetLedStatus:	
 12452                           
 12453                           	psect	text66
 12454  08AE                     __ptext66:	
 12455 ;; *************** function _BoardReset *****************
 12456 ;; Defined at:
 12457 ;;		line 147 in file "../../../Framework/MercuryFwk/Source/c/03_Sml/02_Ssl/std_ser.c"
 12458 ;; Parameters:    Size  Location     Type
 12459 ;;		None
 12460 ;; Auto vars:     Size  Location     Type
 12461 ;;		None
 12462 ;; Return value:  Size  Location     Type
 12463 ;;                  1    wreg      void 
 12464 ;; Registers used:
 12465 ;;		status,2, status,0, pclath, cstack
 12466 ;; Tracked objects:
 12467 ;;		On entry : 0/0
 12468 ;;		On exit  : 0/0
 12469 ;;		Unchanged: 0/0
 12470 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12471 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12472 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12473 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12474 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12475 ;;Total ram usage:        0 bytes
 12476 ;; Hardware stack levels used:    1
 12477 ;; Hardware stack levels required when called:    3
 12478 ;; This function calls:
 12479 ;;		_Mcu_Reset
 12480 ;; This function is called by:
 12481 ;;		_StdS_ManageStdServices
 12482 ;; This function uses a non-reentrant model
 12483 ;;
 12484                           
 12485                           
 12486                           ;psect for function _BoardReset
 12487  08AE                     _BoardReset:	
 12488                           
 12489                           ;std_ser.c: 150: Mcu_Reset();
 12490                           
 12491                           ;incstack = 0
 12492                           ; Regs used in _BoardReset: [status,2+status,0+pclath+cstack]
 12493  08AE  3188  20AC         	fcall	_Mcu_Reset
 12494  08B0  0008               	return
 12495  08B1                     __end_of_BoardReset:	
 12496                           
 12497                           	psect	text67
 12498  08AC                     __ptext67:	
 12499 ;; *************** function _Mcu_Reset *****************
 12500 ;; Defined at:
 12501 ;;		line 293 in file "../../../Framework/MercuryFwk/Source/c/01_Hal/02_Drv/mcu_drv.c"
 12502 ;; Parameters:    Size  Location     Type
 12503 ;;		None
 12504 ;; Auto vars:     Size  Location     Type
 12505 ;;		None
 12506 ;; Return value:  Size  Location     Type
 12507 ;;                  1    wreg      void 
 12508 ;; Registers used:
 12509 ;;		None
 12510 ;; Tracked objects:
 12511 ;;		On entry : 0/0
 12512 ;;		On exit  : 0/0
 12513 ;;		Unchanged: 0/0
 12514 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12515 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12516 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12517 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12518 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12519 ;;Total ram usage:        0 bytes
 12520 ;; Hardware stack levels used:    1
 12521 ;; Hardware stack levels required when called:    2
 12522 ;; This function calls:
 12523 ;;		Nothing
 12524 ;; This function is called by:
 12525 ;;		_I2c_DataReceiveSm
 12526 ;;		_BoardReset
 12527 ;; This function uses a non-reentrant model
 12528 ;;
 12529                           
 12530                           
 12531                           ;psect for function _Mcu_Reset
 12532  08AC                     _Mcu_Reset:	
 12533                           
 12534                           ;incstack = 0
 12535                           ; Regs used in _Mcu_Reset: []
 12536  08AC  0001               	reset	;# 
 12537  08AD  0008               	return
 12538  08AE                     __end_of_Mcu_Reset:	
 12539                           
 12540                           	psect	text68
 12541  0AD9                     __ptext68:	
 12542 ;; *************** function _ReceiveEvt *****************
 12543 ;; Defined at:
 12544 ;;		line 103 in file "../../../Framework/MercuryFwk/Source/c/02_Osl/os_ser.c"
 12545 ;; Parameters:    Size  Location     Type
 12546 ;;  Event           1    wreg     PTR struct _EventStructu
 12547 ;;		 -> Relay2Set(10), Relay1Set(10), I2cReplyPacketReady(2), I2cWriteRequest(2), 
 12548 ;;		 -> I2cSetAddress(2), I2cNewTxNotification(2), I2cNewPacketNotification(2), 
 12549 ;; Auto vars:     Size  Location     Type
 12550 ;;  Event           1    5[COMMON] PTR struct _EventStructu
 12551 ;;		 -> Relay2Set(10), Relay1Set(10), I2cReplyPacketReady(2), I2cWriteRequest(2), 
 12552 ;;		 -> I2cSetAddress(2), I2cNewTxNotification(2), I2cNewPacketNotification(2), 
 12553 ;;  EventStatus     1    4[COMMON] enum E3356
 12554 ;; Return value:  Size  Location     Type
 12555 ;;                  1    wreg      enum E3352
 12556 ;; Registers used:
 12557 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 12558 ;; Tracked objects:
 12559 ;;		On entry : 0/0
 12560 ;;		On exit  : 0/0
 12561 ;;		Unchanged: 0/0
 12562 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12563 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12564 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12565 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12566 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12567 ;;Total ram usage:        2 bytes
 12568 ;; Hardware stack levels used:    1
 12569 ;; Hardware stack levels required when called:    2
 12570 ;; This function calls:
 12571 ;;		Nothing
 12572 ;; This function is called by:
 12573 ;;		_I2c_DataReceiveSm
 12574 ;;		_I2cSlv_I2cDrvHandle
 12575 ;;		_GenerateImpulse
 12576 ;;		_ManageProtocol
 12577 ;; This function uses a non-reentrant model
 12578 ;;
 12579                           
 12580                           
 12581                           ;psect for function _ReceiveEvt
 12582  0AD9                     _ReceiveEvt:	
 12583                           
 12584                           ;incstack = 0
 12585                           ; Regs used in _ReceiveEvt: [wreg+fsr1l+fsr1h+status,2+status,0]
 12586                           ;ReceiveEvt@Event stored from wreg
 12587  0AD9  00F5               	movwf	ReceiveEvt@Event
 12588                           
 12589                           ;os_ser.c: 106: EventStatusType EventStatus = EventIdle;
 12590  0ADA  01F4               	clrf	ReceiveEvt@EventStatus
 12591                           
 12592                           ;os_ser.c: 108: if ((Event->EventOptions != ((UINT8)(1))) && (Event->EventOptions != ((U
      +                          INT8)(3))))
 12593  0ADB  0875               	movf	ReceiveEvt@Event,w
 12594  0ADC  0086               	movwf	6
 12595  0ADD  0187               	clrf	7
 12596  0ADE  0301               	decf	1,w
 12597  0ADF  1903               	btfsc	3,2
 12598  0AE0  2AF8               	goto	l3917
 12599  0AE1  0875               	movf	ReceiveEvt@Event,w
 12600  0AE2  0086               	movwf	6
 12601  0AE3  0187               	clrf	7
 12602  0AE4  3003               	movlw	3
 12603  0AE5  0601               	xorwf	1,w
 12604  0AE6  1903               	btfsc	3,2
 12605  0AE7  2AF8               	goto	l3917
 12606                           
 12607                           ;os_ser.c: 109: {
 12608                           ;os_ser.c: 111: if (Event->EventStatus == EventSent)
 12609  0AE8  0A75               	incf	ReceiveEvt@Event,w
 12610  0AE9  0086               	movwf	6
 12611  0AEA  0187               	clrf	7
 12612  0AEB  3002               	movlw	2
 12613  0AEC  0601               	xorwf	1,w
 12614  0AED  1D03               	btfss	3,2
 12615  0AEE  2AF7               	goto	l3915
 12616                           
 12617                           ;os_ser.c: 112: {
 12618                           ;os_ser.c: 114: Event->EventStatus = EventReceived;
 12619  0AEF  0A75               	incf	ReceiveEvt@Event,w
 12620  0AF0  0086               	movwf	6
 12621  0AF1  0187               	clrf	7
 12622  0AF2  0181               	clrf	1
 12623  0AF3  0A81               	incf	1,f
 12624                           
 12625                           ;os_ser.c: 116: EventStatus = EventReceived;
 12626  0AF4  01F4               	clrf	ReceiveEvt@EventStatus
 12627  0AF5  0AF4               	incf	ReceiveEvt@EventStatus,f
 12628                           
 12629                           ;os_ser.c: 117: }
 12630  0AF6  2AF8               	goto	l3917
 12631  0AF7                     l3915:	
 12632                           
 12633                           ;os_ser.c: 118: else
 12634                           ;os_ser.c: 119: {
 12635                           ;os_ser.c: 121: EventStatus = EventIdle;
 12636  0AF7  01F4               	clrf	ReceiveEvt@EventStatus
 12637  0AF8                     l3917:	
 12638                           
 12639                           ;os_ser.c: 122: }
 12640                           ;os_ser.c: 123: }
 12641                           ;os_ser.c: 126: return(EventStatus);
 12642  0AF8  0874               	movf	ReceiveEvt@EventStatus,w
 12643  0AF9  0008               	return
 12644  0AFA                     __end_of_ReceiveEvt:	
 12645                           
 12646                           	psect	text69
 12647  07C4                     __ptext69:	
 12648 ;; *************** function _Adc_InitAdcModule *****************
 12649 ;; Defined at:
 12650 ;;		line 107 in file "../../../Framework/MercuryFwk/Source/c/01_Hal/02_Drv/adc_drv.c"
 12651 ;; Parameters:    Size  Location     Type
 12652 ;;  AdcConfig       1    wreg     PTR struct _AdcCfgType
 12653 ;;		 -> App_MainTask@AdcConfig(6), 
 12654 ;; Auto vars:     Size  Location     Type
 12655 ;;  AdcConfig       1    4[COMMON] PTR struct _AdcCfgType
 12656 ;;		 -> App_MainTask@AdcConfig(6), 
 12657 ;; Return value:  Size  Location     Type
 12658 ;;                  1    wreg      void 
 12659 ;; Registers used:
 12660 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 12661 ;; Tracked objects:
 12662 ;;		On entry : 0/0
 12663 ;;		On exit  : 0/0
 12664 ;;		Unchanged: 0/0
 12665 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12666 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12667 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12668 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12669 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12670 ;;Total ram usage:        1 bytes
 12671 ;; Hardware stack levels used:    1
 12672 ;; Hardware stack levels required when called:    2
 12673 ;; This function calls:
 12674 ;;		Nothing
 12675 ;; This function is called by:
 12676 ;;		_App_MainTask
 12677 ;; This function uses a non-reentrant model
 12678 ;;
 12679                           
 12680                           
 12681                           ;psect for function _Adc_InitAdcModule
 12682  07C4                     _Adc_InitAdcModule:	
 12683                           
 12684                           ;incstack = 0
 12685                           ; Regs used in _Adc_InitAdcModule: [wreg+fsr1l+fsr1h+status,2+status,0]
 12686                           ;Adc_InitAdcModule@AdcConfig stored from wreg
 12687  07C4  00F4               	movwf	Adc_InitAdcModule@AdcConfig
 12688                           
 12689                           ;adc_drv.c: 110: ADCON0bits.ADON = AdcConfig->AdcEnable;
 12690  07C5  0874               	movf	Adc_InitAdcModule@AdcConfig,w
 12691  07C6  0086               	movwf	6
 12692  07C7  0187               	clrf	7
 12693  07C8  0C01               	rrf	1,w
 12694  07C9  0021               	movlb	1	; select bank1
 12695  07CA  1C03               	skipc
 12696  07CB  101D               	bcf	29,0	;volatile
 12697  07CC  1803               	skipnc
 12698  07CD  141D               	bsf	29,0	;volatile
 12699                           
 12700                           ;adc_drv.c: 112: ADCON1bits.ADFM = AdcConfig->AdcResultFormat;
 12701  07CE  0A74               	incf	Adc_InitAdcModule@AdcConfig,w
 12702  07CF  0086               	movwf	6
 12703  07D0  0187               	clrf	7
 12704  07D1  0C01               	rrf	1,w
 12705  07D2  1C03               	skipc
 12706  07D3  139E               	bcf	30,7	;volatile
 12707  07D4  1803               	skipnc
 12708  07D5  179E               	bsf	30,7	;volatile
 12709                           
 12710                           ;adc_drv.c: 114: ADCON1bits.ADCS0 = AdcConfig->AdcConvClock;
 12711  07D6  0874               	movf	Adc_InitAdcModule@AdcConfig,w
 12712  07D7  3E02               	addlw	2
 12713  07D8  0086               	movwf	6
 12714  07D9  0187               	clrf	7
 12715  07DA  0C01               	rrf	1,w
 12716  07DB  1C03               	skipc
 12717  07DC  121E               	bcf	30,4	;volatile
 12718  07DD  1803               	skipnc
 12719  07DE  161E               	bsf	30,4	;volatile
 12720                           
 12721                           ;adc_drv.c: 116: ADCON1bits.ADNREF = AdcConfig->AdcNegRef;
 12722  07DF  0874               	movf	Adc_InitAdcModule@AdcConfig,w
 12723  07E0  3E03               	addlw	3
 12724  07E1  0086               	movwf	6
 12725  07E2  0187               	clrf	7
 12726  07E3  0C01               	rrf	1,w
 12727  07E4  1C03               	skipc
 12728  07E5  111E               	bcf	30,2	;volatile
 12729  07E6  1803               	skipnc
 12730  07E7  151E               	bsf	30,2	;volatile
 12731                           
 12732                           ;adc_drv.c: 117: ADCON1bits.ADPREF = AdcConfig->AdcPosRef;
 12733  07E8  0874               	movf	Adc_InitAdcModule@AdcConfig,w
 12734  07E9  3E04               	addlw	4
 12735  07EA  0086               	movwf	6
 12736  07EB  0187               	clrf	7
 12737  07EC  081E               	movf	30,w	;volatile
 12738  07ED  0601               	xorwf	1,w
 12739  07EE  39FC               	andlw	-4
 12740  07EF  0601               	xorwf	1,w
 12741  07F0  009E               	movwf	30	;volatile
 12742                           
 12743                           ;adc_drv.c: 119: PIE1bits.ADIE = AdcConfig->AdcIntEnabled;
 12744  07F1  0874               	movf	Adc_InitAdcModule@AdcConfig,w
 12745  07F2  3E05               	addlw	5
 12746  07F3  0086               	movwf	6
 12747  07F4  0187               	clrf	7
 12748  07F5  0C01               	rrf	1,w
 12749  07F6  1C03               	skipc
 12750  07F7  1311               	bcf	17,6	;volatile
 12751  07F8  1803               	skipnc
 12752  07F9  1711               	bsf	17,6	;volatile
 12753  07FA  0008               	return
 12754  07FB                     __end_of_Adc_InitAdcModule:	
 12755                           
 12756                           	psect	text70
 12757  0D8F                     __ptext70:	
 12758 ;; *************** function _Adc_ConfigAnCh *****************
 12759 ;; Defined at:
 12760 ;;		line 73 in file "../../../Framework/MercuryFwk/Source/c/01_Hal/02_Drv/adc_drv.c"
 12761 ;; Parameters:    Size  Location     Type
 12762 ;;  AnChSel         1    wreg     PTR struct _AnalogChSelT
 12763 ;;		 -> App_MainTask@AnalogChSel(8), 
 12764 ;; Auto vars:     Size  Location     Type
 12765 ;;  AnChSel         1    4[COMMON] PTR struct _AnalogChSelT
 12766 ;;		 -> App_MainTask@AnalogChSel(8), 
 12767 ;; Return value:  Size  Location     Type
 12768 ;;                  1    wreg      void 
 12769 ;; Registers used:
 12770 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 12771 ;; Tracked objects:
 12772 ;;		On entry : 0/0
 12773 ;;		On exit  : 0/0
 12774 ;;		Unchanged: 0/0
 12775 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12776 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12777 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12778 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12779 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12780 ;;Total ram usage:        1 bytes
 12781 ;; Hardware stack levels used:    1
 12782 ;; Hardware stack levels required when called:    2
 12783 ;; This function calls:
 12784 ;;		Nothing
 12785 ;; This function is called by:
 12786 ;;		_App_MainTask
 12787 ;; This function uses a non-reentrant model
 12788 ;;
 12789                           
 12790                           
 12791                           ;psect for function _Adc_ConfigAnCh
 12792  0D8F                     _Adc_ConfigAnCh:	
 12793                           
 12794                           ;incstack = 0
 12795                           ; Regs used in _Adc_ConfigAnCh: [wreg+fsr1l+fsr1h+status,2+status,0]
 12796                           ;Adc_ConfigAnCh@AnChSel stored from wreg
 12797  0D8F  00F4               	movwf	Adc_ConfigAnCh@AnChSel
 12798                           
 12799                           ;adc_drv.c: 76: ANSELA = 0x00;
 12800  0D90  0023               	movlb	3	; select bank3
 12801  0D91  018C               	clrf	12	;volatile
 12802                           
 12803                           ;adc_drv.c: 77: ANSELAbits.ANSA0 = AnChSel->AnSelA0An0;
 12804  0D92  0874               	movf	Adc_ConfigAnCh@AnChSel,w
 12805  0D93  0086               	movwf	6
 12806  0D94  0187               	clrf	7
 12807  0D95  0C01               	rrf	1,w
 12808  0D96  1C03               	skipc
 12809  0D97  100C               	bcf	12,0	;volatile
 12810  0D98  1803               	skipnc
 12811  0D99  140C               	bsf	12,0	;volatile
 12812                           
 12813                           ;adc_drv.c: 78: ANSELAbits.ANSA1 = AnChSel->AnSelA1An1;
 12814  0D9A  0A74               	incf	Adc_ConfigAnCh@AnChSel,w
 12815  0D9B  0086               	movwf	6
 12816  0D9C  0187               	clrf	7
 12817  0D9D  0C01               	rrf	1,w
 12818  0D9E  1C03               	skipc
 12819  0D9F  108C               	bcf	12,1	;volatile
 12820  0DA0  1803               	skipnc
 12821  0DA1  148C               	bsf	12,1	;volatile
 12822                           
 12823                           ;adc_drv.c: 79: ANSELAbits.ANSA2 = AnChSel->AnSelA2An2;
 12824  0DA2  0874               	movf	Adc_ConfigAnCh@AnChSel,w
 12825  0DA3  3E02               	addlw	2
 12826  0DA4  0086               	movwf	6
 12827  0DA5  0187               	clrf	7
 12828  0DA6  0C01               	rrf	1,w
 12829  0DA7  1C03               	skipc
 12830  0DA8  110C               	bcf	12,2	;volatile
 12831  0DA9  1803               	skipnc
 12832  0DAA  150C               	bsf	12,2	;volatile
 12833                           
 12834                           ;adc_drv.c: 80: ANSELAbits.ANSA4 = AnChSel->AnSelA4An3;
 12835  0DAB  0874               	movf	Adc_ConfigAnCh@AnChSel,w
 12836  0DAC  3E03               	addlw	3
 12837  0DAD  0086               	movwf	6
 12838  0DAE  0187               	clrf	7
 12839  0DAF  0C01               	rrf	1,w
 12840  0DB0  1C03               	skipc
 12841  0DB1  120C               	bcf	12,4	;volatile
 12842  0DB2  1803               	skipnc
 12843  0DB3  160C               	bsf	12,4	;volatile
 12844                           
 12845                           ;adc_drv.c: 88: ANSELC = 0x00;
 12846  0DB4  018E               	clrf	14	;volatile
 12847                           
 12848                           ;adc_drv.c: 89: ANSELCbits.ANSC0 = AnChSel->AnSelC0An4;
 12849  0DB5  0874               	movf	Adc_ConfigAnCh@AnChSel,w
 12850  0DB6  3E04               	addlw	4
 12851  0DB7  0086               	movwf	6
 12852  0DB8  0187               	clrf	7
 12853  0DB9  0C01               	rrf	1,w
 12854  0DBA  1C03               	skipc
 12855  0DBB  100E               	bcf	14,0	;volatile
 12856  0DBC  1803               	skipnc
 12857  0DBD  140E               	bsf	14,0	;volatile
 12858                           
 12859                           ;adc_drv.c: 90: ANSELCbits.ANSC1 = AnChSel->AnSelC1An5;
 12860  0DBE  0874               	movf	Adc_ConfigAnCh@AnChSel,w
 12861  0DBF  3E05               	addlw	5
 12862  0DC0  0086               	movwf	6
 12863  0DC1  0187               	clrf	7
 12864  0DC2  0C01               	rrf	1,w
 12865  0DC3  1C03               	skipc
 12866  0DC4  108E               	bcf	14,1	;volatile
 12867  0DC5  1803               	skipnc
 12868  0DC6  148E               	bsf	14,1	;volatile
 12869                           
 12870                           ;adc_drv.c: 91: ANSELCbits.ANSC2 = AnChSel->AnSelC2An6;
 12871  0DC7  0874               	movf	Adc_ConfigAnCh@AnChSel,w
 12872  0DC8  3E06               	addlw	6
 12873  0DC9  0086               	movwf	6
 12874  0DCA  0187               	clrf	7
 12875  0DCB  0C01               	rrf	1,w
 12876  0DCC  1C03               	skipc
 12877  0DCD  110E               	bcf	14,2	;volatile
 12878  0DCE  1803               	skipnc
 12879  0DCF  150E               	bsf	14,2	;volatile
 12880                           
 12881                           ;adc_drv.c: 92: ANSELCbits.ANSC3 = AnChSel->AnSelC3An7;
 12882  0DD0  0874               	movf	Adc_ConfigAnCh@AnChSel,w
 12883  0DD1  3E07               	addlw	7
 12884  0DD2  0086               	movwf	6
 12885  0DD3  0187               	clrf	7
 12886  0DD4  0C01               	rrf	1,w
 12887  0DD5  1C03               	skipc
 12888  0DD6  118E               	bcf	14,3	;volatile
 12889  0DD7  1803               	skipnc
 12890  0DD8  158E               	bsf	14,3	;volatile
 12891  0DD9  0008               	return
 12892  0DDA                     __end_of_Adc_ConfigAnCh:	
 12893                           
 12894                           	psect	intentry
 12895  0004                     __pintentry:	
 12896 ;; *************** function _MainInterrupt *****************
 12897 ;; Defined at:
 12898 ;;		line 50 in file "../../../Framework/MercuryFwk/Source/c/02_Osl/interrupts.c"
 12899 ;; Parameters:    Size  Location     Type
 12900 ;;		None
 12901 ;; Auto vars:     Size  Location     Type
 12902 ;;		None
 12903 ;; Return value:  Size  Location     Type
 12904 ;;                  1    wreg      void 
 12905 ;; Registers used:
 12906 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12907 ;; Tracked objects:
 12908 ;;		On entry : 0/0
 12909 ;;		On exit  : 0/0
 12910 ;;		Unchanged: 0/0
 12911 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12912 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12913 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12914 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12915 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12916 ;;Total ram usage:        1 bytes
 12917 ;; Hardware stack levels used:    1
 12918 ;; Hardware stack levels required when called:    1
 12919 ;; This function calls:
 12920 ;;		i1_GenerateEvt
 12921 ;; This function is called by:
 12922 ;;		Interrupt level 1
 12923 ;; This function uses a non-reentrant model
 12924 ;;
 12925                           
 12926  0004                     _MainInterrupt:	
 12927                           
 12928                           ;incstack = 0
 12929  0004  147E               	bsf	126,0	;set compiler interrupt flag (level 1)
 12930                           
 12931                           ; Regs used in _MainInterrupt: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 12932  0005  3180               	pagesel	$
 12933  0006  0020               	movlb	0	; select bank0
 12934  0007  087F               	movf	127,w
 12935  0008  00F3               	movwf	??_MainInterrupt
 12936                           
 12937                           ;interrupts.c: 53: if (PIR1bits.TMR2IF == ((UINT8)(1)) && PIE1bits.TMR2IE == ((UINT8)(1)
      +                          ))
 12938  0009  1C91               	btfss	17,1	;volatile
 12939  000A  281C               	goto	i1l3699
 12940  000B  0021               	movlb	1	; select bank1
 12941  000C  1C91               	btfss	17,1	;volatile
 12942  000D  281C               	goto	i1l3699
 12943                           
 12944                           ;interrupts.c: 54: {
 12945                           ;interrupts.c: 56: PIR1bits.TMR2IF = ((UINT8)(0));
 12946  000E  0020               	movlb	0	; select bank0
 12947  000F  1091               	bcf	17,1	;volatile
 12948                           
 12949                           ;interrupts.c: 58: InterruptCounter++;
 12950  0010  3001               	movlw	1
 12951  0011  0021               	movlb	1	; select bank1
 12952  0012  07A2               	addwf	_InterruptCounter^(0+128),f
 12953  0013  3000               	movlw	0
 12954  0014  3DA3               	addwfc	(_InterruptCounter+1)^(0+128),f
 12955                           
 12956                           ;interrupts.c: 60: if (InterruptCounter >= ((UINT16)(1)))
 12957  0015  0822               	movf	_InterruptCounter^(0+128),w
 12958  0016  0423               	iorwf	(_InterruptCounter+1)^(0+128),w
 12959  0017  1903               	btfsc	3,2
 12960  0018  281C               	goto	i1l3699
 12961                           
 12962                           ;interrupts.c: 61: {
 12963                           ;interrupts.c: 63: InterruptCounter = 0;
 12964  0019  01A2               	clrf	_InterruptCounter^(0+128)
 12965  001A  01A3               	clrf	(_InterruptCounter+1)^(0+128)
 12966                           
 12967                           ;interrupts.c: 65: MainSystemTimebaseFlag = CallTaskPhase;
 12968  001B  01E9               	clrf	_MainSystemTimebaseFlag^(0+128)
 12969  001C                     i1l3699:	
 12970                           
 12971                           ;interrupts.c: 66: }
 12972                           ;interrupts.c: 67: }
 12973                           ;interrupts.c: 70: if(PIE1bits.SSP1IE == ((UINT8)(1)) && PIR1bits.SSP1IF == ((UINT8)(1))
      +                          )
 12974  001C  0021               	movlb	1	; select bank1
 12975  001D  1D91               	btfss	17,3	;volatile
 12976  001E  2826               	goto	i1l397
 12977  001F  0020               	movlb	0	; select bank0
 12978  0020  1D91               	btfss	17,3	;volatile
 12979  0021  2826               	goto	i1l397
 12980                           
 12981                           ;interrupts.c: 71: {
 12982                           ;interrupts.c: 73: PIR1bits.SSP1IF = ((UINT8)(0));
 12983  0022  1191               	bcf	17,3	;volatile
 12984                           
 12985                           ;interrupts.c: 77: GenerateEvt(&I2cNewTxNotification);
 12986  0023  30E4               	movlw	(low (_I2cNewTxNotification| 0))& (0+255)
 12987  0024  318A  22B8         	fcall	i1_GenerateEvt
 12988  0026                     i1l397:	
 12989  0026  0873               	movf	??_MainInterrupt,w
 12990  0027  0020               	movlb	0	; select bank0
 12991  0028  00FF               	movwf	127
 12992  0029  107E               	bcf	126,0	;clear compiler interrupt flag (level 1)
 12993  002A  0009               	retfie
 12994  002B                     __end_of_MainInterrupt:	
 12995                           
 12996                           	psect	text72
 12997  0AB8                     __ptext72:	
 12998 ;; *************** function i1_GenerateEvt *****************
 12999 ;; Defined at:
 13000 ;;		line 73 in file "../../../Framework/MercuryFwk/Source/c/02_Osl/os_ser.c"
 13001 ;; Parameters:    Size  Location     Type
 13002 ;;  Event           1    wreg     PTR struct _EventStructu
 13003 ;;		 -> Relay2Set(10), Relay1Set(10), I2cReplyPacketReady(2), I2cWriteRequest(2), 
 13004 ;;		 -> I2cSetAddress(2), I2cNewTxNotification(2), I2cNewPacketNotification(2), 
 13005 ;; Auto vars:     Size  Location     Type
 13006 ;;  Event           1    1[COMMON] PTR struct _EventStructu
 13007 ;;		 -> Relay2Set(10), Relay1Set(10), I2cReplyPacketReady(2), I2cWriteRequest(2), 
 13008 ;;		 -> I2cSetAddress(2), I2cNewTxNotification(2), I2cNewPacketNotification(2), 
 13009 ;;  GenerateEvt     1    2[COMMON] enum E3356
 13010 ;; Return value:  Size  Location     Type
 13011 ;;                  1    wreg      enum E3352
 13012 ;; Registers used:
 13013 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 13014 ;; Tracked objects:
 13015 ;;		On entry : 0/0
 13016 ;;		On exit  : 0/0
 13017 ;;		Unchanged: 0/0
 13018 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13019 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13020 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13021 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13022 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13023 ;;Total ram usage:        3 bytes
 13024 ;; Hardware stack levels used:    1
 13025 ;; This function calls:
 13026 ;;		Nothing
 13027 ;; This function is called by:
 13028 ;;		_MainInterrupt
 13029 ;; This function uses a non-reentrant model
 13030 ;;
 13031                           
 13032                           
 13033                           ;psect for function i1_GenerateEvt
 13034  0AB8                     i1_GenerateEvt:	
 13035                           
 13036                           ;incstack = 0
 13037                           ; Regs used in i1_GenerateEvt: [wreg+fsr1l+fsr1h+status,2+status,0]
 13038                           ;i1GenerateEvt@Event stored from wreg
 13039  0AB8  00F1               	movwf	i1GenerateEvt@Event
 13040                           
 13041                           ;os_ser.c: 76: EventStatusType EventStatus = EventIdle;
 13042  0AB9  01F2               	clrf	i1GenerateEvt@EventStatus
 13043                           
 13044                           ;os_ser.c: 78: if ((Event->EventOptions != ((UINT8)(2))) && (Event->EventOptions != ((UI
      +                          NT8)(3))))
 13045  0ABA  0871               	movf	i1GenerateEvt@Event,w
 13046  0ABB  0086               	movwf	6
 13047  0ABC  0187               	clrf	7
 13048  0ABD  3002               	movlw	2
 13049  0ABE  0601               	xorwf	1,w
 13050  0ABF  1903               	btfsc	3,2
 13051  0AC0  2AD4               	goto	i1l3679
 13052  0AC1  0871               	movf	i1GenerateEvt@Event,w
 13053  0AC2  0086               	movwf	6
 13054  0AC3  0187               	clrf	7
 13055  0AC4  3003               	movlw	3
 13056  0AC5  0601               	xorwf	1,w
 13057  0AC6  1903               	btfsc	3,2
 13058  0AC7  2AD4               	goto	i1l3679
 13059                           
 13060                           ;os_ser.c: 79: {
 13061                           ;os_ser.c: 81: Event->EventStatus = EventSent;
 13062  0AC8  3002               	movlw	2
 13063  0AC9  00F0               	movwf	??i1_GenerateEvt
 13064  0ACA  0A71               	incf	i1GenerateEvt@Event,w
 13065  0ACB  0086               	movwf	6
 13066  0ACC  0187               	clrf	7
 13067  0ACD  0870               	movf	??i1_GenerateEvt,w
 13068  0ACE  0081               	movwf	1
 13069                           
 13070                           ;os_ser.c: 83: EventStatus = EventSent;
 13071  0ACF  3002               	movlw	2
 13072  0AD0  00F0               	movwf	??i1_GenerateEvt
 13073  0AD1  0870               	movf	??i1_GenerateEvt,w
 13074  0AD2  00F2               	movwf	i1GenerateEvt@EventStatus
 13075                           
 13076                           ;os_ser.c: 84: }
 13077  0AD3  0008               	return
 13078  0AD4                     i1l3679:	
 13079                           
 13080                           ;os_ser.c: 85: else
 13081                           ;os_ser.c: 86: {
 13082                           ;os_ser.c: 88: EventStatus = EventNotSent;
 13083  0AD4  3003               	movlw	3
 13084  0AD5  00F0               	movwf	??i1_GenerateEvt
 13085  0AD6  0870               	movf	??i1_GenerateEvt,w
 13086  0AD7  00F2               	movwf	i1GenerateEvt@EventStatus
 13087  0AD8  0008               	return
 13088  0AD9                     __end_ofi1_GenerateEvt:	
 13089                           ;os_ser.c: 89: }
 13090                           ;os_ser.c: 92: return(EventStatus);
 13091                           ;	Return value of i1_GenerateEvt is never used
 13092                           
 13093  007E                     btemp	set	126	;btemp
 13094  007E                     int$flags	set	126
 13095  007E                     wtemp0	set	126


Data Sizes:
    Strings     28
    Constant    12
    Data        43
    BSS         425
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14      6      10
    BANK0            80     63      73
    BANK1            80      0      74
    BANK2            80      0      60
    BANK3            80      0      80
    BANK4            80      0      80
    BANK5            80      0      80
    BANK6            80      0      80
    BANK7            80      0       0
    BANK8            80      0       0
    BANK9            80      0       0
    BANK10           80      0       0
    BANK11           45      0       0
    BANK12            0      0       0

Pointer List with Targets:

    Tmr6IsrCallback	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), 

    Tmr4IsrCallback	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), 

    Tmr2IsrCallback	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), 

    utoa@buf	PTR unsigned char  size(1) Largest target is 4
		 -> StdS_ManageStdServices@DieTempStr(BANK0[4]), 

    sp__itoa	PTR unsigned char  size(1) Largest target is 0

    GenerateImpulse@Impulse	PTR struct _ImpulseType size(1) Largest target is 10
		 -> Relay2Set(BANK1[10]), Relay1Set(BANK1[10]), 

    sp__utoa	PTR unsigned char  size(1) Largest target is 4
		 -> StdS_ManageStdServices@DieTempStr(BANK0[4]), 

    StringCopy@SourceStr	PTR unsigned char  size(2) Largest target is 9
		 -> StdS_ManageStdServices@DieTempStr(BANK0[4]), STR_5(CODE[9]), STR_4(CODE[9]), STR_3(CODE[6]), 
		 -> STR_2(CODE[5]), 

    StringCopy@DestStr	PTR unsigned char  size(1) Largest target is 80
		 -> RepBuffer(BANK4[80]), 

    LedStateMachine@LedSts	PTR enum E3743 size(1) Largest target is 1
		 -> Led1Sts(BANK1[1]), 

    LedStateMachine@LedPulse	PTR struct _LedPulseType size(1) Largest target is 6
		 -> Led1Pulse(BANK1[6]), 

    LedStateMachine@LedBlink	PTR struct _LedBlinkType size(1) Largest target is 9
		 -> Led1Blink(BANK1[9]), 

    ReceiveEvt@Event	PTR struct _EventStructure size(1) Largest target is 10
		 -> Relay2Set(BANK1[10]), Relay1Set(BANK1[10]), I2cReplyPacketReady(BANK0[2]), I2cWriteRequest(BANK1[2]), 
		 -> I2cSetAddress(BANK1[2]), I2cNewTxNotification(BANK1[2]), I2cNewPacketNotification(BANK1[2]), 

    GenerateEvt@Event	PTR struct _EventStructure size(1) Largest target is 10
		 -> Relay2Set(BANK1[10]), Relay1Set(BANK1[10]), I2cReplyPacketReady(BANK0[2]), I2cWriteRequest(BANK1[2]), 
		 -> I2cSetAddress(BANK1[2]), I2cNewTxNotification(BANK1[2]), I2cNewPacketNotification(BANK1[2]), 

    S1153_SchedTblType$Task	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> App_MainTask(), Led_MainTask(), Wdg_MainTask(), I2cSlv_MainTask(), 
		 -> I2c_DataReceiveSm(), 

    TaskTable.Task	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> App_MainTask(), Led_MainTask(), Wdg_MainTask(), I2cSlv_MainTask(), 
		 -> I2c_DataReceiveSm(), 

    LedPulseStateMachine@LedPulse	PTR struct _LedPulseType size(1) Largest target is 6
		 -> Led1Pulse(BANK1[6]), 

    LedBlinkStateMachine@LedBlink	PTR struct _LedBlinkType size(1) Largest target is 9
		 -> Led1Blink(BANK1[9]), 

    Tmr_TmrBConfig@TmrBConfig	PTR struct _TmrBConfigType size(1) Largest target is 6
		 -> InitSchTimer@TmrBConfig(BANK0[6]), 

    Adc_InitAdcModule@AdcConfig	PTR struct _AdcCfgType size(1) Largest target is 6
		 -> App_MainTask@AdcConfig(BANK0[6]), 

    Adc_ConfigAnCh@AnChSel	PTR struct _AnalogChSelType size(1) Largest target is 8
		 -> App_MainTask@AnalogChSel(BANK0[8]), 

    Mcu_ConfigPullUps@WpuCh	PTR struct _WpuChType size(1) Largest target is 12
		 -> App_MainTask@WpuCh(BANK0[12]), 

    I2c_UpdateTxBuffer@DataBuffer	PTR unsigned char  size(1) Largest target is 80
		 -> RepBuffer(BANK4[80]), 

    I2c_InitI2cModule@I2cConfig	PTR struct _I2cConfig size(1) Largest target is 11
		 -> I2cConfig(BANK1[11]), 


Critical Paths under _main in COMMON

    _Tmr_TmrBConfig->_TmrBInit
    _Tmr_TmrBConfig->_Tmr_TmrBIrqSet
    _Tmr_TmrBPrSet->___wmul
    ___lmul->___wmul
    _Wdg_MainTask->_Mcu_SetWdgPeriod
    _Led_InitSeq->_Led_SetLedStatus
    _LedStateMachine->_LedBlinkStateMachine
    _LedPulseStateMachine->_Led_SetLedStatus
    _LedBlinkStateMachine->___lwdiv
    _I2c_DataReceiveSm->_ClearRxBuffer
    _I2c_DataReceiveSm->_ClearTxBuffer
    _I2c_DataReceiveSm->_ReceiveEvt
    _I2c_InitI2cModule->_ClearRxBuffer
    _I2c_InitI2cModule->_ClearTxBuffer
    _I2cSlv_I2cDrvHandle->_Led_SetLedStatus
    _I2cSlv_I2cDrvHandle->_ReceiveEvt
    _GenerateImpulse->_ReceiveEvt
    _GenerateImpulse->_SetOutChSts
    _AppSm->_StdS_SetI2cAddress
    _ManageProtocol->_ReceiveEvt
    _UpdateRelaysSts->_SetOutChSts
    _utoa->___lwmod
    _SetLedBehavSts->_Led_SetLedPulseTime
    _SetLedBehavSts->_Led_SetLedStatus
    _LowPowerMode->_Mcu_SetWdgSts
    _GetDieTemperature->_Adc_GetConvResult
    _GetDieTemperature->_Adc_SelectChannel
    _ControlLedDirect->_Led_SetLedStatus

Critical Paths under _MainInterrupt in COMMON

    _MainInterrupt->i1_GenerateEvt

Critical Paths under _main in BANK0

    _SystemInit->_InitSchTimer
    _InitSchTimer->_Tmr_TmrBConfig
    _Tmr_TmrBConfig->_Tmr_TmrBPrSet
    _Tmr_TmrBPrSet->___lmul
    ___lmul->___wmul
    _MainScheduler->_ScheduleTasks
    _ScheduleTasks->_App_MainTask
    _InitializeTasks->_App_MainTask
    _Led_InitSeq->_Led_SetLedStatus
    _LedStateMachine->_LedPulseStateMachine
    _LedPulseStateMachine->___lwdiv
    _LedBlinkStateMachine->___lwdiv
    _I2cSlv_I2cDrvHandle->_I2c_UpdateTxBuffer
    _App_MainTask->_AppSm
    _AppSm->_ManageProtocol
    _ManageProtocol->_StdS_ManageStdServices
    _StdS_ManageStdServices->_utoa
    _utoa->___lwdiv
    _SetLedBehavSts->_Led_SetLedBlinkTime
    _GetDieTemperature->_Adc_GetConvResult
    _ControlLedDirect->_Led_SetLedStatus

Critical Paths under _MainInterrupt in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _MainInterrupt in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _MainInterrupt in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _MainInterrupt in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _MainInterrupt in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _MainInterrupt in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _MainInterrupt in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _MainInterrupt in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _MainInterrupt in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _MainInterrupt in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _MainInterrupt in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _MainInterrupt in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _MainInterrupt in BANK12

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0   47600
                      _MainScheduler
                         _SystemInit
 ---------------------------------------------------------------------------------
 (1) _SystemInit                                           0     0      0    3264
                       _InitSchTimer
               _Mcu_EnableInterrupts
                     _Mcu_InitIntOsc
 ---------------------------------------------------------------------------------
 (2) _Mcu_InitIntOsc                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _Mcu_EnableInterrupts                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _InitSchTimer                                         7     7      0    3264
                                             37 BANK0      7     7      0
                     _Tmr_TmrBConfig
 ---------------------------------------------------------------------------------
 (3) _Tmr_TmrBConfig                                       3     2      1    3061
                                             34 BANK0      3     2      1
                           _TmrBInit
                       _Tmr_StartTmr
                     _Tmr_TmrBIrqSet
                      _Tmr_TmrBPrSet
 ---------------------------------------------------------------------------------
 (4) _Tmr_TmrBPrSet                                       18    14      4    2003
                                             16 BANK0     18    14      4
                            ___lldiv
                             ___lmul
                             ___wmul
 ---------------------------------------------------------------------------------
 (5) ___wmul                                               6     2      4     404
                                              4 COMMON     2     2      0
                                              0 BANK0      4     0      4
 ---------------------------------------------------------------------------------
 (5) ___lmul                                              12     4      8     220
                                              4 BANK0     12     4      8
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (5) ___lldiv                                             14     6      8     857
                                              4 COMMON     1     1      0
                                              0 BANK0     13     5      8
 ---------------------------------------------------------------------------------
 (4) _Tmr_TmrBIrqSet                                       2     1      1     216
                                              4 COMMON     2     1      1
 ---------------------------------------------------------------------------------
 (4) _Tmr_StartTmr                                         1     1      0      22
                                              4 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (4) _TmrBInit                                             4     2      2     371
                                              4 COMMON     2     0      2
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _MainScheduler                                        0     0      0   44336
                    _InitializeTasks
                      _ScheduleTasks
 ---------------------------------------------------------------------------------
 (2) _ScheduleTasks                                        7     7      0   22261
                                             56 BANK0      7     7      0
                       _App_MainTask *
                    _I2cSlv_MainTask *
                  _I2c_DataReceiveSm *
                       _Led_MainTask *
                       _Wdg_MainTask *
 ---------------------------------------------------------------------------------
 (2) _InitializeTasks                                      5     5      0   22075
                                             56 BANK0      5     5      0
                       _App_MainTask *
                    _I2cSlv_MainTask *
                  _I2c_DataReceiveSm *
                       _Led_MainTask *
                       _Wdg_MainTask *
 ---------------------------------------------------------------------------------
 (3) _Wdg_MainTask                                         1     0      1      44
                                             28 BANK0      1     0      1
                       _Mcu_ClearWdg
                   _Mcu_SetWdgPeriod
                      _Mcu_SetWdgSts
 ---------------------------------------------------------------------------------
 (4) _Mcu_SetWdgPeriod                                     2     2      0      22
                                              4 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (4) _Mcu_ClearWdg                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _Led_MainTask                                         5     4      1    6575
                                             28 BANK0      5     4      1
                    _LedStateMachine
                        _Led_InitSeq
                     _SetLedBehavSts
 ---------------------------------------------------------------------------------
 (4) _Led_InitSeq                                          1     1      0     832
                                              1 BANK0      1     1      0
                   _Led_SetLedStatus
 ---------------------------------------------------------------------------------
 (4) _LedStateMachine                                      7     4      3    4494
                                             11 BANK0      7     4      3
               _LedBlinkStateMachine
               _LedPulseStateMachine
 ---------------------------------------------------------------------------------
 (5) _LedPulseStateMachine                                 4     3      1    2439
                                              7 BANK0      4     3      1
                   _Led_SetLedStatus
                            ___lwdiv
 ---------------------------------------------------------------------------------
 (5) _LedBlinkStateMachine                                 3     3      0    1654
                                              5 COMMON     1     1      0
                                              7 BANK0      2     2      0
                            ___lwdiv
 ---------------------------------------------------------------------------------
 (3) _I2c_DataReceiveSm                                    9     8      1    1294
                                             28 BANK0      9     8      1
                     _CheckAckStatus
                    _CheckByteStatus
                 _CheckStopBitStatus
                      _ClearRxBuffer
                      _ClearTxBuffer
                        _GenerateEvt
                          _Mcu_Reset
                         _ReceiveEvt
 ---------------------------------------------------------------------------------
 (4) _CheckStopBitStatus                                   1     1      0       0
                                              4 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (4) _CheckByteStatus                                      1     1      0       0
                                              4 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (4) _CheckAckStatus                                       1     1      0       0
                                              4 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (3) _I2cSlv_MainTask                                      1     0      1    2879
                                             28 BANK0      1     0      1
                _I2cSlv_I2cDrvHandle
                  _I2c_InitI2cModule
                      _I2c_SetConfig
 ---------------------------------------------------------------------------------
 (4) _I2c_SetConfig                                        1     1      0       0
                                              4 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (4) _I2c_InitI2cModule                                    3     3      0     572
                                              0 BANK0      3     3      0
                      _ClearRxBuffer
                      _ClearTxBuffer
 ---------------------------------------------------------------------------------
 (4) _ClearTxBuffer                                        2     2      0      99
                                              4 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (4) _ClearRxBuffer                                        2     2      0      99
                                              4 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (4) _I2cSlv_I2cDrvHandle                                  6     6      0    2307
                                              4 BANK0      6     6      0
                        _GenerateEvt
                  _I2c_SetI2cAddress
              _I2c_SetI2cAddressMask
                 _I2c_UpdateTxBuffer
                   _Led_SetLedStatus
                         _ReceiveEvt
 ---------------------------------------------------------------------------------
 (5) _I2c_UpdateTxBuffer                                   5     4      1     314
                                              4 COMMON     1     0      1
                                              0 BANK0      4     4      0
 ---------------------------------------------------------------------------------
 (5) _I2c_SetI2cAddressMask                                1     1      0      31
                                              4 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (5) _I2c_SetI2cAddress                                    1     1      0      31
                                              4 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (3) _App_MainTask                                        28    27      1   11150
                                             28 BANK0     28    27      1
                     _Adc_ConfigAnCh
                  _Adc_InitAdcModule
                              _AppSm
                    _GenerateImpulse
                  _Mcu_ConfigPullUps
                 _Mcu_SetDieTempMode
                  _Mcu_SetDieTempSts
                  _Mcu_SetPullUpsSts
 ---------------------------------------------------------------------------------
 (4) _Mcu_SetPullUpsSts                                    1     1      0      22
                                              4 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (4) _Mcu_SetDieTempSts                                    1     1      0      22
                                              4 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (4) _Mcu_SetDieTempMode                                   1     1      0      22
                                              4 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (4) _Mcu_ConfigPullUps                                    1     1      0     294
                                              4 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (4) _GenerateImpulse                                      5     5      0    1153
                                              0 BANK0      5     5      0
                         _ReceiveEvt
                        _SetOutChSts
 ---------------------------------------------------------------------------------
 (4) _AppSm                                                1     1      0    8648
                                             27 BANK0      1     1      0
                        _GenerateEvt
                     _ManageProtocol
                 _StdS_SetI2cAddress
 ---------------------------------------------------------------------------------
 (5) _StdS_SetI2cAddress                                   2     2      0       0
                                              4 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (5) _ManageProtocol                                       3     3      0    8044
                                             24 BANK0      3     3      0
                        _GenerateEvt
                         _ReceiveEvt
             _StdS_ManageStdServices
                    _UpdateRelaysSts
 ---------------------------------------------------------------------------------
 (6) _UpdateRelaysSts                                      1     1      0     322
                                              0 BANK0      1     1      0
                        _SetOutChSts
 ---------------------------------------------------------------------------------
 (5) _SetOutChSts                                          2     1      1     322
                                              4 COMMON     2     1      1
 ---------------------------------------------------------------------------------
 (6) _StdS_ManageStdServices                               8     8      0    6756
                                             16 BANK0      8     8      0
                         _BoardReset
                   _ControlLedDirect
                        _GenerateEvt
                  _GetDieTemperature
                       _LowPowerMode
                     _SetLedBehavSts
                         _StringCopy
                               _utoa
 ---------------------------------------------------------------------------------
 (7) _utoa                                                 9     5      4    2399
                                              7 BANK0      9     5      4
                            ___lwdiv
                            ___lwmod
 ---------------------------------------------------------------------------------
 (8) ___lwmod                                              6     2      4     500
                                              4 COMMON     2     2      0
                                              0 BANK0      4     0      4
 ---------------------------------------------------------------------------------
 (6) ___lwdiv                                              8     4      4    1125
                                              4 COMMON     1     1      0
                                              0 BANK0      7     3      4
 ---------------------------------------------------------------------------------
 (7) _StringCopy                                           9     5      4    1350
                                              4 COMMON     1     1      0
                                              0 BANK0      8     4      4
 ---------------------------------------------------------------------------------
 (4) _SetLedBehavSts                                       2     2      0    1249
                                              4 BANK0      2     2      0
                _Led_SetLedBlinkTime
                _Led_SetLedPulseTime
                   _Led_SetLedStatus
 ---------------------------------------------------------------------------------
 (5) _Led_SetLedPulseTime                                  3     1      2     139
                                              4 COMMON     2     0      2
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (5) _Led_SetLedBlinkTime                                  5     1      4     247
                                              4 COMMON     1     1      0
                                              0 BANK0      4     0      4
 ---------------------------------------------------------------------------------
 (7) _LowPowerMode                                         0     0      0      22
                      _Mcu_SetWdgSts
 ---------------------------------------------------------------------------------
 (4) _Mcu_SetWdgSts                                        1     1      0      22
                                              4 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (7) _GetDieTemperature                                    4     2      2      90
                                              3 BANK0      4     2      2
                  _Adc_GetConvResult
                     _Adc_GetConvSts
                  _Adc_SelectChannel
                _Adc_StartConversion
 ---------------------------------------------------------------------------------
 (8) _Adc_StartConversion                                  0     0      0       0
 ---------------------------------------------------------------------------------
 (8) _Adc_SelectChannel                                    2     2      0      22
                                              4 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (8) _Adc_GetConvSts                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (8) _Adc_GetConvResult                                    5     3      2      34
                                              4 COMMON     2     0      2
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (4) _GenerateEvt                                          3     3      0     604
                                              4 COMMON     1     1      0
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (7) _ControlLedDirect                                     0     0      0     832
                   _Led_SetLedStatus
 ---------------------------------------------------------------------------------
 (5) _Led_SetLedStatus                                     3     2      1     832
                                              4 COMMON     2     1      1
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (7) _BoardReset                                           0     0      0       0
                          _Mcu_Reset
 ---------------------------------------------------------------------------------
 (4) _Mcu_Reset                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (4) _ReceiveEvt                                           2     2      0     362
                                              4 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (4) _Adc_InitAdcModule                                    1     1      0     162
                                              4 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (4) _Adc_ConfigAnCh                                       1     1      0     206
                                              4 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 8
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (9) _MainInterrupt                                        1     1      0      75
                                              3 COMMON     1     1      0
                      i1_GenerateEvt
 ---------------------------------------------------------------------------------
 (10) i1_GenerateEvt                                       3     3      0      75
                                              0 COMMON     3     3      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 10
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _MainScheduler
     _InitializeTasks
       _App_MainTask *
         _Adc_ConfigAnCh
         _Adc_InitAdcModule
         _AppSm
           _GenerateEvt
           _ManageProtocol
             _GenerateEvt
             _ReceiveEvt
             _StdS_ManageStdServices
               _BoardReset
                 _Mcu_Reset
               _ControlLedDirect
                 _Led_SetLedStatus
               _GenerateEvt
               _GetDieTemperature
                 _Adc_GetConvResult
                 _Adc_GetConvSts
                 _Adc_SelectChannel
                 _Adc_StartConversion
               _LowPowerMode
                 _Mcu_SetWdgSts
               _SetLedBehavSts
                 _Led_SetLedBlinkTime
                 _Led_SetLedPulseTime
                 _Led_SetLedStatus
               _StringCopy
               _utoa
                 ___lwdiv
                 ___lwmod
             _UpdateRelaysSts
               _SetOutChSts
           _StdS_SetI2cAddress
         _GenerateImpulse
           _ReceiveEvt
           _SetOutChSts
         _Mcu_ConfigPullUps
         _Mcu_SetDieTempMode
         _Mcu_SetDieTempSts
         _Mcu_SetPullUpsSts
       _I2cSlv_MainTask *
         _I2cSlv_I2cDrvHandle
           _GenerateEvt
           _I2c_SetI2cAddress
           _I2c_SetI2cAddressMask
           _I2c_UpdateTxBuffer
           _Led_SetLedStatus
           _ReceiveEvt
         _I2c_InitI2cModule
           _ClearRxBuffer
           _ClearTxBuffer
         _I2c_SetConfig
       _I2c_DataReceiveSm *
         _CheckAckStatus
         _CheckByteStatus
         _CheckStopBitStatus
         _ClearRxBuffer
         _ClearTxBuffer
         _GenerateEvt
         _Mcu_Reset
         _ReceiveEvt
       _Led_MainTask *
         _LedStateMachine
           _LedBlinkStateMachine
             ___lwdiv
           _LedPulseStateMachine
             _Led_SetLedStatus
             ___lwdiv
         _Led_InitSeq
           _Led_SetLedStatus
         _SetLedBehavSts
           _Led_SetLedBlinkTime
           _Led_SetLedPulseTime
           _Led_SetLedStatus
       _Wdg_MainTask *
         _Mcu_ClearWdg
         _Mcu_SetWdgPeriod
         _Mcu_SetWdgSts
     _ScheduleTasks
       _App_MainTask *
         _Adc_ConfigAnCh
         _Adc_InitAdcModule
         _AppSm
           _GenerateEvt
           _ManageProtocol
             _GenerateEvt
             _ReceiveEvt
             _StdS_ManageStdServices
               _BoardReset
                 _Mcu_Reset
               _ControlLedDirect
                 _Led_SetLedStatus
               _GenerateEvt
               _GetDieTemperature
                 _Adc_GetConvResult
                 _Adc_GetConvSts
                 _Adc_SelectChannel
                 _Adc_StartConversion
               _LowPowerMode
                 _Mcu_SetWdgSts
               _SetLedBehavSts
                 _Led_SetLedBlinkTime
                 _Led_SetLedPulseTime
                 _Led_SetLedStatus
               _StringCopy
               _utoa
                 ___lwdiv
                 ___lwmod
             _UpdateRelaysSts
               _SetOutChSts
           _StdS_SetI2cAddress
         _GenerateImpulse
           _ReceiveEvt
           _SetOutChSts
         _Mcu_ConfigPullUps
         _Mcu_SetDieTempMode
         _Mcu_SetDieTempSts
         _Mcu_SetPullUpsSts
       _I2cSlv_MainTask *
         _I2cSlv_I2cDrvHandle
           _GenerateEvt
           _I2c_SetI2cAddress
           _I2c_SetI2cAddressMask
           _I2c_UpdateTxBuffer
           _Led_SetLedStatus
           _ReceiveEvt
         _I2c_InitI2cModule
           _ClearRxBuffer
           _ClearTxBuffer
         _I2c_SetConfig
       _I2c_DataReceiveSm *
         _CheckAckStatus
         _CheckByteStatus
         _CheckStopBitStatus
         _ClearRxBuffer
         _ClearTxBuffer
         _GenerateEvt
         _Mcu_Reset
         _ReceiveEvt
       _Led_MainTask *
         _LedStateMachine
           _LedBlinkStateMachine
             ___lwdiv
           _LedPulseStateMachine
             _Led_SetLedStatus
             ___lwdiv
         _Led_InitSeq
           _Led_SetLedStatus
         _SetLedBehavSts
           _Led_SetLedBlinkTime
           _Led_SetLedPulseTime
           _Led_SetLedStatus
       _Wdg_MainTask *
         _Mcu_ClearWdg
         _Mcu_SetWdgPeriod
         _Mcu_SetWdgSts
   _SystemInit
     _InitSchTimer
       _Tmr_TmrBConfig
         _TmrBInit
         _Tmr_StartTmr
         _Tmr_TmrBIrqSet
         _Tmr_TmrBPrSet
           ___lldiv
           ___lmul
             ___wmul (ARG)
           ___wmul
     _Mcu_EnableInterrupts
     _Mcu_InitIntOsc

 _MainInterrupt (ROOT)
   i1_GenerateEvt

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             3F0      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            E      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               E      6       A       2       71.4%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0       0       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50     3F      49       5       91.3%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BANK1               50      0      4A       7       92.5%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BITBANK2            50      0       0       8        0.0%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
BANK2               50      0      3C       9       75.0%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
BITBANK3            50      0       0      10        0.0%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BANK3               50      0      50      11      100.0%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
BITBANK4            50      0       0      12        0.0%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BANK4               50      0      50      13      100.0%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BITBANK5            50      0       0      14        0.0%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
BANK5               50      0      50      15      100.0%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
BITBANK6            50      0       0      16        0.0%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
BANK6               50      0      50      17      100.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BITBANK7            50      0       0      18        0.0%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BANK7               50      0       0      19        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
ABS                  0      0     219      20        0.0%
BITBANK8            50      0       0      21        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BANK8               50      0       0      22        0.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BITBANK9            50      0       0      23        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BANK9               50      0       0      24        0.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BITBANK10           50      0       0      25        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BANK10              50      0       0      26        0.0%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BITBANK11           50      0       0      27        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BANK11              2D      0       0      28        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
BITBANK12           30      0       0      29        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BANK12               0      0       0      30        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
DATA                 0      0     219      31        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%


Microchip Technology PIC Macro Assembler V1.45 build -152302408 
Symbol Table                                                                                   Fri Mar 27 20:41:26 2020

                                    pc 0002                       _Mcu_SetWdgPeriod 0915  
                          __CFG_CP$OFF 0000             __end_of_I2c_UpdateTxBuffer 0AB8  
                ?_LedPulseStateMachine 0027                 __end_of_Mcu_InitIntOsc 08C7  
           __size_of_GetDieTemperature 0019                 ??_LedBlinkStateMachine 0027  
                  ___wmul@multiplicand 0022            __size_of_CheckStopBitStatus 000A  
                 __end_of_App_MainTask 064B                                    l300 0749  
                                  l304 0B8E                                    l312 0346  
                                  l306 0B97                                    l139 018F  
                                  l307 0BA0                                    l324 0A08  
                                  l309 0BB4         __end_of_StdS_ManageStdServices 0294  
                                  l326 0A0B                                    l327 0A0E  
                                  l336 0E18                                    l281 06D4  
                                  l329 0A1C                                    l169 08C4  
                                  l290 06F8                                    l282 06D7  
                                  l611 0E73                                    l534 09D9  
                                  l294 0717                                    l615 0CA0  
                                  l287 06F1                                    l279 06D2  
                                  l640 097F                                    l296 071A  
                                  l633 0A65                                    l297 071E  
                                  l289 06F4                                    l626 095F  
                                  l811 0A05                                    l619 0CD1  
                                  l556 05C4                                    l752 0D49  
                                  l904 06CE                                    l930 064A  
                                  l588 0C74                                    l918 0BDF  
                                  l926 05E3                                    l873 0A7E  
                                  l786 0293                                    l892 07C3  
                                  _PR2 001B                                    _PR4 0416  
                         __CFG_CPD$OFF 0000                                    _PR6 041D  
                         __CFG_BORV$LO 0000                                    wreg 0009  
                         __CFG_IESO$ON 0000                       ??_SetLedBehavSts 0024  
                                 S4627 0800                 Mcu_SetPullUpsSts@PuSts 0074  
                      ??_MainInterrupt 0073                           __CFG_LVP$OFF 0000  
                      ??_MainScheduler 0076                                   l1086 0A88  
                                 l3061 0C16                                   l1358 0F13  
                                 l4103 0683                                   l4031 0A9F  
                                 l3065 0C20                                   l4121 0A81  
                                 l4201 02EF                                   l4035 04A8  
                                 l3219 0BA9                                   l4203 0306  
                                 l4211 0343                                   l4109 06AD  
                                 l4117 06BB                                   l4141 0E93  
                                 l4213 0348                                   l4205 031E  
                                 l4231 0563                                   l4047 04F3  
                                 l4039 04B6                                   l4303 0E67  
                                 l4321 078B                                   l4313 0766  
                                 l4225 054C                                   l4057 0526  
                                 l4065 0F2C                                   l4401 010F  
                                 l3249 0A11                                   l4153 0EBE  
                                 l4209 0337                                   l4307 074D  
                                 l4331 07B8                                   l4251 059E  
                                 l4219 0539                                   l4059 0531  
                                 l4067 0F36                                   l4083 0F7C  
                                 l4139 0E85                                   l2821 0A6F  
                                 l4093 0656                                   l4245 058E  
                                 l4261 05BB                                   l4077 0F72  
                                 l4085 0F8B                                   l4413 012E  
                                 l4181 0707                                   l4173 06DA  
                                 l4149 0EB3                                   l4095 0659  
                                 l4343 0BC6                                   l4335 0BB6  
                                 l4351 0BD3                                   l4239 0570  
                                 l3551 09F9                                   l4431 016F  
                                 l4175 06E5                                   l4191 073D  
                                 l2825 0A76                                   l4265 0C72  
                                 l4273 0C8C                                   l4281 0E26  
                                 l4441 0189                                   l4425 015A  
                                 l4185 0722                                   l3803 0BFF  
                                 l2819 0A68                                   l4099 066E  
                                 l4347 0BD0                                   l4267 0C77  
                                 l4275 0C9D                                   l3555 09FC  
                                 l4419 0150                                   l4355 00A6  
                                 l4187 072D                                   l4179 06FC  
                                 l3741 0953                                   l3821 0B17  
                                 l4269 0C7F                                   l4285 0E32  
                                 l3549 09F1                                   l4437 0184  
                                 l4429 0169                                   l4541 0636  
                                 l3831 0D11                                   l3807 0C08  
                                 l4367 00C5                                   l4375 00D0  
                                 l4447 0194                                   l3745 0959  
                                 l3753 0A60                                   l3761 0979  
                                 l4385 00E4                                   l4369 00C7  
                                 l4473 09CD                                   l4545 0641  
                                 l3915 0AF7                                   l3835 0D1C  
                                 l3827 0D0A                                   l3843 0D3B  
                                 l3851 0B1E                                   l3923 01A1  
                                 l4387 00E9                                   l4483 0CA8  
                                 l4571 03CC                                   l4459 0DF7  
                                 l3917 0AF8                                   l3749 0A4F  
                                 l3757 0973                                   l3781 0CF9  
                                 l3773 0CDB                                   l3941 01EF  
                                 l4469 09C6                                   l4477 09D0  
                                 l4573 03ED                                   l3839 0D36  
                                 l3775 0CE7                                   l3951 020F  
                                 l3935 01D5                                   l4399 010A  
                                 l3865 0A3B                                   l3785 0D02  
                                 l3953 0214                                   l3929 01BB  
                                 l4489 0CC8                                   l3859 09C0  
                                 l3875 0ECD                                   l3955 0217  
                                 l3947 0209                                   l3797 0BE7  
                                 l3885 0EEB                                   l3965 0234  
                                 l3949 020C                                   l4597 09A6  
                                 l3799 0BF3                                   l3991 0B52  
                                 l3993 0B53                                   l3985 0B45  
                                 l3979 0272                                   l3987 0B46  
                                 STR_1 1015                                   STR_2 1023  
                                 STR_3 101D                                   STR_4 1002  
                                 STR_5 1002                                   _LATA 010C  
                                 _LATC 010E                                   u3120 0E42  
                                 u3130 0E43                                   u2515 0BEA  
                                 u3340 05D0                                   u2445 0CDE  
                                 u1565 0C45                                   u3405 035E  
                                 u1645 0C21                                   u3350 05DE  
                                 u2535 0BF9                                   u1575 0C54  
                                 u3175 07A1                                   u3415 0363  
                                 u1655 0C28                                   u2465 0CE8  
                                 u2545 0C00                                   u1745 08FB  
                                 u3425 0374                                   u2475 0CF2  
                                 u1755 0905                                   u3435 0388  
                                 u2485 0CFA                                   u1765 090F  
                                 u2805 0F5D                                   u3365 0D5E  
                                 u3445 038D                                   u3375 0D63  
                                 u3455 039D                                   u3385 0D74  
                                 u3465 03AC                                   u2905 0EA8  
                                 u3475 03BD                                   u2915 0EB4  
                                 u2835 0A89                                   u3485 03D0  
                                 u2845 0A8E                                   u2695 0B4A  
                                 u2935 040F                                   u2775 04E4  
                                 u3495 03E2                                   u2945 042A  
                                 u2955 043B                                   u2795 0518  
                                 u2875 0E88                                   u2965 044C  
                                 u2975 045D                                   u2895 0E94  
                                 u2985 046E                                   u2995 0493  
                                 _WPUA 020C                                   _WPUC 020E  
                         __CFG_WRT$OFF 0000                          __CFG_FCMEN$ON 0000  
          Led_SetLedBlinkTime@OnTimeMs 0020                                   _main 08C7  
                                 fsr0h 0005                                   fsr1h 0007  
                                 indf0 0000                                   fsr0l 0004  
                                 indf1 0001                                   fsr1l 0006  
                  __end_of_Led_InitSeq 0E74                                   btemp 007E  
                      _I2cSlaveAddress 005F                                   _utoa 0EC7  
         __size_of_Led_SetLedPulseTime 0010                          __CFG_BOREN$ON 0000  
                    _Mcu_SetPullUpsSts 08E6                                   start 002B  
                   AppSm@WpuSetCounter 00AA                    __end_of_GenerateEvt 0B1C  
                        ?_InitSchTimer 0070                      ??_UpdateRelaysSts 0020  
                       ??_Mcu_ClearWdg 0074                         ?_Mcu_SetWdgSts 0070  
                           _BoardReset 08AE             __size_of_Mcu_SetDieTempSts 0008  
                        __CFG_MCLRE$ON 0000                     ?_Mcu_SetPullUpsSts 0070  
                  StringCopy@SourceStr 0020                        ?_Mcu_InitIntOsc 0070  
                        __CFG_PLLEN$ON 0000                    ??_Mcu_SetPullUpsSts 0074  
                                ?_main 0070                        __end_of___lldiv 0EC7  
                                ?_utoa 0027                        __end_of___lwdiv 0D07  
                      __end_of___lwmod 0C0D                                  i1l397 0026  
         Led_SetLedBlinkTime@OffTimeMs 0022              Mcu_SetWdgPeriod@WdgPeriod 0075  
              __end_of_LedStateMachine 0C9F                                  _AppSm 0BB5  
                  ___lmul@multiplicand 0028             __size_of_I2c_SetI2cAddress 0005  
                     ??_Adc_GetConvSts 0074                   __end_of_Led_MainTask 0CD2  
         LedPulseStateMachine@LedPulse 002A                        __end_of_dpowers 1015  
                                pclath 000A              __end_of_Mcu_SetPullUpsSts 08EE  
                                utoa@c 002E                                  utoa@v 002C  
                                status 0003                        _I2cSlv_MainTask 09C5  
                                wtemp0 007E                       ??_Adc_ConfigAnCh 0074  
                       ??_InitSchTimer 0045            __size_of_Mcu_SetDieTempMode 0008  
              LedStateMachine@LedBlink 002C                        __initialization 002D  
                    _I2c_DataReceiveSm 00A5                LedStateMachine@LedPulse 002D  
                     ?_GenerateImpulse 0070       StdS_ManageStdServices@DieTempStr 0032  
                         __end_of_main 08CE                 ??_LedPulseStateMachine 0028  
                         __end_of_utoa 0F29                          AppSm@AppState 00AB  
                   ?_I2c_DataReceiveSm 003C                                 ??_main 0076  
                               ??_utoa 002B         __size_of_I2c_SetI2cAddressMask 0005  
                     __end_of_TmrBInit 074A                             _ReceiveEvt 0AD9  
        __end_of_I2c_SetI2cAddressMask 0800                    ??_I2c_DataReceiveSm 003D  
                        ??_SetOutChSts 0075                                 ?_AppSm 0070  
                    ?_Led_SetLedStatus 0074               I2cSlv_I2cDrvHandle@Index 0029  
                      ReceiveEvt@Event 0075                            _Led_InitSeq 0E25  
                               _ADRESH 009C                                 _ADRESL 009B  
                   ??_Led_SetLedStatus 0075                          SetOutChSts@Ch 0075  
                     ??_ManageProtocol 0038                                 _ANSELA 018C  
                               _ANSELC 018E                            _GenerateEvt 0AFA  
                               i1l3679 0AD4                                 i1l3699 001C  
                   __size_of_Mcu_Reset 0002                             _TaskNumber 1000  
                  App_MainTask@Options 003C                        ??_Mcu_SetWdgSts 0074  
        I2c_DataReceiveSm@I2cRxAddress 0064              __end_of_I2c_DataReceiveSm 01A0  
                       __CFG_PWRTE$OFF 0000                            ?_BoardReset 0070  
         __end_of_Mcu_EnableInterrupts 08B7                  __size_of_App_MainTask 0086  
                               ___lmul 0C0D                        _LedBehaviourSts 0068  
                               ___wmul 0A7F                         __CFG_STVREN$ON 0000  
                  _Led_SetLedBlinkTime 0A4D                              ??___lldiv 0074  
                            ??___lwdiv 0074                 Tmr_TmrBPrSet@IntFreqHz 0030  
                            ??___lwmod 0074            GetDieTemperature@DieTempRes 0025  
            __size_of_ControlLedDirect 0014                        _CheckByteStatus 0901  
                    _Adc_InitAdcModule 07C4                           __pdataCOMMON 0079  
                   ?_Adc_InitAdcModule 0070            __end_of_I2cSlv_I2cDrvHandle 05C5  
                     ?_LedStateMachine 002B                          ?_LowPowerMode 0070  
               Adc_SelectChannel@SelCh 0075                   __end_of_Mcu_ClearWdg 0004  
              __end_of_I2cSlv_MainTask 09DA                   ?_Led_SetLedBlinkTime 0020  
               __size_of_ScheduleTasks 00B0               __end_of_Mcu_SetWdgPeriod 0920  
                  ??_Adc_InitAdcModule 0074                    __end_of_SetOutChSts 0A7F  
                __end_ofi1_GenerateEvt 0AD9             __size_of_Mcu_SetPullUpsSts 0008  
                        ?_Wdg_MainTask 003C                __end_of__initialization 00A1  
               Tmr_TmrBPrSet@Prescaler 0032                           _App_MainTask 05C5  
               InitSchTimer@TmrBConfig 0046                             _StringCopy 0B1C  
                        __end_of_AppSm 0BE0                         __pcstackCOMMON 0070  
             LedStateMachine@LedOutSts 0031           __size_of_Adc_StartConversion 0003  
                         __pidataBANK0 08AA                           __pidataBANK1 08A9  
                         __pidataBANK2 0B64              __end_of_Adc_InitAdcModule 07FB  
             __size_of_InitializeTasks 0045                      __end_of_Mcu_Reset 08AE  
                LedStateMachine@LedSts 002B                     LedStateMachine@Led 0030  
                __size_of_Led_MainTask 0033                    _Led_SetLedPulseTime 0970  
                __end_of_I2c_SetConfig 09F0                            ?_ReceiveEvt 0070  
             _I2cNewPacketNotification 00E6                         ??_LowPowerMode 0075  
                       _OPTION_REGbits 0095                             _SystemInit 08EE  
                 __end_of_InitSchTimer 0A34                                ??_AppSm 003B  
        StdS_ManageStdServices@DieTemp 0036                  __end_of_Tmr_TmrBPrSet 034A  
                  __size_of_BoardReset 0003            __size_of_StdS_SetI2cAddress 0031  
                ??_Led_SetLedBlinkTime 0074                     _I2c_UpdateTxBuffer 0A9B  
                      _UpdateRelaysSts 0B3F                             __pbssBANK0 005F  
                           __pbssBANK1 00A0                             __pbssBANK2 0148  
                           __pbssBANK3 01A0                             __pbssBANK4 0220  
                           __pbssBANK5 02A0                             __pbssBANK6 0320  
                       ??_Wdg_MainTask 0076                    ?_I2c_UpdateTxBuffer 0074  
                 ?_Led_SetLedPulseTime 0074                      _Mcu_ConfigPullUps 0F91  
           __size_of_I2c_DataReceiveSm 00FB                              ?_TmrBInit 0074  
                   ?_Mcu_ConfigPullUps 0070                       ??_Mcu_InitIntOsc 0074  
              __size_of_Tmr_TmrBConfig 004B                             __pmaintext 08C7  
              __end_of_CheckByteStatus 090B                __size_of_Tmr_TmrBIrqSet 0029  
                              ?___lmul 0024                           _Led_MainTask 0C9F  
                              ?___wmul 0020                          _ScheduleTasks 034A  
           __end_of_CheckStopBitStatus 0915                             __pintentry 0004  
                   ClearRxBuffer@Index 0075                    ??_Mcu_ConfigPullUps 0074  
                       ___lmul@product 002C                __size_of_CheckAckStatus 000A  
                 ??_I2c_UpdateTxBuffer 0020                         SetOutChSts@Sts 0074  
             i1GenerateEvt@EventStatus 0072          __size_of_LedBlinkStateMachine 0090  
                  Wdg_MainTask@Options 003C                            _SetOutChSts 0A66  
               __size_of_ClearRxBuffer 0010                                _SSP1ADD 0212  
                 _Mcu_EnableInterrupts 08B4                 __size_of_ClearTxBuffer 0010  
                              _SSP1BUF 0211                                _SSP1MSK 0213  
                     ?_I2cSlv_MainTask 003C                        _I2cWriteRequest 00E0  
       Led_SetLedPulseTime@PulseTimeMs 0074                  __end_of_MainInterrupt 002B  
                __end_of_MainScheduler 09B1                                _Led1Sts 00E8  
            __end_of_Mcu_ConfigPullUps 1000                  ??_Led_SetLedPulseTime 0076  
        I2c_DataReceiveSm@ErrorCounter 00B0                            ?_StringCopy 0020  
                  __size_of_ReceiveEvt 0021                             ??_TmrBInit 0020  
                       ?_ScheduleTasks 0070                        __size_of___lmul 0030  
                              ___lldiv 0E74                        __size_of___wmul 001C  
                              ___lwdiv 0CD2                                ___lwmod 0BE0  
           __size_of_Adc_InitAdcModule 0037                       _ControlLedDirect 09B1  
                            _I2cConfig 00B2                              _I2cPacket 239D  
                Tmr_TmrBIrqSet@TmrNumb 0075                                __ptext1 08EE  
                              __ptext2 08C0                                __ptext3 08B4  
                              __ptext4 0A1D                                __ptext5 0DDA  
                              __ptext6 0294                                __ptext7 0A7F  
                              __ptext8 0C0D                                __ptext9 0E74  
                __size_of_Mcu_ClearWdg 0002                                _dpowers 100B  
              __end_of_UpdateRelaysSts 0B64                              _T2CONbits 001C  
                        ?_Tmr_StartTmr 0070                            ?_SystemInit 0070  
                    ??_InitializeTasks 0058                              _T4CONbits 0417  
                      _Tmr2IsrCallback 00A8                  ?_Mcu_EnableInterrupts 0070  
                            _T6CONbits 041E          I2c_SetI2cAddress@SlaveAddress 0074  
                         ?_Led_InitSeq 0070                    Mcu_SetWdgSts@WdgSts 0074  
                              clrloop0 0939                   end_of_initialization 00A1  
                         ?_GenerateEvt 0070                 _MainSystemTimebaseFlag 00E9  
                              init_ram 0944             __end_of_Mcu_SetDieTempMode 08DE  
                              initloop 0945                __size_of_SetLedBehavSts 0043  
                      ___lldiv@divisor 0020              __size_of_Led_SetLedStatus 0010  
                 __end_of_LowPowerMode 0938                           ??_BoardReset 0074  
                      ___lldiv@counter 002C                          _ClearRxBuffer 0980  
                        _ClearTxBuffer 0990                          StringCopy@Len 0023  
                     ?_CheckByteStatus 0070                           _Mcu_ClearWdg 0002  
             ??_StdS_ManageStdServices 0030                                utoa@buf 002F  
                              utoa@val 0027          __size_of_LedPulseStateMachine 0068  
                __size_of_InitSchTimer 0017                   __end_of_Wdg_MainTask 0A06  
                            _PORTAbits 000C                              _PORTCbits 000E  
        Mcu_SetDieTempMode@DieTempMode 0074               __size_of_GenerateImpulse 007A  
                       ??_Tmr_StartTmr 0074                       _InterruptCounter 00A2  
                     __CFG_FOSC$INTOSC 0000                      StringCopy@DestStr 0022  
                      _Tmr4IsrCallback 00A6                              _TRISAbits 008C  
                            _TRISCbits 008E                    __size_of_StringCopy 0023  
                _I2c_SetI2cAddressMask 07FB                    _Adc_StartConversion 08B1  
                   __end_of_BoardReset 08B1            I2c_DataReceiveSm@I2cRxState 0065  
                    ?_Mcu_SetWdgPeriod 0070              Tmr_TmrBPrSet@TmrBPrCfgSts 003D  
           __size_of_Mcu_ConfigPullUps 006F                              _Led1Blink 00D1  
                            _CmdBuffer 01A0                     ??_Mcu_SetWdgPeriod 0074  
                            _Led1Pulse 00DA                __size_of_Adc_GetConvSts 0004  
                       ?_ClearRxBuffer 0070                        ??_ScheduleTasks 0058  
                       _Tmr_TmrBConfig 0DDA                Tmr_TmrBPrSet@Postscaler 0033  
                    App_MainTask@F3860 0154                      App_MainTask@F3846 0148  
               GenerateImpulse@Impulse 0024                  __end_of_Mcu_SetWdgSts 08D6  
                         _InitSchTimer 0A1D                         ?_ClearTxBuffer 0070  
                  __size_of_SystemInit 0009                         _Tmr_TmrBIrqSet 0B8C  
          Mcu_SetDieTempSts@DieTempSts 0074                   ?_Adc_StartConversion 0070  
           Adc_InitAdcModule@AdcConfig 0074                         __end_of___lmul 0C3D  
                       _CheckAckStatus 08F7                         __end_of___wmul 0A9B  
              __size_of_Adc_ConfigAnCh 004B                      App_MainTask@WpuCh 0046  
                        __pidataCOMMON 08AB                           ??_ReceiveEvt 0074  
                     ?_UpdateRelaysSts 0070                 ??_Mcu_EnableInterrupts 0074  
                  start_initialization 002D                              _Mcu_Reset 08AC  
                      _Tmr6IsrCallback 00A4                              _RepBuffer 0220  
           I2c_InitI2cModule@I2cConfig 0022           __size_of_I2cSlv_I2cDrvHandle 008F  
                            _Relay1Set 00C7                              _Relay2Set 00BD  
                            _Relay1Sts 0077                              _Relay2Sts 0076  
             __size_of_LedStateMachine 0031                 __end_of_Tmr_TmrBConfig 0E25  
               __end_of_Tmr_TmrBIrqSet 0BB5                              _TaskTable 0120  
                          _SystemState 0060                 Led_SetLedBlinkTime@Led 0074  
                   __end_of_ReceiveEvt 0AFA                __size_of_ManageProtocol 0084  
                ??_Adc_StartConversion 0074                  Tmr_TmrBConfig@TmrNumb 0044  
               __end_of_CheckAckStatus 0901                               ??___lmul 0076  
              Led_InitSeq@DelayCounter 00A0                               ??___wmul 0074  
                    __size_of_TmrBInit 007B                           _RepBufferLen 00AF  
      __size_of_StdS_ManageStdServices 00F4                            __pdataBANK0 0068  
                          __pdataBANK1 00E9                            __pdataBANK2 0120  
                   ClearTxBuffer@Index 0075                 __size_ofi1_GenerateEvt 0021  
                  Tmr_StartTmr@TmrNumb 0074            __end_of_Led_SetLedBlinkTime 0A66  
                          __pbssBIGRAM 239D             __end_of_StdS_SetI2cAddress 0C6E  
                   __end_of_TaskNumber 1002                 ?_I2c_SetI2cAddressMask 0070  
                          __pbssCOMMON 0076                           ?_SetOutChSts 0074  
                           ?_Mcu_Reset 0070                              ___latbits 0002  
                App_MainTask@AdcConfig 0052                          __pcstackBANK0 0020  
                   _CheckStopBitStatus 090B                 GenerateEvt@EventStatus 0020  
                    ??_GenerateImpulse 0020               __end_of_ControlLedDirect 09C5  
                 __size_of_Led_InitSeq 004F                  __size_of_LowPowerMode 000C  
                  ?_CheckStopBitStatus 0070           __end_of_LedBlinkStateMachine 0536  
                      ??_ClearRxBuffer 0074                   __size_of_GenerateEvt 0022  
                      ?_Tmr_TmrBConfig 0042                         _SetLedBehavSts 0D07  
                      ??_ClearTxBuffer 0074                        ?_Tmr_TmrBIrqSet 0074  
                 __end_of_Tmr_StartTmr 0A1D                           ??_StringCopy 0024  
                     _Led_SetLedStatus 0950                 __size_of_I2c_SetConfig 0016  
                     ___lwdiv@dividend 0022                       GenerateEvt@Event 0021  
               __size_of_Tmr_TmrBPrSet 00B6                  __size_of_Wdg_MainTask 0016  
                    _Adc_SelectChannel 0920                App_MainTask@AnalogChSel 003E  
                      ?_CheckAckStatus 0070                Tmr_TmrBIrqSet@TmrIrqSts 0074  
                      _InitializeTasks 0D4A                               ?___lldiv 0020  
                  _I2cReplyPacketReady 0066                               ?___lwdiv 0020  
                             ?___lwmod 0020                     ?_Adc_SelectChannel 0070  
                 ??_CheckStopBitStatus 0074                              __pswtext1 0800  
          __size_of_I2c_UpdateTxBuffer 001D                            _I2cRxBuffer 0320  
             I2c_DataReceiveSm@Options 003C                  Adc_ConfigAnCh@AnChSel 0074  
                          _I2cTxBuffer 02A0                           ??_SystemInit 0076  
       InitializeTasks@ActiveTaskIndex 005C                    ??_Adc_SelectChannel 0074  
                       __size_of_AppSm 002B                           _LowPowerMode 092C  
                     __CFG_WDTE$SWDTEN 0000                     __end_of_StringCopy 0B3F  
          __end_of_Led_SetLedPulseTime 0980                       ___lwdiv@quotient 0025  
               _StdS_ManageStdServices 01A0                 __end_of_SetLedBehavSts 0D4A  
                        i1_GenerateEvt 0AB8                           _Wdg_MainTask 09F0  
                       ___wmul@product 0074                               _LATAbits 010C  
                             _LATCbits 010E                         _Adc_GetConvSts 08B7  
                            clear_ram0 0938               __size_of_I2cSlv_MainTask 0015  
              LedPulseStateMachine@Led 0027                               _PIE1bits 0091  
                             _PIE3bits 0093                          _I2cSetAddress 00E2  
            __end_of_Adc_SelectChannel 092C                      _I2c_InitI2cModule 03FA  
                             _PIR1bits 0011                               _PIR3bits 0013  
                    ??_LedStateMachine 002E             Adc_GetConvResult@AdcResult 0021  
                   __end_of_SystemInit 08F7                     ?_I2c_InitI2cModule 0070  
                             _SSP1CON1 0215                               _SSP1CON2 0216  
                             _SSP1CON3 0217                               _SSP1STAT 0214  
                       _Adc_ConfigAnCh 0D8F                     _Mcu_SetDieTempMode 08D6  
                   Led_InitSeq@Counter 00AD                 __size_of_MainInterrupt 0027  
           I2c_DataReceiveSm@I2cRxFlag 0078                 __size_of_MainScheduler 0011  
                           _ADCON0bits 009D                             _ADCON1bits 009E  
                    ___wmul@multiplier 0020                    ??_I2c_InitI2cModule 0020  
              __size_of_Mcu_InitIntOsc 0007                               _WPUAbits 020C  
                             _WPUCbits 020E                          _I2c_SetConfig 09DA  
                  ?_Mcu_SetDieTempMode 0070                            ??_Mcu_Reset 0074  
                        _Tmr_TmrBPrSet 0294                      ___lmul@multiplier 0024  
               I2cSlv_MainTask@Options 003C           __end_of_LedPulseStateMachine 0F91  
                       ?i1_GenerateEvt 0070               Tmr_TmrBConfig@TmrBConfig 0042  
                      ?_SetLedBehavSts 0070                 __end_of_Adc_GetConvSts 08BB  
         LedBlinkStateMachine@LedBlink 0075                          ?_App_MainTask 003C  
            __end_of_I2c_InitI2cModule 04A6                      _Adc_GetConvResult 0960  
              __end_of_InitializeTasks 0D8F                   ??_Mcu_SetDieTempMode 0074  
                             _TmrBInit 06CF                     ?_Adc_GetConvResult 0074  
                       _ManageProtocol 064B                   Tmr_TmrBPrSet@Divisor 003E  
               __end_of_Adc_ConfigAnCh 0DDA              __size_of_Mcu_SetWdgPeriod 000B  
                     __size_of___lldiv 0053                    ??_Adc_GetConvResult 0020  
                  _I2cSlv_I2cDrvHandle 0536                       __size_of___lwdiv 0035  
                 Tmr_TmrBPrSet@TmrNumb 003C                       __size_of___lwmod 002D  
                    _GetDieTemperature 0A34                             _ANSELAbits 018C  
                           _ANSELCbits 018E               __size_of_CheckByteStatus 000A  
                 _LedBlinkStateMachine 04A6                         ?_I2c_SetConfig 0070  
                   ?_GetDieTemperature 0023                         ?_Tmr_TmrBPrSet 0030  
                      ___lwdiv@divisor 0020                        ___lwdiv@counter 0024  
                             __ptext10 0B8C                               __ptext11 0A06  
                             __ptext20 09F0                               __ptext12 06CF  
                             __ptext21 0915                               __ptext13 09A0  
                             __ptext30 09DA                               __ptext22 0002  
                             __ptext14 034A                               __ptext31 03FA  
                             __ptext23 0E25                               __ptext15 0D4A  
                             __ptext40 08D6                               __ptext32 0990  
                             __ptext24 0C6E                               __ptext16 05C5  
                             __ptext41 0F91                               __ptext33 0980  
                             __ptext25 0F29                               __ptext17 0C9F  
                             __ptext50 0BE0                               __ptext42 074A  
                             __ptext34 0536                               __ptext26 04A6  
                             __ptext18 09C5                               __ptext51 0CD2  
                             __ptext43 0BB5                               __ptext35 0A9B  
                             __ptext27 090B                               __ptext19 00A5  
                             __ptext60 0920                               __ptext52 0B1C  
                             __ptext44 0C3D                               __ptext36 07FB  
                             __ptext28 0901                               __ptext61 08B7  
                             __ptext53 0D07                               __ptext45 064B  
                             __ptext37 08BB                               __ptext29 08F7  
                             __ptext70 0D8F                               __ptext62 0960  
                             __ptext54 0970                               __ptext46 0B3F  
                             __ptext38 08E6                               __ptext63 0AFA  
                             __ptext55 0A4D                               __ptext47 0A66  
                             __ptext39 08DE                               __ptext72 0AB8  
                             __ptext64 09B1                               __ptext56 092C  
                             __ptext48 01A0                               __ptext65 0950  
                             __ptext57 08CE                               __ptext49 0EC7  
                             __ptext66 08AE                               __ptext58 0A34  
                             __ptext67 08AC                               __ptext59 08B1  
                             __ptext68 0AD9                               __ptext69 07C4  
                         _SSP1CON1bits 0215                   __size_of_SetOutChSts 0019  
              I2c_DataReceiveSm@OpType 0063                    ??_GetDieTemperature 0076  
                 ?_I2cSlv_I2cDrvHandle 0070                  __size_of_Tmr_StartTmr 0017  
            __end_of_Adc_GetConvResult 0970                         ??_App_MainTask 003D  
                        _MainInterrupt 0004                     i1GenerateEvt@Event 0071  
                      ?_Adc_GetConvSts 0070                          _MainScheduler 09A0  
                   TmrBInit@Postscaler 0075                          __size_of_main 0007  
       I2c_DataReceiveSm@AddressStored 00B1                          __size_of_utoa 0062  
                  Led_MainTask@Options 003C                 __end_of_ManageProtocol 06CF  
         I2c_UpdateTxBuffer@DataBuffer 0022             __size_of_Adc_SelectChannel 000C  
                __end_of_ScheduleTasks 03FA                          ?_Led_MainTask 003C  
                      ?_Adc_ConfigAnCh 0070                    Led_SetLedStatus@Led 0020  
                             int$flags 007E                      _Mcu_SetDieTempSts 08DE  
                    ??_I2cSlv_MainTask 0076                        StringCopy@Index 0074  
         ScheduleTasks@ActiveTaskIndex 005E              __end_of_GetDieTemperature 0A4D  
                   ?_Mcu_SetDieTempSts 0070                ??_I2c_SetI2cAddressMask 0074  
                      _GenerateImpulse 074A                  ?_LedBlinkStateMachine 0070  
                          _OSCSTATbits 009A                             _INTCONbits 000B  
                         _Tmr_StartTmr 0A06               __end_of_Led_SetLedStatus 0960  
                  ??_Mcu_SetDieTempSts 0074                             _FVRCONbits 0117  
                 _I2cNewTxNotification 00E4          __size_of_Mcu_EnableInterrupts 0003  
               __size_of_Mcu_SetWdgSts 0008                        ??i1_GenerateEvt 0070  
                    _I2c_SetI2cAddress 08BB                       ??_Tmr_TmrBConfig 0043  
                ??_I2cSlv_I2cDrvHandle 0024                       ??_Tmr_TmrBIrqSet 0075  
                             intlevel1 0000                         ?_MainInterrupt 0070  
             __size_of_UpdateRelaysSts 0025                      TmrBInit@Prescaler 0074  
                       ?_MainScheduler 0070                     ?_I2c_SetI2cAddress 0070  
             I2c_UpdateTxBuffer@Length 0074                      ?_ControlLedDirect 0070  
               Led_SetLedPulseTime@Led 0020                       ___lwmod@dividend 0022  
               I2c_DataReceiveSm@Index 0044            __end_of_Adc_StartConversion 08B4  
                   _StdS_SetI2cAddress 0C3D                       ___lldiv@dividend 0024  
               Mcu_ConfigPullUps@WpuCh 0074             __size_of_I2c_InitI2cModule 00AC  
               SetLedBehavSts@LedBehav 0025                      __CFG_CLKOUTEN$OFF 0000  
                     ??_CheckAckStatus 0074                        ?_ManageProtocol 0070  
                   ??_ControlLedDirect 0076             I2c_DataReceiveSm@RxCounter 0062  
                     ?_InitializeTasks 0070                Led_InitSeq@InitSeqState 00AC  
                Led_InitSeq@LedInitSts 0079                             _OSCCONbits 0099  
                  ??_I2c_SetI2cAddress 0074              __end_of_Mcu_SetDieTempSts 08E6  
                       ??_Led_MainTask 003D             I2c_DataReceiveSm@TxCounter 0061  
                  ?_StdS_SetI2cAddress 0070                   _LedPulseStateMachine 0F29  
                      ??_I2c_SetConfig 0074                          __pstringtext1 100B  
                        __pstringtext2 1000                          __pstringtext3 1015  
                        __pstringtext4 101D                          __pstringtext5 1023  
                        __pstringtext6 0000                               utoa@base 0029  
                       _Mcu_InitIntOsc 08C0                        ??_Tmr_TmrBPrSet 0034  
              I2c_UpdateTxBuffer@Index 0023                       ___lldiv@quotient 0028  
                      ___lwmod@divisor 0020                ?_StdS_ManageStdServices 0070  
                      ___lwmod@counter 0075              __end_of_I2c_SetI2cAddress 08C0  
                ReceiveEvt@EventStatus 0074                   ??_StdS_SetI2cAddress 0074  
                        ??_Led_InitSeq 0021                             _WDTCONbits 0097  
                    ??_CheckByteStatus 0074           __size_of_Led_SetLedBlinkTime 0019  
                        ??_GenerateEvt 0074                        _LedStateMachine 0C6E  
                      TmrBInit@TmrNumb 0021             __size_of_Adc_GetConvResult 0010  
               Led_SetLedStatus@LedSts 0074  I2c_SetI2cAddressMask@SlaveAddressMask 0074  
I2cSlv_I2cDrvHandle@I2cReceiveMsgState 00AE                  __end_of_ClearRxBuffer 0990  
                __end_of_ClearTxBuffer 09A0                __end_of_GenerateImpulse 07C4  
                        ?_Mcu_ClearWdg 0070                          _Mcu_SetWdgSts 08CE  
