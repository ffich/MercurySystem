

Microchip Technology PIC LITE Macro Assembler V1.38 build -256452561 
                                                                                               Sun Mar 24 11:34:41 2019

Microchip Technology Omniscient Code Generator v1.38 (Free mode) build 201607010351
     1                           	processor	16F1829
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	idataCOMMON,global,class=CODE,delta=2
     5                           	psect	idataBANK1,global,class=CODE,delta=2
     6                           	psect	idataBANK2,global,class=CODE,delta=2
     7                           	psect	stringtext,global,class=STRCODE,delta=2
     8                           	psect	cinit,global,class=CODE,merge=1,delta=2
     9                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
    10                           	psect	dataCOMMON,global,class=COMMON,space=1,delta=1
    11                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    12                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    13                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1
    14                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1
    15                           	psect	dataBANK2,global,class=BANK2,space=1,delta=1
    16                           	psect	bssBANK3,global,class=BANK3,space=1,delta=1
    17                           	psect	bssBANK4,global,class=BANK4,space=1,delta=1
    18                           	psect	bssBANK5,global,class=BANK5,space=1,delta=1
    19                           	psect	bssBANK6,global,class=BANK6,space=1,delta=1
    20                           	psect	inittext,global,class=CODE,delta=2
    21                           	psect	clrtext,global,class=CODE,delta=2
    22                           	psect	cstackBANK2,global,class=BANK2,space=1,delta=1
    23                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    24                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    25                           	psect	maintext,global,class=CODE,merge=1,split=1,delta=2
    26                           	psect	text1,local,class=CODE,merge=1,delta=2
    27                           	psect	text2,local,class=CODE,merge=1,delta=2
    28                           	psect	text3,local,class=CODE,merge=1,delta=2
    29                           	psect	text4,local,class=CODE,merge=1,delta=2
    30                           	psect	text5,local,class=CODE,merge=1,delta=2
    31                           	psect	text6,local,class=CODE,merge=1,delta=2
    32                           	psect	text7,local,class=CODE,merge=1,delta=2
    33                           	psect	text8,local,class=CODE,merge=1,delta=2
    34                           	psect	text9,local,class=CODE,merge=1,delta=2
    35                           	psect	text10,local,class=CODE,merge=1,delta=2
    36                           	psect	text11,local,class=CODE,merge=1,delta=2
    37                           	psect	text12,local,class=CODE,merge=1,delta=2
    38                           	psect	text13,local,class=CODE,merge=1,delta=2
    39                           	psect	text14,local,class=CODE,merge=1,delta=2
    40                           	psect	text15,local,class=CODE,merge=1,delta=2
    41                           	psect	text16,local,class=CODE,merge=1,delta=2
    42                           	psect	text17,local,class=CODE,merge=1,delta=2
    43                           	psect	text18,local,class=CODE,merge=1,delta=2
    44                           	psect	text19,local,class=CODE,merge=1,delta=2
    45                           	psect	text20,local,class=CODE,merge=1,delta=2
    46                           	psect	swtext1,local,class=CONST,delta=2
    47                           	psect	text21,local,class=CODE,merge=1,delta=2
    48                           	psect	swtext2,local,class=CONST,delta=2
    49                           	psect	text22,local,class=CODE,merge=1,delta=2
    50                           	psect	text23,local,class=CODE,merge=1,delta=2
    51                           	psect	text24,local,class=CODE,merge=1,delta=2
    52                           	psect	text25,local,class=CODE,merge=1,delta=2
    53                           	psect	text26,local,class=CODE,merge=1,delta=2
    54                           	psect	text27,local,class=CODE,merge=1,delta=2
    55                           	psect	text28,local,class=CODE,merge=1,delta=2
    56                           	psect	text29,local,class=CODE,merge=1,delta=2
    57                           	psect	text30,local,class=CODE,merge=1,delta=2
    58                           	psect	text31,local,class=CODE,merge=1,delta=2
    59                           	psect	text32,local,class=CODE,merge=1,delta=2
    60                           	psect	text33,local,class=CODE,merge=1,delta=2
    61                           	psect	text34,local,class=CODE,merge=1,delta=2
    62                           	psect	text35,local,class=CODE,merge=1,delta=2
    63                           	psect	text36,local,class=CODE,merge=1,delta=2
    64                           	psect	text37,local,class=CODE,merge=1,delta=2
    65                           	psect	text38,local,class=CODE,merge=1,delta=2
    66                           	psect	text39,local,class=CODE,merge=1,delta=2
    67                           	psect	text40,local,class=CODE,merge=1,delta=2
    68                           	psect	text41,local,class=CODE,merge=1,delta=2
    69                           	psect	text42,local,class=CODE,merge=1,delta=2
    70                           	psect	text43,local,class=CODE,merge=1,delta=2
    71                           	psect	text44,local,class=CODE,merge=1,delta=2
    72                           	psect	text45,local,class=CODE,merge=1,delta=2
    73                           	psect	text46,local,class=CODE,merge=1,delta=2
    74                           	psect	text47,local,class=CODE,merge=1,delta=2
    75                           	psect	text48,local,class=CODE,merge=1,delta=2
    76                           	psect	text49,local,class=CODE,merge=1,delta=2
    77                           	psect	text50,local,class=CODE,merge=1,delta=2
    78                           	psect	text51,local,class=CODE,merge=1,delta=2
    79                           	psect	text52,local,class=CODE,merge=1,delta=2
    80                           	psect	text53,local,class=CODE,merge=1,delta=2
    81                           	psect	text54,local,class=CODE,merge=1,delta=2
    82                           	psect	text55,local,class=CODE,merge=1,delta=2
    83                           	psect	text56,local,class=CODE,merge=1,delta=2
    84                           	psect	text57,local,class=CODE,merge=1,delta=2
    85                           	psect	text58,local,class=CODE,merge=1,delta=2
    86                           	psect	text59,local,class=CODE,merge=1,delta=2
    87                           	psect	text60,local,class=CODE,merge=1,delta=2
    88                           	psect	text61,local,class=CODE,merge=1,delta=2
    89                           	psect	text62,local,class=CODE,merge=1,delta=2
    90                           	psect	text63,local,class=CODE,merge=1,delta=2
    91                           	psect	text64,local,class=CODE,merge=1,delta=2
    92                           	psect	text65,local,class=CODE,merge=1,delta=2
    93                           	psect	text66,local,class=CODE,merge=1,delta=2
    94                           	psect	text67,local,class=CODE,merge=1,delta=2
    95                           	psect	text68,local,class=CODE,merge=1,delta=2
    96                           	psect	text69,local,class=CODE,merge=1,delta=2
    97                           	psect	text70,local,class=CODE,merge=1,delta=2
    98                           	psect	intentry,global,class=CODE,delta=2
    99                           	psect	text72,local,class=CODE,merge=1,delta=2
   100                           	psect	text73,local,class=CODE,merge=1,delta=2
   101                           	dabs	1,0x620,48
   102                           	dabs	1,0x5CD,35
   103                           	dabs	1,0x239D,0,_I2cPacket
   104                           	dabs	1,0x7E,2
   105  0000                     	;# 
   106  0001                     	;# 
   107  0002                     	;# 
   108  0003                     	;# 
   109  0004                     	;# 
   110  0005                     	;# 
   111  0006                     	;# 
   112  0007                     	;# 
   113  0008                     	;# 
   114  0009                     	;# 
   115  000A                     	;# 
   116  000B                     	;# 
   117  000C                     	;# 
   118  000D                     	;# 
   119  000E                     	;# 
   120  0011                     	;# 
   121  0012                     	;# 
   122  0013                     	;# 
   123  0014                     	;# 
   124  0015                     	;# 
   125  0016                     	;# 
   126  0016                     	;# 
   127  0017                     	;# 
   128  0018                     	;# 
   129  0019                     	;# 
   130  001A                     	;# 
   131  001B                     	;# 
   132  001C                     	;# 
   133  001E                     	;# 
   134  001F                     	;# 
   135  008C                     	;# 
   136  008D                     	;# 
   137  008E                     	;# 
   138  0091                     	;# 
   139  0092                     	;# 
   140  0093                     	;# 
   141  0094                     	;# 
   142  0095                     	;# 
   143  0096                     	;# 
   144  0097                     	;# 
   145  0098                     	;# 
   146  0099                     	;# 
   147  009A                     	;# 
   148  009B                     	;# 
   149  009B                     	;# 
   150  009C                     	;# 
   151  009D                     	;# 
   152  009E                     	;# 
   153  010C                     	;# 
   154  010D                     	;# 
   155  010E                     	;# 
   156  0111                     	;# 
   157  0112                     	;# 
   158  0113                     	;# 
   159  0114                     	;# 
   160  0115                     	;# 
   161  0116                     	;# 
   162  0117                     	;# 
   163  0118                     	;# 
   164  0119                     	;# 
   165  011A                     	;# 
   166  011B                     	;# 
   167  011D                     	;# 
   168  011E                     	;# 
   169  018C                     	;# 
   170  018D                     	;# 
   171  018E                     	;# 
   172  0191                     	;# 
   173  0191                     	;# 
   174  0192                     	;# 
   175  0193                     	;# 
   176  0193                     	;# 
   177  0193                     	;# 
   178  0194                     	;# 
   179  0195                     	;# 
   180  0196                     	;# 
   181  0199                     	;# 
   182  019A                     	;# 
   183  019B                     	;# 
   184  019B                     	;# 
   185  019C                     	;# 
   186  019D                     	;# 
   187  019E                     	;# 
   188  019F                     	;# 
   189  020C                     	;# 
   190  020D                     	;# 
   191  020E                     	;# 
   192  0211                     	;# 
   193  0211                     	;# 
   194  0212                     	;# 
   195  0212                     	;# 
   196  0213                     	;# 
   197  0213                     	;# 
   198  0214                     	;# 
   199  0214                     	;# 
   200  0215                     	;# 
   201  0215                     	;# 
   202  0215                     	;# 
   203  0216                     	;# 
   204  0216                     	;# 
   205  0217                     	;# 
   206  0217                     	;# 
   207  0219                     	;# 
   208  021A                     	;# 
   209  021B                     	;# 
   210  021C                     	;# 
   211  021D                     	;# 
   212  021E                     	;# 
   213  021F                     	;# 
   214  0291                     	;# 
   215  0291                     	;# 
   216  0292                     	;# 
   217  0293                     	;# 
   218  0294                     	;# 
   219  0295                     	;# 
   220  0295                     	;# 
   221  0296                     	;# 
   222  0298                     	;# 
   223  0298                     	;# 
   224  0299                     	;# 
   225  029A                     	;# 
   226  029B                     	;# 
   227  029C                     	;# 
   228  029D                     	;# 
   229  029E                     	;# 
   230  0311                     	;# 
   231  0311                     	;# 
   232  0312                     	;# 
   233  0313                     	;# 
   234  0318                     	;# 
   235  0318                     	;# 
   236  0319                     	;# 
   237  031A                     	;# 
   238  038C                     	;# 
   239  038D                     	;# 
   240  038E                     	;# 
   241  0391                     	;# 
   242  0392                     	;# 
   243  0393                     	;# 
   244  0394                     	;# 
   245  0395                     	;# 
   246  0396                     	;# 
   247  039A                     	;# 
   248  039C                     	;# 
   249  039D                     	;# 
   250  039E                     	;# 
   251  039F                     	;# 
   252  0415                     	;# 
   253  0416                     	;# 
   254  0417                     	;# 
   255  041C                     	;# 
   256  041D                     	;# 
   257  041E                     	;# 
   258  0FE4                     	;# 
   259  0FE5                     	;# 
   260  0FE6                     	;# 
   261  0FE7                     	;# 
   262  0FE8                     	;# 
   263  0FE9                     	;# 
   264  0FEA                     	;# 
   265  0FEB                     	;# 
   266  0FED                     	;# 
   267  0FEE                     	;# 
   268  0FEF                     	;# 
   269  0000                     	;# 
   270  0001                     	;# 
   271  0002                     	;# 
   272  0003                     	;# 
   273  0004                     	;# 
   274  0005                     	;# 
   275  0006                     	;# 
   276  0007                     	;# 
   277  0008                     	;# 
   278  0009                     	;# 
   279  000A                     	;# 
   280  000B                     	;# 
   281  000C                     	;# 
   282  000D                     	;# 
   283  000E                     	;# 
   284  0011                     	;# 
   285  0012                     	;# 
   286  0013                     	;# 
   287  0014                     	;# 
   288  0015                     	;# 
   289  0016                     	;# 
   290  0016                     	;# 
   291  0017                     	;# 
   292  0018                     	;# 
   293  0019                     	;# 
   294  001A                     	;# 
   295  001B                     	;# 
   296  001C                     	;# 
   297  001E                     	;# 
   298  001F                     	;# 
   299  008C                     	;# 
   300  008D                     	;# 
   301  008E                     	;# 
   302  0091                     	;# 
   303  0092                     	;# 
   304  0093                     	;# 
   305  0094                     	;# 
   306  0095                     	;# 
   307  0096                     	;# 
   308  0097                     	;# 
   309  0098                     	;# 
   310  0099                     	;# 
   311  009A                     	;# 
   312  009B                     	;# 
   313  009B                     	;# 
   314  009C                     	;# 
   315  009D                     	;# 
   316  009E                     	;# 
   317  010C                     	;# 
   318  010D                     	;# 
   319  010E                     	;# 
   320  0111                     	;# 
   321  0112                     	;# 
   322  0113                     	;# 
   323  0114                     	;# 
   324  0115                     	;# 
   325  0116                     	;# 
   326  0117                     	;# 
   327  0118                     	;# 
   328  0119                     	;# 
   329  011A                     	;# 
   330  011B                     	;# 
   331  011D                     	;# 
   332  011E                     	;# 
   333  018C                     	;# 
   334  018D                     	;# 
   335  018E                     	;# 
   336  0191                     	;# 
   337  0191                     	;# 
   338  0192                     	;# 
   339  0193                     	;# 
   340  0193                     	;# 
   341  0193                     	;# 
   342  0194                     	;# 
   343  0195                     	;# 
   344  0196                     	;# 
   345  0199                     	;# 
   346  019A                     	;# 
   347  019B                     	;# 
   348  019B                     	;# 
   349  019C                     	;# 
   350  019D                     	;# 
   351  019E                     	;# 
   352  019F                     	;# 
   353  020C                     	;# 
   354  020D                     	;# 
   355  020E                     	;# 
   356  0211                     	;# 
   357  0211                     	;# 
   358  0212                     	;# 
   359  0212                     	;# 
   360  0213                     	;# 
   361  0213                     	;# 
   362  0214                     	;# 
   363  0214                     	;# 
   364  0215                     	;# 
   365  0215                     	;# 
   366  0215                     	;# 
   367  0216                     	;# 
   368  0216                     	;# 
   369  0217                     	;# 
   370  0217                     	;# 
   371  0219                     	;# 
   372  021A                     	;# 
   373  021B                     	;# 
   374  021C                     	;# 
   375  021D                     	;# 
   376  021E                     	;# 
   377  021F                     	;# 
   378  0291                     	;# 
   379  0291                     	;# 
   380  0292                     	;# 
   381  0293                     	;# 
   382  0294                     	;# 
   383  0295                     	;# 
   384  0295                     	;# 
   385  0296                     	;# 
   386  0298                     	;# 
   387  0298                     	;# 
   388  0299                     	;# 
   389  029A                     	;# 
   390  029B                     	;# 
   391  029C                     	;# 
   392  029D                     	;# 
   393  029E                     	;# 
   394  0311                     	;# 
   395  0311                     	;# 
   396  0312                     	;# 
   397  0313                     	;# 
   398  0318                     	;# 
   399  0318                     	;# 
   400  0319                     	;# 
   401  031A                     	;# 
   402  038C                     	;# 
   403  038D                     	;# 
   404  038E                     	;# 
   405  0391                     	;# 
   406  0392                     	;# 
   407  0393                     	;# 
   408  0394                     	;# 
   409  0395                     	;# 
   410  0396                     	;# 
   411  039A                     	;# 
   412  039C                     	;# 
   413  039D                     	;# 
   414  039E                     	;# 
   415  039F                     	;# 
   416  0415                     	;# 
   417  0416                     	;# 
   418  0417                     	;# 
   419  041C                     	;# 
   420  041D                     	;# 
   421  041E                     	;# 
   422  0FE4                     	;# 
   423  0FE5                     	;# 
   424  0FE6                     	;# 
   425  0FE7                     	;# 
   426  0FE8                     	;# 
   427  0FE9                     	;# 
   428  0FEA                     	;# 
   429  0FEB                     	;# 
   430  0FED                     	;# 
   431  0FEE                     	;# 
   432  0FEF                     	;# 
   433  0000                     	;# 
   434  0001                     	;# 
   435  0002                     	;# 
   436  0003                     	;# 
   437  0004                     	;# 
   438  0005                     	;# 
   439  0006                     	;# 
   440  0007                     	;# 
   441  0008                     	;# 
   442  0009                     	;# 
   443  000A                     	;# 
   444  000B                     	;# 
   445  000C                     	;# 
   446  000D                     	;# 
   447  000E                     	;# 
   448  0011                     	;# 
   449  0012                     	;# 
   450  0013                     	;# 
   451  0014                     	;# 
   452  0015                     	;# 
   453  0016                     	;# 
   454  0016                     	;# 
   455  0017                     	;# 
   456  0018                     	;# 
   457  0019                     	;# 
   458  001A                     	;# 
   459  001B                     	;# 
   460  001C                     	;# 
   461  001E                     	;# 
   462  001F                     	;# 
   463  008C                     	;# 
   464  008D                     	;# 
   465  008E                     	;# 
   466  0091                     	;# 
   467  0092                     	;# 
   468  0093                     	;# 
   469  0094                     	;# 
   470  0095                     	;# 
   471  0096                     	;# 
   472  0097                     	;# 
   473  0098                     	;# 
   474  0099                     	;# 
   475  009A                     	;# 
   476  009B                     	;# 
   477  009B                     	;# 
   478  009C                     	;# 
   479  009D                     	;# 
   480  009E                     	;# 
   481  010C                     	;# 
   482  010D                     	;# 
   483  010E                     	;# 
   484  0111                     	;# 
   485  0112                     	;# 
   486  0113                     	;# 
   487  0114                     	;# 
   488  0115                     	;# 
   489  0116                     	;# 
   490  0117                     	;# 
   491  0118                     	;# 
   492  0119                     	;# 
   493  011A                     	;# 
   494  011B                     	;# 
   495  011D                     	;# 
   496  011E                     	;# 
   497  018C                     	;# 
   498  018D                     	;# 
   499  018E                     	;# 
   500  0191                     	;# 
   501  0191                     	;# 
   502  0192                     	;# 
   503  0193                     	;# 
   504  0193                     	;# 
   505  0193                     	;# 
   506  0194                     	;# 
   507  0195                     	;# 
   508  0196                     	;# 
   509  0199                     	;# 
   510  019A                     	;# 
   511  019B                     	;# 
   512  019B                     	;# 
   513  019C                     	;# 
   514  019D                     	;# 
   515  019E                     	;# 
   516  019F                     	;# 
   517  020C                     	;# 
   518  020D                     	;# 
   519  020E                     	;# 
   520  0211                     	;# 
   521  0211                     	;# 
   522  0212                     	;# 
   523  0212                     	;# 
   524  0213                     	;# 
   525  0213                     	;# 
   526  0214                     	;# 
   527  0214                     	;# 
   528  0215                     	;# 
   529  0215                     	;# 
   530  0215                     	;# 
   531  0216                     	;# 
   532  0216                     	;# 
   533  0217                     	;# 
   534  0217                     	;# 
   535  0219                     	;# 
   536  021A                     	;# 
   537  021B                     	;# 
   538  021C                     	;# 
   539  021D                     	;# 
   540  021E                     	;# 
   541  021F                     	;# 
   542  0291                     	;# 
   543  0291                     	;# 
   544  0292                     	;# 
   545  0293                     	;# 
   546  0294                     	;# 
   547  0295                     	;# 
   548  0295                     	;# 
   549  0296                     	;# 
   550  0298                     	;# 
   551  0298                     	;# 
   552  0299                     	;# 
   553  029A                     	;# 
   554  029B                     	;# 
   555  029C                     	;# 
   556  029D                     	;# 
   557  029E                     	;# 
   558  0311                     	;# 
   559  0311                     	;# 
   560  0312                     	;# 
   561  0313                     	;# 
   562  0318                     	;# 
   563  0318                     	;# 
   564  0319                     	;# 
   565  031A                     	;# 
   566  038C                     	;# 
   567  038D                     	;# 
   568  038E                     	;# 
   569  0391                     	;# 
   570  0392                     	;# 
   571  0393                     	;# 
   572  0394                     	;# 
   573  0395                     	;# 
   574  0396                     	;# 
   575  039A                     	;# 
   576  039C                     	;# 
   577  039D                     	;# 
   578  039E                     	;# 
   579  039F                     	;# 
   580  0415                     	;# 
   581  0416                     	;# 
   582  0417                     	;# 
   583  041C                     	;# 
   584  041D                     	;# 
   585  041E                     	;# 
   586  0FE4                     	;# 
   587  0FE5                     	;# 
   588  0FE6                     	;# 
   589  0FE7                     	;# 
   590  0FE8                     	;# 
   591  0FE9                     	;# 
   592  0FEA                     	;# 
   593  0FEB                     	;# 
   594  0FED                     	;# 
   595  0FEE                     	;# 
   596  0FEF                     	;# 
   597  0000                     	;# 
   598  0001                     	;# 
   599  0002                     	;# 
   600  0003                     	;# 
   601  0004                     	;# 
   602  0005                     	;# 
   603  0006                     	;# 
   604  0007                     	;# 
   605  0008                     	;# 
   606  0009                     	;# 
   607  000A                     	;# 
   608  000B                     	;# 
   609  000C                     	;# 
   610  000D                     	;# 
   611  000E                     	;# 
   612  0011                     	;# 
   613  0012                     	;# 
   614  0013                     	;# 
   615  0014                     	;# 
   616  0015                     	;# 
   617  0016                     	;# 
   618  0016                     	;# 
   619  0017                     	;# 
   620  0018                     	;# 
   621  0019                     	;# 
   622  001A                     	;# 
   623  001B                     	;# 
   624  001C                     	;# 
   625  001E                     	;# 
   626  001F                     	;# 
   627  008C                     	;# 
   628  008D                     	;# 
   629  008E                     	;# 
   630  0091                     	;# 
   631  0092                     	;# 
   632  0093                     	;# 
   633  0094                     	;# 
   634  0095                     	;# 
   635  0096                     	;# 
   636  0097                     	;# 
   637  0098                     	;# 
   638  0099                     	;# 
   639  009A                     	;# 
   640  009B                     	;# 
   641  009B                     	;# 
   642  009C                     	;# 
   643  009D                     	;# 
   644  009E                     	;# 
   645  010C                     	;# 
   646  010D                     	;# 
   647  010E                     	;# 
   648  0111                     	;# 
   649  0112                     	;# 
   650  0113                     	;# 
   651  0114                     	;# 
   652  0115                     	;# 
   653  0116                     	;# 
   654  0117                     	;# 
   655  0118                     	;# 
   656  0119                     	;# 
   657  011A                     	;# 
   658  011B                     	;# 
   659  011D                     	;# 
   660  011E                     	;# 
   661  018C                     	;# 
   662  018D                     	;# 
   663  018E                     	;# 
   664  0191                     	;# 
   665  0191                     	;# 
   666  0192                     	;# 
   667  0193                     	;# 
   668  0193                     	;# 
   669  0193                     	;# 
   670  0194                     	;# 
   671  0195                     	;# 
   672  0196                     	;# 
   673  0199                     	;# 
   674  019A                     	;# 
   675  019B                     	;# 
   676  019B                     	;# 
   677  019C                     	;# 
   678  019D                     	;# 
   679  019E                     	;# 
   680  019F                     	;# 
   681  020C                     	;# 
   682  020D                     	;# 
   683  020E                     	;# 
   684  0211                     	;# 
   685  0211                     	;# 
   686  0212                     	;# 
   687  0212                     	;# 
   688  0213                     	;# 
   689  0213                     	;# 
   690  0214                     	;# 
   691  0214                     	;# 
   692  0215                     	;# 
   693  0215                     	;# 
   694  0215                     	;# 
   695  0216                     	;# 
   696  0216                     	;# 
   697  0217                     	;# 
   698  0217                     	;# 
   699  0219                     	;# 
   700  021A                     	;# 
   701  021B                     	;# 
   702  021C                     	;# 
   703  021D                     	;# 
   704  021E                     	;# 
   705  021F                     	;# 
   706  0291                     	;# 
   707  0291                     	;# 
   708  0292                     	;# 
   709  0293                     	;# 
   710  0294                     	;# 
   711  0295                     	;# 
   712  0295                     	;# 
   713  0296                     	;# 
   714  0298                     	;# 
   715  0298                     	;# 
   716  0299                     	;# 
   717  029A                     	;# 
   718  029B                     	;# 
   719  029C                     	;# 
   720  029D                     	;# 
   721  029E                     	;# 
   722  0311                     	;# 
   723  0311                     	;# 
   724  0312                     	;# 
   725  0313                     	;# 
   726  0318                     	;# 
   727  0318                     	;# 
   728  0319                     	;# 
   729  031A                     	;# 
   730  038C                     	;# 
   731  038D                     	;# 
   732  038E                     	;# 
   733  0391                     	;# 
   734  0392                     	;# 
   735  0393                     	;# 
   736  0394                     	;# 
   737  0395                     	;# 
   738  0396                     	;# 
   739  039A                     	;# 
   740  039C                     	;# 
   741  039D                     	;# 
   742  039E                     	;# 
   743  039F                     	;# 
   744  0415                     	;# 
   745  0416                     	;# 
   746  0417                     	;# 
   747  041C                     	;# 
   748  041D                     	;# 
   749  041E                     	;# 
   750  0FE4                     	;# 
   751  0FE5                     	;# 
   752  0FE6                     	;# 
   753  0FE7                     	;# 
   754  0FE8                     	;# 
   755  0FE9                     	;# 
   756  0FEA                     	;# 
   757  0FEB                     	;# 
   758  0FED                     	;# 
   759  0FEE                     	;# 
   760  0FEF                     	;# 
   761  0000                     	;# 
   762  0001                     	;# 
   763  0002                     	;# 
   764  0003                     	;# 
   765  0004                     	;# 
   766  0005                     	;# 
   767  0006                     	;# 
   768  0007                     	;# 
   769  0008                     	;# 
   770  0009                     	;# 
   771  000A                     	;# 
   772  000B                     	;# 
   773  000C                     	;# 
   774  000D                     	;# 
   775  000E                     	;# 
   776  0011                     	;# 
   777  0012                     	;# 
   778  0013                     	;# 
   779  0014                     	;# 
   780  0015                     	;# 
   781  0016                     	;# 
   782  0016                     	;# 
   783  0017                     	;# 
   784  0018                     	;# 
   785  0019                     	;# 
   786  001A                     	;# 
   787  001B                     	;# 
   788  001C                     	;# 
   789  001E                     	;# 
   790  001F                     	;# 
   791  008C                     	;# 
   792  008D                     	;# 
   793  008E                     	;# 
   794  0091                     	;# 
   795  0092                     	;# 
   796  0093                     	;# 
   797  0094                     	;# 
   798  0095                     	;# 
   799  0096                     	;# 
   800  0097                     	;# 
   801  0098                     	;# 
   802  0099                     	;# 
   803  009A                     	;# 
   804  009B                     	;# 
   805  009B                     	;# 
   806  009C                     	;# 
   807  009D                     	;# 
   808  009E                     	;# 
   809  010C                     	;# 
   810  010D                     	;# 
   811  010E                     	;# 
   812  0111                     	;# 
   813  0112                     	;# 
   814  0113                     	;# 
   815  0114                     	;# 
   816  0115                     	;# 
   817  0116                     	;# 
   818  0117                     	;# 
   819  0118                     	;# 
   820  0119                     	;# 
   821  011A                     	;# 
   822  011B                     	;# 
   823  011D                     	;# 
   824  011E                     	;# 
   825  018C                     	;# 
   826  018D                     	;# 
   827  018E                     	;# 
   828  0191                     	;# 
   829  0191                     	;# 
   830  0192                     	;# 
   831  0193                     	;# 
   832  0193                     	;# 
   833  0193                     	;# 
   834  0194                     	;# 
   835  0195                     	;# 
   836  0196                     	;# 
   837  0199                     	;# 
   838  019A                     	;# 
   839  019B                     	;# 
   840  019B                     	;# 
   841  019C                     	;# 
   842  019D                     	;# 
   843  019E                     	;# 
   844  019F                     	;# 
   845  020C                     	;# 
   846  020D                     	;# 
   847  020E                     	;# 
   848  0211                     	;# 
   849  0211                     	;# 
   850  0212                     	;# 
   851  0212                     	;# 
   852  0213                     	;# 
   853  0213                     	;# 
   854  0214                     	;# 
   855  0214                     	;# 
   856  0215                     	;# 
   857  0215                     	;# 
   858  0215                     	;# 
   859  0216                     	;# 
   860  0216                     	;# 
   861  0217                     	;# 
   862  0217                     	;# 
   863  0219                     	;# 
   864  021A                     	;# 
   865  021B                     	;# 
   866  021C                     	;# 
   867  021D                     	;# 
   868  021E                     	;# 
   869  021F                     	;# 
   870  0291                     	;# 
   871  0291                     	;# 
   872  0292                     	;# 
   873  0293                     	;# 
   874  0294                     	;# 
   875  0295                     	;# 
   876  0295                     	;# 
   877  0296                     	;# 
   878  0298                     	;# 
   879  0298                     	;# 
   880  0299                     	;# 
   881  029A                     	;# 
   882  029B                     	;# 
   883  029C                     	;# 
   884  029D                     	;# 
   885  029E                     	;# 
   886  0311                     	;# 
   887  0311                     	;# 
   888  0312                     	;# 
   889  0313                     	;# 
   890  0318                     	;# 
   891  0318                     	;# 
   892  0319                     	;# 
   893  031A                     	;# 
   894  038C                     	;# 
   895  038D                     	;# 
   896  038E                     	;# 
   897  0391                     	;# 
   898  0392                     	;# 
   899  0393                     	;# 
   900  0394                     	;# 
   901  0395                     	;# 
   902  0396                     	;# 
   903  039A                     	;# 
   904  039C                     	;# 
   905  039D                     	;# 
   906  039E                     	;# 
   907  039F                     	;# 
   908  0415                     	;# 
   909  0416                     	;# 
   910  0417                     	;# 
   911  041C                     	;# 
   912  041D                     	;# 
   913  041E                     	;# 
   914  0FE4                     	;# 
   915  0FE5                     	;# 
   916  0FE6                     	;# 
   917  0FE7                     	;# 
   918  0FE8                     	;# 
   919  0FE9                     	;# 
   920  0FEA                     	;# 
   921  0FEB                     	;# 
   922  0FED                     	;# 
   923  0FEE                     	;# 
   924  0FEF                     	;# 
   925  0000                     	;# 
   926  0001                     	;# 
   927  0002                     	;# 
   928  0003                     	;# 
   929  0004                     	;# 
   930  0005                     	;# 
   931  0006                     	;# 
   932  0007                     	;# 
   933  0008                     	;# 
   934  0009                     	;# 
   935  000A                     	;# 
   936  000B                     	;# 
   937  000C                     	;# 
   938  000D                     	;# 
   939  000E                     	;# 
   940  0011                     	;# 
   941  0012                     	;# 
   942  0013                     	;# 
   943  0014                     	;# 
   944  0015                     	;# 
   945  0016                     	;# 
   946  0016                     	;# 
   947  0017                     	;# 
   948  0018                     	;# 
   949  0019                     	;# 
   950  001A                     	;# 
   951  001B                     	;# 
   952  001C                     	;# 
   953  001E                     	;# 
   954  001F                     	;# 
   955  008C                     	;# 
   956  008D                     	;# 
   957  008E                     	;# 
   958  0091                     	;# 
   959  0092                     	;# 
   960  0093                     	;# 
   961  0094                     	;# 
   962  0095                     	;# 
   963  0096                     	;# 
   964  0097                     	;# 
   965  0098                     	;# 
   966  0099                     	;# 
   967  009A                     	;# 
   968  009B                     	;# 
   969  009B                     	;# 
   970  009C                     	;# 
   971  009D                     	;# 
   972  009E                     	;# 
   973  010C                     	;# 
   974  010D                     	;# 
   975  010E                     	;# 
   976  0111                     	;# 
   977  0112                     	;# 
   978  0113                     	;# 
   979  0114                     	;# 
   980  0115                     	;# 
   981  0116                     	;# 
   982  0117                     	;# 
   983  0118                     	;# 
   984  0119                     	;# 
   985  011A                     	;# 
   986  011B                     	;# 
   987  011D                     	;# 
   988  011E                     	;# 
   989  018C                     	;# 
   990  018D                     	;# 
   991  018E                     	;# 
   992  0191                     	;# 
   993  0191                     	;# 
   994  0192                     	;# 
   995  0193                     	;# 
   996  0193                     	;# 
   997  0193                     	;# 
   998  0194                     	;# 
   999  0195                     	;# 
  1000  0196                     	;# 
  1001  0199                     	;# 
  1002  019A                     	;# 
  1003  019B                     	;# 
  1004  019B                     	;# 
  1005  019C                     	;# 
  1006  019D                     	;# 
  1007  019E                     	;# 
  1008  019F                     	;# 
  1009  020C                     	;# 
  1010  020D                     	;# 
  1011  020E                     	;# 
  1012  0211                     	;# 
  1013  0211                     	;# 
  1014  0212                     	;# 
  1015  0212                     	;# 
  1016  0213                     	;# 
  1017  0213                     	;# 
  1018  0214                     	;# 
  1019  0214                     	;# 
  1020  0215                     	;# 
  1021  0215                     	;# 
  1022  0215                     	;# 
  1023  0216                     	;# 
  1024  0216                     	;# 
  1025  0217                     	;# 
  1026  0217                     	;# 
  1027  0219                     	;# 
  1028  021A                     	;# 
  1029  021B                     	;# 
  1030  021C                     	;# 
  1031  021D                     	;# 
  1032  021E                     	;# 
  1033  021F                     	;# 
  1034  0291                     	;# 
  1035  0291                     	;# 
  1036  0292                     	;# 
  1037  0293                     	;# 
  1038  0294                     	;# 
  1039  0295                     	;# 
  1040  0295                     	;# 
  1041  0296                     	;# 
  1042  0298                     	;# 
  1043  0298                     	;# 
  1044  0299                     	;# 
  1045  029A                     	;# 
  1046  029B                     	;# 
  1047  029C                     	;# 
  1048  029D                     	;# 
  1049  029E                     	;# 
  1050  0311                     	;# 
  1051  0311                     	;# 
  1052  0312                     	;# 
  1053  0313                     	;# 
  1054  0318                     	;# 
  1055  0318                     	;# 
  1056  0319                     	;# 
  1057  031A                     	;# 
  1058  038C                     	;# 
  1059  038D                     	;# 
  1060  038E                     	;# 
  1061  0391                     	;# 
  1062  0392                     	;# 
  1063  0393                     	;# 
  1064  0394                     	;# 
  1065  0395                     	;# 
  1066  0396                     	;# 
  1067  039A                     	;# 
  1068  039C                     	;# 
  1069  039D                     	;# 
  1070  039E                     	;# 
  1071  039F                     	;# 
  1072  0415                     	;# 
  1073  0416                     	;# 
  1074  0417                     	;# 
  1075  041C                     	;# 
  1076  041D                     	;# 
  1077  041E                     	;# 
  1078  0FE4                     	;# 
  1079  0FE5                     	;# 
  1080  0FE6                     	;# 
  1081  0FE7                     	;# 
  1082  0FE8                     	;# 
  1083  0FE9                     	;# 
  1084  0FEA                     	;# 
  1085  0FEB                     	;# 
  1086  0FED                     	;# 
  1087  0FEE                     	;# 
  1088  0FEF                     	;# 
  1089  0000                     	;# 
  1090  0001                     	;# 
  1091  0002                     	;# 
  1092  0003                     	;# 
  1093  0004                     	;# 
  1094  0005                     	;# 
  1095  0006                     	;# 
  1096  0007                     	;# 
  1097  0008                     	;# 
  1098  0009                     	;# 
  1099  000A                     	;# 
  1100  000B                     	;# 
  1101  000C                     	;# 
  1102  000D                     	;# 
  1103  000E                     	;# 
  1104  0011                     	;# 
  1105  0012                     	;# 
  1106  0013                     	;# 
  1107  0014                     	;# 
  1108  0015                     	;# 
  1109  0016                     	;# 
  1110  0016                     	;# 
  1111  0017                     	;# 
  1112  0018                     	;# 
  1113  0019                     	;# 
  1114  001A                     	;# 
  1115  001B                     	;# 
  1116  001C                     	;# 
  1117  001E                     	;# 
  1118  001F                     	;# 
  1119  008C                     	;# 
  1120  008D                     	;# 
  1121  008E                     	;# 
  1122  0091                     	;# 
  1123  0092                     	;# 
  1124  0093                     	;# 
  1125  0094                     	;# 
  1126  0095                     	;# 
  1127  0096                     	;# 
  1128  0097                     	;# 
  1129  0098                     	;# 
  1130  0099                     	;# 
  1131  009A                     	;# 
  1132  009B                     	;# 
  1133  009B                     	;# 
  1134  009C                     	;# 
  1135  009D                     	;# 
  1136  009E                     	;# 
  1137  010C                     	;# 
  1138  010D                     	;# 
  1139  010E                     	;# 
  1140  0111                     	;# 
  1141  0112                     	;# 
  1142  0113                     	;# 
  1143  0114                     	;# 
  1144  0115                     	;# 
  1145  0116                     	;# 
  1146  0117                     	;# 
  1147  0118                     	;# 
  1148  0119                     	;# 
  1149  011A                     	;# 
  1150  011B                     	;# 
  1151  011D                     	;# 
  1152  011E                     	;# 
  1153  018C                     	;# 
  1154  018D                     	;# 
  1155  018E                     	;# 
  1156  0191                     	;# 
  1157  0191                     	;# 
  1158  0192                     	;# 
  1159  0193                     	;# 
  1160  0193                     	;# 
  1161  0193                     	;# 
  1162  0194                     	;# 
  1163  0195                     	;# 
  1164  0196                     	;# 
  1165  0199                     	;# 
  1166  019A                     	;# 
  1167  019B                     	;# 
  1168  019B                     	;# 
  1169  019C                     	;# 
  1170  019D                     	;# 
  1171  019E                     	;# 
  1172  019F                     	;# 
  1173  020C                     	;# 
  1174  020D                     	;# 
  1175  020E                     	;# 
  1176  0211                     	;# 
  1177  0211                     	;# 
  1178  0212                     	;# 
  1179  0212                     	;# 
  1180  0213                     	;# 
  1181  0213                     	;# 
  1182  0214                     	;# 
  1183  0214                     	;# 
  1184  0215                     	;# 
  1185  0215                     	;# 
  1186  0215                     	;# 
  1187  0216                     	;# 
  1188  0216                     	;# 
  1189  0217                     	;# 
  1190  0217                     	;# 
  1191  0219                     	;# 
  1192  021A                     	;# 
  1193  021B                     	;# 
  1194  021C                     	;# 
  1195  021D                     	;# 
  1196  021E                     	;# 
  1197  021F                     	;# 
  1198  0291                     	;# 
  1199  0291                     	;# 
  1200  0292                     	;# 
  1201  0293                     	;# 
  1202  0294                     	;# 
  1203  0295                     	;# 
  1204  0295                     	;# 
  1205  0296                     	;# 
  1206  0298                     	;# 
  1207  0298                     	;# 
  1208  0299                     	;# 
  1209  029A                     	;# 
  1210  029B                     	;# 
  1211  029C                     	;# 
  1212  029D                     	;# 
  1213  029E                     	;# 
  1214  0311                     	;# 
  1215  0311                     	;# 
  1216  0312                     	;# 
  1217  0313                     	;# 
  1218  0318                     	;# 
  1219  0318                     	;# 
  1220  0319                     	;# 
  1221  031A                     	;# 
  1222  038C                     	;# 
  1223  038D                     	;# 
  1224  038E                     	;# 
  1225  0391                     	;# 
  1226  0392                     	;# 
  1227  0393                     	;# 
  1228  0394                     	;# 
  1229  0395                     	;# 
  1230  0396                     	;# 
  1231  039A                     	;# 
  1232  039C                     	;# 
  1233  039D                     	;# 
  1234  039E                     	;# 
  1235  039F                     	;# 
  1236  0415                     	;# 
  1237  0416                     	;# 
  1238  0417                     	;# 
  1239  041C                     	;# 
  1240  041D                     	;# 
  1241  041E                     	;# 
  1242  0FE4                     	;# 
  1243  0FE5                     	;# 
  1244  0FE6                     	;# 
  1245  0FE7                     	;# 
  1246  0FE8                     	;# 
  1247  0FE9                     	;# 
  1248  0FEA                     	;# 
  1249  0FEB                     	;# 
  1250  0FED                     	;# 
  1251  0FEE                     	;# 
  1252  0FEF                     	;# 
  1253  0000                     	;# 
  1254  0001                     	;# 
  1255  0002                     	;# 
  1256  0003                     	;# 
  1257  0004                     	;# 
  1258  0005                     	;# 
  1259  0006                     	;# 
  1260  0007                     	;# 
  1261  0008                     	;# 
  1262  0009                     	;# 
  1263  000A                     	;# 
  1264  000B                     	;# 
  1265  000C                     	;# 
  1266  000D                     	;# 
  1267  000E                     	;# 
  1268  0011                     	;# 
  1269  0012                     	;# 
  1270  0013                     	;# 
  1271  0014                     	;# 
  1272  0015                     	;# 
  1273  0016                     	;# 
  1274  0016                     	;# 
  1275  0017                     	;# 
  1276  0018                     	;# 
  1277  0019                     	;# 
  1278  001A                     	;# 
  1279  001B                     	;# 
  1280  001C                     	;# 
  1281  001E                     	;# 
  1282  001F                     	;# 
  1283  008C                     	;# 
  1284  008D                     	;# 
  1285  008E                     	;# 
  1286  0091                     	;# 
  1287  0092                     	;# 
  1288  0093                     	;# 
  1289  0094                     	;# 
  1290  0095                     	;# 
  1291  0096                     	;# 
  1292  0097                     	;# 
  1293  0098                     	;# 
  1294  0099                     	;# 
  1295  009A                     	;# 
  1296  009B                     	;# 
  1297  009B                     	;# 
  1298  009C                     	;# 
  1299  009D                     	;# 
  1300  009E                     	;# 
  1301  010C                     	;# 
  1302  010D                     	;# 
  1303  010E                     	;# 
  1304  0111                     	;# 
  1305  0112                     	;# 
  1306  0113                     	;# 
  1307  0114                     	;# 
  1308  0115                     	;# 
  1309  0116                     	;# 
  1310  0117                     	;# 
  1311  0118                     	;# 
  1312  0119                     	;# 
  1313  011A                     	;# 
  1314  011B                     	;# 
  1315  011D                     	;# 
  1316  011E                     	;# 
  1317  018C                     	;# 
  1318  018D                     	;# 
  1319  018E                     	;# 
  1320  0191                     	;# 
  1321  0191                     	;# 
  1322  0192                     	;# 
  1323  0193                     	;# 
  1324  0193                     	;# 
  1325  0193                     	;# 
  1326  0194                     	;# 
  1327  0195                     	;# 
  1328  0196                     	;# 
  1329  0199                     	;# 
  1330  019A                     	;# 
  1331  019B                     	;# 
  1332  019B                     	;# 
  1333  019C                     	;# 
  1334  019D                     	;# 
  1335  019E                     	;# 
  1336  019F                     	;# 
  1337  020C                     	;# 
  1338  020D                     	;# 
  1339  020E                     	;# 
  1340  0211                     	;# 
  1341  0211                     	;# 
  1342  0212                     	;# 
  1343  0212                     	;# 
  1344  0213                     	;# 
  1345  0213                     	;# 
  1346  0214                     	;# 
  1347  0214                     	;# 
  1348  0215                     	;# 
  1349  0215                     	;# 
  1350  0215                     	;# 
  1351  0216                     	;# 
  1352  0216                     	;# 
  1353  0217                     	;# 
  1354  0217                     	;# 
  1355  0219                     	;# 
  1356  021A                     	;# 
  1357  021B                     	;# 
  1358  021C                     	;# 
  1359  021D                     	;# 
  1360  021E                     	;# 
  1361  021F                     	;# 
  1362  0291                     	;# 
  1363  0291                     	;# 
  1364  0292                     	;# 
  1365  0293                     	;# 
  1366  0294                     	;# 
  1367  0295                     	;# 
  1368  0295                     	;# 
  1369  0296                     	;# 
  1370  0298                     	;# 
  1371  0298                     	;# 
  1372  0299                     	;# 
  1373  029A                     	;# 
  1374  029B                     	;# 
  1375  029C                     	;# 
  1376  029D                     	;# 
  1377  029E                     	;# 
  1378  0311                     	;# 
  1379  0311                     	;# 
  1380  0312                     	;# 
  1381  0313                     	;# 
  1382  0318                     	;# 
  1383  0318                     	;# 
  1384  0319                     	;# 
  1385  031A                     	;# 
  1386  038C                     	;# 
  1387  038D                     	;# 
  1388  038E                     	;# 
  1389  0391                     	;# 
  1390  0392                     	;# 
  1391  0393                     	;# 
  1392  0394                     	;# 
  1393  0395                     	;# 
  1394  0396                     	;# 
  1395  039A                     	;# 
  1396  039C                     	;# 
  1397  039D                     	;# 
  1398  039E                     	;# 
  1399  039F                     	;# 
  1400  0415                     	;# 
  1401  0416                     	;# 
  1402  0417                     	;# 
  1403  041C                     	;# 
  1404  041D                     	;# 
  1405  041E                     	;# 
  1406  0FE4                     	;# 
  1407  0FE5                     	;# 
  1408  0FE6                     	;# 
  1409  0FE7                     	;# 
  1410  0FE8                     	;# 
  1411  0FE9                     	;# 
  1412  0FEA                     	;# 
  1413  0FEB                     	;# 
  1414  0FED                     	;# 
  1415  0FEE                     	;# 
  1416  0FEF                     	;# 
  1417  0000                     	;# 
  1418  0001                     	;# 
  1419  0002                     	;# 
  1420  0003                     	;# 
  1421  0004                     	;# 
  1422  0005                     	;# 
  1423  0006                     	;# 
  1424  0007                     	;# 
  1425  0008                     	;# 
  1426  0009                     	;# 
  1427  000A                     	;# 
  1428  000B                     	;# 
  1429  000C                     	;# 
  1430  000D                     	;# 
  1431  000E                     	;# 
  1432  0011                     	;# 
  1433  0012                     	;# 
  1434  0013                     	;# 
  1435  0014                     	;# 
  1436  0015                     	;# 
  1437  0016                     	;# 
  1438  0016                     	;# 
  1439  0017                     	;# 
  1440  0018                     	;# 
  1441  0019                     	;# 
  1442  001A                     	;# 
  1443  001B                     	;# 
  1444  001C                     	;# 
  1445  001E                     	;# 
  1446  001F                     	;# 
  1447  008C                     	;# 
  1448  008D                     	;# 
  1449  008E                     	;# 
  1450  0091                     	;# 
  1451  0092                     	;# 
  1452  0093                     	;# 
  1453  0094                     	;# 
  1454  0095                     	;# 
  1455  0096                     	;# 
  1456  0097                     	;# 
  1457  0098                     	;# 
  1458  0099                     	;# 
  1459  009A                     	;# 
  1460  009B                     	;# 
  1461  009B                     	;# 
  1462  009C                     	;# 
  1463  009D                     	;# 
  1464  009E                     	;# 
  1465  010C                     	;# 
  1466  010D                     	;# 
  1467  010E                     	;# 
  1468  0111                     	;# 
  1469  0112                     	;# 
  1470  0113                     	;# 
  1471  0114                     	;# 
  1472  0115                     	;# 
  1473  0116                     	;# 
  1474  0117                     	;# 
  1475  0118                     	;# 
  1476  0119                     	;# 
  1477  011A                     	;# 
  1478  011B                     	;# 
  1479  011D                     	;# 
  1480  011E                     	;# 
  1481  018C                     	;# 
  1482  018D                     	;# 
  1483  018E                     	;# 
  1484  0191                     	;# 
  1485  0191                     	;# 
  1486  0192                     	;# 
  1487  0193                     	;# 
  1488  0193                     	;# 
  1489  0193                     	;# 
  1490  0194                     	;# 
  1491  0195                     	;# 
  1492  0196                     	;# 
  1493  0199                     	;# 
  1494  019A                     	;# 
  1495  019B                     	;# 
  1496  019B                     	;# 
  1497  019C                     	;# 
  1498  019D                     	;# 
  1499  019E                     	;# 
  1500  019F                     	;# 
  1501  020C                     	;# 
  1502  020D                     	;# 
  1503  020E                     	;# 
  1504  0211                     	;# 
  1505  0211                     	;# 
  1506  0212                     	;# 
  1507  0212                     	;# 
  1508  0213                     	;# 
  1509  0213                     	;# 
  1510  0214                     	;# 
  1511  0214                     	;# 
  1512  0215                     	;# 
  1513  0215                     	;# 
  1514  0215                     	;# 
  1515  0216                     	;# 
  1516  0216                     	;# 
  1517  0217                     	;# 
  1518  0217                     	;# 
  1519  0219                     	;# 
  1520  021A                     	;# 
  1521  021B                     	;# 
  1522  021C                     	;# 
  1523  021D                     	;# 
  1524  021E                     	;# 
  1525  021F                     	;# 
  1526  0291                     	;# 
  1527  0291                     	;# 
  1528  0292                     	;# 
  1529  0293                     	;# 
  1530  0294                     	;# 
  1531  0295                     	;# 
  1532  0295                     	;# 
  1533  0296                     	;# 
  1534  0298                     	;# 
  1535  0298                     	;# 
  1536  0299                     	;# 
  1537  029A                     	;# 
  1538  029B                     	;# 
  1539  029C                     	;# 
  1540  029D                     	;# 
  1541  029E                     	;# 
  1542  0311                     	;# 
  1543  0311                     	;# 
  1544  0312                     	;# 
  1545  0313                     	;# 
  1546  0318                     	;# 
  1547  0318                     	;# 
  1548  0319                     	;# 
  1549  031A                     	;# 
  1550  038C                     	;# 
  1551  038D                     	;# 
  1552  038E                     	;# 
  1553  0391                     	;# 
  1554  0392                     	;# 
  1555  0393                     	;# 
  1556  0394                     	;# 
  1557  0395                     	;# 
  1558  0396                     	;# 
  1559  039A                     	;# 
  1560  039C                     	;# 
  1561  039D                     	;# 
  1562  039E                     	;# 
  1563  039F                     	;# 
  1564  0415                     	;# 
  1565  0416                     	;# 
  1566  0417                     	;# 
  1567  041C                     	;# 
  1568  041D                     	;# 
  1569  041E                     	;# 
  1570  0FE4                     	;# 
  1571  0FE5                     	;# 
  1572  0FE6                     	;# 
  1573  0FE7                     	;# 
  1574  0FE8                     	;# 
  1575  0FE9                     	;# 
  1576  0FEA                     	;# 
  1577  0FEB                     	;# 
  1578  0FED                     	;# 
  1579  0FEE                     	;# 
  1580  0FEF                     	;# 
  1581  0000                     	;# 
  1582  0001                     	;# 
  1583  0002                     	;# 
  1584  0003                     	;# 
  1585  0004                     	;# 
  1586  0005                     	;# 
  1587  0006                     	;# 
  1588  0007                     	;# 
  1589  0008                     	;# 
  1590  0009                     	;# 
  1591  000A                     	;# 
  1592  000B                     	;# 
  1593  000C                     	;# 
  1594  000D                     	;# 
  1595  000E                     	;# 
  1596  0011                     	;# 
  1597  0012                     	;# 
  1598  0013                     	;# 
  1599  0014                     	;# 
  1600  0015                     	;# 
  1601  0016                     	;# 
  1602  0016                     	;# 
  1603  0017                     	;# 
  1604  0018                     	;# 
  1605  0019                     	;# 
  1606  001A                     	;# 
  1607  001B                     	;# 
  1608  001C                     	;# 
  1609  001E                     	;# 
  1610  001F                     	;# 
  1611  008C                     	;# 
  1612  008D                     	;# 
  1613  008E                     	;# 
  1614  0091                     	;# 
  1615  0092                     	;# 
  1616  0093                     	;# 
  1617  0094                     	;# 
  1618  0095                     	;# 
  1619  0096                     	;# 
  1620  0097                     	;# 
  1621  0098                     	;# 
  1622  0099                     	;# 
  1623  009A                     	;# 
  1624  009B                     	;# 
  1625  009B                     	;# 
  1626  009C                     	;# 
  1627  009D                     	;# 
  1628  009E                     	;# 
  1629  010C                     	;# 
  1630  010D                     	;# 
  1631  010E                     	;# 
  1632  0111                     	;# 
  1633  0112                     	;# 
  1634  0113                     	;# 
  1635  0114                     	;# 
  1636  0115                     	;# 
  1637  0116                     	;# 
  1638  0117                     	;# 
  1639  0118                     	;# 
  1640  0119                     	;# 
  1641  011A                     	;# 
  1642  011B                     	;# 
  1643  011D                     	;# 
  1644  011E                     	;# 
  1645  018C                     	;# 
  1646  018D                     	;# 
  1647  018E                     	;# 
  1648  0191                     	;# 
  1649  0191                     	;# 
  1650  0192                     	;# 
  1651  0193                     	;# 
  1652  0193                     	;# 
  1653  0193                     	;# 
  1654  0194                     	;# 
  1655  0195                     	;# 
  1656  0196                     	;# 
  1657  0199                     	;# 
  1658  019A                     	;# 
  1659  019B                     	;# 
  1660  019B                     	;# 
  1661  019C                     	;# 
  1662  019D                     	;# 
  1663  019E                     	;# 
  1664  019F                     	;# 
  1665  020C                     	;# 
  1666  020D                     	;# 
  1667  020E                     	;# 
  1668  0211                     	;# 
  1669  0211                     	;# 
  1670  0212                     	;# 
  1671  0212                     	;# 
  1672  0213                     	;# 
  1673  0213                     	;# 
  1674  0214                     	;# 
  1675  0214                     	;# 
  1676  0215                     	;# 
  1677  0215                     	;# 
  1678  0215                     	;# 
  1679  0216                     	;# 
  1680  0216                     	;# 
  1681  0217                     	;# 
  1682  0217                     	;# 
  1683  0219                     	;# 
  1684  021A                     	;# 
  1685  021B                     	;# 
  1686  021C                     	;# 
  1687  021D                     	;# 
  1688  021E                     	;# 
  1689  021F                     	;# 
  1690  0291                     	;# 
  1691  0291                     	;# 
  1692  0292                     	;# 
  1693  0293                     	;# 
  1694  0294                     	;# 
  1695  0295                     	;# 
  1696  0295                     	;# 
  1697  0296                     	;# 
  1698  0298                     	;# 
  1699  0298                     	;# 
  1700  0299                     	;# 
  1701  029A                     	;# 
  1702  029B                     	;# 
  1703  029C                     	;# 
  1704  029D                     	;# 
  1705  029E                     	;# 
  1706  0311                     	;# 
  1707  0311                     	;# 
  1708  0312                     	;# 
  1709  0313                     	;# 
  1710  0318                     	;# 
  1711  0318                     	;# 
  1712  0319                     	;# 
  1713  031A                     	;# 
  1714  038C                     	;# 
  1715  038D                     	;# 
  1716  038E                     	;# 
  1717  0391                     	;# 
  1718  0392                     	;# 
  1719  0393                     	;# 
  1720  0394                     	;# 
  1721  0395                     	;# 
  1722  0396                     	;# 
  1723  039A                     	;# 
  1724  039C                     	;# 
  1725  039D                     	;# 
  1726  039E                     	;# 
  1727  039F                     	;# 
  1728  0415                     	;# 
  1729  0416                     	;# 
  1730  0417                     	;# 
  1731  041C                     	;# 
  1732  041D                     	;# 
  1733  041E                     	;# 
  1734  0FE4                     	;# 
  1735  0FE5                     	;# 
  1736  0FE6                     	;# 
  1737  0FE7                     	;# 
  1738  0FE8                     	;# 
  1739  0FE9                     	;# 
  1740  0FEA                     	;# 
  1741  0FEB                     	;# 
  1742  0FED                     	;# 
  1743  0FEE                     	;# 
  1744  0FEF                     	;# 
  1745  0000                     	;# 
  1746  0001                     	;# 
  1747  0002                     	;# 
  1748  0003                     	;# 
  1749  0004                     	;# 
  1750  0005                     	;# 
  1751  0006                     	;# 
  1752  0007                     	;# 
  1753  0008                     	;# 
  1754  0009                     	;# 
  1755  000A                     	;# 
  1756  000B                     	;# 
  1757  000C                     	;# 
  1758  000D                     	;# 
  1759  000E                     	;# 
  1760  0011                     	;# 
  1761  0012                     	;# 
  1762  0013                     	;# 
  1763  0014                     	;# 
  1764  0015                     	;# 
  1765  0016                     	;# 
  1766  0016                     	;# 
  1767  0017                     	;# 
  1768  0018                     	;# 
  1769  0019                     	;# 
  1770  001A                     	;# 
  1771  001B                     	;# 
  1772  001C                     	;# 
  1773  001E                     	;# 
  1774  001F                     	;# 
  1775  008C                     	;# 
  1776  008D                     	;# 
  1777  008E                     	;# 
  1778  0091                     	;# 
  1779  0092                     	;# 
  1780  0093                     	;# 
  1781  0094                     	;# 
  1782  0095                     	;# 
  1783  0096                     	;# 
  1784  0097                     	;# 
  1785  0098                     	;# 
  1786  0099                     	;# 
  1787  009A                     	;# 
  1788  009B                     	;# 
  1789  009B                     	;# 
  1790  009C                     	;# 
  1791  009D                     	;# 
  1792  009E                     	;# 
  1793  010C                     	;# 
  1794  010D                     	;# 
  1795  010E                     	;# 
  1796  0111                     	;# 
  1797  0112                     	;# 
  1798  0113                     	;# 
  1799  0114                     	;# 
  1800  0115                     	;# 
  1801  0116                     	;# 
  1802  0117                     	;# 
  1803  0118                     	;# 
  1804  0119                     	;# 
  1805  011A                     	;# 
  1806  011B                     	;# 
  1807  011D                     	;# 
  1808  011E                     	;# 
  1809  018C                     	;# 
  1810  018D                     	;# 
  1811  018E                     	;# 
  1812  0191                     	;# 
  1813  0191                     	;# 
  1814  0192                     	;# 
  1815  0193                     	;# 
  1816  0193                     	;# 
  1817  0193                     	;# 
  1818  0194                     	;# 
  1819  0195                     	;# 
  1820  0196                     	;# 
  1821  0199                     	;# 
  1822  019A                     	;# 
  1823  019B                     	;# 
  1824  019B                     	;# 
  1825  019C                     	;# 
  1826  019D                     	;# 
  1827  019E                     	;# 
  1828  019F                     	;# 
  1829  020C                     	;# 
  1830  020D                     	;# 
  1831  020E                     	;# 
  1832  0211                     	;# 
  1833  0211                     	;# 
  1834  0212                     	;# 
  1835  0212                     	;# 
  1836  0213                     	;# 
  1837  0213                     	;# 
  1838  0214                     	;# 
  1839  0214                     	;# 
  1840  0215                     	;# 
  1841  0215                     	;# 
  1842  0215                     	;# 
  1843  0216                     	;# 
  1844  0216                     	;# 
  1845  0217                     	;# 
  1846  0217                     	;# 
  1847  0219                     	;# 
  1848  021A                     	;# 
  1849  021B                     	;# 
  1850  021C                     	;# 
  1851  021D                     	;# 
  1852  021E                     	;# 
  1853  021F                     	;# 
  1854  0291                     	;# 
  1855  0291                     	;# 
  1856  0292                     	;# 
  1857  0293                     	;# 
  1858  0294                     	;# 
  1859  0295                     	;# 
  1860  0295                     	;# 
  1861  0296                     	;# 
  1862  0298                     	;# 
  1863  0298                     	;# 
  1864  0299                     	;# 
  1865  029A                     	;# 
  1866  029B                     	;# 
  1867  029C                     	;# 
  1868  029D                     	;# 
  1869  029E                     	;# 
  1870  0311                     	;# 
  1871  0311                     	;# 
  1872  0312                     	;# 
  1873  0313                     	;# 
  1874  0318                     	;# 
  1875  0318                     	;# 
  1876  0319                     	;# 
  1877  031A                     	;# 
  1878  038C                     	;# 
  1879  038D                     	;# 
  1880  038E                     	;# 
  1881  0391                     	;# 
  1882  0392                     	;# 
  1883  0393                     	;# 
  1884  0394                     	;# 
  1885  0395                     	;# 
  1886  0396                     	;# 
  1887  039A                     	;# 
  1888  039C                     	;# 
  1889  039D                     	;# 
  1890  039E                     	;# 
  1891  039F                     	;# 
  1892  0415                     	;# 
  1893  0416                     	;# 
  1894  0417                     	;# 
  1895  041C                     	;# 
  1896  041D                     	;# 
  1897  041E                     	;# 
  1898  0FE4                     	;# 
  1899  0FE5                     	;# 
  1900  0FE6                     	;# 
  1901  0FE7                     	;# 
  1902  0FE8                     	;# 
  1903  0FE9                     	;# 
  1904  0FEA                     	;# 
  1905  0FEB                     	;# 
  1906  0FED                     	;# 
  1907  0FEE                     	;# 
  1908  0FEF                     	;# 
  1909  0000                     	;# 
  1910  0001                     	;# 
  1911  0002                     	;# 
  1912  0003                     	;# 
  1913  0004                     	;# 
  1914  0005                     	;# 
  1915  0006                     	;# 
  1916  0007                     	;# 
  1917  0008                     	;# 
  1918  0009                     	;# 
  1919  000A                     	;# 
  1920  000B                     	;# 
  1921  000C                     	;# 
  1922  000D                     	;# 
  1923  000E                     	;# 
  1924  0011                     	;# 
  1925  0012                     	;# 
  1926  0013                     	;# 
  1927  0014                     	;# 
  1928  0015                     	;# 
  1929  0016                     	;# 
  1930  0016                     	;# 
  1931  0017                     	;# 
  1932  0018                     	;# 
  1933  0019                     	;# 
  1934  001A                     	;# 
  1935  001B                     	;# 
  1936  001C                     	;# 
  1937  001E                     	;# 
  1938  001F                     	;# 
  1939  008C                     	;# 
  1940  008D                     	;# 
  1941  008E                     	;# 
  1942  0091                     	;# 
  1943  0092                     	;# 
  1944  0093                     	;# 
  1945  0094                     	;# 
  1946  0095                     	;# 
  1947  0096                     	;# 
  1948  0097                     	;# 
  1949  0098                     	;# 
  1950  0099                     	;# 
  1951  009A                     	;# 
  1952  009B                     	;# 
  1953  009B                     	;# 
  1954  009C                     	;# 
  1955  009D                     	;# 
  1956  009E                     	;# 
  1957  010C                     	;# 
  1958  010D                     	;# 
  1959  010E                     	;# 
  1960  0111                     	;# 
  1961  0112                     	;# 
  1962  0113                     	;# 
  1963  0114                     	;# 
  1964  0115                     	;# 
  1965  0116                     	;# 
  1966  0117                     	;# 
  1967  0118                     	;# 
  1968  0119                     	;# 
  1969  011A                     	;# 
  1970  011B                     	;# 
  1971  011D                     	;# 
  1972  011E                     	;# 
  1973  018C                     	;# 
  1974  018D                     	;# 
  1975  018E                     	;# 
  1976  0191                     	;# 
  1977  0191                     	;# 
  1978  0192                     	;# 
  1979  0193                     	;# 
  1980  0193                     	;# 
  1981  0193                     	;# 
  1982  0194                     	;# 
  1983  0195                     	;# 
  1984  0196                     	;# 
  1985  0199                     	;# 
  1986  019A                     	;# 
  1987  019B                     	;# 
  1988  019B                     	;# 
  1989  019C                     	;# 
  1990  019D                     	;# 
  1991  019E                     	;# 
  1992  019F                     	;# 
  1993  020C                     	;# 
  1994  020D                     	;# 
  1995  020E                     	;# 
  1996  0211                     	;# 
  1997  0211                     	;# 
  1998  0212                     	;# 
  1999  0212                     	;# 
  2000  0213                     	;# 
  2001  0213                     	;# 
  2002  0214                     	;# 
  2003  0214                     	;# 
  2004  0215                     	;# 
  2005  0215                     	;# 
  2006  0215                     	;# 
  2007  0216                     	;# 
  2008  0216                     	;# 
  2009  0217                     	;# 
  2010  0217                     	;# 
  2011  0219                     	;# 
  2012  021A                     	;# 
  2013  021B                     	;# 
  2014  021C                     	;# 
  2015  021D                     	;# 
  2016  021E                     	;# 
  2017  021F                     	;# 
  2018  0291                     	;# 
  2019  0291                     	;# 
  2020  0292                     	;# 
  2021  0293                     	;# 
  2022  0294                     	;# 
  2023  0295                     	;# 
  2024  0295                     	;# 
  2025  0296                     	;# 
  2026  0298                     	;# 
  2027  0298                     	;# 
  2028  0299                     	;# 
  2029  029A                     	;# 
  2030  029B                     	;# 
  2031  029C                     	;# 
  2032  029D                     	;# 
  2033  029E                     	;# 
  2034  0311                     	;# 
  2035  0311                     	;# 
  2036  0312                     	;# 
  2037  0313                     	;# 
  2038  0318                     	;# 
  2039  0318                     	;# 
  2040  0319                     	;# 
  2041  031A                     	;# 
  2042  038C                     	;# 
  2043  038D                     	;# 
  2044  038E                     	;# 
  2045  0391                     	;# 
  2046  0392                     	;# 
  2047  0393                     	;# 
  2048  0394                     	;# 
  2049  0395                     	;# 
  2050  0396                     	;# 
  2051  039A                     	;# 
  2052  039C                     	;# 
  2053  039D                     	;# 
  2054  039E                     	;# 
  2055  039F                     	;# 
  2056  0415                     	;# 
  2057  0416                     	;# 
  2058  0417                     	;# 
  2059  041C                     	;# 
  2060  041D                     	;# 
  2061  041E                     	;# 
  2062  0FE4                     	;# 
  2063  0FE5                     	;# 
  2064  0FE6                     	;# 
  2065  0FE7                     	;# 
  2066  0FE8                     	;# 
  2067  0FE9                     	;# 
  2068  0FEA                     	;# 
  2069  0FEB                     	;# 
  2070  0FED                     	;# 
  2071  0FEE                     	;# 
  2072  0FEF                     	;# 
  2073  0000                     	;# 
  2074  0001                     	;# 
  2075  0002                     	;# 
  2076  0003                     	;# 
  2077  0004                     	;# 
  2078  0005                     	;# 
  2079  0006                     	;# 
  2080  0007                     	;# 
  2081  0008                     	;# 
  2082  0009                     	;# 
  2083  000A                     	;# 
  2084  000B                     	;# 
  2085  000C                     	;# 
  2086  000D                     	;# 
  2087  000E                     	;# 
  2088  0011                     	;# 
  2089  0012                     	;# 
  2090  0013                     	;# 
  2091  0014                     	;# 
  2092  0015                     	;# 
  2093  0016                     	;# 
  2094  0016                     	;# 
  2095  0017                     	;# 
  2096  0018                     	;# 
  2097  0019                     	;# 
  2098  001A                     	;# 
  2099  001B                     	;# 
  2100  001C                     	;# 
  2101  001E                     	;# 
  2102  001F                     	;# 
  2103  008C                     	;# 
  2104  008D                     	;# 
  2105  008E                     	;# 
  2106  0091                     	;# 
  2107  0092                     	;# 
  2108  0093                     	;# 
  2109  0094                     	;# 
  2110  0095                     	;# 
  2111  0096                     	;# 
  2112  0097                     	;# 
  2113  0098                     	;# 
  2114  0099                     	;# 
  2115  009A                     	;# 
  2116  009B                     	;# 
  2117  009B                     	;# 
  2118  009C                     	;# 
  2119  009D                     	;# 
  2120  009E                     	;# 
  2121  010C                     	;# 
  2122  010D                     	;# 
  2123  010E                     	;# 
  2124  0111                     	;# 
  2125  0112                     	;# 
  2126  0113                     	;# 
  2127  0114                     	;# 
  2128  0115                     	;# 
  2129  0116                     	;# 
  2130  0117                     	;# 
  2131  0118                     	;# 
  2132  0119                     	;# 
  2133  011A                     	;# 
  2134  011B                     	;# 
  2135  011D                     	;# 
  2136  011E                     	;# 
  2137  018C                     	;# 
  2138  018D                     	;# 
  2139  018E                     	;# 
  2140  0191                     	;# 
  2141  0191                     	;# 
  2142  0192                     	;# 
  2143  0193                     	;# 
  2144  0193                     	;# 
  2145  0193                     	;# 
  2146  0194                     	;# 
  2147  0195                     	;# 
  2148  0196                     	;# 
  2149  0199                     	;# 
  2150  019A                     	;# 
  2151  019B                     	;# 
  2152  019B                     	;# 
  2153  019C                     	;# 
  2154  019D                     	;# 
  2155  019E                     	;# 
  2156  019F                     	;# 
  2157  020C                     	;# 
  2158  020D                     	;# 
  2159  020E                     	;# 
  2160  0211                     	;# 
  2161  0211                     	;# 
  2162  0212                     	;# 
  2163  0212                     	;# 
  2164  0213                     	;# 
  2165  0213                     	;# 
  2166  0214                     	;# 
  2167  0214                     	;# 
  2168  0215                     	;# 
  2169  0215                     	;# 
  2170  0215                     	;# 
  2171  0216                     	;# 
  2172  0216                     	;# 
  2173  0217                     	;# 
  2174  0217                     	;# 
  2175  0219                     	;# 
  2176  021A                     	;# 
  2177  021B                     	;# 
  2178  021C                     	;# 
  2179  021D                     	;# 
  2180  021E                     	;# 
  2181  021F                     	;# 
  2182  0291                     	;# 
  2183  0291                     	;# 
  2184  0292                     	;# 
  2185  0293                     	;# 
  2186  0294                     	;# 
  2187  0295                     	;# 
  2188  0295                     	;# 
  2189  0296                     	;# 
  2190  0298                     	;# 
  2191  0298                     	;# 
  2192  0299                     	;# 
  2193  029A                     	;# 
  2194  029B                     	;# 
  2195  029C                     	;# 
  2196  029D                     	;# 
  2197  029E                     	;# 
  2198  0311                     	;# 
  2199  0311                     	;# 
  2200  0312                     	;# 
  2201  0313                     	;# 
  2202  0318                     	;# 
  2203  0318                     	;# 
  2204  0319                     	;# 
  2205  031A                     	;# 
  2206  038C                     	;# 
  2207  038D                     	;# 
  2208  038E                     	;# 
  2209  0391                     	;# 
  2210  0392                     	;# 
  2211  0393                     	;# 
  2212  0394                     	;# 
  2213  0395                     	;# 
  2214  0396                     	;# 
  2215  039A                     	;# 
  2216  039C                     	;# 
  2217  039D                     	;# 
  2218  039E                     	;# 
  2219  039F                     	;# 
  2220  0415                     	;# 
  2221  0416                     	;# 
  2222  0417                     	;# 
  2223  041C                     	;# 
  2224  041D                     	;# 
  2225  041E                     	;# 
  2226  0FE4                     	;# 
  2227  0FE5                     	;# 
  2228  0FE6                     	;# 
  2229  0FE7                     	;# 
  2230  0FE8                     	;# 
  2231  0FE9                     	;# 
  2232  0FEA                     	;# 
  2233  0FEB                     	;# 
  2234  0FED                     	;# 
  2235  0FEE                     	;# 
  2236  0FEF                     	;# 
  2237  0000                     	;# 
  2238  0001                     	;# 
  2239  0002                     	;# 
  2240  0003                     	;# 
  2241  0004                     	;# 
  2242  0005                     	;# 
  2243  0006                     	;# 
  2244  0007                     	;# 
  2245  0008                     	;# 
  2246  0009                     	;# 
  2247  000A                     	;# 
  2248  000B                     	;# 
  2249  000C                     	;# 
  2250  000D                     	;# 
  2251  000E                     	;# 
  2252  0011                     	;# 
  2253  0012                     	;# 
  2254  0013                     	;# 
  2255  0014                     	;# 
  2256  0015                     	;# 
  2257  0016                     	;# 
  2258  0016                     	;# 
  2259  0017                     	;# 
  2260  0018                     	;# 
  2261  0019                     	;# 
  2262  001A                     	;# 
  2263  001B                     	;# 
  2264  001C                     	;# 
  2265  001E                     	;# 
  2266  001F                     	;# 
  2267  008C                     	;# 
  2268  008D                     	;# 
  2269  008E                     	;# 
  2270  0091                     	;# 
  2271  0092                     	;# 
  2272  0093                     	;# 
  2273  0094                     	;# 
  2274  0095                     	;# 
  2275  0096                     	;# 
  2276  0097                     	;# 
  2277  0098                     	;# 
  2278  0099                     	;# 
  2279  009A                     	;# 
  2280  009B                     	;# 
  2281  009B                     	;# 
  2282  009C                     	;# 
  2283  009D                     	;# 
  2284  009E                     	;# 
  2285  010C                     	;# 
  2286  010D                     	;# 
  2287  010E                     	;# 
  2288  0111                     	;# 
  2289  0112                     	;# 
  2290  0113                     	;# 
  2291  0114                     	;# 
  2292  0115                     	;# 
  2293  0116                     	;# 
  2294  0117                     	;# 
  2295  0118                     	;# 
  2296  0119                     	;# 
  2297  011A                     	;# 
  2298  011B                     	;# 
  2299  011D                     	;# 
  2300  011E                     	;# 
  2301  018C                     	;# 
  2302  018D                     	;# 
  2303  018E                     	;# 
  2304  0191                     	;# 
  2305  0191                     	;# 
  2306  0192                     	;# 
  2307  0193                     	;# 
  2308  0193                     	;# 
  2309  0193                     	;# 
  2310  0194                     	;# 
  2311  0195                     	;# 
  2312  0196                     	;# 
  2313  0199                     	;# 
  2314  019A                     	;# 
  2315  019B                     	;# 
  2316  019B                     	;# 
  2317  019C                     	;# 
  2318  019D                     	;# 
  2319  019E                     	;# 
  2320  019F                     	;# 
  2321  020C                     	;# 
  2322  020D                     	;# 
  2323  020E                     	;# 
  2324  0211                     	;# 
  2325  0211                     	;# 
  2326  0212                     	;# 
  2327  0212                     	;# 
  2328  0213                     	;# 
  2329  0213                     	;# 
  2330  0214                     	;# 
  2331  0214                     	;# 
  2332  0215                     	;# 
  2333  0215                     	;# 
  2334  0215                     	;# 
  2335  0216                     	;# 
  2336  0216                     	;# 
  2337  0217                     	;# 
  2338  0217                     	;# 
  2339  0219                     	;# 
  2340  021A                     	;# 
  2341  021B                     	;# 
  2342  021C                     	;# 
  2343  021D                     	;# 
  2344  021E                     	;# 
  2345  021F                     	;# 
  2346  0291                     	;# 
  2347  0291                     	;# 
  2348  0292                     	;# 
  2349  0293                     	;# 
  2350  0294                     	;# 
  2351  0295                     	;# 
  2352  0295                     	;# 
  2353  0296                     	;# 
  2354  0298                     	;# 
  2355  0298                     	;# 
  2356  0299                     	;# 
  2357  029A                     	;# 
  2358  029B                     	;# 
  2359  029C                     	;# 
  2360  029D                     	;# 
  2361  029E                     	;# 
  2362  0311                     	;# 
  2363  0311                     	;# 
  2364  0312                     	;# 
  2365  0313                     	;# 
  2366  0318                     	;# 
  2367  0318                     	;# 
  2368  0319                     	;# 
  2369  031A                     	;# 
  2370  038C                     	;# 
  2371  038D                     	;# 
  2372  038E                     	;# 
  2373  0391                     	;# 
  2374  0392                     	;# 
  2375  0393                     	;# 
  2376  0394                     	;# 
  2377  0395                     	;# 
  2378  0396                     	;# 
  2379  039A                     	;# 
  2380  039C                     	;# 
  2381  039D                     	;# 
  2382  039E                     	;# 
  2383  039F                     	;# 
  2384  0415                     	;# 
  2385  0416                     	;# 
  2386  0417                     	;# 
  2387  041C                     	;# 
  2388  041D                     	;# 
  2389  041E                     	;# 
  2390  0FE4                     	;# 
  2391  0FE5                     	;# 
  2392  0FE6                     	;# 
  2393  0FE7                     	;# 
  2394  0FE8                     	;# 
  2395  0FE9                     	;# 
  2396  0FEA                     	;# 
  2397  0FEB                     	;# 
  2398  0FED                     	;# 
  2399  0FEE                     	;# 
  2400  0FEF                     	;# 
  2401  0000                     	;# 
  2402  0001                     	;# 
  2403  0002                     	;# 
  2404  0003                     	;# 
  2405  0004                     	;# 
  2406  0005                     	;# 
  2407  0006                     	;# 
  2408  0007                     	;# 
  2409  0008                     	;# 
  2410  0009                     	;# 
  2411  000A                     	;# 
  2412  000B                     	;# 
  2413  000C                     	;# 
  2414  000D                     	;# 
  2415  000E                     	;# 
  2416  0011                     	;# 
  2417  0012                     	;# 
  2418  0013                     	;# 
  2419  0014                     	;# 
  2420  0015                     	;# 
  2421  0016                     	;# 
  2422  0016                     	;# 
  2423  0017                     	;# 
  2424  0018                     	;# 
  2425  0019                     	;# 
  2426  001A                     	;# 
  2427  001B                     	;# 
  2428  001C                     	;# 
  2429  001E                     	;# 
  2430  001F                     	;# 
  2431  008C                     	;# 
  2432  008D                     	;# 
  2433  008E                     	;# 
  2434  0091                     	;# 
  2435  0092                     	;# 
  2436  0093                     	;# 
  2437  0094                     	;# 
  2438  0095                     	;# 
  2439  0096                     	;# 
  2440  0097                     	;# 
  2441  0098                     	;# 
  2442  0099                     	;# 
  2443  009A                     	;# 
  2444  009B                     	;# 
  2445  009B                     	;# 
  2446  009C                     	;# 
  2447  009D                     	;# 
  2448  009E                     	;# 
  2449  010C                     	;# 
  2450  010D                     	;# 
  2451  010E                     	;# 
  2452  0111                     	;# 
  2453  0112                     	;# 
  2454  0113                     	;# 
  2455  0114                     	;# 
  2456  0115                     	;# 
  2457  0116                     	;# 
  2458  0117                     	;# 
  2459  0118                     	;# 
  2460  0119                     	;# 
  2461  011A                     	;# 
  2462  011B                     	;# 
  2463  011D                     	;# 
  2464  011E                     	;# 
  2465  018C                     	;# 
  2466  018D                     	;# 
  2467  018E                     	;# 
  2468  0191                     	;# 
  2469  0191                     	;# 
  2470  0192                     	;# 
  2471  0193                     	;# 
  2472  0193                     	;# 
  2473  0193                     	;# 
  2474  0194                     	;# 
  2475  0195                     	;# 
  2476  0196                     	;# 
  2477  0199                     	;# 
  2478  019A                     	;# 
  2479  019B                     	;# 
  2480  019B                     	;# 
  2481  019C                     	;# 
  2482  019D                     	;# 
  2483  019E                     	;# 
  2484  019F                     	;# 
  2485  020C                     	;# 
  2486  020D                     	;# 
  2487  020E                     	;# 
  2488  0211                     	;# 
  2489  0211                     	;# 
  2490  0212                     	;# 
  2491  0212                     	;# 
  2492  0213                     	;# 
  2493  0213                     	;# 
  2494  0214                     	;# 
  2495  0214                     	;# 
  2496  0215                     	;# 
  2497  0215                     	;# 
  2498  0215                     	;# 
  2499  0216                     	;# 
  2500  0216                     	;# 
  2501  0217                     	;# 
  2502  0217                     	;# 
  2503  0219                     	;# 
  2504  021A                     	;# 
  2505  021B                     	;# 
  2506  021C                     	;# 
  2507  021D                     	;# 
  2508  021E                     	;# 
  2509  021F                     	;# 
  2510  0291                     	;# 
  2511  0291                     	;# 
  2512  0292                     	;# 
  2513  0293                     	;# 
  2514  0294                     	;# 
  2515  0295                     	;# 
  2516  0295                     	;# 
  2517  0296                     	;# 
  2518  0298                     	;# 
  2519  0298                     	;# 
  2520  0299                     	;# 
  2521  029A                     	;# 
  2522  029B                     	;# 
  2523  029C                     	;# 
  2524  029D                     	;# 
  2525  029E                     	;# 
  2526  0311                     	;# 
  2527  0311                     	;# 
  2528  0312                     	;# 
  2529  0313                     	;# 
  2530  0318                     	;# 
  2531  0318                     	;# 
  2532  0319                     	;# 
  2533  031A                     	;# 
  2534  038C                     	;# 
  2535  038D                     	;# 
  2536  038E                     	;# 
  2537  0391                     	;# 
  2538  0392                     	;# 
  2539  0393                     	;# 
  2540  0394                     	;# 
  2541  0395                     	;# 
  2542  0396                     	;# 
  2543  039A                     	;# 
  2544  039C                     	;# 
  2545  039D                     	;# 
  2546  039E                     	;# 
  2547  039F                     	;# 
  2548  0415                     	;# 
  2549  0416                     	;# 
  2550  0417                     	;# 
  2551  041C                     	;# 
  2552  041D                     	;# 
  2553  041E                     	;# 
  2554  0FE4                     	;# 
  2555  0FE5                     	;# 
  2556  0FE6                     	;# 
  2557  0FE7                     	;# 
  2558  0FE8                     	;# 
  2559  0FE9                     	;# 
  2560  0FEA                     	;# 
  2561  0FEB                     	;# 
  2562  0FED                     	;# 
  2563  0FEE                     	;# 
  2564  0FEF                     	;# 
  2565  0000                     	;# 
  2566  0001                     	;# 
  2567  0002                     	;# 
  2568  0003                     	;# 
  2569  0004                     	;# 
  2570  0005                     	;# 
  2571  0006                     	;# 
  2572  0007                     	;# 
  2573  0008                     	;# 
  2574  0009                     	;# 
  2575  000A                     	;# 
  2576  000B                     	;# 
  2577  000C                     	;# 
  2578  000D                     	;# 
  2579  000E                     	;# 
  2580  0011                     	;# 
  2581  0012                     	;# 
  2582  0013                     	;# 
  2583  0014                     	;# 
  2584  0015                     	;# 
  2585  0016                     	;# 
  2586  0016                     	;# 
  2587  0017                     	;# 
  2588  0018                     	;# 
  2589  0019                     	;# 
  2590  001A                     	;# 
  2591  001B                     	;# 
  2592  001C                     	;# 
  2593  001E                     	;# 
  2594  001F                     	;# 
  2595  008C                     	;# 
  2596  008D                     	;# 
  2597  008E                     	;# 
  2598  0091                     	;# 
  2599  0092                     	;# 
  2600  0093                     	;# 
  2601  0094                     	;# 
  2602  0095                     	;# 
  2603  0096                     	;# 
  2604  0097                     	;# 
  2605  0098                     	;# 
  2606  0099                     	;# 
  2607  009A                     	;# 
  2608  009B                     	;# 
  2609  009B                     	;# 
  2610  009C                     	;# 
  2611  009D                     	;# 
  2612  009E                     	;# 
  2613  010C                     	;# 
  2614  010D                     	;# 
  2615  010E                     	;# 
  2616  0111                     	;# 
  2617  0112                     	;# 
  2618  0113                     	;# 
  2619  0114                     	;# 
  2620  0115                     	;# 
  2621  0116                     	;# 
  2622  0117                     	;# 
  2623  0118                     	;# 
  2624  0119                     	;# 
  2625  011A                     	;# 
  2626  011B                     	;# 
  2627  011D                     	;# 
  2628  011E                     	;# 
  2629  018C                     	;# 
  2630  018D                     	;# 
  2631  018E                     	;# 
  2632  0191                     	;# 
  2633  0191                     	;# 
  2634  0192                     	;# 
  2635  0193                     	;# 
  2636  0193                     	;# 
  2637  0193                     	;# 
  2638  0194                     	;# 
  2639  0195                     	;# 
  2640  0196                     	;# 
  2641  0199                     	;# 
  2642  019A                     	;# 
  2643  019B                     	;# 
  2644  019B                     	;# 
  2645  019C                     	;# 
  2646  019D                     	;# 
  2647  019E                     	;# 
  2648  019F                     	;# 
  2649  020C                     	;# 
  2650  020D                     	;# 
  2651  020E                     	;# 
  2652  0211                     	;# 
  2653  0211                     	;# 
  2654  0212                     	;# 
  2655  0212                     	;# 
  2656  0213                     	;# 
  2657  0213                     	;# 
  2658  0214                     	;# 
  2659  0214                     	;# 
  2660  0215                     	;# 
  2661  0215                     	;# 
  2662  0215                     	;# 
  2663  0216                     	;# 
  2664  0216                     	;# 
  2665  0217                     	;# 
  2666  0217                     	;# 
  2667  0219                     	;# 
  2668  021A                     	;# 
  2669  021B                     	;# 
  2670  021C                     	;# 
  2671  021D                     	;# 
  2672  021E                     	;# 
  2673  021F                     	;# 
  2674  0291                     	;# 
  2675  0291                     	;# 
  2676  0292                     	;# 
  2677  0293                     	;# 
  2678  0294                     	;# 
  2679  0295                     	;# 
  2680  0295                     	;# 
  2681  0296                     	;# 
  2682  0298                     	;# 
  2683  0298                     	;# 
  2684  0299                     	;# 
  2685  029A                     	;# 
  2686  029B                     	;# 
  2687  029C                     	;# 
  2688  029D                     	;# 
  2689  029E                     	;# 
  2690  0311                     	;# 
  2691  0311                     	;# 
  2692  0312                     	;# 
  2693  0313                     	;# 
  2694  0318                     	;# 
  2695  0318                     	;# 
  2696  0319                     	;# 
  2697  031A                     	;# 
  2698  038C                     	;# 
  2699  038D                     	;# 
  2700  038E                     	;# 
  2701  0391                     	;# 
  2702  0392                     	;# 
  2703  0393                     	;# 
  2704  0394                     	;# 
  2705  0395                     	;# 
  2706  0396                     	;# 
  2707  039A                     	;# 
  2708  039C                     	;# 
  2709  039D                     	;# 
  2710  039E                     	;# 
  2711  039F                     	;# 
  2712  0415                     	;# 
  2713  0416                     	;# 
  2714  0417                     	;# 
  2715  041C                     	;# 
  2716  041D                     	;# 
  2717  041E                     	;# 
  2718  0FE4                     	;# 
  2719  0FE5                     	;# 
  2720  0FE6                     	;# 
  2721  0FE7                     	;# 
  2722  0FE8                     	;# 
  2723  0FE9                     	;# 
  2724  0FEA                     	;# 
  2725  0FEB                     	;# 
  2726  0FED                     	;# 
  2727  0FEE                     	;# 
  2728  0FEF                     	;# 
  2729  0000                     	;# 
  2730  0001                     	;# 
  2731  0002                     	;# 
  2732  0003                     	;# 
  2733  0004                     	;# 
  2734  0005                     	;# 
  2735  0006                     	;# 
  2736  0007                     	;# 
  2737  0008                     	;# 
  2738  0009                     	;# 
  2739  000A                     	;# 
  2740  000B                     	;# 
  2741  000C                     	;# 
  2742  000D                     	;# 
  2743  000E                     	;# 
  2744  0011                     	;# 
  2745  0012                     	;# 
  2746  0013                     	;# 
  2747  0014                     	;# 
  2748  0015                     	;# 
  2749  0016                     	;# 
  2750  0016                     	;# 
  2751  0017                     	;# 
  2752  0018                     	;# 
  2753  0019                     	;# 
  2754  001A                     	;# 
  2755  001B                     	;# 
  2756  001C                     	;# 
  2757  001E                     	;# 
  2758  001F                     	;# 
  2759  008C                     	;# 
  2760  008D                     	;# 
  2761  008E                     	;# 
  2762  0091                     	;# 
  2763  0092                     	;# 
  2764  0093                     	;# 
  2765  0094                     	;# 
  2766  0095                     	;# 
  2767  0096                     	;# 
  2768  0097                     	;# 
  2769  0098                     	;# 
  2770  0099                     	;# 
  2771  009A                     	;# 
  2772  009B                     	;# 
  2773  009B                     	;# 
  2774  009C                     	;# 
  2775  009D                     	;# 
  2776  009E                     	;# 
  2777  010C                     	;# 
  2778  010D                     	;# 
  2779  010E                     	;# 
  2780  0111                     	;# 
  2781  0112                     	;# 
  2782  0113                     	;# 
  2783  0114                     	;# 
  2784  0115                     	;# 
  2785  0116                     	;# 
  2786  0117                     	;# 
  2787  0118                     	;# 
  2788  0119                     	;# 
  2789  011A                     	;# 
  2790  011B                     	;# 
  2791  011D                     	;# 
  2792  011E                     	;# 
  2793  018C                     	;# 
  2794  018D                     	;# 
  2795  018E                     	;# 
  2796  0191                     	;# 
  2797  0191                     	;# 
  2798  0192                     	;# 
  2799  0193                     	;# 
  2800  0193                     	;# 
  2801  0193                     	;# 
  2802  0194                     	;# 
  2803  0195                     	;# 
  2804  0196                     	;# 
  2805  0199                     	;# 
  2806  019A                     	;# 
  2807  019B                     	;# 
  2808  019B                     	;# 
  2809  019C                     	;# 
  2810  019D                     	;# 
  2811  019E                     	;# 
  2812  019F                     	;# 
  2813  020C                     	;# 
  2814  020D                     	;# 
  2815  020E                     	;# 
  2816  0211                     	;# 
  2817  0211                     	;# 
  2818  0212                     	;# 
  2819  0212                     	;# 
  2820  0213                     	;# 
  2821  0213                     	;# 
  2822  0214                     	;# 
  2823  0214                     	;# 
  2824  0215                     	;# 
  2825  0215                     	;# 
  2826  0215                     	;# 
  2827  0216                     	;# 
  2828  0216                     	;# 
  2829  0217                     	;# 
  2830  0217                     	;# 
  2831  0219                     	;# 
  2832  021A                     	;# 
  2833  021B                     	;# 
  2834  021C                     	;# 
  2835  021D                     	;# 
  2836  021E                     	;# 
  2837  021F                     	;# 
  2838  0291                     	;# 
  2839  0291                     	;# 
  2840  0292                     	;# 
  2841  0293                     	;# 
  2842  0294                     	;# 
  2843  0295                     	;# 
  2844  0295                     	;# 
  2845  0296                     	;# 
  2846  0298                     	;# 
  2847  0298                     	;# 
  2848  0299                     	;# 
  2849  029A                     	;# 
  2850  029B                     	;# 
  2851  029C                     	;# 
  2852  029D                     	;# 
  2853  029E                     	;# 
  2854  0311                     	;# 
  2855  0311                     	;# 
  2856  0312                     	;# 
  2857  0313                     	;# 
  2858  0318                     	;# 
  2859  0318                     	;# 
  2860  0319                     	;# 
  2861  031A                     	;# 
  2862  038C                     	;# 
  2863  038D                     	;# 
  2864  038E                     	;# 
  2865  0391                     	;# 
  2866  0392                     	;# 
  2867  0393                     	;# 
  2868  0394                     	;# 
  2869  0395                     	;# 
  2870  0396                     	;# 
  2871  039A                     	;# 
  2872  039C                     	;# 
  2873  039D                     	;# 
  2874  039E                     	;# 
  2875  039F                     	;# 
  2876  0415                     	;# 
  2877  0416                     	;# 
  2878  0417                     	;# 
  2879  041C                     	;# 
  2880  041D                     	;# 
  2881  041E                     	;# 
  2882  0FE4                     	;# 
  2883  0FE5                     	;# 
  2884  0FE6                     	;# 
  2885  0FE7                     	;# 
  2886  0FE8                     	;# 
  2887  0FE9                     	;# 
  2888  0FEA                     	;# 
  2889  0FEB                     	;# 
  2890  0FED                     	;# 
  2891  0FEE                     	;# 
  2892  0FEF                     	;# 
  2893  0000                     	;# 
  2894  0001                     	;# 
  2895  0002                     	;# 
  2896  0003                     	;# 
  2897  0004                     	;# 
  2898  0005                     	;# 
  2899  0006                     	;# 
  2900  0007                     	;# 
  2901  0008                     	;# 
  2902  0009                     	;# 
  2903  000A                     	;# 
  2904  000B                     	;# 
  2905  000C                     	;# 
  2906  000D                     	;# 
  2907  000E                     	;# 
  2908  0011                     	;# 
  2909  0012                     	;# 
  2910  0013                     	;# 
  2911  0014                     	;# 
  2912  0015                     	;# 
  2913  0016                     	;# 
  2914  0016                     	;# 
  2915  0017                     	;# 
  2916  0018                     	;# 
  2917  0019                     	;# 
  2918  001A                     	;# 
  2919  001B                     	;# 
  2920  001C                     	;# 
  2921  001E                     	;# 
  2922  001F                     	;# 
  2923  008C                     	;# 
  2924  008D                     	;# 
  2925  008E                     	;# 
  2926  0091                     	;# 
  2927  0092                     	;# 
  2928  0093                     	;# 
  2929  0094                     	;# 
  2930  0095                     	;# 
  2931  0096                     	;# 
  2932  0097                     	;# 
  2933  0098                     	;# 
  2934  0099                     	;# 
  2935  009A                     	;# 
  2936  009B                     	;# 
  2937  009B                     	;# 
  2938  009C                     	;# 
  2939  009D                     	;# 
  2940  009E                     	;# 
  2941  010C                     	;# 
  2942  010D                     	;# 
  2943  010E                     	;# 
  2944  0111                     	;# 
  2945  0112                     	;# 
  2946  0113                     	;# 
  2947  0114                     	;# 
  2948  0115                     	;# 
  2949  0116                     	;# 
  2950  0117                     	;# 
  2951  0118                     	;# 
  2952  0119                     	;# 
  2953  011A                     	;# 
  2954  011B                     	;# 
  2955  011D                     	;# 
  2956  011E                     	;# 
  2957  018C                     	;# 
  2958  018D                     	;# 
  2959  018E                     	;# 
  2960  0191                     	;# 
  2961  0191                     	;# 
  2962  0192                     	;# 
  2963  0193                     	;# 
  2964  0193                     	;# 
  2965  0193                     	;# 
  2966  0194                     	;# 
  2967  0195                     	;# 
  2968  0196                     	;# 
  2969  0199                     	;# 
  2970  019A                     	;# 
  2971  019B                     	;# 
  2972  019B                     	;# 
  2973  019C                     	;# 
  2974  019D                     	;# 
  2975  019E                     	;# 
  2976  019F                     	;# 
  2977  020C                     	;# 
  2978  020D                     	;# 
  2979  020E                     	;# 
  2980  0211                     	;# 
  2981  0211                     	;# 
  2982  0212                     	;# 
  2983  0212                     	;# 
  2984  0213                     	;# 
  2985  0213                     	;# 
  2986  0214                     	;# 
  2987  0214                     	;# 
  2988  0215                     	;# 
  2989  0215                     	;# 
  2990  0215                     	;# 
  2991  0216                     	;# 
  2992  0216                     	;# 
  2993  0217                     	;# 
  2994  0217                     	;# 
  2995  0219                     	;# 
  2996  021A                     	;# 
  2997  021B                     	;# 
  2998  021C                     	;# 
  2999  021D                     	;# 
  3000  021E                     	;# 
  3001  021F                     	;# 
  3002  0291                     	;# 
  3003  0291                     	;# 
  3004  0292                     	;# 
  3005  0293                     	;# 
  3006  0294                     	;# 
  3007  0295                     	;# 
  3008  0295                     	;# 
  3009  0296                     	;# 
  3010  0298                     	;# 
  3011  0298                     	;# 
  3012  0299                     	;# 
  3013  029A                     	;# 
  3014  029B                     	;# 
  3015  029C                     	;# 
  3016  029D                     	;# 
  3017  029E                     	;# 
  3018  0311                     	;# 
  3019  0311                     	;# 
  3020  0312                     	;# 
  3021  0313                     	;# 
  3022  0318                     	;# 
  3023  0318                     	;# 
  3024  0319                     	;# 
  3025  031A                     	;# 
  3026  038C                     	;# 
  3027  038D                     	;# 
  3028  038E                     	;# 
  3029  0391                     	;# 
  3030  0392                     	;# 
  3031  0393                     	;# 
  3032  0394                     	;# 
  3033  0395                     	;# 
  3034  0396                     	;# 
  3035  039A                     	;# 
  3036  039C                     	;# 
  3037  039D                     	;# 
  3038  039E                     	;# 
  3039  039F                     	;# 
  3040  0415                     	;# 
  3041  0416                     	;# 
  3042  0417                     	;# 
  3043  041C                     	;# 
  3044  041D                     	;# 
  3045  041E                     	;# 
  3046  0FE4                     	;# 
  3047  0FE5                     	;# 
  3048  0FE6                     	;# 
  3049  0FE7                     	;# 
  3050  0FE8                     	;# 
  3051  0FE9                     	;# 
  3052  0FEA                     	;# 
  3053  0FEB                     	;# 
  3054  0FED                     	;# 
  3055  0FEE                     	;# 
  3056  0FEF                     	;# 
  3057  0000                     	;# 
  3058  0001                     	;# 
  3059  0002                     	;# 
  3060  0003                     	;# 
  3061  0004                     	;# 
  3062  0005                     	;# 
  3063  0006                     	;# 
  3064  0007                     	;# 
  3065  0008                     	;# 
  3066  0009                     	;# 
  3067  000A                     	;# 
  3068  000B                     	;# 
  3069  000C                     	;# 
  3070  000D                     	;# 
  3071  000E                     	;# 
  3072  0011                     	;# 
  3073  0012                     	;# 
  3074  0013                     	;# 
  3075  0014                     	;# 
  3076  0015                     	;# 
  3077  0016                     	;# 
  3078  0016                     	;# 
  3079  0017                     	;# 
  3080  0018                     	;# 
  3081  0019                     	;# 
  3082  001A                     	;# 
  3083  001B                     	;# 
  3084  001C                     	;# 
  3085  001E                     	;# 
  3086  001F                     	;# 
  3087  008C                     	;# 
  3088  008D                     	;# 
  3089  008E                     	;# 
  3090  0091                     	;# 
  3091  0092                     	;# 
  3092  0093                     	;# 
  3093  0094                     	;# 
  3094  0095                     	;# 
  3095  0096                     	;# 
  3096  0097                     	;# 
  3097  0098                     	;# 
  3098  0099                     	;# 
  3099  009A                     	;# 
  3100  009B                     	;# 
  3101  009B                     	;# 
  3102  009C                     	;# 
  3103  009D                     	;# 
  3104  009E                     	;# 
  3105  010C                     	;# 
  3106  010D                     	;# 
  3107  010E                     	;# 
  3108  0111                     	;# 
  3109  0112                     	;# 
  3110  0113                     	;# 
  3111  0114                     	;# 
  3112  0115                     	;# 
  3113  0116                     	;# 
  3114  0117                     	;# 
  3115  0118                     	;# 
  3116  0119                     	;# 
  3117  011A                     	;# 
  3118  011B                     	;# 
  3119  011D                     	;# 
  3120  011E                     	;# 
  3121  018C                     	;# 
  3122  018D                     	;# 
  3123  018E                     	;# 
  3124  0191                     	;# 
  3125  0191                     	;# 
  3126  0192                     	;# 
  3127  0193                     	;# 
  3128  0193                     	;# 
  3129  0193                     	;# 
  3130  0194                     	;# 
  3131  0195                     	;# 
  3132  0196                     	;# 
  3133  0199                     	;# 
  3134  019A                     	;# 
  3135  019B                     	;# 
  3136  019B                     	;# 
  3137  019C                     	;# 
  3138  019D                     	;# 
  3139  019E                     	;# 
  3140  019F                     	;# 
  3141  020C                     	;# 
  3142  020D                     	;# 
  3143  020E                     	;# 
  3144  0211                     	;# 
  3145  0211                     	;# 
  3146  0212                     	;# 
  3147  0212                     	;# 
  3148  0213                     	;# 
  3149  0213                     	;# 
  3150  0214                     	;# 
  3151  0214                     	;# 
  3152  0215                     	;# 
  3153  0215                     	;# 
  3154  0215                     	;# 
  3155  0216                     	;# 
  3156  0216                     	;# 
  3157  0217                     	;# 
  3158  0217                     	;# 
  3159  0219                     	;# 
  3160  021A                     	;# 
  3161  021B                     	;# 
  3162  021C                     	;# 
  3163  021D                     	;# 
  3164  021E                     	;# 
  3165  021F                     	;# 
  3166  0291                     	;# 
  3167  0291                     	;# 
  3168  0292                     	;# 
  3169  0293                     	;# 
  3170  0294                     	;# 
  3171  0295                     	;# 
  3172  0295                     	;# 
  3173  0296                     	;# 
  3174  0298                     	;# 
  3175  0298                     	;# 
  3176  0299                     	;# 
  3177  029A                     	;# 
  3178  029B                     	;# 
  3179  029C                     	;# 
  3180  029D                     	;# 
  3181  029E                     	;# 
  3182  0311                     	;# 
  3183  0311                     	;# 
  3184  0312                     	;# 
  3185  0313                     	;# 
  3186  0318                     	;# 
  3187  0318                     	;# 
  3188  0319                     	;# 
  3189  031A                     	;# 
  3190  038C                     	;# 
  3191  038D                     	;# 
  3192  038E                     	;# 
  3193  0391                     	;# 
  3194  0392                     	;# 
  3195  0393                     	;# 
  3196  0394                     	;# 
  3197  0395                     	;# 
  3198  0396                     	;# 
  3199  039A                     	;# 
  3200  039C                     	;# 
  3201  039D                     	;# 
  3202  039E                     	;# 
  3203  039F                     	;# 
  3204  0415                     	;# 
  3205  0416                     	;# 
  3206  0417                     	;# 
  3207  041C                     	;# 
  3208  041D                     	;# 
  3209  041E                     	;# 
  3210  0FE4                     	;# 
  3211  0FE5                     	;# 
  3212  0FE6                     	;# 
  3213  0FE7                     	;# 
  3214  0FE8                     	;# 
  3215  0FE9                     	;# 
  3216  0FEA                     	;# 
  3217  0FEB                     	;# 
  3218  0FED                     	;# 
  3219  0FEE                     	;# 
  3220  0FEF                     	;# 
  3221  0000                     	;# 
  3222  0001                     	;# 
  3223  0002                     	;# 
  3224  0003                     	;# 
  3225  0004                     	;# 
  3226  0005                     	;# 
  3227  0006                     	;# 
  3228  0007                     	;# 
  3229  0008                     	;# 
  3230  0009                     	;# 
  3231  000A                     	;# 
  3232  000B                     	;# 
  3233  000C                     	;# 
  3234  000D                     	;# 
  3235  000E                     	;# 
  3236  0011                     	;# 
  3237  0012                     	;# 
  3238  0013                     	;# 
  3239  0014                     	;# 
  3240  0015                     	;# 
  3241  0016                     	;# 
  3242  0016                     	;# 
  3243  0017                     	;# 
  3244  0018                     	;# 
  3245  0019                     	;# 
  3246  001A                     	;# 
  3247  001B                     	;# 
  3248  001C                     	;# 
  3249  001E                     	;# 
  3250  001F                     	;# 
  3251  008C                     	;# 
  3252  008D                     	;# 
  3253  008E                     	;# 
  3254  0091                     	;# 
  3255  0092                     	;# 
  3256  0093                     	;# 
  3257  0094                     	;# 
  3258  0095                     	;# 
  3259  0096                     	;# 
  3260  0097                     	;# 
  3261  0098                     	;# 
  3262  0099                     	;# 
  3263  009A                     	;# 
  3264  009B                     	;# 
  3265  009B                     	;# 
  3266  009C                     	;# 
  3267  009D                     	;# 
  3268  009E                     	;# 
  3269  010C                     	;# 
  3270  010D                     	;# 
  3271  010E                     	;# 
  3272  0111                     	;# 
  3273  0112                     	;# 
  3274  0113                     	;# 
  3275  0114                     	;# 
  3276  0115                     	;# 
  3277  0116                     	;# 
  3278  0117                     	;# 
  3279  0118                     	;# 
  3280  0119                     	;# 
  3281  011A                     	;# 
  3282  011B                     	;# 
  3283  011D                     	;# 
  3284  011E                     	;# 
  3285  018C                     	;# 
  3286  018D                     	;# 
  3287  018E                     	;# 
  3288  0191                     	;# 
  3289  0191                     	;# 
  3290  0192                     	;# 
  3291  0193                     	;# 
  3292  0193                     	;# 
  3293  0193                     	;# 
  3294  0194                     	;# 
  3295  0195                     	;# 
  3296  0196                     	;# 
  3297  0199                     	;# 
  3298  019A                     	;# 
  3299  019B                     	;# 
  3300  019B                     	;# 
  3301  019C                     	;# 
  3302  019D                     	;# 
  3303  019E                     	;# 
  3304  019F                     	;# 
  3305  020C                     	;# 
  3306  020D                     	;# 
  3307  020E                     	;# 
  3308  0211                     	;# 
  3309  0211                     	;# 
  3310  0212                     	;# 
  3311  0212                     	;# 
  3312  0213                     	;# 
  3313  0213                     	;# 
  3314  0214                     	;# 
  3315  0214                     	;# 
  3316  0215                     	;# 
  3317  0215                     	;# 
  3318  0215                     	;# 
  3319  0216                     	;# 
  3320  0216                     	;# 
  3321  0217                     	;# 
  3322  0217                     	;# 
  3323  0219                     	;# 
  3324  021A                     	;# 
  3325  021B                     	;# 
  3326  021C                     	;# 
  3327  021D                     	;# 
  3328  021E                     	;# 
  3329  021F                     	;# 
  3330  0291                     	;# 
  3331  0291                     	;# 
  3332  0292                     	;# 
  3333  0293                     	;# 
  3334  0294                     	;# 
  3335  0295                     	;# 
  3336  0295                     	;# 
  3337  0296                     	;# 
  3338  0298                     	;# 
  3339  0298                     	;# 
  3340  0299                     	;# 
  3341  029A                     	;# 
  3342  029B                     	;# 
  3343  029C                     	;# 
  3344  029D                     	;# 
  3345  029E                     	;# 
  3346  0311                     	;# 
  3347  0311                     	;# 
  3348  0312                     	;# 
  3349  0313                     	;# 
  3350  0318                     	;# 
  3351  0318                     	;# 
  3352  0319                     	;# 
  3353  031A                     	;# 
  3354  038C                     	;# 
  3355  038D                     	;# 
  3356  038E                     	;# 
  3357  0391                     	;# 
  3358  0392                     	;# 
  3359  0393                     	;# 
  3360  0394                     	;# 
  3361  0395                     	;# 
  3362  0396                     	;# 
  3363  039A                     	;# 
  3364  039C                     	;# 
  3365  039D                     	;# 
  3366  039E                     	;# 
  3367  039F                     	;# 
  3368  0415                     	;# 
  3369  0416                     	;# 
  3370  0417                     	;# 
  3371  041C                     	;# 
  3372  041D                     	;# 
  3373  041E                     	;# 
  3374  0FE4                     	;# 
  3375  0FE5                     	;# 
  3376  0FE6                     	;# 
  3377  0FE7                     	;# 
  3378  0FE8                     	;# 
  3379  0FE9                     	;# 
  3380  0FEA                     	;# 
  3381  0FEB                     	;# 
  3382  0FED                     	;# 
  3383  0FEE                     	;# 
  3384  0FEF                     	;_I2cPacket
  3385                           
  3386                           	psect	idataCOMMON
  3387  07FF                     __pidataCOMMON:	
  3388                           
  3389                           ;initializer for _LedBehaviourSts
  3390  07FF  3401               	retlw	1
  3391                           
  3392                           	psect	idataBANK1
  3393  0866                     __pidataBANK1:	
  3394                           
  3395                           ;initializer for _MainSystemTimebaseFlag
  3396  0866  3401               	retlw	1
  3397                           
  3398                           	psect	idataBANK2
  3399  0C00                     __pidataBANK2:	
  3400                           
  3401                           ;initializer for _TaskTable
  3402  0C00  34A0               	retlw	low _I2c_DataReceiveSm
  3403  0C01  3401               	retlw	high _I2c_DataReceiveSm
  3404  0C02  3400               	retlw	0
  3405  0C03  3400               	retlw	0
  3406  0C04  3400               	retlw	0
  3407  0C05  3401               	retlw	1
  3408  0C06  3400               	retlw	0
  3409  0C07  3400               	retlw	0
  3410  0C08  3477               	retlw	low _SnrDrv_GetDistSm
  3411  0C09  340E               	retlw	high _SnrDrv_GetDistSm
  3412  0C0A  3400               	retlw	0
  3413  0C0B  3400               	retlw	0
  3414  0C0C  3400               	retlw	0
  3415  0C0D  340A               	retlw	10
  3416  0C0E  3400               	retlw	0
  3417  0C0F  3400               	retlw	0
  3418  0C10  3492               	retlw	low _I2cSlv_MainTask
  3419  0C11  3409               	retlw	high _I2cSlv_MainTask
  3420  0C12  3400               	retlw	0
  3421  0C13  3400               	retlw	0
  3422  0C14  3400               	retlw	0
  3423  0C15  3401               	retlw	1
  3424  0C16  3400               	retlw	0
  3425  0C17  3400               	retlw	0
  3426  0C18  34A7               	retlw	low _Wdg_MainTask
  3427  0C19  3409               	retlw	high _Wdg_MainTask
  3428  0C1A  3400               	retlw	0
  3429  0C1B  3400               	retlw	0
  3430  0C1C  3400               	retlw	0
  3431  0C1D  34E8               	retlw	232
  3432  0C1E  3403               	retlw	3
  3433  0C1F  3400               	retlw	0
  3434  0C20  34A1               	retlw	low _Led_MainTask
  3435  0C21  340B               	retlw	high _Led_MainTask
  3436  0C22  3400               	retlw	0
  3437  0C23  3400               	retlw	0
  3438  0C24  3400               	retlw	0
  3439  0C25  3464               	retlw	100
  3440  0C26  3400               	retlw	0
  3441  0C27  3400               	retlw	0
  3442  0C28  3434               	retlw	low _App_MainTask
  3443  0C29  340F               	retlw	high _App_MainTask
  3444  0C2A  3400               	retlw	0
  3445  0C2B  3400               	retlw	0
  3446  0C2C  3400               	retlw	0
  3447  0C2D  3464               	retlw	100
  3448  0C2E  3400               	retlw	0
  3449  0C2F  3400               	retlw	0
  3450                           
  3451                           	psect	stringtext
  3452  1000                     __pstringtext:	
  3453  1000                     _dpowers:	
  3454  1000  3401               	retlw	1
  3455  1001  3400               	retlw	0
  3456  1002  340A               	retlw	10
  3457  1003  3400               	retlw	0
  3458  1004  3464               	retlw	100
  3459  1005  3400               	retlw	0
  3460  1006  34E8               	retlw	232
  3461  1007  3403               	retlw	3
  3462  1008  3410               	retlw	16
  3463  1009  3427               	retlw	39
  3464  100A                     __end_of_dpowers:	
  3465  100A                     _TaskNumber:	
  3466  100A  3406               	retlw	6
  3467  100B  3400               	retlw	0
  3468  100C                     __end_of_TaskNumber:	
  3469  000B                     _INTCONbits	set	11
  3470  0011                     _PIR1bits	set	17
  3471  0013                     _PIR3bits	set	19
  3472  000C                     _PORTAbits	set	12
  3473  000E                     _PORTCbits	set	14
  3474  001B                     _PR2	set	27
  3475  001C                     _T2CONbits	set	28
  3476  009D                     _ADCON0bits	set	157
  3477  009E                     _ADCON1bits	set	158
  3478  009C                     _ADRESH	set	156
  3479  009B                     _ADRESL	set	155
  3480  0095                     _OPTION_REGbits	set	149
  3481  0099                     _OSCCONbits	set	153
  3482  009A                     _OSCSTATbits	set	154
  3483  0091                     _PIE1bits	set	145
  3484  0093                     _PIE3bits	set	147
  3485  008C                     _TRISAbits	set	140
  3486  008D                     _TRISBbits	set	141
  3487  008E                     _TRISCbits	set	142
  3488  0097                     _WDTCONbits	set	151
  3489  0117                     _FVRCONbits	set	279
  3490  010C                     _LATA	set	268
  3491  010D                     _LATB	set	269
  3492  010D                     _LATBbits	set	269
  3493  010E                     _LATC	set	270
  3494  010E                     _LATCbits	set	270
  3495  018C                     _ANSELA	set	396
  3496  018C                     _ANSELAbits	set	396
  3497  018D                     _ANSELB	set	397
  3498  018D                     _ANSELBbits	set	397
  3499  018E                     _ANSELC	set	398
  3500  018E                     _ANSELCbits	set	398
  3501  0212                     _SSP1ADD	set	530
  3502  0211                     _SSP1BUF	set	529
  3503  0215                     _SSP1CON1	set	533
  3504  0215                     _SSP1CON1bits	set	533
  3505  0216                     _SSP1CON2	set	534
  3506  0217                     _SSP1CON3	set	535
  3507  0213                     _SSP1MSK	set	531
  3508  0214                     _SSP1STAT	set	532
  3509  020C                     _WPUA	set	524
  3510  020C                     _WPUAbits	set	524
  3511  020D                     _WPUB	set	525
  3512  020D                     _WPUBbits	set	525
  3513  020E                     _WPUC	set	526
  3514  020E                     _WPUCbits	set	526
  3515  0416                     _PR4	set	1046
  3516  041D                     _PR6	set	1053
  3517  0417                     _T4CONbits	set	1047
  3518  041E                     _T6CONbits	set	1054
  3519  100C                     STR_4:	
  3520  100C  3430               	retlw	48	;'0'
  3521  100D  3431               	retlw	49	;'1'
  3522  100E  342E               	retlw	46	;'.'
  3523  100F  3430               	retlw	48	;'0'
  3524  1010  3431               	retlw	49	;'1'
  3525  1011  342E               	retlw	46	;'.'
  3526  1012  3430               	retlw	48	;'0'
  3527  1013  3430               	retlw	48	;'0'
  3528  1014  3400               	retlw	0
  3529  1015                     STR_5:	
  3530  1015  3430               	retlw	48	;'0'
  3531  1016  3431               	retlw	49	;'1'
  3532  1017  342E               	retlw	46	;'.'
  3533  1018  3430               	retlw	48	;'0'
  3534  1019  3432               	retlw	50	;'2'
  3535  101A  342E               	retlw	46	;'.'
  3536  101B  3430               	retlw	48	;'0'
  3537  101C  3430               	retlw	48	;'0'
  3538  101D  3400               	retlw	0
  3539  101E                     STR_1:	
  3540  101E  3425               	retlw	37	;'%'
  3541  101F  3464               	retlw	100	;'d'
  3542  1020  342E               	retlw	46	;'.'
  3543  1021  3425               	retlw	37	;'%'
  3544  1022  3430               	retlw	48	;'0'
  3545  1023  3431               	retlw	49	;'1'
  3546  1024  3475               	retlw	117	;'u'
  3547  1025  3400               	retlw	0
  3548  1026                     STR_3:	
  3549  1026  3453               	retlw	83	;'S'
  3550  1027  3442               	retlw	66	;'B'
  3551  1028  3433               	retlw	51	;'3'
  3552  1029  3431               	retlw	49	;'1'
  3553  102A  3430               	retlw	48	;'0'
  3554  102B  3400               	retlw	0
  3555  102C                     STR_2:	
  3556  102C  3445               	retlw	69	;'E'
  3557  102D  3443               	retlw	67	;'C'
  3558  102E  3448               	retlw	72	;'H'
  3559  102F  344F               	retlw	79	;'O'
  3560  1030  3400               	retlw	0
  3561                           
  3562                           ; #config settings
  3563  0000                     
  3564                           	psect	cinit
  3565  0038                     start_initialization:	
  3566  0038                     __initialization:		;BIGRAM
  3567                           
  3568                           ; Initialize objects allocated to COMMON
  3569  0038  3187  27FF  3180   	fcall	__pidataCOMMON	;fetch initializer
  3570  003B  00F9               	movwf	__pdataCOMMON& (0+127)
  3571                           
  3572                           ; Initialize objects allocated to BANK1
  3573  003C  0021               	movlb	1	; select bank1
  3574  003D  3188  2066  3180   	fcall	__pidataBANK1	;fetch initializer
  3575  0040  00EF               	movwf	__pdataBANK1& (0+127)
  3576                           
  3577                           ; Initialize objects allocated to BANK2
  3578  0041  3000               	movlw	low __pidataBANK2
  3579  0042  0084               	movwf	4
  3580  0043  308C               	movlw	(high __pidataBANK2)| (0+128)
  3581  0044  0085               	movwf	5
  3582  0045  3020               	movlw	low __pdataBANK2
  3583  0046  0086               	movwf	6
  3584  0047  3001               	movlw	high __pdataBANK2
  3585  0048  0087               	movwf	7
  3586  0049  3000               	movlw	0
  3587  004A  00FF               	movwf	btemp+1
  3588  004B  3030               	movlw	48
  3589  004C  3188  20FE  3180   	fcall	init_ram
  3590                           
  3591                           ; Clear objects allocated to BIGRAM
  3592  004F  309D               	movlw	low (0+9117)
  3593  0050  0084               	movwf	4
  3594  0051  3023               	movlw	high (0+9117)
  3595  0052  0085               	movwf	5
  3596  0053  3053               	movlw	83
  3597  0054  00FE               	movwf	btemp
  3598  0055  3000               	movlw	0
  3599  0056  00FF               	movwf	btemp+1
  3600  0057  3188  20F2  3180   	fcall	clear_ram0
  3601                           
  3602                           ; Clear objects allocated to COMMON
  3603  005A  01F6               	clrf	__pbssCOMMON& (0+127)
  3604  005B  01F7               	clrf	(__pbssCOMMON+1)& (0+127)
  3605  005C  01F8               	clrf	(__pbssCOMMON+2)& (0+127)
  3606                           
  3607                           ; Clear objects allocated to BANK0
  3608  005D  0020               	movlb	0	; select bank0
  3609  005E  01E5               	clrf	__pbssBANK0& (0+127)
  3610  005F  01E6               	clrf	(__pbssBANK0+1)& (0+127)
  3611  0060  01E7               	clrf	(__pbssBANK0+2)& (0+127)
  3612  0061  01E8               	clrf	(__pbssBANK0+3)& (0+127)
  3613  0062  01E9               	clrf	(__pbssBANK0+4)& (0+127)
  3614  0063  01EA               	clrf	(__pbssBANK0+5)& (0+127)
  3615  0064  01EB               	clrf	(__pbssBANK0+6)& (0+127)
  3616  0065  01EC               	clrf	(__pbssBANK0+7)& (0+127)
  3617  0066  01ED               	clrf	(__pbssBANK0+8)& (0+127)
  3618                           
  3619                           ; Clear objects allocated to BANK1
  3620  0067  30A0               	movlw	low __pbssBANK1
  3621  0068  0084               	movwf	4
  3622  0069  3000               	movlw	high __pbssBANK1
  3623  006A  0085               	movwf	5
  3624  006B  304F               	movlw	79
  3625  006C  00FE               	movwf	btemp
  3626  006D  3000               	movlw	0
  3627  006E  00FF               	movwf	btemp+1
  3628  006F  3188  20F2  3180   	fcall	clear_ram0
  3629                           
  3630                           ; Clear objects allocated to BANK2
  3631  0072  3050               	movlw	low __pbssBANK2
  3632  0073  0084               	movwf	4
  3633  0074  3001               	movlw	high __pbssBANK2
  3634  0075  0085               	movwf	5
  3635  0076  3012               	movlw	18
  3636  0077  00FE               	movwf	btemp
  3637  0078  3000               	movlw	0
  3638  0079  00FF               	movwf	btemp+1
  3639  007A  3188  20F2  3180   	fcall	clear_ram0
  3640                           
  3641                           ; Clear objects allocated to BANK3
  3642  007D  30A0               	movlw	low __pbssBANK3
  3643  007E  0084               	movwf	4
  3644  007F  3001               	movlw	high __pbssBANK3
  3645  0080  0085               	movwf	5
  3646  0081  3050               	movlw	80
  3647  0082  00FE               	movwf	btemp
  3648  0083  3000               	movlw	0
  3649  0084  00FF               	movwf	btemp+1
  3650  0085  3188  20F2  3180   	fcall	clear_ram0
  3651                           
  3652                           ; Clear objects allocated to BANK4
  3653  0088  3020               	movlw	low __pbssBANK4
  3654  0089  0084               	movwf	4
  3655  008A  3002               	movlw	high __pbssBANK4
  3656  008B  0085               	movwf	5
  3657  008C  3050               	movlw	80
  3658  008D  00FE               	movwf	btemp
  3659  008E  3000               	movlw	0
  3660  008F  00FF               	movwf	btemp+1
  3661  0090  3188  20F2  3180   	fcall	clear_ram0
  3662                           
  3663                           ; Clear objects allocated to BANK5
  3664  0093  30A0               	movlw	low __pbssBANK5
  3665  0094  0084               	movwf	4
  3666  0095  3002               	movlw	high __pbssBANK5
  3667  0096  0085               	movwf	5
  3668  0097  3050               	movlw	80
  3669  0098  00FE               	movwf	btemp
  3670  0099  3000               	movlw	0
  3671  009A  00FF               	movwf	btemp+1
  3672  009B  3188  20F2  3180   	fcall	clear_ram0
  3673                           
  3674                           ; Clear objects allocated to BANK6
  3675  009E  3020               	movlw	low __pbssBANK6
  3676  009F  0084               	movwf	4
  3677  00A0  3003               	movlw	high __pbssBANK6
  3678  00A1  0085               	movwf	5
  3679  00A2  3050               	movlw	80
  3680  00A3  00FE               	movwf	btemp
  3681  00A4  3000               	movlw	0
  3682  00A5  00FF               	movwf	btemp+1
  3683  00A6  3188  20F2         	fcall	clear_ram0
  3684  00A8                     end_of_initialization:	
  3685                           ;End of C runtime variable initialization code
  3686                           
  3687  00A8                     __end_of__initialization:	
  3688  00A8  107E               	bcf	int$flags,0	;clear compiler interrupt flag (level 1)
  3689  00A9  0020               	movlb	0
  3690  00AA  3188  288A         	ljmp	_main	;jump to C main() function
  3691                           
  3692                           	psect	bssCOMMON
  3693  0076                     __pbssCOMMON:	
  3694  0076                     _I2cSlaveAddress:	
  3695  0076                     	ds	1
  3696  0077                     _I2cReplyPacketReady:	
  3697  0077                     	ds	2
  3698                           
  3699                           	psect	dataCOMMON
  3700  0079                     __pdataCOMMON:	
  3701  0079                     _LedBehaviourSts:	
  3702  0079                     	ds	1
  3703                           
  3704                           	psect	bssBANK0
  3705  0065                     __pbssBANK0:	
  3706  0065                     _DistanceCm:	
  3707  0065                     	ds	2
  3708  0067                     I2c_DataReceiveSm@I2cRxAddress:	
  3709  0067                     	ds	1
  3710  0068                     I2c_DataReceiveSm@I2cRxFlag:	
  3711  0068                     	ds	1
  3712  0069                     I2c_DataReceiveSm@I2cRxState:	
  3713  0069                     	ds	1
  3714  006A                     I2c_DataReceiveSm@OpType:	
  3715  006A                     	ds	1
  3716  006B                     I2c_DataReceiveSm@RxCounter:	
  3717  006B                     	ds	1
  3718  006C                     I2c_DataReceiveSm@TxCounter:	
  3719  006C                     	ds	1
  3720  006D                     _SystemState:	
  3721  006D                     	ds	1
  3722                           
  3723                           	psect	bssBANK1
  3724  00A0                     __pbssBANK1:	
  3725  00A0                     App_MainTask@F4114:	
  3726  00A0                     	ds	12
  3727  00AC                     SnrDrv_DetectEchoPulse@EchoCounter:	
  3728  00AC                     	ds	2
  3729  00AE                     SnrDrv_GetDistSm@Counter:	
  3730  00AE                     	ds	2
  3731  00B0                     SonarMeasure@Counter:	
  3732  00B0                     	ds	2
  3733  00B2                     _InterruptCounter:	
  3734  00B2                     	ds	2
  3735  00B4                     _Tmr2IsrCallback:	
  3736  00B4                     	ds	2
  3737  00B6                     _Tmr4IsrCallback:	
  3738  00B6                     	ds	2
  3739  00B8                     _Tmr6IsrCallback:	
  3740  00B8                     	ds	2
  3741  00BA                     AppSm@AppState:	
  3742  00BA                     	ds	1
  3743  00BB                     AppSm@WpuSetCounter:	
  3744  00BB                     	ds	1
  3745  00BC                     I2cSlv_I2cDrvHandle@I2cReceiveMsgState:	
  3746  00BC                     	ds	1
  3747  00BD                     SnrDrv_DetectEchoPulse@DetectEchoState:	
  3748  00BD                     	ds	1
  3749  00BE                     SnrDrv_GetDistSm@SonarMeasState:	
  3750  00BE                     	ds	1
  3751  00BF                     SonarMeasure@SonarMeasState:	
  3752  00BF                     	ds	1
  3753  00C0                     _AutomeasureOption:	
  3754  00C0                     	ds	1
  3755  00C1                     _RepBufferLen:	
  3756  00C1                     	ds	1
  3757  00C2                     _I2cConfig:	
  3758  00C2                     	ds	11
  3759  00CD                     _Led1Blink:	
  3760  00CD                     	ds	9
  3761  00D6                     _Led1Pulse:	
  3762  00D6                     	ds	6
  3763  00DC                     _EchoPulseCount:	
  3764  00DC                     	ds	2
  3765  00DE                     _I2cNewPacketNotification:	
  3766  00DE                     	ds	2
  3767  00E0                     _I2cNewTxNotification:	
  3768  00E0                     	ds	2
  3769  00E2                     _I2cSetAddress:	
  3770  00E2                     	ds	2
  3771  00E4                     _I2cWriteRequest:	
  3772  00E4                     	ds	2
  3773  00E6                     _SonarEchoCountReady:	
  3774  00E6                     	ds	2
  3775  00E8                     _SonarMeasureComplete:	
  3776  00E8                     	ds	2
  3777  00EA                     _SonarStartMeasure:	
  3778  00EA                     	ds	2
  3779  00EC                     _StartMeasure:	
  3780  00EC                     	ds	2
  3781  00EE                     _Led1Sts:	
  3782  00EE                     	ds	1
  3783                           
  3784                           	psect	dataBANK1
  3785  00EF                     __pdataBANK1:	
  3786  00EF                     _MainSystemTimebaseFlag:	
  3787  00EF                     	ds	1
  3788                           
  3789                           	psect	bssBANK2
  3790  0150                     __pbssBANK2:	
  3791  0150                     App_MainTask@F4094:	
  3792  0150                     	ds	18
  3793                           
  3794                           	psect	dataBANK2
  3795  0120                     __pdataBANK2:	
  3796  0120                     _TaskTable:	
  3797  0120                     	ds	48
  3798                           
  3799                           	psect	bssBANK3
  3800  01A0                     __pbssBANK3:	
  3801  01A0                     _RepBuffer:	
  3802  01A0                     	ds	80
  3803                           
  3804                           	psect	bssBANK4
  3805  0220                     __pbssBANK4:	
  3806  0220                     _CmdBuffer:	
  3807  0220                     	ds	80
  3808                           
  3809                           	psect	bssBANK5
  3810  02A0                     __pbssBANK5:	
  3811  02A0                     _I2cTxBuffer:	
  3812  02A0                     	ds	80
  3813                           
  3814                           	psect	bssBANK6
  3815  0320                     __pbssBANK6:	
  3816  0320                     _I2cRxBuffer:	
  3817  0320                     	ds	80
  3818                           
  3819                           	psect	inittext
  3820  08FE                     init_ram:	
  3821  08FE  00FE               	movwf	126
  3822  08FF                     initloop:	
  3823  08FF  0012               	moviw fsr0++
  3824  0900  001E               	movwi fsr1++
  3825  0901  3001               	movlw	1
  3826  0902  02FE               	subwf	126,f
  3827  0903  3000               	movlw	0
  3828  0904  3BFF               	subwfb	127,f
  3829  0905  087F               	movf	127,w
  3830  0906  047E               	iorwf	126,w
  3831  0907  1903               	btfsc	3,2
  3832  0908  3400               	retlw	0
  3833  0909  28FF               	goto	initloop
  3834                           
  3835                           	psect	clrtext
  3836  08F2                     clear_ram0:	
  3837                           ;	Called with FSR0 containing the base address, and
  3838                           ;	btemp/btemp+1 has the size to clear
  3839                           
  3840  08F2  0064               	clrwdt	;clear the watchdog before getting into this loop
  3841  08F3                     clrloop0:	
  3842  08F3  0180               	clrf	0	;clear RAM location pointed to by FSR
  3843  08F4  3101               	addfsr 0,1
  3844  08F5  3001               	movlw	1
  3845  08F6  02FE               	subwf	126,f
  3846  08F7  3000               	movlw	0
  3847  08F8  3BFF               	subwfb	127,f
  3848  08F9  087F               	movf	127,w
  3849  08FA  047E               	iorwf	126,w
  3850  08FB  1903               	btfsc	3,2
  3851  08FC  3400               	retlw	0	;all done for this memory range, return
  3852  08FD  28F3               	goto	clrloop0	;have we reached the end yet?
  3853                           
  3854                           	psect	cstackBANK2
  3855  0162                     __pcstackBANK2:	
  3856  0162                     ??_InitializeTasks:	
  3857  0162                     ??_ScheduleTasks:	
  3858                           ; 1 bytes @ 0x0
  3859                           
  3860                           
  3861                           ; 1 bytes @ 0x0
  3862  0162                     	ds	6
  3863                           
  3864                           	psect	cstackCOMMON
  3865  0070                     __pcstackCOMMON:	
  3866  0070                     ?_SystemInit:	
  3867  0070                     ?_MainScheduler:	
  3868                           ; 1 bytes @ 0x0
  3869                           
  3870  0070                     ?_ReceiveEvt:	
  3871                           ; 1 bytes @ 0x0
  3872                           
  3873  0070                     ?_GenerateEvt:	
  3874                           ; 1 bytes @ 0x0
  3875                           
  3876  0070                     ?_InitializeTasks:	
  3877                           ; 1 bytes @ 0x0
  3878                           
  3879  0070                     ?_ScheduleTasks:	
  3880                           ; 1 bytes @ 0x0
  3881                           
  3882  0070                     ?_I2cSlv_I2cDrvHandle:	
  3883                           ; 1 bytes @ 0x0
  3884                           
  3885  0070                     ?_SetLedBehavSts:	
  3886                           ; 1 bytes @ 0x0
  3887                           
  3888  0070                     ?_Adc_ConfigAnCh:	
  3889                           ; 1 bytes @ 0x0
  3890                           
  3891  0070                     ?_Adc_InitAdcModule:	
  3892                           ; 1 bytes @ 0x0
  3893                           
  3894  0070                     ?_Adc_SelectChannel:	
  3895                           ; 1 bytes @ 0x0
  3896                           
  3897  0070                     ?_Adc_StartConversion:	
  3898                           ; 1 bytes @ 0x0
  3899                           
  3900  0070                     ?_Adc_GetConvSts:	
  3901                           ; 1 bytes @ 0x0
  3902                           
  3903  0070                     ?_CheckAckStatus:	
  3904                           ; 1 bytes @ 0x0
  3905                           
  3906  0070                     ?_CheckByteStatus:	
  3907                           ; 1 bytes @ 0x0
  3908                           
  3909  0070                     ?_CheckStopBitStatus:	
  3910                           ; 1 bytes @ 0x0
  3911                           
  3912  0070                     ?_ClearRxBuffer:	
  3913                           ; 1 bytes @ 0x0
  3914                           
  3915  0070                     ?_ClearTxBuffer:	
  3916                           ; 1 bytes @ 0x0
  3917                           
  3918  0070                     ?_I2c_InitI2cModule:	
  3919                           ; 1 bytes @ 0x0
  3920                           
  3921  0070                     ?_I2c_SetI2cAddress:	
  3922                           ; 1 bytes @ 0x0
  3923                           
  3924  0070                     ?_I2c_SetI2cAddressMask:	
  3925                           ; 1 bytes @ 0x0
  3926                           
  3927  0070                     ?_LedBlinkStateMachine:	
  3928                           ; 1 bytes @ 0x0
  3929                           
  3930  0070                     ?_Mcu_EnableInterrupts:	
  3931                           ; 1 bytes @ 0x0
  3932                           
  3933  0070                     ?_Mcu_StartSystemPll:	
  3934                           ; 1 bytes @ 0x0
  3935                           
  3936  0070                     ?_Mcu_SetPullUpsSts:	
  3937                           ; 1 bytes @ 0x0
  3938                           
  3939  0070                     ?_Mcu_ConfigPullUps:	
  3940                           ; 1 bytes @ 0x0
  3941                           
  3942  0070                     ?_Mcu_SetWdgPeriod:	
  3943                           ; 1 bytes @ 0x0
  3944                           
  3945  0070                     ?_Mcu_SetWdgSts:	
  3946                           ; 1 bytes @ 0x0
  3947                           
  3948  0070                     ?_Mcu_ClearWdg:	
  3949                           ; 1 bytes @ 0x0
  3950                           
  3951  0070                     ?_Mcu_SetDieTempSts:	
  3952                           ; 1 bytes @ 0x0
  3953                           
  3954  0070                     ?_Mcu_SetDieTempMode:	
  3955                           ; 1 bytes @ 0x0
  3956                           
  3957  0070                     ?_SnrInitSonar:	
  3958                           ; 1 bytes @ 0x0
  3959                           
  3960  0070                     ?_SnrDrv_DetectEchoPulse:	
  3961                           ; 1 bytes @ 0x0
  3962                           
  3963  0070                     ?_SnrDrv_StartMeasure:	
  3964                           ; 1 bytes @ 0x0
  3965                           
  3966  0070                     ?_Tmr_StartTmr:	
  3967                           ; 1 bytes @ 0x0
  3968                           
  3969  0070                     ?_MainInterrupt:	
  3970                           ; 1 bytes @ 0x0
  3971                           
  3972  0070                     ?_I2c_SetConfig:	
  3973                           ; 1 bytes @ 0x0
  3974                           
  3975  0070                     ?_ControlLedDirect:	
  3976                           ; 1 bytes @ 0x0
  3977                           
  3978  0070                     ?_BoardReset:	
  3979                           ; 1 bytes @ 0x0
  3980                           
  3981  0070                     ?_LowPowerMode:	
  3982                           ; 1 bytes @ 0x0
  3983                           
  3984  0070                     ?_StdS_ManageStdServices:	
  3985                           ; 1 bytes @ 0x0
  3986                           
  3987  0070                     ?_StdS_SetI2cAddress:	
  3988                           ; 1 bytes @ 0x0
  3989                           
  3990  0070                     ?_ManageProtocol:	
  3991                           ; 1 bytes @ 0x0
  3992                           
  3993  0070                     ?_AppSm:	
  3994                           ; 1 bytes @ 0x0
  3995                           
  3996  0070                     ?_SonarMeasure:	
  3997                           ; 1 bytes @ 0x0
  3998                           
  3999  0070                     ?_InitSchTimer:	
  4000                           ; 1 bytes @ 0x0
  4001                           
  4002  0070                     ?_InitTimer4:	
  4003                           ; 1 bytes @ 0x0
  4004                           
  4005  0070                     ?i1_GenerateEvt:	
  4006                           ; 1 bytes @ 0x0
  4007                           
  4008  0070                     ??i1_GenerateEvt:	
  4009                           ; 1 bytes @ 0x0
  4010                           
  4011  0070                     ?_main:	
  4012                           ; 1 bytes @ 0x0
  4013                           
  4014                           
  4015                           ; 2 bytes @ 0x0
  4016  0070                     	ds	1
  4017  0071                     i1GenerateEvt@Event:	
  4018                           
  4019                           ; 1 bytes @ 0x1
  4020  0071                     	ds	1
  4021  0072                     i1GenerateEvt@EventStatus:	
  4022                           
  4023                           ; 1 bytes @ 0x2
  4024  0072                     	ds	1
  4025  0073                     ??_SnrDrv_DetectEchoPulse:	
  4026  0073                     ??_MainInterrupt:	
  4027                           ; 1 bytes @ 0x3
  4028                           
  4029                           
  4030                           ; 1 bytes @ 0x3
  4031  0073                     	ds	1
  4032  0074                     ??_ReceiveEvt:	
  4033  0074                     ??_GenerateEvt:	
  4034                           ; 1 bytes @ 0x4
  4035                           
  4036  0074                     ?_Led_SetLedStatus:	
  4037                           ; 1 bytes @ 0x4
  4038                           
  4039  0074                     ??_Adc_ConfigAnCh:	
  4040                           ; 1 bytes @ 0x4
  4041                           
  4042  0074                     ??_Adc_InitAdcModule:	
  4043                           ; 1 bytes @ 0x4
  4044                           
  4045  0074                     ??_Adc_SelectChannel:	
  4046                           ; 1 bytes @ 0x4
  4047                           
  4048  0074                     ??_Adc_StartConversion:	
  4049                           ; 1 bytes @ 0x4
  4050                           
  4051  0074                     ??_Adc_GetConvSts:	
  4052                           ; 1 bytes @ 0x4
  4053                           
  4054  0074                     ??_CheckAckStatus:	
  4055                           ; 1 bytes @ 0x4
  4056                           
  4057  0074                     ??_CheckByteStatus:	
  4058                           ; 1 bytes @ 0x4
  4059                           
  4060  0074                     ??_CheckStopBitStatus:	
  4061                           ; 1 bytes @ 0x4
  4062                           
  4063  0074                     ??_ClearRxBuffer:	
  4064                           ; 1 bytes @ 0x4
  4065                           
  4066  0074                     ??_ClearTxBuffer:	
  4067                           ; 1 bytes @ 0x4
  4068                           
  4069  0074                     ??_I2c_SetI2cAddress:	
  4070                           ; 1 bytes @ 0x4
  4071                           
  4072  0074                     ??_I2c_SetI2cAddressMask:	
  4073                           ; 1 bytes @ 0x4
  4074                           
  4075  0074                     ?_I2c_UpdateTxBuffer:	
  4076                           ; 1 bytes @ 0x4
  4077                           
  4078  0074                     ??_Mcu_EnableInterrupts:	
  4079                           ; 1 bytes @ 0x4
  4080                           
  4081  0074                     ??_Mcu_StartSystemPll:	
  4082                           ; 1 bytes @ 0x4
  4083                           
  4084  0074                     ??_Mcu_SetPullUpsSts:	
  4085                           ; 1 bytes @ 0x4
  4086                           
  4087  0074                     ??_Mcu_ConfigPullUps:	
  4088                           ; 1 bytes @ 0x4
  4089                           
  4090  0074                     ??_Mcu_SetWdgPeriod:	
  4091                           ; 1 bytes @ 0x4
  4092                           
  4093  0074                     ??_Mcu_SetWdgSts:	
  4094                           ; 1 bytes @ 0x4
  4095                           
  4096  0074                     ??_Mcu_ClearWdg:	
  4097                           ; 1 bytes @ 0x4
  4098                           
  4099  0074                     ??_Mcu_SetDieTempSts:	
  4100                           ; 1 bytes @ 0x4
  4101                           
  4102  0074                     ??_Mcu_SetDieTempMode:	
  4103                           ; 1 bytes @ 0x4
  4104                           
  4105  0074                     ??_SnrInitSonar:	
  4106                           ; 1 bytes @ 0x4
  4107                           
  4108  0074                     ?_TmrBInit:	
  4109                           ; 1 bytes @ 0x4
  4110                           
  4111  0074                     ?_Tmr_TmrBIrqSet:	
  4112                           ; 1 bytes @ 0x4
  4113                           
  4114  0074                     ??_Tmr_StartTmr:	
  4115                           ; 1 bytes @ 0x4
  4116                           
  4117  0074                     ??_I2c_SetConfig:	
  4118                           ; 1 bytes @ 0x4
  4119                           
  4120  0074                     ??_Led_SetLedBlinkTime:	
  4121                           ; 1 bytes @ 0x4
  4122                           
  4123  0074                     ?_Led_SetLedPulseTime:	
  4124                           ; 1 bytes @ 0x4
  4125                           
  4126  0074                     ??_BoardReset:	
  4127                           ; 1 bytes @ 0x4
  4128                           
  4129  0074                     ??_StdS_SetI2cAddress:	
  4130                           ; 1 bytes @ 0x4
  4131                           
  4132  0074                     ??___wmul:	
  4133                           ; 1 bytes @ 0x4
  4134                           
  4135  0074                     ??___lldiv:	
  4136                           ; 1 bytes @ 0x4
  4137                           
  4138  0074                     ??___lwdiv:	
  4139                           ; 1 bytes @ 0x4
  4140                           
  4141  0074                     ??___lwmod:	
  4142                           ; 1 bytes @ 0x4
  4143                           
  4144  0074                     ?_Adc_GetConvResult:	
  4145                           ; 1 bytes @ 0x4
  4146                           
  4147  0074                     Adc_ConfigAnCh@AnChSel:	
  4148                           ; 2 bytes @ 0x4
  4149                           
  4150  0074                     Adc_InitAdcModule@AdcConfig:	
  4151                           ; 1 bytes @ 0x4
  4152                           
  4153  0074                     I2c_SetI2cAddress@SlaveAddress:	
  4154                           ; 1 bytes @ 0x4
  4155                           
  4156  0074                     I2c_SetI2cAddressMask@SlaveAddressMask:	
  4157                           ; 1 bytes @ 0x4
  4158                           
  4159  0074                     I2c_UpdateTxBuffer@Length:	
  4160                           ; 1 bytes @ 0x4
  4161                           
  4162  0074                     Mcu_SetPullUpsSts@PuSts:	
  4163                           ; 1 bytes @ 0x4
  4164                           
  4165  0074                     Mcu_ConfigPullUps@WpuCh:	
  4166                           ; 1 bytes @ 0x4
  4167                           
  4168  0074                     Mcu_SetWdgSts@WdgSts:	
  4169                           ; 1 bytes @ 0x4
  4170                           
  4171  0074                     Mcu_SetDieTempSts@DieTempSts:	
  4172                           ; 1 bytes @ 0x4
  4173                           
  4174  0074                     Mcu_SetDieTempMode@DieTempMode:	
  4175                           ; 1 bytes @ 0x4
  4176                           
  4177  0074                     TmrBInit@Prescaler:	
  4178                           ; 1 bytes @ 0x4
  4179                           
  4180  0074                     Tmr_TmrBIrqSet@TmrIrqSts:	
  4181                           ; 1 bytes @ 0x4
  4182                           
  4183  0074                     Tmr_StartTmr@TmrNumb:	
  4184                           ; 1 bytes @ 0x4
  4185                           
  4186  0074                     ReceiveEvt@EventStatus:	
  4187                           ; 1 bytes @ 0x4
  4188                           
  4189  0074                     Led_SetLedStatus@LedSts:	
  4190                           ; 1 bytes @ 0x4
  4191                           
  4192  0074                     Led_SetLedBlinkTime@Led:	
  4193                           ; 1 bytes @ 0x4
  4194                           
  4195  0074                     StringCopy@Index:	
  4196                           ; 1 bytes @ 0x4
  4197                           
  4198  0074                     Led_SetLedPulseTime@PulseTimeMs:	
  4199                           ; 1 bytes @ 0x4
  4200                           
  4201  0074                     ___wmul@product:	
  4202                           ; 2 bytes @ 0x4
  4203                           
  4204                           
  4205                           ; 2 bytes @ 0x4
  4206  0074                     	ds	1
  4207  0075                     ??_Led_SetLedStatus:	
  4208  0075                     ??_SnrDrv_StartMeasure:	
  4209                           ; 1 bytes @ 0x5
  4210                           
  4211  0075                     ??_Tmr_TmrBIrqSet:	
  4212                           ; 1 bytes @ 0x5
  4213                           
  4214  0075                     ??_LowPowerMode:	
  4215                           ; 1 bytes @ 0x5
  4216                           
  4217  0075                     Adc_SelectChannel@SelCh:	
  4218                           ; 1 bytes @ 0x5
  4219                           
  4220  0075                     ClearRxBuffer@Index:	
  4221                           ; 1 bytes @ 0x5
  4222                           
  4223  0075                     ClearTxBuffer@Index:	
  4224                           ; 1 bytes @ 0x5
  4225                           
  4226  0075                     LedBlinkStateMachine@LedBlink:	
  4227                           ; 1 bytes @ 0x5
  4228                           
  4229  0075                     Mcu_SetWdgPeriod@WdgPeriod:	
  4230                           ; 1 bytes @ 0x5
  4231                           
  4232  0075                     TmrBInit@Postscaler:	
  4233                           ; 1 bytes @ 0x5
  4234                           
  4235  0075                     Tmr_TmrBIrqSet@TmrNumb:	
  4236                           ; 1 bytes @ 0x5
  4237                           
  4238  0075                     ReceiveEvt@Event:	
  4239                           ; 1 bytes @ 0x5
  4240                           
  4241  0075                     ___lwmod@counter:	
  4242                           ; 1 bytes @ 0x5
  4243                           
  4244                           
  4245                           ; 1 bytes @ 0x5
  4246  0075                     	ds	1
  4247  0076                     ??_SystemInit:	
  4248  0076                     ??_MainScheduler:	
  4249                           ; 1 bytes @ 0x6
  4250                           
  4251  0076                     ??_I2cSlv_MainTask:	
  4252                           ; 1 bytes @ 0x6
  4253                           
  4254  0076                     ??_Wdg_MainTask:	
  4255                           ; 1 bytes @ 0x6
  4256                           
  4257  0076                     ??_main:	
  4258                           ; 1 bytes @ 0x6
  4259                           
  4260  0076                     ??_Led_SetLedPulseTime:	
  4261                           ; 1 bytes @ 0x6
  4262                           
  4263  0076                     ??_ControlLedDirect:	
  4264                           ; 1 bytes @ 0x6
  4265                           
  4266  0076                     ??_GetDieTemperature:	
  4267                           ; 1 bytes @ 0x6
  4268                           
  4269  0076                     ??___lmul:	
  4270                           ; 1 bytes @ 0x6
  4271                           
  4272                           
  4273                           	psect	cstackBANK0
  4274  0020                     __pcstackBANK0:	
  4275                           ; 1 bytes @ 0x6
  4276                           
  4277  0020                     ??_Adc_GetConvResult:	
  4278  0020                     ??_I2c_InitI2cModule:	
  4279                           ; 1 bytes @ 0x0
  4280                           
  4281  0020                     ??_I2c_UpdateTxBuffer:	
  4282                           ; 1 bytes @ 0x0
  4283                           
  4284  0020                     ??_TmrBInit:	
  4285                           ; 1 bytes @ 0x0
  4286                           
  4287  0020                     ?_Led_SetLedBlinkTime:	
  4288                           ; 1 bytes @ 0x0
  4289                           
  4290  0020                     ?_StringCopy:	
  4291                           ; 1 bytes @ 0x0
  4292                           
  4293  0020                     ?___wmul:	
  4294                           ; 1 bytes @ 0x0
  4295                           
  4296  0020                     ?___lwdiv:	
  4297                           ; 2 bytes @ 0x0
  4298                           
  4299  0020                     ?___lwmod:	
  4300                           ; 2 bytes @ 0x0
  4301                           
  4302  0020                     ?___lldiv:	
  4303                           ; 2 bytes @ 0x0
  4304                           
  4305  0020                     GenerateEvt@EventStatus:	
  4306                           ; 4 bytes @ 0x0
  4307                           
  4308  0020                     Led_SetLedStatus@Led:	
  4309                           ; 1 bytes @ 0x0
  4310                           
  4311  0020                     Led_SetLedPulseTime@Led:	
  4312                           ; 1 bytes @ 0x0
  4313                           
  4314  0020                     Led_SetLedBlinkTime@OnTimeMs:	
  4315                           ; 1 bytes @ 0x0
  4316                           
  4317  0020                     StringCopy@SourceStr:	
  4318                           ; 2 bytes @ 0x0
  4319                           
  4320  0020                     ___wmul@multiplier:	
  4321                           ; 2 bytes @ 0x0
  4322                           
  4323  0020                     ___lwdiv@divisor:	
  4324                           ; 2 bytes @ 0x0
  4325                           
  4326  0020                     ___lwmod@divisor:	
  4327                           ; 2 bytes @ 0x0
  4328                           
  4329  0020                     ___lldiv@divisor:	
  4330                           ; 2 bytes @ 0x0
  4331                           
  4332                           
  4333                           ; 4 bytes @ 0x0
  4334  0020                     	ds	1
  4335  0021                     TmrBInit@TmrNumb:	
  4336  0021                     GenerateEvt@Event:	
  4337                           ; 1 bytes @ 0x1
  4338                           
  4339  0021                     Adc_GetConvResult@AdcResult:	
  4340                           ; 1 bytes @ 0x1
  4341                           
  4342                           
  4343                           ; 2 bytes @ 0x1
  4344  0021                     	ds	1
  4345  0022                     ??_SonarMeasure:	
  4346  0022                     I2c_InitI2cModule@I2cConfig:	
  4347                           ; 1 bytes @ 0x2
  4348                           
  4349  0022                     I2c_UpdateTxBuffer@DataBuffer:	
  4350                           ; 1 bytes @ 0x2
  4351                           
  4352  0022                     StringCopy@DestStr:	
  4353                           ; 1 bytes @ 0x2
  4354                           
  4355  0022                     Led_SetLedBlinkTime@OffTimeMs:	
  4356                           ; 1 bytes @ 0x2
  4357                           
  4358  0022                     ___wmul@multiplicand:	
  4359                           ; 2 bytes @ 0x2
  4360                           
  4361  0022                     ___lwdiv@dividend:	
  4362                           ; 2 bytes @ 0x2
  4363                           
  4364  0022                     ___lwmod@dividend:	
  4365                           ; 2 bytes @ 0x2
  4366                           
  4367                           
  4368                           ; 2 bytes @ 0x2
  4369  0022                     	ds	1
  4370  0023                     ?_GetDieTemperature:	
  4371  0023                     I2c_UpdateTxBuffer@Index:	
  4372                           ; 2 bytes @ 0x3
  4373                           
  4374  0023                     StringCopy@Len:	
  4375                           ; 1 bytes @ 0x3
  4376                           
  4377                           
  4378                           ; 1 bytes @ 0x3
  4379  0023                     	ds	1
  4380  0024                     ??_I2cSlv_I2cDrvHandle:	
  4381  0024                     ??_SetLedBehavSts:	
  4382                           ; 1 bytes @ 0x4
  4383                           
  4384  0024                     ??_StringCopy:	
  4385                           ; 1 bytes @ 0x4
  4386                           
  4387  0024                     ?___lmul:	
  4388                           ; 1 bytes @ 0x4
  4389                           
  4390  0024                     ___lwdiv@counter:	
  4391                           ; 4 bytes @ 0x4
  4392                           
  4393  0024                     ___lmul@multiplier:	
  4394                           ; 1 bytes @ 0x4
  4395                           
  4396  0024                     ___lldiv@dividend:	
  4397                           ; 4 bytes @ 0x4
  4398                           
  4399                           
  4400                           ; 4 bytes @ 0x4
  4401  0024                     	ds	1
  4402  0025                     SetLedBehavSts@LedBehav:	
  4403  0025                     GetDieTemperature@DieTempRes:	
  4404                           ; 1 bytes @ 0x5
  4405                           
  4406  0025                     ___lwdiv@quotient:	
  4407                           ; 2 bytes @ 0x5
  4408                           
  4409                           
  4410                           ; 2 bytes @ 0x5
  4411  0025                     	ds	2
  4412  0027                     ?_utoa:	
  4413  0027                     ??_LedBlinkStateMachine:	
  4414                           ; 1 bytes @ 0x7
  4415                           
  4416  0027                     ?_LedPulseStateMachine:	
  4417                           ; 1 bytes @ 0x7
  4418                           
  4419  0027                     LedPulseStateMachine@Led:	
  4420                           ; 1 bytes @ 0x7
  4421                           
  4422  0027                     utoa@val:	
  4423                           ; 1 bytes @ 0x7
  4424                           
  4425                           
  4426                           ; 2 bytes @ 0x7
  4427  0027                     	ds	1
  4428  0028                     ??_LedPulseStateMachine:	
  4429  0028                     ___lmul@multiplicand:	
  4430                           ; 1 bytes @ 0x8
  4431                           
  4432  0028                     ___lldiv@quotient:	
  4433                           ; 4 bytes @ 0x8
  4434                           
  4435                           
  4436                           ; 4 bytes @ 0x8
  4437  0028                     	ds	1
  4438  0029                     I2cSlv_I2cDrvHandle@Index:	
  4439  0029                     utoa@base:	
  4440                           ; 1 bytes @ 0x9
  4441                           
  4442                           
  4443                           ; 2 bytes @ 0x9
  4444  0029                     	ds	1
  4445  002A                     LedPulseStateMachine@LedPulse:	
  4446                           
  4447                           ; 1 bytes @ 0xA
  4448  002A                     	ds	1
  4449  002B                     ??_utoa:	
  4450  002B                     ?_LedStateMachine:	
  4451                           ; 1 bytes @ 0xB
  4452                           
  4453  002B                     LedStateMachine@LedSts:	
  4454                           ; 1 bytes @ 0xB
  4455                           
  4456                           
  4457                           ; 1 bytes @ 0xB
  4458  002B                     	ds	1
  4459  002C                     LedStateMachine@LedBlink:	
  4460  002C                     ___lldiv@counter:	
  4461                           ; 1 bytes @ 0xC
  4462                           
  4463  002C                     utoa@v:	
  4464                           ; 1 bytes @ 0xC
  4465                           
  4466  002C                     ___lmul@product:	
  4467                           ; 2 bytes @ 0xC
  4468                           
  4469                           
  4470                           ; 4 bytes @ 0xC
  4471  002C                     	ds	1
  4472  002D                     LedStateMachine@LedPulse:	
  4473                           
  4474                           ; 1 bytes @ 0xD
  4475  002D                     	ds	1
  4476  002E                     ??_LedStateMachine:	
  4477  002E                     utoa@c:	
  4478                           ; 1 bytes @ 0xE
  4479                           
  4480                           
  4481                           ; 1 bytes @ 0xE
  4482  002E                     	ds	1
  4483  002F                     utoa@buf:	
  4484                           
  4485                           ; 1 bytes @ 0xF
  4486  002F                     	ds	1
  4487  0030                     ?_Tmr_TmrBPrSet:	
  4488  0030                     ??_StdS_ManageStdServices:	
  4489                           ; 1 bytes @ 0x10
  4490                           
  4491  0030                     LedStateMachine@Led:	
  4492                           ; 1 bytes @ 0x10
  4493                           
  4494  0030                     Tmr_TmrBPrSet@IntFreqHz:	
  4495                           ; 1 bytes @ 0x10
  4496                           
  4497                           
  4498                           ; 2 bytes @ 0x10
  4499  0030                     	ds	1
  4500  0031                     LedStateMachine@LedOutSts:	
  4501                           
  4502                           ; 1 bytes @ 0x11
  4503  0031                     	ds	1
  4504  0032                     Tmr_TmrBPrSet@Prescaler:	
  4505  0032                     StdS_ManageStdServices@DieTempStr:	
  4506                           ; 1 bytes @ 0x12
  4507                           
  4508                           
  4509                           ; 4 bytes @ 0x12
  4510  0032                     	ds	1
  4511  0033                     Tmr_TmrBPrSet@Postscaler:	
  4512                           
  4513                           ; 1 bytes @ 0x13
  4514  0033                     	ds	1
  4515  0034                     ??_Tmr_TmrBPrSet:	
  4516                           
  4517                           ; 1 bytes @ 0x14
  4518  0034                     	ds	2
  4519  0036                     StdS_ManageStdServices@DieTemp:	
  4520                           
  4521                           ; 2 bytes @ 0x16
  4522  0036                     	ds	2
  4523  0038                     ??_ManageProtocol:	
  4524                           
  4525                           ; 1 bytes @ 0x18
  4526  0038                     	ds	2
  4527  003A                     ManageProtocol@DistanceCmStr:	
  4528                           
  4529                           ; 3 bytes @ 0x1A
  4530  003A                     	ds	2
  4531  003C                     Tmr_TmrBPrSet@TmrNumb:	
  4532                           
  4533                           ; 1 bytes @ 0x1C
  4534  003C                     	ds	1
  4535  003D                     ??_AppSm:	
  4536  003D                     Tmr_TmrBPrSet@TmrBPrCfgSts:	
  4537                           ; 1 bytes @ 0x1D
  4538                           
  4539                           
  4540                           ; 1 bytes @ 0x1D
  4541  003D                     	ds	1
  4542  003E                     ?_I2cSlv_MainTask:	
  4543  003E                     ?_Wdg_MainTask:	
  4544                           ; 1 bytes @ 0x1E
  4545                           
  4546  003E                     ?_Led_MainTask:	
  4547                           ; 1 bytes @ 0x1E
  4548                           
  4549  003E                     ?_App_MainTask:	
  4550                           ; 1 bytes @ 0x1E
  4551                           
  4552  003E                     ?_I2c_DataReceiveSm:	
  4553                           ; 1 bytes @ 0x1E
  4554                           
  4555  003E                     ?_SnrDrv_GetDistSm:	
  4556                           ; 1 bytes @ 0x1E
  4557                           
  4558  003E                     I2c_DataReceiveSm@Options:	
  4559                           ; 1 bytes @ 0x1E
  4560                           
  4561  003E                     SnrDrv_GetDistSm@Options:	
  4562                           ; 1 bytes @ 0x1E
  4563                           
  4564  003E                     I2cSlv_MainTask@Options:	
  4565                           ; 1 bytes @ 0x1E
  4566                           
  4567  003E                     Led_MainTask@Options:	
  4568                           ; 1 bytes @ 0x1E
  4569                           
  4570  003E                     Wdg_MainTask@Options:	
  4571                           ; 1 bytes @ 0x1E
  4572                           
  4573  003E                     App_MainTask@Options:	
  4574                           ; 1 bytes @ 0x1E
  4575                           
  4576  003E                     Tmr_TmrBPrSet@Divisor:	
  4577                           ; 1 bytes @ 0x1E
  4578                           
  4579                           
  4580                           ; 4 bytes @ 0x1E
  4581  003E                     	ds	1
  4582  003F                     ??_Led_MainTask:	
  4583  003F                     ??_App_MainTask:	
  4584                           ; 1 bytes @ 0x1F
  4585                           
  4586  003F                     ??_I2c_DataReceiveSm:	
  4587                           ; 1 bytes @ 0x1F
  4588                           
  4589  003F                     ??_SnrDrv_GetDistSm:	
  4590                           ; 1 bytes @ 0x1F
  4591                           
  4592                           
  4593                           ; 1 bytes @ 0x1F
  4594  003F                     	ds	1
  4595  0040                     App_MainTask@AnalogChSel:	
  4596                           
  4597                           ; 12 bytes @ 0x20
  4598  0040                     	ds	2
  4599  0042                     ?_Tmr_TmrBConfig:	
  4600  0042                     Tmr_TmrBConfig@TmrBConfig:	
  4601                           ; 1 bytes @ 0x22
  4602                           
  4603                           
  4604                           ; 1 bytes @ 0x22
  4605  0042                     	ds	1
  4606  0043                     ??_Tmr_TmrBConfig:	
  4607                           
  4608                           ; 1 bytes @ 0x23
  4609  0043                     	ds	1
  4610  0044                     Tmr_TmrBConfig@TmrNumb:	
  4611                           
  4612                           ; 1 bytes @ 0x24
  4613  0044                     	ds	1
  4614  0045                     ??_InitSchTimer:	
  4615  0045                     ??_InitTimer4:	
  4616                           ; 1 bytes @ 0x25
  4617                           
  4618                           
  4619                           ; 1 bytes @ 0x25
  4620  0045                     	ds	1
  4621  0046                     I2c_DataReceiveSm@Index:	
  4622  0046                     InitSchTimer@TmrBConfig:	
  4623                           ; 1 bytes @ 0x26
  4624                           
  4625  0046                     InitTimer4@TmrBConfig:	
  4626                           ; 6 bytes @ 0x26
  4627                           
  4628                           
  4629                           ; 6 bytes @ 0x26
  4630  0046                     	ds	6
  4631  004C                     App_MainTask@AdcConfig:	
  4632                           
  4633                           ; 6 bytes @ 0x2C
  4634  004C                     	ds	6
  4635  0052                     App_MainTask@WpuCh:	
  4636                           
  4637                           ; 18 bytes @ 0x32
  4638  0052                     	ds	18
  4639  0064                     InitializeTasks@ActiveTaskIndex:	
  4640  0064                     ScheduleTasks@ActiveTaskIndex:	
  4641                           ; 1 bytes @ 0x44
  4642                           
  4643                           
  4644                           ; 1 bytes @ 0x44
  4645  0064                     	ds	1
  4646                           
  4647                           	psect	maintext
  4648  088A                     __pmaintext:	
  4649 ;;
  4650 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  4651 ;;
  4652 ;; *************** function _main *****************
  4653 ;; Defined at:
  4654 ;;		line 57 in file "../../../Framework/MercuryFwk/Source/c/00_Main/main.c"
  4655 ;; Parameters:    Size  Location     Type
  4656 ;;		None
  4657 ;; Auto vars:     Size  Location     Type
  4658 ;;		None
  4659 ;; Return value:  Size  Location     Type
  4660 ;;                  2   12[None  ] short 
  4661 ;; Registers used:
  4662 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4663 ;; Tracked objects:
  4664 ;;		On entry : B1F/0
  4665 ;;		On exit  : 0/0
  4666 ;;		Unchanged: 0/0
  4667 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4668 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4669 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4670 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4671 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4672 ;;Total ram usage:        0 bytes
  4673 ;; Hardware stack levels required when called:   11
  4674 ;; This function calls:
  4675 ;;		_MainScheduler
  4676 ;;		_SystemInit
  4677 ;; This function is called by:
  4678 ;;		Startup code after reset
  4679 ;; This function uses a non-reentrant model
  4680 ;;
  4681                           
  4682                           
  4683                           ;psect for function _main
  4684  088A                     _main:	
  4685                           
  4686                           ;main.c: 60: SystemInit();
  4687                           
  4688                           ;incstack = 0
  4689                           ; Regs used in _main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  4690  088A  3188  20E6  3188   	fcall	_SystemInit
  4691                           
  4692                           ;main.c: 63: MainScheduler();
  4693  088D  3189  215A         	fcall	_MainScheduler
  4694                           
  4695                           ;main.c: 66: return 0;
  4696                           ;	Return value of _main is never used
  4697  088F  3180  2836         	ljmp	start
  4698  0891                     __end_of_main:	
  4699                           
  4700                           	psect	text1
  4701  08E6                     __ptext1:	
  4702 ;; *************** function _SystemInit *****************
  4703 ;; Defined at:
  4704 ;;		line 121 in file "../Source/c/04_App/sys_init.c"
  4705 ;; Parameters:    Size  Location     Type
  4706 ;;		None
  4707 ;; Auto vars:     Size  Location     Type
  4708 ;;		None
  4709 ;; Return value:  Size  Location     Type
  4710 ;;                  1    wreg      void 
  4711 ;; Registers used:
  4712 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4713 ;; Tracked objects:
  4714 ;;		On entry : 0/0
  4715 ;;		On exit  : 0/0
  4716 ;;		Unchanged: 0/0
  4717 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4718 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4719 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4720 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4721 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4722 ;;Total ram usage:        0 bytes
  4723 ;; Hardware stack levels used:    1
  4724 ;; Hardware stack levels required when called:    7
  4725 ;; This function calls:
  4726 ;;		_InitSchTimer
  4727 ;;		_InitTimer4
  4728 ;;		_Mcu_EnableInterrupts
  4729 ;;		_Mcu_StartSystemPll
  4730 ;; This function is called by:
  4731 ;;		_main
  4732 ;; This function uses a non-reentrant model
  4733 ;;
  4734                           
  4735                           
  4736                           ;psect for function _SystemInit
  4737  08E6                     _SystemInit:	
  4738                           
  4739                           ;sys_init.c: 124: Mcu_StartSystemPll();
  4740                           
  4741                           ;incstack = 0
  4742                           ; Regs used in _SystemInit: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  4743  08E6  3188  206F  3188   	fcall	_Mcu_StartSystemPll
  4744                           
  4745                           ;sys_init.c: 126: InitSchTimer();
  4746  08E9  3189  21D4  3188   	fcall	_InitSchTimer
  4747                           
  4748                           ;sys_init.c: 128: InitTimer4();
  4749  08EC  3189  21EB  3188   	fcall	_InitTimer4
  4750                           
  4751                           ;sys_init.c: 130: Mcu_EnableInterrupts();
  4752  08EF  3188  206C         	fcall	_Mcu_EnableInterrupts
  4753  08F1  0008               	return
  4754  08F2                     __end_of_SystemInit:	
  4755                           
  4756                           	psect	text2
  4757  086F                     __ptext2:	
  4758 ;; *************** function _Mcu_StartSystemPll *****************
  4759 ;; Defined at:
  4760 ;;		line 127 in file "../../../Framework/MercuryFwk/Source/c/01_Hal/02_Drv/mcu_drv.c"
  4761 ;; Parameters:    Size  Location     Type
  4762 ;;		None
  4763 ;; Auto vars:     Size  Location     Type
  4764 ;;		None
  4765 ;; Return value:  Size  Location     Type
  4766 ;;                  1    wreg      void 
  4767 ;; Registers used:
  4768 ;;		None
  4769 ;; Tracked objects:
  4770 ;;		On entry : 0/0
  4771 ;;		On exit  : 0/0
  4772 ;;		Unchanged: 0/0
  4773 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4774 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4775 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4776 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4777 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4778 ;;Total ram usage:        0 bytes
  4779 ;; Hardware stack levels used:    1
  4780 ;; Hardware stack levels required when called:    3
  4781 ;; This function calls:
  4782 ;;		Nothing
  4783 ;; This function is called by:
  4784 ;;		_SystemInit
  4785 ;; This function uses a non-reentrant model
  4786 ;;
  4787                           
  4788                           
  4789                           ;psect for function _Mcu_StartSystemPll
  4790  086F                     _Mcu_StartSystemPll:	
  4791                           
  4792                           ;mcu_drv.c: 130: OSCCONbits.SPLLEN = ((UINT8)(1));
  4793                           
  4794                           ;incstack = 0
  4795                           ; Regs used in _Mcu_StartSystemPll: []
  4796  086F  0021               	movlb	1	; select bank1
  4797  0870  1799               	bsf	25,7	;volatile
  4798  0871  0008               	return
  4799  0872                     __end_of_Mcu_StartSystemPll:	
  4800                           
  4801                           	psect	text3
  4802  086C                     __ptext3:	
  4803 ;; *************** function _Mcu_EnableInterrupts *****************
  4804 ;; Defined at:
  4805 ;;		line 97 in file "../../../Framework/MercuryFwk/Source/c/01_Hal/02_Drv/mcu_drv.c"
  4806 ;; Parameters:    Size  Location     Type
  4807 ;;		None
  4808 ;; Auto vars:     Size  Location     Type
  4809 ;;		None
  4810 ;; Return value:  Size  Location     Type
  4811 ;;                  1    wreg      void 
  4812 ;; Registers used:
  4813 ;;		None
  4814 ;; Tracked objects:
  4815 ;;		On entry : 0/0
  4816 ;;		On exit  : 0/0
  4817 ;;		Unchanged: 0/0
  4818 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4819 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4820 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4821 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4822 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4823 ;;Total ram usage:        0 bytes
  4824 ;; Hardware stack levels used:    1
  4825 ;; Hardware stack levels required when called:    3
  4826 ;; This function calls:
  4827 ;;		Nothing
  4828 ;; This function is called by:
  4829 ;;		_SystemInit
  4830 ;; This function uses a non-reentrant model
  4831 ;;
  4832                           
  4833                           
  4834                           ;psect for function _Mcu_EnableInterrupts
  4835  086C                     _Mcu_EnableInterrupts:	
  4836                           
  4837                           ;mcu_drv.c: 100: INTCONbits.GIE = ((UINT8)(1));
  4838                           
  4839                           ;incstack = 0
  4840                           ; Regs used in _Mcu_EnableInterrupts: []
  4841  086C  178B               	bsf	11,7	;volatile
  4842                           
  4843                           ;mcu_drv.c: 101: INTCONbits.PEIE = ((UINT8)(1));
  4844  086D  170B               	bsf	11,6	;volatile
  4845  086E  0008               	return
  4846  086F                     __end_of_Mcu_EnableInterrupts:	
  4847                           
  4848                           	psect	text4
  4849  09EB                     __ptext4:	
  4850 ;; *************** function _InitTimer4 *****************
  4851 ;; Defined at:
  4852 ;;		line 94 in file "../Source/c/04_App/sys_init.c"
  4853 ;; Parameters:    Size  Location     Type
  4854 ;;		None
  4855 ;; Auto vars:     Size  Location     Type
  4856 ;;  TmrBConfig      6   38[BANK0 ] struct _TmrBConfigType
  4857 ;; Return value:  Size  Location     Type
  4858 ;;                  1    wreg      void 
  4859 ;; Registers used:
  4860 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4861 ;; Tracked objects:
  4862 ;;		On entry : 0/0
  4863 ;;		On exit  : 0/0
  4864 ;;		Unchanged: 0/0
  4865 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4866 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4867 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4868 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4869 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4870 ;;Total ram usage:        7 bytes
  4871 ;; Hardware stack levels used:    1
  4872 ;; Hardware stack levels required when called:    6
  4873 ;; This function calls:
  4874 ;;		_Tmr_TmrBConfig
  4875 ;; This function is called by:
  4876 ;;		_SystemInit
  4877 ;; This function uses a non-reentrant model
  4878 ;;
  4879                           
  4880                           
  4881                           ;psect for function _InitTimer4
  4882  09EB                     _InitTimer4:	
  4883                           
  4884                           ;sys_init.c: 96: TmrBConfigType TmrBConfig;
  4885                           ;sys_init.c: 99: TmrBConfig.PreScaler = 1;
  4886                           
  4887                           ;incstack = 0
  4888                           ; Regs used in _InitTimer4: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  4889  09EB  0020               	movlb	0	; select bank0
  4890  09EC  01C6               	clrf	InitTimer4@TmrBConfig
  4891  09ED  0AC6               	incf	InitTimer4@TmrBConfig,f
  4892                           
  4893                           ;sys_init.c: 100: TmrBConfig.PostScaler = 8;
  4894  09EE  3008               	movlw	8
  4895  09EF  00C5               	movwf	??_InitTimer4
  4896  09F0  0845               	movf	??_InitTimer4,w
  4897  09F1  00C7               	movwf	InitTimer4@TmrBConfig+1
  4898                           
  4899                           ;sys_init.c: 101: TmrBConfig.IntEnable = 1u;
  4900  09F2  01C8               	clrf	InitTimer4@TmrBConfig+2
  4901  09F3  0AC8               	incf	InitTimer4@TmrBConfig+2,f
  4902                           
  4903                           ;sys_init.c: 102: TmrBConfig.IntFreqHz = 17242;
  4904  09F4  305A               	movlw	90
  4905  09F5  00C9               	movwf	InitTimer4@TmrBConfig+3
  4906  09F6  3043               	movlw	67
  4907  09F7  00CA               	movwf	InitTimer4@TmrBConfig+4
  4908                           
  4909                           ;sys_init.c: 103: TmrBConfig.StartTmrRequest = StartTmrReq;
  4910  09F8  01CB               	clrf	InitTimer4@TmrBConfig+5
  4911  09F9  0ACB               	incf	InitTimer4@TmrBConfig+5,f
  4912                           
  4913                           ;sys_init.c: 106: Tmr_TmrBConfig(((UINT8)(4)),&TmrBConfig);
  4914  09FA  3046               	movlw	(low (InitTimer4@TmrBConfig| 0))& (0+255)
  4915  09FB  00C5               	movwf	??_InitTimer4
  4916  09FC  0845               	movf	??_InitTimer4,w
  4917  09FD  00C2               	movwf	Tmr_TmrBConfig@TmrBConfig
  4918  09FE  3004               	movlw	4
  4919  09FF  318D  258B         	fcall	_Tmr_TmrBConfig
  4920  0A01  0008               	return
  4921  0A02                     __end_of_InitTimer4:	
  4922                           
  4923                           	psect	text5
  4924  09D4                     __ptext5:	
  4925 ;; *************** function _InitSchTimer *****************
  4926 ;; Defined at:
  4927 ;;		line 71 in file "../Source/c/04_App/sys_init.c"
  4928 ;; Parameters:    Size  Location     Type
  4929 ;;		None
  4930 ;; Auto vars:     Size  Location     Type
  4931 ;;  TmrBConfig      6   38[BANK0 ] struct _TmrBConfigType
  4932 ;; Return value:  Size  Location     Type
  4933 ;;                  1    wreg      void 
  4934 ;; Registers used:
  4935 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4936 ;; Tracked objects:
  4937 ;;		On entry : 0/0
  4938 ;;		On exit  : 0/0
  4939 ;;		Unchanged: 0/0
  4940 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4941 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4942 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4943 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4944 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4945 ;;Total ram usage:        7 bytes
  4946 ;; Hardware stack levels used:    1
  4947 ;; Hardware stack levels required when called:    6
  4948 ;; This function calls:
  4949 ;;		_Tmr_TmrBConfig
  4950 ;; This function is called by:
  4951 ;;		_SystemInit
  4952 ;; This function uses a non-reentrant model
  4953 ;;
  4954                           
  4955                           
  4956                           ;psect for function _InitSchTimer
  4957  09D4                     _InitSchTimer:	
  4958                           
  4959                           ;sys_init.c: 73: TmrBConfigType TmrBConfig;
  4960                           ;sys_init.c: 76: TmrBConfig.PreScaler = 1;
  4961                           
  4962                           ;incstack = 0
  4963                           ; Regs used in _InitSchTimer: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  4964  09D4  0020               	movlb	0	; select bank0
  4965  09D5  01C6               	clrf	InitSchTimer@TmrBConfig
  4966  09D6  0AC6               	incf	InitSchTimer@TmrBConfig,f
  4967                           
  4968                           ;sys_init.c: 77: TmrBConfig.PostScaler = 8;
  4969  09D7  3008               	movlw	8
  4970  09D8  00C5               	movwf	??_InitSchTimer
  4971  09D9  0845               	movf	??_InitSchTimer,w
  4972  09DA  00C7               	movwf	InitSchTimer@TmrBConfig+1
  4973                           
  4974                           ;sys_init.c: 78: TmrBConfig.IntEnable = 1u;
  4975  09DB  01C8               	clrf	InitSchTimer@TmrBConfig+2
  4976  09DC  0AC8               	incf	InitSchTimer@TmrBConfig+2,f
  4977                           
  4978                           ;sys_init.c: 79: TmrBConfig.IntFreqHz = 10000;
  4979  09DD  3010               	movlw	16
  4980  09DE  00C9               	movwf	InitSchTimer@TmrBConfig+3
  4981  09DF  3027               	movlw	39
  4982  09E0  00CA               	movwf	InitSchTimer@TmrBConfig+4
  4983                           
  4984                           ;sys_init.c: 80: TmrBConfig.StartTmrRequest = StartTmrReq;
  4985  09E1  01CB               	clrf	InitSchTimer@TmrBConfig+5
  4986  09E2  0ACB               	incf	InitSchTimer@TmrBConfig+5,f
  4987                           
  4988                           ;sys_init.c: 83: Tmr_TmrBConfig(((UINT8)(2)),&TmrBConfig);
  4989  09E3  3046               	movlw	(low (InitSchTimer@TmrBConfig| 0))& (0+255)
  4990  09E4  00C5               	movwf	??_InitSchTimer
  4991  09E5  0845               	movf	??_InitSchTimer,w
  4992  09E6  00C2               	movwf	Tmr_TmrBConfig@TmrBConfig
  4993  09E7  3002               	movlw	2
  4994  09E8  318D  258B         	fcall	_Tmr_TmrBConfig
  4995  09EA  0008               	return
  4996  09EB                     __end_of_InitSchTimer:	
  4997                           
  4998                           	psect	text6
  4999  0D8B                     __ptext6:	
  5000 ;; *************** function _Tmr_TmrBConfig *****************
  5001 ;; Defined at:
  5002 ;;		line 313 in file "../../../Framework/MercuryFwk/Source/c/01_Hal/02_Drv/tmr_drv.c"
  5003 ;; Parameters:    Size  Location     Type
  5004 ;;  TmrNumb         1    wreg     unsigned char 
  5005 ;;  TmrBConfig      1   34[BANK0 ] PTR struct _TmrBConfigTy
  5006 ;;		 -> InitTimer4@TmrBConfig(6), InitSchTimer@TmrBConfig(6), 
  5007 ;; Auto vars:     Size  Location     Type
  5008 ;;  TmrNumb         1   36[BANK0 ] unsigned char 
  5009 ;; Return value:  Size  Location     Type
  5010 ;;                  1    wreg      void 
  5011 ;; Registers used:
  5012 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5013 ;; Tracked objects:
  5014 ;;		On entry : 0/0
  5015 ;;		On exit  : 0/0
  5016 ;;		Unchanged: 0/0
  5017 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5018 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5019 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5020 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5021 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5022 ;;Total ram usage:        3 bytes
  5023 ;; Hardware stack levels used:    1
  5024 ;; Hardware stack levels required when called:    5
  5025 ;; This function calls:
  5026 ;;		_TmrBInit
  5027 ;;		_Tmr_StartTmr
  5028 ;;		_Tmr_TmrBIrqSet
  5029 ;;		_Tmr_TmrBPrSet
  5030 ;; This function is called by:
  5031 ;;		_InitSchTimer
  5032 ;;		_InitTimer4
  5033 ;; This function uses a non-reentrant model
  5034 ;;
  5035                           
  5036                           
  5037                           ;psect for function _Tmr_TmrBConfig
  5038  0D8B                     _Tmr_TmrBConfig:	
  5039                           
  5040                           ;incstack = 0
  5041                           ; Regs used in _Tmr_TmrBConfig: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  5042                           ;Tmr_TmrBConfig@TmrNumb stored from wreg
  5043  0D8B  0020               	movlb	0	; select bank0
  5044  0D8C  00C4               	movwf	Tmr_TmrBConfig@TmrNumb
  5045                           
  5046                           ;tmr_drv.c: 316: TmrBInit(TmrNumb,TmrBConfig->PreScaler,TmrBConfig->PostScaler);
  5047  0D8D  0842               	movf	Tmr_TmrBConfig@TmrBConfig,w
  5048  0D8E  0086               	movwf	6
  5049  0D8F  0187               	clrf	7
  5050  0D90  0801               	movf	1,w
  5051  0D91  00C3               	movwf	??_Tmr_TmrBConfig
  5052  0D92  0843               	movf	??_Tmr_TmrBConfig,w
  5053  0D93  00F4               	movwf	TmrBInit@Prescaler
  5054  0D94  0842               	movf	Tmr_TmrBConfig@TmrBConfig,w
  5055  0D95  0086               	movwf	6
  5056  0D96  0187               	clrf	7
  5057  0D97  3F41               	moviw [1]fsr1
  5058  0D98  00F5               	movwf	TmrBInit@Postscaler
  5059  0D99  0844               	movf	Tmr_TmrBConfig@TmrNumb,w
  5060  0D9A  3187  2707  318D   	fcall	_TmrBInit
  5061                           
  5062                           ;tmr_drv.c: 318: if (TmrBConfig->IntEnable == EnableInt)
  5063  0D9D  0020               	movlb	0	; select bank0
  5064  0D9E  0842               	movf	Tmr_TmrBConfig@TmrBConfig,w
  5065  0D9F  3E02               	addlw	2
  5066  0DA0  0086               	movwf	6
  5067  0DA1  0187               	clrf	7
  5068  0DA2  0301               	decf	1,w
  5069  0DA3  1D03               	btfss	3,2
  5070  0DA4  2DA8               	goto	l4575
  5071                           
  5072                           ;tmr_drv.c: 319: {
  5073                           ;tmr_drv.c: 321: Tmr_TmrBIrqSet(TmrNumb,((UINT8)(1)));
  5074  0DA5  01F4               	clrf	Tmr_TmrBIrqSet@TmrIrqSts
  5075  0DA6  0AF4               	incf	Tmr_TmrBIrqSet@TmrIrqSts,f
  5076  0DA7  2DAA               	goto	L1
  5077  0DA8                     l4575:	
  5078                           ;tmr_drv.c: 322: }
  5079                           
  5080                           
  5081                           ;tmr_drv.c: 323: else
  5082                           ;tmr_drv.c: 324: {
  5083                           ;tmr_drv.c: 326: Tmr_TmrBIrqSet(TmrNumb,((UINT8)(0)));
  5084  0DA8  01F4               	clrf	Tmr_TmrBIrqSet@TmrIrqSts
  5085  0DA9  0020               	movlb	0	; select bank0
  5086  0DAA                     L1:	
  5087  0DAA  0844               	movf	Tmr_TmrBConfig@TmrNumb,w
  5088  0DAB  318A  22F4  318D   	fcall	_Tmr_TmrBIrqSet
  5089                           
  5090                           ;tmr_drv.c: 327: }
  5091                           ;tmr_drv.c: 329: if (Tmr_TmrBPrSet(TmrNumb,TmrBConfig->IntFreqHz,TmrBConfig->PreScaler,T
      +                          mrBConfig->PostScaler) == CfgError)
  5092  0DAE  0020               	movlb	0	; select bank0
  5093  0DAF  0842               	movf	Tmr_TmrBConfig@TmrBConfig,w
  5094  0DB0  3E03               	addlw	3
  5095  0DB1  0086               	movwf	6
  5096  0DB2  0187               	clrf	7
  5097  0DB3  3F40               	moviw [0]fsr1
  5098  0DB4  00B0               	movwf	Tmr_TmrBPrSet@IntFreqHz
  5099  0DB5  3F41               	moviw [1]fsr1
  5100  0DB6  00B1               	movwf	Tmr_TmrBPrSet@IntFreqHz+1
  5101  0DB7  0842               	movf	Tmr_TmrBConfig@TmrBConfig,w
  5102  0DB8  0086               	movwf	6
  5103  0DB9  0187               	clrf	7
  5104  0DBA  0801               	movf	1,w
  5105  0DBB  00C3               	movwf	??_Tmr_TmrBConfig
  5106  0DBC  0843               	movf	??_Tmr_TmrBConfig,w
  5107  0DBD  00B2               	movwf	Tmr_TmrBPrSet@Prescaler
  5108  0DBE  0842               	movf	Tmr_TmrBConfig@TmrBConfig,w
  5109  0DBF  0086               	movwf	6
  5110  0DC0  0187               	clrf	7
  5111  0DC1  3F41               	moviw [1]fsr1
  5112  0DC2  00B3               	movwf	Tmr_TmrBPrSet@Postscaler
  5113  0DC3  0844               	movf	Tmr_TmrBConfig@TmrNumb,w
  5114  0DC4  3183  2346  318D   	fcall	_Tmr_TmrBPrSet
  5115  0DC7  3A01               	xorlw	1
  5116  0DC8  1903               	btfsc	3,2
  5117  0DC9                     l415:	
  5118                           ;tmr_drv.c: 330: {
  5119                           ;tmr_drv.c: 332: while(1);
  5120                           
  5121  0DC9  2DC9               	goto	l415
  5122                           
  5123                           ;tmr_drv.c: 333: }
  5124                           ;tmr_drv.c: 335: if (TmrBConfig->StartTmrRequest == StartTmrReq)
  5125  0DCA  0020               	movlb	0	; select bank0
  5126  0DCB  0842               	movf	Tmr_TmrBConfig@TmrBConfig,w
  5127  0DCC  3E05               	addlw	5
  5128  0DCD  0086               	movwf	6
  5129  0DCE  0187               	clrf	7
  5130  0DCF  0301               	decf	1,w
  5131  0DD0  1D03               	btfss	3,2
  5132  0DD1  0008               	return
  5133                           
  5134                           ;tmr_drv.c: 336: {
  5135                           ;tmr_drv.c: 338: Tmr_StartTmr(TmrNumb);
  5136  0DD2  0844               	movf	Tmr_TmrBConfig@TmrNumb,w
  5137  0DD3  3189  21BD         	fcall	_Tmr_StartTmr
  5138                           
  5139                           ;tmr_drv.c: 339: }
  5140  0DD5  0008               	return
  5141  0DD6                     __end_of_Tmr_TmrBConfig:	
  5142                           ;tmr_drv.c: 340: else
  5143                           ;tmr_drv.c: 341: {
  5144                           
  5145                           
  5146                           	psect	text7
  5147  0346                     __ptext7:	
  5148 ;; *************** function _Tmr_TmrBPrSet *****************
  5149 ;; Defined at:
  5150 ;;		line 225 in file "../../../Framework/MercuryFwk/Source/c/01_Hal/02_Drv/tmr_drv.c"
  5151 ;; Parameters:    Size  Location     Type
  5152 ;;  TmrNumb         1    wreg     unsigned char 
  5153 ;;  IntFreqHz       2   16[BANK0 ] unsigned short 
  5154 ;;  Prescaler       1   18[BANK0 ] unsigned char 
  5155 ;;  Postscaler      1   19[BANK0 ] unsigned char 
  5156 ;; Auto vars:     Size  Location     Type
  5157 ;;  TmrNumb         1   28[BANK0 ] unsigned char 
  5158 ;;  Divisor         4   30[BANK0 ] unsigned long 
  5159 ;;  TmrBPrCfgSts    1   29[BANK0 ] enum E3647
  5160 ;; Return value:  Size  Location     Type
  5161 ;;                  1    wreg      enum E3647
  5162 ;; Registers used:
  5163 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  5164 ;; Tracked objects:
  5165 ;;		On entry : 0/0
  5166 ;;		On exit  : 0/0
  5167 ;;		Unchanged: 0/0
  5168 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5169 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5170 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5171 ;;      Temps:          0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5172 ;;      Totals:         0      18       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5173 ;;Total ram usage:       18 bytes
  5174 ;; Hardware stack levels used:    1
  5175 ;; Hardware stack levels required when called:    4
  5176 ;; This function calls:
  5177 ;;		___lldiv
  5178 ;;		___lmul
  5179 ;;		___wmul
  5180 ;; This function is called by:
  5181 ;;		_Tmr_TmrBConfig
  5182 ;; This function uses a non-reentrant model
  5183 ;;
  5184                           
  5185                           
  5186                           ;psect for function _Tmr_TmrBPrSet
  5187  0346                     _Tmr_TmrBPrSet:	
  5188                           
  5189                           ;incstack = 0
  5190                           ; Regs used in _Tmr_TmrBPrSet: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  5191                           ;Tmr_TmrBPrSet@TmrNumb stored from wreg
  5192  0346  0020               	movlb	0	; select bank0
  5193  0347  00BC               	movwf	Tmr_TmrBPrSet@TmrNumb
  5194                           
  5195                           ;tmr_drv.c: 227: CfgStsType TmrBPrCfgSts;
  5196                           ;tmr_drv.c: 228: UINT32 Divisor = 0;
  5197  0348  3000               	movlw	0
  5198  0349  00C1               	movwf	Tmr_TmrBPrSet@Divisor+3
  5199  034A  3000               	movlw	0
  5200  034B  00C0               	movwf	Tmr_TmrBPrSet@Divisor+2
  5201  034C  3000               	movlw	0
  5202  034D  00BF               	movwf	Tmr_TmrBPrSet@Divisor+1
  5203  034E  3000               	movlw	0
  5204  034F  00BE               	movwf	Tmr_TmrBPrSet@Divisor
  5205                           
  5206                           ;tmr_drv.c: 231: Divisor = (UINT32)Prescaler*(UINT32)Postscaler*(UINT32)IntFreqHz;
  5207  0350  0833               	movf	Tmr_TmrBPrSet@Postscaler,w
  5208  0351  00B4               	movwf	??_Tmr_TmrBPrSet
  5209  0352  01B5               	clrf	??_Tmr_TmrBPrSet+1
  5210  0353  0834               	movf	??_Tmr_TmrBPrSet,w
  5211  0354  00A2               	movwf	___wmul@multiplicand
  5212  0355  0835               	movf	??_Tmr_TmrBPrSet+1,w
  5213  0356  00A3               	movwf	___wmul@multiplicand+1
  5214  0357  0832               	movf	Tmr_TmrBPrSet@Prescaler,w
  5215  0358  00B6               	movwf	??_Tmr_TmrBPrSet+2
  5216  0359  01B7               	clrf	??_Tmr_TmrBPrSet+3
  5217  035A  0836               	movf	??_Tmr_TmrBPrSet+2,w
  5218  035B  00A0               	movwf	___wmul@multiplier
  5219  035C  0837               	movf	??_Tmr_TmrBPrSet+3,w
  5220  035D  00A1               	movwf	___wmul@multiplier+1
  5221  035E  318A  2234  3183   	fcall	___wmul
  5222  0361  0020               	movlb	0	; select bank0
  5223  0362  0820               	movf	?___wmul,w
  5224  0363  00B8               	movwf	??_Tmr_TmrBPrSet+4
  5225  0364  0821               	movf	?___wmul+1,w
  5226  0365  00B9               	movwf	??_Tmr_TmrBPrSet+5
  5227  0366  01BA               	clrf	??_Tmr_TmrBPrSet+6
  5228  0367  01BB               	clrf	??_Tmr_TmrBPrSet+7
  5229  0368  083B               	movf	??_Tmr_TmrBPrSet+7,w
  5230  0369  00A7               	movwf	___lmul@multiplier+3
  5231  036A  083A               	movf	??_Tmr_TmrBPrSet+6,w
  5232  036B  00A6               	movwf	___lmul@multiplier+2
  5233  036C  0839               	movf	??_Tmr_TmrBPrSet+5,w
  5234  036D  00A5               	movwf	___lmul@multiplier+1
  5235  036E  0838               	movf	??_Tmr_TmrBPrSet+4,w
  5236  036F  00A4               	movwf	___lmul@multiplier
  5237  0370  0830               	movf	Tmr_TmrBPrSet@IntFreqHz,w
  5238  0371  00A8               	movwf	___lmul@multiplicand
  5239  0372  0831               	movf	Tmr_TmrBPrSet@IntFreqHz+1,w
  5240  0373  00A9               	movwf	___lmul@multiplicand+1
  5241  0374  01AA               	clrf	___lmul@multiplicand+2
  5242  0375  01AB               	clrf	___lmul@multiplicand+3
  5243  0376  318B  23D0  3183   	fcall	___lmul
  5244  0379  0020               	movlb	0	; select bank0
  5245  037A  0827               	movf	?___lmul+3,w
  5246  037B  00C1               	movwf	Tmr_TmrBPrSet@Divisor+3
  5247  037C  0826               	movf	?___lmul+2,w
  5248  037D  00C0               	movwf	Tmr_TmrBPrSet@Divisor+2
  5249  037E  0825               	movf	?___lmul+1,w
  5250  037F  00BF               	movwf	Tmr_TmrBPrSet@Divisor+1
  5251  0380  0824               	movf	?___lmul,w
  5252  0381  00BE               	movwf	Tmr_TmrBPrSet@Divisor
  5253                           
  5254                           ;tmr_drv.c: 234: if (((((UINT32)(32000000))/4)/Divisor) <= 255)
  5255  0382  0841               	movf	Tmr_TmrBPrSet@Divisor+3,w
  5256  0383  00A3               	movwf	___lldiv@divisor+3
  5257  0384  0840               	movf	Tmr_TmrBPrSet@Divisor+2,w
  5258  0385  00A2               	movwf	___lldiv@divisor+2
  5259  0386  083F               	movf	Tmr_TmrBPrSet@Divisor+1,w
  5260  0387  00A1               	movwf	___lldiv@divisor+1
  5261  0388  083E               	movf	Tmr_TmrBPrSet@Divisor,w
  5262  0389  00A0               	movwf	___lldiv@divisor
  5263  038A  3000               	movlw	0
  5264  038B  00A7               	movwf	___lldiv@dividend+3
  5265  038C  307A               	movlw	122
  5266  038D  00A6               	movwf	___lldiv@dividend+2
  5267  038E  3012               	movlw	18
  5268  038F  00A5               	movwf	___lldiv@dividend+1
  5269  0390  3000               	movlw	0
  5270  0391  00A4               	movwf	___lldiv@dividend
  5271  0392  318E  2624  3183   	fcall	___lldiv
  5272  0395  0020               	movlb	0	; select bank0
  5273  0396  0823               	movf	?___lldiv+3,w
  5274  0397  1D03               	btfss	3,2
  5275  0398  2BF8               	goto	l391
  5276  0399  0822               	movf	?___lldiv+2,w
  5277  039A  1D03               	btfss	3,2
  5278  039B  2BF8               	goto	l391
  5279  039C  3001               	movlw	1
  5280  039D  0221               	subwf	?___lldiv+1,w
  5281  039E  1C03               	btfss	3,0
  5282  039F  2BE9               	goto	l4325
  5283  03A0  2BF8               	goto	l391
  5284  03A1                     l4317:	
  5285                           ;tmr_drv.c: 238: {
  5286                           ;tmr_drv.c: 239: case ((UINT8)(2)):
  5287                           
  5288                           ;tmr_drv.c: 235: {
  5289                           ;tmr_drv.c: 237: switch (TmrNumb)
  5290                           
  5291                           
  5292                           ;tmr_drv.c: 241: PR2 = (((UINT32)(32000000))/4)/Divisor;
  5293  03A1  0841               	movf	Tmr_TmrBPrSet@Divisor+3,w
  5294  03A2  00A3               	movwf	___lldiv@divisor+3
  5295  03A3  0840               	movf	Tmr_TmrBPrSet@Divisor+2,w
  5296  03A4  00A2               	movwf	___lldiv@divisor+2
  5297  03A5  083F               	movf	Tmr_TmrBPrSet@Divisor+1,w
  5298  03A6  00A1               	movwf	___lldiv@divisor+1
  5299  03A7  083E               	movf	Tmr_TmrBPrSet@Divisor,w
  5300  03A8  00A0               	movwf	___lldiv@divisor
  5301  03A9  3000               	movlw	0
  5302  03AA  00A7               	movwf	___lldiv@dividend+3
  5303  03AB  307A               	movlw	122
  5304  03AC  00A6               	movwf	___lldiv@dividend+2
  5305  03AD  3012               	movlw	18
  5306  03AE  00A5               	movwf	___lldiv@dividend+1
  5307  03AF  3000               	movlw	0
  5308  03B0  00A4               	movwf	___lldiv@dividend
  5309  03B1  318E  2624  3183   	fcall	___lldiv
  5310  03B4  0020               	movlb	0	; select bank0
  5311  03B5  0820               	movf	?___lldiv,w
  5312  03B6  009B               	movwf	27	;volatile
  5313                           
  5314                           ;tmr_drv.c: 242: break;
  5315  03B7  2BF5               	goto	l4327
  5316  03B8                     l4319:	
  5317                           ;tmr_drv.c: 244: case ((UINT8)(4)):
  5318                           
  5319                           
  5320                           ;tmr_drv.c: 246: PR4 = (((UINT32)(32000000))/4)/Divisor;
  5321  03B8  0841               	movf	Tmr_TmrBPrSet@Divisor+3,w
  5322  03B9  00A3               	movwf	___lldiv@divisor+3
  5323  03BA  0840               	movf	Tmr_TmrBPrSet@Divisor+2,w
  5324  03BB  00A2               	movwf	___lldiv@divisor+2
  5325  03BC  083F               	movf	Tmr_TmrBPrSet@Divisor+1,w
  5326  03BD  00A1               	movwf	___lldiv@divisor+1
  5327  03BE  083E               	movf	Tmr_TmrBPrSet@Divisor,w
  5328  03BF  00A0               	movwf	___lldiv@divisor
  5329  03C0  3000               	movlw	0
  5330  03C1  00A7               	movwf	___lldiv@dividend+3
  5331  03C2  307A               	movlw	122
  5332  03C3  00A6               	movwf	___lldiv@dividend+2
  5333  03C4  3012               	movlw	18
  5334  03C5  00A5               	movwf	___lldiv@dividend+1
  5335  03C6  3000               	movlw	0
  5336  03C7  00A4               	movwf	___lldiv@dividend
  5337  03C8  318E  2624  3183   	fcall	___lldiv
  5338  03CB  0020               	movlb	0	; select bank0
  5339  03CC  0820               	movf	?___lldiv,w
  5340  03CD  0028               	movlb	8	; select bank8
  5341  03CE  0096               	movwf	22	;volatile
  5342                           
  5343                           ;tmr_drv.c: 247: break;
  5344  03CF  2BF5               	goto	l4327
  5345  03D0                     l4321:	
  5346                           ;tmr_drv.c: 249: case ((UINT8)(6)):
  5347                           
  5348                           
  5349                           ;tmr_drv.c: 251: PR6 = (((UINT32)(32000000))/4)/Divisor;
  5350  03D0  0020               	movlb	0	; select bank0
  5351  03D1  0841               	movf	Tmr_TmrBPrSet@Divisor+3,w
  5352  03D2  00A3               	movwf	___lldiv@divisor+3
  5353  03D3  0840               	movf	Tmr_TmrBPrSet@Divisor+2,w
  5354  03D4  00A2               	movwf	___lldiv@divisor+2
  5355  03D5  083F               	movf	Tmr_TmrBPrSet@Divisor+1,w
  5356  03D6  00A1               	movwf	___lldiv@divisor+1
  5357  03D7  083E               	movf	Tmr_TmrBPrSet@Divisor,w
  5358  03D8  00A0               	movwf	___lldiv@divisor
  5359  03D9  3000               	movlw	0
  5360  03DA  00A7               	movwf	___lldiv@dividend+3
  5361  03DB  307A               	movlw	122
  5362  03DC  00A6               	movwf	___lldiv@dividend+2
  5363  03DD  3012               	movlw	18
  5364  03DE  00A5               	movwf	___lldiv@dividend+1
  5365  03DF  3000               	movlw	0
  5366  03E0  00A4               	movwf	___lldiv@dividend
  5367  03E1  318E  2624  3183   	fcall	___lldiv
  5368  03E4  0020               	movlb	0	; select bank0
  5369  03E5  0820               	movf	?___lldiv,w
  5370  03E6  0028               	movlb	8	; select bank8
  5371  03E7  009D               	movwf	29	;volatile
  5372                           
  5373                           ;tmr_drv.c: 256: }
  5374                           
  5375                           ;tmr_drv.c: 255: break;
  5376                           
  5377                           ;tmr_drv.c: 254: default:
  5378                           
  5379                           ;tmr_drv.c: 252: break;
  5380  03E8  2BF5               	goto	l4327
  5381  03E9                     l4325:	
  5382  03E9  0020               	movlb	0	; select bank0
  5383  03EA  083C               	movf	Tmr_TmrBPrSet@TmrNumb,w
  5384                           
  5385                           ; Switch size 1, requested type "space"
  5386                           ; Number of cases is 3, Range of values is 2 to 6
  5387                           ; switch strategies available:
  5388                           ; Name         Instructions Cycles
  5389                           ; simple_byte           10     6 (average)
  5390                           ; direct_byte           19     9 (fixed)
  5391                           ; jumptable            263     9 (fixed)
  5392                           ;	Chosen strategy is simple_byte
  5393  03EB  3A02               	xorlw	2	; case 2
  5394  03EC  1903               	skipnz
  5395  03ED  2BA1               	goto	l4317
  5396  03EE  3A06               	xorlw	6	; case 4
  5397  03EF  1903               	skipnz
  5398  03F0  2BB8               	goto	l4319
  5399  03F1  3A02               	xorlw	2	; case 6
  5400  03F2  1903               	skipnz
  5401  03F3  2BD0               	goto	l4321
  5402  03F4  2BF5               	goto	l4327
  5403  03F5                     l4327:	
  5404                           
  5405                           ;tmr_drv.c: 259: TmrBPrCfgSts = CfgOk;
  5406  03F5  0020               	movlb	0	; select bank0
  5407  03F6  01BD               	clrf	Tmr_TmrBPrSet@TmrBPrCfgSts
  5408                           
  5409                           ;tmr_drv.c: 260: }
  5410  03F7  2BFA               	goto	l4329
  5411  03F8                     l391:	
  5412                           
  5413                           ;tmr_drv.c: 261: else
  5414                           ;tmr_drv.c: 262: {
  5415                           ;tmr_drv.c: 264: TmrBPrCfgSts = CfgError;
  5416  03F8  01BD               	clrf	Tmr_TmrBPrSet@TmrBPrCfgSts
  5417  03F9  0ABD               	incf	Tmr_TmrBPrSet@TmrBPrCfgSts,f
  5418  03FA                     l4329:	
  5419                           
  5420                           ;tmr_drv.c: 265: }
  5421                           ;tmr_drv.c: 268: return TmrBPrCfgSts;
  5422  03FA  083D               	movf	Tmr_TmrBPrSet@TmrBPrCfgSts,w
  5423  03FB  0008               	return
  5424  03FC                     __end_of_Tmr_TmrBPrSet:	
  5425                           
  5426                           	psect	text8
  5427  0A34                     __ptext8:	
  5428 ;; *************** function ___wmul *****************
  5429 ;; Defined at:
  5430 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\Umul16.c"
  5431 ;; Parameters:    Size  Location     Type
  5432 ;;  multiplier      2    0[BANK0 ] unsigned int 
  5433 ;;  multiplicand    2    2[BANK0 ] unsigned int 
  5434 ;; Auto vars:     Size  Location     Type
  5435 ;;  product         2    4[COMMON] unsigned int 
  5436 ;; Return value:  Size  Location     Type
  5437 ;;                  2    0[BANK0 ] unsigned int 
  5438 ;; Registers used:
  5439 ;;		wreg, status,2, status,0
  5440 ;; Tracked objects:
  5441 ;;		On entry : 0/0
  5442 ;;		On exit  : 0/0
  5443 ;;		Unchanged: 0/0
  5444 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5445 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5446 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5447 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5448 ;;      Totals:         2       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5449 ;;Total ram usage:        6 bytes
  5450 ;; Hardware stack levels used:    1
  5451 ;; Hardware stack levels required when called:    3
  5452 ;; This function calls:
  5453 ;;		Nothing
  5454 ;; This function is called by:
  5455 ;;		_Tmr_TmrBPrSet
  5456 ;; This function uses a non-reentrant model
  5457 ;;
  5458                           
  5459                           
  5460                           ;psect for function ___wmul
  5461  0A34                     ___wmul:	
  5462                           
  5463                           ;incstack = 0
  5464                           ; Regs used in ___wmul: [wreg+status,2+status,0]
  5465  0A34  01F4               	clrf	___wmul@product
  5466  0A35  01F5               	clrf	___wmul@product+1
  5467  0A36                     l4237:	
  5468  0A36  0020               	movlb	0	; select bank0
  5469  0A37  1C20               	btfss	___wmul@multiplier,0
  5470  0A38  2A3D               	goto	l1124
  5471  0A39  0822               	movf	___wmul@multiplicand,w
  5472  0A3A  07F4               	addwf	___wmul@product,f
  5473  0A3B  0823               	movf	___wmul@multiplicand+1,w
  5474  0A3C  3DF5               	addwfc	___wmul@product+1,f
  5475  0A3D                     l1124:	
  5476  0A3D  3001               	movlw	1
  5477  0A3E                     u3035:	
  5478  0A3E  35A2               	lslf	___wmul@multiplicand,f
  5479  0A3F  0DA3               	rlf	___wmul@multiplicand+1,f
  5480  0A40  0B89               	decfsz	9,f
  5481  0A41  2A3E               	goto	u3035
  5482  0A42  3001               	movlw	1
  5483  0A43                     u3045:	
  5484  0A43  36A1               	lsrf	___wmul@multiplier+1,f
  5485  0A44  0CA0               	rrf	___wmul@multiplier,f
  5486  0A45  0B89               	decfsz	9,f
  5487  0A46  2A43               	goto	u3045
  5488  0A47  0820               	movf	___wmul@multiplier,w
  5489  0A48  0421               	iorwf	___wmul@multiplier+1,w
  5490  0A49  1D03               	btfss	3,2
  5491  0A4A  2A36               	goto	l4237
  5492  0A4B  0875               	movf	___wmul@product+1,w
  5493  0A4C  00A1               	movwf	?___wmul+1
  5494  0A4D  0874               	movf	___wmul@product,w
  5495  0A4E  00A0               	movwf	?___wmul
  5496  0A4F  0008               	return
  5497  0A50                     __end_of___wmul:	
  5498                           
  5499                           	psect	text9
  5500  0BD0                     __ptext9:	
  5501 ;; *************** function ___lmul *****************
  5502 ;; Defined at:
  5503 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\Umul32.c"
  5504 ;; Parameters:    Size  Location     Type
  5505 ;;  multiplier      4    4[BANK0 ] unsigned long 
  5506 ;;  multiplicand    4    8[BANK0 ] unsigned long 
  5507 ;; Auto vars:     Size  Location     Type
  5508 ;;  product         4   12[BANK0 ] unsigned long 
  5509 ;; Return value:  Size  Location     Type
  5510 ;;                  4    4[BANK0 ] unsigned long 
  5511 ;; Registers used:
  5512 ;;		wreg, status,2, status,0
  5513 ;; Tracked objects:
  5514 ;;		On entry : 0/0
  5515 ;;		On exit  : 0/0
  5516 ;;		Unchanged: 0/0
  5517 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5518 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5519 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5520 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5521 ;;      Totals:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5522 ;;Total ram usage:       12 bytes
  5523 ;; Hardware stack levels used:    1
  5524 ;; Hardware stack levels required when called:    3
  5525 ;; This function calls:
  5526 ;;		Nothing
  5527 ;; This function is called by:
  5528 ;;		_Tmr_TmrBPrSet
  5529 ;; This function uses a non-reentrant model
  5530 ;;
  5531                           
  5532                           
  5533                           ;psect for function ___lmul
  5534  0BD0                     ___lmul:	
  5535                           
  5536                           ;incstack = 0
  5537                           ; Regs used in ___lmul: [wreg+status,2+status,0]
  5538  0BD0  3000               	movlw	0
  5539  0BD1  0020               	movlb	0	; select bank0
  5540  0BD2  00AF               	movwf	___lmul@product+3
  5541  0BD3  3000               	movlw	0
  5542  0BD4  00AE               	movwf	___lmul@product+2
  5543  0BD5  3000               	movlw	0
  5544  0BD6  00AD               	movwf	___lmul@product+1
  5545  0BD7  3000               	movlw	0
  5546  0BD8  00AC               	movwf	___lmul@product
  5547  0BD9                     l3129:	
  5548  0BD9  1C24               	btfss	___lmul@multiplier,0
  5549  0BDA  2BE3               	goto	l3133
  5550  0BDB  0828               	movf	___lmul@multiplicand,w
  5551  0BDC  07AC               	addwf	___lmul@product,f
  5552  0BDD  0829               	movf	___lmul@multiplicand+1,w
  5553  0BDE  3DAD               	addwfc	___lmul@product+1,f
  5554  0BDF  082A               	movf	___lmul@multiplicand+2,w
  5555  0BE0  3DAE               	addwfc	___lmul@product+2,f
  5556  0BE1  082B               	movf	___lmul@multiplicand+3,w
  5557  0BE2  3DAF               	addwfc	___lmul@product+3,f
  5558  0BE3                     l3133:	
  5559  0BE3  3001               	movlw	1
  5560  0BE4                     u1815:	
  5561  0BE4  35A8               	lslf	___lmul@multiplicand,f
  5562  0BE5  0DA9               	rlf	___lmul@multiplicand+1,f
  5563  0BE6  0DAA               	rlf	___lmul@multiplicand+2,f
  5564  0BE7  0DAB               	rlf	___lmul@multiplicand+3,f
  5565  0BE8  0B89               	decfsz	9,f
  5566  0BE9  2BE4               	goto	u1815
  5567  0BEA  3001               	movlw	1
  5568  0BEB                     u1825:	
  5569  0BEB  36A7               	lsrf	___lmul@multiplier+3,f
  5570  0BEC  0CA6               	rrf	___lmul@multiplier+2,f
  5571  0BED  0CA5               	rrf	___lmul@multiplier+1,f
  5572  0BEE  0CA4               	rrf	___lmul@multiplier,f
  5573  0BEF  0B89               	decfsz	9,f
  5574  0BF0  2BEB               	goto	u1825
  5575  0BF1  0827               	movf	___lmul@multiplier+3,w
  5576  0BF2  0426               	iorwf	___lmul@multiplier+2,w
  5577  0BF3  0425               	iorwf	___lmul@multiplier+1,w
  5578  0BF4  0424               	iorwf	___lmul@multiplier,w
  5579  0BF5  1D03               	skipz
  5580  0BF6  2BD9               	goto	l3129
  5581  0BF7  082F               	movf	___lmul@product+3,w
  5582  0BF8  00A7               	movwf	?___lmul+3
  5583  0BF9  082E               	movf	___lmul@product+2,w
  5584  0BFA  00A6               	movwf	?___lmul+2
  5585  0BFB  082D               	movf	___lmul@product+1,w
  5586  0BFC  00A5               	movwf	?___lmul+1
  5587  0BFD  082C               	movf	___lmul@product,w
  5588  0BFE  00A4               	movwf	?___lmul
  5589  0BFF  0008               	return
  5590  0C00                     __end_of___lmul:	
  5591                           
  5592                           	psect	text10
  5593  0E24                     __ptext10:	
  5594 ;; *************** function ___lldiv *****************
  5595 ;; Defined at:
  5596 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\lldiv.c"
  5597 ;; Parameters:    Size  Location     Type
  5598 ;;  divisor         4    0[BANK0 ] unsigned long 
  5599 ;;  dividend        4    4[BANK0 ] unsigned long 
  5600 ;; Auto vars:     Size  Location     Type
  5601 ;;  quotient        4    8[BANK0 ] unsigned long 
  5602 ;;  counter         1   12[BANK0 ] unsigned char 
  5603 ;; Return value:  Size  Location     Type
  5604 ;;                  4    0[BANK0 ] unsigned long 
  5605 ;; Registers used:
  5606 ;;		wreg, status,2, status,0
  5607 ;; Tracked objects:
  5608 ;;		On entry : 0/0
  5609 ;;		On exit  : 0/0
  5610 ;;		Unchanged: 0/0
  5611 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5612 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5613 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5614 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5615 ;;      Totals:         1      13       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5616 ;;Total ram usage:       14 bytes
  5617 ;; Hardware stack levels used:    1
  5618 ;; Hardware stack levels required when called:    3
  5619 ;; This function calls:
  5620 ;;		Nothing
  5621 ;; This function is called by:
  5622 ;;		_Tmr_TmrBPrSet
  5623 ;; This function uses a non-reentrant model
  5624 ;;
  5625                           
  5626                           
  5627                           ;psect for function ___lldiv
  5628  0E24                     ___lldiv:	
  5629                           
  5630                           ;incstack = 0
  5631                           ; Regs used in ___lldiv: [wreg+status,2+status,0]
  5632  0E24  3000               	movlw	0
  5633  0E25  0020               	movlb	0	; select bank0
  5634  0E26  00AB               	movwf	___lldiv@quotient+3
  5635  0E27  3000               	movlw	0
  5636  0E28  00AA               	movwf	___lldiv@quotient+2
  5637  0E29  3000               	movlw	0
  5638  0E2A  00A9               	movwf	___lldiv@quotient+1
  5639  0E2B  3000               	movlw	0
  5640  0E2C  00A8               	movwf	___lldiv@quotient
  5641  0E2D  0823               	movf	___lldiv@divisor+3,w
  5642  0E2E  0422               	iorwf	___lldiv@divisor+2,w
  5643  0E2F  0421               	iorwf	___lldiv@divisor+1,w
  5644  0E30  0420               	iorwf	___lldiv@divisor,w
  5645  0E31  1903               	skipnz
  5646  0E32  2E6E               	goto	l4269
  5647  0E33  01AC               	clrf	___lldiv@counter
  5648  0E34  0AAC               	incf	___lldiv@counter,f
  5649  0E35                     l4255:	
  5650  0E35  1BA3               	btfsc	___lldiv@divisor+3,7
  5651  0E36  2E43               	goto	l4257
  5652  0E37  3001               	movlw	1
  5653  0E38                     u3075:	
  5654  0E38  35A0               	lslf	___lldiv@divisor,f
  5655  0E39  0DA1               	rlf	___lldiv@divisor+1,f
  5656  0E3A  0DA2               	rlf	___lldiv@divisor+2,f
  5657  0E3B  0DA3               	rlf	___lldiv@divisor+3,f
  5658  0E3C  0B89               	decfsz	9,f
  5659  0E3D  2E38               	goto	u3075
  5660  0E3E  3001               	movlw	1
  5661  0E3F  00F4               	movwf	??___lldiv
  5662  0E40  0874               	movf	??___lldiv,w
  5663  0E41  07AC               	addwf	___lldiv@counter,f
  5664  0E42  2E35               	goto	l4255
  5665  0E43                     l4257:	
  5666  0E43  3001               	movlw	1
  5667  0E44                     u3095:	
  5668  0E44  35A8               	lslf	___lldiv@quotient,f
  5669  0E45  0DA9               	rlf	___lldiv@quotient+1,f
  5670  0E46  0DAA               	rlf	___lldiv@quotient+2,f
  5671  0E47  0DAB               	rlf	___lldiv@quotient+3,f
  5672  0E48  0B89               	decfsz	9,f
  5673  0E49  2E44               	goto	u3095
  5674  0E4A  0823               	movf	___lldiv@divisor+3,w
  5675  0E4B  0227               	subwf	___lldiv@dividend+3,w
  5676  0E4C  1D03               	skipz
  5677  0E4D  2E58               	goto	u3105
  5678  0E4E  0822               	movf	___lldiv@divisor+2,w
  5679  0E4F  0226               	subwf	___lldiv@dividend+2,w
  5680  0E50  1D03               	skipz
  5681  0E51  2E58               	goto	u3105
  5682  0E52  0821               	movf	___lldiv@divisor+1,w
  5683  0E53  0225               	subwf	___lldiv@dividend+1,w
  5684  0E54  1D03               	skipz
  5685  0E55  2E58               	goto	u3105
  5686  0E56  0820               	movf	___lldiv@divisor,w
  5687  0E57  0224               	subwf	___lldiv@dividend,w
  5688  0E58                     u3105:	
  5689  0E58  1C03               	skipc
  5690  0E59  2E63               	goto	l4265
  5691  0E5A  0820               	movf	___lldiv@divisor,w
  5692  0E5B  02A4               	subwf	___lldiv@dividend,f
  5693  0E5C  0821               	movf	___lldiv@divisor+1,w
  5694  0E5D  3BA5               	subwfb	___lldiv@dividend+1,f
  5695  0E5E  0822               	movf	___lldiv@divisor+2,w
  5696  0E5F  3BA6               	subwfb	___lldiv@dividend+2,f
  5697  0E60  0823               	movf	___lldiv@divisor+3,w
  5698  0E61  3BA7               	subwfb	___lldiv@dividend+3,f
  5699  0E62  1428               	bsf	___lldiv@quotient,0
  5700  0E63                     l4265:	
  5701  0E63  3001               	movlw	1
  5702  0E64                     u3115:	
  5703  0E64  36A3               	lsrf	___lldiv@divisor+3,f
  5704  0E65  0CA2               	rrf	___lldiv@divisor+2,f
  5705  0E66  0CA1               	rrf	___lldiv@divisor+1,f
  5706  0E67  0CA0               	rrf	___lldiv@divisor,f
  5707  0E68  0B89               	decfsz	9,f
  5708  0E69  2E64               	goto	u3115
  5709  0E6A  3001               	movlw	1
  5710  0E6B  02AC               	subwf	___lldiv@counter,f
  5711  0E6C  1D03               	btfss	3,2
  5712  0E6D  2E43               	goto	l4257
  5713  0E6E                     l4269:	
  5714  0E6E  082B               	movf	___lldiv@quotient+3,w
  5715  0E6F  00A3               	movwf	?___lldiv+3
  5716  0E70  082A               	movf	___lldiv@quotient+2,w
  5717  0E71  00A2               	movwf	?___lldiv+2
  5718  0E72  0829               	movf	___lldiv@quotient+1,w
  5719  0E73  00A1               	movwf	?___lldiv+1
  5720  0E74  0828               	movf	___lldiv@quotient,w
  5721  0E75  00A0               	movwf	?___lldiv
  5722  0E76  0008               	return
  5723  0E77                     __end_of___lldiv:	
  5724                           
  5725                           	psect	text11
  5726  0AF4                     __ptext11:	
  5727 ;; *************** function _Tmr_TmrBIrqSet *****************
  5728 ;; Defined at:
  5729 ;;		line 182 in file "../../../Framework/MercuryFwk/Source/c/01_Hal/02_Drv/tmr_drv.c"
  5730 ;; Parameters:    Size  Location     Type
  5731 ;;  TmrNumb         1    wreg     unsigned char 
  5732 ;;  TmrIrqSts       1    4[COMMON] unsigned char 
  5733 ;; Auto vars:     Size  Location     Type
  5734 ;;  TmrNumb         1    5[COMMON] unsigned char 
  5735 ;; Return value:  Size  Location     Type
  5736 ;;                  1    wreg      void 
  5737 ;; Registers used:
  5738 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  5739 ;; Tracked objects:
  5740 ;;		On entry : 0/0
  5741 ;;		On exit  : 0/0
  5742 ;;		Unchanged: 0/0
  5743 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5744 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5745 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5746 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5747 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5748 ;;Total ram usage:        2 bytes
  5749 ;; Hardware stack levels used:    1
  5750 ;; Hardware stack levels required when called:    3
  5751 ;; This function calls:
  5752 ;;		Nothing
  5753 ;; This function is called by:
  5754 ;;		_Tmr_TmrBConfig
  5755 ;; This function uses a non-reentrant model
  5756 ;;
  5757                           
  5758                           
  5759                           ;psect for function _Tmr_TmrBIrqSet
  5760  0AF4                     _Tmr_TmrBIrqSet:	
  5761                           
  5762                           ;incstack = 0
  5763                           ; Regs used in _Tmr_TmrBIrqSet: [wreg-fsr0h+status,2+status,0]
  5764                           ;Tmr_TmrBIrqSet@TmrNumb stored from wreg
  5765  0AF4  00F5               	movwf	Tmr_TmrBIrqSet@TmrNumb
  5766                           
  5767                           ;tmr_drv.c: 185: switch (TmrNumb)
  5768  0AF5  2B11               	goto	l3309
  5769  0AF6                     l383:	
  5770                           ;tmr_drv.c: 186: {
  5771                           ;tmr_drv.c: 187: case ((UINT8)(2)):
  5772                           
  5773                           
  5774                           ;tmr_drv.c: 189: PIR1bits.TMR2IF = 0u;
  5775  0AF6  0020               	movlb	0	; select bank0
  5776  0AF7  1091               	bcf	17,1	;volatile
  5777                           
  5778                           ;tmr_drv.c: 191: PIE1bits.TMR2IE = TmrIrqSts;
  5779  0AF8  0C74               	rrf	Tmr_TmrBIrqSet@TmrIrqSts,w
  5780  0AF9  0021               	movlb	1	; select bank1
  5781  0AFA  1C03               	skipc
  5782  0AFB  1091               	bcf	17,1	;volatile
  5783  0AFC  1803               	skipnc
  5784  0AFD  1491               	bsf	17,1	;volatile
  5785                           
  5786                           ;tmr_drv.c: 192: break;
  5787  0AFE  0008               	return
  5788  0AFF                     l385:	
  5789                           ;tmr_drv.c: 194: case ((UINT8)(4)):
  5790                           
  5791                           
  5792                           ;tmr_drv.c: 196: PIR3bits.TMR4IF = 0u;
  5793  0AFF  0020               	movlb	0	; select bank0
  5794  0B00  1093               	bcf	19,1	;volatile
  5795                           
  5796                           ;tmr_drv.c: 198: PIE3bits.TMR4IE = TmrIrqSts;
  5797  0B01  0C74               	rrf	Tmr_TmrBIrqSet@TmrIrqSts,w
  5798  0B02  0021               	movlb	1	; select bank1
  5799  0B03  1C03               	skipc
  5800  0B04  1093               	bcf	19,1	;volatile
  5801  0B05  1803               	skipnc
  5802  0B06  1493               	bsf	19,1	;volatile
  5803                           
  5804                           ;tmr_drv.c: 199: break;
  5805  0B07  0008               	return
  5806  0B08                     l386:	
  5807                           ;tmr_drv.c: 201: case ((UINT8)(6)):
  5808                           
  5809                           
  5810                           ;tmr_drv.c: 203: PIR3bits.TMR6IF = 0u;
  5811  0B08  0020               	movlb	0	; select bank0
  5812  0B09  1193               	bcf	19,3	;volatile
  5813                           
  5814                           ;tmr_drv.c: 205: PIE3bits.TMR6IE = TmrIrqSts;
  5815  0B0A  0C74               	rrf	Tmr_TmrBIrqSet@TmrIrqSts,w
  5816  0B0B  0021               	movlb	1	; select bank1
  5817  0B0C  1C03               	skipc
  5818  0B0D  1193               	bcf	19,3	;volatile
  5819  0B0E  1803               	skipnc
  5820  0B0F  1593               	bsf	19,3	;volatile
  5821                           
  5822                           ;tmr_drv.c: 210: }
  5823                           
  5824                           ;tmr_drv.c: 209: break;
  5825                           
  5826                           ;tmr_drv.c: 208: default:
  5827                           
  5828                           ;tmr_drv.c: 206: break;
  5829  0B10  0008               	return
  5830  0B11                     l3309:	
  5831  0B11  0875               	movf	Tmr_TmrBIrqSet@TmrNumb,w
  5832                           
  5833                           ; Switch size 1, requested type "space"
  5834                           ; Number of cases is 3, Range of values is 2 to 6
  5835                           ; switch strategies available:
  5836                           ; Name         Instructions Cycles
  5837                           ; simple_byte           10     6 (average)
  5838                           ; direct_byte           19     9 (fixed)
  5839                           ; jumptable            263     9 (fixed)
  5840                           ;	Chosen strategy is simple_byte
  5841  0B12  3A02               	xorlw	2	; case 2
  5842  0B13  1903               	skipnz
  5843  0B14  2AF6               	goto	l383
  5844  0B15  3A06               	xorlw	6	; case 4
  5845  0B16  1903               	skipnz
  5846  0B17  2AFF               	goto	l385
  5847  0B18  3A02               	xorlw	2	; case 6
  5848  0B19  1903               	skipnz
  5849  0B1A  2B08               	goto	l386
  5850  0B1B  2B1C               	goto	l388
  5851  0B1C                     l388:	
  5852  0B1C  0008               	return
  5853  0B1D                     __end_of_Tmr_TmrBIrqSet:	
  5854                           
  5855                           	psect	text12
  5856  09BD                     __ptext12:	
  5857 ;; *************** function _Tmr_StartTmr *****************
  5858 ;; Defined at:
  5859 ;;		line 279 in file "../../../Framework/MercuryFwk/Source/c/01_Hal/02_Drv/tmr_drv.c"
  5860 ;; Parameters:    Size  Location     Type
  5861 ;;  TmrNumb         1    wreg     unsigned char 
  5862 ;; Auto vars:     Size  Location     Type
  5863 ;;  TmrNumb         1    4[COMMON] unsigned char 
  5864 ;; Return value:  Size  Location     Type
  5865 ;;                  1    wreg      void 
  5866 ;; Registers used:
  5867 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  5868 ;; Tracked objects:
  5869 ;;		On entry : 0/0
  5870 ;;		On exit  : 0/0
  5871 ;;		Unchanged: 0/0
  5872 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5873 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5874 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5875 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5876 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5877 ;;Total ram usage:        1 bytes
  5878 ;; Hardware stack levels used:    1
  5879 ;; Hardware stack levels required when called:    3
  5880 ;; This function calls:
  5881 ;;		Nothing
  5882 ;; This function is called by:
  5883 ;;		_Tmr_TmrBConfig
  5884 ;; This function uses a non-reentrant model
  5885 ;;
  5886                           
  5887                           
  5888                           ;psect for function _Tmr_StartTmr
  5889  09BD                     _Tmr_StartTmr:	
  5890                           
  5891                           ;incstack = 0
  5892                           ; Regs used in _Tmr_StartTmr: [wreg-fsr0h+status,2+status,0]
  5893                           ;Tmr_StartTmr@TmrNumb stored from wreg
  5894  09BD  00F4               	movwf	Tmr_StartTmr@TmrNumb
  5895                           
  5896                           ;tmr_drv.c: 282: switch (TmrNumb)
  5897  09BE  29C8               	goto	l3339
  5898  09BF                     l403:	
  5899                           ;tmr_drv.c: 283: {
  5900                           ;tmr_drv.c: 284: case ((UINT8)(2)):
  5901                           
  5902                           
  5903                           ;tmr_drv.c: 286: T2CONbits.TMR2ON = 1u;
  5904  09BF  0020               	movlb	0	; select bank0
  5905  09C0  151C               	bsf	28,2	;volatile
  5906                           
  5907                           ;tmr_drv.c: 287: break;
  5908  09C1  0008               	return
  5909  09C2                     l405:	
  5910                           ;tmr_drv.c: 289: case ((UINT8)(4)):
  5911                           
  5912                           
  5913                           ;tmr_drv.c: 291: T4CONbits.TMR4ON = 1u;
  5914  09C2  0028               	movlb	8	; select bank8
  5915  09C3  1517               	bsf	23,2	;volatile
  5916                           
  5917                           ;tmr_drv.c: 292: break;
  5918  09C4  0008               	return
  5919  09C5                     l406:	
  5920                           ;tmr_drv.c: 294: case ((UINT8)(6)):
  5921                           
  5922                           
  5923                           ;tmr_drv.c: 296: T6CONbits.TMR6ON = 1u;
  5924  09C5  0028               	movlb	8	; select bank8
  5925  09C6  151E               	bsf	30,2	;volatile
  5926                           
  5927                           ;tmr_drv.c: 301: }
  5928                           
  5929                           ;tmr_drv.c: 300: break;
  5930                           
  5931                           ;tmr_drv.c: 299: default:
  5932                           
  5933                           ;tmr_drv.c: 297: break;
  5934  09C7  0008               	return
  5935  09C8                     l3339:	
  5936  09C8  0874               	movf	Tmr_StartTmr@TmrNumb,w
  5937                           
  5938                           ; Switch size 1, requested type "space"
  5939                           ; Number of cases is 3, Range of values is 2 to 6
  5940                           ; switch strategies available:
  5941                           ; Name         Instructions Cycles
  5942                           ; simple_byte           10     6 (average)
  5943                           ; direct_byte           19     9 (fixed)
  5944                           ; jumptable            263     9 (fixed)
  5945                           ;	Chosen strategy is simple_byte
  5946  09C9  3A02               	xorlw	2	; case 2
  5947  09CA  1903               	skipnz
  5948  09CB  29BF               	goto	l403
  5949  09CC  3A06               	xorlw	6	; case 4
  5950  09CD  1903               	skipnz
  5951  09CE  29C2               	goto	l405
  5952  09CF  3A02               	xorlw	2	; case 6
  5953  09D0  1903               	skipnz
  5954  09D1  29C5               	goto	l406
  5955  09D2  29D3               	goto	l408
  5956  09D3                     l408:	
  5957  09D3  0008               	return
  5958  09D4                     __end_of_Tmr_StartTmr:	
  5959                           
  5960                           	psect	text13
  5961  0707                     __ptext13:	
  5962 ;; *************** function _TmrBInit *****************
  5963 ;; Defined at:
  5964 ;;		line 72 in file "../../../Framework/MercuryFwk/Source/c/01_Hal/02_Drv/tmr_drv.c"
  5965 ;; Parameters:    Size  Location     Type
  5966 ;;  TmrNumb         1    wreg     unsigned char 
  5967 ;;  Prescaler       1    4[COMMON] unsigned char 
  5968 ;;  Postscaler      1    5[COMMON] unsigned char 
  5969 ;; Auto vars:     Size  Location     Type
  5970 ;;  TmrNumb         1    1[BANK0 ] unsigned char 
  5971 ;; Return value:  Size  Location     Type
  5972 ;;                  1    wreg      void 
  5973 ;; Registers used:
  5974 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  5975 ;; Tracked objects:
  5976 ;;		On entry : 0/0
  5977 ;;		On exit  : 0/0
  5978 ;;		Unchanged: 0/0
  5979 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5980 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5981 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5982 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5983 ;;      Totals:         2       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5984 ;;Total ram usage:        4 bytes
  5985 ;; Hardware stack levels used:    1
  5986 ;; Hardware stack levels required when called:    3
  5987 ;; This function calls:
  5988 ;;		Nothing
  5989 ;; This function is called by:
  5990 ;;		_Tmr_TmrBConfig
  5991 ;; This function uses a non-reentrant model
  5992 ;;
  5993                           
  5994                           
  5995                           ;psect for function _TmrBInit
  5996  0707                     _TmrBInit:	
  5997                           
  5998                           ;incstack = 0
  5999                           ; Regs used in _TmrBInit: [wreg-fsr0h+status,2+status,0]
  6000                           ;TmrBInit@TmrNumb stored from wreg
  6001  0707  0020               	movlb	0	; select bank0
  6002  0708  00A1               	movwf	TmrBInit@TmrNumb
  6003                           
  6004                           ;tmr_drv.c: 75: switch (TmrNumb)
  6005  0709  2F75               	goto	l4307
  6006  070A                     l358:	
  6007                           ;tmr_drv.c: 80: {
  6008                           ;tmr_drv.c: 81: case ((UINT8)(1)):
  6009                           
  6010                           ;tmr_drv.c: 79: switch (Prescaler)
  6011                           
  6012                           ;tmr_drv.c: 76: {
  6013                           ;tmr_drv.c: 77: case ((UINT8)(2)):
  6014                           
  6015                           
  6016                           ;tmr_drv.c: 83: T2CONbits.T2CKPS0 = 0u;
  6017  070A  101C               	bcf	28,0	;volatile
  6018  070B  2F0D               	goto	L2
  6019  070C                     l360:	
  6020                           ;tmr_drv.c: 87: case ((UINT8)(4)):
  6021                           
  6022                           ;tmr_drv.c: 85: break;
  6023                           
  6024                           ;tmr_drv.c: 84: T2CONbits.T2CKPS1 = 0u;
  6025                           
  6026                           
  6027                           ;tmr_drv.c: 89: T2CONbits.T2CKPS0 = 1u;
  6028  070C  141C               	bsf	28,0	;volatile
  6029  070D                     L2:	
  6030                           
  6031                           ;tmr_drv.c: 90: T2CONbits.T2CKPS1 = 0u;
  6032  070D  109C               	bcf	28,1	;volatile
  6033                           
  6034                           ;tmr_drv.c: 91: break;
  6035  070E  2F1D               	goto	l4291
  6036  070F                     l361:	
  6037                           ;tmr_drv.c: 93: case ((UINT8)(16)):
  6038                           
  6039                           
  6040                           ;tmr_drv.c: 94: T2CONbits.T2CKPS0 = 0u;
  6041  070F  101C               	bcf	28,0	;volatile
  6042                           
  6043                           ;tmr_drv.c: 95: T2CONbits.T2CKPS1 = 1u;
  6044  0710  149C               	bsf	28,1	;volatile
  6045                           
  6046                           ;tmr_drv.c: 100: }
  6047                           
  6048                           ;tmr_drv.c: 99: break;
  6049                           
  6050                           ;tmr_drv.c: 98: default:
  6051                           
  6052                           ;tmr_drv.c: 96: break;
  6053  0711  2F1D               	goto	l4291
  6054  0712                     l4289:	
  6055  0712  0874               	movf	TmrBInit@Prescaler,w
  6056                           
  6057                           ; Switch size 1, requested type "space"
  6058                           ; Number of cases is 3, Range of values is 1 to 16
  6059                           ; switch strategies available:
  6060                           ; Name         Instructions Cycles
  6061                           ; simple_byte           10     6 (average)
  6062                           ; direct_byte           41     9 (fixed)
  6063                           ; jumptable            263     9 (fixed)
  6064                           ;	Chosen strategy is simple_byte
  6065  0713  3A01               	xorlw	1	; case 1
  6066  0714  1903               	skipnz
  6067  0715  2F0A               	goto	l358
  6068  0716  3A05               	xorlw	5	; case 4
  6069  0717  1903               	skipnz
  6070  0718  2F0C               	goto	l360
  6071  0719  3A14               	xorlw	20	; case 16
  6072  071A  1903               	skipnz
  6073  071B  2F0F               	goto	l361
  6074  071C  2F1D               	goto	l4291
  6075  071D                     l4291:	
  6076                           
  6077                           ;tmr_drv.c: 103: T2CONbits.T2OUTPS = (Postscaler - 1);
  6078  071D  0875               	movf	TmrBInit@Postscaler,w
  6079  071E  3EFF               	addlw	255
  6080  071F  00A0               	movwf	??_TmrBInit
  6081  0720  0DA0               	rlf	??_TmrBInit,f
  6082  0721  0DA0               	rlf	??_TmrBInit,f
  6083  0722  0DA0               	rlf	??_TmrBInit,f
  6084  0723  081C               	movf	28,w	;volatile
  6085  0724  0620               	xorwf	??_TmrBInit,w
  6086  0725  3987               	andlw	-121
  6087  0726  0620               	xorwf	??_TmrBInit,w
  6088  0727  009C               	movwf	28	;volatile
  6089                           
  6090                           ;tmr_drv.c: 104: break;
  6091  0728  0008               	return
  6092  0729                     l366:	
  6093                           ;tmr_drv.c: 109: {
  6094                           ;tmr_drv.c: 110: case ((UINT8)(1)):
  6095                           
  6096                           ;tmr_drv.c: 108: switch (Prescaler)
  6097                           
  6098                           ;tmr_drv.c: 106: case ((UINT8)(4)):
  6099                           
  6100                           
  6101                           ;tmr_drv.c: 112: T4CONbits.T4CKPS0 = 0u;
  6102  0729  0028               	movlb	8	; select bank8
  6103  072A  1017               	bcf	23,0	;volatile
  6104  072B  2F2E               	goto	L3
  6105  072C                     l368:	
  6106                           ;tmr_drv.c: 116: case ((UINT8)(4)):
  6107                           
  6108                           ;tmr_drv.c: 114: break;
  6109                           
  6110                           ;tmr_drv.c: 113: T4CONbits.T4CKPS1 = 0u;
  6111                           
  6112                           
  6113                           ;tmr_drv.c: 118: T4CONbits.T4CKPS0 = 1u;
  6114  072C  0028               	movlb	8	; select bank8
  6115  072D  1417               	bsf	23,0	;volatile
  6116  072E                     L3:	
  6117                           
  6118                           ;tmr_drv.c: 119: T4CONbits.T4CKPS1 = 0u;
  6119  072E  1097               	bcf	23,1	;volatile
  6120                           
  6121                           ;tmr_drv.c: 120: break;
  6122  072F  2F3F               	goto	l4297
  6123  0730                     l369:	
  6124                           ;tmr_drv.c: 122: case ((UINT8)(16)):
  6125                           
  6126                           
  6127                           ;tmr_drv.c: 123: T4CONbits.T4CKPS0 = 0u;
  6128  0730  0028               	movlb	8	; select bank8
  6129  0731  1017               	bcf	23,0	;volatile
  6130                           
  6131                           ;tmr_drv.c: 124: T4CONbits.T4CKPS1 = 1u;
  6132  0732  1497               	bsf	23,1	;volatile
  6133                           
  6134                           ;tmr_drv.c: 129: }
  6135                           
  6136                           ;tmr_drv.c: 128: break;
  6137                           
  6138                           ;tmr_drv.c: 127: default:
  6139                           
  6140                           ;tmr_drv.c: 125: break;
  6141  0733  2F3F               	goto	l4297
  6142  0734                     l4295:	
  6143  0734  0874               	movf	TmrBInit@Prescaler,w
  6144                           
  6145                           ; Switch size 1, requested type "space"
  6146                           ; Number of cases is 3, Range of values is 1 to 16
  6147                           ; switch strategies available:
  6148                           ; Name         Instructions Cycles
  6149                           ; simple_byte           10     6 (average)
  6150                           ; direct_byte           41     9 (fixed)
  6151                           ; jumptable            263     9 (fixed)
  6152                           ;	Chosen strategy is simple_byte
  6153  0735  3A01               	xorlw	1	; case 1
  6154  0736  1903               	skipnz
  6155  0737  2F29               	goto	l366
  6156  0738  3A05               	xorlw	5	; case 4
  6157  0739  1903               	skipnz
  6158  073A  2F2C               	goto	l368
  6159  073B  3A14               	xorlw	20	; case 16
  6160  073C  1903               	skipnz
  6161  073D  2F30               	goto	l369
  6162  073E  2F3F               	goto	l4297
  6163  073F                     l4297:	
  6164                           
  6165                           ;tmr_drv.c: 132: T4CONbits.T4OUTPS = (Postscaler - 1);
  6166  073F  0875               	movf	TmrBInit@Postscaler,w
  6167  0740  3EFF               	addlw	255
  6168  0741  0020               	movlb	0	; select bank0
  6169  0742  00A0               	movwf	??_TmrBInit
  6170  0743  0DA0               	rlf	??_TmrBInit,f
  6171  0744  0DA0               	rlf	??_TmrBInit,f
  6172  0745  0DA0               	rlf	??_TmrBInit,f
  6173  0746  0028               	movlb	8	; select bank8
  6174  0747  0817               	movf	23,w	;volatile
  6175  0748  0020               	movlb	0	; select bank0
  6176  0749  0620               	xorwf	??_TmrBInit,w
  6177  074A  3987               	andlw	-121
  6178  074B  0620               	xorwf	??_TmrBInit,w
  6179  074C  0028               	movlb	8	; select bank8
  6180  074D  0097               	movwf	23	;volatile
  6181                           
  6182                           ;tmr_drv.c: 133: break;
  6183  074E  0008               	return
  6184  074F                     l373:	
  6185                           ;tmr_drv.c: 138: {
  6186                           ;tmr_drv.c: 139: case ((UINT8)(1)):
  6187                           
  6188                           ;tmr_drv.c: 137: switch (Prescaler)
  6189                           
  6190                           ;tmr_drv.c: 135: case ((UINT8)(6)):
  6191                           
  6192                           
  6193                           ;tmr_drv.c: 141: T6CONbits.T6CKPS0 = 0u;
  6194  074F  0028               	movlb	8	; select bank8
  6195  0750  101E               	bcf	30,0	;volatile
  6196  0751  2F54               	goto	L4
  6197  0752                     l375:	
  6198                           ;tmr_drv.c: 145: case ((UINT8)(4)):
  6199                           
  6200                           ;tmr_drv.c: 143: break;
  6201                           
  6202                           ;tmr_drv.c: 142: T6CONbits.T6CKPS1 = 0u;
  6203                           
  6204                           
  6205                           ;tmr_drv.c: 147: T6CONbits.T6CKPS0 = 1u;
  6206  0752  0028               	movlb	8	; select bank8
  6207  0753  141E               	bsf	30,0	;volatile
  6208  0754                     L4:	
  6209                           
  6210                           ;tmr_drv.c: 148: T6CONbits.T6CKPS1 = 0u;
  6211  0754  109E               	bcf	30,1	;volatile
  6212                           
  6213                           ;tmr_drv.c: 149: break;
  6214  0755  2F65               	goto	l4303
  6215  0756                     l376:	
  6216                           ;tmr_drv.c: 151: case ((UINT8)(16)):
  6217                           
  6218                           
  6219                           ;tmr_drv.c: 152: T6CONbits.T6CKPS0 = 0u;
  6220  0756  0028               	movlb	8	; select bank8
  6221  0757  101E               	bcf	30,0	;volatile
  6222                           
  6223                           ;tmr_drv.c: 153: T6CONbits.T6CKPS1 = 1u;
  6224  0758  149E               	bsf	30,1	;volatile
  6225                           
  6226                           ;tmr_drv.c: 158: }
  6227                           
  6228                           ;tmr_drv.c: 157: break;
  6229                           
  6230                           ;tmr_drv.c: 156: default:
  6231                           
  6232                           ;tmr_drv.c: 154: break;
  6233  0759  2F65               	goto	l4303
  6234  075A                     l4301:	
  6235  075A  0874               	movf	TmrBInit@Prescaler,w
  6236                           
  6237                           ; Switch size 1, requested type "space"
  6238                           ; Number of cases is 3, Range of values is 1 to 16
  6239                           ; switch strategies available:
  6240                           ; Name         Instructions Cycles
  6241                           ; simple_byte           10     6 (average)
  6242                           ; direct_byte           41     9 (fixed)
  6243                           ; jumptable            263     9 (fixed)
  6244                           ;	Chosen strategy is simple_byte
  6245  075B  3A01               	xorlw	1	; case 1
  6246  075C  1903               	skipnz
  6247  075D  2F4F               	goto	l373
  6248  075E  3A05               	xorlw	5	; case 4
  6249  075F  1903               	skipnz
  6250  0760  2F52               	goto	l375
  6251  0761  3A14               	xorlw	20	; case 16
  6252  0762  1903               	skipnz
  6253  0763  2F56               	goto	l376
  6254  0764  2F65               	goto	l4303
  6255  0765                     l4303:	
  6256                           
  6257                           ;tmr_drv.c: 161: T6CONbits.T6OUTPS = (Postscaler - 1);
  6258  0765  0875               	movf	TmrBInit@Postscaler,w
  6259  0766  3EFF               	addlw	255
  6260  0767  0020               	movlb	0	; select bank0
  6261  0768  00A0               	movwf	??_TmrBInit
  6262  0769  0DA0               	rlf	??_TmrBInit,f
  6263  076A  0DA0               	rlf	??_TmrBInit,f
  6264  076B  0DA0               	rlf	??_TmrBInit,f
  6265  076C  0028               	movlb	8	; select bank8
  6266  076D  081E               	movf	30,w	;volatile
  6267  076E  0020               	movlb	0	; select bank0
  6268  076F  0620               	xorwf	??_TmrBInit,w
  6269  0770  3987               	andlw	-121
  6270  0771  0620               	xorwf	??_TmrBInit,w
  6271  0772  0028               	movlb	8	; select bank8
  6272  0773  009E               	movwf	30	;volatile
  6273                           
  6274                           ;tmr_drv.c: 166: }
  6275                           
  6276                           ;tmr_drv.c: 165: break;
  6277                           
  6278                           ;tmr_drv.c: 164: default:
  6279                           
  6280                           ;tmr_drv.c: 162: break;
  6281  0774  0008               	return
  6282  0775                     l4307:	
  6283  0775  0020               	movlb	0	; select bank0
  6284  0776  0821               	movf	TmrBInit@TmrNumb,w
  6285                           
  6286                           ; Switch size 1, requested type "space"
  6287                           ; Number of cases is 3, Range of values is 2 to 6
  6288                           ; switch strategies available:
  6289                           ; Name         Instructions Cycles
  6290                           ; simple_byte           10     6 (average)
  6291                           ; direct_byte           19     9 (fixed)
  6292                           ; jumptable            263     9 (fixed)
  6293                           ;	Chosen strategy is simple_byte
  6294  0777  3A02               	xorlw	2	; case 2
  6295  0778  1903               	skipnz
  6296  0779  2F12               	goto	l4289
  6297  077A  3A06               	xorlw	6	; case 4
  6298  077B  1903               	skipnz
  6299  077C  2F34               	goto	l4295
  6300  077D  3A02               	xorlw	2	; case 6
  6301  077E  1903               	skipnz
  6302  077F  2F5A               	goto	l4301
  6303  0780  2F81               	goto	l379
  6304  0781                     l379:	
  6305  0781  0008               	return
  6306  0782                     __end_of_TmrBInit:	
  6307                           
  6308                           	psect	text14
  6309  095A                     __ptext14:	
  6310 ;; *************** function _MainScheduler *****************
  6311 ;; Defined at:
  6312 ;;		line 79 in file "../../../Framework/MercuryFwk/Source/c/02_Osl/os_sched.c"
  6313 ;; Parameters:    Size  Location     Type
  6314 ;;		None
  6315 ;; Auto vars:     Size  Location     Type
  6316 ;;		None
  6317 ;; Return value:  Size  Location     Type
  6318 ;;                  1    wreg      void 
  6319 ;; Registers used:
  6320 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6321 ;; Tracked objects:
  6322 ;;		On entry : 0/0
  6323 ;;		On exit  : 0/0
  6324 ;;		Unchanged: 0/0
  6325 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6326 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6327 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6328 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6329 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6330 ;;Total ram usage:        0 bytes
  6331 ;; Hardware stack levels used:    1
  6332 ;; Hardware stack levels required when called:   10
  6333 ;; This function calls:
  6334 ;;		_InitializeTasks
  6335 ;;		_ScheduleTasks
  6336 ;; This function is called by:
  6337 ;;		_main
  6338 ;; This function uses a non-reentrant model
  6339 ;;
  6340                           
  6341                           
  6342                           ;psect for function _MainScheduler
  6343  095A                     _MainScheduler:	
  6344                           
  6345                           ;os_sched.c: 82: InitializeTasks();
  6346                           
  6347                           ;incstack = 0
  6348                           ; Regs used in _MainScheduler: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  6349  095A  318D  25D6  3189   	fcall	_InitializeTasks
  6350                           
  6351                           ;os_sched.c: 84: SystemState = RunningState;
  6352  095D  0020               	movlb	0	; select bank0
  6353  095E  01ED               	clrf	_SystemState
  6354  095F  0AED               	incf	_SystemState,f
  6355  0960                     l4693:	
  6356                           ;os_sched.c: 91: while(((UINT8)(1)))
  6357                           
  6358                           
  6359                           ;os_sched.c: 92: {
  6360                           ;os_sched.c: 94: if (MainSystemTimebaseFlag == CallTaskPhase)
  6361  0960  0021               	movlb	1	; select bank1
  6362  0961  086F               	movf	_MainSystemTimebaseFlag^(0+128),w
  6363  0962  1D03               	btfss	3,2
  6364  0963  2960               	goto	l4693
  6365                           
  6366                           ;os_sched.c: 95: {
  6367                           ;os_sched.c: 97: ScheduleTasks();
  6368  0964  3182  2282  3189   	fcall	_ScheduleTasks
  6369                           
  6370                           ;os_sched.c: 99: MainSystemTimebaseFlag = WaitTriggerPhase;
  6371  0967  0021               	movlb	1	; select bank1
  6372  0968  01EF               	clrf	_MainSystemTimebaseFlag^(0+128)
  6373  0969  0AEF               	incf	_MainSystemTimebaseFlag^(0+128),f
  6374  096A  2960               	goto	l4693
  6375  096B                     __end_of_MainScheduler:	
  6376                           
  6377                           	psect	text15
  6378  0282                     __ptext15:	
  6379 ;; *************** function _ScheduleTasks *****************
  6380 ;; Defined at:
  6381 ;;		line 130 in file "../../../Framework/MercuryFwk/Source/c/02_Osl/os_sched.c"
  6382 ;; Parameters:    Size  Location     Type
  6383 ;;		None
  6384 ;; Auto vars:     Size  Location     Type
  6385 ;;  ActiveTaskIn    1   68[BANK0 ] unsigned char 
  6386 ;; Return value:  Size  Location     Type
  6387 ;;                  1    wreg      void 
  6388 ;; Registers used:
  6389 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6390 ;; Tracked objects:
  6391 ;;		On entry : 0/0
  6392 ;;		On exit  : 0/0
  6393 ;;		Unchanged: 0/0
  6394 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6395 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6396 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6397 ;;      Temps:          0       0       0       6       0       0       0       0       0       0       0       0       
      +0       0
  6398 ;;      Totals:         0       1       0       6       0       0       0       0       0       0       0       0       
      +0       0
  6399 ;;Total ram usage:        7 bytes
  6400 ;; Hardware stack levels used:    1
  6401 ;; Hardware stack levels required when called:    9
  6402 ;; This function calls:
  6403 ;;		_App_MainTask
  6404 ;;		_I2cSlv_MainTask
  6405 ;;		_I2c_DataReceiveSm
  6406 ;;		_Led_MainTask
  6407 ;;		_SnrDrv_GetDistSm
  6408 ;;		_Wdg_MainTask
  6409 ;; This function is called by:
  6410 ;;		_MainScheduler
  6411 ;; This function uses a non-reentrant model
  6412 ;;
  6413                           
  6414                           
  6415                           ;psect for function _ScheduleTasks
  6416  0282                     _ScheduleTasks:	
  6417                           
  6418                           ;os_sched.c: 133: UINT8 ActiveTaskIndex = 0u;
  6419                           
  6420                           ;incstack = 0
  6421                           ; Regs used in _ScheduleTasks: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  6422  0282  0020               	movlb	0	; select bank0
  6423  0283  01E4               	clrf	ScheduleTasks@ActiveTaskIndex
  6424                           
  6425                           ;os_sched.c: 136: for (ActiveTaskIndex = 0u; ActiveTaskIndex < TaskNumber; ActiveTaskInd
      +                          ex++)
  6426  0284  01E4               	clrf	ScheduleTasks@ActiveTaskIndex
  6427  0285  300A               	movlw	low (_TaskNumber| (0+32768))
  6428  0286  0084               	movwf	4
  6429  0287  3090               	movlw	high (_TaskNumber| (0+32768))
  6430  0288  0085               	movwf	5
  6431  0289  3F00               	moviw [0]fsr0
  6432  028A  0022               	movlb	2	; select bank2
  6433  028B  00E2               	movwf	??_ScheduleTasks^(0+256)
  6434  028C  3F01               	moviw [1]fsr0
  6435  028D                     L5:	
  6436  028D  00E3               	movwf	(??_ScheduleTasks^(0+256)+1)
  6437  028E  0020               	movlb	0	; select bank0
  6438  028F  0864               	movf	ScheduleTasks@ActiveTaskIndex,w
  6439  0290  0022               	movlb	2	; select bank2
  6440  0291  00E4               	movwf	(??_ScheduleTasks+2)^(0+256)
  6441  0292  01E5               	clrf	((??_ScheduleTasks+2)^(0+256)+1)
  6442  0293  0863               	movf	(??_ScheduleTasks+1)^(0+256),w
  6443  0294  0265               	subwf	(??_ScheduleTasks+3)^(0+256),w
  6444  0295  1D03               	skipz
  6445  0296  2A99               	goto	u3585
  6446  0297  0862               	movf	??_ScheduleTasks^(0+256),w
  6447  0298  0264               	subwf	(??_ScheduleTasks+2)^(0+256),w
  6448  0299                     u3585:	
  6449  0299  1803               	btfsc	3,0
  6450  029A  0008               	return
  6451                           
  6452                           ;os_sched.c: 137: {
  6453                           ;os_sched.c: 138: if (TaskTable[ActiveTaskIndex].Counter >= (TaskTable[ActiveTaskIndex].
      +                          Timeout))
  6454  029B  0020               	movlb	0	; select bank0
  6455  029C  0864               	movf	ScheduleTasks@ActiveTaskIndex,w
  6456  029D  0022               	movlb	2	; select bank2
  6457  029E  00E2               	movwf	??_ScheduleTasks^(0+256)
  6458  029F  3002               	movlw	2
  6459  02A0                     u3595:	
  6460  02A0  35E2               	lslf	??_ScheduleTasks^(0+256),f
  6461  02A1  3EFF               	addlw	-1
  6462  02A2  1D03               	skipz
  6463  02A3  2AA0               	goto	u3595
  6464  02A4  3562               	lslf	??_ScheduleTasks^(0+256),w
  6465  02A5  3E05               	addlw	5
  6466  02A6  3E20               	addlw	(low (_TaskTable| (0+256)))& (0+255)
  6467  02A7  0086               	movwf	6
  6468  02A8  3001               	movlw	1	; select bank2/3
  6469  02A9  0087               	movwf	7
  6470  02AA  3F40               	moviw [0]fsr1
  6471  02AB  00E3               	movwf	(??_ScheduleTasks+1)^(0+256)
  6472  02AC  3F41               	moviw [1]fsr1
  6473  02AD  00E4               	movwf	((??_ScheduleTasks+1)^(0+256)+1)
  6474  02AE  0020               	movlb	0	; select bank0
  6475  02AF  0864               	movf	ScheduleTasks@ActiveTaskIndex,w
  6476  02B0  0022               	movlb	2	; select bank2
  6477  02B1  00E5               	movwf	(??_ScheduleTasks+3)^(0+256)
  6478  02B2  3002               	movlw	2
  6479  02B3                     u3605:	
  6480  02B3  35E5               	lslf	(??_ScheduleTasks+3)^(0+256),f
  6481  02B4  3EFF               	addlw	-1
  6482  02B5  1D03               	skipz
  6483  02B6  2AB3               	goto	u3605
  6484  02B7  3565               	lslf	(??_ScheduleTasks+3)^(0+256),w
  6485  02B8  3E03               	addlw	3
  6486  02B9  3E20               	addlw	(low (_TaskTable| (0+256)))& (0+255)
  6487  02BA  0086               	movwf	6
  6488  02BB  3001               	movlw	1	; select bank2/3
  6489  02BC  0087               	movwf	7
  6490  02BD  3F40               	moviw [0]fsr1
  6491  02BE  00E6               	movwf	(??_ScheduleTasks+4)^(0+256)
  6492  02BF  3F41               	moviw [1]fsr1
  6493  02C0  00E7               	movwf	((??_ScheduleTasks+4)^(0+256)+1)
  6494  02C1  0864               	movf	(??_ScheduleTasks+2)^(0+256),w
  6495  02C2  0267               	subwf	(??_ScheduleTasks+5)^(0+256),w
  6496  02C3  1D03               	skipz
  6497  02C4  2AC7               	goto	u3615
  6498  02C5  0863               	movf	(??_ScheduleTasks+1)^(0+256),w
  6499  02C6  0266               	subwf	(??_ScheduleTasks+4)^(0+256),w
  6500  02C7                     u3615:	
  6501  02C7  1C03               	skipc
  6502  02C8  2B13               	goto	l4657
  6503                           
  6504                           ;os_sched.c: 139: {
  6505                           ;os_sched.c: 140: TaskTable[ActiveTaskIndex].Counter = ((UINT8)(0));
  6506  02C9  0020               	movlb	0	; select bank0
  6507  02CA  0864               	movf	ScheduleTasks@ActiveTaskIndex,w
  6508  02CB  0022               	movlb	2	; select bank2
  6509  02CC  00E2               	movwf	??_ScheduleTasks^(0+256)
  6510  02CD  3002               	movlw	2
  6511  02CE                     u3625:	
  6512  02CE  35E2               	lslf	??_ScheduleTasks^(0+256),f
  6513  02CF  3EFF               	addlw	-1
  6514  02D0  1D03               	skipz
  6515  02D1  2ACE               	goto	u3625
  6516  02D2  3562               	lslf	??_ScheduleTasks^(0+256),w
  6517  02D3  3E03               	addlw	3
  6518  02D4  3E20               	addlw	(low (_TaskTable| (0+256)))& (0+255)
  6519  02D5  0086               	movwf	6
  6520  02D6  3001               	movlw	1	; select bank2/3
  6521  02D7  0087               	movwf	7
  6522  02D8  3000               	movlw	0
  6523  02D9  3FC0               	movwi [0]fsr1
  6524  02DA  3FC1               	movwi [1]fsr1
  6525                           
  6526                           ;os_sched.c: 141: TaskTable[ActiveTaskIndex].State = TaskRunning;
  6527  02DB  0020               	movlb	0	; select bank0
  6528  02DC  0864               	movf	ScheduleTasks@ActiveTaskIndex,w
  6529  02DD  0022               	movlb	2	; select bank2
  6530  02DE  00E2               	movwf	??_ScheduleTasks^(0+256)
  6531  02DF  3002               	movlw	2
  6532  02E0                     u3635:	
  6533  02E0  35E2               	lslf	??_ScheduleTasks^(0+256),f
  6534  02E1  3EFF               	addlw	-1
  6535  02E2  1D03               	skipz
  6536  02E3  2AE0               	goto	u3635
  6537  02E4  3562               	lslf	??_ScheduleTasks^(0+256),w
  6538  02E5  3E02               	addlw	2
  6539  02E6  3E20               	addlw	(low (_TaskTable| (0+256)))& (0+255)
  6540  02E7  0086               	movwf	6
  6541  02E8  3001               	movlw	1	; select bank2/3
  6542  02E9  0087               	movwf	7
  6543  02EA  0181               	clrf	1
  6544  02EB  0A81               	incf	1,f
  6545                           
  6546                           ;os_sched.c: 142: TaskTable[ActiveTaskIndex].Task(TaskTable[ActiveTaskIndex].Options);
  6547  02EC  0020               	movlb	0	; select bank0
  6548  02ED  0864               	movf	ScheduleTasks@ActiveTaskIndex,w
  6549  02EE  0022               	movlb	2	; select bank2
  6550  02EF  00E2               	movwf	??_ScheduleTasks^(0+256)
  6551  02F0  3002               	movlw	2
  6552  02F1                     u3645:	
  6553  02F1  35E2               	lslf	??_ScheduleTasks^(0+256),f
  6554  02F2  3EFF               	addlw	-1
  6555  02F3  1D03               	skipz
  6556  02F4  2AF1               	goto	u3645
  6557  02F5  3562               	lslf	??_ScheduleTasks^(0+256),w
  6558  02F6  3E07               	addlw	7
  6559  02F7  3E20               	addlw	(low (_TaskTable| (0+256)))& (0+255)
  6560  02F8  0086               	movwf	6
  6561  02F9  3001               	movlw	1	; select bank2/3
  6562  02FA  0087               	movwf	7
  6563  02FB  0801               	movf	1,w
  6564  02FC  00E3               	movwf	(??_ScheduleTasks+1)^(0+256)
  6565  02FD  0863               	movf	(??_ScheduleTasks+1)^(0+256),w
  6566  02FE  0020               	movlb	0	; select bank0
  6567  02FF  00BE               	movwf	App_MainTask@Options
  6568  0300  0864               	movf	ScheduleTasks@ActiveTaskIndex,w
  6569  0301  0022               	movlb	2	; select bank2
  6570  0302  00E4               	movwf	(??_ScheduleTasks+2)^(0+256)
  6571  0303  3002               	movlw	2
  6572  0304                     u3655:	
  6573  0304  35E4               	lslf	(??_ScheduleTasks+2)^(0+256),f
  6574  0305  3EFF               	addlw	-1
  6575  0306  1D03               	skipz
  6576  0307  2B04               	goto	u3655
  6577  0308  3564               	lslf	(??_ScheduleTasks+2)^(0+256),w
  6578  0309  3E20               	addlw	(low (_TaskTable| (0+256)))& (0+255)
  6579  030A  0086               	movwf	6
  6580  030B  3001               	movlw	1	; select bank2/3
  6581  030C  0087               	movwf	7
  6582  030D  3F41               	moviw [1]fsr1
  6583  030E  008A               	movwf	10
  6584  030F  3F40               	moviw [0]fsr1
  6585  0310  000A               	callw
  6586  0311  3182               	pagesel	$
  6587                           
  6588                           ;os_sched.c: 143: }
  6589  0312  2B37               	goto	l4659
  6590  0313                     l4657:	
  6591                           
  6592                           ;os_sched.c: 144: else
  6593                           ;os_sched.c: 145: {
  6594                           ;os_sched.c: 146: TaskTable[ActiveTaskIndex].Counter++;
  6595  0313  0020               	movlb	0	; select bank0
  6596  0314  0864               	movf	ScheduleTasks@ActiveTaskIndex,w
  6597  0315  0022               	movlb	2	; select bank2
  6598  0316  00E2               	movwf	??_ScheduleTasks^(0+256)
  6599  0317  3002               	movlw	2
  6600  0318                     u3665:	
  6601  0318  35E2               	lslf	??_ScheduleTasks^(0+256),f
  6602  0319  3EFF               	addlw	-1
  6603  031A  1D03               	skipz
  6604  031B  2B18               	goto	u3665
  6605  031C  3562               	lslf	??_ScheduleTasks^(0+256),w
  6606  031D  3E03               	addlw	3
  6607  031E  3E20               	addlw	(low (_TaskTable| (0+256)))& (0+255)
  6608  031F  0086               	movwf	6
  6609  0320  3001               	movlw	1	; select bank2/3
  6610  0321  0087               	movwf	7
  6611  0322  3001               	movlw	1
  6612  0323  0781               	addwf	1,f
  6613  0324  3141               	addfsr 1,1
  6614  0325  1803               	skipnc
  6615  0326  0A81               	incf	1,f
  6616                           
  6617                           ;os_sched.c: 147: TaskTable[ActiveTaskIndex].State = TaskIdle;
  6618  0327  0020               	movlb	0	; select bank0
  6619  0328  0864               	movf	ScheduleTasks@ActiveTaskIndex,w
  6620  0329  0022               	movlb	2	; select bank2
  6621  032A  00E2               	movwf	??_ScheduleTasks^(0+256)
  6622  032B  3002               	movlw	2
  6623  032C                     u3675:	
  6624  032C  35E2               	lslf	??_ScheduleTasks^(0+256),f
  6625  032D  3EFF               	addlw	-1
  6626  032E  1D03               	skipz
  6627  032F  2B2C               	goto	u3675
  6628  0330  3562               	lslf	??_ScheduleTasks^(0+256),w
  6629  0331  3E02               	addlw	2
  6630  0332  3E20               	addlw	(low (_TaskTable| (0+256)))& (0+255)
  6631  0333  0086               	movwf	6
  6632  0334  3001               	movlw	1	; select bank2/3
  6633  0335  0087               	movwf	7
  6634  0336  0181               	clrf	1
  6635  0337                     l4659:	
  6636  0337  3001               	movlw	1
  6637  0338  0022               	movlb	2	; select bank2
  6638  0339  00E2               	movwf	??_ScheduleTasks^(0+256)
  6639  033A  0862               	movf	??_ScheduleTasks^(0+256),w
  6640  033B  0020               	movlb	0	; select bank0
  6641  033C  07E4               	addwf	ScheduleTasks@ActiveTaskIndex,f
  6642  033D  300A               	movlw	low (_TaskNumber| (0+32768))
  6643  033E  0084               	movwf	4
  6644  033F  3090               	movlw	high (_TaskNumber| (0+32768))
  6645  0340  0085               	movwf	5
  6646  0341  3F00               	moviw [0]fsr0
  6647  0342  0022               	movlb	2	; select bank2
  6648  0343  00E2               	movwf	??_ScheduleTasks^(0+256)
  6649  0344  3F01               	moviw [1]fsr0
  6650  0345  2A8D               	goto	L5
  6651  0346                     __end_of_ScheduleTasks:	
  6652                           
  6653                           	psect	text16
  6654  0DD6                     __ptext16:	
  6655 ;; *************** function _InitializeTasks *****************
  6656 ;; Defined at:
  6657 ;;		line 111 in file "../../../Framework/MercuryFwk/Source/c/02_Osl/os_sched.c"
  6658 ;; Parameters:    Size  Location     Type
  6659 ;;		None
  6660 ;; Auto vars:     Size  Location     Type
  6661 ;;  ActiveTaskIn    1   68[BANK0 ] unsigned char 
  6662 ;; Return value:  Size  Location     Type
  6663 ;;                  1    wreg      void 
  6664 ;; Registers used:
  6665 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6666 ;; Tracked objects:
  6667 ;;		On entry : 0/0
  6668 ;;		On exit  : 0/0
  6669 ;;		Unchanged: 0/0
  6670 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6671 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6672 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6673 ;;      Temps:          0       0       0       4       0       0       0       0       0       0       0       0       
      +0       0
  6674 ;;      Totals:         0       1       0       4       0       0       0       0       0       0       0       0       
      +0       0
  6675 ;;Total ram usage:        5 bytes
  6676 ;; Hardware stack levels used:    1
  6677 ;; Hardware stack levels required when called:    9
  6678 ;; This function calls:
  6679 ;;		_App_MainTask
  6680 ;;		_I2cSlv_MainTask
  6681 ;;		_I2c_DataReceiveSm
  6682 ;;		_Led_MainTask
  6683 ;;		_SnrDrv_GetDistSm
  6684 ;;		_Wdg_MainTask
  6685 ;; This function is called by:
  6686 ;;		_MainScheduler
  6687 ;; This function uses a non-reentrant model
  6688 ;;
  6689                           
  6690                           
  6691                           ;psect for function _InitializeTasks
  6692  0DD6                     _InitializeTasks:	
  6693                           
  6694                           ;os_sched.c: 114: UINT8 ActiveTaskIndex = 0u;
  6695                           
  6696                           ;incstack = 0
  6697                           ; Regs used in _InitializeTasks: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  6698  0DD6  0020               	movlb	0	; select bank0
  6699  0DD7  01E4               	clrf	InitializeTasks@ActiveTaskIndex
  6700                           
  6701                           ;os_sched.c: 117: for (ActiveTaskIndex = 0u; ActiveTaskIndex < TaskNumber; ActiveTaskInd
      +                          ex++)
  6702  0DD8  01E4               	clrf	InitializeTasks@ActiveTaskIndex
  6703  0DD9  300A               	movlw	low (_TaskNumber| (0+32768))
  6704  0DDA  0084               	movwf	4
  6705  0DDB  3090               	movlw	high (_TaskNumber| (0+32768))
  6706  0DDC  0085               	movwf	5
  6707  0DDD  3F00               	moviw [0]fsr0
  6708  0DDE  0022               	movlb	2	; select bank2
  6709  0DDF  00E2               	movwf	??_InitializeTasks^(0+256)
  6710  0DE0  3F01               	moviw [1]fsr0
  6711  0DE1                     L6:	
  6712  0DE1  00E3               	movwf	(??_InitializeTasks^(0+256)+1)
  6713  0DE2  0020               	movlb	0	; select bank0
  6714  0DE3  0864               	movf	InitializeTasks@ActiveTaskIndex,w
  6715  0DE4  0022               	movlb	2	; select bank2
  6716  0DE5  00E4               	movwf	(??_InitializeTasks+2)^(0+256)
  6717  0DE6  01E5               	clrf	((??_InitializeTasks+2)^(0+256)+1)
  6718  0DE7  0863               	movf	(??_InitializeTasks+1)^(0+256),w
  6719  0DE8  0265               	subwf	(??_InitializeTasks+3)^(0+256),w
  6720  0DE9  1D03               	skipz
  6721  0DEA  2DED               	goto	u3545
  6722  0DEB  0862               	movf	??_InitializeTasks^(0+256),w
  6723  0DEC  0264               	subwf	(??_InitializeTasks+2)^(0+256),w
  6724  0DED                     u3545:	
  6725  0DED  1803               	btfsc	3,0
  6726  0DEE  0008               	return
  6727                           
  6728                           ;os_sched.c: 118: {
  6729                           ;os_sched.c: 119: TaskTable[ActiveTaskIndex].Task(TaskTable[ActiveTaskIndex].Options);
  6730  0DEF  0020               	movlb	0	; select bank0
  6731  0DF0  0864               	movf	InitializeTasks@ActiveTaskIndex,w
  6732  0DF1  0022               	movlb	2	; select bank2
  6733  0DF2  00E2               	movwf	??_InitializeTasks^(0+256)
  6734  0DF3  3002               	movlw	2
  6735  0DF4                     u3555:	
  6736  0DF4  35E2               	lslf	??_InitializeTasks^(0+256),f
  6737  0DF5  3EFF               	addlw	-1
  6738  0DF6  1D03               	skipz
  6739  0DF7  2DF4               	goto	u3555
  6740  0DF8  3562               	lslf	??_InitializeTasks^(0+256),w
  6741  0DF9  3E07               	addlw	7
  6742  0DFA  3E20               	addlw	(low (_TaskTable| (0+256)))& (0+255)
  6743  0DFB  0086               	movwf	6
  6744  0DFC  3001               	movlw	1	; select bank2/3
  6745  0DFD  0087               	movwf	7
  6746  0DFE  0801               	movf	1,w
  6747  0DFF  00E3               	movwf	(??_InitializeTasks+1)^(0+256)
  6748  0E00  0863               	movf	(??_InitializeTasks+1)^(0+256),w
  6749  0E01  0020               	movlb	0	; select bank0
  6750  0E02  00BE               	movwf	App_MainTask@Options
  6751  0E03  0864               	movf	InitializeTasks@ActiveTaskIndex,w
  6752  0E04  0022               	movlb	2	; select bank2
  6753  0E05  00E4               	movwf	(??_InitializeTasks+2)^(0+256)
  6754  0E06  3002               	movlw	2
  6755  0E07                     u3565:	
  6756  0E07  35E4               	lslf	(??_InitializeTasks+2)^(0+256),f
  6757  0E08  3EFF               	addlw	-1
  6758  0E09  1D03               	skipz
  6759  0E0A  2E07               	goto	u3565
  6760  0E0B  3564               	lslf	(??_InitializeTasks+2)^(0+256),w
  6761  0E0C  3E20               	addlw	(low (_TaskTable| (0+256)))& (0+255)
  6762  0E0D  0086               	movwf	6
  6763  0E0E  3001               	movlw	1	; select bank2/3
  6764  0E0F  0087               	movwf	7
  6765  0E10  3F41               	moviw [1]fsr1
  6766  0E11  008A               	movwf	10
  6767  0E12  3F40               	moviw [0]fsr1
  6768  0E13  000A               	callw
  6769  0E14  318D               	pagesel	$
  6770  0E15  3001               	movlw	1
  6771  0E16  0022               	movlb	2	; select bank2
  6772  0E17  00E2               	movwf	??_InitializeTasks^(0+256)
  6773  0E18  0862               	movf	??_InitializeTasks^(0+256),w
  6774  0E19  0020               	movlb	0	; select bank0
  6775  0E1A  07E4               	addwf	InitializeTasks@ActiveTaskIndex,f
  6776  0E1B  300A               	movlw	low (_TaskNumber| (0+32768))
  6777  0E1C  0084               	movwf	4
  6778  0E1D  3090               	movlw	high (_TaskNumber| (0+32768))
  6779  0E1E  0085               	movwf	5
  6780  0E1F  3F00               	moviw [0]fsr0
  6781  0E20  0022               	movlb	2	; select bank2
  6782  0E21  00E2               	movwf	??_InitializeTasks^(0+256)
  6783  0E22  3F01               	moviw [1]fsr0
  6784  0E23  2DE1               	goto	L6
  6785  0E24                     __end_of_InitializeTasks:	
  6786                           
  6787                           	psect	text17
  6788  0F34                     __ptext17:	
  6789 ;; *************** function _App_MainTask *****************
  6790 ;; Defined at:
  6791 ;;		line 315 in file "../Source/c/04_App/sb310_app.c"
  6792 ;; Parameters:    Size  Location     Type
  6793 ;;  Options         1   30[BANK0 ] unsigned char 
  6794 ;; Auto vars:     Size  Location     Type
  6795 ;;  WpuCh          18   50[BANK0 ] struct _WpuChType
  6796 ;;  AnalogChSel    12   32[BANK0 ] struct _AnalogChSelType
  6797 ;;  AdcConfig       6   44[BANK0 ] struct _AdcCfgType
  6798 ;; Return value:  Size  Location     Type
  6799 ;;                  1    wreg      void 
  6800 ;; Registers used:
  6801 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6802 ;; Tracked objects:
  6803 ;;		On entry : 0/0
  6804 ;;		On exit  : 0/0
  6805 ;;		Unchanged: 0/0
  6806 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6807 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6808 ;;      Locals:         0      36       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6809 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6810 ;;      Totals:         0      38       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6811 ;;Total ram usage:       38 bytes
  6812 ;; Hardware stack levels used:    1
  6813 ;; Hardware stack levels required when called:    8
  6814 ;; This function calls:
  6815 ;;		_Adc_ConfigAnCh
  6816 ;;		_Adc_InitAdcModule
  6817 ;;		_AppSm
  6818 ;;		_Mcu_ConfigPullUps
  6819 ;;		_Mcu_SetDieTempMode
  6820 ;;		_Mcu_SetDieTempSts
  6821 ;;		_Mcu_SetPullUpsSts
  6822 ;;		_SonarMeasure
  6823 ;; This function is called by:
  6824 ;;		_InitializeTasks
  6825 ;;		_ScheduleTasks
  6826 ;; This function uses a non-reentrant model
  6827 ;;
  6828                           
  6829                           
  6830                           ;psect for function _App_MainTask
  6831  0F34                     _App_MainTask:	
  6832                           
  6833                           ;sb310_app.c: 317: WpuChType WpuCh = {((UINT8)(0)),((UINT8)(0)),((UINT8)(0)),((UINT8)(0)
      +                          ),((UINT8)(0)),((UINT8)(0)),((UINT8)(0)),((UINT8)(0)),((UINT8)(0)),((UINT8)(0)),((UINT8)
      +                          (0)),((UINT8)(0)),((UINT8)(0)),((UINT8)(0)),((UINT8)(0)),((UINT8)(0)),((UINT8)(0)),((UIN
      +                          T8)(0
  6834                           
  6835                           ;incstack = 0
  6836                           ; Regs used in _App_MainTask: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  6837  0F34  3050               	movlw	low App_MainTask@F4094
  6838  0F35  0086               	movwf	6
  6839  0F36  3001               	movlw	high App_MainTask@F4094
  6840  0F37  0087               	movwf	7
  6841  0F38  3052               	movlw	low App_MainTask@WpuCh
  6842  0F39  0084               	movwf	4
  6843  0F3A  3000               	movlw	high App_MainTask@WpuCh
  6844  0F3B  0085               	movwf	5
  6845  0F3C  3012               	movlw	18
  6846  0F3D  0020               	movlb	0	; select bank0
  6847  0F3E  00BF               	movwf	??_App_MainTask
  6848  0F3F                     u3520:	
  6849  0F3F  0016               	moviw fsr1++
  6850  0F40  001A               	movwi fsr0++
  6851  0F41  0BBF               	decfsz	??_App_MainTask,f
  6852  0F42  2F3F               	goto	u3520
  6853                           
  6854                           ;sb310_app.c: 318: AnalogChSelType AnalogChSel = {((UINT8)(0)),((UINT8)(0)),((UINT8)(0))
      +                          ,((UINT8)(0)),((UINT8)(0)),((UINT8)(0)),((UINT8)(0)),((UINT8)(0)),((UINT8)(0)),((UINT8)(
      +                          0)),((UINT8)(0)),((UINT8)(0))};
  6855  0F43  30A0               	movlw	low App_MainTask@F4114
  6856  0F44  0086               	movwf	6
  6857  0F45  3000               	movlw	high App_MainTask@F4114
  6858  0F46  0087               	movwf	7
  6859  0F47  3040               	movlw	low App_MainTask@AnalogChSel
  6860  0F48  0084               	movwf	4
  6861  0F49  3000               	movlw	high App_MainTask@AnalogChSel
  6862  0F4A  0085               	movwf	5
  6863  0F4B  300C               	movlw	12
  6864  0F4C  00BF               	movwf	??_App_MainTask
  6865  0F4D                     u3530:	
  6866  0F4D  0016               	moviw fsr1++
  6867  0F4E  001A               	movwi fsr0++
  6868  0F4F  0BBF               	decfsz	??_App_MainTask,f
  6869  0F50  2F4D               	goto	u3530
  6870                           
  6871                           ;sb310_app.c: 319: AdcConfigType AdcConfig;
  6872                           ;sb310_app.c: 321: switch (SystemState)
  6873  0F51  2F8E               	goto	l4631
  6874  0F52                     l961:	
  6875                           ;sb310_app.c: 322: {
  6876                           ;sb310_app.c: 324: case InitializationState:
  6877                           
  6878                           
  6879                           ;sb310_app.c: 326: TRISCbits.TRISC6 = ((UINT8)(1));
  6880  0F52  0021               	movlb	1	; select bank1
  6881  0F53  170E               	bsf	14,6	;volatile
  6882                           
  6883                           ;sb310_app.c: 327: TRISCbits.TRISC3 = ((UINT8)(1));
  6884  0F54  158E               	bsf	14,3	;volatile
  6885                           
  6886                           ;sb310_app.c: 328: TRISCbits.TRISC4 = ((UINT8)(1));
  6887  0F55  160E               	bsf	14,4	;volatile
  6888                           
  6889                           ;sb310_app.c: 329: TRISCbits.TRISC5 = ((UINT8)(1));
  6890  0F56  168E               	bsf	14,5	;volatile
  6891                           
  6892                           ;sb310_app.c: 332: TRISCbits.TRISC0 = ((UINT8)(0));
  6893  0F57  100E               	bcf	14,0	;volatile
  6894                           
  6895                           ;sb310_app.c: 335: TRISBbits.TRISB7 = ((UINT8)(0));
  6896  0F58  138D               	bcf	13,7	;volatile
  6897                           
  6898                           ;sb310_app.c: 337: LATBbits.LATB7 = ((UINT8)(1));
  6899  0F59  0022               	movlb	2	; select bank2
  6900  0F5A  178D               	bsf	13,7	;volatile
  6901                           
  6902                           ;sb310_app.c: 340: WpuCh.WpuC6 = ((UINT8)(1));
  6903  0F5B  0020               	movlb	0	; select bank0
  6904  0F5C  01E2               	clrf	App_MainTask@WpuCh+16
  6905  0F5D  0AE2               	incf	App_MainTask@WpuCh+16,f
  6906                           
  6907                           ;sb310_app.c: 341: WpuCh.WpuC3 = ((UINT8)(1));
  6908  0F5E  01DF               	clrf	App_MainTask@WpuCh+13
  6909  0F5F  0ADF               	incf	App_MainTask@WpuCh+13,f
  6910                           
  6911                           ;sb310_app.c: 342: WpuCh.WpuC4 = ((UINT8)(1));
  6912  0F60  01E0               	clrf	App_MainTask@WpuCh+14
  6913  0F61  0AE0               	incf	App_MainTask@WpuCh+14,f
  6914                           
  6915                           ;sb310_app.c: 343: WpuCh.WpuC5 = ((UINT8)(1));
  6916  0F62  01E1               	clrf	App_MainTask@WpuCh+15
  6917  0F63  0AE1               	incf	App_MainTask@WpuCh+15,f
  6918                           
  6919                           ;sb310_app.c: 345: Mcu_ConfigPullUps(&WpuCh);
  6920  0F64  3052               	movlw	(low (App_MainTask@WpuCh| 0))& (0+255)
  6921  0F65  3184  24A8  318F   	fcall	_Mcu_ConfigPullUps
  6922                           
  6923                           ;sb310_app.c: 346: Mcu_SetPullUpsSts(Mcu_GlobalPuEnabled);
  6924  0F68  3000               	movlw	0
  6925  0F69  3188  20A9  318F   	fcall	_Mcu_SetPullUpsSts
  6926                           
  6927                           ;sb310_app.c: 349: Adc_ConfigAnCh(&AnalogChSel);
  6928  0F6C  3040               	movlw	(low (App_MainTask@AnalogChSel| 0))& (0+255)
  6929  0F6D  3187  2782  318F   	fcall	_Adc_ConfigAnCh
  6930                           
  6931                           ;sb310_app.c: 352: Mcu_SetDieTempSts(((UINT8)(1)));
  6932  0F70  3001               	movlw	1
  6933  0F71  3188  20A1  318F   	fcall	_Mcu_SetDieTempSts
  6934                           
  6935                           ;sb310_app.c: 353: Mcu_SetDieTempMode(((UINT8)(0)));
  6936  0F74  3000               	movlw	0
  6937  0F75  3188  2099  318F   	fcall	_Mcu_SetDieTempMode
  6938                           
  6939                           ;sb310_app.c: 356: AdcConfig.AdcConvClock = ((UINT8)(3));
  6940  0F78  3003               	movlw	3
  6941  0F79  0020               	movlb	0	; select bank0
  6942  0F7A  00BF               	movwf	??_App_MainTask
  6943  0F7B  083F               	movf	??_App_MainTask,w
  6944  0F7C  00CE               	movwf	App_MainTask@AdcConfig+2
  6945                           
  6946                           ;sb310_app.c: 357: AdcConfig.AdcIntEnabled = ((UINT8)(0));
  6947  0F7D  01D1               	clrf	App_MainTask@AdcConfig+5
  6948                           
  6949                           ;sb310_app.c: 358: AdcConfig.AdcNegRef = ((UINT8)(0));
  6950  0F7E  01CF               	clrf	App_MainTask@AdcConfig+3
  6951                           
  6952                           ;sb310_app.c: 359: AdcConfig.AdcPosRef = ((UINT8)(0));
  6953  0F7F  01D0               	clrf	App_MainTask@AdcConfig+4
  6954                           
  6955                           ;sb310_app.c: 360: AdcConfig.AdcResultFormat = ((UINT8)(1));
  6956  0F80  01CD               	clrf	App_MainTask@AdcConfig+1
  6957  0F81  0ACD               	incf	App_MainTask@AdcConfig+1,f
  6958                           
  6959                           ;sb310_app.c: 361: AdcConfig.AdcEnable = ((UINT8)(1));
  6960  0F82  01CC               	clrf	App_MainTask@AdcConfig
  6961  0F83  0ACC               	incf	App_MainTask@AdcConfig,f
  6962                           
  6963                           ;sb310_app.c: 362: Adc_InitAdcModule(&AdcConfig);
  6964  0F84  304C               	movlw	(low (App_MainTask@AdcConfig| 0))& (0+255)
  6965  0F85  318C  24C7         	fcall	_Adc_InitAdcModule
  6966                           
  6967                           ;sb310_app.c: 363: break;
  6968  0F87  0008               	return
  6969  0F88                     l4627:	
  6970                           ;sb310_app.c: 366: case RunningState:
  6971                           
  6972                           
  6973                           ;sb310_app.c: 368: SonarMeasure();
  6974  0F88  318D  2540  318F   	fcall	_SonarMeasure
  6975                           
  6976                           ;sb310_app.c: 370: AppSm();
  6977  0F8B  318B  231D         	fcall	_AppSm
  6978                           
  6979                           ;sb310_app.c: 376: }
  6980                           
  6981                           ;sb310_app.c: 375: break;
  6982                           
  6983                           ;sb310_app.c: 374: default:
  6984                           
  6985                           ;sb310_app.c: 371: break;
  6986  0F8D  0008               	return
  6987  0F8E                     l4631:	
  6988  0F8E  0020               	movlb	0	; select bank0
  6989  0F8F  086D               	movf	_SystemState,w
  6990                           
  6991                           ; Switch size 1, requested type "space"
  6992                           ; Number of cases is 2, Range of values is 0 to 1
  6993                           ; switch strategies available:
  6994                           ; Name         Instructions Cycles
  6995                           ; simple_byte            7     4 (average)
  6996                           ; direct_byte           10     6 (fixed)
  6997                           ; jumptable            260     6 (fixed)
  6998                           ;	Chosen strategy is simple_byte
  6999  0F90  3A00               	xorlw	0	; case 0
  7000  0F91  1903               	skipnz
  7001  0F92  2F52               	goto	l961
  7002  0F93  3A01               	xorlw	1	; case 1
  7003  0F94  1903               	skipnz
  7004  0F95  2F88               	goto	l4627
  7005  0F96  2F97               	goto	l965
  7006  0F97                     l965:	
  7007  0F97  0008               	return
  7008  0F98                     __end_of_App_MainTask:	
  7009                           
  7010                           	psect	text18
  7011  0BA1                     __ptext18:	
  7012 ;; *************** function _Led_MainTask *****************
  7013 ;; Defined at:
  7014 ;;		line 122 in file "../../../Framework/MercuryFwk/Source/c/03_Sml/02_Ssl/led.c"
  7015 ;; Parameters:    Size  Location     Type
  7016 ;;  Options         1   30[BANK0 ] unsigned char 
  7017 ;; Auto vars:     Size  Location     Type
  7018 ;;		None
  7019 ;; Return value:  Size  Location     Type
  7020 ;;                  1    wreg      void 
  7021 ;; Registers used:
  7022 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7023 ;; Tracked objects:
  7024 ;;		On entry : 0/0
  7025 ;;		On exit  : 0/0
  7026 ;;		Unchanged: 0/0
  7027 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7028 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7029 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7030 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7031 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7032 ;;Total ram usage:        5 bytes
  7033 ;; Hardware stack levels used:    1
  7034 ;; Hardware stack levels required when called:    6
  7035 ;; This function calls:
  7036 ;;		_LedStateMachine
  7037 ;;		_SetLedBehavSts
  7038 ;; This function is called by:
  7039 ;;		_InitializeTasks
  7040 ;;		_ScheduleTasks
  7041 ;; This function uses a non-reentrant model
  7042 ;;
  7043                           
  7044                           
  7045                           ;psect for function _Led_MainTask
  7046  0BA1                     _Led_MainTask:	
  7047                           
  7048                           ;led.c: 124: switch (SystemState)
  7049                           
  7050                           ;incstack = 0
  7051                           ; Regs used in _Led_MainTask: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  7052  0BA1  2BC6               	goto	l4603
  7053  0BA2                     l649:	
  7054                           ;led.c: 125: {
  7055                           ;led.c: 127: case InitializationState:
  7056                           
  7057                           
  7058                           ;led.c: 129: TRISCbits.TRISC1 = ((UINT8)(0));
  7059  0BA2  0021               	movlb	1	; select bank1
  7060  0BA3  108E               	bcf	14,1	;volatile
  7061                           
  7062                           ;led.c: 130: LATCbits.LATC1 = ((UINT8)(0));
  7063  0BA4  0022               	movlb	2	; select bank2
  7064  0BA5  108E               	bcf	14,1	;volatile
  7065                           
  7066                           ;led.c: 132: SetLedBehavSts(((UINT8)(1)));
  7067  0BA6  3001               	movlw	1
  7068  0BA7  318C  24FE         	fcall	_SetLedBehavSts
  7069                           
  7070                           ;led.c: 133: break;
  7071  0BA9  0008               	return
  7072  0BAA                     l4599:	
  7073                           ;led.c: 136: case RunningState:
  7074                           
  7075                           
  7076                           ;led.c: 138: LATCbits.LATC1 = LedStateMachine(1u,&Led1Sts,&Led1Blink,&Led1Pulse);
  7077  0BAA  30EE               	movlw	(low (_Led1Sts| 0))& (0+255)
  7078  0BAB  0020               	movlb	0	; select bank0
  7079  0BAC  00BF               	movwf	??_Led_MainTask
  7080  0BAD  083F               	movf	??_Led_MainTask,w
  7081  0BAE  00AB               	movwf	LedStateMachine@LedSts
  7082  0BAF  30CD               	movlw	(low (_Led1Blink| 0))& (0+255)
  7083  0BB0  00C0               	movwf	??_Led_MainTask+1
  7084  0BB1  0840               	movf	??_Led_MainTask+1,w
  7085  0BB2  00AC               	movwf	LedStateMachine@LedBlink
  7086  0BB3  30D6               	movlw	(low (_Led1Pulse| 0))& (0+255)
  7087  0BB4  00C1               	movwf	??_Led_MainTask+2
  7088  0BB5  0841               	movf	??_Led_MainTask+2,w
  7089  0BB6  00AD               	movwf	LedStateMachine@LedPulse
  7090  0BB7  3001               	movlw	1
  7091  0BB8  318C  2461         	fcall	_LedStateMachine
  7092  0BBA  0020               	movlb	0	; select bank0
  7093  0BBB  00C2               	movwf	??_Led_MainTask+3
  7094  0BBC  0DC2               	rlf	??_Led_MainTask+3,f
  7095  0BBD  0022               	movlb	2	; select bank2
  7096  0BBE  080E               	movf	14,w	;volatile
  7097  0BBF  0020               	movlb	0	; select bank0
  7098  0BC0  0642               	xorwf	??_Led_MainTask+3,w
  7099  0BC1  39FD               	andlw	-3
  7100  0BC2  0642               	xorwf	??_Led_MainTask+3,w
  7101  0BC3  0022               	movlb	2	; select bank2
  7102  0BC4  008E               	movwf	14	;volatile
  7103                           
  7104                           ;led.c: 144: }
  7105                           
  7106                           ;led.c: 143: break;
  7107                           
  7108                           ;led.c: 142: default:
  7109                           
  7110                           ;led.c: 139: break;
  7111  0BC5  0008               	return
  7112  0BC6                     l4603:	
  7113  0BC6  0020               	movlb	0	; select bank0
  7114  0BC7  086D               	movf	_SystemState,w
  7115                           
  7116                           ; Switch size 1, requested type "space"
  7117                           ; Number of cases is 2, Range of values is 0 to 1
  7118                           ; switch strategies available:
  7119                           ; Name         Instructions Cycles
  7120                           ; simple_byte            7     4 (average)
  7121                           ; direct_byte           10     6 (fixed)
  7122                           ; jumptable            260     6 (fixed)
  7123                           ;	Chosen strategy is simple_byte
  7124  0BC8  3A00               	xorlw	0	; case 0
  7125  0BC9  1903               	skipnz
  7126  0BCA  2BA2               	goto	l649
  7127  0BCB  3A01               	xorlw	1	; case 1
  7128  0BCC  1903               	skipnz
  7129  0BCD  2BAA               	goto	l4599
  7130  0BCE  2BCF               	goto	l653
  7131  0BCF                     l653:	
  7132  0BCF  0008               	return
  7133  0BD0                     __end_of_Led_MainTask:	
  7134                           
  7135                           	psect	text19
  7136  0992                     __ptext19:	
  7137 ;; *************** function _I2cSlv_MainTask *****************
  7138 ;; Defined at:
  7139 ;;		line 109 in file "../../../Framework/MercuryFwk/Source/c/03_Sml/01_Pml/01_SlvI2c/i2c_slv.c"
  7140 ;; Parameters:    Size  Location     Type
  7141 ;;  Options         1   30[BANK0 ] unsigned char 
  7142 ;; Auto vars:     Size  Location     Type
  7143 ;;		None
  7144 ;; Return value:  Size  Location     Type
  7145 ;;                  1    wreg      void 
  7146 ;; Registers used:
  7147 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7148 ;; Tracked objects:
  7149 ;;		On entry : 0/0
  7150 ;;		On exit  : 0/0
  7151 ;;		Unchanged: 0/0
  7152 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7153 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7154 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7155 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7156 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7157 ;;Total ram usage:        1 bytes
  7158 ;; Hardware stack levels used:    1
  7159 ;; Hardware stack levels required when called:    5
  7160 ;; This function calls:
  7161 ;;		_I2cSlv_I2cDrvHandle
  7162 ;;		_I2c_InitI2cModule
  7163 ;;		_I2c_SetConfig
  7164 ;; This function is called by:
  7165 ;;		_InitializeTasks
  7166 ;;		_ScheduleTasks
  7167 ;; This function uses a non-reentrant model
  7168 ;;
  7169                           
  7170                           
  7171                           ;psect for function _I2cSlv_MainTask
  7172  0992                     _I2cSlv_MainTask:	
  7173                           
  7174                           ;i2c_slv.c: 111: switch (SystemState)
  7175                           
  7176                           ;incstack = 0
  7177                           ; Regs used in _I2cSlv_MainTask: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  7178  0992  299D               	goto	l4593
  7179  0993                     l4585:	
  7180                           ;i2c_slv.c: 112: {
  7181                           ;i2c_slv.c: 114: case InitializationState:
  7182                           
  7183                           
  7184                           ;i2c_slv.c: 116: I2c_SetConfig();
  7185  0993  3189  217E  3189   	fcall	_I2c_SetConfig
  7186                           
  7187                           ;i2c_slv.c: 118: I2c_InitI2cModule(&I2cConfig);
  7188  0996  30C2               	movlw	(low (_I2cConfig| 0))& (0+255)
  7189  0997  3183  23FC         	fcall	_I2c_InitI2cModule
  7190                           
  7191                           ;i2c_slv.c: 119: break;
  7192  0999  0008               	return
  7193  099A                     l4589:	
  7194                           ;i2c_slv.c: 122: case RunningState:
  7195                           
  7196                           
  7197                           ;i2c_slv.c: 124: I2cSlv_I2cDrvHandle();
  7198  099A  3186  2679         	fcall	_I2cSlv_I2cDrvHandle
  7199                           
  7200                           ;i2c_slv.c: 130: }
  7201                           
  7202                           ;i2c_slv.c: 129: break;
  7203                           
  7204                           ;i2c_slv.c: 128: default:
  7205                           
  7206                           ;i2c_slv.c: 125: break;
  7207  099C  0008               	return
  7208  099D                     l4593:	
  7209  099D  0020               	movlb	0	; select bank0
  7210  099E  086D               	movf	_SystemState,w
  7211                           
  7212                           ; Switch size 1, requested type "space"
  7213                           ; Number of cases is 2, Range of values is 0 to 1
  7214                           ; switch strategies available:
  7215                           ; Name         Instructions Cycles
  7216                           ; simple_byte            7     4 (average)
  7217                           ; direct_byte           10     6 (fixed)
  7218                           ; jumptable            260     6 (fixed)
  7219                           ;	Chosen strategy is simple_byte
  7220  099F  3A00               	xorlw	0	; case 0
  7221  09A0  1903               	skipnz
  7222  09A1  2993               	goto	l4585
  7223  09A2  3A01               	xorlw	1	; case 1
  7224  09A3  1903               	skipnz
  7225  09A4  299A               	goto	l4589
  7226  09A5  29A6               	goto	l589
  7227  09A6                     l589:	
  7228  09A6  0008               	return
  7229  09A7                     __end_of_I2cSlv_MainTask:	
  7230                           
  7231                           	psect	text20
  7232  0E77                     __ptext20:	
  7233 ;; *************** function _SnrDrv_GetDistSm *****************
  7234 ;; Defined at:
  7235 ;;		line 116 in file "../../../Framework/MercuryFwk/Source/c/01_Hal/02_Drv/sonar_drv.c"
  7236 ;; Parameters:    Size  Location     Type
  7237 ;;  Options         1   30[BANK0 ] unsigned char 
  7238 ;; Auto vars:     Size  Location     Type
  7239 ;;		None
  7240 ;; Return value:  Size  Location     Type
  7241 ;;                  1    wreg      void 
  7242 ;; Registers used:
  7243 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7244 ;; Tracked objects:
  7245 ;;		On entry : 0/0
  7246 ;;		On exit  : 0/0
  7247 ;;		Unchanged: 0/0
  7248 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7249 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7250 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7251 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7252 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7253 ;;Total ram usage:        2 bytes
  7254 ;; Hardware stack levels used:    1
  7255 ;; Hardware stack levels required when called:    4
  7256 ;; This function calls:
  7257 ;;		_GenerateEvt
  7258 ;;		_ReceiveEvt
  7259 ;;		_SnrInitSonar
  7260 ;; This function is called by:
  7261 ;;		_InitializeTasks
  7262 ;;		_ScheduleTasks
  7263 ;; This function uses a non-reentrant model
  7264 ;;
  7265                           
  7266                           
  7267                           ;psect for function _SnrDrv_GetDistSm
  7268  0E77                     _SnrDrv_GetDistSm:	
  7269                           
  7270                           ;sonar_drv.c: 118: static SonarMeasStateType SonarMeasState = Snr_InitSonar;
  7271                           ;sonar_drv.c: 119: static UINT16 Counter = 0;
  7272                           ;sonar_drv.c: 121: switch (SonarMeasState)
  7273                           
  7274                           ;incstack = 0
  7275                           ; Regs used in _SnrDrv_GetDistSm: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  7276  0E77  2EC6               	goto	l4563
  7277  0E78                     l4533:	
  7278                           ;sonar_drv.c: 122: {
  7279                           ;sonar_drv.c: 123: case Snr_InitSonar:
  7280                           
  7281                           
  7282                           ;sonar_drv.c: 125: SnrInitSonar();
  7283  0E78  3188  2084         	fcall	_SnrInitSonar
  7284                           
  7285                           ;sonar_drv.c: 127: SonarMeasState = Snr_WaitRequest;
  7286  0E7A  0021               	movlb	1	; select bank1
  7287  0E7B  01BE               	clrf	SnrDrv_GetDistSm@SonarMeasState^(0+128)
  7288  0E7C  0ABE               	incf	SnrDrv_GetDistSm@SonarMeasState^(0+128),f
  7289                           
  7290                           ;sonar_drv.c: 128: break;
  7291  0E7D  0008               	return
  7292  0E7E                     l4537:	
  7293                           ;sonar_drv.c: 130: case Snr_WaitRequest:
  7294                           
  7295                           
  7296                           ;sonar_drv.c: 132: if (ReceiveEvt(&SonarStartMeasure))
  7297  0E7E  30EA               	movlw	(low (_SonarStartMeasure| 0))& (0+255)
  7298  0E7F  318A  228E  318E   	fcall	_ReceiveEvt
  7299  0E82  3A00               	xorlw	0
  7300  0E83  1903               	skipnz
  7301  0E84  0008               	return
  7302                           
  7303                           ;sonar_drv.c: 133: {
  7304                           ;sonar_drv.c: 135: Counter = 0;
  7305  0E85  0021               	movlb	1	; select bank1
  7306  0E86  01AE               	clrf	SnrDrv_GetDistSm@Counter^(0+128)
  7307  0E87  01AF               	clrf	(SnrDrv_GetDistSm@Counter+1)^(0+128)
  7308                           
  7309                           ;sonar_drv.c: 137: SonarMeasState = Snr_SetTrigger;
  7310  0E88  3002               	movlw	2
  7311  0E89  0020               	movlb	0	; select bank0
  7312  0E8A  00BF               	movwf	??_SnrDrv_GetDistSm
  7313  0E8B  083F               	movf	??_SnrDrv_GetDistSm,w
  7314  0E8C  0021               	movlb	1	; select bank1
  7315  0E8D  00BE               	movwf	SnrDrv_GetDistSm@SonarMeasState^(0+128)
  7316                           
  7317                           ;sonar_drv.c: 138: }
  7318                           ;sonar_drv.c: 139: break;
  7319  0E8E  0008               	return
  7320  0E8F                     l301:	
  7321                           ;sonar_drv.c: 141: case Snr_SetTrigger:
  7322                           
  7323                           
  7324                           ;sonar_drv.c: 143: LATCbits.LATC7 = ((UINT8)(1));
  7325  0E8F  0022               	movlb	2	; select bank2
  7326  0E90  178E               	bsf	14,7	;volatile
  7327                           
  7328                           ;sonar_drv.c: 145: SonarMeasState = Snr_ClearTrigger;
  7329  0E91  3003               	movlw	3
  7330  0E92  0020               	movlb	0	; select bank0
  7331  0E93  00BF               	movwf	??_SnrDrv_GetDistSm
  7332  0E94  083F               	movf	??_SnrDrv_GetDistSm,w
  7333  0E95  0021               	movlb	1	; select bank1
  7334  0E96  00BE               	movwf	SnrDrv_GetDistSm@SonarMeasState^(0+128)
  7335                           
  7336                           ;sonar_drv.c: 146: break;
  7337  0E97  0008               	return
  7338  0E98                     l302:	
  7339                           ;sonar_drv.c: 148: case Snr_ClearTrigger:
  7340                           
  7341                           
  7342                           ;sonar_drv.c: 150: LATCbits.LATC7 = ((UINT8)(0));
  7343  0E98  0022               	movlb	2	; select bank2
  7344  0E99  138E               	bcf	14,7	;volatile
  7345                           
  7346                           ;sonar_drv.c: 152: SonarMeasState = Snr_GetResult;
  7347  0E9A  3004               	movlw	4
  7348  0E9B  0020               	movlb	0	; select bank0
  7349  0E9C  00BF               	movwf	??_SnrDrv_GetDistSm
  7350  0E9D  083F               	movf	??_SnrDrv_GetDistSm,w
  7351  0E9E  0021               	movlb	1	; select bank1
  7352  0E9F  00BE               	movwf	SnrDrv_GetDistSm@SonarMeasState^(0+128)
  7353                           
  7354                           ;sonar_drv.c: 153: break;
  7355  0EA0  0008               	return
  7356  0EA1                     l4547:	
  7357                           ;sonar_drv.c: 155: case Snr_GetResult:
  7358                           
  7359                           
  7360                           ;sonar_drv.c: 157: Counter++;
  7361  0EA1  3001               	movlw	1
  7362  0EA2  07AE               	addwf	SnrDrv_GetDistSm@Counter^(0+128),f
  7363  0EA3  3000               	movlw	0
  7364  0EA4  3DAF               	addwfc	(SnrDrv_GetDistSm@Counter+1)^(0+128),f
  7365                           
  7366                           ;sonar_drv.c: 159: if (ReceiveEvt(&SonarEchoCountReady))
  7367  0EA5  30E6               	movlw	(low (_SonarEchoCountReady| 0))& (0+255)
  7368  0EA6  318A  228E  318E   	fcall	_ReceiveEvt
  7369  0EA9  3A00               	xorlw	0
  7370  0EAA  1903               	skipnz
  7371  0EAB  2EBB               	goto	l4557
  7372                           
  7373                           ;sonar_drv.c: 160: {
  7374                           ;sonar_drv.c: 162: DistanceCm = (1u * EchoPulseCount);
  7375  0EAC  0021               	movlb	1	; select bank1
  7376  0EAD  085D               	movf	(_EchoPulseCount+1)^(0+128),w
  7377  0EAE  0020               	movlb	0	; select bank0
  7378  0EAF  00E6               	movwf	_DistanceCm+1
  7379  0EB0  0021               	movlb	1	; select bank1
  7380  0EB1  085C               	movf	_EchoPulseCount^(0+128),w
  7381  0EB2  0020               	movlb	0	; select bank0
  7382  0EB3  00E5               	movwf	_DistanceCm
  7383                           
  7384                           ;sonar_drv.c: 164: GenerateEvt(&SonarMeasureComplete);
  7385  0EB4  30E8               	movlw	(low (_SonarMeasureComplete| 0))& (0+255)
  7386  0EB5  318A  22AF         	fcall	_GenerateEvt
  7387                           
  7388                           ;sonar_drv.c: 166: SonarMeasState = Snr_WaitRequest;
  7389  0EB7  0021               	movlb	1	; select bank1
  7390  0EB8  01BE               	clrf	SnrDrv_GetDistSm@SonarMeasState^(0+128)
  7391  0EB9  0ABE               	incf	SnrDrv_GetDistSm@SonarMeasState^(0+128),f
  7392                           
  7393                           ;sonar_drv.c: 167: }
  7394  0EBA  0008               	return
  7395  0EBB                     l4557:	
  7396                           
  7397                           ;sonar_drv.c: 168: else if (Counter >= ((UINT16)(1000)/((UINT16)(1))))
  7398  0EBB  3003               	movlw	3
  7399  0EBC  0021               	movlb	1	; select bank1
  7400  0EBD  022F               	subwf	(SnrDrv_GetDistSm@Counter+1)^(0+128),w
  7401  0EBE  30E8               	movlw	232
  7402  0EBF  1903               	skipnz
  7403  0EC0  022E               	subwf	SnrDrv_GetDistSm@Counter^(0+128),w
  7404  0EC1  1C03               	skipc
  7405  0EC2  0008               	return
  7406                           
  7407                           ;sonar_drv.c: 169: {
  7408                           ;sonar_drv.c: 171: SonarMeasState = Snr_WaitRequest;
  7409  0EC3  01BE               	clrf	SnrDrv_GetDistSm@SonarMeasState^(0+128)
  7410  0EC4  0ABE               	incf	SnrDrv_GetDistSm@SonarMeasState^(0+128),f
  7411                           
  7412                           ;sonar_drv.c: 177: }
  7413                           
  7414                           ;sonar_drv.c: 176: break;
  7415                           
  7416                           ;sonar_drv.c: 175: default:
  7417                           
  7418                           ;sonar_drv.c: 172: }
  7419                           ;sonar_drv.c: 173: break;
  7420  0EC5  0008               	return
  7421  0EC6                     l4563:	
  7422  0EC6  0021               	movlb	1	; select bank1
  7423  0EC7  083E               	movf	SnrDrv_GetDistSm@SonarMeasState^(0+128),w
  7424                           
  7425                           ; Switch size 1, requested type "space"
  7426                           ; Number of cases is 5, Range of values is 0 to 4
  7427                           ; switch strategies available:
  7428                           ; Name         Instructions Cycles
  7429                           ; direct_byte           16     6 (fixed)
  7430                           ; simple_byte           16     9 (average)
  7431                           ; jumptable            260     6 (fixed)
  7432                           ;	Chosen strategy is direct_byte
  7433  0EC8  0084               	movwf	4
  7434  0EC9  3005               	movlw	5
  7435  0ECA  0204               	subwf	4,w
  7436  0ECB  1803               	skipnc
  7437  0ECC  0008               	return
  7438  0ECD  3188               	movlp	high S4743
  7439  0ECE  3504               	lslf	4,w
  7440  0ECF  3E00               	addlw	low S4743
  7441  0ED0  0082               	movwf	2
  7442  0ED1  0008               	return
  7443  0ED2                     __end_of_SnrDrv_GetDistSm:	
  7444                           
  7445                           	psect	swtext1
  7446  0800                     __pswtext1:	
  7447  0800                     S4743:	
  7448  0800  318E  2E78         	ljmp	l4533
  7449  0802  318E  2E7E         	ljmp	l4537
  7450  0804  318E  2E8F         	ljmp	l301
  7451  0806  318E  2E98         	ljmp	l302
  7452  0808  318E  2EA1         	ljmp	l4547
  7453                           
  7454                           	psect	text21
  7455  01A0                     __ptext21:	
  7456 ;; *************** function _I2c_DataReceiveSm *****************
  7457 ;; Defined at:
  7458 ;;		line 297 in file "../../../Framework/MercuryFwk/Source/c/01_Hal/02_Drv/i2c_slv_drv.c"
  7459 ;; Parameters:    Size  Location     Type
  7460 ;;  Options         1   30[BANK0 ] unsigned char 
  7461 ;; Auto vars:     Size  Location     Type
  7462 ;;  Index           1   38[BANK0 ] unsigned char 
  7463 ;; Return value:  Size  Location     Type
  7464 ;;                  1    wreg      void 
  7465 ;; Registers used:
  7466 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7467 ;; Tracked objects:
  7468 ;;		On entry : 0/0
  7469 ;;		On exit  : 0/0
  7470 ;;		Unchanged: 0/0
  7471 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7472 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7473 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7474 ;;      Temps:          0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7475 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7476 ;;Total ram usage:        9 bytes
  7477 ;; Hardware stack levels used:    1
  7478 ;; Hardware stack levels required when called:    4
  7479 ;; This function calls:
  7480 ;;		_CheckAckStatus
  7481 ;;		_CheckByteStatus
  7482 ;;		_CheckStopBitStatus
  7483 ;;		_ClearRxBuffer
  7484 ;;		_ClearTxBuffer
  7485 ;;		_GenerateEvt
  7486 ;;		_ReceiveEvt
  7487 ;; This function is called by:
  7488 ;;		_InitializeTasks
  7489 ;;		_ScheduleTasks
  7490 ;; This function uses a non-reentrant model
  7491 ;;
  7492                           
  7493                           
  7494                           ;psect for function _I2c_DataReceiveSm
  7495  01A0                     _I2c_DataReceiveSm:	
  7496                           
  7497                           ;i2c_slv_drv.c: 300: static I2cRxStateType I2cRxState = CheckRxByte;
  7498                           ;i2c_slv_drv.c: 301: static UINT8 I2cRxAddress;
  7499                           ;i2c_slv_drv.c: 302: static UINT8 I2cRxFlag = ((UINT8)(0));
  7500                           ;i2c_slv_drv.c: 303: static UINT8 OpType;
  7501                           ;i2c_slv_drv.c: 304: static UINT8 RxCounter = 0;
  7502                           ;i2c_slv_drv.c: 305: static UINT8 TxCounter = 0;
  7503                           ;i2c_slv_drv.c: 306: UINT8 Index;
  7504                           ;i2c_slv_drv.c: 308: switch (I2cRxState)
  7505                           
  7506                           ;incstack = 0
  7507                           ; Regs used in _I2c_DataReceiveSm: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  7508  01A0  2A76               	goto	l4525
  7509  01A1                     l4449:	
  7510                           ;i2c_slv_drv.c: 309: {
  7511                           ;i2c_slv_drv.c: 310: case CheckRxByte:
  7512                           
  7513                           
  7514                           ;i2c_slv_drv.c: 312: if (ReceiveEvt(&I2cNewTxNotification))
  7515  01A1  30E0               	movlw	(low (_I2cNewTxNotification| 0))& (0+255)
  7516  01A2  318A  228E  3181   	fcall	_ReceiveEvt
  7517  01A5  3A00               	xorlw	0
  7518  01A6  1903               	skipnz
  7519  01A7  0008               	return
  7520                           
  7521                           ;i2c_slv_drv.c: 313: {
  7522                           ;i2c_slv_drv.c: 315: if (CheckByteStatus() == ((UINT8)(0)))
  7523  01A8  3188  20BB  3181   	fcall	_CheckByteStatus
  7524  01AB  3A00               	xorlw	0
  7525  01AC  1D03               	skipz
  7526  01AD  29B4               	goto	l4455
  7527                           
  7528                           ;i2c_slv_drv.c: 316: {
  7529                           ;i2c_slv_drv.c: 318: I2cRxFlag = ((UINT8)(1));
  7530  01AE  0020               	movlb	0	; select bank0
  7531  01AF  01E8               	clrf	I2c_DataReceiveSm@I2cRxFlag
  7532  01B0  0AE8               	incf	I2c_DataReceiveSm@I2cRxFlag,f
  7533                           
  7534                           ;i2c_slv_drv.c: 320: I2cRxState = StoreAddrByte;
  7535  01B1  01E9               	clrf	I2c_DataReceiveSm@I2cRxState
  7536  01B2  0AE9               	incf	I2c_DataReceiveSm@I2cRxState,f
  7537                           
  7538                           ;i2c_slv_drv.c: 321: }
  7539  01B3  0008               	return
  7540  01B4                     l4455:	
  7541                           
  7542                           ;i2c_slv_drv.c: 322: else if ((CheckByteStatus() == ((UINT8)(1))) && (I2cRxFlag == ((UIN
      +                          T8)(1))))
  7543  01B4  3188  20BB  3181   	fcall	_CheckByteStatus
  7544  01B7  3A01               	xorlw	1
  7545  01B8  1D03               	skipz
  7546  01B9  0008               	return
  7547  01BA  0020               	movlb	0	; select bank0
  7548  01BB  0368               	decf	I2c_DataReceiveSm@I2cRxFlag,w
  7549  01BC  1D03               	btfss	3,2
  7550  01BD  0008               	return
  7551                           
  7552                           ;i2c_slv_drv.c: 323: {
  7553                           ;i2c_slv_drv.c: 324: if (OpType == ((UINT8)(0)))
  7554  01BE  086A               	movf	I2c_DataReceiveSm@OpType,w
  7555  01BF  1D03               	btfss	3,2
  7556  01C0  29C6               	goto	l4463
  7557                           
  7558                           ;i2c_slv_drv.c: 325: {
  7559                           ;i2c_slv_drv.c: 327: I2cRxState = HandleWrite;
  7560  01C1  3002               	movlw	2
  7561  01C2  00BF               	movwf	??_I2c_DataReceiveSm
  7562  01C3  083F               	movf	??_I2c_DataReceiveSm,w
  7563  01C4  00E9               	movwf	I2c_DataReceiveSm@I2cRxState
  7564                           
  7565                           ;i2c_slv_drv.c: 328: }
  7566  01C5  0008               	return
  7567  01C6                     l4463:	
  7568                           
  7569                           ;i2c_slv_drv.c: 329: else
  7570                           ;i2c_slv_drv.c: 330: {
  7571                           ;i2c_slv_drv.c: 332: I2cRxState = HandleRead;
  7572  01C6  3003               	movlw	3
  7573  01C7  00BF               	movwf	??_I2c_DataReceiveSm
  7574  01C8  083F               	movf	??_I2c_DataReceiveSm,w
  7575  01C9  00E9               	movwf	I2c_DataReceiveSm@I2cRxState
  7576                           
  7577                           ;i2c_slv_drv.c: 338: }
  7578                           ;i2c_slv_drv.c: 339: }
  7579                           ;i2c_slv_drv.c: 340: break;
  7580                           
  7581                           ;i2c_slv_drv.c: 335: else
  7582                           ;i2c_slv_drv.c: 336: {
  7583                           
  7584                           ;i2c_slv_drv.c: 333: }
  7585                           ;i2c_slv_drv.c: 334: }
  7586  01CA  0008               	return
  7587  01CB                     l4465:	
  7588                           ;i2c_slv_drv.c: 342: case StoreAddrByte:
  7589                           
  7590                           
  7591                           ;i2c_slv_drv.c: 344: I2cRxAddress = SSP1BUF;
  7592  01CB  0024               	movlb	4	; select bank4
  7593  01CC  0811               	movf	17,w	;volatile
  7594  01CD  0020               	movlb	0	; select bank0
  7595  01CE  00BF               	movwf	??_I2c_DataReceiveSm
  7596  01CF  083F               	movf	??_I2c_DataReceiveSm,w
  7597  01D0  00E7               	movwf	I2c_DataReceiveSm@I2cRxAddress
  7598                           
  7599                           ;i2c_slv_drv.c: 346: I2cRxAddress = (I2cRxAddress >> ((UINT8)(1)));
  7600  01D1  3667               	lsrf	I2c_DataReceiveSm@I2cRxAddress,w
  7601  01D2  00BF               	movwf	??_I2c_DataReceiveSm
  7602  01D3  083F               	movf	??_I2c_DataReceiveSm,w
  7603  01D4  00E7               	movwf	I2c_DataReceiveSm@I2cRxAddress
  7604                           
  7605                           ;i2c_slv_drv.c: 348: OpType = (SSP1BUF & ((UINT8)(0x01)));
  7606  01D5  0024               	movlb	4	; select bank4
  7607  01D6  0811               	movf	17,w	;volatile
  7608  01D7  3901               	andlw	1
  7609  01D8  0020               	movlb	0	; select bank0
  7610  01D9  00BF               	movwf	??_I2c_DataReceiveSm
  7611  01DA  083F               	movf	??_I2c_DataReceiveSm,w
  7612  01DB  00EA               	movwf	I2c_DataReceiveSm@OpType
  7613                           
  7614                           ;i2c_slv_drv.c: 350: if (OpType == ((UINT8)(1)))
  7615  01DC  036A               	decf	I2c_DataReceiveSm@OpType,w
  7616  01DD  1D03               	btfss	3,2
  7617  01DE  29EC               	goto	l4477
  7618                           
  7619                           ;i2c_slv_drv.c: 351: {
  7620                           ;i2c_slv_drv.c: 353: SSP1BUF = I2cTxBuffer[TxCounter];
  7621  01DF  086C               	movf	I2c_DataReceiveSm@TxCounter,w
  7622  01E0  3EA0               	addlw	(low (_I2cTxBuffer| (0+512)))& (0+255)
  7623  01E1  0086               	movwf	6
  7624  01E2  3002               	movlw	2	; select bank5/6
  7625  01E3  0087               	movwf	7
  7626  01E4  0801               	movf	1,w
  7627  01E5  0024               	movlb	4	; select bank4
  7628  01E6  0091               	movwf	17	;volatile
  7629                           
  7630                           ;i2c_slv_drv.c: 355: TxCounter++;
  7631  01E7  3001               	movlw	1
  7632  01E8  0020               	movlb	0	; select bank0
  7633  01E9  00BF               	movwf	??_I2c_DataReceiveSm
  7634  01EA  083F               	movf	??_I2c_DataReceiveSm,w
  7635  01EB  07EC               	addwf	I2c_DataReceiveSm@TxCounter,f
  7636  01EC                     l4477:	
  7637                           ;i2c_slv_drv.c: 357: else
  7638                           ;i2c_slv_drv.c: 358: {
  7639                           
  7640                           ;i2c_slv_drv.c: 356: }
  7641                           
  7642                           
  7643                           ;i2c_slv_drv.c: 360: }
  7644                           ;i2c_slv_drv.c: 362: I2cRxState = StopClkStretch;
  7645  01EC  3004               	movlw	4
  7646  01ED  00BF               	movwf	??_I2c_DataReceiveSm
  7647  01EE  083F               	movf	??_I2c_DataReceiveSm,w
  7648  01EF  00E9               	movwf	I2c_DataReceiveSm@I2cRxState
  7649                           
  7650                           ;i2c_slv_drv.c: 363: break;
  7651  01F0  0008               	return
  7652  01F1                     l4479:	
  7653                           ;i2c_slv_drv.c: 365: case HandleWrite:
  7654                           
  7655                           
  7656                           ;i2c_slv_drv.c: 367: if (CheckStopBitStatus() == ((UINT8)(1)))
  7657  01F1  3188  20C5  3181   	fcall	_CheckStopBitStatus
  7658  01F4  3A01               	xorlw	1
  7659  01F5  1D03               	skipz
  7660  01F6  2A3C               	goto	l4503
  7661                           
  7662                           ;i2c_slv_drv.c: 368: {
  7663                           ;i2c_slv_drv.c: 370: I2cRxFlag = ((UINT8)(0));
  7664  01F7  0020               	movlb	0	; select bank0
  7665  01F8  01E8               	clrf	I2c_DataReceiveSm@I2cRxFlag
  7666                           
  7667                           ;i2c_slv_drv.c: 372: I2cPacket.Lenght = RxCounter;
  7668  01F9  30EF               	movlw	239
  7669  01FA  0086               	movwf	6
  7670  01FB  3023               	movlw	35
  7671  01FC  0087               	movwf	7
  7672  01FD  086B               	movf	I2c_DataReceiveSm@RxCounter,w
  7673  01FE  0081               	movwf	1
  7674                           
  7675                           ;i2c_slv_drv.c: 373: I2cPacket.ReadWrite = ((UINT8)(0));
  7676  01FF  309D               	movlw	157
  7677  0200  0086               	movwf	6
  7678  0201  3023               	movlw	35
  7679  0202  0087               	movwf	7
  7680  0203  3141               	addfsr 1,1
  7681  0204  0181               	clrf	1
  7682                           
  7683                           ;i2c_slv_drv.c: 374: I2cPacket.SlaveAddress = I2cRxAddress;
  7684  0205  309D               	movlw	157
  7685  0206  0086               	movwf	6
  7686  0207  3023               	movlw	35
  7687  0208  0087               	movwf	7
  7688  0209  0867               	movf	I2c_DataReceiveSm@I2cRxAddress,w
  7689  020A  3FC0               	movwi [0]fsr1
  7690                           
  7691                           ;i2c_slv_drv.c: 375: for (Index = 0; Index < ((UINT8)(80)); Index++)
  7692  020B  01C6               	clrf	I2c_DataReceiveSm@Index
  7693  020C  3050               	movlw	80
  7694  020D  0246               	subwf	I2c_DataReceiveSm@Index,w
  7695  020E  1803               	btfsc	3,0
  7696  020F  2A32               	goto	l4497
  7697  0210                     l4491:	
  7698                           
  7699                           ;i2c_slv_drv.c: 376: {
  7700                           ;i2c_slv_drv.c: 377: I2cPacket.Buffer[Index] = I2cRxBuffer[Index];
  7701  0210  0846               	movf	I2c_DataReceiveSm@Index,w
  7702  0211  3E20               	addlw	(low (_I2cRxBuffer| (0+768)))& (0+255)
  7703  0212  0086               	movwf	6
  7704  0213  3003               	movlw	3	; select bank6/7
  7705  0214  0087               	movwf	7
  7706  0215  0801               	movf	1,w
  7707  0216  00BF               	movwf	??_I2c_DataReceiveSm
  7708  0217  0846               	movf	I2c_DataReceiveSm@Index,w
  7709  0218  00C0               	movwf	??_I2c_DataReceiveSm+1
  7710  0219  01C1               	clrf	??_I2c_DataReceiveSm+2
  7711  021A  309F               	movlw	159
  7712  021B  00C2               	movwf	??_I2c_DataReceiveSm+3
  7713  021C  3023               	movlw	35
  7714  021D  00C3               	movwf	??_I2c_DataReceiveSm+4
  7715  021E  0840               	movf	??_I2c_DataReceiveSm+1,w
  7716  021F  0742               	addwf	??_I2c_DataReceiveSm+3,w
  7717  0220  00C4               	movwf	??_I2c_DataReceiveSm+5
  7718  0221  0841               	movf	??_I2c_DataReceiveSm+2,w
  7719  0222  3D43               	addwfc	??_I2c_DataReceiveSm+4,w
  7720  0223  00C5               	movwf	??_I2c_DataReceiveSm+6
  7721  0224  0844               	movf	??_I2c_DataReceiveSm+5,w
  7722  0225  0086               	movwf	6
  7723  0226  0845               	movf	??_I2c_DataReceiveSm+6,w
  7724  0227  0087               	movwf	7
  7725  0228  083F               	movf	??_I2c_DataReceiveSm,w
  7726  0229  0081               	movwf	1
  7727  022A  3001               	movlw	1
  7728  022B  00BF               	movwf	??_I2c_DataReceiveSm
  7729  022C  083F               	movf	??_I2c_DataReceiveSm,w
  7730  022D  07C6               	addwf	I2c_DataReceiveSm@Index,f
  7731  022E  3050               	movlw	80
  7732  022F  0246               	subwf	I2c_DataReceiveSm@Index,w
  7733  0230  1C03               	skipc
  7734  0231  2A10               	goto	l4491
  7735  0232                     l4497:	
  7736                           
  7737                           ;i2c_slv_drv.c: 378: }
  7738                           ;i2c_slv_drv.c: 381: GenerateEvt(&I2cNewPacketNotification);
  7739  0232  30DE               	movlw	(low (_I2cNewPacketNotification| 0))& (0+255)
  7740  0233  318A  22AF  3181   	fcall	_GenerateEvt
  7741                           
  7742                           ;i2c_slv_drv.c: 384: RxCounter = 0;
  7743  0236  0020               	movlb	0	; select bank0
  7744  0237  01EB               	clrf	I2c_DataReceiveSm@RxCounter
  7745                           
  7746                           ;i2c_slv_drv.c: 386: ClearRxBuffer();
  7747  0238  3189  213A  3181   	fcall	_ClearRxBuffer
  7748                           
  7749                           ;i2c_slv_drv.c: 387: }
  7750  023B  2A4B               	goto	l4507
  7751  023C                     l4503:	
  7752                           
  7753                           ;i2c_slv_drv.c: 388: else
  7754                           ;i2c_slv_drv.c: 389: {
  7755                           ;i2c_slv_drv.c: 391: I2cRxBuffer[RxCounter] = SSP1BUF;
  7756  023C  0024               	movlb	4	; select bank4
  7757  023D  0811               	movf	17,w	;volatile
  7758  023E  0020               	movlb	0	; select bank0
  7759  023F  00BF               	movwf	??_I2c_DataReceiveSm
  7760  0240  086B               	movf	I2c_DataReceiveSm@RxCounter,w
  7761  0241  3E20               	addlw	(low (_I2cRxBuffer| (0+768)))& (0+255)
  7762  0242  0086               	movwf	6
  7763  0243  3003               	movlw	3	; select bank6/7
  7764  0244  0087               	movwf	7
  7765  0245  083F               	movf	??_I2c_DataReceiveSm,w
  7766  0246  0081               	movwf	1
  7767                           
  7768                           ;i2c_slv_drv.c: 393: RxCounter++;
  7769  0247  3001               	movlw	1
  7770  0248  00BF               	movwf	??_I2c_DataReceiveSm
  7771  0249  083F               	movf	??_I2c_DataReceiveSm,w
  7772  024A  07EB               	addwf	I2c_DataReceiveSm@RxCounter,f
  7773  024B                     l4507:	
  7774                           
  7775                           ;i2c_slv_drv.c: 394: }
  7776                           ;i2c_slv_drv.c: 396: I2cRxState = StopClkStretch;
  7777  024B  3004               	movlw	4
  7778  024C  0020               	movlb	0	; select bank0
  7779  024D  00BF               	movwf	??_I2c_DataReceiveSm
  7780  024E  083F               	movf	??_I2c_DataReceiveSm,w
  7781  024F  00E9               	movwf	I2c_DataReceiveSm@I2cRxState
  7782                           
  7783                           ;i2c_slv_drv.c: 397: break;
  7784  0250  0008               	return
  7785  0251                     l4509:	
  7786                           ;i2c_slv_drv.c: 399: case HandleRead:
  7787                           
  7788                           
  7789                           ;i2c_slv_drv.c: 401: if (CheckAckStatus() == ((UINT8)(0)))
  7790  0251  3188  20B1  3181   	fcall	_CheckAckStatus
  7791  0254  3A00               	xorlw	0
  7792  0255  1D03               	skipz
  7793  0256  2A66               	goto	l4515
  7794                           
  7795                           ;i2c_slv_drv.c: 402: {
  7796                           ;i2c_slv_drv.c: 404: SSP1BUF = I2cTxBuffer[TxCounter];
  7797  0257  0020               	movlb	0	; select bank0
  7798  0258  086C               	movf	I2c_DataReceiveSm@TxCounter,w
  7799  0259  3EA0               	addlw	(low (_I2cTxBuffer| (0+512)))& (0+255)
  7800  025A  0086               	movwf	6
  7801  025B  3002               	movlw	2	; select bank5/6
  7802  025C  0087               	movwf	7
  7803  025D  0801               	movf	1,w
  7804  025E  0024               	movlb	4	; select bank4
  7805  025F  0091               	movwf	17	;volatile
  7806                           
  7807                           ;i2c_slv_drv.c: 406: TxCounter++;
  7808  0260  3001               	movlw	1
  7809  0261  0020               	movlb	0	; select bank0
  7810  0262  00BF               	movwf	??_I2c_DataReceiveSm
  7811  0263  083F               	movf	??_I2c_DataReceiveSm,w
  7812  0264  07EC               	addwf	I2c_DataReceiveSm@TxCounter,f
  7813                           
  7814                           ;i2c_slv_drv.c: 407: }
  7815  0265  2A6B               	goto	l4519
  7816  0266                     l4515:	
  7817                           
  7818                           ;i2c_slv_drv.c: 408: else
  7819                           ;i2c_slv_drv.c: 409: {
  7820                           ;i2c_slv_drv.c: 411: TxCounter = 0;
  7821  0266  0020               	movlb	0	; select bank0
  7822  0267  01EC               	clrf	I2c_DataReceiveSm@TxCounter
  7823                           
  7824                           ;i2c_slv_drv.c: 413: I2cRxFlag = ((UINT8)(0));
  7825  0268  01E8               	clrf	I2c_DataReceiveSm@I2cRxFlag
  7826                           
  7827                           ;i2c_slv_drv.c: 415: ClearTxBuffer();
  7828  0269  3189  214A         	fcall	_ClearTxBuffer
  7829  026B                     l4519:	
  7830                           
  7831                           ;i2c_slv_drv.c: 417: }
  7832                           ;i2c_slv_drv.c: 419: I2cRxState = StopClkStretch;
  7833  026B  3004               	movlw	4
  7834  026C  0020               	movlb	0	; select bank0
  7835  026D  00BF               	movwf	??_I2c_DataReceiveSm
  7836  026E  083F               	movf	??_I2c_DataReceiveSm,w
  7837  026F  00E9               	movwf	I2c_DataReceiveSm@I2cRxState
  7838                           
  7839                           ;i2c_slv_drv.c: 420: break;
  7840  0270  0008               	return
  7841  0271                     l168:	
  7842                           ;i2c_slv_drv.c: 422: case StopClkStretch:
  7843                           
  7844                           
  7845                           ;i2c_slv_drv.c: 424: SSP1CON1bits.CKP = ((UINT8)(1));
  7846  0271  0024               	movlb	4	; select bank4
  7847  0272  1615               	bsf	21,4	;volatile
  7848                           
  7849                           ;i2c_slv_drv.c: 426: I2cRxState = CheckRxByte;
  7850  0273  0020               	movlb	0	; select bank0
  7851  0274  01E9               	clrf	I2c_DataReceiveSm@I2cRxState
  7852                           
  7853                           ;i2c_slv_drv.c: 431: }
  7854                           
  7855                           ;i2c_slv_drv.c: 430: break;
  7856                           
  7857                           ;i2c_slv_drv.c: 429: default:
  7858                           
  7859                           ;i2c_slv_drv.c: 427: break;
  7860  0275  0008               	return
  7861  0276                     l4525:	
  7862  0276  0020               	movlb	0	; select bank0
  7863  0277  0869               	movf	I2c_DataReceiveSm@I2cRxState,w
  7864                           
  7865                           ; Switch size 1, requested type "space"
  7866                           ; Number of cases is 5, Range of values is 0 to 4
  7867                           ; switch strategies available:
  7868                           ; Name         Instructions Cycles
  7869                           ; direct_byte           16     6 (fixed)
  7870                           ; simple_byte           16     9 (average)
  7871                           ; jumptable            260     6 (fixed)
  7872                           ;	Chosen strategy is direct_byte
  7873  0278  0084               	movwf	4
  7874  0279  3005               	movlw	5
  7875  027A  0204               	subwf	4,w
  7876  027B  1803               	skipnc
  7877  027C  0008               	return
  7878  027D  3188               	movlp	high S4745
  7879  027E  3504               	lslf	4,w
  7880  027F  3E0A               	addlw	low S4745
  7881  0280  0082               	movwf	2
  7882  0281  0008               	return
  7883  0282                     __end_of_I2c_DataReceiveSm:	
  7884                           
  7885                           	psect	swtext2
  7886  080A                     __pswtext2:	
  7887  080A                     S4745:	
  7888  080A  3181  29A1         	ljmp	l4449
  7889  080C  3181  29CB         	ljmp	l4465
  7890  080E  3181  29F1         	ljmp	l4479
  7891  0810  3182  2A51         	ljmp	l4509
  7892  0812  3182  2A71         	ljmp	l168
  7893                           
  7894                           	psect	text22
  7895  09A7                     __ptext22:	
  7896 ;; *************** function _Wdg_MainTask *****************
  7897 ;; Defined at:
  7898 ;;		line 73 in file "../../../Framework/MercuryFwk/Source/c/03_Sml/02_Ssl/wdg.c"
  7899 ;; Parameters:    Size  Location     Type
  7900 ;;  Options         1   30[BANK0 ] unsigned char 
  7901 ;; Auto vars:     Size  Location     Type
  7902 ;;		None
  7903 ;; Return value:  Size  Location     Type
  7904 ;;                  1    wreg      void 
  7905 ;; Registers used:
  7906 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  7907 ;; Tracked objects:
  7908 ;;		On entry : 0/0
  7909 ;;		On exit  : 0/0
  7910 ;;		Unchanged: 0/0
  7911 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7912 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7913 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7914 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7915 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7916 ;;Total ram usage:        1 bytes
  7917 ;; Hardware stack levels used:    1
  7918 ;; Hardware stack levels required when called:    4
  7919 ;; This function calls:
  7920 ;;		_Mcu_ClearWdg
  7921 ;;		_Mcu_SetWdgPeriod
  7922 ;;		_Mcu_SetWdgSts
  7923 ;; This function is called by:
  7924 ;;		_InitializeTasks
  7925 ;;		_ScheduleTasks
  7926 ;; This function uses a non-reentrant model
  7927 ;;
  7928                           
  7929                           
  7930                           ;psect for function _Wdg_MainTask
  7931  09A7                     _Wdg_MainTask:	
  7932                           
  7933                           ;wdg.c: 75: switch (SystemState)
  7934                           
  7935                           ;incstack = 0
  7936                           ; Regs used in _Wdg_MainTask: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  7937  09A7  29B3               	goto	l3643
  7938  09A8                     l3637:	
  7939                           ;wdg.c: 76: {
  7940                           ;wdg.c: 78: case InitializationState:
  7941                           
  7942                           
  7943                           ;wdg.c: 80: Mcu_SetWdgPeriod(WdgPer_2s);
  7944  09A8  300B               	movlw	11
  7945  09A9  3188  20CF  3189   	fcall	_Mcu_SetWdgPeriod
  7946                           
  7947                           ;wdg.c: 82: Mcu_SetWdgSts(((UINT8)(1)));
  7948  09AC  3001               	movlw	1
  7949  09AD  3188  2091         	fcall	_Mcu_SetWdgSts
  7950                           
  7951                           ;wdg.c: 83: break;
  7952  09AF  0008               	return
  7953  09B0                     l3639:	
  7954                           ;wdg.c: 86: case RunningState:
  7955                           
  7956                           
  7957                           ;wdg.c: 88: Mcu_ClearWdg();
  7958  09B0  3180  2002         	fcall	_Mcu_ClearWdg
  7959                           
  7960                           ;wdg.c: 94: }
  7961                           
  7962                           ;wdg.c: 93: break;
  7963                           
  7964                           ;wdg.c: 92: default:
  7965                           
  7966                           ;wdg.c: 89: break;
  7967  09B2  0008               	return
  7968  09B3                     l3643:	
  7969  09B3  0020               	movlb	0	; select bank0
  7970  09B4  086D               	movf	_SystemState,w
  7971                           
  7972                           ; Switch size 1, requested type "space"
  7973                           ; Number of cases is 2, Range of values is 0 to 1
  7974                           ; switch strategies available:
  7975                           ; Name         Instructions Cycles
  7976                           ; simple_byte            7     4 (average)
  7977                           ; direct_byte           10     6 (fixed)
  7978                           ; jumptable            260     6 (fixed)
  7979                           ;	Chosen strategy is simple_byte
  7980  09B5  3A00               	xorlw	0	; case 0
  7981  09B6  1903               	skipnz
  7982  09B7  29A8               	goto	l3637
  7983  09B8  3A01               	xorlw	1	; case 1
  7984  09B9  1903               	skipnz
  7985  09BA  29B0               	goto	l3639
  7986  09BB  29BC               	goto	l843
  7987  09BC                     l843:	
  7988  09BC  0008               	return
  7989  09BD                     __end_of_Wdg_MainTask:	
  7990                           
  7991                           	psect	text23
  7992  08CF                     __ptext23:	
  7993 ;; *************** function _Mcu_SetWdgPeriod *****************
  7994 ;; Defined at:
  7995 ;;		line 197 in file "../../../Framework/MercuryFwk/Source/c/01_Hal/02_Drv/mcu_drv.c"
  7996 ;; Parameters:    Size  Location     Type
  7997 ;;  WdgPeriod       1    wreg     enum E3675
  7998 ;; Auto vars:     Size  Location     Type
  7999 ;;  WdgPeriod       1    5[COMMON] enum E3675
  8000 ;; Return value:  Size  Location     Type
  8001 ;;                  1    wreg      void 
  8002 ;; Registers used:
  8003 ;;		wreg, status,2, status,0
  8004 ;; Tracked objects:
  8005 ;;		On entry : 0/0
  8006 ;;		On exit  : 0/0
  8007 ;;		Unchanged: 0/0
  8008 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8009 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8010 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8011 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8012 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8013 ;;Total ram usage:        2 bytes
  8014 ;; Hardware stack levels used:    1
  8015 ;; Hardware stack levels required when called:    3
  8016 ;; This function calls:
  8017 ;;		Nothing
  8018 ;; This function is called by:
  8019 ;;		_Wdg_MainTask
  8020 ;; This function uses a non-reentrant model
  8021 ;;
  8022                           
  8023                           
  8024                           ;psect for function _Mcu_SetWdgPeriod
  8025  08CF                     _Mcu_SetWdgPeriod:	
  8026                           
  8027                           ;incstack = 0
  8028                           ; Regs used in _Mcu_SetWdgPeriod: [wreg+status,2+status,0]
  8029                           ;Mcu_SetWdgPeriod@WdgPeriod stored from wreg
  8030  08CF  00F5               	movwf	Mcu_SetWdgPeriod@WdgPeriod
  8031                           
  8032                           ;mcu_drv.c: 200: WDTCONbits.WDTPS = WdgPeriod;
  8033  08D0  0875               	movf	Mcu_SetWdgPeriod@WdgPeriod,w
  8034  08D1  00F4               	movwf	??_Mcu_SetWdgPeriod
  8035  08D2  0DF4               	rlf	??_Mcu_SetWdgPeriod,f
  8036  08D3  0021               	movlb	1	; select bank1
  8037  08D4  0817               	movf	23,w	;volatile
  8038  08D5  0674               	xorwf	??_Mcu_SetWdgPeriod,w
  8039  08D6  39C1               	andlw	-63
  8040  08D7  0674               	xorwf	??_Mcu_SetWdgPeriod,w
  8041  08D8  0097               	movwf	23	;volatile
  8042  08D9  0008               	return
  8043  08DA                     __end_of_Mcu_SetWdgPeriod:	
  8044                           
  8045                           	psect	text24
  8046  0002                     __ptext24:	
  8047 ;; *************** function _Mcu_ClearWdg *****************
  8048 ;; Defined at:
  8049 ;;		line 225 in file "../../../Framework/MercuryFwk/Source/c/01_Hal/02_Drv/mcu_drv.c"
  8050 ;; Parameters:    Size  Location     Type
  8051 ;;		None
  8052 ;; Auto vars:     Size  Location     Type
  8053 ;;		None
  8054 ;; Return value:  Size  Location     Type
  8055 ;;                  1    wreg      void 
  8056 ;; Registers used:
  8057 ;;		None
  8058 ;; Tracked objects:
  8059 ;;		On entry : 0/0
  8060 ;;		On exit  : 0/0
  8061 ;;		Unchanged: 0/0
  8062 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8063 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8064 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8065 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8066 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8067 ;;Total ram usage:        0 bytes
  8068 ;; Hardware stack levels used:    1
  8069 ;; Hardware stack levels required when called:    3
  8070 ;; This function calls:
  8071 ;;		Nothing
  8072 ;; This function is called by:
  8073 ;;		_Wdg_MainTask
  8074 ;; This function uses a non-reentrant model
  8075 ;;
  8076                           
  8077                           
  8078                           ;psect for function _Mcu_ClearWdg
  8079  0002                     _Mcu_ClearWdg:	
  8080                           
  8081                           ;incstack = 0
  8082                           ; Regs used in _Mcu_ClearWdg: []
  8083  0002  0064               	clrwdt	;# 
  8084  0003  0008               	return
  8085  0004                     __end_of_Mcu_ClearWdg:	
  8086                           
  8087                           	psect	text25
  8088  0884                     __ptext25:	
  8089 ;; *************** function _SnrInitSonar *****************
  8090 ;; Defined at:
  8091 ;;		line 96 in file "../../../Framework/MercuryFwk/Source/c/01_Hal/02_Drv/sonar_drv.c"
  8092 ;; Parameters:    Size  Location     Type
  8093 ;;		None
  8094 ;; Auto vars:     Size  Location     Type
  8095 ;;		None
  8096 ;; Return value:  Size  Location     Type
  8097 ;;                  1    wreg      void 
  8098 ;; Registers used:
  8099 ;;		None
  8100 ;; Tracked objects:
  8101 ;;		On entry : 0/0
  8102 ;;		On exit  : 0/0
  8103 ;;		Unchanged: 0/0
  8104 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8105 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8106 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8107 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8108 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8109 ;;Total ram usage:        0 bytes
  8110 ;; Hardware stack levels used:    1
  8111 ;; Hardware stack levels required when called:    3
  8112 ;; This function calls:
  8113 ;;		Nothing
  8114 ;; This function is called by:
  8115 ;;		_SnrDrv_GetDistSm
  8116 ;; This function uses a non-reentrant model
  8117 ;;
  8118                           
  8119                           
  8120                           ;psect for function _SnrInitSonar
  8121  0884                     _SnrInitSonar:	
  8122                           
  8123                           ;sonar_drv.c: 99: TRISCbits.TRISC7 = ((UINT8)(0));
  8124                           
  8125                           ;incstack = 0
  8126                           ; Regs used in _SnrInitSonar: []
  8127  0884  0021               	movlb	1	; select bank1
  8128  0885  138E               	bcf	14,7	;volatile
  8129                           
  8130                           ;sonar_drv.c: 100: TRISAbits.TRISA2 = ((UINT8)(1));
  8131  0886  150C               	bsf	12,2	;volatile
  8132                           
  8133                           ;sonar_drv.c: 102: LATCbits.LATC7 = ((UINT8)(0));
  8134  0887  0022               	movlb	2	; select bank2
  8135  0888  138E               	bcf	14,7	;volatile
  8136  0889  0008               	return
  8137  088A                     __end_of_SnrInitSonar:	
  8138                           
  8139                           	psect	text26
  8140  0C61                     __ptext26:	
  8141 ;; *************** function _LedStateMachine *****************
  8142 ;; Defined at:
  8143 ;;		line 75 in file "../../../Framework/MercuryFwk/Source/c/03_Sml/02_Ssl/led.c"
  8144 ;; Parameters:    Size  Location     Type
  8145 ;;  Led             1    wreg     unsigned char 
  8146 ;;  LedSts          1   11[BANK0 ] PTR enum E4018
  8147 ;;		 -> Led1Sts(1), 
  8148 ;;  LedBlink        1   12[BANK0 ] PTR struct _LedBlinkType
  8149 ;;		 -> Led1Blink(9), 
  8150 ;;  LedPulse        1   13[BANK0 ] PTR struct _LedPulseType
  8151 ;;		 -> Led1Pulse(6), 
  8152 ;; Auto vars:     Size  Location     Type
  8153 ;;  Led             1   16[BANK0 ] unsigned char 
  8154 ;;  LedOutSts       1   17[BANK0 ] unsigned char 
  8155 ;; Return value:  Size  Location     Type
  8156 ;;                  1    wreg      unsigned char 
  8157 ;; Registers used:
  8158 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8159 ;; Tracked objects:
  8160 ;;		On entry : 0/0
  8161 ;;		On exit  : 0/0
  8162 ;;		Unchanged: 0/0
  8163 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8164 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8165 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8166 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8167 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8168 ;;Total ram usage:        7 bytes
  8169 ;; Hardware stack levels used:    1
  8170 ;; Hardware stack levels required when called:    5
  8171 ;; This function calls:
  8172 ;;		_LedBlinkStateMachine
  8173 ;;		_LedPulseStateMachine
  8174 ;; This function is called by:
  8175 ;;		_Led_MainTask
  8176 ;; This function uses a non-reentrant model
  8177 ;;
  8178                           
  8179                           
  8180                           ;psect for function _LedStateMachine
  8181  0C61                     _LedStateMachine:	
  8182                           
  8183                           ;incstack = 0
  8184                           ; Regs used in _LedStateMachine: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  8185                           ;LedStateMachine@Led stored from wreg
  8186  0C61  0020               	movlb	0	; select bank0
  8187  0C62  00B0               	movwf	LedStateMachine@Led
  8188                           
  8189                           ;led.c: 78: UINT8 LedOutSts = 0u;
  8190  0C63  01B1               	clrf	LedStateMachine@LedOutSts
  8191                           
  8192                           ;led.c: 81: switch (*LedSts)
  8193  0C64  2C7F               	goto	l4389
  8194  0C65                     l4381:	
  8195                           ;led.c: 82: {
  8196                           ;led.c: 83: case LED_STS_OFF:
  8197                           
  8198                           
  8199                           ;led.c: 85: LedOutSts = ((UINT8)(0));
  8200  0C65  01B1               	clrf	LedStateMachine@LedOutSts
  8201                           
  8202                           ;led.c: 86: break;
  8203  0C66  2C90               	goto	l4391
  8204  0C67                     l641:	
  8205                           ;led.c: 88: case LED_STS_ON:
  8206                           
  8207                           
  8208                           ;led.c: 90: LedOutSts = ((UINT8)(1));
  8209  0C67  01B1               	clrf	LedStateMachine@LedOutSts
  8210  0C68  0AB1               	incf	LedStateMachine@LedOutSts,f
  8211                           
  8212                           ;led.c: 91: break;
  8213  0C69  2C90               	goto	l4391
  8214  0C6A                     l4383:	
  8215                           ;led.c: 93: case LED_STS_BLINK:
  8216                           
  8217                           
  8218                           ;led.c: 95: LedOutSts = LedBlinkStateMachine(LedBlink);
  8219  0C6A  082C               	movf	LedStateMachine@LedBlink,w
  8220  0C6B  3185  25E9  318C   	fcall	_LedBlinkStateMachine
  8221  0C6E  0020               	movlb	0	; select bank0
  8222  0C6F  00AE               	movwf	??_LedStateMachine
  8223  0C70  082E               	movf	??_LedStateMachine,w
  8224  0C71  2C7D               	goto	L7
  8225  0C72                     l4385:	
  8226                           ;led.c: 98: case LED_STS_PULSE:
  8227                           
  8228                           ;led.c: 96: break;
  8229                           
  8230                           
  8231                           ;led.c: 100: LedOutSts = LedPulseStateMachine(LedPulse, Led);
  8232  0C72  0830               	movf	LedStateMachine@Led,w
  8233  0C73  00AE               	movwf	??_LedStateMachine
  8234  0C74  082E               	movf	??_LedStateMachine,w
  8235  0C75  00A7               	movwf	LedPulseStateMachine@Led
  8236  0C76  082D               	movf	LedStateMachine@LedPulse,w
  8237  0C77  318F  2798  318C   	fcall	_LedPulseStateMachine
  8238  0C7A  0020               	movlb	0	; select bank0
  8239  0C7B  00AF               	movwf	??_LedStateMachine+1
  8240  0C7C  082F               	movf	??_LedStateMachine+1,w
  8241  0C7D                     L7:	
  8242  0C7D  00B1               	movwf	LedStateMachine@LedOutSts
  8243                           
  8244                           ;led.c: 105: }
  8245                           
  8246                           ;led.c: 104: break;
  8247                           
  8248                           ;led.c: 103: default:
  8249                           
  8250                           ;led.c: 101: break;
  8251  0C7E  2C90               	goto	l4391
  8252  0C7F                     l4389:	
  8253  0C7F  082B               	movf	LedStateMachine@LedSts,w
  8254  0C80  0086               	movwf	6
  8255  0C81  0187               	clrf	7
  8256  0C82  0801               	movf	1,w
  8257                           
  8258                           ; Switch size 1, requested type "space"
  8259                           ; Number of cases is 4, Range of values is 0 to 3
  8260                           ; switch strategies available:
  8261                           ; Name         Instructions Cycles
  8262                           ; simple_byte           13     7 (average)
  8263                           ; direct_byte           14     6 (fixed)
  8264                           ; jumptable            260     6 (fixed)
  8265                           ;	Chosen strategy is simple_byte
  8266  0C83  3A00               	xorlw	0	; case 0
  8267  0C84  1903               	skipnz
  8268  0C85  2C65               	goto	l4381
  8269  0C86  3A01               	xorlw	1	; case 1
  8270  0C87  1903               	skipnz
  8271  0C88  2C67               	goto	l641
  8272  0C89  3A03               	xorlw	3	; case 2
  8273  0C8A  1903               	skipnz
  8274  0C8B  2C6A               	goto	l4383
  8275  0C8C  3A01               	xorlw	1	; case 3
  8276  0C8D  1903               	skipnz
  8277  0C8E  2C72               	goto	l4385
  8278  0C8F  2C90               	goto	l4391
  8279  0C90                     l4391:	
  8280                           
  8281                           ;led.c: 107: return LedOutSts;
  8282  0C90  0831               	movf	LedStateMachine@LedOutSts,w
  8283  0C91  0008               	return
  8284  0C92                     __end_of_LedStateMachine:	
  8285                           
  8286                           	psect	text27
  8287  0F98                     __ptext27:	
  8288 ;; *************** function _LedPulseStateMachine *****************
  8289 ;; Defined at:
  8290 ;;		line 131 in file "../../../Framework/MercuryFwk/Source/c/01_Hal/02_Drv/led_drv.c"
  8291 ;; Parameters:    Size  Location     Type
  8292 ;;  LedPulse        1    wreg     PTR struct _LedPulseType
  8293 ;;		 -> Led1Pulse(6), 
  8294 ;;  Led             1    7[BANK0 ] unsigned char 
  8295 ;; Auto vars:     Size  Location     Type
  8296 ;;  LedPulse        1   10[BANK0 ] PTR struct _LedPulseType
  8297 ;;		 -> Led1Pulse(6), 
  8298 ;; Return value:  Size  Location     Type
  8299 ;;                  1    wreg      unsigned char 
  8300 ;; Registers used:
  8301 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8302 ;; Tracked objects:
  8303 ;;		On entry : 0/0
  8304 ;;		On exit  : 0/0
  8305 ;;		Unchanged: 0/0
  8306 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8307 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8308 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8309 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8310 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8311 ;;Total ram usage:        4 bytes
  8312 ;; Hardware stack levels used:    1
  8313 ;; Hardware stack levels required when called:    4
  8314 ;; This function calls:
  8315 ;;		_Led_SetLedStatus
  8316 ;;		___lwdiv
  8317 ;; This function is called by:
  8318 ;;		_LedStateMachine
  8319 ;; This function uses a non-reentrant model
  8320 ;;
  8321                           
  8322                           
  8323                           ;psect for function _LedPulseStateMachine
  8324  0F98                     _LedPulseStateMachine:	
  8325                           
  8326                           ;incstack = 0
  8327                           ; Regs used in _LedPulseStateMachine: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  8328                           ;LedPulseStateMachine@LedPulse stored from wreg
  8329  0F98  0020               	movlb	0	; select bank0
  8330  0F99  00AA               	movwf	LedPulseStateMachine@LedPulse
  8331                           
  8332                           ;led_drv.c: 134: switch (LedPulse->LedPulseState)
  8333  0F9A  2FEB               	goto	l4185
  8334  0F9B                     l4167:	
  8335                           ;led_drv.c: 135: {
  8336                           ;led_drv.c: 136: case LedPulseOn:
  8337                           
  8338                           
  8339                           ;led_drv.c: 138: LedPulse->LedOutState = ((UINT8)(1));
  8340  0F9B  0A2A               	incf	LedPulseStateMachine@LedPulse,w
  8341  0F9C  0086               	movwf	6
  8342  0F9D  0187               	clrf	7
  8343  0F9E  0181               	clrf	1
  8344  0F9F  0A81               	incf	1,f
  8345                           
  8346                           ;led_drv.c: 140: LedPulse->LedPulseState = LedPulseDelay;
  8347  0FA0  082A               	movf	LedPulseStateMachine@LedPulse,w
  8348  0FA1  0086               	movwf	6
  8349  0FA2  0187               	clrf	7
  8350  0FA3  0181               	clrf	1
  8351  0FA4  0A81               	incf	1,f
  8352  0FA5                     l4169:	
  8353                           ;led_drv.c: 143: case LedPulseDelay:
  8354                           
  8355                           
  8356                           ;led_drv.c: 145: LedPulse->LedPulseCounter++;
  8357  0FA5  082A               	movf	LedPulseStateMachine@LedPulse,w
  8358  0FA6  3E02               	addlw	2
  8359  0FA7  0086               	movwf	6
  8360  0FA8  0187               	clrf	7
  8361  0FA9  3001               	movlw	1
  8362  0FAA  0781               	addwf	1,f
  8363  0FAB  3141               	addfsr 1,1
  8364  0FAC  1803               	skipnc
  8365  0FAD  0A81               	incf	1,f
  8366                           
  8367                           ;led_drv.c: 147: if (LedPulse->LedPulseCounter >= (LedPulse->LedPulseTimeMs/((UINT16)(10
      +                          ))))
  8368  0FAE  300A               	movlw	10
  8369  0FAF  00A0               	movwf	___lwdiv@divisor
  8370  0FB0  3000               	movlw	0
  8371  0FB1  00A1               	movwf	___lwdiv@divisor+1
  8372  0FB2  082A               	movf	LedPulseStateMachine@LedPulse,w
  8373  0FB3  3E04               	addlw	4
  8374  0FB4  0086               	movwf	6
  8375  0FB5  0187               	clrf	7
  8376  0FB6  3F40               	moviw [0]fsr1
  8377  0FB7  00A2               	movwf	___lwdiv@dividend
  8378  0FB8  3F41               	moviw [1]fsr1
  8379  0FB9  00A3               	movwf	___lwdiv@dividend+1
  8380  0FBA  318C  2492  318F   	fcall	___lwdiv
  8381  0FBD  0020               	movlb	0	; select bank0
  8382  0FBE  082A               	movf	LedPulseStateMachine@LedPulse,w
  8383  0FBF  3E02               	addlw	2
  8384  0FC0  0086               	movwf	6
  8385  0FC1  0187               	clrf	7
  8386  0FC2  3F40               	moviw [0]fsr1
  8387  0FC3  00A8               	movwf	??_LedPulseStateMachine
  8388  0FC4  3F41               	moviw [1]fsr1
  8389  0FC5  00A9               	movwf	??_LedPulseStateMachine+1
  8390  0FC6  0821               	movf	?___lwdiv+1,w
  8391  0FC7  0229               	subwf	??_LedPulseStateMachine+1,w
  8392  0FC8  1D03               	skipz
  8393  0FC9  2FCC               	goto	u2965
  8394  0FCA  0820               	movf	?___lwdiv,w
  8395  0FCB  0228               	subwf	??_LedPulseStateMachine,w
  8396  0FCC                     u2965:	
  8397  0FCC  1C03               	skipc
  8398  0FCD  2FFA               	goto	l4187
  8399                           
  8400                           ;led_drv.c: 148: {
  8401                           ;led_drv.c: 150: LedPulse->LedPulseCounter = 0;
  8402  0FCE  082A               	movf	LedPulseStateMachine@LedPulse,w
  8403  0FCF  3E02               	addlw	2
  8404  0FD0  0086               	movwf	6
  8405  0FD1  0187               	clrf	7
  8406  0FD2  3000               	movlw	0
  8407  0FD3  3FC0               	movwi [0]fsr1
  8408  0FD4  3FC1               	movwi [1]fsr1
  8409                           
  8410                           ;led_drv.c: 152: LedPulse->LedOutState = ((UINT8)(0));
  8411  0FD5  0A2A               	incf	LedPulseStateMachine@LedPulse,w
  8412  0FD6  0086               	movwf	6
  8413  0FD7  0187               	clrf	7
  8414  0FD8  0181               	clrf	1
  8415                           
  8416                           ;led_drv.c: 154: LedPulse->LedPulseState = LedPulseOff;
  8417  0FD9  3002               	movlw	2
  8418  0FDA  00A8               	movwf	??_LedPulseStateMachine
  8419  0FDB  082A               	movf	LedPulseStateMachine@LedPulse,w
  8420  0FDC  0086               	movwf	6
  8421  0FDD  0187               	clrf	7
  8422  0FDE  0828               	movf	??_LedPulseStateMachine,w
  8423  0FDF  0081               	movwf	1
  8424                           
  8425                           ;led_drv.c: 155: }
  8426                           ;led_drv.c: 156: break;
  8427  0FE0  2FFA               	goto	l4187
  8428  0FE1                     l4179:	
  8429                           ;led_drv.c: 158: case LedPulseOff:
  8430                           
  8431                           
  8432                           ;led_drv.c: 160: LedPulse->LedPulseState = LedPulseOn;
  8433  0FE1  082A               	movf	LedPulseStateMachine@LedPulse,w
  8434  0FE2  0086               	movwf	6
  8435  0FE3  0187               	clrf	7
  8436  0FE4  0181               	clrf	1
  8437                           
  8438                           ;led_drv.c: 162: Led_SetLedStatus(Led,LED_STS_OFF);
  8439  0FE5  01F4               	clrf	Led_SetLedStatus@LedSts
  8440  0FE6  0827               	movf	LedPulseStateMachine@Led,w
  8441  0FE7  3189  210A  318F   	fcall	_Led_SetLedStatus
  8442                           
  8443                           ;led_drv.c: 167: }
  8444                           
  8445                           ;led_drv.c: 166: break;
  8446                           
  8447                           ;led_drv.c: 165: default:
  8448                           
  8449                           ;led_drv.c: 163: break;
  8450  0FEA  2FFA               	goto	l4187
  8451  0FEB                     l4185:	
  8452  0FEB  0020               	movlb	0	; select bank0
  8453  0FEC  082A               	movf	LedPulseStateMachine@LedPulse,w
  8454  0FED  0086               	movwf	6
  8455  0FEE  0187               	clrf	7
  8456  0FEF  0801               	movf	1,w
  8457                           
  8458                           ; Switch size 1, requested type "space"
  8459                           ; Number of cases is 3, Range of values is 0 to 2
  8460                           ; switch strategies available:
  8461                           ; Name         Instructions Cycles
  8462                           ; simple_byte           10     6 (average)
  8463                           ; direct_byte           12     6 (fixed)
  8464                           ; jumptable            260     6 (fixed)
  8465                           ;	Chosen strategy is simple_byte
  8466  0FF0  3A00               	xorlw	0	; case 0
  8467  0FF1  1903               	skipnz
  8468  0FF2  2F9B               	goto	l4167
  8469  0FF3  3A01               	xorlw	1	; case 1
  8470  0FF4  1903               	skipnz
  8471  0FF5  2FA5               	goto	l4169
  8472  0FF6  3A03               	xorlw	3	; case 2
  8473  0FF7  1903               	skipnz
  8474  0FF8  2FE1               	goto	l4179
  8475  0FF9  2FFA               	goto	l4187
  8476  0FFA                     l4187:	
  8477                           
  8478                           ;led_drv.c: 170: return (LedPulse->LedOutState);
  8479  0FFA  0020               	movlb	0	; select bank0
  8480  0FFB  0A2A               	incf	LedPulseStateMachine@LedPulse,w
  8481  0FFC  0086               	movwf	6
  8482  0FFD  0187               	clrf	7
  8483  0FFE  0801               	movf	1,w
  8484  0FFF  0008               	return
  8485  1000                     __end_of_LedPulseStateMachine:	
  8486                           
  8487                           	psect	text28
  8488  05E9                     __ptext28:	
  8489 ;; *************** function _LedBlinkStateMachine *****************
  8490 ;; Defined at:
  8491 ;;		line 74 in file "../../../Framework/MercuryFwk/Source/c/01_Hal/02_Drv/led_drv.c"
  8492 ;; Parameters:    Size  Location     Type
  8493 ;;  LedBlink        1    wreg     PTR struct _LedBlinkType
  8494 ;;		 -> Led1Blink(9), 
  8495 ;; Auto vars:     Size  Location     Type
  8496 ;;  LedBlink        1    5[COMMON] PTR struct _LedBlinkType
  8497 ;;		 -> Led1Blink(9), 
  8498 ;; Return value:  Size  Location     Type
  8499 ;;                  1    wreg      unsigned char 
  8500 ;; Registers used:
  8501 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8502 ;; Tracked objects:
  8503 ;;		On entry : 0/0
  8504 ;;		On exit  : 0/0
  8505 ;;		Unchanged: 0/0
  8506 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8507 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8508 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8509 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8510 ;;      Totals:         1       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8511 ;;Total ram usage:        3 bytes
  8512 ;; Hardware stack levels used:    1
  8513 ;; Hardware stack levels required when called:    4
  8514 ;; This function calls:
  8515 ;;		___lwdiv
  8516 ;; This function is called by:
  8517 ;;		_LedStateMachine
  8518 ;; This function uses a non-reentrant model
  8519 ;;
  8520                           
  8521                           
  8522                           ;psect for function _LedBlinkStateMachine
  8523  05E9                     _LedBlinkStateMachine:	
  8524                           
  8525                           ;incstack = 0
  8526                           ; Regs used in _LedBlinkStateMachine: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  8527                           ;LedBlinkStateMachine@LedBlink stored from wreg
  8528  05E9  00F5               	movwf	LedBlinkStateMachine@LedBlink
  8529                           
  8530                           ;led_drv.c: 77: switch (LedBlink->LedBlinkState)
  8531  05EA  2E69               	goto	l4159
  8532  05EB                     l4137:	
  8533                           ;led_drv.c: 78: {
  8534                           ;led_drv.c: 79: case LedBlinkInit:
  8535                           
  8536                           
  8537                           ;led_drv.c: 81: LedBlink->LedOutState = LedBlink->LedInitStatus;
  8538  05EB  0875               	movf	LedBlinkStateMachine@LedBlink,w
  8539  05EC  3E08               	addlw	8
  8540  05ED  0086               	movwf	6
  8541  05EE  0187               	clrf	7
  8542  05EF  0801               	movf	1,w
  8543  05F0  0020               	movlb	0	; select bank0
  8544  05F1  00A7               	movwf	??_LedBlinkStateMachine
  8545  05F2  0A75               	incf	LedBlinkStateMachine@LedBlink,w
  8546  05F3  0086               	movwf	6
  8547  05F4  0187               	clrf	7
  8548  05F5  0827               	movf	??_LedBlinkStateMachine,w
  8549  05F6  0081               	movwf	1
  8550                           
  8551                           ;led_drv.c: 83: LedBlink->LedBlinkState = LedBlinkRunning;
  8552  05F7  0875               	movf	LedBlinkStateMachine@LedBlink,w
  8553  05F8  2E31               	goto	L8
  8554  05F9                     l4141:	
  8555                           ;led_drv.c: 86: case LedBlinkRunning:
  8556                           
  8557                           ;led_drv.c: 84: break;
  8558                           
  8559                           
  8560                           ;led_drv.c: 88: LedBlink->LedBlinkCounter++;
  8561  05F9  0875               	movf	LedBlinkStateMachine@LedBlink,w
  8562  05FA  3E02               	addlw	2
  8563  05FB  0086               	movwf	6
  8564  05FC  0187               	clrf	7
  8565  05FD  3001               	movlw	1
  8566  05FE  0781               	addwf	1,f
  8567  05FF  3141               	addfsr 1,1
  8568  0600  1803               	skipnc
  8569  0601  0A81               	incf	1,f
  8570                           
  8571                           ;led_drv.c: 90: if (LedBlink->LedOutState == OffState)
  8572  0602  0A75               	incf	LedBlinkStateMachine@LedBlink,w
  8573  0603  0086               	movwf	6
  8574  0604  0187               	clrf	7
  8575  0605  0801               	movf	1,w
  8576  0606  1D03               	btfss	3,2
  8577  0607  2E36               	goto	l4149
  8578                           
  8579                           ;led_drv.c: 91: {
  8580                           ;led_drv.c: 93: if (LedBlink->LedBlinkCounter >= (LedBlink->LedOffTimeMs/((UINT16)(10)))
      +                          )
  8581  0608  300A               	movlw	10
  8582  0609  0020               	movlb	0	; select bank0
  8583  060A  00A0               	movwf	___lwdiv@divisor
  8584  060B  3000               	movlw	0
  8585  060C  00A1               	movwf	___lwdiv@divisor+1
  8586  060D  0875               	movf	LedBlinkStateMachine@LedBlink,w
  8587  060E  3E06               	addlw	6
  8588  060F  0086               	movwf	6
  8589  0610  0187               	clrf	7
  8590  0611  3F40               	moviw [0]fsr1
  8591  0612  00A2               	movwf	___lwdiv@dividend
  8592  0613  3F41               	moviw [1]fsr1
  8593  0614  00A3               	movwf	___lwdiv@dividend+1
  8594  0615  318C  2492  3185   	fcall	___lwdiv
  8595  0618  0875               	movf	LedBlinkStateMachine@LedBlink,w
  8596  0619  3E02               	addlw	2
  8597  061A  0086               	movwf	6
  8598  061B  0187               	clrf	7
  8599  061C  3F40               	moviw [0]fsr1
  8600  061D  0020               	movlb	0	; select bank0
  8601  061E  00A7               	movwf	??_LedBlinkStateMachine
  8602  061F  3F41               	moviw [1]fsr1
  8603  0620  00A8               	movwf	??_LedBlinkStateMachine+1
  8604  0621  0821               	movf	?___lwdiv+1,w
  8605  0622  0228               	subwf	??_LedBlinkStateMachine+1,w
  8606  0623  1D03               	skipz
  8607  0624  2E27               	goto	u2935
  8608  0625  0820               	movf	?___lwdiv,w
  8609  0626  0227               	subwf	??_LedBlinkStateMachine,w
  8610  0627                     u2935:	
  8611  0627  1C03               	skipc
  8612  0628  2E74               	goto	l4161
  8613                           
  8614                           ;led_drv.c: 94: {
  8615                           ;led_drv.c: 96: LedBlink->LedBlinkCounter = 0;
  8616  0629  0875               	movf	LedBlinkStateMachine@LedBlink,w
  8617  062A  3E02               	addlw	2
  8618  062B  0086               	movwf	6
  8619  062C  0187               	clrf	7
  8620  062D  3000               	movlw	0
  8621  062E  3FC0               	movwi [0]fsr1
  8622  062F  3FC1               	movwi [1]fsr1
  8623                           
  8624                           ;led_drv.c: 98: LedBlink->LedOutState = OnState;
  8625  0630  0A75               	incf	LedBlinkStateMachine@LedBlink,w
  8626  0631                     L8:	
  8627  0631  0086               	movwf	6
  8628  0632  0187               	clrf	7
  8629  0633  0181               	clrf	1
  8630  0634  0A81               	incf	1,f
  8631                           
  8632                           ;led_drv.c: 99: }
  8633                           ;led_drv.c: 100: }
  8634  0635  2E74               	goto	l4161
  8635  0636                     l4149:	
  8636                           
  8637                           ;led_drv.c: 101: else if (LedBlink->LedOutState == OnState)
  8638  0636  0A75               	incf	LedBlinkStateMachine@LedBlink,w
  8639  0637  0086               	movwf	6
  8640  0638  0187               	clrf	7
  8641  0639  0301               	decf	1,w
  8642  063A  1D03               	btfss	3,2
  8643  063B  2E74               	goto	l4161
  8644                           
  8645                           ;led_drv.c: 102: {
  8646                           ;led_drv.c: 104: if (LedBlink->LedBlinkCounter >= (LedBlink->LedOnTimeMs/((UINT16)(10)))
      +                          )
  8647  063C  300A               	movlw	10
  8648  063D  0020               	movlb	0	; select bank0
  8649  063E  00A0               	movwf	___lwdiv@divisor
  8650  063F  3000               	movlw	0
  8651  0640  00A1               	movwf	___lwdiv@divisor+1
  8652  0641  0875               	movf	LedBlinkStateMachine@LedBlink,w
  8653  0642  3E04               	addlw	4
  8654  0643  0086               	movwf	6
  8655  0644  0187               	clrf	7
  8656  0645  3F40               	moviw [0]fsr1
  8657  0646  00A2               	movwf	___lwdiv@dividend
  8658  0647  3F41               	moviw [1]fsr1
  8659  0648  00A3               	movwf	___lwdiv@dividend+1
  8660  0649  318C  2492  3185   	fcall	___lwdiv
  8661  064C  0875               	movf	LedBlinkStateMachine@LedBlink,w
  8662  064D  3E02               	addlw	2
  8663  064E  0086               	movwf	6
  8664  064F  0187               	clrf	7
  8665  0650  3F40               	moviw [0]fsr1
  8666  0651  0020               	movlb	0	; select bank0
  8667  0652  00A7               	movwf	??_LedBlinkStateMachine
  8668  0653  3F41               	moviw [1]fsr1
  8669  0654  00A8               	movwf	??_LedBlinkStateMachine+1
  8670  0655  0821               	movf	?___lwdiv+1,w
  8671  0656  0228               	subwf	??_LedBlinkStateMachine+1,w
  8672  0657  1D03               	skipz
  8673  0658  2E5B               	goto	u2955
  8674  0659  0820               	movf	?___lwdiv,w
  8675  065A  0227               	subwf	??_LedBlinkStateMachine,w
  8676  065B                     u2955:	
  8677  065B  1C03               	skipc
  8678  065C  2E74               	goto	l4161
  8679                           
  8680                           ;led_drv.c: 105: {
  8681                           ;led_drv.c: 107: LedBlink->LedBlinkCounter = 0;
  8682  065D  0875               	movf	LedBlinkStateMachine@LedBlink,w
  8683  065E  3E02               	addlw	2
  8684  065F  0086               	movwf	6
  8685  0660  0187               	clrf	7
  8686  0661  3000               	movlw	0
  8687  0662  3FC0               	movwi [0]fsr1
  8688  0663  3FC1               	movwi [1]fsr1
  8689                           
  8690                           ;led_drv.c: 109: LedBlink->LedOutState = OffState;
  8691  0664  0A75               	incf	LedBlinkStateMachine@LedBlink,w
  8692  0665  0086               	movwf	6
  8693  0666  0187               	clrf	7
  8694  0667  0181               	clrf	1
  8695                           
  8696                           ;led_drv.c: 116: }
  8697                           
  8698                           ;led_drv.c: 115: break;
  8699                           
  8700                           ;led_drv.c: 114: default:
  8701                           
  8702                           ;led_drv.c: 110: }
  8703                           ;led_drv.c: 111: }
  8704                           ;led_drv.c: 112: break;
  8705  0668  2E74               	goto	l4161
  8706  0669                     l4159:	
  8707  0669  0875               	movf	LedBlinkStateMachine@LedBlink,w
  8708  066A  0086               	movwf	6
  8709  066B  0187               	clrf	7
  8710  066C  0801               	movf	1,w
  8711                           
  8712                           ; Switch size 1, requested type "space"
  8713                           ; Number of cases is 2, Range of values is 0 to 1
  8714                           ; switch strategies available:
  8715                           ; Name         Instructions Cycles
  8716                           ; simple_byte            7     4 (average)
  8717                           ; direct_byte           10     6 (fixed)
  8718                           ; jumptable            260     6 (fixed)
  8719                           ;	Chosen strategy is simple_byte
  8720  066D  3A00               	xorlw	0	; case 0
  8721  066E  1903               	skipnz
  8722  066F  2DEB               	goto	l4137
  8723  0670  3A01               	xorlw	1	; case 1
  8724  0671  1903               	skipnz
  8725  0672  2DF9               	goto	l4141
  8726  0673  2E74               	goto	l4161
  8727  0674                     l4161:	
  8728                           
  8729                           ;led_drv.c: 119: return (LedBlink->LedOutState);
  8730  0674  0A75               	incf	LedBlinkStateMachine@LedBlink,w
  8731  0675  0086               	movwf	6
  8732  0676  0187               	clrf	7
  8733  0677  0801               	movf	1,w
  8734  0678  0008               	return
  8735  0679                     __end_of_LedBlinkStateMachine:	
  8736                           
  8737                           	psect	text29
  8738  08C5                     __ptext29:	
  8739 ;; *************** function _CheckStopBitStatus *****************
  8740 ;; Defined at:
  8741 ;;		line 150 in file "../../../Framework/MercuryFwk/Source/c/01_Hal/02_Drv/i2c_slv_drv.c"
  8742 ;; Parameters:    Size  Location     Type
  8743 ;;		None
  8744 ;; Auto vars:     Size  Location     Type
  8745 ;;		None
  8746 ;; Return value:  Size  Location     Type
  8747 ;;                  1    wreg      unsigned char 
  8748 ;; Registers used:
  8749 ;;		wreg, status,2, status,0
  8750 ;; Tracked objects:
  8751 ;;		On entry : 0/0
  8752 ;;		On exit  : 0/0
  8753 ;;		Unchanged: 0/0
  8754 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8755 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8756 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8757 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8758 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8759 ;;Total ram usage:        1 bytes
  8760 ;; Hardware stack levels used:    1
  8761 ;; Hardware stack levels required when called:    3
  8762 ;; This function calls:
  8763 ;;		Nothing
  8764 ;; This function is called by:
  8765 ;;		_I2c_DataReceiveSm
  8766 ;; This function uses a non-reentrant model
  8767 ;;
  8768                           
  8769                           
  8770                           ;psect for function _CheckStopBitStatus
  8771  08C5                     _CheckStopBitStatus:	
  8772                           
  8773                           ;i2c_slv_drv.c: 153: return ((SSP1STAT & ((UINT8)(0x10))) >> ((UINT8)(4)));
  8774                           
  8775                           ;incstack = 0
  8776                           ; Regs used in _CheckStopBitStatus: [wreg+status,2+status,0]
  8777  08C5  0024               	movlb	4	; select bank4
  8778  08C6  0814               	movf	20,w	;volatile
  8779  08C7  00F4               	movwf	??_CheckStopBitStatus
  8780  08C8  3004               	movlw	4
  8781  08C9                     u1935:	
  8782  08C9  36F4               	lsrf	??_CheckStopBitStatus,f
  8783  08CA  0B89               	decfsz	9,f
  8784  08CB  28C9               	goto	u1935
  8785  08CC  0874               	movf	??_CheckStopBitStatus,w
  8786  08CD  3901               	andlw	1
  8787  08CE  0008               	return
  8788  08CF                     __end_of_CheckStopBitStatus:	
  8789                           
  8790                           	psect	text30
  8791  08BB                     __ptext30:	
  8792 ;; *************** function _CheckByteStatus *****************
  8793 ;; Defined at:
  8794 ;;		line 136 in file "../../../Framework/MercuryFwk/Source/c/01_Hal/02_Drv/i2c_slv_drv.c"
  8795 ;; Parameters:    Size  Location     Type
  8796 ;;		None
  8797 ;; Auto vars:     Size  Location     Type
  8798 ;;		None
  8799 ;; Return value:  Size  Location     Type
  8800 ;;                  1    wreg      unsigned char 
  8801 ;; Registers used:
  8802 ;;		wreg, status,2, status,0
  8803 ;; Tracked objects:
  8804 ;;		On entry : 0/0
  8805 ;;		On exit  : 0/0
  8806 ;;		Unchanged: 0/0
  8807 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8808 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8809 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8810 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8811 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8812 ;;Total ram usage:        1 bytes
  8813 ;; Hardware stack levels used:    1
  8814 ;; Hardware stack levels required when called:    3
  8815 ;; This function calls:
  8816 ;;		Nothing
  8817 ;; This function is called by:
  8818 ;;		_I2c_DataReceiveSm
  8819 ;; This function uses a non-reentrant model
  8820 ;;
  8821                           
  8822                           
  8823                           ;psect for function _CheckByteStatus
  8824  08BB                     _CheckByteStatus:	
  8825                           
  8826                           ;i2c_slv_drv.c: 139: return ((SSP1STAT & ((UINT8)(0x20))) >> ((UINT8)(5)));
  8827                           
  8828                           ;incstack = 0
  8829                           ; Regs used in _CheckByteStatus: [wreg+status,2+status,0]
  8830  08BB  0024               	movlb	4	; select bank4
  8831  08BC  0814               	movf	20,w	;volatile
  8832  08BD  00F4               	movwf	??_CheckByteStatus
  8833  08BE  3005               	movlw	5
  8834  08BF                     u1925:	
  8835  08BF  36F4               	lsrf	??_CheckByteStatus,f
  8836  08C0  0B89               	decfsz	9,f
  8837  08C1  28BF               	goto	u1925
  8838  08C2  0874               	movf	??_CheckByteStatus,w
  8839  08C3  3901               	andlw	1
  8840  08C4  0008               	return
  8841  08C5                     __end_of_CheckByteStatus:	
  8842                           
  8843                           	psect	text31
  8844  08B1                     __ptext31:	
  8845 ;; *************** function _CheckAckStatus *****************
  8846 ;; Defined at:
  8847 ;;		line 108 in file "../../../Framework/MercuryFwk/Source/c/01_Hal/02_Drv/i2c_slv_drv.c"
  8848 ;; Parameters:    Size  Location     Type
  8849 ;;		None
  8850 ;; Auto vars:     Size  Location     Type
  8851 ;;		None
  8852 ;; Return value:  Size  Location     Type
  8853 ;;                  1    wreg      unsigned char 
  8854 ;; Registers used:
  8855 ;;		wreg, status,2, status,0
  8856 ;; Tracked objects:
  8857 ;;		On entry : 0/0
  8858 ;;		On exit  : 0/0
  8859 ;;		Unchanged: 0/0
  8860 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8861 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8862 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8863 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8864 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8865 ;;Total ram usage:        1 bytes
  8866 ;; Hardware stack levels used:    1
  8867 ;; Hardware stack levels required when called:    3
  8868 ;; This function calls:
  8869 ;;		Nothing
  8870 ;; This function is called by:
  8871 ;;		_I2c_DataReceiveSm
  8872 ;; This function uses a non-reentrant model
  8873 ;;
  8874                           
  8875                           
  8876                           ;psect for function _CheckAckStatus
  8877  08B1                     _CheckAckStatus:	
  8878                           
  8879                           ;i2c_slv_drv.c: 111: return ((SSP1CON2 & ((UINT8)(0x40))) >> ((UINT8)(6)));
  8880                           
  8881                           ;incstack = 0
  8882                           ; Regs used in _CheckAckStatus: [wreg+status,2+status,0]
  8883  08B1  0024               	movlb	4	; select bank4
  8884  08B2  0816               	movf	22,w	;volatile
  8885  08B3  00F4               	movwf	??_CheckAckStatus
  8886  08B4  3006               	movlw	6
  8887  08B5                     u1915:	
  8888  08B5  36F4               	lsrf	??_CheckAckStatus,f
  8889  08B6  0B89               	decfsz	9,f
  8890  08B7  28B5               	goto	u1915
  8891  08B8  0874               	movf	??_CheckAckStatus,w
  8892  08B9  3901               	andlw	1
  8893  08BA  0008               	return
  8894  08BB                     __end_of_CheckAckStatus:	
  8895                           
  8896                           	psect	text32
  8897  097E                     __ptext32:	
  8898 ;; *************** function _I2c_SetConfig *****************
  8899 ;; Defined at:
  8900 ;;		line 82 in file "../../../Framework/MercuryFwk/Source/c/03_Sml/01_Pml/01_SlvI2c/i2c_slv.c"
  8901 ;; Parameters:    Size  Location     Type
  8902 ;;		None
  8903 ;; Auto vars:     Size  Location     Type
  8904 ;;		None
  8905 ;; Return value:  Size  Location     Type
  8906 ;;                  1    wreg      void 
  8907 ;; Registers used:
  8908 ;;		wreg, status,2
  8909 ;; Tracked objects:
  8910 ;;		On entry : 0/0
  8911 ;;		On exit  : 0/0
  8912 ;;		Unchanged: 0/0
  8913 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8914 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8915 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8916 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8917 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8918 ;;Total ram usage:        1 bytes
  8919 ;; Hardware stack levels used:    1
  8920 ;; Hardware stack levels required when called:    3
  8921 ;; This function calls:
  8922 ;;		Nothing
  8923 ;; This function is called by:
  8924 ;;		_I2cSlv_MainTask
  8925 ;; This function uses a non-reentrant model
  8926 ;;
  8927                           
  8928                           
  8929                           ;psect for function _I2c_SetConfig
  8930  097E                     _I2c_SetConfig:	
  8931                           
  8932                           ;i2c_slv.c: 84: I2cConfig.I2cModuleMode = ((UINT8)(0b0110));
  8933                           
  8934                           ;incstack = 0
  8935                           ; Regs used in _I2c_SetConfig: [wreg+status,2]
  8936  097E  3006               	movlw	6
  8937  097F  00F4               	movwf	??_I2c_SetConfig
  8938  0980  0874               	movf	??_I2c_SetConfig,w
  8939  0981  0021               	movlb	1	; select bank1
  8940  0982  00C2               	movwf	_I2cConfig^(0+128)
  8941                           
  8942                           ;i2c_slv.c: 85: I2cConfig.I2cReceiverEnable = ((UINT8)(0));
  8943  0983  01C3               	clrf	(_I2cConfig^(0+128)+1)
  8944                           
  8945                           ;i2c_slv.c: 86: I2cConfig.EnableI2cModule = ((UINT8)(1));
  8946  0984  01C4               	clrf	(_I2cConfig^(0+128)+2)
  8947  0985  0AC4               	incf	(_I2cConfig^(0+128)+2),f
  8948                           
  8949                           ;i2c_slv.c: 87: I2cConfig.ClockStretchEnable = ((UINT8)(0));
  8950  0986  01C5               	clrf	(_I2cConfig^(0+128)+3)
  8951                           
  8952                           ;i2c_slv.c: 88: I2cConfig.StopCondIntEnable = ((UINT8)(1));
  8953  0987  01C6               	clrf	(_I2cConfig^(0+128)+4)
  8954  0988  0AC6               	incf	(_I2cConfig^(0+128)+4),f
  8955                           
  8956                           ;i2c_slv.c: 89: I2cConfig.StartCondIntEnable = ((UINT8)(1));
  8957  0989  01C7               	clrf	(_I2cConfig^(0+128)+5)
  8958  098A  0AC7               	incf	(_I2cConfig^(0+128)+5),f
  8959                           
  8960                           ;i2c_slv.c: 90: I2cConfig.BufferOverwriteEnable = ((UINT8)(0));
  8961  098B  01C8               	clrf	(_I2cConfig^(0+128)+6)
  8962                           
  8963                           ;i2c_slv.c: 91: I2cConfig.BusCollisionDetectEnable = ((UINT8)(0));
  8964  098C  01C9               	clrf	(_I2cConfig^(0+128)+7)
  8965                           
  8966                           ;i2c_slv.c: 92: I2cConfig.AddrHoldEnable = ((UINT8)(0));
  8967  098D  01CA               	clrf	(_I2cConfig^(0+128)+8)
  8968                           
  8969                           ;i2c_slv.c: 93: I2cConfig.DataHoldEnable = ((UINT8)(0));
  8970  098E  01CB               	clrf	(_I2cConfig^(0+128)+9)
  8971                           
  8972                           ;i2c_slv.c: 94: I2cConfig.GeneralCallEnable = ((UINT8)(1));
  8973  098F  01CC               	clrf	(_I2cConfig^(0+128)+10)
  8974  0990  0ACC               	incf	(_I2cConfig^(0+128)+10),f
  8975  0991  0008               	return
  8976  0992                     __end_of_I2c_SetConfig:	
  8977                           
  8978                           	psect	text33
  8979  03FC                     __ptext33:	
  8980 ;; *************** function _I2c_InitI2cModule *****************
  8981 ;; Defined at:
  8982 ;;		line 206 in file "../../../Framework/MercuryFwk/Source/c/01_Hal/02_Drv/i2c_slv_drv.c"
  8983 ;; Parameters:    Size  Location     Type
  8984 ;;  I2cConfig       1    wreg     PTR struct _I2cConfig
  8985 ;;		 -> I2cConfig(11), 
  8986 ;; Auto vars:     Size  Location     Type
  8987 ;;  I2cConfig       1    2[BANK0 ] PTR struct _I2cConfig
  8988 ;;		 -> I2cConfig(11), 
  8989 ;; Return value:  Size  Location     Type
  8990 ;;                  1    wreg      void 
  8991 ;; Registers used:
  8992 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8993 ;; Tracked objects:
  8994 ;;		On entry : 0/0
  8995 ;;		On exit  : 0/0
  8996 ;;		Unchanged: 0/0
  8997 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8998 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8999 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9000 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9001 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9002 ;;Total ram usage:        3 bytes
  9003 ;; Hardware stack levels used:    1
  9004 ;; Hardware stack levels required when called:    4
  9005 ;; This function calls:
  9006 ;;		_ClearRxBuffer
  9007 ;;		_ClearTxBuffer
  9008 ;; This function is called by:
  9009 ;;		_I2cSlv_MainTask
  9010 ;; This function uses a non-reentrant model
  9011 ;;
  9012                           
  9013                           
  9014                           ;psect for function _I2c_InitI2cModule
  9015  03FC                     _I2c_InitI2cModule:	
  9016                           
  9017                           ;incstack = 0
  9018                           ; Regs used in _I2c_InitI2cModule: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  9019                           ;I2c_InitI2cModule@I2cConfig stored from wreg
  9020  03FC  0020               	movlb	0	; select bank0
  9021  03FD  00A2               	movwf	I2c_InitI2cModule@I2cConfig
  9022                           
  9023                           ;i2c_slv_drv.c: 209: TRISBbits.TRISB4 = ((UINT8)(1));
  9024  03FE  0021               	movlb	1	; select bank1
  9025  03FF  160D               	bsf	13,4	;volatile
  9026                           
  9027                           ;i2c_slv_drv.c: 210: TRISBbits.TRISB6 = ((UINT8)(1));
  9028  0400  170D               	bsf	13,6	;volatile
  9029                           
  9030                           ;i2c_slv_drv.c: 214: SSP1CON1 |= (I2cConfig->I2cModuleMode) << ((UINT8)(0));
  9031  0401  0020               	movlb	0	; select bank0
  9032  0402  0822               	movf	I2c_InitI2cModule@I2cConfig,w
  9033  0403  0086               	movwf	6
  9034  0404  0187               	clrf	7
  9035  0405  0801               	movf	1,w
  9036  0406  00A0               	movwf	??_I2c_InitI2cModule
  9037  0407  0820               	movf	??_I2c_InitI2cModule,w
  9038  0408  0024               	movlb	4	; select bank4
  9039  0409  0495               	iorwf	21,f	;volatile
  9040                           
  9041                           ;i2c_slv_drv.c: 217: SSP1CON2 |= (I2cConfig->I2cReceiverEnable) << ((UINT8)(3));
  9042  040A  0020               	movlb	0	; select bank0
  9043  040B  0A22               	incf	I2c_InitI2cModule@I2cConfig,w
  9044  040C  0086               	movwf	6
  9045  040D  0187               	clrf	7
  9046  040E  0801               	movf	1,w
  9047  040F  00A0               	movwf	??_I2c_InitI2cModule
  9048  0410  3002               	movlw	2
  9049  0411                     u3135:	
  9050  0411  35A0               	lslf	??_I2c_InitI2cModule,f
  9051  0412  3EFF               	addlw	-1
  9052  0413  1D03               	skipz
  9053  0414  2C11               	goto	u3135
  9054  0415  3520               	lslf	??_I2c_InitI2cModule,w
  9055  0416  00A1               	movwf	??_I2c_InitI2cModule+1
  9056  0417  0821               	movf	??_I2c_InitI2cModule+1,w
  9057  0418  0024               	movlb	4	; select bank4
  9058  0419  0496               	iorwf	22,f	;volatile
  9059                           
  9060                           ;i2c_slv_drv.c: 218: SSP1CON2 |= (I2cConfig->ClockStretchEnable) << ((UINT8)(0));
  9061  041A  0020               	movlb	0	; select bank0
  9062  041B  0822               	movf	I2c_InitI2cModule@I2cConfig,w
  9063  041C  3E03               	addlw	3
  9064  041D  0086               	movwf	6
  9065  041E  0187               	clrf	7
  9066  041F  0801               	movf	1,w
  9067  0420  00A0               	movwf	??_I2c_InitI2cModule
  9068  0421  0820               	movf	??_I2c_InitI2cModule,w
  9069  0422  0024               	movlb	4	; select bank4
  9070  0423  0496               	iorwf	22,f	;volatile
  9071                           
  9072                           ;i2c_slv_drv.c: 219: SSP1CON2 |= (I2cConfig->GeneralCallEnable) << ((UINT8)(7));
  9073  0424  0020               	movlb	0	; select bank0
  9074  0425  0822               	movf	I2c_InitI2cModule@I2cConfig,w
  9075  0426  3E0A               	addlw	10
  9076  0427  0086               	movwf	6
  9077  0428  0187               	clrf	7
  9078  0429  0801               	movf	1,w
  9079  042A  00A0               	movwf	??_I2c_InitI2cModule
  9080  042B  3006               	movlw	6
  9081  042C                     u3145:	
  9082  042C  35A0               	lslf	??_I2c_InitI2cModule,f
  9083  042D  3EFF               	addlw	-1
  9084  042E  1D03               	skipz
  9085  042F  2C2C               	goto	u3145
  9086  0430  3520               	lslf	??_I2c_InitI2cModule,w
  9087  0431  00A1               	movwf	??_I2c_InitI2cModule+1
  9088  0432  0821               	movf	??_I2c_InitI2cModule+1,w
  9089  0433  0024               	movlb	4	; select bank4
  9090  0434  0496               	iorwf	22,f	;volatile
  9091                           
  9092                           ;i2c_slv_drv.c: 222: SSP1CON3 |= (I2cConfig->StopCondIntEnable) << ((UINT8)(6));
  9093  0435  0020               	movlb	0	; select bank0
  9094  0436  0822               	movf	I2c_InitI2cModule@I2cConfig,w
  9095  0437  3E04               	addlw	4
  9096  0438  0086               	movwf	6
  9097  0439  0187               	clrf	7
  9098  043A  0801               	movf	1,w
  9099  043B  00A0               	movwf	??_I2c_InitI2cModule
  9100  043C  3005               	movlw	5
  9101  043D                     u3155:	
  9102  043D  35A0               	lslf	??_I2c_InitI2cModule,f
  9103  043E  3EFF               	addlw	-1
  9104  043F  1D03               	skipz
  9105  0440  2C3D               	goto	u3155
  9106  0441  3520               	lslf	??_I2c_InitI2cModule,w
  9107  0442  00A1               	movwf	??_I2c_InitI2cModule+1
  9108  0443  0821               	movf	??_I2c_InitI2cModule+1,w
  9109  0444  0024               	movlb	4	; select bank4
  9110  0445  0497               	iorwf	23,f	;volatile
  9111                           
  9112                           ;i2c_slv_drv.c: 223: SSP1CON3 |= (I2cConfig->StartCondIntEnable) << ((UINT8)(5));
  9113  0446  0020               	movlb	0	; select bank0
  9114  0447  0822               	movf	I2c_InitI2cModule@I2cConfig,w
  9115  0448  3E05               	addlw	5
  9116  0449  0086               	movwf	6
  9117  044A  0187               	clrf	7
  9118  044B  0801               	movf	1,w
  9119  044C  00A0               	movwf	??_I2c_InitI2cModule
  9120  044D  3004               	movlw	4
  9121  044E                     u3165:	
  9122  044E  35A0               	lslf	??_I2c_InitI2cModule,f
  9123  044F  3EFF               	addlw	-1
  9124  0450  1D03               	skipz
  9125  0451  2C4E               	goto	u3165
  9126  0452  3520               	lslf	??_I2c_InitI2cModule,w
  9127  0453  00A1               	movwf	??_I2c_InitI2cModule+1
  9128  0454  0821               	movf	??_I2c_InitI2cModule+1,w
  9129  0455  0024               	movlb	4	; select bank4
  9130  0456  0497               	iorwf	23,f	;volatile
  9131                           
  9132                           ;i2c_slv_drv.c: 224: SSP1CON3 |= (I2cConfig->BufferOverwriteEnable) << ((UINT8)(4));
  9133  0457  0020               	movlb	0	; select bank0
  9134  0458  0822               	movf	I2c_InitI2cModule@I2cConfig,w
  9135  0459  3E06               	addlw	6
  9136  045A  0086               	movwf	6
  9137  045B  0187               	clrf	7
  9138  045C  0801               	movf	1,w
  9139  045D  00A0               	movwf	??_I2c_InitI2cModule
  9140  045E  3003               	movlw	3
  9141  045F                     u3175:	
  9142  045F  35A0               	lslf	??_I2c_InitI2cModule,f
  9143  0460  3EFF               	addlw	-1
  9144  0461  1D03               	skipz
  9145  0462  2C5F               	goto	u3175
  9146  0463  3520               	lslf	??_I2c_InitI2cModule,w
  9147  0464  00A1               	movwf	??_I2c_InitI2cModule+1
  9148  0465  0821               	movf	??_I2c_InitI2cModule+1,w
  9149  0466  0024               	movlb	4	; select bank4
  9150  0467  0497               	iorwf	23,f	;volatile
  9151                           
  9152                           ;i2c_slv_drv.c: 225: SSP1CON3 |= (I2cConfig->BusCollisionDetectEnable) << ((UINT8)(2));
  9153  0468  0020               	movlb	0	; select bank0
  9154  0469  0822               	movf	I2c_InitI2cModule@I2cConfig,w
  9155  046A  3E07               	addlw	7
  9156  046B  0086               	movwf	6
  9157  046C  0187               	clrf	7
  9158  046D  0801               	movf	1,w
  9159  046E  00A0               	movwf	??_I2c_InitI2cModule
  9160  046F  3001               	movlw	1
  9161  0470                     u3185:	
  9162  0470  35A0               	lslf	??_I2c_InitI2cModule,f
  9163  0471  3EFF               	addlw	-1
  9164  0472  1D03               	skipz
  9165  0473  2C70               	goto	u3185
  9166  0474  3520               	lslf	??_I2c_InitI2cModule,w
  9167  0475  00A1               	movwf	??_I2c_InitI2cModule+1
  9168  0476  0821               	movf	??_I2c_InitI2cModule+1,w
  9169  0477  0024               	movlb	4	; select bank4
  9170  0478  0497               	iorwf	23,f	;volatile
  9171                           
  9172                           ;i2c_slv_drv.c: 226: SSP1CON3 |= (I2cConfig->AddrHoldEnable) << ((UINT8)(1));
  9173  0479  0020               	movlb	0	; select bank0
  9174  047A  0822               	movf	I2c_InitI2cModule@I2cConfig,w
  9175  047B  3E08               	addlw	8
  9176  047C  0086               	movwf	6
  9177  047D  0187               	clrf	7
  9178  047E  3501               	lslf	1,w
  9179  047F  00A0               	movwf	??_I2c_InitI2cModule
  9180  0480  0820               	movf	??_I2c_InitI2cModule,w
  9181  0481  0024               	movlb	4	; select bank4
  9182  0482  0497               	iorwf	23,f	;volatile
  9183                           
  9184                           ;i2c_slv_drv.c: 227: SSP1CON3 |= (I2cConfig->DataHoldEnable) << ((UINT8)(0));
  9185  0483  0020               	movlb	0	; select bank0
  9186  0484  0822               	movf	I2c_InitI2cModule@I2cConfig,w
  9187  0485  3E09               	addlw	9
  9188  0486  0086               	movwf	6
  9189  0487  0187               	clrf	7
  9190  0488  0801               	movf	1,w
  9191  0489  00A0               	movwf	??_I2c_InitI2cModule
  9192  048A  0820               	movf	??_I2c_InitI2cModule,w
  9193  048B  0024               	movlb	4	; select bank4
  9194  048C  0497               	iorwf	23,f	;volatile
  9195                           
  9196                           ;i2c_slv_drv.c: 230: SSP1CON1 |= (I2cConfig->EnableI2cModule) << ((UINT8)(5));
  9197  048D  0020               	movlb	0	; select bank0
  9198  048E  0822               	movf	I2c_InitI2cModule@I2cConfig,w
  9199  048F  3E02               	addlw	2
  9200  0490  0086               	movwf	6
  9201  0491  0187               	clrf	7
  9202  0492  0801               	movf	1,w
  9203  0493  00A0               	movwf	??_I2c_InitI2cModule
  9204  0494  3004               	movlw	4
  9205  0495                     u3195:	
  9206  0495  35A0               	lslf	??_I2c_InitI2cModule,f
  9207  0496  3EFF               	addlw	-1
  9208  0497  1D03               	skipz
  9209  0498  2C95               	goto	u3195
  9210  0499  3520               	lslf	??_I2c_InitI2cModule,w
  9211  049A  00A1               	movwf	??_I2c_InitI2cModule+1
  9212  049B  0821               	movf	??_I2c_InitI2cModule+1,w
  9213  049C  0024               	movlb	4	; select bank4
  9214  049D  0495               	iorwf	21,f	;volatile
  9215                           
  9216                           ;i2c_slv_drv.c: 233: PIR1bits.SSP1IF = ((UINT8)(0));
  9217  049E  0020               	movlb	0	; select bank0
  9218  049F  1191               	bcf	17,3	;volatile
  9219                           
  9220                           ;i2c_slv_drv.c: 234: PIE1bits.SSP1IE = ((UINT8)(1));
  9221  04A0  0021               	movlb	1	; select bank1
  9222  04A1  1591               	bsf	17,3	;volatile
  9223                           
  9224                           ;i2c_slv_drv.c: 237: ClearRxBuffer();
  9225  04A2  3189  213A  3183   	fcall	_ClearRxBuffer
  9226                           
  9227                           ;i2c_slv_drv.c: 238: ClearTxBuffer();
  9228  04A5  3189  214A         	fcall	_ClearTxBuffer
  9229  04A7  0008               	return
  9230  04A8                     __end_of_I2c_InitI2cModule:	
  9231                           
  9232                           	psect	text34
  9233  094A                     __ptext34:	
  9234 ;; *************** function _ClearTxBuffer *****************
  9235 ;; Defined at:
  9236 ;;		line 183 in file "../../../Framework/MercuryFwk/Source/c/01_Hal/02_Drv/i2c_slv_drv.c"
  9237 ;; Parameters:    Size  Location     Type
  9238 ;;		None
  9239 ;; Auto vars:     Size  Location     Type
  9240 ;;  Index           1    5[COMMON] unsigned char 
  9241 ;; Return value:  Size  Location     Type
  9242 ;;                  1    wreg      void 
  9243 ;; Registers used:
  9244 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  9245 ;; Tracked objects:
  9246 ;;		On entry : 0/0
  9247 ;;		On exit  : 0/0
  9248 ;;		Unchanged: 0/0
  9249 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9250 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9251 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9252 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9253 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9254 ;;Total ram usage:        2 bytes
  9255 ;; Hardware stack levels used:    1
  9256 ;; Hardware stack levels required when called:    3
  9257 ;; This function calls:
  9258 ;;		Nothing
  9259 ;; This function is called by:
  9260 ;;		_I2c_InitI2cModule
  9261 ;;		_I2c_DataReceiveSm
  9262 ;; This function uses a non-reentrant model
  9263 ;;
  9264                           
  9265                           
  9266                           ;psect for function _ClearTxBuffer
  9267  094A                     _ClearTxBuffer:	
  9268                           
  9269                           ;i2c_slv_drv.c: 185: UINT8 Index;
  9270                           ;i2c_slv_drv.c: 188: for (Index = 0; Index < ((UINT8)(80)); Index++)
  9271                           
  9272                           ;incstack = 0
  9273                           ; Regs used in _ClearTxBuffer: [wreg+fsr1l+fsr1h+status,2+status,0]
  9274  094A  01F5               	clrf	ClearTxBuffer@Index
  9275  094B                     L9:	
  9276  094B  3050               	movlw	80
  9277  094C  0275               	subwf	ClearTxBuffer@Index,w
  9278  094D  1803               	btfsc	3,0
  9279  094E  0008               	return
  9280                           
  9281                           ;i2c_slv_drv.c: 189: {
  9282                           ;i2c_slv_drv.c: 190: I2cTxBuffer[Index] = 0x00;
  9283  094F  0875               	movf	ClearTxBuffer@Index,w
  9284  0950  3EA0               	addlw	(low (_I2cTxBuffer| (0+512)))& (0+255)
  9285  0951  0086               	movwf	6
  9286  0952  3002               	movlw	2	; select bank5/6
  9287  0953  0087               	movwf	7
  9288  0954  0181               	clrf	1
  9289  0955  3001               	movlw	1
  9290  0956  00F4               	movwf	??_ClearTxBuffer
  9291  0957  0874               	movf	??_ClearTxBuffer,w
  9292  0958  07F5               	addwf	ClearTxBuffer@Index,f
  9293  0959  294B               	goto	L9
  9294  095A                     __end_of_ClearTxBuffer:	
  9295                           
  9296                           	psect	text35
  9297  093A                     __ptext35:	
  9298 ;; *************** function _ClearRxBuffer *****************
  9299 ;; Defined at:
  9300 ;;		line 164 in file "../../../Framework/MercuryFwk/Source/c/01_Hal/02_Drv/i2c_slv_drv.c"
  9301 ;; Parameters:    Size  Location     Type
  9302 ;;		None
  9303 ;; Auto vars:     Size  Location     Type
  9304 ;;  Index           1    5[COMMON] unsigned char 
  9305 ;; Return value:  Size  Location     Type
  9306 ;;                  1    wreg      void 
  9307 ;; Registers used:
  9308 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  9309 ;; Tracked objects:
  9310 ;;		On entry : 0/0
  9311 ;;		On exit  : 0/0
  9312 ;;		Unchanged: 0/0
  9313 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9314 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9315 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9316 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9317 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9318 ;;Total ram usage:        2 bytes
  9319 ;; Hardware stack levels used:    1
  9320 ;; Hardware stack levels required when called:    3
  9321 ;; This function calls:
  9322 ;;		Nothing
  9323 ;; This function is called by:
  9324 ;;		_I2c_InitI2cModule
  9325 ;;		_I2c_DataReceiveSm
  9326 ;; This function uses a non-reentrant model
  9327 ;;
  9328                           
  9329                           
  9330                           ;psect for function _ClearRxBuffer
  9331  093A                     _ClearRxBuffer:	
  9332                           
  9333                           ;i2c_slv_drv.c: 166: UINT8 Index;
  9334                           ;i2c_slv_drv.c: 169: for (Index = 0; Index < ((UINT8)(80)); Index++)
  9335                           
  9336                           ;incstack = 0
  9337                           ; Regs used in _ClearRxBuffer: [wreg+fsr1l+fsr1h+status,2+status,0]
  9338  093A  01F5               	clrf	ClearRxBuffer@Index
  9339  093B                     L10:	
  9340  093B  3050               	movlw	80
  9341  093C  0275               	subwf	ClearRxBuffer@Index,w
  9342  093D  1803               	btfsc	3,0
  9343  093E  0008               	return
  9344                           
  9345                           ;i2c_slv_drv.c: 170: {
  9346                           ;i2c_slv_drv.c: 171: I2cRxBuffer[Index] = 0x00;
  9347  093F  0875               	movf	ClearRxBuffer@Index,w
  9348  0940  3E20               	addlw	(low (_I2cRxBuffer| (0+768)))& (0+255)
  9349  0941  0086               	movwf	6
  9350  0942  3003               	movlw	3	; select bank6/7
  9351  0943  0087               	movwf	7
  9352  0944  0181               	clrf	1
  9353  0945  3001               	movlw	1
  9354  0946  00F4               	movwf	??_ClearRxBuffer
  9355  0947  0874               	movf	??_ClearRxBuffer,w
  9356  0948  07F5               	addwf	ClearRxBuffer@Index,f
  9357  0949  293B               	goto	L10
  9358  094A                     __end_of_ClearRxBuffer:	
  9359                           
  9360                           	psect	text36
  9361  0679                     __ptext36:	
  9362 ;; *************** function _I2cSlv_I2cDrvHandle *****************
  9363 ;; Defined at:
  9364 ;;		line 141 in file "../../../Framework/MercuryFwk/Source/c/03_Sml/01_Pml/01_SlvI2c/i2c_slv.c"
  9365 ;; Parameters:    Size  Location     Type
  9366 ;;		None
  9367 ;; Auto vars:     Size  Location     Type
  9368 ;;  Index           1    9[BANK0 ] unsigned char 
  9369 ;; Return value:  Size  Location     Type
  9370 ;;                  1    wreg      void 
  9371 ;; Registers used:
  9372 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9373 ;; Tracked objects:
  9374 ;;		On entry : 0/0
  9375 ;;		On exit  : 0/0
  9376 ;;		Unchanged: 0/0
  9377 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9378 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9379 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9380 ;;      Temps:          0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9381 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9382 ;;Total ram usage:        6 bytes
  9383 ;; Hardware stack levels used:    1
  9384 ;; Hardware stack levels required when called:    4
  9385 ;; This function calls:
  9386 ;;		_GenerateEvt
  9387 ;;		_I2c_SetI2cAddress
  9388 ;;		_I2c_SetI2cAddressMask
  9389 ;;		_I2c_UpdateTxBuffer
  9390 ;;		_Led_SetLedStatus
  9391 ;;		_ReceiveEvt
  9392 ;; This function is called by:
  9393 ;;		_I2cSlv_MainTask
  9394 ;; This function uses a non-reentrant model
  9395 ;;
  9396                           
  9397                           
  9398                           ;psect for function _I2cSlv_I2cDrvHandle
  9399  0679                     _I2cSlv_I2cDrvHandle:	
  9400                           
  9401                           ;i2c_slv.c: 143: static I2cReceiveMsgStateType I2cReceiveMsgState = I2cSetSlaveAddres;
  9402                           ;i2c_slv.c: 144: UINT8 Index = 0;
  9403                           
  9404                           ;incstack = 0
  9405                           ; Regs used in _I2cSlv_I2cDrvHandle: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  9406  0679  0020               	movlb	0	; select bank0
  9407  067A  01A9               	clrf	I2cSlv_I2cDrvHandle@Index
  9408                           
  9409                           ;i2c_slv.c: 146: switch (I2cReceiveMsgState)
  9410  067B  2EFD               	goto	l4377
  9411  067C                     l4335:	
  9412                           ;i2c_slv.c: 147: {
  9413                           ;i2c_slv.c: 148: case I2cSetSlaveAddres:
  9414                           
  9415                           
  9416                           ;i2c_slv.c: 150: if (ReceiveEvt(&I2cSetAddress))
  9417  067C  30E2               	movlw	(low (_I2cSetAddress| 0))& (0+255)
  9418  067D  318A  228E  3186   	fcall	_ReceiveEvt
  9419  0680  3A00               	xorlw	0
  9420  0681  1903               	skipnz
  9421  0682  0008               	return
  9422                           
  9423                           ;i2c_slv.c: 151: {
  9424                           ;i2c_slv.c: 153: I2c_SetI2cAddress(I2cSlaveAddress);
  9425  0683  0876               	movf	_I2cSlaveAddress,w
  9426  0684  3188  207A  3186   	fcall	_I2c_SetI2cAddress
  9427                           
  9428                           ;i2c_slv.c: 154: I2c_SetI2cAddressMask(((UINT8)(0x7F)));
  9429  0687  307F               	movlw	127
  9430  0688  3188  207F         	fcall	_I2c_SetI2cAddressMask
  9431                           
  9432                           ;i2c_slv.c: 156: I2cReceiveMsgState = I2cReceiveData;
  9433  068A  0021               	movlb	1	; select bank1
  9434  068B  01BC               	clrf	I2cSlv_I2cDrvHandle@I2cReceiveMsgState^(0+128)
  9435  068C  0ABC               	incf	I2cSlv_I2cDrvHandle@I2cReceiveMsgState^(0+128),f
  9436                           
  9437                           ;i2c_slv.c: 157: }
  9438                           ;i2c_slv.c: 158: break;
  9439  068D  0008               	return
  9440  068E                     l4341:	
  9441                           ;i2c_slv.c: 160: case I2cReceiveData:
  9442                           
  9443                           
  9444                           ;i2c_slv.c: 162: if (ReceiveEvt(&I2cNewPacketNotification))
  9445  068E  30DE               	movlw	(low (_I2cNewPacketNotification| 0))& (0+255)
  9446  068F  318A  228E  3186   	fcall	_ReceiveEvt
  9447  0692  3A00               	xorlw	0
  9448  0693  1903               	skipnz
  9449  0694  2EE0               	goto	l4367
  9450                           
  9451                           ;i2c_slv.c: 163: {
  9452                           ;i2c_slv.c: 165: if ((I2cPacket.SlaveAddress == I2cSlaveAddress) || (I2cPacket.SlaveAddr
      +                          ess == ((UINT8)(0x00))))
  9453  0695  309D               	movlw	157
  9454  0696  0086               	movwf	6
  9455  0697  3023               	movlw	35
  9456  0698  0087               	movwf	7
  9457  0699  0801               	movf	1,w
  9458  069A  0676               	xorwf	_I2cSlaveAddress,w
  9459  069B  1903               	skipnz
  9460  069C  2EA4               	goto	l4347
  9461  069D  309D               	movlw	157
  9462  069E  0086               	movwf	6
  9463  069F  3023               	movlw	35
  9464  06A0  0087               	movwf	7
  9465  06A1  0801               	movf	1,w
  9466  06A2  1D03               	btfss	3,2
  9467  06A3  0008               	return
  9468  06A4                     l4347:	
  9469                           
  9470                           ;i2c_slv.c: 166: {
  9471                           ;i2c_slv.c: 167: if (I2cPacket.ReadWrite == ((UINT8)(0)))
  9472  06A4  309D               	movlw	157
  9473  06A5  0086               	movwf	6
  9474  06A6  3023               	movlw	35
  9475  06A7  0087               	movwf	7
  9476  06A8  3141               	addfsr 1,1
  9477  06A9  0801               	movf	1,w
  9478  06AA  1D03               	btfss	3,2
  9479  06AB  0008               	return
  9480                           
  9481                           ;i2c_slv.c: 168: {
  9482                           ;i2c_slv.c: 170: for (Index = 0; Index < ((UINT8)(80));Index++)
  9483  06AC  0020               	movlb	0	; select bank0
  9484  06AD  01A9               	clrf	I2cSlv_I2cDrvHandle@Index
  9485  06AE  3050               	movlw	80
  9486  06AF  0229               	subwf	I2cSlv_I2cDrvHandle@Index,w
  9487  06B0  1803               	btfsc	3,0
  9488  06B1  2ED0               	goto	l4361
  9489  06B2                     l4355:	
  9490                           
  9491                           ;i2c_slv.c: 171: {
  9492                           ;i2c_slv.c: 172: CmdBuffer[Index] = I2cPacket.Buffer[Index];
  9493  06B2  0829               	movf	I2cSlv_I2cDrvHandle@Index,w
  9494  06B3  00A4               	movwf	??_I2cSlv_I2cDrvHandle
  9495  06B4  01A5               	clrf	??_I2cSlv_I2cDrvHandle+1
  9496  06B5  309F               	movlw	159
  9497  06B6  00A6               	movwf	??_I2cSlv_I2cDrvHandle+2
  9498  06B7  3023               	movlw	35
  9499  06B8  00A7               	movwf	??_I2cSlv_I2cDrvHandle+3
  9500  06B9  0824               	movf	??_I2cSlv_I2cDrvHandle,w
  9501  06BA  0726               	addwf	??_I2cSlv_I2cDrvHandle+2,w
  9502  06BB  0086               	movwf	6
  9503  06BC  0825               	movf	??_I2cSlv_I2cDrvHandle+1,w
  9504  06BD  3D27               	addwfc	??_I2cSlv_I2cDrvHandle+3,w
  9505  06BE  0087               	movwf	7
  9506  06BF  0801               	movf	1,w
  9507  06C0  00A8               	movwf	??_I2cSlv_I2cDrvHandle+4
  9508  06C1  0829               	movf	I2cSlv_I2cDrvHandle@Index,w
  9509  06C2  3E20               	addlw	(low (_CmdBuffer| (0+512)))& (0+255)
  9510  06C3  0086               	movwf	6
  9511  06C4  3002               	movlw	2	; select bank4/5
  9512  06C5  0087               	movwf	7
  9513  06C6  0828               	movf	??_I2cSlv_I2cDrvHandle+4,w
  9514  06C7  0081               	movwf	1
  9515  06C8  3001               	movlw	1
  9516  06C9  00A4               	movwf	??_I2cSlv_I2cDrvHandle
  9517  06CA  0824               	movf	??_I2cSlv_I2cDrvHandle,w
  9518  06CB  07A9               	addwf	I2cSlv_I2cDrvHandle@Index,f
  9519  06CC  3050               	movlw	80
  9520  06CD  0229               	subwf	I2cSlv_I2cDrvHandle@Index,w
  9521  06CE  1C03               	skipc
  9522  06CF  2EB2               	goto	l4355
  9523  06D0                     l4361:	
  9524                           
  9525                           ;i2c_slv.c: 173: }
  9526                           ;i2c_slv.c: 175: GenerateEvt(&I2cWriteRequest);
  9527  06D0  30E4               	movlw	(low (_I2cWriteRequest| 0))& (0+255)
  9528  06D1  318A  22AF  3186   	fcall	_GenerateEvt
  9529                           
  9530                           ;i2c_slv.c: 177: if (LedBehaviourSts == ((UINT8)(1)))
  9531  06D4  0379               	decf	_LedBehaviourSts,w
  9532  06D5  1D03               	btfss	3,2
  9533  06D6  0008               	return
  9534                           
  9535                           ;i2c_slv.c: 178: {
  9536                           ;i2c_slv.c: 179: Led_SetLedStatus(1u, LED_STS_PULSE);
  9537  06D7  3003               	movlw	3
  9538  06D8  0020               	movlb	0	; select bank0
  9539  06D9  00A4               	movwf	??_I2cSlv_I2cDrvHandle
  9540  06DA  0824               	movf	??_I2cSlv_I2cDrvHandle,w
  9541  06DB  00F4               	movwf	Led_SetLedStatus@LedSts
  9542  06DC  3001               	movlw	1
  9543  06DD  3189  210A         	fcall	_Led_SetLedStatus
  9544                           
  9545                           ;i2c_slv.c: 180: }
  9546                           ;i2c_slv.c: 181: }
  9547                           ;i2c_slv.c: 182: }
  9548                           ;i2c_slv.c: 183: }
  9549  06DF  0008               	return
  9550  06E0                     l4367:	
  9551                           
  9552                           ;i2c_slv.c: 185: else if (ReceiveEvt(&I2cReplyPacketReady))
  9553  06E0  3077               	movlw	(low (_I2cReplyPacketReady| 0))& (0+255)
  9554  06E1  318A  228E  3186   	fcall	_ReceiveEvt
  9555  06E4  3A00               	xorlw	0
  9556  06E5  1903               	skipnz
  9557  06E6  0008               	return
  9558                           
  9559                           ;i2c_slv.c: 186: {
  9560                           ;i2c_slv.c: 188: I2c_UpdateTxBuffer(RepBuffer,RepBufferLen);
  9561  06E7  0021               	movlb	1	; select bank1
  9562  06E8  0841               	movf	_RepBufferLen^(0+128),w
  9563  06E9  0020               	movlb	0	; select bank0
  9564  06EA  00A4               	movwf	??_I2cSlv_I2cDrvHandle
  9565  06EB  0824               	movf	??_I2cSlv_I2cDrvHandle,w
  9566  06EC  00F4               	movwf	I2c_UpdateTxBuffer@Length
  9567  06ED  30A0               	movlw	(low (_RepBuffer| (0+256)))& (0+255)
  9568  06EE  318A  2250  3186   	fcall	_I2c_UpdateTxBuffer
  9569                           
  9570                           ;i2c_slv.c: 190: if (LedBehaviourSts == ((UINT8)(1)))
  9571  06F1  0379               	decf	_LedBehaviourSts,w
  9572  06F2  1D03               	btfss	3,2
  9573  06F3  0008               	return
  9574                           
  9575                           ;i2c_slv.c: 191: {
  9576                           ;i2c_slv.c: 192: Led_SetLedStatus(1u, LED_STS_PULSE);
  9577  06F4  3003               	movlw	3
  9578  06F5  0020               	movlb	0	; select bank0
  9579  06F6  00A4               	movwf	??_I2cSlv_I2cDrvHandle
  9580  06F7  0824               	movf	??_I2cSlv_I2cDrvHandle,w
  9581  06F8  00F4               	movwf	Led_SetLedStatus@LedSts
  9582  06F9  3001               	movlw	1
  9583  06FA  3189  210A         	fcall	_Led_SetLedStatus
  9584                           
  9585                           ;i2c_slv.c: 199: }
  9586                           
  9587                           ;i2c_slv.c: 198: break;
  9588                           
  9589                           ;i2c_slv.c: 197: default:
  9590                           
  9591                           ;i2c_slv.c: 193: }
  9592                           ;i2c_slv.c: 194: }
  9593                           ;i2c_slv.c: 195: break;
  9594  06FC  0008               	return
  9595  06FD                     l4377:	
  9596  06FD  0021               	movlb	1	; select bank1
  9597  06FE  083C               	movf	I2cSlv_I2cDrvHandle@I2cReceiveMsgState^(0+128),w
  9598                           
  9599                           ; Switch size 1, requested type "space"
  9600                           ; Number of cases is 2, Range of values is 0 to 1
  9601                           ; switch strategies available:
  9602                           ; Name         Instructions Cycles
  9603                           ; simple_byte            7     4 (average)
  9604                           ; direct_byte           10     6 (fixed)
  9605                           ; jumptable            260     6 (fixed)
  9606                           ;	Chosen strategy is simple_byte
  9607  06FF  3A00               	xorlw	0	; case 0
  9608  0700  1903               	skipnz
  9609  0701  2E7C               	goto	l4335
  9610  0702  3A01               	xorlw	1	; case 1
  9611  0703  1903               	skipnz
  9612  0704  2E8E               	goto	l4341
  9613  0705  2F06               	goto	l611
  9614  0706                     l611:	
  9615  0706  0008               	return
  9616  0707                     __end_of_I2cSlv_I2cDrvHandle:	
  9617                           
  9618                           	psect	text37
  9619  0A50                     __ptext37:	
  9620 ;; *************** function _I2c_UpdateTxBuffer *****************
  9621 ;; Defined at:
  9622 ;;		line 278 in file "../../../Framework/MercuryFwk/Source/c/01_Hal/02_Drv/i2c_slv_drv.c"
  9623 ;; Parameters:    Size  Location     Type
  9624 ;;  DataBuffer      1    wreg     PTR unsigned char 
  9625 ;;		 -> RepBuffer(80), 
  9626 ;;  Length          1    4[COMMON] unsigned char 
  9627 ;; Auto vars:     Size  Location     Type
  9628 ;;  DataBuffer      1    2[BANK0 ] PTR unsigned char 
  9629 ;;		 -> RepBuffer(80), 
  9630 ;;  Index           1    3[BANK0 ] unsigned char 
  9631 ;; Return value:  Size  Location     Type
  9632 ;;                  1    wreg      void 
  9633 ;; Registers used:
  9634 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  9635 ;; Tracked objects:
  9636 ;;		On entry : 0/0
  9637 ;;		On exit  : 0/0
  9638 ;;		Unchanged: 0/0
  9639 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9640 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9641 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9642 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9643 ;;      Totals:         1       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9644 ;;Total ram usage:        5 bytes
  9645 ;; Hardware stack levels used:    1
  9646 ;; Hardware stack levels required when called:    3
  9647 ;; This function calls:
  9648 ;;		Nothing
  9649 ;; This function is called by:
  9650 ;;		_I2cSlv_I2cDrvHandle
  9651 ;; This function uses a non-reentrant model
  9652 ;;
  9653                           
  9654                           
  9655                           ;psect for function _I2c_UpdateTxBuffer
  9656  0A50                     _I2c_UpdateTxBuffer:	
  9657                           
  9658                           ;incstack = 0
  9659                           ; Regs used in _I2c_UpdateTxBuffer: [wreg+fsr1l+fsr1h+status,2+status,0]
  9660                           ;I2c_UpdateTxBuffer@DataBuffer stored from wreg
  9661  0A50  0020               	movlb	0	; select bank0
  9662  0A51  00A2               	movwf	I2c_UpdateTxBuffer@DataBuffer
  9663                           
  9664                           ;i2c_slv_drv.c: 280: UINT8 Index = 0;
  9665  0A52  01A3               	clrf	I2c_UpdateTxBuffer@Index
  9666                           
  9667                           ;i2c_slv_drv.c: 283: for (Index = 0; Index < Length; Index++)
  9668  0A53  01A3               	clrf	I2c_UpdateTxBuffer@Index
  9669  0A54                     l4133:	
  9670  0A54  0874               	movf	I2c_UpdateTxBuffer@Length,w
  9671  0A55  0223               	subwf	I2c_UpdateTxBuffer@Index,w
  9672  0A56  1803               	btfsc	3,0
  9673  0A57  0008               	return
  9674                           
  9675                           ;i2c_slv_drv.c: 284: {
  9676                           ;i2c_slv_drv.c: 285: I2cTxBuffer[Index] = *(DataBuffer + Index);
  9677  0A58  0823               	movf	I2c_UpdateTxBuffer@Index,w
  9678  0A59  0722               	addwf	I2c_UpdateTxBuffer@DataBuffer,w
  9679  0A5A  00A0               	movwf	??_I2c_UpdateTxBuffer
  9680  0A5B  0820               	movf	??_I2c_UpdateTxBuffer,w
  9681  0A5C  0086               	movwf	6
  9682  0A5D  3001               	movlw	1	; select bank2/3
  9683  0A5E  0087               	movwf	7
  9684  0A5F  0801               	movf	1,w
  9685  0A60  00A1               	movwf	??_I2c_UpdateTxBuffer+1
  9686  0A61  0823               	movf	I2c_UpdateTxBuffer@Index,w
  9687  0A62  3EA0               	addlw	(low (_I2cTxBuffer| (0+512)))& (0+255)
  9688  0A63  0086               	movwf	6
  9689  0A64  3002               	movlw	2	; select bank5/6
  9690  0A65  0087               	movwf	7
  9691  0A66  0821               	movf	??_I2c_UpdateTxBuffer+1,w
  9692  0A67  0081               	movwf	1
  9693  0A68  3001               	movlw	1
  9694  0A69  00A0               	movwf	??_I2c_UpdateTxBuffer
  9695  0A6A  0820               	movf	??_I2c_UpdateTxBuffer,w
  9696  0A6B  07A3               	addwf	I2c_UpdateTxBuffer@Index,f
  9697  0A6C  2A54               	goto	l4133
  9698  0A6D                     __end_of_I2c_UpdateTxBuffer:	
  9699                           
  9700                           	psect	text38
  9701  087F                     __ptext38:	
  9702 ;; *************** function _I2c_SetI2cAddressMask *****************
  9703 ;; Defined at:
  9704 ;;		line 263 in file "../../../Framework/MercuryFwk/Source/c/01_Hal/02_Drv/i2c_slv_drv.c"
  9705 ;; Parameters:    Size  Location     Type
  9706 ;;  SlaveAddress    1    wreg     unsigned char 
  9707 ;; Auto vars:     Size  Location     Type
  9708 ;;  SlaveAddress    1    4[COMMON] unsigned char 
  9709 ;; Return value:  Size  Location     Type
  9710 ;;                  1    wreg      void 
  9711 ;; Registers used:
  9712 ;;		wreg, status,2, status,0
  9713 ;; Tracked objects:
  9714 ;;		On entry : 0/0
  9715 ;;		On exit  : 0/0
  9716 ;;		Unchanged: 0/0
  9717 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9718 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9719 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9720 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9721 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9722 ;;Total ram usage:        1 bytes
  9723 ;; Hardware stack levels used:    1
  9724 ;; Hardware stack levels required when called:    3
  9725 ;; This function calls:
  9726 ;;		Nothing
  9727 ;; This function is called by:
  9728 ;;		_I2cSlv_I2cDrvHandle
  9729 ;; This function uses a non-reentrant model
  9730 ;;
  9731                           
  9732                           
  9733                           ;psect for function _I2c_SetI2cAddressMask
  9734  087F                     _I2c_SetI2cAddressMask:	
  9735                           
  9736                           ;incstack = 0
  9737                           ; Regs used in _I2c_SetI2cAddressMask: [wreg+status,2+status,0]
  9738                           ;I2c_SetI2cAddressMask@SlaveAddressMask stored from wreg
  9739  087F  00F4               	movwf	I2c_SetI2cAddressMask@SlaveAddressMask
  9740                           
  9741                           ;i2c_slv_drv.c: 266: SSP1MSK = (SlaveAddressMask << ((UINT8)(1)));
  9742  0880  3574               	lslf	I2c_SetI2cAddressMask@SlaveAddressMask,w
  9743  0881  0024               	movlb	4	; select bank4
  9744  0882  0093               	movwf	19	;volatile
  9745  0883  0008               	return
  9746  0884                     __end_of_I2c_SetI2cAddressMask:	
  9747                           
  9748                           	psect	text39
  9749  087A                     __ptext39:	
  9750 ;; *************** function _I2c_SetI2cAddress *****************
  9751 ;; Defined at:
  9752 ;;		line 249 in file "../../../Framework/MercuryFwk/Source/c/01_Hal/02_Drv/i2c_slv_drv.c"
  9753 ;; Parameters:    Size  Location     Type
  9754 ;;  SlaveAddress    1    wreg     unsigned char 
  9755 ;; Auto vars:     Size  Location     Type
  9756 ;;  SlaveAddress    1    4[COMMON] unsigned char 
  9757 ;; Return value:  Size  Location     Type
  9758 ;;                  1    wreg      void 
  9759 ;; Registers used:
  9760 ;;		wreg, status,2, status,0
  9761 ;; Tracked objects:
  9762 ;;		On entry : 0/0
  9763 ;;		On exit  : 0/0
  9764 ;;		Unchanged: 0/0
  9765 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9766 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9767 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9768 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9769 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9770 ;;Total ram usage:        1 bytes
  9771 ;; Hardware stack levels used:    1
  9772 ;; Hardware stack levels required when called:    3
  9773 ;; This function calls:
  9774 ;;		Nothing
  9775 ;; This function is called by:
  9776 ;;		_I2cSlv_I2cDrvHandle
  9777 ;; This function uses a non-reentrant model
  9778 ;;
  9779                           
  9780                           
  9781                           ;psect for function _I2c_SetI2cAddress
  9782  087A                     _I2c_SetI2cAddress:	
  9783                           
  9784                           ;incstack = 0
  9785                           ; Regs used in _I2c_SetI2cAddress: [wreg+status,2+status,0]
  9786                           ;I2c_SetI2cAddress@SlaveAddress stored from wreg
  9787  087A  00F4               	movwf	I2c_SetI2cAddress@SlaveAddress
  9788                           
  9789                           ;i2c_slv_drv.c: 252: SSP1ADD = (SlaveAddress << ((UINT8)(1)));
  9790  087B  3574               	lslf	I2c_SetI2cAddress@SlaveAddress,w
  9791  087C  0024               	movlb	4	; select bank4
  9792  087D  0092               	movwf	18	;volatile
  9793  087E  0008               	return
  9794  087F                     __end_of_I2c_SetI2cAddress:	
  9795                           
  9796                           	psect	text40
  9797  0D40                     __ptext40:	
  9798 ;; *************** function _SonarMeasure *****************
  9799 ;; Defined at:
  9800 ;;		line 240 in file "../Source/c/04_App/sb310_app.c"
  9801 ;; Parameters:    Size  Location     Type
  9802 ;;		None
  9803 ;; Auto vars:     Size  Location     Type
  9804 ;;		None
  9805 ;; Return value:  Size  Location     Type
  9806 ;;                  1    wreg      void 
  9807 ;; Registers used:
  9808 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9809 ;; Tracked objects:
  9810 ;;		On entry : 0/0
  9811 ;;		On exit  : 0/0
  9812 ;;		Unchanged: 0/0
  9813 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9814 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9815 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9816 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9817 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9818 ;;Total ram usage:        1 bytes
  9819 ;; Hardware stack levels used:    1
  9820 ;; Hardware stack levels required when called:    5
  9821 ;; This function calls:
  9822 ;;		_GenerateEvt
  9823 ;;		_ReceiveEvt
  9824 ;;		_SnrDrv_StartMeasure
  9825 ;; This function is called by:
  9826 ;;		_App_MainTask
  9827 ;; This function uses a non-reentrant model
  9828 ;;
  9829                           
  9830                           
  9831                           ;psect for function _SonarMeasure
  9832  0D40                     _SonarMeasure:	
  9833                           
  9834                           ;sb310_app.c: 242: static SonarMeasStateType SonarMeasState = TriggerMeasure;
  9835                           ;sb310_app.c: 243: static UINT16 Counter = 0;
  9836                           ;sb310_app.c: 245: switch (SonarMeasState)
  9837                           
  9838                           ;incstack = 0
  9839                           ; Regs used in _SonarMeasure: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  9840  0D40  2D7E               	goto	l4445
  9841  0D41                     l4417:	
  9842                           ;sb310_app.c: 246: {
  9843                           ;sb310_app.c: 247: case TriggerMeasure:
  9844                           
  9845                           
  9846                           ;sb310_app.c: 248: if (ReceiveEvt(&StartMeasure))
  9847  0D41  30EC               	movlw	(low (_StartMeasure| 0))& (0+255)
  9848  0D42  318A  228E  318D   	fcall	_ReceiveEvt
  9849  0D45  3A00               	xorlw	0
  9850  0D46  1903               	skipnz
  9851  0D47  0008               	return
  9852                           
  9853                           ;sb310_app.c: 249: {
  9854                           ;sb310_app.c: 251: SnrDrv_StartMeasure();
  9855  0D48  3188  2076         	fcall	_SnrDrv_StartMeasure
  9856                           
  9857                           ;sb310_app.c: 253: LATCbits.LATC0 = ((UINT8)(1));
  9858  0D4A  0022               	movlb	2	; select bank2
  9859  0D4B  140E               	bsf	14,0	;volatile
  9860                           
  9861                           ;sb310_app.c: 255: SonarMeasState = BlinkLed;
  9862  0D4C  3002               	movlw	2
  9863  0D4D  0020               	movlb	0	; select bank0
  9864  0D4E  00A2               	movwf	??_SonarMeasure
  9865  0D4F  0822               	movf	??_SonarMeasure,w
  9866  0D50  0021               	movlb	1	; select bank1
  9867  0D51  00BF               	movwf	SonarMeasure@SonarMeasState^(0+128)
  9868                           
  9869                           ;sb310_app.c: 256: }
  9870                           ;sb310_app.c: 257: break;
  9871  0D52  0008               	return
  9872  0D53                     l4425:	
  9873                           ;sb310_app.c: 259: case BlinkLed:
  9874                           
  9875                           
  9876                           ;sb310_app.c: 261: Counter++;
  9877  0D53  3001               	movlw	1
  9878  0D54  07B0               	addwf	SonarMeasure@Counter^(0+128),f
  9879  0D55  3000               	movlw	0
  9880  0D56  3DB1               	addwfc	(SonarMeasure@Counter+1)^(0+128),f
  9881                           
  9882                           ;sb310_app.c: 263: if (Counter >= ((UINT16)(20)/((UINT16)(10))))
  9883  0D57  3000               	movlw	0
  9884  0D58  0231               	subwf	(SonarMeasure@Counter+1)^(0+128),w
  9885  0D59  3002               	movlw	2
  9886  0D5A  1903               	skipnz
  9887  0D5B  0230               	subwf	SonarMeasure@Counter^(0+128),w
  9888  0D5C  1C03               	skipc
  9889  0D5D  0008               	return
  9890                           
  9891                           ;sb310_app.c: 264: {
  9892                           ;sb310_app.c: 266: LATCbits.LATC0 = ((UINT8)(0));
  9893  0D5E  0022               	movlb	2	; select bank2
  9894  0D5F  100E               	bcf	14,0	;volatile
  9895                           
  9896                           ;sb310_app.c: 268: Counter = 0;
  9897  0D60  0021               	movlb	1	; select bank1
  9898  0D61  01B0               	clrf	SonarMeasure@Counter^(0+128)
  9899  0D62  01B1               	clrf	(SonarMeasure@Counter+1)^(0+128)
  9900                           
  9901                           ;sb310_app.c: 270: if (AutomeasureOption == ((UINT8)(1)))
  9902  0D63  0340               	decf	_AutomeasureOption^(0+128),w
  9903  0D64  1D03               	btfss	3,2
  9904  0D65  2D6D               	goto	l4437
  9905                           
  9906                           ;sb310_app.c: 271: {
  9907                           ;sb310_app.c: 273: GenerateEvt(&StartMeasure);
  9908  0D66  30EC               	movlw	(low (_StartMeasure| 0))& (0+255)
  9909  0D67  318A  22AF         	fcall	_GenerateEvt
  9910                           
  9911                           ;sb310_app.c: 275: SonarMeasState = WaitComp;
  9912  0D69  0021               	movlb	1	; select bank1
  9913  0D6A  01BF               	clrf	SonarMeasure@SonarMeasState^(0+128)
  9914  0D6B  0ABF               	incf	SonarMeasure@SonarMeasState^(0+128),f
  9915                           
  9916                           ;sb310_app.c: 276: }
  9917  0D6C  0008               	return
  9918  0D6D                     l4437:	
  9919                           
  9920                           ;sb310_app.c: 277: else
  9921                           ;sb310_app.c: 278: {
  9922                           ;sb310_app.c: 280: SonarMeasState = TriggerMeasure;
  9923  0D6D  01BF               	clrf	SonarMeasure@SonarMeasState^(0+128)
  9924                           
  9925                           ;sb310_app.c: 281: }
  9926                           ;sb310_app.c: 282: }
  9927                           ;sb310_app.c: 283: break;
  9928  0D6E  0008               	return
  9929  0D6F                     l4439:	
  9930                           ;sb310_app.c: 285: case WaitComp:
  9931                           
  9932                           
  9933                           ;sb310_app.c: 287: Counter++;
  9934  0D6F  3001               	movlw	1
  9935  0D70  07B0               	addwf	SonarMeasure@Counter^(0+128),f
  9936  0D71  3000               	movlw	0
  9937  0D72  3DB1               	addwfc	(SonarMeasure@Counter+1)^(0+128),f
  9938                           
  9939                           ;sb310_app.c: 289: if (Counter >= ((UINT16)(100)/((UINT16)(10))))
  9940  0D73  3000               	movlw	0
  9941  0D74  0231               	subwf	(SonarMeasure@Counter+1)^(0+128),w
  9942  0D75  300A               	movlw	10
  9943  0D76  1903               	skipnz
  9944  0D77  0230               	subwf	SonarMeasure@Counter^(0+128),w
  9945  0D78  1C03               	skipc
  9946  0D79  0008               	return
  9947                           
  9948                           ;sb310_app.c: 290: {
  9949                           ;sb310_app.c: 292: Counter = 0;
  9950  0D7A  01B0               	clrf	SonarMeasure@Counter^(0+128)
  9951  0D7B  01B1               	clrf	(SonarMeasure@Counter+1)^(0+128)
  9952                           
  9953                           ;sb310_app.c: 294: SonarMeasState = TriggerMeasure;
  9954  0D7C  01BF               	clrf	SonarMeasure@SonarMeasState^(0+128)
  9955                           
  9956                           ;sb310_app.c: 300: }
  9957                           
  9958                           ;sb310_app.c: 299: break;
  9959                           
  9960                           ;sb310_app.c: 298: default:
  9961                           
  9962                           ;sb310_app.c: 295: }
  9963                           ;sb310_app.c: 296: break;
  9964  0D7D  0008               	return
  9965  0D7E                     l4445:	
  9966  0D7E  0021               	movlb	1	; select bank1
  9967  0D7F  083F               	movf	SonarMeasure@SonarMeasState^(0+128),w
  9968                           
  9969                           ; Switch size 1, requested type "space"
  9970                           ; Number of cases is 3, Range of values is 0 to 2
  9971                           ; switch strategies available:
  9972                           ; Name         Instructions Cycles
  9973                           ; simple_byte           10     6 (average)
  9974                           ; direct_byte           12     6 (fixed)
  9975                           ; jumptable            260     6 (fixed)
  9976                           ;	Chosen strategy is simple_byte
  9977  0D80  3A00               	xorlw	0	; case 0
  9978  0D81  1903               	skipnz
  9979  0D82  2D41               	goto	l4417
  9980  0D83  3A01               	xorlw	1	; case 1
  9981  0D84  1903               	skipnz
  9982  0D85  2D6F               	goto	l4439
  9983  0D86  3A03               	xorlw	3	; case 2
  9984  0D87  1903               	skipnz
  9985  0D88  2D53               	goto	l4425
  9986  0D89  2D8A               	goto	l953
  9987  0D8A                     l953:	
  9988  0D8A  0008               	return
  9989  0D8B                     __end_of_SonarMeasure:	
  9990                           
  9991                           	psect	text41
  9992  0876                     __ptext41:	
  9993 ;; *************** function _SnrDrv_StartMeasure *****************
  9994 ;; Defined at:
  9995 ;;		line 239 in file "../../../Framework/MercuryFwk/Source/c/01_Hal/02_Drv/sonar_drv.c"
  9996 ;; Parameters:    Size  Location     Type
  9997 ;;		None
  9998 ;; Auto vars:     Size  Location     Type
  9999 ;;		None
 10000 ;; Return value:  Size  Location     Type
 10001 ;;                  1    wreg      void 
 10002 ;; Registers used:
 10003 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10004 ;; Tracked objects:
 10005 ;;		On entry : 0/0
 10006 ;;		On exit  : 0/0
 10007 ;;		Unchanged: 0/0
 10008 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10009 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10010 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10011 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10012 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10013 ;;Total ram usage:        0 bytes
 10014 ;; Hardware stack levels used:    1
 10015 ;; Hardware stack levels required when called:    4
 10016 ;; This function calls:
 10017 ;;		_GenerateEvt
 10018 ;; This function is called by:
 10019 ;;		_SonarMeasure
 10020 ;; This function uses a non-reentrant model
 10021 ;;
 10022                           
 10023                           
 10024                           ;psect for function _SnrDrv_StartMeasure
 10025  0876                     _SnrDrv_StartMeasure:	
 10026                           
 10027                           ;sonar_drv.c: 242: GenerateEvt(&SonarStartMeasure);
 10028                           
 10029                           ;incstack = 0
 10030                           ; Regs used in _SnrDrv_StartMeasure: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 10031  0876  30EA               	movlw	(low (_SonarStartMeasure| 0))& (0+255)
 10032  0877  318A  22AF         	fcall	_GenerateEvt
 10033  0879  0008               	return
 10034  087A                     __end_of_SnrDrv_StartMeasure:	
 10035                           
 10036                           	psect	text42
 10037  08A9                     __ptext42:	
 10038 ;; *************** function _Mcu_SetPullUpsSts *****************
 10039 ;; Defined at:
 10040 ;;		line 141 in file "../../../Framework/MercuryFwk/Source/c/01_Hal/02_Drv/mcu_drv.c"
 10041 ;; Parameters:    Size  Location     Type
 10042 ;;  PuSts           1    wreg     enum E3651
 10043 ;; Auto vars:     Size  Location     Type
 10044 ;;  PuSts           1    4[COMMON] enum E3651
 10045 ;; Return value:  Size  Location     Type
 10046 ;;                  1    wreg      void 
 10047 ;; Registers used:
 10048 ;;		wreg, status,0
 10049 ;; Tracked objects:
 10050 ;;		On entry : 0/0
 10051 ;;		On exit  : 0/0
 10052 ;;		Unchanged: 0/0
 10053 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10054 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10055 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10056 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10057 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10058 ;;Total ram usage:        1 bytes
 10059 ;; Hardware stack levels used:    1
 10060 ;; Hardware stack levels required when called:    3
 10061 ;; This function calls:
 10062 ;;		Nothing
 10063 ;; This function is called by:
 10064 ;;		_App_MainTask
 10065 ;; This function uses a non-reentrant model
 10066 ;;
 10067                           
 10068                           
 10069                           ;psect for function _Mcu_SetPullUpsSts
 10070  08A9                     _Mcu_SetPullUpsSts:	
 10071                           
 10072                           ;incstack = 0
 10073                           ; Regs used in _Mcu_SetPullUpsSts: [wreg+status,0]
 10074                           ;Mcu_SetPullUpsSts@PuSts stored from wreg
 10075  08A9  00F4               	movwf	Mcu_SetPullUpsSts@PuSts
 10076                           
 10077                           ;mcu_drv.c: 144: OPTION_REGbits.nWPUEN = PuSts;
 10078  08AA  0C74               	rrf	Mcu_SetPullUpsSts@PuSts,w
 10079  08AB  0021               	movlb	1	; select bank1
 10080  08AC  1C03               	skipc
 10081  08AD  1395               	bcf	21,7	;volatile
 10082  08AE  1803               	skipnc
 10083  08AF  1795               	bsf	21,7	;volatile
 10084  08B0  0008               	return
 10085  08B1                     __end_of_Mcu_SetPullUpsSts:	
 10086                           
 10087                           	psect	text43
 10088  08A1                     __ptext43:	
 10089 ;; *************** function _Mcu_SetDieTempSts *****************
 10090 ;; Defined at:
 10091 ;;		line 239 in file "../../../Framework/MercuryFwk/Source/c/01_Hal/02_Drv/mcu_drv.c"
 10092 ;; Parameters:    Size  Location     Type
 10093 ;;  DieTempSts      1    wreg     unsigned char 
 10094 ;; Auto vars:     Size  Location     Type
 10095 ;;  DieTempSts      1    4[COMMON] unsigned char 
 10096 ;; Return value:  Size  Location     Type
 10097 ;;                  1    wreg      void 
 10098 ;; Registers used:
 10099 ;;		wreg, status,0
 10100 ;; Tracked objects:
 10101 ;;		On entry : 0/0
 10102 ;;		On exit  : 0/0
 10103 ;;		Unchanged: 0/0
 10104 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10105 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10106 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10107 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10108 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10109 ;;Total ram usage:        1 bytes
 10110 ;; Hardware stack levels used:    1
 10111 ;; Hardware stack levels required when called:    3
 10112 ;; This function calls:
 10113 ;;		Nothing
 10114 ;; This function is called by:
 10115 ;;		_App_MainTask
 10116 ;; This function uses a non-reentrant model
 10117 ;;
 10118                           
 10119                           
 10120                           ;psect for function _Mcu_SetDieTempSts
 10121  08A1                     _Mcu_SetDieTempSts:	
 10122                           
 10123                           ;incstack = 0
 10124                           ; Regs used in _Mcu_SetDieTempSts: [wreg+status,0]
 10125                           ;Mcu_SetDieTempSts@DieTempSts stored from wreg
 10126  08A1  00F4               	movwf	Mcu_SetDieTempSts@DieTempSts
 10127                           
 10128                           ;mcu_drv.c: 242: FVRCONbits.TSEN = DieTempSts;
 10129  08A2  0C74               	rrf	Mcu_SetDieTempSts@DieTempSts,w
 10130  08A3  0022               	movlb	2	; select bank2
 10131  08A4  1C03               	skipc
 10132  08A5  1297               	bcf	23,5	;volatile
 10133  08A6  1803               	skipnc
 10134  08A7  1697               	bsf	23,5	;volatile
 10135  08A8  0008               	return
 10136  08A9                     __end_of_Mcu_SetDieTempSts:	
 10137                           
 10138                           	psect	text44
 10139  0899                     __ptext44:	
 10140 ;; *************** function _Mcu_SetDieTempMode *****************
 10141 ;; Defined at:
 10142 ;;		line 253 in file "../../../Framework/MercuryFwk/Source/c/01_Hal/02_Drv/mcu_drv.c"
 10143 ;; Parameters:    Size  Location     Type
 10144 ;;  DieTempMode     1    wreg     unsigned char 
 10145 ;; Auto vars:     Size  Location     Type
 10146 ;;  DieTempMode     1    4[COMMON] unsigned char 
 10147 ;; Return value:  Size  Location     Type
 10148 ;;                  1    wreg      void 
 10149 ;; Registers used:
 10150 ;;		wreg, status,0
 10151 ;; Tracked objects:
 10152 ;;		On entry : 0/0
 10153 ;;		On exit  : 0/0
 10154 ;;		Unchanged: 0/0
 10155 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10156 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10157 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10158 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10159 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10160 ;;Total ram usage:        1 bytes
 10161 ;; Hardware stack levels used:    1
 10162 ;; Hardware stack levels required when called:    3
 10163 ;; This function calls:
 10164 ;;		Nothing
 10165 ;; This function is called by:
 10166 ;;		_App_MainTask
 10167 ;; This function uses a non-reentrant model
 10168 ;;
 10169                           
 10170                           
 10171                           ;psect for function _Mcu_SetDieTempMode
 10172  0899                     _Mcu_SetDieTempMode:	
 10173                           
 10174                           ;incstack = 0
 10175                           ; Regs used in _Mcu_SetDieTempMode: [wreg+status,0]
 10176                           ;Mcu_SetDieTempMode@DieTempMode stored from wreg
 10177  0899  00F4               	movwf	Mcu_SetDieTempMode@DieTempMode
 10178                           
 10179                           ;mcu_drv.c: 256: FVRCONbits.TSRNG = DieTempMode;
 10180  089A  0C74               	rrf	Mcu_SetDieTempMode@DieTempMode,w
 10181  089B  0022               	movlb	2	; select bank2
 10182  089C  1C03               	skipc
 10183  089D  1217               	bcf	23,4	;volatile
 10184  089E  1803               	skipnc
 10185  089F  1617               	bsf	23,4	;volatile
 10186  08A0  0008               	return
 10187  08A1                     __end_of_Mcu_SetDieTempMode:	
 10188                           
 10189                           	psect	text45
 10190  04A8                     __ptext45:	
 10191 ;; *************** function _Mcu_ConfigPullUps *****************
 10192 ;; Defined at:
 10193 ;;		line 155 in file "../../../Framework/MercuryFwk/Source/c/01_Hal/02_Drv/mcu_drv.c"
 10194 ;; Parameters:    Size  Location     Type
 10195 ;;  WpuCh           1    wreg     PTR struct _WpuChType
 10196 ;;		 -> App_MainTask@WpuCh(18), 
 10197 ;; Auto vars:     Size  Location     Type
 10198 ;;  WpuCh           1    4[COMMON] PTR struct _WpuChType
 10199 ;;		 -> App_MainTask@WpuCh(18), 
 10200 ;; Return value:  Size  Location     Type
 10201 ;;                  1    wreg      void 
 10202 ;; Registers used:
 10203 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 10204 ;; Tracked objects:
 10205 ;;		On entry : 0/0
 10206 ;;		On exit  : 0/0
 10207 ;;		Unchanged: 0/0
 10208 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10209 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10210 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10211 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10212 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10213 ;;Total ram usage:        1 bytes
 10214 ;; Hardware stack levels used:    1
 10215 ;; Hardware stack levels required when called:    3
 10216 ;; This function calls:
 10217 ;;		Nothing
 10218 ;; This function is called by:
 10219 ;;		_App_MainTask
 10220 ;; This function uses a non-reentrant model
 10221 ;;
 10222                           
 10223                           
 10224                           ;psect for function _Mcu_ConfigPullUps
 10225  04A8                     _Mcu_ConfigPullUps:	
 10226                           
 10227                           ;incstack = 0
 10228                           ; Regs used in _Mcu_ConfigPullUps: [wreg+fsr1l+fsr1h+status,2+status,0]
 10229                           ;Mcu_ConfigPullUps@WpuCh stored from wreg
 10230  04A8  00F4               	movwf	Mcu_ConfigPullUps@WpuCh
 10231                           
 10232                           ;mcu_drv.c: 158: WPUA = 0x00;
 10233  04A9  0024               	movlb	4	; select bank4
 10234  04AA  018C               	clrf	12	;volatile
 10235                           
 10236                           ;mcu_drv.c: 159: WPUAbits.WPUA0 = WpuCh->WpuA0;
 10237  04AB  0874               	movf	Mcu_ConfigPullUps@WpuCh,w
 10238  04AC  0086               	movwf	6
 10239  04AD  0187               	clrf	7
 10240  04AE  0C01               	rrf	1,w
 10241  04AF  1C03               	skipc
 10242  04B0  100C               	bcf	12,0	;volatile
 10243  04B1  1803               	skipnc
 10244  04B2  140C               	bsf	12,0	;volatile
 10245                           
 10246                           ;mcu_drv.c: 160: WPUAbits.WPUA1 = WpuCh->WpuA1;
 10247  04B3  0A74               	incf	Mcu_ConfigPullUps@WpuCh,w
 10248  04B4  0086               	movwf	6
 10249  04B5  0187               	clrf	7
 10250  04B6  0C01               	rrf	1,w
 10251  04B7  1C03               	skipc
 10252  04B8  108C               	bcf	12,1	;volatile
 10253  04B9  1803               	skipnc
 10254  04BA  148C               	bsf	12,1	;volatile
 10255                           
 10256                           ;mcu_drv.c: 161: WPUAbits.WPUA2 = WpuCh->WpuA2;
 10257  04BB  0874               	movf	Mcu_ConfigPullUps@WpuCh,w
 10258  04BC  3E02               	addlw	2
 10259  04BD  0086               	movwf	6
 10260  04BE  0187               	clrf	7
 10261  04BF  0C01               	rrf	1,w
 10262  04C0  1C03               	skipc
 10263  04C1  110C               	bcf	12,2	;volatile
 10264  04C2  1803               	skipnc
 10265  04C3  150C               	bsf	12,2	;volatile
 10266                           
 10267                           ;mcu_drv.c: 162: WPUAbits.WPUA3 = WpuCh->WpuA3;
 10268  04C4  0874               	movf	Mcu_ConfigPullUps@WpuCh,w
 10269  04C5  3E03               	addlw	3
 10270  04C6  0086               	movwf	6
 10271  04C7  0187               	clrf	7
 10272  04C8  0C01               	rrf	1,w
 10273  04C9  1C03               	skipc
 10274  04CA  118C               	bcf	12,3	;volatile
 10275  04CB  1803               	skipnc
 10276  04CC  158C               	bsf	12,3	;volatile
 10277                           
 10278                           ;mcu_drv.c: 163: WPUAbits.WPUA4 = WpuCh->WpuA4;
 10279  04CD  0874               	movf	Mcu_ConfigPullUps@WpuCh,w
 10280  04CE  3E04               	addlw	4
 10281  04CF  0086               	movwf	6
 10282  04D0  0187               	clrf	7
 10283  04D1  0C01               	rrf	1,w
 10284  04D2  1C03               	skipc
 10285  04D3  120C               	bcf	12,4	;volatile
 10286  04D4  1803               	skipnc
 10287  04D5  160C               	bsf	12,4	;volatile
 10288                           
 10289                           ;mcu_drv.c: 164: WPUAbits.WPUA5 = WpuCh->WpuA5;
 10290  04D6  0874               	movf	Mcu_ConfigPullUps@WpuCh,w
 10291  04D7  3E05               	addlw	5
 10292  04D8  0086               	movwf	6
 10293  04D9  0187               	clrf	7
 10294  04DA  0C01               	rrf	1,w
 10295  04DB  1C03               	skipc
 10296  04DC  128C               	bcf	12,5	;volatile
 10297  04DD  1803               	skipnc
 10298  04DE  168C               	bsf	12,5	;volatile
 10299                           
 10300                           ;mcu_drv.c: 168: WPUB = 0x00;
 10301  04DF  018D               	clrf	13	;volatile
 10302                           
 10303                           ;mcu_drv.c: 169: WPUBbits.WPUB4 = WpuCh->WpuB4;
 10304  04E0  0874               	movf	Mcu_ConfigPullUps@WpuCh,w
 10305  04E1  3E06               	addlw	6
 10306  04E2  0086               	movwf	6
 10307  04E3  0187               	clrf	7
 10308  04E4  0C01               	rrf	1,w
 10309  04E5  1C03               	skipc
 10310  04E6  120D               	bcf	13,4	;volatile
 10311  04E7  1803               	skipnc
 10312  04E8  160D               	bsf	13,4	;volatile
 10313                           
 10314                           ;mcu_drv.c: 170: WPUBbits.WPUB5 = WpuCh->WpuB5;
 10315  04E9  0874               	movf	Mcu_ConfigPullUps@WpuCh,w
 10316  04EA  3E07               	addlw	7
 10317  04EB  0086               	movwf	6
 10318  04EC  0187               	clrf	7
 10319  04ED  0C01               	rrf	1,w
 10320  04EE  1C03               	skipc
 10321  04EF  128D               	bcf	13,5	;volatile
 10322  04F0  1803               	skipnc
 10323  04F1  168D               	bsf	13,5	;volatile
 10324                           
 10325                           ;mcu_drv.c: 171: WPUBbits.WPUB6 = WpuCh->WpuB6;
 10326  04F2  0874               	movf	Mcu_ConfigPullUps@WpuCh,w
 10327  04F3  3E08               	addlw	8
 10328  04F4  0086               	movwf	6
 10329  04F5  0187               	clrf	7
 10330  04F6  0C01               	rrf	1,w
 10331  04F7  1C03               	skipc
 10332  04F8  130D               	bcf	13,6	;volatile
 10333  04F9  1803               	skipnc
 10334  04FA  170D               	bsf	13,6	;volatile
 10335                           
 10336                           ;mcu_drv.c: 172: WPUBbits.WPUB7 = WpuCh->WpuB7;
 10337  04FB  0874               	movf	Mcu_ConfigPullUps@WpuCh,w
 10338  04FC  3E09               	addlw	9
 10339  04FD  0086               	movwf	6
 10340  04FE  0187               	clrf	7
 10341  04FF  0C01               	rrf	1,w
 10342  0500  1C03               	skipc
 10343  0501  138D               	bcf	13,7	;volatile
 10344  0502  1803               	skipnc
 10345  0503  178D               	bsf	13,7	;volatile
 10346                           
 10347                           ;mcu_drv.c: 176: WPUC = 0x00;
 10348  0504  018E               	clrf	14	;volatile
 10349                           
 10350                           ;mcu_drv.c: 177: WPUCbits.WPUC0 = WpuCh->WpuC0;
 10351  0505  0874               	movf	Mcu_ConfigPullUps@WpuCh,w
 10352  0506  3E0A               	addlw	10
 10353  0507  0086               	movwf	6
 10354  0508  0187               	clrf	7
 10355  0509  0C01               	rrf	1,w
 10356  050A  1C03               	skipc
 10357  050B  100E               	bcf	14,0	;volatile
 10358  050C  1803               	skipnc
 10359  050D  140E               	bsf	14,0	;volatile
 10360                           
 10361                           ;mcu_drv.c: 178: WPUCbits.WPUC1 = WpuCh->WpuC1;
 10362  050E  0874               	movf	Mcu_ConfigPullUps@WpuCh,w
 10363  050F  3E0B               	addlw	11
 10364  0510  0086               	movwf	6
 10365  0511  0187               	clrf	7
 10366  0512  0C01               	rrf	1,w
 10367  0513  1C03               	skipc
 10368  0514  108E               	bcf	14,1	;volatile
 10369  0515  1803               	skipnc
 10370  0516  148E               	bsf	14,1	;volatile
 10371                           
 10372                           ;mcu_drv.c: 179: WPUCbits.WPUC2 = WpuCh->WpuC2;
 10373  0517  0874               	movf	Mcu_ConfigPullUps@WpuCh,w
 10374  0518  3E0C               	addlw	12
 10375  0519  0086               	movwf	6
 10376  051A  0187               	clrf	7
 10377  051B  0C01               	rrf	1,w
 10378  051C  1C03               	skipc
 10379  051D  110E               	bcf	14,2	;volatile
 10380  051E  1803               	skipnc
 10381  051F  150E               	bsf	14,2	;volatile
 10382                           
 10383                           ;mcu_drv.c: 180: WPUCbits.WPUC3 = WpuCh->WpuC3;
 10384  0520  0874               	movf	Mcu_ConfigPullUps@WpuCh,w
 10385  0521  3E0D               	addlw	13
 10386  0522  0086               	movwf	6
 10387  0523  0187               	clrf	7
 10388  0524  0C01               	rrf	1,w
 10389  0525  1C03               	skipc
 10390  0526  118E               	bcf	14,3	;volatile
 10391  0527  1803               	skipnc
 10392  0528  158E               	bsf	14,3	;volatile
 10393                           
 10394                           ;mcu_drv.c: 181: WPUCbits.WPUC4 = WpuCh->WpuC4;
 10395  0529  0874               	movf	Mcu_ConfigPullUps@WpuCh,w
 10396  052A  3E0E               	addlw	14
 10397  052B  0086               	movwf	6
 10398  052C  0187               	clrf	7
 10399  052D  0C01               	rrf	1,w
 10400  052E  1C03               	skipc
 10401  052F  120E               	bcf	14,4	;volatile
 10402  0530  1803               	skipnc
 10403  0531  160E               	bsf	14,4	;volatile
 10404                           
 10405                           ;mcu_drv.c: 182: WPUCbits.WPUC5 = WpuCh->WpuC5;
 10406  0532  0874               	movf	Mcu_ConfigPullUps@WpuCh,w
 10407  0533  3E0F               	addlw	15
 10408  0534  0086               	movwf	6
 10409  0535  0187               	clrf	7
 10410  0536  0C01               	rrf	1,w
 10411  0537  1C03               	skipc
 10412  0538  128E               	bcf	14,5	;volatile
 10413  0539  1803               	skipnc
 10414  053A  168E               	bsf	14,5	;volatile
 10415                           
 10416                           ;mcu_drv.c: 184: WPUCbits.WPUC6 = WpuCh->WpuC6;
 10417  053B  0874               	movf	Mcu_ConfigPullUps@WpuCh,w
 10418  053C  3E10               	addlw	16
 10419  053D  0086               	movwf	6
 10420  053E  0187               	clrf	7
 10421  053F  0C01               	rrf	1,w
 10422  0540  1C03               	skipc
 10423  0541  130E               	bcf	14,6	;volatile
 10424  0542  1803               	skipnc
 10425  0543  170E               	bsf	14,6	;volatile
 10426                           
 10427                           ;mcu_drv.c: 185: WPUCbits.WPUC7 = WpuCh->WpuC7;
 10428  0544  0874               	movf	Mcu_ConfigPullUps@WpuCh,w
 10429  0545  3E11               	addlw	17
 10430  0546  0086               	movwf	6
 10431  0547  0187               	clrf	7
 10432  0548  0C01               	rrf	1,w
 10433  0549  1C03               	skipc
 10434  054A  138E               	bcf	14,7	;volatile
 10435  054B  1803               	skipnc
 10436  054C  178E               	bsf	14,7	;volatile
 10437  054D  0008               	return
 10438  054E                     __end_of_Mcu_ConfigPullUps:	
 10439                           
 10440                           	psect	text46
 10441  0B1D                     __ptext46:	
 10442 ;; *************** function _AppSm *****************
 10443 ;; Defined at:
 10444 ;;		line 195 in file "../Source/c/04_App/sb310_app.c"
 10445 ;; Parameters:    Size  Location     Type
 10446 ;;		None
 10447 ;; Auto vars:     Size  Location     Type
 10448 ;;		None
 10449 ;; Return value:  Size  Location     Type
 10450 ;;                  1    wreg      void 
 10451 ;; Registers used:
 10452 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10453 ;; Tracked objects:
 10454 ;;		On entry : 0/0
 10455 ;;		On exit  : 0/0
 10456 ;;		Unchanged: 0/0
 10457 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10458 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10459 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10460 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10461 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10462 ;;Total ram usage:        1 bytes
 10463 ;; Hardware stack levels used:    1
 10464 ;; Hardware stack levels required when called:    7
 10465 ;; This function calls:
 10466 ;;		_GenerateEvt
 10467 ;;		_ManageProtocol
 10468 ;;		_StdS_SetI2cAddress
 10469 ;; This function is called by:
 10470 ;;		_App_MainTask
 10471 ;; This function uses a non-reentrant model
 10472 ;;
 10473                           
 10474                           
 10475                           ;psect for function _AppSm
 10476  0B1D                     _AppSm:	
 10477                           
 10478                           ;sb310_app.c: 197: static AppStateType AppState = WaitWpuSetState;
 10479                           ;sb310_app.c: 198: static UINT8 WpuSetCounter = 0;
 10480                           ;sb310_app.c: 200: switch (AppState)
 10481                           
 10482                           ;incstack = 0
 10483                           ; Regs used in _AppSm: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 10484  0B1D  2B3B               	goto	l4413
 10485  0B1E                     l4397:	
 10486                           ;sb310_app.c: 201: {
 10487                           ;sb310_app.c: 202: case WaitWpuSetState:
 10488                           
 10489                           
 10490                           ;sb310_app.c: 204: WpuSetCounter++;
 10491  0B1E  3001               	movlw	1
 10492  0B1F  0020               	movlb	0	; select bank0
 10493  0B20  00BD               	movwf	??_AppSm
 10494  0B21  083D               	movf	??_AppSm,w
 10495  0B22  0021               	movlb	1	; select bank1
 10496  0B23  07BB               	addwf	AppSm@WpuSetCounter^(0+128),f
 10497                           
 10498                           ;sb310_app.c: 206: if (WpuSetCounter >= ((UINT16)(100)/((UINT16)(10))))
 10499  0B24  300A               	movlw	10
 10500  0B25  023B               	subwf	AppSm@WpuSetCounter^(0+128),w
 10501  0B26  1C03               	skipc
 10502  0B27  0008               	return
 10503                           
 10504                           ;sb310_app.c: 207: {
 10505                           ;sb310_app.c: 209: StdS_SetI2cAddress();
 10506  0B28  318C  2430         	fcall	_StdS_SetI2cAddress
 10507                           
 10508                           ;sb310_app.c: 211: AppState = SendI2cAddrState;
 10509  0B2A  0021               	movlb	1	; select bank1
 10510  0B2B  01BA               	clrf	AppSm@AppState^(0+128)
 10511  0B2C  0ABA               	incf	AppSm@AppState^(0+128),f
 10512                           
 10513                           ;sb310_app.c: 212: }
 10514                           ;sb310_app.c: 213: break;
 10515  0B2D  0008               	return
 10516  0B2E                     l4405:	
 10517                           ;sb310_app.c: 215: case SendI2cAddrState:
 10518                           
 10519                           
 10520                           ;sb310_app.c: 217: GenerateEvt(&I2cSetAddress);
 10521  0B2E  30E2               	movlw	(low (_I2cSetAddress| 0))& (0+255)
 10522  0B2F  318A  22AF         	fcall	_GenerateEvt
 10523                           
 10524                           ;sb310_app.c: 219: AppState = ManageProtocolState;
 10525  0B31  3002               	movlw	2
 10526  0B32  0020               	movlb	0	; select bank0
 10527  0B33  00BD               	movwf	??_AppSm
 10528  0B34  083D               	movf	??_AppSm,w
 10529  0B35  0021               	movlb	1	; select bank1
 10530  0B36  00BA               	movwf	AppSm@AppState^(0+128)
 10531                           
 10532                           ;sb310_app.c: 220: break;
 10533  0B37  0008               	return
 10534  0B38                     l4409:	
 10535                           ;sb310_app.c: 222: case ManageProtocolState:
 10536                           
 10537                           
 10538                           ;sb310_app.c: 224: ManageProtocol();
 10539  0B38  3185  254E         	fcall	_ManageProtocol
 10540                           
 10541                           ;sb310_app.c: 229: }
 10542                           
 10543                           ;sb310_app.c: 228: break;
 10544                           
 10545                           ;sb310_app.c: 227: default:
 10546                           
 10547                           ;sb310_app.c: 225: break;
 10548  0B3A  0008               	return
 10549  0B3B                     l4413:	
 10550  0B3B  0021               	movlb	1	; select bank1
 10551  0B3C  083A               	movf	AppSm@AppState^(0+128),w
 10552                           
 10553                           ; Switch size 1, requested type "space"
 10554                           ; Number of cases is 3, Range of values is 0 to 2
 10555                           ; switch strategies available:
 10556                           ; Name         Instructions Cycles
 10557                           ; simple_byte           10     6 (average)
 10558                           ; direct_byte           12     6 (fixed)
 10559                           ; jumptable            260     6 (fixed)
 10560                           ;	Chosen strategy is simple_byte
 10561  0B3D  3A00               	xorlw	0	; case 0
 10562  0B3E  1903               	skipnz
 10563  0B3F  2B1E               	goto	l4397
 10564  0B40  3A01               	xorlw	1	; case 1
 10565  0B41  1903               	skipnz
 10566  0B42  2B2E               	goto	l4405
 10567  0B43  3A03               	xorlw	3	; case 2
 10568  0B44  1903               	skipnz
 10569  0B45  2B38               	goto	l4409
 10570  0B46  2B47               	goto	l935
 10571  0B47                     l935:	
 10572  0B47  0008               	return
 10573  0B48                     __end_of_AppSm:	
 10574                           
 10575                           	psect	text47
 10576  0C30                     __ptext47:	
 10577 ;; *************** function _StdS_SetI2cAddress *****************
 10578 ;; Defined at:
 10579 ;;		line 317 in file "../../../Framework/MercuryFwk/Source/c/03_Sml/02_Ssl/std_ser.c"
 10580 ;; Parameters:    Size  Location     Type
 10581 ;;		None
 10582 ;; Auto vars:     Size  Location     Type
 10583 ;;		None
 10584 ;; Return value:  Size  Location     Type
 10585 ;;                  1    wreg      void 
 10586 ;; Registers used:
 10587 ;;		wreg, status,2, status,0
 10588 ;; Tracked objects:
 10589 ;;		On entry : 0/0
 10590 ;;		On exit  : 0/0
 10591 ;;		Unchanged: 0/0
 10592 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10593 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10594 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10595 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10596 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10597 ;;Total ram usage:        2 bytes
 10598 ;; Hardware stack levels used:    1
 10599 ;; Hardware stack levels required when called:    3
 10600 ;; This function calls:
 10601 ;;		Nothing
 10602 ;; This function is called by:
 10603 ;;		_AppSm
 10604 ;; This function uses a non-reentrant model
 10605 ;;
 10606                           
 10607                           
 10608                           ;psect for function _StdS_SetI2cAddress
 10609  0C30                     _StdS_SetI2cAddress:	
 10610                           
 10611                           ;std_ser.c: 321: I2cSlaveAddress |= (!PORTCbits.RC5 << 3);
 10612                           
 10613                           ;incstack = 0
 10614                           ; Regs used in _StdS_SetI2cAddress: [wreg+status,2+status,0]
 10615  0C30  1003               	clrc
 10616  0C31  0020               	movlb	0	; select bank0
 10617  0C32  1E8E               	btfss	14,5	;volatile
 10618  0C33  1403               	setc
 10619  0C34  3000               	movlw	0
 10620  0C35  3D09               	addwfc	9,w
 10621  0C36  00F4               	movwf	??_StdS_SetI2cAddress
 10622  0C37  3002               	movlw	2
 10623  0C38                     u1695:	
 10624  0C38  35F4               	lslf	??_StdS_SetI2cAddress,f
 10625  0C39  3EFF               	addlw	-1
 10626  0C3A  1D03               	skipz
 10627  0C3B  2C38               	goto	u1695
 10628  0C3C  3574               	lslf	??_StdS_SetI2cAddress,w
 10629  0C3D  00F5               	movwf	??_StdS_SetI2cAddress+1
 10630  0C3E  0875               	movf	??_StdS_SetI2cAddress+1,w
 10631  0C3F  04F6               	iorwf	_I2cSlaveAddress,f
 10632                           
 10633                           ;std_ser.c: 322: I2cSlaveAddress |= (!PORTCbits.RC4 << 2);
 10634  0C40  1003               	clrc
 10635  0C41  1E0E               	btfss	14,4	;volatile
 10636  0C42  1403               	setc
 10637  0C43  3000               	movlw	0
 10638  0C44  3D09               	addwfc	9,w
 10639  0C45  00F4               	movwf	??_StdS_SetI2cAddress
 10640  0C46  3001               	movlw	1
 10641  0C47                     u1705:	
 10642  0C47  35F4               	lslf	??_StdS_SetI2cAddress,f
 10643  0C48  3EFF               	addlw	-1
 10644  0C49  1D03               	skipz
 10645  0C4A  2C47               	goto	u1705
 10646  0C4B  3574               	lslf	??_StdS_SetI2cAddress,w
 10647  0C4C  00F5               	movwf	??_StdS_SetI2cAddress+1
 10648  0C4D  0875               	movf	??_StdS_SetI2cAddress+1,w
 10649  0C4E  04F6               	iorwf	_I2cSlaveAddress,f
 10650                           
 10651                           ;std_ser.c: 323: I2cSlaveAddress |= (!PORTCbits.RC3 << 1);
 10652  0C4F  1003               	clrc
 10653  0C50  1D8E               	btfss	14,3	;volatile
 10654  0C51  1403               	setc
 10655  0C52  3000               	movlw	0
 10656  0C53  3D09               	addwfc	9,w
 10657  0C54  0709               	addwf	9,w
 10658  0C55  00F4               	movwf	??_StdS_SetI2cAddress
 10659  0C56  0874               	movf	??_StdS_SetI2cAddress,w
 10660  0C57  04F6               	iorwf	_I2cSlaveAddress,f
 10661                           
 10662                           ;std_ser.c: 324: I2cSlaveAddress |= (!PORTCbits.RC6 << 0);
 10663  0C58  1003               	clrc
 10664  0C59  1F0E               	btfss	14,6	;volatile
 10665  0C5A  1403               	setc
 10666  0C5B  3000               	movlw	0
 10667  0C5C  3D09               	addwfc	9,w
 10668  0C5D  00F4               	movwf	??_StdS_SetI2cAddress
 10669  0C5E  0874               	movf	??_StdS_SetI2cAddress,w
 10670  0C5F  04F6               	iorwf	_I2cSlaveAddress,f
 10671  0C60  0008               	return
 10672  0C61                     __end_of_StdS_SetI2cAddress:	
 10673                           
 10674                           	psect	text48
 10675  054E                     __ptext48:	
 10676 ;; *************** function _ManageProtocol *****************
 10677 ;; Defined at:
 10678 ;;		line 113 in file "../Source/c/04_App/sb310_app.c"
 10679 ;; Parameters:    Size  Location     Type
 10680 ;;		None
 10681 ;; Auto vars:     Size  Location     Type
 10682 ;;  DistanceCmSt    3   26[BANK0 ] unsigned char [3]
 10683 ;; Return value:  Size  Location     Type
 10684 ;;                  1    wreg      void 
 10685 ;; Registers used:
 10686 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10687 ;; Tracked objects:
 10688 ;;		On entry : 0/0
 10689 ;;		On exit  : 0/0
 10690 ;;		Unchanged: 0/0
 10691 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10692 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10693 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10694 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10695 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10696 ;;Total ram usage:        5 bytes
 10697 ;; Hardware stack levels used:    1
 10698 ;; Hardware stack levels required when called:    6
 10699 ;; This function calls:
 10700 ;;		_GenerateEvt
 10701 ;;		_ReceiveEvt
 10702 ;;		_StdS_ManageStdServices
 10703 ;;		_StringCopy
 10704 ;;		_utoa
 10705 ;; This function is called by:
 10706 ;;		_AppSm
 10707 ;; This function uses a non-reentrant model
 10708 ;;
 10709                           
 10710                           
 10711                           ;psect for function _ManageProtocol
 10712  054E                     _ManageProtocol:	
 10713                           
 10714                           ;sb310_app.c: 115: UINT8 DistanceCmStr[((UINT8)(3))];
 10715                           ;sb310_app.c: 118: if (ReceiveEvt(&I2cWriteRequest))
 10716                           
 10717                           ;incstack = 0
 10718                           ; Regs used in _ManageProtocol: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 10719  054E  30E4               	movlw	(low (_I2cWriteRequest| 0))& (0+255)
 10720  054F  318A  228E  3185   	fcall	_ReceiveEvt
 10721  0552  3A00               	xorlw	0
 10722  0553  1903               	skipnz
 10723  0554  0008               	return
 10724                           
 10725                           ;sb310_app.c: 119: {
 10726                           ;sb310_app.c: 121: StdS_ManageStdServices();
 10727  0555  3180  20AC  3185   	fcall	_StdS_ManageStdServices
 10728                           
 10729                           ;sb310_app.c: 123: switch (CmdBuffer[((UINT8)(0))])
 10730  0558  2DD8               	goto	l4233
 10731  0559                     l4197:	
 10732                           ;sb310_app.c: 124: {
 10733                           ;sb310_app.c: 125: case ((UINT8)(0x50)):
 10734                           
 10735                           
 10736                           ;sb310_app.c: 127: GenerateEvt(&StartMeasure);
 10737  0559  30EC               	movlw	(low (_StartMeasure| 0))& (0+255)
 10738  055A  318A  22AF         	fcall	_GenerateEvt
 10739                           
 10740                           ;sb310_app.c: 128: break;
 10741  055C  0008               	return
 10742  055D                     l4199:	
 10743                           ;sb310_app.c: 130: case ((UINT8)(0x60)):
 10744                           
 10745                           
 10746                           ;sb310_app.c: 132: RepBuffer[((UINT8)(0))] = (UINT8)((DistanceCm & 0xFF00) >> 8);
 10747  055D  0020               	movlb	0	; select bank0
 10748  055E  0866               	movf	_DistanceCm+1,w
 10749  055F  00B8               	movwf	??_ManageProtocol
 10750  0560  0838               	movf	??_ManageProtocol,w
 10751  0561  0023               	movlb	3	; select bank3
 10752  0562  00A0               	movwf	_RepBuffer^(0+384)
 10753                           
 10754                           ;sb310_app.c: 133: RepBuffer[((UINT8)(1))] = (UINT8)(DistanceCm & 0x00FF);
 10755  0563  0020               	movlb	0	; select bank0
 10756  0564  0865               	movf	_DistanceCm,w
 10757  0565  00B8               	movwf	??_ManageProtocol
 10758  0566  0838               	movf	??_ManageProtocol,w
 10759  0567  0023               	movlb	3	; select bank3
 10760  0568  00A1               	movwf	(_RepBuffer^(0+384)+1)
 10761                           
 10762                           ;sb310_app.c: 135: RepBufferLen = ((UINT8)(2));
 10763  0569  3002               	movlw	2
 10764  056A  0020               	movlb	0	; select bank0
 10765  056B  00B8               	movwf	??_ManageProtocol
 10766  056C  0838               	movf	??_ManageProtocol,w
 10767  056D  0021               	movlb	1	; select bank1
 10768  056E  00C1               	movwf	_RepBufferLen^(0+128)
 10769                           
 10770                           ;sb310_app.c: 137: GenerateEvt(&I2cReplyPacketReady);
 10771  056F  3077               	movlw	(low (_I2cReplyPacketReady| 0))& (0+255)
 10772  0570  318A  22AF         	fcall	_GenerateEvt
 10773                           
 10774                           ;sb310_app.c: 138: break;
 10775  0572  0008               	return
 10776  0573                     l4207:	
 10777                           ;sb310_app.c: 140: case ((UINT8)(0x61)):
 10778                           
 10779                           
 10780                           ;sb310_app.c: 142: utoa(DistanceCmStr,DistanceCm,10);
 10781  0573  0020               	movlb	0	; select bank0
 10782  0574  0866               	movf	_DistanceCm+1,w
 10783  0575  00A8               	movwf	utoa@val+1
 10784  0576  0865               	movf	_DistanceCm,w
 10785  0577  00A7               	movwf	utoa@val
 10786  0578  300A               	movlw	10
 10787  0579  00A9               	movwf	utoa@base
 10788  057A  3000               	movlw	0
 10789  057B  00AA               	movwf	utoa@base+1
 10790  057C  303A               	movlw	(low (ManageProtocol@DistanceCmStr| 0))& (0+255)
 10791  057D  318E  26D2  3185   	fcall	_utoa
 10792                           
 10793                           ;sb310_app.c: 144: StringCopy(DistanceCmStr,RepBuffer,((UINT8)(3)));
 10794  0580  303A               	movlw	low ManageProtocol@DistanceCmStr
 10795  0581  0020               	movlb	0	; select bank0
 10796  0582  00A0               	movwf	StringCopy@SourceStr
 10797  0583  3000               	movlw	high ManageProtocol@DistanceCmStr
 10798  0584  00A1               	movwf	StringCopy@SourceStr+1
 10799  0585  30A0               	movlw	(low (_RepBuffer| (0+256)))& (0+255)
 10800  0586  00B8               	movwf	??_ManageProtocol
 10801  0587  0838               	movf	??_ManageProtocol,w
 10802  0588  00A2               	movwf	StringCopy@DestStr
 10803  0589  3003               	movlw	3
 10804  058A  00B9               	movwf	??_ManageProtocol+1
 10805  058B  0839               	movf	??_ManageProtocol+1,w
 10806  058C  00A3               	movwf	StringCopy@Len
 10807  058D  318A  22D1  3185   	fcall	_StringCopy
 10808                           
 10809                           ;sb310_app.c: 145: if (DistanceCm < 10)
 10810  0590  3000               	movlw	0
 10811  0591  0020               	movlb	0	; select bank0
 10812  0592  0266               	subwf	_DistanceCm+1,w
 10813  0593  300A               	movlw	10
 10814  0594  1903               	skipnz
 10815  0595  0265               	subwf	_DistanceCm,w
 10816  0596  1803               	skipnc
 10817  0597  2DA1               	goto	l4215
 10818                           
 10819                           ;sb310_app.c: 146: {
 10820                           ;sb310_app.c: 147: RepBuffer[2] = RepBuffer[0];
 10821  0598  0023               	movlb	3	; select bank3
 10822  0599  0820               	movf	_RepBuffer^(0+384),w
 10823  059A  0020               	movlb	0	; select bank0
 10824  059B  00B8               	movwf	??_ManageProtocol
 10825  059C  0838               	movf	??_ManageProtocol,w
 10826  059D  0023               	movlb	3	; select bank3
 10827  059E  00A2               	movwf	(_RepBuffer^(0+384)+2)
 10828                           
 10829                           ;sb310_app.c: 148: RepBuffer[1] = '0';
 10830  059F  3030               	movlw	48
 10831  05A0  2DB1               	goto	L11
 10832  05A1                     l4215:	
 10833                           ;sb310_app.c: 150: }
 10834                           
 10835                           ;sb310_app.c: 149: RepBuffer[0] = '0';
 10836                           
 10837                           
 10838                           ;sb310_app.c: 151: else if (DistanceCm < 100)
 10839  05A1  3000               	movlw	0
 10840  05A2  0020               	movlb	0	; select bank0
 10841  05A3  0266               	subwf	_DistanceCm+1,w
 10842  05A4  3064               	movlw	100
 10843  05A5  1903               	skipnz
 10844  05A6  0265               	subwf	_DistanceCm,w
 10845  05A7  1803               	skipnc
 10846  05A8  2DBC               	goto	l913
 10847                           
 10848                           ;sb310_app.c: 152: {
 10849                           ;sb310_app.c: 153: RepBuffer[2] = RepBuffer[1];
 10850  05A9  0023               	movlb	3	; select bank3
 10851  05AA  0821               	movf	(_RepBuffer^(0+384)+1),w
 10852  05AB  0020               	movlb	0	; select bank0
 10853  05AC  00B8               	movwf	??_ManageProtocol
 10854  05AD  0838               	movf	??_ManageProtocol,w
 10855  05AE  0023               	movlb	3	; select bank3
 10856  05AF  00A2               	movwf	(_RepBuffer^(0+384)+2)
 10857                           
 10858                           ;sb310_app.c: 154: RepBuffer[1] = RepBuffer[0];
 10859  05B0  0820               	movf	_RepBuffer^(0+384),w
 10860  05B1                     L11:	
 10861  05B1  0020               	movlb	0	; select bank0
 10862  05B2  00B8               	movwf	??_ManageProtocol
 10863  05B3  0838               	movf	??_ManageProtocol,w
 10864  05B4  0023               	movlb	3	; select bank3
 10865  05B5  00A1               	movwf	(_RepBuffer^(0+384)+1)
 10866                           
 10867                           ;sb310_app.c: 155: RepBuffer[0] = '0';
 10868  05B6  3030               	movlw	48
 10869  05B7  0020               	movlb	0	; select bank0
 10870  05B8  00B8               	movwf	??_ManageProtocol
 10871  05B9  0838               	movf	??_ManageProtocol,w
 10872  05BA  0023               	movlb	3	; select bank3
 10873  05BB  00A0               	movwf	_RepBuffer^(0+384)
 10874  05BC                     l913:	
 10875                           
 10876                           ;sb310_app.c: 156: }
 10877                           ;sb310_app.c: 158: RepBufferLen = ((UINT8)(3));
 10878  05BC  3003               	movlw	3
 10879  05BD  0020               	movlb	0	; select bank0
 10880  05BE  00B8               	movwf	??_ManageProtocol
 10881  05BF  0838               	movf	??_ManageProtocol,w
 10882  05C0  0021               	movlb	1	; select bank1
 10883  05C1  00C1               	movwf	_RepBufferLen^(0+128)
 10884                           
 10885                           ;sb310_app.c: 160: GenerateEvt(&I2cReplyPacketReady);
 10886  05C2  3077               	movlw	(low (_I2cReplyPacketReady| 0))& (0+255)
 10887  05C3  318A  22AF         	fcall	_GenerateEvt
 10888                           
 10889                           ;sb310_app.c: 161: break;
 10890  05C5  0008               	return
 10891  05C6                     l4221:	
 10892                           ;sb310_app.c: 163: case ((UINT8)(0x51)):
 10893                           
 10894                           
 10895                           ;sb310_app.c: 165: if (CmdBuffer[((UINT8)(1))] == ((UINT8)(1)))
 10896  05C6  0024               	movlb	4	; select bank4
 10897  05C7  0321               	decf	(_CmdBuffer^(0+512)+1),w
 10898  05C8  1D03               	btfss	3,2
 10899  05C9  2DD1               	goto	l4227
 10900                           
 10901                           ;sb310_app.c: 166: {
 10902                           ;sb310_app.c: 167: AutomeasureOption = ((UINT8)(1));
 10903  05CA  0021               	movlb	1	; select bank1
 10904  05CB  01C0               	clrf	_AutomeasureOption^(0+128)
 10905  05CC  0AC0               	incf	_AutomeasureOption^(0+128),f
 10906                           
 10907                           ;sb310_app.c: 169: GenerateEvt(&StartMeasure);
 10908  05CD  30EC               	movlw	(low (_StartMeasure| 0))& (0+255)
 10909  05CE  318A  22AF         	fcall	_GenerateEvt
 10910                           
 10911                           ;sb310_app.c: 170: }
 10912  05D0  0008               	return
 10913  05D1                     l4227:	
 10914                           
 10915                           ;sb310_app.c: 171: else if (CmdBuffer[((UINT8)(1))] == ((UINT8)(0)))
 10916  05D1  0024               	movlb	4	; select bank4
 10917  05D2  0821               	movf	(_CmdBuffer^(0+512)+1),w
 10918  05D3  1D03               	btfss	3,2
 10919  05D4  0008               	return
 10920                           
 10921                           ;sb310_app.c: 172: {
 10922                           ;sb310_app.c: 173: AutomeasureOption = ((UINT8)(0));
 10923  05D5  0021               	movlb	1	; select bank1
 10924  05D6  01C0               	clrf	_AutomeasureOption^(0+128)
 10925                           
 10926                           ;sb310_app.c: 183: }
 10927                           
 10928                           ;sb310_app.c: 182: break;
 10929                           
 10930                           ;sb310_app.c: 181: default:
 10931                           
 10932                           ;sb310_app.c: 178: }
 10933                           ;sb310_app.c: 179: break;
 10934                           
 10935                           ;sb310_app.c: 175: else
 10936                           ;sb310_app.c: 176: {
 10937                           
 10938                           ;sb310_app.c: 174: }
 10939  05D7  0008               	return
 10940  05D8                     l4233:	
 10941  05D8  0024               	movlb	4	; select bank4
 10942  05D9  0820               	movf	_CmdBuffer^(0+512),w
 10943                           
 10944                           ; Switch size 1, requested type "space"
 10945                           ; Number of cases is 4, Range of values is 80 to 97
 10946                           ; switch strategies available:
 10947                           ; Name         Instructions Cycles
 10948                           ; simple_byte           13     7 (average)
 10949                           ; direct_byte           45     9 (fixed)
 10950                           ; jumptable            263     9 (fixed)
 10951                           ;	Chosen strategy is simple_byte
 10952  05DA  3A50               	xorlw	80	; case 80
 10953  05DB  1903               	skipnz
 10954  05DC  2D59               	goto	l4197
 10955  05DD  3A01               	xorlw	1	; case 81
 10956  05DE  1903               	skipnz
 10957  05DF  2DC6               	goto	l4221
 10958  05E0  3A31               	xorlw	49	; case 96
 10959  05E1  1903               	skipnz
 10960  05E2  2D5D               	goto	l4199
 10961  05E3  3A01               	xorlw	1	; case 97
 10962  05E4  1903               	skipnz
 10963  05E5  2D73               	goto	l4207
 10964  05E6  2DE8               	goto	l921
 10965  05E7  0008               	return
 10966  05E8                     l921:	
 10967  05E8  0008               	return
 10968  05E9                     __end_of_ManageProtocol:	
 10969                           
 10970                           	psect	text49
 10971  00AC                     __ptext49:	
 10972 ;; *************** function _StdS_ManageStdServices *****************
 10973 ;; Defined at:
 10974 ;;		line 212 in file "../../../Framework/MercuryFwk/Source/c/03_Sml/02_Ssl/std_ser.c"
 10975 ;; Parameters:    Size  Location     Type
 10976 ;;		None
 10977 ;; Auto vars:     Size  Location     Type
 10978 ;;  DieTempStr      4   18[BANK0 ] unsigned char [4]
 10979 ;;  DieTemp         2   22[BANK0 ] unsigned short 
 10980 ;; Return value:  Size  Location     Type
 10981 ;;                  1    wreg      void 
 10982 ;; Registers used:
 10983 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10984 ;; Tracked objects:
 10985 ;;		On entry : 0/0
 10986 ;;		On exit  : 0/0
 10987 ;;		Unchanged: 0/0
 10988 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10989 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10990 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10991 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10992 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10993 ;;Total ram usage:        8 bytes
 10994 ;; Hardware stack levels used:    1
 10995 ;; Hardware stack levels required when called:    5
 10996 ;; This function calls:
 10997 ;;		_BoardReset
 10998 ;;		_ControlLedDirect
 10999 ;;		_GenerateEvt
 11000 ;;		_GetDieTemperature
 11001 ;;		_LowPowerMode
 11002 ;;		_SetLedBehavSts
 11003 ;;		_StringCopy
 11004 ;;		_utoa
 11005 ;; This function is called by:
 11006 ;;		_ManageProtocol
 11007 ;; This function uses a non-reentrant model
 11008 ;;
 11009                           
 11010                           
 11011                           ;psect for function _StdS_ManageStdServices
 11012  00AC                     _StdS_ManageStdServices:	
 11013                           
 11014                           ;std_ser.c: 214: UINT16 DieTemp;
 11015                           ;std_ser.c: 215: UINT8 DieTempStr[4];
 11016                           ;std_ser.c: 218: switch (CmdBuffer[((UINT8)(0))])
 11017                           
 11018                           ;incstack = 0
 11019                           ; Regs used in _StdS_ManageStdServices: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 11020  00AC  297E               	goto	l4097
 11021  00AD                     l4041:	
 11022                           ;std_ser.c: 219: {
 11023                           ;std_ser.c: 220: case ((UINT8)(0x10)):
 11024                           
 11025                           
 11026                           ;std_ser.c: 222: StringCopy((void*)("ECHO"),RepBuffer,((UINT8)(4)));
 11027  00AD  302C               	movlw	low (STR_2| (0+32768))
 11028  00AE  0020               	movlb	0	; select bank0
 11029  00AF  00A0               	movwf	StringCopy@SourceStr
 11030  00B0  3090               	movlw	high (STR_2| (0+32768))
 11031  00B1  00A1               	movwf	StringCopy@SourceStr+1
 11032  00B2  30A0               	movlw	(low (_RepBuffer| (0+256)))& (0+255)
 11033  00B3  00B0               	movwf	??_StdS_ManageStdServices
 11034  00B4  0830               	movf	??_StdS_ManageStdServices,w
 11035  00B5  00A2               	movwf	StringCopy@DestStr
 11036  00B6  3004               	movlw	4
 11037  00B7  00B1               	movwf	??_StdS_ManageStdServices+1
 11038  00B8  0831               	movf	??_StdS_ManageStdServices+1,w
 11039  00B9  00A3               	movwf	StringCopy@Len
 11040  00BA  318A  22D1  3180   	fcall	_StringCopy
 11041                           
 11042                           ;std_ser.c: 224: RepBufferLen = ((UINT8)(4));
 11043  00BD  3004               	movlw	4
 11044  00BE  0020               	movlb	0	; select bank0
 11045  00BF  00B0               	movwf	??_StdS_ManageStdServices
 11046  00C0  0830               	movf	??_StdS_ManageStdServices,w
 11047  00C1  0021               	movlb	1	; select bank1
 11048  00C2  00C1               	movwf	_RepBufferLen^(0+128)
 11049                           
 11050                           ;std_ser.c: 226: GenerateEvt(&I2cReplyPacketReady);
 11051  00C3  3077               	movlw	(low (_I2cReplyPacketReady| 0))& (0+255)
 11052  00C4  318A  22AF         	fcall	_GenerateEvt
 11053                           
 11054                           ;std_ser.c: 227: break;
 11055  00C6  0008               	return
 11056  00C7                     l4047:	
 11057                           ;std_ser.c: 229: case ((UINT8)(0x20)):
 11058                           
 11059                           
 11060                           ;std_ser.c: 231: StringCopy((void*)"SB310",RepBuffer,((UINT8)(5)));
 11061  00C7  3026               	movlw	low (STR_3| (0+32768))
 11062  00C8  0020               	movlb	0	; select bank0
 11063  00C9  00A0               	movwf	StringCopy@SourceStr
 11064  00CA  3090               	movlw	high (STR_3| (0+32768))
 11065  00CB  00A1               	movwf	StringCopy@SourceStr+1
 11066  00CC  30A0               	movlw	(low (_RepBuffer| (0+256)))& (0+255)
 11067  00CD  00B0               	movwf	??_StdS_ManageStdServices
 11068  00CE  0830               	movf	??_StdS_ManageStdServices,w
 11069  00CF  00A2               	movwf	StringCopy@DestStr
 11070  00D0  3005               	movlw	5
 11071  00D1  00B1               	movwf	??_StdS_ManageStdServices+1
 11072  00D2  0831               	movf	??_StdS_ManageStdServices+1,w
 11073  00D3  00A3               	movwf	StringCopy@Len
 11074  00D4  318A  22D1  3180   	fcall	_StringCopy
 11075                           
 11076                           ;std_ser.c: 233: RepBufferLen = ((UINT8)(5));
 11077  00D7  3005               	movlw	5
 11078  00D8  0020               	movlb	0	; select bank0
 11079  00D9  00B0               	movwf	??_StdS_ManageStdServices
 11080  00DA  0830               	movf	??_StdS_ManageStdServices,w
 11081  00DB  0021               	movlb	1	; select bank1
 11082  00DC  00C1               	movwf	_RepBufferLen^(0+128)
 11083                           
 11084                           ;std_ser.c: 235: GenerateEvt(&I2cReplyPacketReady);
 11085  00DD  3077               	movlw	(low (_I2cReplyPacketReady| 0))& (0+255)
 11086  00DE  318A  22AF         	fcall	_GenerateEvt
 11087                           
 11088                           ;std_ser.c: 236: break;
 11089  00E0  0008               	return
 11090  00E1                     l4053:	
 11091                           ;std_ser.c: 238: case ((UINT8)(0x21)):
 11092                           
 11093                           
 11094                           ;std_ser.c: 240: StringCopy((void*)"01.01.00",RepBuffer,((UINT8)(8)));
 11095  00E1  300C               	movlw	low (STR_4| (0+32768))
 11096  00E2  0020               	movlb	0	; select bank0
 11097  00E3  00A0               	movwf	StringCopy@SourceStr
 11098  00E4  3090               	movlw	high (STR_4| (0+32768))
 11099  00E5  00A1               	movwf	StringCopy@SourceStr+1
 11100  00E6  30A0               	movlw	(low (_RepBuffer| (0+256)))& (0+255)
 11101  00E7  00B0               	movwf	??_StdS_ManageStdServices
 11102  00E8  0830               	movf	??_StdS_ManageStdServices,w
 11103  00E9  00A2               	movwf	StringCopy@DestStr
 11104  00EA  3008               	movlw	8
 11105  00EB  00B1               	movwf	??_StdS_ManageStdServices+1
 11106  00EC  0831               	movf	??_StdS_ManageStdServices+1,w
 11107  00ED  00A3               	movwf	StringCopy@Len
 11108  00EE  318A  22D1  3180   	fcall	_StringCopy
 11109                           
 11110                           ;std_ser.c: 242: RepBufferLen = ((UINT8)(8));
 11111  00F1  3008               	movlw	8
 11112  00F2  0020               	movlb	0	; select bank0
 11113  00F3  00B0               	movwf	??_StdS_ManageStdServices
 11114  00F4  0830               	movf	??_StdS_ManageStdServices,w
 11115  00F5  0021               	movlb	1	; select bank1
 11116  00F6  00C1               	movwf	_RepBufferLen^(0+128)
 11117                           
 11118                           ;std_ser.c: 244: GenerateEvt(&I2cReplyPacketReady);
 11119  00F7  3077               	movlw	(low (_I2cReplyPacketReady| 0))& (0+255)
 11120  00F8  318A  22AF         	fcall	_GenerateEvt
 11121                           
 11122                           ;std_ser.c: 245: break;
 11123  00FA  0008               	return
 11124  00FB                     l4059:	
 11125                           ;std_ser.c: 247: case ((UINT8)(0x22)):
 11126                           
 11127                           
 11128                           ;std_ser.c: 249: StringCopy((void*)"01.02.00",RepBuffer,((UINT8)(8)));
 11129  00FB  3015               	movlw	low (STR_5| (0+32768))
 11130  00FC  0020               	movlb	0	; select bank0
 11131  00FD  00A0               	movwf	StringCopy@SourceStr
 11132  00FE  3090               	movlw	high (STR_5| (0+32768))
 11133  00FF  00A1               	movwf	StringCopy@SourceStr+1
 11134  0100  30A0               	movlw	(low (_RepBuffer| (0+256)))& (0+255)
 11135  0101  00B0               	movwf	??_StdS_ManageStdServices
 11136  0102  0830               	movf	??_StdS_ManageStdServices,w
 11137  0103  00A2               	movwf	StringCopy@DestStr
 11138  0104  3008               	movlw	8
 11139  0105  00B1               	movwf	??_StdS_ManageStdServices+1
 11140  0106  0831               	movf	??_StdS_ManageStdServices+1,w
 11141  0107  00A3               	movwf	StringCopy@Len
 11142  0108  318A  22D1  3180   	fcall	_StringCopy
 11143                           
 11144                           ;std_ser.c: 251: RepBufferLen = ((UINT8)(8));
 11145  010B  3008               	movlw	8
 11146  010C  0020               	movlb	0	; select bank0
 11147  010D  00B0               	movwf	??_StdS_ManageStdServices
 11148  010E  0830               	movf	??_StdS_ManageStdServices,w
 11149  010F  0021               	movlb	1	; select bank1
 11150  0110  00C1               	movwf	_RepBufferLen^(0+128)
 11151                           
 11152                           ;std_ser.c: 253: GenerateEvt(&I2cReplyPacketReady);
 11153  0111  3077               	movlw	(low (_I2cReplyPacketReady| 0))& (0+255)
 11154  0112  318A  22AF         	fcall	_GenerateEvt
 11155                           
 11156                           ;std_ser.c: 255: break;
 11157  0114  0008               	return
 11158  0115                     l4065:	
 11159                           ;std_ser.c: 257: case ((UINT8)(0x30)):
 11160                           
 11161                           
 11162                           ;std_ser.c: 259: BoardReset();
 11163  0115  3188  2067         	fcall	_BoardReset
 11164                           
 11165                           ;std_ser.c: 260: break;
 11166  0117  0008               	return
 11167  0118                     l4067:	
 11168                           ;std_ser.c: 262: case ((UINT8)(0x31)):
 11169                           
 11170                           
 11171                           ;std_ser.c: 264: LowPowerMode();
 11172  0118  3187  27F2         	fcall	_LowPowerMode
 11173                           
 11174                           ;std_ser.c: 265: break;
 11175  011A  0008               	return
 11176  011B                     l4069:	
 11177                           ;std_ser.c: 267: case ((UINT8)(0x41)):
 11178                           
 11179                           
 11180                           ;std_ser.c: 269: SetLedBehavSts(CmdBuffer[((UINT8)(1))]);
 11181  011B  0024               	movlb	4	; select bank4
 11182  011C  0821               	movf	(_CmdBuffer^(0+512)+1),w
 11183  011D  318C  24FE         	fcall	_SetLedBehavSts
 11184                           
 11185                           ;std_ser.c: 270: break;
 11186  011F  0008               	return
 11187  0120                     l4071:	
 11188                           ;std_ser.c: 272: case ((UINT8)(0x42)):
 11189                           
 11190                           
 11191                           ;std_ser.c: 274: ControlLedDirect();
 11192  0120  3189  216B         	fcall	_ControlLedDirect
 11193                           
 11194                           ;std_ser.c: 275: break;
 11195  0122  0008               	return
 11196  0123                     l4073:	
 11197                           ;std_ser.c: 277: case ((UINT8)(0x45)):
 11198                           
 11199                           
 11200                           ;std_ser.c: 279: DieTemp = GetDieTemperature();
 11201  0123  318A  2202  3180   	fcall	_GetDieTemperature
 11202  0126  0020               	movlb	0	; select bank0
 11203  0127  0824               	movf	?_GetDieTemperature+1,w
 11204  0128  00B7               	movwf	StdS_ManageStdServices@DieTemp+1
 11205  0129  0823               	movf	?_GetDieTemperature,w
 11206  012A  00B6               	movwf	StdS_ManageStdServices@DieTemp
 11207                           
 11208                           ;std_ser.c: 281: RepBuffer[0] = ((DieTemp & 0xFF00) >> 8);
 11209  012B  0837               	movf	StdS_ManageStdServices@DieTemp+1,w
 11210  012C  00B0               	movwf	??_StdS_ManageStdServices
 11211  012D  0830               	movf	??_StdS_ManageStdServices,w
 11212  012E  0023               	movlb	3	; select bank3
 11213  012F  00A0               	movwf	_RepBuffer^(0+384)
 11214                           
 11215                           ;std_ser.c: 282: RepBuffer[1] = (DieTemp & 0x00FF);
 11216  0130  0020               	movlb	0	; select bank0
 11217  0131  0836               	movf	StdS_ManageStdServices@DieTemp,w
 11218  0132  00B0               	movwf	??_StdS_ManageStdServices
 11219  0133  0830               	movf	??_StdS_ManageStdServices,w
 11220  0134  0023               	movlb	3	; select bank3
 11221  0135  00A1               	movwf	(_RepBuffer^(0+384)+1)
 11222                           
 11223                           ;std_ser.c: 284: RepBufferLen = ((UINT8)(2));
 11224  0136  3002               	movlw	2
 11225  0137  0020               	movlb	0	; select bank0
 11226  0138  00B0               	movwf	??_StdS_ManageStdServices
 11227  0139  0830               	movf	??_StdS_ManageStdServices,w
 11228  013A  0021               	movlb	1	; select bank1
 11229  013B  00C1               	movwf	_RepBufferLen^(0+128)
 11230                           
 11231                           ;std_ser.c: 286: GenerateEvt(&I2cReplyPacketReady);
 11232  013C  3077               	movlw	(low (_I2cReplyPacketReady| 0))& (0+255)
 11233  013D  318A  22AF         	fcall	_GenerateEvt
 11234                           
 11235                           ;std_ser.c: 287: break;
 11236  013F  0008               	return
 11237  0140                     l4083:	
 11238                           ;std_ser.c: 289: case ((UINT8)(0x46)):
 11239                           
 11240                           
 11241                           ;std_ser.c: 291: DieTemp = GetDieTemperature();
 11242  0140  318A  2202  3180   	fcall	_GetDieTemperature
 11243  0143  0020               	movlb	0	; select bank0
 11244  0144  0824               	movf	?_GetDieTemperature+1,w
 11245  0145  00B7               	movwf	StdS_ManageStdServices@DieTemp+1
 11246  0146  0823               	movf	?_GetDieTemperature,w
 11247  0147  00B6               	movwf	StdS_ManageStdServices@DieTemp
 11248                           
 11249                           ;std_ser.c: 293: DieTemp = (DieTemp/8) - 40;
 11250  0148  0837               	movf	StdS_ManageStdServices@DieTemp+1,w
 11251  0149  00B1               	movwf	??_StdS_ManageStdServices+1
 11252  014A  0836               	movf	StdS_ManageStdServices@DieTemp,w
 11253  014B  00B0               	movwf	??_StdS_ManageStdServices
 11254  014C  36B1               	lsrf	??_StdS_ManageStdServices+1,f
 11255  014D  0CB0               	rrf	??_StdS_ManageStdServices,f
 11256  014E  36B1               	lsrf	??_StdS_ManageStdServices+1,f
 11257  014F  0CB0               	rrf	??_StdS_ManageStdServices,f
 11258  0150  36B1               	lsrf	??_StdS_ManageStdServices+1,f
 11259  0151  0CB0               	rrf	??_StdS_ManageStdServices,f
 11260  0152  0830               	movf	??_StdS_ManageStdServices,w
 11261  0153  3ED8               	addlw	216
 11262  0154  00B6               	movwf	StdS_ManageStdServices@DieTemp
 11263  0155  30FF               	movlw	255
 11264  0156  3D31               	addwfc	??_StdS_ManageStdServices+1,w
 11265  0157  00B7               	movwf	StdS_ManageStdServices@DieTemp+1
 11266                           
 11267                           ;std_ser.c: 295: utoa(DieTempStr,DieTemp,10);
 11268  0158  0837               	movf	StdS_ManageStdServices@DieTemp+1,w
 11269  0159  00A8               	movwf	utoa@val+1
 11270  015A  0836               	movf	StdS_ManageStdServices@DieTemp,w
 11271  015B  00A7               	movwf	utoa@val
 11272  015C  300A               	movlw	10
 11273  015D  00A9               	movwf	utoa@base
 11274  015E  3000               	movlw	0
 11275  015F  00AA               	movwf	utoa@base+1
 11276  0160  3032               	movlw	(low (StdS_ManageStdServices@DieTempStr| 0))& (0+255)
 11277  0161  318E  26D2  3180   	fcall	_utoa
 11278                           
 11279                           ;std_ser.c: 297: StringCopy(DieTempStr,RepBuffer,((UINT8)(2)));
 11280  0164  3032               	movlw	low StdS_ManageStdServices@DieTempStr
 11281  0165  0020               	movlb	0	; select bank0
 11282  0166  00A0               	movwf	StringCopy@SourceStr
 11283  0167  3000               	movlw	high StdS_ManageStdServices@DieTempStr
 11284  0168  00A1               	movwf	StringCopy@SourceStr+1
 11285  0169  30A0               	movlw	(low (_RepBuffer| (0+256)))& (0+255)
 11286  016A  00B0               	movwf	??_StdS_ManageStdServices
 11287  016B  0830               	movf	??_StdS_ManageStdServices,w
 11288  016C  00A2               	movwf	StringCopy@DestStr
 11289  016D  3002               	movlw	2
 11290  016E  00B1               	movwf	??_StdS_ManageStdServices+1
 11291  016F  0831               	movf	??_StdS_ManageStdServices+1,w
 11292  0170  00A3               	movwf	StringCopy@Len
 11293  0171  318A  22D1  3180   	fcall	_StringCopy
 11294                           
 11295                           ;std_ser.c: 299: RepBufferLen = ((UINT8)(2));
 11296  0174  3002               	movlw	2
 11297  0175  0020               	movlb	0	; select bank0
 11298  0176  00B0               	movwf	??_StdS_ManageStdServices
 11299  0177  0830               	movf	??_StdS_ManageStdServices,w
 11300  0178  0021               	movlb	1	; select bank1
 11301  0179  00C1               	movwf	_RepBufferLen^(0+128)
 11302                           
 11303                           ;std_ser.c: 301: GenerateEvt(&I2cReplyPacketReady);
 11304  017A  3077               	movlw	(low (_I2cReplyPacketReady| 0))& (0+255)
 11305  017B  318A  22AF         	fcall	_GenerateEvt
 11306                           
 11307                           ;std_ser.c: 306: }
 11308                           
 11309                           ;std_ser.c: 305: break;
 11310                           
 11311                           ;std_ser.c: 304: default:
 11312                           
 11313                           ;std_ser.c: 302: break;
 11314  017D  0008               	return
 11315  017E                     l4097:	
 11316  017E  0024               	movlb	4	; select bank4
 11317  017F  0820               	movf	_CmdBuffer^(0+512),w
 11318                           
 11319                           ; Switch size 1, requested type "space"
 11320                           ; Number of cases is 10, Range of values is 16 to 70
 11321                           ; switch strategies available:
 11322                           ; Name         Instructions Cycles
 11323                           ; simple_byte           31    16 (average)
 11324                           ; direct_byte          119     9 (fixed)
 11325                           ; jumptable            263     9 (fixed)
 11326                           ;	Chosen strategy is simple_byte
 11327  0180  3A10               	xorlw	16	; case 16
 11328  0181  1903               	skipnz
 11329  0182  28AD               	goto	l4041
 11330  0183  3A30               	xorlw	48	; case 32
 11331  0184  1903               	skipnz
 11332  0185  28C7               	goto	l4047
 11333  0186  3A01               	xorlw	1	; case 33
 11334  0187  1903               	skipnz
 11335  0188  28E1               	goto	l4053
 11336  0189  3A03               	xorlw	3	; case 34
 11337  018A  1903               	skipnz
 11338  018B  28FB               	goto	l4059
 11339  018C  3A12               	xorlw	18	; case 48
 11340  018D  1903               	skipnz
 11341  018E  2915               	goto	l4065
 11342  018F  3A01               	xorlw	1	; case 49
 11343  0190  1903               	skipnz
 11344  0191  2918               	goto	l4067
 11345  0192  3A70               	xorlw	112	; case 65
 11346  0193  1903               	skipnz
 11347  0194  291B               	goto	l4069
 11348  0195  3A03               	xorlw	3	; case 66
 11349  0196  1903               	skipnz
 11350  0197  2920               	goto	l4071
 11351  0198  3A07               	xorlw	7	; case 69
 11352  0199  1903               	skipnz
 11353  019A  2923               	goto	l4073
 11354  019B  3A03               	xorlw	3	; case 70
 11355  019C  1903               	skipnz
 11356  019D  2940               	goto	l4083
 11357  019E  299F               	goto	l802
 11358  019F                     l802:	
 11359  019F  0008               	return
 11360  01A0                     __end_of_StdS_ManageStdServices:	
 11361                           
 11362                           	psect	text50
 11363  0ED2                     __ptext50:	
 11364 ;; *************** function _utoa *****************
 11365 ;; Defined at:
 11366 ;;		line 17 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\itoa.c"
 11367 ;; Parameters:    Size  Location     Type
 11368 ;;  buf             1    wreg     PTR unsigned char 
 11369 ;;		 -> ManageProtocol@DistanceCmStr(3), StdS_ManageStdServices@DieTempStr(4), 
 11370 ;;  val             2    7[BANK0 ] unsigned int 
 11371 ;;  base            2    9[BANK0 ] int 
 11372 ;; Auto vars:     Size  Location     Type
 11373 ;;  buf             1   15[BANK0 ] PTR unsigned char 
 11374 ;;		 -> ManageProtocol@DistanceCmStr(3), StdS_ManageStdServices@DieTempStr(4), 
 11375 ;;  v               2   12[BANK0 ] unsigned int 
 11376 ;;  c               1   14[BANK0 ] unsigned char 
 11377 ;; Return value:  Size  Location     Type
 11378 ;;                  1    wreg      PTR unsigned char 
 11379 ;; Registers used:
 11380 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11381 ;; Tracked objects:
 11382 ;;		On entry : 0/0
 11383 ;;		On exit  : 0/0
 11384 ;;		Unchanged: 0/0
 11385 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11386 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11387 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11388 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11389 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11390 ;;Total ram usage:        9 bytes
 11391 ;; Hardware stack levels used:    1
 11392 ;; Hardware stack levels required when called:    4
 11393 ;; This function calls:
 11394 ;;		___lwdiv
 11395 ;;		___lwmod
 11396 ;; This function is called by:
 11397 ;;		_StdS_ManageStdServices
 11398 ;;		_ManageProtocol
 11399 ;; This function uses a non-reentrant model
 11400 ;;
 11401                           
 11402                           
 11403                           ;psect for function _utoa
 11404  0ED2                     _utoa:	
 11405                           
 11406                           ;incstack = 0
 11407                           ; Regs used in _utoa: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 11408                           ;utoa@buf stored from wreg
 11409  0ED2  0020               	movlb	0	; select bank0
 11410  0ED3  00AF               	movwf	utoa@buf
 11411  0ED4  0828               	movf	utoa@val+1,w
 11412  0ED5  00AD               	movwf	utoa@v+1
 11413  0ED6  0827               	movf	utoa@val,w
 11414  0ED7  00AC               	movwf	utoa@v
 11415  0ED8                     l3993:	
 11416  0ED8  082A               	movf	utoa@base+1,w
 11417  0ED9  00A1               	movwf	___lwdiv@divisor+1
 11418  0EDA  0829               	movf	utoa@base,w
 11419  0EDB  00A0               	movwf	___lwdiv@divisor
 11420  0EDC  082D               	movf	utoa@v+1,w
 11421  0EDD  00A3               	movwf	___lwdiv@dividend+1
 11422  0EDE  082C               	movf	utoa@v,w
 11423  0EDF  00A2               	movwf	___lwdiv@dividend
 11424  0EE0  318C  2492  318E   	fcall	___lwdiv
 11425  0EE3  0020               	movlb	0	; select bank0
 11426  0EE4  0821               	movf	?___lwdiv+1,w
 11427  0EE5  00AD               	movwf	utoa@v+1
 11428  0EE6  0820               	movf	?___lwdiv,w
 11429  0EE7  00AC               	movwf	utoa@v
 11430  0EE8  3001               	movlw	1
 11431  0EE9  00AB               	movwf	??_utoa
 11432  0EEA  082B               	movf	??_utoa,w
 11433  0EEB  07AF               	addwf	utoa@buf,f
 11434  0EEC  082C               	movf	utoa@v,w
 11435  0EED  042D               	iorwf	utoa@v+1,w
 11436  0EEE  1D03               	btfss	3,2
 11437  0EEF  2ED8               	goto	l3993
 11438  0EF0  082F               	movf	utoa@buf,w
 11439  0EF1  0086               	movwf	6
 11440  0EF2  0187               	clrf	7
 11441  0EF3  0181               	clrf	1
 11442  0EF4  3001               	movlw	1
 11443  0EF5  02AF               	subwf	utoa@buf,f
 11444  0EF6                     l4003:	
 11445  0EF6  082A               	movf	utoa@base+1,w
 11446  0EF7  00A1               	movwf	___lwmod@divisor+1
 11447  0EF8  0829               	movf	utoa@base,w
 11448  0EF9  00A0               	movwf	___lwmod@divisor
 11449  0EFA  0828               	movf	utoa@val+1,w
 11450  0EFB  00A3               	movwf	___lwmod@dividend+1
 11451  0EFC  0827               	movf	utoa@val,w
 11452  0EFD  00A2               	movwf	___lwmod@dividend
 11453  0EFE  318B  2374  318E   	fcall	___lwmod
 11454  0F01  0020               	movlb	0	; select bank0
 11455  0F02  0820               	movf	?___lwmod,w
 11456  0F03  00AB               	movwf	??_utoa
 11457  0F04  082B               	movf	??_utoa,w
 11458  0F05  00AE               	movwf	utoa@c
 11459  0F06  082A               	movf	utoa@base+1,w
 11460  0F07  00A1               	movwf	___lwdiv@divisor+1
 11461  0F08  0829               	movf	utoa@base,w
 11462  0F09  00A0               	movwf	___lwdiv@divisor
 11463  0F0A  0828               	movf	utoa@val+1,w
 11464  0F0B  00A3               	movwf	___lwdiv@dividend+1
 11465  0F0C  0827               	movf	utoa@val,w
 11466  0F0D  00A2               	movwf	___lwdiv@dividend
 11467  0F0E  318C  2492  318E   	fcall	___lwdiv
 11468  0F11  0020               	movlb	0	; select bank0
 11469  0F12  0821               	movf	?___lwdiv+1,w
 11470  0F13  00A8               	movwf	utoa@val+1
 11471  0F14  0820               	movf	?___lwdiv,w
 11472  0F15  00A7               	movwf	utoa@val
 11473  0F16  300A               	movlw	10
 11474  0F17  022E               	subwf	utoa@c,w
 11475  0F18  1C03               	skipc
 11476  0F19  2F1E               	goto	l1396
 11477  0F1A  3007               	movlw	7
 11478  0F1B  00AB               	movwf	??_utoa
 11479  0F1C  082B               	movf	??_utoa,w
 11480  0F1D  07AE               	addwf	utoa@c,f
 11481  0F1E                     l1396:	
 11482  0F1E  3030               	movlw	48
 11483  0F1F  00AB               	movwf	??_utoa
 11484  0F20  082B               	movf	??_utoa,w
 11485  0F21  07AE               	addwf	utoa@c,f
 11486  0F22  082E               	movf	utoa@c,w
 11487  0F23  00AB               	movwf	??_utoa
 11488  0F24  082F               	movf	utoa@buf,w
 11489  0F25  0086               	movwf	6
 11490  0F26  0187               	clrf	7
 11491  0F27  082B               	movf	??_utoa,w
 11492  0F28  0081               	movwf	1
 11493  0F29  3001               	movlw	1
 11494  0F2A  02AF               	subwf	utoa@buf,f
 11495  0F2B  0827               	movf	utoa@val,w
 11496  0F2C  0428               	iorwf	utoa@val+1,w
 11497  0F2D  1D03               	btfss	3,2
 11498  0F2E  2EF6               	goto	l4003
 11499                           
 11500                           ;	Return value of _utoa is never used
 11501  0F2F  3001               	movlw	1
 11502  0F30  00AB               	movwf	??_utoa
 11503  0F31  082B               	movf	??_utoa,w
 11504  0F32  07AF               	addwf	utoa@buf,f
 11505  0F33  0008               	return
 11506  0F34                     __end_of_utoa:	
 11507                           
 11508                           	psect	text51
 11509  0B74                     __ptext51:	
 11510 ;; *************** function ___lwmod *****************
 11511 ;; Defined at:
 11512 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\lwmod.c"
 11513 ;; Parameters:    Size  Location     Type
 11514 ;;  divisor         2    0[BANK0 ] unsigned int 
 11515 ;;  dividend        2    2[BANK0 ] unsigned int 
 11516 ;; Auto vars:     Size  Location     Type
 11517 ;;  counter         1    5[COMMON] unsigned char 
 11518 ;; Return value:  Size  Location     Type
 11519 ;;                  2    0[BANK0 ] unsigned int 
 11520 ;; Registers used:
 11521 ;;		wreg, status,2, status,0
 11522 ;; Tracked objects:
 11523 ;;		On entry : 0/0
 11524 ;;		On exit  : 0/0
 11525 ;;		Unchanged: 0/0
 11526 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11527 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11528 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11529 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11530 ;;      Totals:         2       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11531 ;;Total ram usage:        6 bytes
 11532 ;; Hardware stack levels used:    1
 11533 ;; Hardware stack levels required when called:    3
 11534 ;; This function calls:
 11535 ;;		Nothing
 11536 ;; This function is called by:
 11537 ;;		_utoa
 11538 ;; This function uses a non-reentrant model
 11539 ;;
 11540                           
 11541                           
 11542                           ;psect for function ___lwmod
 11543  0B74                     ___lwmod:	
 11544                           
 11545                           ;incstack = 0
 11546                           ; Regs used in ___lwmod: [wreg+status,2+status,0]
 11547  0B74  0020               	movlb	0	; select bank0
 11548  0B75  0820               	movf	___lwmod@divisor,w
 11549  0B76  0421               	iorwf	___lwmod@divisor+1,w
 11550  0B77  1903               	btfsc	3,2
 11551  0B78  2B9C               	goto	l3925
 11552  0B79  01F5               	clrf	___lwmod@counter
 11553  0B7A  0AF5               	incf	___lwmod@counter,f
 11554  0B7B                     l3915:	
 11555  0B7B  1BA1               	btfsc	___lwmod@divisor+1,7
 11556  0B7C  2B87               	goto	l3917
 11557  0B7D  3001               	movlw	1
 11558  0B7E                     u2705:	
 11559  0B7E  35A0               	lslf	___lwmod@divisor,f
 11560  0B7F  0DA1               	rlf	___lwmod@divisor+1,f
 11561  0B80  0B89               	decfsz	9,f
 11562  0B81  2B7E               	goto	u2705
 11563  0B82  3001               	movlw	1
 11564  0B83  00F4               	movwf	??___lwmod
 11565  0B84  0874               	movf	??___lwmod,w
 11566  0B85  07F5               	addwf	___lwmod@counter,f
 11567  0B86  2B7B               	goto	l3915
 11568  0B87                     l3917:	
 11569  0B87  0821               	movf	___lwmod@divisor+1,w
 11570  0B88  0223               	subwf	___lwmod@dividend+1,w
 11571  0B89  1D03               	skipz
 11572  0B8A  2B8D               	goto	u2725
 11573  0B8B  0820               	movf	___lwmod@divisor,w
 11574  0B8C  0222               	subwf	___lwmod@dividend,w
 11575  0B8D                     u2725:	
 11576  0B8D  1C03               	skipc
 11577  0B8E  2B93               	goto	l3921
 11578  0B8F  0820               	movf	___lwmod@divisor,w
 11579  0B90  02A2               	subwf	___lwmod@dividend,f
 11580  0B91  0821               	movf	___lwmod@divisor+1,w
 11581  0B92  3BA3               	subwfb	___lwmod@dividend+1,f
 11582  0B93                     l3921:	
 11583  0B93  3001               	movlw	1
 11584  0B94                     u2735:	
 11585  0B94  36A1               	lsrf	___lwmod@divisor+1,f
 11586  0B95  0CA0               	rrf	___lwmod@divisor,f
 11587  0B96  0B89               	decfsz	9,f
 11588  0B97  2B94               	goto	u2735
 11589  0B98  3001               	movlw	1
 11590  0B99  02F5               	subwf	___lwmod@counter,f
 11591  0B9A  1D03               	btfss	3,2
 11592  0B9B  2B87               	goto	l3917
 11593  0B9C                     l3925:	
 11594  0B9C  0823               	movf	___lwmod@dividend+1,w
 11595  0B9D  00A1               	movwf	?___lwmod+1
 11596  0B9E  0822               	movf	___lwmod@dividend,w
 11597  0B9F  00A0               	movwf	?___lwmod
 11598  0BA0  0008               	return
 11599  0BA1                     __end_of___lwmod:	
 11600                           
 11601                           	psect	text52
 11602  0C92                     __ptext52:	
 11603 ;; *************** function ___lwdiv *****************
 11604 ;; Defined at:
 11605 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\lwdiv.c"
 11606 ;; Parameters:    Size  Location     Type
 11607 ;;  divisor         2    0[BANK0 ] unsigned int 
 11608 ;;  dividend        2    2[BANK0 ] unsigned int 
 11609 ;; Auto vars:     Size  Location     Type
 11610 ;;  quotient        2    5[BANK0 ] unsigned int 
 11611 ;;  counter         1    4[BANK0 ] unsigned char 
 11612 ;; Return value:  Size  Location     Type
 11613 ;;                  2    0[BANK0 ] unsigned int 
 11614 ;; Registers used:
 11615 ;;		wreg, status,2, status,0
 11616 ;; Tracked objects:
 11617 ;;		On entry : 0/0
 11618 ;;		On exit  : 0/0
 11619 ;;		Unchanged: 0/0
 11620 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11621 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11622 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11623 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11624 ;;      Totals:         1       7       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11625 ;;Total ram usage:        8 bytes
 11626 ;; Hardware stack levels used:    1
 11627 ;; Hardware stack levels required when called:    3
 11628 ;; This function calls:
 11629 ;;		Nothing
 11630 ;; This function is called by:
 11631 ;;		_LedBlinkStateMachine
 11632 ;;		_LedPulseStateMachine
 11633 ;;		_utoa
 11634 ;; This function uses a non-reentrant model
 11635 ;;
 11636                           
 11637                           
 11638                           ;psect for function ___lwdiv
 11639  0C92                     ___lwdiv:	
 11640                           
 11641                           ;incstack = 0
 11642                           ; Regs used in ___lwdiv: [wreg+status,2+status,0]
 11643  0C92  0020               	movlb	0	; select bank0
 11644  0C93  01A5               	clrf	___lwdiv@quotient
 11645  0C94  01A6               	clrf	___lwdiv@quotient+1
 11646  0C95  0820               	movf	___lwdiv@divisor,w
 11647  0C96  0421               	iorwf	___lwdiv@divisor+1,w
 11648  0C97  1903               	btfsc	3,2
 11649  0C98  2CC2               	goto	l3903
 11650  0C99  01A4               	clrf	___lwdiv@counter
 11651  0C9A  0AA4               	incf	___lwdiv@counter,f
 11652  0C9B                     l3891:	
 11653  0C9B  1BA1               	btfsc	___lwdiv@divisor+1,7
 11654  0C9C  2CA7               	goto	l3893
 11655  0C9D  3001               	movlw	1
 11656  0C9E                     u2635:	
 11657  0C9E  35A0               	lslf	___lwdiv@divisor,f
 11658  0C9F  0DA1               	rlf	___lwdiv@divisor+1,f
 11659  0CA0  0B89               	decfsz	9,f
 11660  0CA1  2C9E               	goto	u2635
 11661  0CA2  3001               	movlw	1
 11662  0CA3  00F4               	movwf	??___lwdiv
 11663  0CA4  0874               	movf	??___lwdiv,w
 11664  0CA5  07A4               	addwf	___lwdiv@counter,f
 11665  0CA6  2C9B               	goto	l3891
 11666  0CA7                     l3893:	
 11667  0CA7  3001               	movlw	1
 11668  0CA8                     u2655:	
 11669  0CA8  35A5               	lslf	___lwdiv@quotient,f
 11670  0CA9  0DA6               	rlf	___lwdiv@quotient+1,f
 11671  0CAA  0B89               	decfsz	9,f
 11672  0CAB  2CA8               	goto	u2655
 11673  0CAC  0821               	movf	___lwdiv@divisor+1,w
 11674  0CAD  0223               	subwf	___lwdiv@dividend+1,w
 11675  0CAE  1D03               	skipz
 11676  0CAF  2CB2               	goto	u2665
 11677  0CB0  0820               	movf	___lwdiv@divisor,w
 11678  0CB1  0222               	subwf	___lwdiv@dividend,w
 11679  0CB2                     u2665:	
 11680  0CB2  1C03               	skipc
 11681  0CB3  2CB9               	goto	l3899
 11682  0CB4  0820               	movf	___lwdiv@divisor,w
 11683  0CB5  02A2               	subwf	___lwdiv@dividend,f
 11684  0CB6  0821               	movf	___lwdiv@divisor+1,w
 11685  0CB7  3BA3               	subwfb	___lwdiv@dividend+1,f
 11686  0CB8  1425               	bsf	___lwdiv@quotient,0
 11687  0CB9                     l3899:	
 11688  0CB9  3001               	movlw	1
 11689  0CBA                     u2675:	
 11690  0CBA  36A1               	lsrf	___lwdiv@divisor+1,f
 11691  0CBB  0CA0               	rrf	___lwdiv@divisor,f
 11692  0CBC  0B89               	decfsz	9,f
 11693  0CBD  2CBA               	goto	u2675
 11694  0CBE  3001               	movlw	1
 11695  0CBF  02A4               	subwf	___lwdiv@counter,f
 11696  0CC0  1D03               	btfss	3,2
 11697  0CC1  2CA7               	goto	l3893
 11698  0CC2                     l3903:	
 11699  0CC2  0826               	movf	___lwdiv@quotient+1,w
 11700  0CC3  00A1               	movwf	?___lwdiv+1
 11701  0CC4  0825               	movf	___lwdiv@quotient,w
 11702  0CC5  00A0               	movwf	?___lwdiv
 11703  0CC6  0008               	return
 11704  0CC7                     __end_of___lwdiv:	
 11705                           
 11706                           	psect	text53
 11707  0AD1                     __ptext53:	
 11708 ;; *************** function _StringCopy *****************
 11709 ;; Defined at:
 11710 ;;		line 104 in file "../../../Framework/MercuryFwk/Source/c/03_Sml/02_Ssl/sf.c"
 11711 ;; Parameters:    Size  Location     Type
 11712 ;;  SourceStr       2    0[BANK0 ] PTR unsigned char 
 11713 ;;		 -> ManageProtocol@DistanceCmStr(3), StdS_ManageStdServices@DieTempStr(4), STR_5(9), STR_4(9), 
 11714 ;;		 -> STR_3(6), STR_2(5), 
 11715 ;;  DestStr         1    2[BANK0 ] PTR unsigned char 
 11716 ;;		 -> RepBuffer(80), 
 11717 ;;  Len             1    3[BANK0 ] unsigned char 
 11718 ;; Auto vars:     Size  Location     Type
 11719 ;;  Index           1    4[COMMON] unsigned char 
 11720 ;; Return value:  Size  Location     Type
 11721 ;;                  1    wreg      void 
 11722 ;; Registers used:
 11723 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath
 11724 ;; Tracked objects:
 11725 ;;		On entry : 0/0
 11726 ;;		On exit  : 0/0
 11727 ;;		Unchanged: 0/0
 11728 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11729 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11730 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11731 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11732 ;;      Totals:         1       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11733 ;;Total ram usage:        9 bytes
 11734 ;; Hardware stack levels used:    1
 11735 ;; Hardware stack levels required when called:    3
 11736 ;; This function calls:
 11737 ;;		Nothing
 11738 ;; This function is called by:
 11739 ;;		_StdS_ManageStdServices
 11740 ;;		_ManageProtocol
 11741 ;; This function uses a non-reentrant model
 11742 ;;
 11743                           
 11744                           
 11745                           ;psect for function _StringCopy
 11746  0AD1                     _StringCopy:	
 11747                           
 11748                           ;sf.c: 106: UINT8 Index = 0;
 11749                           
 11750                           ;incstack = 0
 11751                           ; Regs used in _StringCopy: [wreg-fsr1h+status,2+status,0+pclath]
 11752  0AD1  01F4               	clrf	StringCopy@Index
 11753                           
 11754                           ;sf.c: 109: for (Index = 0; Index < Len; Index++)
 11755  0AD2  01F4               	clrf	StringCopy@Index
 11756  0AD3                     l3969:	
 11757  0AD3  0020               	movlb	0	; select bank0
 11758  0AD4  0823               	movf	StringCopy@Len,w
 11759  0AD5  0274               	subwf	StringCopy@Index,w
 11760  0AD6  1803               	btfsc	3,0
 11761  0AD7  0008               	return
 11762                           
 11763                           ;sf.c: 110: {
 11764                           ;sf.c: 111: DestStr[Index] = SourceStr[Index];
 11765  0AD8  0020               	movlb	0	; select bank0
 11766  0AD9  0821               	movf	StringCopy@SourceStr+1,w
 11767  0ADA  00A5               	movwf	??_StringCopy+1
 11768  0ADB  0820               	movf	StringCopy@SourceStr,w
 11769  0ADC  00A4               	movwf	??_StringCopy
 11770  0ADD  0874               	movf	StringCopy@Index,w
 11771  0ADE  0724               	addwf	??_StringCopy,w
 11772  0ADF  0084               	movwf	4
 11773  0AE0  0825               	movf	??_StringCopy+1,w
 11774  0AE1  1803               	skipnc
 11775  0AE2  0A25               	incf	??_StringCopy+1,w
 11776  0AE3  0085               	movwf	5
 11777  0AE4  0800               	movf	0,w	;code access
 11778  0AE5  00A6               	movwf	??_StringCopy+2
 11779  0AE6  0874               	movf	StringCopy@Index,w
 11780  0AE7  0722               	addwf	StringCopy@DestStr,w
 11781  0AE8  00A7               	movwf	??_StringCopy+3
 11782  0AE9  0827               	movf	??_StringCopy+3,w
 11783  0AEA  0086               	movwf	6
 11784  0AEB  3001               	movlw	1	; select bank2/3
 11785  0AEC  0087               	movwf	7
 11786  0AED  0826               	movf	??_StringCopy+2,w
 11787  0AEE  0081               	movwf	1
 11788  0AEF  3001               	movlw	1
 11789  0AF0  00A4               	movwf	??_StringCopy
 11790  0AF1  0824               	movf	??_StringCopy,w
 11791  0AF2  07F4               	addwf	StringCopy@Index,f
 11792  0AF3  2AD3               	goto	l3969
 11793  0AF4                     __end_of_StringCopy:	
 11794                           
 11795                           	psect	text54
 11796  0CFE                     __ptext54:	
 11797 ;; *************** function _SetLedBehavSts *****************
 11798 ;; Defined at:
 11799 ;;		line 76 in file "../../../Framework/MercuryFwk/Source/c/03_Sml/02_Ssl/std_ser.c"
 11800 ;; Parameters:    Size  Location     Type
 11801 ;;  LedBehav        1    wreg     unsigned char 
 11802 ;; Auto vars:     Size  Location     Type
 11803 ;;  LedBehav        1    5[BANK0 ] unsigned char 
 11804 ;; Return value:  Size  Location     Type
 11805 ;;                  1    wreg      void 
 11806 ;; Registers used:
 11807 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
 11808 ;; Tracked objects:
 11809 ;;		On entry : 0/0
 11810 ;;		On exit  : 0/0
 11811 ;;		Unchanged: 0/0
 11812 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11813 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11814 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11815 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11816 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11817 ;;Total ram usage:        2 bytes
 11818 ;; Hardware stack levels used:    1
 11819 ;; Hardware stack levels required when called:    4
 11820 ;; This function calls:
 11821 ;;		_Led_SetLedBlinkTime
 11822 ;;		_Led_SetLedPulseTime
 11823 ;;		_Led_SetLedStatus
 11824 ;; This function is called by:
 11825 ;;		_Led_MainTask
 11826 ;;		_StdS_ManageStdServices
 11827 ;; This function uses a non-reentrant model
 11828 ;;
 11829                           
 11830                           
 11831                           ;psect for function _SetLedBehavSts
 11832  0CFE                     _SetLedBehavSts:	
 11833                           
 11834                           ;incstack = 0
 11835                           ; Regs used in _SetLedBehavSts: [wreg-fsr0h+status,2+status,0+pclath+cstack]
 11836                           ;SetLedBehavSts@LedBehav stored from wreg
 11837  0CFE  0020               	movlb	0	; select bank0
 11838  0CFF  00A5               	movwf	SetLedBehavSts@LedBehav
 11839                           
 11840                           ;std_ser.c: 79: switch (LedBehav)
 11841  0D00  2D31               	goto	l3961
 11842  0D01                     l3945:	
 11843                           ;std_ser.c: 80: {
 11844                           ;std_ser.c: 81: case ((UINT8)(0)):
 11845                           
 11846                           
 11847                           ;std_ser.c: 83: Led_SetLedStatus(1u,LED_STS_OFF);
 11848  0D01  01F4               	clrf	Led_SetLedStatus@LedSts
 11849  0D02  3001               	movlw	1
 11850  0D03  3189  210A         	fcall	_Led_SetLedStatus
 11851                           
 11852                           ;std_ser.c: 85: LedBehaviourSts = ((UINT8)(0));
 11853  0D05  01F9               	clrf	_LedBehaviourSts
 11854                           
 11855                           ;std_ser.c: 86: break;
 11856  0D06  0008               	return
 11857  0D07                     l3949:	
 11858                           ;std_ser.c: 88: case ((UINT8)(1)):
 11859                           
 11860                           
 11861                           ;std_ser.c: 90: Led_SetLedPulseTime(1u,50);
 11862  0D07  3032               	movlw	50
 11863  0D08  00F4               	movwf	Led_SetLedPulseTime@PulseTimeMs
 11864  0D09  3000               	movlw	0
 11865  0D0A  00F5               	movwf	Led_SetLedPulseTime@PulseTimeMs+1
 11866  0D0B  3001               	movlw	1
 11867  0D0C  3189  212A         	fcall	_Led_SetLedPulseTime
 11868                           
 11869                           ;std_ser.c: 92: LedBehaviourSts = ((UINT8)(1));
 11870  0D0E  01F9               	clrf	_LedBehaviourSts
 11871  0D0F  0AF9               	incf	_LedBehaviourSts,f
 11872                           
 11873                           ;std_ser.c: 93: break;
 11874  0D10  0008               	return
 11875  0D11                     l3953:	
 11876                           ;std_ser.c: 95: case ((UINT8)(2)):
 11877                           
 11878                           
 11879                           ;std_ser.c: 97: Led_SetLedBlinkTime(1u,50,950);
 11880  0D11  3032               	movlw	50
 11881  0D12  0020               	movlb	0	; select bank0
 11882  0D13  00A0               	movwf	Led_SetLedBlinkTime@OnTimeMs
 11883  0D14  3000               	movlw	0
 11884  0D15  00A1               	movwf	Led_SetLedBlinkTime@OnTimeMs+1
 11885  0D16  30B6               	movlw	182
 11886  0D17  00A2               	movwf	Led_SetLedBlinkTime@OffTimeMs
 11887  0D18  3003               	movlw	3
 11888  0D19  00A3               	movwf	Led_SetLedBlinkTime@OffTimeMs+1
 11889  0D1A  3001               	movlw	1
 11890  0D1B  318A  221B  318C   	fcall	_Led_SetLedBlinkTime
 11891                           
 11892                           ;std_ser.c: 99: Led_SetLedStatus(1u,LED_STS_BLINK);
 11893  0D1E  3002               	movlw	2
 11894  0D1F  0020               	movlb	0	; select bank0
 11895  0D20  00A4               	movwf	??_SetLedBehavSts
 11896  0D21  0824               	movf	??_SetLedBehavSts,w
 11897  0D22  00F4               	movwf	Led_SetLedStatus@LedSts
 11898  0D23  3001               	movlw	1
 11899  0D24  3189  210A         	fcall	_Led_SetLedStatus
 11900                           
 11901                           ;std_ser.c: 101: LedBehaviourSts = ((UINT8)(2));
 11902  0D26  3002               	movlw	2
 11903  0D27  0020               	movlb	0	; select bank0
 11904  0D28  00A4               	movwf	??_SetLedBehavSts
 11905  0D29  0824               	movf	??_SetLedBehavSts,w
 11906  0D2A  00F9               	movwf	_LedBehaviourSts
 11907                           
 11908                           ;std_ser.c: 102: break;
 11909  0D2B  0008               	return
 11910  0D2C                     l3957:	
 11911                           ;std_ser.c: 104: case ((UINT8)(3)):
 11912                           
 11913                           
 11914                           ;std_ser.c: 106: LedBehaviourSts = ((UINT8)(3));
 11915  0D2C  3003               	movlw	3
 11916  0D2D  00A4               	movwf	??_SetLedBehavSts
 11917  0D2E  0824               	movf	??_SetLedBehavSts,w
 11918  0D2F  00F9               	movwf	_LedBehaviourSts
 11919                           
 11920                           ;std_ser.c: 111: }
 11921                           
 11922                           ;std_ser.c: 110: break;
 11923                           
 11924                           ;std_ser.c: 109: default:
 11925                           
 11926                           ;std_ser.c: 107: break;
 11927  0D30  0008               	return
 11928  0D31                     l3961:	
 11929  0D31  0825               	movf	SetLedBehavSts@LedBehav,w
 11930                           
 11931                           ; Switch size 1, requested type "space"
 11932                           ; Number of cases is 4, Range of values is 0 to 3
 11933                           ; switch strategies available:
 11934                           ; Name         Instructions Cycles
 11935                           ; simple_byte           13     7 (average)
 11936                           ; direct_byte           14     6 (fixed)
 11937                           ; jumptable            260     6 (fixed)
 11938                           ;	Chosen strategy is simple_byte
 11939  0D32  3A00               	xorlw	0	; case 0
 11940  0D33  1903               	skipnz
 11941  0D34  2D01               	goto	l3945
 11942  0D35  3A01               	xorlw	1	; case 1
 11943  0D36  1903               	skipnz
 11944  0D37  2D07               	goto	l3949
 11945  0D38  3A03               	xorlw	3	; case 2
 11946  0D39  1903               	skipnz
 11947  0D3A  2D11               	goto	l3953
 11948  0D3B  3A01               	xorlw	1	; case 3
 11949  0D3C  1903               	skipnz
 11950  0D3D  2D2C               	goto	l3957
 11951  0D3E  2D3F               	goto	l768
 11952  0D3F                     l768:	
 11953  0D3F  0008               	return
 11954  0D40                     __end_of_SetLedBehavSts:	
 11955                           
 11956                           	psect	text55
 11957  092A                     __ptext55:	
 11958 ;; *************** function _Led_SetLedPulseTime *****************
 11959 ;; Defined at:
 11960 ;;		line 204 in file "../../../Framework/MercuryFwk/Source/c/03_Sml/02_Ssl/led.c"
 11961 ;; Parameters:    Size  Location     Type
 11962 ;;  Led             1    wreg     unsigned char 
 11963 ;;  PulseTimeMs     2    4[COMMON] unsigned short 
 11964 ;; Auto vars:     Size  Location     Type
 11965 ;;  Led             1    0[BANK0 ] unsigned char 
 11966 ;; Return value:  Size  Location     Type
 11967 ;;                  1    wreg      void 
 11968 ;; Registers used:
 11969 ;;		wreg, fsr0l, fsr0h, status,2, status,0
 11970 ;; Tracked objects:
 11971 ;;		On entry : 0/0
 11972 ;;		On exit  : 0/0
 11973 ;;		Unchanged: 0/0
 11974 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11975 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11976 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11977 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11978 ;;      Totals:         2       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11979 ;;Total ram usage:        3 bytes
 11980 ;; Hardware stack levels used:    1
 11981 ;; Hardware stack levels required when called:    3
 11982 ;; This function calls:
 11983 ;;		Nothing
 11984 ;; This function is called by:
 11985 ;;		_SetLedBehavSts
 11986 ;; This function uses a non-reentrant model
 11987 ;;
 11988                           
 11989                           
 11990                           ;psect for function _Led_SetLedPulseTime
 11991  092A                     _Led_SetLedPulseTime:	
 11992                           
 11993                           ;incstack = 0
 11994                           ; Regs used in _Led_SetLedPulseTime: [wreg-fsr0h+status,2+status,0]
 11995                           ;Led_SetLedPulseTime@Led stored from wreg
 11996  092A  0020               	movlb	0	; select bank0
 11997  092B  00A0               	movwf	Led_SetLedPulseTime@Led
 11998                           
 11999                           ;led.c: 207: switch (Led)
 12000  092C  2933               	goto	l3879
 12001  092D                     l3875:	
 12002                           ;led.c: 208: {
 12003                           ;led.c: 209: case 1u:
 12004                           
 12005                           
 12006                           ;led.c: 210: Led1Pulse.LedPulseTimeMs = PulseTimeMs;
 12007  092D  0875               	movf	Led_SetLedPulseTime@PulseTimeMs+1,w
 12008  092E  0021               	movlb	1	; select bank1
 12009  092F  00DB               	movwf	((_Led1Pulse+1)^(0+128)+4)
 12010  0930  0874               	movf	Led_SetLedPulseTime@PulseTimeMs,w
 12011  0931  00DA               	movwf	(_Led1Pulse^(0+128)+4)
 12012                           
 12013                           ;led.c: 215: }
 12014                           
 12015                           ;led.c: 214: break;
 12016                           
 12017                           ;led.c: 213: default:
 12018                           
 12019                           ;led.c: 211: break;
 12020  0932  0008               	return
 12021  0933                     l3879:	
 12022  0933  0020               	movlb	0	; select bank0
 12023  0934  0820               	movf	Led_SetLedPulseTime@Led,w
 12024                           
 12025                           ; Switch size 1, requested type "space"
 12026                           ; Number of cases is 1, Range of values is 1 to 1
 12027                           ; switch strategies available:
 12028                           ; Name         Instructions Cycles
 12029                           ; simple_byte            4     3 (average)
 12030                           ; direct_byte           11     9 (fixed)
 12031                           ; jumptable            263     9 (fixed)
 12032                           ;	Chosen strategy is simple_byte
 12033  0935  3A01               	xorlw	1	; case 1
 12034  0936  1903               	skipnz
 12035  0937  292D               	goto	l3875
 12036  0938  2939               	goto	l674
 12037  0939                     l674:	
 12038  0939  0008               	return
 12039  093A                     __end_of_Led_SetLedPulseTime:	
 12040                           
 12041                           	psect	text56
 12042  0A1B                     __ptext56:	
 12043 ;; *************** function _Led_SetLedBlinkTime *****************
 12044 ;; Defined at:
 12045 ;;		line 180 in file "../../../Framework/MercuryFwk/Source/c/03_Sml/02_Ssl/led.c"
 12046 ;; Parameters:    Size  Location     Type
 12047 ;;  Led             1    wreg     unsigned char 
 12048 ;;  OnTimeMs        2    0[BANK0 ] unsigned short 
 12049 ;;  OffTimeMs       2    2[BANK0 ] unsigned short 
 12050 ;; Auto vars:     Size  Location     Type
 12051 ;;  Led             1    4[COMMON] unsigned char 
 12052 ;; Return value:  Size  Location     Type
 12053 ;;                  1    wreg      void 
 12054 ;; Registers used:
 12055 ;;		wreg, fsr0l, fsr0h, status,2, status,0
 12056 ;; Tracked objects:
 12057 ;;		On entry : 0/0
 12058 ;;		On exit  : 0/0
 12059 ;;		Unchanged: 0/0
 12060 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12061 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12062 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12063 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12064 ;;      Totals:         1       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12065 ;;Total ram usage:        5 bytes
 12066 ;; Hardware stack levels used:    1
 12067 ;; Hardware stack levels required when called:    3
 12068 ;; This function calls:
 12069 ;;		Nothing
 12070 ;; This function is called by:
 12071 ;;		_SetLedBehavSts
 12072 ;; This function uses a non-reentrant model
 12073 ;;
 12074                           
 12075                           
 12076                           ;psect for function _Led_SetLedBlinkTime
 12077  0A1B                     _Led_SetLedBlinkTime:	
 12078                           
 12079                           ;incstack = 0
 12080                           ; Regs used in _Led_SetLedBlinkTime: [wreg-fsr0h+status,2+status,0]
 12081                           ;Led_SetLedBlinkTime@Led stored from wreg
 12082  0A1B  00F4               	movwf	Led_SetLedBlinkTime@Led
 12083                           
 12084                           ;led.c: 183: switch (Led)
 12085  0A1C  2A2E               	goto	l3871
 12086  0A1D                     l3867:	
 12087                           ;led.c: 184: {
 12088                           ;led.c: 185: case 1u:
 12089                           
 12090                           
 12091                           ;led.c: 186: Led1Blink.LedOnTimeMs = OnTimeMs;
 12092  0A1D  0020               	movlb	0	; select bank0
 12093  0A1E  0821               	movf	Led_SetLedBlinkTime@OnTimeMs+1,w
 12094  0A1F  0021               	movlb	1	; select bank1
 12095  0A20  00D2               	movwf	((_Led1Blink+1)^(0+128)+4)
 12096  0A21  0020               	movlb	0	; select bank0
 12097  0A22  0820               	movf	Led_SetLedBlinkTime@OnTimeMs,w
 12098  0A23  0021               	movlb	1	; select bank1
 12099  0A24  00D1               	movwf	(_Led1Blink^(0+128)+4)
 12100                           
 12101                           ;led.c: 187: Led1Blink.LedOffTimeMs = OffTimeMs;
 12102  0A25  0020               	movlb	0	; select bank0
 12103  0A26  0823               	movf	Led_SetLedBlinkTime@OffTimeMs+1,w
 12104  0A27  0021               	movlb	1	; select bank1
 12105  0A28  00D4               	movwf	((_Led1Blink+1)^(0+128)+6)
 12106  0A29  0020               	movlb	0	; select bank0
 12107  0A2A  0822               	movf	Led_SetLedBlinkTime@OffTimeMs,w
 12108  0A2B  0021               	movlb	1	; select bank1
 12109  0A2C  00D3               	movwf	(_Led1Blink^(0+128)+6)
 12110                           
 12111                           ;led.c: 192: }
 12112                           
 12113                           ;led.c: 191: break;
 12114                           
 12115                           ;led.c: 190: default:
 12116                           
 12117                           ;led.c: 188: break;
 12118  0A2D  0008               	return
 12119  0A2E                     l3871:	
 12120  0A2E  0874               	movf	Led_SetLedBlinkTime@Led,w
 12121                           
 12122                           ; Switch size 1, requested type "space"
 12123                           ; Number of cases is 1, Range of values is 1 to 1
 12124                           ; switch strategies available:
 12125                           ; Name         Instructions Cycles
 12126                           ; simple_byte            4     3 (average)
 12127                           ; direct_byte           11     9 (fixed)
 12128                           ; jumptable            263     9 (fixed)
 12129                           ;	Chosen strategy is simple_byte
 12130  0A2F  3A01               	xorlw	1	; case 1
 12131  0A30  1903               	skipnz
 12132  0A31  2A1D               	goto	l3867
 12133  0A32  2A33               	goto	l667
 12134  0A33                     l667:	
 12135  0A33  0008               	return
 12136  0A34                     __end_of_Led_SetLedBlinkTime:	
 12137                           
 12138                           	psect	text57
 12139  07F2                     __ptext57:	
 12140 ;; *************** function _LowPowerMode *****************
 12141 ;; Defined at:
 12142 ;;		line 161 in file "../../../Framework/MercuryFwk/Source/c/03_Sml/02_Ssl/std_ser.c"
 12143 ;; Parameters:    Size  Location     Type
 12144 ;;		None
 12145 ;; Auto vars:     Size  Location     Type
 12146 ;;		None
 12147 ;; Return value:  Size  Location     Type
 12148 ;;                  1    wreg      void 
 12149 ;; Registers used:
 12150 ;;		wreg, status,2, status,0, pclath, cstack
 12151 ;; Tracked objects:
 12152 ;;		On entry : 0/0
 12153 ;;		On exit  : 0/0
 12154 ;;		Unchanged: 0/0
 12155 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12156 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12157 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12158 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12159 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12160 ;;Total ram usage:        0 bytes
 12161 ;; Hardware stack levels used:    1
 12162 ;; Hardware stack levels required when called:    4
 12163 ;; This function calls:
 12164 ;;		_Mcu_SetWdgSts
 12165 ;; This function is called by:
 12166 ;;		_StdS_ManageStdServices
 12167 ;; This function uses a non-reentrant model
 12168 ;;
 12169                           
 12170                           
 12171                           ;psect for function _LowPowerMode
 12172  07F2                     _LowPowerMode:	
 12173                           
 12174                           ;std_ser.c: 164: LATA = 0x00;
 12175                           
 12176                           ;incstack = 0
 12177                           ; Regs used in _LowPowerMode: [wreg+status,2+status,0+pclath+cstack]
 12178  07F2  0022               	movlb	2	; select bank2
 12179  07F3  018C               	clrf	12	;volatile
 12180                           
 12181                           ;std_ser.c: 166: LATB = 0x00;
 12182  07F4  018D               	clrf	13	;volatile
 12183                           
 12184                           ;std_ser.c: 168: LATC = 0x00;
 12185  07F5  018E               	clrf	14	;volatile
 12186                           
 12187                           ;std_ser.c: 170: Mcu_SetWdgSts(((UINT8)(0)));
 12188  07F6  3000               	movlw	0
 12189  07F7  3188  2091  3187   	fcall	_Mcu_SetWdgSts
 12190  07FA  0063               	sleep	;# 
 12191                           
 12192                           ;std_ser.c: 177: Mcu_SetWdgSts(((UINT8)(1)));
 12193  07FB  3001               	movlw	1
 12194  07FC  3188  2091         	fcall	_Mcu_SetWdgSts
 12195  07FE  0008               	return
 12196  07FF                     __end_of_LowPowerMode:	
 12197                           
 12198                           	psect	text58
 12199  0891                     __ptext58:	
 12200 ;; *************** function _Mcu_SetWdgSts *****************
 12201 ;; Defined at:
 12202 ;;		line 211 in file "../../../Framework/MercuryFwk/Source/c/01_Hal/02_Drv/mcu_drv.c"
 12203 ;; Parameters:    Size  Location     Type
 12204 ;;  WdgSts          1    wreg     unsigned char 
 12205 ;; Auto vars:     Size  Location     Type
 12206 ;;  WdgSts          1    4[COMMON] unsigned char 
 12207 ;; Return value:  Size  Location     Type
 12208 ;;                  1    wreg      void 
 12209 ;; Registers used:
 12210 ;;		wreg, status,0
 12211 ;; Tracked objects:
 12212 ;;		On entry : 0/0
 12213 ;;		On exit  : 0/0
 12214 ;;		Unchanged: 0/0
 12215 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12216 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12217 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12218 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12219 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12220 ;;Total ram usage:        1 bytes
 12221 ;; Hardware stack levels used:    1
 12222 ;; Hardware stack levels required when called:    3
 12223 ;; This function calls:
 12224 ;;		Nothing
 12225 ;; This function is called by:
 12226 ;;		_LowPowerMode
 12227 ;;		_Wdg_MainTask
 12228 ;; This function uses a non-reentrant model
 12229 ;;
 12230                           
 12231                           
 12232                           ;psect for function _Mcu_SetWdgSts
 12233  0891                     _Mcu_SetWdgSts:	
 12234                           
 12235                           ;incstack = 0
 12236                           ; Regs used in _Mcu_SetWdgSts: [wreg+status,0]
 12237                           ;Mcu_SetWdgSts@WdgSts stored from wreg
 12238  0891  00F4               	movwf	Mcu_SetWdgSts@WdgSts
 12239                           
 12240                           ;mcu_drv.c: 214: WDTCONbits.SWDTEN = WdgSts;
 12241  0892  0C74               	rrf	Mcu_SetWdgSts@WdgSts,w
 12242  0893  0021               	movlb	1	; select bank1
 12243  0894  1C03               	skipc
 12244  0895  1017               	bcf	23,0	;volatile
 12245  0896  1803               	skipnc
 12246  0897  1417               	bsf	23,0	;volatile
 12247  0898  0008               	return
 12248  0899                     __end_of_Mcu_SetWdgSts:	
 12249                           
 12250                           	psect	text59
 12251  0A02                     __ptext59:	
 12252 ;; *************** function _GetDieTemperature *****************
 12253 ;; Defined at:
 12254 ;;		line 188 in file "../../../Framework/MercuryFwk/Source/c/03_Sml/02_Ssl/std_ser.c"
 12255 ;; Parameters:    Size  Location     Type
 12256 ;;		None
 12257 ;; Auto vars:     Size  Location     Type
 12258 ;;  DieTempRes      2    5[BANK0 ] unsigned short 
 12259 ;; Return value:  Size  Location     Type
 12260 ;;                  2    3[BANK0 ] unsigned short 
 12261 ;; Registers used:
 12262 ;;		wreg, status,2, status,0, pclath, cstack
 12263 ;; Tracked objects:
 12264 ;;		On entry : 0/0
 12265 ;;		On exit  : 0/0
 12266 ;;		Unchanged: 0/0
 12267 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12268 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12269 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12270 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12271 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12272 ;;Total ram usage:        4 bytes
 12273 ;; Hardware stack levels used:    1
 12274 ;; Hardware stack levels required when called:    4
 12275 ;; This function calls:
 12276 ;;		_Adc_GetConvResult
 12277 ;;		_Adc_GetConvSts
 12278 ;;		_Adc_SelectChannel
 12279 ;;		_Adc_StartConversion
 12280 ;; This function is called by:
 12281 ;;		_StdS_ManageStdServices
 12282 ;; This function uses a non-reentrant model
 12283 ;;
 12284                           
 12285                           
 12286                           ;psect for function _GetDieTemperature
 12287  0A02                     _GetDieTemperature:	
 12288                           
 12289                           ;std_ser.c: 190: UINT16 DieTempRes;
 12290                           ;std_ser.c: 193: Adc_SelectChannel(((UINT8)(29)));
 12291                           
 12292                           ;incstack = 0
 12293                           ; Regs used in _GetDieTemperature: [wreg+status,2+status,0+pclath+cstack]
 12294  0A02  301D               	movlw	29
 12295  0A03  3188  20DA  318A   	fcall	_Adc_SelectChannel
 12296                           
 12297                           ;std_ser.c: 195: Adc_StartConversion();
 12298  0A06  3188  2069  318A   	fcall	_Adc_StartConversion
 12299  0A09                     l3983:	
 12300                           ;std_ser.c: 197: while (Adc_GetConvSts() == AdcConvInProgress);
 12301                           
 12302  0A09  3188  2072  318A   	fcall	_Adc_GetConvSts
 12303  0A0C  3A00               	xorlw	0
 12304  0A0D  1903               	skipnz
 12305  0A0E  2A09               	goto	l3983
 12306                           
 12307                           ;std_ser.c: 199: DieTempRes = Adc_GetConvResult();
 12308  0A0F  3189  211A         	fcall	_Adc_GetConvResult
 12309  0A11  0875               	movf	?_Adc_GetConvResult+1,w
 12310  0A12  0020               	movlb	0	; select bank0
 12311  0A13  00A6               	movwf	GetDieTemperature@DieTempRes+1
 12312  0A14  0874               	movf	?_Adc_GetConvResult,w
 12313  0A15  00A5               	movwf	GetDieTemperature@DieTempRes
 12314                           
 12315                           ;std_ser.c: 201: return DieTempRes;
 12316  0A16  0826               	movf	GetDieTemperature@DieTempRes+1,w
 12317  0A17  00A4               	movwf	?_GetDieTemperature+1
 12318  0A18  0825               	movf	GetDieTemperature@DieTempRes,w
 12319  0A19  00A3               	movwf	?_GetDieTemperature
 12320  0A1A  0008               	return
 12321  0A1B                     __end_of_GetDieTemperature:	
 12322                           
 12323                           	psect	text60
 12324  0869                     __ptext60:	
 12325 ;; *************** function _Adc_StartConversion *****************
 12326 ;; Defined at:
 12327 ;;		line 144 in file "../../../Framework/MercuryFwk/Source/c/01_Hal/02_Drv/adc_drv.c"
 12328 ;; Parameters:    Size  Location     Type
 12329 ;;		None
 12330 ;; Auto vars:     Size  Location     Type
 12331 ;;		None
 12332 ;; Return value:  Size  Location     Type
 12333 ;;                  1    wreg      void 
 12334 ;; Registers used:
 12335 ;;		None
 12336 ;; Tracked objects:
 12337 ;;		On entry : 0/0
 12338 ;;		On exit  : 0/0
 12339 ;;		Unchanged: 0/0
 12340 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12341 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12342 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12343 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12344 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12345 ;;Total ram usage:        0 bytes
 12346 ;; Hardware stack levels used:    1
 12347 ;; Hardware stack levels required when called:    3
 12348 ;; This function calls:
 12349 ;;		Nothing
 12350 ;; This function is called by:
 12351 ;;		_GetDieTemperature
 12352 ;; This function uses a non-reentrant model
 12353 ;;
 12354                           
 12355                           
 12356                           ;psect for function _Adc_StartConversion
 12357  0869                     _Adc_StartConversion:	
 12358                           
 12359                           ;adc_drv.c: 147: ADCON0bits.GO_nDONE = ((UINT8)(1));
 12360                           
 12361                           ;incstack = 0
 12362                           ; Regs used in _Adc_StartConversion: []
 12363  0869  0021               	movlb	1	; select bank1
 12364  086A  149D               	bsf	29,1	;volatile
 12365  086B  0008               	return
 12366  086C                     __end_of_Adc_StartConversion:	
 12367                           
 12368                           	psect	text61
 12369  08DA                     __ptext61:	
 12370 ;; *************** function _Adc_SelectChannel *****************
 12371 ;; Defined at:
 12372 ;;		line 130 in file "../../../Framework/MercuryFwk/Source/c/01_Hal/02_Drv/adc_drv.c"
 12373 ;; Parameters:    Size  Location     Type
 12374 ;;  SelCh           1    wreg     unsigned char 
 12375 ;; Auto vars:     Size  Location     Type
 12376 ;;  SelCh           1    5[COMMON] unsigned char 
 12377 ;; Return value:  Size  Location     Type
 12378 ;;                  1    wreg      void 
 12379 ;; Registers used:
 12380 ;;		wreg, status,2, status,0
 12381 ;; Tracked objects:
 12382 ;;		On entry : 0/0
 12383 ;;		On exit  : 0/0
 12384 ;;		Unchanged: 0/0
 12385 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12386 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12387 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12388 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12389 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12390 ;;Total ram usage:        2 bytes
 12391 ;; Hardware stack levels used:    1
 12392 ;; Hardware stack levels required when called:    3
 12393 ;; This function calls:
 12394 ;;		Nothing
 12395 ;; This function is called by:
 12396 ;;		_GetDieTemperature
 12397 ;; This function uses a non-reentrant model
 12398 ;;
 12399                           
 12400                           
 12401                           ;psect for function _Adc_SelectChannel
 12402  08DA                     _Adc_SelectChannel:	
 12403                           
 12404                           ;incstack = 0
 12405                           ; Regs used in _Adc_SelectChannel: [wreg+status,2+status,0]
 12406                           ;Adc_SelectChannel@SelCh stored from wreg
 12407  08DA  00F5               	movwf	Adc_SelectChannel@SelCh
 12408                           
 12409                           ;adc_drv.c: 133: ADCON0bits.CHS = SelCh;
 12410  08DB  0875               	movf	Adc_SelectChannel@SelCh,w
 12411  08DC  00F4               	movwf	??_Adc_SelectChannel
 12412  08DD  0DF4               	rlf	??_Adc_SelectChannel,f
 12413  08DE  0DF4               	rlf	??_Adc_SelectChannel,f
 12414  08DF  0021               	movlb	1	; select bank1
 12415  08E0  081D               	movf	29,w	;volatile
 12416  08E1  0674               	xorwf	??_Adc_SelectChannel,w
 12417  08E2  3983               	andlw	-125
 12418  08E3  0674               	xorwf	??_Adc_SelectChannel,w
 12419  08E4  009D               	movwf	29	;volatile
 12420  08E5  0008               	return
 12421  08E6                     __end_of_Adc_SelectChannel:	
 12422                           
 12423                           	psect	text62
 12424  0872                     __ptext62:	
 12425 ;; *************** function _Adc_GetConvSts *****************
 12426 ;; Defined at:
 12427 ;;		line 158 in file "../../../Framework/MercuryFwk/Source/c/01_Hal/02_Drv/adc_drv.c"
 12428 ;; Parameters:    Size  Location     Type
 12429 ;;		None
 12430 ;; Auto vars:     Size  Location     Type
 12431 ;;		None
 12432 ;; Return value:  Size  Location     Type
 12433 ;;                  1    wreg      enum E3651
 12434 ;; Registers used:
 12435 ;;		wreg, status,2, status,0
 12436 ;; Tracked objects:
 12437 ;;		On entry : 0/0
 12438 ;;		On exit  : 0/0
 12439 ;;		Unchanged: 0/0
 12440 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12441 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12442 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12443 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12444 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12445 ;;Total ram usage:        0 bytes
 12446 ;; Hardware stack levels used:    1
 12447 ;; Hardware stack levels required when called:    3
 12448 ;; This function calls:
 12449 ;;		Nothing
 12450 ;; This function is called by:
 12451 ;;		_GetDieTemperature
 12452 ;; This function uses a non-reentrant model
 12453 ;;
 12454                           
 12455                           
 12456                           ;psect for function _Adc_GetConvSts
 12457  0872                     _Adc_GetConvSts:	
 12458                           
 12459                           ;adc_drv.c: 161: return ((AdcConvStsType)(ADCON0bits.GO_nDONE));
 12460                           
 12461                           ;incstack = 0
 12462                           ; Regs used in _Adc_GetConvSts: [wreg+status,2+status,0]
 12463  0872  0021               	movlb	1	; select bank1
 12464  0873  0C1D               	rrf	29,w	;volatile
 12465  0874  3901               	andlw	1
 12466  0875  0008               	return
 12467  0876                     __end_of_Adc_GetConvSts:	
 12468                           
 12469                           	psect	text63
 12470  091A                     __ptext63:	
 12471 ;; *************** function _Adc_GetConvResult *****************
 12472 ;; Defined at:
 12473 ;;		line 172 in file "../../../Framework/MercuryFwk/Source/c/01_Hal/02_Drv/adc_drv.c"
 12474 ;; Parameters:    Size  Location     Type
 12475 ;;		None
 12476 ;; Auto vars:     Size  Location     Type
 12477 ;;  AdcResult       2    1[BANK0 ] unsigned short 
 12478 ;; Return value:  Size  Location     Type
 12479 ;;                  2    4[COMMON] unsigned short 
 12480 ;; Registers used:
 12481 ;;		wreg, status,2, status,0
 12482 ;; Tracked objects:
 12483 ;;		On entry : 0/0
 12484 ;;		On exit  : 0/0
 12485 ;;		Unchanged: 0/0
 12486 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12487 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12488 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12489 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12490 ;;      Totals:         2       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12491 ;;Total ram usage:        5 bytes
 12492 ;; Hardware stack levels used:    1
 12493 ;; Hardware stack levels required when called:    3
 12494 ;; This function calls:
 12495 ;;		Nothing
 12496 ;; This function is called by:
 12497 ;;		_GetDieTemperature
 12498 ;; This function uses a non-reentrant model
 12499 ;;
 12500                           
 12501                           
 12502                           ;psect for function _Adc_GetConvResult
 12503  091A                     _Adc_GetConvResult:	
 12504                           
 12505                           ;adc_drv.c: 174: UINT16 AdcResult;
 12506                           ;adc_drv.c: 177: AdcResult = (((ADRESH & 0x03) << 8) | ADRESL);
 12507                           
 12508                           ;incstack = 0
 12509                           ; Regs used in _Adc_GetConvResult: [wreg+status,2+status,0]
 12510  091A  3003               	movlw	3
 12511  091B  0021               	movlb	1	; select bank1
 12512  091C  051C               	andwf	28,w	;volatile
 12513  091D  0020               	movlb	0	; select bank0
 12514  091E  00A0               	movwf	??_Adc_GetConvResult
 12515  091F  0820               	movf	??_Adc_GetConvResult,w
 12516  0920  00A2               	movwf	Adc_GetConvResult@AdcResult+1
 12517  0921  0021               	movlb	1	; select bank1
 12518  0922  081B               	movf	27,w	;volatile
 12519  0923  0020               	movlb	0	; select bank0
 12520  0924  00A1               	movwf	Adc_GetConvResult@AdcResult
 12521                           
 12522                           ;adc_drv.c: 179: return AdcResult;
 12523  0925  0822               	movf	Adc_GetConvResult@AdcResult+1,w
 12524  0926  00F5               	movwf	?_Adc_GetConvResult+1
 12525  0927  0821               	movf	Adc_GetConvResult@AdcResult,w
 12526  0928  00F4               	movwf	?_Adc_GetConvResult
 12527  0929  0008               	return
 12528  092A                     __end_of_Adc_GetConvResult:	
 12529                           
 12530                           	psect	text64
 12531  0AAF                     __ptext64:	
 12532 ;; *************** function _GenerateEvt *****************
 12533 ;; Defined at:
 12534 ;;		line 73 in file "../../../Framework/MercuryFwk/Source/c/02_Osl/os_ser.c"
 12535 ;; Parameters:    Size  Location     Type
 12536 ;;  Event           1    wreg     PTR struct _EventStructu
 12537 ;;		 -> StartMeasure(2), I2cReplyPacketReady(2), I2cWriteRequest(2), I2cSetAddress(2), 
 12538 ;;		 -> SonarMeasureComplete(2), SonarEchoCountReady(2), SonarStartMeasure(2), I2cNewTxNotification(2), 
 12539 ;;		 -> I2cNewPacketNotification(2), 
 12540 ;; Auto vars:     Size  Location     Type
 12541 ;;  Event           1    1[BANK0 ] PTR struct _EventStructu
 12542 ;;		 -> StartMeasure(2), I2cReplyPacketReady(2), I2cWriteRequest(2), I2cSetAddress(2), 
 12543 ;;		 -> SonarMeasureComplete(2), SonarEchoCountReady(2), SonarStartMeasure(2), I2cNewTxNotification(2), 
 12544 ;;		 -> I2cNewPacketNotification(2), 
 12545 ;;  EventStatus     1    0[BANK0 ] enum E3629
 12546 ;; Return value:  Size  Location     Type
 12547 ;;                  1    wreg      enum E3625
 12548 ;; Registers used:
 12549 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 12550 ;; Tracked objects:
 12551 ;;		On entry : 0/0
 12552 ;;		On exit  : 0/0
 12553 ;;		Unchanged: 0/0
 12554 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12555 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12556 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12557 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12558 ;;      Totals:         1       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12559 ;;Total ram usage:        3 bytes
 12560 ;; Hardware stack levels used:    1
 12561 ;; Hardware stack levels required when called:    3
 12562 ;; This function calls:
 12563 ;;		Nothing
 12564 ;; This function is called by:
 12565 ;;		_I2c_DataReceiveSm
 12566 ;;		_SnrDrv_GetDistSm
 12567 ;;		_SnrDrv_StartMeasure
 12568 ;;		_I2cSlv_I2cDrvHandle
 12569 ;;		_StdS_ManageStdServices
 12570 ;;		_ManageProtocol
 12571 ;;		_AppSm
 12572 ;;		_SonarMeasure
 12573 ;; This function uses a non-reentrant model
 12574 ;;
 12575                           
 12576                           
 12577                           ;psect for function _GenerateEvt
 12578  0AAF                     _GenerateEvt:	
 12579                           
 12580                           ;incstack = 0
 12581                           ; Regs used in _GenerateEvt: [wreg+fsr1l+fsr1h+status,2+status,0]
 12582                           ;GenerateEvt@Event stored from wreg
 12583  0AAF  0020               	movlb	0	; select bank0
 12584  0AB0  00A1               	movwf	GenerateEvt@Event
 12585                           
 12586                           ;os_ser.c: 76: EventStatusType EventStatus = EventIdle;
 12587  0AB1  01A0               	clrf	GenerateEvt@EventStatus
 12588                           
 12589                           ;os_ser.c: 78: if ((Event->EventOptions != ((UINT8)(2))) && (Event->EventOptions != ((UI
      +                          NT8)(3))))
 12590  0AB2  0821               	movf	GenerateEvt@Event,w
 12591  0AB3  0086               	movwf	6
 12592  0AB4  0187               	clrf	7
 12593  0AB5  3002               	movlw	2
 12594  0AB6  0601               	xorwf	1,w
 12595  0AB7  1903               	btfsc	3,2
 12596  0AB8  2ACC               	goto	l3939
 12597  0AB9  0821               	movf	GenerateEvt@Event,w
 12598  0ABA  0086               	movwf	6
 12599  0ABB  0187               	clrf	7
 12600  0ABC  3003               	movlw	3
 12601  0ABD  0601               	xorwf	1,w
 12602  0ABE  1903               	btfsc	3,2
 12603  0ABF  2ACC               	goto	l3939
 12604                           
 12605                           ;os_ser.c: 79: {
 12606                           ;os_ser.c: 81: Event->EventStatus = EventSent;
 12607  0AC0  3002               	movlw	2
 12608  0AC1  00F4               	movwf	??_GenerateEvt
 12609  0AC2  0A21               	incf	GenerateEvt@Event,w
 12610  0AC3  0086               	movwf	6
 12611  0AC4  0187               	clrf	7
 12612  0AC5  0874               	movf	??_GenerateEvt,w
 12613  0AC6  0081               	movwf	1
 12614                           
 12615                           ;os_ser.c: 83: EventStatus = EventSent;
 12616  0AC7  3002               	movlw	2
 12617  0AC8  00F4               	movwf	??_GenerateEvt
 12618  0AC9  0874               	movf	??_GenerateEvt,w
 12619  0ACA  00A0               	movwf	GenerateEvt@EventStatus
 12620                           
 12621                           ;os_ser.c: 84: }
 12622  0ACB  0008               	return
 12623  0ACC                     l3939:	
 12624                           
 12625                           ;os_ser.c: 85: else
 12626                           ;os_ser.c: 86: {
 12627                           ;os_ser.c: 88: EventStatus = EventNotSent;
 12628  0ACC  3003               	movlw	3
 12629  0ACD  00F4               	movwf	??_GenerateEvt
 12630  0ACE  0874               	movf	??_GenerateEvt,w
 12631  0ACF  00A0               	movwf	GenerateEvt@EventStatus
 12632  0AD0  0008               	return
 12633  0AD1                     __end_of_GenerateEvt:	
 12634                           ;os_ser.c: 89: }
 12635                           ;os_ser.c: 92: return(EventStatus);
 12636                           ;	Return value of _GenerateEvt is never used
 12637                           
 12638                           
 12639                           	psect	text65
 12640  096B                     __ptext65:	
 12641 ;; *************** function _ControlLedDirect *****************
 12642 ;; Defined at:
 12643 ;;		line 122 in file "../../../Framework/MercuryFwk/Source/c/03_Sml/02_Ssl/std_ser.c"
 12644 ;; Parameters:    Size  Location     Type
 12645 ;;		None
 12646 ;; Auto vars:     Size  Location     Type
 12647 ;;		None
 12648 ;; Return value:  Size  Location     Type
 12649 ;;                  1    wreg      void 
 12650 ;; Registers used:
 12651 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
 12652 ;; Tracked objects:
 12653 ;;		On entry : 0/0
 12654 ;;		On exit  : 0/0
 12655 ;;		Unchanged: 0/0
 12656 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12657 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12658 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12659 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12660 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12661 ;;Total ram usage:        0 bytes
 12662 ;; Hardware stack levels used:    1
 12663 ;; Hardware stack levels required when called:    4
 12664 ;; This function calls:
 12665 ;;		_Led_SetLedStatus
 12666 ;; This function is called by:
 12667 ;;		_StdS_ManageStdServices
 12668 ;; This function uses a non-reentrant model
 12669 ;;
 12670                           
 12671                           
 12672                           ;psect for function _ControlLedDirect
 12673  096B                     _ControlLedDirect:	
 12674                           
 12675                           ;std_ser.c: 125: if (LedBehaviourSts == ((UINT8)(3)))
 12676                           
 12677                           ;incstack = 0
 12678                           ; Regs used in _ControlLedDirect: [wreg-fsr0h+status,2+status,0+pclath+cstack]
 12679  096B  3003               	movlw	3
 12680  096C  0679               	xorwf	_LedBehaviourSts,w
 12681  096D  1D03               	btfss	3,2
 12682  096E  0008               	return
 12683                           
 12684                           ;std_ser.c: 126: {
 12685                           ;std_ser.c: 128: if (CmdBuffer[((UINT8)(1))] == ((UINT8)(1)))
 12686  096F  0024               	movlb	4	; select bank4
 12687  0970  0321               	decf	(_CmdBuffer^(0+512)+1),w
 12688  0971  1D03               	btfss	3,2
 12689  0972  2979               	goto	l3977
 12690                           
 12691                           ;std_ser.c: 129: {
 12692                           ;std_ser.c: 130: Led_SetLedStatus(1u,LED_STS_ON);
 12693  0973  01F4               	clrf	Led_SetLedStatus@LedSts
 12694  0974  0AF4               	incf	Led_SetLedStatus@LedSts,f
 12695  0975  3001               	movlw	1
 12696  0976  3189  210A         	fcall	_Led_SetLedStatus
 12697                           
 12698                           ;std_ser.c: 131: }
 12699  0978  0008               	return
 12700  0979                     l3977:	
 12701                           
 12702                           ;std_ser.c: 132: else
 12703                           ;std_ser.c: 133: {
 12704                           ;std_ser.c: 134: Led_SetLedStatus(1u,LED_STS_OFF);
 12705  0979  01F4               	clrf	Led_SetLedStatus@LedSts
 12706  097A  3001               	movlw	1
 12707  097B  3189  210A         	fcall	_Led_SetLedStatus
 12708  097D  0008               	return
 12709  097E                     __end_of_ControlLedDirect:	
 12710                           
 12711                           	psect	text66
 12712  090A                     __ptext66:	
 12713 ;; *************** function _Led_SetLedStatus *****************
 12714 ;; Defined at:
 12715 ;;		line 156 in file "../../../Framework/MercuryFwk/Source/c/03_Sml/02_Ssl/led.c"
 12716 ;; Parameters:    Size  Location     Type
 12717 ;;  Led             1    wreg     unsigned char 
 12718 ;;  LedSts          1    4[COMMON] unsigned char 
 12719 ;; Auto vars:     Size  Location     Type
 12720 ;;  Led             1    0[BANK0 ] unsigned char 
 12721 ;; Return value:  Size  Location     Type
 12722 ;;                  1    wreg      void 
 12723 ;; Registers used:
 12724 ;;		wreg, fsr0l, fsr0h, status,2, status,0
 12725 ;; Tracked objects:
 12726 ;;		On entry : 0/0
 12727 ;;		On exit  : 0/0
 12728 ;;		Unchanged: 0/0
 12729 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12730 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12731 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12732 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12733 ;;      Totals:         2       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12734 ;;Total ram usage:        3 bytes
 12735 ;; Hardware stack levels used:    1
 12736 ;; Hardware stack levels required when called:    3
 12737 ;; This function calls:
 12738 ;;		Nothing
 12739 ;; This function is called by:
 12740 ;;		_LedPulseStateMachine
 12741 ;;		_I2cSlv_I2cDrvHandle
 12742 ;;		_SetLedBehavSts
 12743 ;;		_ControlLedDirect
 12744 ;; This function uses a non-reentrant model
 12745 ;;
 12746                           
 12747                           
 12748                           ;psect for function _Led_SetLedStatus
 12749  090A                     _Led_SetLedStatus:	
 12750                           
 12751                           ;incstack = 0
 12752                           ; Regs used in _Led_SetLedStatus: [wreg-fsr0h+status,2+status,0]
 12753                           ;Led_SetLedStatus@Led stored from wreg
 12754  090A  0020               	movlb	0	; select bank0
 12755  090B  00A0               	movwf	Led_SetLedStatus@Led
 12756                           
 12757                           ;led.c: 159: switch (Led)
 12758  090C  2913               	goto	l3863
 12759  090D                     l3859:	
 12760                           ;led.c: 160: {
 12761                           ;led.c: 161: case 1u:
 12762                           
 12763                           
 12764                           ;led.c: 162: Led1Sts = LedSts;
 12765  090D  0874               	movf	Led_SetLedStatus@LedSts,w
 12766  090E  00F5               	movwf	??_Led_SetLedStatus
 12767  090F  0875               	movf	??_Led_SetLedStatus,w
 12768  0910  0021               	movlb	1	; select bank1
 12769  0911  00EE               	movwf	_Led1Sts^(0+128)
 12770                           
 12771                           ;led.c: 167: }
 12772                           
 12773                           ;led.c: 166: break;
 12774                           
 12775                           ;led.c: 165: default:
 12776                           
 12777                           ;led.c: 163: break;
 12778  0912  0008               	return
 12779  0913                     l3863:	
 12780  0913  0020               	movlb	0	; select bank0
 12781  0914  0820               	movf	Led_SetLedStatus@Led,w
 12782                           
 12783                           ; Switch size 1, requested type "space"
 12784                           ; Number of cases is 1, Range of values is 1 to 1
 12785                           ; switch strategies available:
 12786                           ; Name         Instructions Cycles
 12787                           ; simple_byte            4     3 (average)
 12788                           ; direct_byte           11     9 (fixed)
 12789                           ; jumptable            263     9 (fixed)
 12790                           ;	Chosen strategy is simple_byte
 12791  0915  3A01               	xorlw	1	; case 1
 12792  0916  1903               	skipnz
 12793  0917  290D               	goto	l3859
 12794  0918  2919               	goto	l660
 12795  0919                     l660:	
 12796  0919  0008               	return
 12797  091A                     __end_of_Led_SetLedStatus:	
 12798                           
 12799                           	psect	text67
 12800  0867                     __ptext67:	
 12801 ;; *************** function _BoardReset *****************
 12802 ;; Defined at:
 12803 ;;		line 147 in file "../../../Framework/MercuryFwk/Source/c/03_Sml/02_Ssl/std_ser.c"
 12804 ;; Parameters:    Size  Location     Type
 12805 ;;		None
 12806 ;; Auto vars:     Size  Location     Type
 12807 ;;		None
 12808 ;; Return value:  Size  Location     Type
 12809 ;;                  1    wreg      void 
 12810 ;; Registers used:
 12811 ;;		None
 12812 ;; Tracked objects:
 12813 ;;		On entry : 0/0
 12814 ;;		On exit  : 0/0
 12815 ;;		Unchanged: 0/0
 12816 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12817 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12818 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12819 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12820 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12821 ;;Total ram usage:        0 bytes
 12822 ;; Hardware stack levels used:    1
 12823 ;; Hardware stack levels required when called:    3
 12824 ;; This function calls:
 12825 ;;		Nothing
 12826 ;; This function is called by:
 12827 ;;		_StdS_ManageStdServices
 12828 ;; This function uses a non-reentrant model
 12829 ;;
 12830                           
 12831                           
 12832                           ;psect for function _BoardReset
 12833  0867                     _BoardReset:	
 12834                           
 12835                           ;incstack = 0
 12836                           ; Regs used in _BoardReset: []
 12837  0867  0001               	reset	;# 
 12838  0868  0008               	return
 12839  0869                     __end_of_BoardReset:	
 12840                           
 12841                           	psect	text68
 12842  0A8E                     __ptext68:	
 12843 ;; *************** function _ReceiveEvt *****************
 12844 ;; Defined at:
 12845 ;;		line 103 in file "../../../Framework/MercuryFwk/Source/c/02_Osl/os_ser.c"
 12846 ;; Parameters:    Size  Location     Type
 12847 ;;  Event           1    wreg     PTR struct _EventStructu
 12848 ;;		 -> StartMeasure(2), I2cReplyPacketReady(2), I2cWriteRequest(2), I2cSetAddress(2), 
 12849 ;;		 -> SonarEchoCountReady(2), SonarStartMeasure(2), I2cNewTxNotification(2), I2cNewPacketNotification(2), 
 12850 ;; Auto vars:     Size  Location     Type
 12851 ;;  Event           1    5[COMMON] PTR struct _EventStructu
 12852 ;;		 -> StartMeasure(2), I2cReplyPacketReady(2), I2cWriteRequest(2), I2cSetAddress(2), 
 12853 ;;		 -> SonarEchoCountReady(2), SonarStartMeasure(2), I2cNewTxNotification(2), I2cNewPacketNotification(2), 
 12854 ;;  EventStatus     1    4[COMMON] enum E3629
 12855 ;; Return value:  Size  Location     Type
 12856 ;;                  1    wreg      enum E3625
 12857 ;; Registers used:
 12858 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 12859 ;; Tracked objects:
 12860 ;;		On entry : 0/0
 12861 ;;		On exit  : 0/0
 12862 ;;		Unchanged: 0/0
 12863 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12864 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12865 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12866 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12867 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12868 ;;Total ram usage:        2 bytes
 12869 ;; Hardware stack levels used:    1
 12870 ;; Hardware stack levels required when called:    3
 12871 ;; This function calls:
 12872 ;;		Nothing
 12873 ;; This function is called by:
 12874 ;;		_I2c_DataReceiveSm
 12875 ;;		_SnrDrv_GetDistSm
 12876 ;;		_I2cSlv_I2cDrvHandle
 12877 ;;		_ManageProtocol
 12878 ;;		_SonarMeasure
 12879 ;; This function uses a non-reentrant model
 12880 ;;
 12881                           
 12882                           
 12883                           ;psect for function _ReceiveEvt
 12884  0A8E                     _ReceiveEvt:	
 12885                           
 12886                           ;incstack = 0
 12887                           ; Regs used in _ReceiveEvt: [wreg+fsr1l+fsr1h+status,2+status,0]
 12888                           ;ReceiveEvt@Event stored from wreg
 12889  0A8E  00F5               	movwf	ReceiveEvt@Event
 12890                           
 12891                           ;os_ser.c: 106: EventStatusType EventStatus = EventIdle;
 12892  0A8F  01F4               	clrf	ReceiveEvt@EventStatus
 12893                           
 12894                           ;os_ser.c: 108: if ((Event->EventOptions != ((UINT8)(1))) && (Event->EventOptions != ((U
      +                          INT8)(3))))
 12895  0A90  0875               	movf	ReceiveEvt@Event,w
 12896  0A91  0086               	movwf	6
 12897  0A92  0187               	clrf	7
 12898  0A93  0301               	decf	1,w
 12899  0A94  1903               	btfsc	3,2
 12900  0A95  2AAD               	goto	l4035
 12901  0A96  0875               	movf	ReceiveEvt@Event,w
 12902  0A97  0086               	movwf	6
 12903  0A98  0187               	clrf	7
 12904  0A99  3003               	movlw	3
 12905  0A9A  0601               	xorwf	1,w
 12906  0A9B  1903               	btfsc	3,2
 12907  0A9C  2AAD               	goto	l4035
 12908                           
 12909                           ;os_ser.c: 109: {
 12910                           ;os_ser.c: 111: if (Event->EventStatus == EventSent)
 12911  0A9D  0A75               	incf	ReceiveEvt@Event,w
 12912  0A9E  0086               	movwf	6
 12913  0A9F  0187               	clrf	7
 12914  0AA0  3002               	movlw	2
 12915  0AA1  0601               	xorwf	1,w
 12916  0AA2  1D03               	btfss	3,2
 12917  0AA3  2AAC               	goto	l4033
 12918                           
 12919                           ;os_ser.c: 112: {
 12920                           ;os_ser.c: 114: Event->EventStatus = EventReceived;
 12921  0AA4  0A75               	incf	ReceiveEvt@Event,w
 12922  0AA5  0086               	movwf	6
 12923  0AA6  0187               	clrf	7
 12924  0AA7  0181               	clrf	1
 12925  0AA8  0A81               	incf	1,f
 12926                           
 12927                           ;os_ser.c: 116: EventStatus = EventReceived;
 12928  0AA9  01F4               	clrf	ReceiveEvt@EventStatus
 12929  0AAA  0AF4               	incf	ReceiveEvt@EventStatus,f
 12930                           
 12931                           ;os_ser.c: 117: }
 12932  0AAB  2AAD               	goto	l4035
 12933  0AAC                     l4033:	
 12934                           
 12935                           ;os_ser.c: 118: else
 12936                           ;os_ser.c: 119: {
 12937                           ;os_ser.c: 121: EventStatus = EventIdle;
 12938  0AAC  01F4               	clrf	ReceiveEvt@EventStatus
 12939  0AAD                     l4035:	
 12940                           
 12941                           ;os_ser.c: 122: }
 12942                           ;os_ser.c: 123: }
 12943                           ;os_ser.c: 126: return(EventStatus);
 12944  0AAD  0874               	movf	ReceiveEvt@EventStatus,w
 12945  0AAE  0008               	return
 12946  0AAF                     __end_of_ReceiveEvt:	
 12947                           
 12948                           	psect	text69
 12949  0CC7                     __ptext69:	
 12950 ;; *************** function _Adc_InitAdcModule *****************
 12951 ;; Defined at:
 12952 ;;		line 107 in file "../../../Framework/MercuryFwk/Source/c/01_Hal/02_Drv/adc_drv.c"
 12953 ;; Parameters:    Size  Location     Type
 12954 ;;  AdcConfig       1    wreg     PTR struct _AdcCfgType
 12955 ;;		 -> App_MainTask@AdcConfig(6), 
 12956 ;; Auto vars:     Size  Location     Type
 12957 ;;  AdcConfig       1    4[COMMON] PTR struct _AdcCfgType
 12958 ;;		 -> App_MainTask@AdcConfig(6), 
 12959 ;; Return value:  Size  Location     Type
 12960 ;;                  1    wreg      void 
 12961 ;; Registers used:
 12962 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 12963 ;; Tracked objects:
 12964 ;;		On entry : 0/0
 12965 ;;		On exit  : 0/0
 12966 ;;		Unchanged: 0/0
 12967 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12968 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12969 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12970 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12971 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12972 ;;Total ram usage:        1 bytes
 12973 ;; Hardware stack levels used:    1
 12974 ;; Hardware stack levels required when called:    3
 12975 ;; This function calls:
 12976 ;;		Nothing
 12977 ;; This function is called by:
 12978 ;;		_App_MainTask
 12979 ;; This function uses a non-reentrant model
 12980 ;;
 12981                           
 12982                           
 12983                           ;psect for function _Adc_InitAdcModule
 12984  0CC7                     _Adc_InitAdcModule:	
 12985                           
 12986                           ;incstack = 0
 12987                           ; Regs used in _Adc_InitAdcModule: [wreg+fsr1l+fsr1h+status,2+status,0]
 12988                           ;Adc_InitAdcModule@AdcConfig stored from wreg
 12989  0CC7  00F4               	movwf	Adc_InitAdcModule@AdcConfig
 12990                           
 12991                           ;adc_drv.c: 110: ADCON0bits.ADON = AdcConfig->AdcEnable;
 12992  0CC8  0874               	movf	Adc_InitAdcModule@AdcConfig,w
 12993  0CC9  0086               	movwf	6
 12994  0CCA  0187               	clrf	7
 12995  0CCB  0C01               	rrf	1,w
 12996  0CCC  0021               	movlb	1	; select bank1
 12997  0CCD  1C03               	skipc
 12998  0CCE  101D               	bcf	29,0	;volatile
 12999  0CCF  1803               	skipnc
 13000  0CD0  141D               	bsf	29,0	;volatile
 13001                           
 13002                           ;adc_drv.c: 112: ADCON1bits.ADFM = AdcConfig->AdcResultFormat;
 13003  0CD1  0A74               	incf	Adc_InitAdcModule@AdcConfig,w
 13004  0CD2  0086               	movwf	6
 13005  0CD3  0187               	clrf	7
 13006  0CD4  0C01               	rrf	1,w
 13007  0CD5  1C03               	skipc
 13008  0CD6  139E               	bcf	30,7	;volatile
 13009  0CD7  1803               	skipnc
 13010  0CD8  179E               	bsf	30,7	;volatile
 13011                           
 13012                           ;adc_drv.c: 114: ADCON1bits.ADCS0 = AdcConfig->AdcConvClock;
 13013  0CD9  0874               	movf	Adc_InitAdcModule@AdcConfig,w
 13014  0CDA  3E02               	addlw	2
 13015  0CDB  0086               	movwf	6
 13016  0CDC  0187               	clrf	7
 13017  0CDD  0C01               	rrf	1,w
 13018  0CDE  1C03               	skipc
 13019  0CDF  121E               	bcf	30,4	;volatile
 13020  0CE0  1803               	skipnc
 13021  0CE1  161E               	bsf	30,4	;volatile
 13022                           
 13023                           ;adc_drv.c: 116: ADCON1bits.ADNREF = AdcConfig->AdcNegRef;
 13024  0CE2  0874               	movf	Adc_InitAdcModule@AdcConfig,w
 13025  0CE3  3E03               	addlw	3
 13026  0CE4  0086               	movwf	6
 13027  0CE5  0187               	clrf	7
 13028  0CE6  0C01               	rrf	1,w
 13029  0CE7  1C03               	skipc
 13030  0CE8  111E               	bcf	30,2	;volatile
 13031  0CE9  1803               	skipnc
 13032  0CEA  151E               	bsf	30,2	;volatile
 13033                           
 13034                           ;adc_drv.c: 117: ADCON1bits.ADPREF = AdcConfig->AdcPosRef;
 13035  0CEB  0874               	movf	Adc_InitAdcModule@AdcConfig,w
 13036  0CEC  3E04               	addlw	4
 13037  0CED  0086               	movwf	6
 13038  0CEE  0187               	clrf	7
 13039  0CEF  081E               	movf	30,w	;volatile
 13040  0CF0  0601               	xorwf	1,w
 13041  0CF1  39FC               	andlw	-4
 13042  0CF2  0601               	xorwf	1,w
 13043  0CF3  009E               	movwf	30	;volatile
 13044                           
 13045                           ;adc_drv.c: 119: PIE1bits.ADIE = AdcConfig->AdcIntEnabled;
 13046  0CF4  0874               	movf	Adc_InitAdcModule@AdcConfig,w
 13047  0CF5  3E05               	addlw	5
 13048  0CF6  0086               	movwf	6
 13049  0CF7  0187               	clrf	7
 13050  0CF8  0C01               	rrf	1,w
 13051  0CF9  1C03               	skipc
 13052  0CFA  1311               	bcf	17,6	;volatile
 13053  0CFB  1803               	skipnc
 13054  0CFC  1711               	bsf	17,6	;volatile
 13055  0CFD  0008               	return
 13056  0CFE                     __end_of_Adc_InitAdcModule:	
 13057                           
 13058                           	psect	text70
 13059  0782                     __ptext70:	
 13060 ;; *************** function _Adc_ConfigAnCh *****************
 13061 ;; Defined at:
 13062 ;;		line 73 in file "../../../Framework/MercuryFwk/Source/c/01_Hal/02_Drv/adc_drv.c"
 13063 ;; Parameters:    Size  Location     Type
 13064 ;;  AnChSel         1    wreg     PTR struct _AnalogChSelT
 13065 ;;		 -> App_MainTask@AnalogChSel(12), 
 13066 ;; Auto vars:     Size  Location     Type
 13067 ;;  AnChSel         1    4[COMMON] PTR struct _AnalogChSelT
 13068 ;;		 -> App_MainTask@AnalogChSel(12), 
 13069 ;; Return value:  Size  Location     Type
 13070 ;;                  1    wreg      void 
 13071 ;; Registers used:
 13072 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 13073 ;; Tracked objects:
 13074 ;;		On entry : 0/0
 13075 ;;		On exit  : 0/0
 13076 ;;		Unchanged: 0/0
 13077 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13078 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13079 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13080 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13081 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13082 ;;Total ram usage:        1 bytes
 13083 ;; Hardware stack levels used:    1
 13084 ;; Hardware stack levels required when called:    3
 13085 ;; This function calls:
 13086 ;;		Nothing
 13087 ;; This function is called by:
 13088 ;;		_App_MainTask
 13089 ;; This function uses a non-reentrant model
 13090 ;;
 13091                           
 13092                           
 13093                           ;psect for function _Adc_ConfigAnCh
 13094  0782                     _Adc_ConfigAnCh:	
 13095                           
 13096                           ;incstack = 0
 13097                           ; Regs used in _Adc_ConfigAnCh: [wreg+fsr1l+fsr1h+status,2+status,0]
 13098                           ;Adc_ConfigAnCh@AnChSel stored from wreg
 13099  0782  00F4               	movwf	Adc_ConfigAnCh@AnChSel
 13100                           
 13101                           ;adc_drv.c: 76: ANSELA = 0x00;
 13102  0783  0023               	movlb	3	; select bank3
 13103  0784  018C               	clrf	12	;volatile
 13104                           
 13105                           ;adc_drv.c: 77: ANSELAbits.ANSA0 = AnChSel->AnSelA0An0;
 13106  0785  0874               	movf	Adc_ConfigAnCh@AnChSel,w
 13107  0786  0086               	movwf	6
 13108  0787  0187               	clrf	7
 13109  0788  0C01               	rrf	1,w
 13110  0789  1C03               	skipc
 13111  078A  100C               	bcf	12,0	;volatile
 13112  078B  1803               	skipnc
 13113  078C  140C               	bsf	12,0	;volatile
 13114                           
 13115                           ;adc_drv.c: 78: ANSELAbits.ANSA1 = AnChSel->AnSelA1An1;
 13116  078D  0A74               	incf	Adc_ConfigAnCh@AnChSel,w
 13117  078E  0086               	movwf	6
 13118  078F  0187               	clrf	7
 13119  0790  0C01               	rrf	1,w
 13120  0791  1C03               	skipc
 13121  0792  108C               	bcf	12,1	;volatile
 13122  0793  1803               	skipnc
 13123  0794  148C               	bsf	12,1	;volatile
 13124                           
 13125                           ;adc_drv.c: 79: ANSELAbits.ANSA2 = AnChSel->AnSelA2An2;
 13126  0795  0874               	movf	Adc_ConfigAnCh@AnChSel,w
 13127  0796  3E02               	addlw	2
 13128  0797  0086               	movwf	6
 13129  0798  0187               	clrf	7
 13130  0799  0C01               	rrf	1,w
 13131  079A  1C03               	skipc
 13132  079B  110C               	bcf	12,2	;volatile
 13133  079C  1803               	skipnc
 13134  079D  150C               	bsf	12,2	;volatile
 13135                           
 13136                           ;adc_drv.c: 80: ANSELAbits.ANSA4 = AnChSel->AnSelA4An3;
 13137  079E  0874               	movf	Adc_ConfigAnCh@AnChSel,w
 13138  079F  3E03               	addlw	3
 13139  07A0  0086               	movwf	6
 13140  07A1  0187               	clrf	7
 13141  07A2  0C01               	rrf	1,w
 13142  07A3  1C03               	skipc
 13143  07A4  120C               	bcf	12,4	;volatile
 13144  07A5  1803               	skipnc
 13145  07A6  160C               	bsf	12,4	;volatile
 13146                           
 13147                           ;adc_drv.c: 83: ANSELB = 0x00;
 13148  07A7  018D               	clrf	13	;volatile
 13149                           
 13150                           ;adc_drv.c: 84: ANSELBbits.ANSB4 = AnChSel->AnSelB4An10;
 13151  07A8  0874               	movf	Adc_ConfigAnCh@AnChSel,w
 13152  07A9  3E04               	addlw	4
 13153  07AA  0086               	movwf	6
 13154  07AB  0187               	clrf	7
 13155  07AC  0C01               	rrf	1,w
 13156  07AD  1C03               	skipc
 13157  07AE  120D               	bcf	13,4	;volatile
 13158  07AF  1803               	skipnc
 13159  07B0  160D               	bsf	13,4	;volatile
 13160                           
 13161                           ;adc_drv.c: 85: ANSELBbits.ANSB5 = AnChSel->AnSelB5An11;
 13162  07B1  0874               	movf	Adc_ConfigAnCh@AnChSel,w
 13163  07B2  3E05               	addlw	5
 13164  07B3  0086               	movwf	6
 13165  07B4  0187               	clrf	7
 13166  07B5  0C01               	rrf	1,w
 13167  07B6  1C03               	skipc
 13168  07B7  128D               	bcf	13,5	;volatile
 13169  07B8  1803               	skipnc
 13170  07B9  168D               	bsf	13,5	;volatile
 13171                           
 13172                           ;adc_drv.c: 88: ANSELC = 0x00;
 13173  07BA  018E               	clrf	14	;volatile
 13174                           
 13175                           ;adc_drv.c: 89: ANSELCbits.ANSC0 = AnChSel->AnSelC0An4;
 13176  07BB  0874               	movf	Adc_ConfigAnCh@AnChSel,w
 13177  07BC  3E06               	addlw	6
 13178  07BD  0086               	movwf	6
 13179  07BE  0187               	clrf	7
 13180  07BF  0C01               	rrf	1,w
 13181  07C0  1C03               	skipc
 13182  07C1  100E               	bcf	14,0	;volatile
 13183  07C2  1803               	skipnc
 13184  07C3  140E               	bsf	14,0	;volatile
 13185                           
 13186                           ;adc_drv.c: 90: ANSELCbits.ANSC1 = AnChSel->AnSelC1An5;
 13187  07C4  0874               	movf	Adc_ConfigAnCh@AnChSel,w
 13188  07C5  3E07               	addlw	7
 13189  07C6  0086               	movwf	6
 13190  07C7  0187               	clrf	7
 13191  07C8  0C01               	rrf	1,w
 13192  07C9  1C03               	skipc
 13193  07CA  108E               	bcf	14,1	;volatile
 13194  07CB  1803               	skipnc
 13195  07CC  148E               	bsf	14,1	;volatile
 13196                           
 13197                           ;adc_drv.c: 91: ANSELCbits.ANSC2 = AnChSel->AnSelC2An6;
 13198  07CD  0874               	movf	Adc_ConfigAnCh@AnChSel,w
 13199  07CE  3E08               	addlw	8
 13200  07CF  0086               	movwf	6
 13201  07D0  0187               	clrf	7
 13202  07D1  0C01               	rrf	1,w
 13203  07D2  1C03               	skipc
 13204  07D3  110E               	bcf	14,2	;volatile
 13205  07D4  1803               	skipnc
 13206  07D5  150E               	bsf	14,2	;volatile
 13207                           
 13208                           ;adc_drv.c: 92: ANSELCbits.ANSC3 = AnChSel->AnSelC3An7;
 13209  07D6  0874               	movf	Adc_ConfigAnCh@AnChSel,w
 13210  07D7  3E09               	addlw	9
 13211  07D8  0086               	movwf	6
 13212  07D9  0187               	clrf	7
 13213  07DA  0C01               	rrf	1,w
 13214  07DB  1C03               	skipc
 13215  07DC  118E               	bcf	14,3	;volatile
 13216  07DD  1803               	skipnc
 13217  07DE  158E               	bsf	14,3	;volatile
 13218                           
 13219                           ;adc_drv.c: 94: ANSELCbits.ANSC6 = AnChSel->AnSelC6An8;
 13220  07DF  0874               	movf	Adc_ConfigAnCh@AnChSel,w
 13221  07E0  3E0A               	addlw	10
 13222  07E1  0086               	movwf	6
 13223  07E2  0187               	clrf	7
 13224  07E3  0C01               	rrf	1,w
 13225  07E4  1C03               	skipc
 13226  07E5  130E               	bcf	14,6	;volatile
 13227  07E6  1803               	skipnc
 13228  07E7  170E               	bsf	14,6	;volatile
 13229                           
 13230                           ;adc_drv.c: 95: ANSELCbits.ANSC7 = AnChSel->AnSelC7An9;
 13231  07E8  0874               	movf	Adc_ConfigAnCh@AnChSel,w
 13232  07E9  3E0B               	addlw	11
 13233  07EA  0086               	movwf	6
 13234  07EB  0187               	clrf	7
 13235  07EC  0C01               	rrf	1,w
 13236  07ED  1C03               	skipc
 13237  07EE  138E               	bcf	14,7	;volatile
 13238  07EF  1803               	skipnc
 13239  07F0  178E               	bsf	14,7	;volatile
 13240  07F1  0008               	return
 13241  07F2                     __end_of_Adc_ConfigAnCh:	
 13242                           
 13243                           	psect	intentry
 13244  0004                     __pintentry:	
 13245 ;; *************** function _MainInterrupt *****************
 13246 ;; Defined at:
 13247 ;;		line 50 in file "../../../Framework/MercuryFwk/Source/c/02_Osl/interrupts.c"
 13248 ;; Parameters:    Size  Location     Type
 13249 ;;		None
 13250 ;; Auto vars:     Size  Location     Type
 13251 ;;		None
 13252 ;; Return value:  Size  Location     Type
 13253 ;;                  1    wreg      void 
 13254 ;; Registers used:
 13255 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13256 ;; Tracked objects:
 13257 ;;		On entry : 0/0
 13258 ;;		On exit  : 0/0
 13259 ;;		Unchanged: 0/0
 13260 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13261 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13262 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13263 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13264 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13265 ;;Total ram usage:        1 bytes
 13266 ;; Hardware stack levels used:    1
 13267 ;; Hardware stack levels required when called:    2
 13268 ;; This function calls:
 13269 ;;		_SnrDrv_DetectEchoPulse
 13270 ;;		i1_GenerateEvt
 13271 ;; This function is called by:
 13272 ;;		Interrupt level 1
 13273 ;; This function uses a non-reentrant model
 13274 ;;
 13275                           
 13276  0004                     _MainInterrupt:	
 13277                           
 13278                           ;incstack = 0
 13279  0004  147E               	bsf	126,0	;set compiler interrupt flag (level 1)
 13280                           
 13281                           ; Regs used in _MainInterrupt: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 13282  0005  3180               	pagesel	$
 13283  0006  0020               	movlb	0	; select bank0
 13284  0007  087F               	movf	127,w
 13285  0008  00F3               	movwf	??_MainInterrupt
 13286                           
 13287                           ;interrupts.c: 53: if (PIR1bits.TMR2IF == ((UINT8)(1)) && PIE1bits.TMR2IE == ((UINT8)(1)
      +                          ))
 13288  0009  1C91               	btfss	17,1	;volatile
 13289  000A  281C               	goto	i1l3789
 13290  000B  0021               	movlb	1	; select bank1
 13291  000C  1C91               	btfss	17,1	;volatile
 13292  000D  281C               	goto	i1l3789
 13293                           
 13294                           ;interrupts.c: 54: {
 13295                           ;interrupts.c: 56: PIR1bits.TMR2IF = ((UINT8)(0));
 13296  000E  0020               	movlb	0	; select bank0
 13297  000F  1091               	bcf	17,1	;volatile
 13298                           
 13299                           ;interrupts.c: 58: InterruptCounter++;
 13300  0010  3001               	movlw	1
 13301  0011  0021               	movlb	1	; select bank1
 13302  0012  07B2               	addwf	_InterruptCounter^(0+128),f
 13303  0013  3000               	movlw	0
 13304  0014  3DB3               	addwfc	(_InterruptCounter+1)^(0+128),f
 13305                           
 13306                           ;interrupts.c: 60: if (InterruptCounter >= ((UINT16)(1)))
 13307  0015  0832               	movf	_InterruptCounter^(0+128),w
 13308  0016  0433               	iorwf	(_InterruptCounter+1)^(0+128),w
 13309  0017  1903               	btfsc	3,2
 13310  0018  281C               	goto	i1l3789
 13311                           
 13312                           ;interrupts.c: 61: {
 13313                           ;interrupts.c: 63: InterruptCounter = 0;
 13314  0019  01B2               	clrf	_InterruptCounter^(0+128)
 13315  001A  01B3               	clrf	(_InterruptCounter+1)^(0+128)
 13316                           
 13317                           ;interrupts.c: 65: MainSystemTimebaseFlag = CallTaskPhase;
 13318  001B  01EF               	clrf	_MainSystemTimebaseFlag^(0+128)
 13319  001C                     i1l3789:	
 13320                           
 13321                           ;interrupts.c: 66: }
 13322                           ;interrupts.c: 67: }
 13323                           ;interrupts.c: 70: if(PIE1bits.SSP1IE == ((UINT8)(1)) && PIR1bits.SSP1IF == ((UINT8)(1))
      +                          )
 13324  001C  0021               	movlb	1	; select bank1
 13325  001D  1D91               	btfss	17,3	;volatile
 13326  001E  2827               	goto	i1l3797
 13327  001F  0020               	movlb	0	; select bank0
 13328  0020  1D91               	btfss	17,3	;volatile
 13329  0021  2827               	goto	i1l3797
 13330                           
 13331                           ;interrupts.c: 71: {
 13332                           ;interrupts.c: 73: PIR1bits.SSP1IF = ((UINT8)(0));
 13333  0022  1191               	bcf	17,3	;volatile
 13334                           
 13335                           ;interrupts.c: 77: GenerateEvt(&I2cNewTxNotification);
 13336  0023  30E0               	movlw	(low (_I2cNewTxNotification| 0))& (0+255)
 13337  0024  318A  226D  3180   	fcall	i1_GenerateEvt
 13338  0027                     i1l3797:	
 13339                           
 13340                           ;interrupts.c: 84: }
 13341                           ;interrupts.c: 88: if(PIR3bits.TMR4IF == ((UINT8)(1)) && PIE3bits.TMR4IE == ((UINT8)(1))
      +                          )
 13342  0027  0020               	movlb	0	; select bank0
 13343  0028  1C93               	btfss	19,1	;volatile
 13344  0029  2831               	goto	i1l450
 13345  002A  0021               	movlb	1	; select bank1
 13346  002B  1C93               	btfss	19,1	;volatile
 13347  002C  2831               	goto	i1l450
 13348                           
 13349                           ;interrupts.c: 89: {
 13350                           ;interrupts.c: 91: PIR3bits.TMR4IF = ((UINT8)(0));
 13351  002D  0020               	movlb	0	; select bank0
 13352  002E  1093               	bcf	19,1	;volatile
 13353                           
 13354                           ;interrupts.c: 93: SnrDrv_DetectEchoPulse();
 13355  002F  318B  2348         	fcall	_SnrDrv_DetectEchoPulse
 13356  0031                     i1l450:	
 13357  0031  0873               	movf	??_MainInterrupt,w
 13358  0032  0020               	movlb	0	; select bank0
 13359  0033  00FF               	movwf	127
 13360  0034  107E               	bcf	126,0	;clear compiler interrupt flag (level 1)
 13361  0035  0009               	retfie
 13362  0036                     __end_of_MainInterrupt:	
 13363                           
 13364                           	psect	text72
 13365  0B48                     __ptext72:	
 13366 ;; *************** function _SnrDrv_DetectEchoPulse *****************
 13367 ;; Defined at:
 13368 ;;		line 188 in file "../../../Framework/MercuryFwk/Source/c/01_Hal/02_Drv/sonar_drv.c"
 13369 ;; Parameters:    Size  Location     Type
 13370 ;;		None
 13371 ;; Auto vars:     Size  Location     Type
 13372 ;;		None
 13373 ;; Return value:  Size  Location     Type
 13374 ;;                  1    wreg      void 
 13375 ;; Registers used:
 13376 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13377 ;; Tracked objects:
 13378 ;;		On entry : 0/0
 13379 ;;		On exit  : 0/0
 13380 ;;		Unchanged: 0/0
 13381 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13382 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13383 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13384 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13385 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13386 ;;Total ram usage:        0 bytes
 13387 ;; Hardware stack levels used:    1
 13388 ;; Hardware stack levels required when called:    1
 13389 ;; This function calls:
 13390 ;;		i1_GenerateEvt
 13391 ;; This function is called by:
 13392 ;;		_MainInterrupt
 13393 ;; This function uses a non-reentrant model
 13394 ;;
 13395                           
 13396                           
 13397                           ;psect for function _SnrDrv_DetectEchoPulse
 13398  0B48                     _SnrDrv_DetectEchoPulse:	
 13399                           
 13400                           ;sonar_drv.c: 190: static DetectEchoStateType DetectEchoState = WaitEchoRisEdge;
 13401                           ;sonar_drv.c: 191: static UINT16 EchoCounter = 0;
 13402                           ;sonar_drv.c: 193: switch (DetectEchoState)
 13403                           
 13404                           ;incstack = 0
 13405                           ; Regs used in _SnrDrv_DetectEchoPulse: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 13406  0B48  2B6A               	goto	i1l3771
 13407  0B49                     i1l316:	
 13408                           ;sonar_drv.c: 194: {
 13409                           ;sonar_drv.c: 195: case WaitEchoRisEdge:
 13410                           
 13411                           
 13412                           ;sonar_drv.c: 197: if (PORTAbits.RA2 == ((UINT8)(1)))
 13413  0B49  0020               	movlb	0	; select bank0
 13414  0B4A  1D0C               	btfss	12,2	;volatile
 13415  0B4B  0008               	return
 13416                           
 13417                           ;sonar_drv.c: 198: {
 13418                           ;sonar_drv.c: 200: EchoCounter++;
 13419  0B4C  3001               	movlw	1
 13420  0B4D  0021               	movlb	1	; select bank1
 13421  0B4E  07AC               	addwf	SnrDrv_DetectEchoPulse@EchoCounter^(0+128),f
 13422  0B4F  3000               	movlw	0
 13423  0B50  3DAD               	addwfc	(SnrDrv_DetectEchoPulse@EchoCounter+1)^(0+128),f
 13424                           
 13425                           ;sonar_drv.c: 202: DetectEchoState = MeasureEchoPulse;
 13426  0B51  01BD               	clrf	SnrDrv_DetectEchoPulse@DetectEchoState^(0+128)
 13427  0B52  0ABD               	incf	SnrDrv_DetectEchoPulse@DetectEchoState^(0+128),f
 13428                           
 13429                           ;sonar_drv.c: 203: }
 13430                           ;sonar_drv.c: 204: break;
 13431  0B53  0008               	return
 13432  0B54                     i1l319:	
 13433                           ;sonar_drv.c: 206: case MeasureEchoPulse:
 13434                           
 13435                           
 13436                           ;sonar_drv.c: 208: if (PORTAbits.RA2 == ((UINT8)(1)))
 13437  0B54  0020               	movlb	0	; select bank0
 13438  0B55  1D0C               	btfss	12,2	;volatile
 13439  0B56  2B5D               	goto	i1l3761
 13440                           
 13441                           ;sonar_drv.c: 209: {
 13442                           ;sonar_drv.c: 211: EchoCounter++;
 13443  0B57  3001               	movlw	1
 13444  0B58  0021               	movlb	1	; select bank1
 13445  0B59  07AC               	addwf	SnrDrv_DetectEchoPulse@EchoCounter^(0+128),f
 13446  0B5A  3000               	movlw	0
 13447  0B5B  3DAD               	addwfc	(SnrDrv_DetectEchoPulse@EchoCounter+1)^(0+128),f
 13448                           
 13449                           ;sonar_drv.c: 212: }
 13450  0B5C  0008               	return
 13451  0B5D                     i1l3761:	
 13452                           
 13453                           ;sonar_drv.c: 213: else
 13454                           ;sonar_drv.c: 214: {
 13455                           ;sonar_drv.c: 216: EchoPulseCount = EchoCounter;
 13456  0B5D  0021               	movlb	1	; select bank1
 13457  0B5E  082D               	movf	(SnrDrv_DetectEchoPulse@EchoCounter+1)^(0+128),w
 13458  0B5F  00DD               	movwf	(_EchoPulseCount+1)^(0+128)
 13459  0B60  082C               	movf	SnrDrv_DetectEchoPulse@EchoCounter^(0+128),w
 13460  0B61  00DC               	movwf	_EchoPulseCount^(0+128)
 13461                           
 13462                           ;sonar_drv.c: 218: EchoCounter = 0;
 13463  0B62  01AC               	clrf	SnrDrv_DetectEchoPulse@EchoCounter^(0+128)
 13464  0B63  01AD               	clrf	(SnrDrv_DetectEchoPulse@EchoCounter+1)^(0+128)
 13465                           
 13466                           ;sonar_drv.c: 220: GenerateEvt(&SonarEchoCountReady);
 13467  0B64  30E6               	movlw	(low (_SonarEchoCountReady| 0))& (0+255)
 13468  0B65  318A  226D         	fcall	i1_GenerateEvt
 13469                           
 13470                           ;sonar_drv.c: 222: DetectEchoState = WaitEchoRisEdge;
 13471  0B67  0021               	movlb	1	; select bank1
 13472  0B68  01BD               	clrf	SnrDrv_DetectEchoPulse@DetectEchoState^(0+128)
 13473                           
 13474                           ;sonar_drv.c: 228: }
 13475                           
 13476                           ;sonar_drv.c: 227: break;
 13477                           
 13478                           ;sonar_drv.c: 226: default:
 13479                           
 13480                           ;sonar_drv.c: 223: }
 13481                           ;sonar_drv.c: 224: break;
 13482  0B69  0008               	return
 13483  0B6A                     i1l3771:	
 13484  0B6A  0021               	movlb	1	; select bank1
 13485  0B6B  083D               	movf	SnrDrv_DetectEchoPulse@DetectEchoState^(0+128),w
 13486                           
 13487                           ; Switch size 1, requested type "space"
 13488                           ; Number of cases is 2, Range of values is 0 to 1
 13489                           ; switch strategies available:
 13490                           ; Name         Instructions Cycles
 13491                           ; simple_byte            7     4 (average)
 13492                           ; direct_byte           10     6 (fixed)
 13493                           ; jumptable            260     6 (fixed)
 13494                           ;	Chosen strategy is simple_byte
 13495  0B6C  3A00               	xorlw	0	; case 0
 13496  0B6D  1903               	skipnz
 13497  0B6E  2B49               	goto	i1l316
 13498  0B6F  3A01               	xorlw	1	; case 1
 13499  0B70  1903               	skipnz
 13500  0B71  2B54               	goto	i1l319
 13501  0B72  2B73               	goto	i1l323
 13502  0B73                     i1l323:	
 13503  0B73  0008               	return
 13504  0B74                     __end_of_SnrDrv_DetectEchoPulse:	
 13505                           
 13506                           	psect	text73
 13507  0A6D                     __ptext73:	
 13508 ;; *************** function i1_GenerateEvt *****************
 13509 ;; Defined at:
 13510 ;;		line 73 in file "../../../Framework/MercuryFwk/Source/c/02_Osl/os_ser.c"
 13511 ;; Parameters:    Size  Location     Type
 13512 ;;  Event           1    wreg     PTR struct _EventStructu
 13513 ;;		 -> StartMeasure(2), I2cReplyPacketReady(2), I2cWriteRequest(2), I2cSetAddress(2), 
 13514 ;;		 -> SonarMeasureComplete(2), SonarEchoCountReady(2), SonarStartMeasure(2), I2cNewTxNotification(2), 
 13515 ;;		 -> I2cNewPacketNotification(2), 
 13516 ;; Auto vars:     Size  Location     Type
 13517 ;;  Event           1    1[COMMON] PTR struct _EventStructu
 13518 ;;		 -> StartMeasure(2), I2cReplyPacketReady(2), I2cWriteRequest(2), I2cSetAddress(2), 
 13519 ;;		 -> SonarMeasureComplete(2), SonarEchoCountReady(2), SonarStartMeasure(2), I2cNewTxNotification(2), 
 13520 ;;		 -> I2cNewPacketNotification(2), 
 13521 ;;  GenerateEvt     1    2[COMMON] enum E3629
 13522 ;; Return value:  Size  Location     Type
 13523 ;;                  1    wreg      enum E3625
 13524 ;; Registers used:
 13525 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 13526 ;; Tracked objects:
 13527 ;;		On entry : 0/0
 13528 ;;		On exit  : 0/0
 13529 ;;		Unchanged: 0/0
 13530 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13531 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13532 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13533 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13534 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13535 ;;Total ram usage:        3 bytes
 13536 ;; Hardware stack levels used:    1
 13537 ;; This function calls:
 13538 ;;		Nothing
 13539 ;; This function is called by:
 13540 ;;		_SnrDrv_DetectEchoPulse
 13541 ;;		_MainInterrupt
 13542 ;; This function uses a non-reentrant model
 13543 ;;
 13544                           
 13545                           
 13546                           ;psect for function i1_GenerateEvt
 13547  0A6D                     i1_GenerateEvt:	
 13548                           
 13549                           ;incstack = 0
 13550                           ; Regs used in i1_GenerateEvt: [wreg+fsr1l+fsr1h+status,2+status,0]
 13551                           ;i1GenerateEvt@Event stored from wreg
 13552  0A6D  00F1               	movwf	i1GenerateEvt@Event
 13553                           
 13554                           ;os_ser.c: 76: EventStatusType EventStatus = EventIdle;
 13555  0A6E  01F2               	clrf	i1GenerateEvt@EventStatus
 13556                           
 13557                           ;os_ser.c: 78: if ((Event->EventOptions != ((UINT8)(2))) && (Event->EventOptions != ((UI
      +                          NT8)(3))))
 13558  0A6F  0871               	movf	i1GenerateEvt@Event,w
 13559  0A70  0086               	movwf	6
 13560  0A71  0187               	clrf	7
 13561  0A72  3002               	movlw	2
 13562  0A73  0601               	xorwf	1,w
 13563  0A74  1903               	btfsc	3,2
 13564  0A75  2A89               	goto	i1l3733
 13565  0A76  0871               	movf	i1GenerateEvt@Event,w
 13566  0A77  0086               	movwf	6
 13567  0A78  0187               	clrf	7
 13568  0A79  3003               	movlw	3
 13569  0A7A  0601               	xorwf	1,w
 13570  0A7B  1903               	btfsc	3,2
 13571  0A7C  2A89               	goto	i1l3733
 13572                           
 13573                           ;os_ser.c: 79: {
 13574                           ;os_ser.c: 81: Event->EventStatus = EventSent;
 13575  0A7D  3002               	movlw	2
 13576  0A7E  00F0               	movwf	??i1_GenerateEvt
 13577  0A7F  0A71               	incf	i1GenerateEvt@Event,w
 13578  0A80  0086               	movwf	6
 13579  0A81  0187               	clrf	7
 13580  0A82  0870               	movf	??i1_GenerateEvt,w
 13581  0A83  0081               	movwf	1
 13582                           
 13583                           ;os_ser.c: 83: EventStatus = EventSent;
 13584  0A84  3002               	movlw	2
 13585  0A85  00F0               	movwf	??i1_GenerateEvt
 13586  0A86  0870               	movf	??i1_GenerateEvt,w
 13587  0A87  00F2               	movwf	i1GenerateEvt@EventStatus
 13588                           
 13589                           ;os_ser.c: 84: }
 13590  0A88  0008               	return
 13591  0A89                     i1l3733:	
 13592                           
 13593                           ;os_ser.c: 85: else
 13594                           ;os_ser.c: 86: {
 13595                           ;os_ser.c: 88: EventStatus = EventNotSent;
 13596  0A89  3003               	movlw	3
 13597  0A8A  00F0               	movwf	??i1_GenerateEvt
 13598  0A8B  0870               	movf	??i1_GenerateEvt,w
 13599  0A8C  00F2               	movwf	i1GenerateEvt@EventStatus
 13600  0A8D  0008               	return
 13601  0A8E                     __end_ofi1_GenerateEvt:	
 13602                           ;os_ser.c: 89: }
 13603                           ;os_ser.c: 92: return(EventStatus);
 13604                           ;	Return value of i1_GenerateEvt is never used
 13605                           
 13606  007E                     btemp	set	126	;btemp
 13607  007E                     int$flags	set	126
 13608  007E                     wtemp	set	126
 13609  007E                     wtemp0	set	126
 13610  0080                     wtemp1	set	128
 13611  0082                     wtemp2	set	130
 13612  0084                     wtemp3	set	132
 13613  0086                     wtemp4	set	134
 13614  0088                     wtemp5	set	136
 13615  007F                     wtemp6	set	127
 13616  007E                     ttemp	set	126
 13617  007E                     ttemp0	set	126
 13618  0081                     ttemp1	set	129
 13619  0084                     ttemp2	set	132
 13620  0087                     ttemp3	set	135
 13621  007F                     ttemp4	set	127
 13622  007E                     ltemp	set	126
 13623  007E                     ltemp0	set	126
 13624  0082                     ltemp1	set	130
 13625  0086                     ltemp2	set	134
 13626  0080                     ltemp3	set	128


Data Sizes:
    Strings     37
    Constant    12
    Data        50
    BSS         429
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14      6      10
    BANK0            80     69      78
    BANK1            80      0      80
    BANK2            80      6      72
    BANK3            80      0      80
    BANK4            80      0      80
    BANK5            80      0      80
    BANK6            80      0      80
    BANK7            80      0       0
    BANK8            80      0       0
    BANK9            80      0       0
    BANK10           80      0       0
    BANK11           45      0       0
    BANK12            0      0       0

Pointer List with Targets:

    Tmr6IsrCallback	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), 

    Tmr4IsrCallback	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), 

    Tmr2IsrCallback	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), 

    utoa@buf	PTR unsigned char  size(1) Largest target is 4
		 -> ManageProtocol@DistanceCmStr(BANK0[3]), StdS_ManageStdServices@DieTempStr(BANK0[4]), 

    sp__itoa	PTR unsigned char  size(1) Largest target is 0

    sp__utoa	PTR unsigned char  size(1) Largest target is 4
		 -> ManageProtocol@DistanceCmStr(BANK0[3]), StdS_ManageStdServices@DieTempStr(BANK0[4]), 

    StringCopy@SourceStr	PTR unsigned char  size(2) Largest target is 9
		 -> ManageProtocol@DistanceCmStr(BANK0[3]), StdS_ManageStdServices@DieTempStr(BANK0[4]), STR_5(CODE[9]), STR_4(CODE[9]), 
		 -> STR_3(CODE[6]), STR_2(CODE[5]), 

    StringCopy@DestStr	PTR unsigned char  size(1) Largest target is 80
		 -> RepBuffer(BANK3[80]), 

    LedStateMachine@LedSts	PTR enum E4018 size(1) Largest target is 1
		 -> Led1Sts(BANK1[1]), 

    LedStateMachine@LedPulse	PTR struct _LedPulseType size(1) Largest target is 6
		 -> Led1Pulse(BANK1[6]), 

    LedStateMachine@LedBlink	PTR struct _LedBlinkType size(1) Largest target is 9
		 -> Led1Blink(BANK1[9]), 

    ReceiveEvt@Event	PTR struct _EventStructure size(1) Largest target is 2
		 -> StartMeasure(BANK1[2]), I2cReplyPacketReady(COMMON[2]), I2cWriteRequest(BANK1[2]), I2cSetAddress(BANK1[2]), 
		 -> SonarEchoCountReady(BANK1[2]), SonarStartMeasure(BANK1[2]), I2cNewTxNotification(BANK1[2]), I2cNewPacketNotification(BANK1[2]), 

    GenerateEvt@Event	PTR struct _EventStructure size(1) Largest target is 2
		 -> StartMeasure(BANK1[2]), I2cReplyPacketReady(COMMON[2]), I2cWriteRequest(BANK1[2]), I2cSetAddress(BANK1[2]), 
		 -> SonarMeasureComplete(BANK1[2]), SonarEchoCountReady(BANK1[2]), SonarStartMeasure(BANK1[2]), I2cNewTxNotification(BANK1[2]), 
		 -> I2cNewPacketNotification(BANK1[2]), 

    S1392_SchedTblType$Task	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> App_MainTask(), Led_MainTask(), Wdg_MainTask(), I2cSlv_MainTask(), 
		 -> SnrDrv_GetDistSm(), I2c_DataReceiveSm(), 

    TaskTable.Task	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> App_MainTask(), Led_MainTask(), Wdg_MainTask(), I2cSlv_MainTask(), 
		 -> SnrDrv_GetDistSm(), I2c_DataReceiveSm(), 

    Tmr_TmrBConfig@TmrBConfig	PTR struct _TmrBConfigType size(1) Largest target is 6
		 -> InitTimer4@TmrBConfig(BANK0[6]), InitSchTimer@TmrBConfig(BANK0[6]), 

    Mcu_ConfigPullUps@WpuCh	PTR struct _WpuChType size(1) Largest target is 18
		 -> App_MainTask@WpuCh(BANK0[18]), 

    LedPulseStateMachine@LedPulse	PTR struct _LedPulseType size(1) Largest target is 6
		 -> Led1Pulse(BANK1[6]), 

    LedBlinkStateMachine@LedBlink	PTR struct _LedBlinkType size(1) Largest target is 9
		 -> Led1Blink(BANK1[9]), 

    I2c_UpdateTxBuffer@DataBuffer	PTR unsigned char  size(1) Largest target is 80
		 -> RepBuffer(BANK3[80]), 

    I2c_InitI2cModule@I2cConfig	PTR struct _I2cConfig size(1) Largest target is 11
		 -> I2cConfig(BANK1[11]), 

    Adc_InitAdcModule@AdcConfig	PTR struct _AdcCfgType size(1) Largest target is 6
		 -> App_MainTask@AdcConfig(BANK0[6]), 

    Adc_ConfigAnCh@AnChSel	PTR struct _AnalogChSelType size(1) Largest target is 12
		 -> App_MainTask@AnalogChSel(BANK0[12]), 


Critical Paths under _main in COMMON

    _Tmr_TmrBConfig->_TmrBInit
    _Tmr_TmrBConfig->_Tmr_TmrBIrqSet
    _Tmr_TmrBPrSet->___wmul
    ___lmul->___wmul
    _Wdg_MainTask->_Mcu_SetWdgPeriod
    _SnrDrv_GetDistSm->_ReceiveEvt
    _LedStateMachine->_LedBlinkStateMachine
    _LedPulseStateMachine->_Led_SetLedStatus
    _LedBlinkStateMachine->___lwdiv
    _I2c_DataReceiveSm->_ClearRxBuffer
    _I2c_DataReceiveSm->_ClearTxBuffer
    _I2c_DataReceiveSm->_ReceiveEvt
    _I2c_InitI2cModule->_ClearRxBuffer
    _I2c_InitI2cModule->_ClearTxBuffer
    _I2cSlv_I2cDrvHandle->_Led_SetLedStatus
    _I2cSlv_I2cDrvHandle->_ReceiveEvt
    _SonarMeasure->_ReceiveEvt
    _SnrDrv_StartMeasure->_GenerateEvt
    _AppSm->_StdS_SetI2cAddress
    _ManageProtocol->_ReceiveEvt
    _utoa->___lwmod
    _SetLedBehavSts->_Led_SetLedPulseTime
    _SetLedBehavSts->_Led_SetLedStatus
    _LowPowerMode->_Mcu_SetWdgSts
    _GetDieTemperature->_Adc_GetConvResult
    _GetDieTemperature->_Adc_SelectChannel
    _ControlLedDirect->_Led_SetLedStatus

Critical Paths under _MainInterrupt in COMMON

    _MainInterrupt->i1_GenerateEvt
    _SnrDrv_DetectEchoPulse->i1_GenerateEvt

Critical Paths under _main in BANK0

    _SystemInit->_InitSchTimer
    _SystemInit->_InitTimer4
    _InitTimer4->_Tmr_TmrBConfig
    _InitSchTimer->_Tmr_TmrBConfig
    _Tmr_TmrBConfig->_Tmr_TmrBPrSet
    _Tmr_TmrBPrSet->___lmul
    ___lmul->___wmul
    _MainScheduler->_InitializeTasks
    _MainScheduler->_ScheduleTasks
    _ScheduleTasks->_App_MainTask
    _InitializeTasks->_App_MainTask
    _LedStateMachine->_LedPulseStateMachine
    _LedPulseStateMachine->___lwdiv
    _LedBlinkStateMachine->___lwdiv
    _I2cSlv_I2cDrvHandle->_I2c_UpdateTxBuffer
    _App_MainTask->_AppSm
    _SonarMeasure->_GenerateEvt
    _SnrDrv_StartMeasure->_GenerateEvt
    _AppSm->_ManageProtocol
    _ManageProtocol->_StdS_ManageStdServices
    _StdS_ManageStdServices->_utoa
    _utoa->___lwdiv
    _SetLedBehavSts->_Led_SetLedBlinkTime
    _GetDieTemperature->_Adc_GetConvResult
    _ControlLedDirect->_Led_SetLedStatus

Critical Paths under _MainInterrupt in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _MainInterrupt in BANK1

    None.

Critical Paths under _main in BANK2

    _MainScheduler->_ScheduleTasks

Critical Paths under _MainInterrupt in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _MainInterrupt in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _MainInterrupt in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _MainInterrupt in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _MainInterrupt in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _MainInterrupt in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _MainInterrupt in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _MainInterrupt in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _MainInterrupt in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _MainInterrupt in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _MainInterrupt in BANK12

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0   61154
                      _MainScheduler
                         _SystemInit
 ---------------------------------------------------------------------------------
 (1) _SystemInit                                           0     0      0    6682
                       _InitSchTimer
                         _InitTimer4
               _Mcu_EnableInterrupts
                 _Mcu_StartSystemPll
 ---------------------------------------------------------------------------------
 (2) _Mcu_StartSystemPll                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _Mcu_EnableInterrupts                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _InitTimer4                                           7     7      0    3341
                                             37 BANK0      7     7      0
                     _Tmr_TmrBConfig
 ---------------------------------------------------------------------------------
 (2) _InitSchTimer                                         7     7      0    3341
                                             37 BANK0      7     7      0
                     _Tmr_TmrBConfig
 ---------------------------------------------------------------------------------
 (3) _Tmr_TmrBConfig                                       3     2      1    3138
                                             34 BANK0      3     2      1
                           _TmrBInit
                       _Tmr_StartTmr
                     _Tmr_TmrBIrqSet
                      _Tmr_TmrBPrSet
 ---------------------------------------------------------------------------------
 (4) _Tmr_TmrBPrSet                                       18    14      4    2003
                                             16 BANK0     18    14      4
                            ___lldiv
                             ___lmul
                             ___wmul
 ---------------------------------------------------------------------------------
 (5) ___wmul                                               6     2      4     404
                                              4 COMMON     2     2      0
                                              0 BANK0      4     0      4
 ---------------------------------------------------------------------------------
 (5) ___lmul                                              12     4      8     220
                                              4 BANK0     12     4      8
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (5) ___lldiv                                             14     6      8     857
                                              4 COMMON     1     1      0
                                              0 BANK0     13     5      8
 ---------------------------------------------------------------------------------
 (4) _Tmr_TmrBIrqSet                                       2     1      1     216
                                              4 COMMON     2     1      1
 ---------------------------------------------------------------------------------
 (4) _Tmr_StartTmr                                         1     1      0      22
                                              4 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (4) _TmrBInit                                             4     2      2     371
                                              4 COMMON     2     0      2
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _MainScheduler                                        0     0      0   54472
                    _InitializeTasks
                      _ScheduleTasks
 ---------------------------------------------------------------------------------
 (2) _ScheduleTasks                                        7     7      0   27329
                                             68 BANK0      1     1      0
                                              0 BANK2      6     6      0
                       _App_MainTask *
                    _I2cSlv_MainTask *
                  _I2c_DataReceiveSm *
                       _Led_MainTask *
                   _SnrDrv_GetDistSm *
                       _Wdg_MainTask *
 ---------------------------------------------------------------------------------
 (2) _InitializeTasks                                      5     5      0   27143
                                             68 BANK0      1     1      0
                                              0 BANK2      4     4      0
                       _App_MainTask *
                    _I2cSlv_MainTask *
                  _I2c_DataReceiveSm *
                       _Led_MainTask *
                   _SnrDrv_GetDistSm *
                       _Wdg_MainTask *
 ---------------------------------------------------------------------------------
 (3) _Wdg_MainTask                                         1     0      1      44
                                             30 BANK0      1     0      1
                       _Mcu_ClearWdg
                   _Mcu_SetWdgPeriod
                      _Mcu_SetWdgSts
 ---------------------------------------------------------------------------------
 (4) _Mcu_SetWdgPeriod                                     2     2      0      22
                                              4 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (4) _Mcu_ClearWdg                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _SnrDrv_GetDistSm                                     2     1      1    1131
                                             30 BANK0      2     1      1
                        _GenerateEvt
                         _ReceiveEvt
                       _SnrInitSonar
 ---------------------------------------------------------------------------------
 (4) _SnrInitSonar                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _Led_MainTask                                         5     4      1    5281
                                             30 BANK0      5     4      1
                    _LedStateMachine
                     _SetLedBehavSts
 ---------------------------------------------------------------------------------
 (4) _LedStateMachine                                      7     4      3    4263
                                             11 BANK0      7     4      3
               _LedBlinkStateMachine
               _LedPulseStateMachine
 ---------------------------------------------------------------------------------
 (5) _LedPulseStateMachine                                 4     3      1    2208
                                              7 BANK0      4     3      1
                   _Led_SetLedStatus
                            ___lwdiv
 ---------------------------------------------------------------------------------
 (5) _LedBlinkStateMachine                                 3     3      0    1654
                                              5 COMMON     1     1      0
                                              7 BANK0      2     2      0
                            ___lwdiv
 ---------------------------------------------------------------------------------
 (3) _I2c_DataReceiveSm                                    9     8      1    1459
                                             30 BANK0      9     8      1
                     _CheckAckStatus
                    _CheckByteStatus
                 _CheckStopBitStatus
                      _ClearRxBuffer
                      _ClearTxBuffer
                        _GenerateEvt
                         _ReceiveEvt
 ---------------------------------------------------------------------------------
 (4) _CheckStopBitStatus                                   1     1      0       0
                                              4 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (4) _CheckByteStatus                                      1     1      0       0
                                              4 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (4) _CheckAckStatus                                       1     1      0       0
                                              4 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (3) _I2cSlv_MainTask                                      1     0      1    2773
                                             30 BANK0      1     0      1
                _I2cSlv_I2cDrvHandle
                  _I2c_InitI2cModule
                      _I2c_SetConfig
 ---------------------------------------------------------------------------------
 (4) _I2c_SetConfig                                        1     1      0       0
                                              4 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (4) _I2c_InitI2cModule                                    3     3      0     572
                                              0 BANK0      3     3      0
                      _ClearRxBuffer
                      _ClearTxBuffer
 ---------------------------------------------------------------------------------
 (4) _ClearTxBuffer                                        2     2      0      99
                                              4 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (4) _ClearRxBuffer                                        2     2      0      99
                                              4 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (4) _I2cSlv_I2cDrvHandle                                  6     6      0    2201
                                              4 BANK0      6     6      0
                        _GenerateEvt
                  _I2c_SetI2cAddress
              _I2c_SetI2cAddressMask
                 _I2c_UpdateTxBuffer
                   _Led_SetLedStatus
                         _ReceiveEvt
 ---------------------------------------------------------------------------------
 (5) _I2c_UpdateTxBuffer                                   5     4      1     274
                                              4 COMMON     1     0      1
                                              0 BANK0      4     4      0
 ---------------------------------------------------------------------------------
 (5) _I2c_SetI2cAddressMask                                1     1      0      31
                                              4 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (5) _I2c_SetI2cAddress                                    1     1      0      31
                                              4 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (3) _App_MainTask                                        38    37      1   16322
                                             30 BANK0     38    37      1
                     _Adc_ConfigAnCh
                  _Adc_InitAdcModule
                              _AppSm
                  _Mcu_ConfigPullUps
                 _Mcu_SetDieTempMode
                  _Mcu_SetDieTempSts
                  _Mcu_SetPullUpsSts
                       _SonarMeasure
 ---------------------------------------------------------------------------------
 (4) _SonarMeasure                                         1     1      0    1834
                                              2 BANK0      1     1      0
                        _GenerateEvt
                         _ReceiveEvt
                _SnrDrv_StartMeasure
 ---------------------------------------------------------------------------------
 (5) _SnrDrv_StartMeasure                                  0     0      0     703
                        _GenerateEvt
 ---------------------------------------------------------------------------------
 (4) _Mcu_SetPullUpsSts                                    1     1      0      22
                                              4 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (4) _Mcu_SetDieTempSts                                    1     1      0      22
                                              4 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (4) _Mcu_SetDieTempMode                                   1     1      0      22
                                              4 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (4) _Mcu_ConfigPullUps                                    1     1      0     426
                                              4 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (4) _AppSm                                                1     1      0   12889
                                             29 BANK0      1     1      0
                        _GenerateEvt
                     _ManageProtocol
                 _StdS_SetI2cAddress
 ---------------------------------------------------------------------------------
 (5) _StdS_SetI2cAddress                                   2     2      0       0
                                              4 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (5) _ManageProtocol                                       5     5      0   12186
                                             24 BANK0      5     5      0
                        _GenerateEvt
                         _ReceiveEvt
             _StdS_ManageStdServices
                         _StringCopy
                               _utoa
 ---------------------------------------------------------------------------------
 (6) _StdS_ManageStdServices                               8     8      0    6811
                                             16 BANK0      8     8      0
                         _BoardReset
                   _ControlLedDirect
                        _GenerateEvt
                  _GetDieTemperature
                       _LowPowerMode
                     _SetLedBehavSts
                         _StringCopy
                               _utoa
 ---------------------------------------------------------------------------------
 (6) _utoa                                                 9     5      4    2586
                                              7 BANK0      9     5      4
                            ___lwdiv
                            ___lwmod
 ---------------------------------------------------------------------------------
 (7) ___lwmod                                              6     2      4     500
                                              4 COMMON     2     2      0
                                              0 BANK0      4     0      4
 ---------------------------------------------------------------------------------
 (6) ___lwdiv                                              8     4      4    1125
                                              4 COMMON     1     1      0
                                              0 BANK0      7     3      4
 ---------------------------------------------------------------------------------
 (6) _StringCopy                                           9     5      4    1581
                                              4 COMMON     1     1      0
                                              0 BANK0      8     4      4
 ---------------------------------------------------------------------------------
 (4) _SetLedBehavSts                                       2     2      0    1018
                                              4 BANK0      2     2      0
                _Led_SetLedBlinkTime
                _Led_SetLedPulseTime
                   _Led_SetLedStatus
 ---------------------------------------------------------------------------------
 (5) _Led_SetLedPulseTime                                  3     1      2     139
                                              4 COMMON     2     0      2
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (5) _Led_SetLedBlinkTime                                  5     1      4     247
                                              4 COMMON     1     1      0
                                              0 BANK0      4     0      4
 ---------------------------------------------------------------------------------
 (7) _LowPowerMode                                         0     0      0      22
                      _Mcu_SetWdgSts
 ---------------------------------------------------------------------------------
 (4) _Mcu_SetWdgSts                                        1     1      0      22
                                              4 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (7) _GetDieTemperature                                    4     2      2      90
                                              3 BANK0      4     2      2
                  _Adc_GetConvResult
                     _Adc_GetConvSts
                  _Adc_SelectChannel
                _Adc_StartConversion
 ---------------------------------------------------------------------------------
 (8) _Adc_StartConversion                                  0     0      0       0
 ---------------------------------------------------------------------------------
 (8) _Adc_SelectChannel                                    2     2      0      22
                                              4 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (8) _Adc_GetConvSts                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (8) _Adc_GetConvResult                                    5     3      2      34
                                              4 COMMON     2     0      2
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (4) _GenerateEvt                                          3     3      0     703
                                              4 COMMON     1     1      0
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (7) _ControlLedDirect                                     0     0      0     601
                   _Led_SetLedStatus
 ---------------------------------------------------------------------------------
 (5) _Led_SetLedStatus                                     3     2      1     601
                                              4 COMMON     2     1      1
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (7) _BoardReset                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (4) _ReceiveEvt                                           2     2      0     428
                                              4 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (4) _Adc_InitAdcModule                                    1     1      0     162
                                              4 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (4) _Adc_ConfigAnCh                                       1     1      0     294
                                              4 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 8
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (9) _MainInterrupt                                        1     1      0     150
                                              3 COMMON     1     1      0
             _SnrDrv_DetectEchoPulse
                      i1_GenerateEvt
 ---------------------------------------------------------------------------------
 (10) _SnrDrv_DetectEchoPulse                              0     0      0      75
                      i1_GenerateEvt
 ---------------------------------------------------------------------------------
 (10) i1_GenerateEvt                                       3     3      0      75
                                              0 COMMON     3     3      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 10
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _MainScheduler
     _InitializeTasks
       _App_MainTask *
         _Adc_ConfigAnCh
         _Adc_InitAdcModule
         _AppSm
           _GenerateEvt
           _ManageProtocol
             _GenerateEvt
             _ReceiveEvt
             _StdS_ManageStdServices
               _BoardReset
               _ControlLedDirect
                 _Led_SetLedStatus
               _GenerateEvt
               _GetDieTemperature
                 _Adc_GetConvResult
                 _Adc_GetConvSts
                 _Adc_SelectChannel
                 _Adc_StartConversion
               _LowPowerMode
                 _Mcu_SetWdgSts
               _SetLedBehavSts
                 _Led_SetLedBlinkTime
                 _Led_SetLedPulseTime
                 _Led_SetLedStatus
               _StringCopy
               _utoa
                 ___lwdiv
                 ___lwmod
             _StringCopy
             _utoa
               ___lwdiv
               ___lwmod
           _StdS_SetI2cAddress
         _Mcu_ConfigPullUps
         _Mcu_SetDieTempMode
         _Mcu_SetDieTempSts
         _Mcu_SetPullUpsSts
         _SonarMeasure
           _GenerateEvt
           _ReceiveEvt
           _SnrDrv_StartMeasure
             _GenerateEvt
       _I2cSlv_MainTask *
         _I2cSlv_I2cDrvHandle
           _GenerateEvt
           _I2c_SetI2cAddress
           _I2c_SetI2cAddressMask
           _I2c_UpdateTxBuffer
           _Led_SetLedStatus
           _ReceiveEvt
         _I2c_InitI2cModule
           _ClearRxBuffer
           _ClearTxBuffer
         _I2c_SetConfig
       _I2c_DataReceiveSm *
         _CheckAckStatus
         _CheckByteStatus
         _CheckStopBitStatus
         _ClearRxBuffer
         _ClearTxBuffer
         _GenerateEvt
         _ReceiveEvt
       _Led_MainTask *
         _LedStateMachine
           _LedBlinkStateMachine
             ___lwdiv
           _LedPulseStateMachine
             _Led_SetLedStatus
             ___lwdiv
         _SetLedBehavSts
           _Led_SetLedBlinkTime
           _Led_SetLedPulseTime
           _Led_SetLedStatus
       _SnrDrv_GetDistSm *
         _GenerateEvt
         _ReceiveEvt
         _SnrInitSonar
       _Wdg_MainTask *
         _Mcu_ClearWdg
         _Mcu_SetWdgPeriod
         _Mcu_SetWdgSts
     _ScheduleTasks
       _App_MainTask *
         _Adc_ConfigAnCh
         _Adc_InitAdcModule
         _AppSm
           _GenerateEvt
           _ManageProtocol
             _GenerateEvt
             _ReceiveEvt
             _StdS_ManageStdServices
               _BoardReset
               _ControlLedDirect
                 _Led_SetLedStatus
               _GenerateEvt
               _GetDieTemperature
                 _Adc_GetConvResult
                 _Adc_GetConvSts
                 _Adc_SelectChannel
                 _Adc_StartConversion
               _LowPowerMode
                 _Mcu_SetWdgSts
               _SetLedBehavSts
                 _Led_SetLedBlinkTime
                 _Led_SetLedPulseTime
                 _Led_SetLedStatus
               _StringCopy
               _utoa
                 ___lwdiv
                 ___lwmod
             _StringCopy
             _utoa
               ___lwdiv
               ___lwmod
           _StdS_SetI2cAddress
         _Mcu_ConfigPullUps
         _Mcu_SetDieTempMode
         _Mcu_SetDieTempSts
         _Mcu_SetPullUpsSts
         _SonarMeasure
           _GenerateEvt
           _ReceiveEvt
           _SnrDrv_StartMeasure
             _GenerateEvt
       _I2cSlv_MainTask *
         _I2cSlv_I2cDrvHandle
           _GenerateEvt
           _I2c_SetI2cAddress
           _I2c_SetI2cAddressMask
           _I2c_UpdateTxBuffer
           _Led_SetLedStatus
           _ReceiveEvt
         _I2c_InitI2cModule
           _ClearRxBuffer
           _ClearTxBuffer
         _I2c_SetConfig
       _I2c_DataReceiveSm *
         _CheckAckStatus
         _CheckByteStatus
         _CheckStopBitStatus
         _ClearRxBuffer
         _ClearTxBuffer
         _GenerateEvt
         _ReceiveEvt
       _Led_MainTask *
         _LedStateMachine
           _LedBlinkStateMachine
             ___lwdiv
           _LedPulseStateMachine
             _Led_SetLedStatus
             ___lwdiv
         _SetLedBehavSts
           _Led_SetLedBlinkTime
           _Led_SetLedPulseTime
           _Led_SetLedStatus
       _SnrDrv_GetDistSm *
         _GenerateEvt
         _ReceiveEvt
         _SnrInitSonar
       _Wdg_MainTask *
         _Mcu_ClearWdg
         _Mcu_SetWdgPeriod
         _Mcu_SetWdgSts
   _SystemInit
     _InitSchTimer
       _Tmr_TmrBConfig
         _TmrBInit
         _Tmr_StartTmr
         _Tmr_TmrBIrqSet
         _Tmr_TmrBPrSet
           ___lldiv
           ___lmul
             ___wmul (ARG)
           ___wmul
     _InitTimer4
       _Tmr_TmrBConfig
         _TmrBInit
         _Tmr_StartTmr
         _Tmr_TmrBIrqSet
         _Tmr_TmrBPrSet
           ___lldiv
           ___lmul
             ___wmul (ARG)
           ___wmul
     _Mcu_EnableInterrupts
     _Mcu_StartSystemPll

 _MainInterrupt (ROOT)
   _SnrDrv_DetectEchoPulse
     i1_GenerateEvt
   i1_GenerateEvt

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             3F0      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            E      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               E      6       A       2       71.4%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0       0       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50     45      4E       5       97.5%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BANK1               50      0      50       7      100.0%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BITBANK2            50      0       0       8        0.0%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
BANK2               50      6      48       9       90.0%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
BITBANK3            50      0       0      10        0.0%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BANK3               50      0      50      11      100.0%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
BITBANK4            50      0       0      12        0.0%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BANK4               50      0      50      13      100.0%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BITBANK5            50      0       0      14        0.0%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
BANK5               50      0      50      15      100.0%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
BITBANK6            50      0       0      16        0.0%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
BANK6               50      0      50      17      100.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BITBANK7            50      0       0      18        0.0%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BANK7               50      0       0      19        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
ABS                  0      0     230      20        0.0%
BITBANK8            50      0       0      21        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BANK8               50      0       0      22        0.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BITBANK9            50      0       0      23        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BANK9               50      0       0      24        0.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BITBANK10           50      0       0      25        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BANK10              50      0       0      26        0.0%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BITBANK11           50      0       0      27        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BANK11              2D      0       0      28        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
BITBANK12           30      0       0      29        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BANK12               0      0       0      30        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
DATA                 0      0     230      31        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%


Microchip Technology PIC Macro Assembler V1.38 build -256452561 
Symbol Table                                                                                   Sun Mar 24 11:34:41 2019

                 _SonarMeasureComplete 00E8                                      pc 0002  
                     _Mcu_SetWdgPeriod 08CF                            __CFG_CP$OFF 0000  
              ?_SnrDrv_DetectEchoPulse 0070                     _Mcu_StartSystemPll 086F  
           __end_of_I2c_UpdateTxBuffer 0A6D                  ?_LedPulseStateMachine 0027  
           __size_of_GetDieTemperature 0019                 ??_LedBlinkStateMachine 0027  
                  ___wmul@multiplicand 0022            __size_of_CheckStopBitStatus 000A  
                 __end_of_App_MainTask 0F98                                    l301 0E8F  
                                  l302 0E98                                    l403 09BF  
                                  l405 09C2         __end_of_StdS_ManageStdServices 01A0  
                                  l406 09C5                                    l415 0DC9  
                                  l168 0271                                    l360 070C  
                                  l408 09D3                                    l361 070F  
                                  l611 0706                                    l373 074F  
                                  l366 0729                                    l358 070A  
                                  l375 0752                                    l383 0AF6  
                                  l391 03F8                                    l376 0756  
                                  l368 072C                                    l641 0C67  
                                  l369 0730                                    l385 0AFF  
                                  l802 019F                                    l386 0B08  
                                  l379 0781                                    l660 0919  
                                  l388 0B1C                                    l653 0BCF  
                                  l913 05BC                                    l921 05E8  
                                  l649 0BA2                                    l674 0939  
                                  l667 0A33                                    l843 09BC  
                                  l589 09A6                                    l935 0B47  
                                  l768 0D3F                                    l953 0D8A  
                                  l961 0F52                                    l965 0F97  
                                  _PR2 001B                                    _PR4 0416  
                         __CFG_CPD$OFF 0000                                    _PR6 041D  
                  ?_Mcu_StartSystemPll 0070                           __CFG_BORV$LO 0000  
                                  wreg 0009                           __CFG_IESO$ON 0000  
                         __CFG_FOSC$HS 0000                       ??_SetLedBehavSts 0024  
                                 S4743 0800                                   S4745 080A  
               Mcu_SetPullUpsSts@PuSts 0074                        ??_MainInterrupt 0073  
                         __CFG_LVP$OFF 0000                        ??_MainScheduler 0076  
                                 l1124 0A3D                                   l4003 0EF6  
                                 l3133 0BE3                                   l4033 0AAC  
                                 l4041 00AD                                   l3129 0BD9  
                                 l4035 0AAD                                   l1396 0F1E  
                                 l4053 00E1                                   l4221 05C6  
                                 l4133 0A54                                   l4141 05F9  
                                 l4301 075A                                   l3309 0B11  
                                 l4071 0120                                   l4047 00C7  
                                 l4215 05A1                                   l4207 0573  
                                 l4303 0765                                   l4073 0123  
                                 l4065 0115                                   l4233 05D8  
                                 l4161 0674                                   l4137 05EB  
                                 l4321 03D0                                   l4083 0140  
                                 l4067 0118                                   l4059 00FB  
                                 l4227 05D1                                   l4307 0775  
                                 l3339 09C8                                   l4069 011B  
                                 l4405 0B2E                                   l4413 0B3B  
                                 l4341 068E                                   l4149 0636  
                                 l4237 0A36                                   l4317 03A1  
                                 l4325 03E9                                   l4335 067C  
                                 l4159 0669                                   l4167 0F9B  
                                 l4503 023C                                   l4255 0E35  
                                 l4319 03B8                                   l4327 03F5  
                                 l4097 017E                                   l4409 0B38  
                                 l4425 0D53                                   l4417 0D41  
                                 l4361 06D0                                   l4169 0FA5  
                                 l4185 0FEB                                   l4265 0E63  
                                 l4257 0E43                                   l4329 03FA  
                                 l4355 06B2                                   l4347 06A4  
                                 l4179 0FE1                                   l4187 0FFA  
                                 l3643 09B3                                   l4515 0266  
                                 l4507 024B                                   l4603 0BC6  
                                 l4291 071D                                   l4197 0559  
                                 l4437 0D6D                                   l4445 0D7E  
                                 l4381 0C65                                   l3637 09A8  
                                 l4509 0251                                   l4525 0276  
                                 l4533 0E78                                   l4269 0E6E  
                                 l3903 0CC2                                   l4199 055D  
                                 l4439 0D6F                                   l4367 06E0  
                                 l4383 0C6A                                   l4391 0C90  
                                 l3639 09B0                                   l4519 026B  
                                 l4463 01C6                                   l4455 01B4  
                                 l4631 0F8E                                   l4295 0734  
                                 l3921 0B93                                   l4377 06FD  
                                 l4385 0C72                                   l4465 01CB  
                                 l4449 01A1                                   l4537 0E7E  
                                 l4297 073F                                   l4289 0712  
                                 l3915 0B7B                                   l4491 0210  
                                 l4547 0EA1                                   l4563 0EC6  
                                 l4627 0F88                                   l3917 0B87  
                                 l3925 0B9C                                   l4397 0B1E  
                                 l4389 0C7F                                   l4477 01EC  
                                 l4557 0EBB                                   l3863 0913  
                                 l3871 0A2E                                   l4479 01F1  
                                 l4575 0DA8                                   l3953 0D11  
                                 l3945 0D01                                   l3961 0D31  
                                 l4497 0232                                   l4585 0993  
                                 l4593 099D                                   l4657 0313  
                                 l3859 090D                                   l3939 0ACC  
                                 l3867 0A1D                                   l3875 092D  
                                 l3891 0C9B                                   l4659 0337  
                                 l3957 0D2C                                   l3949 0D07  
                                 l3893 0CA7                                   l4589 099A  
                                 l4693 0960                                   l3983 0A09  
                                 l3879 0933                                   l4599 0BAA  
                                 l3977 0979                                   l3969 0AD3  
                                 l3993 0ED8                                   l3899 0CB9  
                                 STR_1 101E                                   STR_2 102C  
                                 STR_3 1026                                   STR_4 100C  
                                 STR_5 1015                                   _LATA 010C  
                                 _LATB 010D                                   _LATC 010E  
                                 u3105 0E58                                   u3115 0E64  
                                 u3035 0A3E                                   u3045 0A43  
                                 u3135 0411                                   u1705 0C47  
                                 u3145 042C                                   u3155 043D  
                                 u3075 0E38                                   u3165 044E  
                                 u3175 045F                                   u3095 0E44  
                                 u1815 0BE4                                   u3520 0F3F  
                                 u2705 0B7E                                   u3185 0470  
                                 u1825 0BEB                                   u3530 0F4D  
                                 u2635 0C9E                                   u3195 0495  
                                 u1915 08B5                                   u2725 0B8D  
                                 u1925 08BF                                   u3605 02B3  
                                 u2655 0CA8                                   u2735 0B94  
                                 u1695 0C38                                   u1935 08C9  
                                 u3615 02C7                                   u2665 0CB2  
                                 u3545 0DED                                   u3625 02CE  
                                 u2675 0CBA                                   u3555 0DF4  
                                 u3635 02E0                                   u3565 0E07  
                                 u3645 02F1                                   u2935 0627  
                                 u3655 0304                                   u3665 0318  
                                 u3585 0299                                   u2955 065B  
                                 u3675 032C                                   u3595 02A0  
                                 u2965 0FCC                      _SonarStartMeasure 00EA  
                                 _WPUA 020C                                   _WPUB 020D  
                                 _WPUC 020E                           __CFG_WRT$OFF 0000  
                        __CFG_FCMEN$ON 0000            Led_SetLedBlinkTime@OnTimeMs 0020  
                                 _main 088A                                   fsr0h 0005  
                                 fsr1h 0007                                   fsr0l 0004  
                                 indf0 0000                                   indf1 0001  
                                 fsr1l 0006                                   btemp 007E  
                      _I2cSlaveAddress 0076                                   _utoa 0ED2  
         __size_of_Led_SetLedPulseTime 0010                          __CFG_BOREN$ON 0000  
                                 ltemp 007E                   ??_Mcu_StartSystemPll 0074  
                    _Mcu_SetPullUpsSts 08A9                                   start 0036  
                                 ttemp 007E                                   wtemp 007E  
                   AppSm@WpuSetCounter 00BB                    __end_of_GenerateEvt 0AD1  
                        ?_InitSchTimer 0070                         ??_Mcu_ClearWdg 0074  
                       ?_Mcu_SetWdgSts 0070                             _BoardReset 0867  
           __size_of_Mcu_SetDieTempSts 0008                          __CFG_MCLRE$ON 0000  
                   ?_Mcu_SetPullUpsSts 0070         __end_of_SnrDrv_DetectEchoPulse 0B74  
                  StringCopy@SourceStr 0020                          __CFG_PLLEN$ON 0000  
                  ??_Mcu_SetPullUpsSts 0074                                  ?_main 0070  
                      __end_of___lldiv 0E77                                  ?_utoa 0027  
                  _SonarEchoCountReady 00E6                        __end_of___lwdiv 0CC7  
                                i1l323 0B73                                  i1l316 0B49  
                                i1l319 0B54                        __end_of___lwmod 0BA1  
                                i1l450 0031           Led_SetLedBlinkTime@OffTimeMs 0022  
            Mcu_SetWdgPeriod@WdgPeriod 0075                __end_of_LedStateMachine 0C92  
                                _AppSm 0B1D                    ___lmul@multiplicand 0028  
           __size_of_I2c_SetI2cAddress 0005                             _DistanceCm 0065  
                     ??_Adc_GetConvSts 0074                   __end_of_Led_MainTask 0BD0  
                     _SnrDrv_GetDistSm 0E77           LedPulseStateMachine@LedPulse 002A  
                      __end_of_dpowers 100A                                  pclath 000A  
                                ltemp0 007E                                  ltemp1 0082  
                                ltemp2 0086                                  ltemp3 0080  
            __end_of_Mcu_SetPullUpsSts 08B1                                  ttemp0 007E  
                                ttemp1 0081                                  ttemp2 0084  
                                ttemp3 0087                                  ttemp4 007F  
                                utoa@c 002E                                  utoa@v 002C  
                                status 0003                        _I2cSlv_MainTask 0992  
                                wtemp0 007E                                  wtemp1 0080  
                                wtemp2 0082                                  wtemp3 0084  
                                wtemp4 0086                                  wtemp5 0088  
                                wtemp6 007F                       ??_Adc_ConfigAnCh 0074  
                       ??_InitSchTimer 0045            __size_of_Mcu_SetDieTempMode 0008  
              LedStateMachine@LedBlink 002C         SnrDrv_GetDistSm@SonarMeasState 00BE  
                      __initialization 0038                      _I2c_DataReceiveSm 01A0  
              LedStateMachine@LedPulse 002D                             _InitTimer4 09EB  
     StdS_ManageStdServices@DieTempStr 0032                           __end_of_main 0891  
               ??_LedPulseStateMachine 0028                           __end_of_utoa 0F34  
                        AppSm@AppState 00BA                     ?_I2c_DataReceiveSm 003E  
                               ??_main 0076                                 ??_utoa 002B  
       __size_of_I2c_SetI2cAddressMask 0005                       __end_of_TmrBInit 0782  
                           _ReceiveEvt 0A8E          __end_of_I2c_SetI2cAddressMask 0884  
                  ??_I2c_DataReceiveSm 003F                                 ?_AppSm 0070  
                    ?_Led_SetLedStatus 0074               I2cSlv_I2cDrvHandle@Index 0029  
                      ReceiveEvt@Event 0075                                 _ADRESH 009C  
                               _ADRESL 009B                     ??_Led_SetLedStatus 0075  
                     ??_ManageProtocol 0038                                 _ANSELA 018C  
                               _ANSELB 018D                                 _ANSELC 018E  
                               i1l3733 0A89                            _GenerateEvt 0AAF  
                               i1l3761 0B5D                                 i1l3771 0B6A  
                               i1l3797 0027                                 i1l3789 001C  
                           _TaskNumber 100A                    App_MainTask@Options 003E  
                      ??_Mcu_SetWdgSts 0074          I2c_DataReceiveSm@I2cRxAddress 0067  
            __end_of_I2c_DataReceiveSm 0282                         __CFG_PWRTE$OFF 0000  
                          ?_BoardReset 0070           __end_of_Mcu_EnableInterrupts 086F  
                __size_of_App_MainTask 0064                                 ___lmul 0BD0  
                      _LedBehaviourSts 0079                                 ___wmul 0A34  
                       __CFG_STVREN$ON 0000                    _Led_SetLedBlinkTime 0A1B  
                            ??___lldiv 0074                              ??___lwdiv 0074  
               Tmr_TmrBPrSet@IntFreqHz 0030                              ??___lwmod 0074  
          GetDieTemperature@DieTempRes 0025              __size_of_ControlLedDirect 0013  
                      _CheckByteStatus 08BB                      _Adc_InitAdcModule 0CC7  
                         __pdataCOMMON 0079                     ?_Adc_InitAdcModule 0070  
          __end_of_I2cSlv_I2cDrvHandle 0707                       ?_LedStateMachine 002B  
                        ?_LowPowerMode 0070                 Adc_SelectChannel@SelCh 0075  
                 __end_of_Mcu_ClearWdg 0004                __end_of_I2cSlv_MainTask 09A7  
                  SonarMeasure@Counter 00B0                   ?_Led_SetLedBlinkTime 0020  
               __size_of_ScheduleTasks 00C4               __end_of_Mcu_SetWdgPeriod 08DA  
                  ??_Adc_InitAdcModule 0074                  __end_ofi1_GenerateEvt 0A8E  
           __size_of_Mcu_SetPullUpsSts 0008                          ?_Wdg_MainTask 003E  
              __end_of__initialization 00A8                 Tmr_TmrBPrSet@Prescaler 0032  
                         _App_MainTask 0F34                 InitSchTimer@TmrBConfig 0046  
           SonarMeasure@SonarMeasState 00BF                             _StringCopy 0AD1  
                        __end_of_AppSm 0B48                            ?_InitTimer4 0070  
                       __pcstackCOMMON 0070               LedStateMachine@LedOutSts 0031  
         __size_of_Adc_StartConversion 0003                           __pidataBANK1 0866  
                         __pidataBANK2 0C00              __end_of_Adc_InitAdcModule 0CFE  
             __size_of_InitializeTasks 004E           __size_of_SnrDrv_StartMeasure 0004  
                LedStateMachine@LedSts 002B                     LedStateMachine@Led 0030  
                __size_of_Led_MainTask 002F                    _Led_SetLedPulseTime 092A  
                __end_of_I2c_SetConfig 0992                            ?_ReceiveEvt 0070  
             _I2cNewPacketNotification 00DE                         ??_LowPowerMode 0075  
                       _OPTION_REGbits 0095                             _SystemInit 08E6  
                 __end_of_InitSchTimer 09EB                                ??_AppSm 003D  
        StdS_ManageStdServices@DieTemp 0036                  __end_of_Tmr_TmrBPrSet 03FC  
                  __size_of_BoardReset 0002            __size_of_StdS_SetI2cAddress 0031  
                 InitTimer4@TmrBConfig 0046                SnrDrv_GetDistSm@Counter 00AE  
                ??_Led_SetLedBlinkTime 0074                     _I2c_UpdateTxBuffer 0A50  
                           __pbssBANK0 0065                             __pbssBANK1 00A0  
                           __pbssBANK2 0150                             __pbssBANK3 01A0  
                           __pbssBANK4 0220                             __pbssBANK5 02A0  
                           __pbssBANK6 0320                         ??_Wdg_MainTask 0076  
              SnrDrv_GetDistSm@Options 003E                    ?_I2c_UpdateTxBuffer 0074  
                 ?_Led_SetLedPulseTime 0074                      _Mcu_ConfigPullUps 04A8  
           __size_of_I2c_DataReceiveSm 00E2                              ?_TmrBInit 0074  
                   ?_Mcu_ConfigPullUps 0070                __size_of_Tmr_TmrBConfig 004B  
                           __pmaintext 088A                __end_of_CheckByteStatus 08C5  
              __size_of_Tmr_TmrBIrqSet 0029                                ?___lmul 0024  
                         _Led_MainTask 0BA1               __end_of_SnrDrv_GetDistSm 0ED2  
                              ?___wmul 0020                          _ScheduleTasks 0282  
           __end_of_CheckStopBitStatus 08CF                             __pintentry 0004  
                   ClearRxBuffer@Index 0075  SnrDrv_DetectEchoPulse@DetectEchoState 00BD  
                  ??_Mcu_ConfigPullUps 0074                         ___lmul@product 002C  
              __size_of_CheckAckStatus 000A                   ??_I2c_UpdateTxBuffer 0020  
             i1GenerateEvt@EventStatus 0072          __size_of_LedBlinkStateMachine 0090  
                  Wdg_MainTask@Options 003E                          ?_SnrInitSonar 0070  
               __size_of_ClearRxBuffer 0010                                _SSP1ADD 0212  
                 _Mcu_EnableInterrupts 086C                 __size_of_ClearTxBuffer 0010  
                              _SSP1BUF 0211                                _SSP1MSK 0213  
                     ?_I2cSlv_MainTask 003E                    __size_of_InitTimer4 0017  
                      _I2cWriteRequest 00E4         Led_SetLedPulseTime@PulseTimeMs 0074  
                __end_of_MainInterrupt 0036                  __end_of_MainScheduler 096B  
                              _Led1Sts 00EE              __end_of_Mcu_ConfigPullUps 054E  
                ??_Led_SetLedPulseTime 0076            __size_of_Mcu_StartSystemPll 0003  
                          ?_StringCopy 0020                    __size_of_ReceiveEvt 0021  
                           ??_TmrBInit 0020                         ?_ScheduleTasks 0070  
                      __size_of___lmul 0030                                ___lldiv 0E24  
                      __size_of___wmul 001C                                ___lwdiv 0C92  
                              ___lwmod 0B74             __size_of_Adc_InitAdcModule 0037  
                     _ControlLedDirect 096B                              _I2cConfig 00C2  
                            _I2cPacket 239D                  Tmr_TmrBIrqSet@TmrNumb 0075  
                              __ptext1 08E6                                __ptext2 086F  
                              __ptext3 086C                                __ptext4 09EB  
                              __ptext5 09D4                                __ptext6 0D8B  
                              __ptext7 0346                                __ptext8 0A34  
                              __ptext9 0BD0                  __size_of_Mcu_ClearWdg 0002  
                              _dpowers 1000                              _T2CONbits 001C  
                        ?_SonarMeasure 0070                          ?_Tmr_StartTmr 0070  
                          ?_SystemInit 0070                         ??_SnrInitSonar 0074  
                    ??_InitializeTasks 0162                              _T4CONbits 0417  
                      _Tmr2IsrCallback 00B4                  ?_Mcu_EnableInterrupts 0070  
                            _T6CONbits 041E          I2c_SetI2cAddress@SlaveAddress 0074  
                  Mcu_SetWdgSts@WdgSts 0074                                clrloop0 08F3  
                    _AutomeasureOption 00C0                   end_of_initialization 00A8  
                         ?_GenerateEvt 0070                 _MainSystemTimebaseFlag 00EF  
                              init_ram 08FE             __end_of_Mcu_SetDieTempMode 08A1  
                              initloop 08FF                __size_of_SetLedBehavSts 0042  
                      ___lldiv@divisor 0020              __size_of_Led_SetLedStatus 0010  
                 __end_of_LowPowerMode 07FF                           ??_BoardReset 0074  
                      ___lldiv@counter 002C                          _ClearRxBuffer 093A  
                        _ClearTxBuffer 094A                          StringCopy@Len 0023  
                     ?_CheckByteStatus 0070                           _Mcu_ClearWdg 0002  
             ??_StdS_ManageStdServices 0030                           __pstringtext 1000  
                              utoa@buf 002F                                utoa@val 0027  
        __size_of_LedPulseStateMachine 0068                  __size_of_InitSchTimer 0017  
                 __end_of_Wdg_MainTask 09BD                              _PORTAbits 000C  
                            _PORTCbits 000E          Mcu_SetDieTempMode@DieTempMode 0074  
                       ??_SonarMeasure 0022                         ??_Tmr_StartTmr 0074  
                     _InterruptCounter 00B2                      StringCopy@DestStr 0022  
                      _Tmr4IsrCallback 00B6                              _TRISAbits 008C  
                            _TRISBbits 008D                              _TRISCbits 008E  
                  __size_of_StringCopy 0023                  _I2c_SetI2cAddressMask 087F  
                  _Adc_StartConversion 0869                     __end_of_BoardReset 0869  
          I2c_DataReceiveSm@I2cRxState 0069      SnrDrv_DetectEchoPulse@EchoCounter 00AC  
                    ?_Mcu_SetWdgPeriod 0070              Tmr_TmrBPrSet@TmrBPrCfgSts 003D  
                  _SnrDrv_StartMeasure 0876             __size_of_Mcu_ConfigPullUps 00A6  
                            _Led1Blink 00CD                              _CmdBuffer 0220  
                   ??_Mcu_SetWdgPeriod 0074               ??_SnrDrv_DetectEchoPulse 0073  
                            _Led1Pulse 00D6                __size_of_Adc_GetConvSts 0004  
                       ?_ClearRxBuffer 0070                        ??_ScheduleTasks 0162  
                    App_MainTask@F4114 00A0                         _Tmr_TmrBConfig 0D8B  
                    App_MainTask@F4094 0150                Tmr_TmrBPrSet@Postscaler 0033  
                __end_of_Mcu_SetWdgSts 0899                           _InitSchTimer 09D4  
                       ?_ClearTxBuffer 0070                    __size_of_SystemInit 000C  
                       _Tmr_TmrBIrqSet 0AF4            Mcu_SetDieTempSts@DieTempSts 0074  
                         ??_InitTimer4 0045                   ?_Adc_StartConversion 0070  
           Adc_InitAdcModule@AdcConfig 0074                         __end_of___lmul 0C00  
                 ?_SnrDrv_StartMeasure 0070                         _CheckAckStatus 08B1  
                       __end_of___wmul 0A50                __size_of_Adc_ConfigAnCh 0070  
                    App_MainTask@WpuCh 0052                          __pidataCOMMON 07FF  
                         ??_ReceiveEvt 0074                 ??_Mcu_EnableInterrupts 0074  
                  start_initialization 0038                        _Tmr6IsrCallback 00B8  
                            _RepBuffer 01A0                     __end_of_InitTimer4 0A02  
           I2c_InitI2cModule@I2cConfig 0022           __size_of_I2cSlv_I2cDrvHandle 008E  
             __size_of_LedStateMachine 0031                 __end_of_Tmr_TmrBConfig 0DD6  
               __end_of_Tmr_TmrBIrqSet 0B1D                              _TaskTable 0120  
                          _SystemState 006D                 Led_SetLedBlinkTime@Led 0074  
                 __end_of_SnrInitSonar 088A                     __end_of_ReceiveEvt 0AAF  
              __size_of_ManageProtocol 009B                  ??_Adc_StartConversion 0074  
                Tmr_TmrBConfig@TmrNumb 0044                 __end_of_CheckAckStatus 08BB  
                             ??___lmul 0076                               ??___wmul 0074  
                    __size_of_TmrBInit 007B                           _RepBufferLen 00C1  
                    ?_SnrDrv_GetDistSm 003E        __size_of_StdS_ManageStdServices 00F4  
                ??_SnrDrv_StartMeasure 0075                            __pdataBANK1 00EF  
                          __pdataBANK2 0120                     ClearTxBuffer@Index 0075  
                   ??_SnrDrv_GetDistSm 003F                 __size_ofi1_GenerateEvt 0021  
                  Tmr_StartTmr@TmrNumb 0074            __end_of_Led_SetLedBlinkTime 0A34  
                          __pbssBIGRAM 239D             __end_of_StdS_SetI2cAddress 0C61  
                   __end_of_TaskNumber 100C                 ?_I2c_SetI2cAddressMask 0070  
                          __pbssCOMMON 0076                              ___latbits 0002  
                App_MainTask@AdcConfig 004C                          __pcstackBANK0 0020  
                        __pcstackBANK2 0162                     _CheckStopBitStatus 08C5  
               GenerateEvt@EventStatus 0020               __end_of_ControlLedDirect 097E  
                __size_of_LowPowerMode 000D                    ?_CheckStopBitStatus 0070  
         __end_of_LedBlinkStateMachine 0679                        ??_ClearRxBuffer 0074  
                 __size_of_GenerateEvt 0022                        ?_Tmr_TmrBConfig 0042  
                       _SetLedBehavSts 0CFE        __size_of_SnrDrv_DetectEchoPulse 002C  
                      ??_ClearTxBuffer 0074                        ?_Tmr_TmrBIrqSet 0074  
                 __end_of_SonarMeasure 0D8B                   __end_of_Tmr_StartTmr 09D4  
                         ??_StringCopy 0024                       _Led_SetLedStatus 090A  
               __size_of_I2c_SetConfig 0014                       ___lwdiv@dividend 0022  
                     GenerateEvt@Event 0021                 __size_of_Tmr_TmrBPrSet 00B6  
                __size_of_Wdg_MainTask 0016                      _Adc_SelectChannel 08DA  
              App_MainTask@AnalogChSel 0040                        ?_CheckAckStatus 0070  
              Tmr_TmrBIrqSet@TmrIrqSts 0074                        _InitializeTasks 0DD6  
                             ?___lldiv 0020                    _I2cReplyPacketReady 0077  
                             ?___lwdiv 0020                               ?___lwmod 0020  
                   ?_Adc_SelectChannel 0070                   ??_CheckStopBitStatus 0074  
                            __pswtext1 0800                              __pswtext2 080A  
          __size_of_I2c_UpdateTxBuffer 001D                            _I2cRxBuffer 0320  
             I2c_DataReceiveSm@Options 003E                  Adc_ConfigAnCh@AnChSel 0074  
                          _I2cTxBuffer 02A0                           ??_SystemInit 0076  
       InitializeTasks@ActiveTaskIndex 0064                    ??_Adc_SelectChannel 0074  
                       __size_of_AppSm 002B                           _LowPowerMode 07F2  
                     __CFG_WDTE$SWDTEN 0000                     __end_of_StringCopy 0AF4  
          __end_of_Led_SetLedPulseTime 093A                       ___lwdiv@quotient 0025  
               _StdS_ManageStdServices 00AC                 __end_of_SetLedBehavSts 0D40  
                        i1_GenerateEvt 0A6D             __end_of_Mcu_StartSystemPll 0872  
                         _Wdg_MainTask 09A7                         ___wmul@product 0074  
                             _LATBbits 010D                               _LATCbits 010E  
                       _Adc_GetConvSts 0872                              clear_ram0 08F2  
             __size_of_I2cSlv_MainTask 0015                LedPulseStateMachine@Led 0027  
                             _PIE1bits 0091                               _PIE3bits 0093  
                        _I2cSetAddress 00E2              __end_of_Adc_SelectChannel 08E6  
                    _I2c_InitI2cModule 03FC                               _PIR1bits 0011  
                             _PIR3bits 0013                      ??_LedStateMachine 002E  
           Adc_GetConvResult@AdcResult 0021                     __end_of_SystemInit 08F2  
                   ?_I2c_InitI2cModule 0070                               _SSP1CON1 0215  
                             _SSP1CON2 0216                               _SSP1CON3 0217  
                             _SSP1STAT 0214                         _Adc_ConfigAnCh 0782  
                   _Mcu_SetDieTempMode 0899                 __size_of_MainInterrupt 0032  
           I2c_DataReceiveSm@I2cRxFlag 0068                 __size_of_MainScheduler 0011  
                           _ADCON0bits 009D                             _ADCON1bits 009E  
                    ___wmul@multiplier 0020                 _SnrDrv_DetectEchoPulse 0B48  
                  ??_I2c_InitI2cModule 0020                               _WPUAbits 020C  
                             _WPUBbits 020D                               _WPUCbits 020E  
                        _I2c_SetConfig 097E                    ?_Mcu_SetDieTempMode 0070  
                        _Tmr_TmrBPrSet 0346                      ___lmul@multiplier 0024  
               I2cSlv_MainTask@Options 003E           __end_of_LedPulseStateMachine 1000  
                       ?i1_GenerateEvt 0070               Tmr_TmrBConfig@TmrBConfig 0042  
                      ?_SetLedBehavSts 0070                 __end_of_Adc_GetConvSts 0876  
         LedBlinkStateMachine@LedBlink 0075                  __size_of_SnrInitSonar 0006  
                        ?_App_MainTask 003E              __end_of_I2c_InitI2cModule 04A8  
                    _Adc_GetConvResult 091A                __end_of_InitializeTasks 0E24  
                 ??_Mcu_SetDieTempMode 0074                               _TmrBInit 0707  
                   ?_Adc_GetConvResult 0074                         _ManageProtocol 054E  
                 Tmr_TmrBPrSet@Divisor 003E                         _EchoPulseCount 00DC  
               __end_of_Adc_ConfigAnCh 07F2              __size_of_Mcu_SetWdgPeriod 000B  
                     __size_of___lldiv 0053                    ??_Adc_GetConvResult 0020  
                  _I2cSlv_I2cDrvHandle 0679                       __size_of___lwdiv 0035  
                 Tmr_TmrBPrSet@TmrNumb 003C                       __size_of___lwmod 002D  
                    _GetDieTemperature 0A02                             _ANSELAbits 018C  
                           _ANSELBbits 018D                             _ANSELCbits 018E  
             __size_of_CheckByteStatus 000A                   _LedBlinkStateMachine 05E9  
                       ?_I2c_SetConfig 0070                     ?_GetDieTemperature 0023  
                       ?_Tmr_TmrBPrSet 0030                        ___lwdiv@divisor 0020  
                         _SnrInitSonar 0884                        ___lwdiv@counter 0024  
                             __ptext10 0E24                               __ptext11 0AF4  
                             __ptext20 0E77                               __ptext12 09BD  
                             __ptext21 01A0                               __ptext13 0707  
                             __ptext30 08BB                               __ptext22 09A7  
                             __ptext14 095A                               __ptext31 08B1  
                             __ptext23 08CF                               __ptext15 0282  
                             __ptext40 0D40                               __ptext32 097E  
                             __ptext24 0002                               __ptext16 0DD6  
                             __ptext41 0876                               __ptext33 03FC  
                             __ptext25 0884                               __ptext17 0F34  
                             __ptext50 0ED2                               __ptext42 08A9  
                             __ptext34 094A                               __ptext26 0C61  
                             __ptext18 0BA1                               __ptext51 0B74  
                             __ptext43 08A1                               __ptext35 093A  
                             __ptext27 0F98                               __ptext19 0992  
                             __ptext60 0869                               __ptext52 0C92  
                             __ptext44 0899                               __ptext36 0679  
                             __ptext28 05E9                               __ptext61 08DA  
                             __ptext53 0AD1                               __ptext45 04A8  
                             __ptext37 0A50                               __ptext29 08C5  
                             __ptext70 0782                               __ptext62 0872  
                             __ptext54 0CFE                               __ptext46 0B1D  
                             __ptext38 087F                               __ptext63 091A  
                             __ptext55 092A                               __ptext47 0C30  
                             __ptext39 087A                               __ptext72 0B48  
                             __ptext64 0AAF                               __ptext56 0A1B  
                             __ptext48 054E                               __ptext73 0A6D  
                             __ptext65 096B                               __ptext57 07F2  
                             __ptext49 00AC                               __ptext66 090A  
                             __ptext58 0891                               __ptext67 0867  
                             __ptext59 0A02                               __ptext68 0A8E  
                             __ptext69 0CC7                           _SSP1CON1bits 0215  
              I2c_DataReceiveSm@OpType 006A                    ??_GetDieTemperature 0076  
                __size_of_SonarMeasure 004B                   ?_I2cSlv_I2cDrvHandle 0070  
                __size_of_Tmr_StartTmr 0017              __end_of_Adc_GetConvResult 092A  
                       ??_App_MainTask 003F                          _MainInterrupt 0004  
                   i1GenerateEvt@Event 0071                        ?_Adc_GetConvSts 0070  
                        _MainScheduler 095A                     TmrBInit@Postscaler 0075  
                        __size_of_main 0007                          __size_of_utoa 0062  
                  Led_MainTask@Options 003E                 __end_of_ManageProtocol 05E9  
         I2c_UpdateTxBuffer@DataBuffer 0022             __size_of_Adc_SelectChannel 000C  
                __end_of_ScheduleTasks 0346                          ?_Led_MainTask 003E  
                      ?_Adc_ConfigAnCh 0070                    Led_SetLedStatus@Led 0020  
                             int$flags 007E                      _Mcu_SetDieTempSts 08A1  
                    ??_I2cSlv_MainTask 0076                        StringCopy@Index 0074  
          ManageProtocol@DistanceCmStr 003A           ScheduleTasks@ActiveTaskIndex 0064  
            __end_of_GetDieTemperature 0A1B                     ?_Mcu_SetDieTempSts 0070  
              ??_I2c_SetI2cAddressMask 0074                  ?_LedBlinkStateMachine 0070  
                          _OSCSTATbits 009A                             _INTCONbits 000B  
                         _SonarMeasure 0D40                           _Tmr_StartTmr 09BD  
             __end_of_Led_SetLedStatus 091A                    ??_Mcu_SetDieTempSts 0074  
                           _FVRCONbits 0117                   _I2cNewTxNotification 00E0  
        __size_of_Mcu_EnableInterrupts 0003                 __size_of_Mcu_SetWdgSts 0008  
            __size_of_SnrDrv_GetDistSm 005B                        ??i1_GenerateEvt 0070  
                    _I2c_SetI2cAddress 087A                       ??_Tmr_TmrBConfig 0043  
                ??_I2cSlv_I2cDrvHandle 0024                       ??_Tmr_TmrBIrqSet 0075  
                             intlevel1 0000                         ?_MainInterrupt 0070  
                    TmrBInit@Prescaler 0074                         ?_MainScheduler 0070  
                   ?_I2c_SetI2cAddress 0070               I2c_UpdateTxBuffer@Length 0074  
                    ?_ControlLedDirect 0070                 Led_SetLedPulseTime@Led 0020  
                     ___lwmod@dividend 0022                 I2c_DataReceiveSm@Index 0046  
          __end_of_Adc_StartConversion 086C                     _StdS_SetI2cAddress 0C30  
                     ___lldiv@dividend 0024                 Mcu_ConfigPullUps@WpuCh 0074  
           __size_of_I2c_InitI2cModule 00AC                 SetLedBehavSts@LedBehav 0025  
                    __CFG_CLKOUTEN$OFF 0000                       ??_CheckAckStatus 0074  
                      ?_ManageProtocol 0070                     ??_ControlLedDirect 0076  
           I2c_DataReceiveSm@RxCounter 006B                       ?_InitializeTasks 0070  
          __end_of_SnrDrv_StartMeasure 087A                             _OSCCONbits 0099  
                  ??_I2c_SetI2cAddress 0074              __end_of_Mcu_SetDieTempSts 08A9  
                       ??_Led_MainTask 003F             I2c_DataReceiveSm@TxCounter 006C  
                  ?_StdS_SetI2cAddress 0070                           _StartMeasure 00EC  
                 _LedPulseStateMachine 0F98                        ??_I2c_SetConfig 0074  
                             utoa@base 0029                        ??_Tmr_TmrBPrSet 0034  
              I2c_UpdateTxBuffer@Index 0023                       ___lldiv@quotient 0028  
                      ___lwmod@divisor 0020                ?_StdS_ManageStdServices 0070  
                      ___lwmod@counter 0075              __end_of_I2c_SetI2cAddress 087F  
                ReceiveEvt@EventStatus 0074                   ??_StdS_SetI2cAddress 0074  
                           _WDTCONbits 0097                      ??_CheckByteStatus 0074  
         __size_of_Led_SetLedBlinkTime 0019                          ??_GenerateEvt 0074  
                      _LedStateMachine 0C61                        TmrBInit@TmrNumb 0021  
           __size_of_Adc_GetConvResult 0010                 Led_SetLedStatus@LedSts 0074  
I2c_SetI2cAddressMask@SlaveAddressMask 0074  I2cSlv_I2cDrvHandle@I2cReceiveMsgState 00BC  
                __end_of_ClearRxBuffer 094A                  __end_of_ClearTxBuffer 095A  
                        ?_Mcu_ClearWdg 0070                          _Mcu_SetWdgSts 0891  
