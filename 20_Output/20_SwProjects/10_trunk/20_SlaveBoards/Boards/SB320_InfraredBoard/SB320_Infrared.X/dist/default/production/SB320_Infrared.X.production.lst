

Microchip Technology PIC LITE Macro Assembler V1.38 build -256452561 
                                                                                               Sat Oct 19 09:48:17 2019

Microchip Technology Omniscient Code Generator v1.38 (Free mode) build 201607010351
     1                           	processor	16F1825
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	idataCOMMON,global,class=CODE,delta=2
     5                           	psect	idataBANK0,global,class=CODE,delta=2
     6                           	psect	idataBANK2,global,class=CODE,delta=2
     7                           	psect	stringtext,global,class=STRCODE,delta=2
     8                           	psect	cinit,global,class=CODE,merge=1,delta=2
     9                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
    10                           	psect	dataCOMMON,global,class=COMMON,space=1,delta=1
    11                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    12                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1
    13                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    14                           	psect	dataBANK2,global,class=BANK2,space=1,delta=1
    15                           	psect	bssBANK3,global,class=BANK3,space=1,delta=1
    16                           	psect	bssBANK4,global,class=BANK4,space=1,delta=1
    17                           	psect	bssBANK5,global,class=BANK5,space=1,delta=1
    18                           	psect	bssBANK6,global,class=BANK6,space=1,delta=1
    19                           	psect	inittext,global,class=CODE,delta=2
    20                           	psect	clrtext,global,class=CODE,delta=2
    21                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1
    22                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    23                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    24                           	psect	maintext,global,class=CODE,merge=1,split=1,delta=2
    25                           	psect	text1,local,class=CODE,merge=1,delta=2
    26                           	psect	text2,local,class=CODE,merge=1,delta=2
    27                           	psect	text3,local,class=CODE,merge=1,delta=2
    28                           	psect	text4,local,class=CODE,merge=1,delta=2
    29                           	psect	text5,local,class=CODE,merge=1,delta=2
    30                           	psect	text6,local,class=CODE,merge=1,delta=2
    31                           	psect	text7,local,class=CODE,merge=1,delta=2
    32                           	psect	text8,local,class=CODE,merge=1,delta=2
    33                           	psect	text9,local,class=CODE,merge=1,delta=2
    34                           	psect	text10,local,class=CODE,merge=1,delta=2
    35                           	psect	text11,local,class=CODE,merge=1,delta=2
    36                           	psect	text12,local,class=CODE,merge=1,delta=2
    37                           	psect	text13,local,class=CODE,merge=1,delta=2
    38                           	psect	text14,local,class=CODE,merge=1,delta=2
    39                           	psect	text15,local,class=CODE,merge=1,delta=2
    40                           	psect	text16,local,class=CODE,merge=1,delta=2
    41                           	psect	text17,local,class=CODE,merge=1,delta=2
    42                           	psect	text18,local,class=CODE,merge=1,delta=2
    43                           	psect	text19,local,class=CODE,merge=1,delta=2
    44                           	psect	swtext1,local,class=CONST,delta=2
    45                           	psect	text20,local,class=CODE,merge=1,delta=2
    46                           	psect	text21,local,class=CODE,merge=1,delta=2
    47                           	psect	text22,local,class=CODE,merge=1,delta=2
    48                           	psect	text23,local,class=CODE,merge=1,delta=2
    49                           	psect	text24,local,class=CODE,merge=1,delta=2
    50                           	psect	text25,local,class=CODE,merge=1,delta=2
    51                           	psect	text26,local,class=CODE,merge=1,delta=2
    52                           	psect	text27,local,class=CODE,merge=1,delta=2
    53                           	psect	text28,local,class=CODE,merge=1,delta=2
    54                           	psect	text29,local,class=CODE,merge=1,delta=2
    55                           	psect	text30,local,class=CODE,merge=1,delta=2
    56                           	psect	text31,local,class=CODE,merge=1,delta=2
    57                           	psect	text32,local,class=CODE,merge=1,delta=2
    58                           	psect	text33,local,class=CODE,merge=1,delta=2
    59                           	psect	text34,local,class=CODE,merge=1,delta=2
    60                           	psect	text35,local,class=CODE,merge=1,delta=2
    61                           	psect	text36,local,class=CODE,merge=1,delta=2
    62                           	psect	text37,local,class=CODE,merge=1,delta=2
    63                           	psect	text38,local,class=CODE,merge=1,delta=2
    64                           	psect	text39,local,class=CODE,merge=1,delta=2
    65                           	psect	text40,local,class=CODE,merge=1,delta=2
    66                           	psect	text41,local,class=CODE,merge=1,delta=2
    67                           	psect	text42,local,class=CODE,merge=1,delta=2
    68                           	psect	text43,local,class=CODE,merge=1,delta=2
    69                           	psect	text44,local,class=CODE,merge=1,delta=2
    70                           	psect	text45,local,class=CODE,merge=1,delta=2
    71                           	psect	text46,local,class=CODE,merge=1,delta=2
    72                           	psect	text47,local,class=CODE,merge=1,delta=2
    73                           	psect	text48,local,class=CODE,merge=1,delta=2
    74                           	psect	text49,local,class=CODE,merge=1,delta=2
    75                           	psect	text50,local,class=CODE,merge=1,delta=2
    76                           	psect	text51,local,class=CODE,merge=1,delta=2
    77                           	psect	text52,local,class=CODE,merge=1,delta=2
    78                           	psect	text53,local,class=CODE,merge=1,delta=2
    79                           	psect	text54,local,class=CODE,merge=1,delta=2
    80                           	psect	text55,local,class=CODE,merge=1,delta=2
    81                           	psect	text56,local,class=CODE,merge=1,delta=2
    82                           	psect	text57,local,class=CODE,merge=1,delta=2
    83                           	psect	text58,local,class=CODE,merge=1,delta=2
    84                           	psect	text59,local,class=CODE,merge=1,delta=2
    85                           	psect	text60,local,class=CODE,merge=1,delta=2
    86                           	psect	text61,local,class=CODE,merge=1,delta=2
    87                           	psect	text62,local,class=CODE,merge=1,delta=2
    88                           	psect	text63,local,class=CODE,merge=1,delta=2
    89                           	psect	text64,local,class=CODE,merge=1,delta=2
    90                           	psect	text65,local,class=CODE,merge=1,delta=2
    91                           	psect	text66,local,class=CODE,merge=1,delta=2
    92                           	psect	text67,local,class=CODE,merge=1,delta=2
    93                           	psect	text68,local,class=CODE,merge=1,delta=2
    94                           	psect	text69,local,class=CODE,merge=1,delta=2
    95                           	psect	intentry,global,class=CODE,delta=2
    96                           	psect	text71,local,class=CODE,merge=1,delta=2
    97                           	dabs	1,0x620,48
    98                           	dabs	1,0x5CD,35
    99                           	dabs	1,0x239D,0,_I2cPacket
   100                           	dabs	1,0x7E,2
   101  0000                     	;# 
   102  0001                     	;# 
   103  0002                     	;# 
   104  0003                     	;# 
   105  0004                     	;# 
   106  0005                     	;# 
   107  0006                     	;# 
   108  0007                     	;# 
   109  0008                     	;# 
   110  0009                     	;# 
   111  000A                     	;# 
   112  000B                     	;# 
   113  000C                     	;# 
   114  000E                     	;# 
   115  0011                     	;# 
   116  0012                     	;# 
   117  0013                     	;# 
   118  0015                     	;# 
   119  0016                     	;# 
   120  0016                     	;# 
   121  0017                     	;# 
   122  0018                     	;# 
   123  0019                     	;# 
   124  001A                     	;# 
   125  001B                     	;# 
   126  001C                     	;# 
   127  001E                     	;# 
   128  001F                     	;# 
   129  008C                     	;# 
   130  008E                     	;# 
   131  0091                     	;# 
   132  0092                     	;# 
   133  0093                     	;# 
   134  0095                     	;# 
   135  0096                     	;# 
   136  0097                     	;# 
   137  0098                     	;# 
   138  0099                     	;# 
   139  009A                     	;# 
   140  009B                     	;# 
   141  009B                     	;# 
   142  009C                     	;# 
   143  009D                     	;# 
   144  009E                     	;# 
   145  010C                     	;# 
   146  010E                     	;# 
   147  0111                     	;# 
   148  0112                     	;# 
   149  0113                     	;# 
   150  0114                     	;# 
   151  0115                     	;# 
   152  0116                     	;# 
   153  0117                     	;# 
   154  0118                     	;# 
   155  0119                     	;# 
   156  011A                     	;# 
   157  011B                     	;# 
   158  011D                     	;# 
   159  011E                     	;# 
   160  018C                     	;# 
   161  018E                     	;# 
   162  0191                     	;# 
   163  0191                     	;# 
   164  0192                     	;# 
   165  0193                     	;# 
   166  0193                     	;# 
   167  0193                     	;# 
   168  0194                     	;# 
   169  0195                     	;# 
   170  0196                     	;# 
   171  0199                     	;# 
   172  019A                     	;# 
   173  019B                     	;# 
   174  019B                     	;# 
   175  019C                     	;# 
   176  019D                     	;# 
   177  019E                     	;# 
   178  019F                     	;# 
   179  020C                     	;# 
   180  020E                     	;# 
   181  0211                     	;# 
   182  0211                     	;# 
   183  0212                     	;# 
   184  0212                     	;# 
   185  0213                     	;# 
   186  0213                     	;# 
   187  0214                     	;# 
   188  0214                     	;# 
   189  0215                     	;# 
   190  0215                     	;# 
   191  0215                     	;# 
   192  0216                     	;# 
   193  0216                     	;# 
   194  0217                     	;# 
   195  0217                     	;# 
   196  0291                     	;# 
   197  0291                     	;# 
   198  0292                     	;# 
   199  0293                     	;# 
   200  0294                     	;# 
   201  0295                     	;# 
   202  0295                     	;# 
   203  0296                     	;# 
   204  0298                     	;# 
   205  0298                     	;# 
   206  0299                     	;# 
   207  029A                     	;# 
   208  029B                     	;# 
   209  029C                     	;# 
   210  029D                     	;# 
   211  029E                     	;# 
   212  0311                     	;# 
   213  0311                     	;# 
   214  0312                     	;# 
   215  0313                     	;# 
   216  0318                     	;# 
   217  0318                     	;# 
   218  0319                     	;# 
   219  031A                     	;# 
   220  038C                     	;# 
   221  038E                     	;# 
   222  0391                     	;# 
   223  0392                     	;# 
   224  0393                     	;# 
   225  039A                     	;# 
   226  039C                     	;# 
   227  039D                     	;# 
   228  039E                     	;# 
   229  039F                     	;# 
   230  0415                     	;# 
   231  0416                     	;# 
   232  0417                     	;# 
   233  041C                     	;# 
   234  041D                     	;# 
   235  041E                     	;# 
   236  0FE4                     	;# 
   237  0FE5                     	;# 
   238  0FE6                     	;# 
   239  0FE7                     	;# 
   240  0FE8                     	;# 
   241  0FE9                     	;# 
   242  0FEA                     	;# 
   243  0FEB                     	;# 
   244  0FED                     	;# 
   245  0FEE                     	;# 
   246  0FEF                     	;# 
   247  0000                     	;# 
   248  0001                     	;# 
   249  0002                     	;# 
   250  0003                     	;# 
   251  0004                     	;# 
   252  0005                     	;# 
   253  0006                     	;# 
   254  0007                     	;# 
   255  0008                     	;# 
   256  0009                     	;# 
   257  000A                     	;# 
   258  000B                     	;# 
   259  000C                     	;# 
   260  000E                     	;# 
   261  0011                     	;# 
   262  0012                     	;# 
   263  0013                     	;# 
   264  0015                     	;# 
   265  0016                     	;# 
   266  0016                     	;# 
   267  0017                     	;# 
   268  0018                     	;# 
   269  0019                     	;# 
   270  001A                     	;# 
   271  001B                     	;# 
   272  001C                     	;# 
   273  001E                     	;# 
   274  001F                     	;# 
   275  008C                     	;# 
   276  008E                     	;# 
   277  0091                     	;# 
   278  0092                     	;# 
   279  0093                     	;# 
   280  0095                     	;# 
   281  0096                     	;# 
   282  0097                     	;# 
   283  0098                     	;# 
   284  0099                     	;# 
   285  009A                     	;# 
   286  009B                     	;# 
   287  009B                     	;# 
   288  009C                     	;# 
   289  009D                     	;# 
   290  009E                     	;# 
   291  010C                     	;# 
   292  010E                     	;# 
   293  0111                     	;# 
   294  0112                     	;# 
   295  0113                     	;# 
   296  0114                     	;# 
   297  0115                     	;# 
   298  0116                     	;# 
   299  0117                     	;# 
   300  0118                     	;# 
   301  0119                     	;# 
   302  011A                     	;# 
   303  011B                     	;# 
   304  011D                     	;# 
   305  011E                     	;# 
   306  018C                     	;# 
   307  018E                     	;# 
   308  0191                     	;# 
   309  0191                     	;# 
   310  0192                     	;# 
   311  0193                     	;# 
   312  0193                     	;# 
   313  0193                     	;# 
   314  0194                     	;# 
   315  0195                     	;# 
   316  0196                     	;# 
   317  0199                     	;# 
   318  019A                     	;# 
   319  019B                     	;# 
   320  019B                     	;# 
   321  019C                     	;# 
   322  019D                     	;# 
   323  019E                     	;# 
   324  019F                     	;# 
   325  020C                     	;# 
   326  020E                     	;# 
   327  0211                     	;# 
   328  0211                     	;# 
   329  0212                     	;# 
   330  0212                     	;# 
   331  0213                     	;# 
   332  0213                     	;# 
   333  0214                     	;# 
   334  0214                     	;# 
   335  0215                     	;# 
   336  0215                     	;# 
   337  0215                     	;# 
   338  0216                     	;# 
   339  0216                     	;# 
   340  0217                     	;# 
   341  0217                     	;# 
   342  0291                     	;# 
   343  0291                     	;# 
   344  0292                     	;# 
   345  0293                     	;# 
   346  0294                     	;# 
   347  0295                     	;# 
   348  0295                     	;# 
   349  0296                     	;# 
   350  0298                     	;# 
   351  0298                     	;# 
   352  0299                     	;# 
   353  029A                     	;# 
   354  029B                     	;# 
   355  029C                     	;# 
   356  029D                     	;# 
   357  029E                     	;# 
   358  0311                     	;# 
   359  0311                     	;# 
   360  0312                     	;# 
   361  0313                     	;# 
   362  0318                     	;# 
   363  0318                     	;# 
   364  0319                     	;# 
   365  031A                     	;# 
   366  038C                     	;# 
   367  038E                     	;# 
   368  0391                     	;# 
   369  0392                     	;# 
   370  0393                     	;# 
   371  039A                     	;# 
   372  039C                     	;# 
   373  039D                     	;# 
   374  039E                     	;# 
   375  039F                     	;# 
   376  0415                     	;# 
   377  0416                     	;# 
   378  0417                     	;# 
   379  041C                     	;# 
   380  041D                     	;# 
   381  041E                     	;# 
   382  0FE4                     	;# 
   383  0FE5                     	;# 
   384  0FE6                     	;# 
   385  0FE7                     	;# 
   386  0FE8                     	;# 
   387  0FE9                     	;# 
   388  0FEA                     	;# 
   389  0FEB                     	;# 
   390  0FED                     	;# 
   391  0FEE                     	;# 
   392  0FEF                     	;# 
   393  0000                     	;# 
   394  0001                     	;# 
   395  0002                     	;# 
   396  0003                     	;# 
   397  0004                     	;# 
   398  0005                     	;# 
   399  0006                     	;# 
   400  0007                     	;# 
   401  0008                     	;# 
   402  0009                     	;# 
   403  000A                     	;# 
   404  000B                     	;# 
   405  000C                     	;# 
   406  000E                     	;# 
   407  0011                     	;# 
   408  0012                     	;# 
   409  0013                     	;# 
   410  0015                     	;# 
   411  0016                     	;# 
   412  0016                     	;# 
   413  0017                     	;# 
   414  0018                     	;# 
   415  0019                     	;# 
   416  001A                     	;# 
   417  001B                     	;# 
   418  001C                     	;# 
   419  001E                     	;# 
   420  001F                     	;# 
   421  008C                     	;# 
   422  008E                     	;# 
   423  0091                     	;# 
   424  0092                     	;# 
   425  0093                     	;# 
   426  0095                     	;# 
   427  0096                     	;# 
   428  0097                     	;# 
   429  0098                     	;# 
   430  0099                     	;# 
   431  009A                     	;# 
   432  009B                     	;# 
   433  009B                     	;# 
   434  009C                     	;# 
   435  009D                     	;# 
   436  009E                     	;# 
   437  010C                     	;# 
   438  010E                     	;# 
   439  0111                     	;# 
   440  0112                     	;# 
   441  0113                     	;# 
   442  0114                     	;# 
   443  0115                     	;# 
   444  0116                     	;# 
   445  0117                     	;# 
   446  0118                     	;# 
   447  0119                     	;# 
   448  011A                     	;# 
   449  011B                     	;# 
   450  011D                     	;# 
   451  011E                     	;# 
   452  018C                     	;# 
   453  018E                     	;# 
   454  0191                     	;# 
   455  0191                     	;# 
   456  0192                     	;# 
   457  0193                     	;# 
   458  0193                     	;# 
   459  0193                     	;# 
   460  0194                     	;# 
   461  0195                     	;# 
   462  0196                     	;# 
   463  0199                     	;# 
   464  019A                     	;# 
   465  019B                     	;# 
   466  019B                     	;# 
   467  019C                     	;# 
   468  019D                     	;# 
   469  019E                     	;# 
   470  019F                     	;# 
   471  020C                     	;# 
   472  020E                     	;# 
   473  0211                     	;# 
   474  0211                     	;# 
   475  0212                     	;# 
   476  0212                     	;# 
   477  0213                     	;# 
   478  0213                     	;# 
   479  0214                     	;# 
   480  0214                     	;# 
   481  0215                     	;# 
   482  0215                     	;# 
   483  0215                     	;# 
   484  0216                     	;# 
   485  0216                     	;# 
   486  0217                     	;# 
   487  0217                     	;# 
   488  0291                     	;# 
   489  0291                     	;# 
   490  0292                     	;# 
   491  0293                     	;# 
   492  0294                     	;# 
   493  0295                     	;# 
   494  0295                     	;# 
   495  0296                     	;# 
   496  0298                     	;# 
   497  0298                     	;# 
   498  0299                     	;# 
   499  029A                     	;# 
   500  029B                     	;# 
   501  029C                     	;# 
   502  029D                     	;# 
   503  029E                     	;# 
   504  0311                     	;# 
   505  0311                     	;# 
   506  0312                     	;# 
   507  0313                     	;# 
   508  0318                     	;# 
   509  0318                     	;# 
   510  0319                     	;# 
   511  031A                     	;# 
   512  038C                     	;# 
   513  038E                     	;# 
   514  0391                     	;# 
   515  0392                     	;# 
   516  0393                     	;# 
   517  039A                     	;# 
   518  039C                     	;# 
   519  039D                     	;# 
   520  039E                     	;# 
   521  039F                     	;# 
   522  0415                     	;# 
   523  0416                     	;# 
   524  0417                     	;# 
   525  041C                     	;# 
   526  041D                     	;# 
   527  041E                     	;# 
   528  0FE4                     	;# 
   529  0FE5                     	;# 
   530  0FE6                     	;# 
   531  0FE7                     	;# 
   532  0FE8                     	;# 
   533  0FE9                     	;# 
   534  0FEA                     	;# 
   535  0FEB                     	;# 
   536  0FED                     	;# 
   537  0FEE                     	;# 
   538  0FEF                     	;# 
   539  0000                     	;# 
   540  0001                     	;# 
   541  0002                     	;# 
   542  0003                     	;# 
   543  0004                     	;# 
   544  0005                     	;# 
   545  0006                     	;# 
   546  0007                     	;# 
   547  0008                     	;# 
   548  0009                     	;# 
   549  000A                     	;# 
   550  000B                     	;# 
   551  000C                     	;# 
   552  000E                     	;# 
   553  0011                     	;# 
   554  0012                     	;# 
   555  0013                     	;# 
   556  0015                     	;# 
   557  0016                     	;# 
   558  0016                     	;# 
   559  0017                     	;# 
   560  0018                     	;# 
   561  0019                     	;# 
   562  001A                     	;# 
   563  001B                     	;# 
   564  001C                     	;# 
   565  001E                     	;# 
   566  001F                     	;# 
   567  008C                     	;# 
   568  008E                     	;# 
   569  0091                     	;# 
   570  0092                     	;# 
   571  0093                     	;# 
   572  0095                     	;# 
   573  0096                     	;# 
   574  0097                     	;# 
   575  0098                     	;# 
   576  0099                     	;# 
   577  009A                     	;# 
   578  009B                     	;# 
   579  009B                     	;# 
   580  009C                     	;# 
   581  009D                     	;# 
   582  009E                     	;# 
   583  010C                     	;# 
   584  010E                     	;# 
   585  0111                     	;# 
   586  0112                     	;# 
   587  0113                     	;# 
   588  0114                     	;# 
   589  0115                     	;# 
   590  0116                     	;# 
   591  0117                     	;# 
   592  0118                     	;# 
   593  0119                     	;# 
   594  011A                     	;# 
   595  011B                     	;# 
   596  011D                     	;# 
   597  011E                     	;# 
   598  018C                     	;# 
   599  018E                     	;# 
   600  0191                     	;# 
   601  0191                     	;# 
   602  0192                     	;# 
   603  0193                     	;# 
   604  0193                     	;# 
   605  0193                     	;# 
   606  0194                     	;# 
   607  0195                     	;# 
   608  0196                     	;# 
   609  0199                     	;# 
   610  019A                     	;# 
   611  019B                     	;# 
   612  019B                     	;# 
   613  019C                     	;# 
   614  019D                     	;# 
   615  019E                     	;# 
   616  019F                     	;# 
   617  020C                     	;# 
   618  020E                     	;# 
   619  0211                     	;# 
   620  0211                     	;# 
   621  0212                     	;# 
   622  0212                     	;# 
   623  0213                     	;# 
   624  0213                     	;# 
   625  0214                     	;# 
   626  0214                     	;# 
   627  0215                     	;# 
   628  0215                     	;# 
   629  0215                     	;# 
   630  0216                     	;# 
   631  0216                     	;# 
   632  0217                     	;# 
   633  0217                     	;# 
   634  0291                     	;# 
   635  0291                     	;# 
   636  0292                     	;# 
   637  0293                     	;# 
   638  0294                     	;# 
   639  0295                     	;# 
   640  0295                     	;# 
   641  0296                     	;# 
   642  0298                     	;# 
   643  0298                     	;# 
   644  0299                     	;# 
   645  029A                     	;# 
   646  029B                     	;# 
   647  029C                     	;# 
   648  029D                     	;# 
   649  029E                     	;# 
   650  0311                     	;# 
   651  0311                     	;# 
   652  0312                     	;# 
   653  0313                     	;# 
   654  0318                     	;# 
   655  0318                     	;# 
   656  0319                     	;# 
   657  031A                     	;# 
   658  038C                     	;# 
   659  038E                     	;# 
   660  0391                     	;# 
   661  0392                     	;# 
   662  0393                     	;# 
   663  039A                     	;# 
   664  039C                     	;# 
   665  039D                     	;# 
   666  039E                     	;# 
   667  039F                     	;# 
   668  0415                     	;# 
   669  0416                     	;# 
   670  0417                     	;# 
   671  041C                     	;# 
   672  041D                     	;# 
   673  041E                     	;# 
   674  0FE4                     	;# 
   675  0FE5                     	;# 
   676  0FE6                     	;# 
   677  0FE7                     	;# 
   678  0FE8                     	;# 
   679  0FE9                     	;# 
   680  0FEA                     	;# 
   681  0FEB                     	;# 
   682  0FED                     	;# 
   683  0FEE                     	;# 
   684  0FEF                     	;# 
   685  0000                     	;# 
   686  0001                     	;# 
   687  0002                     	;# 
   688  0003                     	;# 
   689  0004                     	;# 
   690  0005                     	;# 
   691  0006                     	;# 
   692  0007                     	;# 
   693  0008                     	;# 
   694  0009                     	;# 
   695  000A                     	;# 
   696  000B                     	;# 
   697  000C                     	;# 
   698  000E                     	;# 
   699  0011                     	;# 
   700  0012                     	;# 
   701  0013                     	;# 
   702  0015                     	;# 
   703  0016                     	;# 
   704  0016                     	;# 
   705  0017                     	;# 
   706  0018                     	;# 
   707  0019                     	;# 
   708  001A                     	;# 
   709  001B                     	;# 
   710  001C                     	;# 
   711  001E                     	;# 
   712  001F                     	;# 
   713  008C                     	;# 
   714  008E                     	;# 
   715  0091                     	;# 
   716  0092                     	;# 
   717  0093                     	;# 
   718  0095                     	;# 
   719  0096                     	;# 
   720  0097                     	;# 
   721  0098                     	;# 
   722  0099                     	;# 
   723  009A                     	;# 
   724  009B                     	;# 
   725  009B                     	;# 
   726  009C                     	;# 
   727  009D                     	;# 
   728  009E                     	;# 
   729  010C                     	;# 
   730  010E                     	;# 
   731  0111                     	;# 
   732  0112                     	;# 
   733  0113                     	;# 
   734  0114                     	;# 
   735  0115                     	;# 
   736  0116                     	;# 
   737  0117                     	;# 
   738  0118                     	;# 
   739  0119                     	;# 
   740  011A                     	;# 
   741  011B                     	;# 
   742  011D                     	;# 
   743  011E                     	;# 
   744  018C                     	;# 
   745  018E                     	;# 
   746  0191                     	;# 
   747  0191                     	;# 
   748  0192                     	;# 
   749  0193                     	;# 
   750  0193                     	;# 
   751  0193                     	;# 
   752  0194                     	;# 
   753  0195                     	;# 
   754  0196                     	;# 
   755  0199                     	;# 
   756  019A                     	;# 
   757  019B                     	;# 
   758  019B                     	;# 
   759  019C                     	;# 
   760  019D                     	;# 
   761  019E                     	;# 
   762  019F                     	;# 
   763  020C                     	;# 
   764  020E                     	;# 
   765  0211                     	;# 
   766  0211                     	;# 
   767  0212                     	;# 
   768  0212                     	;# 
   769  0213                     	;# 
   770  0213                     	;# 
   771  0214                     	;# 
   772  0214                     	;# 
   773  0215                     	;# 
   774  0215                     	;# 
   775  0215                     	;# 
   776  0216                     	;# 
   777  0216                     	;# 
   778  0217                     	;# 
   779  0217                     	;# 
   780  0291                     	;# 
   781  0291                     	;# 
   782  0292                     	;# 
   783  0293                     	;# 
   784  0294                     	;# 
   785  0295                     	;# 
   786  0295                     	;# 
   787  0296                     	;# 
   788  0298                     	;# 
   789  0298                     	;# 
   790  0299                     	;# 
   791  029A                     	;# 
   792  029B                     	;# 
   793  029C                     	;# 
   794  029D                     	;# 
   795  029E                     	;# 
   796  0311                     	;# 
   797  0311                     	;# 
   798  0312                     	;# 
   799  0313                     	;# 
   800  0318                     	;# 
   801  0318                     	;# 
   802  0319                     	;# 
   803  031A                     	;# 
   804  038C                     	;# 
   805  038E                     	;# 
   806  0391                     	;# 
   807  0392                     	;# 
   808  0393                     	;# 
   809  039A                     	;# 
   810  039C                     	;# 
   811  039D                     	;# 
   812  039E                     	;# 
   813  039F                     	;# 
   814  0415                     	;# 
   815  0416                     	;# 
   816  0417                     	;# 
   817  041C                     	;# 
   818  041D                     	;# 
   819  041E                     	;# 
   820  0FE4                     	;# 
   821  0FE5                     	;# 
   822  0FE6                     	;# 
   823  0FE7                     	;# 
   824  0FE8                     	;# 
   825  0FE9                     	;# 
   826  0FEA                     	;# 
   827  0FEB                     	;# 
   828  0FED                     	;# 
   829  0FEE                     	;# 
   830  0FEF                     	;# 
   831  0000                     	;# 
   832  0001                     	;# 
   833  0002                     	;# 
   834  0003                     	;# 
   835  0004                     	;# 
   836  0005                     	;# 
   837  0006                     	;# 
   838  0007                     	;# 
   839  0008                     	;# 
   840  0009                     	;# 
   841  000A                     	;# 
   842  000B                     	;# 
   843  000C                     	;# 
   844  000E                     	;# 
   845  0011                     	;# 
   846  0012                     	;# 
   847  0013                     	;# 
   848  0015                     	;# 
   849  0016                     	;# 
   850  0016                     	;# 
   851  0017                     	;# 
   852  0018                     	;# 
   853  0019                     	;# 
   854  001A                     	;# 
   855  001B                     	;# 
   856  001C                     	;# 
   857  001E                     	;# 
   858  001F                     	;# 
   859  008C                     	;# 
   860  008E                     	;# 
   861  0091                     	;# 
   862  0092                     	;# 
   863  0093                     	;# 
   864  0095                     	;# 
   865  0096                     	;# 
   866  0097                     	;# 
   867  0098                     	;# 
   868  0099                     	;# 
   869  009A                     	;# 
   870  009B                     	;# 
   871  009B                     	;# 
   872  009C                     	;# 
   873  009D                     	;# 
   874  009E                     	;# 
   875  010C                     	;# 
   876  010E                     	;# 
   877  0111                     	;# 
   878  0112                     	;# 
   879  0113                     	;# 
   880  0114                     	;# 
   881  0115                     	;# 
   882  0116                     	;# 
   883  0117                     	;# 
   884  0118                     	;# 
   885  0119                     	;# 
   886  011A                     	;# 
   887  011B                     	;# 
   888  011D                     	;# 
   889  011E                     	;# 
   890  018C                     	;# 
   891  018E                     	;# 
   892  0191                     	;# 
   893  0191                     	;# 
   894  0192                     	;# 
   895  0193                     	;# 
   896  0193                     	;# 
   897  0193                     	;# 
   898  0194                     	;# 
   899  0195                     	;# 
   900  0196                     	;# 
   901  0199                     	;# 
   902  019A                     	;# 
   903  019B                     	;# 
   904  019B                     	;# 
   905  019C                     	;# 
   906  019D                     	;# 
   907  019E                     	;# 
   908  019F                     	;# 
   909  020C                     	;# 
   910  020E                     	;# 
   911  0211                     	;# 
   912  0211                     	;# 
   913  0212                     	;# 
   914  0212                     	;# 
   915  0213                     	;# 
   916  0213                     	;# 
   917  0214                     	;# 
   918  0214                     	;# 
   919  0215                     	;# 
   920  0215                     	;# 
   921  0215                     	;# 
   922  0216                     	;# 
   923  0216                     	;# 
   924  0217                     	;# 
   925  0217                     	;# 
   926  0291                     	;# 
   927  0291                     	;# 
   928  0292                     	;# 
   929  0293                     	;# 
   930  0294                     	;# 
   931  0295                     	;# 
   932  0295                     	;# 
   933  0296                     	;# 
   934  0298                     	;# 
   935  0298                     	;# 
   936  0299                     	;# 
   937  029A                     	;# 
   938  029B                     	;# 
   939  029C                     	;# 
   940  029D                     	;# 
   941  029E                     	;# 
   942  0311                     	;# 
   943  0311                     	;# 
   944  0312                     	;# 
   945  0313                     	;# 
   946  0318                     	;# 
   947  0318                     	;# 
   948  0319                     	;# 
   949  031A                     	;# 
   950  038C                     	;# 
   951  038E                     	;# 
   952  0391                     	;# 
   953  0392                     	;# 
   954  0393                     	;# 
   955  039A                     	;# 
   956  039C                     	;# 
   957  039D                     	;# 
   958  039E                     	;# 
   959  039F                     	;# 
   960  0415                     	;# 
   961  0416                     	;# 
   962  0417                     	;# 
   963  041C                     	;# 
   964  041D                     	;# 
   965  041E                     	;# 
   966  0FE4                     	;# 
   967  0FE5                     	;# 
   968  0FE6                     	;# 
   969  0FE7                     	;# 
   970  0FE8                     	;# 
   971  0FE9                     	;# 
   972  0FEA                     	;# 
   973  0FEB                     	;# 
   974  0FED                     	;# 
   975  0FEE                     	;# 
   976  0FEF                     	;# 
   977  0000                     	;# 
   978  0001                     	;# 
   979  0002                     	;# 
   980  0003                     	;# 
   981  0004                     	;# 
   982  0005                     	;# 
   983  0006                     	;# 
   984  0007                     	;# 
   985  0008                     	;# 
   986  0009                     	;# 
   987  000A                     	;# 
   988  000B                     	;# 
   989  000C                     	;# 
   990  000E                     	;# 
   991  0011                     	;# 
   992  0012                     	;# 
   993  0013                     	;# 
   994  0015                     	;# 
   995  0016                     	;# 
   996  0016                     	;# 
   997  0017                     	;# 
   998  0018                     	;# 
   999  0019                     	;# 
  1000  001A                     	;# 
  1001  001B                     	;# 
  1002  001C                     	;# 
  1003  001E                     	;# 
  1004  001F                     	;# 
  1005  008C                     	;# 
  1006  008E                     	;# 
  1007  0091                     	;# 
  1008  0092                     	;# 
  1009  0093                     	;# 
  1010  0095                     	;# 
  1011  0096                     	;# 
  1012  0097                     	;# 
  1013  0098                     	;# 
  1014  0099                     	;# 
  1015  009A                     	;# 
  1016  009B                     	;# 
  1017  009B                     	;# 
  1018  009C                     	;# 
  1019  009D                     	;# 
  1020  009E                     	;# 
  1021  010C                     	;# 
  1022  010E                     	;# 
  1023  0111                     	;# 
  1024  0112                     	;# 
  1025  0113                     	;# 
  1026  0114                     	;# 
  1027  0115                     	;# 
  1028  0116                     	;# 
  1029  0117                     	;# 
  1030  0118                     	;# 
  1031  0119                     	;# 
  1032  011A                     	;# 
  1033  011B                     	;# 
  1034  011D                     	;# 
  1035  011E                     	;# 
  1036  018C                     	;# 
  1037  018E                     	;# 
  1038  0191                     	;# 
  1039  0191                     	;# 
  1040  0192                     	;# 
  1041  0193                     	;# 
  1042  0193                     	;# 
  1043  0193                     	;# 
  1044  0194                     	;# 
  1045  0195                     	;# 
  1046  0196                     	;# 
  1047  0199                     	;# 
  1048  019A                     	;# 
  1049  019B                     	;# 
  1050  019B                     	;# 
  1051  019C                     	;# 
  1052  019D                     	;# 
  1053  019E                     	;# 
  1054  019F                     	;# 
  1055  020C                     	;# 
  1056  020E                     	;# 
  1057  0211                     	;# 
  1058  0211                     	;# 
  1059  0212                     	;# 
  1060  0212                     	;# 
  1061  0213                     	;# 
  1062  0213                     	;# 
  1063  0214                     	;# 
  1064  0214                     	;# 
  1065  0215                     	;# 
  1066  0215                     	;# 
  1067  0215                     	;# 
  1068  0216                     	;# 
  1069  0216                     	;# 
  1070  0217                     	;# 
  1071  0217                     	;# 
  1072  0291                     	;# 
  1073  0291                     	;# 
  1074  0292                     	;# 
  1075  0293                     	;# 
  1076  0294                     	;# 
  1077  0295                     	;# 
  1078  0295                     	;# 
  1079  0296                     	;# 
  1080  0298                     	;# 
  1081  0298                     	;# 
  1082  0299                     	;# 
  1083  029A                     	;# 
  1084  029B                     	;# 
  1085  029C                     	;# 
  1086  029D                     	;# 
  1087  029E                     	;# 
  1088  0311                     	;# 
  1089  0311                     	;# 
  1090  0312                     	;# 
  1091  0313                     	;# 
  1092  0318                     	;# 
  1093  0318                     	;# 
  1094  0319                     	;# 
  1095  031A                     	;# 
  1096  038C                     	;# 
  1097  038E                     	;# 
  1098  0391                     	;# 
  1099  0392                     	;# 
  1100  0393                     	;# 
  1101  039A                     	;# 
  1102  039C                     	;# 
  1103  039D                     	;# 
  1104  039E                     	;# 
  1105  039F                     	;# 
  1106  0415                     	;# 
  1107  0416                     	;# 
  1108  0417                     	;# 
  1109  041C                     	;# 
  1110  041D                     	;# 
  1111  041E                     	;# 
  1112  0FE4                     	;# 
  1113  0FE5                     	;# 
  1114  0FE6                     	;# 
  1115  0FE7                     	;# 
  1116  0FE8                     	;# 
  1117  0FE9                     	;# 
  1118  0FEA                     	;# 
  1119  0FEB                     	;# 
  1120  0FED                     	;# 
  1121  0FEE                     	;# 
  1122  0FEF                     	;# 
  1123  0000                     	;# 
  1124  0001                     	;# 
  1125  0002                     	;# 
  1126  0003                     	;# 
  1127  0004                     	;# 
  1128  0005                     	;# 
  1129  0006                     	;# 
  1130  0007                     	;# 
  1131  0008                     	;# 
  1132  0009                     	;# 
  1133  000A                     	;# 
  1134  000B                     	;# 
  1135  000C                     	;# 
  1136  000E                     	;# 
  1137  0011                     	;# 
  1138  0012                     	;# 
  1139  0013                     	;# 
  1140  0015                     	;# 
  1141  0016                     	;# 
  1142  0016                     	;# 
  1143  0017                     	;# 
  1144  0018                     	;# 
  1145  0019                     	;# 
  1146  001A                     	;# 
  1147  001B                     	;# 
  1148  001C                     	;# 
  1149  001E                     	;# 
  1150  001F                     	;# 
  1151  008C                     	;# 
  1152  008E                     	;# 
  1153  0091                     	;# 
  1154  0092                     	;# 
  1155  0093                     	;# 
  1156  0095                     	;# 
  1157  0096                     	;# 
  1158  0097                     	;# 
  1159  0098                     	;# 
  1160  0099                     	;# 
  1161  009A                     	;# 
  1162  009B                     	;# 
  1163  009B                     	;# 
  1164  009C                     	;# 
  1165  009D                     	;# 
  1166  009E                     	;# 
  1167  010C                     	;# 
  1168  010E                     	;# 
  1169  0111                     	;# 
  1170  0112                     	;# 
  1171  0113                     	;# 
  1172  0114                     	;# 
  1173  0115                     	;# 
  1174  0116                     	;# 
  1175  0117                     	;# 
  1176  0118                     	;# 
  1177  0119                     	;# 
  1178  011A                     	;# 
  1179  011B                     	;# 
  1180  011D                     	;# 
  1181  011E                     	;# 
  1182  018C                     	;# 
  1183  018E                     	;# 
  1184  0191                     	;# 
  1185  0191                     	;# 
  1186  0192                     	;# 
  1187  0193                     	;# 
  1188  0193                     	;# 
  1189  0193                     	;# 
  1190  0194                     	;# 
  1191  0195                     	;# 
  1192  0196                     	;# 
  1193  0199                     	;# 
  1194  019A                     	;# 
  1195  019B                     	;# 
  1196  019B                     	;# 
  1197  019C                     	;# 
  1198  019D                     	;# 
  1199  019E                     	;# 
  1200  019F                     	;# 
  1201  020C                     	;# 
  1202  020E                     	;# 
  1203  0211                     	;# 
  1204  0211                     	;# 
  1205  0212                     	;# 
  1206  0212                     	;# 
  1207  0213                     	;# 
  1208  0213                     	;# 
  1209  0214                     	;# 
  1210  0214                     	;# 
  1211  0215                     	;# 
  1212  0215                     	;# 
  1213  0215                     	;# 
  1214  0216                     	;# 
  1215  0216                     	;# 
  1216  0217                     	;# 
  1217  0217                     	;# 
  1218  0291                     	;# 
  1219  0291                     	;# 
  1220  0292                     	;# 
  1221  0293                     	;# 
  1222  0294                     	;# 
  1223  0295                     	;# 
  1224  0295                     	;# 
  1225  0296                     	;# 
  1226  0298                     	;# 
  1227  0298                     	;# 
  1228  0299                     	;# 
  1229  029A                     	;# 
  1230  029B                     	;# 
  1231  029C                     	;# 
  1232  029D                     	;# 
  1233  029E                     	;# 
  1234  0311                     	;# 
  1235  0311                     	;# 
  1236  0312                     	;# 
  1237  0313                     	;# 
  1238  0318                     	;# 
  1239  0318                     	;# 
  1240  0319                     	;# 
  1241  031A                     	;# 
  1242  038C                     	;# 
  1243  038E                     	;# 
  1244  0391                     	;# 
  1245  0392                     	;# 
  1246  0393                     	;# 
  1247  039A                     	;# 
  1248  039C                     	;# 
  1249  039D                     	;# 
  1250  039E                     	;# 
  1251  039F                     	;# 
  1252  0415                     	;# 
  1253  0416                     	;# 
  1254  0417                     	;# 
  1255  041C                     	;# 
  1256  041D                     	;# 
  1257  041E                     	;# 
  1258  0FE4                     	;# 
  1259  0FE5                     	;# 
  1260  0FE6                     	;# 
  1261  0FE7                     	;# 
  1262  0FE8                     	;# 
  1263  0FE9                     	;# 
  1264  0FEA                     	;# 
  1265  0FEB                     	;# 
  1266  0FED                     	;# 
  1267  0FEE                     	;# 
  1268  0FEF                     	;# 
  1269  0000                     	;# 
  1270  0001                     	;# 
  1271  0002                     	;# 
  1272  0003                     	;# 
  1273  0004                     	;# 
  1274  0005                     	;# 
  1275  0006                     	;# 
  1276  0007                     	;# 
  1277  0008                     	;# 
  1278  0009                     	;# 
  1279  000A                     	;# 
  1280  000B                     	;# 
  1281  000C                     	;# 
  1282  000E                     	;# 
  1283  0011                     	;# 
  1284  0012                     	;# 
  1285  0013                     	;# 
  1286  0015                     	;# 
  1287  0016                     	;# 
  1288  0016                     	;# 
  1289  0017                     	;# 
  1290  0018                     	;# 
  1291  0019                     	;# 
  1292  001A                     	;# 
  1293  001B                     	;# 
  1294  001C                     	;# 
  1295  001E                     	;# 
  1296  001F                     	;# 
  1297  008C                     	;# 
  1298  008E                     	;# 
  1299  0091                     	;# 
  1300  0092                     	;# 
  1301  0093                     	;# 
  1302  0095                     	;# 
  1303  0096                     	;# 
  1304  0097                     	;# 
  1305  0098                     	;# 
  1306  0099                     	;# 
  1307  009A                     	;# 
  1308  009B                     	;# 
  1309  009B                     	;# 
  1310  009C                     	;# 
  1311  009D                     	;# 
  1312  009E                     	;# 
  1313  010C                     	;# 
  1314  010E                     	;# 
  1315  0111                     	;# 
  1316  0112                     	;# 
  1317  0113                     	;# 
  1318  0114                     	;# 
  1319  0115                     	;# 
  1320  0116                     	;# 
  1321  0117                     	;# 
  1322  0118                     	;# 
  1323  0119                     	;# 
  1324  011A                     	;# 
  1325  011B                     	;# 
  1326  011D                     	;# 
  1327  011E                     	;# 
  1328  018C                     	;# 
  1329  018E                     	;# 
  1330  0191                     	;# 
  1331  0191                     	;# 
  1332  0192                     	;# 
  1333  0193                     	;# 
  1334  0193                     	;# 
  1335  0193                     	;# 
  1336  0194                     	;# 
  1337  0195                     	;# 
  1338  0196                     	;# 
  1339  0199                     	;# 
  1340  019A                     	;# 
  1341  019B                     	;# 
  1342  019B                     	;# 
  1343  019C                     	;# 
  1344  019D                     	;# 
  1345  019E                     	;# 
  1346  019F                     	;# 
  1347  020C                     	;# 
  1348  020E                     	;# 
  1349  0211                     	;# 
  1350  0211                     	;# 
  1351  0212                     	;# 
  1352  0212                     	;# 
  1353  0213                     	;# 
  1354  0213                     	;# 
  1355  0214                     	;# 
  1356  0214                     	;# 
  1357  0215                     	;# 
  1358  0215                     	;# 
  1359  0215                     	;# 
  1360  0216                     	;# 
  1361  0216                     	;# 
  1362  0217                     	;# 
  1363  0217                     	;# 
  1364  0291                     	;# 
  1365  0291                     	;# 
  1366  0292                     	;# 
  1367  0293                     	;# 
  1368  0294                     	;# 
  1369  0295                     	;# 
  1370  0295                     	;# 
  1371  0296                     	;# 
  1372  0298                     	;# 
  1373  0298                     	;# 
  1374  0299                     	;# 
  1375  029A                     	;# 
  1376  029B                     	;# 
  1377  029C                     	;# 
  1378  029D                     	;# 
  1379  029E                     	;# 
  1380  0311                     	;# 
  1381  0311                     	;# 
  1382  0312                     	;# 
  1383  0313                     	;# 
  1384  0318                     	;# 
  1385  0318                     	;# 
  1386  0319                     	;# 
  1387  031A                     	;# 
  1388  038C                     	;# 
  1389  038E                     	;# 
  1390  0391                     	;# 
  1391  0392                     	;# 
  1392  0393                     	;# 
  1393  039A                     	;# 
  1394  039C                     	;# 
  1395  039D                     	;# 
  1396  039E                     	;# 
  1397  039F                     	;# 
  1398  0415                     	;# 
  1399  0416                     	;# 
  1400  0417                     	;# 
  1401  041C                     	;# 
  1402  041D                     	;# 
  1403  041E                     	;# 
  1404  0FE4                     	;# 
  1405  0FE5                     	;# 
  1406  0FE6                     	;# 
  1407  0FE7                     	;# 
  1408  0FE8                     	;# 
  1409  0FE9                     	;# 
  1410  0FEA                     	;# 
  1411  0FEB                     	;# 
  1412  0FED                     	;# 
  1413  0FEE                     	;# 
  1414  0FEF                     	;# 
  1415  0000                     	;# 
  1416  0001                     	;# 
  1417  0002                     	;# 
  1418  0003                     	;# 
  1419  0004                     	;# 
  1420  0005                     	;# 
  1421  0006                     	;# 
  1422  0007                     	;# 
  1423  0008                     	;# 
  1424  0009                     	;# 
  1425  000A                     	;# 
  1426  000B                     	;# 
  1427  000C                     	;# 
  1428  000E                     	;# 
  1429  0011                     	;# 
  1430  0012                     	;# 
  1431  0013                     	;# 
  1432  0015                     	;# 
  1433  0016                     	;# 
  1434  0016                     	;# 
  1435  0017                     	;# 
  1436  0018                     	;# 
  1437  0019                     	;# 
  1438  001A                     	;# 
  1439  001B                     	;# 
  1440  001C                     	;# 
  1441  001E                     	;# 
  1442  001F                     	;# 
  1443  008C                     	;# 
  1444  008E                     	;# 
  1445  0091                     	;# 
  1446  0092                     	;# 
  1447  0093                     	;# 
  1448  0095                     	;# 
  1449  0096                     	;# 
  1450  0097                     	;# 
  1451  0098                     	;# 
  1452  0099                     	;# 
  1453  009A                     	;# 
  1454  009B                     	;# 
  1455  009B                     	;# 
  1456  009C                     	;# 
  1457  009D                     	;# 
  1458  009E                     	;# 
  1459  010C                     	;# 
  1460  010E                     	;# 
  1461  0111                     	;# 
  1462  0112                     	;# 
  1463  0113                     	;# 
  1464  0114                     	;# 
  1465  0115                     	;# 
  1466  0116                     	;# 
  1467  0117                     	;# 
  1468  0118                     	;# 
  1469  0119                     	;# 
  1470  011A                     	;# 
  1471  011B                     	;# 
  1472  011D                     	;# 
  1473  011E                     	;# 
  1474  018C                     	;# 
  1475  018E                     	;# 
  1476  0191                     	;# 
  1477  0191                     	;# 
  1478  0192                     	;# 
  1479  0193                     	;# 
  1480  0193                     	;# 
  1481  0193                     	;# 
  1482  0194                     	;# 
  1483  0195                     	;# 
  1484  0196                     	;# 
  1485  0199                     	;# 
  1486  019A                     	;# 
  1487  019B                     	;# 
  1488  019B                     	;# 
  1489  019C                     	;# 
  1490  019D                     	;# 
  1491  019E                     	;# 
  1492  019F                     	;# 
  1493  020C                     	;# 
  1494  020E                     	;# 
  1495  0211                     	;# 
  1496  0211                     	;# 
  1497  0212                     	;# 
  1498  0212                     	;# 
  1499  0213                     	;# 
  1500  0213                     	;# 
  1501  0214                     	;# 
  1502  0214                     	;# 
  1503  0215                     	;# 
  1504  0215                     	;# 
  1505  0215                     	;# 
  1506  0216                     	;# 
  1507  0216                     	;# 
  1508  0217                     	;# 
  1509  0217                     	;# 
  1510  0291                     	;# 
  1511  0291                     	;# 
  1512  0292                     	;# 
  1513  0293                     	;# 
  1514  0294                     	;# 
  1515  0295                     	;# 
  1516  0295                     	;# 
  1517  0296                     	;# 
  1518  0298                     	;# 
  1519  0298                     	;# 
  1520  0299                     	;# 
  1521  029A                     	;# 
  1522  029B                     	;# 
  1523  029C                     	;# 
  1524  029D                     	;# 
  1525  029E                     	;# 
  1526  0311                     	;# 
  1527  0311                     	;# 
  1528  0312                     	;# 
  1529  0313                     	;# 
  1530  0318                     	;# 
  1531  0318                     	;# 
  1532  0319                     	;# 
  1533  031A                     	;# 
  1534  038C                     	;# 
  1535  038E                     	;# 
  1536  0391                     	;# 
  1537  0392                     	;# 
  1538  0393                     	;# 
  1539  039A                     	;# 
  1540  039C                     	;# 
  1541  039D                     	;# 
  1542  039E                     	;# 
  1543  039F                     	;# 
  1544  0415                     	;# 
  1545  0416                     	;# 
  1546  0417                     	;# 
  1547  041C                     	;# 
  1548  041D                     	;# 
  1549  041E                     	;# 
  1550  0FE4                     	;# 
  1551  0FE5                     	;# 
  1552  0FE6                     	;# 
  1553  0FE7                     	;# 
  1554  0FE8                     	;# 
  1555  0FE9                     	;# 
  1556  0FEA                     	;# 
  1557  0FEB                     	;# 
  1558  0FED                     	;# 
  1559  0FEE                     	;# 
  1560  0FEF                     	;# 
  1561  0000                     	;# 
  1562  0001                     	;# 
  1563  0002                     	;# 
  1564  0003                     	;# 
  1565  0004                     	;# 
  1566  0005                     	;# 
  1567  0006                     	;# 
  1568  0007                     	;# 
  1569  0008                     	;# 
  1570  0009                     	;# 
  1571  000A                     	;# 
  1572  000B                     	;# 
  1573  000C                     	;# 
  1574  000E                     	;# 
  1575  0011                     	;# 
  1576  0012                     	;# 
  1577  0013                     	;# 
  1578  0015                     	;# 
  1579  0016                     	;# 
  1580  0016                     	;# 
  1581  0017                     	;# 
  1582  0018                     	;# 
  1583  0019                     	;# 
  1584  001A                     	;# 
  1585  001B                     	;# 
  1586  001C                     	;# 
  1587  001E                     	;# 
  1588  001F                     	;# 
  1589  008C                     	;# 
  1590  008E                     	;# 
  1591  0091                     	;# 
  1592  0092                     	;# 
  1593  0093                     	;# 
  1594  0095                     	;# 
  1595  0096                     	;# 
  1596  0097                     	;# 
  1597  0098                     	;# 
  1598  0099                     	;# 
  1599  009A                     	;# 
  1600  009B                     	;# 
  1601  009B                     	;# 
  1602  009C                     	;# 
  1603  009D                     	;# 
  1604  009E                     	;# 
  1605  010C                     	;# 
  1606  010E                     	;# 
  1607  0111                     	;# 
  1608  0112                     	;# 
  1609  0113                     	;# 
  1610  0114                     	;# 
  1611  0115                     	;# 
  1612  0116                     	;# 
  1613  0117                     	;# 
  1614  0118                     	;# 
  1615  0119                     	;# 
  1616  011A                     	;# 
  1617  011B                     	;# 
  1618  011D                     	;# 
  1619  011E                     	;# 
  1620  018C                     	;# 
  1621  018E                     	;# 
  1622  0191                     	;# 
  1623  0191                     	;# 
  1624  0192                     	;# 
  1625  0193                     	;# 
  1626  0193                     	;# 
  1627  0193                     	;# 
  1628  0194                     	;# 
  1629  0195                     	;# 
  1630  0196                     	;# 
  1631  0199                     	;# 
  1632  019A                     	;# 
  1633  019B                     	;# 
  1634  019B                     	;# 
  1635  019C                     	;# 
  1636  019D                     	;# 
  1637  019E                     	;# 
  1638  019F                     	;# 
  1639  020C                     	;# 
  1640  020E                     	;# 
  1641  0211                     	;# 
  1642  0211                     	;# 
  1643  0212                     	;# 
  1644  0212                     	;# 
  1645  0213                     	;# 
  1646  0213                     	;# 
  1647  0214                     	;# 
  1648  0214                     	;# 
  1649  0215                     	;# 
  1650  0215                     	;# 
  1651  0215                     	;# 
  1652  0216                     	;# 
  1653  0216                     	;# 
  1654  0217                     	;# 
  1655  0217                     	;# 
  1656  0291                     	;# 
  1657  0291                     	;# 
  1658  0292                     	;# 
  1659  0293                     	;# 
  1660  0294                     	;# 
  1661  0295                     	;# 
  1662  0295                     	;# 
  1663  0296                     	;# 
  1664  0298                     	;# 
  1665  0298                     	;# 
  1666  0299                     	;# 
  1667  029A                     	;# 
  1668  029B                     	;# 
  1669  029C                     	;# 
  1670  029D                     	;# 
  1671  029E                     	;# 
  1672  0311                     	;# 
  1673  0311                     	;# 
  1674  0312                     	;# 
  1675  0313                     	;# 
  1676  0318                     	;# 
  1677  0318                     	;# 
  1678  0319                     	;# 
  1679  031A                     	;# 
  1680  038C                     	;# 
  1681  038E                     	;# 
  1682  0391                     	;# 
  1683  0392                     	;# 
  1684  0393                     	;# 
  1685  039A                     	;# 
  1686  039C                     	;# 
  1687  039D                     	;# 
  1688  039E                     	;# 
  1689  039F                     	;# 
  1690  0415                     	;# 
  1691  0416                     	;# 
  1692  0417                     	;# 
  1693  041C                     	;# 
  1694  041D                     	;# 
  1695  041E                     	;# 
  1696  0FE4                     	;# 
  1697  0FE5                     	;# 
  1698  0FE6                     	;# 
  1699  0FE7                     	;# 
  1700  0FE8                     	;# 
  1701  0FE9                     	;# 
  1702  0FEA                     	;# 
  1703  0FEB                     	;# 
  1704  0FED                     	;# 
  1705  0FEE                     	;# 
  1706  0FEF                     	;# 
  1707  0000                     	;# 
  1708  0001                     	;# 
  1709  0002                     	;# 
  1710  0003                     	;# 
  1711  0004                     	;# 
  1712  0005                     	;# 
  1713  0006                     	;# 
  1714  0007                     	;# 
  1715  0008                     	;# 
  1716  0009                     	;# 
  1717  000A                     	;# 
  1718  000B                     	;# 
  1719  000C                     	;# 
  1720  000E                     	;# 
  1721  0011                     	;# 
  1722  0012                     	;# 
  1723  0013                     	;# 
  1724  0015                     	;# 
  1725  0016                     	;# 
  1726  0016                     	;# 
  1727  0017                     	;# 
  1728  0018                     	;# 
  1729  0019                     	;# 
  1730  001A                     	;# 
  1731  001B                     	;# 
  1732  001C                     	;# 
  1733  001E                     	;# 
  1734  001F                     	;# 
  1735  008C                     	;# 
  1736  008E                     	;# 
  1737  0091                     	;# 
  1738  0092                     	;# 
  1739  0093                     	;# 
  1740  0095                     	;# 
  1741  0096                     	;# 
  1742  0097                     	;# 
  1743  0098                     	;# 
  1744  0099                     	;# 
  1745  009A                     	;# 
  1746  009B                     	;# 
  1747  009B                     	;# 
  1748  009C                     	;# 
  1749  009D                     	;# 
  1750  009E                     	;# 
  1751  010C                     	;# 
  1752  010E                     	;# 
  1753  0111                     	;# 
  1754  0112                     	;# 
  1755  0113                     	;# 
  1756  0114                     	;# 
  1757  0115                     	;# 
  1758  0116                     	;# 
  1759  0117                     	;# 
  1760  0118                     	;# 
  1761  0119                     	;# 
  1762  011A                     	;# 
  1763  011B                     	;# 
  1764  011D                     	;# 
  1765  011E                     	;# 
  1766  018C                     	;# 
  1767  018E                     	;# 
  1768  0191                     	;# 
  1769  0191                     	;# 
  1770  0192                     	;# 
  1771  0193                     	;# 
  1772  0193                     	;# 
  1773  0193                     	;# 
  1774  0194                     	;# 
  1775  0195                     	;# 
  1776  0196                     	;# 
  1777  0199                     	;# 
  1778  019A                     	;# 
  1779  019B                     	;# 
  1780  019B                     	;# 
  1781  019C                     	;# 
  1782  019D                     	;# 
  1783  019E                     	;# 
  1784  019F                     	;# 
  1785  020C                     	;# 
  1786  020E                     	;# 
  1787  0211                     	;# 
  1788  0211                     	;# 
  1789  0212                     	;# 
  1790  0212                     	;# 
  1791  0213                     	;# 
  1792  0213                     	;# 
  1793  0214                     	;# 
  1794  0214                     	;# 
  1795  0215                     	;# 
  1796  0215                     	;# 
  1797  0215                     	;# 
  1798  0216                     	;# 
  1799  0216                     	;# 
  1800  0217                     	;# 
  1801  0217                     	;# 
  1802  0291                     	;# 
  1803  0291                     	;# 
  1804  0292                     	;# 
  1805  0293                     	;# 
  1806  0294                     	;# 
  1807  0295                     	;# 
  1808  0295                     	;# 
  1809  0296                     	;# 
  1810  0298                     	;# 
  1811  0298                     	;# 
  1812  0299                     	;# 
  1813  029A                     	;# 
  1814  029B                     	;# 
  1815  029C                     	;# 
  1816  029D                     	;# 
  1817  029E                     	;# 
  1818  0311                     	;# 
  1819  0311                     	;# 
  1820  0312                     	;# 
  1821  0313                     	;# 
  1822  0318                     	;# 
  1823  0318                     	;# 
  1824  0319                     	;# 
  1825  031A                     	;# 
  1826  038C                     	;# 
  1827  038E                     	;# 
  1828  0391                     	;# 
  1829  0392                     	;# 
  1830  0393                     	;# 
  1831  039A                     	;# 
  1832  039C                     	;# 
  1833  039D                     	;# 
  1834  039E                     	;# 
  1835  039F                     	;# 
  1836  0415                     	;# 
  1837  0416                     	;# 
  1838  0417                     	;# 
  1839  041C                     	;# 
  1840  041D                     	;# 
  1841  041E                     	;# 
  1842  0FE4                     	;# 
  1843  0FE5                     	;# 
  1844  0FE6                     	;# 
  1845  0FE7                     	;# 
  1846  0FE8                     	;# 
  1847  0FE9                     	;# 
  1848  0FEA                     	;# 
  1849  0FEB                     	;# 
  1850  0FED                     	;# 
  1851  0FEE                     	;# 
  1852  0FEF                     	;# 
  1853  0000                     	;# 
  1854  0001                     	;# 
  1855  0002                     	;# 
  1856  0003                     	;# 
  1857  0004                     	;# 
  1858  0005                     	;# 
  1859  0006                     	;# 
  1860  0007                     	;# 
  1861  0008                     	;# 
  1862  0009                     	;# 
  1863  000A                     	;# 
  1864  000B                     	;# 
  1865  000C                     	;# 
  1866  000E                     	;# 
  1867  0011                     	;# 
  1868  0012                     	;# 
  1869  0013                     	;# 
  1870  0015                     	;# 
  1871  0016                     	;# 
  1872  0016                     	;# 
  1873  0017                     	;# 
  1874  0018                     	;# 
  1875  0019                     	;# 
  1876  001A                     	;# 
  1877  001B                     	;# 
  1878  001C                     	;# 
  1879  001E                     	;# 
  1880  001F                     	;# 
  1881  008C                     	;# 
  1882  008E                     	;# 
  1883  0091                     	;# 
  1884  0092                     	;# 
  1885  0093                     	;# 
  1886  0095                     	;# 
  1887  0096                     	;# 
  1888  0097                     	;# 
  1889  0098                     	;# 
  1890  0099                     	;# 
  1891  009A                     	;# 
  1892  009B                     	;# 
  1893  009B                     	;# 
  1894  009C                     	;# 
  1895  009D                     	;# 
  1896  009E                     	;# 
  1897  010C                     	;# 
  1898  010E                     	;# 
  1899  0111                     	;# 
  1900  0112                     	;# 
  1901  0113                     	;# 
  1902  0114                     	;# 
  1903  0115                     	;# 
  1904  0116                     	;# 
  1905  0117                     	;# 
  1906  0118                     	;# 
  1907  0119                     	;# 
  1908  011A                     	;# 
  1909  011B                     	;# 
  1910  011D                     	;# 
  1911  011E                     	;# 
  1912  018C                     	;# 
  1913  018E                     	;# 
  1914  0191                     	;# 
  1915  0191                     	;# 
  1916  0192                     	;# 
  1917  0193                     	;# 
  1918  0193                     	;# 
  1919  0193                     	;# 
  1920  0194                     	;# 
  1921  0195                     	;# 
  1922  0196                     	;# 
  1923  0199                     	;# 
  1924  019A                     	;# 
  1925  019B                     	;# 
  1926  019B                     	;# 
  1927  019C                     	;# 
  1928  019D                     	;# 
  1929  019E                     	;# 
  1930  019F                     	;# 
  1931  020C                     	;# 
  1932  020E                     	;# 
  1933  0211                     	;# 
  1934  0211                     	;# 
  1935  0212                     	;# 
  1936  0212                     	;# 
  1937  0213                     	;# 
  1938  0213                     	;# 
  1939  0214                     	;# 
  1940  0214                     	;# 
  1941  0215                     	;# 
  1942  0215                     	;# 
  1943  0215                     	;# 
  1944  0216                     	;# 
  1945  0216                     	;# 
  1946  0217                     	;# 
  1947  0217                     	;# 
  1948  0291                     	;# 
  1949  0291                     	;# 
  1950  0292                     	;# 
  1951  0293                     	;# 
  1952  0294                     	;# 
  1953  0295                     	;# 
  1954  0295                     	;# 
  1955  0296                     	;# 
  1956  0298                     	;# 
  1957  0298                     	;# 
  1958  0299                     	;# 
  1959  029A                     	;# 
  1960  029B                     	;# 
  1961  029C                     	;# 
  1962  029D                     	;# 
  1963  029E                     	;# 
  1964  0311                     	;# 
  1965  0311                     	;# 
  1966  0312                     	;# 
  1967  0313                     	;# 
  1968  0318                     	;# 
  1969  0318                     	;# 
  1970  0319                     	;# 
  1971  031A                     	;# 
  1972  038C                     	;# 
  1973  038E                     	;# 
  1974  0391                     	;# 
  1975  0392                     	;# 
  1976  0393                     	;# 
  1977  039A                     	;# 
  1978  039C                     	;# 
  1979  039D                     	;# 
  1980  039E                     	;# 
  1981  039F                     	;# 
  1982  0415                     	;# 
  1983  0416                     	;# 
  1984  0417                     	;# 
  1985  041C                     	;# 
  1986  041D                     	;# 
  1987  041E                     	;# 
  1988  0FE4                     	;# 
  1989  0FE5                     	;# 
  1990  0FE6                     	;# 
  1991  0FE7                     	;# 
  1992  0FE8                     	;# 
  1993  0FE9                     	;# 
  1994  0FEA                     	;# 
  1995  0FEB                     	;# 
  1996  0FED                     	;# 
  1997  0FEE                     	;# 
  1998  0FEF                     	;# 
  1999  0000                     	;# 
  2000  0001                     	;# 
  2001  0002                     	;# 
  2002  0003                     	;# 
  2003  0004                     	;# 
  2004  0005                     	;# 
  2005  0006                     	;# 
  2006  0007                     	;# 
  2007  0008                     	;# 
  2008  0009                     	;# 
  2009  000A                     	;# 
  2010  000B                     	;# 
  2011  000C                     	;# 
  2012  000E                     	;# 
  2013  0011                     	;# 
  2014  0012                     	;# 
  2015  0013                     	;# 
  2016  0015                     	;# 
  2017  0016                     	;# 
  2018  0016                     	;# 
  2019  0017                     	;# 
  2020  0018                     	;# 
  2021  0019                     	;# 
  2022  001A                     	;# 
  2023  001B                     	;# 
  2024  001C                     	;# 
  2025  001E                     	;# 
  2026  001F                     	;# 
  2027  008C                     	;# 
  2028  008E                     	;# 
  2029  0091                     	;# 
  2030  0092                     	;# 
  2031  0093                     	;# 
  2032  0095                     	;# 
  2033  0096                     	;# 
  2034  0097                     	;# 
  2035  0098                     	;# 
  2036  0099                     	;# 
  2037  009A                     	;# 
  2038  009B                     	;# 
  2039  009B                     	;# 
  2040  009C                     	;# 
  2041  009D                     	;# 
  2042  009E                     	;# 
  2043  010C                     	;# 
  2044  010E                     	;# 
  2045  0111                     	;# 
  2046  0112                     	;# 
  2047  0113                     	;# 
  2048  0114                     	;# 
  2049  0115                     	;# 
  2050  0116                     	;# 
  2051  0117                     	;# 
  2052  0118                     	;# 
  2053  0119                     	;# 
  2054  011A                     	;# 
  2055  011B                     	;# 
  2056  011D                     	;# 
  2057  011E                     	;# 
  2058  018C                     	;# 
  2059  018E                     	;# 
  2060  0191                     	;# 
  2061  0191                     	;# 
  2062  0192                     	;# 
  2063  0193                     	;# 
  2064  0193                     	;# 
  2065  0193                     	;# 
  2066  0194                     	;# 
  2067  0195                     	;# 
  2068  0196                     	;# 
  2069  0199                     	;# 
  2070  019A                     	;# 
  2071  019B                     	;# 
  2072  019B                     	;# 
  2073  019C                     	;# 
  2074  019D                     	;# 
  2075  019E                     	;# 
  2076  019F                     	;# 
  2077  020C                     	;# 
  2078  020E                     	;# 
  2079  0211                     	;# 
  2080  0211                     	;# 
  2081  0212                     	;# 
  2082  0212                     	;# 
  2083  0213                     	;# 
  2084  0213                     	;# 
  2085  0214                     	;# 
  2086  0214                     	;# 
  2087  0215                     	;# 
  2088  0215                     	;# 
  2089  0215                     	;# 
  2090  0216                     	;# 
  2091  0216                     	;# 
  2092  0217                     	;# 
  2093  0217                     	;# 
  2094  0291                     	;# 
  2095  0291                     	;# 
  2096  0292                     	;# 
  2097  0293                     	;# 
  2098  0294                     	;# 
  2099  0295                     	;# 
  2100  0295                     	;# 
  2101  0296                     	;# 
  2102  0298                     	;# 
  2103  0298                     	;# 
  2104  0299                     	;# 
  2105  029A                     	;# 
  2106  029B                     	;# 
  2107  029C                     	;# 
  2108  029D                     	;# 
  2109  029E                     	;# 
  2110  0311                     	;# 
  2111  0311                     	;# 
  2112  0312                     	;# 
  2113  0313                     	;# 
  2114  0318                     	;# 
  2115  0318                     	;# 
  2116  0319                     	;# 
  2117  031A                     	;# 
  2118  038C                     	;# 
  2119  038E                     	;# 
  2120  0391                     	;# 
  2121  0392                     	;# 
  2122  0393                     	;# 
  2123  039A                     	;# 
  2124  039C                     	;# 
  2125  039D                     	;# 
  2126  039E                     	;# 
  2127  039F                     	;# 
  2128  0415                     	;# 
  2129  0416                     	;# 
  2130  0417                     	;# 
  2131  041C                     	;# 
  2132  041D                     	;# 
  2133  041E                     	;# 
  2134  0FE4                     	;# 
  2135  0FE5                     	;# 
  2136  0FE6                     	;# 
  2137  0FE7                     	;# 
  2138  0FE8                     	;# 
  2139  0FE9                     	;# 
  2140  0FEA                     	;# 
  2141  0FEB                     	;# 
  2142  0FED                     	;# 
  2143  0FEE                     	;# 
  2144  0FEF                     	;# 
  2145  0000                     	;# 
  2146  0001                     	;# 
  2147  0002                     	;# 
  2148  0003                     	;# 
  2149  0004                     	;# 
  2150  0005                     	;# 
  2151  0006                     	;# 
  2152  0007                     	;# 
  2153  0008                     	;# 
  2154  0009                     	;# 
  2155  000A                     	;# 
  2156  000B                     	;# 
  2157  000C                     	;# 
  2158  000E                     	;# 
  2159  0011                     	;# 
  2160  0012                     	;# 
  2161  0013                     	;# 
  2162  0015                     	;# 
  2163  0016                     	;# 
  2164  0016                     	;# 
  2165  0017                     	;# 
  2166  0018                     	;# 
  2167  0019                     	;# 
  2168  001A                     	;# 
  2169  001B                     	;# 
  2170  001C                     	;# 
  2171  001E                     	;# 
  2172  001F                     	;# 
  2173  008C                     	;# 
  2174  008E                     	;# 
  2175  0091                     	;# 
  2176  0092                     	;# 
  2177  0093                     	;# 
  2178  0095                     	;# 
  2179  0096                     	;# 
  2180  0097                     	;# 
  2181  0098                     	;# 
  2182  0099                     	;# 
  2183  009A                     	;# 
  2184  009B                     	;# 
  2185  009B                     	;# 
  2186  009C                     	;# 
  2187  009D                     	;# 
  2188  009E                     	;# 
  2189  010C                     	;# 
  2190  010E                     	;# 
  2191  0111                     	;# 
  2192  0112                     	;# 
  2193  0113                     	;# 
  2194  0114                     	;# 
  2195  0115                     	;# 
  2196  0116                     	;# 
  2197  0117                     	;# 
  2198  0118                     	;# 
  2199  0119                     	;# 
  2200  011A                     	;# 
  2201  011B                     	;# 
  2202  011D                     	;# 
  2203  011E                     	;# 
  2204  018C                     	;# 
  2205  018E                     	;# 
  2206  0191                     	;# 
  2207  0191                     	;# 
  2208  0192                     	;# 
  2209  0193                     	;# 
  2210  0193                     	;# 
  2211  0193                     	;# 
  2212  0194                     	;# 
  2213  0195                     	;# 
  2214  0196                     	;# 
  2215  0199                     	;# 
  2216  019A                     	;# 
  2217  019B                     	;# 
  2218  019B                     	;# 
  2219  019C                     	;# 
  2220  019D                     	;# 
  2221  019E                     	;# 
  2222  019F                     	;# 
  2223  020C                     	;# 
  2224  020E                     	;# 
  2225  0211                     	;# 
  2226  0211                     	;# 
  2227  0212                     	;# 
  2228  0212                     	;# 
  2229  0213                     	;# 
  2230  0213                     	;# 
  2231  0214                     	;# 
  2232  0214                     	;# 
  2233  0215                     	;# 
  2234  0215                     	;# 
  2235  0215                     	;# 
  2236  0216                     	;# 
  2237  0216                     	;# 
  2238  0217                     	;# 
  2239  0217                     	;# 
  2240  0291                     	;# 
  2241  0291                     	;# 
  2242  0292                     	;# 
  2243  0293                     	;# 
  2244  0294                     	;# 
  2245  0295                     	;# 
  2246  0295                     	;# 
  2247  0296                     	;# 
  2248  0298                     	;# 
  2249  0298                     	;# 
  2250  0299                     	;# 
  2251  029A                     	;# 
  2252  029B                     	;# 
  2253  029C                     	;# 
  2254  029D                     	;# 
  2255  029E                     	;# 
  2256  0311                     	;# 
  2257  0311                     	;# 
  2258  0312                     	;# 
  2259  0313                     	;# 
  2260  0318                     	;# 
  2261  0318                     	;# 
  2262  0319                     	;# 
  2263  031A                     	;# 
  2264  038C                     	;# 
  2265  038E                     	;# 
  2266  0391                     	;# 
  2267  0392                     	;# 
  2268  0393                     	;# 
  2269  039A                     	;# 
  2270  039C                     	;# 
  2271  039D                     	;# 
  2272  039E                     	;# 
  2273  039F                     	;# 
  2274  0415                     	;# 
  2275  0416                     	;# 
  2276  0417                     	;# 
  2277  041C                     	;# 
  2278  041D                     	;# 
  2279  041E                     	;# 
  2280  0FE4                     	;# 
  2281  0FE5                     	;# 
  2282  0FE6                     	;# 
  2283  0FE7                     	;# 
  2284  0FE8                     	;# 
  2285  0FE9                     	;# 
  2286  0FEA                     	;# 
  2287  0FEB                     	;# 
  2288  0FED                     	;# 
  2289  0FEE                     	;# 
  2290  0FEF                     	;# 
  2291  0000                     	;# 
  2292  0001                     	;# 
  2293  0002                     	;# 
  2294  0003                     	;# 
  2295  0004                     	;# 
  2296  0005                     	;# 
  2297  0006                     	;# 
  2298  0007                     	;# 
  2299  0008                     	;# 
  2300  0009                     	;# 
  2301  000A                     	;# 
  2302  000B                     	;# 
  2303  000C                     	;# 
  2304  000E                     	;# 
  2305  0011                     	;# 
  2306  0012                     	;# 
  2307  0013                     	;# 
  2308  0015                     	;# 
  2309  0016                     	;# 
  2310  0016                     	;# 
  2311  0017                     	;# 
  2312  0018                     	;# 
  2313  0019                     	;# 
  2314  001A                     	;# 
  2315  001B                     	;# 
  2316  001C                     	;# 
  2317  001E                     	;# 
  2318  001F                     	;# 
  2319  008C                     	;# 
  2320  008E                     	;# 
  2321  0091                     	;# 
  2322  0092                     	;# 
  2323  0093                     	;# 
  2324  0095                     	;# 
  2325  0096                     	;# 
  2326  0097                     	;# 
  2327  0098                     	;# 
  2328  0099                     	;# 
  2329  009A                     	;# 
  2330  009B                     	;# 
  2331  009B                     	;# 
  2332  009C                     	;# 
  2333  009D                     	;# 
  2334  009E                     	;# 
  2335  010C                     	;# 
  2336  010E                     	;# 
  2337  0111                     	;# 
  2338  0112                     	;# 
  2339  0113                     	;# 
  2340  0114                     	;# 
  2341  0115                     	;# 
  2342  0116                     	;# 
  2343  0117                     	;# 
  2344  0118                     	;# 
  2345  0119                     	;# 
  2346  011A                     	;# 
  2347  011B                     	;# 
  2348  011D                     	;# 
  2349  011E                     	;# 
  2350  018C                     	;# 
  2351  018E                     	;# 
  2352  0191                     	;# 
  2353  0191                     	;# 
  2354  0192                     	;# 
  2355  0193                     	;# 
  2356  0193                     	;# 
  2357  0193                     	;# 
  2358  0194                     	;# 
  2359  0195                     	;# 
  2360  0196                     	;# 
  2361  0199                     	;# 
  2362  019A                     	;# 
  2363  019B                     	;# 
  2364  019B                     	;# 
  2365  019C                     	;# 
  2366  019D                     	;# 
  2367  019E                     	;# 
  2368  019F                     	;# 
  2369  020C                     	;# 
  2370  020E                     	;# 
  2371  0211                     	;# 
  2372  0211                     	;# 
  2373  0212                     	;# 
  2374  0212                     	;# 
  2375  0213                     	;# 
  2376  0213                     	;# 
  2377  0214                     	;# 
  2378  0214                     	;# 
  2379  0215                     	;# 
  2380  0215                     	;# 
  2381  0215                     	;# 
  2382  0216                     	;# 
  2383  0216                     	;# 
  2384  0217                     	;# 
  2385  0217                     	;# 
  2386  0291                     	;# 
  2387  0291                     	;# 
  2388  0292                     	;# 
  2389  0293                     	;# 
  2390  0294                     	;# 
  2391  0295                     	;# 
  2392  0295                     	;# 
  2393  0296                     	;# 
  2394  0298                     	;# 
  2395  0298                     	;# 
  2396  0299                     	;# 
  2397  029A                     	;# 
  2398  029B                     	;# 
  2399  029C                     	;# 
  2400  029D                     	;# 
  2401  029E                     	;# 
  2402  0311                     	;# 
  2403  0311                     	;# 
  2404  0312                     	;# 
  2405  0313                     	;# 
  2406  0318                     	;# 
  2407  0318                     	;# 
  2408  0319                     	;# 
  2409  031A                     	;# 
  2410  038C                     	;# 
  2411  038E                     	;# 
  2412  0391                     	;# 
  2413  0392                     	;# 
  2414  0393                     	;# 
  2415  039A                     	;# 
  2416  039C                     	;# 
  2417  039D                     	;# 
  2418  039E                     	;# 
  2419  039F                     	;# 
  2420  0415                     	;# 
  2421  0416                     	;# 
  2422  0417                     	;# 
  2423  041C                     	;# 
  2424  041D                     	;# 
  2425  041E                     	;# 
  2426  0FE4                     	;# 
  2427  0FE5                     	;# 
  2428  0FE6                     	;# 
  2429  0FE7                     	;# 
  2430  0FE8                     	;# 
  2431  0FE9                     	;# 
  2432  0FEA                     	;# 
  2433  0FEB                     	;# 
  2434  0FED                     	;# 
  2435  0FEE                     	;# 
  2436  0FEF                     	;# 
  2437  0000                     	;# 
  2438  0001                     	;# 
  2439  0002                     	;# 
  2440  0003                     	;# 
  2441  0004                     	;# 
  2442  0005                     	;# 
  2443  0006                     	;# 
  2444  0007                     	;# 
  2445  0008                     	;# 
  2446  0009                     	;# 
  2447  000A                     	;# 
  2448  000B                     	;# 
  2449  000C                     	;# 
  2450  000E                     	;# 
  2451  0011                     	;# 
  2452  0012                     	;# 
  2453  0013                     	;# 
  2454  0015                     	;# 
  2455  0016                     	;# 
  2456  0016                     	;# 
  2457  0017                     	;# 
  2458  0018                     	;# 
  2459  0019                     	;# 
  2460  001A                     	;# 
  2461  001B                     	;# 
  2462  001C                     	;# 
  2463  001E                     	;# 
  2464  001F                     	;# 
  2465  008C                     	;# 
  2466  008E                     	;# 
  2467  0091                     	;# 
  2468  0092                     	;# 
  2469  0093                     	;# 
  2470  0095                     	;# 
  2471  0096                     	;# 
  2472  0097                     	;# 
  2473  0098                     	;# 
  2474  0099                     	;# 
  2475  009A                     	;# 
  2476  009B                     	;# 
  2477  009B                     	;# 
  2478  009C                     	;# 
  2479  009D                     	;# 
  2480  009E                     	;# 
  2481  010C                     	;# 
  2482  010E                     	;# 
  2483  0111                     	;# 
  2484  0112                     	;# 
  2485  0113                     	;# 
  2486  0114                     	;# 
  2487  0115                     	;# 
  2488  0116                     	;# 
  2489  0117                     	;# 
  2490  0118                     	;# 
  2491  0119                     	;# 
  2492  011A                     	;# 
  2493  011B                     	;# 
  2494  011D                     	;# 
  2495  011E                     	;# 
  2496  018C                     	;# 
  2497  018E                     	;# 
  2498  0191                     	;# 
  2499  0191                     	;# 
  2500  0192                     	;# 
  2501  0193                     	;# 
  2502  0193                     	;# 
  2503  0193                     	;# 
  2504  0194                     	;# 
  2505  0195                     	;# 
  2506  0196                     	;# 
  2507  0199                     	;# 
  2508  019A                     	;# 
  2509  019B                     	;# 
  2510  019B                     	;# 
  2511  019C                     	;# 
  2512  019D                     	;# 
  2513  019E                     	;# 
  2514  019F                     	;# 
  2515  020C                     	;# 
  2516  020E                     	;# 
  2517  0211                     	;# 
  2518  0211                     	;# 
  2519  0212                     	;# 
  2520  0212                     	;# 
  2521  0213                     	;# 
  2522  0213                     	;# 
  2523  0214                     	;# 
  2524  0214                     	;# 
  2525  0215                     	;# 
  2526  0215                     	;# 
  2527  0215                     	;# 
  2528  0216                     	;# 
  2529  0216                     	;# 
  2530  0217                     	;# 
  2531  0217                     	;# 
  2532  0291                     	;# 
  2533  0291                     	;# 
  2534  0292                     	;# 
  2535  0293                     	;# 
  2536  0294                     	;# 
  2537  0295                     	;# 
  2538  0295                     	;# 
  2539  0296                     	;# 
  2540  0298                     	;# 
  2541  0298                     	;# 
  2542  0299                     	;# 
  2543  029A                     	;# 
  2544  029B                     	;# 
  2545  029C                     	;# 
  2546  029D                     	;# 
  2547  029E                     	;# 
  2548  0311                     	;# 
  2549  0311                     	;# 
  2550  0312                     	;# 
  2551  0313                     	;# 
  2552  0318                     	;# 
  2553  0318                     	;# 
  2554  0319                     	;# 
  2555  031A                     	;# 
  2556  038C                     	;# 
  2557  038E                     	;# 
  2558  0391                     	;# 
  2559  0392                     	;# 
  2560  0393                     	;# 
  2561  039A                     	;# 
  2562  039C                     	;# 
  2563  039D                     	;# 
  2564  039E                     	;# 
  2565  039F                     	;# 
  2566  0415                     	;# 
  2567  0416                     	;# 
  2568  0417                     	;# 
  2569  041C                     	;# 
  2570  041D                     	;# 
  2571  041E                     	;# 
  2572  0FE4                     	;# 
  2573  0FE5                     	;# 
  2574  0FE6                     	;# 
  2575  0FE7                     	;# 
  2576  0FE8                     	;# 
  2577  0FE9                     	;# 
  2578  0FEA                     	;# 
  2579  0FEB                     	;# 
  2580  0FED                     	;# 
  2581  0FEE                     	;# 
  2582  0FEF                     	;# 
  2583  0000                     	;# 
  2584  0001                     	;# 
  2585  0002                     	;# 
  2586  0003                     	;# 
  2587  0004                     	;# 
  2588  0005                     	;# 
  2589  0006                     	;# 
  2590  0007                     	;# 
  2591  0008                     	;# 
  2592  0009                     	;# 
  2593  000A                     	;# 
  2594  000B                     	;# 
  2595  000C                     	;# 
  2596  000E                     	;# 
  2597  0011                     	;# 
  2598  0012                     	;# 
  2599  0013                     	;# 
  2600  0015                     	;# 
  2601  0016                     	;# 
  2602  0016                     	;# 
  2603  0017                     	;# 
  2604  0018                     	;# 
  2605  0019                     	;# 
  2606  001A                     	;# 
  2607  001B                     	;# 
  2608  001C                     	;# 
  2609  001E                     	;# 
  2610  001F                     	;# 
  2611  008C                     	;# 
  2612  008E                     	;# 
  2613  0091                     	;# 
  2614  0092                     	;# 
  2615  0093                     	;# 
  2616  0095                     	;# 
  2617  0096                     	;# 
  2618  0097                     	;# 
  2619  0098                     	;# 
  2620  0099                     	;# 
  2621  009A                     	;# 
  2622  009B                     	;# 
  2623  009B                     	;# 
  2624  009C                     	;# 
  2625  009D                     	;# 
  2626  009E                     	;# 
  2627  010C                     	;# 
  2628  010E                     	;# 
  2629  0111                     	;# 
  2630  0112                     	;# 
  2631  0113                     	;# 
  2632  0114                     	;# 
  2633  0115                     	;# 
  2634  0116                     	;# 
  2635  0117                     	;# 
  2636  0118                     	;# 
  2637  0119                     	;# 
  2638  011A                     	;# 
  2639  011B                     	;# 
  2640  011D                     	;# 
  2641  011E                     	;# 
  2642  018C                     	;# 
  2643  018E                     	;# 
  2644  0191                     	;# 
  2645  0191                     	;# 
  2646  0192                     	;# 
  2647  0193                     	;# 
  2648  0193                     	;# 
  2649  0193                     	;# 
  2650  0194                     	;# 
  2651  0195                     	;# 
  2652  0196                     	;# 
  2653  0199                     	;# 
  2654  019A                     	;# 
  2655  019B                     	;# 
  2656  019B                     	;# 
  2657  019C                     	;# 
  2658  019D                     	;# 
  2659  019E                     	;# 
  2660  019F                     	;# 
  2661  020C                     	;# 
  2662  020E                     	;# 
  2663  0211                     	;# 
  2664  0211                     	;# 
  2665  0212                     	;# 
  2666  0212                     	;# 
  2667  0213                     	;# 
  2668  0213                     	;# 
  2669  0214                     	;# 
  2670  0214                     	;# 
  2671  0215                     	;# 
  2672  0215                     	;# 
  2673  0215                     	;# 
  2674  0216                     	;# 
  2675  0216                     	;# 
  2676  0217                     	;# 
  2677  0217                     	;# 
  2678  0291                     	;# 
  2679  0291                     	;# 
  2680  0292                     	;# 
  2681  0293                     	;# 
  2682  0294                     	;# 
  2683  0295                     	;# 
  2684  0295                     	;# 
  2685  0296                     	;# 
  2686  0298                     	;# 
  2687  0298                     	;# 
  2688  0299                     	;# 
  2689  029A                     	;# 
  2690  029B                     	;# 
  2691  029C                     	;# 
  2692  029D                     	;# 
  2693  029E                     	;# 
  2694  0311                     	;# 
  2695  0311                     	;# 
  2696  0312                     	;# 
  2697  0313                     	;# 
  2698  0318                     	;# 
  2699  0318                     	;# 
  2700  0319                     	;# 
  2701  031A                     	;# 
  2702  038C                     	;# 
  2703  038E                     	;# 
  2704  0391                     	;# 
  2705  0392                     	;# 
  2706  0393                     	;# 
  2707  039A                     	;# 
  2708  039C                     	;# 
  2709  039D                     	;# 
  2710  039E                     	;# 
  2711  039F                     	;# 
  2712  0415                     	;# 
  2713  0416                     	;# 
  2714  0417                     	;# 
  2715  041C                     	;# 
  2716  041D                     	;# 
  2717  041E                     	;# 
  2718  0FE4                     	;# 
  2719  0FE5                     	;# 
  2720  0FE6                     	;# 
  2721  0FE7                     	;# 
  2722  0FE8                     	;# 
  2723  0FE9                     	;# 
  2724  0FEA                     	;# 
  2725  0FEB                     	;# 
  2726  0FED                     	;# 
  2727  0FEE                     	;# 
  2728  0FEF                     	;# 
  2729  0000                     	;# 
  2730  0001                     	;# 
  2731  0002                     	;# 
  2732  0003                     	;# 
  2733  0004                     	;# 
  2734  0005                     	;# 
  2735  0006                     	;# 
  2736  0007                     	;# 
  2737  0008                     	;# 
  2738  0009                     	;# 
  2739  000A                     	;# 
  2740  000B                     	;# 
  2741  000C                     	;# 
  2742  000E                     	;# 
  2743  0011                     	;# 
  2744  0012                     	;# 
  2745  0013                     	;# 
  2746  0015                     	;# 
  2747  0016                     	;# 
  2748  0016                     	;# 
  2749  0017                     	;# 
  2750  0018                     	;# 
  2751  0019                     	;# 
  2752  001A                     	;# 
  2753  001B                     	;# 
  2754  001C                     	;# 
  2755  001E                     	;# 
  2756  001F                     	;# 
  2757  008C                     	;# 
  2758  008E                     	;# 
  2759  0091                     	;# 
  2760  0092                     	;# 
  2761  0093                     	;# 
  2762  0095                     	;# 
  2763  0096                     	;# 
  2764  0097                     	;# 
  2765  0098                     	;# 
  2766  0099                     	;# 
  2767  009A                     	;# 
  2768  009B                     	;# 
  2769  009B                     	;# 
  2770  009C                     	;# 
  2771  009D                     	;# 
  2772  009E                     	;# 
  2773  010C                     	;# 
  2774  010E                     	;# 
  2775  0111                     	;# 
  2776  0112                     	;# 
  2777  0113                     	;# 
  2778  0114                     	;# 
  2779  0115                     	;# 
  2780  0116                     	;# 
  2781  0117                     	;# 
  2782  0118                     	;# 
  2783  0119                     	;# 
  2784  011A                     	;# 
  2785  011B                     	;# 
  2786  011D                     	;# 
  2787  011E                     	;# 
  2788  018C                     	;# 
  2789  018E                     	;# 
  2790  0191                     	;# 
  2791  0191                     	;# 
  2792  0192                     	;# 
  2793  0193                     	;# 
  2794  0193                     	;# 
  2795  0193                     	;# 
  2796  0194                     	;# 
  2797  0195                     	;# 
  2798  0196                     	;# 
  2799  0199                     	;# 
  2800  019A                     	;# 
  2801  019B                     	;# 
  2802  019B                     	;# 
  2803  019C                     	;# 
  2804  019D                     	;# 
  2805  019E                     	;# 
  2806  019F                     	;# 
  2807  020C                     	;# 
  2808  020E                     	;# 
  2809  0211                     	;# 
  2810  0211                     	;# 
  2811  0212                     	;# 
  2812  0212                     	;# 
  2813  0213                     	;# 
  2814  0213                     	;# 
  2815  0214                     	;# 
  2816  0214                     	;# 
  2817  0215                     	;# 
  2818  0215                     	;# 
  2819  0215                     	;# 
  2820  0216                     	;# 
  2821  0216                     	;# 
  2822  0217                     	;# 
  2823  0217                     	;# 
  2824  0291                     	;# 
  2825  0291                     	;# 
  2826  0292                     	;# 
  2827  0293                     	;# 
  2828  0294                     	;# 
  2829  0295                     	;# 
  2830  0295                     	;# 
  2831  0296                     	;# 
  2832  0298                     	;# 
  2833  0298                     	;# 
  2834  0299                     	;# 
  2835  029A                     	;# 
  2836  029B                     	;# 
  2837  029C                     	;# 
  2838  029D                     	;# 
  2839  029E                     	;# 
  2840  0311                     	;# 
  2841  0311                     	;# 
  2842  0312                     	;# 
  2843  0313                     	;# 
  2844  0318                     	;# 
  2845  0318                     	;# 
  2846  0319                     	;# 
  2847  031A                     	;# 
  2848  038C                     	;# 
  2849  038E                     	;# 
  2850  0391                     	;# 
  2851  0392                     	;# 
  2852  0393                     	;# 
  2853  039A                     	;# 
  2854  039C                     	;# 
  2855  039D                     	;# 
  2856  039E                     	;# 
  2857  039F                     	;# 
  2858  0415                     	;# 
  2859  0416                     	;# 
  2860  0417                     	;# 
  2861  041C                     	;# 
  2862  041D                     	;# 
  2863  041E                     	;# 
  2864  0FE4                     	;# 
  2865  0FE5                     	;# 
  2866  0FE6                     	;# 
  2867  0FE7                     	;# 
  2868  0FE8                     	;# 
  2869  0FE9                     	;# 
  2870  0FEA                     	;# 
  2871  0FEB                     	;# 
  2872  0FED                     	;# 
  2873  0FEE                     	;# 
  2874  0FEF                     	;# 
  2875  0000                     	;# 
  2876  0001                     	;# 
  2877  0002                     	;# 
  2878  0003                     	;# 
  2879  0004                     	;# 
  2880  0005                     	;# 
  2881  0006                     	;# 
  2882  0007                     	;# 
  2883  0008                     	;# 
  2884  0009                     	;# 
  2885  000A                     	;# 
  2886  000B                     	;# 
  2887  000C                     	;# 
  2888  000E                     	;# 
  2889  0011                     	;# 
  2890  0012                     	;# 
  2891  0013                     	;# 
  2892  0015                     	;# 
  2893  0016                     	;# 
  2894  0016                     	;# 
  2895  0017                     	;# 
  2896  0018                     	;# 
  2897  0019                     	;# 
  2898  001A                     	;# 
  2899  001B                     	;# 
  2900  001C                     	;# 
  2901  001E                     	;# 
  2902  001F                     	;# 
  2903  008C                     	;# 
  2904  008E                     	;# 
  2905  0091                     	;# 
  2906  0092                     	;# 
  2907  0093                     	;# 
  2908  0095                     	;# 
  2909  0096                     	;# 
  2910  0097                     	;# 
  2911  0098                     	;# 
  2912  0099                     	;# 
  2913  009A                     	;# 
  2914  009B                     	;# 
  2915  009B                     	;# 
  2916  009C                     	;# 
  2917  009D                     	;# 
  2918  009E                     	;# 
  2919  010C                     	;# 
  2920  010E                     	;# 
  2921  0111                     	;# 
  2922  0112                     	;# 
  2923  0113                     	;# 
  2924  0114                     	;# 
  2925  0115                     	;# 
  2926  0116                     	;# 
  2927  0117                     	;# 
  2928  0118                     	;# 
  2929  0119                     	;# 
  2930  011A                     	;# 
  2931  011B                     	;# 
  2932  011D                     	;# 
  2933  011E                     	;# 
  2934  018C                     	;# 
  2935  018E                     	;# 
  2936  0191                     	;# 
  2937  0191                     	;# 
  2938  0192                     	;# 
  2939  0193                     	;# 
  2940  0193                     	;# 
  2941  0193                     	;# 
  2942  0194                     	;# 
  2943  0195                     	;# 
  2944  0196                     	;# 
  2945  0199                     	;# 
  2946  019A                     	;# 
  2947  019B                     	;# 
  2948  019B                     	;# 
  2949  019C                     	;# 
  2950  019D                     	;# 
  2951  019E                     	;# 
  2952  019F                     	;# 
  2953  020C                     	;# 
  2954  020E                     	;# 
  2955  0211                     	;# 
  2956  0211                     	;# 
  2957  0212                     	;# 
  2958  0212                     	;# 
  2959  0213                     	;# 
  2960  0213                     	;# 
  2961  0214                     	;# 
  2962  0214                     	;# 
  2963  0215                     	;# 
  2964  0215                     	;# 
  2965  0215                     	;# 
  2966  0216                     	;# 
  2967  0216                     	;# 
  2968  0217                     	;# 
  2969  0217                     	;# 
  2970  0291                     	;# 
  2971  0291                     	;# 
  2972  0292                     	;# 
  2973  0293                     	;# 
  2974  0294                     	;# 
  2975  0295                     	;# 
  2976  0295                     	;# 
  2977  0296                     	;# 
  2978  0298                     	;# 
  2979  0298                     	;# 
  2980  0299                     	;# 
  2981  029A                     	;# 
  2982  029B                     	;# 
  2983  029C                     	;# 
  2984  029D                     	;# 
  2985  029E                     	;# 
  2986  0311                     	;# 
  2987  0311                     	;# 
  2988  0312                     	;# 
  2989  0313                     	;# 
  2990  0318                     	;# 
  2991  0318                     	;# 
  2992  0319                     	;# 
  2993  031A                     	;# 
  2994  038C                     	;# 
  2995  038E                     	;# 
  2996  0391                     	;# 
  2997  0392                     	;# 
  2998  0393                     	;# 
  2999  039A                     	;# 
  3000  039C                     	;# 
  3001  039D                     	;# 
  3002  039E                     	;# 
  3003  039F                     	;# 
  3004  0415                     	;# 
  3005  0416                     	;# 
  3006  0417                     	;# 
  3007  041C                     	;# 
  3008  041D                     	;# 
  3009  041E                     	;# 
  3010  0FE4                     	;# 
  3011  0FE5                     	;# 
  3012  0FE6                     	;# 
  3013  0FE7                     	;# 
  3014  0FE8                     	;# 
  3015  0FE9                     	;# 
  3016  0FEA                     	;# 
  3017  0FEB                     	;# 
  3018  0FED                     	;# 
  3019  0FEE                     	;# 
  3020  0FEF                     	;_I2cPacket
  3021                           
  3022                           	psect	idataCOMMON
  3023  0002                     __pidataCOMMON:	
  3024                           
  3025                           ;initializer for Led_InitSeq@LedInitSts
  3026  0002  3401               	retlw	1
  3027                           
  3028                           ;initializer for _LedBehaviourSts
  3029  0003  3401               	retlw	1
  3030                           
  3031                           	psect	idataBANK0
  3032  099D                     __pidataBANK0:	
  3033                           
  3034                           ;initializer for _MainSystemTimebaseFlag
  3035  099D  3401               	retlw	1
  3036                           
  3037                           ;initializer for _IrSens1Str
  3038  099E  3430               	retlw	48
  3039                           
  3040                           ;initializer for _IrSens2Str
  3041  099F  3430               	retlw	48
  3042                           
  3043                           	psect	idataBANK2
  3044  0C09                     __pidataBANK2:	
  3045                           
  3046                           ;initializer for _TaskTable
  3047  0C09  34A2               	retlw	low _I2c_DataReceiveSm
  3048  0C0A  3400               	retlw	high _I2c_DataReceiveSm
  3049  0C0B  3400               	retlw	0
  3050  0C0C  3400               	retlw	0
  3051  0C0D  3400               	retlw	0
  3052  0C0E  3401               	retlw	1
  3053  0C0F  3400               	retlw	0
  3054  0C10  3400               	retlw	0
  3055  0C11  34DA               	retlw	low _I2cSlv_MainTask
  3056  0C12  340A               	retlw	high _I2cSlv_MainTask
  3057  0C13  3400               	retlw	0
  3058  0C14  3400               	retlw	0
  3059  0C15  3400               	retlw	0
  3060  0C16  3401               	retlw	1
  3061  0C17  3400               	retlw	0
  3062  0C18  3400               	retlw	0
  3063  0C19  34EF               	retlw	low _Wdg_MainTask
  3064  0C1A  340A               	retlw	high _Wdg_MainTask
  3065  0C1B  3400               	retlw	0
  3066  0C1C  3400               	retlw	0
  3067  0C1D  3400               	retlw	0
  3068  0C1E  34E8               	retlw	232
  3069  0C1F  3403               	retlw	3
  3070  0C20  3400               	retlw	0
  3071  0C21  3442               	retlw	low _Led_MainTask
  3072  0C22  340D               	retlw	high _Led_MainTask
  3073  0C23  3400               	retlw	0
  3074  0C24  3400               	retlw	0
  3075  0C25  3400               	retlw	0
  3076  0C26  3464               	retlw	100
  3077  0C27  3400               	retlw	0
  3078  0C28  3400               	retlw	0
  3079  0C29  341C               	retlw	low _App_MainTask
  3080  0C2A  3407               	retlw	high _App_MainTask
  3081  0C2B  3400               	retlw	0
  3082  0C2C  3400               	retlw	0
  3083  0C2D  3400               	retlw	0
  3084  0C2E  3464               	retlw	100
  3085  0C2F  3400               	retlw	0
  3086  0C30  3400               	retlw	0
  3087                           
  3088                           	psect	stringtext
  3089  1000                     __pstringtext:	
  3090  1000                     _dpowers:	
  3091  1000  3401               	retlw	1
  3092  1001  3400               	retlw	0
  3093  1002  340A               	retlw	10
  3094  1003  3400               	retlw	0
  3095  1004  3464               	retlw	100
  3096  1005  3400               	retlw	0
  3097  1006  34E8               	retlw	232
  3098  1007  3403               	retlw	3
  3099  1008  3410               	retlw	16
  3100  1009  3427               	retlw	39
  3101  100A                     __end_of_dpowers:	
  3102  100A                     _TaskNumber:	
  3103  100A  3405               	retlw	5
  3104  100B  3400               	retlw	0
  3105  100C                     __end_of_TaskNumber:	
  3106  000B                     _INTCONbits	set	11
  3107  0011                     _PIR1bits	set	17
  3108  0013                     _PIR3bits	set	19
  3109  000C                     _PORTAbits	set	12
  3110  000E                     _PORTCbits	set	14
  3111  001B                     _PR2	set	27
  3112  001C                     _T2CONbits	set	28
  3113  009D                     _ADCON0bits	set	157
  3114  009E                     _ADCON1bits	set	158
  3115  009C                     _ADRESH	set	156
  3116  009B                     _ADRESL	set	155
  3117  0095                     _OPTION_REGbits	set	149
  3118  0099                     _OSCCONbits	set	153
  3119  009A                     _OSCSTATbits	set	154
  3120  0091                     _PIE1bits	set	145
  3121  0093                     _PIE3bits	set	147
  3122  008C                     _TRISAbits	set	140
  3123  008E                     _TRISCbits	set	142
  3124  0097                     _WDTCONbits	set	151
  3125  0117                     _FVRCONbits	set	279
  3126  010C                     _LATA	set	268
  3127  010C                     _LATAbits	set	268
  3128  010E                     _LATC	set	270
  3129  018C                     _ANSELA	set	396
  3130  018C                     _ANSELAbits	set	396
  3131  018E                     _ANSELC	set	398
  3132  018E                     _ANSELCbits	set	398
  3133  0212                     _SSP1ADD	set	530
  3134  0211                     _SSP1BUF	set	529
  3135  0215                     _SSP1CON1	set	533
  3136  0215                     _SSP1CON1bits	set	533
  3137  0216                     _SSP1CON2	set	534
  3138  0217                     _SSP1CON3	set	535
  3139  0213                     _SSP1MSK	set	531
  3140  0214                     _SSP1STAT	set	532
  3141  020C                     _WPUA	set	524
  3142  020C                     _WPUAbits	set	524
  3143  020E                     _WPUC	set	526
  3144  020E                     _WPUCbits	set	526
  3145  0416                     _PR4	set	1046
  3146  041D                     _PR6	set	1053
  3147  0417                     _T4CONbits	set	1047
  3148  041E                     _T6CONbits	set	1054
  3149  100C                     STR_4:	
  3150  100C  3430               	retlw	48	;'0'
  3151  100D  3431               	retlw	49	;'1'
  3152  100E  342E               	retlw	46	;'.'
  3153  100F  3430               	retlw	48	;'0'
  3154  1010  3431               	retlw	49	;'1'
  3155  1011  342E               	retlw	46	;'.'
  3156  1012  3430               	retlw	48	;'0'
  3157  1013  3430               	retlw	48	;'0'
  3158  1014  3400               	retlw	0
  3159  1015                     STR_5:	
  3160  1015  3430               	retlw	48	;'0'
  3161  1016  3431               	retlw	49	;'1'
  3162  1017  342E               	retlw	46	;'.'
  3163  1018  3430               	retlw	48	;'0'
  3164  1019  3432               	retlw	50	;'2'
  3165  101A  342E               	retlw	46	;'.'
  3166  101B  3430               	retlw	48	;'0'
  3167  101C  3430               	retlw	48	;'0'
  3168  101D  3400               	retlw	0
  3169  101E                     STR_1:	
  3170  101E  3425               	retlw	37	;'%'
  3171  101F  3464               	retlw	100	;'d'
  3172  1020  342E               	retlw	46	;'.'
  3173  1021  3425               	retlw	37	;'%'
  3174  1022  3430               	retlw	48	;'0'
  3175  1023  3431               	retlw	49	;'1'
  3176  1024  3475               	retlw	117	;'u'
  3177  1025  3400               	retlw	0
  3178  1026                     STR_3:	
  3179  1026  3453               	retlw	83	;'S'
  3180  1027  3442               	retlw	66	;'B'
  3181  1028  3433               	retlw	51	;'3'
  3182  1029  3432               	retlw	50	;'2'
  3183  102A  3430               	retlw	48	;'0'
  3184  102B  3400               	retlw	0
  3185  102C                     STR_2:	
  3186  102C  3445               	retlw	69	;'E'
  3187  102D  3443               	retlw	67	;'C'
  3188  102E  3448               	retlw	72	;'H'
  3189  102F  344F               	retlw	79	;'O'
  3190  1030  3400               	retlw	0
  3191                           
  3192                           ; #config settings
  3193  0000                     
  3194                           	psect	cinit
  3195  002E                     start_initialization:	
  3196  002E                     __initialization:		;BIGRAM
  3197                           
  3198                           ; Initialize objects allocated to COMMON
  3199  002E  3180  2002  3180   	fcall	__pidataCOMMON	;fetch initializer
  3200  0031  00F8               	movwf	__pdataCOMMON& (0+127)
  3201  0032  3180  2003  3180   	fcall	__pidataCOMMON+1	;fetch initializer
  3202  0035  00F9               	movwf	(__pdataCOMMON+1)& (0+127)
  3203                           
  3204                           ; Initialize objects allocated to BANK0
  3205  0036  3189  219D  3180   	fcall	__pidataBANK0	;fetch initializer
  3206  0039  00EB               	movwf	__pdataBANK0& (0+127)
  3207  003A  3189  219E  3180   	fcall	__pidataBANK0+1	;fetch initializer
  3208  003D  00EC               	movwf	(__pdataBANK0+1)& (0+127)
  3209  003E  3189  219F  3180   	fcall	__pidataBANK0+2	;fetch initializer
  3210  0041  00ED               	movwf	(__pdataBANK0+2)& (0+127)
  3211                           
  3212                           ; Initialize objects allocated to BANK2
  3213  0042  3009               	movlw	low __pidataBANK2
  3214  0043  0084               	movwf	4
  3215  0044  308C               	movlw	(high __pidataBANK2)| (0+128)
  3216  0045  0085               	movwf	5
  3217  0046  3020               	movlw	low __pdataBANK2
  3218  0047  0086               	movwf	6
  3219  0048  3001               	movlw	high __pdataBANK2
  3220  0049  0087               	movwf	7
  3221  004A  3000               	movlw	0
  3222  004B  00FF               	movwf	btemp+1
  3223  004C  3028               	movlw	40
  3224  004D  318A  223C  3180   	fcall	init_ram
  3225                           
  3226                           ; Clear objects allocated to BIGRAM
  3227  0050  309D               	movlw	low (0+9117)
  3228  0051  0084               	movwf	4
  3229  0052  3023               	movlw	high (0+9117)
  3230  0053  0085               	movwf	5
  3231  0054  3053               	movlw	83
  3232  0055  00FE               	movwf	btemp
  3233  0056  3000               	movlw	0
  3234  0057  00FF               	movwf	btemp+1
  3235  0058  318A  2230  3180   	fcall	clear_ram0
  3236                           
  3237                           ; Clear objects allocated to COMMON
  3238  005B  01F6               	clrf	__pbssCOMMON& (0+127)
  3239  005C  01F7               	clrf	(__pbssCOMMON+1)& (0+127)
  3240                           
  3241                           ; Clear objects allocated to BANK0
  3242  005D  3058               	movlw	low __pbssBANK0
  3243  005E  0084               	movwf	4
  3244  005F  3000               	movlw	high __pbssBANK0
  3245  0060  0085               	movwf	5
  3246  0061  3013               	movlw	19
  3247  0062  00FE               	movwf	btemp
  3248  0063  3000               	movlw	0
  3249  0064  00FF               	movwf	btemp+1
  3250  0065  318A  2230  3180   	fcall	clear_ram0
  3251                           
  3252                           ; Clear objects allocated to BANK1
  3253  0068  30A0               	movlw	low __pbssBANK1
  3254  0069  0084               	movwf	4
  3255  006A  3000               	movlw	high __pbssBANK1
  3256  006B  0085               	movwf	5
  3257  006C  3040               	movlw	64
  3258  006D  00FE               	movwf	btemp
  3259  006E  3000               	movlw	0
  3260  006F  00FF               	movwf	btemp+1
  3261  0070  318A  2230  3180   	fcall	clear_ram0
  3262                           
  3263                           ; Clear objects allocated to BANK3
  3264  0073  30A0               	movlw	low __pbssBANK3
  3265  0074  0084               	movwf	4
  3266  0075  3001               	movlw	high __pbssBANK3
  3267  0076  0085               	movwf	5
  3268  0077  3050               	movlw	80
  3269  0078  00FE               	movwf	btemp
  3270  0079  3000               	movlw	0
  3271  007A  00FF               	movwf	btemp+1
  3272  007B  318A  2230  3180   	fcall	clear_ram0
  3273                           
  3274                           ; Clear objects allocated to BANK4
  3275  007E  3020               	movlw	low __pbssBANK4
  3276  007F  0084               	movwf	4
  3277  0080  3002               	movlw	high __pbssBANK4
  3278  0081  0085               	movwf	5
  3279  0082  3050               	movlw	80
  3280  0083  00FE               	movwf	btemp
  3281  0084  3000               	movlw	0
  3282  0085  00FF               	movwf	btemp+1
  3283  0086  318A  2230  3180   	fcall	clear_ram0
  3284                           
  3285                           ; Clear objects allocated to BANK5
  3286  0089  30A0               	movlw	low __pbssBANK5
  3287  008A  0084               	movwf	4
  3288  008B  3002               	movlw	high __pbssBANK5
  3289  008C  0085               	movwf	5
  3290  008D  3050               	movlw	80
  3291  008E  00FE               	movwf	btemp
  3292  008F  3000               	movlw	0
  3293  0090  00FF               	movwf	btemp+1
  3294  0091  318A  2230  3180   	fcall	clear_ram0
  3295                           
  3296                           ; Clear objects allocated to BANK6
  3297  0094  3020               	movlw	low __pbssBANK6
  3298  0095  0084               	movwf	4
  3299  0096  3003               	movlw	high __pbssBANK6
  3300  0097  0085               	movwf	5
  3301  0098  3050               	movlw	80
  3302  0099  00FE               	movwf	btemp
  3303  009A  3000               	movlw	0
  3304  009B  00FF               	movwf	btemp+1
  3305  009C  318A  2230         	fcall	clear_ram0
  3306  009E                     end_of_initialization:	
  3307                           ;End of C runtime variable initialization code
  3308                           
  3309  009E                     __end_of__initialization:	
  3310  009E  107E               	bcf	int$flags,0	;clear compiler interrupt flag (level 1)
  3311  009F  0020               	movlb	0
  3312  00A0  3189  29B5         	ljmp	_main	;jump to C main() function
  3313                           
  3314                           	psect	bssCOMMON
  3315  0076                     __pbssCOMMON:	
  3316  0076                     _I2cSlaveAddress:	
  3317  0076                     	ds	1
  3318  0077                     _RepBufferLen:	
  3319  0077                     	ds	1
  3320                           
  3321                           	psect	dataCOMMON
  3322  0078                     __pdataCOMMON:	
  3323  0078                     Led_InitSeq@LedInitSts:	
  3324  0078                     	ds	1
  3325  0079                     _LedBehaviourSts:	
  3326  0079                     	ds	1
  3327                           
  3328                           	psect	bssBANK0
  3329  0058                     __pbssBANK0:	
  3330  0058                     AppSm@AppState:	
  3331  0058                     	ds	1
  3332  0059                     AppSm@WpuSetCounter:	
  3333  0059                     	ds	1
  3334  005A                     I2cSlv_I2cDrvHandle@I2cReceiveMsgState:	
  3335  005A                     	ds	1
  3336  005B                     I2c_DataReceiveSm@AddressStored:	
  3337  005B                     	ds	1
  3338  005C                     I2c_DataReceiveSm@ErrorCounter:	
  3339  005C                     	ds	1
  3340  005D                     I2c_DataReceiveSm@I2cRxAddress:	
  3341  005D                     	ds	1
  3342  005E                     I2c_DataReceiveSm@I2cRxFlag:	
  3343  005E                     	ds	1
  3344  005F                     I2c_DataReceiveSm@I2cRxState:	
  3345  005F                     	ds	1
  3346  0060                     I2c_DataReceiveSm@OpType:	
  3347  0060                     	ds	1
  3348  0061                     I2c_DataReceiveSm@RxCounter:	
  3349  0061                     	ds	1
  3350  0062                     I2c_DataReceiveSm@TxCounter:	
  3351  0062                     	ds	1
  3352  0063                     Led_InitSeq@Counter:	
  3353  0063                     	ds	1
  3354  0064                     Led_InitSeq@InitSeqState:	
  3355  0064                     	ds	1
  3356  0065                     _IrSens1:	
  3357  0065                     	ds	1
  3358  0066                     _IrSens2:	
  3359  0066                     	ds	1
  3360  0067                     _SystemState:	
  3361  0067                     	ds	1
  3362  0068                     _I2cReplyPacketReady:	
  3363  0068                     	ds	2
  3364  006A                     _Led1Sts:	
  3365  006A                     	ds	1
  3366                           
  3367                           	psect	dataBANK0
  3368  006B                     __pdataBANK0:	
  3369  006B                     _MainSystemTimebaseFlag:	
  3370  006B                     	ds	1
  3371  006C                     _IrSens1Str:	
  3372  006C                     	ds	1
  3373  006D                     _IrSens2Str:	
  3374  006D                     	ds	1
  3375                           
  3376                           	psect	bssBANK1
  3377  00A0                     __pbssBANK1:	
  3378  00A0                     App_MainTask@F3799:	
  3379  00A0                     	ds	12
  3380  00AC                     App_MainTask@F3813:	
  3381  00AC                     	ds	8
  3382  00B4                     Led_InitSeq@DelayCounter:	
  3383  00B4                     	ds	2
  3384  00B6                     _InterruptCounter:	
  3385  00B6                     	ds	2
  3386  00B8                     _Tmr2IsrCallback:	
  3387  00B8                     	ds	2
  3388  00BA                     _Tmr4IsrCallback:	
  3389  00BA                     	ds	2
  3390  00BC                     _Tmr6IsrCallback:	
  3391  00BC                     	ds	2
  3392  00BE                     _I2cConfig:	
  3393  00BE                     	ds	11
  3394  00C9                     _Led1Blink:	
  3395  00C9                     	ds	9
  3396  00D2                     _Led1Pulse:	
  3397  00D2                     	ds	6
  3398  00D8                     _I2cNewPacketNotification:	
  3399  00D8                     	ds	2
  3400  00DA                     _I2cNewTxNotification:	
  3401  00DA                     	ds	2
  3402  00DC                     _I2cSetAddress:	
  3403  00DC                     	ds	2
  3404  00DE                     _I2cWriteRequest:	
  3405  00DE                     	ds	2
  3406                           
  3407                           	psect	dataBANK2
  3408  0120                     __pdataBANK2:	
  3409  0120                     _TaskTable:	
  3410  0120                     	ds	40
  3411                           
  3412                           	psect	bssBANK3
  3413  01A0                     __pbssBANK3:	
  3414  01A0                     _RepBuffer:	
  3415  01A0                     	ds	80
  3416                           
  3417                           	psect	bssBANK4
  3418  0220                     __pbssBANK4:	
  3419  0220                     _CmdBuffer:	
  3420  0220                     	ds	80
  3421                           
  3422                           	psect	bssBANK5
  3423  02A0                     __pbssBANK5:	
  3424  02A0                     _I2cTxBuffer:	
  3425  02A0                     	ds	80
  3426                           
  3427                           	psect	bssBANK6
  3428  0320                     __pbssBANK6:	
  3429  0320                     _I2cRxBuffer:	
  3430  0320                     	ds	80
  3431                           
  3432                           	psect	inittext
  3433  0A3C                     init_ram:	
  3434  0A3C  00FE               	movwf	126
  3435  0A3D                     initloop:	
  3436  0A3D  0012               	moviw fsr0++
  3437  0A3E  001E               	movwi fsr1++
  3438  0A3F  3001               	movlw	1
  3439  0A40  02FE               	subwf	126,f
  3440  0A41  3000               	movlw	0
  3441  0A42  3BFF               	subwfb	127,f
  3442  0A43  087F               	movf	127,w
  3443  0A44  047E               	iorwf	126,w
  3444  0A45  1903               	btfsc	3,2
  3445  0A46  3400               	retlw	0
  3446  0A47  2A3D               	goto	initloop
  3447                           
  3448                           	psect	clrtext
  3449  0A30                     clear_ram0:	
  3450                           ;	Called with FSR0 containing the base address, and
  3451                           ;	btemp/btemp+1 has the size to clear
  3452                           
  3453  0A30  0064               	clrwdt	;clear the watchdog before getting into this loop
  3454  0A31                     clrloop0:	
  3455  0A31  0180               	clrf	0	;clear RAM location pointed to by FSR
  3456  0A32  3101               	addfsr 0,1
  3457  0A33  3001               	movlw	1
  3458  0A34  02FE               	subwf	126,f
  3459  0A35  3000               	movlw	0
  3460  0A36  3BFF               	subwfb	127,f
  3461  0A37  087F               	movf	127,w
  3462  0A38  047E               	iorwf	126,w
  3463  0A39  1903               	btfsc	3,2
  3464  0A3A  3400               	retlw	0	;all done for this memory range, return
  3465  0A3B  2A31               	goto	clrloop0	;have we reached the end yet?
  3466                           
  3467                           	psect	cstackBANK1
  3468  00E0                     __pcstackBANK1:	
  3469  00E0                     ??_InitializeTasks:	
  3470  00E0                     ??_ScheduleTasks:	
  3471                           ; 1 bytes @ 0x0
  3472                           
  3473                           
  3474                           ; 1 bytes @ 0x0
  3475  00E0                     	ds	6
  3476                           
  3477                           	psect	cstackCOMMON
  3478  0070                     __pcstackCOMMON:	
  3479  0070                     ?_SystemInit:	
  3480  0070                     ?_MainScheduler:	
  3481                           ; 1 bytes @ 0x0
  3482                           
  3483  0070                     ?_ReceiveEvt:	
  3484                           ; 1 bytes @ 0x0
  3485                           
  3486  0070                     ?_Mcu_Reset:	
  3487                           ; 1 bytes @ 0x0
  3488                           
  3489  0070                     ?_GenerateEvt:	
  3490                           ; 1 bytes @ 0x0
  3491                           
  3492  0070                     ?_InitializeTasks:	
  3493                           ; 1 bytes @ 0x0
  3494                           
  3495  0070                     ?_ScheduleTasks:	
  3496                           ; 1 bytes @ 0x0
  3497                           
  3498  0070                     ?_I2cSlv_I2cDrvHandle:	
  3499                           ; 1 bytes @ 0x0
  3500                           
  3501  0070                     ?_SetLedBehavSts:	
  3502                           ; 1 bytes @ 0x0
  3503                           
  3504  0070                     ?_CheckAckStatus:	
  3505                           ; 1 bytes @ 0x0
  3506                           
  3507  0070                     ?_CheckByteStatus:	
  3508                           ; 1 bytes @ 0x0
  3509                           
  3510  0070                     ?_CheckStopBitStatus:	
  3511                           ; 1 bytes @ 0x0
  3512                           
  3513  0070                     ?_ClearRxBuffer:	
  3514                           ; 1 bytes @ 0x0
  3515                           
  3516  0070                     ?_ClearTxBuffer:	
  3517                           ; 1 bytes @ 0x0
  3518                           
  3519  0070                     ?_I2c_InitI2cModule:	
  3520                           ; 1 bytes @ 0x0
  3521                           
  3522  0070                     ?_I2c_SetI2cAddress:	
  3523                           ; 1 bytes @ 0x0
  3524                           
  3525  0070                     ?_I2c_SetI2cAddressMask:	
  3526                           ; 1 bytes @ 0x0
  3527                           
  3528  0070                     ?_LedBlinkStateMachine:	
  3529                           ; 1 bytes @ 0x0
  3530                           
  3531  0070                     ?_Adc_ConfigAnCh:	
  3532                           ; 1 bytes @ 0x0
  3533                           
  3534  0070                     ?_Adc_InitAdcModule:	
  3535                           ; 1 bytes @ 0x0
  3536                           
  3537  0070                     ?_Adc_SelectChannel:	
  3538                           ; 1 bytes @ 0x0
  3539                           
  3540  0070                     ?_Adc_StartConversion:	
  3541                           ; 1 bytes @ 0x0
  3542                           
  3543  0070                     ?_Adc_GetConvSts:	
  3544                           ; 1 bytes @ 0x0
  3545                           
  3546  0070                     ?_Mcu_InitIntOsc:	
  3547                           ; 1 bytes @ 0x0
  3548                           
  3549  0070                     ?_Mcu_EnableInterrupts:	
  3550                           ; 1 bytes @ 0x0
  3551                           
  3552  0070                     ?_Mcu_SetPullUpsSts:	
  3553                           ; 1 bytes @ 0x0
  3554                           
  3555  0070                     ?_Mcu_ConfigPullUps:	
  3556                           ; 1 bytes @ 0x0
  3557                           
  3558  0070                     ?_Mcu_SetWdgPeriod:	
  3559                           ; 1 bytes @ 0x0
  3560                           
  3561  0070                     ?_Mcu_SetWdgSts:	
  3562                           ; 1 bytes @ 0x0
  3563                           
  3564  0070                     ?_Mcu_ClearWdg:	
  3565                           ; 1 bytes @ 0x0
  3566                           
  3567  0070                     ?_Mcu_SetDieTempSts:	
  3568                           ; 1 bytes @ 0x0
  3569                           
  3570  0070                     ?_Mcu_SetDieTempMode:	
  3571                           ; 1 bytes @ 0x0
  3572                           
  3573  0070                     ?_Tmr_StartTmr:	
  3574                           ; 1 bytes @ 0x0
  3575                           
  3576  0070                     ?_MainInterrupt:	
  3577                           ; 1 bytes @ 0x0
  3578                           
  3579  0070                     ?_I2c_SetConfig:	
  3580                           ; 1 bytes @ 0x0
  3581                           
  3582  0070                     ?_Led_InitSeq:	
  3583                           ; 1 bytes @ 0x0
  3584                           
  3585  0070                     ?_ControlLedDirect:	
  3586                           ; 1 bytes @ 0x0
  3587                           
  3588  0070                     ?_BoardReset:	
  3589                           ; 1 bytes @ 0x0
  3590                           
  3591  0070                     ?_LowPowerMode:	
  3592                           ; 1 bytes @ 0x0
  3593                           
  3594  0070                     ?_StdS_ManageStdServices:	
  3595                           ; 1 bytes @ 0x0
  3596                           
  3597  0070                     ?_StdS_SetI2cAddress:	
  3598                           ; 1 bytes @ 0x0
  3599                           
  3600  0070                     ?_InitSchTimer:	
  3601                           ; 1 bytes @ 0x0
  3602                           
  3603  0070                     ?_GetIrSensSts:	
  3604                           ; 1 bytes @ 0x0
  3605                           
  3606  0070                     ?_ManageProtocol:	
  3607                           ; 1 bytes @ 0x0
  3608                           
  3609  0070                     ?_Int0Trigger:	
  3610                           ; 1 bytes @ 0x0
  3611                           
  3612  0070                     ?_AppSm:	
  3613                           ; 1 bytes @ 0x0
  3614                           
  3615  0070                     ?i1_GenerateEvt:	
  3616                           ; 1 bytes @ 0x0
  3617                           
  3618  0070                     ??i1_GenerateEvt:	
  3619                           ; 1 bytes @ 0x0
  3620                           
  3621  0070                     ?_main:	
  3622                           ; 1 bytes @ 0x0
  3623                           
  3624                           
  3625                           ; 2 bytes @ 0x0
  3626  0070                     	ds	1
  3627  0071                     i1GenerateEvt@Event:	
  3628                           
  3629                           ; 1 bytes @ 0x1
  3630  0071                     	ds	1
  3631  0072                     i1GenerateEvt@EventStatus:	
  3632                           
  3633                           ; 1 bytes @ 0x2
  3634  0072                     	ds	1
  3635  0073                     ??_MainInterrupt:	
  3636                           
  3637                           ; 1 bytes @ 0x3
  3638  0073                     	ds	1
  3639  0074                     ??_ReceiveEvt:	
  3640  0074                     ??_Mcu_Reset:	
  3641                           ; 1 bytes @ 0x4
  3642                           
  3643  0074                     ??_GenerateEvt:	
  3644                           ; 1 bytes @ 0x4
  3645                           
  3646  0074                     ?_Led_SetLedStatus:	
  3647                           ; 1 bytes @ 0x4
  3648                           
  3649  0074                     ??_CheckAckStatus:	
  3650                           ; 1 bytes @ 0x4
  3651                           
  3652  0074                     ??_CheckByteStatus:	
  3653                           ; 1 bytes @ 0x4
  3654                           
  3655  0074                     ??_CheckStopBitStatus:	
  3656                           ; 1 bytes @ 0x4
  3657                           
  3658  0074                     ??_ClearRxBuffer:	
  3659                           ; 1 bytes @ 0x4
  3660                           
  3661  0074                     ??_ClearTxBuffer:	
  3662                           ; 1 bytes @ 0x4
  3663                           
  3664  0074                     ??_I2c_SetI2cAddress:	
  3665                           ; 1 bytes @ 0x4
  3666                           
  3667  0074                     ??_I2c_SetI2cAddressMask:	
  3668                           ; 1 bytes @ 0x4
  3669                           
  3670  0074                     ?_I2c_UpdateTxBuffer:	
  3671                           ; 1 bytes @ 0x4
  3672                           
  3673  0074                     ??_Adc_ConfigAnCh:	
  3674                           ; 1 bytes @ 0x4
  3675                           
  3676  0074                     ??_Adc_InitAdcModule:	
  3677                           ; 1 bytes @ 0x4
  3678                           
  3679  0074                     ??_Adc_SelectChannel:	
  3680                           ; 1 bytes @ 0x4
  3681                           
  3682  0074                     ??_Adc_StartConversion:	
  3683                           ; 1 bytes @ 0x4
  3684                           
  3685  0074                     ??_Adc_GetConvSts:	
  3686                           ; 1 bytes @ 0x4
  3687                           
  3688  0074                     ??_Mcu_InitIntOsc:	
  3689                           ; 1 bytes @ 0x4
  3690                           
  3691  0074                     ??_Mcu_EnableInterrupts:	
  3692                           ; 1 bytes @ 0x4
  3693                           
  3694  0074                     ??_Mcu_SetPullUpsSts:	
  3695                           ; 1 bytes @ 0x4
  3696                           
  3697  0074                     ??_Mcu_ConfigPullUps:	
  3698                           ; 1 bytes @ 0x4
  3699                           
  3700  0074                     ??_Mcu_SetWdgPeriod:	
  3701                           ; 1 bytes @ 0x4
  3702                           
  3703  0074                     ??_Mcu_SetWdgSts:	
  3704                           ; 1 bytes @ 0x4
  3705                           
  3706  0074                     ??_Mcu_ClearWdg:	
  3707                           ; 1 bytes @ 0x4
  3708                           
  3709  0074                     ??_Mcu_SetDieTempSts:	
  3710                           ; 1 bytes @ 0x4
  3711                           
  3712  0074                     ??_Mcu_SetDieTempMode:	
  3713                           ; 1 bytes @ 0x4
  3714                           
  3715  0074                     ?_TmrBInit:	
  3716                           ; 1 bytes @ 0x4
  3717                           
  3718  0074                     ?_Tmr_TmrBIrqSet:	
  3719                           ; 1 bytes @ 0x4
  3720                           
  3721  0074                     ??_Tmr_StartTmr:	
  3722                           ; 1 bytes @ 0x4
  3723                           
  3724  0074                     ??_I2c_SetConfig:	
  3725                           ; 1 bytes @ 0x4
  3726                           
  3727  0074                     ??_Led_SetLedBlinkTime:	
  3728                           ; 1 bytes @ 0x4
  3729                           
  3730  0074                     ?_Led_SetLedPulseTime:	
  3731                           ; 1 bytes @ 0x4
  3732                           
  3733  0074                     ??_BoardReset:	
  3734                           ; 1 bytes @ 0x4
  3735                           
  3736  0074                     ??_StdS_SetI2cAddress:	
  3737                           ; 1 bytes @ 0x4
  3738                           
  3739  0074                     ??_GetIrSensSts:	
  3740                           ; 1 bytes @ 0x4
  3741                           
  3742  0074                     ??_Int0Trigger:	
  3743                           ; 1 bytes @ 0x4
  3744                           
  3745  0074                     ??___wmul:	
  3746                           ; 1 bytes @ 0x4
  3747                           
  3748  0074                     ??___lldiv:	
  3749                           ; 1 bytes @ 0x4
  3750                           
  3751  0074                     ??___lwdiv:	
  3752                           ; 1 bytes @ 0x4
  3753                           
  3754  0074                     ??___lwmod:	
  3755                           ; 1 bytes @ 0x4
  3756                           
  3757  0074                     ?_Adc_GetConvResult:	
  3758                           ; 1 bytes @ 0x4
  3759                           
  3760  0074                     I2c_SetI2cAddress@SlaveAddress:	
  3761                           ; 2 bytes @ 0x4
  3762                           
  3763  0074                     I2c_SetI2cAddressMask@SlaveAddressMask:	
  3764                           ; 1 bytes @ 0x4
  3765                           
  3766  0074                     I2c_UpdateTxBuffer@Length:	
  3767                           ; 1 bytes @ 0x4
  3768                           
  3769  0074                     Adc_ConfigAnCh@AnChSel:	
  3770                           ; 1 bytes @ 0x4
  3771                           
  3772  0074                     Adc_InitAdcModule@AdcConfig:	
  3773                           ; 1 bytes @ 0x4
  3774                           
  3775  0074                     Mcu_SetPullUpsSts@PuSts:	
  3776                           ; 1 bytes @ 0x4
  3777                           
  3778  0074                     Mcu_ConfigPullUps@WpuCh:	
  3779                           ; 1 bytes @ 0x4
  3780                           
  3781  0074                     Mcu_SetWdgSts@WdgSts:	
  3782                           ; 1 bytes @ 0x4
  3783                           
  3784  0074                     Mcu_SetDieTempSts@DieTempSts:	
  3785                           ; 1 bytes @ 0x4
  3786                           
  3787  0074                     Mcu_SetDieTempMode@DieTempMode:	
  3788                           ; 1 bytes @ 0x4
  3789                           
  3790  0074                     TmrBInit@Prescaler:	
  3791                           ; 1 bytes @ 0x4
  3792                           
  3793  0074                     Tmr_TmrBIrqSet@TmrIrqSts:	
  3794                           ; 1 bytes @ 0x4
  3795                           
  3796  0074                     Tmr_StartTmr@TmrNumb:	
  3797                           ; 1 bytes @ 0x4
  3798                           
  3799  0074                     ReceiveEvt@EventStatus:	
  3800                           ; 1 bytes @ 0x4
  3801                           
  3802  0074                     Led_SetLedStatus@LedSts:	
  3803                           ; 1 bytes @ 0x4
  3804                           
  3805  0074                     Led_SetLedBlinkTime@Led:	
  3806                           ; 1 bytes @ 0x4
  3807                           
  3808  0074                     StringCopy@Index:	
  3809                           ; 1 bytes @ 0x4
  3810                           
  3811  0074                     Led_SetLedPulseTime@PulseTimeMs:	
  3812                           ; 1 bytes @ 0x4
  3813                           
  3814  0074                     ___wmul@product:	
  3815                           ; 2 bytes @ 0x4
  3816                           
  3817                           
  3818                           ; 2 bytes @ 0x4
  3819  0074                     	ds	1
  3820  0075                     ??_Led_SetLedStatus:	
  3821  0075                     ??_Tmr_TmrBIrqSet:	
  3822                           ; 1 bytes @ 0x5
  3823                           
  3824  0075                     ??_LowPowerMode:	
  3825                           ; 1 bytes @ 0x5
  3826                           
  3827  0075                     ClearRxBuffer@Index:	
  3828                           ; 1 bytes @ 0x5
  3829                           
  3830  0075                     ClearTxBuffer@Index:	
  3831                           ; 1 bytes @ 0x5
  3832                           
  3833  0075                     LedBlinkStateMachine@LedBlink:	
  3834                           ; 1 bytes @ 0x5
  3835                           
  3836  0075                     Adc_SelectChannel@SelCh:	
  3837                           ; 1 bytes @ 0x5
  3838                           
  3839  0075                     Mcu_SetWdgPeriod@WdgPeriod:	
  3840                           ; 1 bytes @ 0x5
  3841                           
  3842  0075                     TmrBInit@Postscaler:	
  3843                           ; 1 bytes @ 0x5
  3844                           
  3845  0075                     Tmr_TmrBIrqSet@TmrNumb:	
  3846                           ; 1 bytes @ 0x5
  3847                           
  3848  0075                     ReceiveEvt@Event:	
  3849                           ; 1 bytes @ 0x5
  3850                           
  3851  0075                     ___lwmod@counter:	
  3852                           ; 1 bytes @ 0x5
  3853                           
  3854                           
  3855                           ; 1 bytes @ 0x5
  3856  0075                     	ds	1
  3857  0076                     ??_SystemInit:	
  3858  0076                     ??_MainScheduler:	
  3859                           ; 1 bytes @ 0x6
  3860                           
  3861  0076                     ??_I2cSlv_MainTask:	
  3862                           ; 1 bytes @ 0x6
  3863                           
  3864  0076                     ??_Wdg_MainTask:	
  3865                           ; 1 bytes @ 0x6
  3866                           
  3867  0076                     ??_main:	
  3868                           ; 1 bytes @ 0x6
  3869                           
  3870  0076                     ??_Led_SetLedPulseTime:	
  3871                           ; 1 bytes @ 0x6
  3872                           
  3873  0076                     ??_ControlLedDirect:	
  3874                           ; 1 bytes @ 0x6
  3875                           
  3876  0076                     ??_GetDieTemperature:	
  3877                           ; 1 bytes @ 0x6
  3878                           
  3879  0076                     ??___lmul:	
  3880                           ; 1 bytes @ 0x6
  3881                           
  3882                           
  3883                           	psect	cstackBANK0
  3884  0020                     __pcstackBANK0:	
  3885                           ; 1 bytes @ 0x6
  3886                           
  3887  0020                     ??_I2c_InitI2cModule:	
  3888  0020                     ??_I2c_UpdateTxBuffer:	
  3889                           ; 1 bytes @ 0x0
  3890                           
  3891  0020                     ??_Adc_GetConvResult:	
  3892                           ; 1 bytes @ 0x0
  3893                           
  3894  0020                     ??_TmrBInit:	
  3895                           ; 1 bytes @ 0x0
  3896                           
  3897  0020                     ?_Led_SetLedBlinkTime:	
  3898                           ; 1 bytes @ 0x0
  3899                           
  3900  0020                     ?_StringCopy:	
  3901                           ; 1 bytes @ 0x0
  3902                           
  3903  0020                     ?___wmul:	
  3904                           ; 1 bytes @ 0x0
  3905                           
  3906  0020                     ?___lwdiv:	
  3907                           ; 2 bytes @ 0x0
  3908                           
  3909  0020                     ?___lwmod:	
  3910                           ; 2 bytes @ 0x0
  3911                           
  3912  0020                     ?___lldiv:	
  3913                           ; 2 bytes @ 0x0
  3914                           
  3915  0020                     GenerateEvt@EventStatus:	
  3916                           ; 4 bytes @ 0x0
  3917                           
  3918  0020                     Led_SetLedStatus@Led:	
  3919                           ; 1 bytes @ 0x0
  3920                           
  3921  0020                     Led_SetLedPulseTime@Led:	
  3922                           ; 1 bytes @ 0x0
  3923                           
  3924  0020                     Led_SetLedBlinkTime@OnTimeMs:	
  3925                           ; 1 bytes @ 0x0
  3926                           
  3927  0020                     StringCopy@SourceStr:	
  3928                           ; 2 bytes @ 0x0
  3929                           
  3930  0020                     ___wmul@multiplier:	
  3931                           ; 2 bytes @ 0x0
  3932                           
  3933  0020                     ___lwdiv@divisor:	
  3934                           ; 2 bytes @ 0x0
  3935                           
  3936  0020                     ___lwmod@divisor:	
  3937                           ; 2 bytes @ 0x0
  3938                           
  3939  0020                     ___lldiv@divisor:	
  3940                           ; 2 bytes @ 0x0
  3941                           
  3942                           
  3943                           ; 4 bytes @ 0x0
  3944  0020                     	ds	1
  3945  0021                     ??_Led_InitSeq:	
  3946  0021                     TmrBInit@TmrNumb:	
  3947                           ; 1 bytes @ 0x1
  3948                           
  3949  0021                     GenerateEvt@Event:	
  3950                           ; 1 bytes @ 0x1
  3951                           
  3952  0021                     Adc_GetConvResult@AdcResult:	
  3953                           ; 1 bytes @ 0x1
  3954                           
  3955                           
  3956                           ; 2 bytes @ 0x1
  3957  0021                     	ds	1
  3958  0022                     I2c_InitI2cModule@I2cConfig:	
  3959  0022                     I2c_UpdateTxBuffer@DataBuffer:	
  3960                           ; 1 bytes @ 0x2
  3961                           
  3962  0022                     StringCopy@DestStr:	
  3963                           ; 1 bytes @ 0x2
  3964                           
  3965  0022                     Led_SetLedBlinkTime@OffTimeMs:	
  3966                           ; 1 bytes @ 0x2
  3967                           
  3968  0022                     ___wmul@multiplicand:	
  3969                           ; 2 bytes @ 0x2
  3970                           
  3971  0022                     ___lwdiv@dividend:	
  3972                           ; 2 bytes @ 0x2
  3973                           
  3974  0022                     ___lwmod@dividend:	
  3975                           ; 2 bytes @ 0x2
  3976                           
  3977                           
  3978                           ; 2 bytes @ 0x2
  3979  0022                     	ds	1
  3980  0023                     ?_GetDieTemperature:	
  3981  0023                     I2c_UpdateTxBuffer@Index:	
  3982                           ; 2 bytes @ 0x3
  3983                           
  3984  0023                     StringCopy@Len:	
  3985                           ; 1 bytes @ 0x3
  3986                           
  3987                           
  3988                           ; 1 bytes @ 0x3
  3989  0023                     	ds	1
  3990  0024                     ??_I2cSlv_I2cDrvHandle:	
  3991  0024                     ??_SetLedBehavSts:	
  3992                           ; 1 bytes @ 0x4
  3993                           
  3994  0024                     ??_StringCopy:	
  3995                           ; 1 bytes @ 0x4
  3996                           
  3997  0024                     ?___lmul:	
  3998                           ; 1 bytes @ 0x4
  3999                           
  4000  0024                     ___lwdiv@counter:	
  4001                           ; 4 bytes @ 0x4
  4002                           
  4003  0024                     ___lmul@multiplier:	
  4004                           ; 1 bytes @ 0x4
  4005                           
  4006  0024                     ___lldiv@dividend:	
  4007                           ; 4 bytes @ 0x4
  4008                           
  4009                           
  4010                           ; 4 bytes @ 0x4
  4011  0024                     	ds	1
  4012  0025                     SetLedBehavSts@LedBehav:	
  4013  0025                     GetDieTemperature@DieTempRes:	
  4014                           ; 1 bytes @ 0x5
  4015                           
  4016  0025                     ___lwdiv@quotient:	
  4017                           ; 2 bytes @ 0x5
  4018                           
  4019                           
  4020                           ; 2 bytes @ 0x5
  4021  0025                     	ds	2
  4022  0027                     ?_utoa:	
  4023  0027                     ??_LedBlinkStateMachine:	
  4024                           ; 1 bytes @ 0x7
  4025                           
  4026  0027                     ?_LedPulseStateMachine:	
  4027                           ; 1 bytes @ 0x7
  4028                           
  4029  0027                     LedPulseStateMachine@Led:	
  4030                           ; 1 bytes @ 0x7
  4031                           
  4032  0027                     utoa@val:	
  4033                           ; 1 bytes @ 0x7
  4034                           
  4035                           
  4036                           ; 2 bytes @ 0x7
  4037  0027                     	ds	1
  4038  0028                     ??_LedPulseStateMachine:	
  4039  0028                     ___lmul@multiplicand:	
  4040                           ; 1 bytes @ 0x8
  4041                           
  4042  0028                     ___lldiv@quotient:	
  4043                           ; 4 bytes @ 0x8
  4044                           
  4045                           
  4046                           ; 4 bytes @ 0x8
  4047  0028                     	ds	1
  4048  0029                     I2cSlv_I2cDrvHandle@Index:	
  4049  0029                     utoa@base:	
  4050                           ; 1 bytes @ 0x9
  4051                           
  4052                           
  4053                           ; 2 bytes @ 0x9
  4054  0029                     	ds	1
  4055  002A                     LedPulseStateMachine@LedPulse:	
  4056                           
  4057                           ; 1 bytes @ 0xA
  4058  002A                     	ds	1
  4059  002B                     ??_utoa:	
  4060  002B                     ?_LedStateMachine:	
  4061                           ; 1 bytes @ 0xB
  4062                           
  4063  002B                     LedStateMachine@LedSts:	
  4064                           ; 1 bytes @ 0xB
  4065                           
  4066                           
  4067                           ; 1 bytes @ 0xB
  4068  002B                     	ds	1
  4069  002C                     LedStateMachine@LedBlink:	
  4070  002C                     ___lldiv@counter:	
  4071                           ; 1 bytes @ 0xC
  4072                           
  4073  002C                     utoa@v:	
  4074                           ; 1 bytes @ 0xC
  4075                           
  4076  002C                     ___lmul@product:	
  4077                           ; 2 bytes @ 0xC
  4078                           
  4079                           
  4080                           ; 4 bytes @ 0xC
  4081  002C                     	ds	1
  4082  002D                     LedStateMachine@LedPulse:	
  4083                           
  4084                           ; 1 bytes @ 0xD
  4085  002D                     	ds	1
  4086  002E                     ??_LedStateMachine:	
  4087  002E                     utoa@c:	
  4088                           ; 1 bytes @ 0xE
  4089                           
  4090                           
  4091                           ; 1 bytes @ 0xE
  4092  002E                     	ds	1
  4093  002F                     utoa@buf:	
  4094                           
  4095                           ; 1 bytes @ 0xF
  4096  002F                     	ds	1
  4097  0030                     ?_Tmr_TmrBPrSet:	
  4098  0030                     ??_StdS_ManageStdServices:	
  4099                           ; 1 bytes @ 0x10
  4100                           
  4101  0030                     LedStateMachine@Led:	
  4102                           ; 1 bytes @ 0x10
  4103                           
  4104  0030                     Tmr_TmrBPrSet@IntFreqHz:	
  4105                           ; 1 bytes @ 0x10
  4106                           
  4107                           
  4108                           ; 2 bytes @ 0x10
  4109  0030                     	ds	1
  4110  0031                     LedStateMachine@LedOutSts:	
  4111                           
  4112                           ; 1 bytes @ 0x11
  4113  0031                     	ds	1
  4114  0032                     Tmr_TmrBPrSet@Prescaler:	
  4115  0032                     StdS_ManageStdServices@DieTempStr:	
  4116                           ; 1 bytes @ 0x12
  4117                           
  4118                           
  4119                           ; 4 bytes @ 0x12
  4120  0032                     	ds	1
  4121  0033                     Tmr_TmrBPrSet@Postscaler:	
  4122                           
  4123                           ; 1 bytes @ 0x13
  4124  0033                     	ds	1
  4125  0034                     ??_Tmr_TmrBPrSet:	
  4126                           
  4127                           ; 1 bytes @ 0x14
  4128  0034                     	ds	2
  4129  0036                     StdS_ManageStdServices@DieTemp:	
  4130                           
  4131                           ; 2 bytes @ 0x16
  4132  0036                     	ds	2
  4133  0038                     ??_ManageProtocol:	
  4134                           
  4135                           ; 1 bytes @ 0x18
  4136  0038                     	ds	2
  4137  003A                     ??_AppSm:	
  4138                           
  4139                           ; 1 bytes @ 0x1A
  4140  003A                     	ds	1
  4141  003B                     ?_I2cSlv_MainTask:	
  4142  003B                     ?_Wdg_MainTask:	
  4143                           ; 1 bytes @ 0x1B
  4144                           
  4145  003B                     ?_Led_MainTask:	
  4146                           ; 1 bytes @ 0x1B
  4147                           
  4148  003B                     ?_App_MainTask:	
  4149                           ; 1 bytes @ 0x1B
  4150                           
  4151  003B                     ?_I2c_DataReceiveSm:	
  4152                           ; 1 bytes @ 0x1B
  4153                           
  4154  003B                     I2c_DataReceiveSm@Options:	
  4155                           ; 1 bytes @ 0x1B
  4156                           
  4157  003B                     I2cSlv_MainTask@Options:	
  4158                           ; 1 bytes @ 0x1B
  4159                           
  4160  003B                     Led_MainTask@Options:	
  4161                           ; 1 bytes @ 0x1B
  4162                           
  4163  003B                     Wdg_MainTask@Options:	
  4164                           ; 1 bytes @ 0x1B
  4165                           
  4166  003B                     App_MainTask@Options:	
  4167                           ; 1 bytes @ 0x1B
  4168                           
  4169                           
  4170                           ; 1 bytes @ 0x1B
  4171  003B                     	ds	1
  4172  003C                     ??_Led_MainTask:	
  4173  003C                     ??_App_MainTask:	
  4174                           ; 1 bytes @ 0x1C
  4175                           
  4176  003C                     ??_I2c_DataReceiveSm:	
  4177                           ; 1 bytes @ 0x1C
  4178                           
  4179  003C                     Tmr_TmrBPrSet@TmrNumb:	
  4180                           ; 1 bytes @ 0x1C
  4181                           
  4182                           
  4183                           ; 1 bytes @ 0x1C
  4184  003C                     	ds	1
  4185  003D                     Tmr_TmrBPrSet@TmrBPrCfgSts:	
  4186  003D                     App_MainTask@AnalogChSel:	
  4187                           ; 1 bytes @ 0x1D
  4188                           
  4189                           
  4190                           ; 8 bytes @ 0x1D
  4191  003D                     	ds	1
  4192  003E                     Tmr_TmrBPrSet@Divisor:	
  4193                           
  4194                           ; 4 bytes @ 0x1E
  4195  003E                     	ds	4
  4196  0042                     ?_Tmr_TmrBConfig:	
  4197  0042                     Tmr_TmrBConfig@TmrBConfig:	
  4198                           ; 1 bytes @ 0x22
  4199                           
  4200                           
  4201                           ; 1 bytes @ 0x22
  4202  0042                     	ds	1
  4203  0043                     ??_Tmr_TmrBConfig:	
  4204  0043                     I2c_DataReceiveSm@Index:	
  4205                           ; 1 bytes @ 0x23
  4206                           
  4207                           
  4208                           ; 1 bytes @ 0x23
  4209  0043                     	ds	1
  4210  0044                     Tmr_TmrBConfig@TmrNumb:	
  4211                           
  4212                           ; 1 bytes @ 0x24
  4213  0044                     	ds	1
  4214  0045                     ??_InitSchTimer:	
  4215  0045                     App_MainTask@WpuCh:	
  4216                           ; 1 bytes @ 0x25
  4217                           
  4218                           
  4219                           ; 12 bytes @ 0x25
  4220  0045                     	ds	1
  4221  0046                     InitSchTimer@TmrBConfig:	
  4222                           
  4223                           ; 6 bytes @ 0x26
  4224  0046                     	ds	11
  4225  0051                     App_MainTask@AdcConfig:	
  4226                           
  4227                           ; 6 bytes @ 0x31
  4228  0051                     	ds	6
  4229  0057                     InitializeTasks@ActiveTaskIndex:	
  4230  0057                     ScheduleTasks@ActiveTaskIndex:	
  4231                           ; 1 bytes @ 0x37
  4232                           
  4233                           
  4234                           ; 1 bytes @ 0x37
  4235  0057                     	ds	1
  4236                           
  4237                           	psect	maintext
  4238  09B5                     __pmaintext:	
  4239 ;;
  4240 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  4241 ;;
  4242 ;; *************** function _main *****************
  4243 ;; Defined at:
  4244 ;;		line 57 in file "../../../Framework/MercuryFwk/Source/c/00_Main/main.c"
  4245 ;; Parameters:    Size  Location     Type
  4246 ;;		None
  4247 ;; Auto vars:     Size  Location     Type
  4248 ;;		None
  4249 ;; Return value:  Size  Location     Type
  4250 ;;                  2   12[None  ] short 
  4251 ;; Registers used:
  4252 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4253 ;; Tracked objects:
  4254 ;;		On entry : B1F/0
  4255 ;;		On exit  : 0/0
  4256 ;;		Unchanged: 0/0
  4257 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4258 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4259 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4260 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4261 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4262 ;;Total ram usage:        0 bytes
  4263 ;; Hardware stack levels required when called:   10
  4264 ;; This function calls:
  4265 ;;		_MainScheduler
  4266 ;;		_SystemInit
  4267 ;; This function is called by:
  4268 ;;		Startup code after reset
  4269 ;; This function uses a non-reentrant model
  4270 ;;
  4271                           
  4272                           
  4273                           ;psect for function _main
  4274  09B5                     _main:	
  4275                           
  4276                           ;main.c: 60: SystemInit();
  4277                           
  4278                           ;incstack = 0
  4279                           ; Regs used in _main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  4280  09B5  3189  21DC  3189   	fcall	_SystemInit
  4281                           
  4282                           ;main.c: 63: MainScheduler();
  4283  09B8  318A  22A3         	fcall	_MainScheduler
  4284                           
  4285                           ;main.c: 66: return 0;
  4286                           ;	Return value of _main is never used
  4287  09BA  3180  282C         	ljmp	start
  4288  09BC                     __end_of_main:	
  4289                           
  4290                           	psect	text1
  4291  09DC                     __ptext1:	
  4292 ;; *************** function _SystemInit *****************
  4293 ;; Defined at:
  4294 ;;		line 98 in file "../Source/c/04_App/sys_init.c"
  4295 ;; Parameters:    Size  Location     Type
  4296 ;;		None
  4297 ;; Auto vars:     Size  Location     Type
  4298 ;;		None
  4299 ;; Return value:  Size  Location     Type
  4300 ;;                  1    wreg      void 
  4301 ;; Registers used:
  4302 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4303 ;; Tracked objects:
  4304 ;;		On entry : 0/0
  4305 ;;		On exit  : 0/0
  4306 ;;		Unchanged: 0/0
  4307 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4308 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4309 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4310 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4311 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4312 ;;Total ram usage:        0 bytes
  4313 ;; Hardware stack levels used:    1
  4314 ;; Hardware stack levels required when called:    6
  4315 ;; This function calls:
  4316 ;;		_InitSchTimer
  4317 ;;		_Mcu_EnableInterrupts
  4318 ;;		_Mcu_InitIntOsc
  4319 ;; This function is called by:
  4320 ;;		_main
  4321 ;; This function uses a non-reentrant model
  4322 ;;
  4323                           
  4324                           
  4325                           ;psect for function _SystemInit
  4326  09DC                     _SystemInit:	
  4327                           
  4328                           ;sys_init.c: 101: Mcu_InitIntOsc();
  4329                           
  4330                           ;incstack = 0
  4331                           ; Regs used in _SystemInit: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  4332  09DC  3189  21AE  3189   	fcall	_Mcu_InitIntOsc
  4333                           
  4334                           ;sys_init.c: 103: InitSchTimer();
  4335  09DF  318B  231C  3189   	fcall	_InitSchTimer
  4336                           
  4337                           ;sys_init.c: 105: Mcu_EnableInterrupts();
  4338  09E2  3189  219A         	fcall	_Mcu_EnableInterrupts
  4339  09E4  0008               	return
  4340  09E5                     __end_of_SystemInit:	
  4341                           
  4342                           	psect	text2
  4343  09AE                     __ptext2:	
  4344 ;; *************** function _Mcu_InitIntOsc *****************
  4345 ;; Defined at:
  4346 ;;		line 79 in file "../../../Framework/MercuryFwk/Source/c/01_Hal/02_Drv/mcu_drv.c"
  4347 ;; Parameters:    Size  Location     Type
  4348 ;;		None
  4349 ;; Auto vars:     Size  Location     Type
  4350 ;;		None
  4351 ;; Return value:  Size  Location     Type
  4352 ;;                  1    wreg      void 
  4353 ;; Registers used:
  4354 ;;		wreg, status,2, status,0
  4355 ;; Tracked objects:
  4356 ;;		On entry : 0/0
  4357 ;;		On exit  : 0/0
  4358 ;;		Unchanged: 0/0
  4359 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4360 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4361 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4362 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4363 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4364 ;;Total ram usage:        0 bytes
  4365 ;; Hardware stack levels used:    1
  4366 ;; Hardware stack levels required when called:    2
  4367 ;; This function calls:
  4368 ;;		Nothing
  4369 ;; This function is called by:
  4370 ;;		_SystemInit
  4371 ;; This function uses a non-reentrant model
  4372 ;;
  4373                           
  4374                           
  4375                           ;psect for function _Mcu_InitIntOsc
  4376  09AE                     _Mcu_InitIntOsc:	
  4377                           
  4378                           ;mcu_drv.c: 82: OSCCONbits.SCS1 = ((UINT8)(1));
  4379                           
  4380                           ;incstack = 0
  4381                           ; Regs used in _Mcu_InitIntOsc: [wreg+status,2+status,0]
  4382  09AE  0021               	movlb	1	; select bank1
  4383  09AF  1499               	bsf	25,1	;volatile
  4384                           
  4385                           ;mcu_drv.c: 84: OSCCONbits.IRCF = 0b1111;
  4386  09B0  3078               	movlw	120
  4387  09B1  0499               	iorwf	25,f	;volatile
  4388  09B2                     l234:	
  4389                           ;mcu_drv.c: 86: while (OSCSTATbits.HFIOFS == 0);
  4390                           
  4391  09B2  181A               	btfsc	26,0	;volatile
  4392  09B3  0008               	return
  4393  09B4  29B2               	goto	l234
  4394  09B5                     __end_of_Mcu_InitIntOsc:	
  4395                           
  4396                           	psect	text3
  4397  099A                     __ptext3:	
  4398 ;; *************** function _Mcu_EnableInterrupts *****************
  4399 ;; Defined at:
  4400 ;;		line 97 in file "../../../Framework/MercuryFwk/Source/c/01_Hal/02_Drv/mcu_drv.c"
  4401 ;; Parameters:    Size  Location     Type
  4402 ;;		None
  4403 ;; Auto vars:     Size  Location     Type
  4404 ;;		None
  4405 ;; Return value:  Size  Location     Type
  4406 ;;                  1    wreg      void 
  4407 ;; Registers used:
  4408 ;;		None
  4409 ;; Tracked objects:
  4410 ;;		On entry : 0/0
  4411 ;;		On exit  : 0/0
  4412 ;;		Unchanged: 0/0
  4413 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4414 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4415 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4416 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4417 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4418 ;;Total ram usage:        0 bytes
  4419 ;; Hardware stack levels used:    1
  4420 ;; Hardware stack levels required when called:    2
  4421 ;; This function calls:
  4422 ;;		Nothing
  4423 ;; This function is called by:
  4424 ;;		_SystemInit
  4425 ;; This function uses a non-reentrant model
  4426 ;;
  4427                           
  4428                           
  4429                           ;psect for function _Mcu_EnableInterrupts
  4430  099A                     _Mcu_EnableInterrupts:	
  4431                           
  4432                           ;mcu_drv.c: 100: INTCONbits.GIE = ((UINT8)(1));
  4433                           
  4434                           ;incstack = 0
  4435                           ; Regs used in _Mcu_EnableInterrupts: []
  4436  099A  178B               	bsf	11,7	;volatile
  4437                           
  4438                           ;mcu_drv.c: 101: INTCONbits.PEIE = ((UINT8)(1));
  4439  099B  170B               	bsf	11,6	;volatile
  4440  099C  0008               	return
  4441  099D                     __end_of_Mcu_EnableInterrupts:	
  4442                           
  4443                           	psect	text4
  4444  0B1C                     __ptext4:	
  4445 ;; *************** function _InitSchTimer *****************
  4446 ;; Defined at:
  4447 ;;		line 71 in file "../Source/c/04_App/sys_init.c"
  4448 ;; Parameters:    Size  Location     Type
  4449 ;;		None
  4450 ;; Auto vars:     Size  Location     Type
  4451 ;;  TmrBConfig      6   38[BANK0 ] struct _TmrBConfigType
  4452 ;; Return value:  Size  Location     Type
  4453 ;;                  1    wreg      void 
  4454 ;; Registers used:
  4455 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4456 ;; Tracked objects:
  4457 ;;		On entry : 0/0
  4458 ;;		On exit  : 0/0
  4459 ;;		Unchanged: 0/0
  4460 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4461 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4462 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4463 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4464 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4465 ;;Total ram usage:        7 bytes
  4466 ;; Hardware stack levels used:    1
  4467 ;; Hardware stack levels required when called:    5
  4468 ;; This function calls:
  4469 ;;		_Tmr_TmrBConfig
  4470 ;; This function is called by:
  4471 ;;		_SystemInit
  4472 ;; This function uses a non-reentrant model
  4473 ;;
  4474                           
  4475                           
  4476                           ;psect for function _InitSchTimer
  4477  0B1C                     _InitSchTimer:	
  4478                           
  4479                           ;sys_init.c: 73: TmrBConfigType TmrBConfig;
  4480                           ;sys_init.c: 76: TmrBConfig.PreScaler = 1;
  4481                           
  4482                           ;incstack = 0
  4483                           ; Regs used in _InitSchTimer: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  4484  0B1C  0020               	movlb	0	; select bank0
  4485  0B1D  01C6               	clrf	InitSchTimer@TmrBConfig
  4486  0B1E  0AC6               	incf	InitSchTimer@TmrBConfig,f
  4487                           
  4488                           ;sys_init.c: 77: TmrBConfig.PostScaler = 8;
  4489  0B1F  3008               	movlw	8
  4490  0B20  00C5               	movwf	??_InitSchTimer
  4491  0B21  0845               	movf	??_InitSchTimer,w
  4492  0B22  00C7               	movwf	InitSchTimer@TmrBConfig+1
  4493                           
  4494                           ;sys_init.c: 78: TmrBConfig.IntEnable = 1u;
  4495  0B23  01C8               	clrf	InitSchTimer@TmrBConfig+2
  4496  0B24  0AC8               	incf	InitSchTimer@TmrBConfig+2,f
  4497                           
  4498                           ;sys_init.c: 79: TmrBConfig.IntFreqHz = 10000;
  4499  0B25  3010               	movlw	16
  4500  0B26  00C9               	movwf	InitSchTimer@TmrBConfig+3
  4501  0B27  3027               	movlw	39
  4502  0B28  00CA               	movwf	InitSchTimer@TmrBConfig+4
  4503                           
  4504                           ;sys_init.c: 80: TmrBConfig.StartTmrRequest = StartTmrReq;
  4505  0B29  01CB               	clrf	InitSchTimer@TmrBConfig+5
  4506  0B2A  0ACB               	incf	InitSchTimer@TmrBConfig+5,f
  4507                           
  4508                           ;sys_init.c: 83: Tmr_TmrBConfig(((UINT8)(2)),&TmrBConfig);
  4509  0B2B  3046               	movlw	(low (InitSchTimer@TmrBConfig| 0))& (0+255)
  4510  0B2C  00C5               	movwf	??_InitSchTimer
  4511  0B2D  0845               	movf	??_InitSchTimer,w
  4512  0B2E  00C2               	movwf	Tmr_TmrBConfig@TmrBConfig
  4513  0B2F  3002               	movlw	2
  4514  0B30  318E  266E         	fcall	_Tmr_TmrBConfig
  4515  0B32  0008               	return
  4516  0B33                     __end_of_InitSchTimer:	
  4517                           
  4518                           	psect	text5
  4519  0E6E                     __ptext5:	
  4520 ;; *************** function _Tmr_TmrBConfig *****************
  4521 ;; Defined at:
  4522 ;;		line 313 in file "../../../Framework/MercuryFwk/Source/c/01_Hal/02_Drv/tmr_drv.c"
  4523 ;; Parameters:    Size  Location     Type
  4524 ;;  TmrNumb         1    wreg     unsigned char 
  4525 ;;  TmrBConfig      1   34[BANK0 ] PTR struct _TmrBConfigTy
  4526 ;;		 -> InitSchTimer@TmrBConfig(6), 
  4527 ;; Auto vars:     Size  Location     Type
  4528 ;;  TmrNumb         1   36[BANK0 ] unsigned char 
  4529 ;; Return value:  Size  Location     Type
  4530 ;;                  1    wreg      void 
  4531 ;; Registers used:
  4532 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4533 ;; Tracked objects:
  4534 ;;		On entry : 0/0
  4535 ;;		On exit  : 0/0
  4536 ;;		Unchanged: 0/0
  4537 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4538 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4539 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4540 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4541 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4542 ;;Total ram usage:        3 bytes
  4543 ;; Hardware stack levels used:    1
  4544 ;; Hardware stack levels required when called:    4
  4545 ;; This function calls:
  4546 ;;		_TmrBInit
  4547 ;;		_Tmr_StartTmr
  4548 ;;		_Tmr_TmrBIrqSet
  4549 ;;		_Tmr_TmrBPrSet
  4550 ;; This function is called by:
  4551 ;;		_InitSchTimer
  4552 ;; This function uses a non-reentrant model
  4553 ;;
  4554                           
  4555                           
  4556                           ;psect for function _Tmr_TmrBConfig
  4557  0E6E                     _Tmr_TmrBConfig:	
  4558                           
  4559                           ;incstack = 0
  4560                           ; Regs used in _Tmr_TmrBConfig: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  4561                           ;Tmr_TmrBConfig@TmrNumb stored from wreg
  4562  0E6E  0020               	movlb	0	; select bank0
  4563  0E6F  00C4               	movwf	Tmr_TmrBConfig@TmrNumb
  4564                           
  4565                           ;tmr_drv.c: 316: TmrBInit(TmrNumb,TmrBConfig->PreScaler,TmrBConfig->PostScaler);
  4566  0E70  0842               	movf	Tmr_TmrBConfig@TmrBConfig,w
  4567  0E71  0086               	movwf	6
  4568  0E72  0187               	clrf	7
  4569  0E73  0801               	movf	1,w
  4570  0E74  00C3               	movwf	??_Tmr_TmrBConfig
  4571  0E75  0843               	movf	??_Tmr_TmrBConfig,w
  4572  0E76  00F4               	movwf	TmrBInit@Prescaler
  4573  0E77  0842               	movf	Tmr_TmrBConfig@TmrBConfig,w
  4574  0E78  0086               	movwf	6
  4575  0E79  0187               	clrf	7
  4576  0E7A  3F41               	moviw [1]fsr1
  4577  0E7B  00F5               	movwf	TmrBInit@Postscaler
  4578  0E7C  0844               	movf	Tmr_TmrBConfig@TmrNumb,w
  4579  0E7D  3185  25CA  318E   	fcall	_TmrBInit
  4580                           
  4581                           ;tmr_drv.c: 318: if (TmrBConfig->IntEnable == EnableInt)
  4582  0E80  0020               	movlb	0	; select bank0
  4583  0E81  0842               	movf	Tmr_TmrBConfig@TmrBConfig,w
  4584  0E82  3E02               	addlw	2
  4585  0E83  0086               	movwf	6
  4586  0E84  0187               	clrf	7
  4587  0E85  0301               	decf	1,w
  4588  0E86  1D03               	btfss	3,2
  4589  0E87  2E8B               	goto	l4243
  4590                           
  4591                           ;tmr_drv.c: 319: {
  4592                           ;tmr_drv.c: 321: Tmr_TmrBIrqSet(TmrNumb,((UINT8)(1)));
  4593  0E88  01F4               	clrf	Tmr_TmrBIrqSet@TmrIrqSts
  4594  0E89  0AF4               	incf	Tmr_TmrBIrqSet@TmrIrqSts,f
  4595  0E8A  2E8D               	goto	L1
  4596  0E8B                     l4243:	
  4597                           ;tmr_drv.c: 322: }
  4598                           
  4599                           
  4600                           ;tmr_drv.c: 323: else
  4601                           ;tmr_drv.c: 324: {
  4602                           ;tmr_drv.c: 326: Tmr_TmrBIrqSet(TmrNumb,((UINT8)(0)));
  4603  0E8B  01F4               	clrf	Tmr_TmrBIrqSet@TmrIrqSts
  4604  0E8C  0020               	movlb	0	; select bank0
  4605  0E8D                     L1:	
  4606  0E8D  0844               	movf	Tmr_TmrBConfig@TmrNumb,w
  4607  0E8E  318C  245A  318E   	fcall	_Tmr_TmrBIrqSet
  4608                           
  4609                           ;tmr_drv.c: 327: }
  4610                           ;tmr_drv.c: 329: if (Tmr_TmrBPrSet(TmrNumb,TmrBConfig->IntFreqHz,TmrBConfig->PreScaler,T
      +                          mrBConfig->PostScaler) == CfgError)
  4611  0E91  0020               	movlb	0	; select bank0
  4612  0E92  0842               	movf	Tmr_TmrBConfig@TmrBConfig,w
  4613  0E93  3E03               	addlw	3
  4614  0E94  0086               	movwf	6
  4615  0E95  0187               	clrf	7
  4616  0E96  3F40               	moviw [0]fsr1
  4617  0E97  00B0               	movwf	Tmr_TmrBPrSet@IntFreqHz
  4618  0E98  3F41               	moviw [1]fsr1
  4619  0E99  00B1               	movwf	Tmr_TmrBPrSet@IntFreqHz+1
  4620  0E9A  0842               	movf	Tmr_TmrBConfig@TmrBConfig,w
  4621  0E9B  0086               	movwf	6
  4622  0E9C  0187               	clrf	7
  4623  0E9D  0801               	movf	1,w
  4624  0E9E  00C3               	movwf	??_Tmr_TmrBConfig
  4625  0E9F  0843               	movf	??_Tmr_TmrBConfig,w
  4626  0EA0  00B2               	movwf	Tmr_TmrBPrSet@Prescaler
  4627  0EA1  0842               	movf	Tmr_TmrBConfig@TmrBConfig,w
  4628  0EA2  0086               	movwf	6
  4629  0EA3  0187               	clrf	7
  4630  0EA4  3F41               	moviw [1]fsr1
  4631  0EA5  00B3               	movwf	Tmr_TmrBPrSet@Postscaler
  4632  0EA6  0844               	movf	Tmr_TmrBConfig@TmrNumb,w
  4633  0EA7  3183  234B  318E   	fcall	_Tmr_TmrBPrSet
  4634  0EAA  3A01               	xorlw	1
  4635  0EAB  1903               	btfsc	3,2
  4636  0EAC                     l365:	
  4637                           ;tmr_drv.c: 330: {
  4638                           ;tmr_drv.c: 332: while(1);
  4639                           
  4640  0EAC  2EAC               	goto	l365
  4641                           
  4642                           ;tmr_drv.c: 333: }
  4643                           ;tmr_drv.c: 335: if (TmrBConfig->StartTmrRequest == StartTmrReq)
  4644  0EAD  0020               	movlb	0	; select bank0
  4645  0EAE  0842               	movf	Tmr_TmrBConfig@TmrBConfig,w
  4646  0EAF  3E05               	addlw	5
  4647  0EB0  0086               	movwf	6
  4648  0EB1  0187               	clrf	7
  4649  0EB2  0301               	decf	1,w
  4650  0EB3  1D03               	btfss	3,2
  4651  0EB4  0008               	return
  4652                           
  4653                           ;tmr_drv.c: 336: {
  4654                           ;tmr_drv.c: 338: Tmr_StartTmr(TmrNumb);
  4655  0EB5  0844               	movf	Tmr_TmrBConfig@TmrNumb,w
  4656  0EB6  318B  2305         	fcall	_Tmr_StartTmr
  4657                           
  4658                           ;tmr_drv.c: 339: }
  4659  0EB8  0008               	return
  4660  0EB9                     __end_of_Tmr_TmrBConfig:	
  4661                           ;tmr_drv.c: 340: else
  4662                           ;tmr_drv.c: 341: {
  4663                           
  4664                           
  4665                           	psect	text6
  4666  034B                     __ptext6:	
  4667 ;; *************** function _Tmr_TmrBPrSet *****************
  4668 ;; Defined at:
  4669 ;;		line 225 in file "../../../Framework/MercuryFwk/Source/c/01_Hal/02_Drv/tmr_drv.c"
  4670 ;; Parameters:    Size  Location     Type
  4671 ;;  TmrNumb         1    wreg     unsigned char 
  4672 ;;  IntFreqHz       2   16[BANK0 ] unsigned short 
  4673 ;;  Prescaler       1   18[BANK0 ] unsigned char 
  4674 ;;  Postscaler      1   19[BANK0 ] unsigned char 
  4675 ;; Auto vars:     Size  Location     Type
  4676 ;;  TmrNumb         1   28[BANK0 ] unsigned char 
  4677 ;;  Divisor         4   30[BANK0 ] unsigned long 
  4678 ;;  TmrBPrCfgSts    1   29[BANK0 ] enum E3370
  4679 ;; Return value:  Size  Location     Type
  4680 ;;                  1    wreg      enum E3370
  4681 ;; Registers used:
  4682 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  4683 ;; Tracked objects:
  4684 ;;		On entry : 0/0
  4685 ;;		On exit  : 0/0
  4686 ;;		Unchanged: 0/0
  4687 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4688 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4689 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4690 ;;      Temps:          0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4691 ;;      Totals:         0      18       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4692 ;;Total ram usage:       18 bytes
  4693 ;; Hardware stack levels used:    1
  4694 ;; Hardware stack levels required when called:    3
  4695 ;; This function calls:
  4696 ;;		___lldiv
  4697 ;;		___lmul
  4698 ;;		___wmul
  4699 ;; This function is called by:
  4700 ;;		_Tmr_TmrBConfig
  4701 ;; This function uses a non-reentrant model
  4702 ;;
  4703                           
  4704                           
  4705                           ;psect for function _Tmr_TmrBPrSet
  4706  034B                     _Tmr_TmrBPrSet:	
  4707                           
  4708                           ;incstack = 0
  4709                           ; Regs used in _Tmr_TmrBPrSet: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  4710                           ;Tmr_TmrBPrSet@TmrNumb stored from wreg
  4711  034B  0020               	movlb	0	; select bank0
  4712  034C  00BC               	movwf	Tmr_TmrBPrSet@TmrNumb
  4713                           
  4714                           ;tmr_drv.c: 227: CfgStsType TmrBPrCfgSts;
  4715                           ;tmr_drv.c: 228: UINT32 Divisor = 0;
  4716  034D  3000               	movlw	0
  4717  034E  00C1               	movwf	Tmr_TmrBPrSet@Divisor+3
  4718  034F  3000               	movlw	0
  4719  0350  00C0               	movwf	Tmr_TmrBPrSet@Divisor+2
  4720  0351  3000               	movlw	0
  4721  0352  00BF               	movwf	Tmr_TmrBPrSet@Divisor+1
  4722  0353  3000               	movlw	0
  4723  0354  00BE               	movwf	Tmr_TmrBPrSet@Divisor
  4724                           
  4725                           ;tmr_drv.c: 231: Divisor = (UINT32)Prescaler*(UINT32)Postscaler*(UINT32)IntFreqHz;
  4726  0355  0833               	movf	Tmr_TmrBPrSet@Postscaler,w
  4727  0356  00B4               	movwf	??_Tmr_TmrBPrSet
  4728  0357  01B5               	clrf	??_Tmr_TmrBPrSet+1
  4729  0358  0834               	movf	??_Tmr_TmrBPrSet,w
  4730  0359  00A2               	movwf	___wmul@multiplicand
  4731  035A  0835               	movf	??_Tmr_TmrBPrSet+1,w
  4732  035B  00A3               	movwf	___wmul@multiplicand+1
  4733  035C  0832               	movf	Tmr_TmrBPrSet@Prescaler,w
  4734  035D  00B6               	movwf	??_Tmr_TmrBPrSet+2
  4735  035E  01B7               	clrf	??_Tmr_TmrBPrSet+3
  4736  035F  0836               	movf	??_Tmr_TmrBPrSet+2,w
  4737  0360  00A0               	movwf	___wmul@multiplier
  4738  0361  0837               	movf	??_Tmr_TmrBPrSet+3,w
  4739  0362  00A1               	movwf	___wmul@multiplier+1
  4740  0363  3187  27E4  3183   	fcall	___wmul
  4741  0366  0020               	movlb	0	; select bank0
  4742  0367  0820               	movf	?___wmul,w
  4743  0368  00B8               	movwf	??_Tmr_TmrBPrSet+4
  4744  0369  0821               	movf	?___wmul+1,w
  4745  036A  00B9               	movwf	??_Tmr_TmrBPrSet+5
  4746  036B  01BA               	clrf	??_Tmr_TmrBPrSet+6
  4747  036C  01BB               	clrf	??_Tmr_TmrBPrSet+7
  4748  036D  083B               	movf	??_Tmr_TmrBPrSet+7,w
  4749  036E  00A7               	movwf	___lmul@multiplier+3
  4750  036F  083A               	movf	??_Tmr_TmrBPrSet+6,w
  4751  0370  00A6               	movwf	___lmul@multiplier+2
  4752  0371  0839               	movf	??_Tmr_TmrBPrSet+5,w
  4753  0372  00A5               	movwf	___lmul@multiplier+1
  4754  0373  0838               	movf	??_Tmr_TmrBPrSet+4,w
  4755  0374  00A4               	movwf	___lmul@multiplier
  4756  0375  0830               	movf	Tmr_TmrBPrSet@IntFreqHz,w
  4757  0376  00A8               	movwf	___lmul@multiplicand
  4758  0377  0831               	movf	Tmr_TmrBPrSet@IntFreqHz+1,w
  4759  0378  00A9               	movwf	___lmul@multiplicand+1
  4760  0379  01AA               	clrf	___lmul@multiplicand+2
  4761  037A  01AB               	clrf	___lmul@multiplicand+3
  4762  037B  318C  24B0  3183   	fcall	___lmul
  4763  037E  0020               	movlb	0	; select bank0
  4764  037F  0827               	movf	?___lmul+3,w
  4765  0380  00C1               	movwf	Tmr_TmrBPrSet@Divisor+3
  4766  0381  0826               	movf	?___lmul+2,w
  4767  0382  00C0               	movwf	Tmr_TmrBPrSet@Divisor+2
  4768  0383  0825               	movf	?___lmul+1,w
  4769  0384  00BF               	movwf	Tmr_TmrBPrSet@Divisor+1
  4770  0385  0824               	movf	?___lmul,w
  4771  0386  00BE               	movwf	Tmr_TmrBPrSet@Divisor
  4772                           
  4773                           ;tmr_drv.c: 234: if (((((UINT32)(16000000))/4)/Divisor) <= 255)
  4774  0387  0841               	movf	Tmr_TmrBPrSet@Divisor+3,w
  4775  0388  00A3               	movwf	___lldiv@divisor+3
  4776  0389  0840               	movf	Tmr_TmrBPrSet@Divisor+2,w
  4777  038A  00A2               	movwf	___lldiv@divisor+2
  4778  038B  083F               	movf	Tmr_TmrBPrSet@Divisor+1,w
  4779  038C  00A1               	movwf	___lldiv@divisor+1
  4780  038D  083E               	movf	Tmr_TmrBPrSet@Divisor,w
  4781  038E  00A0               	movwf	___lldiv@divisor
  4782  038F  3000               	movlw	0
  4783  0390  00A7               	movwf	___lldiv@dividend+3
  4784  0391  303D               	movlw	61
  4785  0392  00A6               	movwf	___lldiv@dividend+2
  4786  0393  3009               	movlw	9
  4787  0394  00A5               	movwf	___lldiv@dividend+1
  4788  0395  3000               	movlw	0
  4789  0396  00A4               	movwf	___lldiv@dividend
  4790  0397  318F  2755  3183   	fcall	___lldiv
  4791  039A  0020               	movlb	0	; select bank0
  4792  039B  0823               	movf	?___lldiv+3,w
  4793  039C  1D03               	btfss	3,2
  4794  039D  2BFD               	goto	l341
  4795  039E  0822               	movf	?___lldiv+2,w
  4796  039F  1D03               	btfss	3,2
  4797  03A0  2BFD               	goto	l341
  4798  03A1  3001               	movlw	1
  4799  03A2  0221               	subwf	?___lldiv+1,w
  4800  03A3  1C03               	btfss	3,0
  4801  03A4  2BEE               	goto	l4021
  4802  03A5  2BFD               	goto	l341
  4803  03A6                     l4013:	
  4804                           ;tmr_drv.c: 238: {
  4805                           ;tmr_drv.c: 239: case ((UINT8)(2)):
  4806                           
  4807                           ;tmr_drv.c: 235: {
  4808                           ;tmr_drv.c: 237: switch (TmrNumb)
  4809                           
  4810                           
  4811                           ;tmr_drv.c: 241: PR2 = (((UINT32)(16000000))/4)/Divisor;
  4812  03A6  0841               	movf	Tmr_TmrBPrSet@Divisor+3,w
  4813  03A7  00A3               	movwf	___lldiv@divisor+3
  4814  03A8  0840               	movf	Tmr_TmrBPrSet@Divisor+2,w
  4815  03A9  00A2               	movwf	___lldiv@divisor+2
  4816  03AA  083F               	movf	Tmr_TmrBPrSet@Divisor+1,w
  4817  03AB  00A1               	movwf	___lldiv@divisor+1
  4818  03AC  083E               	movf	Tmr_TmrBPrSet@Divisor,w
  4819  03AD  00A0               	movwf	___lldiv@divisor
  4820  03AE  3000               	movlw	0
  4821  03AF  00A7               	movwf	___lldiv@dividend+3
  4822  03B0  303D               	movlw	61
  4823  03B1  00A6               	movwf	___lldiv@dividend+2
  4824  03B2  3009               	movlw	9
  4825  03B3  00A5               	movwf	___lldiv@dividend+1
  4826  03B4  3000               	movlw	0
  4827  03B5  00A4               	movwf	___lldiv@dividend
  4828  03B6  318F  2755  3183   	fcall	___lldiv
  4829  03B9  0020               	movlb	0	; select bank0
  4830  03BA  0820               	movf	?___lldiv,w
  4831  03BB  009B               	movwf	27	;volatile
  4832                           
  4833                           ;tmr_drv.c: 242: break;
  4834  03BC  2BFA               	goto	l4023
  4835  03BD                     l4015:	
  4836                           ;tmr_drv.c: 244: case ((UINT8)(4)):
  4837                           
  4838                           
  4839                           ;tmr_drv.c: 246: PR4 = (((UINT32)(16000000))/4)/Divisor;
  4840  03BD  0841               	movf	Tmr_TmrBPrSet@Divisor+3,w
  4841  03BE  00A3               	movwf	___lldiv@divisor+3
  4842  03BF  0840               	movf	Tmr_TmrBPrSet@Divisor+2,w
  4843  03C0  00A2               	movwf	___lldiv@divisor+2
  4844  03C1  083F               	movf	Tmr_TmrBPrSet@Divisor+1,w
  4845  03C2  00A1               	movwf	___lldiv@divisor+1
  4846  03C3  083E               	movf	Tmr_TmrBPrSet@Divisor,w
  4847  03C4  00A0               	movwf	___lldiv@divisor
  4848  03C5  3000               	movlw	0
  4849  03C6  00A7               	movwf	___lldiv@dividend+3
  4850  03C7  303D               	movlw	61
  4851  03C8  00A6               	movwf	___lldiv@dividend+2
  4852  03C9  3009               	movlw	9
  4853  03CA  00A5               	movwf	___lldiv@dividend+1
  4854  03CB  3000               	movlw	0
  4855  03CC  00A4               	movwf	___lldiv@dividend
  4856  03CD  318F  2755  3183   	fcall	___lldiv
  4857  03D0  0020               	movlb	0	; select bank0
  4858  03D1  0820               	movf	?___lldiv,w
  4859  03D2  0028               	movlb	8	; select bank8
  4860  03D3  0096               	movwf	22	;volatile
  4861                           
  4862                           ;tmr_drv.c: 247: break;
  4863  03D4  2BFA               	goto	l4023
  4864  03D5                     l4017:	
  4865                           ;tmr_drv.c: 249: case ((UINT8)(6)):
  4866                           
  4867                           
  4868                           ;tmr_drv.c: 251: PR6 = (((UINT32)(16000000))/4)/Divisor;
  4869  03D5  0020               	movlb	0	; select bank0
  4870  03D6  0841               	movf	Tmr_TmrBPrSet@Divisor+3,w
  4871  03D7  00A3               	movwf	___lldiv@divisor+3
  4872  03D8  0840               	movf	Tmr_TmrBPrSet@Divisor+2,w
  4873  03D9  00A2               	movwf	___lldiv@divisor+2
  4874  03DA  083F               	movf	Tmr_TmrBPrSet@Divisor+1,w
  4875  03DB  00A1               	movwf	___lldiv@divisor+1
  4876  03DC  083E               	movf	Tmr_TmrBPrSet@Divisor,w
  4877  03DD  00A0               	movwf	___lldiv@divisor
  4878  03DE  3000               	movlw	0
  4879  03DF  00A7               	movwf	___lldiv@dividend+3
  4880  03E0  303D               	movlw	61
  4881  03E1  00A6               	movwf	___lldiv@dividend+2
  4882  03E2  3009               	movlw	9
  4883  03E3  00A5               	movwf	___lldiv@dividend+1
  4884  03E4  3000               	movlw	0
  4885  03E5  00A4               	movwf	___lldiv@dividend
  4886  03E6  318F  2755  3183   	fcall	___lldiv
  4887  03E9  0020               	movlb	0	; select bank0
  4888  03EA  0820               	movf	?___lldiv,w
  4889  03EB  0028               	movlb	8	; select bank8
  4890  03EC  009D               	movwf	29	;volatile
  4891                           
  4892                           ;tmr_drv.c: 256: }
  4893                           
  4894                           ;tmr_drv.c: 255: break;
  4895                           
  4896                           ;tmr_drv.c: 254: default:
  4897                           
  4898                           ;tmr_drv.c: 252: break;
  4899  03ED  2BFA               	goto	l4023
  4900  03EE                     l4021:	
  4901  03EE  0020               	movlb	0	; select bank0
  4902  03EF  083C               	movf	Tmr_TmrBPrSet@TmrNumb,w
  4903                           
  4904                           ; Switch size 1, requested type "space"
  4905                           ; Number of cases is 3, Range of values is 2 to 6
  4906                           ; switch strategies available:
  4907                           ; Name         Instructions Cycles
  4908                           ; simple_byte           10     6 (average)
  4909                           ; direct_byte           19     9 (fixed)
  4910                           ; jumptable            263     9 (fixed)
  4911                           ;	Chosen strategy is simple_byte
  4912  03F0  3A02               	xorlw	2	; case 2
  4913  03F1  1903               	skipnz
  4914  03F2  2BA6               	goto	l4013
  4915  03F3  3A06               	xorlw	6	; case 4
  4916  03F4  1903               	skipnz
  4917  03F5  2BBD               	goto	l4015
  4918  03F6  3A02               	xorlw	2	; case 6
  4919  03F7  1903               	skipnz
  4920  03F8  2BD5               	goto	l4017
  4921  03F9  2BFA               	goto	l4023
  4922  03FA                     l4023:	
  4923                           
  4924                           ;tmr_drv.c: 259: TmrBPrCfgSts = CfgOk;
  4925  03FA  0020               	movlb	0	; select bank0
  4926  03FB  01BD               	clrf	Tmr_TmrBPrSet@TmrBPrCfgSts
  4927                           
  4928                           ;tmr_drv.c: 260: }
  4929  03FC  2BFF               	goto	l4025
  4930  03FD                     l341:	
  4931                           
  4932                           ;tmr_drv.c: 261: else
  4933                           ;tmr_drv.c: 262: {
  4934                           ;tmr_drv.c: 264: TmrBPrCfgSts = CfgError;
  4935  03FD  01BD               	clrf	Tmr_TmrBPrSet@TmrBPrCfgSts
  4936  03FE  0ABD               	incf	Tmr_TmrBPrSet@TmrBPrCfgSts,f
  4937  03FF                     l4025:	
  4938                           
  4939                           ;tmr_drv.c: 265: }
  4940                           ;tmr_drv.c: 268: return TmrBPrCfgSts;
  4941  03FF  083D               	movf	Tmr_TmrBPrSet@TmrBPrCfgSts,w
  4942  0400  0008               	return
  4943  0401                     __end_of_Tmr_TmrBPrSet:	
  4944                           
  4945                           	psect	text7
  4946  07E4                     __ptext7:	
  4947 ;; *************** function ___wmul *****************
  4948 ;; Defined at:
  4949 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\Umul16.c"
  4950 ;; Parameters:    Size  Location     Type
  4951 ;;  multiplier      2    0[BANK0 ] unsigned int 
  4952 ;;  multiplicand    2    2[BANK0 ] unsigned int 
  4953 ;; Auto vars:     Size  Location     Type
  4954 ;;  product         2    4[COMMON] unsigned int 
  4955 ;; Return value:  Size  Location     Type
  4956 ;;                  2    0[BANK0 ] unsigned int 
  4957 ;; Registers used:
  4958 ;;		wreg, status,2, status,0
  4959 ;; Tracked objects:
  4960 ;;		On entry : 0/0
  4961 ;;		On exit  : 0/0
  4962 ;;		Unchanged: 0/0
  4963 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4964 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4965 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4966 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4967 ;;      Totals:         2       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4968 ;;Total ram usage:        6 bytes
  4969 ;; Hardware stack levels used:    1
  4970 ;; Hardware stack levels required when called:    2
  4971 ;; This function calls:
  4972 ;;		Nothing
  4973 ;; This function is called by:
  4974 ;;		_Tmr_TmrBPrSet
  4975 ;; This function uses a non-reentrant model
  4976 ;;
  4977                           
  4978                           
  4979                           ;psect for function ___wmul
  4980  07E4                     ___wmul:	
  4981                           
  4982                           ;incstack = 0
  4983                           ; Regs used in ___wmul: [wreg+status,2+status,0]
  4984  07E4  01F4               	clrf	___wmul@product
  4985  07E5  01F5               	clrf	___wmul@product+1
  4986  07E6                     l3933:	
  4987  07E6  0020               	movlb	0	; select bank0
  4988  07E7  1C20               	btfss	___wmul@multiplier,0
  4989  07E8  2FED               	goto	l1064
  4990  07E9  0822               	movf	___wmul@multiplicand,w
  4991  07EA  07F4               	addwf	___wmul@product,f
  4992  07EB  0823               	movf	___wmul@multiplicand+1,w
  4993  07EC  3DF5               	addwfc	___wmul@product+1,f
  4994  07ED                     l1064:	
  4995  07ED  3001               	movlw	1
  4996  07EE                     u2855:	
  4997  07EE  35A2               	lslf	___wmul@multiplicand,f
  4998  07EF  0DA3               	rlf	___wmul@multiplicand+1,f
  4999  07F0  0B89               	decfsz	9,f
  5000  07F1  2FEE               	goto	u2855
  5001  07F2  3001               	movlw	1
  5002  07F3                     u2865:	
  5003  07F3  36A1               	lsrf	___wmul@multiplier+1,f
  5004  07F4  0CA0               	rrf	___wmul@multiplier,f
  5005  07F5  0B89               	decfsz	9,f
  5006  07F6  2FF3               	goto	u2865
  5007  07F7  0820               	movf	___wmul@multiplier,w
  5008  07F8  0421               	iorwf	___wmul@multiplier+1,w
  5009  07F9  1D03               	btfss	3,2
  5010  07FA  2FE6               	goto	l3933
  5011  07FB  0875               	movf	___wmul@product+1,w
  5012  07FC  00A1               	movwf	?___wmul+1
  5013  07FD  0874               	movf	___wmul@product,w
  5014  07FE  00A0               	movwf	?___wmul
  5015  07FF  0008               	return
  5016  0800                     __end_of___wmul:	
  5017                           
  5018                           	psect	text8
  5019  0CB0                     __ptext8:	
  5020 ;; *************** function ___lmul *****************
  5021 ;; Defined at:
  5022 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\Umul32.c"
  5023 ;; Parameters:    Size  Location     Type
  5024 ;;  multiplier      4    4[BANK0 ] unsigned long 
  5025 ;;  multiplicand    4    8[BANK0 ] unsigned long 
  5026 ;; Auto vars:     Size  Location     Type
  5027 ;;  product         4   12[BANK0 ] unsigned long 
  5028 ;; Return value:  Size  Location     Type
  5029 ;;                  4    4[BANK0 ] unsigned long 
  5030 ;; Registers used:
  5031 ;;		wreg, status,2, status,0
  5032 ;; Tracked objects:
  5033 ;;		On entry : 0/0
  5034 ;;		On exit  : 0/0
  5035 ;;		Unchanged: 0/0
  5036 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5037 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5038 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5039 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5040 ;;      Totals:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5041 ;;Total ram usage:       12 bytes
  5042 ;; Hardware stack levels used:    1
  5043 ;; Hardware stack levels required when called:    2
  5044 ;; This function calls:
  5045 ;;		Nothing
  5046 ;; This function is called by:
  5047 ;;		_Tmr_TmrBPrSet
  5048 ;; This function uses a non-reentrant model
  5049 ;;
  5050                           
  5051                           
  5052                           ;psect for function ___lmul
  5053  0CB0                     ___lmul:	
  5054                           
  5055                           ;incstack = 0
  5056                           ; Regs used in ___lmul: [wreg+status,2+status,0]
  5057  0CB0  3000               	movlw	0
  5058  0CB1  0020               	movlb	0	; select bank0
  5059  0CB2  00AF               	movwf	___lmul@product+3
  5060  0CB3  3000               	movlw	0
  5061  0CB4  00AE               	movwf	___lmul@product+2
  5062  0CB5  3000               	movlw	0
  5063  0CB6  00AD               	movwf	___lmul@product+1
  5064  0CB7  3000               	movlw	0
  5065  0CB8  00AC               	movwf	___lmul@product
  5066  0CB9                     l2941:	
  5067  0CB9  1C24               	btfss	___lmul@multiplier,0
  5068  0CBA  2CC3               	goto	l2945
  5069  0CBB  0828               	movf	___lmul@multiplicand,w
  5070  0CBC  07AC               	addwf	___lmul@product,f
  5071  0CBD  0829               	movf	___lmul@multiplicand+1,w
  5072  0CBE  3DAD               	addwfc	___lmul@product+1,f
  5073  0CBF  082A               	movf	___lmul@multiplicand+2,w
  5074  0CC0  3DAE               	addwfc	___lmul@product+2,f
  5075  0CC1  082B               	movf	___lmul@multiplicand+3,w
  5076  0CC2  3DAF               	addwfc	___lmul@product+3,f
  5077  0CC3                     l2945:	
  5078  0CC3  3001               	movlw	1
  5079  0CC4                     u1705:	
  5080  0CC4  35A8               	lslf	___lmul@multiplicand,f
  5081  0CC5  0DA9               	rlf	___lmul@multiplicand+1,f
  5082  0CC6  0DAA               	rlf	___lmul@multiplicand+2,f
  5083  0CC7  0DAB               	rlf	___lmul@multiplicand+3,f
  5084  0CC8  0B89               	decfsz	9,f
  5085  0CC9  2CC4               	goto	u1705
  5086  0CCA  3001               	movlw	1
  5087  0CCB                     u1715:	
  5088  0CCB  36A7               	lsrf	___lmul@multiplier+3,f
  5089  0CCC  0CA6               	rrf	___lmul@multiplier+2,f
  5090  0CCD  0CA5               	rrf	___lmul@multiplier+1,f
  5091  0CCE  0CA4               	rrf	___lmul@multiplier,f
  5092  0CCF  0B89               	decfsz	9,f
  5093  0CD0  2CCB               	goto	u1715
  5094  0CD1  0827               	movf	___lmul@multiplier+3,w
  5095  0CD2  0426               	iorwf	___lmul@multiplier+2,w
  5096  0CD3  0425               	iorwf	___lmul@multiplier+1,w
  5097  0CD4  0424               	iorwf	___lmul@multiplier,w
  5098  0CD5  1D03               	skipz
  5099  0CD6  2CB9               	goto	l2941
  5100  0CD7  082F               	movf	___lmul@product+3,w
  5101  0CD8  00A7               	movwf	?___lmul+3
  5102  0CD9  082E               	movf	___lmul@product+2,w
  5103  0CDA  00A6               	movwf	?___lmul+2
  5104  0CDB  082D               	movf	___lmul@product+1,w
  5105  0CDC  00A5               	movwf	?___lmul+1
  5106  0CDD  082C               	movf	___lmul@product,w
  5107  0CDE  00A4               	movwf	?___lmul
  5108  0CDF  0008               	return
  5109  0CE0                     __end_of___lmul:	
  5110                           
  5111                           	psect	text9
  5112  0F55                     __ptext9:	
  5113 ;; *************** function ___lldiv *****************
  5114 ;; Defined at:
  5115 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\lldiv.c"
  5116 ;; Parameters:    Size  Location     Type
  5117 ;;  divisor         4    0[BANK0 ] unsigned long 
  5118 ;;  dividend        4    4[BANK0 ] unsigned long 
  5119 ;; Auto vars:     Size  Location     Type
  5120 ;;  quotient        4    8[BANK0 ] unsigned long 
  5121 ;;  counter         1   12[BANK0 ] unsigned char 
  5122 ;; Return value:  Size  Location     Type
  5123 ;;                  4    0[BANK0 ] unsigned long 
  5124 ;; Registers used:
  5125 ;;		wreg, status,2, status,0
  5126 ;; Tracked objects:
  5127 ;;		On entry : 0/0
  5128 ;;		On exit  : 0/0
  5129 ;;		Unchanged: 0/0
  5130 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5131 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5132 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5133 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5134 ;;      Totals:         1      13       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5135 ;;Total ram usage:       14 bytes
  5136 ;; Hardware stack levels used:    1
  5137 ;; Hardware stack levels required when called:    2
  5138 ;; This function calls:
  5139 ;;		Nothing
  5140 ;; This function is called by:
  5141 ;;		_Tmr_TmrBPrSet
  5142 ;; This function uses a non-reentrant model
  5143 ;;
  5144                           
  5145                           
  5146                           ;psect for function ___lldiv
  5147  0F55                     ___lldiv:	
  5148                           
  5149                           ;incstack = 0
  5150                           ; Regs used in ___lldiv: [wreg+status,2+status,0]
  5151  0F55  3000               	movlw	0
  5152  0F56  0020               	movlb	0	; select bank0
  5153  0F57  00AB               	movwf	___lldiv@quotient+3
  5154  0F58  3000               	movlw	0
  5155  0F59  00AA               	movwf	___lldiv@quotient+2
  5156  0F5A  3000               	movlw	0
  5157  0F5B  00A9               	movwf	___lldiv@quotient+1
  5158  0F5C  3000               	movlw	0
  5159  0F5D  00A8               	movwf	___lldiv@quotient
  5160  0F5E  0823               	movf	___lldiv@divisor+3,w
  5161  0F5F  0422               	iorwf	___lldiv@divisor+2,w
  5162  0F60  0421               	iorwf	___lldiv@divisor+1,w
  5163  0F61  0420               	iorwf	___lldiv@divisor,w
  5164  0F62  1903               	skipnz
  5165  0F63  2F9F               	goto	l3965
  5166  0F64  01AC               	clrf	___lldiv@counter
  5167  0F65  0AAC               	incf	___lldiv@counter,f
  5168  0F66                     l3951:	
  5169  0F66  1BA3               	btfsc	___lldiv@divisor+3,7
  5170  0F67  2F74               	goto	l3953
  5171  0F68  3001               	movlw	1
  5172  0F69                     u2895:	
  5173  0F69  35A0               	lslf	___lldiv@divisor,f
  5174  0F6A  0DA1               	rlf	___lldiv@divisor+1,f
  5175  0F6B  0DA2               	rlf	___lldiv@divisor+2,f
  5176  0F6C  0DA3               	rlf	___lldiv@divisor+3,f
  5177  0F6D  0B89               	decfsz	9,f
  5178  0F6E  2F69               	goto	u2895
  5179  0F6F  3001               	movlw	1
  5180  0F70  00F4               	movwf	??___lldiv
  5181  0F71  0874               	movf	??___lldiv,w
  5182  0F72  07AC               	addwf	___lldiv@counter,f
  5183  0F73  2F66               	goto	l3951
  5184  0F74                     l3953:	
  5185  0F74  3001               	movlw	1
  5186  0F75                     u2915:	
  5187  0F75  35A8               	lslf	___lldiv@quotient,f
  5188  0F76  0DA9               	rlf	___lldiv@quotient+1,f
  5189  0F77  0DAA               	rlf	___lldiv@quotient+2,f
  5190  0F78  0DAB               	rlf	___lldiv@quotient+3,f
  5191  0F79  0B89               	decfsz	9,f
  5192  0F7A  2F75               	goto	u2915
  5193  0F7B  0823               	movf	___lldiv@divisor+3,w
  5194  0F7C  0227               	subwf	___lldiv@dividend+3,w
  5195  0F7D  1D03               	skipz
  5196  0F7E  2F89               	goto	u2925
  5197  0F7F  0822               	movf	___lldiv@divisor+2,w
  5198  0F80  0226               	subwf	___lldiv@dividend+2,w
  5199  0F81  1D03               	skipz
  5200  0F82  2F89               	goto	u2925
  5201  0F83  0821               	movf	___lldiv@divisor+1,w
  5202  0F84  0225               	subwf	___lldiv@dividend+1,w
  5203  0F85  1D03               	skipz
  5204  0F86  2F89               	goto	u2925
  5205  0F87  0820               	movf	___lldiv@divisor,w
  5206  0F88  0224               	subwf	___lldiv@dividend,w
  5207  0F89                     u2925:	
  5208  0F89  1C03               	skipc
  5209  0F8A  2F94               	goto	l3961
  5210  0F8B  0820               	movf	___lldiv@divisor,w
  5211  0F8C  02A4               	subwf	___lldiv@dividend,f
  5212  0F8D  0821               	movf	___lldiv@divisor+1,w
  5213  0F8E  3BA5               	subwfb	___lldiv@dividend+1,f
  5214  0F8F  0822               	movf	___lldiv@divisor+2,w
  5215  0F90  3BA6               	subwfb	___lldiv@dividend+2,f
  5216  0F91  0823               	movf	___lldiv@divisor+3,w
  5217  0F92  3BA7               	subwfb	___lldiv@dividend+3,f
  5218  0F93  1428               	bsf	___lldiv@quotient,0
  5219  0F94                     l3961:	
  5220  0F94  3001               	movlw	1
  5221  0F95                     u2935:	
  5222  0F95  36A3               	lsrf	___lldiv@divisor+3,f
  5223  0F96  0CA2               	rrf	___lldiv@divisor+2,f
  5224  0F97  0CA1               	rrf	___lldiv@divisor+1,f
  5225  0F98  0CA0               	rrf	___lldiv@divisor,f
  5226  0F99  0B89               	decfsz	9,f
  5227  0F9A  2F95               	goto	u2935
  5228  0F9B  3001               	movlw	1
  5229  0F9C  02AC               	subwf	___lldiv@counter,f
  5230  0F9D  1D03               	btfss	3,2
  5231  0F9E  2F74               	goto	l3953
  5232  0F9F                     l3965:	
  5233  0F9F  082B               	movf	___lldiv@quotient+3,w
  5234  0FA0  00A3               	movwf	?___lldiv+3
  5235  0FA1  082A               	movf	___lldiv@quotient+2,w
  5236  0FA2  00A2               	movwf	?___lldiv+2
  5237  0FA3  0829               	movf	___lldiv@quotient+1,w
  5238  0FA4  00A1               	movwf	?___lldiv+1
  5239  0FA5  0828               	movf	___lldiv@quotient,w
  5240  0FA6  00A0               	movwf	?___lldiv
  5241  0FA7  0008               	return
  5242  0FA8                     __end_of___lldiv:	
  5243                           
  5244                           	psect	text10
  5245  0C5A                     __ptext10:	
  5246 ;; *************** function _Tmr_TmrBIrqSet *****************
  5247 ;; Defined at:
  5248 ;;		line 182 in file "../../../Framework/MercuryFwk/Source/c/01_Hal/02_Drv/tmr_drv.c"
  5249 ;; Parameters:    Size  Location     Type
  5250 ;;  TmrNumb         1    wreg     unsigned char 
  5251 ;;  TmrIrqSts       1    4[COMMON] unsigned char 
  5252 ;; Auto vars:     Size  Location     Type
  5253 ;;  TmrNumb         1    5[COMMON] unsigned char 
  5254 ;; Return value:  Size  Location     Type
  5255 ;;                  1    wreg      void 
  5256 ;; Registers used:
  5257 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  5258 ;; Tracked objects:
  5259 ;;		On entry : 0/0
  5260 ;;		On exit  : 0/0
  5261 ;;		Unchanged: 0/0
  5262 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5263 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5264 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5265 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5266 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5267 ;;Total ram usage:        2 bytes
  5268 ;; Hardware stack levels used:    1
  5269 ;; Hardware stack levels required when called:    2
  5270 ;; This function calls:
  5271 ;;		Nothing
  5272 ;; This function is called by:
  5273 ;;		_Tmr_TmrBConfig
  5274 ;; This function uses a non-reentrant model
  5275 ;;
  5276                           
  5277                           
  5278                           ;psect for function _Tmr_TmrBIrqSet
  5279  0C5A                     _Tmr_TmrBIrqSet:	
  5280                           
  5281                           ;incstack = 0
  5282                           ; Regs used in _Tmr_TmrBIrqSet: [wreg-fsr0h+status,2+status,0]
  5283                           ;Tmr_TmrBIrqSet@TmrNumb stored from wreg
  5284  0C5A  00F5               	movwf	Tmr_TmrBIrqSet@TmrNumb
  5285                           
  5286                           ;tmr_drv.c: 185: switch (TmrNumb)
  5287  0C5B  2C77               	goto	l3099
  5288  0C5C                     l333:	
  5289                           ;tmr_drv.c: 186: {
  5290                           ;tmr_drv.c: 187: case ((UINT8)(2)):
  5291                           
  5292                           
  5293                           ;tmr_drv.c: 189: PIR1bits.TMR2IF = 0u;
  5294  0C5C  0020               	movlb	0	; select bank0
  5295  0C5D  1091               	bcf	17,1	;volatile
  5296                           
  5297                           ;tmr_drv.c: 191: PIE1bits.TMR2IE = TmrIrqSts;
  5298  0C5E  0C74               	rrf	Tmr_TmrBIrqSet@TmrIrqSts,w
  5299  0C5F  0021               	movlb	1	; select bank1
  5300  0C60  1C03               	skipc
  5301  0C61  1091               	bcf	17,1	;volatile
  5302  0C62  1803               	skipnc
  5303  0C63  1491               	bsf	17,1	;volatile
  5304                           
  5305                           ;tmr_drv.c: 192: break;
  5306  0C64  0008               	return
  5307  0C65                     l335:	
  5308                           ;tmr_drv.c: 194: case ((UINT8)(4)):
  5309                           
  5310                           
  5311                           ;tmr_drv.c: 196: PIR3bits.TMR4IF = 0u;
  5312  0C65  0020               	movlb	0	; select bank0
  5313  0C66  1093               	bcf	19,1	;volatile
  5314                           
  5315                           ;tmr_drv.c: 198: PIE3bits.TMR4IE = TmrIrqSts;
  5316  0C67  0C74               	rrf	Tmr_TmrBIrqSet@TmrIrqSts,w
  5317  0C68  0021               	movlb	1	; select bank1
  5318  0C69  1C03               	skipc
  5319  0C6A  1093               	bcf	19,1	;volatile
  5320  0C6B  1803               	skipnc
  5321  0C6C  1493               	bsf	19,1	;volatile
  5322                           
  5323                           ;tmr_drv.c: 199: break;
  5324  0C6D  0008               	return
  5325  0C6E                     l336:	
  5326                           ;tmr_drv.c: 201: case ((UINT8)(6)):
  5327                           
  5328                           
  5329                           ;tmr_drv.c: 203: PIR3bits.TMR6IF = 0u;
  5330  0C6E  0020               	movlb	0	; select bank0
  5331  0C6F  1193               	bcf	19,3	;volatile
  5332                           
  5333                           ;tmr_drv.c: 205: PIE3bits.TMR6IE = TmrIrqSts;
  5334  0C70  0C74               	rrf	Tmr_TmrBIrqSet@TmrIrqSts,w
  5335  0C71  0021               	movlb	1	; select bank1
  5336  0C72  1C03               	skipc
  5337  0C73  1193               	bcf	19,3	;volatile
  5338  0C74  1803               	skipnc
  5339  0C75  1593               	bsf	19,3	;volatile
  5340                           
  5341                           ;tmr_drv.c: 210: }
  5342                           
  5343                           ;tmr_drv.c: 209: break;
  5344                           
  5345                           ;tmr_drv.c: 208: default:
  5346                           
  5347                           ;tmr_drv.c: 206: break;
  5348  0C76  0008               	return
  5349  0C77                     l3099:	
  5350  0C77  0875               	movf	Tmr_TmrBIrqSet@TmrNumb,w
  5351                           
  5352                           ; Switch size 1, requested type "space"
  5353                           ; Number of cases is 3, Range of values is 2 to 6
  5354                           ; switch strategies available:
  5355                           ; Name         Instructions Cycles
  5356                           ; simple_byte           10     6 (average)
  5357                           ; direct_byte           19     9 (fixed)
  5358                           ; jumptable            263     9 (fixed)
  5359                           ;	Chosen strategy is simple_byte
  5360  0C78  3A02               	xorlw	2	; case 2
  5361  0C79  1903               	skipnz
  5362  0C7A  2C5C               	goto	l333
  5363  0C7B  3A06               	xorlw	6	; case 4
  5364  0C7C  1903               	skipnz
  5365  0C7D  2C65               	goto	l335
  5366  0C7E  3A02               	xorlw	2	; case 6
  5367  0C7F  1903               	skipnz
  5368  0C80  2C6E               	goto	l336
  5369  0C81  2C82               	goto	l338
  5370  0C82                     l338:	
  5371  0C82  0008               	return
  5372  0C83                     __end_of_Tmr_TmrBIrqSet:	
  5373                           
  5374                           	psect	text11
  5375  0B05                     __ptext11:	
  5376 ;; *************** function _Tmr_StartTmr *****************
  5377 ;; Defined at:
  5378 ;;		line 279 in file "../../../Framework/MercuryFwk/Source/c/01_Hal/02_Drv/tmr_drv.c"
  5379 ;; Parameters:    Size  Location     Type
  5380 ;;  TmrNumb         1    wreg     unsigned char 
  5381 ;; Auto vars:     Size  Location     Type
  5382 ;;  TmrNumb         1    4[COMMON] unsigned char 
  5383 ;; Return value:  Size  Location     Type
  5384 ;;                  1    wreg      void 
  5385 ;; Registers used:
  5386 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  5387 ;; Tracked objects:
  5388 ;;		On entry : 0/0
  5389 ;;		On exit  : 0/0
  5390 ;;		Unchanged: 0/0
  5391 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5392 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5393 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5394 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5395 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5396 ;;Total ram usage:        1 bytes
  5397 ;; Hardware stack levels used:    1
  5398 ;; Hardware stack levels required when called:    2
  5399 ;; This function calls:
  5400 ;;		Nothing
  5401 ;; This function is called by:
  5402 ;;		_Tmr_TmrBConfig
  5403 ;; This function uses a non-reentrant model
  5404 ;;
  5405                           
  5406                           
  5407                           ;psect for function _Tmr_StartTmr
  5408  0B05                     _Tmr_StartTmr:	
  5409                           
  5410                           ;incstack = 0
  5411                           ; Regs used in _Tmr_StartTmr: [wreg-fsr0h+status,2+status,0]
  5412                           ;Tmr_StartTmr@TmrNumb stored from wreg
  5413  0B05  00F4               	movwf	Tmr_StartTmr@TmrNumb
  5414                           
  5415                           ;tmr_drv.c: 282: switch (TmrNumb)
  5416  0B06  2B10               	goto	l3129
  5417  0B07                     l353:	
  5418                           ;tmr_drv.c: 283: {
  5419                           ;tmr_drv.c: 284: case ((UINT8)(2)):
  5420                           
  5421                           
  5422                           ;tmr_drv.c: 286: T2CONbits.TMR2ON = 1u;
  5423  0B07  0020               	movlb	0	; select bank0
  5424  0B08  151C               	bsf	28,2	;volatile
  5425                           
  5426                           ;tmr_drv.c: 287: break;
  5427  0B09  0008               	return
  5428  0B0A                     l355:	
  5429                           ;tmr_drv.c: 289: case ((UINT8)(4)):
  5430                           
  5431                           
  5432                           ;tmr_drv.c: 291: T4CONbits.TMR4ON = 1u;
  5433  0B0A  0028               	movlb	8	; select bank8
  5434  0B0B  1517               	bsf	23,2	;volatile
  5435                           
  5436                           ;tmr_drv.c: 292: break;
  5437  0B0C  0008               	return
  5438  0B0D                     l356:	
  5439                           ;tmr_drv.c: 294: case ((UINT8)(6)):
  5440                           
  5441                           
  5442                           ;tmr_drv.c: 296: T6CONbits.TMR6ON = 1u;
  5443  0B0D  0028               	movlb	8	; select bank8
  5444  0B0E  151E               	bsf	30,2	;volatile
  5445                           
  5446                           ;tmr_drv.c: 301: }
  5447                           
  5448                           ;tmr_drv.c: 300: break;
  5449                           
  5450                           ;tmr_drv.c: 299: default:
  5451                           
  5452                           ;tmr_drv.c: 297: break;
  5453  0B0F  0008               	return
  5454  0B10                     l3129:	
  5455  0B10  0874               	movf	Tmr_StartTmr@TmrNumb,w
  5456                           
  5457                           ; Switch size 1, requested type "space"
  5458                           ; Number of cases is 3, Range of values is 2 to 6
  5459                           ; switch strategies available:
  5460                           ; Name         Instructions Cycles
  5461                           ; simple_byte           10     6 (average)
  5462                           ; direct_byte           19     9 (fixed)
  5463                           ; jumptable            263     9 (fixed)
  5464                           ;	Chosen strategy is simple_byte
  5465  0B11  3A02               	xorlw	2	; case 2
  5466  0B12  1903               	skipnz
  5467  0B13  2B07               	goto	l353
  5468  0B14  3A06               	xorlw	6	; case 4
  5469  0B15  1903               	skipnz
  5470  0B16  2B0A               	goto	l355
  5471  0B17  3A02               	xorlw	2	; case 6
  5472  0B18  1903               	skipnz
  5473  0B19  2B0D               	goto	l356
  5474  0B1A  2B1B               	goto	l358
  5475  0B1B                     l358:	
  5476  0B1B  0008               	return
  5477  0B1C                     __end_of_Tmr_StartTmr:	
  5478                           
  5479                           	psect	text12
  5480  05CA                     __ptext12:	
  5481 ;; *************** function _TmrBInit *****************
  5482 ;; Defined at:
  5483 ;;		line 72 in file "../../../Framework/MercuryFwk/Source/c/01_Hal/02_Drv/tmr_drv.c"
  5484 ;; Parameters:    Size  Location     Type
  5485 ;;  TmrNumb         1    wreg     unsigned char 
  5486 ;;  Prescaler       1    4[COMMON] unsigned char 
  5487 ;;  Postscaler      1    5[COMMON] unsigned char 
  5488 ;; Auto vars:     Size  Location     Type
  5489 ;;  TmrNumb         1    1[BANK0 ] unsigned char 
  5490 ;; Return value:  Size  Location     Type
  5491 ;;                  1    wreg      void 
  5492 ;; Registers used:
  5493 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  5494 ;; Tracked objects:
  5495 ;;		On entry : 0/0
  5496 ;;		On exit  : 0/0
  5497 ;;		Unchanged: 0/0
  5498 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5499 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5500 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5501 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5502 ;;      Totals:         2       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5503 ;;Total ram usage:        4 bytes
  5504 ;; Hardware stack levels used:    1
  5505 ;; Hardware stack levels required when called:    2
  5506 ;; This function calls:
  5507 ;;		Nothing
  5508 ;; This function is called by:
  5509 ;;		_Tmr_TmrBConfig
  5510 ;; This function uses a non-reentrant model
  5511 ;;
  5512                           
  5513                           
  5514                           ;psect for function _TmrBInit
  5515  05CA                     _TmrBInit:	
  5516                           
  5517                           ;incstack = 0
  5518                           ; Regs used in _TmrBInit: [wreg-fsr0h+status,2+status,0]
  5519                           ;TmrBInit@TmrNumb stored from wreg
  5520  05CA  0020               	movlb	0	; select bank0
  5521  05CB  00A1               	movwf	TmrBInit@TmrNumb
  5522                           
  5523                           ;tmr_drv.c: 75: switch (TmrNumb)
  5524  05CC  2E38               	goto	l4003
  5525  05CD                     l308:	
  5526                           ;tmr_drv.c: 80: {
  5527                           ;tmr_drv.c: 81: case ((UINT8)(1)):
  5528                           
  5529                           ;tmr_drv.c: 79: switch (Prescaler)
  5530                           
  5531                           ;tmr_drv.c: 76: {
  5532                           ;tmr_drv.c: 77: case ((UINT8)(2)):
  5533                           
  5534                           
  5535                           ;tmr_drv.c: 83: T2CONbits.T2CKPS0 = 0u;
  5536  05CD  101C               	bcf	28,0	;volatile
  5537  05CE  2DD0               	goto	L2
  5538  05CF                     l310:	
  5539                           ;tmr_drv.c: 87: case ((UINT8)(4)):
  5540                           
  5541                           ;tmr_drv.c: 85: break;
  5542                           
  5543                           ;tmr_drv.c: 84: T2CONbits.T2CKPS1 = 0u;
  5544                           
  5545                           
  5546                           ;tmr_drv.c: 89: T2CONbits.T2CKPS0 = 1u;
  5547  05CF  141C               	bsf	28,0	;volatile
  5548  05D0                     L2:	
  5549                           
  5550                           ;tmr_drv.c: 90: T2CONbits.T2CKPS1 = 0u;
  5551  05D0  109C               	bcf	28,1	;volatile
  5552                           
  5553                           ;tmr_drv.c: 91: break;
  5554  05D1  2DE0               	goto	l3987
  5555  05D2                     l311:	
  5556                           ;tmr_drv.c: 93: case ((UINT8)(16)):
  5557                           
  5558                           
  5559                           ;tmr_drv.c: 94: T2CONbits.T2CKPS0 = 0u;
  5560  05D2  101C               	bcf	28,0	;volatile
  5561                           
  5562                           ;tmr_drv.c: 95: T2CONbits.T2CKPS1 = 1u;
  5563  05D3  149C               	bsf	28,1	;volatile
  5564                           
  5565                           ;tmr_drv.c: 100: }
  5566                           
  5567                           ;tmr_drv.c: 99: break;
  5568                           
  5569                           ;tmr_drv.c: 98: default:
  5570                           
  5571                           ;tmr_drv.c: 96: break;
  5572  05D4  2DE0               	goto	l3987
  5573  05D5                     l3985:	
  5574  05D5  0874               	movf	TmrBInit@Prescaler,w
  5575                           
  5576                           ; Switch size 1, requested type "space"
  5577                           ; Number of cases is 3, Range of values is 1 to 16
  5578                           ; switch strategies available:
  5579                           ; Name         Instructions Cycles
  5580                           ; simple_byte           10     6 (average)
  5581                           ; direct_byte           41     9 (fixed)
  5582                           ; jumptable            263     9 (fixed)
  5583                           ;	Chosen strategy is simple_byte
  5584  05D6  3A01               	xorlw	1	; case 1
  5585  05D7  1903               	skipnz
  5586  05D8  2DCD               	goto	l308
  5587  05D9  3A05               	xorlw	5	; case 4
  5588  05DA  1903               	skipnz
  5589  05DB  2DCF               	goto	l310
  5590  05DC  3A14               	xorlw	20	; case 16
  5591  05DD  1903               	skipnz
  5592  05DE  2DD2               	goto	l311
  5593  05DF  2DE0               	goto	l3987
  5594  05E0                     l3987:	
  5595                           
  5596                           ;tmr_drv.c: 103: T2CONbits.T2OUTPS = (Postscaler - 1);
  5597  05E0  0875               	movf	TmrBInit@Postscaler,w
  5598  05E1  3EFF               	addlw	255
  5599  05E2  00A0               	movwf	??_TmrBInit
  5600  05E3  0DA0               	rlf	??_TmrBInit,f
  5601  05E4  0DA0               	rlf	??_TmrBInit,f
  5602  05E5  0DA0               	rlf	??_TmrBInit,f
  5603  05E6  081C               	movf	28,w	;volatile
  5604  05E7  0620               	xorwf	??_TmrBInit,w
  5605  05E8  3987               	andlw	-121
  5606  05E9  0620               	xorwf	??_TmrBInit,w
  5607  05EA  009C               	movwf	28	;volatile
  5608                           
  5609                           ;tmr_drv.c: 104: break;
  5610  05EB  0008               	return
  5611  05EC                     l316:	
  5612                           ;tmr_drv.c: 109: {
  5613                           ;tmr_drv.c: 110: case ((UINT8)(1)):
  5614                           
  5615                           ;tmr_drv.c: 108: switch (Prescaler)
  5616                           
  5617                           ;tmr_drv.c: 106: case ((UINT8)(4)):
  5618                           
  5619                           
  5620                           ;tmr_drv.c: 112: T4CONbits.T4CKPS0 = 0u;
  5621  05EC  0028               	movlb	8	; select bank8
  5622  05ED  1017               	bcf	23,0	;volatile
  5623  05EE  2DF1               	goto	L3
  5624  05EF                     l318:	
  5625                           ;tmr_drv.c: 116: case ((UINT8)(4)):
  5626                           
  5627                           ;tmr_drv.c: 114: break;
  5628                           
  5629                           ;tmr_drv.c: 113: T4CONbits.T4CKPS1 = 0u;
  5630                           
  5631                           
  5632                           ;tmr_drv.c: 118: T4CONbits.T4CKPS0 = 1u;
  5633  05EF  0028               	movlb	8	; select bank8
  5634  05F0  1417               	bsf	23,0	;volatile
  5635  05F1                     L3:	
  5636                           
  5637                           ;tmr_drv.c: 119: T4CONbits.T4CKPS1 = 0u;
  5638  05F1  1097               	bcf	23,1	;volatile
  5639                           
  5640                           ;tmr_drv.c: 120: break;
  5641  05F2  2E02               	goto	l3993
  5642  05F3                     l319:	
  5643                           ;tmr_drv.c: 122: case ((UINT8)(16)):
  5644                           
  5645                           
  5646                           ;tmr_drv.c: 123: T4CONbits.T4CKPS0 = 0u;
  5647  05F3  0028               	movlb	8	; select bank8
  5648  05F4  1017               	bcf	23,0	;volatile
  5649                           
  5650                           ;tmr_drv.c: 124: T4CONbits.T4CKPS1 = 1u;
  5651  05F5  1497               	bsf	23,1	;volatile
  5652                           
  5653                           ;tmr_drv.c: 129: }
  5654                           
  5655                           ;tmr_drv.c: 128: break;
  5656                           
  5657                           ;tmr_drv.c: 127: default:
  5658                           
  5659                           ;tmr_drv.c: 125: break;
  5660  05F6  2E02               	goto	l3993
  5661  05F7                     l3991:	
  5662  05F7  0874               	movf	TmrBInit@Prescaler,w
  5663                           
  5664                           ; Switch size 1, requested type "space"
  5665                           ; Number of cases is 3, Range of values is 1 to 16
  5666                           ; switch strategies available:
  5667                           ; Name         Instructions Cycles
  5668                           ; simple_byte           10     6 (average)
  5669                           ; direct_byte           41     9 (fixed)
  5670                           ; jumptable            263     9 (fixed)
  5671                           ;	Chosen strategy is simple_byte
  5672  05F8  3A01               	xorlw	1	; case 1
  5673  05F9  1903               	skipnz
  5674  05FA  2DEC               	goto	l316
  5675  05FB  3A05               	xorlw	5	; case 4
  5676  05FC  1903               	skipnz
  5677  05FD  2DEF               	goto	l318
  5678  05FE  3A14               	xorlw	20	; case 16
  5679  05FF  1903               	skipnz
  5680  0600  2DF3               	goto	l319
  5681  0601  2E02               	goto	l3993
  5682  0602                     l3993:	
  5683                           
  5684                           ;tmr_drv.c: 132: T4CONbits.T4OUTPS = (Postscaler - 1);
  5685  0602  0875               	movf	TmrBInit@Postscaler,w
  5686  0603  3EFF               	addlw	255
  5687  0604  0020               	movlb	0	; select bank0
  5688  0605  00A0               	movwf	??_TmrBInit
  5689  0606  0DA0               	rlf	??_TmrBInit,f
  5690  0607  0DA0               	rlf	??_TmrBInit,f
  5691  0608  0DA0               	rlf	??_TmrBInit,f
  5692  0609  0028               	movlb	8	; select bank8
  5693  060A  0817               	movf	23,w	;volatile
  5694  060B  0020               	movlb	0	; select bank0
  5695  060C  0620               	xorwf	??_TmrBInit,w
  5696  060D  3987               	andlw	-121
  5697  060E  0620               	xorwf	??_TmrBInit,w
  5698  060F  0028               	movlb	8	; select bank8
  5699  0610  0097               	movwf	23	;volatile
  5700                           
  5701                           ;tmr_drv.c: 133: break;
  5702  0611  0008               	return
  5703  0612                     l323:	
  5704                           ;tmr_drv.c: 138: {
  5705                           ;tmr_drv.c: 139: case ((UINT8)(1)):
  5706                           
  5707                           ;tmr_drv.c: 137: switch (Prescaler)
  5708                           
  5709                           ;tmr_drv.c: 135: case ((UINT8)(6)):
  5710                           
  5711                           
  5712                           ;tmr_drv.c: 141: T6CONbits.T6CKPS0 = 0u;
  5713  0612  0028               	movlb	8	; select bank8
  5714  0613  101E               	bcf	30,0	;volatile
  5715  0614  2E17               	goto	L4
  5716  0615                     l325:	
  5717                           ;tmr_drv.c: 145: case ((UINT8)(4)):
  5718                           
  5719                           ;tmr_drv.c: 143: break;
  5720                           
  5721                           ;tmr_drv.c: 142: T6CONbits.T6CKPS1 = 0u;
  5722                           
  5723                           
  5724                           ;tmr_drv.c: 147: T6CONbits.T6CKPS0 = 1u;
  5725  0615  0028               	movlb	8	; select bank8
  5726  0616  141E               	bsf	30,0	;volatile
  5727  0617                     L4:	
  5728                           
  5729                           ;tmr_drv.c: 148: T6CONbits.T6CKPS1 = 0u;
  5730  0617  109E               	bcf	30,1	;volatile
  5731                           
  5732                           ;tmr_drv.c: 149: break;
  5733  0618  2E28               	goto	l3999
  5734  0619                     l326:	
  5735                           ;tmr_drv.c: 151: case ((UINT8)(16)):
  5736                           
  5737                           
  5738                           ;tmr_drv.c: 152: T6CONbits.T6CKPS0 = 0u;
  5739  0619  0028               	movlb	8	; select bank8
  5740  061A  101E               	bcf	30,0	;volatile
  5741                           
  5742                           ;tmr_drv.c: 153: T6CONbits.T6CKPS1 = 1u;
  5743  061B  149E               	bsf	30,1	;volatile
  5744                           
  5745                           ;tmr_drv.c: 158: }
  5746                           
  5747                           ;tmr_drv.c: 157: break;
  5748                           
  5749                           ;tmr_drv.c: 156: default:
  5750                           
  5751                           ;tmr_drv.c: 154: break;
  5752  061C  2E28               	goto	l3999
  5753  061D                     l3997:	
  5754  061D  0874               	movf	TmrBInit@Prescaler,w
  5755                           
  5756                           ; Switch size 1, requested type "space"
  5757                           ; Number of cases is 3, Range of values is 1 to 16
  5758                           ; switch strategies available:
  5759                           ; Name         Instructions Cycles
  5760                           ; simple_byte           10     6 (average)
  5761                           ; direct_byte           41     9 (fixed)
  5762                           ; jumptable            263     9 (fixed)
  5763                           ;	Chosen strategy is simple_byte
  5764  061E  3A01               	xorlw	1	; case 1
  5765  061F  1903               	skipnz
  5766  0620  2E12               	goto	l323
  5767  0621  3A05               	xorlw	5	; case 4
  5768  0622  1903               	skipnz
  5769  0623  2E15               	goto	l325
  5770  0624  3A14               	xorlw	20	; case 16
  5771  0625  1903               	skipnz
  5772  0626  2E19               	goto	l326
  5773  0627  2E28               	goto	l3999
  5774  0628                     l3999:	
  5775                           
  5776                           ;tmr_drv.c: 161: T6CONbits.T6OUTPS = (Postscaler - 1);
  5777  0628  0875               	movf	TmrBInit@Postscaler,w
  5778  0629  3EFF               	addlw	255
  5779  062A  0020               	movlb	0	; select bank0
  5780  062B  00A0               	movwf	??_TmrBInit
  5781  062C  0DA0               	rlf	??_TmrBInit,f
  5782  062D  0DA0               	rlf	??_TmrBInit,f
  5783  062E  0DA0               	rlf	??_TmrBInit,f
  5784  062F  0028               	movlb	8	; select bank8
  5785  0630  081E               	movf	30,w	;volatile
  5786  0631  0020               	movlb	0	; select bank0
  5787  0632  0620               	xorwf	??_TmrBInit,w
  5788  0633  3987               	andlw	-121
  5789  0634  0620               	xorwf	??_TmrBInit,w
  5790  0635  0028               	movlb	8	; select bank8
  5791  0636  009E               	movwf	30	;volatile
  5792                           
  5793                           ;tmr_drv.c: 166: }
  5794                           
  5795                           ;tmr_drv.c: 165: break;
  5796                           
  5797                           ;tmr_drv.c: 164: default:
  5798                           
  5799                           ;tmr_drv.c: 162: break;
  5800  0637  0008               	return
  5801  0638                     l4003:	
  5802  0638  0020               	movlb	0	; select bank0
  5803  0639  0821               	movf	TmrBInit@TmrNumb,w
  5804                           
  5805                           ; Switch size 1, requested type "space"
  5806                           ; Number of cases is 3, Range of values is 2 to 6
  5807                           ; switch strategies available:
  5808                           ; Name         Instructions Cycles
  5809                           ; simple_byte           10     6 (average)
  5810                           ; direct_byte           19     9 (fixed)
  5811                           ; jumptable            263     9 (fixed)
  5812                           ;	Chosen strategy is simple_byte
  5813  063A  3A02               	xorlw	2	; case 2
  5814  063B  1903               	skipnz
  5815  063C  2DD5               	goto	l3985
  5816  063D  3A06               	xorlw	6	; case 4
  5817  063E  1903               	skipnz
  5818  063F  2DF7               	goto	l3991
  5819  0640  3A02               	xorlw	2	; case 6
  5820  0641  1903               	skipnz
  5821  0642  2E1D               	goto	l3997
  5822  0643  2E44               	goto	l329
  5823  0644                     l329:	
  5824  0644  0008               	return
  5825  0645                     __end_of_TmrBInit:	
  5826                           
  5827                           	psect	text13
  5828  0AA3                     __ptext13:	
  5829 ;; *************** function _MainScheduler *****************
  5830 ;; Defined at:
  5831 ;;		line 79 in file "../../../Framework/MercuryFwk/Source/c/02_Osl/os_sched.c"
  5832 ;; Parameters:    Size  Location     Type
  5833 ;;		None
  5834 ;; Auto vars:     Size  Location     Type
  5835 ;;		None
  5836 ;; Return value:  Size  Location     Type
  5837 ;;                  1    wreg      void 
  5838 ;; Registers used:
  5839 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5840 ;; Tracked objects:
  5841 ;;		On entry : 0/0
  5842 ;;		On exit  : 0/0
  5843 ;;		Unchanged: 0/0
  5844 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5845 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5846 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5847 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5848 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5849 ;;Total ram usage:        0 bytes
  5850 ;; Hardware stack levels used:    1
  5851 ;; Hardware stack levels required when called:    9
  5852 ;; This function calls:
  5853 ;;		_InitializeTasks
  5854 ;;		_ScheduleTasks
  5855 ;; This function is called by:
  5856 ;;		_main
  5857 ;; This function uses a non-reentrant model
  5858 ;;
  5859                           
  5860                           
  5861                           ;psect for function _MainScheduler
  5862  0AA3                     _MainScheduler:	
  5863                           
  5864                           ;os_sched.c: 82: InitializeTasks();
  5865                           
  5866                           ;incstack = 0
  5867                           ; Regs used in _MainScheduler: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  5868  0AA3  318F  2707  318A   	fcall	_InitializeTasks
  5869                           
  5870                           ;os_sched.c: 84: SystemState = RunningState;
  5871  0AA6  0020               	movlb	0	; select bank0
  5872  0AA7  01E7               	clrf	_SystemState
  5873  0AA8  0AE7               	incf	_SystemState,f
  5874  0AA9                     l4355:	
  5875                           ;os_sched.c: 91: while(((UINT8)(1)))
  5876                           
  5877                           
  5878                           ;os_sched.c: 92: {
  5879                           ;os_sched.c: 94: if (MainSystemTimebaseFlag == CallTaskPhase)
  5880  0AA9  086B               	movf	_MainSystemTimebaseFlag,w
  5881  0AAA  1D03               	btfss	3,2
  5882  0AAB  2AA9               	goto	l4355
  5883                           
  5884                           ;os_sched.c: 95: {
  5885                           ;os_sched.c: 97: ScheduleTasks();
  5886  0AAC  3182  2287  318A   	fcall	_ScheduleTasks
  5887                           
  5888                           ;os_sched.c: 99: MainSystemTimebaseFlag = WaitTriggerPhase;
  5889  0AAF  0020               	movlb	0	; select bank0
  5890  0AB0  01EB               	clrf	_MainSystemTimebaseFlag
  5891  0AB1  0AEB               	incf	_MainSystemTimebaseFlag,f
  5892  0AB2  2AA9               	goto	l4355
  5893  0AB3                     __end_of_MainScheduler:	
  5894                           
  5895                           	psect	text14
  5896  0287                     __ptext14:	
  5897 ;; *************** function _ScheduleTasks *****************
  5898 ;; Defined at:
  5899 ;;		line 130 in file "../../../Framework/MercuryFwk/Source/c/02_Osl/os_sched.c"
  5900 ;; Parameters:    Size  Location     Type
  5901 ;;		None
  5902 ;; Auto vars:     Size  Location     Type
  5903 ;;  ActiveTaskIn    1   55[BANK0 ] unsigned char 
  5904 ;; Return value:  Size  Location     Type
  5905 ;;                  1    wreg      void 
  5906 ;; Registers used:
  5907 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5908 ;; Tracked objects:
  5909 ;;		On entry : 0/0
  5910 ;;		On exit  : 0/0
  5911 ;;		Unchanged: 0/0
  5912 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5913 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5914 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5915 ;;      Temps:          0       0       6       0       0       0       0       0       0       0       0       0       
      +0       0
  5916 ;;      Totals:         0       1       6       0       0       0       0       0       0       0       0       0       
      +0       0
  5917 ;;Total ram usage:        7 bytes
  5918 ;; Hardware stack levels used:    1
  5919 ;; Hardware stack levels required when called:    8
  5920 ;; This function calls:
  5921 ;;		_App_MainTask
  5922 ;;		_I2cSlv_MainTask
  5923 ;;		_I2c_DataReceiveSm
  5924 ;;		_Led_MainTask
  5925 ;;		_Wdg_MainTask
  5926 ;; This function is called by:
  5927 ;;		_MainScheduler
  5928 ;; This function uses a non-reentrant model
  5929 ;;
  5930                           
  5931                           
  5932                           ;psect for function _ScheduleTasks
  5933  0287                     _ScheduleTasks:	
  5934                           
  5935                           ;os_sched.c: 133: UINT8 ActiveTaskIndex = 0u;
  5936                           
  5937                           ;incstack = 0
  5938                           ; Regs used in _ScheduleTasks: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  5939  0287  0020               	movlb	0	; select bank0
  5940  0288  01D7               	clrf	ScheduleTasks@ActiveTaskIndex
  5941                           
  5942                           ;os_sched.c: 136: for (ActiveTaskIndex = 0u; ActiveTaskIndex < TaskNumber; ActiveTaskInd
      +                          ex++)
  5943  0289  01D7               	clrf	ScheduleTasks@ActiveTaskIndex
  5944  028A  300A               	movlw	low (_TaskNumber| (0+32768))
  5945  028B  0084               	movwf	4
  5946  028C  3090               	movlw	high (_TaskNumber| (0+32768))
  5947  028D  0085               	movwf	5
  5948  028E  3F00               	moviw [0]fsr0
  5949  028F  0021               	movlb	1	; select bank1
  5950  0290  00E0               	movwf	??_ScheduleTasks^(0+128)
  5951  0291  3F01               	moviw [1]fsr0
  5952  0292                     L5:	
  5953  0292  00E1               	movwf	(??_ScheduleTasks^(0+128)+1)
  5954  0293  0020               	movlb	0	; select bank0
  5955  0294  0857               	movf	ScheduleTasks@ActiveTaskIndex,w
  5956  0295  0021               	movlb	1	; select bank1
  5957  0296  00E2               	movwf	(??_ScheduleTasks+2)^(0+128)
  5958  0297  01E3               	clrf	((??_ScheduleTasks+2)^(0+128)+1)
  5959  0298  0861               	movf	(??_ScheduleTasks+1)^(0+128),w
  5960  0299  0263               	subwf	(??_ScheduleTasks+3)^(0+128),w
  5961  029A  1D03               	skipz
  5962  029B  2A9E               	goto	u3395
  5963  029C  0860               	movf	??_ScheduleTasks^(0+128),w
  5964  029D  0262               	subwf	(??_ScheduleTasks+2)^(0+128),w
  5965  029E                     u3395:	
  5966  029E  1803               	btfsc	3,0
  5967  029F  0008               	return
  5968                           
  5969                           ;os_sched.c: 137: {
  5970                           ;os_sched.c: 138: if (TaskTable[ActiveTaskIndex].Counter >= (TaskTable[ActiveTaskIndex].
      +                          Timeout))
  5971  02A0  0020               	movlb	0	; select bank0
  5972  02A1  0857               	movf	ScheduleTasks@ActiveTaskIndex,w
  5973  02A2  0021               	movlb	1	; select bank1
  5974  02A3  00E0               	movwf	??_ScheduleTasks^(0+128)
  5975  02A4  3002               	movlw	2
  5976  02A5                     u3405:	
  5977  02A5  35E0               	lslf	??_ScheduleTasks^(0+128),f
  5978  02A6  3EFF               	addlw	-1
  5979  02A7  1D03               	skipz
  5980  02A8  2AA5               	goto	u3405
  5981  02A9  3560               	lslf	??_ScheduleTasks^(0+128),w
  5982  02AA  3E05               	addlw	5
  5983  02AB  3E20               	addlw	(low (_TaskTable| (0+256)))& (0+255)
  5984  02AC  0086               	movwf	6
  5985  02AD  3001               	movlw	1	; select bank2/3
  5986  02AE  0087               	movwf	7
  5987  02AF  3F40               	moviw [0]fsr1
  5988  02B0  00E1               	movwf	(??_ScheduleTasks+1)^(0+128)
  5989  02B1  3F41               	moviw [1]fsr1
  5990  02B2  00E2               	movwf	((??_ScheduleTasks+1)^(0+128)+1)
  5991  02B3  0020               	movlb	0	; select bank0
  5992  02B4  0857               	movf	ScheduleTasks@ActiveTaskIndex,w
  5993  02B5  0021               	movlb	1	; select bank1
  5994  02B6  00E3               	movwf	(??_ScheduleTasks+3)^(0+128)
  5995  02B7  3002               	movlw	2
  5996  02B8                     u3415:	
  5997  02B8  35E3               	lslf	(??_ScheduleTasks+3)^(0+128),f
  5998  02B9  3EFF               	addlw	-1
  5999  02BA  1D03               	skipz
  6000  02BB  2AB8               	goto	u3415
  6001  02BC  3563               	lslf	(??_ScheduleTasks+3)^(0+128),w
  6002  02BD  3E03               	addlw	3
  6003  02BE  3E20               	addlw	(low (_TaskTable| (0+256)))& (0+255)
  6004  02BF  0086               	movwf	6
  6005  02C0  3001               	movlw	1	; select bank2/3
  6006  02C1  0087               	movwf	7
  6007  02C2  3F40               	moviw [0]fsr1
  6008  02C3  00E4               	movwf	(??_ScheduleTasks+4)^(0+128)
  6009  02C4  3F41               	moviw [1]fsr1
  6010  02C5  00E5               	movwf	((??_ScheduleTasks+4)^(0+128)+1)
  6011  02C6  0862               	movf	(??_ScheduleTasks+2)^(0+128),w
  6012  02C7  0265               	subwf	(??_ScheduleTasks+5)^(0+128),w
  6013  02C8  1D03               	skipz
  6014  02C9  2ACC               	goto	u3425
  6015  02CA  0861               	movf	(??_ScheduleTasks+1)^(0+128),w
  6016  02CB  0264               	subwf	(??_ScheduleTasks+4)^(0+128),w
  6017  02CC                     u3425:	
  6018  02CC  1C03               	skipc
  6019  02CD  2B18               	goto	l4329
  6020                           
  6021                           ;os_sched.c: 139: {
  6022                           ;os_sched.c: 140: TaskTable[ActiveTaskIndex].Counter = ((UINT8)(0));
  6023  02CE  0020               	movlb	0	; select bank0
  6024  02CF  0857               	movf	ScheduleTasks@ActiveTaskIndex,w
  6025  02D0  0021               	movlb	1	; select bank1
  6026  02D1  00E0               	movwf	??_ScheduleTasks^(0+128)
  6027  02D2  3002               	movlw	2
  6028  02D3                     u3435:	
  6029  02D3  35E0               	lslf	??_ScheduleTasks^(0+128),f
  6030  02D4  3EFF               	addlw	-1
  6031  02D5  1D03               	skipz
  6032  02D6  2AD3               	goto	u3435
  6033  02D7  3560               	lslf	??_ScheduleTasks^(0+128),w
  6034  02D8  3E03               	addlw	3
  6035  02D9  3E20               	addlw	(low (_TaskTable| (0+256)))& (0+255)
  6036  02DA  0086               	movwf	6
  6037  02DB  3001               	movlw	1	; select bank2/3
  6038  02DC  0087               	movwf	7
  6039  02DD  3000               	movlw	0
  6040  02DE  3FC0               	movwi [0]fsr1
  6041  02DF  3FC1               	movwi [1]fsr1
  6042                           
  6043                           ;os_sched.c: 141: TaskTable[ActiveTaskIndex].State = TaskRunning;
  6044  02E0  0020               	movlb	0	; select bank0
  6045  02E1  0857               	movf	ScheduleTasks@ActiveTaskIndex,w
  6046  02E2  0021               	movlb	1	; select bank1
  6047  02E3  00E0               	movwf	??_ScheduleTasks^(0+128)
  6048  02E4  3002               	movlw	2
  6049  02E5                     u3445:	
  6050  02E5  35E0               	lslf	??_ScheduleTasks^(0+128),f
  6051  02E6  3EFF               	addlw	-1
  6052  02E7  1D03               	skipz
  6053  02E8  2AE5               	goto	u3445
  6054  02E9  3560               	lslf	??_ScheduleTasks^(0+128),w
  6055  02EA  3E02               	addlw	2
  6056  02EB  3E20               	addlw	(low (_TaskTable| (0+256)))& (0+255)
  6057  02EC  0086               	movwf	6
  6058  02ED  3001               	movlw	1	; select bank2/3
  6059  02EE  0087               	movwf	7
  6060  02EF  0181               	clrf	1
  6061  02F0  0A81               	incf	1,f
  6062                           
  6063                           ;os_sched.c: 142: TaskTable[ActiveTaskIndex].Task(TaskTable[ActiveTaskIndex].Options);
  6064  02F1  0020               	movlb	0	; select bank0
  6065  02F2  0857               	movf	ScheduleTasks@ActiveTaskIndex,w
  6066  02F3  0021               	movlb	1	; select bank1
  6067  02F4  00E0               	movwf	??_ScheduleTasks^(0+128)
  6068  02F5  3002               	movlw	2
  6069  02F6                     u3455:	
  6070  02F6  35E0               	lslf	??_ScheduleTasks^(0+128),f
  6071  02F7  3EFF               	addlw	-1
  6072  02F8  1D03               	skipz
  6073  02F9  2AF6               	goto	u3455
  6074  02FA  3560               	lslf	??_ScheduleTasks^(0+128),w
  6075  02FB  3E07               	addlw	7
  6076  02FC  3E20               	addlw	(low (_TaskTable| (0+256)))& (0+255)
  6077  02FD  0086               	movwf	6
  6078  02FE  3001               	movlw	1	; select bank2/3
  6079  02FF  0087               	movwf	7
  6080  0300  0801               	movf	1,w
  6081  0301  00E1               	movwf	(??_ScheduleTasks+1)^(0+128)
  6082  0302  0861               	movf	(??_ScheduleTasks+1)^(0+128),w
  6083  0303  0020               	movlb	0	; select bank0
  6084  0304  00BB               	movwf	App_MainTask@Options
  6085  0305  0857               	movf	ScheduleTasks@ActiveTaskIndex,w
  6086  0306  0021               	movlb	1	; select bank1
  6087  0307  00E2               	movwf	(??_ScheduleTasks+2)^(0+128)
  6088  0308  3002               	movlw	2
  6089  0309                     u3465:	
  6090  0309  35E2               	lslf	(??_ScheduleTasks+2)^(0+128),f
  6091  030A  3EFF               	addlw	-1
  6092  030B  1D03               	skipz
  6093  030C  2B09               	goto	u3465
  6094  030D  3562               	lslf	(??_ScheduleTasks+2)^(0+128),w
  6095  030E  3E20               	addlw	(low (_TaskTable| (0+256)))& (0+255)
  6096  030F  0086               	movwf	6
  6097  0310  3001               	movlw	1	; select bank2/3
  6098  0311  0087               	movwf	7
  6099  0312  3F41               	moviw [1]fsr1
  6100  0313  008A               	movwf	10
  6101  0314  3F40               	moviw [0]fsr1
  6102  0315  000A               	callw
  6103  0316  3182               	pagesel	$
  6104                           
  6105                           ;os_sched.c: 143: }
  6106  0317  2B3C               	goto	l4331
  6107  0318                     l4329:	
  6108                           
  6109                           ;os_sched.c: 144: else
  6110                           ;os_sched.c: 145: {
  6111                           ;os_sched.c: 146: TaskTable[ActiveTaskIndex].Counter++;
  6112  0318  0020               	movlb	0	; select bank0
  6113  0319  0857               	movf	ScheduleTasks@ActiveTaskIndex,w
  6114  031A  0021               	movlb	1	; select bank1
  6115  031B  00E0               	movwf	??_ScheduleTasks^(0+128)
  6116  031C  3002               	movlw	2
  6117  031D                     u3475:	
  6118  031D  35E0               	lslf	??_ScheduleTasks^(0+128),f
  6119  031E  3EFF               	addlw	-1
  6120  031F  1D03               	skipz
  6121  0320  2B1D               	goto	u3475
  6122  0321  3560               	lslf	??_ScheduleTasks^(0+128),w
  6123  0322  3E03               	addlw	3
  6124  0323  3E20               	addlw	(low (_TaskTable| (0+256)))& (0+255)
  6125  0324  0086               	movwf	6
  6126  0325  3001               	movlw	1	; select bank2/3
  6127  0326  0087               	movwf	7
  6128  0327  3001               	movlw	1
  6129  0328  0781               	addwf	1,f
  6130  0329  3141               	addfsr 1,1
  6131  032A  1803               	skipnc
  6132  032B  0A81               	incf	1,f
  6133                           
  6134                           ;os_sched.c: 147: TaskTable[ActiveTaskIndex].State = TaskIdle;
  6135  032C  0020               	movlb	0	; select bank0
  6136  032D  0857               	movf	ScheduleTasks@ActiveTaskIndex,w
  6137  032E  0021               	movlb	1	; select bank1
  6138  032F  00E0               	movwf	??_ScheduleTasks^(0+128)
  6139  0330  3002               	movlw	2
  6140  0331                     u3485:	
  6141  0331  35E0               	lslf	??_ScheduleTasks^(0+128),f
  6142  0332  3EFF               	addlw	-1
  6143  0333  1D03               	skipz
  6144  0334  2B31               	goto	u3485
  6145  0335  3560               	lslf	??_ScheduleTasks^(0+128),w
  6146  0336  3E02               	addlw	2
  6147  0337  3E20               	addlw	(low (_TaskTable| (0+256)))& (0+255)
  6148  0338  0086               	movwf	6
  6149  0339  3001               	movlw	1	; select bank2/3
  6150  033A  0087               	movwf	7
  6151  033B  0181               	clrf	1
  6152  033C                     l4331:	
  6153  033C  3001               	movlw	1
  6154  033D  0021               	movlb	1	; select bank1
  6155  033E  00E0               	movwf	??_ScheduleTasks^(0+128)
  6156  033F  0860               	movf	??_ScheduleTasks^(0+128),w
  6157  0340  0020               	movlb	0	; select bank0
  6158  0341  07D7               	addwf	ScheduleTasks@ActiveTaskIndex,f
  6159  0342  300A               	movlw	low (_TaskNumber| (0+32768))
  6160  0343  0084               	movwf	4
  6161  0344  3090               	movlw	high (_TaskNumber| (0+32768))
  6162  0345  0085               	movwf	5
  6163  0346  3F00               	moviw [0]fsr0
  6164  0347  0021               	movlb	1	; select bank1
  6165  0348  00E0               	movwf	??_ScheduleTasks^(0+128)
  6166  0349  3F01               	moviw [1]fsr0
  6167  034A  2A92               	goto	L5
  6168  034B                     __end_of_ScheduleTasks:	
  6169                           
  6170                           	psect	text15
  6171  0F07                     __ptext15:	
  6172 ;; *************** function _InitializeTasks *****************
  6173 ;; Defined at:
  6174 ;;		line 111 in file "../../../Framework/MercuryFwk/Source/c/02_Osl/os_sched.c"
  6175 ;; Parameters:    Size  Location     Type
  6176 ;;		None
  6177 ;; Auto vars:     Size  Location     Type
  6178 ;;  ActiveTaskIn    1   55[BANK0 ] unsigned char 
  6179 ;; Return value:  Size  Location     Type
  6180 ;;                  1    wreg      void 
  6181 ;; Registers used:
  6182 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6183 ;; Tracked objects:
  6184 ;;		On entry : 0/0
  6185 ;;		On exit  : 0/0
  6186 ;;		Unchanged: 0/0
  6187 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6188 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6189 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6190 ;;      Temps:          0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0
  6191 ;;      Totals:         0       1       4       0       0       0       0       0       0       0       0       0       
      +0       0
  6192 ;;Total ram usage:        5 bytes
  6193 ;; Hardware stack levels used:    1
  6194 ;; Hardware stack levels required when called:    8
  6195 ;; This function calls:
  6196 ;;		_App_MainTask
  6197 ;;		_I2cSlv_MainTask
  6198 ;;		_I2c_DataReceiveSm
  6199 ;;		_Led_MainTask
  6200 ;;		_Wdg_MainTask
  6201 ;; This function is called by:
  6202 ;;		_MainScheduler
  6203 ;; This function uses a non-reentrant model
  6204 ;;
  6205                           
  6206                           
  6207                           ;psect for function _InitializeTasks
  6208  0F07                     _InitializeTasks:	
  6209                           
  6210                           ;os_sched.c: 114: UINT8 ActiveTaskIndex = 0u;
  6211                           
  6212                           ;incstack = 0
  6213                           ; Regs used in _InitializeTasks: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  6214  0F07  0020               	movlb	0	; select bank0
  6215  0F08  01D7               	clrf	InitializeTasks@ActiveTaskIndex
  6216                           
  6217                           ;os_sched.c: 117: for (ActiveTaskIndex = 0u; ActiveTaskIndex < TaskNumber; ActiveTaskInd
      +                          ex++)
  6218  0F09  01D7               	clrf	InitializeTasks@ActiveTaskIndex
  6219  0F0A  300A               	movlw	low (_TaskNumber| (0+32768))
  6220  0F0B  0084               	movwf	4
  6221  0F0C  3090               	movlw	high (_TaskNumber| (0+32768))
  6222  0F0D  0085               	movwf	5
  6223  0F0E  3F00               	moviw [0]fsr0
  6224  0F0F  0021               	movlb	1	; select bank1
  6225  0F10  00E0               	movwf	??_InitializeTasks^(0+128)
  6226  0F11  3F01               	moviw [1]fsr0
  6227  0F12                     L6:	
  6228  0F12  00E1               	movwf	(??_InitializeTasks^(0+128)+1)
  6229  0F13  0020               	movlb	0	; select bank0
  6230  0F14  0857               	movf	InitializeTasks@ActiveTaskIndex,w
  6231  0F15  0021               	movlb	1	; select bank1
  6232  0F16  00E2               	movwf	(??_InitializeTasks+2)^(0+128)
  6233  0F17  01E3               	clrf	((??_InitializeTasks+2)^(0+128)+1)
  6234  0F18  0861               	movf	(??_InitializeTasks+1)^(0+128),w
  6235  0F19  0263               	subwf	(??_InitializeTasks+3)^(0+128),w
  6236  0F1A  1D03               	skipz
  6237  0F1B  2F1E               	goto	u3355
  6238  0F1C  0860               	movf	??_InitializeTasks^(0+128),w
  6239  0F1D  0262               	subwf	(??_InitializeTasks+2)^(0+128),w
  6240  0F1E                     u3355:	
  6241  0F1E  1803               	btfsc	3,0
  6242  0F1F  0008               	return
  6243                           
  6244                           ;os_sched.c: 118: {
  6245                           ;os_sched.c: 119: TaskTable[ActiveTaskIndex].Task(TaskTable[ActiveTaskIndex].Options);
  6246  0F20  0020               	movlb	0	; select bank0
  6247  0F21  0857               	movf	InitializeTasks@ActiveTaskIndex,w
  6248  0F22  0021               	movlb	1	; select bank1
  6249  0F23  00E0               	movwf	??_InitializeTasks^(0+128)
  6250  0F24  3002               	movlw	2
  6251  0F25                     u3365:	
  6252  0F25  35E0               	lslf	??_InitializeTasks^(0+128),f
  6253  0F26  3EFF               	addlw	-1
  6254  0F27  1D03               	skipz
  6255  0F28  2F25               	goto	u3365
  6256  0F29  3560               	lslf	??_InitializeTasks^(0+128),w
  6257  0F2A  3E07               	addlw	7
  6258  0F2B  3E20               	addlw	(low (_TaskTable| (0+256)))& (0+255)
  6259  0F2C  0086               	movwf	6
  6260  0F2D  3001               	movlw	1	; select bank2/3
  6261  0F2E  0087               	movwf	7
  6262  0F2F  0801               	movf	1,w
  6263  0F30  00E1               	movwf	(??_InitializeTasks+1)^(0+128)
  6264  0F31  0861               	movf	(??_InitializeTasks+1)^(0+128),w
  6265  0F32  0020               	movlb	0	; select bank0
  6266  0F33  00BB               	movwf	App_MainTask@Options
  6267  0F34  0857               	movf	InitializeTasks@ActiveTaskIndex,w
  6268  0F35  0021               	movlb	1	; select bank1
  6269  0F36  00E2               	movwf	(??_InitializeTasks+2)^(0+128)
  6270  0F37  3002               	movlw	2
  6271  0F38                     u3375:	
  6272  0F38  35E2               	lslf	(??_InitializeTasks+2)^(0+128),f
  6273  0F39  3EFF               	addlw	-1
  6274  0F3A  1D03               	skipz
  6275  0F3B  2F38               	goto	u3375
  6276  0F3C  3562               	lslf	(??_InitializeTasks+2)^(0+128),w
  6277  0F3D  3E20               	addlw	(low (_TaskTable| (0+256)))& (0+255)
  6278  0F3E  0086               	movwf	6
  6279  0F3F  3001               	movlw	1	; select bank2/3
  6280  0F40  0087               	movwf	7
  6281  0F41  3F41               	moviw [1]fsr1
  6282  0F42  008A               	movwf	10
  6283  0F43  3F40               	moviw [0]fsr1
  6284  0F44  000A               	callw
  6285  0F45  318F               	pagesel	$
  6286  0F46  3001               	movlw	1
  6287  0F47  0021               	movlb	1	; select bank1
  6288  0F48  00E0               	movwf	??_InitializeTasks^(0+128)
  6289  0F49  0860               	movf	??_InitializeTasks^(0+128),w
  6290  0F4A  0020               	movlb	0	; select bank0
  6291  0F4B  07D7               	addwf	InitializeTasks@ActiveTaskIndex,f
  6292  0F4C  300A               	movlw	low (_TaskNumber| (0+32768))
  6293  0F4D  0084               	movwf	4
  6294  0F4E  3090               	movlw	high (_TaskNumber| (0+32768))
  6295  0F4F  0085               	movwf	5
  6296  0F50  3F00               	moviw [0]fsr0
  6297  0F51  0021               	movlb	1	; select bank1
  6298  0F52  00E0               	movwf	??_InitializeTasks^(0+128)
  6299  0F53  3F01               	moviw [1]fsr0
  6300  0F54  2F12               	goto	L6
  6301  0F55                     __end_of_InitializeTasks:	
  6302                           
  6303                           	psect	text16
  6304  071C                     __ptext16:	
  6305 ;; *************** function _App_MainTask *****************
  6306 ;; Defined at:
  6307 ;;		line 238 in file "../Source/c/04_App/sb320_app.c"
  6308 ;; Parameters:    Size  Location     Type
  6309 ;;  Options         1   27[BANK0 ] unsigned char 
  6310 ;; Auto vars:     Size  Location     Type
  6311 ;;  WpuCh          12   37[BANK0 ] struct _WpuChType
  6312 ;;  AnalogChSel     8   29[BANK0 ] struct _AnalogChSelType
  6313 ;;  AdcConfig       6   49[BANK0 ] struct _AdcCfgType
  6314 ;; Return value:  Size  Location     Type
  6315 ;;                  1    wreg      void 
  6316 ;; Registers used:
  6317 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6318 ;; Tracked objects:
  6319 ;;		On entry : 0/0
  6320 ;;		On exit  : 0/0
  6321 ;;		Unchanged: 0/0
  6322 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6323 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6324 ;;      Locals:         0      26       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6325 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6326 ;;      Totals:         0      28       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6327 ;;Total ram usage:       28 bytes
  6328 ;; Hardware stack levels used:    1
  6329 ;; Hardware stack levels required when called:    7
  6330 ;; This function calls:
  6331 ;;		_Adc_ConfigAnCh
  6332 ;;		_Adc_InitAdcModule
  6333 ;;		_AppSm
  6334 ;;		_GetIrSensSts
  6335 ;;		_Int0Trigger
  6336 ;;		_Mcu_ConfigPullUps
  6337 ;;		_Mcu_SetDieTempMode
  6338 ;;		_Mcu_SetDieTempSts
  6339 ;;		_Mcu_SetPullUpsSts
  6340 ;; This function is called by:
  6341 ;;		_InitializeTasks
  6342 ;;		_ScheduleTasks
  6343 ;; This function uses a non-reentrant model
  6344 ;;
  6345                           
  6346                           
  6347                           ;psect for function _App_MainTask
  6348  071C                     _App_MainTask:	
  6349                           
  6350                           ;sb320_app.c: 240: WpuChType WpuCh = {((UINT8)(0)),((UINT8)(0)),((UINT8)(0)),((UINT8)(0)
      +                          ),((UINT8)(0)),((UINT8)(0)),((UINT8)(0)),((UINT8)(0)),((UINT8)(0)),((UINT8)(0)),((UINT8)
      +                          (0)),((UINT8)(0))};
  6351                           
  6352                           ;incstack = 0
  6353                           ; Regs used in _App_MainTask: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  6354  071C  30A0               	movlw	low App_MainTask@F3799
  6355  071D  0086               	movwf	6
  6356  071E  3000               	movlw	high App_MainTask@F3799
  6357  071F  0087               	movwf	7
  6358  0720  3045               	movlw	low App_MainTask@WpuCh
  6359  0721  0084               	movwf	4
  6360  0722  3000               	movlw	high App_MainTask@WpuCh
  6361  0723  0085               	movwf	5
  6362  0724  300C               	movlw	12
  6363  0725  0020               	movlb	0	; select bank0
  6364  0726  00BC               	movwf	??_App_MainTask
  6365  0727                     u3330:	
  6366  0727  0016               	moviw fsr1++
  6367  0728  001A               	movwi fsr0++
  6368  0729  0BBC               	decfsz	??_App_MainTask,f
  6369  072A  2F27               	goto	u3330
  6370                           
  6371                           ;sb320_app.c: 241: AnalogChSelType AnalogChSel = {((UINT8)(0)),((UINT8)(0)),((UINT8)(0))
      +                          ,((UINT8)(0)),((UINT8)(0)),((UINT8)(0)),((UINT8)(0)),((UINT8)(0))};
  6372  072B  30AC               	movlw	low App_MainTask@F3813
  6373  072C  0086               	movwf	6
  6374  072D  3000               	movlw	high App_MainTask@F3813
  6375  072E  0087               	movwf	7
  6376  072F  303D               	movlw	low App_MainTask@AnalogChSel
  6377  0730  0084               	movwf	4
  6378  0731  3000               	movlw	high App_MainTask@AnalogChSel
  6379  0732  0085               	movwf	5
  6380  0733  3008               	movlw	8
  6381  0734  00BC               	movwf	??_App_MainTask
  6382  0735                     u3340:	
  6383  0735  0016               	moviw fsr1++
  6384  0736  001A               	movwi fsr0++
  6385  0737  0BBC               	decfsz	??_App_MainTask,f
  6386  0738  2F35               	goto	u3340
  6387                           
  6388                           ;sb320_app.c: 242: AdcConfigType AdcConfig;
  6389                           ;sb320_app.c: 244: switch (SystemState)
  6390  0739  2F78               	goto	l4303
  6391  073A                     l922:	
  6392                           ;sb320_app.c: 245: {
  6393                           ;sb320_app.c: 247: case InitializationState:
  6394                           
  6395                           
  6396                           ;sb320_app.c: 249: TRISCbits.TRISC2 = ((UINT8)(1));
  6397  073A  0021               	movlb	1	; select bank1
  6398  073B  150E               	bsf	14,2	;volatile
  6399                           
  6400                           ;sb320_app.c: 250: TRISCbits.TRISC3 = ((UINT8)(1));
  6401  073C  158E               	bsf	14,3	;volatile
  6402                           
  6403                           ;sb320_app.c: 253: TRISAbits.TRISA0 = ((UINT8)(0));
  6404  073D  100C               	bcf	12,0	;volatile
  6405                           
  6406                           ;sb320_app.c: 256: TRISAbits.TRISA5 = ((UINT8)(1));
  6407  073E  168C               	bsf	12,5	;volatile
  6408                           
  6409                           ;sb320_app.c: 257: TRISAbits.TRISA4 = ((UINT8)(1));
  6410  073F  160C               	bsf	12,4	;volatile
  6411                           
  6412                           ;sb320_app.c: 258: TRISCbits.TRISC5 = ((UINT8)(1));
  6413  0740  168E               	bsf	14,5	;volatile
  6414                           
  6415                           ;sb320_app.c: 259: TRISCbits.TRISC4 = ((UINT8)(1));
  6416  0741  160E               	bsf	14,4	;volatile
  6417                           
  6418                           ;sb320_app.c: 262: WpuCh.WpuA4 = ((UINT8)(1));
  6419  0742  0020               	movlb	0	; select bank0
  6420  0743  01C9               	clrf	App_MainTask@WpuCh+4
  6421  0744  0AC9               	incf	App_MainTask@WpuCh+4,f
  6422                           
  6423                           ;sb320_app.c: 263: WpuCh.WpuA5 = ((UINT8)(1));
  6424  0745  01CA               	clrf	App_MainTask@WpuCh+5
  6425  0746  0ACA               	incf	App_MainTask@WpuCh+5,f
  6426                           
  6427                           ;sb320_app.c: 264: WpuCh.WpuC4 = ((UINT8)(1));
  6428  0747  01CF               	clrf	App_MainTask@WpuCh+10
  6429  0748  0ACF               	incf	App_MainTask@WpuCh+10,f
  6430                           
  6431                           ;sb320_app.c: 265: WpuCh.WpuC5 = ((UINT8)(1));
  6432  0749  01D0               	clrf	App_MainTask@WpuCh+11
  6433  074A  0AD0               	incf	App_MainTask@WpuCh+11,f
  6434                           
  6435                           ;sb320_app.c: 267: Mcu_ConfigPullUps(&WpuCh);
  6436  074B  3045               	movlw	(low (App_MainTask@WpuCh| 0))& (0+255)
  6437  074C  3186  2645  3187   	fcall	_Mcu_ConfigPullUps
  6438                           
  6439                           ;sb320_app.c: 268: Mcu_SetPullUpsSts(Mcu_GlobalPuEnabled);
  6440  074F  3000               	movlw	0
  6441  0750  3189  21D4  3187   	fcall	_Mcu_SetPullUpsSts
  6442                           
  6443                           ;sb320_app.c: 271: Adc_ConfigAnCh(&AnalogChSel);
  6444  0753  303D               	movlw	(low (App_MainTask@AnalogChSel| 0))& (0+255)
  6445  0754  318E  2623  3187   	fcall	_Adc_ConfigAnCh
  6446                           
  6447                           ;sb320_app.c: 274: Mcu_SetDieTempSts(((UINT8)(1)));
  6448  0757  3001               	movlw	1
  6449  0758  3189  21CC  3187   	fcall	_Mcu_SetDieTempSts
  6450                           
  6451                           ;sb320_app.c: 275: Mcu_SetDieTempMode(((UINT8)(0)));
  6452  075B  3000               	movlw	0
  6453  075C  3189  21C4  3187   	fcall	_Mcu_SetDieTempMode
  6454                           
  6455                           ;sb320_app.c: 278: AdcConfig.AdcConvClock = ((UINT8)(3));
  6456  075F  3003               	movlw	3
  6457  0760  0020               	movlb	0	; select bank0
  6458  0761  00BC               	movwf	??_App_MainTask
  6459  0762  083C               	movf	??_App_MainTask,w
  6460  0763  00D3               	movwf	App_MainTask@AdcConfig+2
  6461                           
  6462                           ;sb320_app.c: 279: AdcConfig.AdcIntEnabled = ((UINT8)(0));
  6463  0764  01D6               	clrf	App_MainTask@AdcConfig+5
  6464                           
  6465                           ;sb320_app.c: 280: AdcConfig.AdcNegRef = ((UINT8)(0));
  6466  0765  01D4               	clrf	App_MainTask@AdcConfig+3
  6467                           
  6468                           ;sb320_app.c: 281: AdcConfig.AdcPosRef = ((UINT8)(0));
  6469  0766  01D5               	clrf	App_MainTask@AdcConfig+4
  6470                           
  6471                           ;sb320_app.c: 282: AdcConfig.AdcResultFormat = ((UINT8)(1));
  6472  0767  01D2               	clrf	App_MainTask@AdcConfig+1
  6473  0768  0AD2               	incf	App_MainTask@AdcConfig+1,f
  6474                           
  6475                           ;sb320_app.c: 283: AdcConfig.AdcEnable = ((UINT8)(1));
  6476  0769  01D1               	clrf	App_MainTask@AdcConfig
  6477  076A  0AD1               	incf	App_MainTask@AdcConfig,f
  6478                           
  6479                           ;sb320_app.c: 284: Adc_InitAdcModule(&AdcConfig);
  6480  076B  3051               	movlw	(low (App_MainTask@AdcConfig| 0))& (0+255)
  6481  076C  318D  25AA         	fcall	_Adc_InitAdcModule
  6482                           
  6483                           ;sb320_app.c: 285: break;
  6484  076E  0008               	return
  6485  076F                     l4297:	
  6486                           ;sb320_app.c: 288: case RunningState:
  6487                           
  6488                           
  6489                           ;sb320_app.c: 290: GetIrSensSts();
  6490  076F  3189  21E5  3187   	fcall	_GetIrSensSts
  6491                           
  6492                           ;sb320_app.c: 292: Int0Trigger();
  6493  0772  318A  2248  3187   	fcall	_Int0Trigger
  6494                           
  6495                           ;sb320_app.c: 294: AppSm();
  6496  0775  318C  2431         	fcall	_AppSm
  6497                           
  6498                           ;sb320_app.c: 300: }
  6499                           
  6500                           ;sb320_app.c: 299: break;
  6501                           
  6502                           ;sb320_app.c: 298: default:
  6503                           
  6504                           ;sb320_app.c: 295: break;
  6505  0777  0008               	return
  6506  0778                     l4303:	
  6507  0778  0020               	movlb	0	; select bank0
  6508  0779  0867               	movf	_SystemState,w
  6509                           
  6510                           ; Switch size 1, requested type "space"
  6511                           ; Number of cases is 2, Range of values is 0 to 1
  6512                           ; switch strategies available:
  6513                           ; Name         Instructions Cycles
  6514                           ; simple_byte            7     4 (average)
  6515                           ; direct_byte           10     6 (fixed)
  6516                           ; jumptable            260     6 (fixed)
  6517                           ;	Chosen strategy is simple_byte
  6518  077A  3A00               	xorlw	0	; case 0
  6519  077B  1903               	skipnz
  6520  077C  2F3A               	goto	l922
  6521  077D  3A01               	xorlw	1	; case 1
  6522  077E  1903               	skipnz
  6523  077F  2F6F               	goto	l4297
  6524  0780  2F81               	goto	l926
  6525  0781                     l926:	
  6526  0781  0008               	return
  6527  0782                     __end_of_App_MainTask:	
  6528                           
  6529                           	psect	text17
  6530  0D42                     __ptext17:	
  6531 ;; *************** function _Led_MainTask *****************
  6532 ;; Defined at:
  6533 ;;		line 185 in file "../../../Framework/MercuryFwk/Source/c/03_Sml/02_Ssl/led.c"
  6534 ;; Parameters:    Size  Location     Type
  6535 ;;  Options         1   27[BANK0 ] unsigned char 
  6536 ;; Auto vars:     Size  Location     Type
  6537 ;;		None
  6538 ;; Return value:  Size  Location     Type
  6539 ;;                  1    wreg      void 
  6540 ;; Registers used:
  6541 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6542 ;; Tracked objects:
  6543 ;;		On entry : 0/0
  6544 ;;		On exit  : 0/0
  6545 ;;		Unchanged: 0/0
  6546 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6547 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6548 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6549 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6550 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6551 ;;Total ram usage:        5 bytes
  6552 ;; Hardware stack levels used:    1
  6553 ;; Hardware stack levels required when called:    5
  6554 ;; This function calls:
  6555 ;;		_LedStateMachine
  6556 ;;		_Led_InitSeq
  6557 ;;		_SetLedBehavSts
  6558 ;; This function is called by:
  6559 ;;		_InitializeTasks
  6560 ;;		_ScheduleTasks
  6561 ;; This function uses a non-reentrant model
  6562 ;;
  6563                           
  6564                           
  6565                           ;psect for function _Led_MainTask
  6566  0D42                     _Led_MainTask:	
  6567                           
  6568                           ;led.c: 187: switch (SystemState)
  6569                           
  6570                           ;incstack = 0
  6571                           ; Regs used in _Led_MainTask: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  6572  0D42  2D6B               	goto	l4273
  6573  0D43                     l611:	
  6574                           ;led.c: 188: {
  6575                           ;led.c: 190: case InitializationState:
  6576                           
  6577                           
  6578                           ;led.c: 192: TRISAbits.TRISA2 = ((UINT8)(0));
  6579  0D43  0021               	movlb	1	; select bank1
  6580  0D44  110C               	bcf	12,2	;volatile
  6581                           
  6582                           ;led.c: 193: LATAbits.LATA2 = ((UINT8)(0));
  6583  0D45  0022               	movlb	2	; select bank2
  6584  0D46  110C               	bcf	12,2	;volatile
  6585                           
  6586                           ;led.c: 195: SetLedBehavSts(((UINT8)(1)));
  6587  0D47  3001               	movlw	1
  6588  0D48  318D  25E1         	fcall	_SetLedBehavSts
  6589                           
  6590                           ;led.c: 196: break;
  6591  0D4A  0008               	return
  6592  0D4B                     l4267:	
  6593                           ;led.c: 199: case RunningState:
  6594                           
  6595                           
  6596                           ;led.c: 201: Led_InitSeq();
  6597  0D4B  318E  26B9  318D   	fcall	_Led_InitSeq
  6598                           
  6599                           ;led.c: 203: LATAbits.LATA2 = LedStateMachine(1u,&Led1Sts,&Led1Blink,&Led1Pulse);
  6600  0D4E  306A               	movlw	(low (_Led1Sts| 0))& (0+255)
  6601  0D4F  0020               	movlb	0	; select bank0
  6602  0D50  00BC               	movwf	??_Led_MainTask
  6603  0D51  083C               	movf	??_Led_MainTask,w
  6604  0D52  00AB               	movwf	LedStateMachine@LedSts
  6605  0D53  30C9               	movlw	(low (_Led1Blink| 0))& (0+255)
  6606  0D54  00BD               	movwf	??_Led_MainTask+1
  6607  0D55  083D               	movf	??_Led_MainTask+1,w
  6608  0D56  00AC               	movwf	LedStateMachine@LedBlink
  6609  0D57  30D2               	movlw	(low (_Led1Pulse| 0))& (0+255)
  6610  0D58  00BE               	movwf	??_Led_MainTask+2
  6611  0D59  083E               	movf	??_Led_MainTask+2,w
  6612  0D5A  00AD               	movwf	LedStateMachine@LedPulse
  6613  0D5B  3001               	movlw	1
  6614  0D5C  318D  2511         	fcall	_LedStateMachine
  6615  0D5E  0020               	movlb	0	; select bank0
  6616  0D5F  00BF               	movwf	??_Led_MainTask+3
  6617  0D60  0DBF               	rlf	??_Led_MainTask+3,f
  6618  0D61  0DBF               	rlf	??_Led_MainTask+3,f
  6619  0D62  0022               	movlb	2	; select bank2
  6620  0D63  080C               	movf	12,w	;volatile
  6621  0D64  0020               	movlb	0	; select bank0
  6622  0D65  063F               	xorwf	??_Led_MainTask+3,w
  6623  0D66  39FB               	andlw	-5
  6624  0D67  063F               	xorwf	??_Led_MainTask+3,w
  6625  0D68  0022               	movlb	2	; select bank2
  6626  0D69  008C               	movwf	12	;volatile
  6627                           
  6628                           ;led.c: 209: }
  6629                           
  6630                           ;led.c: 208: break;
  6631                           
  6632                           ;led.c: 207: default:
  6633                           
  6634                           ;led.c: 204: break;
  6635  0D6A  0008               	return
  6636  0D6B                     l4273:	
  6637  0D6B  0020               	movlb	0	; select bank0
  6638  0D6C  0867               	movf	_SystemState,w
  6639                           
  6640                           ; Switch size 1, requested type "space"
  6641                           ; Number of cases is 2, Range of values is 0 to 1
  6642                           ; switch strategies available:
  6643                           ; Name         Instructions Cycles
  6644                           ; simple_byte            7     4 (average)
  6645                           ; direct_byte           10     6 (fixed)
  6646                           ; jumptable            260     6 (fixed)
  6647                           ;	Chosen strategy is simple_byte
  6648  0D6D  3A00               	xorlw	0	; case 0
  6649  0D6E  1903               	skipnz
  6650  0D6F  2D43               	goto	l611
  6651  0D70  3A01               	xorlw	1	; case 1
  6652  0D71  1903               	skipnz
  6653  0D72  2D4B               	goto	l4267
  6654  0D73  2D74               	goto	l615
  6655  0D74                     l615:	
  6656  0D74  0008               	return
  6657  0D75                     __end_of_Led_MainTask:	
  6658                           
  6659                           	psect	text18
  6660  0ADA                     __ptext18:	
  6661 ;; *************** function _I2cSlv_MainTask *****************
  6662 ;; Defined at:
  6663 ;;		line 109 in file "../../../Framework/MercuryFwk/Source/c/03_Sml/01_Pml/01_SlvI2c/i2c_slv.c"
  6664 ;; Parameters:    Size  Location     Type
  6665 ;;  Options         1   27[BANK0 ] unsigned char 
  6666 ;; Auto vars:     Size  Location     Type
  6667 ;;		None
  6668 ;; Return value:  Size  Location     Type
  6669 ;;                  1    wreg      void 
  6670 ;; Registers used:
  6671 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6672 ;; Tracked objects:
  6673 ;;		On entry : 0/0
  6674 ;;		On exit  : 0/0
  6675 ;;		Unchanged: 0/0
  6676 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6677 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6678 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6679 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6680 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6681 ;;Total ram usage:        1 bytes
  6682 ;; Hardware stack levels used:    1
  6683 ;; Hardware stack levels required when called:    4
  6684 ;; This function calls:
  6685 ;;		_I2cSlv_I2cDrvHandle
  6686 ;;		_I2c_InitI2cModule
  6687 ;;		_I2c_SetConfig
  6688 ;; This function is called by:
  6689 ;;		_InitializeTasks
  6690 ;;		_ScheduleTasks
  6691 ;; This function uses a non-reentrant model
  6692 ;;
  6693                           
  6694                           
  6695                           ;psect for function _I2cSlv_MainTask
  6696  0ADA                     _I2cSlv_MainTask:	
  6697                           
  6698                           ;i2c_slv.c: 111: switch (SystemState)
  6699                           
  6700                           ;incstack = 0
  6701                           ; Regs used in _I2cSlv_MainTask: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  6702  0ADA  2AE5               	goto	l4261
  6703  0ADB                     l4253:	
  6704                           ;i2c_slv.c: 112: {
  6705                           ;i2c_slv.c: 114: case InitializationState:
  6706                           
  6707                           
  6708                           ;i2c_slv.c: 116: I2c_SetConfig();
  6709  0ADB  318A  22C6  318A   	fcall	_I2c_SetConfig
  6710                           
  6711                           ;i2c_slv.c: 118: I2c_InitI2cModule(&I2cConfig);
  6712  0ADE  30BE               	movlw	(low (_I2cConfig| 0))& (0+255)
  6713  0ADF  3184  2401         	fcall	_I2c_InitI2cModule
  6714                           
  6715                           ;i2c_slv.c: 119: break;
  6716  0AE1  0008               	return
  6717  0AE2                     l4257:	
  6718                           ;i2c_slv.c: 122: case RunningState:
  6719                           
  6720                           
  6721                           ;i2c_slv.c: 124: I2cSlv_I2cDrvHandle();
  6722  0AE2  3185  253D         	fcall	_I2cSlv_I2cDrvHandle
  6723                           
  6724                           ;i2c_slv.c: 130: }
  6725                           
  6726                           ;i2c_slv.c: 129: break;
  6727                           
  6728                           ;i2c_slv.c: 128: default:
  6729                           
  6730                           ;i2c_slv.c: 125: break;
  6731  0AE4  0008               	return
  6732  0AE5                     l4261:	
  6733  0AE5  0020               	movlb	0	; select bank0
  6734  0AE6  0867               	movf	_SystemState,w
  6735                           
  6736                           ; Switch size 1, requested type "space"
  6737                           ; Number of cases is 2, Range of values is 0 to 1
  6738                           ; switch strategies available:
  6739                           ; Name         Instructions Cycles
  6740                           ; simple_byte            7     4 (average)
  6741                           ; direct_byte           10     6 (fixed)
  6742                           ; jumptable            260     6 (fixed)
  6743                           ;	Chosen strategy is simple_byte
  6744  0AE7  3A00               	xorlw	0	; case 0
  6745  0AE8  1903               	skipnz
  6746  0AE9  2ADB               	goto	l4253
  6747  0AEA  3A01               	xorlw	1	; case 1
  6748  0AEB  1903               	skipnz
  6749  0AEC  2AE2               	goto	l4257
  6750  0AED  2AEE               	goto	l530
  6751  0AEE                     l530:	
  6752  0AEE  0008               	return
  6753  0AEF                     __end_of_I2cSlv_MainTask:	
  6754                           
  6755                           	psect	text19
  6756  00A2                     __ptext19:	
  6757 ;; *************** function _I2c_DataReceiveSm *****************
  6758 ;; Defined at:
  6759 ;;		line 298 in file "../../../Framework/MercuryFwk/Source/c/01_Hal/02_Drv/i2c_slv_drv.c"
  6760 ;; Parameters:    Size  Location     Type
  6761 ;;  Options         1   27[BANK0 ] unsigned char 
  6762 ;; Auto vars:     Size  Location     Type
  6763 ;;  Index           1   35[BANK0 ] unsigned char 
  6764 ;; Return value:  Size  Location     Type
  6765 ;;                  1    wreg      void 
  6766 ;; Registers used:
  6767 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6768 ;; Tracked objects:
  6769 ;;		On entry : 0/0
  6770 ;;		On exit  : 0/0
  6771 ;;		Unchanged: 0/0
  6772 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6773 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6774 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6775 ;;      Temps:          0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6776 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6777 ;;Total ram usage:        9 bytes
  6778 ;; Hardware stack levels used:    1
  6779 ;; Hardware stack levels required when called:    3
  6780 ;; This function calls:
  6781 ;;		_CheckAckStatus
  6782 ;;		_CheckByteStatus
  6783 ;;		_CheckStopBitStatus
  6784 ;;		_ClearRxBuffer
  6785 ;;		_ClearTxBuffer
  6786 ;;		_GenerateEvt
  6787 ;;		_Mcu_Reset
  6788 ;;		_ReceiveEvt
  6789 ;; This function is called by:
  6790 ;;		_InitializeTasks
  6791 ;;		_ScheduleTasks
  6792 ;; This function uses a non-reentrant model
  6793 ;;
  6794                           
  6795                           
  6796                           ;psect for function _I2c_DataReceiveSm
  6797  00A2                     _I2c_DataReceiveSm:	
  6798                           
  6799                           ;i2c_slv_drv.c: 301: static I2cRxStateType I2cRxState = CheckRxByte;
  6800                           ;i2c_slv_drv.c: 302: static UINT8 I2cRxAddress;
  6801                           ;i2c_slv_drv.c: 303: static UINT8 I2cRxFlag = ((UINT8)(0));
  6802                           ;i2c_slv_drv.c: 304: static UINT8 OpType;
  6803                           ;i2c_slv_drv.c: 305: static UINT8 RxCounter = 0;
  6804                           ;i2c_slv_drv.c: 306: static UINT8 TxCounter = 0;
  6805                           ;i2c_slv_drv.c: 307: static UINT8 AddressStored = 0;
  6806                           ;i2c_slv_drv.c: 308: static UINT8 ErrorCounter = 0;
  6807                           ;i2c_slv_drv.c: 309: UINT8 Index;
  6808                           ;i2c_slv_drv.c: 311: switch (I2cRxState)
  6809                           
  6810                           ;incstack = 0
  6811                           ; Regs used in _I2c_DataReceiveSm: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  6812  00A2  298D               	goto	l4231
  6813  00A3                     l4139:	
  6814                           ;i2c_slv_drv.c: 312: {
  6815                           ;i2c_slv_drv.c: 313: case CheckRxByte:
  6816                           
  6817                           
  6818                           ;i2c_slv_drv.c: 315: if (ReceiveEvt(&I2cNewTxNotification))
  6819  00A3  30DA               	movlw	(low (_I2cNewTxNotification| 0))& (0+255)
  6820  00A4  318B  23A3  3180   	fcall	_ReceiveEvt
  6821  00A7  3A00               	xorlw	0
  6822  00A8  1903               	skipnz
  6823  00A9  0008               	return
  6824                           
  6825                           ;i2c_slv_drv.c: 316: {
  6826                           ;i2c_slv_drv.c: 318: if (CheckByteStatus() == ((UINT8)(0)))
  6827  00AA  3189  21F9  3180   	fcall	_CheckByteStatus
  6828  00AD  3A00               	xorlw	0
  6829  00AE  1D03               	skipz
  6830  00AF  28CA               	goto	l4159
  6831                           
  6832                           ;i2c_slv_drv.c: 319: {
  6833                           ;i2c_slv_drv.c: 320: if (AddressStored == 1)
  6834  00B0  0020               	movlb	0	; select bank0
  6835  00B1  035B               	decf	I2c_DataReceiveSm@AddressStored,w
  6836  00B2  1D03               	btfss	3,2
  6837  00B3  28C0               	goto	l4151
  6838                           
  6839                           ;i2c_slv_drv.c: 321: {
  6840                           ;i2c_slv_drv.c: 323: ErrorCounter++;
  6841  00B4  3001               	movlw	1
  6842  00B5  00BC               	movwf	??_I2c_DataReceiveSm
  6843  00B6  083C               	movf	??_I2c_DataReceiveSm,w
  6844  00B7  07DC               	addwf	I2c_DataReceiveSm@ErrorCounter,f
  6845                           
  6846                           ;i2c_slv_drv.c: 325: if (ErrorCounter > 10u)
  6847  00B8  300B               	movlw	11
  6848  00B9  025C               	subwf	I2c_DataReceiveSm@ErrorCounter,w
  6849  00BA  1C03               	skipc
  6850  00BB  28C2               	goto	l4153
  6851                           
  6852                           ;i2c_slv_drv.c: 326: {
  6853                           ;i2c_slv_drv.c: 327: Mcu_Reset();
  6854  00BC  3189  2190  3180   	fcall	_Mcu_Reset
  6855                           
  6856                           ;i2c_slv_drv.c: 328: }
  6857                           ;i2c_slv_drv.c: 329: }
  6858  00BF  28C2               	goto	l4153
  6859  00C0                     l4151:	
  6860                           
  6861                           ;i2c_slv_drv.c: 330: else
  6862                           ;i2c_slv_drv.c: 331: {
  6863                           ;i2c_slv_drv.c: 333: ErrorCounter = 0;
  6864  00C0  0020               	movlb	0	; select bank0
  6865  00C1  01DC               	clrf	I2c_DataReceiveSm@ErrorCounter
  6866  00C2                     l4153:	
  6867                           
  6868                           ;i2c_slv_drv.c: 334: }
  6869                           ;i2c_slv_drv.c: 336: AddressStored = 1;
  6870  00C2  0020               	movlb	0	; select bank0
  6871  00C3  01DB               	clrf	I2c_DataReceiveSm@AddressStored
  6872  00C4  0ADB               	incf	I2c_DataReceiveSm@AddressStored,f
  6873                           
  6874                           ;i2c_slv_drv.c: 338: I2cRxFlag = ((UINT8)(1));
  6875  00C5  01DE               	clrf	I2c_DataReceiveSm@I2cRxFlag
  6876  00C6  0ADE               	incf	I2c_DataReceiveSm@I2cRxFlag,f
  6877                           
  6878                           ;i2c_slv_drv.c: 340: I2cRxState = StoreAddrByte;
  6879  00C7  01DF               	clrf	I2c_DataReceiveSm@I2cRxState
  6880  00C8  0ADF               	incf	I2c_DataReceiveSm@I2cRxState,f
  6881                           
  6882                           ;i2c_slv_drv.c: 341: }
  6883  00C9  0008               	return
  6884  00CA                     l4159:	
  6885                           
  6886                           ;i2c_slv_drv.c: 342: else if ((CheckByteStatus() == ((UINT8)(1))) && (I2cRxFlag == ((UIN
      +                          T8)(1))))
  6887  00CA  3189  21F9  3180   	fcall	_CheckByteStatus
  6888  00CD  3A01               	xorlw	1
  6889  00CE  1D03               	skipz
  6890  00CF  0008               	return
  6891  00D0  0020               	movlb	0	; select bank0
  6892  00D1  035E               	decf	I2c_DataReceiveSm@I2cRxFlag,w
  6893  00D2  1D03               	btfss	3,2
  6894  00D3  0008               	return
  6895                           
  6896                           ;i2c_slv_drv.c: 343: {
  6897                           ;i2c_slv_drv.c: 345: AddressStored = 0;
  6898  00D4  01DB               	clrf	I2c_DataReceiveSm@AddressStored
  6899                           
  6900                           ;i2c_slv_drv.c: 346: if (OpType == ((UINT8)(0)))
  6901  00D5  0860               	movf	I2c_DataReceiveSm@OpType,w
  6902  00D6  1D03               	btfss	3,2
  6903  00D7  28DD               	goto	l4169
  6904                           
  6905                           ;i2c_slv_drv.c: 347: {
  6906                           ;i2c_slv_drv.c: 349: I2cRxState = HandleWrite;
  6907  00D8  3002               	movlw	2
  6908  00D9  00BC               	movwf	??_I2c_DataReceiveSm
  6909  00DA  083C               	movf	??_I2c_DataReceiveSm,w
  6910  00DB  00DF               	movwf	I2c_DataReceiveSm@I2cRxState
  6911                           
  6912                           ;i2c_slv_drv.c: 350: }
  6913  00DC  0008               	return
  6914  00DD                     l4169:	
  6915                           
  6916                           ;i2c_slv_drv.c: 351: else
  6917                           ;i2c_slv_drv.c: 352: {
  6918                           ;i2c_slv_drv.c: 354: I2cRxState = HandleRead;
  6919  00DD  3003               	movlw	3
  6920  00DE  00BC               	movwf	??_I2c_DataReceiveSm
  6921  00DF  083C               	movf	??_I2c_DataReceiveSm,w
  6922  00E0  00DF               	movwf	I2c_DataReceiveSm@I2cRxState
  6923                           
  6924                           ;i2c_slv_drv.c: 360: }
  6925                           ;i2c_slv_drv.c: 361: }
  6926                           ;i2c_slv_drv.c: 362: break;
  6927                           
  6928                           ;i2c_slv_drv.c: 357: else
  6929                           ;i2c_slv_drv.c: 358: {
  6930                           
  6931                           ;i2c_slv_drv.c: 355: }
  6932                           ;i2c_slv_drv.c: 356: }
  6933  00E1  0008               	return
  6934  00E2                     l4171:	
  6935                           ;i2c_slv_drv.c: 364: case StoreAddrByte:
  6936                           
  6937                           
  6938                           ;i2c_slv_drv.c: 366: I2cRxAddress = SSP1BUF;
  6939  00E2  0024               	movlb	4	; select bank4
  6940  00E3  0811               	movf	17,w	;volatile
  6941  00E4  0020               	movlb	0	; select bank0
  6942  00E5  00BC               	movwf	??_I2c_DataReceiveSm
  6943  00E6  083C               	movf	??_I2c_DataReceiveSm,w
  6944  00E7  00DD               	movwf	I2c_DataReceiveSm@I2cRxAddress
  6945                           
  6946                           ;i2c_slv_drv.c: 368: I2cRxAddress = (I2cRxAddress >> ((UINT8)(1)));
  6947  00E8  365D               	lsrf	I2c_DataReceiveSm@I2cRxAddress,w
  6948  00E9  00BC               	movwf	??_I2c_DataReceiveSm
  6949  00EA  083C               	movf	??_I2c_DataReceiveSm,w
  6950  00EB  00DD               	movwf	I2c_DataReceiveSm@I2cRxAddress
  6951                           
  6952                           ;i2c_slv_drv.c: 370: OpType = (SSP1BUF & ((UINT8)(0x01)));
  6953  00EC  0024               	movlb	4	; select bank4
  6954  00ED  0811               	movf	17,w	;volatile
  6955  00EE  3901               	andlw	1
  6956  00EF  0020               	movlb	0	; select bank0
  6957  00F0  00BC               	movwf	??_I2c_DataReceiveSm
  6958  00F1  083C               	movf	??_I2c_DataReceiveSm,w
  6959  00F2  00E0               	movwf	I2c_DataReceiveSm@OpType
  6960                           
  6961                           ;i2c_slv_drv.c: 372: if (OpType == ((UINT8)(1)))
  6962  00F3  0360               	decf	I2c_DataReceiveSm@OpType,w
  6963  00F4  1D03               	btfss	3,2
  6964  00F5  2903               	goto	l4183
  6965                           
  6966                           ;i2c_slv_drv.c: 373: {
  6967                           ;i2c_slv_drv.c: 375: SSP1BUF = I2cTxBuffer[TxCounter];
  6968  00F6  0862               	movf	I2c_DataReceiveSm@TxCounter,w
  6969  00F7  3EA0               	addlw	(low (_I2cTxBuffer| (0+512)))& (0+255)
  6970  00F8  0086               	movwf	6
  6971  00F9  3002               	movlw	2	; select bank5/6
  6972  00FA  0087               	movwf	7
  6973  00FB  0801               	movf	1,w
  6974  00FC  0024               	movlb	4	; select bank4
  6975  00FD  0091               	movwf	17	;volatile
  6976                           
  6977                           ;i2c_slv_drv.c: 377: TxCounter++;
  6978  00FE  3001               	movlw	1
  6979  00FF  0020               	movlb	0	; select bank0
  6980  0100  00BC               	movwf	??_I2c_DataReceiveSm
  6981  0101  083C               	movf	??_I2c_DataReceiveSm,w
  6982  0102  07E2               	addwf	I2c_DataReceiveSm@TxCounter,f
  6983  0103                     l4183:	
  6984                           ;i2c_slv_drv.c: 379: else
  6985                           ;i2c_slv_drv.c: 380: {
  6986                           
  6987                           ;i2c_slv_drv.c: 378: }
  6988                           
  6989                           
  6990                           ;i2c_slv_drv.c: 382: }
  6991                           ;i2c_slv_drv.c: 384: I2cRxState = StopClkStretch;
  6992  0103  3004               	movlw	4
  6993  0104  00BC               	movwf	??_I2c_DataReceiveSm
  6994  0105  083C               	movf	??_I2c_DataReceiveSm,w
  6995  0106  00DF               	movwf	I2c_DataReceiveSm@I2cRxState
  6996                           
  6997                           ;i2c_slv_drv.c: 385: break;
  6998  0107  0008               	return
  6999  0108                     l4185:	
  7000                           ;i2c_slv_drv.c: 387: case HandleWrite:
  7001                           
  7002                           
  7003                           ;i2c_slv_drv.c: 389: if (CheckStopBitStatus() == ((UINT8)(1)))
  7004  0108  318A  2203  3180   	fcall	_CheckStopBitStatus
  7005  010B  3A01               	xorlw	1
  7006  010C  1D03               	skipz
  7007  010D  2953               	goto	l4209
  7008                           
  7009                           ;i2c_slv_drv.c: 390: {
  7010                           ;i2c_slv_drv.c: 392: I2cRxFlag = ((UINT8)(0));
  7011  010E  0020               	movlb	0	; select bank0
  7012  010F  01DE               	clrf	I2c_DataReceiveSm@I2cRxFlag
  7013                           
  7014                           ;i2c_slv_drv.c: 394: I2cPacket.Lenght = RxCounter;
  7015  0110  30EF               	movlw	239
  7016  0111  0086               	movwf	6
  7017  0112  3023               	movlw	35
  7018  0113  0087               	movwf	7
  7019  0114  0861               	movf	I2c_DataReceiveSm@RxCounter,w
  7020  0115  0081               	movwf	1
  7021                           
  7022                           ;i2c_slv_drv.c: 395: I2cPacket.ReadWrite = ((UINT8)(0));
  7023  0116  309D               	movlw	157
  7024  0117  0086               	movwf	6
  7025  0118  3023               	movlw	35
  7026  0119  0087               	movwf	7
  7027  011A  3141               	addfsr 1,1
  7028  011B  0181               	clrf	1
  7029                           
  7030                           ;i2c_slv_drv.c: 396: I2cPacket.SlaveAddress = I2cRxAddress;
  7031  011C  309D               	movlw	157
  7032  011D  0086               	movwf	6
  7033  011E  3023               	movlw	35
  7034  011F  0087               	movwf	7
  7035  0120  085D               	movf	I2c_DataReceiveSm@I2cRxAddress,w
  7036  0121  3FC0               	movwi [0]fsr1
  7037                           
  7038                           ;i2c_slv_drv.c: 397: for (Index = 0; Index < ((UINT8)(80)); Index++)
  7039  0122  01C3               	clrf	I2c_DataReceiveSm@Index
  7040  0123  3050               	movlw	80
  7041  0124  0243               	subwf	I2c_DataReceiveSm@Index,w
  7042  0125  1803               	btfsc	3,0
  7043  0126  2949               	goto	l4203
  7044  0127                     l4197:	
  7045                           
  7046                           ;i2c_slv_drv.c: 398: {
  7047                           ;i2c_slv_drv.c: 399: I2cPacket.Buffer[Index] = I2cRxBuffer[Index];
  7048  0127  0843               	movf	I2c_DataReceiveSm@Index,w
  7049  0128  3E20               	addlw	(low (_I2cRxBuffer| (0+768)))& (0+255)
  7050  0129  0086               	movwf	6
  7051  012A  3003               	movlw	3	; select bank6/7
  7052  012B  0087               	movwf	7
  7053  012C  0801               	movf	1,w
  7054  012D  00BC               	movwf	??_I2c_DataReceiveSm
  7055  012E  0843               	movf	I2c_DataReceiveSm@Index,w
  7056  012F  00BD               	movwf	??_I2c_DataReceiveSm+1
  7057  0130  01BE               	clrf	??_I2c_DataReceiveSm+2
  7058  0131  309F               	movlw	159
  7059  0132  00BF               	movwf	??_I2c_DataReceiveSm+3
  7060  0133  3023               	movlw	35
  7061  0134  00C0               	movwf	??_I2c_DataReceiveSm+4
  7062  0135  083D               	movf	??_I2c_DataReceiveSm+1,w
  7063  0136  073F               	addwf	??_I2c_DataReceiveSm+3,w
  7064  0137  00C1               	movwf	??_I2c_DataReceiveSm+5
  7065  0138  083E               	movf	??_I2c_DataReceiveSm+2,w
  7066  0139  3D40               	addwfc	??_I2c_DataReceiveSm+4,w
  7067  013A  00C2               	movwf	??_I2c_DataReceiveSm+6
  7068  013B  0841               	movf	??_I2c_DataReceiveSm+5,w
  7069  013C  0086               	movwf	6
  7070  013D  0842               	movf	??_I2c_DataReceiveSm+6,w
  7071  013E  0087               	movwf	7
  7072  013F  083C               	movf	??_I2c_DataReceiveSm,w
  7073  0140  0081               	movwf	1
  7074  0141  3001               	movlw	1
  7075  0142  00BC               	movwf	??_I2c_DataReceiveSm
  7076  0143  083C               	movf	??_I2c_DataReceiveSm,w
  7077  0144  07C3               	addwf	I2c_DataReceiveSm@Index,f
  7078  0145  3050               	movlw	80
  7079  0146  0243               	subwf	I2c_DataReceiveSm@Index,w
  7080  0147  1C03               	skipc
  7081  0148  2927               	goto	l4197
  7082  0149                     l4203:	
  7083                           
  7084                           ;i2c_slv_drv.c: 400: }
  7085                           ;i2c_slv_drv.c: 403: GenerateEvt(&I2cNewPacketNotification);
  7086  0149  30D8               	movlw	(low (_I2cNewPacketNotification| 0))& (0+255)
  7087  014A  318B  23C4  3180   	fcall	_GenerateEvt
  7088                           
  7089                           ;i2c_slv_drv.c: 406: RxCounter = 0;
  7090  014D  0020               	movlb	0	; select bank0
  7091  014E  01E1               	clrf	I2c_DataReceiveSm@RxCounter
  7092                           
  7093                           ;i2c_slv_drv.c: 408: ClearRxBuffer();
  7094  014F  318A  2283  3180   	fcall	_ClearRxBuffer
  7095                           
  7096                           ;i2c_slv_drv.c: 409: }
  7097  0152  2962               	goto	l4213
  7098  0153                     l4209:	
  7099                           
  7100                           ;i2c_slv_drv.c: 410: else
  7101                           ;i2c_slv_drv.c: 411: {
  7102                           ;i2c_slv_drv.c: 413: I2cRxBuffer[RxCounter] = SSP1BUF;
  7103  0153  0024               	movlb	4	; select bank4
  7104  0154  0811               	movf	17,w	;volatile
  7105  0155  0020               	movlb	0	; select bank0
  7106  0156  00BC               	movwf	??_I2c_DataReceiveSm
  7107  0157  0861               	movf	I2c_DataReceiveSm@RxCounter,w
  7108  0158  3E20               	addlw	(low (_I2cRxBuffer| (0+768)))& (0+255)
  7109  0159  0086               	movwf	6
  7110  015A  3003               	movlw	3	; select bank6/7
  7111  015B  0087               	movwf	7
  7112  015C  083C               	movf	??_I2c_DataReceiveSm,w
  7113  015D  0081               	movwf	1
  7114                           
  7115                           ;i2c_slv_drv.c: 415: RxCounter++;
  7116  015E  3001               	movlw	1
  7117  015F  00BC               	movwf	??_I2c_DataReceiveSm
  7118  0160  083C               	movf	??_I2c_DataReceiveSm,w
  7119  0161  07E1               	addwf	I2c_DataReceiveSm@RxCounter,f
  7120  0162                     l4213:	
  7121                           
  7122                           ;i2c_slv_drv.c: 416: }
  7123                           ;i2c_slv_drv.c: 418: I2cRxState = StopClkStretch;
  7124  0162  3004               	movlw	4
  7125  0163  0020               	movlb	0	; select bank0
  7126  0164  00BC               	movwf	??_I2c_DataReceiveSm
  7127  0165  083C               	movf	??_I2c_DataReceiveSm,w
  7128  0166  00DF               	movwf	I2c_DataReceiveSm@I2cRxState
  7129                           
  7130                           ;i2c_slv_drv.c: 419: break;
  7131  0167  0008               	return
  7132  0168                     l4215:	
  7133                           ;i2c_slv_drv.c: 421: case HandleRead:
  7134                           
  7135                           
  7136                           ;i2c_slv_drv.c: 423: if (CheckAckStatus() == ((UINT8)(0)))
  7137  0168  3189  21EF  3180   	fcall	_CheckAckStatus
  7138  016B  3A00               	xorlw	0
  7139  016C  1D03               	skipz
  7140  016D  297D               	goto	l4221
  7141                           
  7142                           ;i2c_slv_drv.c: 424: {
  7143                           ;i2c_slv_drv.c: 426: SSP1BUF = I2cTxBuffer[TxCounter];
  7144  016E  0020               	movlb	0	; select bank0
  7145  016F  0862               	movf	I2c_DataReceiveSm@TxCounter,w
  7146  0170  3EA0               	addlw	(low (_I2cTxBuffer| (0+512)))& (0+255)
  7147  0171  0086               	movwf	6
  7148  0172  3002               	movlw	2	; select bank5/6
  7149  0173  0087               	movwf	7
  7150  0174  0801               	movf	1,w
  7151  0175  0024               	movlb	4	; select bank4
  7152  0176  0091               	movwf	17	;volatile
  7153                           
  7154                           ;i2c_slv_drv.c: 428: TxCounter++;
  7155  0177  3001               	movlw	1
  7156  0178  0020               	movlb	0	; select bank0
  7157  0179  00BC               	movwf	??_I2c_DataReceiveSm
  7158  017A  083C               	movf	??_I2c_DataReceiveSm,w
  7159  017B  07E2               	addwf	I2c_DataReceiveSm@TxCounter,f
  7160                           
  7161                           ;i2c_slv_drv.c: 429: }
  7162  017C  2982               	goto	l4225
  7163  017D                     l4221:	
  7164                           
  7165                           ;i2c_slv_drv.c: 430: else
  7166                           ;i2c_slv_drv.c: 431: {
  7167                           ;i2c_slv_drv.c: 433: TxCounter = 0;
  7168  017D  0020               	movlb	0	; select bank0
  7169  017E  01E2               	clrf	I2c_DataReceiveSm@TxCounter
  7170                           
  7171                           ;i2c_slv_drv.c: 435: I2cRxFlag = ((UINT8)(0));
  7172  017F  01DE               	clrf	I2c_DataReceiveSm@I2cRxFlag
  7173                           
  7174                           ;i2c_slv_drv.c: 437: ClearTxBuffer();
  7175  0180  318A  2293         	fcall	_ClearTxBuffer
  7176  0182                     l4225:	
  7177                           
  7178                           ;i2c_slv_drv.c: 439: }
  7179                           ;i2c_slv_drv.c: 441: I2cRxState = StopClkStretch;
  7180  0182  3004               	movlw	4
  7181  0183  0020               	movlb	0	; select bank0
  7182  0184  00BC               	movwf	??_I2c_DataReceiveSm
  7183  0185  083C               	movf	??_I2c_DataReceiveSm,w
  7184  0186  00DF               	movwf	I2c_DataReceiveSm@I2cRxState
  7185                           
  7186                           ;i2c_slv_drv.c: 442: break;
  7187  0187  0008               	return
  7188  0188                     l137:	
  7189                           ;i2c_slv_drv.c: 444: case StopClkStretch:
  7190                           
  7191                           
  7192                           ;i2c_slv_drv.c: 446: SSP1CON1bits.CKP = ((UINT8)(1));
  7193  0188  0024               	movlb	4	; select bank4
  7194  0189  1615               	bsf	21,4	;volatile
  7195                           
  7196                           ;i2c_slv_drv.c: 448: I2cRxState = CheckRxByte;
  7197  018A  0020               	movlb	0	; select bank0
  7198  018B  01DF               	clrf	I2c_DataReceiveSm@I2cRxState
  7199                           
  7200                           ;i2c_slv_drv.c: 453: }
  7201                           
  7202                           ;i2c_slv_drv.c: 452: break;
  7203                           
  7204                           ;i2c_slv_drv.c: 451: default:
  7205                           
  7206                           ;i2c_slv_drv.c: 449: break;
  7207  018C  0008               	return
  7208  018D                     l4231:	
  7209  018D  0020               	movlb	0	; select bank0
  7210  018E  085F               	movf	I2c_DataReceiveSm@I2cRxState,w
  7211                           
  7212                           ; Switch size 1, requested type "space"
  7213                           ; Number of cases is 5, Range of values is 0 to 4
  7214                           ; switch strategies available:
  7215                           ; Name         Instructions Cycles
  7216                           ; direct_byte           16     6 (fixed)
  7217                           ; simple_byte           16     9 (average)
  7218                           ; jumptable            260     6 (fixed)
  7219                           ;	Chosen strategy is direct_byte
  7220  018F  0084               	movwf	4
  7221  0190  3005               	movlw	5
  7222  0191  0204               	subwf	4,w
  7223  0192  1803               	skipnc
  7224  0193  0008               	return
  7225  0194  3188               	movlp	high S4385
  7226  0195  3504               	lslf	4,w
  7227  0196  3E00               	addlw	low S4385
  7228  0197  0082               	movwf	2
  7229  0198  0008               	return
  7230  0199                     __end_of_I2c_DataReceiveSm:	
  7231                           
  7232                           	psect	swtext1
  7233  0800                     __pswtext1:	
  7234  0800                     S4385:	
  7235  0800  3180  28A3         	ljmp	l4139
  7236  0802  3180  28E2         	ljmp	l4171
  7237  0804  3181  2908         	ljmp	l4185
  7238  0806  3181  2968         	ljmp	l4215
  7239  0808  3181  2988         	ljmp	l137
  7240                           
  7241                           	psect	text20
  7242  0AEF                     __ptext20:	
  7243 ;; *************** function _Wdg_MainTask *****************
  7244 ;; Defined at:
  7245 ;;		line 73 in file "../../../Framework/MercuryFwk/Source/c/03_Sml/02_Ssl/wdg.c"
  7246 ;; Parameters:    Size  Location     Type
  7247 ;;  Options         1   27[BANK0 ] unsigned char 
  7248 ;; Auto vars:     Size  Location     Type
  7249 ;;		None
  7250 ;; Return value:  Size  Location     Type
  7251 ;;                  1    wreg      void 
  7252 ;; Registers used:
  7253 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  7254 ;; Tracked objects:
  7255 ;;		On entry : 0/0
  7256 ;;		On exit  : 0/0
  7257 ;;		Unchanged: 0/0
  7258 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7259 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7260 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7261 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7262 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7263 ;;Total ram usage:        1 bytes
  7264 ;; Hardware stack levels used:    1
  7265 ;; Hardware stack levels required when called:    3
  7266 ;; This function calls:
  7267 ;;		_Mcu_ClearWdg
  7268 ;;		_Mcu_SetWdgPeriod
  7269 ;;		_Mcu_SetWdgSts
  7270 ;; This function is called by:
  7271 ;;		_InitializeTasks
  7272 ;;		_ScheduleTasks
  7273 ;; This function uses a non-reentrant model
  7274 ;;
  7275                           
  7276                           
  7277                           ;psect for function _Wdg_MainTask
  7278  0AEF                     _Wdg_MainTask:	
  7279                           
  7280                           ;wdg.c: 75: switch (SystemState)
  7281                           
  7282                           ;incstack = 0
  7283                           ; Regs used in _Wdg_MainTask: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  7284  0AEF  2AFB               	goto	l3415
  7285  0AF0                     l3409:	
  7286                           ;wdg.c: 76: {
  7287                           ;wdg.c: 78: case InitializationState:
  7288                           
  7289                           
  7290                           ;wdg.c: 80: Mcu_SetWdgPeriod(WdgPer_2s);
  7291  0AF0  300B               	movlw	11
  7292  0AF1  318A  220D  318A   	fcall	_Mcu_SetWdgPeriod
  7293                           
  7294                           ;wdg.c: 82: Mcu_SetWdgSts(((UINT8)(1)));
  7295  0AF4  3001               	movlw	1
  7296  0AF5  3189  21BC         	fcall	_Mcu_SetWdgSts
  7297                           
  7298                           ;wdg.c: 83: break;
  7299  0AF7  0008               	return
  7300  0AF8                     l3411:	
  7301                           ;wdg.c: 86: case RunningState:
  7302                           
  7303                           
  7304                           ;wdg.c: 88: Mcu_ClearWdg();
  7305  0AF8  3189  2192         	fcall	_Mcu_ClearWdg
  7306                           
  7307                           ;wdg.c: 94: }
  7308                           
  7309                           ;wdg.c: 93: break;
  7310                           
  7311                           ;wdg.c: 92: default:
  7312                           
  7313                           ;wdg.c: 89: break;
  7314  0AFA  0008               	return
  7315  0AFB                     l3415:	
  7316  0AFB  0020               	movlb	0	; select bank0
  7317  0AFC  0867               	movf	_SystemState,w
  7318                           
  7319                           ; Switch size 1, requested type "space"
  7320                           ; Number of cases is 2, Range of values is 0 to 1
  7321                           ; switch strategies available:
  7322                           ; Name         Instructions Cycles
  7323                           ; simple_byte            7     4 (average)
  7324                           ; direct_byte           10     6 (fixed)
  7325                           ; jumptable            260     6 (fixed)
  7326                           ;	Chosen strategy is simple_byte
  7327  0AFD  3A00               	xorlw	0	; case 0
  7328  0AFE  1903               	skipnz
  7329  0AFF  2AF0               	goto	l3409
  7330  0B00  3A01               	xorlw	1	; case 1
  7331  0B01  1903               	skipnz
  7332  0B02  2AF8               	goto	l3411
  7333  0B03  2B04               	goto	l807
  7334  0B04                     l807:	
  7335  0B04  0008               	return
  7336  0B05                     __end_of_Wdg_MainTask:	
  7337                           
  7338                           	psect	text21
  7339  0A0D                     __ptext21:	
  7340 ;; *************** function _Mcu_SetWdgPeriod *****************
  7341 ;; Defined at:
  7342 ;;		line 223 in file "../../../Framework/MercuryFwk/Source/c/01_Hal/02_Drv/mcu_drv.c"
  7343 ;; Parameters:    Size  Location     Type
  7344 ;;  WdgPeriod       1    wreg     enum E3392
  7345 ;; Auto vars:     Size  Location     Type
  7346 ;;  WdgPeriod       1    5[COMMON] enum E3392
  7347 ;; Return value:  Size  Location     Type
  7348 ;;                  1    wreg      void 
  7349 ;; Registers used:
  7350 ;;		wreg, status,2, status,0
  7351 ;; Tracked objects:
  7352 ;;		On entry : 0/0
  7353 ;;		On exit  : 0/0
  7354 ;;		Unchanged: 0/0
  7355 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7356 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7357 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7358 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7359 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7360 ;;Total ram usage:        2 bytes
  7361 ;; Hardware stack levels used:    1
  7362 ;; Hardware stack levels required when called:    2
  7363 ;; This function calls:
  7364 ;;		Nothing
  7365 ;; This function is called by:
  7366 ;;		_Wdg_MainTask
  7367 ;; This function uses a non-reentrant model
  7368 ;;
  7369                           
  7370                           
  7371                           ;psect for function _Mcu_SetWdgPeriod
  7372  0A0D                     _Mcu_SetWdgPeriod:	
  7373                           
  7374                           ;incstack = 0
  7375                           ; Regs used in _Mcu_SetWdgPeriod: [wreg+status,2+status,0]
  7376                           ;Mcu_SetWdgPeriod@WdgPeriod stored from wreg
  7377  0A0D  00F5               	movwf	Mcu_SetWdgPeriod@WdgPeriod
  7378                           
  7379                           ;mcu_drv.c: 226: WDTCONbits.WDTPS = WdgPeriod;
  7380  0A0E  0875               	movf	Mcu_SetWdgPeriod@WdgPeriod,w
  7381  0A0F  00F4               	movwf	??_Mcu_SetWdgPeriod
  7382  0A10  0DF4               	rlf	??_Mcu_SetWdgPeriod,f
  7383  0A11  0021               	movlb	1	; select bank1
  7384  0A12  0817               	movf	23,w	;volatile
  7385  0A13  0674               	xorwf	??_Mcu_SetWdgPeriod,w
  7386  0A14  39C1               	andlw	-63
  7387  0A15  0674               	xorwf	??_Mcu_SetWdgPeriod,w
  7388  0A16  0097               	movwf	23	;volatile
  7389  0A17  0008               	return
  7390  0A18                     __end_of_Mcu_SetWdgPeriod:	
  7391                           
  7392                           	psect	text22
  7393  0992                     __ptext22:	
  7394 ;; *************** function _Mcu_ClearWdg *****************
  7395 ;; Defined at:
  7396 ;;		line 251 in file "../../../Framework/MercuryFwk/Source/c/01_Hal/02_Drv/mcu_drv.c"
  7397 ;; Parameters:    Size  Location     Type
  7398 ;;		None
  7399 ;; Auto vars:     Size  Location     Type
  7400 ;;		None
  7401 ;; Return value:  Size  Location     Type
  7402 ;;                  1    wreg      void 
  7403 ;; Registers used:
  7404 ;;		None
  7405 ;; Tracked objects:
  7406 ;;		On entry : 0/0
  7407 ;;		On exit  : 0/0
  7408 ;;		Unchanged: 0/0
  7409 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7410 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7411 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7412 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7413 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7414 ;;Total ram usage:        0 bytes
  7415 ;; Hardware stack levels used:    1
  7416 ;; Hardware stack levels required when called:    2
  7417 ;; This function calls:
  7418 ;;		Nothing
  7419 ;; This function is called by:
  7420 ;;		_Wdg_MainTask
  7421 ;; This function uses a non-reentrant model
  7422 ;;
  7423                           
  7424                           
  7425                           ;psect for function _Mcu_ClearWdg
  7426  0992                     _Mcu_ClearWdg:	
  7427                           
  7428                           ;incstack = 0
  7429                           ; Regs used in _Mcu_ClearWdg: []
  7430  0992  0064               	clrwdt	;# 
  7431  0993  0008               	return
  7432  0994                     __end_of_Mcu_ClearWdg:	
  7433                           
  7434                           	psect	text23
  7435  0EB9                     __ptext23:	
  7436 ;; *************** function _Led_InitSeq *****************
  7437 ;; Defined at:
  7438 ;;		line 128 in file "../../../Framework/MercuryFwk/Source/c/03_Sml/02_Ssl/led.c"
  7439 ;; Parameters:    Size  Location     Type
  7440 ;;		None
  7441 ;; Auto vars:     Size  Location     Type
  7442 ;;		None
  7443 ;; Return value:  Size  Location     Type
  7444 ;;                  1    wreg      void 
  7445 ;; Registers used:
  7446 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  7447 ;; Tracked objects:
  7448 ;;		On entry : 0/0
  7449 ;;		On exit  : 0/0
  7450 ;;		Unchanged: 0/0
  7451 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7452 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7453 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7454 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7455 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7456 ;;Total ram usage:        1 bytes
  7457 ;; Hardware stack levels used:    1
  7458 ;; Hardware stack levels required when called:    3
  7459 ;; This function calls:
  7460 ;;		_Led_SetLedStatus
  7461 ;; This function is called by:
  7462 ;;		_Led_MainTask
  7463 ;; This function uses a non-reentrant model
  7464 ;;
  7465                           
  7466                           
  7467                           ;psect for function _Led_InitSeq
  7468  0EB9                     _Led_InitSeq:	
  7469                           
  7470                           ;led.c: 130: static UINT16 DelayCounter = 0;
  7471                           ;led.c: 131: static UINT8 Counter = 0;
  7472                           ;led.c: 132: static UINT8 LedInitSts = LED_STS_ON;
  7473                           ;led.c: 133: static InitSeqStateType InitSeqState = Startup;
  7474                           ;led.c: 135: switch (InitSeqState)
  7475                           
  7476                           ;incstack = 0
  7477                           ; Regs used in _Led_InitSeq: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  7478  0EB9  2EFA               	goto	l4115
  7479  0EBA                     l4093:	
  7480                           ;led.c: 136: {
  7481                           ;led.c: 137: case Startup:
  7482                           
  7483                           
  7484                           ;led.c: 139: Led_SetLedStatus(1u,LedInitSts);
  7485  0EBA  0878               	movf	Led_InitSeq@LedInitSts,w
  7486  0EBB  0020               	movlb	0	; select bank0
  7487  0EBC  00A1               	movwf	??_Led_InitSeq
  7488  0EBD  0821               	movf	??_Led_InitSeq,w
  7489  0EBE  00F4               	movwf	Led_SetLedStatus@LedSts
  7490  0EBF  3001               	movlw	1
  7491  0EC0  318A  2255         	fcall	_Led_SetLedStatus
  7492                           
  7493                           ;led.c: 141: InitSeqState = Initializing;
  7494  0EC2  0020               	movlb	0	; select bank0
  7495  0EC3  01E4               	clrf	Led_InitSeq@InitSeqState
  7496  0EC4  0AE4               	incf	Led_InitSeq@InitSeqState,f
  7497                           
  7498                           ;led.c: 142: break;
  7499  0EC5  0008               	return
  7500  0EC6                     l4097:	
  7501                           ;led.c: 144: case Initializing:
  7502                           
  7503                           
  7504                           ;led.c: 146: DelayCounter++;
  7505  0EC6  3001               	movlw	1
  7506  0EC7  0021               	movlb	1	; select bank1
  7507  0EC8  07B4               	addwf	Led_InitSeq@DelayCounter^(0+128),f
  7508  0EC9  3000               	movlw	0
  7509  0ECA  3DB5               	addwfc	(Led_InitSeq@DelayCounter+1)^(0+128),f
  7510                           
  7511                           ;led.c: 148: if (DelayCounter > (50u)/(((UINT16)(10))))
  7512  0ECB  3000               	movlw	0
  7513  0ECC  0235               	subwf	(Led_InitSeq@DelayCounter+1)^(0+128),w
  7514  0ECD  3006               	movlw	6
  7515  0ECE  1903               	skipnz
  7516  0ECF  0234               	subwf	Led_InitSeq@DelayCounter^(0+128),w
  7517  0ED0  1C03               	skipc
  7518  0ED1  0008               	return
  7519                           
  7520                           ;led.c: 149: {
  7521                           ;led.c: 151: LedInitSts = !LedInitSts;
  7522  0ED2  0878               	movf	Led_InitSeq@LedInitSts,w
  7523  0ED3  1D03               	btfss	3,2
  7524  0ED4  2ED7               	goto	u3140
  7525  0ED5  3001               	movlw	1
  7526  0ED6  2ED8               	goto	u3150
  7527  0ED7                     u3140:	
  7528  0ED7  3000               	movlw	0
  7529  0ED8                     u3150:	
  7530  0ED8  0020               	movlb	0	; select bank0
  7531  0ED9  00A1               	movwf	??_Led_InitSeq
  7532  0EDA  0821               	movf	??_Led_InitSeq,w
  7533  0EDB  00F8               	movwf	Led_InitSeq@LedInitSts
  7534                           
  7535                           ;led.c: 153: Led_SetLedStatus(1u,LedInitSts);
  7536  0EDC  0878               	movf	Led_InitSeq@LedInitSts,w
  7537  0EDD  00A1               	movwf	??_Led_InitSeq
  7538  0EDE  0821               	movf	??_Led_InitSeq,w
  7539  0EDF  00F4               	movwf	Led_SetLedStatus@LedSts
  7540  0EE0  3001               	movlw	1
  7541  0EE1  318A  2255  318E   	fcall	_Led_SetLedStatus
  7542                           
  7543                           ;led.c: 155: DelayCounter = 0;
  7544  0EE4  0021               	movlb	1	; select bank1
  7545  0EE5  01B4               	clrf	Led_InitSeq@DelayCounter^(0+128)
  7546  0EE6  01B5               	clrf	(Led_InitSeq@DelayCounter+1)^(0+128)
  7547                           
  7548                           ;led.c: 157: Counter++;
  7549  0EE7  3001               	movlw	1
  7550  0EE8  0020               	movlb	0	; select bank0
  7551  0EE9  00A1               	movwf	??_Led_InitSeq
  7552  0EEA  0821               	movf	??_Led_InitSeq,w
  7553  0EEB  07E3               	addwf	Led_InitSeq@Counter,f
  7554                           
  7555                           ;led.c: 159: if (Counter > 5u)
  7556  0EEC  3006               	movlw	6
  7557  0EED  0263               	subwf	Led_InitSeq@Counter,w
  7558  0EEE  1C03               	skipc
  7559  0EEF  0008               	return
  7560                           
  7561                           ;led.c: 160: {
  7562                           ;led.c: 162: Led_SetLedStatus(1u,LED_STS_OFF);
  7563  0EF0  01F4               	clrf	Led_SetLedStatus@LedSts
  7564  0EF1  3001               	movlw	1
  7565  0EF2  318A  2255         	fcall	_Led_SetLedStatus
  7566                           
  7567                           ;led.c: 164: InitSeqState = Done;
  7568  0EF4  3002               	movlw	2
  7569  0EF5  0020               	movlb	0	; select bank0
  7570  0EF6  00A1               	movwf	??_Led_InitSeq
  7571  0EF7  0821               	movf	??_Led_InitSeq,w
  7572  0EF8  00E4               	movwf	Led_InitSeq@InitSeqState
  7573                           
  7574                           ;led.c: 174: }
  7575                           
  7576                           ;led.c: 173: break;
  7577                           
  7578                           ;led.c: 172: default:
  7579                           
  7580                           ;led.c: 170: break;
  7581                           
  7582                           ;led.c: 169: case Done:
  7583                           
  7584                           ;led.c: 165: }
  7585                           ;led.c: 166: }
  7586                           ;led.c: 167: break;
  7587  0EF9  0008               	return
  7588  0EFA                     l4115:	
  7589  0EFA  0020               	movlb	0	; select bank0
  7590  0EFB  0864               	movf	Led_InitSeq@InitSeqState,w
  7591                           
  7592                           ; Switch size 1, requested type "space"
  7593                           ; Number of cases is 3, Range of values is 0 to 2
  7594                           ; switch strategies available:
  7595                           ; Name         Instructions Cycles
  7596                           ; simple_byte           10     6 (average)
  7597                           ; direct_byte           12     6 (fixed)
  7598                           ; jumptable            260     6 (fixed)
  7599                           ;	Chosen strategy is simple_byte
  7600  0EFC  3A00               	xorlw	0	; case 0
  7601  0EFD  1903               	skipnz
  7602  0EFE  2EBA               	goto	l4093
  7603  0EFF  3A01               	xorlw	1	; case 1
  7604  0F00  1903               	skipnz
  7605  0F01  2EC6               	goto	l4097
  7606  0F02  3A03               	xorlw	3	; case 2
  7607  0F03  1903               	skipnz
  7608  0F04  2F06               	goto	l607
  7609  0F05  2F06               	goto	l607
  7610  0F06                     l607:	
  7611  0F06  0008               	return
  7612  0F07                     __end_of_Led_InitSeq:	
  7613                           
  7614                           	psect	text24
  7615  0D11                     __ptext24:	
  7616 ;; *************** function _LedStateMachine *****************
  7617 ;; Defined at:
  7618 ;;		line 82 in file "../../../Framework/MercuryFwk/Source/c/03_Sml/02_Ssl/led.c"
  7619 ;; Parameters:    Size  Location     Type
  7620 ;;  Led             1    wreg     unsigned char 
  7621 ;;  LedSts          1   11[BANK0 ] PTR enum E3739
  7622 ;;		 -> Led1Sts(1), 
  7623 ;;  LedBlink        1   12[BANK0 ] PTR struct _LedBlinkType
  7624 ;;		 -> Led1Blink(9), 
  7625 ;;  LedPulse        1   13[BANK0 ] PTR struct _LedPulseType
  7626 ;;		 -> Led1Pulse(6), 
  7627 ;; Auto vars:     Size  Location     Type
  7628 ;;  Led             1   16[BANK0 ] unsigned char 
  7629 ;;  LedOutSts       1   17[BANK0 ] unsigned char 
  7630 ;; Return value:  Size  Location     Type
  7631 ;;                  1    wreg      unsigned char 
  7632 ;; Registers used:
  7633 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7634 ;; Tracked objects:
  7635 ;;		On entry : 0/0
  7636 ;;		On exit  : 0/0
  7637 ;;		Unchanged: 0/0
  7638 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7639 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7640 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7641 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7642 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7643 ;;Total ram usage:        7 bytes
  7644 ;; Hardware stack levels used:    1
  7645 ;; Hardware stack levels required when called:    4
  7646 ;; This function calls:
  7647 ;;		_LedBlinkStateMachine
  7648 ;;		_LedPulseStateMachine
  7649 ;; This function is called by:
  7650 ;;		_Led_MainTask
  7651 ;; This function uses a non-reentrant model
  7652 ;;
  7653                           
  7654                           
  7655                           ;psect for function _LedStateMachine
  7656  0D11                     _LedStateMachine:	
  7657                           
  7658                           ;incstack = 0
  7659                           ; Regs used in _LedStateMachine: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  7660                           ;LedStateMachine@Led stored from wreg
  7661  0D11  0020               	movlb	0	; select bank0
  7662  0D12  00B0               	movwf	LedStateMachine@Led
  7663                           
  7664                           ;led.c: 85: UINT8 LedOutSts = 0u;
  7665  0D13  01B1               	clrf	LedStateMachine@LedOutSts
  7666                           
  7667                           ;led.c: 88: switch (*LedSts)
  7668  0D14  2D2F               	goto	l4085
  7669  0D15                     l4077:	
  7670                           ;led.c: 89: {
  7671                           ;led.c: 90: case LED_STS_OFF:
  7672                           
  7673                           
  7674                           ;led.c: 92: LedOutSts = ((UINT8)(0));
  7675  0D15  01B1               	clrf	LedStateMachine@LedOutSts
  7676                           
  7677                           ;led.c: 93: break;
  7678  0D16  2D40               	goto	l4087
  7679  0D17                     l584:	
  7680                           ;led.c: 95: case LED_STS_ON:
  7681                           
  7682                           
  7683                           ;led.c: 97: LedOutSts = ((UINT8)(1));
  7684  0D17  01B1               	clrf	LedStateMachine@LedOutSts
  7685  0D18  0AB1               	incf	LedStateMachine@LedOutSts,f
  7686                           
  7687                           ;led.c: 98: break;
  7688  0D19  2D40               	goto	l4087
  7689  0D1A                     l4079:	
  7690                           ;led.c: 100: case LED_STS_BLINK:
  7691                           
  7692                           
  7693                           ;led.c: 102: LedOutSts = LedBlinkStateMachine(LedBlink);
  7694  0D1A  082C               	movf	LedStateMachine@LedBlink,w
  7695  0D1B  3184  24AD  318D   	fcall	_LedBlinkStateMachine
  7696  0D1E  0020               	movlb	0	; select bank0
  7697  0D1F  00AE               	movwf	??_LedStateMachine
  7698  0D20  082E               	movf	??_LedStateMachine,w
  7699  0D21  2D2D               	goto	L7
  7700  0D22                     l4081:	
  7701                           ;led.c: 105: case LED_STS_PULSE:
  7702                           
  7703                           ;led.c: 103: break;
  7704                           
  7705                           
  7706                           ;led.c: 107: LedOutSts = LedPulseStateMachine(LedPulse, Led);
  7707  0D22  0830               	movf	LedStateMachine@Led,w
  7708  0D23  00AE               	movwf	??_LedStateMachine
  7709  0D24  082E               	movf	??_LedStateMachine,w
  7710  0D25  00A7               	movwf	LedPulseStateMachine@Led
  7711  0D26  082D               	movf	LedStateMachine@LedPulse,w
  7712  0D27  3186  26B4  318D   	fcall	_LedPulseStateMachine
  7713  0D2A  0020               	movlb	0	; select bank0
  7714  0D2B  00AF               	movwf	??_LedStateMachine+1
  7715  0D2C  082F               	movf	??_LedStateMachine+1,w
  7716  0D2D                     L7:	
  7717  0D2D  00B1               	movwf	LedStateMachine@LedOutSts
  7718                           
  7719                           ;led.c: 112: }
  7720                           
  7721                           ;led.c: 111: break;
  7722                           
  7723                           ;led.c: 110: default:
  7724                           
  7725                           ;led.c: 108: break;
  7726  0D2E  2D40               	goto	l4087
  7727  0D2F                     l4085:	
  7728  0D2F  082B               	movf	LedStateMachine@LedSts,w
  7729  0D30  0086               	movwf	6
  7730  0D31  0187               	clrf	7
  7731  0D32  0801               	movf	1,w
  7732                           
  7733                           ; Switch size 1, requested type "space"
  7734                           ; Number of cases is 4, Range of values is 0 to 3
  7735                           ; switch strategies available:
  7736                           ; Name         Instructions Cycles
  7737                           ; simple_byte           13     7 (average)
  7738                           ; direct_byte           14     6 (fixed)
  7739                           ; jumptable            260     6 (fixed)
  7740                           ;	Chosen strategy is simple_byte
  7741  0D33  3A00               	xorlw	0	; case 0
  7742  0D34  1903               	skipnz
  7743  0D35  2D15               	goto	l4077
  7744  0D36  3A01               	xorlw	1	; case 1
  7745  0D37  1903               	skipnz
  7746  0D38  2D17               	goto	l584
  7747  0D39  3A03               	xorlw	3	; case 2
  7748  0D3A  1903               	skipnz
  7749  0D3B  2D1A               	goto	l4079
  7750  0D3C  3A01               	xorlw	1	; case 3
  7751  0D3D  1903               	skipnz
  7752  0D3E  2D22               	goto	l4081
  7753  0D3F  2D40               	goto	l4087
  7754  0D40                     l4087:	
  7755                           
  7756                           ;led.c: 114: return LedOutSts;
  7757  0D40  0831               	movf	LedStateMachine@LedOutSts,w
  7758  0D41  0008               	return
  7759  0D42                     __end_of_LedStateMachine:	
  7760                           
  7761                           	psect	text25
  7762  06B4                     __ptext25:	
  7763 ;; *************** function _LedPulseStateMachine *****************
  7764 ;; Defined at:
  7765 ;;		line 131 in file "../../../Framework/MercuryFwk/Source/c/01_Hal/02_Drv/led_drv.c"
  7766 ;; Parameters:    Size  Location     Type
  7767 ;;  LedPulse        1    wreg     PTR struct _LedPulseType
  7768 ;;		 -> Led1Pulse(6), 
  7769 ;;  Led             1    7[BANK0 ] unsigned char 
  7770 ;; Auto vars:     Size  Location     Type
  7771 ;;  LedPulse        1   10[BANK0 ] PTR struct _LedPulseType
  7772 ;;		 -> Led1Pulse(6), 
  7773 ;; Return value:  Size  Location     Type
  7774 ;;                  1    wreg      unsigned char 
  7775 ;; Registers used:
  7776 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7777 ;; Tracked objects:
  7778 ;;		On entry : 0/0
  7779 ;;		On exit  : 0/0
  7780 ;;		Unchanged: 0/0
  7781 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7782 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7783 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7784 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7785 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7786 ;;Total ram usage:        4 bytes
  7787 ;; Hardware stack levels used:    1
  7788 ;; Hardware stack levels required when called:    3
  7789 ;; This function calls:
  7790 ;;		_Led_SetLedStatus
  7791 ;;		___lwdiv
  7792 ;; This function is called by:
  7793 ;;		_LedStateMachine
  7794 ;; This function uses a non-reentrant model
  7795 ;;
  7796                           
  7797                           
  7798                           ;psect for function _LedPulseStateMachine
  7799  06B4                     _LedPulseStateMachine:	
  7800                           
  7801                           ;incstack = 0
  7802                           ; Regs used in _LedPulseStateMachine: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  7803                           ;LedPulseStateMachine@LedPulse stored from wreg
  7804  06B4  0020               	movlb	0	; select bank0
  7805  06B5  00AA               	movwf	LedPulseStateMachine@LedPulse
  7806                           
  7807                           ;led_drv.c: 134: switch (LedPulse->LedPulseState)
  7808  06B6  2F07               	goto	l3901
  7809  06B7                     l3883:	
  7810                           ;led_drv.c: 135: {
  7811                           ;led_drv.c: 136: case LedPulseOn:
  7812                           
  7813                           
  7814                           ;led_drv.c: 138: LedPulse->LedOutState = ((UINT8)(1));
  7815  06B7  0A2A               	incf	LedPulseStateMachine@LedPulse,w
  7816  06B8  0086               	movwf	6
  7817  06B9  0187               	clrf	7
  7818  06BA  0181               	clrf	1
  7819  06BB  0A81               	incf	1,f
  7820                           
  7821                           ;led_drv.c: 140: LedPulse->LedPulseState = LedPulseDelay;
  7822  06BC  082A               	movf	LedPulseStateMachine@LedPulse,w
  7823  06BD  0086               	movwf	6
  7824  06BE  0187               	clrf	7
  7825  06BF  0181               	clrf	1
  7826  06C0  0A81               	incf	1,f
  7827  06C1                     l3885:	
  7828                           ;led_drv.c: 143: case LedPulseDelay:
  7829                           
  7830                           
  7831                           ;led_drv.c: 145: LedPulse->LedPulseCounter++;
  7832  06C1  082A               	movf	LedPulseStateMachine@LedPulse,w
  7833  06C2  3E02               	addlw	2
  7834  06C3  0086               	movwf	6
  7835  06C4  0187               	clrf	7
  7836  06C5  3001               	movlw	1
  7837  06C6  0781               	addwf	1,f
  7838  06C7  3141               	addfsr 1,1
  7839  06C8  1803               	skipnc
  7840  06C9  0A81               	incf	1,f
  7841                           
  7842                           ;led_drv.c: 147: if (LedPulse->LedPulseCounter >= (LedPulse->LedPulseTimeMs/((UINT16)(10
      +                          ))))
  7843  06CA  300A               	movlw	10
  7844  06CB  00A0               	movwf	___lwdiv@divisor
  7845  06CC  3000               	movlw	0
  7846  06CD  00A1               	movwf	___lwdiv@divisor+1
  7847  06CE  082A               	movf	LedPulseStateMachine@LedPulse,w
  7848  06CF  3E04               	addlw	4
  7849  06D0  0086               	movwf	6
  7850  06D1  0187               	clrf	7
  7851  06D2  3F40               	moviw [0]fsr1
  7852  06D3  00A2               	movwf	___lwdiv@dividend
  7853  06D4  3F41               	moviw [1]fsr1
  7854  06D5  00A3               	movwf	___lwdiv@dividend+1
  7855  06D6  318D  2575  3186   	fcall	___lwdiv
  7856  06D9  0020               	movlb	0	; select bank0
  7857  06DA  082A               	movf	LedPulseStateMachine@LedPulse,w
  7858  06DB  3E02               	addlw	2
  7859  06DC  0086               	movwf	6
  7860  06DD  0187               	clrf	7
  7861  06DE  3F40               	moviw [0]fsr1
  7862  06DF  00A8               	movwf	??_LedPulseStateMachine
  7863  06E0  3F41               	moviw [1]fsr1
  7864  06E1  00A9               	movwf	??_LedPulseStateMachine+1
  7865  06E2  0821               	movf	?___lwdiv+1,w
  7866  06E3  0229               	subwf	??_LedPulseStateMachine+1,w
  7867  06E4  1D03               	skipz
  7868  06E5  2EE8               	goto	u2825
  7869  06E6  0820               	movf	?___lwdiv,w
  7870  06E7  0228               	subwf	??_LedPulseStateMachine,w
  7871  06E8                     u2825:	
  7872  06E8  1C03               	skipc
  7873  06E9  2F16               	goto	l3903
  7874                           
  7875                           ;led_drv.c: 148: {
  7876                           ;led_drv.c: 150: LedPulse->LedPulseCounter = 0;
  7877  06EA  082A               	movf	LedPulseStateMachine@LedPulse,w
  7878  06EB  3E02               	addlw	2
  7879  06EC  0086               	movwf	6
  7880  06ED  0187               	clrf	7
  7881  06EE  3000               	movlw	0
  7882  06EF  3FC0               	movwi [0]fsr1
  7883  06F0  3FC1               	movwi [1]fsr1
  7884                           
  7885                           ;led_drv.c: 152: LedPulse->LedOutState = ((UINT8)(0));
  7886  06F1  0A2A               	incf	LedPulseStateMachine@LedPulse,w
  7887  06F2  0086               	movwf	6
  7888  06F3  0187               	clrf	7
  7889  06F4  0181               	clrf	1
  7890                           
  7891                           ;led_drv.c: 154: LedPulse->LedPulseState = LedPulseOff;
  7892  06F5  3002               	movlw	2
  7893  06F6  00A8               	movwf	??_LedPulseStateMachine
  7894  06F7  082A               	movf	LedPulseStateMachine@LedPulse,w
  7895  06F8  0086               	movwf	6
  7896  06F9  0187               	clrf	7
  7897  06FA  0828               	movf	??_LedPulseStateMachine,w
  7898  06FB  0081               	movwf	1
  7899                           
  7900                           ;led_drv.c: 155: }
  7901                           ;led_drv.c: 156: break;
  7902  06FC  2F16               	goto	l3903
  7903  06FD                     l3895:	
  7904                           ;led_drv.c: 158: case LedPulseOff:
  7905                           
  7906                           
  7907                           ;led_drv.c: 160: LedPulse->LedPulseState = LedPulseOn;
  7908  06FD  082A               	movf	LedPulseStateMachine@LedPulse,w
  7909  06FE  0086               	movwf	6
  7910  06FF  0187               	clrf	7
  7911  0700  0181               	clrf	1
  7912                           
  7913                           ;led_drv.c: 162: Led_SetLedStatus(Led,LED_STS_OFF);
  7914  0701  01F4               	clrf	Led_SetLedStatus@LedSts
  7915  0702  0827               	movf	LedPulseStateMachine@Led,w
  7916  0703  318A  2255  3186   	fcall	_Led_SetLedStatus
  7917                           
  7918                           ;led_drv.c: 167: }
  7919                           
  7920                           ;led_drv.c: 166: break;
  7921                           
  7922                           ;led_drv.c: 165: default:
  7923                           
  7924                           ;led_drv.c: 163: break;
  7925  0706  2F16               	goto	l3903
  7926  0707                     l3901:	
  7927  0707  0020               	movlb	0	; select bank0
  7928  0708  082A               	movf	LedPulseStateMachine@LedPulse,w
  7929  0709  0086               	movwf	6
  7930  070A  0187               	clrf	7
  7931  070B  0801               	movf	1,w
  7932                           
  7933                           ; Switch size 1, requested type "space"
  7934                           ; Number of cases is 3, Range of values is 0 to 2
  7935                           ; switch strategies available:
  7936                           ; Name         Instructions Cycles
  7937                           ; simple_byte           10     6 (average)
  7938                           ; direct_byte           12     6 (fixed)
  7939                           ; jumptable            260     6 (fixed)
  7940                           ;	Chosen strategy is simple_byte
  7941  070C  3A00               	xorlw	0	; case 0
  7942  070D  1903               	skipnz
  7943  070E  2EB7               	goto	l3883
  7944  070F  3A01               	xorlw	1	; case 1
  7945  0710  1903               	skipnz
  7946  0711  2EC1               	goto	l3885
  7947  0712  3A03               	xorlw	3	; case 2
  7948  0713  1903               	skipnz
  7949  0714  2EFD               	goto	l3895
  7950  0715  2F16               	goto	l3903
  7951  0716                     l3903:	
  7952                           
  7953                           ;led_drv.c: 170: return (LedPulse->LedOutState);
  7954  0716  0020               	movlb	0	; select bank0
  7955  0717  0A2A               	incf	LedPulseStateMachine@LedPulse,w
  7956  0718  0086               	movwf	6
  7957  0719  0187               	clrf	7
  7958  071A  0801               	movf	1,w
  7959  071B  0008               	return
  7960  071C                     __end_of_LedPulseStateMachine:	
  7961                           
  7962                           	psect	text26
  7963  04AD                     __ptext26:	
  7964 ;; *************** function _LedBlinkStateMachine *****************
  7965 ;; Defined at:
  7966 ;;		line 74 in file "../../../Framework/MercuryFwk/Source/c/01_Hal/02_Drv/led_drv.c"
  7967 ;; Parameters:    Size  Location     Type
  7968 ;;  LedBlink        1    wreg     PTR struct _LedBlinkType
  7969 ;;		 -> Led1Blink(9), 
  7970 ;; Auto vars:     Size  Location     Type
  7971 ;;  LedBlink        1    5[COMMON] PTR struct _LedBlinkType
  7972 ;;		 -> Led1Blink(9), 
  7973 ;; Return value:  Size  Location     Type
  7974 ;;                  1    wreg      unsigned char 
  7975 ;; Registers used:
  7976 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7977 ;; Tracked objects:
  7978 ;;		On entry : 0/0
  7979 ;;		On exit  : 0/0
  7980 ;;		Unchanged: 0/0
  7981 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7982 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7983 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7984 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7985 ;;      Totals:         1       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7986 ;;Total ram usage:        3 bytes
  7987 ;; Hardware stack levels used:    1
  7988 ;; Hardware stack levels required when called:    3
  7989 ;; This function calls:
  7990 ;;		___lwdiv
  7991 ;; This function is called by:
  7992 ;;		_LedStateMachine
  7993 ;; This function uses a non-reentrant model
  7994 ;;
  7995                           
  7996                           
  7997                           ;psect for function _LedBlinkStateMachine
  7998  04AD                     _LedBlinkStateMachine:	
  7999                           
  8000                           ;incstack = 0
  8001                           ; Regs used in _LedBlinkStateMachine: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  8002                           ;LedBlinkStateMachine@LedBlink stored from wreg
  8003  04AD  00F5               	movwf	LedBlinkStateMachine@LedBlink
  8004                           
  8005                           ;led_drv.c: 77: switch (LedBlink->LedBlinkState)
  8006  04AE  2D2D               	goto	l3875
  8007  04AF                     l3853:	
  8008                           ;led_drv.c: 78: {
  8009                           ;led_drv.c: 79: case LedBlinkInit:
  8010                           
  8011                           
  8012                           ;led_drv.c: 81: LedBlink->LedOutState = LedBlink->LedInitStatus;
  8013  04AF  0875               	movf	LedBlinkStateMachine@LedBlink,w
  8014  04B0  3E08               	addlw	8
  8015  04B1  0086               	movwf	6
  8016  04B2  0187               	clrf	7
  8017  04B3  0801               	movf	1,w
  8018  04B4  0020               	movlb	0	; select bank0
  8019  04B5  00A7               	movwf	??_LedBlinkStateMachine
  8020  04B6  0A75               	incf	LedBlinkStateMachine@LedBlink,w
  8021  04B7  0086               	movwf	6
  8022  04B8  0187               	clrf	7
  8023  04B9  0827               	movf	??_LedBlinkStateMachine,w
  8024  04BA  0081               	movwf	1
  8025                           
  8026                           ;led_drv.c: 83: LedBlink->LedBlinkState = LedBlinkRunning;
  8027  04BB  0875               	movf	LedBlinkStateMachine@LedBlink,w
  8028  04BC  2CF5               	goto	L8
  8029  04BD                     l3857:	
  8030                           ;led_drv.c: 86: case LedBlinkRunning:
  8031                           
  8032                           ;led_drv.c: 84: break;
  8033                           
  8034                           
  8035                           ;led_drv.c: 88: LedBlink->LedBlinkCounter++;
  8036  04BD  0875               	movf	LedBlinkStateMachine@LedBlink,w
  8037  04BE  3E02               	addlw	2
  8038  04BF  0086               	movwf	6
  8039  04C0  0187               	clrf	7
  8040  04C1  3001               	movlw	1
  8041  04C2  0781               	addwf	1,f
  8042  04C3  3141               	addfsr 1,1
  8043  04C4  1803               	skipnc
  8044  04C5  0A81               	incf	1,f
  8045                           
  8046                           ;led_drv.c: 90: if (LedBlink->LedOutState == OffState)
  8047  04C6  0A75               	incf	LedBlinkStateMachine@LedBlink,w
  8048  04C7  0086               	movwf	6
  8049  04C8  0187               	clrf	7
  8050  04C9  0801               	movf	1,w
  8051  04CA  1D03               	btfss	3,2
  8052  04CB  2CFA               	goto	l3865
  8053                           
  8054                           ;led_drv.c: 91: {
  8055                           ;led_drv.c: 93: if (LedBlink->LedBlinkCounter >= (LedBlink->LedOffTimeMs/((UINT16)(10)))
      +                          )
  8056  04CC  300A               	movlw	10
  8057  04CD  0020               	movlb	0	; select bank0
  8058  04CE  00A0               	movwf	___lwdiv@divisor
  8059  04CF  3000               	movlw	0
  8060  04D0  00A1               	movwf	___lwdiv@divisor+1
  8061  04D1  0875               	movf	LedBlinkStateMachine@LedBlink,w
  8062  04D2  3E06               	addlw	6
  8063  04D3  0086               	movwf	6
  8064  04D4  0187               	clrf	7
  8065  04D5  3F40               	moviw [0]fsr1
  8066  04D6  00A2               	movwf	___lwdiv@dividend
  8067  04D7  3F41               	moviw [1]fsr1
  8068  04D8  00A3               	movwf	___lwdiv@dividend+1
  8069  04D9  318D  2575  3184   	fcall	___lwdiv
  8070  04DC  0875               	movf	LedBlinkStateMachine@LedBlink,w
  8071  04DD  3E02               	addlw	2
  8072  04DE  0086               	movwf	6
  8073  04DF  0187               	clrf	7
  8074  04E0  3F40               	moviw [0]fsr1
  8075  04E1  0020               	movlb	0	; select bank0
  8076  04E2  00A7               	movwf	??_LedBlinkStateMachine
  8077  04E3  3F41               	moviw [1]fsr1
  8078  04E4  00A8               	movwf	??_LedBlinkStateMachine+1
  8079  04E5  0821               	movf	?___lwdiv+1,w
  8080  04E6  0228               	subwf	??_LedBlinkStateMachine+1,w
  8081  04E7  1D03               	skipz
  8082  04E8  2CEB               	goto	u2795
  8083  04E9  0820               	movf	?___lwdiv,w
  8084  04EA  0227               	subwf	??_LedBlinkStateMachine,w
  8085  04EB                     u2795:	
  8086  04EB  1C03               	skipc
  8087  04EC  2D38               	goto	l3877
  8088                           
  8089                           ;led_drv.c: 94: {
  8090                           ;led_drv.c: 96: LedBlink->LedBlinkCounter = 0;
  8091  04ED  0875               	movf	LedBlinkStateMachine@LedBlink,w
  8092  04EE  3E02               	addlw	2
  8093  04EF  0086               	movwf	6
  8094  04F0  0187               	clrf	7
  8095  04F1  3000               	movlw	0
  8096  04F2  3FC0               	movwi [0]fsr1
  8097  04F3  3FC1               	movwi [1]fsr1
  8098                           
  8099                           ;led_drv.c: 98: LedBlink->LedOutState = OnState;
  8100  04F4  0A75               	incf	LedBlinkStateMachine@LedBlink,w
  8101  04F5                     L8:	
  8102  04F5  0086               	movwf	6
  8103  04F6  0187               	clrf	7
  8104  04F7  0181               	clrf	1
  8105  04F8  0A81               	incf	1,f
  8106                           
  8107                           ;led_drv.c: 99: }
  8108                           ;led_drv.c: 100: }
  8109  04F9  2D38               	goto	l3877
  8110  04FA                     l3865:	
  8111                           
  8112                           ;led_drv.c: 101: else if (LedBlink->LedOutState == OnState)
  8113  04FA  0A75               	incf	LedBlinkStateMachine@LedBlink,w
  8114  04FB  0086               	movwf	6
  8115  04FC  0187               	clrf	7
  8116  04FD  0301               	decf	1,w
  8117  04FE  1D03               	btfss	3,2
  8118  04FF  2D38               	goto	l3877
  8119                           
  8120                           ;led_drv.c: 102: {
  8121                           ;led_drv.c: 104: if (LedBlink->LedBlinkCounter >= (LedBlink->LedOnTimeMs/((UINT16)(10)))
      +                          )
  8122  0500  300A               	movlw	10
  8123  0501  0020               	movlb	0	; select bank0
  8124  0502  00A0               	movwf	___lwdiv@divisor
  8125  0503  3000               	movlw	0
  8126  0504  00A1               	movwf	___lwdiv@divisor+1
  8127  0505  0875               	movf	LedBlinkStateMachine@LedBlink,w
  8128  0506  3E04               	addlw	4
  8129  0507  0086               	movwf	6
  8130  0508  0187               	clrf	7
  8131  0509  3F40               	moviw [0]fsr1
  8132  050A  00A2               	movwf	___lwdiv@dividend
  8133  050B  3F41               	moviw [1]fsr1
  8134  050C  00A3               	movwf	___lwdiv@dividend+1
  8135  050D  318D  2575  3184   	fcall	___lwdiv
  8136  0510  0875               	movf	LedBlinkStateMachine@LedBlink,w
  8137  0511  3E02               	addlw	2
  8138  0512  0086               	movwf	6
  8139  0513  0187               	clrf	7
  8140  0514  3F40               	moviw [0]fsr1
  8141  0515  0020               	movlb	0	; select bank0
  8142  0516  00A7               	movwf	??_LedBlinkStateMachine
  8143  0517  3F41               	moviw [1]fsr1
  8144  0518  00A8               	movwf	??_LedBlinkStateMachine+1
  8145  0519  0821               	movf	?___lwdiv+1,w
  8146  051A  0228               	subwf	??_LedBlinkStateMachine+1,w
  8147  051B  1D03               	skipz
  8148  051C  2D1F               	goto	u2815
  8149  051D  0820               	movf	?___lwdiv,w
  8150  051E  0227               	subwf	??_LedBlinkStateMachine,w
  8151  051F                     u2815:	
  8152  051F  1C03               	skipc
  8153  0520  2D38               	goto	l3877
  8154                           
  8155                           ;led_drv.c: 105: {
  8156                           ;led_drv.c: 107: LedBlink->LedBlinkCounter = 0;
  8157  0521  0875               	movf	LedBlinkStateMachine@LedBlink,w
  8158  0522  3E02               	addlw	2
  8159  0523  0086               	movwf	6
  8160  0524  0187               	clrf	7
  8161  0525  3000               	movlw	0
  8162  0526  3FC0               	movwi [0]fsr1
  8163  0527  3FC1               	movwi [1]fsr1
  8164                           
  8165                           ;led_drv.c: 109: LedBlink->LedOutState = OffState;
  8166  0528  0A75               	incf	LedBlinkStateMachine@LedBlink,w
  8167  0529  0086               	movwf	6
  8168  052A  0187               	clrf	7
  8169  052B  0181               	clrf	1
  8170                           
  8171                           ;led_drv.c: 116: }
  8172                           
  8173                           ;led_drv.c: 115: break;
  8174                           
  8175                           ;led_drv.c: 114: default:
  8176                           
  8177                           ;led_drv.c: 110: }
  8178                           ;led_drv.c: 111: }
  8179                           ;led_drv.c: 112: break;
  8180  052C  2D38               	goto	l3877
  8181  052D                     l3875:	
  8182  052D  0875               	movf	LedBlinkStateMachine@LedBlink,w
  8183  052E  0086               	movwf	6
  8184  052F  0187               	clrf	7
  8185  0530  0801               	movf	1,w
  8186                           
  8187                           ; Switch size 1, requested type "space"
  8188                           ; Number of cases is 2, Range of values is 0 to 1
  8189                           ; switch strategies available:
  8190                           ; Name         Instructions Cycles
  8191                           ; simple_byte            7     4 (average)
  8192                           ; direct_byte           10     6 (fixed)
  8193                           ; jumptable            260     6 (fixed)
  8194                           ;	Chosen strategy is simple_byte
  8195  0531  3A00               	xorlw	0	; case 0
  8196  0532  1903               	skipnz
  8197  0533  2CAF               	goto	l3853
  8198  0534  3A01               	xorlw	1	; case 1
  8199  0535  1903               	skipnz
  8200  0536  2CBD               	goto	l3857
  8201  0537  2D38               	goto	l3877
  8202  0538                     l3877:	
  8203                           
  8204                           ;led_drv.c: 119: return (LedBlink->LedOutState);
  8205  0538  0A75               	incf	LedBlinkStateMachine@LedBlink,w
  8206  0539  0086               	movwf	6
  8207  053A  0187               	clrf	7
  8208  053B  0801               	movf	1,w
  8209  053C  0008               	return
  8210  053D                     __end_of_LedBlinkStateMachine:	
  8211                           
  8212                           	psect	text27
  8213  0A03                     __ptext27:	
  8214 ;; *************** function _CheckStopBitStatus *****************
  8215 ;; Defined at:
  8216 ;;		line 151 in file "../../../Framework/MercuryFwk/Source/c/01_Hal/02_Drv/i2c_slv_drv.c"
  8217 ;; Parameters:    Size  Location     Type
  8218 ;;		None
  8219 ;; Auto vars:     Size  Location     Type
  8220 ;;		None
  8221 ;; Return value:  Size  Location     Type
  8222 ;;                  1    wreg      unsigned char 
  8223 ;; Registers used:
  8224 ;;		wreg, status,2, status,0
  8225 ;; Tracked objects:
  8226 ;;		On entry : 0/0
  8227 ;;		On exit  : 0/0
  8228 ;;		Unchanged: 0/0
  8229 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8230 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8231 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8232 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8233 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8234 ;;Total ram usage:        1 bytes
  8235 ;; Hardware stack levels used:    1
  8236 ;; Hardware stack levels required when called:    2
  8237 ;; This function calls:
  8238 ;;		Nothing
  8239 ;; This function is called by:
  8240 ;;		_I2c_DataReceiveSm
  8241 ;; This function uses a non-reentrant model
  8242 ;;
  8243                           
  8244                           
  8245                           ;psect for function _CheckStopBitStatus
  8246  0A03                     _CheckStopBitStatus:	
  8247                           
  8248                           ;i2c_slv_drv.c: 154: return ((SSP1STAT & ((UINT8)(0x10))) >> ((UINT8)(4)));
  8249                           
  8250                           ;incstack = 0
  8251                           ; Regs used in _CheckStopBitStatus: [wreg+status,2+status,0]
  8252  0A03  0024               	movlb	4	; select bank4
  8253  0A04  0814               	movf	20,w	;volatile
  8254  0A05  00F4               	movwf	??_CheckStopBitStatus
  8255  0A06  3004               	movlw	4
  8256  0A07                     u1825:	
  8257  0A07  36F4               	lsrf	??_CheckStopBitStatus,f
  8258  0A08  0B89               	decfsz	9,f
  8259  0A09  2A07               	goto	u1825
  8260  0A0A  0874               	movf	??_CheckStopBitStatus,w
  8261  0A0B  3901               	andlw	1
  8262  0A0C  0008               	return
  8263  0A0D                     __end_of_CheckStopBitStatus:	
  8264                           
  8265                           	psect	text28
  8266  09F9                     __ptext28:	
  8267 ;; *************** function _CheckByteStatus *****************
  8268 ;; Defined at:
  8269 ;;		line 137 in file "../../../Framework/MercuryFwk/Source/c/01_Hal/02_Drv/i2c_slv_drv.c"
  8270 ;; Parameters:    Size  Location     Type
  8271 ;;		None
  8272 ;; Auto vars:     Size  Location     Type
  8273 ;;		None
  8274 ;; Return value:  Size  Location     Type
  8275 ;;                  1    wreg      unsigned char 
  8276 ;; Registers used:
  8277 ;;		wreg, status,2, status,0
  8278 ;; Tracked objects:
  8279 ;;		On entry : 0/0
  8280 ;;		On exit  : 0/0
  8281 ;;		Unchanged: 0/0
  8282 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8283 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8284 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8285 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8286 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8287 ;;Total ram usage:        1 bytes
  8288 ;; Hardware stack levels used:    1
  8289 ;; Hardware stack levels required when called:    2
  8290 ;; This function calls:
  8291 ;;		Nothing
  8292 ;; This function is called by:
  8293 ;;		_I2c_DataReceiveSm
  8294 ;; This function uses a non-reentrant model
  8295 ;;
  8296                           
  8297                           
  8298                           ;psect for function _CheckByteStatus
  8299  09F9                     _CheckByteStatus:	
  8300                           
  8301                           ;i2c_slv_drv.c: 140: return ((SSP1STAT & ((UINT8)(0x20))) >> ((UINT8)(5)));
  8302                           
  8303                           ;incstack = 0
  8304                           ; Regs used in _CheckByteStatus: [wreg+status,2+status,0]
  8305  09F9  0024               	movlb	4	; select bank4
  8306  09FA  0814               	movf	20,w	;volatile
  8307  09FB  00F4               	movwf	??_CheckByteStatus
  8308  09FC  3005               	movlw	5
  8309  09FD                     u1815:	
  8310  09FD  36F4               	lsrf	??_CheckByteStatus,f
  8311  09FE  0B89               	decfsz	9,f
  8312  09FF  29FD               	goto	u1815
  8313  0A00  0874               	movf	??_CheckByteStatus,w
  8314  0A01  3901               	andlw	1
  8315  0A02  0008               	return
  8316  0A03                     __end_of_CheckByteStatus:	
  8317                           
  8318                           	psect	text29
  8319  09EF                     __ptext29:	
  8320 ;; *************** function _CheckAckStatus *****************
  8321 ;; Defined at:
  8322 ;;		line 109 in file "../../../Framework/MercuryFwk/Source/c/01_Hal/02_Drv/i2c_slv_drv.c"
  8323 ;; Parameters:    Size  Location     Type
  8324 ;;		None
  8325 ;; Auto vars:     Size  Location     Type
  8326 ;;		None
  8327 ;; Return value:  Size  Location     Type
  8328 ;;                  1    wreg      unsigned char 
  8329 ;; Registers used:
  8330 ;;		wreg, status,2, status,0
  8331 ;; Tracked objects:
  8332 ;;		On entry : 0/0
  8333 ;;		On exit  : 0/0
  8334 ;;		Unchanged: 0/0
  8335 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8336 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8337 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8338 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8339 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8340 ;;Total ram usage:        1 bytes
  8341 ;; Hardware stack levels used:    1
  8342 ;; Hardware stack levels required when called:    2
  8343 ;; This function calls:
  8344 ;;		Nothing
  8345 ;; This function is called by:
  8346 ;;		_I2c_DataReceiveSm
  8347 ;; This function uses a non-reentrant model
  8348 ;;
  8349                           
  8350                           
  8351                           ;psect for function _CheckAckStatus
  8352  09EF                     _CheckAckStatus:	
  8353                           
  8354                           ;i2c_slv_drv.c: 112: return ((SSP1CON2 & ((UINT8)(0x40))) >> ((UINT8)(6)));
  8355                           
  8356                           ;incstack = 0
  8357                           ; Regs used in _CheckAckStatus: [wreg+status,2+status,0]
  8358  09EF  0024               	movlb	4	; select bank4
  8359  09F0  0816               	movf	22,w	;volatile
  8360  09F1  00F4               	movwf	??_CheckAckStatus
  8361  09F2  3006               	movlw	6
  8362  09F3                     u1805:	
  8363  09F3  36F4               	lsrf	??_CheckAckStatus,f
  8364  09F4  0B89               	decfsz	9,f
  8365  09F5  29F3               	goto	u1805
  8366  09F6  0874               	movf	??_CheckAckStatus,w
  8367  09F7  3901               	andlw	1
  8368  09F8  0008               	return
  8369  09F9                     __end_of_CheckAckStatus:	
  8370                           
  8371                           	psect	text30
  8372  0AC6                     __ptext30:	
  8373 ;; *************** function _I2c_SetConfig *****************
  8374 ;; Defined at:
  8375 ;;		line 82 in file "../../../Framework/MercuryFwk/Source/c/03_Sml/01_Pml/01_SlvI2c/i2c_slv.c"
  8376 ;; Parameters:    Size  Location     Type
  8377 ;;		None
  8378 ;; Auto vars:     Size  Location     Type
  8379 ;;		None
  8380 ;; Return value:  Size  Location     Type
  8381 ;;                  1    wreg      void 
  8382 ;; Registers used:
  8383 ;;		wreg, status,2
  8384 ;; Tracked objects:
  8385 ;;		On entry : 0/0
  8386 ;;		On exit  : 0/0
  8387 ;;		Unchanged: 0/0
  8388 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8389 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8390 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8391 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8392 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8393 ;;Total ram usage:        1 bytes
  8394 ;; Hardware stack levels used:    1
  8395 ;; Hardware stack levels required when called:    2
  8396 ;; This function calls:
  8397 ;;		Nothing
  8398 ;; This function is called by:
  8399 ;;		_I2cSlv_MainTask
  8400 ;; This function uses a non-reentrant model
  8401 ;;
  8402                           
  8403                           
  8404                           ;psect for function _I2c_SetConfig
  8405  0AC6                     _I2c_SetConfig:	
  8406                           
  8407                           ;i2c_slv.c: 84: I2cConfig.I2cModuleMode = ((UINT8)(0b0110));
  8408                           
  8409                           ;incstack = 0
  8410                           ; Regs used in _I2c_SetConfig: [wreg+status,2]
  8411  0AC6  3006               	movlw	6
  8412  0AC7  00F4               	movwf	??_I2c_SetConfig
  8413  0AC8  0874               	movf	??_I2c_SetConfig,w
  8414  0AC9  0021               	movlb	1	; select bank1
  8415  0ACA  00BE               	movwf	_I2cConfig^(0+128)
  8416                           
  8417                           ;i2c_slv.c: 85: I2cConfig.I2cReceiverEnable = ((UINT8)(0));
  8418  0ACB  01BF               	clrf	(_I2cConfig^(0+128)+1)
  8419                           
  8420                           ;i2c_slv.c: 86: I2cConfig.EnableI2cModule = ((UINT8)(1));
  8421  0ACC  01C0               	clrf	(_I2cConfig^(0+128)+2)
  8422  0ACD  0AC0               	incf	(_I2cConfig^(0+128)+2),f
  8423                           
  8424                           ;i2c_slv.c: 87: I2cConfig.ClockStretchEnable = ((UINT8)(0));
  8425  0ACE  01C1               	clrf	(_I2cConfig^(0+128)+3)
  8426                           
  8427                           ;i2c_slv.c: 88: I2cConfig.StopCondIntEnable = ((UINT8)(1));
  8428  0ACF  01C2               	clrf	(_I2cConfig^(0+128)+4)
  8429  0AD0  0AC2               	incf	(_I2cConfig^(0+128)+4),f
  8430                           
  8431                           ;i2c_slv.c: 89: I2cConfig.StartCondIntEnable = ((UINT8)(1));
  8432  0AD1  01C3               	clrf	(_I2cConfig^(0+128)+5)
  8433  0AD2  0AC3               	incf	(_I2cConfig^(0+128)+5),f
  8434                           
  8435                           ;i2c_slv.c: 90: I2cConfig.BufferOverwriteEnable = ((UINT8)(0));
  8436  0AD3  01C4               	clrf	(_I2cConfig^(0+128)+6)
  8437                           
  8438                           ;i2c_slv.c: 91: I2cConfig.BusCollisionDetectEnable = ((UINT8)(0));
  8439  0AD4  01C5               	clrf	(_I2cConfig^(0+128)+7)
  8440                           
  8441                           ;i2c_slv.c: 92: I2cConfig.AddrHoldEnable = ((UINT8)(0));
  8442  0AD5  01C6               	clrf	(_I2cConfig^(0+128)+8)
  8443                           
  8444                           ;i2c_slv.c: 93: I2cConfig.DataHoldEnable = ((UINT8)(0));
  8445  0AD6  01C7               	clrf	(_I2cConfig^(0+128)+9)
  8446                           
  8447                           ;i2c_slv.c: 94: I2cConfig.GeneralCallEnable = ((UINT8)(1));
  8448  0AD7  01C8               	clrf	(_I2cConfig^(0+128)+10)
  8449  0AD8  0AC8               	incf	(_I2cConfig^(0+128)+10),f
  8450  0AD9  0008               	return
  8451  0ADA                     __end_of_I2c_SetConfig:	
  8452                           
  8453                           	psect	text31
  8454  0401                     __ptext31:	
  8455 ;; *************** function _I2c_InitI2cModule *****************
  8456 ;; Defined at:
  8457 ;;		line 207 in file "../../../Framework/MercuryFwk/Source/c/01_Hal/02_Drv/i2c_slv_drv.c"
  8458 ;; Parameters:    Size  Location     Type
  8459 ;;  I2cConfig       1    wreg     PTR struct _I2cConfig
  8460 ;;		 -> I2cConfig(11), 
  8461 ;; Auto vars:     Size  Location     Type
  8462 ;;  I2cConfig       1    2[BANK0 ] PTR struct _I2cConfig
  8463 ;;		 -> I2cConfig(11), 
  8464 ;; Return value:  Size  Location     Type
  8465 ;;                  1    wreg      void 
  8466 ;; Registers used:
  8467 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8468 ;; Tracked objects:
  8469 ;;		On entry : 0/0
  8470 ;;		On exit  : 0/0
  8471 ;;		Unchanged: 0/0
  8472 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8473 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8474 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8475 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8476 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8477 ;;Total ram usage:        3 bytes
  8478 ;; Hardware stack levels used:    1
  8479 ;; Hardware stack levels required when called:    3
  8480 ;; This function calls:
  8481 ;;		_ClearRxBuffer
  8482 ;;		_ClearTxBuffer
  8483 ;; This function is called by:
  8484 ;;		_I2cSlv_MainTask
  8485 ;; This function uses a non-reentrant model
  8486 ;;
  8487                           
  8488                           
  8489                           ;psect for function _I2c_InitI2cModule
  8490  0401                     _I2c_InitI2cModule:	
  8491                           
  8492                           ;incstack = 0
  8493                           ; Regs used in _I2c_InitI2cModule: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  8494                           ;I2c_InitI2cModule@I2cConfig stored from wreg
  8495  0401  0020               	movlb	0	; select bank0
  8496  0402  00A2               	movwf	I2c_InitI2cModule@I2cConfig
  8497                           
  8498                           ;i2c_slv_drv.c: 210: TRISCbits.TRISC1 = ((UINT8)(1));
  8499  0403  0021               	movlb	1	; select bank1
  8500  0404  148E               	bsf	14,1	;volatile
  8501                           
  8502                           ;i2c_slv_drv.c: 211: TRISCbits.TRISC0 = ((UINT8)(1));
  8503  0405  140E               	bsf	14,0	;volatile
  8504                           
  8505                           ;i2c_slv_drv.c: 215: SSP1CON1 |= (I2cConfig->I2cModuleMode) << ((UINT8)(0));
  8506  0406  0020               	movlb	0	; select bank0
  8507  0407  0822               	movf	I2c_InitI2cModule@I2cConfig,w
  8508  0408  0086               	movwf	6
  8509  0409  0187               	clrf	7
  8510  040A  0801               	movf	1,w
  8511  040B  00A0               	movwf	??_I2c_InitI2cModule
  8512  040C  0820               	movf	??_I2c_InitI2cModule,w
  8513  040D  0024               	movlb	4	; select bank4
  8514  040E  0495               	iorwf	21,f	;volatile
  8515                           
  8516                           ;i2c_slv_drv.c: 218: SSP1CON2 |= (I2cConfig->I2cReceiverEnable) << ((UINT8)(3));
  8517  040F  0020               	movlb	0	; select bank0
  8518  0410  0A22               	incf	I2c_InitI2cModule@I2cConfig,w
  8519  0411  0086               	movwf	6
  8520  0412  0187               	clrf	7
  8521  0413  0801               	movf	1,w
  8522  0414  00A0               	movwf	??_I2c_InitI2cModule
  8523  0415  3002               	movlw	2
  8524  0416                     u2955:	
  8525  0416  35A0               	lslf	??_I2c_InitI2cModule,f
  8526  0417  3EFF               	addlw	-1
  8527  0418  1D03               	skipz
  8528  0419  2C16               	goto	u2955
  8529  041A  3520               	lslf	??_I2c_InitI2cModule,w
  8530  041B  00A1               	movwf	??_I2c_InitI2cModule+1
  8531  041C  0821               	movf	??_I2c_InitI2cModule+1,w
  8532  041D  0024               	movlb	4	; select bank4
  8533  041E  0496               	iorwf	22,f	;volatile
  8534                           
  8535                           ;i2c_slv_drv.c: 219: SSP1CON2 |= (I2cConfig->ClockStretchEnable) << ((UINT8)(0));
  8536  041F  0020               	movlb	0	; select bank0
  8537  0420  0822               	movf	I2c_InitI2cModule@I2cConfig,w
  8538  0421  3E03               	addlw	3
  8539  0422  0086               	movwf	6
  8540  0423  0187               	clrf	7
  8541  0424  0801               	movf	1,w
  8542  0425  00A0               	movwf	??_I2c_InitI2cModule
  8543  0426  0820               	movf	??_I2c_InitI2cModule,w
  8544  0427  0024               	movlb	4	; select bank4
  8545  0428  0496               	iorwf	22,f	;volatile
  8546                           
  8547                           ;i2c_slv_drv.c: 220: SSP1CON2 |= (I2cConfig->GeneralCallEnable) << ((UINT8)(7));
  8548  0429  0020               	movlb	0	; select bank0
  8549  042A  0822               	movf	I2c_InitI2cModule@I2cConfig,w
  8550  042B  3E0A               	addlw	10
  8551  042C  0086               	movwf	6
  8552  042D  0187               	clrf	7
  8553  042E  0801               	movf	1,w
  8554  042F  00A0               	movwf	??_I2c_InitI2cModule
  8555  0430  3006               	movlw	6
  8556  0431                     u2965:	
  8557  0431  35A0               	lslf	??_I2c_InitI2cModule,f
  8558  0432  3EFF               	addlw	-1
  8559  0433  1D03               	skipz
  8560  0434  2C31               	goto	u2965
  8561  0435  3520               	lslf	??_I2c_InitI2cModule,w
  8562  0436  00A1               	movwf	??_I2c_InitI2cModule+1
  8563  0437  0821               	movf	??_I2c_InitI2cModule+1,w
  8564  0438  0024               	movlb	4	; select bank4
  8565  0439  0496               	iorwf	22,f	;volatile
  8566                           
  8567                           ;i2c_slv_drv.c: 223: SSP1CON3 |= (I2cConfig->StopCondIntEnable) << ((UINT8)(6));
  8568  043A  0020               	movlb	0	; select bank0
  8569  043B  0822               	movf	I2c_InitI2cModule@I2cConfig,w
  8570  043C  3E04               	addlw	4
  8571  043D  0086               	movwf	6
  8572  043E  0187               	clrf	7
  8573  043F  0801               	movf	1,w
  8574  0440  00A0               	movwf	??_I2c_InitI2cModule
  8575  0441  3005               	movlw	5
  8576  0442                     u2975:	
  8577  0442  35A0               	lslf	??_I2c_InitI2cModule,f
  8578  0443  3EFF               	addlw	-1
  8579  0444  1D03               	skipz
  8580  0445  2C42               	goto	u2975
  8581  0446  3520               	lslf	??_I2c_InitI2cModule,w
  8582  0447  00A1               	movwf	??_I2c_InitI2cModule+1
  8583  0448  0821               	movf	??_I2c_InitI2cModule+1,w
  8584  0449  0024               	movlb	4	; select bank4
  8585  044A  0497               	iorwf	23,f	;volatile
  8586                           
  8587                           ;i2c_slv_drv.c: 224: SSP1CON3 |= (I2cConfig->StartCondIntEnable) << ((UINT8)(5));
  8588  044B  0020               	movlb	0	; select bank0
  8589  044C  0822               	movf	I2c_InitI2cModule@I2cConfig,w
  8590  044D  3E05               	addlw	5
  8591  044E  0086               	movwf	6
  8592  044F  0187               	clrf	7
  8593  0450  0801               	movf	1,w
  8594  0451  00A0               	movwf	??_I2c_InitI2cModule
  8595  0452  3004               	movlw	4
  8596  0453                     u2985:	
  8597  0453  35A0               	lslf	??_I2c_InitI2cModule,f
  8598  0454  3EFF               	addlw	-1
  8599  0455  1D03               	skipz
  8600  0456  2C53               	goto	u2985
  8601  0457  3520               	lslf	??_I2c_InitI2cModule,w
  8602  0458  00A1               	movwf	??_I2c_InitI2cModule+1
  8603  0459  0821               	movf	??_I2c_InitI2cModule+1,w
  8604  045A  0024               	movlb	4	; select bank4
  8605  045B  0497               	iorwf	23,f	;volatile
  8606                           
  8607                           ;i2c_slv_drv.c: 225: SSP1CON3 |= (I2cConfig->BufferOverwriteEnable) << ((UINT8)(4));
  8608  045C  0020               	movlb	0	; select bank0
  8609  045D  0822               	movf	I2c_InitI2cModule@I2cConfig,w
  8610  045E  3E06               	addlw	6
  8611  045F  0086               	movwf	6
  8612  0460  0187               	clrf	7
  8613  0461  0801               	movf	1,w
  8614  0462  00A0               	movwf	??_I2c_InitI2cModule
  8615  0463  3003               	movlw	3
  8616  0464                     u2995:	
  8617  0464  35A0               	lslf	??_I2c_InitI2cModule,f
  8618  0465  3EFF               	addlw	-1
  8619  0466  1D03               	skipz
  8620  0467  2C64               	goto	u2995
  8621  0468  3520               	lslf	??_I2c_InitI2cModule,w
  8622  0469  00A1               	movwf	??_I2c_InitI2cModule+1
  8623  046A  0821               	movf	??_I2c_InitI2cModule+1,w
  8624  046B  0024               	movlb	4	; select bank4
  8625  046C  0497               	iorwf	23,f	;volatile
  8626                           
  8627                           ;i2c_slv_drv.c: 226: SSP1CON3 |= (I2cConfig->BusCollisionDetectEnable) << ((UINT8)(2));
  8628  046D  0020               	movlb	0	; select bank0
  8629  046E  0822               	movf	I2c_InitI2cModule@I2cConfig,w
  8630  046F  3E07               	addlw	7
  8631  0470  0086               	movwf	6
  8632  0471  0187               	clrf	7
  8633  0472  0801               	movf	1,w
  8634  0473  00A0               	movwf	??_I2c_InitI2cModule
  8635  0474  3001               	movlw	1
  8636  0475                     u3005:	
  8637  0475  35A0               	lslf	??_I2c_InitI2cModule,f
  8638  0476  3EFF               	addlw	-1
  8639  0477  1D03               	skipz
  8640  0478  2C75               	goto	u3005
  8641  0479  3520               	lslf	??_I2c_InitI2cModule,w
  8642  047A  00A1               	movwf	??_I2c_InitI2cModule+1
  8643  047B  0821               	movf	??_I2c_InitI2cModule+1,w
  8644  047C  0024               	movlb	4	; select bank4
  8645  047D  0497               	iorwf	23,f	;volatile
  8646                           
  8647                           ;i2c_slv_drv.c: 227: SSP1CON3 |= (I2cConfig->AddrHoldEnable) << ((UINT8)(1));
  8648  047E  0020               	movlb	0	; select bank0
  8649  047F  0822               	movf	I2c_InitI2cModule@I2cConfig,w
  8650  0480  3E08               	addlw	8
  8651  0481  0086               	movwf	6
  8652  0482  0187               	clrf	7
  8653  0483  3501               	lslf	1,w
  8654  0484  00A0               	movwf	??_I2c_InitI2cModule
  8655  0485  0820               	movf	??_I2c_InitI2cModule,w
  8656  0486  0024               	movlb	4	; select bank4
  8657  0487  0497               	iorwf	23,f	;volatile
  8658                           
  8659                           ;i2c_slv_drv.c: 228: SSP1CON3 |= (I2cConfig->DataHoldEnable) << ((UINT8)(0));
  8660  0488  0020               	movlb	0	; select bank0
  8661  0489  0822               	movf	I2c_InitI2cModule@I2cConfig,w
  8662  048A  3E09               	addlw	9
  8663  048B  0086               	movwf	6
  8664  048C  0187               	clrf	7
  8665  048D  0801               	movf	1,w
  8666  048E  00A0               	movwf	??_I2c_InitI2cModule
  8667  048F  0820               	movf	??_I2c_InitI2cModule,w
  8668  0490  0024               	movlb	4	; select bank4
  8669  0491  0497               	iorwf	23,f	;volatile
  8670                           
  8671                           ;i2c_slv_drv.c: 231: SSP1CON1 |= (I2cConfig->EnableI2cModule) << ((UINT8)(5));
  8672  0492  0020               	movlb	0	; select bank0
  8673  0493  0822               	movf	I2c_InitI2cModule@I2cConfig,w
  8674  0494  3E02               	addlw	2
  8675  0495  0086               	movwf	6
  8676  0496  0187               	clrf	7
  8677  0497  0801               	movf	1,w
  8678  0498  00A0               	movwf	??_I2c_InitI2cModule
  8679  0499  3004               	movlw	4
  8680  049A                     u3015:	
  8681  049A  35A0               	lslf	??_I2c_InitI2cModule,f
  8682  049B  3EFF               	addlw	-1
  8683  049C  1D03               	skipz
  8684  049D  2C9A               	goto	u3015
  8685  049E  3520               	lslf	??_I2c_InitI2cModule,w
  8686  049F  00A1               	movwf	??_I2c_InitI2cModule+1
  8687  04A0  0821               	movf	??_I2c_InitI2cModule+1,w
  8688  04A1  0024               	movlb	4	; select bank4
  8689  04A2  0495               	iorwf	21,f	;volatile
  8690                           
  8691                           ;i2c_slv_drv.c: 234: PIR1bits.SSP1IF = ((UINT8)(0));
  8692  04A3  0020               	movlb	0	; select bank0
  8693  04A4  1191               	bcf	17,3	;volatile
  8694                           
  8695                           ;i2c_slv_drv.c: 235: PIE1bits.SSP1IE = ((UINT8)(1));
  8696  04A5  0021               	movlb	1	; select bank1
  8697  04A6  1591               	bsf	17,3	;volatile
  8698                           
  8699                           ;i2c_slv_drv.c: 238: ClearRxBuffer();
  8700  04A7  318A  2283  3184   	fcall	_ClearRxBuffer
  8701                           
  8702                           ;i2c_slv_drv.c: 239: ClearTxBuffer();
  8703  04AA  318A  2293         	fcall	_ClearTxBuffer
  8704  04AC  0008               	return
  8705  04AD                     __end_of_I2c_InitI2cModule:	
  8706                           
  8707                           	psect	text32
  8708  0A93                     __ptext32:	
  8709 ;; *************** function _ClearTxBuffer *****************
  8710 ;; Defined at:
  8711 ;;		line 184 in file "../../../Framework/MercuryFwk/Source/c/01_Hal/02_Drv/i2c_slv_drv.c"
  8712 ;; Parameters:    Size  Location     Type
  8713 ;;		None
  8714 ;; Auto vars:     Size  Location     Type
  8715 ;;  Index           1    5[COMMON] unsigned char 
  8716 ;; Return value:  Size  Location     Type
  8717 ;;                  1    wreg      void 
  8718 ;; Registers used:
  8719 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  8720 ;; Tracked objects:
  8721 ;;		On entry : 0/0
  8722 ;;		On exit  : 0/0
  8723 ;;		Unchanged: 0/0
  8724 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8725 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8726 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8727 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8728 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8729 ;;Total ram usage:        2 bytes
  8730 ;; Hardware stack levels used:    1
  8731 ;; Hardware stack levels required when called:    2
  8732 ;; This function calls:
  8733 ;;		Nothing
  8734 ;; This function is called by:
  8735 ;;		_I2c_InitI2cModule
  8736 ;;		_I2c_DataReceiveSm
  8737 ;; This function uses a non-reentrant model
  8738 ;;
  8739                           
  8740                           
  8741                           ;psect for function _ClearTxBuffer
  8742  0A93                     _ClearTxBuffer:	
  8743                           
  8744                           ;i2c_slv_drv.c: 186: UINT8 Index;
  8745                           ;i2c_slv_drv.c: 189: for (Index = 0; Index < ((UINT8)(80)); Index++)
  8746                           
  8747                           ;incstack = 0
  8748                           ; Regs used in _ClearTxBuffer: [wreg+fsr1l+fsr1h+status,2+status,0]
  8749  0A93  01F5               	clrf	ClearTxBuffer@Index
  8750  0A94                     L9:	
  8751  0A94  3050               	movlw	80
  8752  0A95  0275               	subwf	ClearTxBuffer@Index,w
  8753  0A96  1803               	btfsc	3,0
  8754  0A97  0008               	return
  8755                           
  8756                           ;i2c_slv_drv.c: 190: {
  8757                           ;i2c_slv_drv.c: 191: I2cTxBuffer[Index] = 0x00;
  8758  0A98  0875               	movf	ClearTxBuffer@Index,w
  8759  0A99  3EA0               	addlw	(low (_I2cTxBuffer| (0+512)))& (0+255)
  8760  0A9A  0086               	movwf	6
  8761  0A9B  3002               	movlw	2	; select bank5/6
  8762  0A9C  0087               	movwf	7
  8763  0A9D  0181               	clrf	1
  8764  0A9E  3001               	movlw	1
  8765  0A9F  00F4               	movwf	??_ClearTxBuffer
  8766  0AA0  0874               	movf	??_ClearTxBuffer,w
  8767  0AA1  07F5               	addwf	ClearTxBuffer@Index,f
  8768  0AA2  2A94               	goto	L9
  8769  0AA3                     __end_of_ClearTxBuffer:	
  8770                           
  8771                           	psect	text33
  8772  0A83                     __ptext33:	
  8773 ;; *************** function _ClearRxBuffer *****************
  8774 ;; Defined at:
  8775 ;;		line 165 in file "../../../Framework/MercuryFwk/Source/c/01_Hal/02_Drv/i2c_slv_drv.c"
  8776 ;; Parameters:    Size  Location     Type
  8777 ;;		None
  8778 ;; Auto vars:     Size  Location     Type
  8779 ;;  Index           1    5[COMMON] unsigned char 
  8780 ;; Return value:  Size  Location     Type
  8781 ;;                  1    wreg      void 
  8782 ;; Registers used:
  8783 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  8784 ;; Tracked objects:
  8785 ;;		On entry : 0/0
  8786 ;;		On exit  : 0/0
  8787 ;;		Unchanged: 0/0
  8788 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8789 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8790 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8791 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8792 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8793 ;;Total ram usage:        2 bytes
  8794 ;; Hardware stack levels used:    1
  8795 ;; Hardware stack levels required when called:    2
  8796 ;; This function calls:
  8797 ;;		Nothing
  8798 ;; This function is called by:
  8799 ;;		_I2c_InitI2cModule
  8800 ;;		_I2c_DataReceiveSm
  8801 ;; This function uses a non-reentrant model
  8802 ;;
  8803                           
  8804                           
  8805                           ;psect for function _ClearRxBuffer
  8806  0A83                     _ClearRxBuffer:	
  8807                           
  8808                           ;i2c_slv_drv.c: 167: UINT8 Index;
  8809                           ;i2c_slv_drv.c: 170: for (Index = 0; Index < ((UINT8)(80)); Index++)
  8810                           
  8811                           ;incstack = 0
  8812                           ; Regs used in _ClearRxBuffer: [wreg+fsr1l+fsr1h+status,2+status,0]
  8813  0A83  01F5               	clrf	ClearRxBuffer@Index
  8814  0A84                     L10:	
  8815  0A84  3050               	movlw	80
  8816  0A85  0275               	subwf	ClearRxBuffer@Index,w
  8817  0A86  1803               	btfsc	3,0
  8818  0A87  0008               	return
  8819                           
  8820                           ;i2c_slv_drv.c: 171: {
  8821                           ;i2c_slv_drv.c: 172: I2cRxBuffer[Index] = 0x00;
  8822  0A88  0875               	movf	ClearRxBuffer@Index,w
  8823  0A89  3E20               	addlw	(low (_I2cRxBuffer| (0+768)))& (0+255)
  8824  0A8A  0086               	movwf	6
  8825  0A8B  3003               	movlw	3	; select bank6/7
  8826  0A8C  0087               	movwf	7
  8827  0A8D  0181               	clrf	1
  8828  0A8E  3001               	movlw	1
  8829  0A8F  00F4               	movwf	??_ClearRxBuffer
  8830  0A90  0874               	movf	??_ClearRxBuffer,w
  8831  0A91  07F5               	addwf	ClearRxBuffer@Index,f
  8832  0A92  2A84               	goto	L10
  8833  0A93                     __end_of_ClearRxBuffer:	
  8834                           
  8835                           	psect	text34
  8836  053D                     __ptext34:	
  8837 ;; *************** function _I2cSlv_I2cDrvHandle *****************
  8838 ;; Defined at:
  8839 ;;		line 141 in file "../../../Framework/MercuryFwk/Source/c/03_Sml/01_Pml/01_SlvI2c/i2c_slv.c"
  8840 ;; Parameters:    Size  Location     Type
  8841 ;;		None
  8842 ;; Auto vars:     Size  Location     Type
  8843 ;;  Index           1    9[BANK0 ] unsigned char 
  8844 ;; Return value:  Size  Location     Type
  8845 ;;                  1    wreg      void 
  8846 ;; Registers used:
  8847 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8848 ;; Tracked objects:
  8849 ;;		On entry : 0/0
  8850 ;;		On exit  : 0/0
  8851 ;;		Unchanged: 0/0
  8852 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8853 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8854 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8855 ;;      Temps:          0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8856 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8857 ;;Total ram usage:        6 bytes
  8858 ;; Hardware stack levels used:    1
  8859 ;; Hardware stack levels required when called:    3
  8860 ;; This function calls:
  8861 ;;		_GenerateEvt
  8862 ;;		_I2c_SetI2cAddress
  8863 ;;		_I2c_SetI2cAddressMask
  8864 ;;		_I2c_UpdateTxBuffer
  8865 ;;		_Led_SetLedStatus
  8866 ;;		_ReceiveEvt
  8867 ;; This function is called by:
  8868 ;;		_I2cSlv_MainTask
  8869 ;; This function uses a non-reentrant model
  8870 ;;
  8871                           
  8872                           
  8873                           ;psect for function _I2cSlv_I2cDrvHandle
  8874  053D                     _I2cSlv_I2cDrvHandle:	
  8875                           
  8876                           ;i2c_slv.c: 143: static I2cReceiveMsgStateType I2cReceiveMsgState = I2cSetSlaveAddres;
  8877                           ;i2c_slv.c: 144: UINT8 Index = 0;
  8878                           
  8879                           ;incstack = 0
  8880                           ; Regs used in _I2cSlv_I2cDrvHandle: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  8881  053D  0020               	movlb	0	; select bank0
  8882  053E  01A9               	clrf	I2cSlv_I2cDrvHandle@Index
  8883                           
  8884                           ;i2c_slv.c: 146: switch (I2cReceiveMsgState)
  8885  053F  2DC0               	goto	l4073
  8886  0540                     l4031:	
  8887                           ;i2c_slv.c: 147: {
  8888                           ;i2c_slv.c: 148: case I2cSetSlaveAddres:
  8889                           
  8890                           
  8891                           ;i2c_slv.c: 150: if (ReceiveEvt(&I2cSetAddress))
  8892  0540  30DC               	movlw	(low (_I2cSetAddress| 0))& (0+255)
  8893  0541  318B  23A3  3185   	fcall	_ReceiveEvt
  8894  0544  3A00               	xorlw	0
  8895  0545  1903               	skipnz
  8896  0546  0008               	return
  8897                           
  8898                           ;i2c_slv.c: 151: {
  8899                           ;i2c_slv.c: 153: I2c_SetI2cAddress(I2cSlaveAddress);
  8900  0547  0876               	movf	_I2cSlaveAddress,w
  8901  0548  3189  21A4  3185   	fcall	_I2c_SetI2cAddress
  8902                           
  8903                           ;i2c_slv.c: 154: I2c_SetI2cAddressMask(((UINT8)(0x7F)));
  8904  054B  307F               	movlw	127
  8905  054C  3189  21A9         	fcall	_I2c_SetI2cAddressMask
  8906                           
  8907                           ;i2c_slv.c: 156: I2cReceiveMsgState = I2cReceiveData;
  8908  054E  0020               	movlb	0	; select bank0
  8909  054F  01DA               	clrf	I2cSlv_I2cDrvHandle@I2cReceiveMsgState
  8910  0550  0ADA               	incf	I2cSlv_I2cDrvHandle@I2cReceiveMsgState,f
  8911                           
  8912                           ;i2c_slv.c: 157: }
  8913                           ;i2c_slv.c: 158: break;
  8914  0551  0008               	return
  8915  0552                     l4037:	
  8916                           ;i2c_slv.c: 160: case I2cReceiveData:
  8917                           
  8918                           
  8919                           ;i2c_slv.c: 162: if (ReceiveEvt(&I2cNewPacketNotification))
  8920  0552  30D8               	movlw	(low (_I2cNewPacketNotification| 0))& (0+255)
  8921  0553  318B  23A3  3185   	fcall	_ReceiveEvt
  8922  0556  3A00               	xorlw	0
  8923  0557  1903               	skipnz
  8924  0558  2DA4               	goto	l4063
  8925                           
  8926                           ;i2c_slv.c: 163: {
  8927                           ;i2c_slv.c: 165: if ((I2cPacket.SlaveAddress == I2cSlaveAddress) || (I2cPacket.SlaveAddr
      +                          ess == ((UINT8)(0x00))))
  8928  0559  309D               	movlw	157
  8929  055A  0086               	movwf	6
  8930  055B  3023               	movlw	35
  8931  055C  0087               	movwf	7
  8932  055D  0801               	movf	1,w
  8933  055E  0676               	xorwf	_I2cSlaveAddress,w
  8934  055F  1903               	skipnz
  8935  0560  2D68               	goto	l4043
  8936  0561  309D               	movlw	157
  8937  0562  0086               	movwf	6
  8938  0563  3023               	movlw	35
  8939  0564  0087               	movwf	7
  8940  0565  0801               	movf	1,w
  8941  0566  1D03               	btfss	3,2
  8942  0567  0008               	return
  8943  0568                     l4043:	
  8944                           
  8945                           ;i2c_slv.c: 166: {
  8946                           ;i2c_slv.c: 167: if (I2cPacket.ReadWrite == ((UINT8)(0)))
  8947  0568  309D               	movlw	157
  8948  0569  0086               	movwf	6
  8949  056A  3023               	movlw	35
  8950  056B  0087               	movwf	7
  8951  056C  3141               	addfsr 1,1
  8952  056D  0801               	movf	1,w
  8953  056E  1D03               	btfss	3,2
  8954  056F  0008               	return
  8955                           
  8956                           ;i2c_slv.c: 168: {
  8957                           ;i2c_slv.c: 170: for (Index = 0; Index < ((UINT8)(80));Index++)
  8958  0570  0020               	movlb	0	; select bank0
  8959  0571  01A9               	clrf	I2cSlv_I2cDrvHandle@Index
  8960  0572  3050               	movlw	80
  8961  0573  0229               	subwf	I2cSlv_I2cDrvHandle@Index,w
  8962  0574  1803               	btfsc	3,0
  8963  0575  2D94               	goto	l4057
  8964  0576                     l4051:	
  8965                           
  8966                           ;i2c_slv.c: 171: {
  8967                           ;i2c_slv.c: 172: CmdBuffer[Index] = I2cPacket.Buffer[Index];
  8968  0576  0829               	movf	I2cSlv_I2cDrvHandle@Index,w
  8969  0577  00A4               	movwf	??_I2cSlv_I2cDrvHandle
  8970  0578  01A5               	clrf	??_I2cSlv_I2cDrvHandle+1
  8971  0579  309F               	movlw	159
  8972  057A  00A6               	movwf	??_I2cSlv_I2cDrvHandle+2
  8973  057B  3023               	movlw	35
  8974  057C  00A7               	movwf	??_I2cSlv_I2cDrvHandle+3
  8975  057D  0824               	movf	??_I2cSlv_I2cDrvHandle,w
  8976  057E  0726               	addwf	??_I2cSlv_I2cDrvHandle+2,w
  8977  057F  0086               	movwf	6
  8978  0580  0825               	movf	??_I2cSlv_I2cDrvHandle+1,w
  8979  0581  3D27               	addwfc	??_I2cSlv_I2cDrvHandle+3,w
  8980  0582  0087               	movwf	7
  8981  0583  0801               	movf	1,w
  8982  0584  00A8               	movwf	??_I2cSlv_I2cDrvHandle+4
  8983  0585  0829               	movf	I2cSlv_I2cDrvHandle@Index,w
  8984  0586  3E20               	addlw	(low (_CmdBuffer| (0+512)))& (0+255)
  8985  0587  0086               	movwf	6
  8986  0588  3002               	movlw	2	; select bank4/5
  8987  0589  0087               	movwf	7
  8988  058A  0828               	movf	??_I2cSlv_I2cDrvHandle+4,w
  8989  058B  0081               	movwf	1
  8990  058C  3001               	movlw	1
  8991  058D  00A4               	movwf	??_I2cSlv_I2cDrvHandle
  8992  058E  0824               	movf	??_I2cSlv_I2cDrvHandle,w
  8993  058F  07A9               	addwf	I2cSlv_I2cDrvHandle@Index,f
  8994  0590  3050               	movlw	80
  8995  0591  0229               	subwf	I2cSlv_I2cDrvHandle@Index,w
  8996  0592  1C03               	skipc
  8997  0593  2D76               	goto	l4051
  8998  0594                     l4057:	
  8999                           
  9000                           ;i2c_slv.c: 173: }
  9001                           ;i2c_slv.c: 175: GenerateEvt(&I2cWriteRequest);
  9002  0594  30DE               	movlw	(low (_I2cWriteRequest| 0))& (0+255)
  9003  0595  318B  23C4  3185   	fcall	_GenerateEvt
  9004                           
  9005                           ;i2c_slv.c: 177: if (LedBehaviourSts == ((UINT8)(1)))
  9006  0598  0379               	decf	_LedBehaviourSts,w
  9007  0599  1D03               	btfss	3,2
  9008  059A  0008               	return
  9009                           
  9010                           ;i2c_slv.c: 178: {
  9011                           ;i2c_slv.c: 179: Led_SetLedStatus(1u, LED_STS_PULSE);
  9012  059B  3003               	movlw	3
  9013  059C  0020               	movlb	0	; select bank0
  9014  059D  00A4               	movwf	??_I2cSlv_I2cDrvHandle
  9015  059E  0824               	movf	??_I2cSlv_I2cDrvHandle,w
  9016  059F  00F4               	movwf	Led_SetLedStatus@LedSts
  9017  05A0  3001               	movlw	1
  9018  05A1  318A  2255         	fcall	_Led_SetLedStatus
  9019                           
  9020                           ;i2c_slv.c: 180: }
  9021                           ;i2c_slv.c: 181: }
  9022                           ;i2c_slv.c: 182: }
  9023                           ;i2c_slv.c: 183: }
  9024  05A3  0008               	return
  9025  05A4                     l4063:	
  9026                           
  9027                           ;i2c_slv.c: 185: else if (ReceiveEvt(&I2cReplyPacketReady))
  9028  05A4  3068               	movlw	(low (_I2cReplyPacketReady| 0))& (0+255)
  9029  05A5  318B  23A3  3185   	fcall	_ReceiveEvt
  9030  05A8  3A00               	xorlw	0
  9031  05A9  1903               	skipnz
  9032  05AA  0008               	return
  9033                           
  9034                           ;i2c_slv.c: 186: {
  9035                           ;i2c_slv.c: 188: I2c_UpdateTxBuffer(RepBuffer,RepBufferLen);
  9036  05AB  0877               	movf	_RepBufferLen,w
  9037  05AC  0020               	movlb	0	; select bank0
  9038  05AD  00A4               	movwf	??_I2cSlv_I2cDrvHandle
  9039  05AE  0824               	movf	??_I2cSlv_I2cDrvHandle,w
  9040  05AF  00F4               	movwf	I2c_UpdateTxBuffer@Length
  9041  05B0  30A0               	movlw	(low (_RepBuffer| (0+256)))& (0+255)
  9042  05B1  318B  2365  3185   	fcall	_I2c_UpdateTxBuffer
  9043                           
  9044                           ;i2c_slv.c: 190: if (LedBehaviourSts == ((UINT8)(1)))
  9045  05B4  0379               	decf	_LedBehaviourSts,w
  9046  05B5  1D03               	btfss	3,2
  9047  05B6  0008               	return
  9048                           
  9049                           ;i2c_slv.c: 191: {
  9050                           ;i2c_slv.c: 192: Led_SetLedStatus(1u, LED_STS_PULSE);
  9051  05B7  3003               	movlw	3
  9052  05B8  0020               	movlb	0	; select bank0
  9053  05B9  00A4               	movwf	??_I2cSlv_I2cDrvHandle
  9054  05BA  0824               	movf	??_I2cSlv_I2cDrvHandle,w
  9055  05BB  00F4               	movwf	Led_SetLedStatus@LedSts
  9056  05BC  3001               	movlw	1
  9057  05BD  318A  2255         	fcall	_Led_SetLedStatus
  9058                           
  9059                           ;i2c_slv.c: 199: }
  9060                           
  9061                           ;i2c_slv.c: 198: break;
  9062                           
  9063                           ;i2c_slv.c: 197: default:
  9064                           
  9065                           ;i2c_slv.c: 193: }
  9066                           ;i2c_slv.c: 194: }
  9067                           ;i2c_slv.c: 195: break;
  9068  05BF  0008               	return
  9069  05C0                     l4073:	
  9070  05C0  0020               	movlb	0	; select bank0
  9071  05C1  085A               	movf	I2cSlv_I2cDrvHandle@I2cReceiveMsgState,w
  9072                           
  9073                           ; Switch size 1, requested type "space"
  9074                           ; Number of cases is 2, Range of values is 0 to 1
  9075                           ; switch strategies available:
  9076                           ; Name         Instructions Cycles
  9077                           ; simple_byte            7     4 (average)
  9078                           ; direct_byte           10     6 (fixed)
  9079                           ; jumptable            260     6 (fixed)
  9080                           ;	Chosen strategy is simple_byte
  9081  05C2  3A00               	xorlw	0	; case 0
  9082  05C3  1903               	skipnz
  9083  05C4  2D40               	goto	l4031
  9084  05C5  3A01               	xorlw	1	; case 1
  9085  05C6  1903               	skipnz
  9086  05C7  2D52               	goto	l4037
  9087  05C8  2DC9               	goto	l552
  9088  05C9                     l552:	
  9089  05C9  0008               	return
  9090  05CA                     __end_of_I2cSlv_I2cDrvHandle:	
  9091                           
  9092                           	psect	text35
  9093  0B65                     __ptext35:	
  9094 ;; *************** function _I2c_UpdateTxBuffer *****************
  9095 ;; Defined at:
  9096 ;;		line 279 in file "../../../Framework/MercuryFwk/Source/c/01_Hal/02_Drv/i2c_slv_drv.c"
  9097 ;; Parameters:    Size  Location     Type
  9098 ;;  DataBuffer      1    wreg     PTR unsigned char 
  9099 ;;		 -> RepBuffer(80), 
  9100 ;;  Length          1    4[COMMON] unsigned char 
  9101 ;; Auto vars:     Size  Location     Type
  9102 ;;  DataBuffer      1    2[BANK0 ] PTR unsigned char 
  9103 ;;		 -> RepBuffer(80), 
  9104 ;;  Index           1    3[BANK0 ] unsigned char 
  9105 ;; Return value:  Size  Location     Type
  9106 ;;                  1    wreg      void 
  9107 ;; Registers used:
  9108 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  9109 ;; Tracked objects:
  9110 ;;		On entry : 0/0
  9111 ;;		On exit  : 0/0
  9112 ;;		Unchanged: 0/0
  9113 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9114 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9115 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9116 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9117 ;;      Totals:         1       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9118 ;;Total ram usage:        5 bytes
  9119 ;; Hardware stack levels used:    1
  9120 ;; Hardware stack levels required when called:    2
  9121 ;; This function calls:
  9122 ;;		Nothing
  9123 ;; This function is called by:
  9124 ;;		_I2cSlv_I2cDrvHandle
  9125 ;; This function uses a non-reentrant model
  9126 ;;
  9127                           
  9128                           
  9129                           ;psect for function _I2c_UpdateTxBuffer
  9130  0B65                     _I2c_UpdateTxBuffer:	
  9131                           
  9132                           ;incstack = 0
  9133                           ; Regs used in _I2c_UpdateTxBuffer: [wreg+fsr1l+fsr1h+status,2+status,0]
  9134                           ;I2c_UpdateTxBuffer@DataBuffer stored from wreg
  9135  0B65  0020               	movlb	0	; select bank0
  9136  0B66  00A2               	movwf	I2c_UpdateTxBuffer@DataBuffer
  9137                           
  9138                           ;i2c_slv_drv.c: 281: UINT8 Index = 0;
  9139  0B67  01A3               	clrf	I2c_UpdateTxBuffer@Index
  9140                           
  9141                           ;i2c_slv_drv.c: 284: for (Index = 0; Index < Length; Index++)
  9142  0B68  01A3               	clrf	I2c_UpdateTxBuffer@Index
  9143  0B69                     l3849:	
  9144  0B69  0874               	movf	I2c_UpdateTxBuffer@Length,w
  9145  0B6A  0223               	subwf	I2c_UpdateTxBuffer@Index,w
  9146  0B6B  1803               	btfsc	3,0
  9147  0B6C  0008               	return
  9148                           
  9149                           ;i2c_slv_drv.c: 285: {
  9150                           ;i2c_slv_drv.c: 286: I2cTxBuffer[Index] = *(DataBuffer + Index);
  9151  0B6D  0823               	movf	I2c_UpdateTxBuffer@Index,w
  9152  0B6E  0722               	addwf	I2c_UpdateTxBuffer@DataBuffer,w
  9153  0B6F  00A0               	movwf	??_I2c_UpdateTxBuffer
  9154  0B70  0820               	movf	??_I2c_UpdateTxBuffer,w
  9155  0B71  0086               	movwf	6
  9156  0B72  3001               	movlw	1	; select bank2/3
  9157  0B73  0087               	movwf	7
  9158  0B74  0801               	movf	1,w
  9159  0B75  00A1               	movwf	??_I2c_UpdateTxBuffer+1
  9160  0B76  0823               	movf	I2c_UpdateTxBuffer@Index,w
  9161  0B77  3EA0               	addlw	(low (_I2cTxBuffer| (0+512)))& (0+255)
  9162  0B78  0086               	movwf	6
  9163  0B79  3002               	movlw	2	; select bank5/6
  9164  0B7A  0087               	movwf	7
  9165  0B7B  0821               	movf	??_I2c_UpdateTxBuffer+1,w
  9166  0B7C  0081               	movwf	1
  9167  0B7D  3001               	movlw	1
  9168  0B7E  00A0               	movwf	??_I2c_UpdateTxBuffer
  9169  0B7F  0820               	movf	??_I2c_UpdateTxBuffer,w
  9170  0B80  07A3               	addwf	I2c_UpdateTxBuffer@Index,f
  9171  0B81  2B69               	goto	l3849
  9172  0B82                     __end_of_I2c_UpdateTxBuffer:	
  9173                           
  9174                           	psect	text36
  9175  09A9                     __ptext36:	
  9176 ;; *************** function _I2c_SetI2cAddressMask *****************
  9177 ;; Defined at:
  9178 ;;		line 264 in file "../../../Framework/MercuryFwk/Source/c/01_Hal/02_Drv/i2c_slv_drv.c"
  9179 ;; Parameters:    Size  Location     Type
  9180 ;;  SlaveAddress    1    wreg     unsigned char 
  9181 ;; Auto vars:     Size  Location     Type
  9182 ;;  SlaveAddress    1    4[COMMON] unsigned char 
  9183 ;; Return value:  Size  Location     Type
  9184 ;;                  1    wreg      void 
  9185 ;; Registers used:
  9186 ;;		wreg, status,2, status,0
  9187 ;; Tracked objects:
  9188 ;;		On entry : 0/0
  9189 ;;		On exit  : 0/0
  9190 ;;		Unchanged: 0/0
  9191 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9192 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9193 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9194 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9195 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9196 ;;Total ram usage:        1 bytes
  9197 ;; Hardware stack levels used:    1
  9198 ;; Hardware stack levels required when called:    2
  9199 ;; This function calls:
  9200 ;;		Nothing
  9201 ;; This function is called by:
  9202 ;;		_I2cSlv_I2cDrvHandle
  9203 ;; This function uses a non-reentrant model
  9204 ;;
  9205                           
  9206                           
  9207                           ;psect for function _I2c_SetI2cAddressMask
  9208  09A9                     _I2c_SetI2cAddressMask:	
  9209                           
  9210                           ;incstack = 0
  9211                           ; Regs used in _I2c_SetI2cAddressMask: [wreg+status,2+status,0]
  9212                           ;I2c_SetI2cAddressMask@SlaveAddressMask stored from wreg
  9213  09A9  00F4               	movwf	I2c_SetI2cAddressMask@SlaveAddressMask
  9214                           
  9215                           ;i2c_slv_drv.c: 267: SSP1MSK = (SlaveAddressMask << ((UINT8)(1)));
  9216  09AA  3574               	lslf	I2c_SetI2cAddressMask@SlaveAddressMask,w
  9217  09AB  0024               	movlb	4	; select bank4
  9218  09AC  0093               	movwf	19	;volatile
  9219  09AD  0008               	return
  9220  09AE                     __end_of_I2c_SetI2cAddressMask:	
  9221                           
  9222                           	psect	text37
  9223  09A4                     __ptext37:	
  9224 ;; *************** function _I2c_SetI2cAddress *****************
  9225 ;; Defined at:
  9226 ;;		line 250 in file "../../../Framework/MercuryFwk/Source/c/01_Hal/02_Drv/i2c_slv_drv.c"
  9227 ;; Parameters:    Size  Location     Type
  9228 ;;  SlaveAddress    1    wreg     unsigned char 
  9229 ;; Auto vars:     Size  Location     Type
  9230 ;;  SlaveAddress    1    4[COMMON] unsigned char 
  9231 ;; Return value:  Size  Location     Type
  9232 ;;                  1    wreg      void 
  9233 ;; Registers used:
  9234 ;;		wreg, status,2, status,0
  9235 ;; Tracked objects:
  9236 ;;		On entry : 0/0
  9237 ;;		On exit  : 0/0
  9238 ;;		Unchanged: 0/0
  9239 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9240 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9241 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9242 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9243 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9244 ;;Total ram usage:        1 bytes
  9245 ;; Hardware stack levels used:    1
  9246 ;; Hardware stack levels required when called:    2
  9247 ;; This function calls:
  9248 ;;		Nothing
  9249 ;; This function is called by:
  9250 ;;		_I2cSlv_I2cDrvHandle
  9251 ;; This function uses a non-reentrant model
  9252 ;;
  9253                           
  9254                           
  9255                           ;psect for function _I2c_SetI2cAddress
  9256  09A4                     _I2c_SetI2cAddress:	
  9257                           
  9258                           ;incstack = 0
  9259                           ; Regs used in _I2c_SetI2cAddress: [wreg+status,2+status,0]
  9260                           ;I2c_SetI2cAddress@SlaveAddress stored from wreg
  9261  09A4  00F4               	movwf	I2c_SetI2cAddress@SlaveAddress
  9262                           
  9263                           ;i2c_slv_drv.c: 253: SSP1ADD = (SlaveAddress << ((UINT8)(1)));
  9264  09A5  3574               	lslf	I2c_SetI2cAddress@SlaveAddress,w
  9265  09A6  0024               	movlb	4	; select bank4
  9266  09A7  0092               	movwf	18	;volatile
  9267  09A8  0008               	return
  9268  09A9                     __end_of_I2c_SetI2cAddress:	
  9269                           
  9270                           	psect	text38
  9271  09D4                     __ptext38:	
  9272 ;; *************** function _Mcu_SetPullUpsSts *****************
  9273 ;; Defined at:
  9274 ;;		line 167 in file "../../../Framework/MercuryFwk/Source/c/01_Hal/02_Drv/mcu_drv.c"
  9275 ;; Parameters:    Size  Location     Type
  9276 ;;  PuSts           1    wreg     enum E3374
  9277 ;; Auto vars:     Size  Location     Type
  9278 ;;  PuSts           1    4[COMMON] enum E3374
  9279 ;; Return value:  Size  Location     Type
  9280 ;;                  1    wreg      void 
  9281 ;; Registers used:
  9282 ;;		wreg, status,0
  9283 ;; Tracked objects:
  9284 ;;		On entry : 0/0
  9285 ;;		On exit  : 0/0
  9286 ;;		Unchanged: 0/0
  9287 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9288 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9289 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9290 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9291 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9292 ;;Total ram usage:        1 bytes
  9293 ;; Hardware stack levels used:    1
  9294 ;; Hardware stack levels required when called:    2
  9295 ;; This function calls:
  9296 ;;		Nothing
  9297 ;; This function is called by:
  9298 ;;		_App_MainTask
  9299 ;; This function uses a non-reentrant model
  9300 ;;
  9301                           
  9302                           
  9303                           ;psect for function _Mcu_SetPullUpsSts
  9304  09D4                     _Mcu_SetPullUpsSts:	
  9305                           
  9306                           ;incstack = 0
  9307                           ; Regs used in _Mcu_SetPullUpsSts: [wreg+status,0]
  9308                           ;Mcu_SetPullUpsSts@PuSts stored from wreg
  9309  09D4  00F4               	movwf	Mcu_SetPullUpsSts@PuSts
  9310                           
  9311                           ;mcu_drv.c: 170: OPTION_REGbits.nWPUEN = PuSts;
  9312  09D5  0C74               	rrf	Mcu_SetPullUpsSts@PuSts,w
  9313  09D6  0021               	movlb	1	; select bank1
  9314  09D7  1C03               	skipc
  9315  09D8  1395               	bcf	21,7	;volatile
  9316  09D9  1803               	skipnc
  9317  09DA  1795               	bsf	21,7	;volatile
  9318  09DB  0008               	return
  9319  09DC                     __end_of_Mcu_SetPullUpsSts:	
  9320                           
  9321                           	psect	text39
  9322  09CC                     __ptext39:	
  9323 ;; *************** function _Mcu_SetDieTempSts *****************
  9324 ;; Defined at:
  9325 ;;		line 265 in file "../../../Framework/MercuryFwk/Source/c/01_Hal/02_Drv/mcu_drv.c"
  9326 ;; Parameters:    Size  Location     Type
  9327 ;;  DieTempSts      1    wreg     unsigned char 
  9328 ;; Auto vars:     Size  Location     Type
  9329 ;;  DieTempSts      1    4[COMMON] unsigned char 
  9330 ;; Return value:  Size  Location     Type
  9331 ;;                  1    wreg      void 
  9332 ;; Registers used:
  9333 ;;		wreg, status,0
  9334 ;; Tracked objects:
  9335 ;;		On entry : 0/0
  9336 ;;		On exit  : 0/0
  9337 ;;		Unchanged: 0/0
  9338 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9339 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9340 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9341 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9342 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9343 ;;Total ram usage:        1 bytes
  9344 ;; Hardware stack levels used:    1
  9345 ;; Hardware stack levels required when called:    2
  9346 ;; This function calls:
  9347 ;;		Nothing
  9348 ;; This function is called by:
  9349 ;;		_App_MainTask
  9350 ;; This function uses a non-reentrant model
  9351 ;;
  9352                           
  9353                           
  9354                           ;psect for function _Mcu_SetDieTempSts
  9355  09CC                     _Mcu_SetDieTempSts:	
  9356                           
  9357                           ;incstack = 0
  9358                           ; Regs used in _Mcu_SetDieTempSts: [wreg+status,0]
  9359                           ;Mcu_SetDieTempSts@DieTempSts stored from wreg
  9360  09CC  00F4               	movwf	Mcu_SetDieTempSts@DieTempSts
  9361                           
  9362                           ;mcu_drv.c: 268: FVRCONbits.TSEN = DieTempSts;
  9363  09CD  0C74               	rrf	Mcu_SetDieTempSts@DieTempSts,w
  9364  09CE  0022               	movlb	2	; select bank2
  9365  09CF  1C03               	skipc
  9366  09D0  1297               	bcf	23,5	;volatile
  9367  09D1  1803               	skipnc
  9368  09D2  1697               	bsf	23,5	;volatile
  9369  09D3  0008               	return
  9370  09D4                     __end_of_Mcu_SetDieTempSts:	
  9371                           
  9372                           	psect	text40
  9373  09C4                     __ptext40:	
  9374 ;; *************** function _Mcu_SetDieTempMode *****************
  9375 ;; Defined at:
  9376 ;;		line 279 in file "../../../Framework/MercuryFwk/Source/c/01_Hal/02_Drv/mcu_drv.c"
  9377 ;; Parameters:    Size  Location     Type
  9378 ;;  DieTempMode     1    wreg     unsigned char 
  9379 ;; Auto vars:     Size  Location     Type
  9380 ;;  DieTempMode     1    4[COMMON] unsigned char 
  9381 ;; Return value:  Size  Location     Type
  9382 ;;                  1    wreg      void 
  9383 ;; Registers used:
  9384 ;;		wreg, status,0
  9385 ;; Tracked objects:
  9386 ;;		On entry : 0/0
  9387 ;;		On exit  : 0/0
  9388 ;;		Unchanged: 0/0
  9389 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9390 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9391 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9392 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9393 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9394 ;;Total ram usage:        1 bytes
  9395 ;; Hardware stack levels used:    1
  9396 ;; Hardware stack levels required when called:    2
  9397 ;; This function calls:
  9398 ;;		Nothing
  9399 ;; This function is called by:
  9400 ;;		_App_MainTask
  9401 ;; This function uses a non-reentrant model
  9402 ;;
  9403                           
  9404                           
  9405                           ;psect for function _Mcu_SetDieTempMode
  9406  09C4                     _Mcu_SetDieTempMode:	
  9407                           
  9408                           ;incstack = 0
  9409                           ; Regs used in _Mcu_SetDieTempMode: [wreg+status,0]
  9410                           ;Mcu_SetDieTempMode@DieTempMode stored from wreg
  9411  09C4  00F4               	movwf	Mcu_SetDieTempMode@DieTempMode
  9412                           
  9413                           ;mcu_drv.c: 282: FVRCONbits.TSRNG = DieTempMode;
  9414  09C5  0C74               	rrf	Mcu_SetDieTempMode@DieTempMode,w
  9415  09C6  0022               	movlb	2	; select bank2
  9416  09C7  1C03               	skipc
  9417  09C8  1217               	bcf	23,4	;volatile
  9418  09C9  1803               	skipnc
  9419  09CA  1617               	bsf	23,4	;volatile
  9420  09CB  0008               	return
  9421  09CC                     __end_of_Mcu_SetDieTempMode:	
  9422                           
  9423                           	psect	text41
  9424  0645                     __ptext41:	
  9425 ;; *************** function _Mcu_ConfigPullUps *****************
  9426 ;; Defined at:
  9427 ;;		line 181 in file "../../../Framework/MercuryFwk/Source/c/01_Hal/02_Drv/mcu_drv.c"
  9428 ;; Parameters:    Size  Location     Type
  9429 ;;  WpuCh           1    wreg     PTR struct _WpuChType
  9430 ;;		 -> App_MainTask@WpuCh(12), 
  9431 ;; Auto vars:     Size  Location     Type
  9432 ;;  WpuCh           1    4[COMMON] PTR struct _WpuChType
  9433 ;;		 -> App_MainTask@WpuCh(12), 
  9434 ;; Return value:  Size  Location     Type
  9435 ;;                  1    wreg      void 
  9436 ;; Registers used:
  9437 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  9438 ;; Tracked objects:
  9439 ;;		On entry : 0/0
  9440 ;;		On exit  : 0/0
  9441 ;;		Unchanged: 0/0
  9442 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9443 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9444 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9445 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9446 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9447 ;;Total ram usage:        1 bytes
  9448 ;; Hardware stack levels used:    1
  9449 ;; Hardware stack levels required when called:    2
  9450 ;; This function calls:
  9451 ;;		Nothing
  9452 ;; This function is called by:
  9453 ;;		_App_MainTask
  9454 ;; This function uses a non-reentrant model
  9455 ;;
  9456                           
  9457                           
  9458                           ;psect for function _Mcu_ConfigPullUps
  9459  0645                     _Mcu_ConfigPullUps:	
  9460                           
  9461                           ;incstack = 0
  9462                           ; Regs used in _Mcu_ConfigPullUps: [wreg+fsr1l+fsr1h+status,2+status,0]
  9463                           ;Mcu_ConfigPullUps@WpuCh stored from wreg
  9464  0645  00F4               	movwf	Mcu_ConfigPullUps@WpuCh
  9465                           
  9466                           ;mcu_drv.c: 184: WPUA = 0x00;
  9467  0646  0024               	movlb	4	; select bank4
  9468  0647  018C               	clrf	12	;volatile
  9469                           
  9470                           ;mcu_drv.c: 185: WPUAbits.WPUA0 = WpuCh->WpuA0;
  9471  0648  0874               	movf	Mcu_ConfigPullUps@WpuCh,w
  9472  0649  0086               	movwf	6
  9473  064A  0187               	clrf	7
  9474  064B  0C01               	rrf	1,w
  9475  064C  1C03               	skipc
  9476  064D  100C               	bcf	12,0	;volatile
  9477  064E  1803               	skipnc
  9478  064F  140C               	bsf	12,0	;volatile
  9479                           
  9480                           ;mcu_drv.c: 186: WPUAbits.WPUA1 = WpuCh->WpuA1;
  9481  0650  0A74               	incf	Mcu_ConfigPullUps@WpuCh,w
  9482  0651  0086               	movwf	6
  9483  0652  0187               	clrf	7
  9484  0653  0C01               	rrf	1,w
  9485  0654  1C03               	skipc
  9486  0655  108C               	bcf	12,1	;volatile
  9487  0656  1803               	skipnc
  9488  0657  148C               	bsf	12,1	;volatile
  9489                           
  9490                           ;mcu_drv.c: 187: WPUAbits.WPUA2 = WpuCh->WpuA2;
  9491  0658  0874               	movf	Mcu_ConfigPullUps@WpuCh,w
  9492  0659  3E02               	addlw	2
  9493  065A  0086               	movwf	6
  9494  065B  0187               	clrf	7
  9495  065C  0C01               	rrf	1,w
  9496  065D  1C03               	skipc
  9497  065E  110C               	bcf	12,2	;volatile
  9498  065F  1803               	skipnc
  9499  0660  150C               	bsf	12,2	;volatile
  9500                           
  9501                           ;mcu_drv.c: 188: WPUAbits.WPUA3 = WpuCh->WpuA3;
  9502  0661  0874               	movf	Mcu_ConfigPullUps@WpuCh,w
  9503  0662  3E03               	addlw	3
  9504  0663  0086               	movwf	6
  9505  0664  0187               	clrf	7
  9506  0665  0C01               	rrf	1,w
  9507  0666  1C03               	skipc
  9508  0667  118C               	bcf	12,3	;volatile
  9509  0668  1803               	skipnc
  9510  0669  158C               	bsf	12,3	;volatile
  9511                           
  9512                           ;mcu_drv.c: 189: WPUAbits.WPUA4 = WpuCh->WpuA4;
  9513  066A  0874               	movf	Mcu_ConfigPullUps@WpuCh,w
  9514  066B  3E04               	addlw	4
  9515  066C  0086               	movwf	6
  9516  066D  0187               	clrf	7
  9517  066E  0C01               	rrf	1,w
  9518  066F  1C03               	skipc
  9519  0670  120C               	bcf	12,4	;volatile
  9520  0671  1803               	skipnc
  9521  0672  160C               	bsf	12,4	;volatile
  9522                           
  9523                           ;mcu_drv.c: 190: WPUAbits.WPUA5 = WpuCh->WpuA5;
  9524  0673  0874               	movf	Mcu_ConfigPullUps@WpuCh,w
  9525  0674  3E05               	addlw	5
  9526  0675  0086               	movwf	6
  9527  0676  0187               	clrf	7
  9528  0677  0C01               	rrf	1,w
  9529  0678  1C03               	skipc
  9530  0679  128C               	bcf	12,5	;volatile
  9531  067A  1803               	skipnc
  9532  067B  168C               	bsf	12,5	;volatile
  9533                           
  9534                           ;mcu_drv.c: 202: WPUC = 0x00;
  9535  067C  018E               	clrf	14	;volatile
  9536                           
  9537                           ;mcu_drv.c: 203: WPUCbits.WPUC0 = WpuCh->WpuC0;
  9538  067D  0874               	movf	Mcu_ConfigPullUps@WpuCh,w
  9539  067E  3E06               	addlw	6
  9540  067F  0086               	movwf	6
  9541  0680  0187               	clrf	7
  9542  0681  0C01               	rrf	1,w
  9543  0682  1C03               	skipc
  9544  0683  100E               	bcf	14,0	;volatile
  9545  0684  1803               	skipnc
  9546  0685  140E               	bsf	14,0	;volatile
  9547                           
  9548                           ;mcu_drv.c: 204: WPUCbits.WPUC1 = WpuCh->WpuC1;
  9549  0686  0874               	movf	Mcu_ConfigPullUps@WpuCh,w
  9550  0687  3E07               	addlw	7
  9551  0688  0086               	movwf	6
  9552  0689  0187               	clrf	7
  9553  068A  0C01               	rrf	1,w
  9554  068B  1C03               	skipc
  9555  068C  108E               	bcf	14,1	;volatile
  9556  068D  1803               	skipnc
  9557  068E  148E               	bsf	14,1	;volatile
  9558                           
  9559                           ;mcu_drv.c: 205: WPUCbits.WPUC2 = WpuCh->WpuC2;
  9560  068F  0874               	movf	Mcu_ConfigPullUps@WpuCh,w
  9561  0690  3E08               	addlw	8
  9562  0691  0086               	movwf	6
  9563  0692  0187               	clrf	7
  9564  0693  0C01               	rrf	1,w
  9565  0694  1C03               	skipc
  9566  0695  110E               	bcf	14,2	;volatile
  9567  0696  1803               	skipnc
  9568  0697  150E               	bsf	14,2	;volatile
  9569                           
  9570                           ;mcu_drv.c: 206: WPUCbits.WPUC3 = WpuCh->WpuC3;
  9571  0698  0874               	movf	Mcu_ConfigPullUps@WpuCh,w
  9572  0699  3E09               	addlw	9
  9573  069A  0086               	movwf	6
  9574  069B  0187               	clrf	7
  9575  069C  0C01               	rrf	1,w
  9576  069D  1C03               	skipc
  9577  069E  118E               	bcf	14,3	;volatile
  9578  069F  1803               	skipnc
  9579  06A0  158E               	bsf	14,3	;volatile
  9580                           
  9581                           ;mcu_drv.c: 207: WPUCbits.WPUC4 = WpuCh->WpuC4;
  9582  06A1  0874               	movf	Mcu_ConfigPullUps@WpuCh,w
  9583  06A2  3E0A               	addlw	10
  9584  06A3  0086               	movwf	6
  9585  06A4  0187               	clrf	7
  9586  06A5  0C01               	rrf	1,w
  9587  06A6  1C03               	skipc
  9588  06A7  120E               	bcf	14,4	;volatile
  9589  06A8  1803               	skipnc
  9590  06A9  160E               	bsf	14,4	;volatile
  9591                           
  9592                           ;mcu_drv.c: 208: WPUCbits.WPUC5 = WpuCh->WpuC5;
  9593  06AA  0874               	movf	Mcu_ConfigPullUps@WpuCh,w
  9594  06AB  3E0B               	addlw	11
  9595  06AC  0086               	movwf	6
  9596  06AD  0187               	clrf	7
  9597  06AE  0C01               	rrf	1,w
  9598  06AF  1C03               	skipc
  9599  06B0  128E               	bcf	14,5	;volatile
  9600  06B1  1803               	skipnc
  9601  06B2  168E               	bsf	14,5	;volatile
  9602  06B3  0008               	return
  9603  06B4                     __end_of_Mcu_ConfigPullUps:	
  9604                           
  9605                           	psect	text42
  9606  0A48                     __ptext42:	
  9607 ;; *************** function _Int0Trigger *****************
  9608 ;; Defined at:
  9609 ;;		line 166 in file "../Source/c/04_App/sb320_app.c"
  9610 ;; Parameters:    Size  Location     Type
  9611 ;;		None
  9612 ;; Auto vars:     Size  Location     Type
  9613 ;;		None
  9614 ;; Return value:  Size  Location     Type
  9615 ;;                  1    wreg      void 
  9616 ;; Registers used:
  9617 ;;		wreg, status,2, status,0
  9618 ;; Tracked objects:
  9619 ;;		On entry : 0/0
  9620 ;;		On exit  : 0/0
  9621 ;;		Unchanged: 0/0
  9622 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9623 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9624 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9625 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9626 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9627 ;;Total ram usage:        0 bytes
  9628 ;; Hardware stack levels used:    1
  9629 ;; Hardware stack levels required when called:    2
  9630 ;; This function calls:
  9631 ;;		Nothing
  9632 ;; This function is called by:
  9633 ;;		_App_MainTask
  9634 ;; This function uses a non-reentrant model
  9635 ;;
  9636                           
  9637                           
  9638                           ;psect for function _Int0Trigger
  9639  0A48                     _Int0Trigger:	
  9640                           
  9641                           ;sb320_app.c: 169: if ((IrSens1 == ((UINT8)(0))) && (IrSens2 == ((UINT8)(0))))
  9642                           
  9643                           ;incstack = 0
  9644                           ; Regs used in _Int0Trigger: [wreg+status,2+status,0]
  9645  0A48  0020               	movlb	0	; select bank0
  9646  0A49  0865               	movf	_IrSens1,w
  9647  0A4A  1D03               	btfss	3,2
  9648  0A4B  2A52               	goto	l898
  9649  0A4C  0866               	movf	_IrSens2,w
  9650  0A4D  1D03               	btfss	3,2
  9651  0A4E  2A52               	goto	l898
  9652                           
  9653                           ;sb320_app.c: 170: {
  9654                           ;sb320_app.c: 172: LATAbits.LATA0 = ((UINT8)(0));
  9655  0A4F  0022               	movlb	2	; select bank2
  9656  0A50  100C               	bcf	12,0	;volatile
  9657                           
  9658                           ;sb320_app.c: 173: }
  9659  0A51  0008               	return
  9660  0A52                     l898:	
  9661                           
  9662                           ;sb320_app.c: 174: else
  9663                           ;sb320_app.c: 175: {
  9664                           ;sb320_app.c: 177: LATAbits.LATA0 = ((UINT8)(1));
  9665  0A52  0022               	movlb	2	; select bank2
  9666  0A53  140C               	bsf	12,0	;volatile
  9667  0A54  0008               	return
  9668  0A55                     __end_of_Int0Trigger:	
  9669                           
  9670                           	psect	text43
  9671  09E5                     __ptext43:	
  9672 ;; *************** function _GetIrSensSts *****************
  9673 ;; Defined at:
  9674 ;;		line 105 in file "../Source/c/04_App/sb320_app.c"
  9675 ;; Parameters:    Size  Location     Type
  9676 ;;		None
  9677 ;; Auto vars:     Size  Location     Type
  9678 ;;		None
  9679 ;; Return value:  Size  Location     Type
  9680 ;;                  1    wreg      void 
  9681 ;; Registers used:
  9682 ;;		wreg, status,2
  9683 ;; Tracked objects:
  9684 ;;		On entry : 0/0
  9685 ;;		On exit  : 0/0
  9686 ;;		Unchanged: 0/0
  9687 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9688 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9689 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9690 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9691 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9692 ;;Total ram usage:        0 bytes
  9693 ;; Hardware stack levels used:    1
  9694 ;; Hardware stack levels required when called:    2
  9695 ;; This function calls:
  9696 ;;		Nothing
  9697 ;; This function is called by:
  9698 ;;		_App_MainTask
  9699 ;; This function uses a non-reentrant model
  9700 ;;
  9701                           
  9702                           
  9703                           ;psect for function _GetIrSensSts
  9704  09E5                     _GetIrSensSts:	
  9705                           
  9706                           ;sb320_app.c: 108: IrSens1 = PORTCbits.RC2;
  9707                           
  9708                           ;incstack = 0
  9709                           ; Regs used in _GetIrSensSts: [wreg+status,2]
  9710  09E5  3000               	movlw	0
  9711  09E6  0020               	movlb	0	; select bank0
  9712  09E7  190E               	btfsc	14,2	;volatile
  9713  09E8  3001               	movlw	1
  9714  09E9  00E5               	movwf	_IrSens1
  9715                           
  9716                           ;sb320_app.c: 109: IrSens2 = PORTCbits.RC3;
  9717  09EA  3000               	movlw	0
  9718  09EB  198E               	btfsc	14,3	;volatile
  9719  09EC  3001               	movlw	1
  9720  09ED  00E6               	movwf	_IrSens2
  9721  09EE  0008               	return
  9722  09EF                     __end_of_GetIrSensSts:	
  9723                           
  9724                           	psect	text44
  9725  0C31                     __ptext44:	
  9726 ;; *************** function _AppSm *****************
  9727 ;; Defined at:
  9728 ;;		line 189 in file "../Source/c/04_App/sb320_app.c"
  9729 ;; Parameters:    Size  Location     Type
  9730 ;;		None
  9731 ;; Auto vars:     Size  Location     Type
  9732 ;;		None
  9733 ;; Return value:  Size  Location     Type
  9734 ;;                  1    wreg      void 
  9735 ;; Registers used:
  9736 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9737 ;; Tracked objects:
  9738 ;;		On entry : 0/0
  9739 ;;		On exit  : 0/0
  9740 ;;		Unchanged: 0/0
  9741 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9742 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9743 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9744 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9745 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9746 ;;Total ram usage:        1 bytes
  9747 ;; Hardware stack levels used:    1
  9748 ;; Hardware stack levels required when called:    6
  9749 ;; This function calls:
  9750 ;;		_GenerateEvt
  9751 ;;		_ManageProtocol
  9752 ;;		_StdS_SetI2cAddress
  9753 ;; This function is called by:
  9754 ;;		_App_MainTask
  9755 ;; This function uses a non-reentrant model
  9756 ;;
  9757                           
  9758                           
  9759                           ;psect for function _AppSm
  9760  0C31                     _AppSm:	
  9761                           
  9762                           ;sb320_app.c: 191: static AppStateType AppState = WaitWpuSetState;
  9763                           ;sb320_app.c: 192: static UINT8 WpuSetCounter = 0;
  9764                           ;sb320_app.c: 194: switch (AppState)
  9765                           
  9766                           ;incstack = 0
  9767                           ; Regs used in _AppSm: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  9768  0C31  2C4D               	goto	l4135
  9769  0C32                     l4119:	
  9770                           ;sb320_app.c: 195: {
  9771                           ;sb320_app.c: 196: case WaitWpuSetState:
  9772                           
  9773                           
  9774                           ;sb320_app.c: 198: WpuSetCounter++;
  9775  0C32  3001               	movlw	1
  9776  0C33  0020               	movlb	0	; select bank0
  9777  0C34  00BA               	movwf	??_AppSm
  9778  0C35  083A               	movf	??_AppSm,w
  9779  0C36  07D9               	addwf	AppSm@WpuSetCounter,f
  9780                           
  9781                           ;sb320_app.c: 200: if (WpuSetCounter >= ((UINT16)(100)/((UINT16)(10))))
  9782  0C37  300A               	movlw	10
  9783  0C38  0259               	subwf	AppSm@WpuSetCounter,w
  9784  0C39  1C03               	skipc
  9785  0C3A  0008               	return
  9786                           
  9787                           ;sb320_app.c: 201: {
  9788                           ;sb320_app.c: 203: StdS_SetI2cAddress();
  9789  0C3B  318C  24E0         	fcall	_StdS_SetI2cAddress
  9790                           
  9791                           ;sb320_app.c: 205: AppState = SendI2cAddrState;
  9792  0C3D  0020               	movlb	0	; select bank0
  9793  0C3E  01D8               	clrf	AppSm@AppState
  9794  0C3F  0AD8               	incf	AppSm@AppState,f
  9795                           
  9796                           ;sb320_app.c: 206: }
  9797                           ;sb320_app.c: 207: break;
  9798  0C40  0008               	return
  9799  0C41                     l4127:	
  9800                           ;sb320_app.c: 209: case SendI2cAddrState:
  9801                           
  9802                           
  9803                           ;sb320_app.c: 211: GenerateEvt(&I2cSetAddress);
  9804  0C41  30DC               	movlw	(low (_I2cSetAddress| 0))& (0+255)
  9805  0C42  318B  23C4         	fcall	_GenerateEvt
  9806                           
  9807                           ;sb320_app.c: 213: AppState = ManageProtocolState;
  9808  0C44  3002               	movlw	2
  9809  0C45  0020               	movlb	0	; select bank0
  9810  0C46  00BA               	movwf	??_AppSm
  9811  0C47  083A               	movf	??_AppSm,w
  9812  0C48  00D8               	movwf	AppSm@AppState
  9813                           
  9814                           ;sb320_app.c: 214: break;
  9815  0C49  0008               	return
  9816  0C4A                     l4131:	
  9817                           ;sb320_app.c: 216: case ManageProtocolState:
  9818                           
  9819                           
  9820                           ;sb320_app.c: 218: ManageProtocol();
  9821  0C4A  318F  27A8         	fcall	_ManageProtocol
  9822                           
  9823                           ;sb320_app.c: 223: }
  9824                           
  9825                           ;sb320_app.c: 222: break;
  9826                           
  9827                           ;sb320_app.c: 221: default:
  9828                           
  9829                           ;sb320_app.c: 219: break;
  9830  0C4C  0008               	return
  9831  0C4D                     l4135:	
  9832  0C4D  0020               	movlb	0	; select bank0
  9833  0C4E  0858               	movf	AppSm@AppState,w
  9834                           
  9835                           ; Switch size 1, requested type "space"
  9836                           ; Number of cases is 3, Range of values is 0 to 2
  9837                           ; switch strategies available:
  9838                           ; Name         Instructions Cycles
  9839                           ; simple_byte           10     6 (average)
  9840                           ; direct_byte           12     6 (fixed)
  9841                           ; jumptable            260     6 (fixed)
  9842                           ;	Chosen strategy is simple_byte
  9843  0C4F  3A00               	xorlw	0	; case 0
  9844  0C50  1903               	skipnz
  9845  0C51  2C32               	goto	l4119
  9846  0C52  3A01               	xorlw	1	; case 1
  9847  0C53  1903               	skipnz
  9848  0C54  2C41               	goto	l4127
  9849  0C55  3A03               	xorlw	3	; case 2
  9850  0C56  1903               	skipnz
  9851  0C57  2C4A               	goto	l4131
  9852  0C58  2C59               	goto	l914
  9853  0C59                     l914:	
  9854  0C59  0008               	return
  9855  0C5A                     __end_of_AppSm:	
  9856                           
  9857                           	psect	text45
  9858  0CE0                     __ptext45:	
  9859 ;; *************** function _StdS_SetI2cAddress *****************
  9860 ;; Defined at:
  9861 ;;		line 317 in file "../../../Framework/MercuryFwk/Source/c/03_Sml/02_Ssl/std_ser.c"
  9862 ;; Parameters:    Size  Location     Type
  9863 ;;		None
  9864 ;; Auto vars:     Size  Location     Type
  9865 ;;		None
  9866 ;; Return value:  Size  Location     Type
  9867 ;;                  1    wreg      void 
  9868 ;; Registers used:
  9869 ;;		wreg, status,2, status,0
  9870 ;; Tracked objects:
  9871 ;;		On entry : 0/0
  9872 ;;		On exit  : 0/0
  9873 ;;		Unchanged: 0/0
  9874 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9875 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9876 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9877 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9878 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9879 ;;Total ram usage:        2 bytes
  9880 ;; Hardware stack levels used:    1
  9881 ;; Hardware stack levels required when called:    2
  9882 ;; This function calls:
  9883 ;;		Nothing
  9884 ;; This function is called by:
  9885 ;;		_AppSm
  9886 ;; This function uses a non-reentrant model
  9887 ;;
  9888                           
  9889                           
  9890                           ;psect for function _StdS_SetI2cAddress
  9891  0CE0                     _StdS_SetI2cAddress:	
  9892                           
  9893                           ;std_ser.c: 321: I2cSlaveAddress |= (!PORTCbits.RC4 << 3);
  9894                           
  9895                           ;incstack = 0
  9896                           ; Regs used in _StdS_SetI2cAddress: [wreg+status,2+status,0]
  9897  0CE0  1003               	clrc
  9898  0CE1  0020               	movlb	0	; select bank0
  9899  0CE2  1E0E               	btfss	14,4	;volatile
  9900  0CE3  1403               	setc
  9901  0CE4  3000               	movlw	0
  9902  0CE5  3D09               	addwfc	9,w
  9903  0CE6  00F4               	movwf	??_StdS_SetI2cAddress
  9904  0CE7  3002               	movlw	2
  9905  0CE8                     u1625:	
  9906  0CE8  35F4               	lslf	??_StdS_SetI2cAddress,f
  9907  0CE9  3EFF               	addlw	-1
  9908  0CEA  1D03               	skipz
  9909  0CEB  2CE8               	goto	u1625
  9910  0CEC  3574               	lslf	??_StdS_SetI2cAddress,w
  9911  0CED  00F5               	movwf	??_StdS_SetI2cAddress+1
  9912  0CEE  0875               	movf	??_StdS_SetI2cAddress+1,w
  9913  0CEF  04F6               	iorwf	_I2cSlaveAddress,f
  9914                           
  9915                           ;std_ser.c: 322: I2cSlaveAddress |= (!PORTCbits.RC5 << 2);
  9916  0CF0  1003               	clrc
  9917  0CF1  1E8E               	btfss	14,5	;volatile
  9918  0CF2  1403               	setc
  9919  0CF3  3000               	movlw	0
  9920  0CF4  3D09               	addwfc	9,w
  9921  0CF5  00F4               	movwf	??_StdS_SetI2cAddress
  9922  0CF6  3001               	movlw	1
  9923  0CF7                     u1635:	
  9924  0CF7  35F4               	lslf	??_StdS_SetI2cAddress,f
  9925  0CF8  3EFF               	addlw	-1
  9926  0CF9  1D03               	skipz
  9927  0CFA  2CF7               	goto	u1635
  9928  0CFB  3574               	lslf	??_StdS_SetI2cAddress,w
  9929  0CFC  00F5               	movwf	??_StdS_SetI2cAddress+1
  9930  0CFD  0875               	movf	??_StdS_SetI2cAddress+1,w
  9931  0CFE  04F6               	iorwf	_I2cSlaveAddress,f
  9932                           
  9933                           ;std_ser.c: 323: I2cSlaveAddress |= (!PORTAbits.RA4 << 1);
  9934  0CFF  1003               	clrc
  9935  0D00  1E0C               	btfss	12,4	;volatile
  9936  0D01  1403               	setc
  9937  0D02  3000               	movlw	0
  9938  0D03  3D09               	addwfc	9,w
  9939  0D04  0709               	addwf	9,w
  9940  0D05  00F4               	movwf	??_StdS_SetI2cAddress
  9941  0D06  0874               	movf	??_StdS_SetI2cAddress,w
  9942  0D07  04F6               	iorwf	_I2cSlaveAddress,f
  9943                           
  9944                           ;std_ser.c: 324: I2cSlaveAddress |= (!PORTAbits.RA5 << 0);
  9945  0D08  1003               	clrc
  9946  0D09  1E8C               	btfss	12,5	;volatile
  9947  0D0A  1403               	setc
  9948  0D0B  3000               	movlw	0
  9949  0D0C  3D09               	addwfc	9,w
  9950  0D0D  00F4               	movwf	??_StdS_SetI2cAddress
  9951  0D0E  0874               	movf	??_StdS_SetI2cAddress,w
  9952  0D0F  04F6               	iorwf	_I2cSlaveAddress,f
  9953  0D10  0008               	return
  9954  0D11                     __end_of_StdS_SetI2cAddress:	
  9955                           
  9956                           	psect	text46
  9957  0FA8                     __ptext46:	
  9958 ;; *************** function _ManageProtocol *****************
  9959 ;; Defined at:
  9960 ;;		line 120 in file "../Source/c/04_App/sb320_app.c"
  9961 ;; Parameters:    Size  Location     Type
  9962 ;;		None
  9963 ;; Auto vars:     Size  Location     Type
  9964 ;;		None
  9965 ;; Return value:  Size  Location     Type
  9966 ;;                  1    wreg      void 
  9967 ;; Registers used:
  9968 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9969 ;; Tracked objects:
  9970 ;;		On entry : 0/0
  9971 ;;		On exit  : 0/0
  9972 ;;		Unchanged: 0/0
  9973 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9974 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9975 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9976 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9977 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9978 ;;Total ram usage:        2 bytes
  9979 ;; Hardware stack levels used:    1
  9980 ;; Hardware stack levels required when called:    5
  9981 ;; This function calls:
  9982 ;;		_GenerateEvt
  9983 ;;		_ReceiveEvt
  9984 ;;		_StdS_ManageStdServices
  9985 ;;		_utoa
  9986 ;; This function is called by:
  9987 ;;		_AppSm
  9988 ;; This function uses a non-reentrant model
  9989 ;;
  9990                           
  9991                           
  9992                           ;psect for function _ManageProtocol
  9993  0FA8                     _ManageProtocol:	
  9994                           
  9995                           ;sb320_app.c: 123: if (ReceiveEvt(&I2cWriteRequest))
  9996                           
  9997                           ;incstack = 0
  9998                           ; Regs used in _ManageProtocol: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  9999  0FA8  30DE               	movlw	(low (_I2cWriteRequest| 0))& (0+255)
 10000  0FA9  318B  23A3  318F   	fcall	_ReceiveEvt
 10001  0FAC  3A00               	xorlw	0
 10002  0FAD  1903               	skipnz
 10003  0FAE  0008               	return
 10004                           
 10005                           ;sb320_app.c: 124: {
 10006                           ;sb320_app.c: 126: StdS_ManageStdServices();
 10007  0FAF  3181  2199  318F   	fcall	_StdS_ManageStdServices
 10008                           
 10009                           ;sb320_app.c: 128: switch (CmdBuffer[((UINT8)(0))])
 10010  0FB2  2FF5               	goto	l3929
 10011  0FB3                     l3911:	
 10012                           ;sb320_app.c: 129: {
 10013                           ;sb320_app.c: 130: case ((UINT8)(0x60)):
 10014                           
 10015                           
 10016                           ;sb320_app.c: 132: RepBuffer[((UINT8)(0))] = (IrSens1 | (IrSens2 << ((UINT8)(1))));
 10017  0FB3  0020               	movlb	0	; select bank0
 10018  0FB4  3566               	lslf	_IrSens2,w
 10019  0FB5  0465               	iorwf	_IrSens1,w
 10020  0FB6  00B8               	movwf	??_ManageProtocol
 10021  0FB7  0838               	movf	??_ManageProtocol,w
 10022  0FB8  0023               	movlb	3	; select bank3
 10023  0FB9  00A0               	movwf	_RepBuffer^(0+384)
 10024                           
 10025                           ;sb320_app.c: 134: RepBufferLen = ((UINT8)(1));
 10026  0FBA  01F7               	clrf	_RepBufferLen
 10027  0FBB  0AF7               	incf	_RepBufferLen,f
 10028                           
 10029                           ;sb320_app.c: 136: GenerateEvt(&I2cReplyPacketReady);
 10030  0FBC  3068               	movlw	(low (_I2cReplyPacketReady| 0))& (0+255)
 10031  0FBD  318B  23C4         	fcall	_GenerateEvt
 10032                           
 10033                           ;sb320_app.c: 137: break;
 10034  0FBF  0008               	return
 10035  0FC0                     l3917:	
 10036                           ;sb320_app.c: 139: case ((UINT8)(0x61)):
 10037                           
 10038                           
 10039                           ;sb320_app.c: 141: utoa(&IrSens1Str,IrSens1,10);
 10040  0FC0  0020               	movlb	0	; select bank0
 10041  0FC1  0865               	movf	_IrSens1,w
 10042  0FC2  00B8               	movwf	??_ManageProtocol
 10043  0FC3  01B9               	clrf	??_ManageProtocol+1
 10044  0FC4  0838               	movf	??_ManageProtocol,w
 10045  0FC5  00A7               	movwf	utoa@val
 10046  0FC6  0839               	movf	??_ManageProtocol+1,w
 10047  0FC7  00A8               	movwf	utoa@val+1
 10048  0FC8  300A               	movlw	10
 10049  0FC9  00A9               	movwf	utoa@base
 10050  0FCA  3000               	movlw	0
 10051  0FCB  00AA               	movwf	utoa@base+1
 10052  0FCC  306C               	movlw	(low (_IrSens1Str| 0))& (0+255)
 10053  0FCD  3187  2782  318F   	fcall	_utoa
 10054                           
 10055                           ;sb320_app.c: 142: utoa(&IrSens2Str,IrSens2,10);
 10056  0FD0  0020               	movlb	0	; select bank0
 10057  0FD1  0866               	movf	_IrSens2,w
 10058  0FD2  00B8               	movwf	??_ManageProtocol
 10059  0FD3  01B9               	clrf	??_ManageProtocol+1
 10060  0FD4  0838               	movf	??_ManageProtocol,w
 10061  0FD5  00A7               	movwf	utoa@val
 10062  0FD6  0839               	movf	??_ManageProtocol+1,w
 10063  0FD7  00A8               	movwf	utoa@val+1
 10064  0FD8  300A               	movlw	10
 10065  0FD9  00A9               	movwf	utoa@base
 10066  0FDA  3000               	movlw	0
 10067  0FDB  00AA               	movwf	utoa@base+1
 10068  0FDC  306D               	movlw	(low (_IrSens2Str| 0))& (0+255)
 10069  0FDD  3187  2782  318F   	fcall	_utoa
 10070                           
 10071                           ;sb320_app.c: 144: RepBuffer[((UINT8)(0))] = IrSens2Str;
 10072  0FE0  0020               	movlb	0	; select bank0
 10073  0FE1  086D               	movf	_IrSens2Str,w
 10074  0FE2  00B8               	movwf	??_ManageProtocol
 10075  0FE3  0838               	movf	??_ManageProtocol,w
 10076  0FE4  0023               	movlb	3	; select bank3
 10077  0FE5  00A0               	movwf	_RepBuffer^(0+384)
 10078                           
 10079                           ;sb320_app.c: 145: RepBuffer[((UINT8)(1))] = IrSens1Str;
 10080  0FE6  0020               	movlb	0	; select bank0
 10081  0FE7  086C               	movf	_IrSens1Str,w
 10082  0FE8  00B8               	movwf	??_ManageProtocol
 10083  0FE9  0838               	movf	??_ManageProtocol,w
 10084  0FEA  0023               	movlb	3	; select bank3
 10085  0FEB  00A1               	movwf	(_RepBuffer^(0+384)+1)
 10086                           
 10087                           ;sb320_app.c: 147: RepBufferLen = ((UINT8)(2));
 10088  0FEC  3002               	movlw	2
 10089  0FED  0020               	movlb	0	; select bank0
 10090  0FEE  00B8               	movwf	??_ManageProtocol
 10091  0FEF  0838               	movf	??_ManageProtocol,w
 10092  0FF0  00F7               	movwf	_RepBufferLen
 10093                           
 10094                           ;sb320_app.c: 149: GenerateEvt(&I2cReplyPacketReady);
 10095  0FF1  3068               	movlw	(low (_I2cReplyPacketReady| 0))& (0+255)
 10096  0FF2  318B  23C4         	fcall	_GenerateEvt
 10097                           
 10098                           ;sb320_app.c: 154: }
 10099                           
 10100                           ;sb320_app.c: 153: break;
 10101                           
 10102                           ;sb320_app.c: 152: default:
 10103                           
 10104                           ;sb320_app.c: 150: break;
 10105  0FF4  0008               	return
 10106  0FF5                     l3929:	
 10107  0FF5  0024               	movlb	4	; select bank4
 10108  0FF6  0820               	movf	_CmdBuffer^(0+512),w
 10109                           
 10110                           ; Switch size 1, requested type "space"
 10111                           ; Number of cases is 2, Range of values is 96 to 97
 10112                           ; switch strategies available:
 10113                           ; Name         Instructions Cycles
 10114                           ; simple_byte            7     4 (average)
 10115                           ; direct_byte           13     9 (fixed)
 10116                           ; jumptable            263     9 (fixed)
 10117                           ;	Chosen strategy is simple_byte
 10118  0FF7  3A60               	xorlw	96	; case 96
 10119  0FF8  1903               	skipnz
 10120  0FF9  2FB3               	goto	l3911
 10121  0FFA  3A01               	xorlw	1	; case 97
 10122  0FFB  1903               	skipnz
 10123  0FFC  2FC0               	goto	l3917
 10124  0FFD  2FFF               	goto	l895
 10125  0FFE  0008               	return
 10126  0FFF                     l895:	
 10127  0FFF  0008               	return
 10128  1000                     __end_of_ManageProtocol:	
 10129                           
 10130                           	psect	text47
 10131  0199                     __ptext47:	
 10132 ;; *************** function _StdS_ManageStdServices *****************
 10133 ;; Defined at:
 10134 ;;		line 212 in file "../../../Framework/MercuryFwk/Source/c/03_Sml/02_Ssl/std_ser.c"
 10135 ;; Parameters:    Size  Location     Type
 10136 ;;		None
 10137 ;; Auto vars:     Size  Location     Type
 10138 ;;  DieTempStr      4   18[BANK0 ] unsigned char [4]
 10139 ;;  DieTemp         2   22[BANK0 ] unsigned short 
 10140 ;; Return value:  Size  Location     Type
 10141 ;;                  1    wreg      void 
 10142 ;; Registers used:
 10143 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10144 ;; Tracked objects:
 10145 ;;		On entry : 0/0
 10146 ;;		On exit  : 0/0
 10147 ;;		Unchanged: 0/0
 10148 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10149 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10150 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10151 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10152 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10153 ;;Total ram usage:        8 bytes
 10154 ;; Hardware stack levels used:    1
 10155 ;; Hardware stack levels required when called:    4
 10156 ;; This function calls:
 10157 ;;		_BoardReset
 10158 ;;		_ControlLedDirect
 10159 ;;		_GenerateEvt
 10160 ;;		_GetDieTemperature
 10161 ;;		_LowPowerMode
 10162 ;;		_SetLedBehavSts
 10163 ;;		_StringCopy
 10164 ;;		_utoa
 10165 ;; This function is called by:
 10166 ;;		_ManageProtocol
 10167 ;; This function uses a non-reentrant model
 10168 ;;
 10169                           
 10170                           
 10171                           ;psect for function _StdS_ManageStdServices
 10172  0199                     _StdS_ManageStdServices:	
 10173                           
 10174                           ;std_ser.c: 214: UINT16 DieTemp;
 10175                           ;std_ser.c: 215: UINT8 DieTempStr[4];
 10176                           ;std_ser.c: 218: switch (CmdBuffer[((UINT8)(0))])
 10177                           
 10178                           ;incstack = 0
 10179                           ; Regs used in _StdS_ManageStdServices: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 10180  0199  2A65               	goto	l3813
 10181  019A                     l3757:	
 10182                           ;std_ser.c: 219: {
 10183                           ;std_ser.c: 220: case ((UINT8)(0x10)):
 10184                           
 10185                           
 10186                           ;std_ser.c: 222: StringCopy((void*)("ECHO"),RepBuffer,((UINT8)(4)));
 10187  019A  302C               	movlw	low (STR_2| (0+32768))
 10188  019B  0020               	movlb	0	; select bank0
 10189  019C  00A0               	movwf	StringCopy@SourceStr
 10190  019D  3090               	movlw	high (STR_2| (0+32768))
 10191  019E  00A1               	movwf	StringCopy@SourceStr+1
 10192  019F  30A0               	movlw	(low (_RepBuffer| (0+256)))& (0+255)
 10193  01A0  00B0               	movwf	??_StdS_ManageStdServices
 10194  01A1  0830               	movf	??_StdS_ManageStdServices,w
 10195  01A2  00A2               	movwf	StringCopy@DestStr
 10196  01A3  3004               	movlw	4
 10197  01A4  00B1               	movwf	??_StdS_ManageStdServices+1
 10198  01A5  0831               	movf	??_StdS_ManageStdServices+1,w
 10199  01A6  00A3               	movwf	StringCopy@Len
 10200  01A7  318B  23E6  3181   	fcall	_StringCopy
 10201                           
 10202                           ;std_ser.c: 224: RepBufferLen = ((UINT8)(4));
 10203  01AA  3004               	movlw	4
 10204  01AB  0020               	movlb	0	; select bank0
 10205  01AC  00B0               	movwf	??_StdS_ManageStdServices
 10206  01AD  0830               	movf	??_StdS_ManageStdServices,w
 10207  01AE  00F7               	movwf	_RepBufferLen
 10208                           
 10209                           ;std_ser.c: 226: GenerateEvt(&I2cReplyPacketReady);
 10210  01AF  3068               	movlw	(low (_I2cReplyPacketReady| 0))& (0+255)
 10211  01B0  318B  23C4         	fcall	_GenerateEvt
 10212                           
 10213                           ;std_ser.c: 227: break;
 10214  01B2  0008               	return
 10215  01B3                     l3763:	
 10216                           ;std_ser.c: 229: case ((UINT8)(0x20)):
 10217                           
 10218                           
 10219                           ;std_ser.c: 231: StringCopy((void*)"SB320",RepBuffer,((UINT8)(5)));
 10220  01B3  3026               	movlw	low (STR_3| (0+32768))
 10221  01B4  0020               	movlb	0	; select bank0
 10222  01B5  00A0               	movwf	StringCopy@SourceStr
 10223  01B6  3090               	movlw	high (STR_3| (0+32768))
 10224  01B7  00A1               	movwf	StringCopy@SourceStr+1
 10225  01B8  30A0               	movlw	(low (_RepBuffer| (0+256)))& (0+255)
 10226  01B9  00B0               	movwf	??_StdS_ManageStdServices
 10227  01BA  0830               	movf	??_StdS_ManageStdServices,w
 10228  01BB  00A2               	movwf	StringCopy@DestStr
 10229  01BC  3005               	movlw	5
 10230  01BD  00B1               	movwf	??_StdS_ManageStdServices+1
 10231  01BE  0831               	movf	??_StdS_ManageStdServices+1,w
 10232  01BF  00A3               	movwf	StringCopy@Len
 10233  01C0  318B  23E6  3181   	fcall	_StringCopy
 10234                           
 10235                           ;std_ser.c: 233: RepBufferLen = ((UINT8)(5));
 10236  01C3  3005               	movlw	5
 10237  01C4  0020               	movlb	0	; select bank0
 10238  01C5  00B0               	movwf	??_StdS_ManageStdServices
 10239  01C6  0830               	movf	??_StdS_ManageStdServices,w
 10240  01C7  00F7               	movwf	_RepBufferLen
 10241                           
 10242                           ;std_ser.c: 235: GenerateEvt(&I2cReplyPacketReady);
 10243  01C8  3068               	movlw	(low (_I2cReplyPacketReady| 0))& (0+255)
 10244  01C9  318B  23C4         	fcall	_GenerateEvt
 10245                           
 10246                           ;std_ser.c: 236: break;
 10247  01CB  0008               	return
 10248  01CC                     l3769:	
 10249                           ;std_ser.c: 238: case ((UINT8)(0x21)):
 10250                           
 10251                           
 10252                           ;std_ser.c: 240: StringCopy((void*)"01.01.00",RepBuffer,((UINT8)(8)));
 10253  01CC  300C               	movlw	low (STR_4| (0+32768))
 10254  01CD  0020               	movlb	0	; select bank0
 10255  01CE  00A0               	movwf	StringCopy@SourceStr
 10256  01CF  3090               	movlw	high (STR_4| (0+32768))
 10257  01D0  00A1               	movwf	StringCopy@SourceStr+1
 10258  01D1  30A0               	movlw	(low (_RepBuffer| (0+256)))& (0+255)
 10259  01D2  00B0               	movwf	??_StdS_ManageStdServices
 10260  01D3  0830               	movf	??_StdS_ManageStdServices,w
 10261  01D4  00A2               	movwf	StringCopy@DestStr
 10262  01D5  3008               	movlw	8
 10263  01D6  00B1               	movwf	??_StdS_ManageStdServices+1
 10264  01D7  0831               	movf	??_StdS_ManageStdServices+1,w
 10265  01D8  00A3               	movwf	StringCopy@Len
 10266  01D9  318B  23E6  3181   	fcall	_StringCopy
 10267                           
 10268                           ;std_ser.c: 242: RepBufferLen = ((UINT8)(8));
 10269  01DC  3008               	movlw	8
 10270  01DD  0020               	movlb	0	; select bank0
 10271  01DE  00B0               	movwf	??_StdS_ManageStdServices
 10272  01DF  0830               	movf	??_StdS_ManageStdServices,w
 10273  01E0  00F7               	movwf	_RepBufferLen
 10274                           
 10275                           ;std_ser.c: 244: GenerateEvt(&I2cReplyPacketReady);
 10276  01E1  3068               	movlw	(low (_I2cReplyPacketReady| 0))& (0+255)
 10277  01E2  318B  23C4         	fcall	_GenerateEvt
 10278                           
 10279                           ;std_ser.c: 245: break;
 10280  01E4  0008               	return
 10281  01E5                     l3775:	
 10282                           ;std_ser.c: 247: case ((UINT8)(0x22)):
 10283                           
 10284                           
 10285                           ;std_ser.c: 249: StringCopy((void*)"01.02.00",RepBuffer,((UINT8)(8)));
 10286  01E5  3015               	movlw	low (STR_5| (0+32768))
 10287  01E6  0020               	movlb	0	; select bank0
 10288  01E7  00A0               	movwf	StringCopy@SourceStr
 10289  01E8  3090               	movlw	high (STR_5| (0+32768))
 10290  01E9  00A1               	movwf	StringCopy@SourceStr+1
 10291  01EA  30A0               	movlw	(low (_RepBuffer| (0+256)))& (0+255)
 10292  01EB  00B0               	movwf	??_StdS_ManageStdServices
 10293  01EC  0830               	movf	??_StdS_ManageStdServices,w
 10294  01ED  00A2               	movwf	StringCopy@DestStr
 10295  01EE  3008               	movlw	8
 10296  01EF  00B1               	movwf	??_StdS_ManageStdServices+1
 10297  01F0  0831               	movf	??_StdS_ManageStdServices+1,w
 10298  01F1  00A3               	movwf	StringCopy@Len
 10299  01F2  318B  23E6  3181   	fcall	_StringCopy
 10300                           
 10301                           ;std_ser.c: 251: RepBufferLen = ((UINT8)(8));
 10302  01F5  3008               	movlw	8
 10303  01F6  0020               	movlb	0	; select bank0
 10304  01F7  00B0               	movwf	??_StdS_ManageStdServices
 10305  01F8  0830               	movf	??_StdS_ManageStdServices,w
 10306  01F9  00F7               	movwf	_RepBufferLen
 10307                           
 10308                           ;std_ser.c: 253: GenerateEvt(&I2cReplyPacketReady);
 10309  01FA  3068               	movlw	(low (_I2cReplyPacketReady| 0))& (0+255)
 10310  01FB  318B  23C4         	fcall	_GenerateEvt
 10311                           
 10312                           ;std_ser.c: 255: break;
 10313  01FD  0008               	return
 10314  01FE                     l3781:	
 10315                           ;std_ser.c: 257: case ((UINT8)(0x30)):
 10316                           
 10317                           
 10318                           ;std_ser.c: 259: BoardReset();
 10319  01FE  3189  2194         	fcall	_BoardReset
 10320                           
 10321                           ;std_ser.c: 260: break;
 10322  0200  0008               	return
 10323  0201                     l3783:	
 10324                           ;std_ser.c: 262: case ((UINT8)(0x31)):
 10325                           
 10326                           
 10327                           ;std_ser.c: 264: LowPowerMode();
 10328  0201  318A  2224         	fcall	_LowPowerMode
 10329                           
 10330                           ;std_ser.c: 265: break;
 10331  0203  0008               	return
 10332  0204                     l3785:	
 10333                           ;std_ser.c: 267: case ((UINT8)(0x41)):
 10334                           
 10335                           
 10336                           ;std_ser.c: 269: SetLedBehavSts(CmdBuffer[((UINT8)(1))]);
 10337  0204  0024               	movlb	4	; select bank4
 10338  0205  0821               	movf	(_CmdBuffer^(0+512)+1),w
 10339  0206  318D  25E1         	fcall	_SetLedBehavSts
 10340                           
 10341                           ;std_ser.c: 270: break;
 10342  0208  0008               	return
 10343  0209                     l3787:	
 10344                           ;std_ser.c: 272: case ((UINT8)(0x42)):
 10345                           
 10346                           
 10347                           ;std_ser.c: 274: ControlLedDirect();
 10348  0209  318A  22B3         	fcall	_ControlLedDirect
 10349                           
 10350                           ;std_ser.c: 275: break;
 10351  020B  0008               	return
 10352  020C                     l3789:	
 10353                           ;std_ser.c: 277: case ((UINT8)(0x45)):
 10354                           
 10355                           
 10356                           ;std_ser.c: 279: DieTemp = GetDieTemperature();
 10357  020C  318B  2333  3181   	fcall	_GetDieTemperature
 10358  020F  0020               	movlb	0	; select bank0
 10359  0210  0824               	movf	?_GetDieTemperature+1,w
 10360  0211  00B7               	movwf	StdS_ManageStdServices@DieTemp+1
 10361  0212  0823               	movf	?_GetDieTemperature,w
 10362  0213  00B6               	movwf	StdS_ManageStdServices@DieTemp
 10363                           
 10364                           ;std_ser.c: 281: RepBuffer[0] = ((DieTemp & 0xFF00) >> 8);
 10365  0214  0837               	movf	StdS_ManageStdServices@DieTemp+1,w
 10366  0215  00B0               	movwf	??_StdS_ManageStdServices
 10367  0216  0830               	movf	??_StdS_ManageStdServices,w
 10368  0217  0023               	movlb	3	; select bank3
 10369  0218  00A0               	movwf	_RepBuffer^(0+384)
 10370                           
 10371                           ;std_ser.c: 282: RepBuffer[1] = (DieTemp & 0x00FF);
 10372  0219  0020               	movlb	0	; select bank0
 10373  021A  0836               	movf	StdS_ManageStdServices@DieTemp,w
 10374  021B  00B0               	movwf	??_StdS_ManageStdServices
 10375  021C  0830               	movf	??_StdS_ManageStdServices,w
 10376  021D  0023               	movlb	3	; select bank3
 10377  021E  00A1               	movwf	(_RepBuffer^(0+384)+1)
 10378                           
 10379                           ;std_ser.c: 284: RepBufferLen = ((UINT8)(2));
 10380  021F  3002               	movlw	2
 10381  0220  0020               	movlb	0	; select bank0
 10382  0221  00B0               	movwf	??_StdS_ManageStdServices
 10383  0222  0830               	movf	??_StdS_ManageStdServices,w
 10384  0223  00F7               	movwf	_RepBufferLen
 10385                           
 10386                           ;std_ser.c: 286: GenerateEvt(&I2cReplyPacketReady);
 10387  0224  3068               	movlw	(low (_I2cReplyPacketReady| 0))& (0+255)
 10388  0225  318B  23C4         	fcall	_GenerateEvt
 10389                           
 10390                           ;std_ser.c: 287: break;
 10391  0227  0008               	return
 10392  0228                     l3799:	
 10393                           ;std_ser.c: 289: case ((UINT8)(0x46)):
 10394                           
 10395                           
 10396                           ;std_ser.c: 291: DieTemp = GetDieTemperature();
 10397  0228  318B  2333  3181   	fcall	_GetDieTemperature
 10398  022B  0020               	movlb	0	; select bank0
 10399  022C  0824               	movf	?_GetDieTemperature+1,w
 10400  022D  00B7               	movwf	StdS_ManageStdServices@DieTemp+1
 10401  022E  0823               	movf	?_GetDieTemperature,w
 10402  022F  00B6               	movwf	StdS_ManageStdServices@DieTemp
 10403                           
 10404                           ;std_ser.c: 293: DieTemp = (DieTemp/8) - 40;
 10405  0230  0837               	movf	StdS_ManageStdServices@DieTemp+1,w
 10406  0231  00B1               	movwf	??_StdS_ManageStdServices+1
 10407  0232  0836               	movf	StdS_ManageStdServices@DieTemp,w
 10408  0233  00B0               	movwf	??_StdS_ManageStdServices
 10409  0234  36B1               	lsrf	??_StdS_ManageStdServices+1,f
 10410  0235  0CB0               	rrf	??_StdS_ManageStdServices,f
 10411  0236  36B1               	lsrf	??_StdS_ManageStdServices+1,f
 10412  0237  0CB0               	rrf	??_StdS_ManageStdServices,f
 10413  0238  36B1               	lsrf	??_StdS_ManageStdServices+1,f
 10414  0239  0CB0               	rrf	??_StdS_ManageStdServices,f
 10415  023A  0830               	movf	??_StdS_ManageStdServices,w
 10416  023B  3ED8               	addlw	216
 10417  023C  00B6               	movwf	StdS_ManageStdServices@DieTemp
 10418  023D  30FF               	movlw	255
 10419  023E  3D31               	addwfc	??_StdS_ManageStdServices+1,w
 10420  023F  00B7               	movwf	StdS_ManageStdServices@DieTemp+1
 10421                           
 10422                           ;std_ser.c: 295: utoa(DieTempStr,DieTemp,10);
 10423  0240  0837               	movf	StdS_ManageStdServices@DieTemp+1,w
 10424  0241  00A8               	movwf	utoa@val+1
 10425  0242  0836               	movf	StdS_ManageStdServices@DieTemp,w
 10426  0243  00A7               	movwf	utoa@val
 10427  0244  300A               	movlw	10
 10428  0245  00A9               	movwf	utoa@base
 10429  0246  3000               	movlw	0
 10430  0247  00AA               	movwf	utoa@base+1
 10431  0248  3032               	movlw	(low (StdS_ManageStdServices@DieTempStr| 0))& (0+255)
 10432  0249  3187  2782  3181   	fcall	_utoa
 10433                           
 10434                           ;std_ser.c: 297: StringCopy(DieTempStr,RepBuffer,((UINT8)(2)));
 10435  024C  3032               	movlw	low StdS_ManageStdServices@DieTempStr
 10436  024D  0020               	movlb	0	; select bank0
 10437  024E  00A0               	movwf	StringCopy@SourceStr
 10438  024F  3000               	movlw	high StdS_ManageStdServices@DieTempStr
 10439  0250  00A1               	movwf	StringCopy@SourceStr+1
 10440  0251  30A0               	movlw	(low (_RepBuffer| (0+256)))& (0+255)
 10441  0252  00B0               	movwf	??_StdS_ManageStdServices
 10442  0253  0830               	movf	??_StdS_ManageStdServices,w
 10443  0254  00A2               	movwf	StringCopy@DestStr
 10444  0255  3002               	movlw	2
 10445  0256  00B1               	movwf	??_StdS_ManageStdServices+1
 10446  0257  0831               	movf	??_StdS_ManageStdServices+1,w
 10447  0258  00A3               	movwf	StringCopy@Len
 10448  0259  318B  23E6  3181   	fcall	_StringCopy
 10449                           
 10450                           ;std_ser.c: 299: RepBufferLen = ((UINT8)(2));
 10451  025C  3002               	movlw	2
 10452  025D  0020               	movlb	0	; select bank0
 10453  025E  00B0               	movwf	??_StdS_ManageStdServices
 10454  025F  0830               	movf	??_StdS_ManageStdServices,w
 10455  0260  00F7               	movwf	_RepBufferLen
 10456                           
 10457                           ;std_ser.c: 301: GenerateEvt(&I2cReplyPacketReady);
 10458  0261  3068               	movlw	(low (_I2cReplyPacketReady| 0))& (0+255)
 10459  0262  318B  23C4         	fcall	_GenerateEvt
 10460                           
 10461                           ;std_ser.c: 306: }
 10462                           
 10463                           ;std_ser.c: 305: break;
 10464                           
 10465                           ;std_ser.c: 304: default:
 10466                           
 10467                           ;std_ser.c: 302: break;
 10468  0264  0008               	return
 10469  0265                     l3813:	
 10470  0265  0024               	movlb	4	; select bank4
 10471  0266  0820               	movf	_CmdBuffer^(0+512),w
 10472                           
 10473                           ; Switch size 1, requested type "space"
 10474                           ; Number of cases is 10, Range of values is 16 to 70
 10475                           ; switch strategies available:
 10476                           ; Name         Instructions Cycles
 10477                           ; simple_byte           31    16 (average)
 10478                           ; direct_byte          119     9 (fixed)
 10479                           ; jumptable            263     9 (fixed)
 10480                           ;	Chosen strategy is simple_byte
 10481  0267  3A10               	xorlw	16	; case 16
 10482  0268  1903               	skipnz
 10483  0269  299A               	goto	l3757
 10484  026A  3A30               	xorlw	48	; case 32
 10485  026B  1903               	skipnz
 10486  026C  29B3               	goto	l3763
 10487  026D  3A01               	xorlw	1	; case 33
 10488  026E  1903               	skipnz
 10489  026F  29CC               	goto	l3769
 10490  0270  3A03               	xorlw	3	; case 34
 10491  0271  1903               	skipnz
 10492  0272  29E5               	goto	l3775
 10493  0273  3A12               	xorlw	18	; case 48
 10494  0274  1903               	skipnz
 10495  0275  29FE               	goto	l3781
 10496  0276  3A01               	xorlw	1	; case 49
 10497  0277  1903               	skipnz
 10498  0278  2A01               	goto	l3783
 10499  0279  3A70               	xorlw	112	; case 65
 10500  027A  1903               	skipnz
 10501  027B  2A04               	goto	l3785
 10502  027C  3A03               	xorlw	3	; case 66
 10503  027D  1903               	skipnz
 10504  027E  2A09               	goto	l3787
 10505  027F  3A07               	xorlw	7	; case 69
 10506  0280  1903               	skipnz
 10507  0281  2A0C               	goto	l3789
 10508  0282  3A03               	xorlw	3	; case 70
 10509  0283  1903               	skipnz
 10510  0284  2A28               	goto	l3799
 10511  0285  2A86               	goto	l782
 10512  0286                     l782:	
 10513  0286  0008               	return
 10514  0287                     __end_of_StdS_ManageStdServices:	
 10515                           
 10516                           	psect	text48
 10517  0782                     __ptext48:	
 10518 ;; *************** function _utoa *****************
 10519 ;; Defined at:
 10520 ;;		line 17 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\itoa.c"
 10521 ;; Parameters:    Size  Location     Type
 10522 ;;  buf             1    wreg     PTR unsigned char 
 10523 ;;		 -> IrSens2Str(1), IrSens1Str(1), StdS_ManageStdServices@DieTempStr(4), 
 10524 ;;  val             2    7[BANK0 ] unsigned int 
 10525 ;;  base            2    9[BANK0 ] int 
 10526 ;; Auto vars:     Size  Location     Type
 10527 ;;  buf             1   15[BANK0 ] PTR unsigned char 
 10528 ;;		 -> IrSens2Str(1), IrSens1Str(1), StdS_ManageStdServices@DieTempStr(4), 
 10529 ;;  v               2   12[BANK0 ] unsigned int 
 10530 ;;  c               1   14[BANK0 ] unsigned char 
 10531 ;; Return value:  Size  Location     Type
 10532 ;;                  1    wreg      PTR unsigned char 
 10533 ;; Registers used:
 10534 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10535 ;; Tracked objects:
 10536 ;;		On entry : 0/0
 10537 ;;		On exit  : 0/0
 10538 ;;		Unchanged: 0/0
 10539 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10540 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10541 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10542 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10543 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10544 ;;Total ram usage:        9 bytes
 10545 ;; Hardware stack levels used:    1
 10546 ;; Hardware stack levels required when called:    3
 10547 ;; This function calls:
 10548 ;;		___lwdiv
 10549 ;;		___lwmod
 10550 ;; This function is called by:
 10551 ;;		_StdS_ManageStdServices
 10552 ;;		_ManageProtocol
 10553 ;; This function uses a non-reentrant model
 10554 ;;
 10555                           
 10556                           
 10557                           ;psect for function _utoa
 10558  0782                     _utoa:	
 10559                           
 10560                           ;incstack = 0
 10561                           ; Regs used in _utoa: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 10562                           ;utoa@buf stored from wreg
 10563  0782  0020               	movlb	0	; select bank0
 10564  0783  00AF               	movwf	utoa@buf
 10565  0784  0828               	movf	utoa@val+1,w
 10566  0785  00AD               	movwf	utoa@v+1
 10567  0786  0827               	movf	utoa@val,w
 10568  0787  00AC               	movwf	utoa@v
 10569  0788                     l3709:	
 10570  0788  082A               	movf	utoa@base+1,w
 10571  0789  00A1               	movwf	___lwdiv@divisor+1
 10572  078A  0829               	movf	utoa@base,w
 10573  078B  00A0               	movwf	___lwdiv@divisor
 10574  078C  082D               	movf	utoa@v+1,w
 10575  078D  00A3               	movwf	___lwdiv@dividend+1
 10576  078E  082C               	movf	utoa@v,w
 10577  078F  00A2               	movwf	___lwdiv@dividend
 10578  0790  318D  2575  3187   	fcall	___lwdiv
 10579  0793  0020               	movlb	0	; select bank0
 10580  0794  0821               	movf	?___lwdiv+1,w
 10581  0795  00AD               	movwf	utoa@v+1
 10582  0796  0820               	movf	?___lwdiv,w
 10583  0797  00AC               	movwf	utoa@v
 10584  0798  3001               	movlw	1
 10585  0799  00AB               	movwf	??_utoa
 10586  079A  082B               	movf	??_utoa,w
 10587  079B  07AF               	addwf	utoa@buf,f
 10588  079C  082C               	movf	utoa@v,w
 10589  079D  042D               	iorwf	utoa@v+1,w
 10590  079E  1D03               	btfss	3,2
 10591  079F  2F88               	goto	l3709
 10592  07A0  082F               	movf	utoa@buf,w
 10593  07A1  0086               	movwf	6
 10594  07A2  0187               	clrf	7
 10595  07A3  0181               	clrf	1
 10596  07A4  3001               	movlw	1
 10597  07A5  02AF               	subwf	utoa@buf,f
 10598  07A6                     l3719:	
 10599  07A6  082A               	movf	utoa@base+1,w
 10600  07A7  00A1               	movwf	___lwmod@divisor+1
 10601  07A8  0829               	movf	utoa@base,w
 10602  07A9  00A0               	movwf	___lwmod@divisor
 10603  07AA  0828               	movf	utoa@val+1,w
 10604  07AB  00A3               	movwf	___lwmod@dividend+1
 10605  07AC  0827               	movf	utoa@val,w
 10606  07AD  00A2               	movwf	___lwmod@dividend
 10607  07AE  318C  2483  3187   	fcall	___lwmod
 10608  07B1  0020               	movlb	0	; select bank0
 10609  07B2  0820               	movf	?___lwmod,w
 10610  07B3  00AB               	movwf	??_utoa
 10611  07B4  082B               	movf	??_utoa,w
 10612  07B5  00AE               	movwf	utoa@c
 10613  07B6  082A               	movf	utoa@base+1,w
 10614  07B7  00A1               	movwf	___lwdiv@divisor+1
 10615  07B8  0829               	movf	utoa@base,w
 10616  07B9  00A0               	movwf	___lwdiv@divisor
 10617  07BA  0828               	movf	utoa@val+1,w
 10618  07BB  00A3               	movwf	___lwdiv@dividend+1
 10619  07BC  0827               	movf	utoa@val,w
 10620  07BD  00A2               	movwf	___lwdiv@dividend
 10621  07BE  318D  2575  3187   	fcall	___lwdiv
 10622  07C1  0020               	movlb	0	; select bank0
 10623  07C2  0821               	movf	?___lwdiv+1,w
 10624  07C3  00A8               	movwf	utoa@val+1
 10625  07C4  0820               	movf	?___lwdiv,w
 10626  07C5  00A7               	movwf	utoa@val
 10627  07C6  300A               	movlw	10
 10628  07C7  022E               	subwf	utoa@c,w
 10629  07C8  1C03               	skipc
 10630  07C9  2FCE               	goto	l1336
 10631  07CA  3007               	movlw	7
 10632  07CB  00AB               	movwf	??_utoa
 10633  07CC  082B               	movf	??_utoa,w
 10634  07CD  07AE               	addwf	utoa@c,f
 10635  07CE                     l1336:	
 10636  07CE  3030               	movlw	48
 10637  07CF  00AB               	movwf	??_utoa
 10638  07D0  082B               	movf	??_utoa,w
 10639  07D1  07AE               	addwf	utoa@c,f
 10640  07D2  082E               	movf	utoa@c,w
 10641  07D3  00AB               	movwf	??_utoa
 10642  07D4  082F               	movf	utoa@buf,w
 10643  07D5  0086               	movwf	6
 10644  07D6  0187               	clrf	7
 10645  07D7  082B               	movf	??_utoa,w
 10646  07D8  0081               	movwf	1
 10647  07D9  3001               	movlw	1
 10648  07DA  02AF               	subwf	utoa@buf,f
 10649  07DB  0827               	movf	utoa@val,w
 10650  07DC  0428               	iorwf	utoa@val+1,w
 10651  07DD  1D03               	btfss	3,2
 10652  07DE  2FA6               	goto	l3719
 10653                           
 10654                           ;	Return value of _utoa is never used
 10655  07DF  3001               	movlw	1
 10656  07E0  00AB               	movwf	??_utoa
 10657  07E1  082B               	movf	??_utoa,w
 10658  07E2  07AF               	addwf	utoa@buf,f
 10659  07E3  0008               	return
 10660  07E4                     __end_of_utoa:	
 10661                           
 10662                           	psect	text49
 10663  0C83                     __ptext49:	
 10664 ;; *************** function ___lwmod *****************
 10665 ;; Defined at:
 10666 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\lwmod.c"
 10667 ;; Parameters:    Size  Location     Type
 10668 ;;  divisor         2    0[BANK0 ] unsigned int 
 10669 ;;  dividend        2    2[BANK0 ] unsigned int 
 10670 ;; Auto vars:     Size  Location     Type
 10671 ;;  counter         1    5[COMMON] unsigned char 
 10672 ;; Return value:  Size  Location     Type
 10673 ;;                  2    0[BANK0 ] unsigned int 
 10674 ;; Registers used:
 10675 ;;		wreg, status,2, status,0
 10676 ;; Tracked objects:
 10677 ;;		On entry : 0/0
 10678 ;;		On exit  : 0/0
 10679 ;;		Unchanged: 0/0
 10680 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10681 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10682 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10683 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10684 ;;      Totals:         2       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10685 ;;Total ram usage:        6 bytes
 10686 ;; Hardware stack levels used:    1
 10687 ;; Hardware stack levels required when called:    2
 10688 ;; This function calls:
 10689 ;;		Nothing
 10690 ;; This function is called by:
 10691 ;;		_utoa
 10692 ;; This function uses a non-reentrant model
 10693 ;;
 10694                           
 10695                           
 10696                           ;psect for function ___lwmod
 10697  0C83                     ___lwmod:	
 10698                           
 10699                           ;incstack = 0
 10700                           ; Regs used in ___lwmod: [wreg+status,2+status,0]
 10701  0C83  0020               	movlb	0	; select bank0
 10702  0C84  0820               	movf	___lwmod@divisor,w
 10703  0C85  0421               	iorwf	___lwmod@divisor+1,w
 10704  0C86  1903               	btfsc	3,2
 10705  0C87  2CAB               	goto	l3641
 10706  0C88  01F5               	clrf	___lwmod@counter
 10707  0C89  0AF5               	incf	___lwmod@counter,f
 10708  0C8A                     l3631:	
 10709  0C8A  1BA1               	btfsc	___lwmod@divisor+1,7
 10710  0C8B  2C96               	goto	l3633
 10711  0C8C  3001               	movlw	1
 10712  0C8D                     u2565:	
 10713  0C8D  35A0               	lslf	___lwmod@divisor,f
 10714  0C8E  0DA1               	rlf	___lwmod@divisor+1,f
 10715  0C8F  0B89               	decfsz	9,f
 10716  0C90  2C8D               	goto	u2565
 10717  0C91  3001               	movlw	1
 10718  0C92  00F4               	movwf	??___lwmod
 10719  0C93  0874               	movf	??___lwmod,w
 10720  0C94  07F5               	addwf	___lwmod@counter,f
 10721  0C95  2C8A               	goto	l3631
 10722  0C96                     l3633:	
 10723  0C96  0821               	movf	___lwmod@divisor+1,w
 10724  0C97  0223               	subwf	___lwmod@dividend+1,w
 10725  0C98  1D03               	skipz
 10726  0C99  2C9C               	goto	u2585
 10727  0C9A  0820               	movf	___lwmod@divisor,w
 10728  0C9B  0222               	subwf	___lwmod@dividend,w
 10729  0C9C                     u2585:	
 10730  0C9C  1C03               	skipc
 10731  0C9D  2CA2               	goto	l3637
 10732  0C9E  0820               	movf	___lwmod@divisor,w
 10733  0C9F  02A2               	subwf	___lwmod@dividend,f
 10734  0CA0  0821               	movf	___lwmod@divisor+1,w
 10735  0CA1  3BA3               	subwfb	___lwmod@dividend+1,f
 10736  0CA2                     l3637:	
 10737  0CA2  3001               	movlw	1
 10738  0CA3                     u2595:	
 10739  0CA3  36A1               	lsrf	___lwmod@divisor+1,f
 10740  0CA4  0CA0               	rrf	___lwmod@divisor,f
 10741  0CA5  0B89               	decfsz	9,f
 10742  0CA6  2CA3               	goto	u2595
 10743  0CA7  3001               	movlw	1
 10744  0CA8  02F5               	subwf	___lwmod@counter,f
 10745  0CA9  1D03               	btfss	3,2
 10746  0CAA  2C96               	goto	l3633
 10747  0CAB                     l3641:	
 10748  0CAB  0823               	movf	___lwmod@dividend+1,w
 10749  0CAC  00A1               	movwf	?___lwmod+1
 10750  0CAD  0822               	movf	___lwmod@dividend,w
 10751  0CAE  00A0               	movwf	?___lwmod
 10752  0CAF  0008               	return
 10753  0CB0                     __end_of___lwmod:	
 10754                           
 10755                           	psect	text50
 10756  0D75                     __ptext50:	
 10757 ;; *************** function ___lwdiv *****************
 10758 ;; Defined at:
 10759 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\lwdiv.c"
 10760 ;; Parameters:    Size  Location     Type
 10761 ;;  divisor         2    0[BANK0 ] unsigned int 
 10762 ;;  dividend        2    2[BANK0 ] unsigned int 
 10763 ;; Auto vars:     Size  Location     Type
 10764 ;;  quotient        2    5[BANK0 ] unsigned int 
 10765 ;;  counter         1    4[BANK0 ] unsigned char 
 10766 ;; Return value:  Size  Location     Type
 10767 ;;                  2    0[BANK0 ] unsigned int 
 10768 ;; Registers used:
 10769 ;;		wreg, status,2, status,0
 10770 ;; Tracked objects:
 10771 ;;		On entry : 0/0
 10772 ;;		On exit  : 0/0
 10773 ;;		Unchanged: 0/0
 10774 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10775 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10776 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10777 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10778 ;;      Totals:         1       7       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10779 ;;Total ram usage:        8 bytes
 10780 ;; Hardware stack levels used:    1
 10781 ;; Hardware stack levels required when called:    2
 10782 ;; This function calls:
 10783 ;;		Nothing
 10784 ;; This function is called by:
 10785 ;;		_LedBlinkStateMachine
 10786 ;;		_LedPulseStateMachine
 10787 ;;		_utoa
 10788 ;; This function uses a non-reentrant model
 10789 ;;
 10790                           
 10791                           
 10792                           ;psect for function ___lwdiv
 10793  0D75                     ___lwdiv:	
 10794                           
 10795                           ;incstack = 0
 10796                           ; Regs used in ___lwdiv: [wreg+status,2+status,0]
 10797  0D75  0020               	movlb	0	; select bank0
 10798  0D76  01A5               	clrf	___lwdiv@quotient
 10799  0D77  01A6               	clrf	___lwdiv@quotient+1
 10800  0D78  0820               	movf	___lwdiv@divisor,w
 10801  0D79  0421               	iorwf	___lwdiv@divisor+1,w
 10802  0D7A  1903               	btfsc	3,2
 10803  0D7B  2DA5               	goto	l3619
 10804  0D7C  01A4               	clrf	___lwdiv@counter
 10805  0D7D  0AA4               	incf	___lwdiv@counter,f
 10806  0D7E                     l3607:	
 10807  0D7E  1BA1               	btfsc	___lwdiv@divisor+1,7
 10808  0D7F  2D8A               	goto	l3609
 10809  0D80  3001               	movlw	1
 10810  0D81                     u2495:	
 10811  0D81  35A0               	lslf	___lwdiv@divisor,f
 10812  0D82  0DA1               	rlf	___lwdiv@divisor+1,f
 10813  0D83  0B89               	decfsz	9,f
 10814  0D84  2D81               	goto	u2495
 10815  0D85  3001               	movlw	1
 10816  0D86  00F4               	movwf	??___lwdiv
 10817  0D87  0874               	movf	??___lwdiv,w
 10818  0D88  07A4               	addwf	___lwdiv@counter,f
 10819  0D89  2D7E               	goto	l3607
 10820  0D8A                     l3609:	
 10821  0D8A  3001               	movlw	1
 10822  0D8B                     u2515:	
 10823  0D8B  35A5               	lslf	___lwdiv@quotient,f
 10824  0D8C  0DA6               	rlf	___lwdiv@quotient+1,f
 10825  0D8D  0B89               	decfsz	9,f
 10826  0D8E  2D8B               	goto	u2515
 10827  0D8F  0821               	movf	___lwdiv@divisor+1,w
 10828  0D90  0223               	subwf	___lwdiv@dividend+1,w
 10829  0D91  1D03               	skipz
 10830  0D92  2D95               	goto	u2525
 10831  0D93  0820               	movf	___lwdiv@divisor,w
 10832  0D94  0222               	subwf	___lwdiv@dividend,w
 10833  0D95                     u2525:	
 10834  0D95  1C03               	skipc
 10835  0D96  2D9C               	goto	l3615
 10836  0D97  0820               	movf	___lwdiv@divisor,w
 10837  0D98  02A2               	subwf	___lwdiv@dividend,f
 10838  0D99  0821               	movf	___lwdiv@divisor+1,w
 10839  0D9A  3BA3               	subwfb	___lwdiv@dividend+1,f
 10840  0D9B  1425               	bsf	___lwdiv@quotient,0
 10841  0D9C                     l3615:	
 10842  0D9C  3001               	movlw	1
 10843  0D9D                     u2535:	
 10844  0D9D  36A1               	lsrf	___lwdiv@divisor+1,f
 10845  0D9E  0CA0               	rrf	___lwdiv@divisor,f
 10846  0D9F  0B89               	decfsz	9,f
 10847  0DA0  2D9D               	goto	u2535
 10848  0DA1  3001               	movlw	1
 10849  0DA2  02A4               	subwf	___lwdiv@counter,f
 10850  0DA3  1D03               	btfss	3,2
 10851  0DA4  2D8A               	goto	l3609
 10852  0DA5                     l3619:	
 10853  0DA5  0826               	movf	___lwdiv@quotient+1,w
 10854  0DA6  00A1               	movwf	?___lwdiv+1
 10855  0DA7  0825               	movf	___lwdiv@quotient,w
 10856  0DA8  00A0               	movwf	?___lwdiv
 10857  0DA9  0008               	return
 10858  0DAA                     __end_of___lwdiv:	
 10859                           
 10860                           	psect	text51
 10861  0BE6                     __ptext51:	
 10862 ;; *************** function _StringCopy *****************
 10863 ;; Defined at:
 10864 ;;		line 104 in file "../../../Framework/MercuryFwk/Source/c/03_Sml/02_Ssl/sf.c"
 10865 ;; Parameters:    Size  Location     Type
 10866 ;;  SourceStr       2    0[BANK0 ] PTR unsigned char 
 10867 ;;		 -> StdS_ManageStdServices@DieTempStr(4), STR_5(9), STR_4(9), STR_3(6), 
 10868 ;;		 -> STR_2(5), 
 10869 ;;  DestStr         1    2[BANK0 ] PTR unsigned char 
 10870 ;;		 -> RepBuffer(80), 
 10871 ;;  Len             1    3[BANK0 ] unsigned char 
 10872 ;; Auto vars:     Size  Location     Type
 10873 ;;  Index           1    4[COMMON] unsigned char 
 10874 ;; Return value:  Size  Location     Type
 10875 ;;                  1    wreg      void 
 10876 ;; Registers used:
 10877 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath
 10878 ;; Tracked objects:
 10879 ;;		On entry : 0/0
 10880 ;;		On exit  : 0/0
 10881 ;;		Unchanged: 0/0
 10882 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10883 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10884 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10885 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10886 ;;      Totals:         1       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10887 ;;Total ram usage:        9 bytes
 10888 ;; Hardware stack levels used:    1
 10889 ;; Hardware stack levels required when called:    2
 10890 ;; This function calls:
 10891 ;;		Nothing
 10892 ;; This function is called by:
 10893 ;;		_StdS_ManageStdServices
 10894 ;; This function uses a non-reentrant model
 10895 ;;
 10896                           
 10897                           
 10898                           ;psect for function _StringCopy
 10899  0BE6                     _StringCopy:	
 10900                           
 10901                           ;sf.c: 106: UINT8 Index = 0;
 10902                           
 10903                           ;incstack = 0
 10904                           ; Regs used in _StringCopy: [wreg-fsr1h+status,2+status,0+pclath]
 10905  0BE6  01F4               	clrf	StringCopy@Index
 10906                           
 10907                           ;sf.c: 109: for (Index = 0; Index < Len; Index++)
 10908  0BE7  01F4               	clrf	StringCopy@Index
 10909  0BE8                     l3685:	
 10910  0BE8  0020               	movlb	0	; select bank0
 10911  0BE9  0823               	movf	StringCopy@Len,w
 10912  0BEA  0274               	subwf	StringCopy@Index,w
 10913  0BEB  1803               	btfsc	3,0
 10914  0BEC  0008               	return
 10915                           
 10916                           ;sf.c: 110: {
 10917                           ;sf.c: 111: DestStr[Index] = SourceStr[Index];
 10918  0BED  0020               	movlb	0	; select bank0
 10919  0BEE  0821               	movf	StringCopy@SourceStr+1,w
 10920  0BEF  00A5               	movwf	??_StringCopy+1
 10921  0BF0  0820               	movf	StringCopy@SourceStr,w
 10922  0BF1  00A4               	movwf	??_StringCopy
 10923  0BF2  0874               	movf	StringCopy@Index,w
 10924  0BF3  0724               	addwf	??_StringCopy,w
 10925  0BF4  0084               	movwf	4
 10926  0BF5  0825               	movf	??_StringCopy+1,w
 10927  0BF6  1803               	skipnc
 10928  0BF7  0A25               	incf	??_StringCopy+1,w
 10929  0BF8  0085               	movwf	5
 10930  0BF9  0800               	movf	0,w	;code access
 10931  0BFA  00A6               	movwf	??_StringCopy+2
 10932  0BFB  0874               	movf	StringCopy@Index,w
 10933  0BFC  0722               	addwf	StringCopy@DestStr,w
 10934  0BFD  00A7               	movwf	??_StringCopy+3
 10935  0BFE  0827               	movf	??_StringCopy+3,w
 10936  0BFF  0086               	movwf	6
 10937  0C00  3001               	movlw	1	; select bank2/3
 10938  0C01  0087               	movwf	7
 10939  0C02  0826               	movf	??_StringCopy+2,w
 10940  0C03  0081               	movwf	1
 10941  0C04  3001               	movlw	1
 10942  0C05  00A4               	movwf	??_StringCopy
 10943  0C06  0824               	movf	??_StringCopy,w
 10944  0C07  07F4               	addwf	StringCopy@Index,f
 10945  0C08  2BE8               	goto	l3685
 10946  0C09                     __end_of_StringCopy:	
 10947                           
 10948                           	psect	text52
 10949  0DE1                     __ptext52:	
 10950 ;; *************** function _SetLedBehavSts *****************
 10951 ;; Defined at:
 10952 ;;		line 76 in file "../../../Framework/MercuryFwk/Source/c/03_Sml/02_Ssl/std_ser.c"
 10953 ;; Parameters:    Size  Location     Type
 10954 ;;  LedBehav        1    wreg     unsigned char 
 10955 ;; Auto vars:     Size  Location     Type
 10956 ;;  LedBehav        1    5[BANK0 ] unsigned char 
 10957 ;; Return value:  Size  Location     Type
 10958 ;;                  1    wreg      void 
 10959 ;; Registers used:
 10960 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
 10961 ;; Tracked objects:
 10962 ;;		On entry : 0/0
 10963 ;;		On exit  : 0/0
 10964 ;;		Unchanged: 0/0
 10965 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10966 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10967 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10968 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10969 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10970 ;;Total ram usage:        2 bytes
 10971 ;; Hardware stack levels used:    1
 10972 ;; Hardware stack levels required when called:    3
 10973 ;; This function calls:
 10974 ;;		_Led_SetLedBlinkTime
 10975 ;;		_Led_SetLedPulseTime
 10976 ;;		_Led_SetLedStatus
 10977 ;; This function is called by:
 10978 ;;		_Led_MainTask
 10979 ;;		_StdS_ManageStdServices
 10980 ;; This function uses a non-reentrant model
 10981 ;;
 10982                           
 10983                           
 10984                           ;psect for function _SetLedBehavSts
 10985  0DE1                     _SetLedBehavSts:	
 10986                           
 10987                           ;incstack = 0
 10988                           ; Regs used in _SetLedBehavSts: [wreg-fsr0h+status,2+status,0+pclath+cstack]
 10989                           ;SetLedBehavSts@LedBehav stored from wreg
 10990  0DE1  0020               	movlb	0	; select bank0
 10991  0DE2  00A5               	movwf	SetLedBehavSts@LedBehav
 10992                           
 10993                           ;std_ser.c: 79: switch (LedBehav)
 10994  0DE3  2E14               	goto	l3677
 10995  0DE4                     l3661:	
 10996                           ;std_ser.c: 80: {
 10997                           ;std_ser.c: 81: case ((UINT8)(0)):
 10998                           
 10999                           
 11000                           ;std_ser.c: 83: Led_SetLedStatus(1u,LED_STS_OFF);
 11001  0DE4  01F4               	clrf	Led_SetLedStatus@LedSts
 11002  0DE5  3001               	movlw	1
 11003  0DE6  318A  2255         	fcall	_Led_SetLedStatus
 11004                           
 11005                           ;std_ser.c: 85: LedBehaviourSts = ((UINT8)(0));
 11006  0DE8  01F9               	clrf	_LedBehaviourSts
 11007                           
 11008                           ;std_ser.c: 86: break;
 11009  0DE9  0008               	return
 11010  0DEA                     l3665:	
 11011                           ;std_ser.c: 88: case ((UINT8)(1)):
 11012                           
 11013                           
 11014                           ;std_ser.c: 90: Led_SetLedPulseTime(1u,50);
 11015  0DEA  3032               	movlw	50
 11016  0DEB  00F4               	movwf	Led_SetLedPulseTime@PulseTimeMs
 11017  0DEC  3000               	movlw	0
 11018  0DED  00F5               	movwf	Led_SetLedPulseTime@PulseTimeMs+1
 11019  0DEE  3001               	movlw	1
 11020  0DEF  318A  2273         	fcall	_Led_SetLedPulseTime
 11021                           
 11022                           ;std_ser.c: 92: LedBehaviourSts = ((UINT8)(1));
 11023  0DF1  01F9               	clrf	_LedBehaviourSts
 11024  0DF2  0AF9               	incf	_LedBehaviourSts,f
 11025                           
 11026                           ;std_ser.c: 93: break;
 11027  0DF3  0008               	return
 11028  0DF4                     l3669:	
 11029                           ;std_ser.c: 95: case ((UINT8)(2)):
 11030                           
 11031                           
 11032                           ;std_ser.c: 97: Led_SetLedBlinkTime(1u,50,950);
 11033  0DF4  3032               	movlw	50
 11034  0DF5  0020               	movlb	0	; select bank0
 11035  0DF6  00A0               	movwf	Led_SetLedBlinkTime@OnTimeMs
 11036  0DF7  3000               	movlw	0
 11037  0DF8  00A1               	movwf	Led_SetLedBlinkTime@OnTimeMs+1
 11038  0DF9  30B6               	movlw	182
 11039  0DFA  00A2               	movwf	Led_SetLedBlinkTime@OffTimeMs
 11040  0DFB  3003               	movlw	3
 11041  0DFC  00A3               	movwf	Led_SetLedBlinkTime@OffTimeMs+1
 11042  0DFD  3001               	movlw	1
 11043  0DFE  318B  234C  318D   	fcall	_Led_SetLedBlinkTime
 11044                           
 11045                           ;std_ser.c: 99: Led_SetLedStatus(1u,LED_STS_BLINK);
 11046  0E01  3002               	movlw	2
 11047  0E02  0020               	movlb	0	; select bank0
 11048  0E03  00A4               	movwf	??_SetLedBehavSts
 11049  0E04  0824               	movf	??_SetLedBehavSts,w
 11050  0E05  00F4               	movwf	Led_SetLedStatus@LedSts
 11051  0E06  3001               	movlw	1
 11052  0E07  318A  2255         	fcall	_Led_SetLedStatus
 11053                           
 11054                           ;std_ser.c: 101: LedBehaviourSts = ((UINT8)(2));
 11055  0E09  3002               	movlw	2
 11056  0E0A  0020               	movlb	0	; select bank0
 11057  0E0B  00A4               	movwf	??_SetLedBehavSts
 11058  0E0C  0824               	movf	??_SetLedBehavSts,w
 11059  0E0D  00F9               	movwf	_LedBehaviourSts
 11060                           
 11061                           ;std_ser.c: 102: break;
 11062  0E0E  0008               	return
 11063  0E0F                     l3673:	
 11064                           ;std_ser.c: 104: case ((UINT8)(3)):
 11065                           
 11066                           
 11067                           ;std_ser.c: 106: LedBehaviourSts = ((UINT8)(3));
 11068  0E0F  3003               	movlw	3
 11069  0E10  00A4               	movwf	??_SetLedBehavSts
 11070  0E11  0824               	movf	??_SetLedBehavSts,w
 11071  0E12  00F9               	movwf	_LedBehaviourSts
 11072                           
 11073                           ;std_ser.c: 111: }
 11074                           
 11075                           ;std_ser.c: 110: break;
 11076                           
 11077                           ;std_ser.c: 109: default:
 11078                           
 11079                           ;std_ser.c: 107: break;
 11080  0E13  0008               	return
 11081  0E14                     l3677:	
 11082  0E14  0825               	movf	SetLedBehavSts@LedBehav,w
 11083                           
 11084                           ; Switch size 1, requested type "space"
 11085                           ; Number of cases is 4, Range of values is 0 to 3
 11086                           ; switch strategies available:
 11087                           ; Name         Instructions Cycles
 11088                           ; simple_byte           13     7 (average)
 11089                           ; direct_byte           14     6 (fixed)
 11090                           ; jumptable            260     6 (fixed)
 11091                           ;	Chosen strategy is simple_byte
 11092  0E15  3A00               	xorlw	0	; case 0
 11093  0E16  1903               	skipnz
 11094  0E17  2DE4               	goto	l3661
 11095  0E18  3A01               	xorlw	1	; case 1
 11096  0E19  1903               	skipnz
 11097  0E1A  2DEA               	goto	l3665
 11098  0E1B  3A03               	xorlw	3	; case 2
 11099  0E1C  1903               	skipnz
 11100  0E1D  2DF4               	goto	l3669
 11101  0E1E  3A01               	xorlw	1	; case 3
 11102  0E1F  1903               	skipnz
 11103  0E20  2E0F               	goto	l3673
 11104  0E21  2E22               	goto	l748
 11105  0E22                     l748:	
 11106  0E22  0008               	return
 11107  0E23                     __end_of_SetLedBehavSts:	
 11108                           
 11109                           	psect	text53
 11110  0A73                     __ptext53:	
 11111 ;; *************** function _Led_SetLedPulseTime *****************
 11112 ;; Defined at:
 11113 ;;		line 269 in file "../../../Framework/MercuryFwk/Source/c/03_Sml/02_Ssl/led.c"
 11114 ;; Parameters:    Size  Location     Type
 11115 ;;  Led             1    wreg     unsigned char 
 11116 ;;  PulseTimeMs     2    4[COMMON] unsigned short 
 11117 ;; Auto vars:     Size  Location     Type
 11118 ;;  Led             1    0[BANK0 ] unsigned char 
 11119 ;; Return value:  Size  Location     Type
 11120 ;;                  1    wreg      void 
 11121 ;; Registers used:
 11122 ;;		wreg, fsr0l, fsr0h, status,2, status,0
 11123 ;; Tracked objects:
 11124 ;;		On entry : 0/0
 11125 ;;		On exit  : 0/0
 11126 ;;		Unchanged: 0/0
 11127 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11128 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11129 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11130 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11131 ;;      Totals:         2       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11132 ;;Total ram usage:        3 bytes
 11133 ;; Hardware stack levels used:    1
 11134 ;; Hardware stack levels required when called:    2
 11135 ;; This function calls:
 11136 ;;		Nothing
 11137 ;; This function is called by:
 11138 ;;		_SetLedBehavSts
 11139 ;; This function uses a non-reentrant model
 11140 ;;
 11141                           
 11142                           
 11143                           ;psect for function _Led_SetLedPulseTime
 11144  0A73                     _Led_SetLedPulseTime:	
 11145                           
 11146                           ;incstack = 0
 11147                           ; Regs used in _Led_SetLedPulseTime: [wreg-fsr0h+status,2+status,0]
 11148                           ;Led_SetLedPulseTime@Led stored from wreg
 11149  0A73  0020               	movlb	0	; select bank0
 11150  0A74  00A0               	movwf	Led_SetLedPulseTime@Led
 11151                           
 11152                           ;led.c: 272: switch (Led)
 11153  0A75  2A7C               	goto	l3595
 11154  0A76                     l3591:	
 11155                           ;led.c: 273: {
 11156                           ;led.c: 274: case 1u:
 11157                           
 11158                           
 11159                           ;led.c: 275: Led1Pulse.LedPulseTimeMs = PulseTimeMs;
 11160  0A76  0875               	movf	Led_SetLedPulseTime@PulseTimeMs+1,w
 11161  0A77  0021               	movlb	1	; select bank1
 11162  0A78  00D7               	movwf	((_Led1Pulse+1)^(0+128)+4)
 11163  0A79  0874               	movf	Led_SetLedPulseTime@PulseTimeMs,w
 11164  0A7A  00D6               	movwf	(_Led1Pulse^(0+128)+4)
 11165                           
 11166                           ;led.c: 280: }
 11167                           
 11168                           ;led.c: 279: break;
 11169                           
 11170                           ;led.c: 278: default:
 11171                           
 11172                           ;led.c: 276: break;
 11173  0A7B  0008               	return
 11174  0A7C                     l3595:	
 11175  0A7C  0020               	movlb	0	; select bank0
 11176  0A7D  0820               	movf	Led_SetLedPulseTime@Led,w
 11177                           
 11178                           ; Switch size 1, requested type "space"
 11179                           ; Number of cases is 1, Range of values is 1 to 1
 11180                           ; switch strategies available:
 11181                           ; Name         Instructions Cycles
 11182                           ; simple_byte            4     3 (average)
 11183                           ; direct_byte           11     9 (fixed)
 11184                           ; jumptable            263     9 (fixed)
 11185                           ;	Chosen strategy is simple_byte
 11186  0A7E  3A01               	xorlw	1	; case 1
 11187  0A7F  1903               	skipnz
 11188  0A80  2A76               	goto	l3591
 11189  0A81  2A82               	goto	l636
 11190  0A82                     l636:	
 11191  0A82  0008               	return
 11192  0A83                     __end_of_Led_SetLedPulseTime:	
 11193                           
 11194                           	psect	text54
 11195  0B4C                     __ptext54:	
 11196 ;; *************** function _Led_SetLedBlinkTime *****************
 11197 ;; Defined at:
 11198 ;;		line 245 in file "../../../Framework/MercuryFwk/Source/c/03_Sml/02_Ssl/led.c"
 11199 ;; Parameters:    Size  Location     Type
 11200 ;;  Led             1    wreg     unsigned char 
 11201 ;;  OnTimeMs        2    0[BANK0 ] unsigned short 
 11202 ;;  OffTimeMs       2    2[BANK0 ] unsigned short 
 11203 ;; Auto vars:     Size  Location     Type
 11204 ;;  Led             1    4[COMMON] unsigned char 
 11205 ;; Return value:  Size  Location     Type
 11206 ;;                  1    wreg      void 
 11207 ;; Registers used:
 11208 ;;		wreg, fsr0l, fsr0h, status,2, status,0
 11209 ;; Tracked objects:
 11210 ;;		On entry : 0/0
 11211 ;;		On exit  : 0/0
 11212 ;;		Unchanged: 0/0
 11213 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11214 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11215 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11216 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11217 ;;      Totals:         1       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11218 ;;Total ram usage:        5 bytes
 11219 ;; Hardware stack levels used:    1
 11220 ;; Hardware stack levels required when called:    2
 11221 ;; This function calls:
 11222 ;;		Nothing
 11223 ;; This function is called by:
 11224 ;;		_SetLedBehavSts
 11225 ;; This function uses a non-reentrant model
 11226 ;;
 11227                           
 11228                           
 11229                           ;psect for function _Led_SetLedBlinkTime
 11230  0B4C                     _Led_SetLedBlinkTime:	
 11231                           
 11232                           ;incstack = 0
 11233                           ; Regs used in _Led_SetLedBlinkTime: [wreg-fsr0h+status,2+status,0]
 11234                           ;Led_SetLedBlinkTime@Led stored from wreg
 11235  0B4C  00F4               	movwf	Led_SetLedBlinkTime@Led
 11236                           
 11237                           ;led.c: 248: switch (Led)
 11238  0B4D  2B5F               	goto	l3587
 11239  0B4E                     l3583:	
 11240                           ;led.c: 249: {
 11241                           ;led.c: 250: case 1u:
 11242                           
 11243                           
 11244                           ;led.c: 251: Led1Blink.LedOnTimeMs = OnTimeMs;
 11245  0B4E  0020               	movlb	0	; select bank0
 11246  0B4F  0821               	movf	Led_SetLedBlinkTime@OnTimeMs+1,w
 11247  0B50  0021               	movlb	1	; select bank1
 11248  0B51  00CE               	movwf	((_Led1Blink+1)^(0+128)+4)
 11249  0B52  0020               	movlb	0	; select bank0
 11250  0B53  0820               	movf	Led_SetLedBlinkTime@OnTimeMs,w
 11251  0B54  0021               	movlb	1	; select bank1
 11252  0B55  00CD               	movwf	(_Led1Blink^(0+128)+4)
 11253                           
 11254                           ;led.c: 252: Led1Blink.LedOffTimeMs = OffTimeMs;
 11255  0B56  0020               	movlb	0	; select bank0
 11256  0B57  0823               	movf	Led_SetLedBlinkTime@OffTimeMs+1,w
 11257  0B58  0021               	movlb	1	; select bank1
 11258  0B59  00D0               	movwf	((_Led1Blink+1)^(0+128)+6)
 11259  0B5A  0020               	movlb	0	; select bank0
 11260  0B5B  0822               	movf	Led_SetLedBlinkTime@OffTimeMs,w
 11261  0B5C  0021               	movlb	1	; select bank1
 11262  0B5D  00CF               	movwf	(_Led1Blink^(0+128)+6)
 11263                           
 11264                           ;led.c: 257: }
 11265                           
 11266                           ;led.c: 256: break;
 11267                           
 11268                           ;led.c: 255: default:
 11269                           
 11270                           ;led.c: 253: break;
 11271  0B5E  0008               	return
 11272  0B5F                     l3587:	
 11273  0B5F  0874               	movf	Led_SetLedBlinkTime@Led,w
 11274                           
 11275                           ; Switch size 1, requested type "space"
 11276                           ; Number of cases is 1, Range of values is 1 to 1
 11277                           ; switch strategies available:
 11278                           ; Name         Instructions Cycles
 11279                           ; simple_byte            4     3 (average)
 11280                           ; direct_byte           11     9 (fixed)
 11281                           ; jumptable            263     9 (fixed)
 11282                           ;	Chosen strategy is simple_byte
 11283  0B60  3A01               	xorlw	1	; case 1
 11284  0B61  1903               	skipnz
 11285  0B62  2B4E               	goto	l3583
 11286  0B63  2B64               	goto	l629
 11287  0B64                     l629:	
 11288  0B64  0008               	return
 11289  0B65                     __end_of_Led_SetLedBlinkTime:	
 11290                           
 11291                           	psect	text55
 11292  0A24                     __ptext55:	
 11293 ;; *************** function _LowPowerMode *****************
 11294 ;; Defined at:
 11295 ;;		line 161 in file "../../../Framework/MercuryFwk/Source/c/03_Sml/02_Ssl/std_ser.c"
 11296 ;; Parameters:    Size  Location     Type
 11297 ;;		None
 11298 ;; Auto vars:     Size  Location     Type
 11299 ;;		None
 11300 ;; Return value:  Size  Location     Type
 11301 ;;                  1    wreg      void 
 11302 ;; Registers used:
 11303 ;;		wreg, status,2, status,0, pclath, cstack
 11304 ;; Tracked objects:
 11305 ;;		On entry : 0/0
 11306 ;;		On exit  : 0/0
 11307 ;;		Unchanged: 0/0
 11308 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11309 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11310 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11311 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11312 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11313 ;;Total ram usage:        0 bytes
 11314 ;; Hardware stack levels used:    1
 11315 ;; Hardware stack levels required when called:    3
 11316 ;; This function calls:
 11317 ;;		_Mcu_SetWdgSts
 11318 ;; This function is called by:
 11319 ;;		_StdS_ManageStdServices
 11320 ;; This function uses a non-reentrant model
 11321 ;;
 11322                           
 11323                           
 11324                           ;psect for function _LowPowerMode
 11325  0A24                     _LowPowerMode:	
 11326                           
 11327                           ;std_ser.c: 164: LATA = 0x00;
 11328                           
 11329                           ;incstack = 0
 11330                           ; Regs used in _LowPowerMode: [wreg+status,2+status,0+pclath+cstack]
 11331  0A24  0022               	movlb	2	; select bank2
 11332  0A25  018C               	clrf	12	;volatile
 11333                           
 11334                           ;std_ser.c: 168: LATC = 0x00;
 11335  0A26  018E               	clrf	14	;volatile
 11336                           
 11337                           ;std_ser.c: 170: Mcu_SetWdgSts(((UINT8)(0)));
 11338  0A27  3000               	movlw	0
 11339  0A28  3189  21BC  318A   	fcall	_Mcu_SetWdgSts
 11340  0A2B  0063               	sleep	;# 
 11341                           
 11342                           ;std_ser.c: 177: Mcu_SetWdgSts(((UINT8)(1)));
 11343  0A2C  3001               	movlw	1
 11344  0A2D  3189  21BC         	fcall	_Mcu_SetWdgSts
 11345  0A2F  0008               	return
 11346  0A30                     __end_of_LowPowerMode:	
 11347                           
 11348                           	psect	text56
 11349  09BC                     __ptext56:	
 11350 ;; *************** function _Mcu_SetWdgSts *****************
 11351 ;; Defined at:
 11352 ;;		line 237 in file "../../../Framework/MercuryFwk/Source/c/01_Hal/02_Drv/mcu_drv.c"
 11353 ;; Parameters:    Size  Location     Type
 11354 ;;  WdgSts          1    wreg     unsigned char 
 11355 ;; Auto vars:     Size  Location     Type
 11356 ;;  WdgSts          1    4[COMMON] unsigned char 
 11357 ;; Return value:  Size  Location     Type
 11358 ;;                  1    wreg      void 
 11359 ;; Registers used:
 11360 ;;		wreg, status,0
 11361 ;; Tracked objects:
 11362 ;;		On entry : 0/0
 11363 ;;		On exit  : 0/0
 11364 ;;		Unchanged: 0/0
 11365 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11366 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11367 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11368 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11369 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11370 ;;Total ram usage:        1 bytes
 11371 ;; Hardware stack levels used:    1
 11372 ;; Hardware stack levels required when called:    2
 11373 ;; This function calls:
 11374 ;;		Nothing
 11375 ;; This function is called by:
 11376 ;;		_LowPowerMode
 11377 ;;		_Wdg_MainTask
 11378 ;; This function uses a non-reentrant model
 11379 ;;
 11380                           
 11381                           
 11382                           ;psect for function _Mcu_SetWdgSts
 11383  09BC                     _Mcu_SetWdgSts:	
 11384                           
 11385                           ;incstack = 0
 11386                           ; Regs used in _Mcu_SetWdgSts: [wreg+status,0]
 11387                           ;Mcu_SetWdgSts@WdgSts stored from wreg
 11388  09BC  00F4               	movwf	Mcu_SetWdgSts@WdgSts
 11389                           
 11390                           ;mcu_drv.c: 240: WDTCONbits.SWDTEN = WdgSts;
 11391  09BD  0C74               	rrf	Mcu_SetWdgSts@WdgSts,w
 11392  09BE  0021               	movlb	1	; select bank1
 11393  09BF  1C03               	skipc
 11394  09C0  1017               	bcf	23,0	;volatile
 11395  09C1  1803               	skipnc
 11396  09C2  1417               	bsf	23,0	;volatile
 11397  09C3  0008               	return
 11398  09C4                     __end_of_Mcu_SetWdgSts:	
 11399                           
 11400                           	psect	text57
 11401  0B33                     __ptext57:	
 11402 ;; *************** function _GetDieTemperature *****************
 11403 ;; Defined at:
 11404 ;;		line 188 in file "../../../Framework/MercuryFwk/Source/c/03_Sml/02_Ssl/std_ser.c"
 11405 ;; Parameters:    Size  Location     Type
 11406 ;;		None
 11407 ;; Auto vars:     Size  Location     Type
 11408 ;;  DieTempRes      2    5[BANK0 ] unsigned short 
 11409 ;; Return value:  Size  Location     Type
 11410 ;;                  2    3[BANK0 ] unsigned short 
 11411 ;; Registers used:
 11412 ;;		wreg, status,2, status,0, pclath, cstack
 11413 ;; Tracked objects:
 11414 ;;		On entry : 0/0
 11415 ;;		On exit  : 0/0
 11416 ;;		Unchanged: 0/0
 11417 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11418 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11419 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11420 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11421 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11422 ;;Total ram usage:        4 bytes
 11423 ;; Hardware stack levels used:    1
 11424 ;; Hardware stack levels required when called:    3
 11425 ;; This function calls:
 11426 ;;		_Adc_GetConvResult
 11427 ;;		_Adc_GetConvSts
 11428 ;;		_Adc_SelectChannel
 11429 ;;		_Adc_StartConversion
 11430 ;; This function is called by:
 11431 ;;		_StdS_ManageStdServices
 11432 ;; This function uses a non-reentrant model
 11433 ;;
 11434                           
 11435                           
 11436                           ;psect for function _GetDieTemperature
 11437  0B33                     _GetDieTemperature:	
 11438                           
 11439                           ;std_ser.c: 190: UINT16 DieTempRes;
 11440                           ;std_ser.c: 193: Adc_SelectChannel(((UINT8)(29)));
 11441                           
 11442                           ;incstack = 0
 11443                           ; Regs used in _GetDieTemperature: [wreg+status,2+status,0+pclath+cstack]
 11444  0B33  301D               	movlw	29
 11445  0B34  318A  2218  318B   	fcall	_Adc_SelectChannel
 11446                           
 11447                           ;std_ser.c: 195: Adc_StartConversion();
 11448  0B37  3189  2197  318B   	fcall	_Adc_StartConversion
 11449  0B3A                     l3699:	
 11450                           ;std_ser.c: 197: while (Adc_GetConvSts() == AdcConvInProgress);
 11451                           
 11452  0B3A  3189  21A0  318B   	fcall	_Adc_GetConvSts
 11453  0B3D  3A00               	xorlw	0
 11454  0B3E  1903               	skipnz
 11455  0B3F  2B3A               	goto	l3699
 11456                           
 11457                           ;std_ser.c: 199: DieTempRes = Adc_GetConvResult();
 11458  0B40  318A  2263         	fcall	_Adc_GetConvResult
 11459  0B42  0875               	movf	?_Adc_GetConvResult+1,w
 11460  0B43  0020               	movlb	0	; select bank0
 11461  0B44  00A6               	movwf	GetDieTemperature@DieTempRes+1
 11462  0B45  0874               	movf	?_Adc_GetConvResult,w
 11463  0B46  00A5               	movwf	GetDieTemperature@DieTempRes
 11464                           
 11465                           ;std_ser.c: 201: return DieTempRes;
 11466  0B47  0826               	movf	GetDieTemperature@DieTempRes+1,w
 11467  0B48  00A4               	movwf	?_GetDieTemperature+1
 11468  0B49  0825               	movf	GetDieTemperature@DieTempRes,w
 11469  0B4A  00A3               	movwf	?_GetDieTemperature
 11470  0B4B  0008               	return
 11471  0B4C                     __end_of_GetDieTemperature:	
 11472                           
 11473                           	psect	text58
 11474  0997                     __ptext58:	
 11475 ;; *************** function _Adc_StartConversion *****************
 11476 ;; Defined at:
 11477 ;;		line 144 in file "../../../Framework/MercuryFwk/Source/c/01_Hal/02_Drv/adc_drv.c"
 11478 ;; Parameters:    Size  Location     Type
 11479 ;;		None
 11480 ;; Auto vars:     Size  Location     Type
 11481 ;;		None
 11482 ;; Return value:  Size  Location     Type
 11483 ;;                  1    wreg      void 
 11484 ;; Registers used:
 11485 ;;		None
 11486 ;; Tracked objects:
 11487 ;;		On entry : 0/0
 11488 ;;		On exit  : 0/0
 11489 ;;		Unchanged: 0/0
 11490 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11491 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11492 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11493 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11494 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11495 ;;Total ram usage:        0 bytes
 11496 ;; Hardware stack levels used:    1
 11497 ;; Hardware stack levels required when called:    2
 11498 ;; This function calls:
 11499 ;;		Nothing
 11500 ;; This function is called by:
 11501 ;;		_GetDieTemperature
 11502 ;; This function uses a non-reentrant model
 11503 ;;
 11504                           
 11505                           
 11506                           ;psect for function _Adc_StartConversion
 11507  0997                     _Adc_StartConversion:	
 11508                           
 11509                           ;adc_drv.c: 147: ADCON0bits.GO_nDONE = ((UINT8)(1));
 11510                           
 11511                           ;incstack = 0
 11512                           ; Regs used in _Adc_StartConversion: []
 11513  0997  0021               	movlb	1	; select bank1
 11514  0998  149D               	bsf	29,1	;volatile
 11515  0999  0008               	return
 11516  099A                     __end_of_Adc_StartConversion:	
 11517                           
 11518                           	psect	text59
 11519  0A18                     __ptext59:	
 11520 ;; *************** function _Adc_SelectChannel *****************
 11521 ;; Defined at:
 11522 ;;		line 130 in file "../../../Framework/MercuryFwk/Source/c/01_Hal/02_Drv/adc_drv.c"
 11523 ;; Parameters:    Size  Location     Type
 11524 ;;  SelCh           1    wreg     unsigned char 
 11525 ;; Auto vars:     Size  Location     Type
 11526 ;;  SelCh           1    5[COMMON] unsigned char 
 11527 ;; Return value:  Size  Location     Type
 11528 ;;                  1    wreg      void 
 11529 ;; Registers used:
 11530 ;;		wreg, status,2, status,0
 11531 ;; Tracked objects:
 11532 ;;		On entry : 0/0
 11533 ;;		On exit  : 0/0
 11534 ;;		Unchanged: 0/0
 11535 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11536 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11537 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11538 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11539 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11540 ;;Total ram usage:        2 bytes
 11541 ;; Hardware stack levels used:    1
 11542 ;; Hardware stack levels required when called:    2
 11543 ;; This function calls:
 11544 ;;		Nothing
 11545 ;; This function is called by:
 11546 ;;		_GetDieTemperature
 11547 ;; This function uses a non-reentrant model
 11548 ;;
 11549                           
 11550                           
 11551                           ;psect for function _Adc_SelectChannel
 11552  0A18                     _Adc_SelectChannel:	
 11553                           
 11554                           ;incstack = 0
 11555                           ; Regs used in _Adc_SelectChannel: [wreg+status,2+status,0]
 11556                           ;Adc_SelectChannel@SelCh stored from wreg
 11557  0A18  00F5               	movwf	Adc_SelectChannel@SelCh
 11558                           
 11559                           ;adc_drv.c: 133: ADCON0bits.CHS = SelCh;
 11560  0A19  0875               	movf	Adc_SelectChannel@SelCh,w
 11561  0A1A  00F4               	movwf	??_Adc_SelectChannel
 11562  0A1B  0DF4               	rlf	??_Adc_SelectChannel,f
 11563  0A1C  0DF4               	rlf	??_Adc_SelectChannel,f
 11564  0A1D  0021               	movlb	1	; select bank1
 11565  0A1E  081D               	movf	29,w	;volatile
 11566  0A1F  0674               	xorwf	??_Adc_SelectChannel,w
 11567  0A20  3983               	andlw	-125
 11568  0A21  0674               	xorwf	??_Adc_SelectChannel,w
 11569  0A22  009D               	movwf	29	;volatile
 11570  0A23  0008               	return
 11571  0A24                     __end_of_Adc_SelectChannel:	
 11572                           
 11573                           	psect	text60
 11574  09A0                     __ptext60:	
 11575 ;; *************** function _Adc_GetConvSts *****************
 11576 ;; Defined at:
 11577 ;;		line 158 in file "../../../Framework/MercuryFwk/Source/c/01_Hal/02_Drv/adc_drv.c"
 11578 ;; Parameters:    Size  Location     Type
 11579 ;;		None
 11580 ;; Auto vars:     Size  Location     Type
 11581 ;;		None
 11582 ;; Return value:  Size  Location     Type
 11583 ;;                  1    wreg      enum E3374
 11584 ;; Registers used:
 11585 ;;		wreg, status,2, status,0
 11586 ;; Tracked objects:
 11587 ;;		On entry : 0/0
 11588 ;;		On exit  : 0/0
 11589 ;;		Unchanged: 0/0
 11590 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11591 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11592 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11593 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11594 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11595 ;;Total ram usage:        0 bytes
 11596 ;; Hardware stack levels used:    1
 11597 ;; Hardware stack levels required when called:    2
 11598 ;; This function calls:
 11599 ;;		Nothing
 11600 ;; This function is called by:
 11601 ;;		_GetDieTemperature
 11602 ;; This function uses a non-reentrant model
 11603 ;;
 11604                           
 11605                           
 11606                           ;psect for function _Adc_GetConvSts
 11607  09A0                     _Adc_GetConvSts:	
 11608                           
 11609                           ;adc_drv.c: 161: return ((AdcConvStsType)(ADCON0bits.GO_nDONE));
 11610                           
 11611                           ;incstack = 0
 11612                           ; Regs used in _Adc_GetConvSts: [wreg+status,2+status,0]
 11613  09A0  0021               	movlb	1	; select bank1
 11614  09A1  0C1D               	rrf	29,w	;volatile
 11615  09A2  3901               	andlw	1
 11616  09A3  0008               	return
 11617  09A4                     __end_of_Adc_GetConvSts:	
 11618                           
 11619                           	psect	text61
 11620  0A63                     __ptext61:	
 11621 ;; *************** function _Adc_GetConvResult *****************
 11622 ;; Defined at:
 11623 ;;		line 172 in file "../../../Framework/MercuryFwk/Source/c/01_Hal/02_Drv/adc_drv.c"
 11624 ;; Parameters:    Size  Location     Type
 11625 ;;		None
 11626 ;; Auto vars:     Size  Location     Type
 11627 ;;  AdcResult       2    1[BANK0 ] unsigned short 
 11628 ;; Return value:  Size  Location     Type
 11629 ;;                  2    4[COMMON] unsigned short 
 11630 ;; Registers used:
 11631 ;;		wreg, status,2, status,0
 11632 ;; Tracked objects:
 11633 ;;		On entry : 0/0
 11634 ;;		On exit  : 0/0
 11635 ;;		Unchanged: 0/0
 11636 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11637 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11638 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11639 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11640 ;;      Totals:         2       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11641 ;;Total ram usage:        5 bytes
 11642 ;; Hardware stack levels used:    1
 11643 ;; Hardware stack levels required when called:    2
 11644 ;; This function calls:
 11645 ;;		Nothing
 11646 ;; This function is called by:
 11647 ;;		_GetDieTemperature
 11648 ;; This function uses a non-reentrant model
 11649 ;;
 11650                           
 11651                           
 11652                           ;psect for function _Adc_GetConvResult
 11653  0A63                     _Adc_GetConvResult:	
 11654                           
 11655                           ;adc_drv.c: 174: UINT16 AdcResult;
 11656                           ;adc_drv.c: 177: AdcResult = (((ADRESH & 0x03) << 8) | ADRESL);
 11657                           
 11658                           ;incstack = 0
 11659                           ; Regs used in _Adc_GetConvResult: [wreg+status,2+status,0]
 11660  0A63  3003               	movlw	3
 11661  0A64  0021               	movlb	1	; select bank1
 11662  0A65  051C               	andwf	28,w	;volatile
 11663  0A66  0020               	movlb	0	; select bank0
 11664  0A67  00A0               	movwf	??_Adc_GetConvResult
 11665  0A68  0820               	movf	??_Adc_GetConvResult,w
 11666  0A69  00A2               	movwf	Adc_GetConvResult@AdcResult+1
 11667  0A6A  0021               	movlb	1	; select bank1
 11668  0A6B  081B               	movf	27,w	;volatile
 11669  0A6C  0020               	movlb	0	; select bank0
 11670  0A6D  00A1               	movwf	Adc_GetConvResult@AdcResult
 11671                           
 11672                           ;adc_drv.c: 179: return AdcResult;
 11673  0A6E  0822               	movf	Adc_GetConvResult@AdcResult+1,w
 11674  0A6F  00F5               	movwf	?_Adc_GetConvResult+1
 11675  0A70  0821               	movf	Adc_GetConvResult@AdcResult,w
 11676  0A71  00F4               	movwf	?_Adc_GetConvResult
 11677  0A72  0008               	return
 11678  0A73                     __end_of_Adc_GetConvResult:	
 11679                           
 11680                           	psect	text62
 11681  0BC4                     __ptext62:	
 11682 ;; *************** function _GenerateEvt *****************
 11683 ;; Defined at:
 11684 ;;		line 73 in file "../../../Framework/MercuryFwk/Source/c/02_Osl/os_ser.c"
 11685 ;; Parameters:    Size  Location     Type
 11686 ;;  Event           1    wreg     PTR struct _EventStructu
 11687 ;;		 -> I2cReplyPacketReady(2), I2cWriteRequest(2), I2cSetAddress(2), I2cNewTxNotification(2), 
 11688 ;;		 -> I2cNewPacketNotification(2), 
 11689 ;; Auto vars:     Size  Location     Type
 11690 ;;  Event           1    1[BANK0 ] PTR struct _EventStructu
 11691 ;;		 -> I2cReplyPacketReady(2), I2cWriteRequest(2), I2cSetAddress(2), I2cNewTxNotification(2), 
 11692 ;;		 -> I2cNewPacketNotification(2), 
 11693 ;;  EventStatus     1    0[BANK0 ] enum E3352
 11694 ;; Return value:  Size  Location     Type
 11695 ;;                  1    wreg      enum E3348
 11696 ;; Registers used:
 11697 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 11698 ;; Tracked objects:
 11699 ;;		On entry : 0/0
 11700 ;;		On exit  : 0/0
 11701 ;;		Unchanged: 0/0
 11702 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11703 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11704 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11705 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11706 ;;      Totals:         1       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11707 ;;Total ram usage:        3 bytes
 11708 ;; Hardware stack levels used:    1
 11709 ;; Hardware stack levels required when called:    2
 11710 ;; This function calls:
 11711 ;;		Nothing
 11712 ;; This function is called by:
 11713 ;;		_I2c_DataReceiveSm
 11714 ;;		_I2cSlv_I2cDrvHandle
 11715 ;;		_StdS_ManageStdServices
 11716 ;;		_ManageProtocol
 11717 ;;		_AppSm
 11718 ;; This function uses a non-reentrant model
 11719 ;;
 11720                           
 11721                           
 11722                           ;psect for function _GenerateEvt
 11723  0BC4                     _GenerateEvt:	
 11724                           
 11725                           ;incstack = 0
 11726                           ; Regs used in _GenerateEvt: [wreg+fsr1l+fsr1h+status,2+status,0]
 11727                           ;GenerateEvt@Event stored from wreg
 11728  0BC4  0020               	movlb	0	; select bank0
 11729  0BC5  00A1               	movwf	GenerateEvt@Event
 11730                           
 11731                           ;os_ser.c: 76: EventStatusType EventStatus = EventIdle;
 11732  0BC6  01A0               	clrf	GenerateEvt@EventStatus
 11733                           
 11734                           ;os_ser.c: 78: if ((Event->EventOptions != ((UINT8)(2))) && (Event->EventOptions != ((UI
      +                          NT8)(3))))
 11735  0BC7  0821               	movf	GenerateEvt@Event,w
 11736  0BC8  0086               	movwf	6
 11737  0BC9  0187               	clrf	7
 11738  0BCA  3002               	movlw	2
 11739  0BCB  0601               	xorwf	1,w
 11740  0BCC  1903               	btfsc	3,2
 11741  0BCD  2BE1               	goto	l3655
 11742  0BCE  0821               	movf	GenerateEvt@Event,w
 11743  0BCF  0086               	movwf	6
 11744  0BD0  0187               	clrf	7
 11745  0BD1  3003               	movlw	3
 11746  0BD2  0601               	xorwf	1,w
 11747  0BD3  1903               	btfsc	3,2
 11748  0BD4  2BE1               	goto	l3655
 11749                           
 11750                           ;os_ser.c: 79: {
 11751                           ;os_ser.c: 81: Event->EventStatus = EventSent;
 11752  0BD5  3002               	movlw	2
 11753  0BD6  00F4               	movwf	??_GenerateEvt
 11754  0BD7  0A21               	incf	GenerateEvt@Event,w
 11755  0BD8  0086               	movwf	6
 11756  0BD9  0187               	clrf	7
 11757  0BDA  0874               	movf	??_GenerateEvt,w
 11758  0BDB  0081               	movwf	1
 11759                           
 11760                           ;os_ser.c: 83: EventStatus = EventSent;
 11761  0BDC  3002               	movlw	2
 11762  0BDD  00F4               	movwf	??_GenerateEvt
 11763  0BDE  0874               	movf	??_GenerateEvt,w
 11764  0BDF  00A0               	movwf	GenerateEvt@EventStatus
 11765                           
 11766                           ;os_ser.c: 84: }
 11767  0BE0  0008               	return
 11768  0BE1                     l3655:	
 11769                           
 11770                           ;os_ser.c: 85: else
 11771                           ;os_ser.c: 86: {
 11772                           ;os_ser.c: 88: EventStatus = EventNotSent;
 11773  0BE1  3003               	movlw	3
 11774  0BE2  00F4               	movwf	??_GenerateEvt
 11775  0BE3  0874               	movf	??_GenerateEvt,w
 11776  0BE4  00A0               	movwf	GenerateEvt@EventStatus
 11777  0BE5  0008               	return
 11778  0BE6                     __end_of_GenerateEvt:	
 11779                           ;os_ser.c: 89: }
 11780                           ;os_ser.c: 92: return(EventStatus);
 11781                           ;	Return value of _GenerateEvt is never used
 11782                           
 11783                           
 11784                           	psect	text63
 11785  0AB3                     __ptext63:	
 11786 ;; *************** function _ControlLedDirect *****************
 11787 ;; Defined at:
 11788 ;;		line 122 in file "../../../Framework/MercuryFwk/Source/c/03_Sml/02_Ssl/std_ser.c"
 11789 ;; Parameters:    Size  Location     Type
 11790 ;;		None
 11791 ;; Auto vars:     Size  Location     Type
 11792 ;;		None
 11793 ;; Return value:  Size  Location     Type
 11794 ;;                  1    wreg      void 
 11795 ;; Registers used:
 11796 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
 11797 ;; Tracked objects:
 11798 ;;		On entry : 0/0
 11799 ;;		On exit  : 0/0
 11800 ;;		Unchanged: 0/0
 11801 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11802 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11803 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11804 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11805 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11806 ;;Total ram usage:        0 bytes
 11807 ;; Hardware stack levels used:    1
 11808 ;; Hardware stack levels required when called:    3
 11809 ;; This function calls:
 11810 ;;		_Led_SetLedStatus
 11811 ;; This function is called by:
 11812 ;;		_StdS_ManageStdServices
 11813 ;; This function uses a non-reentrant model
 11814 ;;
 11815                           
 11816                           
 11817                           ;psect for function _ControlLedDirect
 11818  0AB3                     _ControlLedDirect:	
 11819                           
 11820                           ;std_ser.c: 125: if (LedBehaviourSts == ((UINT8)(3)))
 11821                           
 11822                           ;incstack = 0
 11823                           ; Regs used in _ControlLedDirect: [wreg-fsr0h+status,2+status,0+pclath+cstack]
 11824  0AB3  3003               	movlw	3
 11825  0AB4  0679               	xorwf	_LedBehaviourSts,w
 11826  0AB5  1D03               	btfss	3,2
 11827  0AB6  0008               	return
 11828                           
 11829                           ;std_ser.c: 126: {
 11830                           ;std_ser.c: 128: if (CmdBuffer[((UINT8)(1))] == ((UINT8)(1)))
 11831  0AB7  0024               	movlb	4	; select bank4
 11832  0AB8  0321               	decf	(_CmdBuffer^(0+512)+1),w
 11833  0AB9  1D03               	btfss	3,2
 11834  0ABA  2AC1               	goto	l3693
 11835                           
 11836                           ;std_ser.c: 129: {
 11837                           ;std_ser.c: 130: Led_SetLedStatus(1u,LED_STS_ON);
 11838  0ABB  01F4               	clrf	Led_SetLedStatus@LedSts
 11839  0ABC  0AF4               	incf	Led_SetLedStatus@LedSts,f
 11840  0ABD  3001               	movlw	1
 11841  0ABE  318A  2255         	fcall	_Led_SetLedStatus
 11842                           
 11843                           ;std_ser.c: 131: }
 11844  0AC0  0008               	return
 11845  0AC1                     l3693:	
 11846                           
 11847                           ;std_ser.c: 132: else
 11848                           ;std_ser.c: 133: {
 11849                           ;std_ser.c: 134: Led_SetLedStatus(1u,LED_STS_OFF);
 11850  0AC1  01F4               	clrf	Led_SetLedStatus@LedSts
 11851  0AC2  3001               	movlw	1
 11852  0AC3  318A  2255         	fcall	_Led_SetLedStatus
 11853  0AC5  0008               	return
 11854  0AC6                     __end_of_ControlLedDirect:	
 11855                           
 11856                           	psect	text64
 11857  0A55                     __ptext64:	
 11858 ;; *************** function _Led_SetLedStatus *****************
 11859 ;; Defined at:
 11860 ;;		line 221 in file "../../../Framework/MercuryFwk/Source/c/03_Sml/02_Ssl/led.c"
 11861 ;; Parameters:    Size  Location     Type
 11862 ;;  Led             1    wreg     unsigned char 
 11863 ;;  LedSts          1    4[COMMON] unsigned char 
 11864 ;; Auto vars:     Size  Location     Type
 11865 ;;  Led             1    0[BANK0 ] unsigned char 
 11866 ;; Return value:  Size  Location     Type
 11867 ;;                  1    wreg      void 
 11868 ;; Registers used:
 11869 ;;		wreg, fsr0l, fsr0h, status,2, status,0
 11870 ;; Tracked objects:
 11871 ;;		On entry : 0/0
 11872 ;;		On exit  : 0/0
 11873 ;;		Unchanged: 0/0
 11874 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11875 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11876 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11877 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11878 ;;      Totals:         2       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11879 ;;Total ram usage:        3 bytes
 11880 ;; Hardware stack levels used:    1
 11881 ;; Hardware stack levels required when called:    2
 11882 ;; This function calls:
 11883 ;;		Nothing
 11884 ;; This function is called by:
 11885 ;;		_LedPulseStateMachine
 11886 ;;		_I2cSlv_I2cDrvHandle
 11887 ;;		_Led_InitSeq
 11888 ;;		_SetLedBehavSts
 11889 ;;		_ControlLedDirect
 11890 ;; This function uses a non-reentrant model
 11891 ;;
 11892                           
 11893                           
 11894                           ;psect for function _Led_SetLedStatus
 11895  0A55                     _Led_SetLedStatus:	
 11896                           
 11897                           ;incstack = 0
 11898                           ; Regs used in _Led_SetLedStatus: [wreg-fsr0h+status,2+status,0]
 11899                           ;Led_SetLedStatus@Led stored from wreg
 11900  0A55  0020               	movlb	0	; select bank0
 11901  0A56  00A0               	movwf	Led_SetLedStatus@Led
 11902                           
 11903                           ;led.c: 224: switch (Led)
 11904  0A57  2A5D               	goto	l3573
 11905  0A58                     l3569:	
 11906                           ;led.c: 225: {
 11907                           ;led.c: 226: case 1u:
 11908                           
 11909                           
 11910                           ;led.c: 227: Led1Sts = LedSts;
 11911  0A58  0874               	movf	Led_SetLedStatus@LedSts,w
 11912  0A59  00F5               	movwf	??_Led_SetLedStatus
 11913  0A5A  0875               	movf	??_Led_SetLedStatus,w
 11914  0A5B  00EA               	movwf	_Led1Sts
 11915                           
 11916                           ;led.c: 232: }
 11917                           
 11918                           ;led.c: 231: break;
 11919                           
 11920                           ;led.c: 230: default:
 11921                           
 11922                           ;led.c: 228: break;
 11923  0A5C  0008               	return
 11924  0A5D                     l3573:	
 11925  0A5D  0820               	movf	Led_SetLedStatus@Led,w
 11926                           
 11927                           ; Switch size 1, requested type "space"
 11928                           ; Number of cases is 1, Range of values is 1 to 1
 11929                           ; switch strategies available:
 11930                           ; Name         Instructions Cycles
 11931                           ; simple_byte            4     3 (average)
 11932                           ; direct_byte           11     9 (fixed)
 11933                           ; jumptable            263     9 (fixed)
 11934                           ;	Chosen strategy is simple_byte
 11935  0A5E  3A01               	xorlw	1	; case 1
 11936  0A5F  1903               	skipnz
 11937  0A60  2A58               	goto	l3569
 11938  0A61  2A62               	goto	l622
 11939  0A62                     l622:	
 11940  0A62  0008               	return
 11941  0A63                     __end_of_Led_SetLedStatus:	
 11942                           
 11943                           	psect	text65
 11944  0994                     __ptext65:	
 11945 ;; *************** function _BoardReset *****************
 11946 ;; Defined at:
 11947 ;;		line 147 in file "../../../Framework/MercuryFwk/Source/c/03_Sml/02_Ssl/std_ser.c"
 11948 ;; Parameters:    Size  Location     Type
 11949 ;;		None
 11950 ;; Auto vars:     Size  Location     Type
 11951 ;;		None
 11952 ;; Return value:  Size  Location     Type
 11953 ;;                  1    wreg      void 
 11954 ;; Registers used:
 11955 ;;		status,2, status,0, pclath, cstack
 11956 ;; Tracked objects:
 11957 ;;		On entry : 0/0
 11958 ;;		On exit  : 0/0
 11959 ;;		Unchanged: 0/0
 11960 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11961 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11962 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11963 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11964 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11965 ;;Total ram usage:        0 bytes
 11966 ;; Hardware stack levels used:    1
 11967 ;; Hardware stack levels required when called:    3
 11968 ;; This function calls:
 11969 ;;		_Mcu_Reset
 11970 ;; This function is called by:
 11971 ;;		_StdS_ManageStdServices
 11972 ;; This function uses a non-reentrant model
 11973 ;;
 11974                           
 11975                           
 11976                           ;psect for function _BoardReset
 11977  0994                     _BoardReset:	
 11978                           
 11979                           ;std_ser.c: 150: Mcu_Reset();
 11980                           
 11981                           ;incstack = 0
 11982                           ; Regs used in _BoardReset: [status,2+status,0+pclath+cstack]
 11983  0994  3189  2190         	fcall	_Mcu_Reset
 11984  0996  0008               	return
 11985  0997                     __end_of_BoardReset:	
 11986                           
 11987                           	psect	text66
 11988  0990                     __ptext66:	
 11989 ;; *************** function _Mcu_Reset *****************
 11990 ;; Defined at:
 11991 ;;		line 293 in file "../../../Framework/MercuryFwk/Source/c/01_Hal/02_Drv/mcu_drv.c"
 11992 ;; Parameters:    Size  Location     Type
 11993 ;;		None
 11994 ;; Auto vars:     Size  Location     Type
 11995 ;;		None
 11996 ;; Return value:  Size  Location     Type
 11997 ;;                  1    wreg      void 
 11998 ;; Registers used:
 11999 ;;		None
 12000 ;; Tracked objects:
 12001 ;;		On entry : 0/0
 12002 ;;		On exit  : 0/0
 12003 ;;		Unchanged: 0/0
 12004 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12005 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12006 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12007 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12008 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12009 ;;Total ram usage:        0 bytes
 12010 ;; Hardware stack levels used:    1
 12011 ;; Hardware stack levels required when called:    2
 12012 ;; This function calls:
 12013 ;;		Nothing
 12014 ;; This function is called by:
 12015 ;;		_I2c_DataReceiveSm
 12016 ;;		_BoardReset
 12017 ;; This function uses a non-reentrant model
 12018 ;;
 12019                           
 12020                           
 12021                           ;psect for function _Mcu_Reset
 12022  0990                     _Mcu_Reset:	
 12023                           
 12024                           ;incstack = 0
 12025                           ; Regs used in _Mcu_Reset: []
 12026  0990  0001               	reset	;# 
 12027  0991  0008               	return
 12028  0992                     __end_of_Mcu_Reset:	
 12029                           
 12030                           	psect	text67
 12031  0BA3                     __ptext67:	
 12032 ;; *************** function _ReceiveEvt *****************
 12033 ;; Defined at:
 12034 ;;		line 103 in file "../../../Framework/MercuryFwk/Source/c/02_Osl/os_ser.c"
 12035 ;; Parameters:    Size  Location     Type
 12036 ;;  Event           1    wreg     PTR struct _EventStructu
 12037 ;;		 -> I2cReplyPacketReady(2), I2cWriteRequest(2), I2cSetAddress(2), I2cNewTxNotification(2), 
 12038 ;;		 -> I2cNewPacketNotification(2), 
 12039 ;; Auto vars:     Size  Location     Type
 12040 ;;  Event           1    5[COMMON] PTR struct _EventStructu
 12041 ;;		 -> I2cReplyPacketReady(2), I2cWriteRequest(2), I2cSetAddress(2), I2cNewTxNotification(2), 
 12042 ;;		 -> I2cNewPacketNotification(2), 
 12043 ;;  EventStatus     1    4[COMMON] enum E3352
 12044 ;; Return value:  Size  Location     Type
 12045 ;;                  1    wreg      enum E3348
 12046 ;; Registers used:
 12047 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 12048 ;; Tracked objects:
 12049 ;;		On entry : 0/0
 12050 ;;		On exit  : 0/0
 12051 ;;		Unchanged: 0/0
 12052 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12053 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12054 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12055 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12056 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12057 ;;Total ram usage:        2 bytes
 12058 ;; Hardware stack levels used:    1
 12059 ;; Hardware stack levels required when called:    2
 12060 ;; This function calls:
 12061 ;;		Nothing
 12062 ;; This function is called by:
 12063 ;;		_I2c_DataReceiveSm
 12064 ;;		_I2cSlv_I2cDrvHandle
 12065 ;;		_ManageProtocol
 12066 ;; This function uses a non-reentrant model
 12067 ;;
 12068                           
 12069                           
 12070                           ;psect for function _ReceiveEvt
 12071  0BA3                     _ReceiveEvt:	
 12072                           
 12073                           ;incstack = 0
 12074                           ; Regs used in _ReceiveEvt: [wreg+fsr1l+fsr1h+status,2+status,0]
 12075                           ;ReceiveEvt@Event stored from wreg
 12076  0BA3  00F5               	movwf	ReceiveEvt@Event
 12077                           
 12078                           ;os_ser.c: 106: EventStatusType EventStatus = EventIdle;
 12079  0BA4  01F4               	clrf	ReceiveEvt@EventStatus
 12080                           
 12081                           ;os_ser.c: 108: if ((Event->EventOptions != ((UINT8)(1))) && (Event->EventOptions != ((U
      +                          INT8)(3))))
 12082  0BA5  0875               	movf	ReceiveEvt@Event,w
 12083  0BA6  0086               	movwf	6
 12084  0BA7  0187               	clrf	7
 12085  0BA8  0301               	decf	1,w
 12086  0BA9  1903               	btfsc	3,2
 12087  0BAA  2BC2               	goto	l3751
 12088  0BAB  0875               	movf	ReceiveEvt@Event,w
 12089  0BAC  0086               	movwf	6
 12090  0BAD  0187               	clrf	7
 12091  0BAE  3003               	movlw	3
 12092  0BAF  0601               	xorwf	1,w
 12093  0BB0  1903               	btfsc	3,2
 12094  0BB1  2BC2               	goto	l3751
 12095                           
 12096                           ;os_ser.c: 109: {
 12097                           ;os_ser.c: 111: if (Event->EventStatus == EventSent)
 12098  0BB2  0A75               	incf	ReceiveEvt@Event,w
 12099  0BB3  0086               	movwf	6
 12100  0BB4  0187               	clrf	7
 12101  0BB5  3002               	movlw	2
 12102  0BB6  0601               	xorwf	1,w
 12103  0BB7  1D03               	btfss	3,2
 12104  0BB8  2BC1               	goto	l3749
 12105                           
 12106                           ;os_ser.c: 112: {
 12107                           ;os_ser.c: 114: Event->EventStatus = EventReceived;
 12108  0BB9  0A75               	incf	ReceiveEvt@Event,w
 12109  0BBA  0086               	movwf	6
 12110  0BBB  0187               	clrf	7
 12111  0BBC  0181               	clrf	1
 12112  0BBD  0A81               	incf	1,f
 12113                           
 12114                           ;os_ser.c: 116: EventStatus = EventReceived;
 12115  0BBE  01F4               	clrf	ReceiveEvt@EventStatus
 12116  0BBF  0AF4               	incf	ReceiveEvt@EventStatus,f
 12117                           
 12118                           ;os_ser.c: 117: }
 12119  0BC0  2BC2               	goto	l3751
 12120  0BC1                     l3749:	
 12121                           
 12122                           ;os_ser.c: 118: else
 12123                           ;os_ser.c: 119: {
 12124                           ;os_ser.c: 121: EventStatus = EventIdle;
 12125  0BC1  01F4               	clrf	ReceiveEvt@EventStatus
 12126  0BC2                     l3751:	
 12127                           
 12128                           ;os_ser.c: 122: }
 12129                           ;os_ser.c: 123: }
 12130                           ;os_ser.c: 126: return(EventStatus);
 12131  0BC2  0874               	movf	ReceiveEvt@EventStatus,w
 12132  0BC3  0008               	return
 12133  0BC4                     __end_of_ReceiveEvt:	
 12134                           
 12135                           	psect	text68
 12136  0DAA                     __ptext68:	
 12137 ;; *************** function _Adc_InitAdcModule *****************
 12138 ;; Defined at:
 12139 ;;		line 107 in file "../../../Framework/MercuryFwk/Source/c/01_Hal/02_Drv/adc_drv.c"
 12140 ;; Parameters:    Size  Location     Type
 12141 ;;  AdcConfig       1    wreg     PTR struct _AdcCfgType
 12142 ;;		 -> App_MainTask@AdcConfig(6), 
 12143 ;; Auto vars:     Size  Location     Type
 12144 ;;  AdcConfig       1    4[COMMON] PTR struct _AdcCfgType
 12145 ;;		 -> App_MainTask@AdcConfig(6), 
 12146 ;; Return value:  Size  Location     Type
 12147 ;;                  1    wreg      void 
 12148 ;; Registers used:
 12149 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 12150 ;; Tracked objects:
 12151 ;;		On entry : 0/0
 12152 ;;		On exit  : 0/0
 12153 ;;		Unchanged: 0/0
 12154 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12155 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12156 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12157 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12158 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12159 ;;Total ram usage:        1 bytes
 12160 ;; Hardware stack levels used:    1
 12161 ;; Hardware stack levels required when called:    2
 12162 ;; This function calls:
 12163 ;;		Nothing
 12164 ;; This function is called by:
 12165 ;;		_App_MainTask
 12166 ;; This function uses a non-reentrant model
 12167 ;;
 12168                           
 12169                           
 12170                           ;psect for function _Adc_InitAdcModule
 12171  0DAA                     _Adc_InitAdcModule:	
 12172                           
 12173                           ;incstack = 0
 12174                           ; Regs used in _Adc_InitAdcModule: [wreg+fsr1l+fsr1h+status,2+status,0]
 12175                           ;Adc_InitAdcModule@AdcConfig stored from wreg
 12176  0DAA  00F4               	movwf	Adc_InitAdcModule@AdcConfig
 12177                           
 12178                           ;adc_drv.c: 110: ADCON0bits.ADON = AdcConfig->AdcEnable;
 12179  0DAB  0874               	movf	Adc_InitAdcModule@AdcConfig,w
 12180  0DAC  0086               	movwf	6
 12181  0DAD  0187               	clrf	7
 12182  0DAE  0C01               	rrf	1,w
 12183  0DAF  0021               	movlb	1	; select bank1
 12184  0DB0  1C03               	skipc
 12185  0DB1  101D               	bcf	29,0	;volatile
 12186  0DB2  1803               	skipnc
 12187  0DB3  141D               	bsf	29,0	;volatile
 12188                           
 12189                           ;adc_drv.c: 112: ADCON1bits.ADFM = AdcConfig->AdcResultFormat;
 12190  0DB4  0A74               	incf	Adc_InitAdcModule@AdcConfig,w
 12191  0DB5  0086               	movwf	6
 12192  0DB6  0187               	clrf	7
 12193  0DB7  0C01               	rrf	1,w
 12194  0DB8  1C03               	skipc
 12195  0DB9  139E               	bcf	30,7	;volatile
 12196  0DBA  1803               	skipnc
 12197  0DBB  179E               	bsf	30,7	;volatile
 12198                           
 12199                           ;adc_drv.c: 114: ADCON1bits.ADCS0 = AdcConfig->AdcConvClock;
 12200  0DBC  0874               	movf	Adc_InitAdcModule@AdcConfig,w
 12201  0DBD  3E02               	addlw	2
 12202  0DBE  0086               	movwf	6
 12203  0DBF  0187               	clrf	7
 12204  0DC0  0C01               	rrf	1,w
 12205  0DC1  1C03               	skipc
 12206  0DC2  121E               	bcf	30,4	;volatile
 12207  0DC3  1803               	skipnc
 12208  0DC4  161E               	bsf	30,4	;volatile
 12209                           
 12210                           ;adc_drv.c: 116: ADCON1bits.ADNREF = AdcConfig->AdcNegRef;
 12211  0DC5  0874               	movf	Adc_InitAdcModule@AdcConfig,w
 12212  0DC6  3E03               	addlw	3
 12213  0DC7  0086               	movwf	6
 12214  0DC8  0187               	clrf	7
 12215  0DC9  0C01               	rrf	1,w
 12216  0DCA  1C03               	skipc
 12217  0DCB  111E               	bcf	30,2	;volatile
 12218  0DCC  1803               	skipnc
 12219  0DCD  151E               	bsf	30,2	;volatile
 12220                           
 12221                           ;adc_drv.c: 117: ADCON1bits.ADPREF = AdcConfig->AdcPosRef;
 12222  0DCE  0874               	movf	Adc_InitAdcModule@AdcConfig,w
 12223  0DCF  3E04               	addlw	4
 12224  0DD0  0086               	movwf	6
 12225  0DD1  0187               	clrf	7
 12226  0DD2  081E               	movf	30,w	;volatile
 12227  0DD3  0601               	xorwf	1,w
 12228  0DD4  39FC               	andlw	-4
 12229  0DD5  0601               	xorwf	1,w
 12230  0DD6  009E               	movwf	30	;volatile
 12231                           
 12232                           ;adc_drv.c: 119: PIE1bits.ADIE = AdcConfig->AdcIntEnabled;
 12233  0DD7  0874               	movf	Adc_InitAdcModule@AdcConfig,w
 12234  0DD8  3E05               	addlw	5
 12235  0DD9  0086               	movwf	6
 12236  0DDA  0187               	clrf	7
 12237  0DDB  0C01               	rrf	1,w
 12238  0DDC  1C03               	skipc
 12239  0DDD  1311               	bcf	17,6	;volatile
 12240  0DDE  1803               	skipnc
 12241  0DDF  1711               	bsf	17,6	;volatile
 12242  0DE0  0008               	return
 12243  0DE1                     __end_of_Adc_InitAdcModule:	
 12244                           
 12245                           	psect	text69
 12246  0E23                     __ptext69:	
 12247 ;; *************** function _Adc_ConfigAnCh *****************
 12248 ;; Defined at:
 12249 ;;		line 73 in file "../../../Framework/MercuryFwk/Source/c/01_Hal/02_Drv/adc_drv.c"
 12250 ;; Parameters:    Size  Location     Type
 12251 ;;  AnChSel         1    wreg     PTR struct _AnalogChSelT
 12252 ;;		 -> App_MainTask@AnalogChSel(8), 
 12253 ;; Auto vars:     Size  Location     Type
 12254 ;;  AnChSel         1    4[COMMON] PTR struct _AnalogChSelT
 12255 ;;		 -> App_MainTask@AnalogChSel(8), 
 12256 ;; Return value:  Size  Location     Type
 12257 ;;                  1    wreg      void 
 12258 ;; Registers used:
 12259 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 12260 ;; Tracked objects:
 12261 ;;		On entry : 0/0
 12262 ;;		On exit  : 0/0
 12263 ;;		Unchanged: 0/0
 12264 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12265 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12266 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12267 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12268 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12269 ;;Total ram usage:        1 bytes
 12270 ;; Hardware stack levels used:    1
 12271 ;; Hardware stack levels required when called:    2
 12272 ;; This function calls:
 12273 ;;		Nothing
 12274 ;; This function is called by:
 12275 ;;		_App_MainTask
 12276 ;; This function uses a non-reentrant model
 12277 ;;
 12278                           
 12279                           
 12280                           ;psect for function _Adc_ConfigAnCh
 12281  0E23                     _Adc_ConfigAnCh:	
 12282                           
 12283                           ;incstack = 0
 12284                           ; Regs used in _Adc_ConfigAnCh: [wreg+fsr1l+fsr1h+status,2+status,0]
 12285                           ;Adc_ConfigAnCh@AnChSel stored from wreg
 12286  0E23  00F4               	movwf	Adc_ConfigAnCh@AnChSel
 12287                           
 12288                           ;adc_drv.c: 76: ANSELA = 0x00;
 12289  0E24  0023               	movlb	3	; select bank3
 12290  0E25  018C               	clrf	12	;volatile
 12291                           
 12292                           ;adc_drv.c: 77: ANSELAbits.ANSA0 = AnChSel->AnSelA0An0;
 12293  0E26  0874               	movf	Adc_ConfigAnCh@AnChSel,w
 12294  0E27  0086               	movwf	6
 12295  0E28  0187               	clrf	7
 12296  0E29  0C01               	rrf	1,w
 12297  0E2A  1C03               	skipc
 12298  0E2B  100C               	bcf	12,0	;volatile
 12299  0E2C  1803               	skipnc
 12300  0E2D  140C               	bsf	12,0	;volatile
 12301                           
 12302                           ;adc_drv.c: 78: ANSELAbits.ANSA1 = AnChSel->AnSelA1An1;
 12303  0E2E  0A74               	incf	Adc_ConfigAnCh@AnChSel,w
 12304  0E2F  0086               	movwf	6
 12305  0E30  0187               	clrf	7
 12306  0E31  0C01               	rrf	1,w
 12307  0E32  1C03               	skipc
 12308  0E33  108C               	bcf	12,1	;volatile
 12309  0E34  1803               	skipnc
 12310  0E35  148C               	bsf	12,1	;volatile
 12311                           
 12312                           ;adc_drv.c: 79: ANSELAbits.ANSA2 = AnChSel->AnSelA2An2;
 12313  0E36  0874               	movf	Adc_ConfigAnCh@AnChSel,w
 12314  0E37  3E02               	addlw	2
 12315  0E38  0086               	movwf	6
 12316  0E39  0187               	clrf	7
 12317  0E3A  0C01               	rrf	1,w
 12318  0E3B  1C03               	skipc
 12319  0E3C  110C               	bcf	12,2	;volatile
 12320  0E3D  1803               	skipnc
 12321  0E3E  150C               	bsf	12,2	;volatile
 12322                           
 12323                           ;adc_drv.c: 80: ANSELAbits.ANSA4 = AnChSel->AnSelA4An3;
 12324  0E3F  0874               	movf	Adc_ConfigAnCh@AnChSel,w
 12325  0E40  3E03               	addlw	3
 12326  0E41  0086               	movwf	6
 12327  0E42  0187               	clrf	7
 12328  0E43  0C01               	rrf	1,w
 12329  0E44  1C03               	skipc
 12330  0E45  120C               	bcf	12,4	;volatile
 12331  0E46  1803               	skipnc
 12332  0E47  160C               	bsf	12,4	;volatile
 12333                           
 12334                           ;adc_drv.c: 88: ANSELC = 0x00;
 12335  0E48  018E               	clrf	14	;volatile
 12336                           
 12337                           ;adc_drv.c: 89: ANSELCbits.ANSC0 = AnChSel->AnSelC0An4;
 12338  0E49  0874               	movf	Adc_ConfigAnCh@AnChSel,w
 12339  0E4A  3E04               	addlw	4
 12340  0E4B  0086               	movwf	6
 12341  0E4C  0187               	clrf	7
 12342  0E4D  0C01               	rrf	1,w
 12343  0E4E  1C03               	skipc
 12344  0E4F  100E               	bcf	14,0	;volatile
 12345  0E50  1803               	skipnc
 12346  0E51  140E               	bsf	14,0	;volatile
 12347                           
 12348                           ;adc_drv.c: 90: ANSELCbits.ANSC1 = AnChSel->AnSelC1An5;
 12349  0E52  0874               	movf	Adc_ConfigAnCh@AnChSel,w
 12350  0E53  3E05               	addlw	5
 12351  0E54  0086               	movwf	6
 12352  0E55  0187               	clrf	7
 12353  0E56  0C01               	rrf	1,w
 12354  0E57  1C03               	skipc
 12355  0E58  108E               	bcf	14,1	;volatile
 12356  0E59  1803               	skipnc
 12357  0E5A  148E               	bsf	14,1	;volatile
 12358                           
 12359                           ;adc_drv.c: 91: ANSELCbits.ANSC2 = AnChSel->AnSelC2An6;
 12360  0E5B  0874               	movf	Adc_ConfigAnCh@AnChSel,w
 12361  0E5C  3E06               	addlw	6
 12362  0E5D  0086               	movwf	6
 12363  0E5E  0187               	clrf	7
 12364  0E5F  0C01               	rrf	1,w
 12365  0E60  1C03               	skipc
 12366  0E61  110E               	bcf	14,2	;volatile
 12367  0E62  1803               	skipnc
 12368  0E63  150E               	bsf	14,2	;volatile
 12369                           
 12370                           ;adc_drv.c: 92: ANSELCbits.ANSC3 = AnChSel->AnSelC3An7;
 12371  0E64  0874               	movf	Adc_ConfigAnCh@AnChSel,w
 12372  0E65  3E07               	addlw	7
 12373  0E66  0086               	movwf	6
 12374  0E67  0187               	clrf	7
 12375  0E68  0C01               	rrf	1,w
 12376  0E69  1C03               	skipc
 12377  0E6A  118E               	bcf	14,3	;volatile
 12378  0E6B  1803               	skipnc
 12379  0E6C  158E               	bsf	14,3	;volatile
 12380  0E6D  0008               	return
 12381  0E6E                     __end_of_Adc_ConfigAnCh:	
 12382                           
 12383                           	psect	intentry
 12384  0004                     __pintentry:	
 12385 ;; *************** function _MainInterrupt *****************
 12386 ;; Defined at:
 12387 ;;		line 50 in file "../../../Framework/MercuryFwk/Source/c/02_Osl/interrupts.c"
 12388 ;; Parameters:    Size  Location     Type
 12389 ;;		None
 12390 ;; Auto vars:     Size  Location     Type
 12391 ;;		None
 12392 ;; Return value:  Size  Location     Type
 12393 ;;                  1    wreg      void 
 12394 ;; Registers used:
 12395 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12396 ;; Tracked objects:
 12397 ;;		On entry : 0/0
 12398 ;;		On exit  : 0/0
 12399 ;;		Unchanged: 0/0
 12400 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12401 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12402 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12403 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12404 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12405 ;;Total ram usage:        1 bytes
 12406 ;; Hardware stack levels used:    1
 12407 ;; Hardware stack levels required when called:    1
 12408 ;; This function calls:
 12409 ;;		i1_GenerateEvt
 12410 ;; This function is called by:
 12411 ;;		Interrupt level 1
 12412 ;; This function uses a non-reentrant model
 12413 ;;
 12414                           
 12415  0004                     _MainInterrupt:	
 12416                           
 12417                           ;incstack = 0
 12418  0004  147E               	bsf	126,0	;set compiler interrupt flag (level 1)
 12419                           
 12420                           ; Regs used in _MainInterrupt: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 12421  0005  3180               	pagesel	$
 12422  0006  0020               	movlb	0	; select bank0
 12423  0007  087F               	movf	127,w
 12424  0008  00F3               	movwf	??_MainInterrupt
 12425                           
 12426                           ;interrupts.c: 53: if (PIR1bits.TMR2IF == ((UINT8)(1)) && PIE1bits.TMR2IE == ((UINT8)(1)
      +                          ))
 12427  0009  1C91               	btfss	17,1	;volatile
 12428  000A  281D               	goto	i1l3533
 12429  000B  0021               	movlb	1	; select bank1
 12430  000C  1C91               	btfss	17,1	;volatile
 12431  000D  281D               	goto	i1l3533
 12432                           
 12433                           ;interrupts.c: 54: {
 12434                           ;interrupts.c: 56: PIR1bits.TMR2IF = ((UINT8)(0));
 12435  000E  0020               	movlb	0	; select bank0
 12436  000F  1091               	bcf	17,1	;volatile
 12437                           
 12438                           ;interrupts.c: 58: InterruptCounter++;
 12439  0010  3001               	movlw	1
 12440  0011  0021               	movlb	1	; select bank1
 12441  0012  07B6               	addwf	_InterruptCounter^(0+128),f
 12442  0013  3000               	movlw	0
 12443  0014  3DB7               	addwfc	(_InterruptCounter+1)^(0+128),f
 12444                           
 12445                           ;interrupts.c: 60: if (InterruptCounter >= ((UINT16)(1)))
 12446  0015  0836               	movf	_InterruptCounter^(0+128),w
 12447  0016  0437               	iorwf	(_InterruptCounter+1)^(0+128),w
 12448  0017  1903               	btfsc	3,2
 12449  0018  281D               	goto	i1l3533
 12450                           
 12451                           ;interrupts.c: 61: {
 12452                           ;interrupts.c: 63: InterruptCounter = 0;
 12453  0019  01B6               	clrf	_InterruptCounter^(0+128)
 12454  001A  01B7               	clrf	(_InterruptCounter+1)^(0+128)
 12455                           
 12456                           ;interrupts.c: 65: MainSystemTimebaseFlag = CallTaskPhase;
 12457  001B  0020               	movlb	0	; select bank0
 12458  001C  01EB               	clrf	_MainSystemTimebaseFlag
 12459  001D                     i1l3533:	
 12460                           
 12461                           ;interrupts.c: 66: }
 12462                           ;interrupts.c: 67: }
 12463                           ;interrupts.c: 70: if(PIE1bits.SSP1IE == ((UINT8)(1)) && PIR1bits.SSP1IF == ((UINT8)(1))
      +                          )
 12464  001D  0021               	movlb	1	; select bank1
 12465  001E  1D91               	btfss	17,3	;volatile
 12466  001F  2827               	goto	i1l393
 12467  0020  0020               	movlb	0	; select bank0
 12468  0021  1D91               	btfss	17,3	;volatile
 12469  0022  2827               	goto	i1l393
 12470                           
 12471                           ;interrupts.c: 71: {
 12472                           ;interrupts.c: 73: PIR1bits.SSP1IF = ((UINT8)(0));
 12473  0023  1191               	bcf	17,3	;volatile
 12474                           
 12475                           ;interrupts.c: 77: GenerateEvt(&I2cNewTxNotification);
 12476  0024  30DA               	movlw	(low (_I2cNewTxNotification| 0))& (0+255)
 12477  0025  318B  2382         	fcall	i1_GenerateEvt
 12478  0027                     i1l393:	
 12479  0027  0873               	movf	??_MainInterrupt,w
 12480  0028  0020               	movlb	0	; select bank0
 12481  0029  00FF               	movwf	127
 12482  002A  107E               	bcf	126,0	;clear compiler interrupt flag (level 1)
 12483  002B  0009               	retfie
 12484  002C                     __end_of_MainInterrupt:	
 12485                           
 12486                           	psect	text71
 12487  0B82                     __ptext71:	
 12488 ;; *************** function i1_GenerateEvt *****************
 12489 ;; Defined at:
 12490 ;;		line 73 in file "../../../Framework/MercuryFwk/Source/c/02_Osl/os_ser.c"
 12491 ;; Parameters:    Size  Location     Type
 12492 ;;  Event           1    wreg     PTR struct _EventStructu
 12493 ;;		 -> I2cReplyPacketReady(2), I2cWriteRequest(2), I2cSetAddress(2), I2cNewTxNotification(2), 
 12494 ;;		 -> I2cNewPacketNotification(2), 
 12495 ;; Auto vars:     Size  Location     Type
 12496 ;;  Event           1    1[COMMON] PTR struct _EventStructu
 12497 ;;		 -> I2cReplyPacketReady(2), I2cWriteRequest(2), I2cSetAddress(2), I2cNewTxNotification(2), 
 12498 ;;		 -> I2cNewPacketNotification(2), 
 12499 ;;  GenerateEvt     1    2[COMMON] enum E3352
 12500 ;; Return value:  Size  Location     Type
 12501 ;;                  1    wreg      enum E3348
 12502 ;; Registers used:
 12503 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 12504 ;; Tracked objects:
 12505 ;;		On entry : 0/0
 12506 ;;		On exit  : 0/0
 12507 ;;		Unchanged: 0/0
 12508 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12509 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12510 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12511 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12512 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12513 ;;Total ram usage:        3 bytes
 12514 ;; Hardware stack levels used:    1
 12515 ;; This function calls:
 12516 ;;		Nothing
 12517 ;; This function is called by:
 12518 ;;		_MainInterrupt
 12519 ;; This function uses a non-reentrant model
 12520 ;;
 12521                           
 12522                           
 12523                           ;psect for function i1_GenerateEvt
 12524  0B82                     i1_GenerateEvt:	
 12525                           
 12526                           ;incstack = 0
 12527                           ; Regs used in i1_GenerateEvt: [wreg+fsr1l+fsr1h+status,2+status,0]
 12528                           ;i1GenerateEvt@Event stored from wreg
 12529  0B82  00F1               	movwf	i1GenerateEvt@Event
 12530                           
 12531                           ;os_ser.c: 76: EventStatusType EventStatus = EventIdle;
 12532  0B83  01F2               	clrf	i1GenerateEvt@EventStatus
 12533                           
 12534                           ;os_ser.c: 78: if ((Event->EventOptions != ((UINT8)(2))) && (Event->EventOptions != ((UI
      +                          NT8)(3))))
 12535  0B84  0871               	movf	i1GenerateEvt@Event,w
 12536  0B85  0086               	movwf	6
 12537  0B86  0187               	clrf	7
 12538  0B87  3002               	movlw	2
 12539  0B88  0601               	xorwf	1,w
 12540  0B89  1903               	btfsc	3,2
 12541  0B8A  2B9E               	goto	i1l3513
 12542  0B8B  0871               	movf	i1GenerateEvt@Event,w
 12543  0B8C  0086               	movwf	6
 12544  0B8D  0187               	clrf	7
 12545  0B8E  3003               	movlw	3
 12546  0B8F  0601               	xorwf	1,w
 12547  0B90  1903               	btfsc	3,2
 12548  0B91  2B9E               	goto	i1l3513
 12549                           
 12550                           ;os_ser.c: 79: {
 12551                           ;os_ser.c: 81: Event->EventStatus = EventSent;
 12552  0B92  3002               	movlw	2
 12553  0B93  00F0               	movwf	??i1_GenerateEvt
 12554  0B94  0A71               	incf	i1GenerateEvt@Event,w
 12555  0B95  0086               	movwf	6
 12556  0B96  0187               	clrf	7
 12557  0B97  0870               	movf	??i1_GenerateEvt,w
 12558  0B98  0081               	movwf	1
 12559                           
 12560                           ;os_ser.c: 83: EventStatus = EventSent;
 12561  0B99  3002               	movlw	2
 12562  0B9A  00F0               	movwf	??i1_GenerateEvt
 12563  0B9B  0870               	movf	??i1_GenerateEvt,w
 12564  0B9C  00F2               	movwf	i1GenerateEvt@EventStatus
 12565                           
 12566                           ;os_ser.c: 84: }
 12567  0B9D  0008               	return
 12568  0B9E                     i1l3513:	
 12569                           
 12570                           ;os_ser.c: 85: else
 12571                           ;os_ser.c: 86: {
 12572                           ;os_ser.c: 88: EventStatus = EventNotSent;
 12573  0B9E  3003               	movlw	3
 12574  0B9F  00F0               	movwf	??i1_GenerateEvt
 12575  0BA0  0870               	movf	??i1_GenerateEvt,w
 12576  0BA1  00F2               	movwf	i1GenerateEvt@EventStatus
 12577  0BA2  0008               	return
 12578  0BA3                     __end_ofi1_GenerateEvt:	
 12579                           ;os_ser.c: 89: }
 12580                           ;os_ser.c: 92: return(EventStatus);
 12581                           ;	Return value of i1_GenerateEvt is never used
 12582                           
 12583  007E                     btemp	set	126	;btemp
 12584  007E                     int$flags	set	126
 12585  007E                     wtemp	set	126
 12586  007E                     wtemp0	set	126
 12587  0080                     wtemp1	set	128
 12588  0082                     wtemp2	set	130
 12589  0084                     wtemp3	set	132
 12590  0086                     wtemp4	set	134
 12591  0088                     wtemp5	set	136
 12592  007F                     wtemp6	set	127
 12593  007E                     ttemp	set	126
 12594  007E                     ttemp0	set	126
 12595  0081                     ttemp1	set	129
 12596  0084                     ttemp2	set	132
 12597  0087                     ttemp3	set	135
 12598  007F                     ttemp4	set	127
 12599  007E                     ltemp	set	126
 12600  007E                     ltemp0	set	126
 12601  0082                     ltemp1	set	130
 12602  0086                     ltemp2	set	134
 12603  0080                     ltemp3	set	128


Data Sizes:
    Strings     37
    Constant    12
    Data        45
    BSS         405
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14      6      10
    BANK0            80     56      78
    BANK1            80      6      70
    BANK2            80      0      40
    BANK3            80      0      80
    BANK4            80      0      80
    BANK5            80      0      80
    BANK6            80      0      80
    BANK7            80      0       0
    BANK8            80      0       0
    BANK9            80      0       0
    BANK10           80      0       0
    BANK11           45      0       0
    BANK12            0      0       0

Pointer List with Targets:

    Tmr6IsrCallback	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), 

    Tmr4IsrCallback	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), 

    Tmr2IsrCallback	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), 

    utoa@buf	PTR unsigned char  size(1) Largest target is 4
		 -> IrSens2Str(BANK0[1]), IrSens1Str(BANK0[1]), StdS_ManageStdServices@DieTempStr(BANK0[4]), 

    sp__itoa	PTR unsigned char  size(1) Largest target is 0

    sp__utoa	PTR unsigned char  size(1) Largest target is 4
		 -> IrSens2Str(BANK0[1]), IrSens1Str(BANK0[1]), StdS_ManageStdServices@DieTempStr(BANK0[4]), 

    StringCopy@SourceStr	PTR unsigned char  size(2) Largest target is 9
		 -> StdS_ManageStdServices@DieTempStr(BANK0[4]), STR_5(CODE[9]), STR_4(CODE[9]), STR_3(CODE[6]), 
		 -> STR_2(CODE[5]), 

    StringCopy@DestStr	PTR unsigned char  size(1) Largest target is 80
		 -> RepBuffer(BANK3[80]), 

    LedStateMachine@LedSts	PTR enum E3739 size(1) Largest target is 1
		 -> Led1Sts(BANK0[1]), 

    LedStateMachine@LedPulse	PTR struct _LedPulseType size(1) Largest target is 6
		 -> Led1Pulse(BANK1[6]), 

    LedStateMachine@LedBlink	PTR struct _LedBlinkType size(1) Largest target is 9
		 -> Led1Blink(BANK1[9]), 

    ReceiveEvt@Event	PTR struct _EventStructure size(1) Largest target is 2
		 -> I2cReplyPacketReady(BANK0[2]), I2cWriteRequest(BANK1[2]), I2cSetAddress(BANK1[2]), I2cNewTxNotification(BANK1[2]), 
		 -> I2cNewPacketNotification(BANK1[2]), 

    GenerateEvt@Event	PTR struct _EventStructure size(1) Largest target is 2
		 -> I2cReplyPacketReady(BANK0[2]), I2cWriteRequest(BANK1[2]), I2cSetAddress(BANK1[2]), I2cNewTxNotification(BANK1[2]), 
		 -> I2cNewPacketNotification(BANK1[2]), 

    S1145_SchedTblType$Task	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> App_MainTask(), Led_MainTask(), Wdg_MainTask(), I2cSlv_MainTask(), 
		 -> I2c_DataReceiveSm(), 

    TaskTable.Task	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> App_MainTask(), Led_MainTask(), Wdg_MainTask(), I2cSlv_MainTask(), 
		 -> I2c_DataReceiveSm(), 

    Tmr_TmrBConfig@TmrBConfig	PTR struct _TmrBConfigType size(1) Largest target is 6
		 -> InitSchTimer@TmrBConfig(BANK0[6]), 

    Mcu_ConfigPullUps@WpuCh	PTR struct _WpuChType size(1) Largest target is 12
		 -> App_MainTask@WpuCh(BANK0[12]), 

    Adc_InitAdcModule@AdcConfig	PTR struct _AdcCfgType size(1) Largest target is 6
		 -> App_MainTask@AdcConfig(BANK0[6]), 

    Adc_ConfigAnCh@AnChSel	PTR struct _AnalogChSelType size(1) Largest target is 8
		 -> App_MainTask@AnalogChSel(BANK0[8]), 

    LedPulseStateMachine@LedPulse	PTR struct _LedPulseType size(1) Largest target is 6
		 -> Led1Pulse(BANK1[6]), 

    LedBlinkStateMachine@LedBlink	PTR struct _LedBlinkType size(1) Largest target is 9
		 -> Led1Blink(BANK1[9]), 

    I2c_UpdateTxBuffer@DataBuffer	PTR unsigned char  size(1) Largest target is 80
		 -> RepBuffer(BANK3[80]), 

    I2c_InitI2cModule@I2cConfig	PTR struct _I2cConfig size(1) Largest target is 11
		 -> I2cConfig(BANK1[11]), 


Critical Paths under _main in COMMON

    _Tmr_TmrBConfig->_TmrBInit
    _Tmr_TmrBConfig->_Tmr_TmrBIrqSet
    _Tmr_TmrBPrSet->___wmul
    ___lmul->___wmul
    _Wdg_MainTask->_Mcu_SetWdgPeriod
    _Led_InitSeq->_Led_SetLedStatus
    _LedStateMachine->_LedBlinkStateMachine
    _LedPulseStateMachine->_Led_SetLedStatus
    _LedBlinkStateMachine->___lwdiv
    _I2c_DataReceiveSm->_ClearRxBuffer
    _I2c_DataReceiveSm->_ClearTxBuffer
    _I2c_DataReceiveSm->_ReceiveEvt
    _I2c_InitI2cModule->_ClearRxBuffer
    _I2c_InitI2cModule->_ClearTxBuffer
    _I2cSlv_I2cDrvHandle->_Led_SetLedStatus
    _I2cSlv_I2cDrvHandle->_ReceiveEvt
    _AppSm->_StdS_SetI2cAddress
    _ManageProtocol->_ReceiveEvt
    _utoa->___lwmod
    _SetLedBehavSts->_Led_SetLedPulseTime
    _SetLedBehavSts->_Led_SetLedStatus
    _LowPowerMode->_Mcu_SetWdgSts
    _GetDieTemperature->_Adc_GetConvResult
    _GetDieTemperature->_Adc_SelectChannel
    _ControlLedDirect->_Led_SetLedStatus

Critical Paths under _MainInterrupt in COMMON

    _MainInterrupt->i1_GenerateEvt

Critical Paths under _main in BANK0

    _SystemInit->_InitSchTimer
    _InitSchTimer->_Tmr_TmrBConfig
    _Tmr_TmrBConfig->_Tmr_TmrBPrSet
    _Tmr_TmrBPrSet->___lmul
    ___lmul->___wmul
    _MainScheduler->_InitializeTasks
    _MainScheduler->_ScheduleTasks
    _ScheduleTasks->_App_MainTask
    _InitializeTasks->_App_MainTask
    _Led_InitSeq->_Led_SetLedStatus
    _LedStateMachine->_LedPulseStateMachine
    _LedPulseStateMachine->___lwdiv
    _LedBlinkStateMachine->___lwdiv
    _I2cSlv_I2cDrvHandle->_I2c_UpdateTxBuffer
    _App_MainTask->_AppSm
    _AppSm->_ManageProtocol
    _ManageProtocol->_StdS_ManageStdServices
    _StdS_ManageStdServices->_utoa
    _utoa->___lwdiv
    _SetLedBehavSts->_Led_SetLedBlinkTime
    _GetDieTemperature->_Adc_GetConvResult
    _ControlLedDirect->_Led_SetLedStatus

Critical Paths under _MainInterrupt in BANK0

    None.

Critical Paths under _main in BANK1

    _MainScheduler->_ScheduleTasks

Critical Paths under _MainInterrupt in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _MainInterrupt in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _MainInterrupt in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _MainInterrupt in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _MainInterrupt in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _MainInterrupt in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _MainInterrupt in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _MainInterrupt in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _MainInterrupt in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _MainInterrupt in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _MainInterrupt in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _MainInterrupt in BANK12

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0   49676
                      _MainScheduler
                         _SystemInit
 ---------------------------------------------------------------------------------
 (1) _SystemInit                                           0     0      0    3264
                       _InitSchTimer
               _Mcu_EnableInterrupts
                     _Mcu_InitIntOsc
 ---------------------------------------------------------------------------------
 (2) _Mcu_InitIntOsc                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _Mcu_EnableInterrupts                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _InitSchTimer                                         7     7      0    3264
                                             37 BANK0      7     7      0
                     _Tmr_TmrBConfig
 ---------------------------------------------------------------------------------
 (3) _Tmr_TmrBConfig                                       3     2      1    3061
                                             34 BANK0      3     2      1
                           _TmrBInit
                       _Tmr_StartTmr
                     _Tmr_TmrBIrqSet
                      _Tmr_TmrBPrSet
 ---------------------------------------------------------------------------------
 (4) _Tmr_TmrBPrSet                                       18    14      4    2003
                                             16 BANK0     18    14      4
                            ___lldiv
                             ___lmul
                             ___wmul
 ---------------------------------------------------------------------------------
 (5) ___wmul                                               6     2      4     404
                                              4 COMMON     2     2      0
                                              0 BANK0      4     0      4
 ---------------------------------------------------------------------------------
 (5) ___lmul                                              12     4      8     220
                                              4 BANK0     12     4      8
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (5) ___lldiv                                             14     6      8     857
                                              4 COMMON     1     1      0
                                              0 BANK0     13     5      8
 ---------------------------------------------------------------------------------
 (4) _Tmr_TmrBIrqSet                                       2     1      1     216
                                              4 COMMON     2     1      1
 ---------------------------------------------------------------------------------
 (4) _Tmr_StartTmr                                         1     1      0      22
                                              4 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (4) _TmrBInit                                             4     2      2     371
                                              4 COMMON     2     0      2
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _MainScheduler                                        0     0      0   46412
                    _InitializeTasks
                      _ScheduleTasks
 ---------------------------------------------------------------------------------
 (2) _ScheduleTasks                                        7     7      0   23299
                                             55 BANK0      1     1      0
                                              0 BANK1      6     6      0
                       _App_MainTask *
                    _I2cSlv_MainTask *
                  _I2c_DataReceiveSm *
                       _Led_MainTask *
                       _Wdg_MainTask *
 ---------------------------------------------------------------------------------
 (2) _InitializeTasks                                      5     5      0   23113
                                             55 BANK0      1     1      0
                                              0 BANK1      4     4      0
                       _App_MainTask *
                    _I2cSlv_MainTask *
                  _I2c_DataReceiveSm *
                       _Led_MainTask *
                       _Wdg_MainTask *
 ---------------------------------------------------------------------------------
 (3) _Wdg_MainTask                                         1     0      1      44
                                             27 BANK0      1     0      1
                       _Mcu_ClearWdg
                   _Mcu_SetWdgPeriod
                      _Mcu_SetWdgSts
 ---------------------------------------------------------------------------------
 (4) _Mcu_SetWdgPeriod                                     2     2      0      22
                                              4 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (4) _Mcu_ClearWdg                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _Led_MainTask                                         5     4      1    6575
                                             27 BANK0      5     4      1
                    _LedStateMachine
                        _Led_InitSeq
                     _SetLedBehavSts
 ---------------------------------------------------------------------------------
 (4) _Led_InitSeq                                          1     1      0     832
                                              1 BANK0      1     1      0
                   _Led_SetLedStatus
 ---------------------------------------------------------------------------------
 (4) _LedStateMachine                                      7     4      3    4494
                                             11 BANK0      7     4      3
               _LedBlinkStateMachine
               _LedPulseStateMachine
 ---------------------------------------------------------------------------------
 (5) _LedPulseStateMachine                                 4     3      1    2439
                                              7 BANK0      4     3      1
                   _Led_SetLedStatus
                            ___lwdiv
 ---------------------------------------------------------------------------------
 (5) _LedBlinkStateMachine                                 3     3      0    1654
                                              5 COMMON     1     1      0
                                              7 BANK0      2     2      0
                            ___lwdiv
 ---------------------------------------------------------------------------------
 (3) _I2c_DataReceiveSm                                    9     8      1    1162
                                             27 BANK0      9     8      1
                     _CheckAckStatus
                    _CheckByteStatus
                 _CheckStopBitStatus
                      _ClearRxBuffer
                      _ClearTxBuffer
                        _GenerateEvt
                          _Mcu_Reset
                         _ReceiveEvt
 ---------------------------------------------------------------------------------
 (4) _CheckStopBitStatus                                   1     1      0       0
                                              4 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (4) _CheckByteStatus                                      1     1      0       0
                                              4 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (4) _CheckAckStatus                                       1     1      0       0
                                              4 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (3) _I2cSlv_MainTask                                      1     0      1    2707
                                             27 BANK0      1     0      1
                _I2cSlv_I2cDrvHandle
                  _I2c_InitI2cModule
                      _I2c_SetConfig
 ---------------------------------------------------------------------------------
 (4) _I2c_SetConfig                                        1     1      0       0
                                              4 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (4) _I2c_InitI2cModule                                    3     3      0     572
                                              0 BANK0      3     3      0
                      _ClearRxBuffer
                      _ClearTxBuffer
 ---------------------------------------------------------------------------------
 (4) _ClearTxBuffer                                        2     2      0      99
                                              4 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (4) _ClearRxBuffer                                        2     2      0      99
                                              4 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (4) _I2cSlv_I2cDrvHandle                                  6     6      0    2135
                                              4 BANK0      6     6      0
                        _GenerateEvt
                  _I2c_SetI2cAddress
              _I2c_SetI2cAddressMask
                 _I2c_UpdateTxBuffer
                   _Led_SetLedStatus
                         _ReceiveEvt
 ---------------------------------------------------------------------------------
 (5) _I2c_UpdateTxBuffer                                   5     4      1     274
                                              4 COMMON     1     0      1
                                              0 BANK0      4     4      0
 ---------------------------------------------------------------------------------
 (5) _I2c_SetI2cAddressMask                                1     1      0      31
                                              4 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (5) _I2c_SetI2cAddress                                    1     1      0      31
                                              4 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (3) _App_MainTask                                        28    27      1   12492
                                             27 BANK0     28    27      1
                     _Adc_ConfigAnCh
                  _Adc_InitAdcModule
                              _AppSm
                       _GetIrSensSts
                        _Int0Trigger
                  _Mcu_ConfigPullUps
                 _Mcu_SetDieTempMode
                  _Mcu_SetDieTempSts
                  _Mcu_SetPullUpsSts
 ---------------------------------------------------------------------------------
 (4) _Mcu_SetPullUpsSts                                    1     1      0      22
                                              4 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (4) _Mcu_SetDieTempSts                                    1     1      0      22
                                              4 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (4) _Mcu_SetDieTempMode                                   1     1      0      22
                                              4 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (4) _Mcu_ConfigPullUps                                    1     1      0     294
                                              4 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (4) _Int0Trigger                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (4) _GetIrSensSts                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (4) _AppSm                                                1     1      0   11143
                                             26 BANK0      1     1      0
                        _GenerateEvt
                     _ManageProtocol
                 _StdS_SetI2cAddress
 ---------------------------------------------------------------------------------
 (5) _StdS_SetI2cAddress                                   2     2      0       0
                                              4 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (5) _ManageProtocol                                       2     2      0   10638
                                             24 BANK0      2     2      0
                        _GenerateEvt
                         _ReceiveEvt
             _StdS_ManageStdServices
                               _utoa
 ---------------------------------------------------------------------------------
 (6) _StdS_ManageStdServices                               8     8      0    7031
                                             16 BANK0      8     8      0
                         _BoardReset
                   _ControlLedDirect
                        _GenerateEvt
                  _GetDieTemperature
                       _LowPowerMode
                     _SetLedBehavSts
                         _StringCopy
                               _utoa
 ---------------------------------------------------------------------------------
 (6) _utoa                                                 9     5      4    2773
                                              7 BANK0      9     5      4
                            ___lwdiv
                            ___lwmod
 ---------------------------------------------------------------------------------
 (7) ___lwmod                                              6     2      4     500
                                              4 COMMON     2     2      0
                                              0 BANK0      4     0      4
 ---------------------------------------------------------------------------------
 (6) ___lwdiv                                              8     4      4    1125
                                              4 COMMON     1     1      0
                                              0 BANK0      7     3      4
 ---------------------------------------------------------------------------------
 (7) _StringCopy                                           9     5      4    1350
                                              4 COMMON     1     1      0
                                              0 BANK0      8     4      4
 ---------------------------------------------------------------------------------
 (4) _SetLedBehavSts                                       2     2      0    1249
                                              4 BANK0      2     2      0
                _Led_SetLedBlinkTime
                _Led_SetLedPulseTime
                   _Led_SetLedStatus
 ---------------------------------------------------------------------------------
 (5) _Led_SetLedPulseTime                                  3     1      2     139
                                              4 COMMON     2     0      2
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (5) _Led_SetLedBlinkTime                                  5     1      4     247
                                              4 COMMON     1     1      0
                                              0 BANK0      4     0      4
 ---------------------------------------------------------------------------------
 (7) _LowPowerMode                                         0     0      0      22
                      _Mcu_SetWdgSts
 ---------------------------------------------------------------------------------
 (4) _Mcu_SetWdgSts                                        1     1      0      22
                                              4 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (7) _GetDieTemperature                                    4     2      2      90
                                              3 BANK0      4     2      2
                  _Adc_GetConvResult
                     _Adc_GetConvSts
                  _Adc_SelectChannel
                _Adc_StartConversion
 ---------------------------------------------------------------------------------
 (8) _Adc_StartConversion                                  0     0      0       0
 ---------------------------------------------------------------------------------
 (8) _Adc_SelectChannel                                    2     2      0      22
                                              4 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (8) _Adc_GetConvSts                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (8) _Adc_GetConvResult                                    5     3      2      34
                                              4 COMMON     2     0      2
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (4) _GenerateEvt                                          3     3      0     505
                                              4 COMMON     1     1      0
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (7) _ControlLedDirect                                     0     0      0     832
                   _Led_SetLedStatus
 ---------------------------------------------------------------------------------
 (5) _Led_SetLedStatus                                     3     2      1     832
                                              4 COMMON     2     1      1
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (7) _BoardReset                                           0     0      0       0
                          _Mcu_Reset
 ---------------------------------------------------------------------------------
 (4) _Mcu_Reset                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (4) _ReceiveEvt                                           2     2      0     329
                                              4 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (4) _Adc_InitAdcModule                                    1     1      0     162
                                              4 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (4) _Adc_ConfigAnCh                                       1     1      0     206
                                              4 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 8
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (9) _MainInterrupt                                        1     1      0      75
                                              3 COMMON     1     1      0
                      i1_GenerateEvt
 ---------------------------------------------------------------------------------
 (10) i1_GenerateEvt                                       3     3      0      75
                                              0 COMMON     3     3      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 10
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _MainScheduler
     _InitializeTasks
       _App_MainTask *
         _Adc_ConfigAnCh
         _Adc_InitAdcModule
         _AppSm
           _GenerateEvt
           _ManageProtocol
             _GenerateEvt
             _ReceiveEvt
             _StdS_ManageStdServices
               _BoardReset
                 _Mcu_Reset
               _ControlLedDirect
                 _Led_SetLedStatus
               _GenerateEvt
               _GetDieTemperature
                 _Adc_GetConvResult
                 _Adc_GetConvSts
                 _Adc_SelectChannel
                 _Adc_StartConversion
               _LowPowerMode
                 _Mcu_SetWdgSts
               _SetLedBehavSts
                 _Led_SetLedBlinkTime
                 _Led_SetLedPulseTime
                 _Led_SetLedStatus
               _StringCopy
               _utoa
                 ___lwdiv
                 ___lwmod
             _utoa
               ___lwdiv
               ___lwmod
           _StdS_SetI2cAddress
         _GetIrSensSts
         _Int0Trigger
         _Mcu_ConfigPullUps
         _Mcu_SetDieTempMode
         _Mcu_SetDieTempSts
         _Mcu_SetPullUpsSts
       _I2cSlv_MainTask *
         _I2cSlv_I2cDrvHandle
           _GenerateEvt
           _I2c_SetI2cAddress
           _I2c_SetI2cAddressMask
           _I2c_UpdateTxBuffer
           _Led_SetLedStatus
           _ReceiveEvt
         _I2c_InitI2cModule
           _ClearRxBuffer
           _ClearTxBuffer
         _I2c_SetConfig
       _I2c_DataReceiveSm *
         _CheckAckStatus
         _CheckByteStatus
         _CheckStopBitStatus
         _ClearRxBuffer
         _ClearTxBuffer
         _GenerateEvt
         _Mcu_Reset
         _ReceiveEvt
       _Led_MainTask *
         _LedStateMachine
           _LedBlinkStateMachine
             ___lwdiv
           _LedPulseStateMachine
             _Led_SetLedStatus
             ___lwdiv
         _Led_InitSeq
           _Led_SetLedStatus
         _SetLedBehavSts
           _Led_SetLedBlinkTime
           _Led_SetLedPulseTime
           _Led_SetLedStatus
       _Wdg_MainTask *
         _Mcu_ClearWdg
         _Mcu_SetWdgPeriod
         _Mcu_SetWdgSts
     _ScheduleTasks
       _App_MainTask *
         _Adc_ConfigAnCh
         _Adc_InitAdcModule
         _AppSm
           _GenerateEvt
           _ManageProtocol
             _GenerateEvt
             _ReceiveEvt
             _StdS_ManageStdServices
               _BoardReset
                 _Mcu_Reset
               _ControlLedDirect
                 _Led_SetLedStatus
               _GenerateEvt
               _GetDieTemperature
                 _Adc_GetConvResult
                 _Adc_GetConvSts
                 _Adc_SelectChannel
                 _Adc_StartConversion
               _LowPowerMode
                 _Mcu_SetWdgSts
               _SetLedBehavSts
                 _Led_SetLedBlinkTime
                 _Led_SetLedPulseTime
                 _Led_SetLedStatus
               _StringCopy
               _utoa
                 ___lwdiv
                 ___lwmod
             _utoa
               ___lwdiv
               ___lwmod
           _StdS_SetI2cAddress
         _GetIrSensSts
         _Int0Trigger
         _Mcu_ConfigPullUps
         _Mcu_SetDieTempMode
         _Mcu_SetDieTempSts
         _Mcu_SetPullUpsSts
       _I2cSlv_MainTask *
         _I2cSlv_I2cDrvHandle
           _GenerateEvt
           _I2c_SetI2cAddress
           _I2c_SetI2cAddressMask
           _I2c_UpdateTxBuffer
           _Led_SetLedStatus
           _ReceiveEvt
         _I2c_InitI2cModule
           _ClearRxBuffer
           _ClearTxBuffer
         _I2c_SetConfig
       _I2c_DataReceiveSm *
         _CheckAckStatus
         _CheckByteStatus
         _CheckStopBitStatus
         _ClearRxBuffer
         _ClearTxBuffer
         _GenerateEvt
         _Mcu_Reset
         _ReceiveEvt
       _Led_MainTask *
         _LedStateMachine
           _LedBlinkStateMachine
             ___lwdiv
           _LedPulseStateMachine
             _Led_SetLedStatus
             ___lwdiv
         _Led_InitSeq
           _Led_SetLedStatus
         _SetLedBehavSts
           _Led_SetLedBlinkTime
           _Led_SetLedPulseTime
           _Led_SetLedStatus
       _Wdg_MainTask *
         _Mcu_ClearWdg
         _Mcu_SetWdgPeriod
         _Mcu_SetWdgSts
   _SystemInit
     _InitSchTimer
       _Tmr_TmrBConfig
         _TmrBInit
         _Tmr_StartTmr
         _Tmr_TmrBIrqSet
         _Tmr_TmrBPrSet
           ___lldiv
           ___lmul
             ___wmul (ARG)
           ___wmul
     _Mcu_EnableInterrupts
     _Mcu_InitIntOsc

 _MainInterrupt (ROOT)
   i1_GenerateEvt

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             3F0      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            E      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               E      6       A       2       71.4%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0       0       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50     38      4E       5       97.5%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BANK1               50      6      46       7       87.5%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BITBANK2            50      0       0       8        0.0%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
BANK2               50      0      28       9       50.0%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
BITBANK3            50      0       0      10        0.0%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BANK3               50      0      50      11      100.0%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
BITBANK4            50      0       0      12        0.0%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BANK4               50      0      50      13      100.0%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BITBANK5            50      0       0      14        0.0%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
BANK5               50      0      50      15      100.0%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
BITBANK6            50      0       0      16        0.0%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
BANK6               50      0      50      17      100.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BITBANK7            50      0       0      18        0.0%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BANK7               50      0       0      19        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
ABS                  0      0     206      20        0.0%
BITBANK8            50      0       0      21        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BANK8               50      0       0      22        0.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BITBANK9            50      0       0      23        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BANK9               50      0       0      24        0.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BITBANK10           50      0       0      25        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BANK10              50      0       0      26        0.0%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BITBANK11           50      0       0      27        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BANK11              2D      0       0      28        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
BITBANK12           30      0       0      29        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BANK12               0      0       0      30        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
DATA                 0      0     206      31        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%


Microchip Technology PIC Macro Assembler V1.38 build -256452561 
Symbol Table                                                                                   Sat Oct 19 09:48:17 2019

                                    pc 0002                       _Mcu_SetWdgPeriod 0A0D  
                          __CFG_CP$OFF 0000             __end_of_I2c_UpdateTxBuffer 0B82  
                ?_LedPulseStateMachine 0027                 __end_of_Mcu_InitIntOsc 09B5  
           __size_of_GetDieTemperature 0019                 ??_LedBlinkStateMachine 0027  
                  ___wmul@multiplicand 0022            __size_of_CheckStopBitStatus 000A  
                 __end_of_App_MainTask 0782                                    l310 05CF  
                                  l311 05D2                                    l137 0188  
                                  l234 09B2                                    l323 0612  
                                  l316 05EC                                    l308 05CD  
                                  l325 0615                                    l333 0C5C  
                                  l341 03FD         __end_of_StdS_ManageStdServices 0287  
                                  l326 0619                                    l318 05EF  
                                  l319 05F3                                    l335 0C65  
                                  l336 0C6E                                    l329 0644  
                                  l353 0B07                                    l530 0AEE  
                                  l338 0C82                                    l611 0D43  
                                  l355 0B0A                                    l356 0B0D  
                                  l365 0EAC                                    l622 0A62  
                                  l358 0B1B                                    l607 0F06  
                                  l615 0D74                                    l552 05C9  
                                  l636 0A82                                    l629 0B64  
                                  l807 0B04                                    l584 0D17  
                                  l914 0C59                                    l922 073A  
                                  l748 0E22                                    l782 0286  
                                  l926 0781                                    l895 0FFF  
                                  l898 0A52                                    _PR2 001B  
                                  _PR4 0416                           __CFG_CPD$OFF 0000  
                                  _PR6 041D                           __CFG_BORV$LO 0000  
                                  wreg 0009                           __CFG_IESO$ON 0000  
                     ??_SetLedBehavSts 0024                                   S4385 0800  
               Mcu_SetPullUpsSts@PuSts 0074                        ??_MainInterrupt 0073  
                         __CFG_LVP$OFF 0000                        ??_MainScheduler 0076  
                 __end_of_GetIrSensSts 09EF                                   l1064 07ED  
                                 l1336 07CE                                   l4003 0638  
                                 l4013 03A6                                   l4021 03EE  
                                 l4031 0540                                   l4015 03BD  
                                 l4023 03FA                                   l3129 0B10  
                                 l4025 03FF                                   l4017 03D5  
                                 l4131 0C4A                                   l4051 0576  
                                 l4043 0568                                   l4115 0EFA  
                                 l3411 0AF8                                   l4203 0149  
                                 l4037 0552                                   l4221 017D  
                                 l4213 0162                                   l4127 0C41  
                                 l4119 0C32                                   l4135 0C4D  
                                 l4063 05A4                                   l3415 0AFB  
                                 l4215 0168                                   l4151 00C0  
                                 l4231 018D                                   l4303 0778  
                                 l4057 0594                                   l4073 05C0  
                                 l4081 0D22                                   l3409 0AF0  
                                 l4225 0182                                   l4209 0153  
                                 l4153 00C2                                   l4171 00E2  
                                 l4139 00A3                                   l4331 033C  
                                 l3099 0C77                                   l4243 0E8B  
                                 l4077 0D15                                   l4085 0D2F  
                                 l4093 0EBA                                   l4253 0ADB  
                                 l4261 0AE5                                   l3615 0D9C  
                                 l3607 0D7E                                   l3631 0C8A  
                                 l4079 0D1A                                   l4087 0D40  
                                 l4183 0103                                   l4159 00CA  
                                 l3609 0D8A                                   l3633 0C96  
                                 l3641 0CAB                                   l4097 0EC6  
                                 l4185 0108                                   l4169 00DD  
                                 l4257 0AE2                                   l4273 0D6B  
                                 l4329 0318                                   l3619 0DA5  
                                 l4267 0D4B                                   l4355 0AA9  
                                 l3573 0A5D                                   l3661 0DE4  
                                 l3637 0CA2                                   l3709 0788  
                                 l3813 0265                                   l3901 0707  
                                 l4197 0127                                   l2941 0CB9  
                                 l3751 0BC2                                   l3655 0BE1  
                                 l3583 0B4E                                   l3591 0A76  
                                 l3719 07A6                                   l3911 0FB3  
                                 l3903 0716                                   l3569 0A58  
                                 l3673 0E0F                                   l3665 0DEA  
                                 l4297 076F                                   l2945 0CC3  
                                 l3587 0B5F                                   l3595 0A7C  
                                 l3763 01B3                                   l3749 0BC1  
                                 l3693 0AC1                                   l3669 0DF4  
                                 l3677 0E14                                   l3685 0BE8  
                                 l3781 01FE                                   l3757 019A  
                                 l3917 0FC0                                   l3853 04AF  
                                 l3933 07E6                                   l3783 0201  
                                 l3775 01E5                                   l3951 0F66  
                                 l3785 0204                                   l3769 01CC  
                                 l3929 0FF5                                   l3849 0B69  
                                 l3865 04FA                                   l3857 04BD  
                                 l3961 0F94                                   l3953 0F74  
                                 l3699 0B3A                                   l3787 0209  
                                 l3875 052D                                   l3883 06B7  
                                 l3789 020C                                   l3877 0538  
                                 l3885 06C1                                   l3965 0F9F  
                                 l3799 0228                                   l3895 06FD  
                                 l3991 05F7                                   l3993 0602  
                                 l3985 05D5                                   l3987 05E0  
                                 l3997 061D                                   l3999 0628  
                                 STR_1 101E                                   STR_2 102C  
                                 STR_3 1026                                   STR_4 100C  
                                 STR_5 1015                                   u3005 0475  
                                 _LATA 010C                                   u3015 049A  
                                 _LATC 010E                                   u3140 0ED7  
                                 u3150 0ED8                                   u1625 0CE8  
                                 u1705 0CC4                                   u3330 0727  
                                 u2515 0D8B                                   u1635 0CF7  
                                 u1715 0CCB                                   u3340 0735  
                                 u2525 0D95                                   u1805 09F3  
                                 u3405 02A5                                   u2535 0D9D  
                                 u1815 09FD                                   u3415 02B8  
                                 u1825 0A07                                   u3425 02CC  
                                 u3355 0F1E                                   u3435 02D3  
                                 u2565 0C8D                                   u3365 0F25  
                                 u3445 02E5                                   u2495 0D81  
                                 u2815 051F                                   u3375 0F38  
                                 u3455 02F6                                   u2585 0C9C  
                                 u2825 06E8                                   u3465 0309  
                                 u2595 0CA3                                   u3475 031D  
                                 u3395 029E                                   u2915 0F75  
                                 u3485 0331                                   u2925 0F89  
                                 u2935 0F95                                   u2855 07EE  
                                 u2865 07F3                                   u2955 0416  
                                 u2795 04EB                                   u2965 0431  
                                 u2975 0442                                   u2895 0F69  
                                 u2985 0453                                   u2995 0464  
                                 _WPUA 020C                                   _WPUC 020E  
                         __CFG_WRT$OFF 0000                          __CFG_FCMEN$ON 0000  
          Led_SetLedBlinkTime@OnTimeMs 0020                                   _main 09B5  
                                 fsr0h 0005                                   fsr1h 0007  
                                 fsr0l 0004                                   indf0 0000  
                                 indf1 0001                                   fsr1l 0006  
                  __end_of_Led_InitSeq 0F07                                   btemp 007E  
                      _I2cSlaveAddress 0076                                   _utoa 0782  
         __size_of_Led_SetLedPulseTime 0010                          __CFG_BOREN$ON 0000  
                                 ltemp 007E                      _Mcu_SetPullUpsSts 09D4  
                                 start 002C                                   ttemp 007E  
                                 wtemp 007E                     AppSm@WpuSetCounter 0059  
                  __end_of_Int0Trigger 0A55                    __end_of_GenerateEvt 0BE6  
                        ?_InitSchTimer 0070                         ??_Mcu_ClearWdg 0074  
                       ?_Mcu_SetWdgSts 0070                             _BoardReset 0994  
           __size_of_Mcu_SetDieTempSts 0008                          __CFG_MCLRE$ON 0000  
                   ?_Mcu_SetPullUpsSts 0070                    StringCopy@SourceStr 0020  
                      ?_Mcu_InitIntOsc 0070                          __CFG_PLLEN$ON 0000  
                  ??_Mcu_SetPullUpsSts 0074                                  ?_main 0070  
                      __end_of___lldiv 0FA8                                  ?_utoa 0027  
                      __end_of___lwdiv 0DAA                        __end_of___lwmod 0CB0  
                                i1l393 0027           Led_SetLedBlinkTime@OffTimeMs 0022  
            Mcu_SetWdgPeriod@WdgPeriod 0075                __end_of_LedStateMachine 0D42  
                                _AppSm 0C31                    ___lmul@multiplicand 0028  
           __size_of_I2c_SetI2cAddress 0005                             _IrSens1Str 006C  
                           _IrSens2Str 006D                       ??_Adc_GetConvSts 0074  
                 __end_of_Led_MainTask 0D75           LedPulseStateMachine@LedPulse 002A  
                      __end_of_dpowers 100A                                  pclath 000A  
                                ltemp0 007E                                  ltemp1 0082  
                                ltemp2 0086                                  ltemp3 0080  
            __end_of_Mcu_SetPullUpsSts 09DC                                  ttemp0 007E  
                                ttemp1 0081                                  ttemp2 0084  
                                ttemp3 0087                                  ttemp4 007F  
                                utoa@c 002E                                  utoa@v 002C  
                                status 0003                        _I2cSlv_MainTask 0ADA  
                                wtemp0 007E                                  wtemp1 0080  
                                wtemp2 0082                                  wtemp3 0084  
                                wtemp4 0086                                  wtemp5 0088  
                                wtemp6 007F                       ??_Adc_ConfigAnCh 0074  
                       ??_InitSchTimer 0045            __size_of_Mcu_SetDieTempMode 0008  
              LedStateMachine@LedBlink 002C                        __initialization 002E  
                    _I2c_DataReceiveSm 00A2                LedStateMachine@LedPulse 002D  
     StdS_ManageStdServices@DieTempStr 0032                           __end_of_main 09BC  
               ??_LedPulseStateMachine 0028                           __end_of_utoa 07E4  
                        AppSm@AppState 0058                     ?_I2c_DataReceiveSm 003B  
                               ??_main 0076                                 ??_utoa 002B  
       __size_of_I2c_SetI2cAddressMask 0005                       __end_of_TmrBInit 0645  
                           _ReceiveEvt 0BA3          __end_of_I2c_SetI2cAddressMask 09AE  
                  ??_I2c_DataReceiveSm 003C                                 ?_AppSm 0070  
                    ?_Led_SetLedStatus 0074               I2cSlv_I2cDrvHandle@Index 0029  
                      ReceiveEvt@Event 0075                            _Led_InitSeq 0EB9  
                               _ADRESH 009C                                 _ADRESL 009B  
                   ??_Led_SetLedStatus 0075                       ??_ManageProtocol 0038  
                               _ANSELA 018C                                 _ANSELC 018E  
                          _Int0Trigger 0A48                                 i1l3513 0B9E  
                               i1l3533 001D                            _GenerateEvt 0BC4  
                   __size_of_Mcu_Reset 0002                             _TaskNumber 100A  
                  App_MainTask@Options 003B                        ??_Mcu_SetWdgSts 0074  
        I2c_DataReceiveSm@I2cRxAddress 005D              __end_of_I2c_DataReceiveSm 0199  
                       __CFG_PWRTE$OFF 0000                            ?_BoardReset 0070  
         __end_of_Mcu_EnableInterrupts 099D                  __size_of_App_MainTask 0066  
                               ___lmul 0CB0                        _LedBehaviourSts 0079  
                               ___wmul 07E4                         __CFG_STVREN$ON 0000  
                  _Led_SetLedBlinkTime 0B4C                              ??___lldiv 0074  
                            ??___lwdiv 0074                 Tmr_TmrBPrSet@IntFreqHz 0030  
                            ??___lwmod 0074            GetDieTemperature@DieTempRes 0025  
            __size_of_ControlLedDirect 0013                        _CheckByteStatus 09F9  
                    _Adc_InitAdcModule 0DAA                           __pdataCOMMON 0078  
                __size_of_GetIrSensSts 000A                     ?_Adc_InitAdcModule 0070  
          __end_of_I2cSlv_I2cDrvHandle 05CA                       ?_LedStateMachine 002B  
                        ?_LowPowerMode 0070                 Adc_SelectChannel@SelCh 0075  
                 __end_of_Mcu_ClearWdg 0994                __end_of_I2cSlv_MainTask 0AEF  
                 ?_Led_SetLedBlinkTime 0020                 __size_of_ScheduleTasks 00C4  
             __end_of_Mcu_SetWdgPeriod 0A18                    ??_Adc_InitAdcModule 0074  
                __end_ofi1_GenerateEvt 0BA3             __size_of_Mcu_SetPullUpsSts 0008  
                        ?_Wdg_MainTask 003B                __end_of__initialization 009E  
               Tmr_TmrBPrSet@Prescaler 0032                           _App_MainTask 071C  
               InitSchTimer@TmrBConfig 0046                             _StringCopy 0BE6  
                        __end_of_AppSm 0C5A                         __pcstackCOMMON 0070  
             LedStateMachine@LedOutSts 0031           __size_of_Adc_StartConversion 0003  
                         __pidataBANK0 099D                           __pidataBANK2 0C09  
                         _GetIrSensSts 09E5              __end_of_Adc_InitAdcModule 0DE1  
             __size_of_InitializeTasks 004E                      __end_of_Mcu_Reset 0992  
                LedStateMachine@LedSts 002B                     LedStateMachine@Led 0030  
                __size_of_Led_MainTask 0033                    _Led_SetLedPulseTime 0A73  
                __end_of_I2c_SetConfig 0ADA                            ?_ReceiveEvt 0070  
             _I2cNewPacketNotification 00D8                         ??_LowPowerMode 0075  
                       _OPTION_REGbits 0095                             _SystemInit 09DC  
                 __end_of_InitSchTimer 0B33                                ??_AppSm 003A  
        StdS_ManageStdServices@DieTemp 0036                  __end_of_Tmr_TmrBPrSet 0401  
                  __size_of_BoardReset 0003            __size_of_StdS_SetI2cAddress 0031  
                ??_Led_SetLedBlinkTime 0074                     _I2c_UpdateTxBuffer 0B65  
                           __pbssBANK0 0058                             __pbssBANK1 00A0  
                           __pbssBANK3 01A0                             __pbssBANK4 0220  
                           __pbssBANK5 02A0                             __pbssBANK6 0320  
                       ??_Wdg_MainTask 0076                    ?_I2c_UpdateTxBuffer 0074  
                 ?_Led_SetLedPulseTime 0074                      _Mcu_ConfigPullUps 0645  
           __size_of_I2c_DataReceiveSm 00F7                              ?_TmrBInit 0074  
                   ?_Mcu_ConfigPullUps 0070                       ??_Mcu_InitIntOsc 0074  
              __size_of_Tmr_TmrBConfig 004B                             __pmaintext 09B5  
              __end_of_CheckByteStatus 0A03                __size_of_Tmr_TmrBIrqSet 0029  
                              ?___lmul 0024                           _Led_MainTask 0D42  
                              ?___wmul 0020                          _ScheduleTasks 0287  
           __end_of_CheckStopBitStatus 0A0D                             __pintentry 0004  
                   ClearRxBuffer@Index 0075                    ??_Mcu_ConfigPullUps 0074  
                       ___lmul@product 002C                __size_of_CheckAckStatus 000A  
                 ??_I2c_UpdateTxBuffer 0020               i1GenerateEvt@EventStatus 0072  
        __size_of_LedBlinkStateMachine 0090                    Wdg_MainTask@Options 003B  
               __size_of_ClearRxBuffer 0010                                _SSP1ADD 0212  
                 _Mcu_EnableInterrupts 099A                 __size_of_ClearTxBuffer 0010  
                              _SSP1BUF 0211                                _SSP1MSK 0213  
                     ?_I2cSlv_MainTask 003B                        _I2cWriteRequest 00DE  
       Led_SetLedPulseTime@PulseTimeMs 0074                  __end_of_MainInterrupt 002C  
                __end_of_MainScheduler 0AB3                                _Led1Sts 006A  
            __end_of_Mcu_ConfigPullUps 06B4                  ??_Led_SetLedPulseTime 0076  
                              _IrSens1 0065                                _IrSens2 0066  
        I2c_DataReceiveSm@ErrorCounter 005C                            ?_StringCopy 0020  
                  __size_of_ReceiveEvt 0021                             ??_TmrBInit 0020  
                       ?_ScheduleTasks 0070                        __size_of___lmul 0030  
                              ___lldiv 0F55                        __size_of___wmul 001C  
                              ___lwdiv 0D75                                ___lwmod 0C83  
           __size_of_Adc_InitAdcModule 0037                       _ControlLedDirect 0AB3  
                            _I2cConfig 00BE                              _I2cPacket 239D  
                Tmr_TmrBIrqSet@TmrNumb 0075                                __ptext1 09DC  
                              __ptext2 09AE                                __ptext3 099A  
                              __ptext4 0B1C                                __ptext5 0E6E  
                              __ptext6 034B                                __ptext7 07E4  
                              __ptext8 0CB0                                __ptext9 0F55  
                __size_of_Mcu_ClearWdg 0002                                _dpowers 1000  
                            _T2CONbits 001C                          ?_Tmr_StartTmr 0070  
                          ?_SystemInit 0070                      ??_InitializeTasks 00E0  
                            _T4CONbits 0417                        _Tmr2IsrCallback 00B8  
                ?_Mcu_EnableInterrupts 0070                              _T6CONbits 041E  
        I2c_SetI2cAddress@SlaveAddress 0074                           ?_Led_InitSeq 0070  
                  Mcu_SetWdgSts@WdgSts 0074                                clrloop0 0A31  
                 end_of_initialization 009E                           ?_Int0Trigger 0070  
                         ?_GenerateEvt 0070                 _MainSystemTimebaseFlag 006B  
                              init_ram 0A3C             __end_of_Mcu_SetDieTempMode 09CC  
                              initloop 0A3D                __size_of_SetLedBehavSts 0042  
                      ___lldiv@divisor 0020              __size_of_Led_SetLedStatus 000E  
                 __end_of_LowPowerMode 0A30                           ??_BoardReset 0074  
                      ___lldiv@counter 002C                          _ClearRxBuffer 0A83  
                        _ClearTxBuffer 0A93                          StringCopy@Len 0023  
                     ?_CheckByteStatus 0070                           _Mcu_ClearWdg 0992  
             ??_StdS_ManageStdServices 0030                           __pstringtext 1000  
                              utoa@buf 002F                                utoa@val 0027  
        __size_of_LedPulseStateMachine 0068                  __size_of_InitSchTimer 0017  
                 __end_of_Wdg_MainTask 0B05                              _PORTAbits 000C  
                            _PORTCbits 000E          Mcu_SetDieTempMode@DieTempMode 0074  
                       ??_Tmr_StartTmr 0074                       _InterruptCounter 00B6  
                     __CFG_FOSC$INTOSC 0000                      StringCopy@DestStr 0022  
                      _Tmr4IsrCallback 00BA                              _TRISAbits 008C  
                            _TRISCbits 008E                    __size_of_StringCopy 0023  
                _I2c_SetI2cAddressMask 09A9                    _Adc_StartConversion 0997  
                   __end_of_BoardReset 0997            I2c_DataReceiveSm@I2cRxState 005F  
                    ?_Mcu_SetWdgPeriod 0070              Tmr_TmrBPrSet@TmrBPrCfgSts 003D  
           __size_of_Mcu_ConfigPullUps 006F                              _Led1Blink 00C9  
                            _CmdBuffer 0220                     ??_Mcu_SetWdgPeriod 0074  
                            _Led1Pulse 00D2                __size_of_Adc_GetConvSts 0004  
                       ?_ClearRxBuffer 0070                        ??_ScheduleTasks 00E0  
                       _Tmr_TmrBConfig 0E6E                Tmr_TmrBPrSet@Postscaler 0033  
                    App_MainTask@F3813 00AC                      App_MainTask@F3799 00A0  
                __end_of_Mcu_SetWdgSts 09C4                           _InitSchTimer 0B1C  
                       ?_ClearTxBuffer 0070                    __size_of_SystemInit 0009  
                       _Tmr_TmrBIrqSet 0C5A            Mcu_SetDieTempSts@DieTempSts 0074  
                 ?_Adc_StartConversion 0070             Adc_InitAdcModule@AdcConfig 0074  
                       __end_of___lmul 0CE0                         _CheckAckStatus 09EF  
                       __end_of___wmul 0800                __size_of_Adc_ConfigAnCh 004B  
                    App_MainTask@WpuCh 0045                          __pidataCOMMON 0002  
                         ??_ReceiveEvt 0074                 ??_Mcu_EnableInterrupts 0074  
                  start_initialization 002E                              _Mcu_Reset 0990  
                      _Tmr6IsrCallback 00BC                              _RepBuffer 01A0  
           I2c_InitI2cModule@I2cConfig 0022           __size_of_I2cSlv_I2cDrvHandle 008D  
             __size_of_LedStateMachine 0031                 __end_of_Tmr_TmrBConfig 0EB9  
               __end_of_Tmr_TmrBIrqSet 0C83                              _TaskTable 0120  
                          _SystemState 0067                 Led_SetLedBlinkTime@Led 0074  
                   __end_of_ReceiveEvt 0BC4                __size_of_ManageProtocol 0058  
                ??_Adc_StartConversion 0074                  Tmr_TmrBConfig@TmrNumb 0044  
               __end_of_CheckAckStatus 09F9                               ??___lmul 0076  
              Led_InitSeq@DelayCounter 00B4                               ??___wmul 0074  
                    __size_of_TmrBInit 007B                           _RepBufferLen 0077  
      __size_of_StdS_ManageStdServices 00EE                            __pdataBANK0 006B  
                          __pdataBANK2 0120                     ClearTxBuffer@Index 0075  
               __size_ofi1_GenerateEvt 0021                    Tmr_StartTmr@TmrNumb 0074  
          __end_of_Led_SetLedBlinkTime 0B65                            __pbssBIGRAM 239D  
           __end_of_StdS_SetI2cAddress 0D11                     __end_of_TaskNumber 100C  
               ?_I2c_SetI2cAddressMask 0070                            __pbssCOMMON 0076  
                           ?_Mcu_Reset 0070                              ___latbits 0002  
                App_MainTask@AdcConfig 0051                          __pcstackBANK0 0020  
                        __pcstackBANK1 00E0                     _CheckStopBitStatus 0A03  
               GenerateEvt@EventStatus 0020               __end_of_ControlLedDirect 0AC6  
                 __size_of_Led_InitSeq 004E                  __size_of_LowPowerMode 000C  
                  ?_CheckStopBitStatus 0070           __end_of_LedBlinkStateMachine 053D  
                      ??_ClearRxBuffer 0074                   __size_of_Int0Trigger 000D  
                 __size_of_GenerateEvt 0022                        ?_Tmr_TmrBConfig 0042  
                       _SetLedBehavSts 0DE1                        ??_ClearTxBuffer 0074  
                      ?_Tmr_TmrBIrqSet 0074                   __end_of_Tmr_StartTmr 0B1C  
                         ??_StringCopy 0024                       _Led_SetLedStatus 0A55  
               __size_of_I2c_SetConfig 0014                       ___lwdiv@dividend 0022  
                     GenerateEvt@Event 0021                 __size_of_Tmr_TmrBPrSet 00B6  
                __size_of_Wdg_MainTask 0016                      _Adc_SelectChannel 0A18  
              App_MainTask@AnalogChSel 003D                        ?_CheckAckStatus 0070  
              Tmr_TmrBIrqSet@TmrIrqSts 0074                        _InitializeTasks 0F07  
                             ?___lldiv 0020                    _I2cReplyPacketReady 0068  
                             ?___lwdiv 0020                               ?___lwmod 0020  
                   ?_Adc_SelectChannel 0070                   ??_CheckStopBitStatus 0074  
                            __pswtext1 0800            __size_of_I2c_UpdateTxBuffer 001D  
                          _I2cRxBuffer 0320               I2c_DataReceiveSm@Options 003B  
                Adc_ConfigAnCh@AnChSel 0074                            _I2cTxBuffer 02A0  
                         ??_SystemInit 0076         InitializeTasks@ActiveTaskIndex 0057  
                  ??_Adc_SelectChannel 0074                         __size_of_AppSm 0029  
                         _LowPowerMode 0A24                       __CFG_WDTE$SWDTEN 0000  
                   __end_of_StringCopy 0C09            __end_of_Led_SetLedPulseTime 0A83  
                     ___lwdiv@quotient 0025                 _StdS_ManageStdServices 0199  
               __end_of_SetLedBehavSts 0E23                          i1_GenerateEvt 0B82  
                         _Wdg_MainTask 0AEF                         ___wmul@product 0074  
                             _LATAbits 010C                         _Adc_GetConvSts 09A0  
                            clear_ram0 0A30               __size_of_I2cSlv_MainTask 0015  
              LedPulseStateMachine@Led 0027                               _PIE1bits 0091  
                             _PIE3bits 0093                          _I2cSetAddress 00DC  
            __end_of_Adc_SelectChannel 0A24                      _I2c_InitI2cModule 0401  
                             _PIR1bits 0011                               _PIR3bits 0013  
                    ??_LedStateMachine 002E             Adc_GetConvResult@AdcResult 0021  
                   __end_of_SystemInit 09E5                     ?_I2c_InitI2cModule 0070  
                             _SSP1CON1 0215                               _SSP1CON2 0216  
                             _SSP1CON3 0217                               _SSP1STAT 0214  
                       _Adc_ConfigAnCh 0E23                     _Mcu_SetDieTempMode 09C4  
                   Led_InitSeq@Counter 0063                 __size_of_MainInterrupt 0028  
           I2c_DataReceiveSm@I2cRxFlag 005E                 __size_of_MainScheduler 0010  
                           _ADCON0bits 009D                             _ADCON1bits 009E  
                    ___wmul@multiplier 0020                    ??_I2c_InitI2cModule 0020  
              __size_of_Mcu_InitIntOsc 0007                               _WPUAbits 020C  
                             _WPUCbits 020E                          _I2c_SetConfig 0AC6  
                  ?_Mcu_SetDieTempMode 0070                            ??_Mcu_Reset 0074  
                        _Tmr_TmrBPrSet 034B                      ___lmul@multiplier 0024  
               I2cSlv_MainTask@Options 003B           __end_of_LedPulseStateMachine 071C  
                       ?i1_GenerateEvt 0070               Tmr_TmrBConfig@TmrBConfig 0042  
                      ?_SetLedBehavSts 0070                 __end_of_Adc_GetConvSts 09A4  
         LedBlinkStateMachine@LedBlink 0075                          ?_App_MainTask 003B  
            __end_of_I2c_InitI2cModule 04AD                      _Adc_GetConvResult 0A63  
              __end_of_InitializeTasks 0F55                   ??_Mcu_SetDieTempMode 0074  
                             _TmrBInit 05CA                     ?_Adc_GetConvResult 0074  
                       _ManageProtocol 0FA8                   Tmr_TmrBPrSet@Divisor 003E  
               __end_of_Adc_ConfigAnCh 0E6E                          ?_GetIrSensSts 0070  
            __size_of_Mcu_SetWdgPeriod 000B                       __size_of___lldiv 0053  
                  ??_Adc_GetConvResult 0020                    _I2cSlv_I2cDrvHandle 053D  
                     __size_of___lwdiv 0035                   Tmr_TmrBPrSet@TmrNumb 003C  
                     __size_of___lwmod 002D                      _GetDieTemperature 0B33  
                           _ANSELAbits 018C                             _ANSELCbits 018E  
             __size_of_CheckByteStatus 000A                   _LedBlinkStateMachine 04AD  
                       ?_I2c_SetConfig 0070                     ?_GetDieTemperature 0023  
                       ?_Tmr_TmrBPrSet 0030                        ___lwdiv@divisor 0020  
                      ___lwdiv@counter 0024                               __ptext10 0C5A  
                             __ptext11 0B05                               __ptext20 0AEF  
                             __ptext12 05CA                               __ptext21 0A0D  
                             __ptext13 0AA3                               __ptext30 0AC6  
                             __ptext22 0992                               __ptext14 0287  
                             __ptext31 0401                               __ptext23 0EB9  
                             __ptext15 0F07                               __ptext40 09C4  
                             __ptext32 0A93                               __ptext24 0D11  
                             __ptext16 071C                               __ptext41 0645  
                             __ptext33 0A83                               __ptext25 06B4  
                             __ptext17 0D42                               __ptext50 0D75  
                             __ptext42 0A48                               __ptext34 053D  
                             __ptext26 04AD                               __ptext18 0ADA  
                             __ptext51 0BE6                               __ptext43 09E5  
                             __ptext35 0B65                               __ptext27 0A03  
                             __ptext19 00A2                               __ptext60 09A0  
                             __ptext52 0DE1                               __ptext44 0C31  
                             __ptext36 09A9                               __ptext28 09F9  
                             __ptext61 0A63                               __ptext53 0A73  
                             __ptext45 0CE0                               __ptext37 09A4  
                             __ptext29 09EF                               __ptext62 0BC4  
                             __ptext54 0B4C                               __ptext46 0FA8  
                             __ptext38 09D4                               __ptext71 0B82  
                             __ptext63 0AB3                               __ptext55 0A24  
                             __ptext47 0199                               __ptext39 09CC  
                             __ptext64 0A55                               __ptext56 09BC  
                             __ptext48 0782                               __ptext65 0994  
                             __ptext57 0B33                               __ptext49 0C83  
                             __ptext66 0990                               __ptext58 0997  
                             __ptext67 0BA3                               __ptext59 0A18  
                             __ptext68 0DAA                               __ptext69 0E23  
                         _SSP1CON1bits 0215                I2c_DataReceiveSm@OpType 0060  
                  ??_GetDieTemperature 0076                   ?_I2cSlv_I2cDrvHandle 0070  
                __size_of_Tmr_StartTmr 0017              __end_of_Adc_GetConvResult 0A73  
                       ??_App_MainTask 003C                          _MainInterrupt 0004  
                   i1GenerateEvt@Event 0071                        ?_Adc_GetConvSts 0070  
                        _MainScheduler 0AA3                     TmrBInit@Postscaler 0075  
                        __size_of_main 0007         I2c_DataReceiveSm@AddressStored 005B  
                        __size_of_utoa 0062                    Led_MainTask@Options 003B  
               __end_of_ManageProtocol 1000           I2c_UpdateTxBuffer@DataBuffer 0022  
           __size_of_Adc_SelectChannel 000C                  __end_of_ScheduleTasks 034B  
                        ?_Led_MainTask 003B                         ??_GetIrSensSts 0074  
                      ?_Adc_ConfigAnCh 0070                    Led_SetLedStatus@Led 0020  
                             int$flags 007E                      _Mcu_SetDieTempSts 09CC  
                    ??_I2cSlv_MainTask 0076                        StringCopy@Index 0074  
         ScheduleTasks@ActiveTaskIndex 0057              __end_of_GetDieTemperature 0B4C  
                   ?_Mcu_SetDieTempSts 0070                ??_I2c_SetI2cAddressMask 0074  
                ?_LedBlinkStateMachine 0070                            _OSCSTATbits 009A  
                           _INTCONbits 000B                           _Tmr_StartTmr 0B05  
             __end_of_Led_SetLedStatus 0A63                    ??_Mcu_SetDieTempSts 0074  
                           _FVRCONbits 0117                   _I2cNewTxNotification 00DA  
        __size_of_Mcu_EnableInterrupts 0003                 __size_of_Mcu_SetWdgSts 0008  
                      ??i1_GenerateEvt 0070                      _I2c_SetI2cAddress 09A4  
                     ??_Tmr_TmrBConfig 0043                  ??_I2cSlv_I2cDrvHandle 0024  
                     ??_Tmr_TmrBIrqSet 0075                               intlevel1 0000  
                       ?_MainInterrupt 0070                      TmrBInit@Prescaler 0074  
                       ?_MainScheduler 0070                     ?_I2c_SetI2cAddress 0070  
             I2c_UpdateTxBuffer@Length 0074                      ?_ControlLedDirect 0070  
               Led_SetLedPulseTime@Led 0020                       ___lwmod@dividend 0022  
               I2c_DataReceiveSm@Index 0043            __end_of_Adc_StartConversion 099A  
                   _StdS_SetI2cAddress 0CE0                       ___lldiv@dividend 0024  
               Mcu_ConfigPullUps@WpuCh 0074             __size_of_I2c_InitI2cModule 00AC  
               SetLedBehavSts@LedBehav 0025                      __CFG_CLKOUTEN$OFF 0000  
                     ??_CheckAckStatus 0074                        ?_ManageProtocol 0070  
                   ??_ControlLedDirect 0076             I2c_DataReceiveSm@RxCounter 0061  
                     ?_InitializeTasks 0070                Led_InitSeq@InitSeqState 0064  
                Led_InitSeq@LedInitSts 0078                             _OSCCONbits 0099  
                  ??_I2c_SetI2cAddress 0074              __end_of_Mcu_SetDieTempSts 09D4  
                       ??_Led_MainTask 003C             I2c_DataReceiveSm@TxCounter 0062  
                  ?_StdS_SetI2cAddress 0070                   _LedPulseStateMachine 06B4  
                      ??_I2c_SetConfig 0074                               utoa@base 0029  
                       _Mcu_InitIntOsc 09AE                        ??_Tmr_TmrBPrSet 0034  
              I2c_UpdateTxBuffer@Index 0023                       ___lldiv@quotient 0028  
                      ___lwmod@divisor 0020                ?_StdS_ManageStdServices 0070  
                      ___lwmod@counter 0075              __end_of_I2c_SetI2cAddress 09A9  
                ReceiveEvt@EventStatus 0074                   ??_StdS_SetI2cAddress 0074  
                        ??_Led_InitSeq 0021                             _WDTCONbits 0097  
                    ??_CheckByteStatus 0074           __size_of_Led_SetLedBlinkTime 0019  
                        ??_Int0Trigger 0074                          ??_GenerateEvt 0074  
                      _LedStateMachine 0D11                        TmrBInit@TmrNumb 0021  
           __size_of_Adc_GetConvResult 0010                 Led_SetLedStatus@LedSts 0074  
I2c_SetI2cAddressMask@SlaveAddressMask 0074  I2cSlv_I2cDrvHandle@I2cReceiveMsgState 005A  
                __end_of_ClearRxBuffer 0A93                  __end_of_ClearTxBuffer 0AA3  
                        ?_Mcu_ClearWdg 0070                          _Mcu_SetWdgSts 09BC  
