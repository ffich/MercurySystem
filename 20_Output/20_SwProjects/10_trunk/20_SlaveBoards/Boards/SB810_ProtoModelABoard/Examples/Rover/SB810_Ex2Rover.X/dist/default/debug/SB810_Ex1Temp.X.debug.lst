

Microchip Technology PIC LITE Macro Assembler V1.38 build -256452561 
                                                                                               Fri Mar 02 20:17:07 2018

Microchip Technology Omniscient Code Generator v1.38 (Free mode) build 201607010351
     1                           	processor	16F1829
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	idataBANK1,global,class=CODE,delta=2
     5                           	psect	idataBANK2,global,class=CODE,delta=2
     6                           	psect	stringtext,global,class=STRCODE,delta=2
     7                           	psect	cinit,global,class=CODE,merge=1,delta=2
     8                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
     9                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    10                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1
    11                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1
    12                           	psect	dataBANK2,global,class=BANK2,space=1,delta=1
    13                           	psect	bssBANK3,global,class=BANK3,space=1,delta=1
    14                           	psect	bssBANK4,global,class=BANK4,space=1,delta=1
    15                           	psect	bssBANK5,global,class=BANK5,space=1,delta=1
    16                           	psect	bssBANK6,global,class=BANK6,space=1,delta=1
    17                           	psect	bssBANK7,global,class=BANK7,space=1,delta=1
    18                           	psect	bssBANK8,global,class=BANK8,space=1,delta=1
    19                           	psect	inittext,global,class=CODE,delta=2
    20                           	psect	clrtext,global,class=CODE,delta=2
    21                           	psect	cstackBANK3,global,class=BANK3,space=1,delta=1
    22                           	psect	cstackBANK2,global,class=BANK2,space=1,delta=1
    23                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1
    24                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    25                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    26                           	psect	maintext,global,class=CODE,merge=1,split=1,delta=2
    27                           	psect	text1,local,class=CODE,merge=1,delta=2
    28                           	psect	text2,local,class=CODE,merge=1,delta=2
    29                           	psect	text3,local,class=CODE,merge=1,delta=2
    30                           	psect	text4,local,class=CODE,merge=1,delta=2
    31                           	psect	text5,local,class=CODE,merge=1,delta=2
    32                           	psect	text6,local,class=CODE,merge=1,delta=2
    33                           	psect	text7,local,class=CODE,merge=1,delta=2
    34                           	psect	text8,local,class=CODE,merge=1,delta=2
    35                           	psect	text9,local,class=CODE,merge=1,delta=2
    36                           	psect	text10,local,class=CODE,merge=1,delta=2
    37                           	psect	text11,local,class=CODE,merge=1,delta=2
    38                           	psect	text12,local,class=CODE,merge=1,delta=2
    39                           	psect	text13,local,class=CODE,merge=1,delta=2
    40                           	psect	text14,local,class=CODE,merge=1,delta=2
    41                           	psect	text15,local,class=CODE,merge=1,delta=2
    42                           	psect	text16,local,class=CODE,merge=1,delta=2
    43                           	psect	text17,local,class=CODE,merge=1,delta=2
    44                           	psect	text18,local,class=CODE,merge=1,delta=2
    45                           	psect	swtext1,local,class=CONST,delta=2
    46                           	psect	text19,local,class=CODE,merge=1,delta=2
    47                           	psect	text20,local,class=CODE,merge=1,delta=2
    48                           	psect	text21,local,class=CODE,merge=1,delta=2
    49                           	psect	text22,local,class=CODE,merge=1,delta=2
    50                           	psect	text23,local,class=CODE,merge=1,delta=2
    51                           	psect	text24,local,class=CODE,merge=1,delta=2
    52                           	psect	text25,local,class=CODE,merge=1,delta=2
    53                           	psect	text26,local,class=CODE,merge=1,delta=2
    54                           	psect	text27,local,class=CODE,merge=1,delta=2
    55                           	psect	text28,local,class=CODE,merge=1,delta=2
    56                           	psect	text29,local,class=CODE,merge=1,delta=2
    57                           	psect	text30,local,class=CODE,merge=1,delta=2
    58                           	psect	text31,local,class=CODE,merge=1,delta=2
    59                           	psect	text32,local,class=CODE,merge=1,delta=2
    60                           	psect	text33,local,class=CODE,merge=1,delta=2
    61                           	psect	text34,local,class=CODE,merge=1,delta=2
    62                           	psect	text35,local,class=CODE,merge=1,delta=2
    63                           	psect	text36,local,class=CODE,merge=1,delta=2
    64                           	psect	text37,local,class=CODE,merge=1,delta=2
    65                           	psect	text38,local,class=CODE,merge=1,delta=2
    66                           	psect	text39,local,class=CODE,merge=1,delta=2
    67                           	psect	text40,local,class=CODE,merge=1,delta=2
    68                           	psect	text41,local,class=CODE,merge=1,delta=2
    69                           	psect	text42,local,class=CODE,merge=1,delta=2
    70                           	psect	text43,local,class=CODE,merge=1,delta=2
    71                           	psect	text44,local,class=CODE,merge=1,delta=2
    72                           	psect	text45,local,class=CODE,merge=1,delta=2
    73                           	psect	text46,local,class=CODE,merge=1,delta=2
    74                           	psect	text47,local,class=CODE,merge=1,delta=2
    75                           	psect	text48,local,class=CODE,merge=1,delta=2
    76                           	psect	text49,local,class=CODE,merge=1,delta=2
    77                           	psect	text50,local,class=CODE,merge=1,delta=2
    78                           	psect	text51,local,class=CODE,merge=1,delta=2
    79                           	psect	text52,local,class=CODE,merge=1,delta=2
    80                           	psect	text53,local,class=CODE,merge=1,delta=2
    81                           	psect	text54,local,class=CODE,merge=1,delta=2
    82                           	psect	text55,local,class=CODE,merge=1,delta=2
    83                           	psect	text56,local,class=CODE,merge=1,delta=2
    84                           	psect	text57,local,class=CODE,merge=1,delta=2
    85                           	psect	text58,local,class=CODE,merge=1,delta=2
    86                           	psect	text59,local,class=CODE,merge=1,delta=2
    87                           	psect	text60,local,class=CODE,merge=1,delta=2
    88                           	psect	text61,local,class=CODE,merge=1,delta=2
    89                           	psect	text62,local,class=CODE,merge=1,delta=2
    90                           	psect	text63,local,class=CODE,merge=1,delta=2
    91                           	psect	text64,local,class=CODE,merge=1,delta=2
    92                           	psect	text65,local,class=CODE,merge=1,delta=2
    93                           	psect	text66,local,class=CODE,merge=1,delta=2
    94                           	psect	text67,local,class=CODE,merge=1,delta=2
    95                           	psect	text68,local,class=CODE,merge=1,delta=2
    96                           	psect	text69,local,class=CODE,merge=1,delta=2
    97                           	psect	text70,local,class=CODE,merge=1,delta=2
    98                           	psect	text71,local,class=CODE,merge=1,delta=2
    99                           	psect	intentry,global,class=CODE,delta=2
   100                           	psect	text73,local,class=CODE,merge=1,delta=2
   101                           	dabs	1,0x620,48
   102                           	dabs	1,0x5CD,35
   103                           	dabs	1,0x239D,0,_I2cPacket
   104                           	dabs	1,0x7E,2
   105  0000                     	;# 
   106  0001                     	;# 
   107  0002                     	;# 
   108  0003                     	;# 
   109  0004                     	;# 
   110  0005                     	;# 
   111  0006                     	;# 
   112  0007                     	;# 
   113  0008                     	;# 
   114  0009                     	;# 
   115  000A                     	;# 
   116  000B                     	;# 
   117  000C                     	;# 
   118  000D                     	;# 
   119  000E                     	;# 
   120  0011                     	;# 
   121  0012                     	;# 
   122  0013                     	;# 
   123  0014                     	;# 
   124  0015                     	;# 
   125  0016                     	;# 
   126  0016                     	;# 
   127  0017                     	;# 
   128  0018                     	;# 
   129  0019                     	;# 
   130  001A                     	;# 
   131  001B                     	;# 
   132  001C                     	;# 
   133  001E                     	;# 
   134  001F                     	;# 
   135  008C                     	;# 
   136  008D                     	;# 
   137  008E                     	;# 
   138  0091                     	;# 
   139  0092                     	;# 
   140  0093                     	;# 
   141  0094                     	;# 
   142  0095                     	;# 
   143  0096                     	;# 
   144  0097                     	;# 
   145  0098                     	;# 
   146  0099                     	;# 
   147  009A                     	;# 
   148  009B                     	;# 
   149  009B                     	;# 
   150  009C                     	;# 
   151  009D                     	;# 
   152  009E                     	;# 
   153  010C                     	;# 
   154  010D                     	;# 
   155  010E                     	;# 
   156  0111                     	;# 
   157  0112                     	;# 
   158  0113                     	;# 
   159  0114                     	;# 
   160  0115                     	;# 
   161  0116                     	;# 
   162  0117                     	;# 
   163  0118                     	;# 
   164  0119                     	;# 
   165  011A                     	;# 
   166  011B                     	;# 
   167  011D                     	;# 
   168  011E                     	;# 
   169  018C                     	;# 
   170  018D                     	;# 
   171  018E                     	;# 
   172  0191                     	;# 
   173  0191                     	;# 
   174  0192                     	;# 
   175  0193                     	;# 
   176  0193                     	;# 
   177  0193                     	;# 
   178  0194                     	;# 
   179  0195                     	;# 
   180  0196                     	;# 
   181  0199                     	;# 
   182  019A                     	;# 
   183  019B                     	;# 
   184  019B                     	;# 
   185  019C                     	;# 
   186  019D                     	;# 
   187  019E                     	;# 
   188  019F                     	;# 
   189  020C                     	;# 
   190  020D                     	;# 
   191  020E                     	;# 
   192  0211                     	;# 
   193  0211                     	;# 
   194  0212                     	;# 
   195  0212                     	;# 
   196  0213                     	;# 
   197  0213                     	;# 
   198  0214                     	;# 
   199  0214                     	;# 
   200  0215                     	;# 
   201  0215                     	;# 
   202  0215                     	;# 
   203  0216                     	;# 
   204  0216                     	;# 
   205  0217                     	;# 
   206  0217                     	;# 
   207  0219                     	;# 
   208  021A                     	;# 
   209  021B                     	;# 
   210  021C                     	;# 
   211  021D                     	;# 
   212  021E                     	;# 
   213  021F                     	;# 
   214  0291                     	;# 
   215  0291                     	;# 
   216  0292                     	;# 
   217  0293                     	;# 
   218  0294                     	;# 
   219  0295                     	;# 
   220  0295                     	;# 
   221  0296                     	;# 
   222  0298                     	;# 
   223  0298                     	;# 
   224  0299                     	;# 
   225  029A                     	;# 
   226  029B                     	;# 
   227  029C                     	;# 
   228  029D                     	;# 
   229  029E                     	;# 
   230  0311                     	;# 
   231  0311                     	;# 
   232  0312                     	;# 
   233  0313                     	;# 
   234  0318                     	;# 
   235  0318                     	;# 
   236  0319                     	;# 
   237  031A                     	;# 
   238  038C                     	;# 
   239  038D                     	;# 
   240  038E                     	;# 
   241  0391                     	;# 
   242  0392                     	;# 
   243  0393                     	;# 
   244  0394                     	;# 
   245  0395                     	;# 
   246  0396                     	;# 
   247  039A                     	;# 
   248  039C                     	;# 
   249  039D                     	;# 
   250  039E                     	;# 
   251  039F                     	;# 
   252  0415                     	;# 
   253  0416                     	;# 
   254  0417                     	;# 
   255  041C                     	;# 
   256  041D                     	;# 
   257  041E                     	;# 
   258  0FE4                     	;# 
   259  0FE5                     	;# 
   260  0FE6                     	;# 
   261  0FE7                     	;# 
   262  0FE8                     	;# 
   263  0FE9                     	;# 
   264  0FEA                     	;# 
   265  0FEB                     	;# 
   266  0FED                     	;# 
   267  0FEE                     	;# 
   268  0FEF                     	;# 
   269  0000                     	;# 
   270  0001                     	;# 
   271  0002                     	;# 
   272  0003                     	;# 
   273  0004                     	;# 
   274  0005                     	;# 
   275  0006                     	;# 
   276  0007                     	;# 
   277  0008                     	;# 
   278  0009                     	;# 
   279  000A                     	;# 
   280  000B                     	;# 
   281  000C                     	;# 
   282  000D                     	;# 
   283  000E                     	;# 
   284  0011                     	;# 
   285  0012                     	;# 
   286  0013                     	;# 
   287  0014                     	;# 
   288  0015                     	;# 
   289  0016                     	;# 
   290  0016                     	;# 
   291  0017                     	;# 
   292  0018                     	;# 
   293  0019                     	;# 
   294  001A                     	;# 
   295  001B                     	;# 
   296  001C                     	;# 
   297  001E                     	;# 
   298  001F                     	;# 
   299  008C                     	;# 
   300  008D                     	;# 
   301  008E                     	;# 
   302  0091                     	;# 
   303  0092                     	;# 
   304  0093                     	;# 
   305  0094                     	;# 
   306  0095                     	;# 
   307  0096                     	;# 
   308  0097                     	;# 
   309  0098                     	;# 
   310  0099                     	;# 
   311  009A                     	;# 
   312  009B                     	;# 
   313  009B                     	;# 
   314  009C                     	;# 
   315  009D                     	;# 
   316  009E                     	;# 
   317  010C                     	;# 
   318  010D                     	;# 
   319  010E                     	;# 
   320  0111                     	;# 
   321  0112                     	;# 
   322  0113                     	;# 
   323  0114                     	;# 
   324  0115                     	;# 
   325  0116                     	;# 
   326  0117                     	;# 
   327  0118                     	;# 
   328  0119                     	;# 
   329  011A                     	;# 
   330  011B                     	;# 
   331  011D                     	;# 
   332  011E                     	;# 
   333  018C                     	;# 
   334  018D                     	;# 
   335  018E                     	;# 
   336  0191                     	;# 
   337  0191                     	;# 
   338  0192                     	;# 
   339  0193                     	;# 
   340  0193                     	;# 
   341  0193                     	;# 
   342  0194                     	;# 
   343  0195                     	;# 
   344  0196                     	;# 
   345  0199                     	;# 
   346  019A                     	;# 
   347  019B                     	;# 
   348  019B                     	;# 
   349  019C                     	;# 
   350  019D                     	;# 
   351  019E                     	;# 
   352  019F                     	;# 
   353  020C                     	;# 
   354  020D                     	;# 
   355  020E                     	;# 
   356  0211                     	;# 
   357  0211                     	;# 
   358  0212                     	;# 
   359  0212                     	;# 
   360  0213                     	;# 
   361  0213                     	;# 
   362  0214                     	;# 
   363  0214                     	;# 
   364  0215                     	;# 
   365  0215                     	;# 
   366  0215                     	;# 
   367  0216                     	;# 
   368  0216                     	;# 
   369  0217                     	;# 
   370  0217                     	;# 
   371  0219                     	;# 
   372  021A                     	;# 
   373  021B                     	;# 
   374  021C                     	;# 
   375  021D                     	;# 
   376  021E                     	;# 
   377  021F                     	;# 
   378  0291                     	;# 
   379  0291                     	;# 
   380  0292                     	;# 
   381  0293                     	;# 
   382  0294                     	;# 
   383  0295                     	;# 
   384  0295                     	;# 
   385  0296                     	;# 
   386  0298                     	;# 
   387  0298                     	;# 
   388  0299                     	;# 
   389  029A                     	;# 
   390  029B                     	;# 
   391  029C                     	;# 
   392  029D                     	;# 
   393  029E                     	;# 
   394  0311                     	;# 
   395  0311                     	;# 
   396  0312                     	;# 
   397  0313                     	;# 
   398  0318                     	;# 
   399  0318                     	;# 
   400  0319                     	;# 
   401  031A                     	;# 
   402  038C                     	;# 
   403  038D                     	;# 
   404  038E                     	;# 
   405  0391                     	;# 
   406  0392                     	;# 
   407  0393                     	;# 
   408  0394                     	;# 
   409  0395                     	;# 
   410  0396                     	;# 
   411  039A                     	;# 
   412  039C                     	;# 
   413  039D                     	;# 
   414  039E                     	;# 
   415  039F                     	;# 
   416  0415                     	;# 
   417  0416                     	;# 
   418  0417                     	;# 
   419  041C                     	;# 
   420  041D                     	;# 
   421  041E                     	;# 
   422  0FE4                     	;# 
   423  0FE5                     	;# 
   424  0FE6                     	;# 
   425  0FE7                     	;# 
   426  0FE8                     	;# 
   427  0FE9                     	;# 
   428  0FEA                     	;# 
   429  0FEB                     	;# 
   430  0FED                     	;# 
   431  0FEE                     	;# 
   432  0FEF                     	;# 
   433  0000                     	;# 
   434  0001                     	;# 
   435  0002                     	;# 
   436  0003                     	;# 
   437  0004                     	;# 
   438  0005                     	;# 
   439  0006                     	;# 
   440  0007                     	;# 
   441  0008                     	;# 
   442  0009                     	;# 
   443  000A                     	;# 
   444  000B                     	;# 
   445  000C                     	;# 
   446  000D                     	;# 
   447  000E                     	;# 
   448  0011                     	;# 
   449  0012                     	;# 
   450  0013                     	;# 
   451  0014                     	;# 
   452  0015                     	;# 
   453  0016                     	;# 
   454  0016                     	;# 
   455  0017                     	;# 
   456  0018                     	;# 
   457  0019                     	;# 
   458  001A                     	;# 
   459  001B                     	;# 
   460  001C                     	;# 
   461  001E                     	;# 
   462  001F                     	;# 
   463  008C                     	;# 
   464  008D                     	;# 
   465  008E                     	;# 
   466  0091                     	;# 
   467  0092                     	;# 
   468  0093                     	;# 
   469  0094                     	;# 
   470  0095                     	;# 
   471  0096                     	;# 
   472  0097                     	;# 
   473  0098                     	;# 
   474  0099                     	;# 
   475  009A                     	;# 
   476  009B                     	;# 
   477  009B                     	;# 
   478  009C                     	;# 
   479  009D                     	;# 
   480  009E                     	;# 
   481  010C                     	;# 
   482  010D                     	;# 
   483  010E                     	;# 
   484  0111                     	;# 
   485  0112                     	;# 
   486  0113                     	;# 
   487  0114                     	;# 
   488  0115                     	;# 
   489  0116                     	;# 
   490  0117                     	;# 
   491  0118                     	;# 
   492  0119                     	;# 
   493  011A                     	;# 
   494  011B                     	;# 
   495  011D                     	;# 
   496  011E                     	;# 
   497  018C                     	;# 
   498  018D                     	;# 
   499  018E                     	;# 
   500  0191                     	;# 
   501  0191                     	;# 
   502  0192                     	;# 
   503  0193                     	;# 
   504  0193                     	;# 
   505  0193                     	;# 
   506  0194                     	;# 
   507  0195                     	;# 
   508  0196                     	;# 
   509  0199                     	;# 
   510  019A                     	;# 
   511  019B                     	;# 
   512  019B                     	;# 
   513  019C                     	;# 
   514  019D                     	;# 
   515  019E                     	;# 
   516  019F                     	;# 
   517  020C                     	;# 
   518  020D                     	;# 
   519  020E                     	;# 
   520  0211                     	;# 
   521  0211                     	;# 
   522  0212                     	;# 
   523  0212                     	;# 
   524  0213                     	;# 
   525  0213                     	;# 
   526  0214                     	;# 
   527  0214                     	;# 
   528  0215                     	;# 
   529  0215                     	;# 
   530  0215                     	;# 
   531  0216                     	;# 
   532  0216                     	;# 
   533  0217                     	;# 
   534  0217                     	;# 
   535  0219                     	;# 
   536  021A                     	;# 
   537  021B                     	;# 
   538  021C                     	;# 
   539  021D                     	;# 
   540  021E                     	;# 
   541  021F                     	;# 
   542  0291                     	;# 
   543  0291                     	;# 
   544  0292                     	;# 
   545  0293                     	;# 
   546  0294                     	;# 
   547  0295                     	;# 
   548  0295                     	;# 
   549  0296                     	;# 
   550  0298                     	;# 
   551  0298                     	;# 
   552  0299                     	;# 
   553  029A                     	;# 
   554  029B                     	;# 
   555  029C                     	;# 
   556  029D                     	;# 
   557  029E                     	;# 
   558  0311                     	;# 
   559  0311                     	;# 
   560  0312                     	;# 
   561  0313                     	;# 
   562  0318                     	;# 
   563  0318                     	;# 
   564  0319                     	;# 
   565  031A                     	;# 
   566  038C                     	;# 
   567  038D                     	;# 
   568  038E                     	;# 
   569  0391                     	;# 
   570  0392                     	;# 
   571  0393                     	;# 
   572  0394                     	;# 
   573  0395                     	;# 
   574  0396                     	;# 
   575  039A                     	;# 
   576  039C                     	;# 
   577  039D                     	;# 
   578  039E                     	;# 
   579  039F                     	;# 
   580  0415                     	;# 
   581  0416                     	;# 
   582  0417                     	;# 
   583  041C                     	;# 
   584  041D                     	;# 
   585  041E                     	;# 
   586  0FE4                     	;# 
   587  0FE5                     	;# 
   588  0FE6                     	;# 
   589  0FE7                     	;# 
   590  0FE8                     	;# 
   591  0FE9                     	;# 
   592  0FEA                     	;# 
   593  0FEB                     	;# 
   594  0FED                     	;# 
   595  0FEE                     	;# 
   596  0FEF                     	;# 
   597  0000                     	;# 
   598  0001                     	;# 
   599  0002                     	;# 
   600  0003                     	;# 
   601  0004                     	;# 
   602  0005                     	;# 
   603  0006                     	;# 
   604  0007                     	;# 
   605  0008                     	;# 
   606  0009                     	;# 
   607  000A                     	;# 
   608  000B                     	;# 
   609  000C                     	;# 
   610  000D                     	;# 
   611  000E                     	;# 
   612  0011                     	;# 
   613  0012                     	;# 
   614  0013                     	;# 
   615  0014                     	;# 
   616  0015                     	;# 
   617  0016                     	;# 
   618  0016                     	;# 
   619  0017                     	;# 
   620  0018                     	;# 
   621  0019                     	;# 
   622  001A                     	;# 
   623  001B                     	;# 
   624  001C                     	;# 
   625  001E                     	;# 
   626  001F                     	;# 
   627  008C                     	;# 
   628  008D                     	;# 
   629  008E                     	;# 
   630  0091                     	;# 
   631  0092                     	;# 
   632  0093                     	;# 
   633  0094                     	;# 
   634  0095                     	;# 
   635  0096                     	;# 
   636  0097                     	;# 
   637  0098                     	;# 
   638  0099                     	;# 
   639  009A                     	;# 
   640  009B                     	;# 
   641  009B                     	;# 
   642  009C                     	;# 
   643  009D                     	;# 
   644  009E                     	;# 
   645  010C                     	;# 
   646  010D                     	;# 
   647  010E                     	;# 
   648  0111                     	;# 
   649  0112                     	;# 
   650  0113                     	;# 
   651  0114                     	;# 
   652  0115                     	;# 
   653  0116                     	;# 
   654  0117                     	;# 
   655  0118                     	;# 
   656  0119                     	;# 
   657  011A                     	;# 
   658  011B                     	;# 
   659  011D                     	;# 
   660  011E                     	;# 
   661  018C                     	;# 
   662  018D                     	;# 
   663  018E                     	;# 
   664  0191                     	;# 
   665  0191                     	;# 
   666  0192                     	;# 
   667  0193                     	;# 
   668  0193                     	;# 
   669  0193                     	;# 
   670  0194                     	;# 
   671  0195                     	;# 
   672  0196                     	;# 
   673  0199                     	;# 
   674  019A                     	;# 
   675  019B                     	;# 
   676  019B                     	;# 
   677  019C                     	;# 
   678  019D                     	;# 
   679  019E                     	;# 
   680  019F                     	;# 
   681  020C                     	;# 
   682  020D                     	;# 
   683  020E                     	;# 
   684  0211                     	;# 
   685  0211                     	;# 
   686  0212                     	;# 
   687  0212                     	;# 
   688  0213                     	;# 
   689  0213                     	;# 
   690  0214                     	;# 
   691  0214                     	;# 
   692  0215                     	;# 
   693  0215                     	;# 
   694  0215                     	;# 
   695  0216                     	;# 
   696  0216                     	;# 
   697  0217                     	;# 
   698  0217                     	;# 
   699  0219                     	;# 
   700  021A                     	;# 
   701  021B                     	;# 
   702  021C                     	;# 
   703  021D                     	;# 
   704  021E                     	;# 
   705  021F                     	;# 
   706  0291                     	;# 
   707  0291                     	;# 
   708  0292                     	;# 
   709  0293                     	;# 
   710  0294                     	;# 
   711  0295                     	;# 
   712  0295                     	;# 
   713  0296                     	;# 
   714  0298                     	;# 
   715  0298                     	;# 
   716  0299                     	;# 
   717  029A                     	;# 
   718  029B                     	;# 
   719  029C                     	;# 
   720  029D                     	;# 
   721  029E                     	;# 
   722  0311                     	;# 
   723  0311                     	;# 
   724  0312                     	;# 
   725  0313                     	;# 
   726  0318                     	;# 
   727  0318                     	;# 
   728  0319                     	;# 
   729  031A                     	;# 
   730  038C                     	;# 
   731  038D                     	;# 
   732  038E                     	;# 
   733  0391                     	;# 
   734  0392                     	;# 
   735  0393                     	;# 
   736  0394                     	;# 
   737  0395                     	;# 
   738  0396                     	;# 
   739  039A                     	;# 
   740  039C                     	;# 
   741  039D                     	;# 
   742  039E                     	;# 
   743  039F                     	;# 
   744  0415                     	;# 
   745  0416                     	;# 
   746  0417                     	;# 
   747  041C                     	;# 
   748  041D                     	;# 
   749  041E                     	;# 
   750  0FE4                     	;# 
   751  0FE5                     	;# 
   752  0FE6                     	;# 
   753  0FE7                     	;# 
   754  0FE8                     	;# 
   755  0FE9                     	;# 
   756  0FEA                     	;# 
   757  0FEB                     	;# 
   758  0FED                     	;# 
   759  0FEE                     	;# 
   760  0FEF                     	;# 
   761  0000                     	;# 
   762  0001                     	;# 
   763  0002                     	;# 
   764  0003                     	;# 
   765  0004                     	;# 
   766  0005                     	;# 
   767  0006                     	;# 
   768  0007                     	;# 
   769  0008                     	;# 
   770  0009                     	;# 
   771  000A                     	;# 
   772  000B                     	;# 
   773  000C                     	;# 
   774  000D                     	;# 
   775  000E                     	;# 
   776  0011                     	;# 
   777  0012                     	;# 
   778  0013                     	;# 
   779  0014                     	;# 
   780  0015                     	;# 
   781  0016                     	;# 
   782  0016                     	;# 
   783  0017                     	;# 
   784  0018                     	;# 
   785  0019                     	;# 
   786  001A                     	;# 
   787  001B                     	;# 
   788  001C                     	;# 
   789  001E                     	;# 
   790  001F                     	;# 
   791  008C                     	;# 
   792  008D                     	;# 
   793  008E                     	;# 
   794  0091                     	;# 
   795  0092                     	;# 
   796  0093                     	;# 
   797  0094                     	;# 
   798  0095                     	;# 
   799  0096                     	;# 
   800  0097                     	;# 
   801  0098                     	;# 
   802  0099                     	;# 
   803  009A                     	;# 
   804  009B                     	;# 
   805  009B                     	;# 
   806  009C                     	;# 
   807  009D                     	;# 
   808  009E                     	;# 
   809  010C                     	;# 
   810  010D                     	;# 
   811  010E                     	;# 
   812  0111                     	;# 
   813  0112                     	;# 
   814  0113                     	;# 
   815  0114                     	;# 
   816  0115                     	;# 
   817  0116                     	;# 
   818  0117                     	;# 
   819  0118                     	;# 
   820  0119                     	;# 
   821  011A                     	;# 
   822  011B                     	;# 
   823  011D                     	;# 
   824  011E                     	;# 
   825  018C                     	;# 
   826  018D                     	;# 
   827  018E                     	;# 
   828  0191                     	;# 
   829  0191                     	;# 
   830  0192                     	;# 
   831  0193                     	;# 
   832  0193                     	;# 
   833  0193                     	;# 
   834  0194                     	;# 
   835  0195                     	;# 
   836  0196                     	;# 
   837  0199                     	;# 
   838  019A                     	;# 
   839  019B                     	;# 
   840  019B                     	;# 
   841  019C                     	;# 
   842  019D                     	;# 
   843  019E                     	;# 
   844  019F                     	;# 
   845  020C                     	;# 
   846  020D                     	;# 
   847  020E                     	;# 
   848  0211                     	;# 
   849  0211                     	;# 
   850  0212                     	;# 
   851  0212                     	;# 
   852  0213                     	;# 
   853  0213                     	;# 
   854  0214                     	;# 
   855  0214                     	;# 
   856  0215                     	;# 
   857  0215                     	;# 
   858  0215                     	;# 
   859  0216                     	;# 
   860  0216                     	;# 
   861  0217                     	;# 
   862  0217                     	;# 
   863  0219                     	;# 
   864  021A                     	;# 
   865  021B                     	;# 
   866  021C                     	;# 
   867  021D                     	;# 
   868  021E                     	;# 
   869  021F                     	;# 
   870  0291                     	;# 
   871  0291                     	;# 
   872  0292                     	;# 
   873  0293                     	;# 
   874  0294                     	;# 
   875  0295                     	;# 
   876  0295                     	;# 
   877  0296                     	;# 
   878  0298                     	;# 
   879  0298                     	;# 
   880  0299                     	;# 
   881  029A                     	;# 
   882  029B                     	;# 
   883  029C                     	;# 
   884  029D                     	;# 
   885  029E                     	;# 
   886  0311                     	;# 
   887  0311                     	;# 
   888  0312                     	;# 
   889  0313                     	;# 
   890  0318                     	;# 
   891  0318                     	;# 
   892  0319                     	;# 
   893  031A                     	;# 
   894  038C                     	;# 
   895  038D                     	;# 
   896  038E                     	;# 
   897  0391                     	;# 
   898  0392                     	;# 
   899  0393                     	;# 
   900  0394                     	;# 
   901  0395                     	;# 
   902  0396                     	;# 
   903  039A                     	;# 
   904  039C                     	;# 
   905  039D                     	;# 
   906  039E                     	;# 
   907  039F                     	;# 
   908  0415                     	;# 
   909  0416                     	;# 
   910  0417                     	;# 
   911  041C                     	;# 
   912  041D                     	;# 
   913  041E                     	;# 
   914  0FE4                     	;# 
   915  0FE5                     	;# 
   916  0FE6                     	;# 
   917  0FE7                     	;# 
   918  0FE8                     	;# 
   919  0FE9                     	;# 
   920  0FEA                     	;# 
   921  0FEB                     	;# 
   922  0FED                     	;# 
   923  0FEE                     	;# 
   924  0FEF                     	;# 
   925  0000                     	;# 
   926  0001                     	;# 
   927  0002                     	;# 
   928  0003                     	;# 
   929  0004                     	;# 
   930  0005                     	;# 
   931  0006                     	;# 
   932  0007                     	;# 
   933  0008                     	;# 
   934  0009                     	;# 
   935  000A                     	;# 
   936  000B                     	;# 
   937  000C                     	;# 
   938  000D                     	;# 
   939  000E                     	;# 
   940  0011                     	;# 
   941  0012                     	;# 
   942  0013                     	;# 
   943  0014                     	;# 
   944  0015                     	;# 
   945  0016                     	;# 
   946  0016                     	;# 
   947  0017                     	;# 
   948  0018                     	;# 
   949  0019                     	;# 
   950  001A                     	;# 
   951  001B                     	;# 
   952  001C                     	;# 
   953  001E                     	;# 
   954  001F                     	;# 
   955  008C                     	;# 
   956  008D                     	;# 
   957  008E                     	;# 
   958  0091                     	;# 
   959  0092                     	;# 
   960  0093                     	;# 
   961  0094                     	;# 
   962  0095                     	;# 
   963  0096                     	;# 
   964  0097                     	;# 
   965  0098                     	;# 
   966  0099                     	;# 
   967  009A                     	;# 
   968  009B                     	;# 
   969  009B                     	;# 
   970  009C                     	;# 
   971  009D                     	;# 
   972  009E                     	;# 
   973  010C                     	;# 
   974  010D                     	;# 
   975  010E                     	;# 
   976  0111                     	;# 
   977  0112                     	;# 
   978  0113                     	;# 
   979  0114                     	;# 
   980  0115                     	;# 
   981  0116                     	;# 
   982  0117                     	;# 
   983  0118                     	;# 
   984  0119                     	;# 
   985  011A                     	;# 
   986  011B                     	;# 
   987  011D                     	;# 
   988  011E                     	;# 
   989  018C                     	;# 
   990  018D                     	;# 
   991  018E                     	;# 
   992  0191                     	;# 
   993  0191                     	;# 
   994  0192                     	;# 
   995  0193                     	;# 
   996  0193                     	;# 
   997  0193                     	;# 
   998  0194                     	;# 
   999  0195                     	;# 
  1000  0196                     	;# 
  1001  0199                     	;# 
  1002  019A                     	;# 
  1003  019B                     	;# 
  1004  019B                     	;# 
  1005  019C                     	;# 
  1006  019D                     	;# 
  1007  019E                     	;# 
  1008  019F                     	;# 
  1009  020C                     	;# 
  1010  020D                     	;# 
  1011  020E                     	;# 
  1012  0211                     	;# 
  1013  0211                     	;# 
  1014  0212                     	;# 
  1015  0212                     	;# 
  1016  0213                     	;# 
  1017  0213                     	;# 
  1018  0214                     	;# 
  1019  0214                     	;# 
  1020  0215                     	;# 
  1021  0215                     	;# 
  1022  0215                     	;# 
  1023  0216                     	;# 
  1024  0216                     	;# 
  1025  0217                     	;# 
  1026  0217                     	;# 
  1027  0219                     	;# 
  1028  021A                     	;# 
  1029  021B                     	;# 
  1030  021C                     	;# 
  1031  021D                     	;# 
  1032  021E                     	;# 
  1033  021F                     	;# 
  1034  0291                     	;# 
  1035  0291                     	;# 
  1036  0292                     	;# 
  1037  0293                     	;# 
  1038  0294                     	;# 
  1039  0295                     	;# 
  1040  0295                     	;# 
  1041  0296                     	;# 
  1042  0298                     	;# 
  1043  0298                     	;# 
  1044  0299                     	;# 
  1045  029A                     	;# 
  1046  029B                     	;# 
  1047  029C                     	;# 
  1048  029D                     	;# 
  1049  029E                     	;# 
  1050  0311                     	;# 
  1051  0311                     	;# 
  1052  0312                     	;# 
  1053  0313                     	;# 
  1054  0318                     	;# 
  1055  0318                     	;# 
  1056  0319                     	;# 
  1057  031A                     	;# 
  1058  038C                     	;# 
  1059  038D                     	;# 
  1060  038E                     	;# 
  1061  0391                     	;# 
  1062  0392                     	;# 
  1063  0393                     	;# 
  1064  0394                     	;# 
  1065  0395                     	;# 
  1066  0396                     	;# 
  1067  039A                     	;# 
  1068  039C                     	;# 
  1069  039D                     	;# 
  1070  039E                     	;# 
  1071  039F                     	;# 
  1072  0415                     	;# 
  1073  0416                     	;# 
  1074  0417                     	;# 
  1075  041C                     	;# 
  1076  041D                     	;# 
  1077  041E                     	;# 
  1078  0FE4                     	;# 
  1079  0FE5                     	;# 
  1080  0FE6                     	;# 
  1081  0FE7                     	;# 
  1082  0FE8                     	;# 
  1083  0FE9                     	;# 
  1084  0FEA                     	;# 
  1085  0FEB                     	;# 
  1086  0FED                     	;# 
  1087  0FEE                     	;# 
  1088  0FEF                     	;# 
  1089  0000                     	;# 
  1090  0001                     	;# 
  1091  0002                     	;# 
  1092  0003                     	;# 
  1093  0004                     	;# 
  1094  0005                     	;# 
  1095  0006                     	;# 
  1096  0007                     	;# 
  1097  0008                     	;# 
  1098  0009                     	;# 
  1099  000A                     	;# 
  1100  000B                     	;# 
  1101  000C                     	;# 
  1102  000D                     	;# 
  1103  000E                     	;# 
  1104  0011                     	;# 
  1105  0012                     	;# 
  1106  0013                     	;# 
  1107  0014                     	;# 
  1108  0015                     	;# 
  1109  0016                     	;# 
  1110  0016                     	;# 
  1111  0017                     	;# 
  1112  0018                     	;# 
  1113  0019                     	;# 
  1114  001A                     	;# 
  1115  001B                     	;# 
  1116  001C                     	;# 
  1117  001E                     	;# 
  1118  001F                     	;# 
  1119  008C                     	;# 
  1120  008D                     	;# 
  1121  008E                     	;# 
  1122  0091                     	;# 
  1123  0092                     	;# 
  1124  0093                     	;# 
  1125  0094                     	;# 
  1126  0095                     	;# 
  1127  0096                     	;# 
  1128  0097                     	;# 
  1129  0098                     	;# 
  1130  0099                     	;# 
  1131  009A                     	;# 
  1132  009B                     	;# 
  1133  009B                     	;# 
  1134  009C                     	;# 
  1135  009D                     	;# 
  1136  009E                     	;# 
  1137  010C                     	;# 
  1138  010D                     	;# 
  1139  010E                     	;# 
  1140  0111                     	;# 
  1141  0112                     	;# 
  1142  0113                     	;# 
  1143  0114                     	;# 
  1144  0115                     	;# 
  1145  0116                     	;# 
  1146  0117                     	;# 
  1147  0118                     	;# 
  1148  0119                     	;# 
  1149  011A                     	;# 
  1150  011B                     	;# 
  1151  011D                     	;# 
  1152  011E                     	;# 
  1153  018C                     	;# 
  1154  018D                     	;# 
  1155  018E                     	;# 
  1156  0191                     	;# 
  1157  0191                     	;# 
  1158  0192                     	;# 
  1159  0193                     	;# 
  1160  0193                     	;# 
  1161  0193                     	;# 
  1162  0194                     	;# 
  1163  0195                     	;# 
  1164  0196                     	;# 
  1165  0199                     	;# 
  1166  019A                     	;# 
  1167  019B                     	;# 
  1168  019B                     	;# 
  1169  019C                     	;# 
  1170  019D                     	;# 
  1171  019E                     	;# 
  1172  019F                     	;# 
  1173  020C                     	;# 
  1174  020D                     	;# 
  1175  020E                     	;# 
  1176  0211                     	;# 
  1177  0211                     	;# 
  1178  0212                     	;# 
  1179  0212                     	;# 
  1180  0213                     	;# 
  1181  0213                     	;# 
  1182  0214                     	;# 
  1183  0214                     	;# 
  1184  0215                     	;# 
  1185  0215                     	;# 
  1186  0215                     	;# 
  1187  0216                     	;# 
  1188  0216                     	;# 
  1189  0217                     	;# 
  1190  0217                     	;# 
  1191  0219                     	;# 
  1192  021A                     	;# 
  1193  021B                     	;# 
  1194  021C                     	;# 
  1195  021D                     	;# 
  1196  021E                     	;# 
  1197  021F                     	;# 
  1198  0291                     	;# 
  1199  0291                     	;# 
  1200  0292                     	;# 
  1201  0293                     	;# 
  1202  0294                     	;# 
  1203  0295                     	;# 
  1204  0295                     	;# 
  1205  0296                     	;# 
  1206  0298                     	;# 
  1207  0298                     	;# 
  1208  0299                     	;# 
  1209  029A                     	;# 
  1210  029B                     	;# 
  1211  029C                     	;# 
  1212  029D                     	;# 
  1213  029E                     	;# 
  1214  0311                     	;# 
  1215  0311                     	;# 
  1216  0312                     	;# 
  1217  0313                     	;# 
  1218  0318                     	;# 
  1219  0318                     	;# 
  1220  0319                     	;# 
  1221  031A                     	;# 
  1222  038C                     	;# 
  1223  038D                     	;# 
  1224  038E                     	;# 
  1225  0391                     	;# 
  1226  0392                     	;# 
  1227  0393                     	;# 
  1228  0394                     	;# 
  1229  0395                     	;# 
  1230  0396                     	;# 
  1231  039A                     	;# 
  1232  039C                     	;# 
  1233  039D                     	;# 
  1234  039E                     	;# 
  1235  039F                     	;# 
  1236  0415                     	;# 
  1237  0416                     	;# 
  1238  0417                     	;# 
  1239  041C                     	;# 
  1240  041D                     	;# 
  1241  041E                     	;# 
  1242  0FE4                     	;# 
  1243  0FE5                     	;# 
  1244  0FE6                     	;# 
  1245  0FE7                     	;# 
  1246  0FE8                     	;# 
  1247  0FE9                     	;# 
  1248  0FEA                     	;# 
  1249  0FEB                     	;# 
  1250  0FED                     	;# 
  1251  0FEE                     	;# 
  1252  0FEF                     	;# 
  1253  0000                     	;# 
  1254  0001                     	;# 
  1255  0002                     	;# 
  1256  0003                     	;# 
  1257  0004                     	;# 
  1258  0005                     	;# 
  1259  0006                     	;# 
  1260  0007                     	;# 
  1261  0008                     	;# 
  1262  0009                     	;# 
  1263  000A                     	;# 
  1264  000B                     	;# 
  1265  000C                     	;# 
  1266  000D                     	;# 
  1267  000E                     	;# 
  1268  0011                     	;# 
  1269  0012                     	;# 
  1270  0013                     	;# 
  1271  0014                     	;# 
  1272  0015                     	;# 
  1273  0016                     	;# 
  1274  0016                     	;# 
  1275  0017                     	;# 
  1276  0018                     	;# 
  1277  0019                     	;# 
  1278  001A                     	;# 
  1279  001B                     	;# 
  1280  001C                     	;# 
  1281  001E                     	;# 
  1282  001F                     	;# 
  1283  008C                     	;# 
  1284  008D                     	;# 
  1285  008E                     	;# 
  1286  0091                     	;# 
  1287  0092                     	;# 
  1288  0093                     	;# 
  1289  0094                     	;# 
  1290  0095                     	;# 
  1291  0096                     	;# 
  1292  0097                     	;# 
  1293  0098                     	;# 
  1294  0099                     	;# 
  1295  009A                     	;# 
  1296  009B                     	;# 
  1297  009B                     	;# 
  1298  009C                     	;# 
  1299  009D                     	;# 
  1300  009E                     	;# 
  1301  010C                     	;# 
  1302  010D                     	;# 
  1303  010E                     	;# 
  1304  0111                     	;# 
  1305  0112                     	;# 
  1306  0113                     	;# 
  1307  0114                     	;# 
  1308  0115                     	;# 
  1309  0116                     	;# 
  1310  0117                     	;# 
  1311  0118                     	;# 
  1312  0119                     	;# 
  1313  011A                     	;# 
  1314  011B                     	;# 
  1315  011D                     	;# 
  1316  011E                     	;# 
  1317  018C                     	;# 
  1318  018D                     	;# 
  1319  018E                     	;# 
  1320  0191                     	;# 
  1321  0191                     	;# 
  1322  0192                     	;# 
  1323  0193                     	;# 
  1324  0193                     	;# 
  1325  0193                     	;# 
  1326  0194                     	;# 
  1327  0195                     	;# 
  1328  0196                     	;# 
  1329  0199                     	;# 
  1330  019A                     	;# 
  1331  019B                     	;# 
  1332  019B                     	;# 
  1333  019C                     	;# 
  1334  019D                     	;# 
  1335  019E                     	;# 
  1336  019F                     	;# 
  1337  020C                     	;# 
  1338  020D                     	;# 
  1339  020E                     	;# 
  1340  0211                     	;# 
  1341  0211                     	;# 
  1342  0212                     	;# 
  1343  0212                     	;# 
  1344  0213                     	;# 
  1345  0213                     	;# 
  1346  0214                     	;# 
  1347  0214                     	;# 
  1348  0215                     	;# 
  1349  0215                     	;# 
  1350  0215                     	;# 
  1351  0216                     	;# 
  1352  0216                     	;# 
  1353  0217                     	;# 
  1354  0217                     	;# 
  1355  0219                     	;# 
  1356  021A                     	;# 
  1357  021B                     	;# 
  1358  021C                     	;# 
  1359  021D                     	;# 
  1360  021E                     	;# 
  1361  021F                     	;# 
  1362  0291                     	;# 
  1363  0291                     	;# 
  1364  0292                     	;# 
  1365  0293                     	;# 
  1366  0294                     	;# 
  1367  0295                     	;# 
  1368  0295                     	;# 
  1369  0296                     	;# 
  1370  0298                     	;# 
  1371  0298                     	;# 
  1372  0299                     	;# 
  1373  029A                     	;# 
  1374  029B                     	;# 
  1375  029C                     	;# 
  1376  029D                     	;# 
  1377  029E                     	;# 
  1378  0311                     	;# 
  1379  0311                     	;# 
  1380  0312                     	;# 
  1381  0313                     	;# 
  1382  0318                     	;# 
  1383  0318                     	;# 
  1384  0319                     	;# 
  1385  031A                     	;# 
  1386  038C                     	;# 
  1387  038D                     	;# 
  1388  038E                     	;# 
  1389  0391                     	;# 
  1390  0392                     	;# 
  1391  0393                     	;# 
  1392  0394                     	;# 
  1393  0395                     	;# 
  1394  0396                     	;# 
  1395  039A                     	;# 
  1396  039C                     	;# 
  1397  039D                     	;# 
  1398  039E                     	;# 
  1399  039F                     	;# 
  1400  0415                     	;# 
  1401  0416                     	;# 
  1402  0417                     	;# 
  1403  041C                     	;# 
  1404  041D                     	;# 
  1405  041E                     	;# 
  1406  0FE4                     	;# 
  1407  0FE5                     	;# 
  1408  0FE6                     	;# 
  1409  0FE7                     	;# 
  1410  0FE8                     	;# 
  1411  0FE9                     	;# 
  1412  0FEA                     	;# 
  1413  0FEB                     	;# 
  1414  0FED                     	;# 
  1415  0FEE                     	;# 
  1416  0FEF                     	;# 
  1417  0000                     	;# 
  1418  0001                     	;# 
  1419  0002                     	;# 
  1420  0003                     	;# 
  1421  0004                     	;# 
  1422  0005                     	;# 
  1423  0006                     	;# 
  1424  0007                     	;# 
  1425  0008                     	;# 
  1426  0009                     	;# 
  1427  000A                     	;# 
  1428  000B                     	;# 
  1429  000C                     	;# 
  1430  000D                     	;# 
  1431  000E                     	;# 
  1432  0011                     	;# 
  1433  0012                     	;# 
  1434  0013                     	;# 
  1435  0014                     	;# 
  1436  0015                     	;# 
  1437  0016                     	;# 
  1438  0016                     	;# 
  1439  0017                     	;# 
  1440  0018                     	;# 
  1441  0019                     	;# 
  1442  001A                     	;# 
  1443  001B                     	;# 
  1444  001C                     	;# 
  1445  001E                     	;# 
  1446  001F                     	;# 
  1447  008C                     	;# 
  1448  008D                     	;# 
  1449  008E                     	;# 
  1450  0091                     	;# 
  1451  0092                     	;# 
  1452  0093                     	;# 
  1453  0094                     	;# 
  1454  0095                     	;# 
  1455  0096                     	;# 
  1456  0097                     	;# 
  1457  0098                     	;# 
  1458  0099                     	;# 
  1459  009A                     	;# 
  1460  009B                     	;# 
  1461  009B                     	;# 
  1462  009C                     	;# 
  1463  009D                     	;# 
  1464  009E                     	;# 
  1465  010C                     	;# 
  1466  010D                     	;# 
  1467  010E                     	;# 
  1468  0111                     	;# 
  1469  0112                     	;# 
  1470  0113                     	;# 
  1471  0114                     	;# 
  1472  0115                     	;# 
  1473  0116                     	;# 
  1474  0117                     	;# 
  1475  0118                     	;# 
  1476  0119                     	;# 
  1477  011A                     	;# 
  1478  011B                     	;# 
  1479  011D                     	;# 
  1480  011E                     	;# 
  1481  018C                     	;# 
  1482  018D                     	;# 
  1483  018E                     	;# 
  1484  0191                     	;# 
  1485  0191                     	;# 
  1486  0192                     	;# 
  1487  0193                     	;# 
  1488  0193                     	;# 
  1489  0193                     	;# 
  1490  0194                     	;# 
  1491  0195                     	;# 
  1492  0196                     	;# 
  1493  0199                     	;# 
  1494  019A                     	;# 
  1495  019B                     	;# 
  1496  019B                     	;# 
  1497  019C                     	;# 
  1498  019D                     	;# 
  1499  019E                     	;# 
  1500  019F                     	;# 
  1501  020C                     	;# 
  1502  020D                     	;# 
  1503  020E                     	;# 
  1504  0211                     	;# 
  1505  0211                     	;# 
  1506  0212                     	;# 
  1507  0212                     	;# 
  1508  0213                     	;# 
  1509  0213                     	;# 
  1510  0214                     	;# 
  1511  0214                     	;# 
  1512  0215                     	;# 
  1513  0215                     	;# 
  1514  0215                     	;# 
  1515  0216                     	;# 
  1516  0216                     	;# 
  1517  0217                     	;# 
  1518  0217                     	;# 
  1519  0219                     	;# 
  1520  021A                     	;# 
  1521  021B                     	;# 
  1522  021C                     	;# 
  1523  021D                     	;# 
  1524  021E                     	;# 
  1525  021F                     	;# 
  1526  0291                     	;# 
  1527  0291                     	;# 
  1528  0292                     	;# 
  1529  0293                     	;# 
  1530  0294                     	;# 
  1531  0295                     	;# 
  1532  0295                     	;# 
  1533  0296                     	;# 
  1534  0298                     	;# 
  1535  0298                     	;# 
  1536  0299                     	;# 
  1537  029A                     	;# 
  1538  029B                     	;# 
  1539  029C                     	;# 
  1540  029D                     	;# 
  1541  029E                     	;# 
  1542  0311                     	;# 
  1543  0311                     	;# 
  1544  0312                     	;# 
  1545  0313                     	;# 
  1546  0318                     	;# 
  1547  0318                     	;# 
  1548  0319                     	;# 
  1549  031A                     	;# 
  1550  038C                     	;# 
  1551  038D                     	;# 
  1552  038E                     	;# 
  1553  0391                     	;# 
  1554  0392                     	;# 
  1555  0393                     	;# 
  1556  0394                     	;# 
  1557  0395                     	;# 
  1558  0396                     	;# 
  1559  039A                     	;# 
  1560  039C                     	;# 
  1561  039D                     	;# 
  1562  039E                     	;# 
  1563  039F                     	;# 
  1564  0415                     	;# 
  1565  0416                     	;# 
  1566  0417                     	;# 
  1567  041C                     	;# 
  1568  041D                     	;# 
  1569  041E                     	;# 
  1570  0FE4                     	;# 
  1571  0FE5                     	;# 
  1572  0FE6                     	;# 
  1573  0FE7                     	;# 
  1574  0FE8                     	;# 
  1575  0FE9                     	;# 
  1576  0FEA                     	;# 
  1577  0FEB                     	;# 
  1578  0FED                     	;# 
  1579  0FEE                     	;# 
  1580  0FEF                     	;# 
  1581  0000                     	;# 
  1582  0001                     	;# 
  1583  0002                     	;# 
  1584  0003                     	;# 
  1585  0004                     	;# 
  1586  0005                     	;# 
  1587  0006                     	;# 
  1588  0007                     	;# 
  1589  0008                     	;# 
  1590  0009                     	;# 
  1591  000A                     	;# 
  1592  000B                     	;# 
  1593  000C                     	;# 
  1594  000D                     	;# 
  1595  000E                     	;# 
  1596  0011                     	;# 
  1597  0012                     	;# 
  1598  0013                     	;# 
  1599  0014                     	;# 
  1600  0015                     	;# 
  1601  0016                     	;# 
  1602  0016                     	;# 
  1603  0017                     	;# 
  1604  0018                     	;# 
  1605  0019                     	;# 
  1606  001A                     	;# 
  1607  001B                     	;# 
  1608  001C                     	;# 
  1609  001E                     	;# 
  1610  001F                     	;# 
  1611  008C                     	;# 
  1612  008D                     	;# 
  1613  008E                     	;# 
  1614  0091                     	;# 
  1615  0092                     	;# 
  1616  0093                     	;# 
  1617  0094                     	;# 
  1618  0095                     	;# 
  1619  0096                     	;# 
  1620  0097                     	;# 
  1621  0098                     	;# 
  1622  0099                     	;# 
  1623  009A                     	;# 
  1624  009B                     	;# 
  1625  009B                     	;# 
  1626  009C                     	;# 
  1627  009D                     	;# 
  1628  009E                     	;# 
  1629  010C                     	;# 
  1630  010D                     	;# 
  1631  010E                     	;# 
  1632  0111                     	;# 
  1633  0112                     	;# 
  1634  0113                     	;# 
  1635  0114                     	;# 
  1636  0115                     	;# 
  1637  0116                     	;# 
  1638  0117                     	;# 
  1639  0118                     	;# 
  1640  0119                     	;# 
  1641  011A                     	;# 
  1642  011B                     	;# 
  1643  011D                     	;# 
  1644  011E                     	;# 
  1645  018C                     	;# 
  1646  018D                     	;# 
  1647  018E                     	;# 
  1648  0191                     	;# 
  1649  0191                     	;# 
  1650  0192                     	;# 
  1651  0193                     	;# 
  1652  0193                     	;# 
  1653  0193                     	;# 
  1654  0194                     	;# 
  1655  0195                     	;# 
  1656  0196                     	;# 
  1657  0199                     	;# 
  1658  019A                     	;# 
  1659  019B                     	;# 
  1660  019B                     	;# 
  1661  019C                     	;# 
  1662  019D                     	;# 
  1663  019E                     	;# 
  1664  019F                     	;# 
  1665  020C                     	;# 
  1666  020D                     	;# 
  1667  020E                     	;# 
  1668  0211                     	;# 
  1669  0211                     	;# 
  1670  0212                     	;# 
  1671  0212                     	;# 
  1672  0213                     	;# 
  1673  0213                     	;# 
  1674  0214                     	;# 
  1675  0214                     	;# 
  1676  0215                     	;# 
  1677  0215                     	;# 
  1678  0215                     	;# 
  1679  0216                     	;# 
  1680  0216                     	;# 
  1681  0217                     	;# 
  1682  0217                     	;# 
  1683  0219                     	;# 
  1684  021A                     	;# 
  1685  021B                     	;# 
  1686  021C                     	;# 
  1687  021D                     	;# 
  1688  021E                     	;# 
  1689  021F                     	;# 
  1690  0291                     	;# 
  1691  0291                     	;# 
  1692  0292                     	;# 
  1693  0293                     	;# 
  1694  0294                     	;# 
  1695  0295                     	;# 
  1696  0295                     	;# 
  1697  0296                     	;# 
  1698  0298                     	;# 
  1699  0298                     	;# 
  1700  0299                     	;# 
  1701  029A                     	;# 
  1702  029B                     	;# 
  1703  029C                     	;# 
  1704  029D                     	;# 
  1705  029E                     	;# 
  1706  0311                     	;# 
  1707  0311                     	;# 
  1708  0312                     	;# 
  1709  0313                     	;# 
  1710  0318                     	;# 
  1711  0318                     	;# 
  1712  0319                     	;# 
  1713  031A                     	;# 
  1714  038C                     	;# 
  1715  038D                     	;# 
  1716  038E                     	;# 
  1717  0391                     	;# 
  1718  0392                     	;# 
  1719  0393                     	;# 
  1720  0394                     	;# 
  1721  0395                     	;# 
  1722  0396                     	;# 
  1723  039A                     	;# 
  1724  039C                     	;# 
  1725  039D                     	;# 
  1726  039E                     	;# 
  1727  039F                     	;# 
  1728  0415                     	;# 
  1729  0416                     	;# 
  1730  0417                     	;# 
  1731  041C                     	;# 
  1732  041D                     	;# 
  1733  041E                     	;# 
  1734  0FE4                     	;# 
  1735  0FE5                     	;# 
  1736  0FE6                     	;# 
  1737  0FE7                     	;# 
  1738  0FE8                     	;# 
  1739  0FE9                     	;# 
  1740  0FEA                     	;# 
  1741  0FEB                     	;# 
  1742  0FED                     	;# 
  1743  0FEE                     	;# 
  1744  0FEF                     	;# 
  1745  0000                     	;# 
  1746  0001                     	;# 
  1747  0002                     	;# 
  1748  0003                     	;# 
  1749  0004                     	;# 
  1750  0005                     	;# 
  1751  0006                     	;# 
  1752  0007                     	;# 
  1753  0008                     	;# 
  1754  0009                     	;# 
  1755  000A                     	;# 
  1756  000B                     	;# 
  1757  000C                     	;# 
  1758  000D                     	;# 
  1759  000E                     	;# 
  1760  0011                     	;# 
  1761  0012                     	;# 
  1762  0013                     	;# 
  1763  0014                     	;# 
  1764  0015                     	;# 
  1765  0016                     	;# 
  1766  0016                     	;# 
  1767  0017                     	;# 
  1768  0018                     	;# 
  1769  0019                     	;# 
  1770  001A                     	;# 
  1771  001B                     	;# 
  1772  001C                     	;# 
  1773  001E                     	;# 
  1774  001F                     	;# 
  1775  008C                     	;# 
  1776  008D                     	;# 
  1777  008E                     	;# 
  1778  0091                     	;# 
  1779  0092                     	;# 
  1780  0093                     	;# 
  1781  0094                     	;# 
  1782  0095                     	;# 
  1783  0096                     	;# 
  1784  0097                     	;# 
  1785  0098                     	;# 
  1786  0099                     	;# 
  1787  009A                     	;# 
  1788  009B                     	;# 
  1789  009B                     	;# 
  1790  009C                     	;# 
  1791  009D                     	;# 
  1792  009E                     	;# 
  1793  010C                     	;# 
  1794  010D                     	;# 
  1795  010E                     	;# 
  1796  0111                     	;# 
  1797  0112                     	;# 
  1798  0113                     	;# 
  1799  0114                     	;# 
  1800  0115                     	;# 
  1801  0116                     	;# 
  1802  0117                     	;# 
  1803  0118                     	;# 
  1804  0119                     	;# 
  1805  011A                     	;# 
  1806  011B                     	;# 
  1807  011D                     	;# 
  1808  011E                     	;# 
  1809  018C                     	;# 
  1810  018D                     	;# 
  1811  018E                     	;# 
  1812  0191                     	;# 
  1813  0191                     	;# 
  1814  0192                     	;# 
  1815  0193                     	;# 
  1816  0193                     	;# 
  1817  0193                     	;# 
  1818  0194                     	;# 
  1819  0195                     	;# 
  1820  0196                     	;# 
  1821  0199                     	;# 
  1822  019A                     	;# 
  1823  019B                     	;# 
  1824  019B                     	;# 
  1825  019C                     	;# 
  1826  019D                     	;# 
  1827  019E                     	;# 
  1828  019F                     	;# 
  1829  020C                     	;# 
  1830  020D                     	;# 
  1831  020E                     	;# 
  1832  0211                     	;# 
  1833  0211                     	;# 
  1834  0212                     	;# 
  1835  0212                     	;# 
  1836  0213                     	;# 
  1837  0213                     	;# 
  1838  0214                     	;# 
  1839  0214                     	;# 
  1840  0215                     	;# 
  1841  0215                     	;# 
  1842  0215                     	;# 
  1843  0216                     	;# 
  1844  0216                     	;# 
  1845  0217                     	;# 
  1846  0217                     	;# 
  1847  0219                     	;# 
  1848  021A                     	;# 
  1849  021B                     	;# 
  1850  021C                     	;# 
  1851  021D                     	;# 
  1852  021E                     	;# 
  1853  021F                     	;# 
  1854  0291                     	;# 
  1855  0291                     	;# 
  1856  0292                     	;# 
  1857  0293                     	;# 
  1858  0294                     	;# 
  1859  0295                     	;# 
  1860  0295                     	;# 
  1861  0296                     	;# 
  1862  0298                     	;# 
  1863  0298                     	;# 
  1864  0299                     	;# 
  1865  029A                     	;# 
  1866  029B                     	;# 
  1867  029C                     	;# 
  1868  029D                     	;# 
  1869  029E                     	;# 
  1870  0311                     	;# 
  1871  0311                     	;# 
  1872  0312                     	;# 
  1873  0313                     	;# 
  1874  0318                     	;# 
  1875  0318                     	;# 
  1876  0319                     	;# 
  1877  031A                     	;# 
  1878  038C                     	;# 
  1879  038D                     	;# 
  1880  038E                     	;# 
  1881  0391                     	;# 
  1882  0392                     	;# 
  1883  0393                     	;# 
  1884  0394                     	;# 
  1885  0395                     	;# 
  1886  0396                     	;# 
  1887  039A                     	;# 
  1888  039C                     	;# 
  1889  039D                     	;# 
  1890  039E                     	;# 
  1891  039F                     	;# 
  1892  0415                     	;# 
  1893  0416                     	;# 
  1894  0417                     	;# 
  1895  041C                     	;# 
  1896  041D                     	;# 
  1897  041E                     	;# 
  1898  0FE4                     	;# 
  1899  0FE5                     	;# 
  1900  0FE6                     	;# 
  1901  0FE7                     	;# 
  1902  0FE8                     	;# 
  1903  0FE9                     	;# 
  1904  0FEA                     	;# 
  1905  0FEB                     	;# 
  1906  0FED                     	;# 
  1907  0FEE                     	;# 
  1908  0FEF                     	;# 
  1909  0000                     	;# 
  1910  0001                     	;# 
  1911  0002                     	;# 
  1912  0003                     	;# 
  1913  0004                     	;# 
  1914  0005                     	;# 
  1915  0006                     	;# 
  1916  0007                     	;# 
  1917  0008                     	;# 
  1918  0009                     	;# 
  1919  000A                     	;# 
  1920  000B                     	;# 
  1921  000C                     	;# 
  1922  000D                     	;# 
  1923  000E                     	;# 
  1924  0011                     	;# 
  1925  0012                     	;# 
  1926  0013                     	;# 
  1927  0014                     	;# 
  1928  0015                     	;# 
  1929  0016                     	;# 
  1930  0016                     	;# 
  1931  0017                     	;# 
  1932  0018                     	;# 
  1933  0019                     	;# 
  1934  001A                     	;# 
  1935  001B                     	;# 
  1936  001C                     	;# 
  1937  001E                     	;# 
  1938  001F                     	;# 
  1939  008C                     	;# 
  1940  008D                     	;# 
  1941  008E                     	;# 
  1942  0091                     	;# 
  1943  0092                     	;# 
  1944  0093                     	;# 
  1945  0094                     	;# 
  1946  0095                     	;# 
  1947  0096                     	;# 
  1948  0097                     	;# 
  1949  0098                     	;# 
  1950  0099                     	;# 
  1951  009A                     	;# 
  1952  009B                     	;# 
  1953  009B                     	;# 
  1954  009C                     	;# 
  1955  009D                     	;# 
  1956  009E                     	;# 
  1957  010C                     	;# 
  1958  010D                     	;# 
  1959  010E                     	;# 
  1960  0111                     	;# 
  1961  0112                     	;# 
  1962  0113                     	;# 
  1963  0114                     	;# 
  1964  0115                     	;# 
  1965  0116                     	;# 
  1966  0117                     	;# 
  1967  0118                     	;# 
  1968  0119                     	;# 
  1969  011A                     	;# 
  1970  011B                     	;# 
  1971  011D                     	;# 
  1972  011E                     	;# 
  1973  018C                     	;# 
  1974  018D                     	;# 
  1975  018E                     	;# 
  1976  0191                     	;# 
  1977  0191                     	;# 
  1978  0192                     	;# 
  1979  0193                     	;# 
  1980  0193                     	;# 
  1981  0193                     	;# 
  1982  0194                     	;# 
  1983  0195                     	;# 
  1984  0196                     	;# 
  1985  0199                     	;# 
  1986  019A                     	;# 
  1987  019B                     	;# 
  1988  019B                     	;# 
  1989  019C                     	;# 
  1990  019D                     	;# 
  1991  019E                     	;# 
  1992  019F                     	;# 
  1993  020C                     	;# 
  1994  020D                     	;# 
  1995  020E                     	;# 
  1996  0211                     	;# 
  1997  0211                     	;# 
  1998  0212                     	;# 
  1999  0212                     	;# 
  2000  0213                     	;# 
  2001  0213                     	;# 
  2002  0214                     	;# 
  2003  0214                     	;# 
  2004  0215                     	;# 
  2005  0215                     	;# 
  2006  0215                     	;# 
  2007  0216                     	;# 
  2008  0216                     	;# 
  2009  0217                     	;# 
  2010  0217                     	;# 
  2011  0219                     	;# 
  2012  021A                     	;# 
  2013  021B                     	;# 
  2014  021C                     	;# 
  2015  021D                     	;# 
  2016  021E                     	;# 
  2017  021F                     	;# 
  2018  0291                     	;# 
  2019  0291                     	;# 
  2020  0292                     	;# 
  2021  0293                     	;# 
  2022  0294                     	;# 
  2023  0295                     	;# 
  2024  0295                     	;# 
  2025  0296                     	;# 
  2026  0298                     	;# 
  2027  0298                     	;# 
  2028  0299                     	;# 
  2029  029A                     	;# 
  2030  029B                     	;# 
  2031  029C                     	;# 
  2032  029D                     	;# 
  2033  029E                     	;# 
  2034  0311                     	;# 
  2035  0311                     	;# 
  2036  0312                     	;# 
  2037  0313                     	;# 
  2038  0318                     	;# 
  2039  0318                     	;# 
  2040  0319                     	;# 
  2041  031A                     	;# 
  2042  038C                     	;# 
  2043  038D                     	;# 
  2044  038E                     	;# 
  2045  0391                     	;# 
  2046  0392                     	;# 
  2047  0393                     	;# 
  2048  0394                     	;# 
  2049  0395                     	;# 
  2050  0396                     	;# 
  2051  039A                     	;# 
  2052  039C                     	;# 
  2053  039D                     	;# 
  2054  039E                     	;# 
  2055  039F                     	;# 
  2056  0415                     	;# 
  2057  0416                     	;# 
  2058  0417                     	;# 
  2059  041C                     	;# 
  2060  041D                     	;# 
  2061  041E                     	;# 
  2062  0FE4                     	;# 
  2063  0FE5                     	;# 
  2064  0FE6                     	;# 
  2065  0FE7                     	;# 
  2066  0FE8                     	;# 
  2067  0FE9                     	;# 
  2068  0FEA                     	;# 
  2069  0FEB                     	;# 
  2070  0FED                     	;# 
  2071  0FEE                     	;# 
  2072  0FEF                     	;# 
  2073  0000                     	;# 
  2074  0001                     	;# 
  2075  0002                     	;# 
  2076  0003                     	;# 
  2077  0004                     	;# 
  2078  0005                     	;# 
  2079  0006                     	;# 
  2080  0007                     	;# 
  2081  0008                     	;# 
  2082  0009                     	;# 
  2083  000A                     	;# 
  2084  000B                     	;# 
  2085  000C                     	;# 
  2086  000D                     	;# 
  2087  000E                     	;# 
  2088  0011                     	;# 
  2089  0012                     	;# 
  2090  0013                     	;# 
  2091  0014                     	;# 
  2092  0015                     	;# 
  2093  0016                     	;# 
  2094  0016                     	;# 
  2095  0017                     	;# 
  2096  0018                     	;# 
  2097  0019                     	;# 
  2098  001A                     	;# 
  2099  001B                     	;# 
  2100  001C                     	;# 
  2101  001E                     	;# 
  2102  001F                     	;# 
  2103  008C                     	;# 
  2104  008D                     	;# 
  2105  008E                     	;# 
  2106  0091                     	;# 
  2107  0092                     	;# 
  2108  0093                     	;# 
  2109  0094                     	;# 
  2110  0095                     	;# 
  2111  0096                     	;# 
  2112  0097                     	;# 
  2113  0098                     	;# 
  2114  0099                     	;# 
  2115  009A                     	;# 
  2116  009B                     	;# 
  2117  009B                     	;# 
  2118  009C                     	;# 
  2119  009D                     	;# 
  2120  009E                     	;# 
  2121  010C                     	;# 
  2122  010D                     	;# 
  2123  010E                     	;# 
  2124  0111                     	;# 
  2125  0112                     	;# 
  2126  0113                     	;# 
  2127  0114                     	;# 
  2128  0115                     	;# 
  2129  0116                     	;# 
  2130  0117                     	;# 
  2131  0118                     	;# 
  2132  0119                     	;# 
  2133  011A                     	;# 
  2134  011B                     	;# 
  2135  011D                     	;# 
  2136  011E                     	;# 
  2137  018C                     	;# 
  2138  018D                     	;# 
  2139  018E                     	;# 
  2140  0191                     	;# 
  2141  0191                     	;# 
  2142  0192                     	;# 
  2143  0193                     	;# 
  2144  0193                     	;# 
  2145  0193                     	;# 
  2146  0194                     	;# 
  2147  0195                     	;# 
  2148  0196                     	;# 
  2149  0199                     	;# 
  2150  019A                     	;# 
  2151  019B                     	;# 
  2152  019B                     	;# 
  2153  019C                     	;# 
  2154  019D                     	;# 
  2155  019E                     	;# 
  2156  019F                     	;# 
  2157  020C                     	;# 
  2158  020D                     	;# 
  2159  020E                     	;# 
  2160  0211                     	;# 
  2161  0211                     	;# 
  2162  0212                     	;# 
  2163  0212                     	;# 
  2164  0213                     	;# 
  2165  0213                     	;# 
  2166  0214                     	;# 
  2167  0214                     	;# 
  2168  0215                     	;# 
  2169  0215                     	;# 
  2170  0215                     	;# 
  2171  0216                     	;# 
  2172  0216                     	;# 
  2173  0217                     	;# 
  2174  0217                     	;# 
  2175  0219                     	;# 
  2176  021A                     	;# 
  2177  021B                     	;# 
  2178  021C                     	;# 
  2179  021D                     	;# 
  2180  021E                     	;# 
  2181  021F                     	;# 
  2182  0291                     	;# 
  2183  0291                     	;# 
  2184  0292                     	;# 
  2185  0293                     	;# 
  2186  0294                     	;# 
  2187  0295                     	;# 
  2188  0295                     	;# 
  2189  0296                     	;# 
  2190  0298                     	;# 
  2191  0298                     	;# 
  2192  0299                     	;# 
  2193  029A                     	;# 
  2194  029B                     	;# 
  2195  029C                     	;# 
  2196  029D                     	;# 
  2197  029E                     	;# 
  2198  0311                     	;# 
  2199  0311                     	;# 
  2200  0312                     	;# 
  2201  0313                     	;# 
  2202  0318                     	;# 
  2203  0318                     	;# 
  2204  0319                     	;# 
  2205  031A                     	;# 
  2206  038C                     	;# 
  2207  038D                     	;# 
  2208  038E                     	;# 
  2209  0391                     	;# 
  2210  0392                     	;# 
  2211  0393                     	;# 
  2212  0394                     	;# 
  2213  0395                     	;# 
  2214  0396                     	;# 
  2215  039A                     	;# 
  2216  039C                     	;# 
  2217  039D                     	;# 
  2218  039E                     	;# 
  2219  039F                     	;# 
  2220  0415                     	;# 
  2221  0416                     	;# 
  2222  0417                     	;# 
  2223  041C                     	;# 
  2224  041D                     	;# 
  2225  041E                     	;# 
  2226  0FE4                     	;# 
  2227  0FE5                     	;# 
  2228  0FE6                     	;# 
  2229  0FE7                     	;# 
  2230  0FE8                     	;# 
  2231  0FE9                     	;# 
  2232  0FEA                     	;# 
  2233  0FEB                     	;# 
  2234  0FED                     	;# 
  2235  0FEE                     	;# 
  2236  0FEF                     	;# 
  2237  0000                     	;# 
  2238  0001                     	;# 
  2239  0002                     	;# 
  2240  0003                     	;# 
  2241  0004                     	;# 
  2242  0005                     	;# 
  2243  0006                     	;# 
  2244  0007                     	;# 
  2245  0008                     	;# 
  2246  0009                     	;# 
  2247  000A                     	;# 
  2248  000B                     	;# 
  2249  000C                     	;# 
  2250  000D                     	;# 
  2251  000E                     	;# 
  2252  0011                     	;# 
  2253  0012                     	;# 
  2254  0013                     	;# 
  2255  0014                     	;# 
  2256  0015                     	;# 
  2257  0016                     	;# 
  2258  0016                     	;# 
  2259  0017                     	;# 
  2260  0018                     	;# 
  2261  0019                     	;# 
  2262  001A                     	;# 
  2263  001B                     	;# 
  2264  001C                     	;# 
  2265  001E                     	;# 
  2266  001F                     	;# 
  2267  008C                     	;# 
  2268  008D                     	;# 
  2269  008E                     	;# 
  2270  0091                     	;# 
  2271  0092                     	;# 
  2272  0093                     	;# 
  2273  0094                     	;# 
  2274  0095                     	;# 
  2275  0096                     	;# 
  2276  0097                     	;# 
  2277  0098                     	;# 
  2278  0099                     	;# 
  2279  009A                     	;# 
  2280  009B                     	;# 
  2281  009B                     	;# 
  2282  009C                     	;# 
  2283  009D                     	;# 
  2284  009E                     	;# 
  2285  010C                     	;# 
  2286  010D                     	;# 
  2287  010E                     	;# 
  2288  0111                     	;# 
  2289  0112                     	;# 
  2290  0113                     	;# 
  2291  0114                     	;# 
  2292  0115                     	;# 
  2293  0116                     	;# 
  2294  0117                     	;# 
  2295  0118                     	;# 
  2296  0119                     	;# 
  2297  011A                     	;# 
  2298  011B                     	;# 
  2299  011D                     	;# 
  2300  011E                     	;# 
  2301  018C                     	;# 
  2302  018D                     	;# 
  2303  018E                     	;# 
  2304  0191                     	;# 
  2305  0191                     	;# 
  2306  0192                     	;# 
  2307  0193                     	;# 
  2308  0193                     	;# 
  2309  0193                     	;# 
  2310  0194                     	;# 
  2311  0195                     	;# 
  2312  0196                     	;# 
  2313  0199                     	;# 
  2314  019A                     	;# 
  2315  019B                     	;# 
  2316  019B                     	;# 
  2317  019C                     	;# 
  2318  019D                     	;# 
  2319  019E                     	;# 
  2320  019F                     	;# 
  2321  020C                     	;# 
  2322  020D                     	;# 
  2323  020E                     	;# 
  2324  0211                     	;# 
  2325  0211                     	;# 
  2326  0212                     	;# 
  2327  0212                     	;# 
  2328  0213                     	;# 
  2329  0213                     	;# 
  2330  0214                     	;# 
  2331  0214                     	;# 
  2332  0215                     	;# 
  2333  0215                     	;# 
  2334  0215                     	;# 
  2335  0216                     	;# 
  2336  0216                     	;# 
  2337  0217                     	;# 
  2338  0217                     	;# 
  2339  0219                     	;# 
  2340  021A                     	;# 
  2341  021B                     	;# 
  2342  021C                     	;# 
  2343  021D                     	;# 
  2344  021E                     	;# 
  2345  021F                     	;# 
  2346  0291                     	;# 
  2347  0291                     	;# 
  2348  0292                     	;# 
  2349  0293                     	;# 
  2350  0294                     	;# 
  2351  0295                     	;# 
  2352  0295                     	;# 
  2353  0296                     	;# 
  2354  0298                     	;# 
  2355  0298                     	;# 
  2356  0299                     	;# 
  2357  029A                     	;# 
  2358  029B                     	;# 
  2359  029C                     	;# 
  2360  029D                     	;# 
  2361  029E                     	;# 
  2362  0311                     	;# 
  2363  0311                     	;# 
  2364  0312                     	;# 
  2365  0313                     	;# 
  2366  0318                     	;# 
  2367  0318                     	;# 
  2368  0319                     	;# 
  2369  031A                     	;# 
  2370  038C                     	;# 
  2371  038D                     	;# 
  2372  038E                     	;# 
  2373  0391                     	;# 
  2374  0392                     	;# 
  2375  0393                     	;# 
  2376  0394                     	;# 
  2377  0395                     	;# 
  2378  0396                     	;# 
  2379  039A                     	;# 
  2380  039C                     	;# 
  2381  039D                     	;# 
  2382  039E                     	;# 
  2383  039F                     	;# 
  2384  0415                     	;# 
  2385  0416                     	;# 
  2386  0417                     	;# 
  2387  041C                     	;# 
  2388  041D                     	;# 
  2389  041E                     	;# 
  2390  0FE4                     	;# 
  2391  0FE5                     	;# 
  2392  0FE6                     	;# 
  2393  0FE7                     	;# 
  2394  0FE8                     	;# 
  2395  0FE9                     	;# 
  2396  0FEA                     	;# 
  2397  0FEB                     	;# 
  2398  0FED                     	;# 
  2399  0FEE                     	;# 
  2400  0FEF                     	;# 
  2401  0000                     	;# 
  2402  0001                     	;# 
  2403  0002                     	;# 
  2404  0003                     	;# 
  2405  0004                     	;# 
  2406  0005                     	;# 
  2407  0006                     	;# 
  2408  0007                     	;# 
  2409  0008                     	;# 
  2410  0009                     	;# 
  2411  000A                     	;# 
  2412  000B                     	;# 
  2413  000C                     	;# 
  2414  000D                     	;# 
  2415  000E                     	;# 
  2416  0011                     	;# 
  2417  0012                     	;# 
  2418  0013                     	;# 
  2419  0014                     	;# 
  2420  0015                     	;# 
  2421  0016                     	;# 
  2422  0016                     	;# 
  2423  0017                     	;# 
  2424  0018                     	;# 
  2425  0019                     	;# 
  2426  001A                     	;# 
  2427  001B                     	;# 
  2428  001C                     	;# 
  2429  001E                     	;# 
  2430  001F                     	;# 
  2431  008C                     	;# 
  2432  008D                     	;# 
  2433  008E                     	;# 
  2434  0091                     	;# 
  2435  0092                     	;# 
  2436  0093                     	;# 
  2437  0094                     	;# 
  2438  0095                     	;# 
  2439  0096                     	;# 
  2440  0097                     	;# 
  2441  0098                     	;# 
  2442  0099                     	;# 
  2443  009A                     	;# 
  2444  009B                     	;# 
  2445  009B                     	;# 
  2446  009C                     	;# 
  2447  009D                     	;# 
  2448  009E                     	;# 
  2449  010C                     	;# 
  2450  010D                     	;# 
  2451  010E                     	;# 
  2452  0111                     	;# 
  2453  0112                     	;# 
  2454  0113                     	;# 
  2455  0114                     	;# 
  2456  0115                     	;# 
  2457  0116                     	;# 
  2458  0117                     	;# 
  2459  0118                     	;# 
  2460  0119                     	;# 
  2461  011A                     	;# 
  2462  011B                     	;# 
  2463  011D                     	;# 
  2464  011E                     	;# 
  2465  018C                     	;# 
  2466  018D                     	;# 
  2467  018E                     	;# 
  2468  0191                     	;# 
  2469  0191                     	;# 
  2470  0192                     	;# 
  2471  0193                     	;# 
  2472  0193                     	;# 
  2473  0193                     	;# 
  2474  0194                     	;# 
  2475  0195                     	;# 
  2476  0196                     	;# 
  2477  0199                     	;# 
  2478  019A                     	;# 
  2479  019B                     	;# 
  2480  019B                     	;# 
  2481  019C                     	;# 
  2482  019D                     	;# 
  2483  019E                     	;# 
  2484  019F                     	;# 
  2485  020C                     	;# 
  2486  020D                     	;# 
  2487  020E                     	;# 
  2488  0211                     	;# 
  2489  0211                     	;# 
  2490  0212                     	;# 
  2491  0212                     	;# 
  2492  0213                     	;# 
  2493  0213                     	;# 
  2494  0214                     	;# 
  2495  0214                     	;# 
  2496  0215                     	;# 
  2497  0215                     	;# 
  2498  0215                     	;# 
  2499  0216                     	;# 
  2500  0216                     	;# 
  2501  0217                     	;# 
  2502  0217                     	;# 
  2503  0219                     	;# 
  2504  021A                     	;# 
  2505  021B                     	;# 
  2506  021C                     	;# 
  2507  021D                     	;# 
  2508  021E                     	;# 
  2509  021F                     	;# 
  2510  0291                     	;# 
  2511  0291                     	;# 
  2512  0292                     	;# 
  2513  0293                     	;# 
  2514  0294                     	;# 
  2515  0295                     	;# 
  2516  0295                     	;# 
  2517  0296                     	;# 
  2518  0298                     	;# 
  2519  0298                     	;# 
  2520  0299                     	;# 
  2521  029A                     	;# 
  2522  029B                     	;# 
  2523  029C                     	;# 
  2524  029D                     	;# 
  2525  029E                     	;# 
  2526  0311                     	;# 
  2527  0311                     	;# 
  2528  0312                     	;# 
  2529  0313                     	;# 
  2530  0318                     	;# 
  2531  0318                     	;# 
  2532  0319                     	;# 
  2533  031A                     	;# 
  2534  038C                     	;# 
  2535  038D                     	;# 
  2536  038E                     	;# 
  2537  0391                     	;# 
  2538  0392                     	;# 
  2539  0393                     	;# 
  2540  0394                     	;# 
  2541  0395                     	;# 
  2542  0396                     	;# 
  2543  039A                     	;# 
  2544  039C                     	;# 
  2545  039D                     	;# 
  2546  039E                     	;# 
  2547  039F                     	;# 
  2548  0415                     	;# 
  2549  0416                     	;# 
  2550  0417                     	;# 
  2551  041C                     	;# 
  2552  041D                     	;# 
  2553  041E                     	;# 
  2554  0FE4                     	;# 
  2555  0FE5                     	;# 
  2556  0FE6                     	;# 
  2557  0FE7                     	;# 
  2558  0FE8                     	;# 
  2559  0FE9                     	;# 
  2560  0FEA                     	;# 
  2561  0FEB                     	;# 
  2562  0FED                     	;# 
  2563  0FEE                     	;# 
  2564  0FEF                     	;# 
  2565  0000                     	;# 
  2566  0001                     	;# 
  2567  0002                     	;# 
  2568  0003                     	;# 
  2569  0004                     	;# 
  2570  0005                     	;# 
  2571  0006                     	;# 
  2572  0007                     	;# 
  2573  0008                     	;# 
  2574  0009                     	;# 
  2575  000A                     	;# 
  2576  000B                     	;# 
  2577  000C                     	;# 
  2578  000D                     	;# 
  2579  000E                     	;# 
  2580  0011                     	;# 
  2581  0012                     	;# 
  2582  0013                     	;# 
  2583  0014                     	;# 
  2584  0015                     	;# 
  2585  0016                     	;# 
  2586  0016                     	;# 
  2587  0017                     	;# 
  2588  0018                     	;# 
  2589  0019                     	;# 
  2590  001A                     	;# 
  2591  001B                     	;# 
  2592  001C                     	;# 
  2593  001E                     	;# 
  2594  001F                     	;# 
  2595  008C                     	;# 
  2596  008D                     	;# 
  2597  008E                     	;# 
  2598  0091                     	;# 
  2599  0092                     	;# 
  2600  0093                     	;# 
  2601  0094                     	;# 
  2602  0095                     	;# 
  2603  0096                     	;# 
  2604  0097                     	;# 
  2605  0098                     	;# 
  2606  0099                     	;# 
  2607  009A                     	;# 
  2608  009B                     	;# 
  2609  009B                     	;# 
  2610  009C                     	;# 
  2611  009D                     	;# 
  2612  009E                     	;# 
  2613  010C                     	;# 
  2614  010D                     	;# 
  2615  010E                     	;# 
  2616  0111                     	;# 
  2617  0112                     	;# 
  2618  0113                     	;# 
  2619  0114                     	;# 
  2620  0115                     	;# 
  2621  0116                     	;# 
  2622  0117                     	;# 
  2623  0118                     	;# 
  2624  0119                     	;# 
  2625  011A                     	;# 
  2626  011B                     	;# 
  2627  011D                     	;# 
  2628  011E                     	;# 
  2629  018C                     	;# 
  2630  018D                     	;# 
  2631  018E                     	;# 
  2632  0191                     	;# 
  2633  0191                     	;# 
  2634  0192                     	;# 
  2635  0193                     	;# 
  2636  0193                     	;# 
  2637  0193                     	;# 
  2638  0194                     	;# 
  2639  0195                     	;# 
  2640  0196                     	;# 
  2641  0199                     	;# 
  2642  019A                     	;# 
  2643  019B                     	;# 
  2644  019B                     	;# 
  2645  019C                     	;# 
  2646  019D                     	;# 
  2647  019E                     	;# 
  2648  019F                     	;# 
  2649  020C                     	;# 
  2650  020D                     	;# 
  2651  020E                     	;# 
  2652  0211                     	;# 
  2653  0211                     	;# 
  2654  0212                     	;# 
  2655  0212                     	;# 
  2656  0213                     	;# 
  2657  0213                     	;# 
  2658  0214                     	;# 
  2659  0214                     	;# 
  2660  0215                     	;# 
  2661  0215                     	;# 
  2662  0215                     	;# 
  2663  0216                     	;# 
  2664  0216                     	;# 
  2665  0217                     	;# 
  2666  0217                     	;# 
  2667  0219                     	;# 
  2668  021A                     	;# 
  2669  021B                     	;# 
  2670  021C                     	;# 
  2671  021D                     	;# 
  2672  021E                     	;# 
  2673  021F                     	;# 
  2674  0291                     	;# 
  2675  0291                     	;# 
  2676  0292                     	;# 
  2677  0293                     	;# 
  2678  0294                     	;# 
  2679  0295                     	;# 
  2680  0295                     	;# 
  2681  0296                     	;# 
  2682  0298                     	;# 
  2683  0298                     	;# 
  2684  0299                     	;# 
  2685  029A                     	;# 
  2686  029B                     	;# 
  2687  029C                     	;# 
  2688  029D                     	;# 
  2689  029E                     	;# 
  2690  0311                     	;# 
  2691  0311                     	;# 
  2692  0312                     	;# 
  2693  0313                     	;# 
  2694  0318                     	;# 
  2695  0318                     	;# 
  2696  0319                     	;# 
  2697  031A                     	;# 
  2698  038C                     	;# 
  2699  038D                     	;# 
  2700  038E                     	;# 
  2701  0391                     	;# 
  2702  0392                     	;# 
  2703  0393                     	;# 
  2704  0394                     	;# 
  2705  0395                     	;# 
  2706  0396                     	;# 
  2707  039A                     	;# 
  2708  039C                     	;# 
  2709  039D                     	;# 
  2710  039E                     	;# 
  2711  039F                     	;# 
  2712  0415                     	;# 
  2713  0416                     	;# 
  2714  0417                     	;# 
  2715  041C                     	;# 
  2716  041D                     	;# 
  2717  041E                     	;# 
  2718  0FE4                     	;# 
  2719  0FE5                     	;# 
  2720  0FE6                     	;# 
  2721  0FE7                     	;# 
  2722  0FE8                     	;# 
  2723  0FE9                     	;# 
  2724  0FEA                     	;# 
  2725  0FEB                     	;# 
  2726  0FED                     	;# 
  2727  0FEE                     	;# 
  2728  0FEF                     	;# 
  2729  0000                     	;# 
  2730  0001                     	;# 
  2731  0002                     	;# 
  2732  0003                     	;# 
  2733  0004                     	;# 
  2734  0005                     	;# 
  2735  0006                     	;# 
  2736  0007                     	;# 
  2737  0008                     	;# 
  2738  0009                     	;# 
  2739  000A                     	;# 
  2740  000B                     	;# 
  2741  000C                     	;# 
  2742  000D                     	;# 
  2743  000E                     	;# 
  2744  0011                     	;# 
  2745  0012                     	;# 
  2746  0013                     	;# 
  2747  0014                     	;# 
  2748  0015                     	;# 
  2749  0016                     	;# 
  2750  0016                     	;# 
  2751  0017                     	;# 
  2752  0018                     	;# 
  2753  0019                     	;# 
  2754  001A                     	;# 
  2755  001B                     	;# 
  2756  001C                     	;# 
  2757  001E                     	;# 
  2758  001F                     	;# 
  2759  008C                     	;# 
  2760  008D                     	;# 
  2761  008E                     	;# 
  2762  0091                     	;# 
  2763  0092                     	;# 
  2764  0093                     	;# 
  2765  0094                     	;# 
  2766  0095                     	;# 
  2767  0096                     	;# 
  2768  0097                     	;# 
  2769  0098                     	;# 
  2770  0099                     	;# 
  2771  009A                     	;# 
  2772  009B                     	;# 
  2773  009B                     	;# 
  2774  009C                     	;# 
  2775  009D                     	;# 
  2776  009E                     	;# 
  2777  010C                     	;# 
  2778  010D                     	;# 
  2779  010E                     	;# 
  2780  0111                     	;# 
  2781  0112                     	;# 
  2782  0113                     	;# 
  2783  0114                     	;# 
  2784  0115                     	;# 
  2785  0116                     	;# 
  2786  0117                     	;# 
  2787  0118                     	;# 
  2788  0119                     	;# 
  2789  011A                     	;# 
  2790  011B                     	;# 
  2791  011D                     	;# 
  2792  011E                     	;# 
  2793  018C                     	;# 
  2794  018D                     	;# 
  2795  018E                     	;# 
  2796  0191                     	;# 
  2797  0191                     	;# 
  2798  0192                     	;# 
  2799  0193                     	;# 
  2800  0193                     	;# 
  2801  0193                     	;# 
  2802  0194                     	;# 
  2803  0195                     	;# 
  2804  0196                     	;# 
  2805  0199                     	;# 
  2806  019A                     	;# 
  2807  019B                     	;# 
  2808  019B                     	;# 
  2809  019C                     	;# 
  2810  019D                     	;# 
  2811  019E                     	;# 
  2812  019F                     	;# 
  2813  020C                     	;# 
  2814  020D                     	;# 
  2815  020E                     	;# 
  2816  0211                     	;# 
  2817  0211                     	;# 
  2818  0212                     	;# 
  2819  0212                     	;# 
  2820  0213                     	;# 
  2821  0213                     	;# 
  2822  0214                     	;# 
  2823  0214                     	;# 
  2824  0215                     	;# 
  2825  0215                     	;# 
  2826  0215                     	;# 
  2827  0216                     	;# 
  2828  0216                     	;# 
  2829  0217                     	;# 
  2830  0217                     	;# 
  2831  0219                     	;# 
  2832  021A                     	;# 
  2833  021B                     	;# 
  2834  021C                     	;# 
  2835  021D                     	;# 
  2836  021E                     	;# 
  2837  021F                     	;# 
  2838  0291                     	;# 
  2839  0291                     	;# 
  2840  0292                     	;# 
  2841  0293                     	;# 
  2842  0294                     	;# 
  2843  0295                     	;# 
  2844  0295                     	;# 
  2845  0296                     	;# 
  2846  0298                     	;# 
  2847  0298                     	;# 
  2848  0299                     	;# 
  2849  029A                     	;# 
  2850  029B                     	;# 
  2851  029C                     	;# 
  2852  029D                     	;# 
  2853  029E                     	;# 
  2854  0311                     	;# 
  2855  0311                     	;# 
  2856  0312                     	;# 
  2857  0313                     	;# 
  2858  0318                     	;# 
  2859  0318                     	;# 
  2860  0319                     	;# 
  2861  031A                     	;# 
  2862  038C                     	;# 
  2863  038D                     	;# 
  2864  038E                     	;# 
  2865  0391                     	;# 
  2866  0392                     	;# 
  2867  0393                     	;# 
  2868  0394                     	;# 
  2869  0395                     	;# 
  2870  0396                     	;# 
  2871  039A                     	;# 
  2872  039C                     	;# 
  2873  039D                     	;# 
  2874  039E                     	;# 
  2875  039F                     	;# 
  2876  0415                     	;# 
  2877  0416                     	;# 
  2878  0417                     	;# 
  2879  041C                     	;# 
  2880  041D                     	;# 
  2881  041E                     	;# 
  2882  0FE4                     	;# 
  2883  0FE5                     	;# 
  2884  0FE6                     	;# 
  2885  0FE7                     	;# 
  2886  0FE8                     	;# 
  2887  0FE9                     	;# 
  2888  0FEA                     	;# 
  2889  0FEB                     	;# 
  2890  0FED                     	;# 
  2891  0FEE                     	;# 
  2892  0FEF                     	;# 
  2893  0000                     	;# 
  2894  0001                     	;# 
  2895  0002                     	;# 
  2896  0003                     	;# 
  2897  0004                     	;# 
  2898  0005                     	;# 
  2899  0006                     	;# 
  2900  0007                     	;# 
  2901  0008                     	;# 
  2902  0009                     	;# 
  2903  000A                     	;# 
  2904  000B                     	;# 
  2905  000C                     	;# 
  2906  000D                     	;# 
  2907  000E                     	;# 
  2908  0011                     	;# 
  2909  0012                     	;# 
  2910  0013                     	;# 
  2911  0014                     	;# 
  2912  0015                     	;# 
  2913  0016                     	;# 
  2914  0016                     	;# 
  2915  0017                     	;# 
  2916  0018                     	;# 
  2917  0019                     	;# 
  2918  001A                     	;# 
  2919  001B                     	;# 
  2920  001C                     	;# 
  2921  001E                     	;# 
  2922  001F                     	;# 
  2923  008C                     	;# 
  2924  008D                     	;# 
  2925  008E                     	;# 
  2926  0091                     	;# 
  2927  0092                     	;# 
  2928  0093                     	;# 
  2929  0094                     	;# 
  2930  0095                     	;# 
  2931  0096                     	;# 
  2932  0097                     	;# 
  2933  0098                     	;# 
  2934  0099                     	;# 
  2935  009A                     	;# 
  2936  009B                     	;# 
  2937  009B                     	;# 
  2938  009C                     	;# 
  2939  009D                     	;# 
  2940  009E                     	;# 
  2941  010C                     	;# 
  2942  010D                     	;# 
  2943  010E                     	;# 
  2944  0111                     	;# 
  2945  0112                     	;# 
  2946  0113                     	;# 
  2947  0114                     	;# 
  2948  0115                     	;# 
  2949  0116                     	;# 
  2950  0117                     	;# 
  2951  0118                     	;# 
  2952  0119                     	;# 
  2953  011A                     	;# 
  2954  011B                     	;# 
  2955  011D                     	;# 
  2956  011E                     	;# 
  2957  018C                     	;# 
  2958  018D                     	;# 
  2959  018E                     	;# 
  2960  0191                     	;# 
  2961  0191                     	;# 
  2962  0192                     	;# 
  2963  0193                     	;# 
  2964  0193                     	;# 
  2965  0193                     	;# 
  2966  0194                     	;# 
  2967  0195                     	;# 
  2968  0196                     	;# 
  2969  0199                     	;# 
  2970  019A                     	;# 
  2971  019B                     	;# 
  2972  019B                     	;# 
  2973  019C                     	;# 
  2974  019D                     	;# 
  2975  019E                     	;# 
  2976  019F                     	;# 
  2977  020C                     	;# 
  2978  020D                     	;# 
  2979  020E                     	;# 
  2980  0211                     	;# 
  2981  0211                     	;# 
  2982  0212                     	;# 
  2983  0212                     	;# 
  2984  0213                     	;# 
  2985  0213                     	;# 
  2986  0214                     	;# 
  2987  0214                     	;# 
  2988  0215                     	;# 
  2989  0215                     	;# 
  2990  0215                     	;# 
  2991  0216                     	;# 
  2992  0216                     	;# 
  2993  0217                     	;# 
  2994  0217                     	;# 
  2995  0219                     	;# 
  2996  021A                     	;# 
  2997  021B                     	;# 
  2998  021C                     	;# 
  2999  021D                     	;# 
  3000  021E                     	;# 
  3001  021F                     	;# 
  3002  0291                     	;# 
  3003  0291                     	;# 
  3004  0292                     	;# 
  3005  0293                     	;# 
  3006  0294                     	;# 
  3007  0295                     	;# 
  3008  0295                     	;# 
  3009  0296                     	;# 
  3010  0298                     	;# 
  3011  0298                     	;# 
  3012  0299                     	;# 
  3013  029A                     	;# 
  3014  029B                     	;# 
  3015  029C                     	;# 
  3016  029D                     	;# 
  3017  029E                     	;# 
  3018  0311                     	;# 
  3019  0311                     	;# 
  3020  0312                     	;# 
  3021  0313                     	;# 
  3022  0318                     	;# 
  3023  0318                     	;# 
  3024  0319                     	;# 
  3025  031A                     	;# 
  3026  038C                     	;# 
  3027  038D                     	;# 
  3028  038E                     	;# 
  3029  0391                     	;# 
  3030  0392                     	;# 
  3031  0393                     	;# 
  3032  0394                     	;# 
  3033  0395                     	;# 
  3034  0396                     	;# 
  3035  039A                     	;# 
  3036  039C                     	;# 
  3037  039D                     	;# 
  3038  039E                     	;# 
  3039  039F                     	;# 
  3040  0415                     	;# 
  3041  0416                     	;# 
  3042  0417                     	;# 
  3043  041C                     	;# 
  3044  041D                     	;# 
  3045  041E                     	;# 
  3046  0FE4                     	;# 
  3047  0FE5                     	;# 
  3048  0FE6                     	;# 
  3049  0FE7                     	;# 
  3050  0FE8                     	;# 
  3051  0FE9                     	;# 
  3052  0FEA                     	;# 
  3053  0FEB                     	;# 
  3054  0FED                     	;# 
  3055  0FEE                     	;# 
  3056  0FEF                     	;# 
  3057  0000                     	;# 
  3058  0001                     	;# 
  3059  0002                     	;# 
  3060  0003                     	;# 
  3061  0004                     	;# 
  3062  0005                     	;# 
  3063  0006                     	;# 
  3064  0007                     	;# 
  3065  0008                     	;# 
  3066  0009                     	;# 
  3067  000A                     	;# 
  3068  000B                     	;# 
  3069  000C                     	;# 
  3070  000D                     	;# 
  3071  000E                     	;# 
  3072  0011                     	;# 
  3073  0012                     	;# 
  3074  0013                     	;# 
  3075  0014                     	;# 
  3076  0015                     	;# 
  3077  0016                     	;# 
  3078  0016                     	;# 
  3079  0017                     	;# 
  3080  0018                     	;# 
  3081  0019                     	;# 
  3082  001A                     	;# 
  3083  001B                     	;# 
  3084  001C                     	;# 
  3085  001E                     	;# 
  3086  001F                     	;# 
  3087  008C                     	;# 
  3088  008D                     	;# 
  3089  008E                     	;# 
  3090  0091                     	;# 
  3091  0092                     	;# 
  3092  0093                     	;# 
  3093  0094                     	;# 
  3094  0095                     	;# 
  3095  0096                     	;# 
  3096  0097                     	;# 
  3097  0098                     	;# 
  3098  0099                     	;# 
  3099  009A                     	;# 
  3100  009B                     	;# 
  3101  009B                     	;# 
  3102  009C                     	;# 
  3103  009D                     	;# 
  3104  009E                     	;# 
  3105  010C                     	;# 
  3106  010D                     	;# 
  3107  010E                     	;# 
  3108  0111                     	;# 
  3109  0112                     	;# 
  3110  0113                     	;# 
  3111  0114                     	;# 
  3112  0115                     	;# 
  3113  0116                     	;# 
  3114  0117                     	;# 
  3115  0118                     	;# 
  3116  0119                     	;# 
  3117  011A                     	;# 
  3118  011B                     	;# 
  3119  011D                     	;# 
  3120  011E                     	;# 
  3121  018C                     	;# 
  3122  018D                     	;# 
  3123  018E                     	;# 
  3124  0191                     	;# 
  3125  0191                     	;# 
  3126  0192                     	;# 
  3127  0193                     	;# 
  3128  0193                     	;# 
  3129  0193                     	;# 
  3130  0194                     	;# 
  3131  0195                     	;# 
  3132  0196                     	;# 
  3133  0199                     	;# 
  3134  019A                     	;# 
  3135  019B                     	;# 
  3136  019B                     	;# 
  3137  019C                     	;# 
  3138  019D                     	;# 
  3139  019E                     	;# 
  3140  019F                     	;# 
  3141  020C                     	;# 
  3142  020D                     	;# 
  3143  020E                     	;# 
  3144  0211                     	;# 
  3145  0211                     	;# 
  3146  0212                     	;# 
  3147  0212                     	;# 
  3148  0213                     	;# 
  3149  0213                     	;# 
  3150  0214                     	;# 
  3151  0214                     	;# 
  3152  0215                     	;# 
  3153  0215                     	;# 
  3154  0215                     	;# 
  3155  0216                     	;# 
  3156  0216                     	;# 
  3157  0217                     	;# 
  3158  0217                     	;# 
  3159  0219                     	;# 
  3160  021A                     	;# 
  3161  021B                     	;# 
  3162  021C                     	;# 
  3163  021D                     	;# 
  3164  021E                     	;# 
  3165  021F                     	;# 
  3166  0291                     	;# 
  3167  0291                     	;# 
  3168  0292                     	;# 
  3169  0293                     	;# 
  3170  0294                     	;# 
  3171  0295                     	;# 
  3172  0295                     	;# 
  3173  0296                     	;# 
  3174  0298                     	;# 
  3175  0298                     	;# 
  3176  0299                     	;# 
  3177  029A                     	;# 
  3178  029B                     	;# 
  3179  029C                     	;# 
  3180  029D                     	;# 
  3181  029E                     	;# 
  3182  0311                     	;# 
  3183  0311                     	;# 
  3184  0312                     	;# 
  3185  0313                     	;# 
  3186  0318                     	;# 
  3187  0318                     	;# 
  3188  0319                     	;# 
  3189  031A                     	;# 
  3190  038C                     	;# 
  3191  038D                     	;# 
  3192  038E                     	;# 
  3193  0391                     	;# 
  3194  0392                     	;# 
  3195  0393                     	;# 
  3196  0394                     	;# 
  3197  0395                     	;# 
  3198  0396                     	;# 
  3199  039A                     	;# 
  3200  039C                     	;# 
  3201  039D                     	;# 
  3202  039E                     	;# 
  3203  039F                     	;# 
  3204  0415                     	;# 
  3205  0416                     	;# 
  3206  0417                     	;# 
  3207  041C                     	;# 
  3208  041D                     	;# 
  3209  041E                     	;# 
  3210  0FE4                     	;# 
  3211  0FE5                     	;# 
  3212  0FE6                     	;# 
  3213  0FE7                     	;# 
  3214  0FE8                     	;# 
  3215  0FE9                     	;# 
  3216  0FEA                     	;# 
  3217  0FEB                     	;# 
  3218  0FED                     	;# 
  3219  0FEE                     	;# 
  3220  0FEF                     	;_I2cPacket
  3221                           
  3222                           	psect	idataBANK1
  3223  1308                     __pidataBANK1:	
  3224                           
  3225                           ;initializer for _LedBlinkSts
  3226  1308  3401               	retlw	1
  3227                           
  3228                           ;initializer for _MainSystemTimebaseFlag
  3229  1309  3401               	retlw	1
  3230                           
  3231                           	psect	idataBANK2
  3232  166C                     __pidataBANK2:	
  3233                           
  3234                           ;initializer for _TaskTable
  3235  166C  34B8               	retlw	low _I2c_DataReceiveSm
  3236  166D  3405               	retlw	high _I2c_DataReceiveSm
  3237  166E  3400               	retlw	0
  3238  166F  3400               	retlw	0
  3239  1670  3400               	retlw	0
  3240  1671  3401               	retlw	1
  3241  1672  3400               	retlw	0
  3242  1673  3400               	retlw	0
  3243  1674  3452               	retlw	low _I2cSlv_MainTask
  3244  1675  3414               	retlw	high _I2cSlv_MainTask
  3245  1676  3400               	retlw	0
  3246  1677  3400               	retlw	0
  3247  1678  3400               	retlw	0
  3248  1679  3401               	retlw	1
  3249  167A  3400               	retlw	0
  3250  167B  3400               	retlw	0
  3251  167C  3467               	retlw	low _Wdg_MainTask
  3252  167D  3414               	retlw	high _Wdg_MainTask
  3253  167E  3400               	retlw	0
  3254  167F  3400               	retlw	0
  3255  1680  3400               	retlw	0
  3256  1681  3464               	retlw	100
  3257  1682  3400               	retlw	0
  3258  1683  3400               	retlw	0
  3259  1684  3493               	retlw	low _Led_MainTask
  3260  1685  3415               	retlw	high _Led_MainTask
  3261  1686  3400               	retlw	0
  3262  1687  3400               	retlw	0
  3263  1688  3400               	retlw	0
  3264  1689  3432               	retlw	50
  3265  168A  3400               	retlw	0
  3266  168B  3400               	retlw	0
  3267  168C  3467               	retlw	low _App_MainTask
  3268  168D  3409               	retlw	high _App_MainTask
  3269  168E  3400               	retlw	0
  3270  168F  3400               	retlw	0
  3271  1690  3400               	retlw	0
  3272  1691  3464               	retlw	100
  3273  1692  3400               	retlw	0
  3274  1693  3400               	retlw	0
  3275                           
  3276                           ;initializer for _Led1
  3277  1694  3400               	retlw	0
  3278  1695  3400               	retlw	0
  3279  1696  3400               	retlw	0
  3280  1697  3400               	retlw	0
  3281  1698  3401               	retlw	1
  3282  1699  3400               	retlw	0
  3283  169A  3409               	retlw	9
  3284  169B  3400               	retlw	0
  3285                           
  3286                           	psect	stringtext
  3287  1800                     __pstringtext:	
  3288  1800                     _dpowers:	
  3289  1800  3401               	retlw	1
  3290  1801  3400               	retlw	0
  3291  1802  340A               	retlw	10
  3292  1803  3400               	retlw	0
  3293  1804  3464               	retlw	100
  3294  1805  3400               	retlw	0
  3295  1806  34E8               	retlw	232
  3296  1807  3403               	retlw	3
  3297  1808  3410               	retlw	16
  3298  1809  3427               	retlw	39
  3299  180A                     __end_of_dpowers:	
  3300  180A                     _TaskNumber:	
  3301  180A  3405               	retlw	5
  3302  180B  3400               	retlw	0
  3303  180C                     __end_of_TaskNumber:	
  3304  000B                     _INTCONbits	set	11
  3305  0011                     _PIR1bits	set	17
  3306  0013                     _PIR3bits	set	19
  3307  000E                     _PORTCbits	set	14
  3308  001B                     _PR2	set	27
  3309  001C                     _T2CONbits	set	28
  3310  009D                     _ADCON0bits	set	157
  3311  009E                     _ADCON1bits	set	158
  3312  009C                     _ADRESH	set	156
  3313  009B                     _ADRESL	set	155
  3314  0095                     _OPTION_REGbits	set	149
  3315  0099                     _OSCCONbits	set	153
  3316  009A                     _OSCSTATbits	set	154
  3317  0091                     _PIE1bits	set	145
  3318  0093                     _PIE3bits	set	147
  3319  008D                     _TRISBbits	set	141
  3320  008E                     _TRISCbits	set	142
  3321  0097                     _WDTCONbits	set	151
  3322  0117                     _FVRCONbits	set	279
  3323  010C                     _LATA	set	268
  3324  010D                     _LATB	set	269
  3325  010E                     _LATC	set	270
  3326  010E                     _LATCbits	set	270
  3327  018C                     _ANSELA	set	396
  3328  018C                     _ANSELAbits	set	396
  3329  018D                     _ANSELB	set	397
  3330  018D                     _ANSELBbits	set	397
  3331  018E                     _ANSELC	set	398
  3332  018E                     _ANSELCbits	set	398
  3333  0212                     _SSP1ADD	set	530
  3334  0211                     _SSP1BUF	set	529
  3335  0215                     _SSP1CON1	set	533
  3336  0215                     _SSP1CON1bits	set	533
  3337  0216                     _SSP1CON2	set	534
  3338  0217                     _SSP1CON3	set	535
  3339  0213                     _SSP1MSK	set	531
  3340  0214                     _SSP1STAT	set	532
  3341  020C                     _WPUA	set	524
  3342  020C                     _WPUAbits	set	524
  3343  020D                     _WPUB	set	525
  3344  020D                     _WPUBbits	set	525
  3345  020E                     _WPUC	set	526
  3346  020E                     _WPUCbits	set	526
  3347  0416                     _PR4	set	1046
  3348  041D                     _PR6	set	1053
  3349  0417                     _T4CONbits	set	1047
  3350  041E                     _T6CONbits	set	1054
  3351  180C                     STR_4:	
  3352  180C  3430               	retlw	48	;'0'
  3353  180D  3431               	retlw	49	;'1'
  3354  180E  342E               	retlw	46	;'.'
  3355  180F  3430               	retlw	48	;'0'
  3356  1810  3430               	retlw	48	;'0'
  3357  1811  342E               	retlw	46	;'.'
  3358  1812  3430               	retlw	48	;'0'
  3359  1813  3430               	retlw	48	;'0'
  3360  1814  3400               	retlw	0
  3361  1815                     STR_1:	
  3362  1815  3425               	retlw	37	;'%'
  3363  1816  3464               	retlw	100	;'d'
  3364  1817  342E               	retlw	46	;'.'
  3365  1818  3425               	retlw	37	;'%'
  3366  1819  3430               	retlw	48	;'0'
  3367  181A  3431               	retlw	49	;'1'
  3368  181B  3475               	retlw	117	;'u'
  3369  181C  3400               	retlw	0
  3370  181D                     STR_3:	
  3371  181D  3453               	retlw	83	;'S'
  3372  181E  3442               	retlw	66	;'B'
  3373  181F  3438               	retlw	56	;'8'
  3374  1820  3431               	retlw	49	;'1'
  3375  1821  3430               	retlw	48	;'0'
  3376  1822  3400               	retlw	0
  3377  1823                     STR_2:	
  3378  1823  3445               	retlw	69	;'E'
  3379  1824  3443               	retlw	67	;'C'
  3380  1825  3448               	retlw	72	;'H'
  3381  1826  344F               	retlw	79	;'O'
  3382  1827  3400               	retlw	0
  3383  180C                     
  3384                           ; #config settings
  3385  0000                     
  3386                           	psect	cinit
  3387  0031                     start_initialization:	
  3388  0031                     __initialization:		;BIGRAM
  3389                           
  3390                           ; Initialize objects allocated to BANK1
  3391  0031  0021               	movlb	1	; select bank1
  3392  0032  3193  2308  3180   	fcall	__pidataBANK1	;fetch initializer
  3393  0035  00EE               	movwf	__pdataBANK1& (0+127)
  3394  0036  3193  2309  3180   	fcall	__pidataBANK1+1	;fetch initializer
  3395  0039  00EF               	movwf	(__pdataBANK1+1)& (0+127)
  3396                           
  3397                           ; Initialize objects allocated to BANK2
  3398  003A  306C               	movlw	low __pidataBANK2
  3399  003B  0084               	movwf	4
  3400  003C  3096               	movlw	(high __pidataBANK2)| (0+128)
  3401  003D  0085               	movwf	5
  3402  003E  3020               	movlw	low __pdataBANK2
  3403  003F  0086               	movwf	6
  3404  0040  3001               	movlw	high __pdataBANK2
  3405  0041  0087               	movwf	7
  3406  0042  3000               	movlw	0
  3407  0043  00FF               	movwf	btemp+1
  3408  0044  3030               	movlw	48
  3409  0045  3193  23A2  3180   	fcall	init_ram
  3410                           
  3411                           ; Clear objects allocated to BIGRAM
  3412  0048  309D               	movlw	low (0+9117)
  3413  0049  0084               	movwf	4
  3414  004A  3023               	movlw	high (0+9117)
  3415  004B  0085               	movwf	5
  3416  004C  3053               	movlw	83
  3417  004D  00FE               	movwf	btemp
  3418  004E  3000               	movlw	0
  3419  004F  00FF               	movwf	btemp+1
  3420  0050  3193  2396  3180   	fcall	clear_ram0
  3421                           
  3422                           ; Clear objects allocated to COMMON
  3423  0053  01F6               	clrf	__pbssCOMMON& (0+127)
  3424  0054  01F7               	clrf	(__pbssCOMMON+1)& (0+127)
  3425  0055  01F8               	clrf	(__pbssCOMMON+2)& (0+127)
  3426  0056  01F9               	clrf	(__pbssCOMMON+3)& (0+127)
  3427                           
  3428                           ; Clear objects allocated to BANK1
  3429  0057  30DD               	movlw	low __pbssBANK1
  3430  0058  0084               	movwf	4
  3431  0059  3000               	movlw	high __pbssBANK1
  3432  005A  0085               	movwf	5
  3433  005B  3011               	movlw	17
  3434  005C  00FE               	movwf	btemp
  3435  005D  3000               	movlw	0
  3436  005E  00FF               	movwf	btemp+1
  3437  005F  3193  2396  3180   	fcall	clear_ram0
  3438                           
  3439                           ; Clear objects allocated to BANK2
  3440  0062  3050               	movlw	low __pbssBANK2
  3441  0063  0084               	movwf	4
  3442  0064  3001               	movlw	high __pbssBANK2
  3443  0065  0085               	movwf	5
  3444  0066  301B               	movlw	27
  3445  0067  00FE               	movwf	btemp
  3446  0068  3000               	movlw	0
  3447  0069  00FF               	movwf	btemp+1
  3448  006A  3193  2396  3180   	fcall	clear_ram0
  3449                           
  3450                           ; Clear objects allocated to BANK3
  3451  006D  30A0               	movlw	low __pbssBANK3
  3452  006E  0084               	movwf	4
  3453  006F  3001               	movlw	high __pbssBANK3
  3454  0070  0085               	movwf	5
  3455  0071  3046               	movlw	70
  3456  0072  00FE               	movwf	btemp
  3457  0073  3000               	movlw	0
  3458  0074  00FF               	movwf	btemp+1
  3459  0075  3193  2396  3180   	fcall	clear_ram0
  3460                           
  3461                           ; Clear objects allocated to BANK4
  3462  0078  3020               	movlw	low __pbssBANK4
  3463  0079  0084               	movwf	4
  3464  007A  3002               	movlw	high __pbssBANK4
  3465  007B  0085               	movwf	5
  3466  007C  3050               	movlw	80
  3467  007D  00FE               	movwf	btemp
  3468  007E  3000               	movlw	0
  3469  007F  00FF               	movwf	btemp+1
  3470  0080  3193  2396  3180   	fcall	clear_ram0
  3471                           
  3472                           ; Clear objects allocated to BANK5
  3473  0083  30A0               	movlw	low __pbssBANK5
  3474  0084  0084               	movwf	4
  3475  0085  3002               	movlw	high __pbssBANK5
  3476  0086  0085               	movwf	5
  3477  0087  3032               	movlw	50
  3478  0088  00FE               	movwf	btemp
  3479  0089  3000               	movlw	0
  3480  008A  00FF               	movwf	btemp+1
  3481  008B  3193  2396  3180   	fcall	clear_ram0
  3482                           
  3483                           ; Clear objects allocated to BANK6
  3484  008E  3020               	movlw	low __pbssBANK6
  3485  008F  0084               	movwf	4
  3486  0090  3003               	movlw	high __pbssBANK6
  3487  0091  0085               	movwf	5
  3488  0092  3050               	movlw	80
  3489  0093  00FE               	movwf	btemp
  3490  0094  3000               	movlw	0
  3491  0095  00FF               	movwf	btemp+1
  3492  0096  3193  2396  3180   	fcall	clear_ram0
  3493                           
  3494                           ; Clear objects allocated to BANK7
  3495  0099  30A0               	movlw	low __pbssBANK7
  3496  009A  0084               	movwf	4
  3497  009B  3003               	movlw	high __pbssBANK7
  3498  009C  0085               	movwf	5
  3499  009D  3050               	movlw	80
  3500  009E  00FE               	movwf	btemp
  3501  009F  3000               	movlw	0
  3502  00A0  00FF               	movwf	btemp+1
  3503  00A1  3193  2396  3180   	fcall	clear_ram0
  3504                           
  3505                           ; Clear objects allocated to BANK8
  3506  00A4  3020               	movlw	low __pbssBANK8
  3507  00A5  0084               	movwf	4
  3508  00A6  3004               	movlw	high __pbssBANK8
  3509  00A7  0085               	movwf	5
  3510  00A8  3050               	movlw	80
  3511  00A9  00FE               	movwf	btemp
  3512  00AA  3000               	movlw	0
  3513  00AB  00FF               	movwf	btemp+1
  3514  00AC  3193  2396         	fcall	clear_ram0
  3515  00AE                     end_of_initialization:	
  3516                           ;End of C runtime variable initialization code
  3517                           
  3518  00AE                     __end_of__initialization:	
  3519  00AE  107E               	bcf	int$flags,0	;clear compiler interrupt flag (level 1)
  3520  00AF  0020               	movlb	0
  3521  00B0  3193  2B23         	ljmp	_main	;jump to C main() function
  3522                           
  3523                           	psect	bssCOMMON
  3524  0076                     __pbssCOMMON:	
  3525  0076                     _I2cSlaveAddress:	
  3526  0076                     	ds	1
  3527  0077                     _RepBufferLen:	
  3528  0077                     	ds	1
  3529  0078                     _I2cReplyPacketReady:	
  3530  0078                     	ds	2
  3531                           
  3532                           	psect	bssBANK1
  3533  00DD                     __pbssBANK1:	
  3534  00DD                     _TempCel:	
  3535  00DD                     	ds	3
  3536  00E0                     _TempRes:	
  3537  00E0                     	ds	2
  3538  00E2                     AppSm@AppState:	
  3539  00E2                     	ds	1
  3540  00E3                     AppSm@WpuSetCounter:	
  3541  00E3                     	ds	1
  3542  00E4                     I2cSlv_I2cDrvHandle@I2cReceiveMsgState:	
  3543  00E4                     	ds	1
  3544  00E5                     I2c_DataReceiveSm@I2cRxAddress:	
  3545  00E5                     	ds	1
  3546  00E6                     I2c_DataReceiveSm@I2cRxFlag:	
  3547  00E6                     	ds	1
  3548  00E7                     I2c_DataReceiveSm@I2cRxState:	
  3549  00E7                     	ds	1
  3550  00E8                     I2c_DataReceiveSm@OpType:	
  3551  00E8                     	ds	1
  3552  00E9                     I2c_DataReceiveSm@RxCounter:	
  3553  00E9                     	ds	1
  3554  00EA                     I2c_DataReceiveSm@TxCounter:	
  3555  00EA                     	ds	1
  3556  00EB                     _SystemState:	
  3557  00EB                     	ds	1
  3558  00EC                     _I2cNewPacketNotification:	
  3559  00EC                     	ds	2
  3560                           
  3561                           	psect	dataBANK1
  3562  00EE                     __pdataBANK1:	
  3563  00EE                     _LedBlinkSts:	
  3564  00EE                     	ds	1
  3565  00EF                     _MainSystemTimebaseFlag:	
  3566  00EF                     	ds	1
  3567                           
  3568                           	psect	bssBANK2
  3569  0150                     __pbssBANK2:	
  3570  0150                     _InitCounter:	
  3571  0150                     	ds	2
  3572  0152                     _InterruptCounter:	
  3573  0152                     	ds	2
  3574  0154                     _Tmr2IsrCallback:	
  3575  0154                     	ds	2
  3576  0156                     _Tmr4IsrCallback:	
  3577  0156                     	ds	2
  3578  0158                     _Tmr6IsrCallback:	
  3579  0158                     	ds	2
  3580  015A                     _I2cConfig:	
  3581  015A                     	ds	11
  3582  0165                     _I2cNewTxNotification:	
  3583  0165                     	ds	2
  3584  0167                     _I2cSetAddress:	
  3585  0167                     	ds	2
  3586  0169                     _I2cWriteRequest:	
  3587  0169                     	ds	2
  3588                           
  3589                           	psect	dataBANK2
  3590  0120                     __pdataBANK2:	
  3591  0120                     _TaskTable:	
  3592  0120                     	ds	40
  3593  0148                     _Led1:	
  3594  0148                     	ds	8
  3595                           
  3596                           	psect	bssBANK3
  3597  01A0                     __pbssBANK3:	
  3598  01A0                     _TempResArray:	
  3599  01A0                     	ds	40
  3600  01C8                     App_MainTask@F4020:	
  3601  01C8                     	ds	18
  3602  01DA                     App_MainTask@F4040:	
  3603  01DA                     	ds	12
  3604                           
  3605                           	psect	bssBANK4
  3606  0220                     __pbssBANK4:	
  3607  0220                     _RepBuffer:	
  3608  0220                     	ds	80
  3609                           
  3610                           	psect	bssBANK5
  3611  02A0                     __pbssBANK5:	
  3612  02A0                     _TempCelStr:	
  3613  02A0                     	ds	50
  3614                           
  3615                           	psect	bssBANK6
  3616  0320                     __pbssBANK6:	
  3617  0320                     _CmdBuffer:	
  3618  0320                     	ds	80
  3619                           
  3620                           	psect	bssBANK7
  3621  03A0                     __pbssBANK7:	
  3622  03A0                     _I2cTxBuffer:	
  3623  03A0                     	ds	80
  3624                           
  3625                           	psect	bssBANK8
  3626  0420                     __pbssBANK8:	
  3627  0420                     _I2cRxBuffer:	
  3628  0420                     	ds	80
  3629                           
  3630                           	psect	inittext
  3631  13A2                     init_ram:	
  3632  13A2  00FE               	movwf	126
  3633  13A3                     initloop:	
  3634  13A3  0012               	moviw fsr0++
  3635  13A4  001E               	movwi fsr1++
  3636  13A5  3001               	movlw	1
  3637  13A6  02FE               	subwf	126,f
  3638  13A7  3000               	movlw	0
  3639  13A8  3BFF               	subwfb	127,f
  3640  13A9  087F               	movf	127,w
  3641  13AA  047E               	iorwf	126,w
  3642  13AB  1903               	btfsc	3,2
  3643  13AC  3400               	retlw	0
  3644  13AD  2BA3               	goto	initloop
  3645                           
  3646                           	psect	clrtext
  3647  1396                     clear_ram0:	
  3648                           ;	Called with FSR0 containing the base address, and
  3649                           ;	btemp/btemp+1 has the size to clear
  3650                           
  3651  1396  0064               	clrwdt	;clear the watchdog before getting into this loop
  3652  1397                     clrloop0:	
  3653  1397  0180               	clrf	0	;clear RAM location pointed to by FSR
  3654  1398  3101               	addfsr 0,1
  3655  1399  3001               	movlw	1
  3656  139A  02FE               	subwf	126,f
  3657  139B  3000               	movlw	0
  3658  139C  3BFF               	subwfb	127,f
  3659  139D  087F               	movf	127,w
  3660  139E  047E               	iorwf	126,w
  3661  139F  1903               	btfsc	3,2
  3662  13A0  3400               	retlw	0	;all done for this memory range, return
  3663  13A1  2B97               	goto	clrloop0	;have we reached the end yet?
  3664                           
  3665                           	psect	cstackBANK3
  3666  01E6                     __pcstackBANK3:	
  3667  01E6                     ??_ScheduleTasks:	
  3668                           
  3669                           ; 1 bytes @ 0x0
  3670  01E6                     	ds	6
  3671                           
  3672                           	psect	cstackBANK2
  3673  016B                     __pcstackBANK2:	
  3674  016B                     ??_InitializeTasks:	
  3675                           
  3676                           ; 1 bytes @ 0x0
  3677  016B                     	ds	4
  3678                           
  3679                           	psect	cstackBANK1
  3680  00A0                     __pcstackBANK1:	
  3681  00A0                     sprintf@prec:	
  3682                           
  3683                           ; 1 bytes @ 0x0
  3684  00A0                     	ds	1
  3685  00A1                     sprintf@ccnt:	
  3686                           
  3687                           ; 2 bytes @ 0x1
  3688  00A1                     	ds	2
  3689  00A3                     sprintf@ap:	
  3690                           
  3691                           ; 1 bytes @ 0x3
  3692  00A3                     	ds	1
  3693  00A4                     sprintf@val:	
  3694                           
  3695                           ; 2 bytes @ 0x4
  3696  00A4                     	ds	2
  3697  00A6                     sprintf@flag:	
  3698                           
  3699                           ; 1 bytes @ 0x6
  3700  00A6                     	ds	1
  3701  00A7                     sprintf@width:	
  3702                           
  3703                           ; 2 bytes @ 0x7
  3704  00A7                     	ds	2
  3705  00A9                     sprintf@sp:	
  3706                           
  3707                           ; 1 bytes @ 0x9
  3708  00A9                     	ds	1
  3709  00AA                     sprintf@c:	
  3710                           
  3711                           ; 1 bytes @ 0xA
  3712  00AA                     	ds	1
  3713  00AB                     ?_MyFtoa:	
  3714  00AB                     MyFtoa@number:	
  3715                           ; 1 bytes @ 0xB
  3716                           
  3717                           
  3718                           ; 3 bytes @ 0xB
  3719  00AB                     	ds	3
  3720  00AE                     MyFtoa@string:	
  3721                           
  3722                           ; 1 bytes @ 0xE
  3723  00AE                     	ds	1
  3724  00AF                     MyFtoa@precision:	
  3725                           
  3726                           ; 2 bytes @ 0xF
  3727  00AF                     	ds	2
  3728  00B1                     GetTemperature@Val1:	
  3729                           
  3730                           ; 3 bytes @ 0x11
  3731  00B1                     	ds	3
  3732  00B4                     GetTemperature@Val2:	
  3733                           
  3734                           ; 3 bytes @ 0x14
  3735  00B4                     	ds	3
  3736  00B7                     GetTemperature@Index:	
  3737                           
  3738                           ; 1 bytes @ 0x17
  3739  00B7                     	ds	1
  3740  00B8                     ?_I2cSlv_MainTask:	
  3741  00B8                     ?_Wdg_MainTask:	
  3742                           ; 1 bytes @ 0x18
  3743                           
  3744  00B8                     ?_Led_MainTask:	
  3745                           ; 1 bytes @ 0x18
  3746                           
  3747  00B8                     ?_App_MainTask:	
  3748                           ; 1 bytes @ 0x18
  3749                           
  3750  00B8                     ?_I2c_DataReceiveSm:	
  3751                           ; 1 bytes @ 0x18
  3752                           
  3753  00B8                     I2c_DataReceiveSm@Options:	
  3754                           ; 1 bytes @ 0x18
  3755                           
  3756  00B8                     I2cSlv_MainTask@Options:	
  3757                           ; 1 bytes @ 0x18
  3758                           
  3759  00B8                     Led_MainTask@Options:	
  3760                           ; 1 bytes @ 0x18
  3761                           
  3762  00B8                     Wdg_MainTask@Options:	
  3763                           ; 1 bytes @ 0x18
  3764                           
  3765  00B8                     App_MainTask@Options:	
  3766                           ; 1 bytes @ 0x18
  3767                           
  3768                           
  3769                           ; 1 bytes @ 0x18
  3770  00B8                     	ds	1
  3771  00B9                     ??_I2c_DataReceiveSm:	
  3772  00B9                     App_MainTask@AdcConfig:	
  3773                           ; 1 bytes @ 0x19
  3774                           
  3775                           
  3776                           ; 6 bytes @ 0x19
  3777  00B9                     	ds	6
  3778  00BF                     App_MainTask@WpuCh:	
  3779                           
  3780                           ; 18 bytes @ 0x1F
  3781  00BF                     	ds	18
  3782  00D1                     App_MainTask@AnalogChSel:	
  3783                           
  3784                           ; 12 bytes @ 0x31
  3785  00D1                     	ds	12
  3786                           
  3787                           	psect	cstackCOMMON
  3788  0070                     __pcstackCOMMON:	
  3789  0070                     ?_isdigit:	
  3790  0070                     ?_SystemInit:	
  3791                           ; 1 bit 
  3792                           
  3793  0070                     ?_MainScheduler:	
  3794                           ; 1 bytes @ 0x0
  3795                           
  3796  0070                     ?_InitializeTasks:	
  3797                           ; 1 bytes @ 0x0
  3798                           
  3799  0070                     ?_ScheduleTasks:	
  3800                           ; 1 bytes @ 0x0
  3801                           
  3802  0070                     ?_I2cSlv_I2cDrvHandle:	
  3803                           ; 1 bytes @ 0x0
  3804                           
  3805  0070                     ?_Adc_ConfigAnCh:	
  3806                           ; 1 bytes @ 0x0
  3807                           
  3808  0070                     ?_Adc_InitAdcModule:	
  3809                           ; 1 bytes @ 0x0
  3810                           
  3811  0070                     ?_Adc_SelectChannel:	
  3812                           ; 1 bytes @ 0x0
  3813                           
  3814  0070                     ?_Adc_StartConversion:	
  3815                           ; 1 bytes @ 0x0
  3816                           
  3817  0070                     ?_Adc_GetConvSts:	
  3818                           ; 1 bytes @ 0x0
  3819                           
  3820  0070                     ?_CheckAckStatus:	
  3821                           ; 1 bytes @ 0x0
  3822                           
  3823  0070                     ?_CheckByteStatus:	
  3824                           ; 1 bytes @ 0x0
  3825                           
  3826  0070                     ?_CheckStopBitStatus:	
  3827                           ; 1 bytes @ 0x0
  3828                           
  3829  0070                     ?_ClearRxBuffer:	
  3830                           ; 1 bytes @ 0x0
  3831                           
  3832  0070                     ?_ClearTxBuffer:	
  3833                           ; 1 bytes @ 0x0
  3834                           
  3835  0070                     ?_I2c_InitI2cModule:	
  3836                           ; 1 bytes @ 0x0
  3837                           
  3838  0070                     ?_I2c_SetI2cAddress:	
  3839                           ; 1 bytes @ 0x0
  3840                           
  3841  0070                     ?_I2c_SetI2cAddressMask:	
  3842                           ; 1 bytes @ 0x0
  3843                           
  3844  0070                     ?_Mcu_InitIntOsc:	
  3845                           ; 1 bytes @ 0x0
  3846                           
  3847  0070                     ?_Mcu_EnableInterrupts:	
  3848                           ; 1 bytes @ 0x0
  3849                           
  3850  0070                     ?_Mcu_SetPullUpsSts:	
  3851                           ; 1 bytes @ 0x0
  3852                           
  3853  0070                     ?_Mcu_ConfigPullUps:	
  3854                           ; 1 bytes @ 0x0
  3855                           
  3856  0070                     ?_Mcu_SetWdgPeriod:	
  3857                           ; 1 bytes @ 0x0
  3858                           
  3859  0070                     ?_Mcu_SetWdgSts:	
  3860                           ; 1 bytes @ 0x0
  3861                           
  3862  0070                     ?_Mcu_ClearWdg:	
  3863                           ; 1 bytes @ 0x0
  3864                           
  3865  0070                     ?_Mcu_SetDieTempSts:	
  3866                           ; 1 bytes @ 0x0
  3867                           
  3868  0070                     ?_Mcu_SetDieTempMode:	
  3869                           ; 1 bytes @ 0x0
  3870                           
  3871  0070                     ?_Tmr_StartTmr:	
  3872                           ; 1 bytes @ 0x0
  3873                           
  3874  0070                     ?_MainInterrupt:	
  3875                           ; 1 bytes @ 0x0
  3876                           
  3877  0070                     ?_I2c_SetConfig:	
  3878                           ; 1 bytes @ 0x0
  3879                           
  3880  0070                     ?_UpdateLebBlinkSts:	
  3881                           ; 1 bytes @ 0x0
  3882                           
  3883  0070                     ?_ControlLedDirect:	
  3884                           ; 1 bytes @ 0x0
  3885                           
  3886  0070                     ?_BoardReset:	
  3887                           ; 1 bytes @ 0x0
  3888                           
  3889  0070                     ?_LowPowerMode:	
  3890                           ; 1 bytes @ 0x0
  3891                           
  3892  0070                     ?_StdS_ManageStdServices:	
  3893                           ; 1 bytes @ 0x0
  3894                           
  3895  0070                     ?_ManageProtocol:	
  3896                           ; 1 bytes @ 0x0
  3897                           
  3898  0070                     ?_AppSm:	
  3899                           ; 1 bytes @ 0x0
  3900                           
  3901  0070                     ?_GetTemperature:	
  3902                           ; 1 bytes @ 0x0
  3903                           
  3904  0070                     ?_InitSchTimer:	
  3905                           ; 1 bytes @ 0x0
  3906                           
  3907  0070                     ?i1_GenerateEvt:	
  3908                           ; 1 bytes @ 0x0
  3909                           
  3910  0070                     ?_main:	
  3911                           ; 1 bytes @ 0x0
  3912                           
  3913  0070                     i1GenerateEvt@Event:	
  3914                           ; 2 bytes @ 0x0
  3915                           
  3916                           
  3917                           ; 2 bytes @ 0x0
  3918  0070                     	ds	2
  3919  0072                     ??i1_GenerateEvt:	
  3920                           
  3921                           ; 1 bytes @ 0x2
  3922  0072                     	ds	2
  3923  0074                     i1GenerateEvt@EventStatus:	
  3924                           
  3925                           ; 1 bytes @ 0x4
  3926  0074                     	ds	1
  3927  0075                     ??_MainInterrupt:	
  3928                           
  3929                           ; 1 bytes @ 0x5
  3930  0075                     	ds	1
  3931                           
  3932                           	psect	cstackBANK0
  3933  0020                     __pcstackBANK0:	
  3934  0020                     ?_ReceiveEvt:	
  3935  0020                     ?_GenerateEvt:	
  3936                           ; 1 bytes @ 0x0
  3937                           
  3938  0020                     ??_isdigit:	
  3939                           ; 1 bytes @ 0x0
  3940                           
  3941  0020                     ??_Adc_ConfigAnCh:	
  3942                           ; 1 bytes @ 0x0
  3943                           
  3944  0020                     ??_Adc_InitAdcModule:	
  3945                           ; 1 bytes @ 0x0
  3946                           
  3947  0020                     ??_Adc_SelectChannel:	
  3948                           ; 1 bytes @ 0x0
  3949                           
  3950  0020                     ??_Adc_StartConversion:	
  3951                           ; 1 bytes @ 0x0
  3952                           
  3953  0020                     ??_Adc_GetConvSts:	
  3954                           ; 1 bytes @ 0x0
  3955                           
  3956  0020                     ??_CheckAckStatus:	
  3957                           ; 1 bytes @ 0x0
  3958                           
  3959  0020                     ??_CheckByteStatus:	
  3960                           ; 1 bytes @ 0x0
  3961                           
  3962  0020                     ??_CheckStopBitStatus:	
  3963                           ; 1 bytes @ 0x0
  3964                           
  3965  0020                     ??_ClearRxBuffer:	
  3966                           ; 1 bytes @ 0x0
  3967                           
  3968  0020                     ??_ClearTxBuffer:	
  3969                           ; 1 bytes @ 0x0
  3970                           
  3971  0020                     ??_I2c_SetI2cAddress:	
  3972                           ; 1 bytes @ 0x0
  3973                           
  3974  0020                     ??_I2c_SetI2cAddressMask:	
  3975                           ; 1 bytes @ 0x0
  3976                           
  3977  0020                     ?_I2c_UpdateTxBuffer:	
  3978                           ; 1 bytes @ 0x0
  3979                           
  3980  0020                     ?_LedBlinkStateMachine:	
  3981                           ; 1 bytes @ 0x0
  3982                           
  3983  0020                     ??_Mcu_InitIntOsc:	
  3984                           ; 1 bytes @ 0x0
  3985                           
  3986  0020                     ??_Mcu_EnableInterrupts:	
  3987                           ; 1 bytes @ 0x0
  3988                           
  3989  0020                     ??_Mcu_SetPullUpsSts:	
  3990                           ; 1 bytes @ 0x0
  3991                           
  3992  0020                     ??_Mcu_ConfigPullUps:	
  3993                           ; 1 bytes @ 0x0
  3994                           
  3995  0020                     ??_Mcu_SetWdgPeriod:	
  3996                           ; 1 bytes @ 0x0
  3997                           
  3998  0020                     ??_Mcu_SetWdgSts:	
  3999                           ; 1 bytes @ 0x0
  4000                           
  4001  0020                     ??_Mcu_ClearWdg:	
  4002                           ; 1 bytes @ 0x0
  4003                           
  4004  0020                     ??_Mcu_SetDieTempSts:	
  4005                           ; 1 bytes @ 0x0
  4006                           
  4007  0020                     ??_Mcu_SetDieTempMode:	
  4008                           ; 1 bytes @ 0x0
  4009                           
  4010  0020                     ?_TmrBInit:	
  4011                           ; 1 bytes @ 0x0
  4012                           
  4013  0020                     ?_Tmr_TmrBIrqSet:	
  4014                           ; 1 bytes @ 0x0
  4015                           
  4016  0020                     ??_Tmr_StartTmr:	
  4017                           ; 1 bytes @ 0x0
  4018                           
  4019  0020                     ??_I2c_SetConfig:	
  4020                           ; 1 bytes @ 0x0
  4021                           
  4022  0020                     ?_StringCopy:	
  4023                           ; 1 bytes @ 0x0
  4024                           
  4025  0020                     ??_UpdateLebBlinkSts:	
  4026                           ; 1 bytes @ 0x0
  4027                           
  4028  0020                     ??_ControlLedDirect:	
  4029                           ; 1 bytes @ 0x0
  4030                           
  4031  0020                     ??_BoardReset:	
  4032                           ; 1 bytes @ 0x0
  4033                           
  4034  0020                     ?_Adc_GetConvResult:	
  4035                           ; 1 bytes @ 0x0
  4036                           
  4037  0020                     ?___wmul:	
  4038                           ; 2 bytes @ 0x0
  4039                           
  4040  0020                     ?___lwdiv:	
  4041                           ; 2 bytes @ 0x0
  4042                           
  4043  0020                     ?___ftpack:	
  4044                           ; 2 bytes @ 0x0
  4045                           
  4046  0020                     ?___lldiv:	
  4047                           ; 3 bytes @ 0x0
  4048                           
  4049  0020                     Adc_ConfigAnCh@AnChSel:	
  4050                           ; 4 bytes @ 0x0
  4051                           
  4052  0020                     Adc_InitAdcModule@AdcConfig:	
  4053                           ; 1 bytes @ 0x0
  4054                           
  4055  0020                     I2c_SetI2cAddress@SlaveAddress:	
  4056                           ; 1 bytes @ 0x0
  4057                           
  4058  0020                     I2c_SetI2cAddressMask@SlaveAddressMask:	
  4059                           ; 1 bytes @ 0x0
  4060                           
  4061  0020                     I2c_UpdateTxBuffer@Length:	
  4062                           ; 1 bytes @ 0x0
  4063                           
  4064  0020                     LedBlinkStateMachine@LedInitStatus:	
  4065                           ; 1 bytes @ 0x0
  4066                           
  4067  0020                     Mcu_SetPullUpsSts@PuSts:	
  4068                           ; 1 bytes @ 0x0
  4069                           
  4070  0020                     Mcu_ConfigPullUps@WpuCh:	
  4071                           ; 1 bytes @ 0x0
  4072                           
  4073  0020                     Mcu_SetWdgSts@WdgSts:	
  4074                           ; 1 bytes @ 0x0
  4075                           
  4076  0020                     Mcu_SetDieTempSts@DieTempSts:	
  4077                           ; 1 bytes @ 0x0
  4078                           
  4079  0020                     Mcu_SetDieTempMode@DieTempMode:	
  4080                           ; 1 bytes @ 0x0
  4081                           
  4082  0020                     TmrBInit@Prescaler:	
  4083                           ; 1 bytes @ 0x0
  4084                           
  4085  0020                     Tmr_TmrBIrqSet@TmrIrqSts:	
  4086                           ; 1 bytes @ 0x0
  4087                           
  4088  0020                     Tmr_StartTmr@TmrNumb:	
  4089                           ; 1 bytes @ 0x0
  4090                           
  4091  0020                     _isdigit$2094:	
  4092                           ; 1 bytes @ 0x0
  4093                           
  4094  0020                     GenerateEvt@Event:	
  4095                           ; 1 bytes @ 0x0
  4096                           
  4097  0020                     ReceiveEvt@Event:	
  4098                           ; 2 bytes @ 0x0
  4099                           
  4100  0020                     StringCopy@SourceStr:	
  4101                           ; 2 bytes @ 0x0
  4102                           
  4103  0020                     ___wmul@multiplier:	
  4104                           ; 2 bytes @ 0x0
  4105                           
  4106  0020                     ___lwdiv@divisor:	
  4107                           ; 2 bytes @ 0x0
  4108                           
  4109  0020                     ___ftpack@arg:	
  4110                           ; 2 bytes @ 0x0
  4111                           
  4112  0020                     ___lldiv@divisor:	
  4113                           ; 3 bytes @ 0x0
  4114                           
  4115                           
  4116                           ; 4 bytes @ 0x0
  4117  0020                     	ds	1
  4118  0021                     ??_I2c_UpdateTxBuffer:	
  4119  0021                     ??_LedBlinkStateMachine:	
  4120                           ; 1 bytes @ 0x1
  4121                           
  4122  0021                     ??_Tmr_TmrBIrqSet:	
  4123                           ; 1 bytes @ 0x1
  4124                           
  4125  0021                     ??_LowPowerMode:	
  4126                           ; 1 bytes @ 0x1
  4127                           
  4128  0021                     Adc_SelectChannel@SelCh:	
  4129                           ; 1 bytes @ 0x1
  4130                           
  4131  0021                     ClearRxBuffer@Index:	
  4132                           ; 1 bytes @ 0x1
  4133                           
  4134  0021                     ClearTxBuffer@Index:	
  4135                           ; 1 bytes @ 0x1
  4136                           
  4137  0021                     Mcu_SetWdgPeriod@WdgPeriod:	
  4138                           ; 1 bytes @ 0x1
  4139                           
  4140  0021                     TmrBInit@Postscaler:	
  4141                           ; 1 bytes @ 0x1
  4142                           
  4143  0021                     Tmr_TmrBIrqSet@TmrNumb:	
  4144                           ; 1 bytes @ 0x1
  4145                           
  4146  0021                     isdigit@c:	
  4147                           ; 1 bytes @ 0x1
  4148                           
  4149                           
  4150                           ; 1 bytes @ 0x1
  4151  0021                     	ds	1
  4152  0022                     ??_ReceiveEvt:	
  4153  0022                     ??_GenerateEvt:	
  4154                           ; 1 bytes @ 0x2
  4155                           
  4156  0022                     ??_Adc_GetConvResult:	
  4157                           ; 1 bytes @ 0x2
  4158                           
  4159  0022                     ??_I2c_InitI2cModule:	
  4160                           ; 1 bytes @ 0x2
  4161                           
  4162  0022                     ??_TmrBInit:	
  4163                           ; 1 bytes @ 0x2
  4164                           
  4165  0022                     StringCopy@DestStr:	
  4166                           ; 1 bytes @ 0x2
  4167                           
  4168  0022                     ___wmul@multiplicand:	
  4169                           ; 1 bytes @ 0x2
  4170                           
  4171  0022                     ___lwdiv@dividend:	
  4172                           ; 2 bytes @ 0x2
  4173                           
  4174                           
  4175                           ; 2 bytes @ 0x2
  4176  0022                     	ds	1
  4177  0023                     I2c_UpdateTxBuffer@DataBuffer:	
  4178  0023                     TmrBInit@TmrNumb:	
  4179                           ; 1 bytes @ 0x3
  4180                           
  4181  0023                     StringCopy@Len:	
  4182                           ; 1 bytes @ 0x3
  4183                           
  4184  0023                     ___ftpack@exp:	
  4185                           ; 1 bytes @ 0x3
  4186                           
  4187  0023                     Adc_GetConvResult@AdcResult:	
  4188                           ; 1 bytes @ 0x3
  4189                           
  4190                           
  4191                           ; 2 bytes @ 0x3
  4192  0023                     	ds	1
  4193  0024                     ??_StringCopy:	
  4194  0024                     ??___wmul:	
  4195                           ; 1 bytes @ 0x4
  4196                           
  4197  0024                     ??___lwdiv:	
  4198                           ; 1 bytes @ 0x4
  4199                           
  4200  0024                     I2c_InitI2cModule@I2cConfig:	
  4201                           ; 1 bytes @ 0x4
  4202                           
  4203  0024                     I2c_UpdateTxBuffer@Index:	
  4204                           ; 1 bytes @ 0x4
  4205                           
  4206  0024                     GenerateEvt@EventStatus:	
  4207                           ; 1 bytes @ 0x4
  4208                           
  4209  0024                     ReceiveEvt@EventStatus:	
  4210                           ; 1 bytes @ 0x4
  4211                           
  4212  0024                     ___ftpack@sign:	
  4213                           ; 1 bytes @ 0x4
  4214                           
  4215  0024                     ___wmul@product:	
  4216                           ; 1 bytes @ 0x4
  4217                           
  4218  0024                     ___lldiv@dividend:	
  4219                           ; 2 bytes @ 0x4
  4220                           
  4221                           
  4222                           ; 4 bytes @ 0x4
  4223  0024                     	ds	1
  4224  0025                     ??_I2cSlv_I2cDrvHandle:	
  4225  0025                     ??___ftpack:	
  4226                           ; 1 bytes @ 0x5
  4227                           
  4228  0025                     ?_GetDieTemperature:	
  4229                           ; 1 bytes @ 0x5
  4230                           
  4231  0025                     LedBlinkStateMachine@LedBlink:	
  4232                           ; 2 bytes @ 0x5
  4233                           
  4234  0025                     ___lwdiv@counter:	
  4235                           ; 1 bytes @ 0x5
  4236                           
  4237                           
  4238                           ; 1 bytes @ 0x5
  4239  0025                     	ds	1
  4240  0026                     ?___lmul:	
  4241  0026                     ___lwdiv@quotient:	
  4242                           ; 4 bytes @ 0x6
  4243                           
  4244  0026                     ___lmul@multiplier:	
  4245                           ; 2 bytes @ 0x6
  4246                           
  4247                           
  4248                           ; 4 bytes @ 0x6
  4249  0026                     	ds	1
  4250  0027                     ??_GetDieTemperature:	
  4251  0027                     GetDieTemperature@DieTempRes:	
  4252                           ; 1 bytes @ 0x7
  4253                           
  4254                           
  4255                           ; 2 bytes @ 0x7
  4256  0027                     	ds	1
  4257  0028                     ??___lldiv:	
  4258  0028                     ?___lwmod:	
  4259                           ; 1 bytes @ 0x8
  4260                           
  4261  0028                     ?___lwtoft:	
  4262                           ; 2 bytes @ 0x8
  4263                           
  4264  0028                     ?___fttol:	
  4265                           ; 3 bytes @ 0x8
  4266                           
  4267  0028                     StringCopy@Index:	
  4268                           ; 4 bytes @ 0x8
  4269                           
  4270  0028                     ___lwmod@divisor:	
  4271                           ; 1 bytes @ 0x8
  4272                           
  4273  0028                     ___lwtoft@c:	
  4274                           ; 2 bytes @ 0x8
  4275                           
  4276  0028                     ___fttol@f1:	
  4277                           ; 2 bytes @ 0x8
  4278                           
  4279                           
  4280                           ; 3 bytes @ 0x8
  4281  0028                     	ds	1
  4282  0029                     ___lldiv@quotient:	
  4283                           
  4284                           ; 4 bytes @ 0x9
  4285  0029                     	ds	1
  4286  002A                     I2cSlv_I2cDrvHandle@Index:	
  4287  002A                     ___lwmod@dividend:	
  4288                           ; 1 bytes @ 0xA
  4289                           
  4290  002A                     ___lmul@multiplicand:	
  4291                           ; 2 bytes @ 0xA
  4292                           
  4293                           
  4294                           ; 4 bytes @ 0xA
  4295  002A                     	ds	1
  4296  002B                     ??___lwtoft:	
  4297                           
  4298                           ; 1 bytes @ 0xB
  4299  002B                     	ds	1
  4300  002C                     ??___fttol:	
  4301  002C                     ??___lwmod:	
  4302                           ; 1 bytes @ 0xC
  4303                           
  4304                           
  4305                           ; 1 bytes @ 0xC
  4306  002C                     	ds	1
  4307  002D                     ___lldiv@counter:	
  4308  002D                     ___lwmod@counter:	
  4309                           ; 1 bytes @ 0xD
  4310                           
  4311                           
  4312                           ; 1 bytes @ 0xD
  4313  002D                     	ds	1
  4314  002E                     ?_utoa:	
  4315  002E                     ??___lmul:	
  4316                           ; 1 bytes @ 0xE
  4317                           
  4318  002E                     utoa@val:	
  4319                           ; 1 bytes @ 0xE
  4320                           
  4321  002E                     ___lmul@product:	
  4322                           ; 2 bytes @ 0xE
  4323                           
  4324                           
  4325                           ; 4 bytes @ 0xE
  4326  002E                     	ds	2
  4327  0030                     ___fttol@sign1:	
  4328  0030                     utoa@base:	
  4329                           ; 1 bytes @ 0x10
  4330                           
  4331                           
  4332                           ; 2 bytes @ 0x10
  4333  0030                     	ds	1
  4334  0031                     ___fttol@lval:	
  4335                           
  4336                           ; 4 bytes @ 0x11
  4337  0031                     	ds	1
  4338  0032                     ??_utoa:	
  4339  0032                     ?_Tmr_TmrBPrSet:	
  4340                           ; 1 bytes @ 0x12
  4341                           
  4342  0032                     Tmr_TmrBPrSet@IntFreqHz:	
  4343                           ; 1 bytes @ 0x12
  4344                           
  4345                           
  4346                           ; 2 bytes @ 0x12
  4347  0032                     	ds	1
  4348  0033                     utoa@v:	
  4349                           
  4350                           ; 2 bytes @ 0x13
  4351  0033                     	ds	1
  4352  0034                     Tmr_TmrBPrSet@Prescaler:	
  4353                           
  4354                           ; 1 bytes @ 0x14
  4355  0034                     	ds	1
  4356  0035                     Tmr_TmrBPrSet@Postscaler:	
  4357  0035                     ___fttol@exp1:	
  4358                           ; 1 bytes @ 0x15
  4359                           
  4360  0035                     utoa@c:	
  4361                           ; 1 bytes @ 0x15
  4362                           
  4363                           
  4364                           ; 1 bytes @ 0x15
  4365  0035                     	ds	1
  4366  0036                     ??_Tmr_TmrBPrSet:	
  4367  0036                     ?___awtoft:	
  4368                           ; 1 bytes @ 0x16
  4369                           
  4370  0036                     utoa@buf:	
  4371                           ; 3 bytes @ 0x16
  4372                           
  4373  0036                     ___awtoft@c:	
  4374                           ; 1 bytes @ 0x16
  4375                           
  4376                           
  4377                           ; 2 bytes @ 0x16
  4378  0036                     	ds	1
  4379  0037                     ??_StdS_ManageStdServices:	
  4380                           
  4381                           ; 1 bytes @ 0x17
  4382  0037                     	ds	2
  4383  0039                     ??___awtoft:	
  4384  0039                     StdS_ManageStdServices@DieTempStr:	
  4385                           ; 1 bytes @ 0x19
  4386                           
  4387                           
  4388                           ; 4 bytes @ 0x19
  4389  0039                     	ds	2
  4390  003B                     ___awtoft@sign:	
  4391                           
  4392                           ; 1 bytes @ 0x1B
  4393  003B                     	ds	1
  4394  003C                     ?___ftneg:	
  4395  003C                     ___ftneg@f1:	
  4396                           ; 3 bytes @ 0x1C
  4397                           
  4398                           
  4399                           ; 3 bytes @ 0x1C
  4400  003C                     	ds	1
  4401  003D                     StdS_ManageStdServices@DieTemp:	
  4402                           
  4403                           ; 2 bytes @ 0x1D
  4404  003D                     	ds	1
  4405  003E                     Tmr_TmrBPrSet@TmrNumb:	
  4406                           
  4407                           ; 1 bytes @ 0x1E
  4408  003E                     	ds	1
  4409  003F                     ??_ManageProtocol:	
  4410  003F                     ??___ftneg:	
  4411                           ; 1 bytes @ 0x1F
  4412                           
  4413  003F                     ?___ftadd:	
  4414                           ; 1 bytes @ 0x1F
  4415                           
  4416  003F                     Tmr_TmrBPrSet@TmrBPrCfgSts:	
  4417                           ; 3 bytes @ 0x1F
  4418                           
  4419  003F                     ___ftadd@f1:	
  4420                           ; 1 bytes @ 0x1F
  4421                           
  4422                           
  4423                           ; 3 bytes @ 0x1F
  4424  003F                     	ds	1
  4425  0040                     ManageProtocol@Index:	
  4426  0040                     Tmr_TmrBPrSet@Divisor:	
  4427                           ; 1 bytes @ 0x20
  4428                           
  4429                           
  4430                           ; 4 bytes @ 0x20
  4431  0040                     	ds	1
  4432  0041                     ??_AppSm:	
  4433                           
  4434                           ; 1 bytes @ 0x21
  4435  0041                     	ds	1
  4436  0042                     ___ftadd@f2:	
  4437                           
  4438                           ; 3 bytes @ 0x22
  4439  0042                     	ds	2
  4440  0044                     ?_Tmr_TmrBConfig:	
  4441  0044                     Tmr_TmrBConfig@TmrBConfig:	
  4442                           ; 1 bytes @ 0x24
  4443                           
  4444                           
  4445                           ; 1 bytes @ 0x24
  4446  0044                     	ds	1
  4447  0045                     ??_Tmr_TmrBConfig:	
  4448  0045                     ??___ftadd:	
  4449                           ; 1 bytes @ 0x25
  4450                           
  4451                           
  4452                           ; 1 bytes @ 0x25
  4453  0045                     	ds	1
  4454  0046                     Tmr_TmrBConfig@TmrNumb:	
  4455                           
  4456                           ; 1 bytes @ 0x26
  4457  0046                     	ds	1
  4458  0047                     ??_InitSchTimer:	
  4459                           
  4460                           ; 1 bytes @ 0x27
  4461  0047                     	ds	1
  4462  0048                     InitSchTimer@TmrBConfig:	
  4463                           
  4464                           ; 6 bytes @ 0x28
  4465  0048                     	ds	1
  4466  0049                     ___ftadd@sign:	
  4467                           
  4468                           ; 1 bytes @ 0x29
  4469  0049                     	ds	1
  4470  004A                     ___ftadd@exp2:	
  4471                           
  4472                           ; 1 bytes @ 0x2A
  4473  004A                     	ds	1
  4474  004B                     ___ftadd@exp1:	
  4475                           
  4476                           ; 1 bytes @ 0x2B
  4477  004B                     	ds	1
  4478  004C                     ?___ftdiv:	
  4479  004C                     ?___ftmul:	
  4480                           ; 3 bytes @ 0x2C
  4481                           
  4482  004C                     ___ftdiv@f2:	
  4483                           ; 3 bytes @ 0x2C
  4484                           
  4485  004C                     ___ftmul@f1:	
  4486                           ; 3 bytes @ 0x2C
  4487                           
  4488                           
  4489                           ; 3 bytes @ 0x2C
  4490  004C                     	ds	2
  4491  004E                     ??_SystemInit:	
  4492                           
  4493                           ; 1 bytes @ 0x2E
  4494  004E                     	ds	1
  4495  004F                     ___ftdiv@f1:	
  4496  004F                     ___ftmul@f2:	
  4497                           ; 3 bytes @ 0x2F
  4498                           
  4499                           
  4500                           ; 3 bytes @ 0x2F
  4501  004F                     	ds	3
  4502  0052                     ??___ftdiv:	
  4503  0052                     ??___ftmul:	
  4504                           ; 1 bytes @ 0x32
  4505                           
  4506                           
  4507                           ; 1 bytes @ 0x32
  4508  0052                     	ds	4
  4509  0056                     ___ftdiv@cntr:	
  4510  0056                     ___ftmul@exp:	
  4511                           ; 1 bytes @ 0x36
  4512                           
  4513                           
  4514                           ; 1 bytes @ 0x36
  4515  0056                     	ds	1
  4516  0057                     ___ftdiv@f3:	
  4517  0057                     ___ftmul@f3_as_product:	
  4518                           ; 3 bytes @ 0x37
  4519                           
  4520                           
  4521                           ; 3 bytes @ 0x37
  4522  0057                     	ds	3
  4523  005A                     ___ftdiv@exp:	
  4524  005A                     ___ftmul@cntr:	
  4525                           ; 1 bytes @ 0x3A
  4526                           
  4527                           
  4528                           ; 1 bytes @ 0x3A
  4529  005A                     	ds	1
  4530  005B                     ___ftdiv@sign:	
  4531  005B                     ___ftmul@sign:	
  4532                           ; 1 bytes @ 0x3B
  4533                           
  4534                           
  4535                           ; 1 bytes @ 0x3B
  4536  005B                     	ds	1
  4537  005C                     ?_sprintf:	
  4538  005C                     sprintf@f:	
  4539                           ; 2 bytes @ 0x3C
  4540                           
  4541                           
  4542                           ; 2 bytes @ 0x3C
  4543  005C                     	ds	6
  4544  0062                     ??_sprintf:	
  4545                           
  4546                           ; 1 bytes @ 0x42
  4547  0062                     	ds	4
  4548  0066                     ??_MyFtoa:	
  4549  0066                     MyFtoa@ret:	
  4550                           ; 1 bytes @ 0x46
  4551                           
  4552                           
  4553                           ; 2 bytes @ 0x46
  4554  0066                     	ds	2
  4555  0068                     _MyFtoa$2438:	
  4556                           
  4557                           ; 3 bytes @ 0x48
  4558  0068                     	ds	3
  4559  006B                     ??_GetTemperature:	
  4560                           
  4561                           ; 1 bytes @ 0x4B
  4562  006B                     	ds	2
  4563  006D                     ??_I2cSlv_MainTask:	
  4564  006D                     ??_Wdg_MainTask:	
  4565                           ; 1 bytes @ 0x4D
  4566                           
  4567  006D                     ??_Led_MainTask:	
  4568                           ; 1 bytes @ 0x4D
  4569                           
  4570  006D                     ??_App_MainTask:	
  4571                           ; 1 bytes @ 0x4D
  4572                           
  4573  006D                     I2c_DataReceiveSm@Index:	
  4574                           ; 1 bytes @ 0x4D
  4575                           
  4576                           
  4577                           ; 1 bytes @ 0x4D
  4578  006D                     	ds	1
  4579  006E                     InitializeTasks@ActiveTaskIndex:	
  4580  006E                     ScheduleTasks@ActiveTaskIndex:	
  4581                           ; 1 bytes @ 0x4E
  4582                           
  4583                           
  4584                           ; 1 bytes @ 0x4E
  4585  006E                     	ds	1
  4586  006F                     ??_MainScheduler:	
  4587  006F                     ??_main:	
  4588                           ; 1 bytes @ 0x4F
  4589                           
  4590                           
  4591                           	psect	maintext
  4592  1323                     __pmaintext:	
  4593                           ; 1 bytes @ 0x4F
  4594 ;;
  4595 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  4596 ;;
  4597 ;; *************** function _main *****************
  4598 ;; Defined at:
  4599 ;;		line 57 in file "../../../../../Framework/MercuryFwk/Source/c/00_Main/main.c"
  4600 ;; Parameters:    Size  Location     Type
  4601 ;;		None
  4602 ;; Auto vars:     Size  Location     Type
  4603 ;;		None
  4604 ;; Return value:  Size  Location     Type
  4605 ;;                  2   12[None  ] short 
  4606 ;; Registers used:
  4607 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4608 ;; Tracked objects:
  4609 ;;		On entry : B1F/0
  4610 ;;		On exit  : 0/0
  4611 ;;		Unchanged: 0/0
  4612 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4613 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4614 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4615 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4616 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4617 ;;Total ram usage:        0 bytes
  4618 ;; Hardware stack levels required when called:   10
  4619 ;; This function calls:
  4620 ;;		_MainScheduler
  4621 ;;		_SystemInit
  4622 ;; This function is called by:
  4623 ;;		Startup code after reset
  4624 ;; This function uses a non-reentrant model
  4625 ;;
  4626                           
  4627                           
  4628                           ;psect for function _main
  4629  1323                     _main:	
  4630                           
  4631                           ;main.c: 60: SystemInit();
  4632                           
  4633                           ;incstack = 0
  4634                           ; Regs used in _main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  4635  1323  3193  2357  3193   	fcall	_SystemInit
  4636                           
  4637                           ;main.c: 63: MainScheduler();
  4638  1326  3193  23F7         	fcall	_MainScheduler
  4639                           
  4640                           ;main.c: 66: return 0;
  4641                           ;	Return value of _main is never used
  4642  1328  3180  282F         	ljmp	start
  4643  132A                     __end_of_main:	
  4644                           
  4645                           	psect	text1
  4646  1357                     __ptext1:	
  4647 ;; *************** function _SystemInit *****************
  4648 ;; Defined at:
  4649 ;;		line 97 in file "../Source/c/04_App/sys_init.c"
  4650 ;; Parameters:    Size  Location     Type
  4651 ;;		None
  4652 ;; Auto vars:     Size  Location     Type
  4653 ;;		None
  4654 ;; Return value:  Size  Location     Type
  4655 ;;                  1    wreg      void 
  4656 ;; Registers used:
  4657 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4658 ;; Tracked objects:
  4659 ;;		On entry : 0/0
  4660 ;;		On exit  : 0/0
  4661 ;;		Unchanged: 0/0
  4662 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4663 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4664 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4665 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4666 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4667 ;;Total ram usage:        0 bytes
  4668 ;; Hardware stack levels used:    1
  4669 ;; Hardware stack levels required when called:    6
  4670 ;; This function calls:
  4671 ;;		_InitSchTimer
  4672 ;;		_Mcu_EnableInterrupts
  4673 ;;		_Mcu_InitIntOsc
  4674 ;; This function is called by:
  4675 ;;		_main
  4676 ;; This function uses a non-reentrant model
  4677 ;;
  4678                           
  4679                           
  4680                           ;psect for function _SystemInit
  4681  1357                     _SystemInit:	
  4682                           
  4683                           ;sys_init.c: 100: Mcu_InitIntOsc();
  4684                           
  4685                           ;incstack = 0
  4686                           ; Regs used in _SystemInit: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  4687  1357  3193  231C  3193   	fcall	_Mcu_InitIntOsc
  4688                           
  4689                           ;sys_init.c: 102: InitSchTimer();
  4690  135A  3194  24AE  3193   	fcall	_InitSchTimer
  4691                           
  4692                           ;sys_init.c: 104: Mcu_EnableInterrupts();
  4693  135D  3193  230D         	fcall	_Mcu_EnableInterrupts
  4694  135F  0008               	return
  4695  1360                     __end_of_SystemInit:	
  4696                           
  4697                           	psect	text2
  4698  131C                     __ptext2:	
  4699 ;; *************** function _Mcu_InitIntOsc *****************
  4700 ;; Defined at:
  4701 ;;		line 79 in file "../../../../../Framework/MercuryFwk/Source/c/01_Hal/02_Drv/mcu_drv.c"
  4702 ;; Parameters:    Size  Location     Type
  4703 ;;		None
  4704 ;; Auto vars:     Size  Location     Type
  4705 ;;		None
  4706 ;; Return value:  Size  Location     Type
  4707 ;;                  1    wreg      void 
  4708 ;; Registers used:
  4709 ;;		wreg, status,2, status,0
  4710 ;; Tracked objects:
  4711 ;;		On entry : 0/0
  4712 ;;		On exit  : 0/0
  4713 ;;		Unchanged: 0/0
  4714 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4715 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4716 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4717 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4718 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4719 ;;Total ram usage:        0 bytes
  4720 ;; Hardware stack levels used:    1
  4721 ;; Hardware stack levels required when called:    2
  4722 ;; This function calls:
  4723 ;;		Nothing
  4724 ;; This function is called by:
  4725 ;;		_SystemInit
  4726 ;; This function uses a non-reentrant model
  4727 ;;
  4728                           
  4729                           
  4730                           ;psect for function _Mcu_InitIntOsc
  4731  131C                     _Mcu_InitIntOsc:	
  4732                           
  4733                           ;mcu_drv.c: 82: OSCCONbits.SCS1 = ((UINT8)(1));
  4734                           
  4735                           ;incstack = 0
  4736                           ; Regs used in _Mcu_InitIntOsc: [wreg+status,2+status,0]
  4737  131C  0021               	movlb	1	; select bank1
  4738  131D  1499               	bsf	25,1	;volatile
  4739                           
  4740                           ;mcu_drv.c: 84: OSCCONbits.IRCF = 0b1111;
  4741  131E  3078               	movlw	120
  4742  131F  0499               	iorwf	25,f	;volatile
  4743  1320                     l213:	
  4744                           ;mcu_drv.c: 86: while (OSCSTATbits.HFIOFS == 0);
  4745                           
  4746  1320  181A               	btfsc	26,0	;volatile
  4747  1321  0008               	return
  4748  1322  2B20               	goto	l213
  4749  1323                     __end_of_Mcu_InitIntOsc:	
  4750                           
  4751                           	psect	text3
  4752  130D                     __ptext3:	
  4753 ;; *************** function _Mcu_EnableInterrupts *****************
  4754 ;; Defined at:
  4755 ;;		line 97 in file "../../../../../Framework/MercuryFwk/Source/c/01_Hal/02_Drv/mcu_drv.c"
  4756 ;; Parameters:    Size  Location     Type
  4757 ;;		None
  4758 ;; Auto vars:     Size  Location     Type
  4759 ;;		None
  4760 ;; Return value:  Size  Location     Type
  4761 ;;                  1    wreg      void 
  4762 ;; Registers used:
  4763 ;;		None
  4764 ;; Tracked objects:
  4765 ;;		On entry : 0/0
  4766 ;;		On exit  : 0/0
  4767 ;;		Unchanged: 0/0
  4768 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4769 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4770 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4771 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4772 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4773 ;;Total ram usage:        0 bytes
  4774 ;; Hardware stack levels used:    1
  4775 ;; Hardware stack levels required when called:    2
  4776 ;; This function calls:
  4777 ;;		Nothing
  4778 ;; This function is called by:
  4779 ;;		_SystemInit
  4780 ;; This function uses a non-reentrant model
  4781 ;;
  4782                           
  4783                           
  4784                           ;psect for function _Mcu_EnableInterrupts
  4785  130D                     _Mcu_EnableInterrupts:	
  4786                           
  4787                           ;mcu_drv.c: 100: INTCONbits.GIE = ((UINT8)(1));
  4788                           
  4789                           ;incstack = 0
  4790                           ; Regs used in _Mcu_EnableInterrupts: []
  4791  130D  178B               	bsf	11,7	;volatile
  4792                           
  4793                           ;mcu_drv.c: 101: INTCONbits.PEIE = ((UINT8)(1));
  4794  130E  170B               	bsf	11,6	;volatile
  4795  130F  0008               	return
  4796  1310                     __end_of_Mcu_EnableInterrupts:	
  4797                           
  4798                           	psect	text4
  4799  14AE                     __ptext4:	
  4800 ;; *************** function _InitSchTimer *****************
  4801 ;; Defined at:
  4802 ;;		line 70 in file "../Source/c/04_App/sys_init.c"
  4803 ;; Parameters:    Size  Location     Type
  4804 ;;		None
  4805 ;; Auto vars:     Size  Location     Type
  4806 ;;  TmrBConfig      6   40[BANK0 ] struct _TmrBConfigType
  4807 ;; Return value:  Size  Location     Type
  4808 ;;                  1    wreg      void 
  4809 ;; Registers used:
  4810 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4811 ;; Tracked objects:
  4812 ;;		On entry : 0/0
  4813 ;;		On exit  : 0/0
  4814 ;;		Unchanged: 0/0
  4815 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4816 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4817 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4818 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4819 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4820 ;;Total ram usage:        7 bytes
  4821 ;; Hardware stack levels used:    1
  4822 ;; Hardware stack levels required when called:    5
  4823 ;; This function calls:
  4824 ;;		_Tmr_TmrBConfig
  4825 ;; This function is called by:
  4826 ;;		_SystemInit
  4827 ;; This function uses a non-reentrant model
  4828 ;;
  4829                           
  4830                           
  4831                           ;psect for function _InitSchTimer
  4832  14AE                     _InitSchTimer:	
  4833                           
  4834                           ;sys_init.c: 72: TmrBConfigType TmrBConfig;
  4835                           ;sys_init.c: 75: TmrBConfig.PreScaler = 16;
  4836                           
  4837                           ;incstack = 0
  4838                           ; Regs used in _InitSchTimer: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  4839  14AE  3010               	movlw	16
  4840  14AF  0020               	movlb	0	; select bank0
  4841  14B0  00C7               	movwf	??_InitSchTimer
  4842  14B1  0847               	movf	??_InitSchTimer,w
  4843  14B2  00C8               	movwf	InitSchTimer@TmrBConfig
  4844                           
  4845                           ;sys_init.c: 76: TmrBConfig.PostScaler = 4;
  4846  14B3  3004               	movlw	4
  4847  14B4  00C7               	movwf	??_InitSchTimer
  4848  14B5  0847               	movf	??_InitSchTimer,w
  4849  14B6  00C9               	movwf	InitSchTimer@TmrBConfig+1
  4850                           
  4851                           ;sys_init.c: 77: TmrBConfig.IntEnable = 1u;
  4852  14B7  01CA               	clrf	InitSchTimer@TmrBConfig+2
  4853  14B8  0ACA               	incf	InitSchTimer@TmrBConfig+2,f
  4854                           
  4855                           ;sys_init.c: 78: TmrBConfig.IntFreqHz = 1000;
  4856  14B9  30E8               	movlw	232
  4857  14BA  00CB               	movwf	InitSchTimer@TmrBConfig+3
  4858  14BB  3003               	movlw	3
  4859  14BC  00CC               	movwf	InitSchTimer@TmrBConfig+4
  4860                           
  4861                           ;sys_init.c: 79: TmrBConfig.StartTmrRequest = StartTmrReq;
  4862  14BD  01CD               	clrf	InitSchTimer@TmrBConfig+5
  4863  14BE  0ACD               	incf	InitSchTimer@TmrBConfig+5,f
  4864                           
  4865                           ;sys_init.c: 82: Tmr_TmrBConfig(((UINT8)(2)),&TmrBConfig);
  4866  14BF  3048               	movlw	(low (InitSchTimer@TmrBConfig| 0))& (0+255)
  4867  14C0  00C7               	movwf	??_InitSchTimer
  4868  14C1  0847               	movf	??_InitSchTimer,w
  4869  14C2  00C4               	movwf	Tmr_TmrBConfig@TmrBConfig
  4870  14C3  3002               	movlw	2
  4871  14C4  3197  2713         	fcall	_Tmr_TmrBConfig
  4872  14C6  0008               	return
  4873  14C7                     __end_of_InitSchTimer:	
  4874                           
  4875                           	psect	text5
  4876  1713                     __ptext5:	
  4877 ;; *************** function _Tmr_TmrBConfig *****************
  4878 ;; Defined at:
  4879 ;;		line 313 in file "../../../../../Framework/MercuryFwk/Source/c/01_Hal/02_Drv/tmr_drv.c"
  4880 ;; Parameters:    Size  Location     Type
  4881 ;;  TmrNumb         1    wreg     unsigned char 
  4882 ;;  TmrBConfig      1   36[BANK0 ] PTR struct _TmrBConfigTy
  4883 ;;		 -> InitSchTimer@TmrBConfig(6), 
  4884 ;; Auto vars:     Size  Location     Type
  4885 ;;  TmrNumb         1   38[BANK0 ] unsigned char 
  4886 ;; Return value:  Size  Location     Type
  4887 ;;                  1    wreg      void 
  4888 ;; Registers used:
  4889 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4890 ;; Tracked objects:
  4891 ;;		On entry : 0/0
  4892 ;;		On exit  : 0/0
  4893 ;;		Unchanged: 0/0
  4894 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4895 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4896 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4897 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4898 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4899 ;;Total ram usage:        3 bytes
  4900 ;; Hardware stack levels used:    1
  4901 ;; Hardware stack levels required when called:    4
  4902 ;; This function calls:
  4903 ;;		_TmrBInit
  4904 ;;		_Tmr_StartTmr
  4905 ;;		_Tmr_TmrBIrqSet
  4906 ;;		_Tmr_TmrBPrSet
  4907 ;; This function is called by:
  4908 ;;		_InitSchTimer
  4909 ;; This function uses a non-reentrant model
  4910 ;;
  4911                           
  4912                           
  4913                           ;psect for function _Tmr_TmrBConfig
  4914  1713                     _Tmr_TmrBConfig:	
  4915                           
  4916                           ;incstack = 0
  4917                           ; Regs used in _Tmr_TmrBConfig: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  4918                           ;Tmr_TmrBConfig@TmrNumb stored from wreg
  4919  1713  0020               	movlb	0	; select bank0
  4920  1714  00C6               	movwf	Tmr_TmrBConfig@TmrNumb
  4921                           
  4922                           ;tmr_drv.c: 316: TmrBInit(TmrNumb,TmrBConfig->PreScaler,TmrBConfig->PostScaler);
  4923  1715  0844               	movf	Tmr_TmrBConfig@TmrBConfig,w
  4924  1716  0086               	movwf	6
  4925  1717  0187               	clrf	7
  4926  1718  0801               	movf	1,w
  4927  1719  00C5               	movwf	??_Tmr_TmrBConfig
  4928  171A  0845               	movf	??_Tmr_TmrBConfig,w
  4929  171B  00A0               	movwf	TmrBInit@Prescaler
  4930  171C  0844               	movf	Tmr_TmrBConfig@TmrBConfig,w
  4931  171D  0086               	movwf	6
  4932  171E  0187               	clrf	7
  4933  171F  3F41               	moviw [1]fsr1
  4934  1720  00A1               	movwf	TmrBInit@Postscaler
  4935  1721  0846               	movf	Tmr_TmrBConfig@TmrNumb,w
  4936  1722  3189  21D8  3197   	fcall	_TmrBInit
  4937                           
  4938                           ;tmr_drv.c: 318: if (TmrBConfig->IntEnable == EnableInt)
  4939  1725  0020               	movlb	0	; select bank0
  4940  1726  0844               	movf	Tmr_TmrBConfig@TmrBConfig,w
  4941  1727  3E02               	addlw	2
  4942  1728  0086               	movwf	6
  4943  1729  0187               	clrf	7
  4944  172A  0301               	decf	1,w
  4945  172B  1D03               	btfss	3,2
  4946  172C  2F30               	goto	l5298
  4947                           
  4948                           ;tmr_drv.c: 319: {
  4949                           ;tmr_drv.c: 321: Tmr_TmrBIrqSet(TmrNumb,((UINT8)(1)));
  4950  172D  01A0               	clrf	Tmr_TmrBIrqSet@TmrIrqSts
  4951  172E  0AA0               	incf	Tmr_TmrBIrqSet@TmrIrqSts,f
  4952  172F  2F32               	goto	L1
  4953  1730                     l5298:	
  4954                           ;tmr_drv.c: 322: }
  4955                           
  4956                           
  4957                           ;tmr_drv.c: 323: else
  4958                           ;tmr_drv.c: 324: {
  4959                           ;tmr_drv.c: 326: Tmr_TmrBIrqSet(TmrNumb,((UINT8)(0)));
  4960  1730  0020               	movlb	0	; select bank0
  4961  1731  01A0               	clrf	Tmr_TmrBIrqSet@TmrIrqSts
  4962  1732                     L1:	
  4963  1732  0846               	movf	Tmr_TmrBConfig@TmrNumb,w
  4964  1733  3195  25BB  3197   	fcall	_Tmr_TmrBIrqSet
  4965                           
  4966                           ;tmr_drv.c: 327: }
  4967                           ;tmr_drv.c: 329: if (Tmr_TmrBPrSet(TmrNumb,TmrBConfig->IntFreqHz,TmrBConfig->PreScaler,T
      +                          mrBConfig->PostScaler) == CfgError)
  4968  1736  0020               	movlb	0	; select bank0
  4969  1737  0844               	movf	Tmr_TmrBConfig@TmrBConfig,w
  4970  1738  3E03               	addlw	3
  4971  1739  0086               	movwf	6
  4972  173A  0187               	clrf	7
  4973  173B  3F40               	moviw [0]fsr1
  4974  173C  00B2               	movwf	Tmr_TmrBPrSet@IntFreqHz
  4975  173D  3F41               	moviw [1]fsr1
  4976  173E  00B3               	movwf	Tmr_TmrBPrSet@IntFreqHz+1
  4977  173F  0844               	movf	Tmr_TmrBConfig@TmrBConfig,w
  4978  1740  0086               	movwf	6
  4979  1741  0187               	clrf	7
  4980  1742  0801               	movf	1,w
  4981  1743  00C5               	movwf	??_Tmr_TmrBConfig
  4982  1744  0845               	movf	??_Tmr_TmrBConfig,w
  4983  1745  00B4               	movwf	Tmr_TmrBPrSet@Prescaler
  4984  1746  0844               	movf	Tmr_TmrBConfig@TmrBConfig,w
  4985  1747  0086               	movwf	6
  4986  1748  0187               	clrf	7
  4987  1749  3F41               	moviw [1]fsr1
  4988  174A  00B5               	movwf	Tmr_TmrBPrSet@Postscaler
  4989  174B  0846               	movf	Tmr_TmrBConfig@TmrNumb,w
  4990  174C  318D  25CE  3197   	fcall	_Tmr_TmrBPrSet
  4991  174F  3A01               	xorlw	1
  4992  1750  1903               	btfsc	3,2
  4993  1751                     l335:	
  4994                           ;tmr_drv.c: 330: {
  4995                           ;tmr_drv.c: 332: while(1);
  4996                           
  4997  1751  2F51               	goto	l335
  4998                           
  4999                           ;tmr_drv.c: 333: }
  5000                           ;tmr_drv.c: 335: if (TmrBConfig->StartTmrRequest == StartTmrReq)
  5001  1752  0020               	movlb	0	; select bank0
  5002  1753  0844               	movf	Tmr_TmrBConfig@TmrBConfig,w
  5003  1754  3E05               	addlw	5
  5004  1755  0086               	movwf	6
  5005  1756  0187               	clrf	7
  5006  1757  0301               	decf	1,w
  5007  1758  1D03               	btfss	3,2
  5008  1759  0008               	return
  5009                           
  5010                           ;tmr_drv.c: 336: {
  5011                           ;tmr_drv.c: 338: Tmr_StartTmr(TmrNumb);
  5012  175A  0846               	movf	Tmr_TmrBConfig@TmrNumb,w
  5013  175B  3194  247D         	fcall	_Tmr_StartTmr
  5014                           
  5015                           ;tmr_drv.c: 339: }
  5016  175D  0008               	return
  5017  175E                     __end_of_Tmr_TmrBConfig:	
  5018                           ;tmr_drv.c: 340: else
  5019                           ;tmr_drv.c: 341: {
  5020                           
  5021                           
  5022                           	psect	text6
  5023  0DCE                     __ptext6:	
  5024 ;; *************** function _Tmr_TmrBPrSet *****************
  5025 ;; Defined at:
  5026 ;;		line 225 in file "../../../../../Framework/MercuryFwk/Source/c/01_Hal/02_Drv/tmr_drv.c"
  5027 ;; Parameters:    Size  Location     Type
  5028 ;;  TmrNumb         1    wreg     unsigned char 
  5029 ;;  IntFreqHz       2   18[BANK0 ] unsigned short 
  5030 ;;  Prescaler       1   20[BANK0 ] unsigned char 
  5031 ;;  Postscaler      1   21[BANK0 ] unsigned char 
  5032 ;; Auto vars:     Size  Location     Type
  5033 ;;  TmrNumb         1   30[BANK0 ] unsigned char 
  5034 ;;  Divisor         4   32[BANK0 ] unsigned long 
  5035 ;;  TmrBPrCfgSts    1   31[BANK0 ] enum E3647
  5036 ;; Return value:  Size  Location     Type
  5037 ;;                  1    wreg      enum E3647
  5038 ;; Registers used:
  5039 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  5040 ;; Tracked objects:
  5041 ;;		On entry : 0/0
  5042 ;;		On exit  : 0/0
  5043 ;;		Unchanged: 0/0
  5044 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5045 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5046 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5047 ;;      Temps:          0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5048 ;;      Totals:         0      18       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5049 ;;Total ram usage:       18 bytes
  5050 ;; Hardware stack levels used:    1
  5051 ;; Hardware stack levels required when called:    3
  5052 ;; This function calls:
  5053 ;;		___lldiv
  5054 ;;		___lmul
  5055 ;;		___wmul
  5056 ;; This function is called by:
  5057 ;;		_Tmr_TmrBConfig
  5058 ;; This function uses a non-reentrant model
  5059 ;;
  5060                           
  5061                           
  5062                           ;psect for function _Tmr_TmrBPrSet
  5063  0DCE                     _Tmr_TmrBPrSet:	
  5064                           
  5065                           ;incstack = 0
  5066                           ; Regs used in _Tmr_TmrBPrSet: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  5067                           ;Tmr_TmrBPrSet@TmrNumb stored from wreg
  5068  0DCE  0020               	movlb	0	; select bank0
  5069  0DCF  00BE               	movwf	Tmr_TmrBPrSet@TmrNumb
  5070                           
  5071                           ;tmr_drv.c: 227: CfgStsType TmrBPrCfgSts;
  5072                           ;tmr_drv.c: 228: UINT32 Divisor = 0;
  5073  0DD0  3000               	movlw	0
  5074  0DD1  00C3               	movwf	Tmr_TmrBPrSet@Divisor+3
  5075  0DD2  3000               	movlw	0
  5076  0DD3  00C2               	movwf	Tmr_TmrBPrSet@Divisor+2
  5077  0DD4  3000               	movlw	0
  5078  0DD5  00C1               	movwf	Tmr_TmrBPrSet@Divisor+1
  5079  0DD6  3000               	movlw	0
  5080  0DD7  00C0               	movwf	Tmr_TmrBPrSet@Divisor
  5081                           
  5082                           ;tmr_drv.c: 231: Divisor = (UINT32)Prescaler*(UINT32)Postscaler*(UINT32)IntFreqHz;
  5083  0DD8  0835               	movf	Tmr_TmrBPrSet@Postscaler,w
  5084  0DD9  00B6               	movwf	??_Tmr_TmrBPrSet
  5085  0DDA  01B7               	clrf	??_Tmr_TmrBPrSet+1
  5086  0DDB  0836               	movf	??_Tmr_TmrBPrSet,w
  5087  0DDC  00A2               	movwf	___wmul@multiplicand
  5088  0DDD  0837               	movf	??_Tmr_TmrBPrSet+1,w
  5089  0DDE  00A3               	movwf	___wmul@multiplicand+1
  5090  0DDF  0834               	movf	Tmr_TmrBPrSet@Prescaler,w
  5091  0DE0  00B8               	movwf	??_Tmr_TmrBPrSet+2
  5092  0DE1  01B9               	clrf	??_Tmr_TmrBPrSet+3
  5093  0DE2  0838               	movf	??_Tmr_TmrBPrSet+2,w
  5094  0DE3  00A0               	movwf	___wmul@multiplier
  5095  0DE4  0839               	movf	??_Tmr_TmrBPrSet+3,w
  5096  0DE5  00A1               	movwf	___wmul@multiplier+1
  5097  0DE6  3194  24C7  318D   	fcall	___wmul
  5098  0DE9  0020               	movlb	0	; select bank0
  5099  0DEA  0820               	movf	?___wmul,w
  5100  0DEB  00BA               	movwf	??_Tmr_TmrBPrSet+4
  5101  0DEC  0821               	movf	?___wmul+1,w
  5102  0DED  00BB               	movwf	??_Tmr_TmrBPrSet+5
  5103  0DEE  01BC               	clrf	??_Tmr_TmrBPrSet+6
  5104  0DEF  01BD               	clrf	??_Tmr_TmrBPrSet+7
  5105  0DF0  083D               	movf	??_Tmr_TmrBPrSet+7,w
  5106  0DF1  00A9               	movwf	___lmul@multiplier+3
  5107  0DF2  083C               	movf	??_Tmr_TmrBPrSet+6,w
  5108  0DF3  00A8               	movwf	___lmul@multiplier+2
  5109  0DF4  083B               	movf	??_Tmr_TmrBPrSet+5,w
  5110  0DF5  00A7               	movwf	___lmul@multiplier+1
  5111  0DF6  083A               	movf	??_Tmr_TmrBPrSet+4,w
  5112  0DF7  00A6               	movwf	___lmul@multiplier
  5113  0DF8  0832               	movf	Tmr_TmrBPrSet@IntFreqHz,w
  5114  0DF9  00AA               	movwf	___lmul@multiplicand
  5115  0DFA  0833               	movf	Tmr_TmrBPrSet@IntFreqHz+1,w
  5116  0DFB  00AB               	movwf	___lmul@multiplicand+1
  5117  0DFC  01AC               	clrf	___lmul@multiplicand+2
  5118  0DFD  01AD               	clrf	___lmul@multiplicand+3
  5119  0DFE  3196  263C  318D   	fcall	___lmul
  5120  0E01  0020               	movlb	0	; select bank0
  5121  0E02  0829               	movf	?___lmul+3,w
  5122  0E03  00C3               	movwf	Tmr_TmrBPrSet@Divisor+3
  5123  0E04  0828               	movf	?___lmul+2,w
  5124  0E05  00C2               	movwf	Tmr_TmrBPrSet@Divisor+2
  5125  0E06  0827               	movf	?___lmul+1,w
  5126  0E07  00C1               	movwf	Tmr_TmrBPrSet@Divisor+1
  5127  0E08  0826               	movf	?___lmul,w
  5128  0E09  00C0               	movwf	Tmr_TmrBPrSet@Divisor
  5129                           
  5130                           ;tmr_drv.c: 234: if (((((UINT32)(16000000))/4)/Divisor) <= 255)
  5131  0E0A  0843               	movf	Tmr_TmrBPrSet@Divisor+3,w
  5132  0E0B  00A3               	movwf	___lldiv@divisor+3
  5133  0E0C  0842               	movf	Tmr_TmrBPrSet@Divisor+2,w
  5134  0E0D  00A2               	movwf	___lldiv@divisor+2
  5135  0E0E  0841               	movf	Tmr_TmrBPrSet@Divisor+1,w
  5136  0E0F  00A1               	movwf	___lldiv@divisor+1
  5137  0E10  0840               	movf	Tmr_TmrBPrSet@Divisor,w
  5138  0E11  00A0               	movwf	___lldiv@divisor
  5139  0E12  3000               	movlw	0
  5140  0E13  00A7               	movwf	___lldiv@dividend+3
  5141  0E14  303D               	movlw	61
  5142  0E15  00A6               	movwf	___lldiv@dividend+2
  5143  0E16  3009               	movlw	9
  5144  0E17  00A5               	movwf	___lldiv@dividend+1
  5145  0E18  3000               	movlw	0
  5146  0E19  00A4               	movwf	___lldiv@dividend
  5147  0E1A  3197  27AD  318D   	fcall	___lldiv
  5148  0E1D  0020               	movlb	0	; select bank0
  5149  0E1E  0823               	movf	?___lldiv+3,w
  5150  0E1F  1D03               	btfss	3,2
  5151  0E20  2E80               	goto	l311
  5152  0E21  0822               	movf	?___lldiv+2,w
  5153  0E22  1D03               	btfss	3,2
  5154  0E23  2E80               	goto	l311
  5155  0E24  3001               	movlw	1
  5156  0E25  0221               	subwf	?___lldiv+1,w
  5157  0E26  1C03               	btfss	3,0
  5158  0E27  2E71               	goto	l5070
  5159  0E28  2E80               	goto	l311
  5160  0E29                     l5062:	
  5161                           ;tmr_drv.c: 238: {
  5162                           ;tmr_drv.c: 239: case ((UINT8)(2)):
  5163                           
  5164                           ;tmr_drv.c: 235: {
  5165                           ;tmr_drv.c: 237: switch (TmrNumb)
  5166                           
  5167                           
  5168                           ;tmr_drv.c: 241: PR2 = (((UINT32)(16000000))/4)/Divisor;
  5169  0E29  0843               	movf	Tmr_TmrBPrSet@Divisor+3,w
  5170  0E2A  00A3               	movwf	___lldiv@divisor+3
  5171  0E2B  0842               	movf	Tmr_TmrBPrSet@Divisor+2,w
  5172  0E2C  00A2               	movwf	___lldiv@divisor+2
  5173  0E2D  0841               	movf	Tmr_TmrBPrSet@Divisor+1,w
  5174  0E2E  00A1               	movwf	___lldiv@divisor+1
  5175  0E2F  0840               	movf	Tmr_TmrBPrSet@Divisor,w
  5176  0E30  00A0               	movwf	___lldiv@divisor
  5177  0E31  3000               	movlw	0
  5178  0E32  00A7               	movwf	___lldiv@dividend+3
  5179  0E33  303D               	movlw	61
  5180  0E34  00A6               	movwf	___lldiv@dividend+2
  5181  0E35  3009               	movlw	9
  5182  0E36  00A5               	movwf	___lldiv@dividend+1
  5183  0E37  3000               	movlw	0
  5184  0E38  00A4               	movwf	___lldiv@dividend
  5185  0E39  3197  27AD  318D   	fcall	___lldiv
  5186  0E3C  0020               	movlb	0	; select bank0
  5187  0E3D  0820               	movf	?___lldiv,w
  5188  0E3E  009B               	movwf	27	;volatile
  5189                           
  5190                           ;tmr_drv.c: 242: break;
  5191  0E3F  2E7D               	goto	l5072
  5192  0E40                     l5064:	
  5193                           ;tmr_drv.c: 244: case ((UINT8)(4)):
  5194                           
  5195                           
  5196                           ;tmr_drv.c: 246: PR4 = (((UINT32)(16000000))/4)/Divisor;
  5197  0E40  0843               	movf	Tmr_TmrBPrSet@Divisor+3,w
  5198  0E41  00A3               	movwf	___lldiv@divisor+3
  5199  0E42  0842               	movf	Tmr_TmrBPrSet@Divisor+2,w
  5200  0E43  00A2               	movwf	___lldiv@divisor+2
  5201  0E44  0841               	movf	Tmr_TmrBPrSet@Divisor+1,w
  5202  0E45  00A1               	movwf	___lldiv@divisor+1
  5203  0E46  0840               	movf	Tmr_TmrBPrSet@Divisor,w
  5204  0E47  00A0               	movwf	___lldiv@divisor
  5205  0E48  3000               	movlw	0
  5206  0E49  00A7               	movwf	___lldiv@dividend+3
  5207  0E4A  303D               	movlw	61
  5208  0E4B  00A6               	movwf	___lldiv@dividend+2
  5209  0E4C  3009               	movlw	9
  5210  0E4D  00A5               	movwf	___lldiv@dividend+1
  5211  0E4E  3000               	movlw	0
  5212  0E4F  00A4               	movwf	___lldiv@dividend
  5213  0E50  3197  27AD  318D   	fcall	___lldiv
  5214  0E53  0020               	movlb	0	; select bank0
  5215  0E54  0820               	movf	?___lldiv,w
  5216  0E55  0028               	movlb	8	; select bank8
  5217  0E56  0096               	movwf	22	;volatile
  5218                           
  5219                           ;tmr_drv.c: 247: break;
  5220  0E57  2E7D               	goto	l5072
  5221  0E58                     l5066:	
  5222                           ;tmr_drv.c: 249: case ((UINT8)(6)):
  5223                           
  5224                           
  5225                           ;tmr_drv.c: 251: PR6 = (((UINT32)(16000000))/4)/Divisor;
  5226  0E58  0020               	movlb	0	; select bank0
  5227  0E59  0843               	movf	Tmr_TmrBPrSet@Divisor+3,w
  5228  0E5A  00A3               	movwf	___lldiv@divisor+3
  5229  0E5B  0842               	movf	Tmr_TmrBPrSet@Divisor+2,w
  5230  0E5C  00A2               	movwf	___lldiv@divisor+2
  5231  0E5D  0841               	movf	Tmr_TmrBPrSet@Divisor+1,w
  5232  0E5E  00A1               	movwf	___lldiv@divisor+1
  5233  0E5F  0840               	movf	Tmr_TmrBPrSet@Divisor,w
  5234  0E60  00A0               	movwf	___lldiv@divisor
  5235  0E61  3000               	movlw	0
  5236  0E62  00A7               	movwf	___lldiv@dividend+3
  5237  0E63  303D               	movlw	61
  5238  0E64  00A6               	movwf	___lldiv@dividend+2
  5239  0E65  3009               	movlw	9
  5240  0E66  00A5               	movwf	___lldiv@dividend+1
  5241  0E67  3000               	movlw	0
  5242  0E68  00A4               	movwf	___lldiv@dividend
  5243  0E69  3197  27AD  318D   	fcall	___lldiv
  5244  0E6C  0020               	movlb	0	; select bank0
  5245  0E6D  0820               	movf	?___lldiv,w
  5246  0E6E  0028               	movlb	8	; select bank8
  5247  0E6F  009D               	movwf	29	;volatile
  5248                           
  5249                           ;tmr_drv.c: 256: }
  5250                           
  5251                           ;tmr_drv.c: 255: break;
  5252                           
  5253                           ;tmr_drv.c: 254: default:
  5254                           
  5255                           ;tmr_drv.c: 252: break;
  5256  0E70  2E7D               	goto	l5072
  5257  0E71                     l5070:	
  5258  0E71  0020               	movlb	0	; select bank0
  5259  0E72  083E               	movf	Tmr_TmrBPrSet@TmrNumb,w
  5260                           
  5261                           ; Switch size 1, requested type "space"
  5262                           ; Number of cases is 3, Range of values is 2 to 6
  5263                           ; switch strategies available:
  5264                           ; Name         Instructions Cycles
  5265                           ; simple_byte           10     6 (average)
  5266                           ; direct_byte           19     9 (fixed)
  5267                           ; jumptable            263     9 (fixed)
  5268                           ;	Chosen strategy is simple_byte
  5269  0E73  3A02               	xorlw	2	; case 2
  5270  0E74  1903               	skipnz
  5271  0E75  2E29               	goto	l5062
  5272  0E76  3A06               	xorlw	6	; case 4
  5273  0E77  1903               	skipnz
  5274  0E78  2E40               	goto	l5064
  5275  0E79  3A02               	xorlw	2	; case 6
  5276  0E7A  1903               	skipnz
  5277  0E7B  2E58               	goto	l5066
  5278  0E7C  2E7D               	goto	l5072
  5279  0E7D                     l5072:	
  5280                           
  5281                           ;tmr_drv.c: 259: TmrBPrCfgSts = CfgOk;
  5282  0E7D  0020               	movlb	0	; select bank0
  5283  0E7E  01BF               	clrf	Tmr_TmrBPrSet@TmrBPrCfgSts
  5284                           
  5285                           ;tmr_drv.c: 260: }
  5286  0E7F  2E82               	goto	l5074
  5287  0E80                     l311:	
  5288                           
  5289                           ;tmr_drv.c: 261: else
  5290                           ;tmr_drv.c: 262: {
  5291                           ;tmr_drv.c: 264: TmrBPrCfgSts = CfgError;
  5292  0E80  01BF               	clrf	Tmr_TmrBPrSet@TmrBPrCfgSts
  5293  0E81  0ABF               	incf	Tmr_TmrBPrSet@TmrBPrCfgSts,f
  5294  0E82                     l5074:	
  5295                           
  5296                           ;tmr_drv.c: 265: }
  5297                           ;tmr_drv.c: 268: return TmrBPrCfgSts;
  5298  0E82  083F               	movf	Tmr_TmrBPrSet@TmrBPrCfgSts,w
  5299  0E83  0008               	return
  5300  0E84                     __end_of_Tmr_TmrBPrSet:	
  5301                           
  5302                           	psect	text7
  5303  163C                     __ptext7:	
  5304 ;; *************** function ___lmul *****************
  5305 ;; Defined at:
  5306 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\Umul32.c"
  5307 ;; Parameters:    Size  Location     Type
  5308 ;;  multiplier      4    6[BANK0 ] unsigned long 
  5309 ;;  multiplicand    4   10[BANK0 ] unsigned long 
  5310 ;; Auto vars:     Size  Location     Type
  5311 ;;  product         4   14[BANK0 ] unsigned long 
  5312 ;; Return value:  Size  Location     Type
  5313 ;;                  4    6[BANK0 ] unsigned long 
  5314 ;; Registers used:
  5315 ;;		wreg, status,2, status,0
  5316 ;; Tracked objects:
  5317 ;;		On entry : 0/0
  5318 ;;		On exit  : 0/0
  5319 ;;		Unchanged: 0/0
  5320 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5321 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5322 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5323 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5324 ;;      Totals:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5325 ;;Total ram usage:       12 bytes
  5326 ;; Hardware stack levels used:    1
  5327 ;; Hardware stack levels required when called:    2
  5328 ;; This function calls:
  5329 ;;		Nothing
  5330 ;; This function is called by:
  5331 ;;		_Tmr_TmrBPrSet
  5332 ;; This function uses a non-reentrant model
  5333 ;;
  5334                           
  5335                           
  5336                           ;psect for function ___lmul
  5337  163C                     ___lmul:	
  5338                           
  5339                           ;incstack = 0
  5340                           ; Regs used in ___lmul: [wreg+status,2+status,0]
  5341  163C  3000               	movlw	0
  5342  163D  0020               	movlb	0	; select bank0
  5343  163E  00B1               	movwf	___lmul@product+3
  5344  163F  3000               	movlw	0
  5345  1640  00B0               	movwf	___lmul@product+2
  5346  1641  3000               	movlw	0
  5347  1642  00AF               	movwf	___lmul@product+1
  5348  1643  3000               	movlw	0
  5349  1644  00AE               	movwf	___lmul@product
  5350  1645                     l4800:	
  5351  1645  1C26               	btfss	___lmul@multiplier,0
  5352  1646  2E4F               	goto	l4804
  5353  1647  082A               	movf	___lmul@multiplicand,w
  5354  1648  07AE               	addwf	___lmul@product,f
  5355  1649  082B               	movf	___lmul@multiplicand+1,w
  5356  164A  3DAF               	addwfc	___lmul@product+1,f
  5357  164B  082C               	movf	___lmul@multiplicand+2,w
  5358  164C  3DB0               	addwfc	___lmul@product+2,f
  5359  164D  082D               	movf	___lmul@multiplicand+3,w
  5360  164E  3DB1               	addwfc	___lmul@product+3,f
  5361  164F                     l4804:	
  5362  164F  3001               	movlw	1
  5363  1650                     u5385:	
  5364  1650  35AA               	lslf	___lmul@multiplicand,f
  5365  1651  0DAB               	rlf	___lmul@multiplicand+1,f
  5366  1652  0DAC               	rlf	___lmul@multiplicand+2,f
  5367  1653  0DAD               	rlf	___lmul@multiplicand+3,f
  5368  1654  0B89               	decfsz	9,f
  5369  1655  2E50               	goto	u5385
  5370  1656  3001               	movlw	1
  5371  1657                     u5395:	
  5372  1657  36A9               	lsrf	___lmul@multiplier+3,f
  5373  1658  0CA8               	rrf	___lmul@multiplier+2,f
  5374  1659  0CA7               	rrf	___lmul@multiplier+1,f
  5375  165A  0CA6               	rrf	___lmul@multiplier,f
  5376  165B  0B89               	decfsz	9,f
  5377  165C  2E57               	goto	u5395
  5378  165D  0829               	movf	___lmul@multiplier+3,w
  5379  165E  0428               	iorwf	___lmul@multiplier+2,w
  5380  165F  0427               	iorwf	___lmul@multiplier+1,w
  5381  1660  0426               	iorwf	___lmul@multiplier,w
  5382  1661  1D03               	skipz
  5383  1662  2E45               	goto	l4800
  5384  1663  0831               	movf	___lmul@product+3,w
  5385  1664  00A9               	movwf	?___lmul+3
  5386  1665  0830               	movf	___lmul@product+2,w
  5387  1666  00A8               	movwf	?___lmul+2
  5388  1667  082F               	movf	___lmul@product+1,w
  5389  1668  00A7               	movwf	?___lmul+1
  5390  1669  082E               	movf	___lmul@product,w
  5391  166A  00A6               	movwf	?___lmul
  5392  166B  0008               	return
  5393  166C                     __end_of___lmul:	
  5394                           
  5395                           	psect	text8
  5396  17AD                     __ptext8:	
  5397 ;; *************** function ___lldiv *****************
  5398 ;; Defined at:
  5399 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\lldiv.c"
  5400 ;; Parameters:    Size  Location     Type
  5401 ;;  divisor         4    0[BANK0 ] unsigned long 
  5402 ;;  dividend        4    4[BANK0 ] unsigned long 
  5403 ;; Auto vars:     Size  Location     Type
  5404 ;;  quotient        4    9[BANK0 ] unsigned long 
  5405 ;;  counter         1   13[BANK0 ] unsigned char 
  5406 ;; Return value:  Size  Location     Type
  5407 ;;                  4    0[BANK0 ] unsigned long 
  5408 ;; Registers used:
  5409 ;;		wreg, status,2, status,0
  5410 ;; Tracked objects:
  5411 ;;		On entry : 0/0
  5412 ;;		On exit  : 0/0
  5413 ;;		Unchanged: 0/0
  5414 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5415 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5416 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5417 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5418 ;;      Totals:         0      14       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5419 ;;Total ram usage:       14 bytes
  5420 ;; Hardware stack levels used:    1
  5421 ;; Hardware stack levels required when called:    2
  5422 ;; This function calls:
  5423 ;;		Nothing
  5424 ;; This function is called by:
  5425 ;;		_Tmr_TmrBPrSet
  5426 ;; This function uses a non-reentrant model
  5427 ;;
  5428                           
  5429                           
  5430                           ;psect for function ___lldiv
  5431  17AD                     ___lldiv:	
  5432                           
  5433                           ;incstack = 0
  5434                           ; Regs used in ___lldiv: [wreg+status,2+status,0]
  5435  17AD  3000               	movlw	0
  5436  17AE  0020               	movlb	0	; select bank0
  5437  17AF  00AC               	movwf	___lldiv@quotient+3
  5438  17B0  3000               	movlw	0
  5439  17B1  00AB               	movwf	___lldiv@quotient+2
  5440  17B2  3000               	movlw	0
  5441  17B3  00AA               	movwf	___lldiv@quotient+1
  5442  17B4  3000               	movlw	0
  5443  17B5  00A9               	movwf	___lldiv@quotient
  5444  17B6  0823               	movf	___lldiv@divisor+3,w
  5445  17B7  0422               	iorwf	___lldiv@divisor+2,w
  5446  17B8  0421               	iorwf	___lldiv@divisor+1,w
  5447  17B9  0420               	iorwf	___lldiv@divisor,w
  5448  17BA  1903               	skipnz
  5449  17BB  2FF7               	goto	l4874
  5450  17BC  01AD               	clrf	___lldiv@counter
  5451  17BD  0AAD               	incf	___lldiv@counter,f
  5452  17BE                     l4860:	
  5453  17BE  1BA3               	btfsc	___lldiv@divisor+3,7
  5454  17BF  2FCC               	goto	l4862
  5455  17C0  3001               	movlw	1
  5456  17C1                     u5505:	
  5457  17C1  35A0               	lslf	___lldiv@divisor,f
  5458  17C2  0DA1               	rlf	___lldiv@divisor+1,f
  5459  17C3  0DA2               	rlf	___lldiv@divisor+2,f
  5460  17C4  0DA3               	rlf	___lldiv@divisor+3,f
  5461  17C5  0B89               	decfsz	9,f
  5462  17C6  2FC1               	goto	u5505
  5463  17C7  3001               	movlw	1
  5464  17C8  00A8               	movwf	??___lldiv
  5465  17C9  0828               	movf	??___lldiv,w
  5466  17CA  07AD               	addwf	___lldiv@counter,f
  5467  17CB  2FBE               	goto	l4860
  5468  17CC                     l4862:	
  5469  17CC  3001               	movlw	1
  5470  17CD                     u5525:	
  5471  17CD  35A9               	lslf	___lldiv@quotient,f
  5472  17CE  0DAA               	rlf	___lldiv@quotient+1,f
  5473  17CF  0DAB               	rlf	___lldiv@quotient+2,f
  5474  17D0  0DAC               	rlf	___lldiv@quotient+3,f
  5475  17D1  0B89               	decfsz	9,f
  5476  17D2  2FCD               	goto	u5525
  5477  17D3  0823               	movf	___lldiv@divisor+3,w
  5478  17D4  0227               	subwf	___lldiv@dividend+3,w
  5479  17D5  1D03               	skipz
  5480  17D6  2FE1               	goto	u5535
  5481  17D7  0822               	movf	___lldiv@divisor+2,w
  5482  17D8  0226               	subwf	___lldiv@dividend+2,w
  5483  17D9  1D03               	skipz
  5484  17DA  2FE1               	goto	u5535
  5485  17DB  0821               	movf	___lldiv@divisor+1,w
  5486  17DC  0225               	subwf	___lldiv@dividend+1,w
  5487  17DD  1D03               	skipz
  5488  17DE  2FE1               	goto	u5535
  5489  17DF  0820               	movf	___lldiv@divisor,w
  5490  17E0  0224               	subwf	___lldiv@dividend,w
  5491  17E1                     u5535:	
  5492  17E1  1C03               	skipc
  5493  17E2  2FEC               	goto	l4870
  5494  17E3  0820               	movf	___lldiv@divisor,w
  5495  17E4  02A4               	subwf	___lldiv@dividend,f
  5496  17E5  0821               	movf	___lldiv@divisor+1,w
  5497  17E6  3BA5               	subwfb	___lldiv@dividend+1,f
  5498  17E7  0822               	movf	___lldiv@divisor+2,w
  5499  17E8  3BA6               	subwfb	___lldiv@dividend+2,f
  5500  17E9  0823               	movf	___lldiv@divisor+3,w
  5501  17EA  3BA7               	subwfb	___lldiv@dividend+3,f
  5502  17EB  1429               	bsf	___lldiv@quotient,0
  5503  17EC                     l4870:	
  5504  17EC  3001               	movlw	1
  5505  17ED                     u5545:	
  5506  17ED  36A3               	lsrf	___lldiv@divisor+3,f
  5507  17EE  0CA2               	rrf	___lldiv@divisor+2,f
  5508  17EF  0CA1               	rrf	___lldiv@divisor+1,f
  5509  17F0  0CA0               	rrf	___lldiv@divisor,f
  5510  17F1  0B89               	decfsz	9,f
  5511  17F2  2FED               	goto	u5545
  5512  17F3  3001               	movlw	1
  5513  17F4  02AD               	subwf	___lldiv@counter,f
  5514  17F5  1D03               	btfss	3,2
  5515  17F6  2FCC               	goto	l4862
  5516  17F7                     l4874:	
  5517  17F7  082C               	movf	___lldiv@quotient+3,w
  5518  17F8  00A3               	movwf	?___lldiv+3
  5519  17F9  082B               	movf	___lldiv@quotient+2,w
  5520  17FA  00A2               	movwf	?___lldiv+2
  5521  17FB  082A               	movf	___lldiv@quotient+1,w
  5522  17FC  00A1               	movwf	?___lldiv+1
  5523  17FD  0829               	movf	___lldiv@quotient,w
  5524  17FE  00A0               	movwf	?___lldiv
  5525  17FF  0008               	return
  5526  1800                     __end_of___lldiv:	
  5527                           
  5528                           	psect	text9
  5529  15BB                     __ptext9:	
  5530 ;; *************** function _Tmr_TmrBIrqSet *****************
  5531 ;; Defined at:
  5532 ;;		line 182 in file "../../../../../Framework/MercuryFwk/Source/c/01_Hal/02_Drv/tmr_drv.c"
  5533 ;; Parameters:    Size  Location     Type
  5534 ;;  TmrNumb         1    wreg     unsigned char 
  5535 ;;  TmrIrqSts       1    0[BANK0 ] unsigned char 
  5536 ;; Auto vars:     Size  Location     Type
  5537 ;;  TmrNumb         1    1[BANK0 ] unsigned char 
  5538 ;; Return value:  Size  Location     Type
  5539 ;;                  1    wreg      void 
  5540 ;; Registers used:
  5541 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  5542 ;; Tracked objects:
  5543 ;;		On entry : 0/0
  5544 ;;		On exit  : 0/0
  5545 ;;		Unchanged: 0/0
  5546 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5547 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5548 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5549 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5550 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5551 ;;Total ram usage:        2 bytes
  5552 ;; Hardware stack levels used:    1
  5553 ;; Hardware stack levels required when called:    2
  5554 ;; This function calls:
  5555 ;;		Nothing
  5556 ;; This function is called by:
  5557 ;;		_Tmr_TmrBConfig
  5558 ;; This function uses a non-reentrant model
  5559 ;;
  5560                           
  5561                           
  5562                           ;psect for function _Tmr_TmrBIrqSet
  5563  15BB                     _Tmr_TmrBIrqSet:	
  5564                           
  5565                           ;incstack = 0
  5566                           ; Regs used in _Tmr_TmrBIrqSet: [wreg-fsr0h+status,2+status,0]
  5567                           ;Tmr_TmrBIrqSet@TmrNumb stored from wreg
  5568  15BB  0020               	movlb	0	; select bank0
  5569  15BC  00A1               	movwf	Tmr_TmrBIrqSet@TmrNumb
  5570                           
  5571                           ;tmr_drv.c: 185: switch (TmrNumb)
  5572  15BD  2DD6               	goto	l5052
  5573  15BE                     l303:	
  5574                           ;tmr_drv.c: 186: {
  5575                           ;tmr_drv.c: 187: case ((UINT8)(2)):
  5576                           
  5577                           
  5578                           ;tmr_drv.c: 189: PIR1bits.TMR2IF = 0u;
  5579  15BE  1091               	bcf	17,1	;volatile
  5580                           
  5581                           ;tmr_drv.c: 191: PIE1bits.TMR2IE = TmrIrqSts;
  5582  15BF  0C20               	rrf	Tmr_TmrBIrqSet@TmrIrqSts,w
  5583  15C0  0021               	movlb	1	; select bank1
  5584  15C1  1C03               	skipc
  5585  15C2  1091               	bcf	17,1	;volatile
  5586  15C3  1803               	skipnc
  5587  15C4  1491               	bsf	17,1	;volatile
  5588                           
  5589                           ;tmr_drv.c: 192: break;
  5590  15C5  0008               	return
  5591  15C6                     l305:	
  5592                           ;tmr_drv.c: 194: case ((UINT8)(4)):
  5593                           
  5594                           
  5595                           ;tmr_drv.c: 196: PIR3bits.TMR4IF = 0u;
  5596  15C6  1093               	bcf	19,1	;volatile
  5597                           
  5598                           ;tmr_drv.c: 198: PIE3bits.TMR4IE = TmrIrqSts;
  5599  15C7  0C20               	rrf	Tmr_TmrBIrqSet@TmrIrqSts,w
  5600  15C8  0021               	movlb	1	; select bank1
  5601  15C9  1C03               	skipc
  5602  15CA  1093               	bcf	19,1	;volatile
  5603  15CB  1803               	skipnc
  5604  15CC  1493               	bsf	19,1	;volatile
  5605                           
  5606                           ;tmr_drv.c: 199: break;
  5607  15CD  0008               	return
  5608  15CE                     l306:	
  5609                           ;tmr_drv.c: 201: case ((UINT8)(6)):
  5610                           
  5611                           
  5612                           ;tmr_drv.c: 203: PIR3bits.TMR6IF = 0u;
  5613  15CE  1193               	bcf	19,3	;volatile
  5614                           
  5615                           ;tmr_drv.c: 205: PIE3bits.TMR6IE = TmrIrqSts;
  5616  15CF  0C20               	rrf	Tmr_TmrBIrqSet@TmrIrqSts,w
  5617  15D0  0021               	movlb	1	; select bank1
  5618  15D1  1C03               	skipc
  5619  15D2  1193               	bcf	19,3	;volatile
  5620  15D3  1803               	skipnc
  5621  15D4  1593               	bsf	19,3	;volatile
  5622                           
  5623                           ;tmr_drv.c: 210: }
  5624                           
  5625                           ;tmr_drv.c: 209: break;
  5626                           
  5627                           ;tmr_drv.c: 208: default:
  5628                           
  5629                           ;tmr_drv.c: 206: break;
  5630  15D5  0008               	return
  5631  15D6                     l5052:	
  5632  15D6  0020               	movlb	0	; select bank0
  5633  15D7  0821               	movf	Tmr_TmrBIrqSet@TmrNumb,w
  5634                           
  5635                           ; Switch size 1, requested type "space"
  5636                           ; Number of cases is 3, Range of values is 2 to 6
  5637                           ; switch strategies available:
  5638                           ; Name         Instructions Cycles
  5639                           ; simple_byte           10     6 (average)
  5640                           ; direct_byte           19     9 (fixed)
  5641                           ; jumptable            263     9 (fixed)
  5642                           ;	Chosen strategy is simple_byte
  5643  15D8  3A02               	xorlw	2	; case 2
  5644  15D9  1903               	skipnz
  5645  15DA  2DBE               	goto	l303
  5646  15DB  3A06               	xorlw	6	; case 4
  5647  15DC  1903               	skipnz
  5648  15DD  2DC6               	goto	l305
  5649  15DE  3A02               	xorlw	2	; case 6
  5650  15DF  1903               	skipnz
  5651  15E0  2DCE               	goto	l306
  5652  15E1  2DE2               	goto	l308
  5653  15E2                     l308:	
  5654  15E2  0008               	return
  5655  15E3                     __end_of_Tmr_TmrBIrqSet:	
  5656                           
  5657                           	psect	text10
  5658  147D                     __ptext10:	
  5659 ;; *************** function _Tmr_StartTmr *****************
  5660 ;; Defined at:
  5661 ;;		line 279 in file "../../../../../Framework/MercuryFwk/Source/c/01_Hal/02_Drv/tmr_drv.c"
  5662 ;; Parameters:    Size  Location     Type
  5663 ;;  TmrNumb         1    wreg     unsigned char 
  5664 ;; Auto vars:     Size  Location     Type
  5665 ;;  TmrNumb         1    0[BANK0 ] unsigned char 
  5666 ;; Return value:  Size  Location     Type
  5667 ;;                  1    wreg      void 
  5668 ;; Registers used:
  5669 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  5670 ;; Tracked objects:
  5671 ;;		On entry : 0/0
  5672 ;;		On exit  : 0/0
  5673 ;;		Unchanged: 0/0
  5674 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5675 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5676 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5677 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5678 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5679 ;;Total ram usage:        1 bytes
  5680 ;; Hardware stack levels used:    1
  5681 ;; Hardware stack levels required when called:    2
  5682 ;; This function calls:
  5683 ;;		Nothing
  5684 ;; This function is called by:
  5685 ;;		_Tmr_TmrBConfig
  5686 ;; This function uses a non-reentrant model
  5687 ;;
  5688                           
  5689                           
  5690                           ;psect for function _Tmr_StartTmr
  5691  147D                     _Tmr_StartTmr:	
  5692                           
  5693                           ;incstack = 0
  5694                           ; Regs used in _Tmr_StartTmr: [wreg-fsr0h+status,2+status,0]
  5695                           ;Tmr_StartTmr@TmrNumb stored from wreg
  5696  147D  0020               	movlb	0	; select bank0
  5697  147E  00A0               	movwf	Tmr_StartTmr@TmrNumb
  5698                           
  5699                           ;tmr_drv.c: 282: switch (TmrNumb)
  5700  147F  2C88               	goto	l5082
  5701  1480                     l323:	
  5702                           ;tmr_drv.c: 283: {
  5703                           ;tmr_drv.c: 284: case ((UINT8)(2)):
  5704                           
  5705                           
  5706                           ;tmr_drv.c: 286: T2CONbits.TMR2ON = 1u;
  5707  1480  151C               	bsf	28,2	;volatile
  5708                           
  5709                           ;tmr_drv.c: 287: break;
  5710  1481  0008               	return
  5711  1482                     l325:	
  5712                           ;tmr_drv.c: 289: case ((UINT8)(4)):
  5713                           
  5714                           
  5715                           ;tmr_drv.c: 291: T4CONbits.TMR4ON = 1u;
  5716  1482  0028               	movlb	8	; select bank8
  5717  1483  1517               	bsf	23,2	;volatile
  5718                           
  5719                           ;tmr_drv.c: 292: break;
  5720  1484  0008               	return
  5721  1485                     l326:	
  5722                           ;tmr_drv.c: 294: case ((UINT8)(6)):
  5723                           
  5724                           
  5725                           ;tmr_drv.c: 296: T6CONbits.TMR6ON = 1u;
  5726  1485  0028               	movlb	8	; select bank8
  5727  1486  151E               	bsf	30,2	;volatile
  5728                           
  5729                           ;tmr_drv.c: 301: }
  5730                           
  5731                           ;tmr_drv.c: 300: break;
  5732                           
  5733                           ;tmr_drv.c: 299: default:
  5734                           
  5735                           ;tmr_drv.c: 297: break;
  5736  1487  0008               	return
  5737  1488                     l5082:	
  5738  1488  0020               	movlb	0	; select bank0
  5739  1489  0820               	movf	Tmr_StartTmr@TmrNumb,w
  5740                           
  5741                           ; Switch size 1, requested type "space"
  5742                           ; Number of cases is 3, Range of values is 2 to 6
  5743                           ; switch strategies available:
  5744                           ; Name         Instructions Cycles
  5745                           ; simple_byte           10     6 (average)
  5746                           ; direct_byte           19     9 (fixed)
  5747                           ; jumptable            263     9 (fixed)
  5748                           ;	Chosen strategy is simple_byte
  5749  148A  3A02               	xorlw	2	; case 2
  5750  148B  1903               	skipnz
  5751  148C  2C80               	goto	l323
  5752  148D  3A06               	xorlw	6	; case 4
  5753  148E  1903               	skipnz
  5754  148F  2C82               	goto	l325
  5755  1490  3A02               	xorlw	2	; case 6
  5756  1491  1903               	skipnz
  5757  1492  2C85               	goto	l326
  5758  1493  2C94               	goto	l328
  5759  1494                     l328:	
  5760  1494  0008               	return
  5761  1495                     __end_of_Tmr_StartTmr:	
  5762                           
  5763                           	psect	text11
  5764  09D8                     __ptext11:	
  5765 ;; *************** function _TmrBInit *****************
  5766 ;; Defined at:
  5767 ;;		line 72 in file "../../../../../Framework/MercuryFwk/Source/c/01_Hal/02_Drv/tmr_drv.c"
  5768 ;; Parameters:    Size  Location     Type
  5769 ;;  TmrNumb         1    wreg     unsigned char 
  5770 ;;  Prescaler       1    0[BANK0 ] unsigned char 
  5771 ;;  Postscaler      1    1[BANK0 ] unsigned char 
  5772 ;; Auto vars:     Size  Location     Type
  5773 ;;  TmrNumb         1    3[BANK0 ] unsigned char 
  5774 ;; Return value:  Size  Location     Type
  5775 ;;                  1    wreg      void 
  5776 ;; Registers used:
  5777 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  5778 ;; Tracked objects:
  5779 ;;		On entry : 0/0
  5780 ;;		On exit  : 0/0
  5781 ;;		Unchanged: 0/0
  5782 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5783 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5784 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5785 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5786 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5787 ;;Total ram usage:        4 bytes
  5788 ;; Hardware stack levels used:    1
  5789 ;; Hardware stack levels required when called:    2
  5790 ;; This function calls:
  5791 ;;		Nothing
  5792 ;; This function is called by:
  5793 ;;		_Tmr_TmrBConfig
  5794 ;; This function uses a non-reentrant model
  5795 ;;
  5796                           
  5797                           
  5798                           ;psect for function _TmrBInit
  5799  09D8                     _TmrBInit:	
  5800                           
  5801                           ;incstack = 0
  5802                           ; Regs used in _TmrBInit: [wreg-fsr0h+status,2+status,0]
  5803                           ;TmrBInit@TmrNumb stored from wreg
  5804  09D8  0020               	movlb	0	; select bank0
  5805  09D9  00A3               	movwf	TmrBInit@TmrNumb
  5806                           
  5807                           ;tmr_drv.c: 75: switch (TmrNumb)
  5808  09DA  2A48               	goto	l5040
  5809  09DB                     l278:	
  5810                           ;tmr_drv.c: 80: {
  5811                           ;tmr_drv.c: 81: case ((UINT8)(1)):
  5812                           
  5813                           ;tmr_drv.c: 79: switch (Prescaler)
  5814                           
  5815                           ;tmr_drv.c: 76: {
  5816                           ;tmr_drv.c: 77: case ((UINT8)(2)):
  5817                           
  5818                           
  5819                           ;tmr_drv.c: 83: T2CONbits.T2CKPS0 = 0u;
  5820  09DB  101C               	bcf	28,0	;volatile
  5821  09DC  29DE               	goto	L2
  5822  09DD                     l280:	
  5823                           ;tmr_drv.c: 87: case ((UINT8)(4)):
  5824                           
  5825                           ;tmr_drv.c: 85: break;
  5826                           
  5827                           ;tmr_drv.c: 84: T2CONbits.T2CKPS1 = 0u;
  5828                           
  5829                           
  5830                           ;tmr_drv.c: 89: T2CONbits.T2CKPS0 = 1u;
  5831  09DD  141C               	bsf	28,0	;volatile
  5832  09DE                     L2:	
  5833                           
  5834                           ;tmr_drv.c: 90: T2CONbits.T2CKPS1 = 0u;
  5835  09DE  109C               	bcf	28,1	;volatile
  5836                           
  5837                           ;tmr_drv.c: 91: break;
  5838  09DF  29EE               	goto	l5024
  5839  09E0                     l281:	
  5840                           ;tmr_drv.c: 93: case ((UINT8)(16)):
  5841                           
  5842                           
  5843                           ;tmr_drv.c: 94: T2CONbits.T2CKPS0 = 0u;
  5844  09E0  101C               	bcf	28,0	;volatile
  5845                           
  5846                           ;tmr_drv.c: 95: T2CONbits.T2CKPS1 = 1u;
  5847  09E1  149C               	bsf	28,1	;volatile
  5848                           
  5849                           ;tmr_drv.c: 100: }
  5850                           
  5851                           ;tmr_drv.c: 99: break;
  5852                           
  5853                           ;tmr_drv.c: 98: default:
  5854                           
  5855                           ;tmr_drv.c: 96: break;
  5856  09E2  29EE               	goto	l5024
  5857  09E3                     l5022:	
  5858  09E3  0820               	movf	TmrBInit@Prescaler,w
  5859                           
  5860                           ; Switch size 1, requested type "space"
  5861                           ; Number of cases is 3, Range of values is 1 to 16
  5862                           ; switch strategies available:
  5863                           ; Name         Instructions Cycles
  5864                           ; simple_byte           10     6 (average)
  5865                           ; direct_byte           41     9 (fixed)
  5866                           ; jumptable            263     9 (fixed)
  5867                           ;	Chosen strategy is simple_byte
  5868  09E4  3A01               	xorlw	1	; case 1
  5869  09E5  1903               	skipnz
  5870  09E6  29DB               	goto	l278
  5871  09E7  3A05               	xorlw	5	; case 4
  5872  09E8  1903               	skipnz
  5873  09E9  29DD               	goto	l280
  5874  09EA  3A14               	xorlw	20	; case 16
  5875  09EB  1903               	skipnz
  5876  09EC  29E0               	goto	l281
  5877  09ED  29EE               	goto	l5024
  5878  09EE                     l5024:	
  5879                           
  5880                           ;tmr_drv.c: 103: T2CONbits.T2OUTPS = (Postscaler - 1);
  5881  09EE  0821               	movf	TmrBInit@Postscaler,w
  5882  09EF  3EFF               	addlw	255
  5883  09F0  00A2               	movwf	??_TmrBInit
  5884  09F1  0DA2               	rlf	??_TmrBInit,f
  5885  09F2  0DA2               	rlf	??_TmrBInit,f
  5886  09F3  0DA2               	rlf	??_TmrBInit,f
  5887  09F4  081C               	movf	28,w	;volatile
  5888  09F5  0622               	xorwf	??_TmrBInit,w
  5889  09F6  3987               	andlw	-121
  5890  09F7  0622               	xorwf	??_TmrBInit,w
  5891  09F8  009C               	movwf	28	;volatile
  5892                           
  5893                           ;tmr_drv.c: 104: break;
  5894  09F9  0008               	return
  5895  09FA                     l286:	
  5896                           ;tmr_drv.c: 109: {
  5897                           ;tmr_drv.c: 110: case ((UINT8)(1)):
  5898                           
  5899                           ;tmr_drv.c: 108: switch (Prescaler)
  5900                           
  5901                           ;tmr_drv.c: 106: case ((UINT8)(4)):
  5902                           
  5903                           
  5904                           ;tmr_drv.c: 112: T4CONbits.T4CKPS0 = 0u;
  5905  09FA  0028               	movlb	8	; select bank8
  5906  09FB  1017               	bcf	23,0	;volatile
  5907  09FC  29FF               	goto	L3
  5908  09FD                     l288:	
  5909                           ;tmr_drv.c: 116: case ((UINT8)(4)):
  5910                           
  5911                           ;tmr_drv.c: 114: break;
  5912                           
  5913                           ;tmr_drv.c: 113: T4CONbits.T4CKPS1 = 0u;
  5914                           
  5915                           
  5916                           ;tmr_drv.c: 118: T4CONbits.T4CKPS0 = 1u;
  5917  09FD  0028               	movlb	8	; select bank8
  5918  09FE  1417               	bsf	23,0	;volatile
  5919  09FF                     L3:	
  5920                           
  5921                           ;tmr_drv.c: 119: T4CONbits.T4CKPS1 = 0u;
  5922  09FF  1097               	bcf	23,1	;volatile
  5923                           
  5924                           ;tmr_drv.c: 120: break;
  5925  0A00  2A11               	goto	l5030
  5926  0A01                     l289:	
  5927                           ;tmr_drv.c: 122: case ((UINT8)(16)):
  5928                           
  5929                           
  5930                           ;tmr_drv.c: 123: T4CONbits.T4CKPS0 = 0u;
  5931  0A01  0028               	movlb	8	; select bank8
  5932  0A02  1017               	bcf	23,0	;volatile
  5933                           
  5934                           ;tmr_drv.c: 124: T4CONbits.T4CKPS1 = 1u;
  5935  0A03  1497               	bsf	23,1	;volatile
  5936                           
  5937                           ;tmr_drv.c: 129: }
  5938                           
  5939                           ;tmr_drv.c: 128: break;
  5940                           
  5941                           ;tmr_drv.c: 127: default:
  5942                           
  5943                           ;tmr_drv.c: 125: break;
  5944  0A04  2A11               	goto	l5030
  5945  0A05                     l5028:	
  5946  0A05  0020               	movlb	0	; select bank0
  5947  0A06  0820               	movf	TmrBInit@Prescaler,w
  5948                           
  5949                           ; Switch size 1, requested type "space"
  5950                           ; Number of cases is 3, Range of values is 1 to 16
  5951                           ; switch strategies available:
  5952                           ; Name         Instructions Cycles
  5953                           ; simple_byte           10     6 (average)
  5954                           ; direct_byte           41     9 (fixed)
  5955                           ; jumptable            263     9 (fixed)
  5956                           ;	Chosen strategy is simple_byte
  5957  0A07  3A01               	xorlw	1	; case 1
  5958  0A08  1903               	skipnz
  5959  0A09  29FA               	goto	l286
  5960  0A0A  3A05               	xorlw	5	; case 4
  5961  0A0B  1903               	skipnz
  5962  0A0C  29FD               	goto	l288
  5963  0A0D  3A14               	xorlw	20	; case 16
  5964  0A0E  1903               	skipnz
  5965  0A0F  2A01               	goto	l289
  5966  0A10  2A11               	goto	l5030
  5967  0A11                     l5030:	
  5968                           
  5969                           ;tmr_drv.c: 132: T4CONbits.T4OUTPS = (Postscaler - 1);
  5970  0A11  0020               	movlb	0	; select bank0
  5971  0A12  0821               	movf	TmrBInit@Postscaler,w
  5972  0A13  3EFF               	addlw	255
  5973  0A14  00A2               	movwf	??_TmrBInit
  5974  0A15  0DA2               	rlf	??_TmrBInit,f
  5975  0A16  0DA2               	rlf	??_TmrBInit,f
  5976  0A17  0DA2               	rlf	??_TmrBInit,f
  5977  0A18  0028               	movlb	8	; select bank8
  5978  0A19  0817               	movf	23,w	;volatile
  5979  0A1A  0020               	movlb	0	; select bank0
  5980  0A1B  0622               	xorwf	??_TmrBInit,w
  5981  0A1C  3987               	andlw	-121
  5982  0A1D  0622               	xorwf	??_TmrBInit,w
  5983  0A1E  0028               	movlb	8	; select bank8
  5984  0A1F  0097               	movwf	23	;volatile
  5985                           
  5986                           ;tmr_drv.c: 133: break;
  5987  0A20  0008               	return
  5988  0A21                     l293:	
  5989                           ;tmr_drv.c: 138: {
  5990                           ;tmr_drv.c: 139: case ((UINT8)(1)):
  5991                           
  5992                           ;tmr_drv.c: 137: switch (Prescaler)
  5993                           
  5994                           ;tmr_drv.c: 135: case ((UINT8)(6)):
  5995                           
  5996                           
  5997                           ;tmr_drv.c: 141: T6CONbits.T6CKPS0 = 0u;
  5998  0A21  0028               	movlb	8	; select bank8
  5999  0A22  101E               	bcf	30,0	;volatile
  6000  0A23  2A26               	goto	L4
  6001  0A24                     l295:	
  6002                           ;tmr_drv.c: 145: case ((UINT8)(4)):
  6003                           
  6004                           ;tmr_drv.c: 143: break;
  6005                           
  6006                           ;tmr_drv.c: 142: T6CONbits.T6CKPS1 = 0u;
  6007                           
  6008                           
  6009                           ;tmr_drv.c: 147: T6CONbits.T6CKPS0 = 1u;
  6010  0A24  0028               	movlb	8	; select bank8
  6011  0A25  141E               	bsf	30,0	;volatile
  6012  0A26                     L4:	
  6013                           
  6014                           ;tmr_drv.c: 148: T6CONbits.T6CKPS1 = 0u;
  6015  0A26  109E               	bcf	30,1	;volatile
  6016                           
  6017                           ;tmr_drv.c: 149: break;
  6018  0A27  2A38               	goto	l5036
  6019  0A28                     l296:	
  6020                           ;tmr_drv.c: 151: case ((UINT8)(16)):
  6021                           
  6022                           
  6023                           ;tmr_drv.c: 152: T6CONbits.T6CKPS0 = 0u;
  6024  0A28  0028               	movlb	8	; select bank8
  6025  0A29  101E               	bcf	30,0	;volatile
  6026                           
  6027                           ;tmr_drv.c: 153: T6CONbits.T6CKPS1 = 1u;
  6028  0A2A  149E               	bsf	30,1	;volatile
  6029                           
  6030                           ;tmr_drv.c: 158: }
  6031                           
  6032                           ;tmr_drv.c: 157: break;
  6033                           
  6034                           ;tmr_drv.c: 156: default:
  6035                           
  6036                           ;tmr_drv.c: 154: break;
  6037  0A2B  2A38               	goto	l5036
  6038  0A2C                     l5034:	
  6039  0A2C  0020               	movlb	0	; select bank0
  6040  0A2D  0820               	movf	TmrBInit@Prescaler,w
  6041                           
  6042                           ; Switch size 1, requested type "space"
  6043                           ; Number of cases is 3, Range of values is 1 to 16
  6044                           ; switch strategies available:
  6045                           ; Name         Instructions Cycles
  6046                           ; simple_byte           10     6 (average)
  6047                           ; direct_byte           41     9 (fixed)
  6048                           ; jumptable            263     9 (fixed)
  6049                           ;	Chosen strategy is simple_byte
  6050  0A2E  3A01               	xorlw	1	; case 1
  6051  0A2F  1903               	skipnz
  6052  0A30  2A21               	goto	l293
  6053  0A31  3A05               	xorlw	5	; case 4
  6054  0A32  1903               	skipnz
  6055  0A33  2A24               	goto	l295
  6056  0A34  3A14               	xorlw	20	; case 16
  6057  0A35  1903               	skipnz
  6058  0A36  2A28               	goto	l296
  6059  0A37  2A38               	goto	l5036
  6060  0A38                     l5036:	
  6061                           
  6062                           ;tmr_drv.c: 161: T6CONbits.T6OUTPS = (Postscaler - 1);
  6063  0A38  0020               	movlb	0	; select bank0
  6064  0A39  0821               	movf	TmrBInit@Postscaler,w
  6065  0A3A  3EFF               	addlw	255
  6066  0A3B  00A2               	movwf	??_TmrBInit
  6067  0A3C  0DA2               	rlf	??_TmrBInit,f
  6068  0A3D  0DA2               	rlf	??_TmrBInit,f
  6069  0A3E  0DA2               	rlf	??_TmrBInit,f
  6070  0A3F  0028               	movlb	8	; select bank8
  6071  0A40  081E               	movf	30,w	;volatile
  6072  0A41  0020               	movlb	0	; select bank0
  6073  0A42  0622               	xorwf	??_TmrBInit,w
  6074  0A43  3987               	andlw	-121
  6075  0A44  0622               	xorwf	??_TmrBInit,w
  6076  0A45  0028               	movlb	8	; select bank8
  6077  0A46  009E               	movwf	30	;volatile
  6078                           
  6079                           ;tmr_drv.c: 166: }
  6080                           
  6081                           ;tmr_drv.c: 165: break;
  6082                           
  6083                           ;tmr_drv.c: 164: default:
  6084                           
  6085                           ;tmr_drv.c: 162: break;
  6086  0A47  0008               	return
  6087  0A48                     l5040:	
  6088  0A48  0020               	movlb	0	; select bank0
  6089  0A49  0823               	movf	TmrBInit@TmrNumb,w
  6090                           
  6091                           ; Switch size 1, requested type "space"
  6092                           ; Number of cases is 3, Range of values is 2 to 6
  6093                           ; switch strategies available:
  6094                           ; Name         Instructions Cycles
  6095                           ; simple_byte           10     6 (average)
  6096                           ; direct_byte           19     9 (fixed)
  6097                           ; jumptable            263     9 (fixed)
  6098                           ;	Chosen strategy is simple_byte
  6099  0A4A  3A02               	xorlw	2	; case 2
  6100  0A4B  1903               	skipnz
  6101  0A4C  29E3               	goto	l5022
  6102  0A4D  3A06               	xorlw	6	; case 4
  6103  0A4E  1903               	skipnz
  6104  0A4F  2A05               	goto	l5028
  6105  0A50  3A02               	xorlw	2	; case 6
  6106  0A51  1903               	skipnz
  6107  0A52  2A2C               	goto	l5034
  6108  0A53  2A54               	goto	l299
  6109  0A54                     l299:	
  6110  0A54  0008               	return
  6111  0A55                     __end_of_TmrBInit:	
  6112                           
  6113                           	psect	text12
  6114  13F7                     __ptext12:	
  6115 ;; *************** function _MainScheduler *****************
  6116 ;; Defined at:
  6117 ;;		line 79 in file "../../../../../Framework/MercuryFwk/Source/c/02_Osl/os_sched.c"
  6118 ;; Parameters:    Size  Location     Type
  6119 ;;		None
  6120 ;; Auto vars:     Size  Location     Type
  6121 ;;		None
  6122 ;; Return value:  Size  Location     Type
  6123 ;;                  1    wreg      void 
  6124 ;; Registers used:
  6125 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6126 ;; Tracked objects:
  6127 ;;		On entry : 0/0
  6128 ;;		On exit  : 0/0
  6129 ;;		Unchanged: 0/0
  6130 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6131 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6132 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6133 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6134 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6135 ;;Total ram usage:        0 bytes
  6136 ;; Hardware stack levels used:    1
  6137 ;; Hardware stack levels required when called:    9
  6138 ;; This function calls:
  6139 ;;		_InitializeTasks
  6140 ;;		_ScheduleTasks
  6141 ;; This function is called by:
  6142 ;;		_main
  6143 ;; This function uses a non-reentrant model
  6144 ;;
  6145                           
  6146                           
  6147                           ;psect for function _MainScheduler
  6148  13F7                     _MainScheduler:	
  6149                           
  6150                           ;os_sched.c: 82: InitializeTasks();
  6151                           
  6152                           ;incstack = 0
  6153                           ; Regs used in _MainScheduler: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  6154  13F7  3197  275E  3193   	fcall	_InitializeTasks
  6155                           
  6156                           ;os_sched.c: 84: SystemState = RunningState;
  6157  13FA  0021               	movlb	1	; select bank1
  6158  13FB  01EB               	clrf	_SystemState^(0+128)
  6159  13FC  0AEB               	incf	_SystemState^(0+128),f
  6160  13FD                     l5450:	
  6161                           ;os_sched.c: 91: while(((UINT8)(1)))
  6162                           
  6163                           
  6164                           ;os_sched.c: 92: {
  6165                           ;os_sched.c: 94: if (MainSystemTimebaseFlag == CallTaskPhase)
  6166  13FD  086F               	movf	_MainSystemTimebaseFlag^(0+128),w
  6167  13FE  1D03               	btfss	3,2
  6168  13FF  2BFD               	goto	l5450
  6169                           
  6170                           ;os_sched.c: 95: {
  6171                           ;os_sched.c: 97: ScheduleTasks();
  6172  1400  318F  273B  3193   	fcall	_ScheduleTasks
  6173                           
  6174                           ;os_sched.c: 99: MainSystemTimebaseFlag = WaitTriggerPhase;
  6175  1403  0021               	movlb	1	; select bank1
  6176  1404  01EF               	clrf	_MainSystemTimebaseFlag^(0+128)
  6177  1405  0AEF               	incf	_MainSystemTimebaseFlag^(0+128),f
  6178  1406  2BFD               	goto	l5450
  6179  1407                     __end_of_MainScheduler:	
  6180                           
  6181                           	psect	text13
  6182  0F3B                     __ptext13:	
  6183 ;; *************** function _ScheduleTasks *****************
  6184 ;; Defined at:
  6185 ;;		line 130 in file "../../../../../Framework/MercuryFwk/Source/c/02_Osl/os_sched.c"
  6186 ;; Parameters:    Size  Location     Type
  6187 ;;		None
  6188 ;; Auto vars:     Size  Location     Type
  6189 ;;  ActiveTaskIn    1   78[BANK0 ] unsigned char 
  6190 ;; Return value:  Size  Location     Type
  6191 ;;                  1    wreg      void 
  6192 ;; Registers used:
  6193 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6194 ;; Tracked objects:
  6195 ;;		On entry : 0/0
  6196 ;;		On exit  : 0/0
  6197 ;;		Unchanged: 0/0
  6198 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6199 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6200 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6201 ;;      Temps:          0       0       0       0       6       0       0       0       0       0       0       0       
      +0       0
  6202 ;;      Totals:         0       1       0       0       6       0       0       0       0       0       0       0       
      +0       0
  6203 ;;Total ram usage:        7 bytes
  6204 ;; Hardware stack levels used:    1
  6205 ;; Hardware stack levels required when called:    8
  6206 ;; This function calls:
  6207 ;;		_App_MainTask
  6208 ;;		_I2cSlv_MainTask
  6209 ;;		_I2c_DataReceiveSm
  6210 ;;		_Led_MainTask
  6211 ;;		_Wdg_MainTask
  6212 ;; This function is called by:
  6213 ;;		_MainScheduler
  6214 ;; This function uses a non-reentrant model
  6215 ;;
  6216                           
  6217                           
  6218                           ;psect for function _ScheduleTasks
  6219  0F3B                     _ScheduleTasks:	
  6220                           
  6221                           ;os_sched.c: 133: UINT8 ActiveTaskIndex = 0u;
  6222                           
  6223                           ;incstack = 0
  6224                           ; Regs used in _ScheduleTasks: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  6225  0F3B  0020               	movlb	0	; select bank0
  6226  0F3C  01EE               	clrf	ScheduleTasks@ActiveTaskIndex
  6227                           
  6228                           ;os_sched.c: 136: for (ActiveTaskIndex = 0u; ActiveTaskIndex < TaskNumber; ActiveTaskInd
      +                          ex++)
  6229  0F3D  01EE               	clrf	ScheduleTasks@ActiveTaskIndex
  6230  0F3E  300A               	movlw	low (_TaskNumber| (0+32768))
  6231  0F3F  0084               	movwf	4
  6232  0F40  3098               	movlw	high (_TaskNumber| (0+32768))
  6233  0F41  0085               	movwf	5
  6234  0F42  3F00               	moviw [0]fsr0
  6235  0F43  0023               	movlb	3	; select bank3
  6236  0F44  00E6               	movwf	??_ScheduleTasks^(0+384)
  6237  0F45  3F01               	moviw [1]fsr0
  6238  0F46                     L5:	
  6239  0F46  00E7               	movwf	(??_ScheduleTasks^(0+384)+1)
  6240  0F47  0020               	movlb	0	; select bank0
  6241  0F48  086E               	movf	ScheduleTasks@ActiveTaskIndex,w
  6242  0F49  0023               	movlb	3	; select bank3
  6243  0F4A  00E8               	movwf	(??_ScheduleTasks+2)^(0+384)
  6244  0F4B  01E9               	clrf	((??_ScheduleTasks+2)^(0+384)+1)
  6245  0F4C  0867               	movf	(??_ScheduleTasks+1)^(0+384),w
  6246  0F4D  0269               	subwf	(??_ScheduleTasks+3)^(0+384),w
  6247  0F4E  1D03               	skipz
  6248  0F4F  2F52               	goto	u6085
  6249  0F50  0866               	movf	??_ScheduleTasks^(0+384),w
  6250  0F51  0268               	subwf	(??_ScheduleTasks+2)^(0+384),w
  6251  0F52                     u6085:	
  6252  0F52  1803               	btfsc	3,0
  6253  0F53  0008               	return
  6254                           
  6255                           ;os_sched.c: 137: {
  6256                           ;os_sched.c: 138: if (TaskTable[ActiveTaskIndex].Counter >= (TaskTable[ActiveTaskIndex].
      +                          TimeoutMs/((UINT16)(1))))
  6257  0F54  0020               	movlb	0	; select bank0
  6258  0F55  086E               	movf	ScheduleTasks@ActiveTaskIndex,w
  6259  0F56  0023               	movlb	3	; select bank3
  6260  0F57  00E6               	movwf	??_ScheduleTasks^(0+384)
  6261  0F58  3002               	movlw	2
  6262  0F59                     u6095:	
  6263  0F59  35E6               	lslf	??_ScheduleTasks^(0+384),f
  6264  0F5A  3EFF               	addlw	-1
  6265  0F5B  1D03               	skipz
  6266  0F5C  2F59               	goto	u6095
  6267  0F5D  3566               	lslf	??_ScheduleTasks^(0+384),w
  6268  0F5E  3E05               	addlw	5
  6269  0F5F  3E20               	addlw	(low (_TaskTable| (0+256)))& (0+255)
  6270  0F60  0086               	movwf	6
  6271  0F61  3001               	movlw	1	; select bank2/3
  6272  0F62  0087               	movwf	7
  6273  0F63  3F40               	moviw [0]fsr1
  6274  0F64  00E7               	movwf	(??_ScheduleTasks+1)^(0+384)
  6275  0F65  3F41               	moviw [1]fsr1
  6276  0F66  00E8               	movwf	((??_ScheduleTasks+1)^(0+384)+1)
  6277  0F67  0020               	movlb	0	; select bank0
  6278  0F68  086E               	movf	ScheduleTasks@ActiveTaskIndex,w
  6279  0F69  0023               	movlb	3	; select bank3
  6280  0F6A  00E9               	movwf	(??_ScheduleTasks+3)^(0+384)
  6281  0F6B  3002               	movlw	2
  6282  0F6C                     u6105:	
  6283  0F6C  35E9               	lslf	(??_ScheduleTasks+3)^(0+384),f
  6284  0F6D  3EFF               	addlw	-1
  6285  0F6E  1D03               	skipz
  6286  0F6F  2F6C               	goto	u6105
  6287  0F70  3569               	lslf	(??_ScheduleTasks+3)^(0+384),w
  6288  0F71  3E03               	addlw	3
  6289  0F72  3E20               	addlw	(low (_TaskTable| (0+256)))& (0+255)
  6290  0F73  0086               	movwf	6
  6291  0F74  3001               	movlw	1	; select bank2/3
  6292  0F75  0087               	movwf	7
  6293  0F76  3F40               	moviw [0]fsr1
  6294  0F77  00EA               	movwf	(??_ScheduleTasks+4)^(0+384)
  6295  0F78  3F41               	moviw [1]fsr1
  6296  0F79  00EB               	movwf	((??_ScheduleTasks+4)^(0+384)+1)
  6297  0F7A  0868               	movf	(??_ScheduleTasks+2)^(0+384),w
  6298  0F7B  026B               	subwf	(??_ScheduleTasks+5)^(0+384),w
  6299  0F7C  1D03               	skipz
  6300  0F7D  2F80               	goto	u6115
  6301  0F7E  0867               	movf	(??_ScheduleTasks+1)^(0+384),w
  6302  0F7F  026A               	subwf	(??_ScheduleTasks+4)^(0+384),w
  6303  0F80                     u6115:	
  6304  0F80  1C03               	skipc
  6305  0F81  2FCD               	goto	l5426
  6306                           
  6307                           ;os_sched.c: 139: {
  6308                           ;os_sched.c: 140: TaskTable[ActiveTaskIndex].Counter = ((UINT8)(0));
  6309  0F82  0020               	movlb	0	; select bank0
  6310  0F83  086E               	movf	ScheduleTasks@ActiveTaskIndex,w
  6311  0F84  0023               	movlb	3	; select bank3
  6312  0F85  00E6               	movwf	??_ScheduleTasks^(0+384)
  6313  0F86  3002               	movlw	2
  6314  0F87                     u6125:	
  6315  0F87  35E6               	lslf	??_ScheduleTasks^(0+384),f
  6316  0F88  3EFF               	addlw	-1
  6317  0F89  1D03               	skipz
  6318  0F8A  2F87               	goto	u6125
  6319  0F8B  3566               	lslf	??_ScheduleTasks^(0+384),w
  6320  0F8C  3E03               	addlw	3
  6321  0F8D  3E20               	addlw	(low (_TaskTable| (0+256)))& (0+255)
  6322  0F8E  0086               	movwf	6
  6323  0F8F  3001               	movlw	1	; select bank2/3
  6324  0F90  0087               	movwf	7
  6325  0F91  3000               	movlw	0
  6326  0F92  3FC0               	movwi [0]fsr1
  6327  0F93  3FC1               	movwi [1]fsr1
  6328                           
  6329                           ;os_sched.c: 141: TaskTable[ActiveTaskIndex].State = TaskRunning;
  6330  0F94  0020               	movlb	0	; select bank0
  6331  0F95  086E               	movf	ScheduleTasks@ActiveTaskIndex,w
  6332  0F96  0023               	movlb	3	; select bank3
  6333  0F97  00E6               	movwf	??_ScheduleTasks^(0+384)
  6334  0F98  3002               	movlw	2
  6335  0F99                     u6135:	
  6336  0F99  35E6               	lslf	??_ScheduleTasks^(0+384),f
  6337  0F9A  3EFF               	addlw	-1
  6338  0F9B  1D03               	skipz
  6339  0F9C  2F99               	goto	u6135
  6340  0F9D  3566               	lslf	??_ScheduleTasks^(0+384),w
  6341  0F9E  3E02               	addlw	2
  6342  0F9F  3E20               	addlw	(low (_TaskTable| (0+256)))& (0+255)
  6343  0FA0  0086               	movwf	6
  6344  0FA1  3001               	movlw	1	; select bank2/3
  6345  0FA2  0087               	movwf	7
  6346  0FA3  0181               	clrf	1
  6347  0FA4  0A81               	incf	1,f
  6348                           
  6349                           ;os_sched.c: 142: TaskTable[ActiveTaskIndex].Task(TaskTable[ActiveTaskIndex].Options);
  6350  0FA5  0020               	movlb	0	; select bank0
  6351  0FA6  086E               	movf	ScheduleTasks@ActiveTaskIndex,w
  6352  0FA7  0023               	movlb	3	; select bank3
  6353  0FA8  00E6               	movwf	??_ScheduleTasks^(0+384)
  6354  0FA9  3002               	movlw	2
  6355  0FAA                     u6145:	
  6356  0FAA  35E6               	lslf	??_ScheduleTasks^(0+384),f
  6357  0FAB  3EFF               	addlw	-1
  6358  0FAC  1D03               	skipz
  6359  0FAD  2FAA               	goto	u6145
  6360  0FAE  3566               	lslf	??_ScheduleTasks^(0+384),w
  6361  0FAF  3E07               	addlw	7
  6362  0FB0  3E20               	addlw	(low (_TaskTable| (0+256)))& (0+255)
  6363  0FB1  0086               	movwf	6
  6364  0FB2  3001               	movlw	1	; select bank2/3
  6365  0FB3  0087               	movwf	7
  6366  0FB4  0801               	movf	1,w
  6367  0FB5  00E7               	movwf	(??_ScheduleTasks+1)^(0+384)
  6368  0FB6  0867               	movf	(??_ScheduleTasks+1)^(0+384),w
  6369  0FB7  0021               	movlb	1	; select bank1
  6370  0FB8  00B8               	movwf	App_MainTask@Options^(0+128)
  6371  0FB9  0020               	movlb	0	; select bank0
  6372  0FBA  086E               	movf	ScheduleTasks@ActiveTaskIndex,w
  6373  0FBB  0023               	movlb	3	; select bank3
  6374  0FBC  00E8               	movwf	(??_ScheduleTasks+2)^(0+384)
  6375  0FBD  3002               	movlw	2
  6376  0FBE                     u6155:	
  6377  0FBE  35E8               	lslf	(??_ScheduleTasks+2)^(0+384),f
  6378  0FBF  3EFF               	addlw	-1
  6379  0FC0  1D03               	skipz
  6380  0FC1  2FBE               	goto	u6155
  6381  0FC2  3568               	lslf	(??_ScheduleTasks+2)^(0+384),w
  6382  0FC3  3E20               	addlw	(low (_TaskTable| (0+256)))& (0+255)
  6383  0FC4  0086               	movwf	6
  6384  0FC5  3001               	movlw	1	; select bank2/3
  6385  0FC6  0087               	movwf	7
  6386  0FC7  3F41               	moviw [1]fsr1
  6387  0FC8  008A               	movwf	10
  6388  0FC9  3F40               	moviw [0]fsr1
  6389  0FCA  000A               	callw
  6390  0FCB  318F               	pagesel	$
  6391                           
  6392                           ;os_sched.c: 143: }
  6393  0FCC  2FF1               	goto	l5428
  6394  0FCD                     l5426:	
  6395                           
  6396                           ;os_sched.c: 144: else
  6397                           ;os_sched.c: 145: {
  6398                           ;os_sched.c: 146: TaskTable[ActiveTaskIndex].Counter++;
  6399  0FCD  0020               	movlb	0	; select bank0
  6400  0FCE  086E               	movf	ScheduleTasks@ActiveTaskIndex,w
  6401  0FCF  0023               	movlb	3	; select bank3
  6402  0FD0  00E6               	movwf	??_ScheduleTasks^(0+384)
  6403  0FD1  3002               	movlw	2
  6404  0FD2                     u6165:	
  6405  0FD2  35E6               	lslf	??_ScheduleTasks^(0+384),f
  6406  0FD3  3EFF               	addlw	-1
  6407  0FD4  1D03               	skipz
  6408  0FD5  2FD2               	goto	u6165
  6409  0FD6  3566               	lslf	??_ScheduleTasks^(0+384),w
  6410  0FD7  3E03               	addlw	3
  6411  0FD8  3E20               	addlw	(low (_TaskTable| (0+256)))& (0+255)
  6412  0FD9  0086               	movwf	6
  6413  0FDA  3001               	movlw	1	; select bank2/3
  6414  0FDB  0087               	movwf	7
  6415  0FDC  3001               	movlw	1
  6416  0FDD  0781               	addwf	1,f
  6417  0FDE  3141               	addfsr 1,1
  6418  0FDF  1803               	skipnc
  6419  0FE0  0A81               	incf	1,f
  6420                           
  6421                           ;os_sched.c: 147: TaskTable[ActiveTaskIndex].State = TaskIdle;
  6422  0FE1  0020               	movlb	0	; select bank0
  6423  0FE2  086E               	movf	ScheduleTasks@ActiveTaskIndex,w
  6424  0FE3  0023               	movlb	3	; select bank3
  6425  0FE4  00E6               	movwf	??_ScheduleTasks^(0+384)
  6426  0FE5  3002               	movlw	2
  6427  0FE6                     u6175:	
  6428  0FE6  35E6               	lslf	??_ScheduleTasks^(0+384),f
  6429  0FE7  3EFF               	addlw	-1
  6430  0FE8  1D03               	skipz
  6431  0FE9  2FE6               	goto	u6175
  6432  0FEA  3566               	lslf	??_ScheduleTasks^(0+384),w
  6433  0FEB  3E02               	addlw	2
  6434  0FEC  3E20               	addlw	(low (_TaskTable| (0+256)))& (0+255)
  6435  0FED  0086               	movwf	6
  6436  0FEE  3001               	movlw	1	; select bank2/3
  6437  0FEF  0087               	movwf	7
  6438  0FF0  0181               	clrf	1
  6439  0FF1                     l5428:	
  6440  0FF1  3001               	movlw	1
  6441  0FF2  0023               	movlb	3	; select bank3
  6442  0FF3  00E6               	movwf	??_ScheduleTasks^(0+384)
  6443  0FF4  0866               	movf	??_ScheduleTasks^(0+384),w
  6444  0FF5  0020               	movlb	0	; select bank0
  6445  0FF6  07EE               	addwf	ScheduleTasks@ActiveTaskIndex,f
  6446  0FF7  300A               	movlw	low (_TaskNumber| (0+32768))
  6447  0FF8  0084               	movwf	4
  6448  0FF9  3098               	movlw	high (_TaskNumber| (0+32768))
  6449  0FFA  0085               	movwf	5
  6450  0FFB  3F00               	moviw [0]fsr0
  6451  0FFC  0023               	movlb	3	; select bank3
  6452  0FFD  00E6               	movwf	??_ScheduleTasks^(0+384)
  6453  0FFE  3F01               	moviw [1]fsr0
  6454  0FFF  2F46               	goto	L5
  6455  1000                     __end_of_ScheduleTasks:	
  6456                           
  6457                           	psect	text14
  6458  175E                     __ptext14:	
  6459 ;; *************** function _InitializeTasks *****************
  6460 ;; Defined at:
  6461 ;;		line 111 in file "../../../../../Framework/MercuryFwk/Source/c/02_Osl/os_sched.c"
  6462 ;; Parameters:    Size  Location     Type
  6463 ;;		None
  6464 ;; Auto vars:     Size  Location     Type
  6465 ;;  ActiveTaskIn    1   78[BANK0 ] unsigned char 
  6466 ;; Return value:  Size  Location     Type
  6467 ;;                  1    wreg      void 
  6468 ;; Registers used:
  6469 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6470 ;; Tracked objects:
  6471 ;;		On entry : 0/0
  6472 ;;		On exit  : 0/0
  6473 ;;		Unchanged: 0/0
  6474 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6475 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6476 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6477 ;;      Temps:          0       0       0       4       0       0       0       0       0       0       0       0       
      +0       0
  6478 ;;      Totals:         0       1       0       4       0       0       0       0       0       0       0       0       
      +0       0
  6479 ;;Total ram usage:        5 bytes
  6480 ;; Hardware stack levels used:    1
  6481 ;; Hardware stack levels required when called:    8
  6482 ;; This function calls:
  6483 ;;		_App_MainTask
  6484 ;;		_I2cSlv_MainTask
  6485 ;;		_I2c_DataReceiveSm
  6486 ;;		_Led_MainTask
  6487 ;;		_Wdg_MainTask
  6488 ;; This function is called by:
  6489 ;;		_MainScheduler
  6490 ;; This function uses a non-reentrant model
  6491 ;;
  6492                           
  6493                           
  6494                           ;psect for function _InitializeTasks
  6495  175E                     _InitializeTasks:	
  6496                           
  6497                           ;os_sched.c: 114: UINT8 ActiveTaskIndex = 0u;
  6498                           
  6499                           ;incstack = 0
  6500                           ; Regs used in _InitializeTasks: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  6501  175E  0020               	movlb	0	; select bank0
  6502  175F  01EE               	clrf	InitializeTasks@ActiveTaskIndex
  6503                           
  6504                           ;os_sched.c: 117: for (ActiveTaskIndex = 0u; ActiveTaskIndex < TaskNumber; ActiveTaskInd
      +                          ex++)
  6505  1760  01EE               	clrf	InitializeTasks@ActiveTaskIndex
  6506  1761  300A               	movlw	low (_TaskNumber| (0+32768))
  6507  1762  0084               	movwf	4
  6508  1763  3098               	movlw	high (_TaskNumber| (0+32768))
  6509  1764  0085               	movwf	5
  6510  1765  3F00               	moviw [0]fsr0
  6511  1766  0022               	movlb	2	; select bank2
  6512  1767  00EB               	movwf	??_InitializeTasks^(0+256)
  6513  1768  3F01               	moviw [1]fsr0
  6514  1769                     L6:	
  6515  1769  00EC               	movwf	(??_InitializeTasks^(0+256)+1)
  6516  176A  0020               	movlb	0	; select bank0
  6517  176B  086E               	movf	InitializeTasks@ActiveTaskIndex,w
  6518  176C  0022               	movlb	2	; select bank2
  6519  176D  00ED               	movwf	(??_InitializeTasks+2)^(0+256)
  6520  176E  01EE               	clrf	((??_InitializeTasks+2)^(0+256)+1)
  6521  176F  086C               	movf	(??_InitializeTasks+1)^(0+256),w
  6522  1770  026E               	subwf	(??_InitializeTasks+3)^(0+256),w
  6523  1771  1D03               	skipz
  6524  1772  2F75               	goto	u6045
  6525  1773  086B               	movf	??_InitializeTasks^(0+256),w
  6526  1774  026D               	subwf	(??_InitializeTasks+2)^(0+256),w
  6527  1775                     u6045:	
  6528  1775  1803               	btfsc	3,0
  6529  1776  0008               	return
  6530                           
  6531                           ;os_sched.c: 118: {
  6532                           ;os_sched.c: 119: TaskTable[ActiveTaskIndex].Task(TaskTable[ActiveTaskIndex].Options);
  6533  1777  0020               	movlb	0	; select bank0
  6534  1778  086E               	movf	InitializeTasks@ActiveTaskIndex,w
  6535  1779  0022               	movlb	2	; select bank2
  6536  177A  00EB               	movwf	??_InitializeTasks^(0+256)
  6537  177B  3002               	movlw	2
  6538  177C                     u6055:	
  6539  177C  35EB               	lslf	??_InitializeTasks^(0+256),f
  6540  177D  3EFF               	addlw	-1
  6541  177E  1D03               	skipz
  6542  177F  2F7C               	goto	u6055
  6543  1780  356B               	lslf	??_InitializeTasks^(0+256),w
  6544  1781  3E07               	addlw	7
  6545  1782  3E20               	addlw	(low (_TaskTable| (0+256)))& (0+255)
  6546  1783  0086               	movwf	6
  6547  1784  3001               	movlw	1	; select bank2/3
  6548  1785  0087               	movwf	7
  6549  1786  0801               	movf	1,w
  6550  1787  00EC               	movwf	(??_InitializeTasks+1)^(0+256)
  6551  1788  086C               	movf	(??_InitializeTasks+1)^(0+256),w
  6552  1789  0021               	movlb	1	; select bank1
  6553  178A  00B8               	movwf	App_MainTask@Options^(0+128)
  6554  178B  0020               	movlb	0	; select bank0
  6555  178C  086E               	movf	InitializeTasks@ActiveTaskIndex,w
  6556  178D  0022               	movlb	2	; select bank2
  6557  178E  00ED               	movwf	(??_InitializeTasks+2)^(0+256)
  6558  178F  3002               	movlw	2
  6559  1790                     u6065:	
  6560  1790  35ED               	lslf	(??_InitializeTasks+2)^(0+256),f
  6561  1791  3EFF               	addlw	-1
  6562  1792  1D03               	skipz
  6563  1793  2F90               	goto	u6065
  6564  1794  356D               	lslf	(??_InitializeTasks+2)^(0+256),w
  6565  1795  3E20               	addlw	(low (_TaskTable| (0+256)))& (0+255)
  6566  1796  0086               	movwf	6
  6567  1797  3001               	movlw	1	; select bank2/3
  6568  1798  0087               	movwf	7
  6569  1799  3F41               	moviw [1]fsr1
  6570  179A  008A               	movwf	10
  6571  179B  3F40               	moviw [0]fsr1
  6572  179C  000A               	callw
  6573  179D  3197               	pagesel	$
  6574  179E  3001               	movlw	1
  6575  179F  0022               	movlb	2	; select bank2
  6576  17A0  00EB               	movwf	??_InitializeTasks^(0+256)
  6577  17A1  086B               	movf	??_InitializeTasks^(0+256),w
  6578  17A2  0020               	movlb	0	; select bank0
  6579  17A3  07EE               	addwf	InitializeTasks@ActiveTaskIndex,f
  6580  17A4  300A               	movlw	low (_TaskNumber| (0+32768))
  6581  17A5  0084               	movwf	4
  6582  17A6  3098               	movlw	high (_TaskNumber| (0+32768))
  6583  17A7  0085               	movwf	5
  6584  17A8  3F00               	moviw [0]fsr0
  6585  17A9  0022               	movlb	2	; select bank2
  6586  17AA  00EB               	movwf	??_InitializeTasks^(0+256)
  6587  17AB  3F01               	moviw [1]fsr0
  6588  17AC  2F69               	goto	L6
  6589  17AD                     __end_of_InitializeTasks:	
  6590                           
  6591                           	psect	text15
  6592  0967                     __ptext15:	
  6593 ;; *************** function _App_MainTask *****************
  6594 ;; Defined at:
  6595 ;;		line 242 in file "../Source/c/04_App/sb810_app.c"
  6596 ;; Parameters:    Size  Location     Type
  6597 ;;  Options         1   24[BANK1 ] unsigned char 
  6598 ;; Auto vars:     Size  Location     Type
  6599 ;;  WpuCh          18   31[BANK1 ] struct _WpuChType
  6600 ;;  AnalogChSel    12   49[BANK1 ] struct _AnalogChSelType
  6601 ;;  AdcConfig       6   25[BANK1 ] struct _AdcCfgType
  6602 ;; Return value:  Size  Location     Type
  6603 ;;                  1    wreg      void 
  6604 ;; Registers used:
  6605 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6606 ;; Tracked objects:
  6607 ;;		On entry : 0/0
  6608 ;;		On exit  : 0/0
  6609 ;;		Unchanged: 0/0
  6610 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6611 ;;      Params:         0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0
  6612 ;;      Locals:         0       0      36       0       0       0       0       0       0       0       0       0       
      +0       0
  6613 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6614 ;;      Totals:         0       1      37       0       0       0       0       0       0       0       0       0       
      +0       0
  6615 ;;Total ram usage:       38 bytes
  6616 ;; Hardware stack levels used:    1
  6617 ;; Hardware stack levels required when called:    7
  6618 ;; This function calls:
  6619 ;;		_Adc_ConfigAnCh
  6620 ;;		_Adc_InitAdcModule
  6621 ;;		_Adc_SelectChannel
  6622 ;;		_AppSm
  6623 ;;		_GetTemperature
  6624 ;;		_Mcu_ConfigPullUps
  6625 ;;		_Mcu_SetDieTempMode
  6626 ;;		_Mcu_SetDieTempSts
  6627 ;;		_Mcu_SetPullUpsSts
  6628 ;; This function is called by:
  6629 ;;		_InitializeTasks
  6630 ;;		_ScheduleTasks
  6631 ;; This function uses a non-reentrant model
  6632 ;;
  6633                           
  6634                           
  6635                           ;psect for function _App_MainTask
  6636  0967                     _App_MainTask:	
  6637                           
  6638                           ;sb810_app.c: 244: WpuChType WpuCh = {((UINT8)(0)),((UINT8)(0)),((UINT8)(0)),((UINT8)(0)
      +                          ),((UINT8)(0)),((UINT8)(0)),((UINT8)(0)),((UINT8)(0)),((UINT8)(0)),((UINT8)(0)),((UINT8)
      +                          (0)),((UINT8)(0)),((UINT8)(0)),((UINT8)(0)),((UINT8)(0)),((UINT8)(0)),((UINT8)(0)),((UIN
      +                          T8)(0
  6639                           
  6640                           ;incstack = 0
  6641                           ; Regs used in _App_MainTask: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  6642  0967  30C8               	movlw	low App_MainTask@F4020
  6643  0968  0086               	movwf	6
  6644  0969  3001               	movlw	high App_MainTask@F4020
  6645  096A  0087               	movwf	7
  6646  096B  30BF               	movlw	low App_MainTask@WpuCh
  6647  096C  0084               	movwf	4
  6648  096D  3000               	movlw	high App_MainTask@WpuCh
  6649  096E  0085               	movwf	5
  6650  096F  3012               	movlw	18
  6651  0970  0020               	movlb	0	; select bank0
  6652  0971  00ED               	movwf	??_App_MainTask
  6653  0972                     u6010:	
  6654  0972  0016               	moviw fsr1++
  6655  0973  001A               	movwi fsr0++
  6656  0974  0BED               	decfsz	??_App_MainTask,f
  6657  0975  2972               	goto	u6010
  6658                           
  6659                           ;sb810_app.c: 245: AnalogChSelType AnalogChSel = {((UINT8)(0)),((UINT8)(0)),((UINT8)(0))
      +                          ,((UINT8)(0)),((UINT8)(0)),((UINT8)(0)),((UINT8)(0)),((UINT8)(0)),((UINT8)(0)),((UINT8)(
      +                          0)),((UINT8)(0)),((UINT8)(0))};
  6660  0976  30DA               	movlw	low App_MainTask@F4040
  6661  0977  0086               	movwf	6
  6662  0978  3001               	movlw	high App_MainTask@F4040
  6663  0979  0087               	movwf	7
  6664  097A  30D1               	movlw	low App_MainTask@AnalogChSel
  6665  097B  0084               	movwf	4
  6666  097C  3000               	movlw	high App_MainTask@AnalogChSel
  6667  097D  0085               	movwf	5
  6668  097E  300C               	movlw	12
  6669  097F  00ED               	movwf	??_App_MainTask
  6670  0980                     u6020:	
  6671  0980  0016               	moviw fsr1++
  6672  0981  001A               	movwi fsr0++
  6673  0982  0BED               	decfsz	??_App_MainTask,f
  6674  0983  2980               	goto	u6020
  6675                           
  6676                           ;sb810_app.c: 246: AdcConfigType AdcConfig;
  6677                           ;sb810_app.c: 248: switch (SystemState)
  6678  0984  29CE               	goto	l5394
  6679  0985                     l797:	
  6680                           ;sb810_app.c: 249: {
  6681                           ;sb810_app.c: 251: case InitializationState:
  6682                           
  6683                           
  6684                           ;sb810_app.c: 256: TRISCbits.TRISC5 = ((UINT8)(1));
  6685  0985  168E               	bsf	14,5	;volatile
  6686                           
  6687                           ;sb810_app.c: 257: TRISCbits.TRISC4 = ((UINT8)(1));
  6688  0986  160E               	bsf	14,4	;volatile
  6689                           
  6690                           ;sb810_app.c: 258: TRISCbits.TRISC3 = ((UINT8)(1));
  6691  0987  158E               	bsf	14,3	;volatile
  6692                           
  6693                           ;sb810_app.c: 259: TRISCbits.TRISC6 = ((UINT8)(1));
  6694  0988  170E               	bsf	14,6	;volatile
  6695                           
  6696                           ;sb810_app.c: 262: WpuCh.WpuC6 = ((UINT8)(1));
  6697  0989  01CF               	clrf	(App_MainTask@WpuCh^(0+128)+16)
  6698  098A  0ACF               	incf	(App_MainTask@WpuCh^(0+128)+16),f
  6699                           
  6700                           ;sb810_app.c: 263: WpuCh.WpuC3 = ((UINT8)(1));
  6701  098B  01CC               	clrf	(App_MainTask@WpuCh^(0+128)+13)
  6702  098C  0ACC               	incf	(App_MainTask@WpuCh^(0+128)+13),f
  6703                           
  6704                           ;sb810_app.c: 264: WpuCh.WpuC4 = ((UINT8)(1));
  6705  098D  01CD               	clrf	(App_MainTask@WpuCh^(0+128)+14)
  6706  098E  0ACD               	incf	(App_MainTask@WpuCh^(0+128)+14),f
  6707                           
  6708                           ;sb810_app.c: 265: WpuCh.WpuC5 = ((UINT8)(1));
  6709  098F  01CE               	clrf	(App_MainTask@WpuCh^(0+128)+15)
  6710  0990  0ACE               	incf	(App_MainTask@WpuCh^(0+128)+15),f
  6711                           
  6712                           ;sb810_app.c: 267: Mcu_ConfigPullUps(&WpuCh);
  6713  0991  30BF               	movlw	(low (App_MainTask@WpuCh| 0))& (0+255)
  6714  0992  3186  26A6  3189   	fcall	_Mcu_ConfigPullUps
  6715                           
  6716                           ;sb810_app.c: 268: Mcu_SetPullUpsSts(Mcu_GlobalPuEnabled);
  6717  0995  3000               	movlw	0
  6718  0996  3193  234E  3189   	fcall	_Mcu_SetPullUpsSts
  6719                           
  6720                           ;sb810_app.c: 271: AnalogChSel.AnSelA0An0 = ((UINT8)(0));
  6721  0999  0021               	movlb	1	; select bank1
  6722  099A  01D1               	clrf	App_MainTask@AnalogChSel^(0+128)
  6723                           
  6724                           ;sb810_app.c: 272: AnalogChSel.AnSelA1An1 = ((UINT8)(0));
  6725  099B  01D2               	clrf	(App_MainTask@AnalogChSel^(0+128)+1)
  6726                           
  6727                           ;sb810_app.c: 273: AnalogChSel.AnSelA2An2 = ((UINT8)(1));
  6728  099C  01D3               	clrf	(App_MainTask@AnalogChSel^(0+128)+2)
  6729  099D  0AD3               	incf	(App_MainTask@AnalogChSel^(0+128)+2),f
  6730                           
  6731                           ;sb810_app.c: 274: AnalogChSel.AnSelA4An3 = ((UINT8)(0));
  6732  099E  01D4               	clrf	(App_MainTask@AnalogChSel^(0+128)+3)
  6733                           
  6734                           ;sb810_app.c: 275: AnalogChSel.AnSelC0An4 = ((UINT8)(0));
  6735  099F  01D7               	clrf	(App_MainTask@AnalogChSel^(0+128)+6)
  6736                           
  6737                           ;sb810_app.c: 276: AnalogChSel.AnSelC1An5 = ((UINT8)(0));
  6738  09A0  01D8               	clrf	(App_MainTask@AnalogChSel^(0+128)+7)
  6739                           
  6740                           ;sb810_app.c: 277: AnalogChSel.AnSelC2An6 = ((UINT8)(0));
  6741  09A1  01D9               	clrf	(App_MainTask@AnalogChSel^(0+128)+8)
  6742                           
  6743                           ;sb810_app.c: 278: AnalogChSel.AnSelC3An7 = ((UINT8)(0));
  6744  09A2  01DA               	clrf	(App_MainTask@AnalogChSel^(0+128)+9)
  6745                           
  6746                           ;sb810_app.c: 279: AnalogChSel.AnSelC6An8 = ((UINT8)(0));
  6747  09A3  01DB               	clrf	(App_MainTask@AnalogChSel^(0+128)+10)
  6748                           
  6749                           ;sb810_app.c: 280: AnalogChSel.AnSelC7An9 = ((UINT8)(0));
  6750  09A4  01DC               	clrf	(App_MainTask@AnalogChSel^(0+128)+11)
  6751                           
  6752                           ;sb810_app.c: 281: AnalogChSel.AnSelB4An10 = ((UINT8)(0));
  6753  09A5  01D5               	clrf	(App_MainTask@AnalogChSel^(0+128)+4)
  6754                           
  6755                           ;sb810_app.c: 282: AnalogChSel.AnSelB5An11 = ((UINT8)(0));
  6756  09A6  01D6               	clrf	(App_MainTask@AnalogChSel^(0+128)+5)
  6757                           
  6758                           ;sb810_app.c: 283: Adc_ConfigAnCh(&AnalogChSel);
  6759  09A7  30D1               	movlw	(low (App_MainTask@AnalogChSel| 0))& (0+255)
  6760  09A8  318B  23E8  3189   	fcall	_Adc_ConfigAnCh
  6761                           
  6762                           ;sb810_app.c: 286: Mcu_SetDieTempSts(((UINT8)(1)));
  6763  09AB  3001               	movlw	1
  6764  09AC  3193  2345  3189   	fcall	_Mcu_SetDieTempSts
  6765                           
  6766                           ;sb810_app.c: 287: Mcu_SetDieTempMode(((UINT8)(0)));
  6767  09AF  3000               	movlw	0
  6768  09B0  3193  233C  3189   	fcall	_Mcu_SetDieTempMode
  6769                           
  6770                           ;sb810_app.c: 290: AdcConfig.AdcConvClock = ((UINT8)(3));
  6771  09B3  3003               	movlw	3
  6772  09B4  0020               	movlb	0	; select bank0
  6773  09B5  00ED               	movwf	??_App_MainTask
  6774  09B6  086D               	movf	??_App_MainTask,w
  6775  09B7  0021               	movlb	1	; select bank1
  6776  09B8  00BB               	movwf	(App_MainTask@AdcConfig^(0+128)+2)
  6777                           
  6778                           ;sb810_app.c: 291: AdcConfig.AdcIntEnabled = ((UINT8)(0));
  6779  09B9  01BE               	clrf	(App_MainTask@AdcConfig^(0+128)+5)
  6780                           
  6781                           ;sb810_app.c: 292: AdcConfig.AdcNegRef = ((UINT8)(0));
  6782  09BA  01BC               	clrf	(App_MainTask@AdcConfig^(0+128)+3)
  6783                           
  6784                           ;sb810_app.c: 293: AdcConfig.AdcPosRef = ((UINT8)(0));
  6785  09BB  01BD               	clrf	(App_MainTask@AdcConfig^(0+128)+4)
  6786                           
  6787                           ;sb810_app.c: 294: AdcConfig.AdcResultFormat = ((UINT8)(1));
  6788  09BC  01BA               	clrf	(App_MainTask@AdcConfig^(0+128)+1)
  6789  09BD  0ABA               	incf	(App_MainTask@AdcConfig^(0+128)+1),f
  6790                           
  6791                           ;sb810_app.c: 295: AdcConfig.AdcEnable = ((UINT8)(1));
  6792  09BE  01B9               	clrf	App_MainTask@AdcConfig^(0+128)
  6793  09BF  0AB9               	incf	App_MainTask@AdcConfig^(0+128),f
  6794                           
  6795                           ;sb810_app.c: 296: Adc_InitAdcModule(&AdcConfig);
  6796  09C0  30B9               	movlw	(low (App_MainTask@AdcConfig| 0))& (0+255)
  6797  09C1  3196  26D1  3189   	fcall	_Adc_InitAdcModule
  6798                           
  6799                           ;sb810_app.c: 298: Adc_SelectChannel(((UINT8)(2)));
  6800  09C4  3002               	movlw	2
  6801  09C5  3193  23C9         	fcall	_Adc_SelectChannel
  6802                           
  6803                           ;sb810_app.c: 299: break;
  6804  09C7  0008               	return
  6805  09C8                     l5390:	
  6806                           ;sb810_app.c: 302: case RunningState:
  6807                           
  6808                           
  6809                           ;sb810_app.c: 304: GetTemperature();
  6810  09C8  3182  22BF  3189   	fcall	_GetTemperature
  6811                           
  6812                           ;sb810_app.c: 306: AppSm();
  6813  09CB  3188  203F         	fcall	_AppSm
  6814                           
  6815                           ;sb810_app.c: 312: }
  6816                           
  6817                           ;sb810_app.c: 311: break;
  6818                           
  6819                           ;sb810_app.c: 310: default:
  6820                           
  6821                           ;sb810_app.c: 307: break;
  6822  09CD  0008               	return
  6823  09CE                     l5394:	
  6824  09CE  0021               	movlb	1	; select bank1
  6825  09CF  086B               	movf	_SystemState^(0+128),w
  6826                           
  6827                           ; Switch size 1, requested type "space"
  6828                           ; Number of cases is 2, Range of values is 0 to 1
  6829                           ; switch strategies available:
  6830                           ; Name         Instructions Cycles
  6831                           ; simple_byte            7     4 (average)
  6832                           ; direct_byte           10     6 (fixed)
  6833                           ; jumptable            260     6 (fixed)
  6834                           ;	Chosen strategy is simple_byte
  6835  09D0  3A00               	xorlw	0	; case 0
  6836  09D1  1903               	skipnz
  6837  09D2  2985               	goto	l797
  6838  09D3  3A01               	xorlw	1	; case 1
  6839  09D4  1903               	skipnz
  6840  09D5  29C8               	goto	l5390
  6841  09D6  29D7               	goto	l801
  6842  09D7                     l801:	
  6843  09D7  0008               	return
  6844  09D8                     __end_of_App_MainTask:	
  6845                           
  6846                           	psect	text16
  6847  1593                     __ptext16:	
  6848 ;; *************** function _Led_MainTask *****************
  6849 ;; Defined at:
  6850 ;;		line 76 in file "../../../../../Framework/MercuryFwk/Source/c/03_Sml/02_Ssl/led.c"
  6851 ;; Parameters:    Size  Location     Type
  6852 ;;  Options         1   24[BANK1 ] unsigned char 
  6853 ;; Auto vars:     Size  Location     Type
  6854 ;;		None
  6855 ;; Return value:  Size  Location     Type
  6856 ;;                  1    wreg      void 
  6857 ;; Registers used:
  6858 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6859 ;; Tracked objects:
  6860 ;;		On entry : 0/0
  6861 ;;		On exit  : 0/0
  6862 ;;		Unchanged: 0/0
  6863 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6864 ;;      Params:         0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0
  6865 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6866 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6867 ;;      Totals:         0       1       1       0       0       0       0       0       0       0       0       0       
      +0       0
  6868 ;;Total ram usage:        2 bytes
  6869 ;; Hardware stack levels used:    1
  6870 ;; Hardware stack levels required when called:    3
  6871 ;; This function calls:
  6872 ;;		_LedBlinkStateMachine
  6873 ;; This function is called by:
  6874 ;;		_InitializeTasks
  6875 ;;		_ScheduleTasks
  6876 ;; This function uses a non-reentrant model
  6877 ;;
  6878                           
  6879                           
  6880                           ;psect for function _Led_MainTask
  6881  1593                     _Led_MainTask:	
  6882                           
  6883                           ;led.c: 78: switch (SystemState)
  6884                           
  6885                           ;incstack = 0
  6886                           ; Regs used in _Led_MainTask: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  6887  1593  2DB1               	goto	l5326
  6888  1594                     l540:	
  6889                           ;led.c: 79: {
  6890                           ;led.c: 81: case InitializationState:
  6891                           
  6892                           
  6893                           ;led.c: 83: TRISCbits.TRISC2 = ((UINT8)(0));
  6894  1594  110E               	bcf	14,2	;volatile
  6895                           
  6896                           ;led.c: 84: LATCbits.LATC2 = ((UINT8)(0));
  6897  1595  0022               	movlb	2	; select bank2
  6898  1596  110E               	bcf	14,2	;volatile
  6899                           
  6900                           ;led.c: 85: break;
  6901  1597  0008               	return
  6902  1598                     l5320:	
  6903                           ;led.c: 88: case RunningState:
  6904                           
  6905                           
  6906                           ;led.c: 90: if (LedBlinkSts == ((UINT8)(1)))
  6907  1598  0021               	movlb	1	; select bank1
  6908  1599  036E               	decf	_LedBlinkSts^(0+128),w
  6909  159A  1D03               	btfss	3,2
  6910  159B  2DAE               	goto	l543
  6911                           
  6912                           ;led.c: 91: {
  6913                           ;led.c: 93: LATCbits.LATC2 = LedBlinkStateMachine(&Led1,OffState);
  6914  159C  0020               	movlb	0	; select bank0
  6915  159D  01A0               	clrf	LedBlinkStateMachine@LedInitStatus
  6916  159E  3048               	movlw	(low (_Led1| (0+256)))& (0+255)
  6917  159F  318B  2360         	fcall	_LedBlinkStateMachine
  6918  15A1  0020               	movlb	0	; select bank0
  6919  15A2  00ED               	movwf	??_Led_MainTask
  6920  15A3  0DED               	rlf	??_Led_MainTask,f
  6921  15A4  0DED               	rlf	??_Led_MainTask,f
  6922  15A5  0022               	movlb	2	; select bank2
  6923  15A6  080E               	movf	14,w	;volatile
  6924  15A7  0020               	movlb	0	; select bank0
  6925  15A8  066D               	xorwf	??_Led_MainTask,w
  6926  15A9  39FB               	andlw	-5
  6927  15AA  066D               	xorwf	??_Led_MainTask,w
  6928  15AB  0022               	movlb	2	; select bank2
  6929  15AC  008E               	movwf	14	;volatile
  6930                           
  6931                           ;led.c: 94: }
  6932  15AD  0008               	return
  6933  15AE                     l543:	
  6934                           
  6935                           ;led.c: 95: else
  6936                           ;led.c: 96: {
  6937                           ;led.c: 98: LATCbits.LATC2 = ((UINT8)(0));
  6938  15AE  0022               	movlb	2	; select bank2
  6939  15AF  110E               	bcf	14,2	;volatile
  6940                           
  6941                           ;led.c: 105: }
  6942                           
  6943                           ;led.c: 104: break;
  6944                           
  6945                           ;led.c: 103: default:
  6946                           
  6947                           ;led.c: 99: }
  6948                           ;led.c: 100: break;
  6949  15B0  0008               	return
  6950  15B1                     l5326:	
  6951  15B1  0021               	movlb	1	; select bank1
  6952  15B2  086B               	movf	_SystemState^(0+128),w
  6953                           
  6954                           ; Switch size 1, requested type "space"
  6955                           ; Number of cases is 2, Range of values is 0 to 1
  6956                           ; switch strategies available:
  6957                           ; Name         Instructions Cycles
  6958                           ; simple_byte            7     4 (average)
  6959                           ; direct_byte           10     6 (fixed)
  6960                           ; jumptable            260     6 (fixed)
  6961                           ;	Chosen strategy is simple_byte
  6962  15B3  3A00               	xorlw	0	; case 0
  6963  15B4  1903               	skipnz
  6964  15B5  2D94               	goto	l540
  6965  15B6  3A01               	xorlw	1	; case 1
  6966  15B7  1903               	skipnz
  6967  15B8  2D98               	goto	l5320
  6968  15B9  2DBA               	goto	l546
  6969  15BA                     l546:	
  6970  15BA  0008               	return
  6971  15BB                     __end_of_Led_MainTask:	
  6972                           
  6973                           	psect	text17
  6974  1452                     __ptext17:	
  6975 ;; *************** function _I2cSlv_MainTask *****************
  6976 ;; Defined at:
  6977 ;;		line 109 in file "../../../../../Framework/MercuryFwk/Source/c/03_Sml/01_Pml/01_SlvI2c/i2c_slv.c"
  6978 ;; Parameters:    Size  Location     Type
  6979 ;;  Options         1   24[BANK1 ] unsigned char 
  6980 ;; Auto vars:     Size  Location     Type
  6981 ;;		None
  6982 ;; Return value:  Size  Location     Type
  6983 ;;                  1    wreg      void 
  6984 ;; Registers used:
  6985 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6986 ;; Tracked objects:
  6987 ;;		On entry : 0/0
  6988 ;;		On exit  : 0/0
  6989 ;;		Unchanged: 0/0
  6990 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6991 ;;      Params:         0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0
  6992 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6993 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6994 ;;      Totals:         0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0
  6995 ;;Total ram usage:        1 bytes
  6996 ;; Hardware stack levels used:    1
  6997 ;; Hardware stack levels required when called:    4
  6998 ;; This function calls:
  6999 ;;		_I2cSlv_I2cDrvHandle
  7000 ;;		_I2c_InitI2cModule
  7001 ;;		_I2c_SetConfig
  7002 ;; This function is called by:
  7003 ;;		_InitializeTasks
  7004 ;;		_ScheduleTasks
  7005 ;; This function uses a non-reentrant model
  7006 ;;
  7007                           
  7008                           
  7009                           ;psect for function _I2cSlv_MainTask
  7010  1452                     _I2cSlv_MainTask:	
  7011                           
  7012                           ;i2c_slv.c: 111: switch (SystemState)
  7013                           
  7014                           ;incstack = 0
  7015                           ; Regs used in _I2cSlv_MainTask: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  7016  1452  2C5D               	goto	l5316
  7017  1453                     l5308:	
  7018                           ;i2c_slv.c: 112: {
  7019                           ;i2c_slv.c: 114: case InitializationState:
  7020                           
  7021                           
  7022                           ;i2c_slv.c: 116: I2c_SetConfig();
  7023  1453  3194  2429  3194   	fcall	_I2c_SetConfig
  7024                           
  7025                           ;i2c_slv.c: 118: I2c_InitI2cModule(&I2cConfig);
  7026  1456  305A               	movlw	(low (_I2cConfig| (0+256)))& (0+255)
  7027  1457  318E  2684         	fcall	_I2c_InitI2cModule
  7028                           
  7029                           ;i2c_slv.c: 119: break;
  7030  1459  0008               	return
  7031  145A                     l5312:	
  7032                           ;i2c_slv.c: 122: case RunningState:
  7033                           
  7034                           
  7035                           ;i2c_slv.c: 124: I2cSlv_I2cDrvHandle();
  7036  145A  318A  2255         	fcall	_I2cSlv_I2cDrvHandle
  7037                           
  7038                           ;i2c_slv.c: 130: }
  7039                           
  7040                           ;i2c_slv.c: 129: break;
  7041                           
  7042                           ;i2c_slv.c: 128: default:
  7043                           
  7044                           ;i2c_slv.c: 125: break;
  7045  145C  0008               	return
  7046  145D                     l5316:	
  7047  145D  0021               	movlb	1	; select bank1
  7048  145E  086B               	movf	_SystemState^(0+128),w
  7049                           
  7050                           ; Switch size 1, requested type "space"
  7051                           ; Number of cases is 2, Range of values is 0 to 1
  7052                           ; switch strategies available:
  7053                           ; Name         Instructions Cycles
  7054                           ; simple_byte            7     4 (average)
  7055                           ; direct_byte           10     6 (fixed)
  7056                           ; jumptable            260     6 (fixed)
  7057                           ;	Chosen strategy is simple_byte
  7058  145F  3A00               	xorlw	0	; case 0
  7059  1460  1903               	skipnz
  7060  1461  2C53               	goto	l5308
  7061  1462  3A01               	xorlw	1	; case 1
  7062  1463  1903               	skipnz
  7063  1464  2C5A               	goto	l5312
  7064  1465  2C66               	goto	l496
  7065  1466                     l496:	
  7066  1466  0008               	return
  7067  1467                     __end_of_I2cSlv_MainTask:	
  7068                           
  7069                           	psect	text18
  7070  05B8                     __ptext18:	
  7071 ;; *************** function _I2c_DataReceiveSm *****************
  7072 ;; Defined at:
  7073 ;;		line 297 in file "../../../../../Framework/MercuryFwk/Source/c/01_Hal/02_Drv/i2c_slv_drv.c"
  7074 ;; Parameters:    Size  Location     Type
  7075 ;;  Options         1   24[BANK1 ] unsigned char 
  7076 ;; Auto vars:     Size  Location     Type
  7077 ;;  Index           1   77[BANK0 ] unsigned char 
  7078 ;; Return value:  Size  Location     Type
  7079 ;;                  1    wreg      void 
  7080 ;; Registers used:
  7081 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7082 ;; Tracked objects:
  7083 ;;		On entry : 0/0
  7084 ;;		On exit  : 0/0
  7085 ;;		Unchanged: 0/0
  7086 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7087 ;;      Params:         0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0
  7088 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7089 ;;      Temps:          0       0       7       0       0       0       0       0       0       0       0       0       
      +0       0
  7090 ;;      Totals:         0       1       8       0       0       0       0       0       0       0       0       0       
      +0       0
  7091 ;;Total ram usage:        9 bytes
  7092 ;; Hardware stack levels used:    1
  7093 ;; Hardware stack levels required when called:    3
  7094 ;; This function calls:
  7095 ;;		_CheckAckStatus
  7096 ;;		_CheckByteStatus
  7097 ;;		_CheckStopBitStatus
  7098 ;;		_ClearRxBuffer
  7099 ;;		_ClearTxBuffer
  7100 ;;		_GenerateEvt
  7101 ;;		_ReceiveEvt
  7102 ;; This function is called by:
  7103 ;;		_InitializeTasks
  7104 ;;		_ScheduleTasks
  7105 ;; This function uses a non-reentrant model
  7106 ;;
  7107                           
  7108                           
  7109                           ;psect for function _I2c_DataReceiveSm
  7110  05B8                     _I2c_DataReceiveSm:	
  7111                           
  7112                           ;i2c_slv_drv.c: 300: static I2cRxStateType I2cRxState = CheckRxByte;
  7113                           ;i2c_slv_drv.c: 301: static UINT8 I2cRxAddress;
  7114                           ;i2c_slv_drv.c: 302: static UINT8 I2cRxFlag = ((UINT8)(0));
  7115                           ;i2c_slv_drv.c: 303: static UINT8 OpType;
  7116                           ;i2c_slv_drv.c: 304: static UINT8 RxCounter = 0;
  7117                           ;i2c_slv_drv.c: 305: static UINT8 TxCounter = 0;
  7118                           ;i2c_slv_drv.c: 306: UINT8 Index;
  7119                           ;i2c_slv_drv.c: 308: switch (I2cRxState)
  7120                           
  7121                           ;incstack = 0
  7122                           ; Regs used in _I2c_DataReceiveSm: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  7123  05B8  2E9A               	goto	l5286
  7124  05B9                     l5210:	
  7125                           ;i2c_slv_drv.c: 309: {
  7126                           ;i2c_slv_drv.c: 310: case CheckRxByte:
  7127                           
  7128                           
  7129                           ;i2c_slv_drv.c: 312: if (ReceiveEvt(&I2cNewTxNotification))
  7130  05B9  3065               	movlw	low _I2cNewTxNotification
  7131  05BA  0020               	movlb	0	; select bank0
  7132  05BB  00A0               	movwf	ReceiveEvt@Event
  7133  05BC  3001               	movlw	high _I2cNewTxNotification
  7134  05BD  00A1               	movwf	ReceiveEvt@Event+1
  7135  05BE  3195  25E3  3185   	fcall	_ReceiveEvt
  7136  05C1  3A00               	xorlw	0
  7137  05C2  1903               	skipnz
  7138  05C3  0008               	return
  7139                           
  7140                           ;i2c_slv_drv.c: 313: {
  7141                           ;i2c_slv_drv.c: 315: if (CheckByteStatus() == ((UINT8)(0)))
  7142  05C4  3193  2380  3185   	fcall	_CheckByteStatus
  7143  05C7  3A00               	xorlw	0
  7144  05C8  1D03               	skipz
  7145  05C9  2DD0               	goto	l5216
  7146                           
  7147                           ;i2c_slv_drv.c: 316: {
  7148                           ;i2c_slv_drv.c: 318: I2cRxFlag = ((UINT8)(1));
  7149  05CA  0021               	movlb	1	; select bank1
  7150  05CB  01E6               	clrf	I2c_DataReceiveSm@I2cRxFlag^(0+128)
  7151  05CC  0AE6               	incf	I2c_DataReceiveSm@I2cRxFlag^(0+128),f
  7152                           
  7153                           ;i2c_slv_drv.c: 320: I2cRxState = StoreAddrByte;
  7154  05CD  01E7               	clrf	I2c_DataReceiveSm@I2cRxState^(0+128)
  7155  05CE  0AE7               	incf	I2c_DataReceiveSm@I2cRxState^(0+128),f
  7156                           
  7157                           ;i2c_slv_drv.c: 321: }
  7158  05CF  0008               	return
  7159  05D0                     l5216:	
  7160                           
  7161                           ;i2c_slv_drv.c: 322: else if ((CheckByteStatus() == ((UINT8)(1))) && (I2cRxFlag == ((UIN
      +                          T8)(1))))
  7162  05D0  3193  2380  3185   	fcall	_CheckByteStatus
  7163  05D3  3A01               	xorlw	1
  7164  05D4  1D03               	skipz
  7165  05D5  0008               	return
  7166  05D6  0021               	movlb	1	; select bank1
  7167  05D7  0366               	decf	I2c_DataReceiveSm@I2cRxFlag^(0+128),w
  7168  05D8  1D03               	btfss	3,2
  7169  05D9  0008               	return
  7170                           
  7171                           ;i2c_slv_drv.c: 323: {
  7172                           ;i2c_slv_drv.c: 324: if (OpType == ((UINT8)(0)))
  7173  05DA  0868               	movf	I2c_DataReceiveSm@OpType^(0+128),w
  7174  05DB  1D03               	btfss	3,2
  7175  05DC  2DE2               	goto	l5224
  7176                           
  7177                           ;i2c_slv_drv.c: 325: {
  7178                           ;i2c_slv_drv.c: 327: I2cRxState = HandleWrite;
  7179  05DD  3002               	movlw	2
  7180  05DE  00B9               	movwf	??_I2c_DataReceiveSm^(0+128)
  7181  05DF  0839               	movf	??_I2c_DataReceiveSm^(0+128),w
  7182  05E0  00E7               	movwf	I2c_DataReceiveSm@I2cRxState^(0+128)
  7183                           
  7184                           ;i2c_slv_drv.c: 328: }
  7185  05E1  0008               	return
  7186  05E2                     l5224:	
  7187                           
  7188                           ;i2c_slv_drv.c: 329: else
  7189                           ;i2c_slv_drv.c: 330: {
  7190                           ;i2c_slv_drv.c: 332: I2cRxState = HandleRead;
  7191  05E2  3003               	movlw	3
  7192  05E3  00B9               	movwf	??_I2c_DataReceiveSm^(0+128)
  7193  05E4  0839               	movf	??_I2c_DataReceiveSm^(0+128),w
  7194  05E5  00E7               	movwf	I2c_DataReceiveSm@I2cRxState^(0+128)
  7195                           
  7196                           ;i2c_slv_drv.c: 338: }
  7197                           ;i2c_slv_drv.c: 339: }
  7198                           ;i2c_slv_drv.c: 340: break;
  7199                           
  7200                           ;i2c_slv_drv.c: 335: else
  7201                           ;i2c_slv_drv.c: 336: {
  7202                           
  7203                           ;i2c_slv_drv.c: 333: }
  7204                           ;i2c_slv_drv.c: 334: }
  7205  05E6  0008               	return
  7206  05E7                     l5226:	
  7207                           ;i2c_slv_drv.c: 342: case StoreAddrByte:
  7208                           
  7209                           
  7210                           ;i2c_slv_drv.c: 344: I2cRxAddress = SSP1BUF;
  7211  05E7  0024               	movlb	4	; select bank4
  7212  05E8  0811               	movf	17,w	;volatile
  7213  05E9  0021               	movlb	1	; select bank1
  7214  05EA  00B9               	movwf	??_I2c_DataReceiveSm^(0+128)
  7215  05EB  0839               	movf	??_I2c_DataReceiveSm^(0+128),w
  7216  05EC  00E5               	movwf	I2c_DataReceiveSm@I2cRxAddress^(0+128)
  7217                           
  7218                           ;i2c_slv_drv.c: 346: I2cRxAddress = (I2cRxAddress >> ((UINT8)(1)));
  7219  05ED  3665               	lsrf	I2c_DataReceiveSm@I2cRxAddress^(0+128),w
  7220  05EE  00B9               	movwf	??_I2c_DataReceiveSm^(0+128)
  7221  05EF  0839               	movf	??_I2c_DataReceiveSm^(0+128),w
  7222  05F0  00E5               	movwf	I2c_DataReceiveSm@I2cRxAddress^(0+128)
  7223                           
  7224                           ;i2c_slv_drv.c: 348: OpType = (SSP1BUF & ((UINT8)(0x01)));
  7225  05F1  0024               	movlb	4	; select bank4
  7226  05F2  0811               	movf	17,w	;volatile
  7227  05F3  3901               	andlw	1
  7228  05F4  0021               	movlb	1	; select bank1
  7229  05F5  00B9               	movwf	??_I2c_DataReceiveSm^(0+128)
  7230  05F6  0839               	movf	??_I2c_DataReceiveSm^(0+128),w
  7231  05F7  00E8               	movwf	I2c_DataReceiveSm@OpType^(0+128)
  7232                           
  7233                           ;i2c_slv_drv.c: 350: if (OpType == ((UINT8)(1)))
  7234  05F8  0368               	decf	I2c_DataReceiveSm@OpType^(0+128),w
  7235  05F9  1D03               	btfss	3,2
  7236  05FA  2E08               	goto	l5238
  7237                           
  7238                           ;i2c_slv_drv.c: 351: {
  7239                           ;i2c_slv_drv.c: 353: SSP1BUF = I2cTxBuffer[TxCounter];
  7240  05FB  086A               	movf	I2c_DataReceiveSm@TxCounter^(0+128),w
  7241  05FC  3EA0               	addlw	(low (_I2cTxBuffer| (0+768)))& (0+255)
  7242  05FD  0086               	movwf	6
  7243  05FE  3003               	movlw	3	; select bank7/8
  7244  05FF  0087               	movwf	7
  7245  0600  0801               	movf	1,w
  7246  0601  0024               	movlb	4	; select bank4
  7247  0602  0091               	movwf	17	;volatile
  7248                           
  7249                           ;i2c_slv_drv.c: 355: TxCounter++;
  7250  0603  3001               	movlw	1
  7251  0604  0021               	movlb	1	; select bank1
  7252  0605  00B9               	movwf	??_I2c_DataReceiveSm^(0+128)
  7253  0606  0839               	movf	??_I2c_DataReceiveSm^(0+128),w
  7254  0607  07EA               	addwf	I2c_DataReceiveSm@TxCounter^(0+128),f
  7255  0608                     l5238:	
  7256                           ;i2c_slv_drv.c: 357: else
  7257                           ;i2c_slv_drv.c: 358: {
  7258                           
  7259                           ;i2c_slv_drv.c: 356: }
  7260                           
  7261                           
  7262                           ;i2c_slv_drv.c: 360: }
  7263                           ;i2c_slv_drv.c: 362: I2cRxState = StopClkStretch;
  7264  0608  3004               	movlw	4
  7265  0609  00B9               	movwf	??_I2c_DataReceiveSm^(0+128)
  7266  060A  0839               	movf	??_I2c_DataReceiveSm^(0+128),w
  7267  060B  00E7               	movwf	I2c_DataReceiveSm@I2cRxState^(0+128)
  7268                           
  7269                           ;i2c_slv_drv.c: 363: break;
  7270  060C  0008               	return
  7271  060D                     l5240:	
  7272                           ;i2c_slv_drv.c: 365: case HandleWrite:
  7273                           
  7274                           
  7275                           ;i2c_slv_drv.c: 367: if (CheckStopBitStatus() == ((UINT8)(1)))
  7276  060D  3193  238B  3185   	fcall	_CheckStopBitStatus
  7277  0610  3A01               	xorlw	1
  7278  0611  1D03               	skipz
  7279  0612  2E60               	goto	l5264
  7280                           
  7281                           ;i2c_slv_drv.c: 368: {
  7282                           ;i2c_slv_drv.c: 370: I2cRxFlag = ((UINT8)(0));
  7283  0613  0021               	movlb	1	; select bank1
  7284  0614  01E6               	clrf	I2c_DataReceiveSm@I2cRxFlag^(0+128)
  7285                           
  7286                           ;i2c_slv_drv.c: 372: I2cPacket.Lenght = RxCounter;
  7287  0615  30EF               	movlw	239
  7288  0616  0086               	movwf	6
  7289  0617  3023               	movlw	35
  7290  0618  0087               	movwf	7
  7291  0619  0869               	movf	I2c_DataReceiveSm@RxCounter^(0+128),w
  7292  061A  0081               	movwf	1
  7293                           
  7294                           ;i2c_slv_drv.c: 373: I2cPacket.ReadWrite = ((UINT8)(0));
  7295  061B  309D               	movlw	157
  7296  061C  0086               	movwf	6
  7297  061D  3023               	movlw	35
  7298  061E  0087               	movwf	7
  7299  061F  3141               	addfsr 1,1
  7300  0620  0181               	clrf	1
  7301                           
  7302                           ;i2c_slv_drv.c: 374: I2cPacket.SlaveAddress = I2cRxAddress;
  7303  0621  309D               	movlw	157
  7304  0622  0086               	movwf	6
  7305  0623  3023               	movlw	35
  7306  0624  0087               	movwf	7
  7307  0625  0865               	movf	I2c_DataReceiveSm@I2cRxAddress^(0+128),w
  7308  0626  3FC0               	movwi [0]fsr1
  7309                           
  7310                           ;i2c_slv_drv.c: 375: for (Index = 0; Index < ((UINT8)(80)); Index++)
  7311  0627  0020               	movlb	0	; select bank0
  7312  0628  01ED               	clrf	I2c_DataReceiveSm@Index
  7313  0629  3050               	movlw	80
  7314  062A  026D               	subwf	I2c_DataReceiveSm@Index,w
  7315  062B  1803               	btfsc	3,0
  7316  062C  2E53               	goto	l5258
  7317  062D                     l5252:	
  7318                           
  7319                           ;i2c_slv_drv.c: 376: {
  7320                           ;i2c_slv_drv.c: 377: I2cPacket.Buffer[Index] = I2cRxBuffer[Index];
  7321  062D  086D               	movf	I2c_DataReceiveSm@Index,w
  7322  062E  3E20               	addlw	(low (_I2cRxBuffer| (0+1024)))& (0+255)
  7323  062F  0086               	movwf	6
  7324  0630  3004               	movlw	4	; select bank8/9
  7325  0631  0087               	movwf	7
  7326  0632  0801               	movf	1,w
  7327  0633  0021               	movlb	1	; select bank1
  7328  0634  00B9               	movwf	??_I2c_DataReceiveSm^(0+128)
  7329  0635  0020               	movlb	0	; select bank0
  7330  0636  086D               	movf	I2c_DataReceiveSm@Index,w
  7331  0637  0021               	movlb	1	; select bank1
  7332  0638  00BA               	movwf	(??_I2c_DataReceiveSm+1)^(0+128)
  7333  0639  01BB               	clrf	((??_I2c_DataReceiveSm+1)^(0+128)+1)
  7334  063A  309F               	movlw	159
  7335  063B  00BC               	movwf	(??_I2c_DataReceiveSm+3)^(0+128)
  7336  063C  3023               	movlw	35
  7337  063D  00BD               	movwf	((??_I2c_DataReceiveSm+3)^(0+128)+1)
  7338  063E  083A               	movf	(??_I2c_DataReceiveSm+1)^(0+128),w
  7339  063F  073C               	addwf	(??_I2c_DataReceiveSm+3)^(0+128),w
  7340  0640  00BE               	movwf	(??_I2c_DataReceiveSm+5)^(0+128)
  7341  0641  083B               	movf	(??_I2c_DataReceiveSm+2)^(0+128),w
  7342  0642  3D3D               	addwfc	(??_I2c_DataReceiveSm+4)^(0+128),w
  7343  0643  00BF               	movwf	(??_I2c_DataReceiveSm+6)^(0+128)
  7344  0644  083E               	movf	(??_I2c_DataReceiveSm+5)^(0+128),w
  7345  0645  0086               	movwf	6
  7346  0646  083F               	movf	(??_I2c_DataReceiveSm+6)^(0+128),w
  7347  0647  0087               	movwf	7
  7348  0648  0839               	movf	??_I2c_DataReceiveSm^(0+128),w
  7349  0649  0081               	movwf	1
  7350  064A  3001               	movlw	1
  7351  064B  00B9               	movwf	??_I2c_DataReceiveSm^(0+128)
  7352  064C  0839               	movf	??_I2c_DataReceiveSm^(0+128),w
  7353  064D  0020               	movlb	0	; select bank0
  7354  064E  07ED               	addwf	I2c_DataReceiveSm@Index,f
  7355  064F  3050               	movlw	80
  7356  0650  026D               	subwf	I2c_DataReceiveSm@Index,w
  7357  0651  1C03               	skipc
  7358  0652  2E2D               	goto	l5252
  7359  0653                     l5258:	
  7360                           
  7361                           ;i2c_slv_drv.c: 378: }
  7362                           ;i2c_slv_drv.c: 381: GenerateEvt(&I2cNewPacketNotification);
  7363  0653  30EC               	movlw	low _I2cNewPacketNotification
  7364  0654  00A0               	movwf	GenerateEvt@Event
  7365  0655  3000               	movlw	high _I2cNewPacketNotification
  7366  0656  00A1               	movwf	GenerateEvt@Event+1
  7367  0657  3195  256B  3185   	fcall	_GenerateEvt
  7368                           
  7369                           ;i2c_slv_drv.c: 384: RxCounter = 0;
  7370  065A  0021               	movlb	1	; select bank1
  7371  065B  01E9               	clrf	I2c_DataReceiveSm@RxCounter^(0+128)
  7372                           
  7373                           ;i2c_slv_drv.c: 386: ClearRxBuffer();
  7374  065C  3194  2407  3185   	fcall	_ClearRxBuffer
  7375                           
  7376                           ;i2c_slv_drv.c: 387: }
  7377  065F  2E6F               	goto	l5268
  7378  0660                     l5264:	
  7379                           
  7380                           ;i2c_slv_drv.c: 388: else
  7381                           ;i2c_slv_drv.c: 389: {
  7382                           ;i2c_slv_drv.c: 391: I2cRxBuffer[RxCounter] = SSP1BUF;
  7383  0660  0024               	movlb	4	; select bank4
  7384  0661  0811               	movf	17,w	;volatile
  7385  0662  0021               	movlb	1	; select bank1
  7386  0663  00B9               	movwf	??_I2c_DataReceiveSm^(0+128)
  7387  0664  0869               	movf	I2c_DataReceiveSm@RxCounter^(0+128),w
  7388  0665  3E20               	addlw	(low (_I2cRxBuffer| (0+1024)))& (0+255)
  7389  0666  0086               	movwf	6
  7390  0667  3004               	movlw	4	; select bank8/9
  7391  0668  0087               	movwf	7
  7392  0669  0839               	movf	??_I2c_DataReceiveSm^(0+128),w
  7393  066A  0081               	movwf	1
  7394                           
  7395                           ;i2c_slv_drv.c: 393: RxCounter++;
  7396  066B  3001               	movlw	1
  7397  066C  00B9               	movwf	??_I2c_DataReceiveSm^(0+128)
  7398  066D  0839               	movf	??_I2c_DataReceiveSm^(0+128),w
  7399  066E  07E9               	addwf	I2c_DataReceiveSm@RxCounter^(0+128),f
  7400  066F                     l5268:	
  7401                           
  7402                           ;i2c_slv_drv.c: 394: }
  7403                           ;i2c_slv_drv.c: 396: I2cRxState = StopClkStretch;
  7404  066F  3004               	movlw	4
  7405  0670  0021               	movlb	1	; select bank1
  7406  0671  00B9               	movwf	??_I2c_DataReceiveSm^(0+128)
  7407  0672  0839               	movf	??_I2c_DataReceiveSm^(0+128),w
  7408  0673  00E7               	movwf	I2c_DataReceiveSm@I2cRxState^(0+128)
  7409                           
  7410                           ;i2c_slv_drv.c: 397: break;
  7411  0674  0008               	return
  7412  0675                     l5270:	
  7413                           ;i2c_slv_drv.c: 399: case HandleRead:
  7414                           
  7415                           
  7416                           ;i2c_slv_drv.c: 401: if (CheckAckStatus() == ((UINT8)(0)))
  7417  0675  3193  2375  3185   	fcall	_CheckAckStatus
  7418  0678  3A00               	xorlw	0
  7419  0679  1D03               	skipz
  7420  067A  2E8A               	goto	l5276
  7421                           
  7422                           ;i2c_slv_drv.c: 402: {
  7423                           ;i2c_slv_drv.c: 404: SSP1BUF = I2cTxBuffer[TxCounter];
  7424  067B  0021               	movlb	1	; select bank1
  7425  067C  086A               	movf	I2c_DataReceiveSm@TxCounter^(0+128),w
  7426  067D  3EA0               	addlw	(low (_I2cTxBuffer| (0+768)))& (0+255)
  7427  067E  0086               	movwf	6
  7428  067F  3003               	movlw	3	; select bank7/8
  7429  0680  0087               	movwf	7
  7430  0681  0801               	movf	1,w
  7431  0682  0024               	movlb	4	; select bank4
  7432  0683  0091               	movwf	17	;volatile
  7433                           
  7434                           ;i2c_slv_drv.c: 406: TxCounter++;
  7435  0684  3001               	movlw	1
  7436  0685  0021               	movlb	1	; select bank1
  7437  0686  00B9               	movwf	??_I2c_DataReceiveSm^(0+128)
  7438  0687  0839               	movf	??_I2c_DataReceiveSm^(0+128),w
  7439  0688  07EA               	addwf	I2c_DataReceiveSm@TxCounter^(0+128),f
  7440                           
  7441                           ;i2c_slv_drv.c: 407: }
  7442  0689  2E8F               	goto	l5280
  7443  068A                     l5276:	
  7444                           
  7445                           ;i2c_slv_drv.c: 408: else
  7446                           ;i2c_slv_drv.c: 409: {
  7447                           ;i2c_slv_drv.c: 411: TxCounter = 0;
  7448  068A  0021               	movlb	1	; select bank1
  7449  068B  01EA               	clrf	I2c_DataReceiveSm@TxCounter^(0+128)
  7450                           
  7451                           ;i2c_slv_drv.c: 413: I2cRxFlag = ((UINT8)(0));
  7452  068C  01E6               	clrf	I2c_DataReceiveSm@I2cRxFlag^(0+128)
  7453                           
  7454                           ;i2c_slv_drv.c: 415: ClearTxBuffer();
  7455  068D  3194  2418         	fcall	_ClearTxBuffer
  7456  068F                     l5280:	
  7457                           
  7458                           ;i2c_slv_drv.c: 417: }
  7459                           ;i2c_slv_drv.c: 419: I2cRxState = StopClkStretch;
  7460  068F  3004               	movlw	4
  7461  0690  0021               	movlb	1	; select bank1
  7462  0691  00B9               	movwf	??_I2c_DataReceiveSm^(0+128)
  7463  0692  0839               	movf	??_I2c_DataReceiveSm^(0+128),w
  7464  0693  00E7               	movwf	I2c_DataReceiveSm@I2cRxState^(0+128)
  7465                           
  7466                           ;i2c_slv_drv.c: 420: break;
  7467  0694  0008               	return
  7468  0695                     l168:	
  7469                           ;i2c_slv_drv.c: 422: case StopClkStretch:
  7470                           
  7471                           
  7472                           ;i2c_slv_drv.c: 424: SSP1CON1bits.CKP = ((UINT8)(1));
  7473  0695  0024               	movlb	4	; select bank4
  7474  0696  1615               	bsf	21,4	;volatile
  7475                           
  7476                           ;i2c_slv_drv.c: 426: I2cRxState = CheckRxByte;
  7477  0697  0021               	movlb	1	; select bank1
  7478  0698  01E7               	clrf	I2c_DataReceiveSm@I2cRxState^(0+128)
  7479                           
  7480                           ;i2c_slv_drv.c: 431: }
  7481                           
  7482                           ;i2c_slv_drv.c: 430: break;
  7483                           
  7484                           ;i2c_slv_drv.c: 429: default:
  7485                           
  7486                           ;i2c_slv_drv.c: 427: break;
  7487  0699  0008               	return
  7488  069A                     l5286:	
  7489  069A  0021               	movlb	1	; select bank1
  7490  069B  0867               	movf	I2c_DataReceiveSm@I2cRxState^(0+128),w
  7491                           
  7492                           ; Switch size 1, requested type "space"
  7493                           ; Number of cases is 5, Range of values is 0 to 4
  7494                           ; switch strategies available:
  7495                           ; Name         Instructions Cycles
  7496                           ; direct_byte           16     6 (fixed)
  7497                           ; simple_byte           16     9 (average)
  7498                           ; jumptable            260     6 (fixed)
  7499                           ;	Chosen strategy is direct_byte
  7500  069C  0084               	movwf	4
  7501  069D  3005               	movlw	5
  7502  069E  0204               	subwf	4,w
  7503  069F  1803               	skipnc
  7504  06A0  0008               	return
  7505  06A1  3190               	movlp	high S5514
  7506  06A2  3504               	lslf	4,w
  7507  06A3  3E00               	addlw	low S5514
  7508  06A4  0082               	movwf	2
  7509  06A5  0008               	return
  7510  06A6                     __end_of_I2c_DataReceiveSm:	
  7511                           
  7512                           	psect	swtext1
  7513  1000                     __pswtext1:	
  7514  1000                     S5514:	
  7515  1000  3185  2DB9         	ljmp	l5210
  7516  1002  3185  2DE7         	ljmp	l5226
  7517  1004  3186  2E0D         	ljmp	l5240
  7518  1006  3186  2E75         	ljmp	l5270
  7519  1008  3186  2E95         	ljmp	l168
  7520                           
  7521                           	psect	text19
  7522  1467                     __ptext19:	
  7523 ;; *************** function _Wdg_MainTask *****************
  7524 ;; Defined at:
  7525 ;;		line 73 in file "../../../../../Framework/MercuryFwk/Source/c/03_Sml/02_Ssl/wdg.c"
  7526 ;; Parameters:    Size  Location     Type
  7527 ;;  Options         1   24[BANK1 ] unsigned char 
  7528 ;; Auto vars:     Size  Location     Type
  7529 ;;		None
  7530 ;; Return value:  Size  Location     Type
  7531 ;;                  1    wreg      void 
  7532 ;; Registers used:
  7533 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  7534 ;; Tracked objects:
  7535 ;;		On entry : 0/0
  7536 ;;		On exit  : 0/0
  7537 ;;		Unchanged: 0/0
  7538 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7539 ;;      Params:         0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0
  7540 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7541 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7542 ;;      Totals:         0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0
  7543 ;;Total ram usage:        1 bytes
  7544 ;; Hardware stack levels used:    1
  7545 ;; Hardware stack levels required when called:    3
  7546 ;; This function calls:
  7547 ;;		_Mcu_ClearWdg
  7548 ;;		_Mcu_SetWdgPeriod
  7549 ;;		_Mcu_SetWdgSts
  7550 ;; This function is called by:
  7551 ;;		_InitializeTasks
  7552 ;;		_ScheduleTasks
  7553 ;; This function uses a non-reentrant model
  7554 ;;
  7555                           
  7556                           
  7557                           ;psect for function _Wdg_MainTask
  7558  1467                     _Wdg_MainTask:	
  7559                           
  7560                           ;wdg.c: 75: switch (SystemState)
  7561                           
  7562                           ;incstack = 0
  7563                           ; Regs used in _Wdg_MainTask: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  7564  1467  2C73               	goto	l5336
  7565  1468                     l5330:	
  7566                           ;wdg.c: 76: {
  7567                           ;wdg.c: 78: case InitializationState:
  7568                           
  7569                           
  7570                           ;wdg.c: 80: Mcu_SetWdgPeriod(WdgPer_2s);
  7571  1468  300B               	movlw	11
  7572  1469  3193  23BB  3194   	fcall	_Mcu_SetWdgPeriod
  7573                           
  7574                           ;wdg.c: 82: Mcu_SetWdgSts(((UINT8)(1)));
  7575  146C  3001               	movlw	1
  7576  146D  3193  232A         	fcall	_Mcu_SetWdgSts
  7577                           
  7578                           ;wdg.c: 83: break;
  7579  146F  0008               	return
  7580  1470                     l5332:	
  7581                           ;wdg.c: 86: case RunningState:
  7582                           
  7583                           
  7584                           ;wdg.c: 88: Mcu_ClearWdg();
  7585  1470  3193  2306         	fcall	_Mcu_ClearWdg
  7586                           
  7587                           ;wdg.c: 94: }
  7588                           
  7589                           ;wdg.c: 93: break;
  7590                           
  7591                           ;wdg.c: 92: default:
  7592                           
  7593                           ;wdg.c: 89: break;
  7594  1472  0008               	return
  7595  1473                     l5336:	
  7596  1473  0021               	movlb	1	; select bank1
  7597  1474  086B               	movf	_SystemState^(0+128),w
  7598                           
  7599                           ; Switch size 1, requested type "space"
  7600                           ; Number of cases is 2, Range of values is 0 to 1
  7601                           ; switch strategies available:
  7602                           ; Name         Instructions Cycles
  7603                           ; simple_byte            7     4 (average)
  7604                           ; direct_byte           10     6 (fixed)
  7605                           ; jumptable            260     6 (fixed)
  7606                           ;	Chosen strategy is simple_byte
  7607  1475  3A00               	xorlw	0	; case 0
  7608  1476  1903               	skipnz
  7609  1477  2C68               	goto	l5330
  7610  1478  3A01               	xorlw	1	; case 1
  7611  1479  1903               	skipnz
  7612  147A  2C70               	goto	l5332
  7613  147B  2C7C               	goto	l692
  7614  147C                     l692:	
  7615  147C  0008               	return
  7616  147D                     __end_of_Wdg_MainTask:	
  7617                           
  7618                           	psect	text20
  7619  13BB                     __ptext20:	
  7620 ;; *************** function _Mcu_SetWdgPeriod *****************
  7621 ;; Defined at:
  7622 ;;		line 197 in file "../../../../../Framework/MercuryFwk/Source/c/01_Hal/02_Drv/mcu_drv.c"
  7623 ;; Parameters:    Size  Location     Type
  7624 ;;  WdgPeriod       1    wreg     enum E3675
  7625 ;; Auto vars:     Size  Location     Type
  7626 ;;  WdgPeriod       1    1[BANK0 ] enum E3675
  7627 ;; Return value:  Size  Location     Type
  7628 ;;                  1    wreg      void 
  7629 ;; Registers used:
  7630 ;;		wreg, status,2, status,0
  7631 ;; Tracked objects:
  7632 ;;		On entry : 0/0
  7633 ;;		On exit  : 0/0
  7634 ;;		Unchanged: 0/0
  7635 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7636 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7637 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7638 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7639 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7640 ;;Total ram usage:        2 bytes
  7641 ;; Hardware stack levels used:    1
  7642 ;; Hardware stack levels required when called:    2
  7643 ;; This function calls:
  7644 ;;		Nothing
  7645 ;; This function is called by:
  7646 ;;		_Wdg_MainTask
  7647 ;; This function uses a non-reentrant model
  7648 ;;
  7649                           
  7650                           
  7651                           ;psect for function _Mcu_SetWdgPeriod
  7652  13BB                     _Mcu_SetWdgPeriod:	
  7653                           
  7654                           ;incstack = 0
  7655                           ; Regs used in _Mcu_SetWdgPeriod: [wreg+status,2+status,0]
  7656                           ;Mcu_SetWdgPeriod@WdgPeriod stored from wreg
  7657  13BB  0020               	movlb	0	; select bank0
  7658  13BC  00A1               	movwf	Mcu_SetWdgPeriod@WdgPeriod
  7659                           
  7660                           ;mcu_drv.c: 200: WDTCONbits.WDTPS = WdgPeriod;
  7661  13BD  0821               	movf	Mcu_SetWdgPeriod@WdgPeriod,w
  7662  13BE  00A0               	movwf	??_Mcu_SetWdgPeriod
  7663  13BF  0DA0               	rlf	??_Mcu_SetWdgPeriod,f
  7664  13C0  0021               	movlb	1	; select bank1
  7665  13C1  0817               	movf	23,w	;volatile
  7666  13C2  0020               	movlb	0	; select bank0
  7667  13C3  0620               	xorwf	??_Mcu_SetWdgPeriod,w
  7668  13C4  39C1               	andlw	-63
  7669  13C5  0620               	xorwf	??_Mcu_SetWdgPeriod,w
  7670  13C6  0021               	movlb	1	; select bank1
  7671  13C7  0097               	movwf	23	;volatile
  7672  13C8  0008               	return
  7673  13C9                     __end_of_Mcu_SetWdgPeriod:	
  7674                           
  7675                           	psect	text21
  7676  1306                     __ptext21:	
  7677 ;; *************** function _Mcu_ClearWdg *****************
  7678 ;; Defined at:
  7679 ;;		line 225 in file "../../../../../Framework/MercuryFwk/Source/c/01_Hal/02_Drv/mcu_drv.c"
  7680 ;; Parameters:    Size  Location     Type
  7681 ;;		None
  7682 ;; Auto vars:     Size  Location     Type
  7683 ;;		None
  7684 ;; Return value:  Size  Location     Type
  7685 ;;                  1    wreg      void 
  7686 ;; Registers used:
  7687 ;;		None
  7688 ;; Tracked objects:
  7689 ;;		On entry : 0/0
  7690 ;;		On exit  : 0/0
  7691 ;;		Unchanged: 0/0
  7692 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7693 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7694 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7695 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7696 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7697 ;;Total ram usage:        0 bytes
  7698 ;; Hardware stack levels used:    1
  7699 ;; Hardware stack levels required when called:    2
  7700 ;; This function calls:
  7701 ;;		Nothing
  7702 ;; This function is called by:
  7703 ;;		_Wdg_MainTask
  7704 ;; This function uses a non-reentrant model
  7705 ;;
  7706                           
  7707                           
  7708                           ;psect for function _Mcu_ClearWdg
  7709  1306                     _Mcu_ClearWdg:	
  7710                           
  7711                           ;incstack = 0
  7712                           ; Regs used in _Mcu_ClearWdg: []
  7713  1306  0064               	clrwdt	;# 
  7714  1307  0008               	return
  7715  1308                     __end_of_Mcu_ClearWdg:	
  7716                           
  7717                           	psect	text22
  7718  0B60                     __ptext22:	
  7719 ;; *************** function _LedBlinkStateMachine *****************
  7720 ;; Defined at:
  7721 ;;		line 74 in file "../../../../../Framework/MercuryFwk/Source/c/01_Hal/02_Drv/led_drv.c"
  7722 ;; Parameters:    Size  Location     Type
  7723 ;;  LedBlink        1    wreg     PTR struct LedBlinkStr
  7724 ;;		 -> Led1(8), 
  7725 ;;  LedInitStatu    1    0[BANK0 ] enum E3655
  7726 ;; Auto vars:     Size  Location     Type
  7727 ;;  LedBlink        1    5[BANK0 ] PTR struct LedBlinkStr
  7728 ;;		 -> Led1(8), 
  7729 ;; Return value:  Size  Location     Type
  7730 ;;                  1    wreg      unsigned char 
  7731 ;; Registers used:
  7732 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0
  7733 ;; Tracked objects:
  7734 ;;		On entry : 0/0
  7735 ;;		On exit  : 0/0
  7736 ;;		Unchanged: 0/0
  7737 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7738 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7739 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7740 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7741 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7742 ;;Total ram usage:        6 bytes
  7743 ;; Hardware stack levels used:    1
  7744 ;; Hardware stack levels required when called:    2
  7745 ;; This function calls:
  7746 ;;		Nothing
  7747 ;; This function is called by:
  7748 ;;		_Led_MainTask
  7749 ;; This function uses a non-reentrant model
  7750 ;;
  7751                           
  7752                           
  7753                           ;psect for function _LedBlinkStateMachine
  7754  0B60                     _LedBlinkStateMachine:	
  7755                           
  7756                           ;incstack = 0
  7757                           ; Regs used in _LedBlinkStateMachine: [wreg-fsr1h+status,2+status,0]
  7758                           ;LedBlinkStateMachine@LedBlink stored from wreg
  7759  0B60  0020               	movlb	0	; select bank0
  7760  0B61  00A5               	movwf	LedBlinkStateMachine@LedBlink
  7761                           
  7762                           ;led_drv.c: 77: switch (LedBlink->LedBlinkState)
  7763  0B62  2BD6               	goto	l4964
  7764  0B63                     l4944:	
  7765                           ;led_drv.c: 78: {
  7766                           ;led_drv.c: 79: case LedBlinkInit:
  7767                           
  7768                           
  7769                           ;led_drv.c: 81: LedBlink->LedOutState = LedInitStatus;
  7770  0B63  0820               	movf	LedBlinkStateMachine@LedInitStatus,w
  7771  0B64  00A1               	movwf	??_LedBlinkStateMachine
  7772  0B65  0A25               	incf	LedBlinkStateMachine@LedBlink,w
  7773  0B66  0086               	movwf	6
  7774  0B67  3001               	movlw	1	; select bank2/3
  7775  0B68  0087               	movwf	7
  7776  0B69  0821               	movf	??_LedBlinkStateMachine,w
  7777  0B6A  0081               	movwf	1
  7778                           
  7779                           ;led_drv.c: 83: LedBlink->LedBlinkState = LedBlinkRunning;
  7780  0B6B  0825               	movf	LedBlinkStateMachine@LedBlink,w
  7781  0B6C  2BA1               	goto	L7
  7782  0B6D                     l4946:	
  7783                           ;led_drv.c: 86: case LedBlinkRunning:
  7784                           
  7785                           ;led_drv.c: 84: break;
  7786                           
  7787                           
  7788                           ;led_drv.c: 88: LedBlink->LedBlinkCounter++;
  7789  0B6D  0825               	movf	LedBlinkStateMachine@LedBlink,w
  7790  0B6E  3E02               	addlw	2
  7791  0B6F  0086               	movwf	6
  7792  0B70  3001               	movlw	1	; select bank2/3
  7793  0B71  0087               	movwf	7
  7794  0B72  3001               	movlw	1
  7795  0B73  0781               	addwf	1,f
  7796  0B74  3141               	addfsr 1,1
  7797  0B75  1803               	skipnc
  7798  0B76  0A81               	incf	1,f
  7799                           
  7800                           ;led_drv.c: 90: if (LedBlink->LedOutState == OffState)
  7801  0B77  0A25               	incf	LedBlinkStateMachine@LedBlink,w
  7802  0B78  0086               	movwf	6
  7803  0B79  3001               	movlw	1	; select bank2/3
  7804  0B7A  0087               	movwf	7
  7805  0B7B  0801               	movf	1,w
  7806  0B7C  1D03               	btfss	3,2
  7807  0B7D  2BA7               	goto	l4954
  7808                           
  7809                           ;led_drv.c: 91: {
  7810                           ;led_drv.c: 93: if (LedBlink->LedBlinkCounter >= LedBlink->LedOffTimeMs)
  7811  0B7E  0825               	movf	LedBlinkStateMachine@LedBlink,w
  7812  0B7F  3E06               	addlw	6
  7813  0B80  0086               	movwf	6
  7814  0B81  3001               	movlw	1	; select bank2/3
  7815  0B82  0087               	movwf	7
  7816  0B83  3F40               	moviw [0]fsr1
  7817  0B84  00A1               	movwf	??_LedBlinkStateMachine
  7818  0B85  3F41               	moviw [1]fsr1
  7819  0B86  00A2               	movwf	??_LedBlinkStateMachine+1
  7820  0B87  0825               	movf	LedBlinkStateMachine@LedBlink,w
  7821  0B88  3E02               	addlw	2
  7822  0B89  0086               	movwf	6
  7823  0B8A  3001               	movlw	1	; select bank2/3
  7824  0B8B  0087               	movwf	7
  7825  0B8C  3F40               	moviw [0]fsr1
  7826  0B8D  00A3               	movwf	??_LedBlinkStateMachine+2
  7827  0B8E  3F41               	moviw [1]fsr1
  7828  0B8F  00A4               	movwf	??_LedBlinkStateMachine+3
  7829  0B90  0822               	movf	??_LedBlinkStateMachine+1,w
  7830  0B91  0224               	subwf	??_LedBlinkStateMachine+3,w
  7831  0B92  1D03               	skipz
  7832  0B93  2B96               	goto	u5675
  7833  0B94  0821               	movf	??_LedBlinkStateMachine,w
  7834  0B95  0223               	subwf	??_LedBlinkStateMachine+2,w
  7835  0B96                     u5675:	
  7836  0B96  1C03               	skipc
  7837  0B97  2BE2               	goto	l4966
  7838                           
  7839                           ;led_drv.c: 94: {
  7840                           ;led_drv.c: 96: LedBlink->LedBlinkCounter = 0;
  7841  0B98  0825               	movf	LedBlinkStateMachine@LedBlink,w
  7842  0B99  3E02               	addlw	2
  7843  0B9A  0086               	movwf	6
  7844  0B9B  3001               	movlw	1	; select bank2/3
  7845  0B9C  0087               	movwf	7
  7846  0B9D  3000               	movlw	0
  7847  0B9E  3FC0               	movwi [0]fsr1
  7848  0B9F  3FC1               	movwi [1]fsr1
  7849                           
  7850                           ;led_drv.c: 98: LedBlink->LedOutState = OnState;
  7851  0BA0  0A25               	incf	LedBlinkStateMachine@LedBlink,w
  7852  0BA1                     L7:	
  7853  0BA1  0086               	movwf	6
  7854  0BA2  3001               	movlw	1	; select bank2/3
  7855  0BA3  0087               	movwf	7
  7856  0BA4  0181               	clrf	1
  7857  0BA5  0A81               	incf	1,f
  7858                           
  7859                           ;led_drv.c: 99: }
  7860                           ;led_drv.c: 100: }
  7861  0BA6  2BE2               	goto	l4966
  7862  0BA7                     l4954:	
  7863                           
  7864                           ;led_drv.c: 101: else if (LedBlink->LedOutState == OnState)
  7865  0BA7  0A25               	incf	LedBlinkStateMachine@LedBlink,w
  7866  0BA8  0086               	movwf	6
  7867  0BA9  3001               	movlw	1	; select bank2/3
  7868  0BAA  0087               	movwf	7
  7869  0BAB  0301               	decf	1,w
  7870  0BAC  1D03               	btfss	3,2
  7871  0BAD  2BE2               	goto	l4966
  7872                           
  7873                           ;led_drv.c: 102: {
  7874                           ;led_drv.c: 104: if (LedBlink->LedBlinkCounter >= LedBlink->LedOnTimeMs)
  7875  0BAE  0825               	movf	LedBlinkStateMachine@LedBlink,w
  7876  0BAF  3E04               	addlw	4
  7877  0BB0  0086               	movwf	6
  7878  0BB1  3001               	movlw	1	; select bank2/3
  7879  0BB2  0087               	movwf	7
  7880  0BB3  3F40               	moviw [0]fsr1
  7881  0BB4  00A1               	movwf	??_LedBlinkStateMachine
  7882  0BB5  3F41               	moviw [1]fsr1
  7883  0BB6  00A2               	movwf	??_LedBlinkStateMachine+1
  7884  0BB7  0825               	movf	LedBlinkStateMachine@LedBlink,w
  7885  0BB8  3E02               	addlw	2
  7886  0BB9  0086               	movwf	6
  7887  0BBA  3001               	movlw	1	; select bank2/3
  7888  0BBB  0087               	movwf	7
  7889  0BBC  3F40               	moviw [0]fsr1
  7890  0BBD  00A3               	movwf	??_LedBlinkStateMachine+2
  7891  0BBE  3F41               	moviw [1]fsr1
  7892  0BBF  00A4               	movwf	??_LedBlinkStateMachine+3
  7893  0BC0  0822               	movf	??_LedBlinkStateMachine+1,w
  7894  0BC1  0224               	subwf	??_LedBlinkStateMachine+3,w
  7895  0BC2  1D03               	skipz
  7896  0BC3  2BC6               	goto	u5695
  7897  0BC4  0821               	movf	??_LedBlinkStateMachine,w
  7898  0BC5  0223               	subwf	??_LedBlinkStateMachine+2,w
  7899  0BC6                     u5695:	
  7900  0BC6  1C03               	skipc
  7901  0BC7  2BE2               	goto	l4966
  7902                           
  7903                           ;led_drv.c: 105: {
  7904                           ;led_drv.c: 107: LedBlink->LedBlinkCounter = 0;
  7905  0BC8  0825               	movf	LedBlinkStateMachine@LedBlink,w
  7906  0BC9  3E02               	addlw	2
  7907  0BCA  0086               	movwf	6
  7908  0BCB  3001               	movlw	1	; select bank2/3
  7909  0BCC  0087               	movwf	7
  7910  0BCD  3000               	movlw	0
  7911  0BCE  3FC0               	movwi [0]fsr1
  7912  0BCF  3FC1               	movwi [1]fsr1
  7913                           
  7914                           ;led_drv.c: 109: LedBlink->LedOutState = OffState;
  7915  0BD0  0A25               	incf	LedBlinkStateMachine@LedBlink,w
  7916  0BD1  0086               	movwf	6
  7917  0BD2  3001               	movlw	1	; select bank2/3
  7918  0BD3  0087               	movwf	7
  7919  0BD4  0181               	clrf	1
  7920                           
  7921                           ;led_drv.c: 116: }
  7922                           
  7923                           ;led_drv.c: 115: break;
  7924                           
  7925                           ;led_drv.c: 114: default:
  7926                           
  7927                           ;led_drv.c: 110: }
  7928                           ;led_drv.c: 111: }
  7929                           ;led_drv.c: 112: break;
  7930  0BD5  2BE2               	goto	l4966
  7931  0BD6                     l4964:	
  7932  0BD6  0825               	movf	LedBlinkStateMachine@LedBlink,w
  7933  0BD7  0086               	movwf	6
  7934  0BD8  3001               	movlw	1	; select bank2/3
  7935  0BD9  0087               	movwf	7
  7936  0BDA  0801               	movf	1,w
  7937                           
  7938                           ; Switch size 1, requested type "space"
  7939                           ; Number of cases is 2, Range of values is 0 to 1
  7940                           ; switch strategies available:
  7941                           ; Name         Instructions Cycles
  7942                           ; simple_byte            7     4 (average)
  7943                           ; direct_byte           10     6 (fixed)
  7944                           ; jumptable            260     6 (fixed)
  7945                           ;	Chosen strategy is simple_byte
  7946  0BDB  3A00               	xorlw	0	; case 0
  7947  0BDC  1903               	skipnz
  7948  0BDD  2B63               	goto	l4944
  7949  0BDE  3A01               	xorlw	1	; case 1
  7950  0BDF  1903               	skipnz
  7951  0BE0  2B6D               	goto	l4946
  7952  0BE1  2BE2               	goto	l4966
  7953  0BE2                     l4966:	
  7954                           
  7955                           ;led_drv.c: 118: return (LedBlink->LedOutState);
  7956  0BE2  0A25               	incf	LedBlinkStateMachine@LedBlink,w
  7957  0BE3  0086               	movwf	6
  7958  0BE4  3001               	movlw	1	; select bank2/3
  7959  0BE5  0087               	movwf	7
  7960  0BE6  0801               	movf	1,w
  7961  0BE7  0008               	return
  7962  0BE8                     __end_of_LedBlinkStateMachine:	
  7963                           
  7964                           	psect	text23
  7965  138B                     __ptext23:	
  7966 ;; *************** function _CheckStopBitStatus *****************
  7967 ;; Defined at:
  7968 ;;		line 150 in file "../../../../../Framework/MercuryFwk/Source/c/01_Hal/02_Drv/i2c_slv_drv.c"
  7969 ;; Parameters:    Size  Location     Type
  7970 ;;		None
  7971 ;; Auto vars:     Size  Location     Type
  7972 ;;		None
  7973 ;; Return value:  Size  Location     Type
  7974 ;;                  1    wreg      unsigned char 
  7975 ;; Registers used:
  7976 ;;		wreg, status,2, status,0
  7977 ;; Tracked objects:
  7978 ;;		On entry : 0/0
  7979 ;;		On exit  : 0/0
  7980 ;;		Unchanged: 0/0
  7981 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7982 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7983 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7984 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7985 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7986 ;;Total ram usage:        1 bytes
  7987 ;; Hardware stack levels used:    1
  7988 ;; Hardware stack levels required when called:    2
  7989 ;; This function calls:
  7990 ;;		Nothing
  7991 ;; This function is called by:
  7992 ;;		_I2c_DataReceiveSm
  7993 ;; This function uses a non-reentrant model
  7994 ;;
  7995                           
  7996                           
  7997                           ;psect for function _CheckStopBitStatus
  7998  138B                     _CheckStopBitStatus:	
  7999                           
  8000                           ;i2c_slv_drv.c: 153: return ((SSP1STAT & ((UINT8)(0x10))) >> ((UINT8)(4)));
  8001                           
  8002                           ;incstack = 0
  8003                           ; Regs used in _CheckStopBitStatus: [wreg+status,2+status,0]
  8004  138B  0024               	movlb	4	; select bank4
  8005  138C  0814               	movf	20,w	;volatile
  8006  138D  0020               	movlb	0	; select bank0
  8007  138E  00A0               	movwf	??_CheckStopBitStatus
  8008  138F  3004               	movlw	4
  8009  1390                     u5585:	
  8010  1390  36A0               	lsrf	??_CheckStopBitStatus,f
  8011  1391  0B89               	decfsz	9,f
  8012  1392  2B90               	goto	u5585
  8013  1393  0820               	movf	??_CheckStopBitStatus,w
  8014  1394  3901               	andlw	1
  8015  1395  0008               	return
  8016  1396                     __end_of_CheckStopBitStatus:	
  8017                           
  8018                           	psect	text24
  8019  1380                     __ptext24:	
  8020 ;; *************** function _CheckByteStatus *****************
  8021 ;; Defined at:
  8022 ;;		line 136 in file "../../../../../Framework/MercuryFwk/Source/c/01_Hal/02_Drv/i2c_slv_drv.c"
  8023 ;; Parameters:    Size  Location     Type
  8024 ;;		None
  8025 ;; Auto vars:     Size  Location     Type
  8026 ;;		None
  8027 ;; Return value:  Size  Location     Type
  8028 ;;                  1    wreg      unsigned char 
  8029 ;; Registers used:
  8030 ;;		wreg, status,2, status,0
  8031 ;; Tracked objects:
  8032 ;;		On entry : 0/0
  8033 ;;		On exit  : 0/0
  8034 ;;		Unchanged: 0/0
  8035 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8036 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8037 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8038 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8039 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8040 ;;Total ram usage:        1 bytes
  8041 ;; Hardware stack levels used:    1
  8042 ;; Hardware stack levels required when called:    2
  8043 ;; This function calls:
  8044 ;;		Nothing
  8045 ;; This function is called by:
  8046 ;;		_I2c_DataReceiveSm
  8047 ;; This function uses a non-reentrant model
  8048 ;;
  8049                           
  8050                           
  8051                           ;psect for function _CheckByteStatus
  8052  1380                     _CheckByteStatus:	
  8053                           
  8054                           ;i2c_slv_drv.c: 139: return ((SSP1STAT & ((UINT8)(0x20))) >> ((UINT8)(5)));
  8055                           
  8056                           ;incstack = 0
  8057                           ; Regs used in _CheckByteStatus: [wreg+status,2+status,0]
  8058  1380  0024               	movlb	4	; select bank4
  8059  1381  0814               	movf	20,w	;volatile
  8060  1382  0020               	movlb	0	; select bank0
  8061  1383  00A0               	movwf	??_CheckByteStatus
  8062  1384  3005               	movlw	5
  8063  1385                     u5575:	
  8064  1385  36A0               	lsrf	??_CheckByteStatus,f
  8065  1386  0B89               	decfsz	9,f
  8066  1387  2B85               	goto	u5575
  8067  1388  0820               	movf	??_CheckByteStatus,w
  8068  1389  3901               	andlw	1
  8069  138A  0008               	return
  8070  138B                     __end_of_CheckByteStatus:	
  8071                           
  8072                           	psect	text25
  8073  1375                     __ptext25:	
  8074 ;; *************** function _CheckAckStatus *****************
  8075 ;; Defined at:
  8076 ;;		line 108 in file "../../../../../Framework/MercuryFwk/Source/c/01_Hal/02_Drv/i2c_slv_drv.c"
  8077 ;; Parameters:    Size  Location     Type
  8078 ;;		None
  8079 ;; Auto vars:     Size  Location     Type
  8080 ;;		None
  8081 ;; Return value:  Size  Location     Type
  8082 ;;                  1    wreg      unsigned char 
  8083 ;; Registers used:
  8084 ;;		wreg, status,2, status,0
  8085 ;; Tracked objects:
  8086 ;;		On entry : 0/0
  8087 ;;		On exit  : 0/0
  8088 ;;		Unchanged: 0/0
  8089 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8090 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8091 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8092 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8093 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8094 ;;Total ram usage:        1 bytes
  8095 ;; Hardware stack levels used:    1
  8096 ;; Hardware stack levels required when called:    2
  8097 ;; This function calls:
  8098 ;;		Nothing
  8099 ;; This function is called by:
  8100 ;;		_I2c_DataReceiveSm
  8101 ;; This function uses a non-reentrant model
  8102 ;;
  8103                           
  8104                           
  8105                           ;psect for function _CheckAckStatus
  8106  1375                     _CheckAckStatus:	
  8107                           
  8108                           ;i2c_slv_drv.c: 111: return ((SSP1CON2 & ((UINT8)(0x40))) >> ((UINT8)(6)));
  8109                           
  8110                           ;incstack = 0
  8111                           ; Regs used in _CheckAckStatus: [wreg+status,2+status,0]
  8112  1375  0024               	movlb	4	; select bank4
  8113  1376  0816               	movf	22,w	;volatile
  8114  1377  0020               	movlb	0	; select bank0
  8115  1378  00A0               	movwf	??_CheckAckStatus
  8116  1379  3006               	movlw	6
  8117  137A                     u5565:	
  8118  137A  36A0               	lsrf	??_CheckAckStatus,f
  8119  137B  0B89               	decfsz	9,f
  8120  137C  2B7A               	goto	u5565
  8121  137D  0820               	movf	??_CheckAckStatus,w
  8122  137E  3901               	andlw	1
  8123  137F  0008               	return
  8124  1380                     __end_of_CheckAckStatus:	
  8125                           
  8126                           	psect	text26
  8127  1429                     __ptext26:	
  8128 ;; *************** function _I2c_SetConfig *****************
  8129 ;; Defined at:
  8130 ;;		line 82 in file "../../../../../Framework/MercuryFwk/Source/c/03_Sml/01_Pml/01_SlvI2c/i2c_slv.c"
  8131 ;; Parameters:    Size  Location     Type
  8132 ;;		None
  8133 ;; Auto vars:     Size  Location     Type
  8134 ;;		None
  8135 ;; Return value:  Size  Location     Type
  8136 ;;                  1    wreg      void 
  8137 ;; Registers used:
  8138 ;;		wreg, status,2
  8139 ;; Tracked objects:
  8140 ;;		On entry : 0/0
  8141 ;;		On exit  : 0/0
  8142 ;;		Unchanged: 0/0
  8143 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8144 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8145 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8146 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8147 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8148 ;;Total ram usage:        1 bytes
  8149 ;; Hardware stack levels used:    1
  8150 ;; Hardware stack levels required when called:    2
  8151 ;; This function calls:
  8152 ;;		Nothing
  8153 ;; This function is called by:
  8154 ;;		_I2cSlv_MainTask
  8155 ;; This function uses a non-reentrant model
  8156 ;;
  8157                           
  8158                           
  8159                           ;psect for function _I2c_SetConfig
  8160  1429                     _I2c_SetConfig:	
  8161                           
  8162                           ;i2c_slv.c: 84: I2cConfig.I2cModuleMode = ((UINT8)(0b0110));
  8163                           
  8164                           ;incstack = 0
  8165                           ; Regs used in _I2c_SetConfig: [wreg+status,2]
  8166  1429  3006               	movlw	6
  8167  142A  0020               	movlb	0	; select bank0
  8168  142B  00A0               	movwf	??_I2c_SetConfig
  8169  142C  0820               	movf	??_I2c_SetConfig,w
  8170  142D  0022               	movlb	2	; select bank2
  8171  142E  00DA               	movwf	_I2cConfig^(0+256)
  8172                           
  8173                           ;i2c_slv.c: 85: I2cConfig.I2cReceiverEnable = ((UINT8)(0));
  8174  142F  01DB               	clrf	(_I2cConfig^(0+256)+1)
  8175                           
  8176                           ;i2c_slv.c: 86: I2cConfig.EnableI2cModule = ((UINT8)(1));
  8177  1430  01DC               	clrf	(_I2cConfig^(0+256)+2)
  8178  1431  0ADC               	incf	(_I2cConfig^(0+256)+2),f
  8179                           
  8180                           ;i2c_slv.c: 87: I2cConfig.ClockStretchEnable = ((UINT8)(0));
  8181  1432  01DD               	clrf	(_I2cConfig^(0+256)+3)
  8182                           
  8183                           ;i2c_slv.c: 88: I2cConfig.StopCondIntEnable = ((UINT8)(1));
  8184  1433  01DE               	clrf	(_I2cConfig^(0+256)+4)
  8185  1434  0ADE               	incf	(_I2cConfig^(0+256)+4),f
  8186                           
  8187                           ;i2c_slv.c: 89: I2cConfig.StartCondIntEnable = ((UINT8)(1));
  8188  1435  01DF               	clrf	(_I2cConfig^(0+256)+5)
  8189  1436  0ADF               	incf	(_I2cConfig^(0+256)+5),f
  8190                           
  8191                           ;i2c_slv.c: 90: I2cConfig.BufferOverwriteEnable = ((UINT8)(0));
  8192  1437  01E0               	clrf	(_I2cConfig^(0+256)+6)
  8193                           
  8194                           ;i2c_slv.c: 91: I2cConfig.BusCollisionDetectEnable = ((UINT8)(0));
  8195  1438  01E1               	clrf	(_I2cConfig^(0+256)+7)
  8196                           
  8197                           ;i2c_slv.c: 92: I2cConfig.AddrHoldEnable = ((UINT8)(0));
  8198  1439  01E2               	clrf	(_I2cConfig^(0+256)+8)
  8199                           
  8200                           ;i2c_slv.c: 93: I2cConfig.DataHoldEnable = ((UINT8)(0));
  8201  143A  01E3               	clrf	(_I2cConfig^(0+256)+9)
  8202                           
  8203                           ;i2c_slv.c: 94: I2cConfig.GeneralCallEnable = ((UINT8)(0));
  8204  143B  01E4               	clrf	(_I2cConfig^(0+256)+10)
  8205  143C  0008               	return
  8206  143D                     __end_of_I2c_SetConfig:	
  8207                           
  8208                           	psect	text27
  8209  0E84                     __ptext27:	
  8210 ;; *************** function _I2c_InitI2cModule *****************
  8211 ;; Defined at:
  8212 ;;		line 206 in file "../../../../../Framework/MercuryFwk/Source/c/01_Hal/02_Drv/i2c_slv_drv.c"
  8213 ;; Parameters:    Size  Location     Type
  8214 ;;  I2cConfig       1    wreg     PTR struct _I2cConfig
  8215 ;;		 -> I2cConfig(11), 
  8216 ;; Auto vars:     Size  Location     Type
  8217 ;;  I2cConfig       1    4[BANK0 ] PTR struct _I2cConfig
  8218 ;;		 -> I2cConfig(11), 
  8219 ;; Return value:  Size  Location     Type
  8220 ;;                  1    wreg      void 
  8221 ;; Registers used:
  8222 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8223 ;; Tracked objects:
  8224 ;;		On entry : 0/0
  8225 ;;		On exit  : 0/0
  8226 ;;		Unchanged: 0/0
  8227 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8228 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8229 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8230 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8231 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8232 ;;Total ram usage:        3 bytes
  8233 ;; Hardware stack levels used:    1
  8234 ;; Hardware stack levels required when called:    3
  8235 ;; This function calls:
  8236 ;;		_ClearRxBuffer
  8237 ;;		_ClearTxBuffer
  8238 ;; This function is called by:
  8239 ;;		_I2cSlv_MainTask
  8240 ;; This function uses a non-reentrant model
  8241 ;;
  8242                           
  8243                           
  8244                           ;psect for function _I2c_InitI2cModule
  8245  0E84                     _I2c_InitI2cModule:	
  8246                           
  8247                           ;incstack = 0
  8248                           ; Regs used in _I2c_InitI2cModule: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  8249                           ;I2c_InitI2cModule@I2cConfig stored from wreg
  8250  0E84  0020               	movlb	0	; select bank0
  8251  0E85  00A4               	movwf	I2c_InitI2cModule@I2cConfig
  8252                           
  8253                           ;i2c_slv_drv.c: 209: TRISBbits.TRISB6 = ((UINT8)(1));
  8254  0E86  0021               	movlb	1	; select bank1
  8255  0E87  170D               	bsf	13,6	;volatile
  8256                           
  8257                           ;i2c_slv_drv.c: 210: TRISBbits.TRISB4 = ((UINT8)(1));
  8258  0E88  160D               	bsf	13,4	;volatile
  8259                           
  8260                           ;i2c_slv_drv.c: 214: SSP1CON1 |= (I2cConfig->I2cModuleMode) << ((UINT8)(0));
  8261  0E89  0020               	movlb	0	; select bank0
  8262  0E8A  0824               	movf	I2c_InitI2cModule@I2cConfig,w
  8263  0E8B  0086               	movwf	6
  8264  0E8C  3001               	movlw	1	; select bank2/3
  8265  0E8D  0087               	movwf	7
  8266  0E8E  0801               	movf	1,w
  8267  0E8F  00A2               	movwf	??_I2c_InitI2cModule
  8268  0E90  0822               	movf	??_I2c_InitI2cModule,w
  8269  0E91  0024               	movlb	4	; select bank4
  8270  0E92  0495               	iorwf	21,f	;volatile
  8271                           
  8272                           ;i2c_slv_drv.c: 217: SSP1CON2 |= (I2cConfig->I2cReceiverEnable) << ((UINT8)(3));
  8273  0E93  0020               	movlb	0	; select bank0
  8274  0E94  0A24               	incf	I2c_InitI2cModule@I2cConfig,w
  8275  0E95  0086               	movwf	6
  8276  0E96  3001               	movlw	1	; select bank2/3
  8277  0E97  0087               	movwf	7
  8278  0E98  0801               	movf	1,w
  8279  0E99  00A2               	movwf	??_I2c_InitI2cModule
  8280  0E9A  3002               	movlw	2
  8281  0E9B                     u5595:	
  8282  0E9B  35A2               	lslf	??_I2c_InitI2cModule,f
  8283  0E9C  3EFF               	addlw	-1
  8284  0E9D  1D03               	skipz
  8285  0E9E  2E9B               	goto	u5595
  8286  0E9F  3522               	lslf	??_I2c_InitI2cModule,w
  8287  0EA0  00A3               	movwf	??_I2c_InitI2cModule+1
  8288  0EA1  0823               	movf	??_I2c_InitI2cModule+1,w
  8289  0EA2  0024               	movlb	4	; select bank4
  8290  0EA3  0496               	iorwf	22,f	;volatile
  8291                           
  8292                           ;i2c_slv_drv.c: 218: SSP1CON2 |= (I2cConfig->ClockStretchEnable) << ((UINT8)(0));
  8293  0EA4  0020               	movlb	0	; select bank0
  8294  0EA5  0824               	movf	I2c_InitI2cModule@I2cConfig,w
  8295  0EA6  3E03               	addlw	3
  8296  0EA7  0086               	movwf	6
  8297  0EA8  3001               	movlw	1	; select bank2/3
  8298  0EA9  0087               	movwf	7
  8299  0EAA  0801               	movf	1,w
  8300  0EAB  00A2               	movwf	??_I2c_InitI2cModule
  8301  0EAC  0822               	movf	??_I2c_InitI2cModule,w
  8302  0EAD  0024               	movlb	4	; select bank4
  8303  0EAE  0496               	iorwf	22,f	;volatile
  8304                           
  8305                           ;i2c_slv_drv.c: 219: SSP1CON2 |= (I2cConfig->GeneralCallEnable) << ((UINT8)(7));
  8306  0EAF  0020               	movlb	0	; select bank0
  8307  0EB0  0824               	movf	I2c_InitI2cModule@I2cConfig,w
  8308  0EB1  3E0A               	addlw	10
  8309  0EB2  0086               	movwf	6
  8310  0EB3  3001               	movlw	1	; select bank2/3
  8311  0EB4  0087               	movwf	7
  8312  0EB5  0801               	movf	1,w
  8313  0EB6  00A2               	movwf	??_I2c_InitI2cModule
  8314  0EB7  3006               	movlw	6
  8315  0EB8                     u5605:	
  8316  0EB8  35A2               	lslf	??_I2c_InitI2cModule,f
  8317  0EB9  3EFF               	addlw	-1
  8318  0EBA  1D03               	skipz
  8319  0EBB  2EB8               	goto	u5605
  8320  0EBC  3522               	lslf	??_I2c_InitI2cModule,w
  8321  0EBD  00A3               	movwf	??_I2c_InitI2cModule+1
  8322  0EBE  0823               	movf	??_I2c_InitI2cModule+1,w
  8323  0EBF  0024               	movlb	4	; select bank4
  8324  0EC0  0496               	iorwf	22,f	;volatile
  8325                           
  8326                           ;i2c_slv_drv.c: 222: SSP1CON3 |= (I2cConfig->StopCondIntEnable) << ((UINT8)(6));
  8327  0EC1  0020               	movlb	0	; select bank0
  8328  0EC2  0824               	movf	I2c_InitI2cModule@I2cConfig,w
  8329  0EC3  3E04               	addlw	4
  8330  0EC4  0086               	movwf	6
  8331  0EC5  3001               	movlw	1	; select bank2/3
  8332  0EC6  0087               	movwf	7
  8333  0EC7  0801               	movf	1,w
  8334  0EC8  00A2               	movwf	??_I2c_InitI2cModule
  8335  0EC9  3005               	movlw	5
  8336  0ECA                     u5615:	
  8337  0ECA  35A2               	lslf	??_I2c_InitI2cModule,f
  8338  0ECB  3EFF               	addlw	-1
  8339  0ECC  1D03               	skipz
  8340  0ECD  2ECA               	goto	u5615
  8341  0ECE  3522               	lslf	??_I2c_InitI2cModule,w
  8342  0ECF  00A3               	movwf	??_I2c_InitI2cModule+1
  8343  0ED0  0823               	movf	??_I2c_InitI2cModule+1,w
  8344  0ED1  0024               	movlb	4	; select bank4
  8345  0ED2  0497               	iorwf	23,f	;volatile
  8346                           
  8347                           ;i2c_slv_drv.c: 223: SSP1CON3 |= (I2cConfig->StartCondIntEnable) << ((UINT8)(5));
  8348  0ED3  0020               	movlb	0	; select bank0
  8349  0ED4  0824               	movf	I2c_InitI2cModule@I2cConfig,w
  8350  0ED5  3E05               	addlw	5
  8351  0ED6  0086               	movwf	6
  8352  0ED7  3001               	movlw	1	; select bank2/3
  8353  0ED8  0087               	movwf	7
  8354  0ED9  0801               	movf	1,w
  8355  0EDA  00A2               	movwf	??_I2c_InitI2cModule
  8356  0EDB  3004               	movlw	4
  8357  0EDC                     u5625:	
  8358  0EDC  35A2               	lslf	??_I2c_InitI2cModule,f
  8359  0EDD  3EFF               	addlw	-1
  8360  0EDE  1D03               	skipz
  8361  0EDF  2EDC               	goto	u5625
  8362  0EE0  3522               	lslf	??_I2c_InitI2cModule,w
  8363  0EE1  00A3               	movwf	??_I2c_InitI2cModule+1
  8364  0EE2  0823               	movf	??_I2c_InitI2cModule+1,w
  8365  0EE3  0024               	movlb	4	; select bank4
  8366  0EE4  0497               	iorwf	23,f	;volatile
  8367                           
  8368                           ;i2c_slv_drv.c: 224: SSP1CON3 |= (I2cConfig->BufferOverwriteEnable) << ((UINT8)(4));
  8369  0EE5  0020               	movlb	0	; select bank0
  8370  0EE6  0824               	movf	I2c_InitI2cModule@I2cConfig,w
  8371  0EE7  3E06               	addlw	6
  8372  0EE8  0086               	movwf	6
  8373  0EE9  3001               	movlw	1	; select bank2/3
  8374  0EEA  0087               	movwf	7
  8375  0EEB  0801               	movf	1,w
  8376  0EEC  00A2               	movwf	??_I2c_InitI2cModule
  8377  0EED  3003               	movlw	3
  8378  0EEE                     u5635:	
  8379  0EEE  35A2               	lslf	??_I2c_InitI2cModule,f
  8380  0EEF  3EFF               	addlw	-1
  8381  0EF0  1D03               	skipz
  8382  0EF1  2EEE               	goto	u5635
  8383  0EF2  3522               	lslf	??_I2c_InitI2cModule,w
  8384  0EF3  00A3               	movwf	??_I2c_InitI2cModule+1
  8385  0EF4  0823               	movf	??_I2c_InitI2cModule+1,w
  8386  0EF5  0024               	movlb	4	; select bank4
  8387  0EF6  0497               	iorwf	23,f	;volatile
  8388                           
  8389                           ;i2c_slv_drv.c: 225: SSP1CON3 |= (I2cConfig->BusCollisionDetectEnable) << ((UINT8)(2));
  8390  0EF7  0020               	movlb	0	; select bank0
  8391  0EF8  0824               	movf	I2c_InitI2cModule@I2cConfig,w
  8392  0EF9  3E07               	addlw	7
  8393  0EFA  0086               	movwf	6
  8394  0EFB  3001               	movlw	1	; select bank2/3
  8395  0EFC  0087               	movwf	7
  8396  0EFD  0801               	movf	1,w
  8397  0EFE  00A2               	movwf	??_I2c_InitI2cModule
  8398  0EFF  3001               	movlw	1
  8399  0F00                     u5645:	
  8400  0F00  35A2               	lslf	??_I2c_InitI2cModule,f
  8401  0F01  3EFF               	addlw	-1
  8402  0F02  1D03               	skipz
  8403  0F03  2F00               	goto	u5645
  8404  0F04  3522               	lslf	??_I2c_InitI2cModule,w
  8405  0F05  00A3               	movwf	??_I2c_InitI2cModule+1
  8406  0F06  0823               	movf	??_I2c_InitI2cModule+1,w
  8407  0F07  0024               	movlb	4	; select bank4
  8408  0F08  0497               	iorwf	23,f	;volatile
  8409                           
  8410                           ;i2c_slv_drv.c: 226: SSP1CON3 |= (I2cConfig->AddrHoldEnable) << ((UINT8)(1));
  8411  0F09  0020               	movlb	0	; select bank0
  8412  0F0A  0824               	movf	I2c_InitI2cModule@I2cConfig,w
  8413  0F0B  3E08               	addlw	8
  8414  0F0C  0086               	movwf	6
  8415  0F0D  3001               	movlw	1	; select bank2/3
  8416  0F0E  0087               	movwf	7
  8417  0F0F  3501               	lslf	1,w
  8418  0F10  00A2               	movwf	??_I2c_InitI2cModule
  8419  0F11  0822               	movf	??_I2c_InitI2cModule,w
  8420  0F12  0024               	movlb	4	; select bank4
  8421  0F13  0497               	iorwf	23,f	;volatile
  8422                           
  8423                           ;i2c_slv_drv.c: 227: SSP1CON3 |= (I2cConfig->DataHoldEnable) << ((UINT8)(0));
  8424  0F14  0020               	movlb	0	; select bank0
  8425  0F15  0824               	movf	I2c_InitI2cModule@I2cConfig,w
  8426  0F16  3E09               	addlw	9
  8427  0F17  0086               	movwf	6
  8428  0F18  3001               	movlw	1	; select bank2/3
  8429  0F19  0087               	movwf	7
  8430  0F1A  0801               	movf	1,w
  8431  0F1B  00A2               	movwf	??_I2c_InitI2cModule
  8432  0F1C  0822               	movf	??_I2c_InitI2cModule,w
  8433  0F1D  0024               	movlb	4	; select bank4
  8434  0F1E  0497               	iorwf	23,f	;volatile
  8435                           
  8436                           ;i2c_slv_drv.c: 230: SSP1CON1 |= (I2cConfig->EnableI2cModule) << ((UINT8)(5));
  8437  0F1F  0020               	movlb	0	; select bank0
  8438  0F20  0824               	movf	I2c_InitI2cModule@I2cConfig,w
  8439  0F21  3E02               	addlw	2
  8440  0F22  0086               	movwf	6
  8441  0F23  3001               	movlw	1	; select bank2/3
  8442  0F24  0087               	movwf	7
  8443  0F25  0801               	movf	1,w
  8444  0F26  00A2               	movwf	??_I2c_InitI2cModule
  8445  0F27  3004               	movlw	4
  8446  0F28                     u5655:	
  8447  0F28  35A2               	lslf	??_I2c_InitI2cModule,f
  8448  0F29  3EFF               	addlw	-1
  8449  0F2A  1D03               	skipz
  8450  0F2B  2F28               	goto	u5655
  8451  0F2C  3522               	lslf	??_I2c_InitI2cModule,w
  8452  0F2D  00A3               	movwf	??_I2c_InitI2cModule+1
  8453  0F2E  0823               	movf	??_I2c_InitI2cModule+1,w
  8454  0F2F  0024               	movlb	4	; select bank4
  8455  0F30  0495               	iorwf	21,f	;volatile
  8456                           
  8457                           ;i2c_slv_drv.c: 233: PIR1bits.SSP1IF = ((UINT8)(0));
  8458  0F31  0020               	movlb	0	; select bank0
  8459  0F32  1191               	bcf	17,3	;volatile
  8460                           
  8461                           ;i2c_slv_drv.c: 234: PIE1bits.SSP1IE = ((UINT8)(1));
  8462  0F33  0021               	movlb	1	; select bank1
  8463  0F34  1591               	bsf	17,3	;volatile
  8464                           
  8465                           ;i2c_slv_drv.c: 237: ClearRxBuffer();
  8466  0F35  3194  2407  318E   	fcall	_ClearRxBuffer
  8467                           
  8468                           ;i2c_slv_drv.c: 238: ClearTxBuffer();
  8469  0F38  3194  2418         	fcall	_ClearTxBuffer
  8470  0F3A  0008               	return
  8471  0F3B                     __end_of_I2c_InitI2cModule:	
  8472                           
  8473                           	psect	text28
  8474  1418                     __ptext28:	
  8475 ;; *************** function _ClearTxBuffer *****************
  8476 ;; Defined at:
  8477 ;;		line 183 in file "../../../../../Framework/MercuryFwk/Source/c/01_Hal/02_Drv/i2c_slv_drv.c"
  8478 ;; Parameters:    Size  Location     Type
  8479 ;;		None
  8480 ;; Auto vars:     Size  Location     Type
  8481 ;;  Index           1    1[BANK0 ] unsigned char 
  8482 ;; Return value:  Size  Location     Type
  8483 ;;                  1    wreg      void 
  8484 ;; Registers used:
  8485 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  8486 ;; Tracked objects:
  8487 ;;		On entry : 0/0
  8488 ;;		On exit  : 0/0
  8489 ;;		Unchanged: 0/0
  8490 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8491 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8492 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8493 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8494 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8495 ;;Total ram usage:        2 bytes
  8496 ;; Hardware stack levels used:    1
  8497 ;; Hardware stack levels required when called:    2
  8498 ;; This function calls:
  8499 ;;		Nothing
  8500 ;; This function is called by:
  8501 ;;		_I2c_InitI2cModule
  8502 ;;		_I2c_DataReceiveSm
  8503 ;; This function uses a non-reentrant model
  8504 ;;
  8505                           
  8506                           
  8507                           ;psect for function _ClearTxBuffer
  8508  1418                     _ClearTxBuffer:	
  8509                           
  8510                           ;i2c_slv_drv.c: 185: UINT8 Index;
  8511                           ;i2c_slv_drv.c: 188: for (Index = 0; Index < ((UINT8)(80)); Index++)
  8512                           
  8513                           ;incstack = 0
  8514                           ; Regs used in _ClearTxBuffer: [wreg+fsr1l+fsr1h+status,2+status,0]
  8515  1418  0020               	movlb	0	; select bank0
  8516  1419  01A1               	clrf	ClearTxBuffer@Index
  8517  141A                     L8:	
  8518  141A  3050               	movlw	80
  8519  141B  0221               	subwf	ClearTxBuffer@Index,w
  8520  141C  1803               	btfsc	3,0
  8521  141D  0008               	return
  8522                           
  8523                           ;i2c_slv_drv.c: 189: {
  8524                           ;i2c_slv_drv.c: 190: I2cTxBuffer[Index] = 0x00;
  8525  141E  0821               	movf	ClearTxBuffer@Index,w
  8526  141F  3EA0               	addlw	(low (_I2cTxBuffer| (0+768)))& (0+255)
  8527  1420  0086               	movwf	6
  8528  1421  3003               	movlw	3	; select bank7/8
  8529  1422  0087               	movwf	7
  8530  1423  0181               	clrf	1
  8531  1424  3001               	movlw	1
  8532  1425  00A0               	movwf	??_ClearTxBuffer
  8533  1426  0820               	movf	??_ClearTxBuffer,w
  8534  1427  07A1               	addwf	ClearTxBuffer@Index,f
  8535  1428  2C1A               	goto	L8
  8536  1429                     __end_of_ClearTxBuffer:	
  8537                           
  8538                           	psect	text29
  8539  1407                     __ptext29:	
  8540 ;; *************** function _ClearRxBuffer *****************
  8541 ;; Defined at:
  8542 ;;		line 164 in file "../../../../../Framework/MercuryFwk/Source/c/01_Hal/02_Drv/i2c_slv_drv.c"
  8543 ;; Parameters:    Size  Location     Type
  8544 ;;		None
  8545 ;; Auto vars:     Size  Location     Type
  8546 ;;  Index           1    1[BANK0 ] unsigned char 
  8547 ;; Return value:  Size  Location     Type
  8548 ;;                  1    wreg      void 
  8549 ;; Registers used:
  8550 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  8551 ;; Tracked objects:
  8552 ;;		On entry : 0/0
  8553 ;;		On exit  : 0/0
  8554 ;;		Unchanged: 0/0
  8555 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8556 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8557 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8558 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8559 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8560 ;;Total ram usage:        2 bytes
  8561 ;; Hardware stack levels used:    1
  8562 ;; Hardware stack levels required when called:    2
  8563 ;; This function calls:
  8564 ;;		Nothing
  8565 ;; This function is called by:
  8566 ;;		_I2c_InitI2cModule
  8567 ;;		_I2c_DataReceiveSm
  8568 ;; This function uses a non-reentrant model
  8569 ;;
  8570                           
  8571                           
  8572                           ;psect for function _ClearRxBuffer
  8573  1407                     _ClearRxBuffer:	
  8574                           
  8575                           ;i2c_slv_drv.c: 166: UINT8 Index;
  8576                           ;i2c_slv_drv.c: 169: for (Index = 0; Index < ((UINT8)(80)); Index++)
  8577                           
  8578                           ;incstack = 0
  8579                           ; Regs used in _ClearRxBuffer: [wreg+fsr1l+fsr1h+status,2+status,0]
  8580  1407  0020               	movlb	0	; select bank0
  8581  1408  01A1               	clrf	ClearRxBuffer@Index
  8582  1409                     L9:	
  8583  1409  3050               	movlw	80
  8584  140A  0221               	subwf	ClearRxBuffer@Index,w
  8585  140B  1803               	btfsc	3,0
  8586  140C  0008               	return
  8587                           
  8588                           ;i2c_slv_drv.c: 170: {
  8589                           ;i2c_slv_drv.c: 171: I2cRxBuffer[Index] = 0x00;
  8590  140D  0821               	movf	ClearRxBuffer@Index,w
  8591  140E  3E20               	addlw	(low (_I2cRxBuffer| (0+1024)))& (0+255)
  8592  140F  0086               	movwf	6
  8593  1410  3004               	movlw	4	; select bank8/9
  8594  1411  0087               	movwf	7
  8595  1412  0181               	clrf	1
  8596  1413  3001               	movlw	1
  8597  1414  00A0               	movwf	??_ClearRxBuffer
  8598  1415  0820               	movf	??_ClearRxBuffer,w
  8599  1416  07A1               	addwf	ClearRxBuffer@Index,f
  8600  1417  2C09               	goto	L9
  8601  1418                     __end_of_ClearRxBuffer:	
  8602                           
  8603                           	psect	text30
  8604  0A55                     __ptext30:	
  8605 ;; *************** function _I2cSlv_I2cDrvHandle *****************
  8606 ;; Defined at:
  8607 ;;		line 141 in file "../../../../../Framework/MercuryFwk/Source/c/03_Sml/01_Pml/01_SlvI2c/i2c_slv.c"
  8608 ;; Parameters:    Size  Location     Type
  8609 ;;		None
  8610 ;; Auto vars:     Size  Location     Type
  8611 ;;  Index           1   10[BANK0 ] unsigned char 
  8612 ;; Return value:  Size  Location     Type
  8613 ;;                  1    wreg      void 
  8614 ;; Registers used:
  8615 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8616 ;; Tracked objects:
  8617 ;;		On entry : 0/0
  8618 ;;		On exit  : 0/0
  8619 ;;		Unchanged: 0/0
  8620 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8621 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8622 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8623 ;;      Temps:          0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8624 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8625 ;;Total ram usage:        6 bytes
  8626 ;; Hardware stack levels used:    1
  8627 ;; Hardware stack levels required when called:    3
  8628 ;; This function calls:
  8629 ;;		_GenerateEvt
  8630 ;;		_I2c_SetI2cAddress
  8631 ;;		_I2c_SetI2cAddressMask
  8632 ;;		_I2c_UpdateTxBuffer
  8633 ;;		_ReceiveEvt
  8634 ;; This function is called by:
  8635 ;;		_I2cSlv_MainTask
  8636 ;; This function uses a non-reentrant model
  8637 ;;
  8638                           
  8639                           
  8640                           ;psect for function _I2cSlv_I2cDrvHandle
  8641  0A55                     _I2cSlv_I2cDrvHandle:	
  8642                           
  8643                           ;i2c_slv.c: 143: static I2cReceiveMsgStateType I2cReceiveMsgState = I2cSetSlaveAddres;
  8644                           ;i2c_slv.c: 144: UINT8 Index = 0;
  8645                           
  8646                           ;incstack = 0
  8647                           ; Regs used in _I2cSlv_I2cDrvHandle: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  8648  0A55  0020               	movlb	0	; select bank0
  8649  0A56  01AA               	clrf	I2cSlv_I2cDrvHandle@Index
  8650                           
  8651                           ;i2c_slv.c: 146: switch (I2cReceiveMsgState)
  8652  0A57  2ACF               	goto	l5142
  8653  0A58                     l5108:	
  8654                           ;i2c_slv.c: 147: {
  8655                           ;i2c_slv.c: 148: case I2cSetSlaveAddres:
  8656                           
  8657                           
  8658                           ;i2c_slv.c: 150: if (ReceiveEvt(&I2cSetAddress))
  8659  0A58  3067               	movlw	low _I2cSetAddress
  8660  0A59  0020               	movlb	0	; select bank0
  8661  0A5A  00A0               	movwf	ReceiveEvt@Event
  8662  0A5B  3001               	movlw	high _I2cSetAddress
  8663  0A5C  00A1               	movwf	ReceiveEvt@Event+1
  8664  0A5D  3195  25E3  318A   	fcall	_ReceiveEvt
  8665  0A60  3A00               	xorlw	0
  8666  0A61  1903               	skipnz
  8667  0A62  0008               	return
  8668                           
  8669                           ;i2c_slv.c: 151: {
  8670                           ;i2c_slv.c: 153: I2c_SetI2cAddress(I2cSlaveAddress);
  8671  0A63  0876               	movf	_I2cSlaveAddress,w
  8672  0A64  3193  2310  318A   	fcall	_I2c_SetI2cAddress
  8673                           
  8674                           ;i2c_slv.c: 154: I2c_SetI2cAddressMask(((UINT8)(0x7F)));
  8675  0A67  307F               	movlw	127
  8676  0A68  3193  2316         	fcall	_I2c_SetI2cAddressMask
  8677                           
  8678                           ;i2c_slv.c: 156: I2cReceiveMsgState = I2cReceiveData;
  8679  0A6A  0021               	movlb	1	; select bank1
  8680  0A6B  01E4               	clrf	I2cSlv_I2cDrvHandle@I2cReceiveMsgState^(0+128)
  8681  0A6C  0AE4               	incf	I2cSlv_I2cDrvHandle@I2cReceiveMsgState^(0+128),f
  8682                           
  8683                           ;i2c_slv.c: 157: }
  8684                           ;i2c_slv.c: 158: break;
  8685  0A6D  0008               	return
  8686  0A6E                     l5114:	
  8687                           ;i2c_slv.c: 160: case I2cReceiveData:
  8688                           
  8689                           
  8690                           ;i2c_slv.c: 162: if (ReceiveEvt(&I2cNewPacketNotification))
  8691  0A6E  30EC               	movlw	low _I2cNewPacketNotification
  8692  0A6F  0020               	movlb	0	; select bank0
  8693  0A70  00A0               	movwf	ReceiveEvt@Event
  8694  0A71  3000               	movlw	high _I2cNewPacketNotification
  8695  0A72  00A1               	movwf	ReceiveEvt@Event+1
  8696  0A73  3195  25E3  318A   	fcall	_ReceiveEvt
  8697  0A76  3A00               	xorlw	0
  8698  0A77  1903               	skipnz
  8699  0A78  2ABB               	goto	l5136
  8700                           
  8701                           ;i2c_slv.c: 163: {
  8702                           ;i2c_slv.c: 165: if ((I2cPacket.SlaveAddress == I2cSlaveAddress) || (I2cPacket.SlaveAddr
      +                          ess == ((UINT8)(0x00))))
  8703  0A79  309D               	movlw	157
  8704  0A7A  0086               	movwf	6
  8705  0A7B  3023               	movlw	35
  8706  0A7C  0087               	movwf	7
  8707  0A7D  0801               	movf	1,w
  8708  0A7E  0676               	xorwf	_I2cSlaveAddress,w
  8709  0A7F  1903               	skipnz
  8710  0A80  2A88               	goto	l5120
  8711  0A81  309D               	movlw	157
  8712  0A82  0086               	movwf	6
  8713  0A83  3023               	movlw	35
  8714  0A84  0087               	movwf	7
  8715  0A85  0801               	movf	1,w
  8716  0A86  1D03               	btfss	3,2
  8717  0A87  0008               	return
  8718  0A88                     l5120:	
  8719                           
  8720                           ;i2c_slv.c: 166: {
  8721                           ;i2c_slv.c: 167: if (I2cPacket.ReadWrite == ((UINT8)(0)))
  8722  0A88  309D               	movlw	157
  8723  0A89  0086               	movwf	6
  8724  0A8A  3023               	movlw	35
  8725  0A8B  0087               	movwf	7
  8726  0A8C  3141               	addfsr 1,1
  8727  0A8D  0801               	movf	1,w
  8728  0A8E  1D03               	btfss	3,2
  8729  0A8F  0008               	return
  8730                           
  8731                           ;i2c_slv.c: 168: {
  8732                           ;i2c_slv.c: 170: for (Index = 0; Index < ((UINT8)(80));Index++)
  8733  0A90  0020               	movlb	0	; select bank0
  8734  0A91  01AA               	clrf	I2cSlv_I2cDrvHandle@Index
  8735  0A92  3050               	movlw	80
  8736  0A93  022A               	subwf	I2cSlv_I2cDrvHandle@Index,w
  8737  0A94  1803               	btfsc	3,0
  8738  0A95  2AB4               	goto	l5134
  8739  0A96                     l5128:	
  8740                           
  8741                           ;i2c_slv.c: 171: {
  8742                           ;i2c_slv.c: 172: CmdBuffer[Index] = I2cPacket.Buffer[Index];
  8743  0A96  082A               	movf	I2cSlv_I2cDrvHandle@Index,w
  8744  0A97  00A5               	movwf	??_I2cSlv_I2cDrvHandle
  8745  0A98  01A6               	clrf	??_I2cSlv_I2cDrvHandle+1
  8746  0A99  309F               	movlw	159
  8747  0A9A  00A7               	movwf	??_I2cSlv_I2cDrvHandle+2
  8748  0A9B  3023               	movlw	35
  8749  0A9C  00A8               	movwf	??_I2cSlv_I2cDrvHandle+3
  8750  0A9D  0825               	movf	??_I2cSlv_I2cDrvHandle,w
  8751  0A9E  0727               	addwf	??_I2cSlv_I2cDrvHandle+2,w
  8752  0A9F  0086               	movwf	6
  8753  0AA0  0826               	movf	??_I2cSlv_I2cDrvHandle+1,w
  8754  0AA1  3D28               	addwfc	??_I2cSlv_I2cDrvHandle+3,w
  8755  0AA2  0087               	movwf	7
  8756  0AA3  0801               	movf	1,w
  8757  0AA4  00A9               	movwf	??_I2cSlv_I2cDrvHandle+4
  8758  0AA5  082A               	movf	I2cSlv_I2cDrvHandle@Index,w
  8759  0AA6  3E20               	addlw	(low (_CmdBuffer| (0+768)))& (0+255)
  8760  0AA7  0086               	movwf	6
  8761  0AA8  3003               	movlw	3	; select bank6/7
  8762  0AA9  0087               	movwf	7
  8763  0AAA  0829               	movf	??_I2cSlv_I2cDrvHandle+4,w
  8764  0AAB  0081               	movwf	1
  8765  0AAC  3001               	movlw	1
  8766  0AAD  00A5               	movwf	??_I2cSlv_I2cDrvHandle
  8767  0AAE  0825               	movf	??_I2cSlv_I2cDrvHandle,w
  8768  0AAF  07AA               	addwf	I2cSlv_I2cDrvHandle@Index,f
  8769  0AB0  3050               	movlw	80
  8770  0AB1  022A               	subwf	I2cSlv_I2cDrvHandle@Index,w
  8771  0AB2  1C03               	skipc
  8772  0AB3  2A96               	goto	l5128
  8773  0AB4                     l5134:	
  8774                           
  8775                           ;i2c_slv.c: 173: }
  8776                           ;i2c_slv.c: 175: GenerateEvt(&I2cWriteRequest);
  8777  0AB4  3069               	movlw	low _I2cWriteRequest
  8778  0AB5  00A0               	movwf	GenerateEvt@Event
  8779  0AB6  3001               	movlw	high _I2cWriteRequest
  8780  0AB7  00A1               	movwf	GenerateEvt@Event+1
  8781  0AB8  3195  256B         	fcall	_GenerateEvt
  8782                           
  8783                           ;i2c_slv.c: 176: }
  8784                           ;i2c_slv.c: 177: }
  8785                           ;i2c_slv.c: 178: }
  8786  0ABA  0008               	return
  8787  0ABB                     l5136:	
  8788                           
  8789                           ;i2c_slv.c: 180: else if (ReceiveEvt(&I2cReplyPacketReady))
  8790  0ABB  3078               	movlw	low _I2cReplyPacketReady
  8791  0ABC  0020               	movlb	0	; select bank0
  8792  0ABD  00A0               	movwf	ReceiveEvt@Event
  8793  0ABE  3000               	movlw	high _I2cReplyPacketReady
  8794  0ABF  00A1               	movwf	ReceiveEvt@Event+1
  8795  0AC0  3195  25E3  318A   	fcall	_ReceiveEvt
  8796  0AC3  3A00               	xorlw	0
  8797  0AC4  1903               	skipnz
  8798  0AC5  0008               	return
  8799                           
  8800                           ;i2c_slv.c: 181: {
  8801                           ;i2c_slv.c: 183: I2c_UpdateTxBuffer(RepBuffer,RepBufferLen);
  8802  0AC6  0877               	movf	_RepBufferLen,w
  8803  0AC7  0020               	movlb	0	; select bank0
  8804  0AC8  00A5               	movwf	??_I2cSlv_I2cDrvHandle
  8805  0AC9  0825               	movf	??_I2cSlv_I2cDrvHandle,w
  8806  0ACA  00A0               	movwf	I2c_UpdateTxBuffer@Length
  8807  0ACB  3020               	movlw	(low (_RepBuffer| (0+512)))& (0+255)
  8808  0ACC  3194  24E3         	fcall	_I2c_UpdateTxBuffer
  8809                           
  8810                           ;i2c_slv.c: 189: }
  8811                           
  8812                           ;i2c_slv.c: 188: break;
  8813                           
  8814                           ;i2c_slv.c: 187: default:
  8815                           
  8816                           ;i2c_slv.c: 184: }
  8817                           ;i2c_slv.c: 185: break;
  8818  0ACE  0008               	return
  8819  0ACF                     l5142:	
  8820  0ACF  0021               	movlb	1	; select bank1
  8821  0AD0  0864               	movf	I2cSlv_I2cDrvHandle@I2cReceiveMsgState^(0+128),w
  8822                           
  8823                           ; Switch size 1, requested type "space"
  8824                           ; Number of cases is 2, Range of values is 0 to 1
  8825                           ; switch strategies available:
  8826                           ; Name         Instructions Cycles
  8827                           ; simple_byte            7     4 (average)
  8828                           ; direct_byte           10     6 (fixed)
  8829                           ; jumptable            260     6 (fixed)
  8830                           ;	Chosen strategy is simple_byte
  8831  0AD1  3A00               	xorlw	0	; case 0
  8832  0AD2  1903               	skipnz
  8833  0AD3  2A58               	goto	l5108
  8834  0AD4  3A01               	xorlw	1	; case 1
  8835  0AD5  1903               	skipnz
  8836  0AD6  2A6E               	goto	l5114
  8837  0AD7  2AD8               	goto	l516
  8838  0AD8                     l516:	
  8839  0AD8  0008               	return
  8840  0AD9                     __end_of_I2cSlv_I2cDrvHandle:	
  8841                           
  8842                           	psect	text31
  8843  14E3                     __ptext31:	
  8844 ;; *************** function _I2c_UpdateTxBuffer *****************
  8845 ;; Defined at:
  8846 ;;		line 278 in file "../../../../../Framework/MercuryFwk/Source/c/01_Hal/02_Drv/i2c_slv_drv.c"
  8847 ;; Parameters:    Size  Location     Type
  8848 ;;  DataBuffer      1    wreg     PTR unsigned char 
  8849 ;;		 -> RepBuffer(80), 
  8850 ;;  Length          1    0[BANK0 ] unsigned char 
  8851 ;; Auto vars:     Size  Location     Type
  8852 ;;  DataBuffer      1    3[BANK0 ] PTR unsigned char 
  8853 ;;		 -> RepBuffer(80), 
  8854 ;;  Index           1    4[BANK0 ] unsigned char 
  8855 ;; Return value:  Size  Location     Type
  8856 ;;                  1    wreg      void 
  8857 ;; Registers used:
  8858 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  8859 ;; Tracked objects:
  8860 ;;		On entry : 0/0
  8861 ;;		On exit  : 0/0
  8862 ;;		Unchanged: 0/0
  8863 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8864 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8865 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8866 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8867 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8868 ;;Total ram usage:        5 bytes
  8869 ;; Hardware stack levels used:    1
  8870 ;; Hardware stack levels required when called:    2
  8871 ;; This function calls:
  8872 ;;		Nothing
  8873 ;; This function is called by:
  8874 ;;		_I2cSlv_I2cDrvHandle
  8875 ;; This function uses a non-reentrant model
  8876 ;;
  8877                           
  8878                           
  8879                           ;psect for function _I2c_UpdateTxBuffer
  8880  14E3                     _I2c_UpdateTxBuffer:	
  8881                           
  8882                           ;incstack = 0
  8883                           ; Regs used in _I2c_UpdateTxBuffer: [wreg+fsr1l+fsr1h+status,2+status,0]
  8884                           ;I2c_UpdateTxBuffer@DataBuffer stored from wreg
  8885  14E3  0020               	movlb	0	; select bank0
  8886  14E4  00A3               	movwf	I2c_UpdateTxBuffer@DataBuffer
  8887                           
  8888                           ;i2c_slv_drv.c: 280: UINT8 Index = 0;
  8889  14E5  01A4               	clrf	I2c_UpdateTxBuffer@Index
  8890                           
  8891                           ;i2c_slv_drv.c: 283: for (Index = 0; Index < Length; Index++)
  8892  14E6  01A4               	clrf	I2c_UpdateTxBuffer@Index
  8893  14E7                     l4768:	
  8894  14E7  0820               	movf	I2c_UpdateTxBuffer@Length,w
  8895  14E8  0224               	subwf	I2c_UpdateTxBuffer@Index,w
  8896  14E9  1803               	btfsc	3,0
  8897  14EA  0008               	return
  8898                           
  8899                           ;i2c_slv_drv.c: 284: {
  8900                           ;i2c_slv_drv.c: 285: I2cTxBuffer[Index] = *(DataBuffer + Index);
  8901  14EB  0824               	movf	I2c_UpdateTxBuffer@Index,w
  8902  14EC  0723               	addwf	I2c_UpdateTxBuffer@DataBuffer,w
  8903  14ED  00A1               	movwf	??_I2c_UpdateTxBuffer
  8904  14EE  0821               	movf	??_I2c_UpdateTxBuffer,w
  8905  14EF  0086               	movwf	6
  8906  14F0  3002               	movlw	2	; select bank4/5
  8907  14F1  0087               	movwf	7
  8908  14F2  0801               	movf	1,w
  8909  14F3  00A2               	movwf	??_I2c_UpdateTxBuffer+1
  8910  14F4  0824               	movf	I2c_UpdateTxBuffer@Index,w
  8911  14F5  3EA0               	addlw	(low (_I2cTxBuffer| (0+768)))& (0+255)
  8912  14F6  0086               	movwf	6
  8913  14F7  3003               	movlw	3	; select bank7/8
  8914  14F8  0087               	movwf	7
  8915  14F9  0822               	movf	??_I2c_UpdateTxBuffer+1,w
  8916  14FA  0081               	movwf	1
  8917  14FB  3001               	movlw	1
  8918  14FC  00A1               	movwf	??_I2c_UpdateTxBuffer
  8919  14FD  0821               	movf	??_I2c_UpdateTxBuffer,w
  8920  14FE  07A4               	addwf	I2c_UpdateTxBuffer@Index,f
  8921  14FF  2CE7               	goto	l4768
  8922  1500                     __end_of_I2c_UpdateTxBuffer:	
  8923                           
  8924                           	psect	text32
  8925  1316                     __ptext32:	
  8926 ;; *************** function _I2c_SetI2cAddressMask *****************
  8927 ;; Defined at:
  8928 ;;		line 263 in file "../../../../../Framework/MercuryFwk/Source/c/01_Hal/02_Drv/i2c_slv_drv.c"
  8929 ;; Parameters:    Size  Location     Type
  8930 ;;  SlaveAddress    1    wreg     unsigned char 
  8931 ;; Auto vars:     Size  Location     Type
  8932 ;;  SlaveAddress    1    0[BANK0 ] unsigned char 
  8933 ;; Return value:  Size  Location     Type
  8934 ;;                  1    wreg      void 
  8935 ;; Registers used:
  8936 ;;		wreg, status,2, status,0
  8937 ;; Tracked objects:
  8938 ;;		On entry : 0/0
  8939 ;;		On exit  : 0/0
  8940 ;;		Unchanged: 0/0
  8941 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8942 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8943 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8944 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8945 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8946 ;;Total ram usage:        1 bytes
  8947 ;; Hardware stack levels used:    1
  8948 ;; Hardware stack levels required when called:    2
  8949 ;; This function calls:
  8950 ;;		Nothing
  8951 ;; This function is called by:
  8952 ;;		_I2cSlv_I2cDrvHandle
  8953 ;; This function uses a non-reentrant model
  8954 ;;
  8955                           
  8956                           
  8957                           ;psect for function _I2c_SetI2cAddressMask
  8958  1316                     _I2c_SetI2cAddressMask:	
  8959                           
  8960                           ;incstack = 0
  8961                           ; Regs used in _I2c_SetI2cAddressMask: [wreg+status,2+status,0]
  8962                           ;I2c_SetI2cAddressMask@SlaveAddressMask stored from wreg
  8963  1316  0020               	movlb	0	; select bank0
  8964  1317  00A0               	movwf	I2c_SetI2cAddressMask@SlaveAddressMask
  8965                           
  8966                           ;i2c_slv_drv.c: 266: SSP1MSK = (SlaveAddressMask << ((UINT8)(1)));
  8967  1318  3520               	lslf	I2c_SetI2cAddressMask@SlaveAddressMask,w
  8968  1319  0024               	movlb	4	; select bank4
  8969  131A  0093               	movwf	19	;volatile
  8970  131B  0008               	return
  8971  131C                     __end_of_I2c_SetI2cAddressMask:	
  8972                           
  8973                           	psect	text33
  8974  1310                     __ptext33:	
  8975 ;; *************** function _I2c_SetI2cAddress *****************
  8976 ;; Defined at:
  8977 ;;		line 249 in file "../../../../../Framework/MercuryFwk/Source/c/01_Hal/02_Drv/i2c_slv_drv.c"
  8978 ;; Parameters:    Size  Location     Type
  8979 ;;  SlaveAddress    1    wreg     unsigned char 
  8980 ;; Auto vars:     Size  Location     Type
  8981 ;;  SlaveAddress    1    0[BANK0 ] unsigned char 
  8982 ;; Return value:  Size  Location     Type
  8983 ;;                  1    wreg      void 
  8984 ;; Registers used:
  8985 ;;		wreg, status,2, status,0
  8986 ;; Tracked objects:
  8987 ;;		On entry : 0/0
  8988 ;;		On exit  : 0/0
  8989 ;;		Unchanged: 0/0
  8990 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8991 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8992 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8993 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8994 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8995 ;;Total ram usage:        1 bytes
  8996 ;; Hardware stack levels used:    1
  8997 ;; Hardware stack levels required when called:    2
  8998 ;; This function calls:
  8999 ;;		Nothing
  9000 ;; This function is called by:
  9001 ;;		_I2cSlv_I2cDrvHandle
  9002 ;; This function uses a non-reentrant model
  9003 ;;
  9004                           
  9005                           
  9006                           ;psect for function _I2c_SetI2cAddress
  9007  1310                     _I2c_SetI2cAddress:	
  9008                           
  9009                           ;incstack = 0
  9010                           ; Regs used in _I2c_SetI2cAddress: [wreg+status,2+status,0]
  9011                           ;I2c_SetI2cAddress@SlaveAddress stored from wreg
  9012  1310  0020               	movlb	0	; select bank0
  9013  1311  00A0               	movwf	I2c_SetI2cAddress@SlaveAddress
  9014                           
  9015                           ;i2c_slv_drv.c: 252: SSP1ADD = (SlaveAddress << ((UINT8)(1)));
  9016  1312  3520               	lslf	I2c_SetI2cAddress@SlaveAddress,w
  9017  1313  0024               	movlb	4	; select bank4
  9018  1314  0092               	movwf	18	;volatile
  9019  1315  0008               	return
  9020  1316                     __end_of_I2c_SetI2cAddress:	
  9021                           
  9022                           	psect	text34
  9023  134E                     __ptext34:	
  9024 ;; *************** function _Mcu_SetPullUpsSts *****************
  9025 ;; Defined at:
  9026 ;;		line 141 in file "../../../../../Framework/MercuryFwk/Source/c/01_Hal/02_Drv/mcu_drv.c"
  9027 ;; Parameters:    Size  Location     Type
  9028 ;;  PuSts           1    wreg     enum E3651
  9029 ;; Auto vars:     Size  Location     Type
  9030 ;;  PuSts           1    0[BANK0 ] enum E3651
  9031 ;; Return value:  Size  Location     Type
  9032 ;;                  1    wreg      void 
  9033 ;; Registers used:
  9034 ;;		wreg, status,0
  9035 ;; Tracked objects:
  9036 ;;		On entry : 0/0
  9037 ;;		On exit  : 0/0
  9038 ;;		Unchanged: 0/0
  9039 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9040 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9041 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9042 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9043 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9044 ;;Total ram usage:        1 bytes
  9045 ;; Hardware stack levels used:    1
  9046 ;; Hardware stack levels required when called:    2
  9047 ;; This function calls:
  9048 ;;		Nothing
  9049 ;; This function is called by:
  9050 ;;		_App_MainTask
  9051 ;; This function uses a non-reentrant model
  9052 ;;
  9053                           
  9054                           
  9055                           ;psect for function _Mcu_SetPullUpsSts
  9056  134E                     _Mcu_SetPullUpsSts:	
  9057                           
  9058                           ;incstack = 0
  9059                           ; Regs used in _Mcu_SetPullUpsSts: [wreg+status,0]
  9060                           ;Mcu_SetPullUpsSts@PuSts stored from wreg
  9061  134E  0020               	movlb	0	; select bank0
  9062  134F  00A0               	movwf	Mcu_SetPullUpsSts@PuSts
  9063                           
  9064                           ;mcu_drv.c: 144: OPTION_REGbits.nWPUEN = PuSts;
  9065  1350  0C20               	rrf	Mcu_SetPullUpsSts@PuSts,w
  9066  1351  0021               	movlb	1	; select bank1
  9067  1352  1C03               	skipc
  9068  1353  1395               	bcf	21,7	;volatile
  9069  1354  1803               	skipnc
  9070  1355  1795               	bsf	21,7	;volatile
  9071  1356  0008               	return
  9072  1357                     __end_of_Mcu_SetPullUpsSts:	
  9073                           
  9074                           	psect	text35
  9075  1345                     __ptext35:	
  9076 ;; *************** function _Mcu_SetDieTempSts *****************
  9077 ;; Defined at:
  9078 ;;		line 239 in file "../../../../../Framework/MercuryFwk/Source/c/01_Hal/02_Drv/mcu_drv.c"
  9079 ;; Parameters:    Size  Location     Type
  9080 ;;  DieTempSts      1    wreg     unsigned char 
  9081 ;; Auto vars:     Size  Location     Type
  9082 ;;  DieTempSts      1    0[BANK0 ] unsigned char 
  9083 ;; Return value:  Size  Location     Type
  9084 ;;                  1    wreg      void 
  9085 ;; Registers used:
  9086 ;;		wreg, status,0
  9087 ;; Tracked objects:
  9088 ;;		On entry : 0/0
  9089 ;;		On exit  : 0/0
  9090 ;;		Unchanged: 0/0
  9091 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9092 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9093 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9094 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9095 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9096 ;;Total ram usage:        1 bytes
  9097 ;; Hardware stack levels used:    1
  9098 ;; Hardware stack levels required when called:    2
  9099 ;; This function calls:
  9100 ;;		Nothing
  9101 ;; This function is called by:
  9102 ;;		_App_MainTask
  9103 ;; This function uses a non-reentrant model
  9104 ;;
  9105                           
  9106                           
  9107                           ;psect for function _Mcu_SetDieTempSts
  9108  1345                     _Mcu_SetDieTempSts:	
  9109                           
  9110                           ;incstack = 0
  9111                           ; Regs used in _Mcu_SetDieTempSts: [wreg+status,0]
  9112                           ;Mcu_SetDieTempSts@DieTempSts stored from wreg
  9113  1345  0020               	movlb	0	; select bank0
  9114  1346  00A0               	movwf	Mcu_SetDieTempSts@DieTempSts
  9115                           
  9116                           ;mcu_drv.c: 242: FVRCONbits.TSEN = DieTempSts;
  9117  1347  0C20               	rrf	Mcu_SetDieTempSts@DieTempSts,w
  9118  1348  0022               	movlb	2	; select bank2
  9119  1349  1C03               	skipc
  9120  134A  1297               	bcf	23,5	;volatile
  9121  134B  1803               	skipnc
  9122  134C  1697               	bsf	23,5	;volatile
  9123  134D  0008               	return
  9124  134E                     __end_of_Mcu_SetDieTempSts:	
  9125                           
  9126                           	psect	text36
  9127  133C                     __ptext36:	
  9128 ;; *************** function _Mcu_SetDieTempMode *****************
  9129 ;; Defined at:
  9130 ;;		line 253 in file "../../../../../Framework/MercuryFwk/Source/c/01_Hal/02_Drv/mcu_drv.c"
  9131 ;; Parameters:    Size  Location     Type
  9132 ;;  DieTempMode     1    wreg     unsigned char 
  9133 ;; Auto vars:     Size  Location     Type
  9134 ;;  DieTempMode     1    0[BANK0 ] unsigned char 
  9135 ;; Return value:  Size  Location     Type
  9136 ;;                  1    wreg      void 
  9137 ;; Registers used:
  9138 ;;		wreg, status,0
  9139 ;; Tracked objects:
  9140 ;;		On entry : 0/0
  9141 ;;		On exit  : 0/0
  9142 ;;		Unchanged: 0/0
  9143 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9144 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9145 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9146 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9147 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9148 ;;Total ram usage:        1 bytes
  9149 ;; Hardware stack levels used:    1
  9150 ;; Hardware stack levels required when called:    2
  9151 ;; This function calls:
  9152 ;;		Nothing
  9153 ;; This function is called by:
  9154 ;;		_App_MainTask
  9155 ;; This function uses a non-reentrant model
  9156 ;;
  9157                           
  9158                           
  9159                           ;psect for function _Mcu_SetDieTempMode
  9160  133C                     _Mcu_SetDieTempMode:	
  9161                           
  9162                           ;incstack = 0
  9163                           ; Regs used in _Mcu_SetDieTempMode: [wreg+status,0]
  9164                           ;Mcu_SetDieTempMode@DieTempMode stored from wreg
  9165  133C  0020               	movlb	0	; select bank0
  9166  133D  00A0               	movwf	Mcu_SetDieTempMode@DieTempMode
  9167                           
  9168                           ;mcu_drv.c: 256: FVRCONbits.TSRNG = DieTempMode;
  9169  133E  0C20               	rrf	Mcu_SetDieTempMode@DieTempMode,w
  9170  133F  0022               	movlb	2	; select bank2
  9171  1340  1C03               	skipc
  9172  1341  1217               	bcf	23,4	;volatile
  9173  1342  1803               	skipnc
  9174  1343  1617               	bsf	23,4	;volatile
  9175  1344  0008               	return
  9176  1345                     __end_of_Mcu_SetDieTempMode:	
  9177                           
  9178                           	psect	text37
  9179  06A6                     __ptext37:	
  9180 ;; *************** function _Mcu_ConfigPullUps *****************
  9181 ;; Defined at:
  9182 ;;		line 155 in file "../../../../../Framework/MercuryFwk/Source/c/01_Hal/02_Drv/mcu_drv.c"
  9183 ;; Parameters:    Size  Location     Type
  9184 ;;  WpuCh           1    wreg     PTR struct _WpuChType
  9185 ;;		 -> App_MainTask@WpuCh(18), 
  9186 ;; Auto vars:     Size  Location     Type
  9187 ;;  WpuCh           1    0[BANK0 ] PTR struct _WpuChType
  9188 ;;		 -> App_MainTask@WpuCh(18), 
  9189 ;; Return value:  Size  Location     Type
  9190 ;;                  1    wreg      void 
  9191 ;; Registers used:
  9192 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  9193 ;; Tracked objects:
  9194 ;;		On entry : 0/0
  9195 ;;		On exit  : 0/0
  9196 ;;		Unchanged: 0/0
  9197 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9198 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9199 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9200 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9201 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9202 ;;Total ram usage:        1 bytes
  9203 ;; Hardware stack levels used:    1
  9204 ;; Hardware stack levels required when called:    2
  9205 ;; This function calls:
  9206 ;;		Nothing
  9207 ;; This function is called by:
  9208 ;;		_App_MainTask
  9209 ;; This function uses a non-reentrant model
  9210 ;;
  9211                           
  9212                           
  9213                           ;psect for function _Mcu_ConfigPullUps
  9214  06A6                     _Mcu_ConfigPullUps:	
  9215                           
  9216                           ;incstack = 0
  9217                           ; Regs used in _Mcu_ConfigPullUps: [wreg+fsr1l+fsr1h+status,2+status,0]
  9218                           ;Mcu_ConfigPullUps@WpuCh stored from wreg
  9219  06A6  0020               	movlb	0	; select bank0
  9220  06A7  00A0               	movwf	Mcu_ConfigPullUps@WpuCh
  9221                           
  9222                           ;mcu_drv.c: 158: WPUA = 0x00;
  9223  06A8  0024               	movlb	4	; select bank4
  9224  06A9  018C               	clrf	12	;volatile
  9225                           
  9226                           ;mcu_drv.c: 159: WPUAbits.WPUA0 = WpuCh->WpuA0;
  9227  06AA  0020               	movlb	0	; select bank0
  9228  06AB  0820               	movf	Mcu_ConfigPullUps@WpuCh,w
  9229  06AC  0086               	movwf	6
  9230  06AD  0187               	clrf	7
  9231  06AE  0C01               	rrf	1,w
  9232  06AF  0024               	movlb	4	; select bank4
  9233  06B0  1C03               	skipc
  9234  06B1  100C               	bcf	12,0	;volatile
  9235  06B2  1803               	skipnc
  9236  06B3  140C               	bsf	12,0	;volatile
  9237                           
  9238                           ;mcu_drv.c: 160: WPUAbits.WPUA1 = WpuCh->WpuA1;
  9239  06B4  0020               	movlb	0	; select bank0
  9240  06B5  0A20               	incf	Mcu_ConfigPullUps@WpuCh,w
  9241  06B6  0086               	movwf	6
  9242  06B7  0187               	clrf	7
  9243  06B8  0C01               	rrf	1,w
  9244  06B9  0024               	movlb	4	; select bank4
  9245  06BA  1C03               	skipc
  9246  06BB  108C               	bcf	12,1	;volatile
  9247  06BC  1803               	skipnc
  9248  06BD  148C               	bsf	12,1	;volatile
  9249                           
  9250                           ;mcu_drv.c: 161: WPUAbits.WPUA2 = WpuCh->WpuA2;
  9251  06BE  0020               	movlb	0	; select bank0
  9252  06BF  0820               	movf	Mcu_ConfigPullUps@WpuCh,w
  9253  06C0  3E02               	addlw	2
  9254  06C1  0086               	movwf	6
  9255  06C2  0187               	clrf	7
  9256  06C3  0C01               	rrf	1,w
  9257  06C4  0024               	movlb	4	; select bank4
  9258  06C5  1C03               	skipc
  9259  06C6  110C               	bcf	12,2	;volatile
  9260  06C7  1803               	skipnc
  9261  06C8  150C               	bsf	12,2	;volatile
  9262                           
  9263                           ;mcu_drv.c: 162: WPUAbits.WPUA3 = WpuCh->WpuA3;
  9264  06C9  0020               	movlb	0	; select bank0
  9265  06CA  0820               	movf	Mcu_ConfigPullUps@WpuCh,w
  9266  06CB  3E03               	addlw	3
  9267  06CC  0086               	movwf	6
  9268  06CD  0187               	clrf	7
  9269  06CE  0C01               	rrf	1,w
  9270  06CF  0024               	movlb	4	; select bank4
  9271  06D0  1C03               	skipc
  9272  06D1  118C               	bcf	12,3	;volatile
  9273  06D2  1803               	skipnc
  9274  06D3  158C               	bsf	12,3	;volatile
  9275                           
  9276                           ;mcu_drv.c: 163: WPUAbits.WPUA4 = WpuCh->WpuA4;
  9277  06D4  0020               	movlb	0	; select bank0
  9278  06D5  0820               	movf	Mcu_ConfigPullUps@WpuCh,w
  9279  06D6  3E04               	addlw	4
  9280  06D7  0086               	movwf	6
  9281  06D8  0187               	clrf	7
  9282  06D9  0C01               	rrf	1,w
  9283  06DA  0024               	movlb	4	; select bank4
  9284  06DB  1C03               	skipc
  9285  06DC  120C               	bcf	12,4	;volatile
  9286  06DD  1803               	skipnc
  9287  06DE  160C               	bsf	12,4	;volatile
  9288                           
  9289                           ;mcu_drv.c: 164: WPUAbits.WPUA5 = WpuCh->WpuA5;
  9290  06DF  0020               	movlb	0	; select bank0
  9291  06E0  0820               	movf	Mcu_ConfigPullUps@WpuCh,w
  9292  06E1  3E05               	addlw	5
  9293  06E2  0086               	movwf	6
  9294  06E3  0187               	clrf	7
  9295  06E4  0C01               	rrf	1,w
  9296  06E5  0024               	movlb	4	; select bank4
  9297  06E6  1C03               	skipc
  9298  06E7  128C               	bcf	12,5	;volatile
  9299  06E8  1803               	skipnc
  9300  06E9  168C               	bsf	12,5	;volatile
  9301                           
  9302                           ;mcu_drv.c: 168: WPUB = 0x00;
  9303  06EA  018D               	clrf	13	;volatile
  9304                           
  9305                           ;mcu_drv.c: 169: WPUBbits.WPUB4 = WpuCh->WpuB4;
  9306  06EB  0020               	movlb	0	; select bank0
  9307  06EC  0820               	movf	Mcu_ConfigPullUps@WpuCh,w
  9308  06ED  3E06               	addlw	6
  9309  06EE  0086               	movwf	6
  9310  06EF  0187               	clrf	7
  9311  06F0  0C01               	rrf	1,w
  9312  06F1  0024               	movlb	4	; select bank4
  9313  06F2  1C03               	skipc
  9314  06F3  120D               	bcf	13,4	;volatile
  9315  06F4  1803               	skipnc
  9316  06F5  160D               	bsf	13,4	;volatile
  9317                           
  9318                           ;mcu_drv.c: 170: WPUBbits.WPUB5 = WpuCh->WpuB5;
  9319  06F6  0020               	movlb	0	; select bank0
  9320  06F7  0820               	movf	Mcu_ConfigPullUps@WpuCh,w
  9321  06F8  3E07               	addlw	7
  9322  06F9  0086               	movwf	6
  9323  06FA  0187               	clrf	7
  9324  06FB  0C01               	rrf	1,w
  9325  06FC  0024               	movlb	4	; select bank4
  9326  06FD  1C03               	skipc
  9327  06FE  128D               	bcf	13,5	;volatile
  9328  06FF  1803               	skipnc
  9329  0700  168D               	bsf	13,5	;volatile
  9330                           
  9331                           ;mcu_drv.c: 171: WPUBbits.WPUB6 = WpuCh->WpuB6;
  9332  0701  0020               	movlb	0	; select bank0
  9333  0702  0820               	movf	Mcu_ConfigPullUps@WpuCh,w
  9334  0703  3E08               	addlw	8
  9335  0704  0086               	movwf	6
  9336  0705  0187               	clrf	7
  9337  0706  0C01               	rrf	1,w
  9338  0707  0024               	movlb	4	; select bank4
  9339  0708  1C03               	skipc
  9340  0709  130D               	bcf	13,6	;volatile
  9341  070A  1803               	skipnc
  9342  070B  170D               	bsf	13,6	;volatile
  9343                           
  9344                           ;mcu_drv.c: 172: WPUBbits.WPUB7 = WpuCh->WpuB7;
  9345  070C  0020               	movlb	0	; select bank0
  9346  070D  0820               	movf	Mcu_ConfigPullUps@WpuCh,w
  9347  070E  3E09               	addlw	9
  9348  070F  0086               	movwf	6
  9349  0710  0187               	clrf	7
  9350  0711  0C01               	rrf	1,w
  9351  0712  0024               	movlb	4	; select bank4
  9352  0713  1C03               	skipc
  9353  0714  138D               	bcf	13,7	;volatile
  9354  0715  1803               	skipnc
  9355  0716  178D               	bsf	13,7	;volatile
  9356                           
  9357                           ;mcu_drv.c: 176: WPUC = 0x00;
  9358  0717  018E               	clrf	14	;volatile
  9359                           
  9360                           ;mcu_drv.c: 177: WPUCbits.WPUC0 = WpuCh->WpuC0;
  9361  0718  0020               	movlb	0	; select bank0
  9362  0719  0820               	movf	Mcu_ConfigPullUps@WpuCh,w
  9363  071A  3E0A               	addlw	10
  9364  071B  0086               	movwf	6
  9365  071C  0187               	clrf	7
  9366  071D  0C01               	rrf	1,w
  9367  071E  0024               	movlb	4	; select bank4
  9368  071F  1C03               	skipc
  9369  0720  100E               	bcf	14,0	;volatile
  9370  0721  1803               	skipnc
  9371  0722  140E               	bsf	14,0	;volatile
  9372                           
  9373                           ;mcu_drv.c: 178: WPUCbits.WPUC1 = WpuCh->WpuC1;
  9374  0723  0020               	movlb	0	; select bank0
  9375  0724  0820               	movf	Mcu_ConfigPullUps@WpuCh,w
  9376  0725  3E0B               	addlw	11
  9377  0726  0086               	movwf	6
  9378  0727  0187               	clrf	7
  9379  0728  0C01               	rrf	1,w
  9380  0729  0024               	movlb	4	; select bank4
  9381  072A  1C03               	skipc
  9382  072B  108E               	bcf	14,1	;volatile
  9383  072C  1803               	skipnc
  9384  072D  148E               	bsf	14,1	;volatile
  9385                           
  9386                           ;mcu_drv.c: 179: WPUCbits.WPUC2 = WpuCh->WpuC2;
  9387  072E  0020               	movlb	0	; select bank0
  9388  072F  0820               	movf	Mcu_ConfigPullUps@WpuCh,w
  9389  0730  3E0C               	addlw	12
  9390  0731  0086               	movwf	6
  9391  0732  0187               	clrf	7
  9392  0733  0C01               	rrf	1,w
  9393  0734  0024               	movlb	4	; select bank4
  9394  0735  1C03               	skipc
  9395  0736  110E               	bcf	14,2	;volatile
  9396  0737  1803               	skipnc
  9397  0738  150E               	bsf	14,2	;volatile
  9398                           
  9399                           ;mcu_drv.c: 180: WPUCbits.WPUC3 = WpuCh->WpuC3;
  9400  0739  0020               	movlb	0	; select bank0
  9401  073A  0820               	movf	Mcu_ConfigPullUps@WpuCh,w
  9402  073B  3E0D               	addlw	13
  9403  073C  0086               	movwf	6
  9404  073D  0187               	clrf	7
  9405  073E  0C01               	rrf	1,w
  9406  073F  0024               	movlb	4	; select bank4
  9407  0740  1C03               	skipc
  9408  0741  118E               	bcf	14,3	;volatile
  9409  0742  1803               	skipnc
  9410  0743  158E               	bsf	14,3	;volatile
  9411                           
  9412                           ;mcu_drv.c: 181: WPUCbits.WPUC4 = WpuCh->WpuC4;
  9413  0744  0020               	movlb	0	; select bank0
  9414  0745  0820               	movf	Mcu_ConfigPullUps@WpuCh,w
  9415  0746  3E0E               	addlw	14
  9416  0747  0086               	movwf	6
  9417  0748  0187               	clrf	7
  9418  0749  0C01               	rrf	1,w
  9419  074A  0024               	movlb	4	; select bank4
  9420  074B  1C03               	skipc
  9421  074C  120E               	bcf	14,4	;volatile
  9422  074D  1803               	skipnc
  9423  074E  160E               	bsf	14,4	;volatile
  9424                           
  9425                           ;mcu_drv.c: 182: WPUCbits.WPUC5 = WpuCh->WpuC5;
  9426  074F  0020               	movlb	0	; select bank0
  9427  0750  0820               	movf	Mcu_ConfigPullUps@WpuCh,w
  9428  0751  3E0F               	addlw	15
  9429  0752  0086               	movwf	6
  9430  0753  0187               	clrf	7
  9431  0754  0C01               	rrf	1,w
  9432  0755  0024               	movlb	4	; select bank4
  9433  0756  1C03               	skipc
  9434  0757  128E               	bcf	14,5	;volatile
  9435  0758  1803               	skipnc
  9436  0759  168E               	bsf	14,5	;volatile
  9437                           
  9438                           ;mcu_drv.c: 184: WPUCbits.WPUC6 = WpuCh->WpuC6;
  9439  075A  0020               	movlb	0	; select bank0
  9440  075B  0820               	movf	Mcu_ConfigPullUps@WpuCh,w
  9441  075C  3E10               	addlw	16
  9442  075D  0086               	movwf	6
  9443  075E  0187               	clrf	7
  9444  075F  0C01               	rrf	1,w
  9445  0760  0024               	movlb	4	; select bank4
  9446  0761  1C03               	skipc
  9447  0762  130E               	bcf	14,6	;volatile
  9448  0763  1803               	skipnc
  9449  0764  170E               	bsf	14,6	;volatile
  9450                           
  9451                           ;mcu_drv.c: 185: WPUCbits.WPUC7 = WpuCh->WpuC7;
  9452  0765  0020               	movlb	0	; select bank0
  9453  0766  0820               	movf	Mcu_ConfigPullUps@WpuCh,w
  9454  0767  3E11               	addlw	17
  9455  0768  0086               	movwf	6
  9456  0769  0187               	clrf	7
  9457  076A  0C01               	rrf	1,w
  9458  076B  0024               	movlb	4	; select bank4
  9459  076C  1C03               	skipc
  9460  076D  138E               	bcf	14,7	;volatile
  9461  076E  1803               	skipnc
  9462  076F  178E               	bsf	14,7	;volatile
  9463  0770  0008               	return
  9464  0771                     __end_of_Mcu_ConfigPullUps:	
  9465                           
  9466                           	psect	text38
  9467  02BF                     __ptext38:	
  9468 ;; *************** function _GetTemperature *****************
  9469 ;; Defined at:
  9470 ;;		line 194 in file "../Source/c/04_App/sb810_app.c"
  9471 ;; Parameters:    Size  Location     Type
  9472 ;;		None
  9473 ;; Auto vars:     Size  Location     Type
  9474 ;;  Val2            3   20[BANK1 ] void 
  9475 ;;  Val1            3   17[BANK1 ] void 
  9476 ;;  Index           1   23[BANK1 ] unsigned char 
  9477 ;; Return value:  Size  Location     Type
  9478 ;;                  1    wreg      void 
  9479 ;; Registers used:
  9480 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9481 ;; Tracked objects:
  9482 ;;		On entry : 0/0
  9483 ;;		On exit  : 0/0
  9484 ;;		Unchanged: 0/0
  9485 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9486 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9487 ;;      Locals:         0       0       7       0       0       0       0       0       0       0       0       0       
      +0       0
  9488 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9489 ;;      Totals:         0       2       7       0       0       0       0       0       0       0       0       0       
      +0       0
  9490 ;;Total ram usage:        9 bytes
  9491 ;; Hardware stack levels used:    1
  9492 ;; Hardware stack levels required when called:    5
  9493 ;; This function calls:
  9494 ;;		_Adc_GetConvResult
  9495 ;;		_Adc_GetConvSts
  9496 ;;		_Adc_StartConversion
  9497 ;;		_MyFtoa
  9498 ;;		___ftadd
  9499 ;;		___ftdiv
  9500 ;;		___ftmul
  9501 ;;		___lwdiv
  9502 ;;		___lwtoft
  9503 ;; This function is called by:
  9504 ;;		_App_MainTask
  9505 ;; This function uses a non-reentrant model
  9506 ;;
  9507                           
  9508                           
  9509                           ;psect for function _GetTemperature
  9510  02BF                     _GetTemperature:	
  9511                           
  9512                           ;sb810_app.c: 196: UINT8 Index;
  9513                           ;sb810_app.c: 197: double Val1, Val2;
  9514                           ;sb810_app.c: 200: for (Index = 0; Index < 20 - 1; Index++)
  9515                           
  9516                           ;incstack = 0
  9517                           ; Regs used in _GetTemperature: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  9518  02BF  0021               	movlb	1	; select bank1
  9519  02C0  01B7               	clrf	GetTemperature@Index^(0+128)
  9520  02C1  3013               	movlw	19
  9521  02C2  0237               	subwf	GetTemperature@Index^(0+128),w
  9522  02C3  1803               	btfsc	3,0
  9523  02C4  2ADE               	goto	l5178
  9524  02C5                     l5172:	
  9525                           
  9526                           ;sb810_app.c: 201: {
  9527                           ;sb810_app.c: 202: TempResArray[Index] = TempResArray[Index + 1];
  9528  02C5  3537               	lslf	GetTemperature@Index^(0+128),w
  9529  02C6  3E02               	addlw	2
  9530  02C7  3EA0               	addlw	(low (_TempResArray| (0+256)))& (0+255)
  9531  02C8  0086               	movwf	6
  9532  02C9  3001               	movlw	1	; select bank3/4
  9533  02CA  0087               	movwf	7
  9534  02CB  3537               	lslf	GetTemperature@Index^(0+128),w
  9535  02CC  3EA0               	addlw	(low (_TempResArray| (0+256)))& (0+255)
  9536  02CD  0084               	movwf	4
  9537  02CE  3001               	movlw	1	; select bank3/4
  9538  02CF  0085               	movwf	5
  9539  02D0  3F40               	moviw [0]fsr1
  9540  02D1  3F80               	movwi [0]fsr0
  9541  02D2  3F41               	moviw [1]fsr1
  9542  02D3  3F81               	movwi [1]fsr0
  9543  02D4  3001               	movlw	1
  9544  02D5  0020               	movlb	0	; select bank0
  9545  02D6  00EB               	movwf	??_GetTemperature
  9546  02D7  086B               	movf	??_GetTemperature,w
  9547  02D8  0021               	movlb	1	; select bank1
  9548  02D9  07B7               	addwf	GetTemperature@Index^(0+128),f
  9549  02DA  3013               	movlw	19
  9550  02DB  0237               	subwf	GetTemperature@Index^(0+128),w
  9551  02DC  1C03               	skipc
  9552  02DD  2AC5               	goto	l5172
  9553  02DE                     l5178:	
  9554                           
  9555                           ;sb810_app.c: 203: }
  9556                           ;sb810_app.c: 206: Adc_StartConversion();
  9557  02DE  3193  230A  3182   	fcall	_Adc_StartConversion
  9558  02E1                     l5180:	
  9559                           ;sb810_app.c: 208: while (Adc_GetConvSts() == AdcConvInProgress);
  9560                           
  9561  02E1  3187  27FB  3182   	fcall	_Adc_GetConvSts
  9562  02E4  3A00               	xorlw	0
  9563  02E5  1903               	skipnz
  9564  02E6  2AE1               	goto	l5180
  9565                           
  9566                           ;sb810_app.c: 210: TempResArray[20 - 1] = Adc_GetConvResult();
  9567  02E7  3193  23E7  3182   	fcall	_Adc_GetConvResult
  9568  02EA  0020               	movlb	0	; select bank0
  9569  02EB  0821               	movf	?_Adc_GetConvResult+1,w
  9570  02EC  0023               	movlb	3	; select bank3
  9571  02ED  00C7               	movwf	((_TempResArray+1)^(0+384)+38)
  9572  02EE  0020               	movlb	0	; select bank0
  9573  02EF  0820               	movf	?_Adc_GetConvResult,w
  9574  02F0  0023               	movlb	3	; select bank3
  9575  02F1  00C6               	movwf	(_TempResArray^(0+384)+38)
  9576                           
  9577                           ;sb810_app.c: 213: for (Index = 0; Index < 20; Index++)
  9578  02F2  0021               	movlb	1	; select bank1
  9579  02F3  01B7               	clrf	GetTemperature@Index^(0+128)
  9580  02F4  3014               	movlw	20
  9581  02F5  0237               	subwf	GetTemperature@Index^(0+128),w
  9582  02F6  1803               	btfsc	3,0
  9583  02F7  2B13               	goto	l5196
  9584  02F8                     l5190:	
  9585                           
  9586                           ;sb810_app.c: 214: {
  9587                           ;sb810_app.c: 215: TempRes += TempResArray[Index];
  9588  02F8  3537               	lslf	GetTemperature@Index^(0+128),w
  9589  02F9  3EA0               	addlw	(low (_TempResArray| (0+256)))& (0+255)
  9590  02FA  0086               	movwf	6
  9591  02FB  3001               	movlw	1	; select bank3/4
  9592  02FC  0087               	movwf	7
  9593  02FD  3F40               	moviw [0]fsr1
  9594  02FE  0020               	movlb	0	; select bank0
  9595  02FF  00EB               	movwf	??_GetTemperature
  9596  0300  3F41               	moviw [1]fsr1
  9597  0301  00EC               	movwf	??_GetTemperature+1
  9598  0302  086B               	movf	??_GetTemperature,w
  9599  0303  0021               	movlb	1	; select bank1
  9600  0304  07E0               	addwf	_TempRes^(0+128),f	;volatile
  9601  0305  0020               	movlb	0	; select bank0
  9602  0306  086C               	movf	??_GetTemperature+1,w
  9603  0307  0021               	movlb	1	; select bank1
  9604  0308  3DE1               	addwfc	(_TempRes+1)^(0+128),f	;volatile
  9605  0309  3001               	movlw	1
  9606  030A  0020               	movlb	0	; select bank0
  9607  030B  00EB               	movwf	??_GetTemperature
  9608  030C  086B               	movf	??_GetTemperature,w
  9609  030D  0021               	movlb	1	; select bank1
  9610  030E  07B7               	addwf	GetTemperature@Index^(0+128),f
  9611  030F  3014               	movlw	20
  9612  0310  0237               	subwf	GetTemperature@Index^(0+128),w
  9613  0311  1C03               	skipc
  9614  0312  2AF8               	goto	l5190
  9615  0313                     l5196:	
  9616                           
  9617                           ;sb810_app.c: 216: }
  9618                           ;sb810_app.c: 218: TempRes = TempRes/20;
  9619  0313  3014               	movlw	20
  9620  0314  0020               	movlb	0	; select bank0
  9621  0315  00A0               	movwf	___lwdiv@divisor
  9622  0316  3000               	movlw	0
  9623  0317  00A1               	movwf	___lwdiv@divisor+1
  9624  0318  0021               	movlb	1	; select bank1
  9625  0319  0861               	movf	(_TempRes+1)^(0+128),w	;volatile
  9626  031A  0020               	movlb	0	; select bank0
  9627  031B  00A3               	movwf	___lwdiv@dividend+1
  9628  031C  0021               	movlb	1	; select bank1
  9629  031D  0860               	movf	_TempRes^(0+128),w	;volatile
  9630  031E  0020               	movlb	0	; select bank0
  9631  031F  00A2               	movwf	___lwdiv@dividend
  9632  0320  3196  269C  3182   	fcall	___lwdiv
  9633  0323  0020               	movlb	0	; select bank0
  9634  0324  0821               	movf	?___lwdiv+1,w
  9635  0325  0021               	movlb	1	; select bank1
  9636  0326  00E1               	movwf	(_TempRes+1)^(0+128)	;volatile
  9637  0327  0020               	movlb	0	; select bank0
  9638  0328  0820               	movf	?___lwdiv,w
  9639  0329  0021               	movlb	1	; select bank1
  9640  032A  00E0               	movwf	_TempRes^(0+128)	;volatile
  9641                           
  9642                           ;sb810_app.c: 221: Val1 = (((double)3.3)/((double)1024));
  9643  032B  3033               	movlw	51
  9644  032C  00B1               	movwf	GetTemperature@Val1^(0+128)
  9645  032D  3053               	movlw	83
  9646  032E  00B2               	movwf	(GetTemperature@Val1+1)^(0+128)
  9647  032F  303B               	movlw	59
  9648  0330  00B3               	movwf	(GetTemperature@Val1+2)^(0+128)
  9649                           
  9650                           ;sb810_app.c: 222: Val2 = (Val1 * (double)TempRes);
  9651  0331  0831               	movf	GetTemperature@Val1^(0+128),w
  9652  0332  0020               	movlb	0	; select bank0
  9653  0333  00CC               	movwf	___ftmul@f1
  9654  0334  0021               	movlb	1	; select bank1
  9655  0335  0832               	movf	(GetTemperature@Val1+1)^(0+128),w
  9656  0336  0020               	movlb	0	; select bank0
  9657  0337  00CD               	movwf	___ftmul@f1+1
  9658  0338  0021               	movlb	1	; select bank1
  9659  0339  0833               	movf	(GetTemperature@Val1+2)^(0+128),w
  9660  033A  0020               	movlb	0	; select bank0
  9661  033B  00CE               	movwf	___ftmul@f1+2
  9662  033C  0021               	movlb	1	; select bank1
  9663  033D  0861               	movf	(_TempRes+1)^(0+128),w	;volatile
  9664  033E  0020               	movlb	0	; select bank0
  9665  033F  00A9               	movwf	___lwtoft@c+1
  9666  0340  0021               	movlb	1	; select bank1
  9667  0341  0860               	movf	_TempRes^(0+128),w	;volatile
  9668  0342  0020               	movlb	0	; select bank0
  9669  0343  00A8               	movwf	___lwtoft@c
  9670  0344  3194  243D  3182   	fcall	___lwtoft
  9671  0347  0020               	movlb	0	; select bank0
  9672  0348  0828               	movf	?___lwtoft,w
  9673  0349  00CF               	movwf	___ftmul@f2
  9674  034A  0829               	movf	?___lwtoft+1,w
  9675  034B  00D0               	movwf	___ftmul@f2+1
  9676  034C  082A               	movf	?___lwtoft+2,w
  9677  034D  00D1               	movwf	___ftmul@f2+2
  9678  034E  318D  251A  3182   	fcall	___ftmul
  9679  0351  0020               	movlb	0	; select bank0
  9680  0352  084C               	movf	?___ftmul,w
  9681  0353  0021               	movlb	1	; select bank1
  9682  0354  00B4               	movwf	GetTemperature@Val2^(0+128)
  9683  0355  0020               	movlb	0	; select bank0
  9684  0356  084D               	movf	?___ftmul+1,w
  9685  0357  0021               	movlb	1	; select bank1
  9686  0358  00B5               	movwf	(GetTemperature@Val2+1)^(0+128)
  9687  0359  0020               	movlb	0	; select bank0
  9688  035A  084E               	movf	?___ftmul+2,w
  9689  035B  0021               	movlb	1	; select bank1
  9690  035C  00B6               	movwf	(GetTemperature@Val2+2)^(0+128)
  9691                           
  9692                           ;sb810_app.c: 223: TempCel = (double)((Val2 - (double)(0.5))/((double)0.01));
  9693  035D  30D7               	movlw	215
  9694  035E  0020               	movlb	0	; select bank0
  9695  035F  00CC               	movwf	___ftdiv@f2
  9696  0360  3023               	movlw	35
  9697  0361  00CD               	movwf	___ftdiv@f2+1
  9698  0362  303C               	movlw	60
  9699  0363  00CE               	movwf	___ftdiv@f2+2
  9700  0364  3000               	movlw	0
  9701  0365  00BF               	movwf	___ftadd@f1
  9702  0366  3000               	movlw	0
  9703  0367  00C0               	movwf	___ftadd@f1+1
  9704  0368  30BF               	movlw	191
  9705  0369  00C1               	movwf	___ftadd@f1+2
  9706  036A  0021               	movlb	1	; select bank1
  9707  036B  0834               	movf	GetTemperature@Val2^(0+128),w
  9708  036C  0020               	movlb	0	; select bank0
  9709  036D  00C2               	movwf	___ftadd@f2
  9710  036E  0021               	movlb	1	; select bank1
  9711  036F  0835               	movf	(GetTemperature@Val2+1)^(0+128),w
  9712  0370  0020               	movlb	0	; select bank0
  9713  0371  00C3               	movwf	___ftadd@f2+1
  9714  0372  0021               	movlb	1	; select bank1
  9715  0373  0836               	movf	(GetTemperature@Val2+2)^(0+128),w
  9716  0374  0020               	movlb	0	; select bank0
  9717  0375  00C4               	movwf	___ftadd@f2+2
  9718  0376  3184  24C2  3182   	fcall	___ftadd
  9719  0379  0020               	movlb	0	; select bank0
  9720  037A  083F               	movf	?___ftadd,w
  9721  037B  00CF               	movwf	___ftdiv@f1
  9722  037C  0840               	movf	?___ftadd+1,w
  9723  037D  00D0               	movwf	___ftdiv@f1+1
  9724  037E  0841               	movf	?___ftadd+2,w
  9725  037F  00D1               	movwf	___ftdiv@f1+2
  9726  0380  318C  2471  3182   	fcall	___ftdiv
  9727  0383  0020               	movlb	0	; select bank0
  9728  0384  084C               	movf	?___ftdiv,w
  9729  0385  0021               	movlb	1	; select bank1
  9730  0386  00DD               	movwf	_TempCel^(0+128)	;volatile
  9731  0387  0020               	movlb	0	; select bank0
  9732  0388  084D               	movf	?___ftdiv+1,w
  9733  0389  0021               	movlb	1	; select bank1
  9734  038A  00DE               	movwf	(_TempCel+1)^(0+128)	;volatile
  9735  038B  0020               	movlb	0	; select bank0
  9736  038C  084E               	movf	?___ftdiv+2,w
  9737  038D  0021               	movlb	1	; select bank1
  9738  038E  00DF               	movwf	(_TempCel+2)^(0+128)	;volatile
  9739                           
  9740                           ;sb810_app.c: 225: TempCel = TempCel - ((double)(2.5));
  9741  038F  3000               	movlw	0
  9742  0390  0020               	movlb	0	; select bank0
  9743  0391  00BF               	movwf	___ftadd@f1
  9744  0392  3020               	movlw	32
  9745  0393  00C0               	movwf	___ftadd@f1+1
  9746  0394  30C0               	movlw	192
  9747  0395  00C1               	movwf	___ftadd@f1+2
  9748  0396  0021               	movlb	1	; select bank1
  9749  0397  085D               	movf	_TempCel^(0+128),w	;volatile
  9750  0398  0020               	movlb	0	; select bank0
  9751  0399  00C2               	movwf	___ftadd@f2
  9752  039A  0021               	movlb	1	; select bank1
  9753  039B  085E               	movf	(_TempCel+1)^(0+128),w	;volatile
  9754  039C  0020               	movlb	0	; select bank0
  9755  039D  00C3               	movwf	___ftadd@f2+1
  9756  039E  0021               	movlb	1	; select bank1
  9757  039F  085F               	movf	(_TempCel+2)^(0+128),w	;volatile
  9758  03A0  0020               	movlb	0	; select bank0
  9759  03A1  00C4               	movwf	___ftadd@f2+2
  9760  03A2  3184  24C2  3182   	fcall	___ftadd
  9761  03A5  0020               	movlb	0	; select bank0
  9762  03A6  083F               	movf	?___ftadd,w
  9763  03A7  0021               	movlb	1	; select bank1
  9764  03A8  00DD               	movwf	_TempCel^(0+128)	;volatile
  9765  03A9  0020               	movlb	0	; select bank0
  9766  03AA  0840               	movf	?___ftadd+1,w
  9767  03AB  0021               	movlb	1	; select bank1
  9768  03AC  00DE               	movwf	(_TempCel+1)^(0+128)	;volatile
  9769  03AD  0020               	movlb	0	; select bank0
  9770  03AE  0841               	movf	?___ftadd+2,w
  9771  03AF  0021               	movlb	1	; select bank1
  9772  03B0  00DF               	movwf	(_TempCel+2)^(0+128)	;volatile
  9773                           
  9774                           ;sb810_app.c: 227: MyFtoa(TempCel,TempCelStr,100);
  9775  03B1  085D               	movf	_TempCel^(0+128),w	;volatile
  9776  03B2  00AB               	movwf	MyFtoa@number^(0+128)
  9777  03B3  085E               	movf	(_TempCel+1)^(0+128),w	;volatile
  9778  03B4  00AC               	movwf	(MyFtoa@number+1)^(0+128)
  9779  03B5  085F               	movf	(_TempCel+2)^(0+128),w	;volatile
  9780  03B6  00AD               	movwf	(MyFtoa@number+2)^(0+128)
  9781  03B7  30A0               	movlw	(low (_TempCelStr| (0+512)))& (0+255)
  9782  03B8  0020               	movlb	0	; select bank0
  9783  03B9  00EB               	movwf	??_GetTemperature
  9784  03BA  086B               	movf	??_GetTemperature,w
  9785  03BB  0021               	movlb	1	; select bank1
  9786  03BC  00AE               	movwf	MyFtoa@string^(0+128)
  9787  03BD  3064               	movlw	100
  9788  03BE  00AF               	movwf	MyFtoa@precision^(0+128)
  9789  03BF  3000               	movlw	0
  9790  03C0  00B0               	movwf	(MyFtoa@precision^(0+128)+1)
  9791  03C1  3187  2771         	fcall	_MyFtoa
  9792  03C3  0008               	return
  9793  03C4                     __end_of_GetTemperature:	
  9794                           
  9795                           	psect	text39
  9796  143D                     __ptext39:	
  9797 ;; *************** function ___lwtoft *****************
  9798 ;; Defined at:
  9799 ;;		line 28 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\lwtoft.c"
  9800 ;; Parameters:    Size  Location     Type
  9801 ;;  c               2    8[BANK0 ] unsigned int 
  9802 ;; Auto vars:     Size  Location     Type
  9803 ;;		None
  9804 ;; Return value:  Size  Location     Type
  9805 ;;                  3    8[BANK0 ] float 
  9806 ;; Registers used:
  9807 ;;		wreg, status,2, status,0, pclath, cstack
  9808 ;; Tracked objects:
  9809 ;;		On entry : 0/0
  9810 ;;		On exit  : 0/0
  9811 ;;		Unchanged: 0/0
  9812 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9813 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9814 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9815 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9816 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9817 ;;Total ram usage:        4 bytes
  9818 ;; Hardware stack levels used:    1
  9819 ;; Hardware stack levels required when called:    3
  9820 ;; This function calls:
  9821 ;;		___ftpack
  9822 ;; This function is called by:
  9823 ;;		_GetTemperature
  9824 ;; This function uses a non-reentrant model
  9825 ;;
  9826                           
  9827                           
  9828                           ;psect for function ___lwtoft
  9829  143D                     ___lwtoft:	
  9830                           
  9831                           ;incstack = 0
  9832                           ; Regs used in ___lwtoft: [wreg+status,2+status,0+pclath+cstack]
  9833  143D  0020               	movlb	0	; select bank0
  9834  143E  0828               	movf	___lwtoft@c,w
  9835  143F  00A0               	movwf	___ftpack@arg
  9836  1440  0829               	movf	___lwtoft@c+1,w
  9837  1441  00A1               	movwf	___ftpack@arg+1
  9838  1442  01A2               	clrf	___ftpack@arg+2
  9839  1443  308E               	movlw	142
  9840  1444  00AB               	movwf	??___lwtoft
  9841  1445  082B               	movf	??___lwtoft,w
  9842  1446  00A3               	movwf	___ftpack@exp
  9843  1447  01A4               	clrf	___ftpack@sign
  9844  1448  3189  2102         	fcall	___ftpack
  9845  144A  0020               	movlb	0	; select bank0
  9846  144B  0820               	movf	?___ftpack,w
  9847  144C  00A8               	movwf	?___lwtoft
  9848  144D  0821               	movf	?___ftpack+1,w
  9849  144E  00A9               	movwf	?___lwtoft+1
  9850  144F  0822               	movf	?___ftpack+2,w
  9851  1450  00AA               	movwf	?___lwtoft+2
  9852  1451  0008               	return
  9853  1452                     __end_of___lwtoft:	
  9854                           
  9855                           	psect	text40
  9856  0C71                     __ptext40:	
  9857 ;; *************** function ___ftdiv *****************
  9858 ;; Defined at:
  9859 ;;		line 56 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\ftdiv.c"
  9860 ;; Parameters:    Size  Location     Type
  9861 ;;  f2              3   44[BANK0 ] float 
  9862 ;;  f1              3   47[BANK0 ] float 
  9863 ;; Auto vars:     Size  Location     Type
  9864 ;;  f3              3   55[BANK0 ] float 
  9865 ;;  sign            1   59[BANK0 ] unsigned char 
  9866 ;;  exp             1   58[BANK0 ] unsigned char 
  9867 ;;  cntr            1   54[BANK0 ] unsigned char 
  9868 ;; Return value:  Size  Location     Type
  9869 ;;                  3   44[BANK0 ] float 
  9870 ;; Registers used:
  9871 ;;		wreg, status,2, status,0, pclath, cstack
  9872 ;; Tracked objects:
  9873 ;;		On entry : 0/0
  9874 ;;		On exit  : 0/0
  9875 ;;		Unchanged: 0/0
  9876 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9877 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9878 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9879 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9880 ;;      Totals:         0      16       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9881 ;;Total ram usage:       16 bytes
  9882 ;; Hardware stack levels used:    1
  9883 ;; Hardware stack levels required when called:    3
  9884 ;; This function calls:
  9885 ;;		___ftpack
  9886 ;; This function is called by:
  9887 ;;		_GetTemperature
  9888 ;; This function uses a non-reentrant model
  9889 ;;
  9890                           
  9891                           
  9892                           ;psect for function ___ftdiv
  9893  0C71                     ___ftdiv:	
  9894                           
  9895                           ;incstack = 0
  9896                           ; Regs used in ___ftdiv: [wreg+status,2+status,0+pclath+cstack]
  9897  0C71  0020               	movlb	0	; select bank0
  9898  0C72  084F               	movf	___ftdiv@f1,w
  9899  0C73  00D2               	movwf	??___ftdiv
  9900  0C74  0850               	movf	___ftdiv@f1+1,w
  9901  0C75  00D3               	movwf	??___ftdiv+1
  9902  0C76  0851               	movf	___ftdiv@f1+2,w
  9903  0C77  00D4               	movwf	??___ftdiv+2
  9904  0C78  1003               	clrc
  9905  0C79  0D53               	rlf	??___ftdiv+1,w
  9906  0C7A  0D54               	rlf	??___ftdiv+2,w
  9907  0C7B  00D5               	movwf	??___ftdiv+3
  9908  0C7C  0855               	movf	??___ftdiv+3,w
  9909  0C7D  00DA               	movwf	___ftdiv@exp
  9910  0C7E  085A               	movf	___ftdiv@exp,w
  9911  0C7F  1D03               	btfss	3,2
  9912  0C80  2C88               	goto	l4818
  9913  0C81  3000               	movlw	0
  9914  0C82  00CC               	movwf	?___ftdiv
  9915  0C83  3000               	movlw	0
  9916  0C84  00CD               	movwf	?___ftdiv+1
  9917  0C85  3000               	movlw	0
  9918  0C86  00CE               	movwf	?___ftdiv+2
  9919  0C87  0008               	return
  9920  0C88                     l4818:	
  9921  0C88  084C               	movf	___ftdiv@f2,w
  9922  0C89  00D2               	movwf	??___ftdiv
  9923  0C8A  084D               	movf	___ftdiv@f2+1,w
  9924  0C8B  00D3               	movwf	??___ftdiv+1
  9925  0C8C  084E               	movf	___ftdiv@f2+2,w
  9926  0C8D  00D4               	movwf	??___ftdiv+2
  9927  0C8E  1003               	clrc
  9928  0C8F  0D53               	rlf	??___ftdiv+1,w
  9929  0C90  0D54               	rlf	??___ftdiv+2,w
  9930  0C91  00D5               	movwf	??___ftdiv+3
  9931  0C92  0855               	movf	??___ftdiv+3,w
  9932  0C93  00DB               	movwf	___ftdiv@sign
  9933  0C94  085B               	movf	___ftdiv@sign,w
  9934  0C95  1D03               	btfss	3,2
  9935  0C96  2C9E               	goto	l4824
  9936  0C97  3000               	movlw	0
  9937  0C98  00CC               	movwf	?___ftdiv
  9938  0C99  3000               	movlw	0
  9939  0C9A  00CD               	movwf	?___ftdiv+1
  9940  0C9B  3000               	movlw	0
  9941  0C9C  00CE               	movwf	?___ftdiv+2
  9942  0C9D  0008               	return
  9943  0C9E                     l4824:	
  9944  0C9E  3000               	movlw	0
  9945  0C9F  00D7               	movwf	___ftdiv@f3
  9946  0CA0  3000               	movlw	0
  9947  0CA1  00D8               	movwf	___ftdiv@f3+1
  9948  0CA2  3000               	movlw	0
  9949  0CA3  00D9               	movwf	___ftdiv@f3+2
  9950  0CA4  3089               	movlw	137
  9951  0CA5  075B               	addwf	___ftdiv@sign,w
  9952  0CA6  00D2               	movwf	??___ftdiv
  9953  0CA7  0852               	movf	??___ftdiv,w
  9954  0CA8  02DA               	subwf	___ftdiv@exp,f
  9955  0CA9  084F               	movf	___ftdiv@f1,w
  9956  0CAA  00D2               	movwf	??___ftdiv
  9957  0CAB  0850               	movf	___ftdiv@f1+1,w
  9958  0CAC  00D3               	movwf	??___ftdiv+1
  9959  0CAD  0851               	movf	___ftdiv@f1+2,w
  9960  0CAE  00D4               	movwf	??___ftdiv+2
  9961  0CAF  3010               	movlw	16
  9962  0CB0                     u5435:	
  9963  0CB0  36D4               	lsrf	??___ftdiv+2,f
  9964  0CB1  0CD3               	rrf	??___ftdiv+1,f
  9965  0CB2  0CD2               	rrf	??___ftdiv,f
  9966  0CB3  0B89               	decfsz	9,f
  9967  0CB4  2CB0               	goto	u5435
  9968  0CB5  0852               	movf	??___ftdiv,w
  9969  0CB6  00D5               	movwf	??___ftdiv+3
  9970  0CB7  0855               	movf	??___ftdiv+3,w
  9971  0CB8  00DB               	movwf	___ftdiv@sign
  9972  0CB9  084C               	movf	___ftdiv@f2,w
  9973  0CBA  00D2               	movwf	??___ftdiv
  9974  0CBB  084D               	movf	___ftdiv@f2+1,w
  9975  0CBC  00D3               	movwf	??___ftdiv+1
  9976  0CBD  084E               	movf	___ftdiv@f2+2,w
  9977  0CBE  00D4               	movwf	??___ftdiv+2
  9978  0CBF  3010               	movlw	16
  9979  0CC0                     u5445:	
  9980  0CC0  36D4               	lsrf	??___ftdiv+2,f
  9981  0CC1  0CD3               	rrf	??___ftdiv+1,f
  9982  0CC2  0CD2               	rrf	??___ftdiv,f
  9983  0CC3  0B89               	decfsz	9,f
  9984  0CC4  2CC0               	goto	u5445
  9985  0CC5  0852               	movf	??___ftdiv,w
  9986  0CC6  00D5               	movwf	??___ftdiv+3
  9987  0CC7  0855               	movf	??___ftdiv+3,w
  9988  0CC8  06DB               	xorwf	___ftdiv@sign,f
  9989  0CC9  3080               	movlw	128
  9990  0CCA  00D2               	movwf	??___ftdiv
  9991  0CCB  0852               	movf	??___ftdiv,w
  9992  0CCC  05DB               	andwf	___ftdiv@sign,f
  9993  0CCD  17D0               	bsf	___ftdiv@f1+1,7
  9994  0CCE  30FF               	movlw	255
  9995  0CCF  05CF               	andwf	___ftdiv@f1,f
  9996  0CD0  30FF               	movlw	255
  9997  0CD1  05D0               	andwf	___ftdiv@f1+1,f
  9998  0CD2  3000               	movlw	0
  9999  0CD3  05D1               	andwf	___ftdiv@f1+2,f
 10000  0CD4  17CD               	bsf	___ftdiv@f2+1,7
 10001  0CD5  30FF               	movlw	255
 10002  0CD6  05CC               	andwf	___ftdiv@f2,f
 10003  0CD7  30FF               	movlw	255
 10004  0CD8  05CD               	andwf	___ftdiv@f2+1,f
 10005  0CD9  3000               	movlw	0
 10006  0CDA  05CE               	andwf	___ftdiv@f2+2,f
 10007  0CDB  3018               	movlw	24
 10008  0CDC  00D2               	movwf	??___ftdiv
 10009  0CDD  0852               	movf	??___ftdiv,w
 10010  0CDE  00D6               	movwf	___ftdiv@cntr
 10011  0CDF                     l4838:	
 10012  0CDF  3001               	movlw	1
 10013  0CE0                     u5455:	
 10014  0CE0  35D7               	lslf	___ftdiv@f3,f
 10015  0CE1  0DD8               	rlf	___ftdiv@f3+1,f
 10016  0CE2  0DD9               	rlf	___ftdiv@f3+2,f
 10017  0CE3  0B89               	decfsz	9,f
 10018  0CE4  2CE0               	goto	u5455
 10019  0CE5  084E               	movf	___ftdiv@f2+2,w
 10020  0CE6  0251               	subwf	___ftdiv@f1+2,w
 10021  0CE7  1D03               	skipz
 10022  0CE8  2CEF               	goto	u5465
 10023  0CE9  084D               	movf	___ftdiv@f2+1,w
 10024  0CEA  0250               	subwf	___ftdiv@f1+1,w
 10025  0CEB  1D03               	skipz
 10026  0CEC  2CEF               	goto	u5465
 10027  0CED  084C               	movf	___ftdiv@f2,w
 10028  0CEE  024F               	subwf	___ftdiv@f1,w
 10029  0CEF                     u5465:	
 10030  0CEF  1C03               	skipc
 10031  0CF0  2CF8               	goto	l4846
 10032  0CF1  084C               	movf	___ftdiv@f2,w
 10033  0CF2  02CF               	subwf	___ftdiv@f1,f
 10034  0CF3  084D               	movf	___ftdiv@f2+1,w
 10035  0CF4  3BD0               	subwfb	___ftdiv@f1+1,f
 10036  0CF5  084E               	movf	___ftdiv@f2+2,w
 10037  0CF6  3BD1               	subwfb	___ftdiv@f1+2,f
 10038  0CF7  1457               	bsf	___ftdiv@f3,0
 10039  0CF8                     l4846:	
 10040  0CF8  3001               	movlw	1
 10041  0CF9                     u5475:	
 10042  0CF9  35CF               	lslf	___ftdiv@f1,f
 10043  0CFA  0DD0               	rlf	___ftdiv@f1+1,f
 10044  0CFB  0DD1               	rlf	___ftdiv@f1+2,f
 10045  0CFC  0B89               	decfsz	9,f
 10046  0CFD  2CF9               	goto	u5475
 10047  0CFE  3001               	movlw	1
 10048  0CFF  02D6               	subwf	___ftdiv@cntr,f
 10049  0D00  1D03               	btfss	3,2
 10050  0D01  2CDF               	goto	l4838
 10051  0D02  0857               	movf	___ftdiv@f3,w
 10052  0D03  00A0               	movwf	___ftpack@arg
 10053  0D04  0858               	movf	___ftdiv@f3+1,w
 10054  0D05  00A1               	movwf	___ftpack@arg+1
 10055  0D06  0859               	movf	___ftdiv@f3+2,w
 10056  0D07  00A2               	movwf	___ftpack@arg+2
 10057  0D08  085A               	movf	___ftdiv@exp,w
 10058  0D09  00D2               	movwf	??___ftdiv
 10059  0D0A  0852               	movf	??___ftdiv,w
 10060  0D0B  00A3               	movwf	___ftpack@exp
 10061  0D0C  085B               	movf	___ftdiv@sign,w
 10062  0D0D  00D3               	movwf	??___ftdiv+1
 10063  0D0E  0853               	movf	??___ftdiv+1,w
 10064  0D0F  00A4               	movwf	___ftpack@sign
 10065  0D10  3189  2102         	fcall	___ftpack
 10066  0D12  0020               	movlb	0	; select bank0
 10067  0D13  0820               	movf	?___ftpack,w
 10068  0D14  00CC               	movwf	?___ftdiv
 10069  0D15  0821               	movf	?___ftpack+1,w
 10070  0D16  00CD               	movwf	?___ftdiv+1
 10071  0D17  0822               	movf	?___ftpack+2,w
 10072  0D18  00CE               	movwf	?___ftdiv+2
 10073  0D19  0008               	return
 10074  0D1A                     __end_of___ftdiv:	
 10075                           
 10076                           	psect	text41
 10077  0771                     __ptext41:	
 10078 ;; *************** function _MyFtoa *****************
 10079 ;; Defined at:
 10080 ;;		line 143 in file "../../../../../Framework/MercuryFwk/Source/c/03_Sml/02_Ssl/sf.c"
 10081 ;; Parameters:    Size  Location     Type
 10082 ;;  number          3   11[BANK1 ] float 
 10083 ;;  string          1   14[BANK1 ] PTR unsigned char 
 10084 ;;		 -> TempCelStr(50), 
 10085 ;;  precision       2   15[BANK1 ] int 
 10086 ;; Auto vars:     Size  Location     Type
 10087 ;;  ret             2   70[BANK0 ] int 
 10088 ;; Return value:  Size  Location     Type
 10089 ;;                  1    wreg      void 
 10090 ;; Registers used:
 10091 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10092 ;; Tracked objects:
 10093 ;;		On entry : 0/0
 10094 ;;		On exit  : 0/0
 10095 ;;		Unchanged: 0/0
 10096 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10097 ;;      Params:         0       0       6       0       0       0       0       0       0       0       0       0       
      +0       0
 10098 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10099 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10100 ;;      Totals:         0       5       6       0       0       0       0       0       0       0       0       0       
      +0       0
 10101 ;;Total ram usage:       11 bytes
 10102 ;; Hardware stack levels used:    1
 10103 ;; Hardware stack levels required when called:    4
 10104 ;; This function calls:
 10105 ;;		___awtoft
 10106 ;;		___ftadd
 10107 ;;		___ftmul
 10108 ;;		___ftneg
 10109 ;;		___fttol
 10110 ;;		_sprintf
 10111 ;; This function is called by:
 10112 ;;		_GetTemperature
 10113 ;; This function uses a non-reentrant model
 10114 ;;
 10115                           
 10116                           
 10117                           ;psect for function _MyFtoa
 10118  0771                     _MyFtoa:	
 10119                           
 10120                           ;sf.c: 145: int ret;
 10121                           ;sf.c: 148: ret = sprintf (string,"%d.%01u", (int) number, (int) ((number - (int) number
      +                          ) * precision));
 10122                           
 10123                           ;incstack = 0
 10124                           ; Regs used in _MyFtoa: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 10125  0771  0021               	movlb	1	; select bank1
 10126  0772  082B               	movf	MyFtoa@number^(0+128),w
 10127  0773  0020               	movlb	0	; select bank0
 10128  0774  00A8               	movwf	___fttol@f1
 10129  0775  0021               	movlb	1	; select bank1
 10130  0776  082C               	movf	(MyFtoa@number+1)^(0+128),w
 10131  0777  0020               	movlb	0	; select bank0
 10132  0778  00A9               	movwf	___fttol@f1+1
 10133  0779  0021               	movlb	1	; select bank1
 10134  077A  082D               	movf	(MyFtoa@number+2)^(0+128),w
 10135  077B  0020               	movlb	0	; select bank0
 10136  077C  00AA               	movwf	___fttol@f1+2
 10137  077D  318A  22D9  3187   	fcall	___fttol
 10138  0780  0020               	movlb	0	; select bank0
 10139  0781  0829               	movf	?___fttol+1,w
 10140  0782  00B7               	movwf	___awtoft@c+1
 10141  0783  0828               	movf	?___fttol,w
 10142  0784  00B6               	movwf	___awtoft@c
 10143  0785  3195  2522  3187   	fcall	___awtoft
 10144  0788  0020               	movlb	0	; select bank0
 10145  0789  0836               	movf	?___awtoft,w
 10146  078A  00BC               	movwf	___ftneg@f1
 10147  078B  0837               	movf	?___awtoft+1,w
 10148  078C  00BD               	movwf	___ftneg@f1+1
 10149  078D  0838               	movf	?___awtoft+2,w
 10150  078E  00BE               	movwf	___ftneg@f1+2
 10151  078F  3193  2333  3187   	fcall	___ftneg
 10152  0792  0020               	movlb	0	; select bank0
 10153  0793  083C               	movf	?___ftneg,w
 10154  0794  00C2               	movwf	___ftadd@f2
 10155  0795  083D               	movf	?___ftneg+1,w
 10156  0796  00C3               	movwf	___ftadd@f2+1
 10157  0797  083E               	movf	?___ftneg+2,w
 10158  0798  00C4               	movwf	___ftadd@f2+2
 10159  0799  0021               	movlb	1	; select bank1
 10160  079A  082B               	movf	MyFtoa@number^(0+128),w
 10161  079B  0020               	movlb	0	; select bank0
 10162  079C  00BF               	movwf	___ftadd@f1
 10163  079D  0021               	movlb	1	; select bank1
 10164  079E  082C               	movf	(MyFtoa@number+1)^(0+128),w
 10165  079F  0020               	movlb	0	; select bank0
 10166  07A0  00C0               	movwf	___ftadd@f1+1
 10167  07A1  0021               	movlb	1	; select bank1
 10168  07A2  082D               	movf	(MyFtoa@number+2)^(0+128),w
 10169  07A3  0020               	movlb	0	; select bank0
 10170  07A4  00C1               	movwf	___ftadd@f1+2
 10171  07A5  3184  24C2  3187   	fcall	___ftadd
 10172  07A8  0020               	movlb	0	; select bank0
 10173  07A9  083F               	movf	?___ftadd,w
 10174  07AA  00CF               	movwf	___ftmul@f2
 10175  07AB  0840               	movf	?___ftadd+1,w
 10176  07AC  00D0               	movwf	___ftmul@f2+1
 10177  07AD  0841               	movf	?___ftadd+2,w
 10178  07AE  00D1               	movwf	___ftmul@f2+2
 10179  07AF  0021               	movlb	1	; select bank1
 10180  07B0  0830               	movf	(MyFtoa@precision+1)^(0+128),w
 10181  07B1  0020               	movlb	0	; select bank0
 10182  07B2  00B7               	movwf	___awtoft@c+1
 10183  07B3  0021               	movlb	1	; select bank1
 10184  07B4  082F               	movf	MyFtoa@precision^(0+128),w
 10185  07B5  0020               	movlb	0	; select bank0
 10186  07B6  00B6               	movwf	___awtoft@c
 10187  07B7  3195  2522  3187   	fcall	___awtoft
 10188  07BA  0020               	movlb	0	; select bank0
 10189  07BB  0836               	movf	?___awtoft,w
 10190  07BC  00CC               	movwf	___ftmul@f1
 10191  07BD  0837               	movf	?___awtoft+1,w
 10192  07BE  00CD               	movwf	___ftmul@f1+1
 10193  07BF  0838               	movf	?___awtoft+2,w
 10194  07C0  00CE               	movwf	___ftmul@f1+2
 10195  07C1  318D  251A  3187   	fcall	___ftmul
 10196  07C4  0020               	movlb	0	; select bank0
 10197  07C5  084C               	movf	?___ftmul,w
 10198  07C6  00E8               	movwf	_MyFtoa$2438
 10199  07C7  084D               	movf	?___ftmul+1,w
 10200  07C8  00E9               	movwf	_MyFtoa$2438+1
 10201  07C9  084E               	movf	?___ftmul+2,w
 10202  07CA  00EA               	movwf	_MyFtoa$2438+2
 10203                           
 10204                           ;sf.c: 145: int ret;
 10205                           ;sf.c: 148: ret = sprintf (string,"%d.%01u", (int) number, (int) ((number - (int) number
      +                          ) * precision));
 10206  07CB  3015               	movlw	low (STR_1| (0+32768))
 10207  07CC  00DC               	movwf	sprintf@f
 10208  07CD  3098               	movlw	high (STR_1| (0+32768))
 10209  07CE  00DD               	movwf	sprintf@f+1
 10210  07CF  0021               	movlb	1	; select bank1
 10211  07D0  082B               	movf	MyFtoa@number^(0+128),w
 10212  07D1  0020               	movlb	0	; select bank0
 10213  07D2  00A8               	movwf	___fttol@f1
 10214  07D3  0021               	movlb	1	; select bank1
 10215  07D4  082C               	movf	(MyFtoa@number+1)^(0+128),w
 10216  07D5  0020               	movlb	0	; select bank0
 10217  07D6  00A9               	movwf	___fttol@f1+1
 10218  07D7  0021               	movlb	1	; select bank1
 10219  07D8  082D               	movf	(MyFtoa@number+2)^(0+128),w
 10220  07D9  0020               	movlb	0	; select bank0
 10221  07DA  00AA               	movwf	___fttol@f1+2
 10222  07DB  318A  22D9  3187   	fcall	___fttol
 10223  07DE  0020               	movlb	0	; select bank0
 10224  07DF  0829               	movf	?___fttol+1,w
 10225  07E0  00DF               	movwf	?_sprintf+3
 10226  07E1  0828               	movf	?___fttol,w
 10227  07E2  00DE               	movwf	?_sprintf+2
 10228  07E3  0868               	movf	_MyFtoa$2438,w
 10229  07E4  00A8               	movwf	___fttol@f1
 10230  07E5  0869               	movf	_MyFtoa$2438+1,w
 10231  07E6  00A9               	movwf	___fttol@f1+1
 10232  07E7  086A               	movf	_MyFtoa$2438+2,w
 10233  07E8  00AA               	movwf	___fttol@f1+2
 10234  07E9  318A  22D9  3187   	fcall	___fttol
 10235  07EC  0020               	movlb	0	; select bank0
 10236  07ED  0829               	movf	?___fttol+1,w
 10237  07EE  00E1               	movwf	?_sprintf+5
 10238  07EF  0828               	movf	?___fttol,w
 10239  07F0  00E0               	movwf	?_sprintf+4
 10240  07F1  0021               	movlb	1	; select bank1
 10241  07F2  082E               	movf	MyFtoa@string^(0+128),w
 10242  07F3  3180  20B2         	fcall	_sprintf
 10243  07F5  0020               	movlb	0	; select bank0
 10244  07F6  085D               	movf	?_sprintf+1,w
 10245  07F7  00E7               	movwf	MyFtoa@ret+1
 10246  07F8  085C               	movf	?_sprintf,w
 10247  07F9  00E6               	movwf	MyFtoa@ret
 10248  07FA  0008               	return
 10249  07FB                     __end_of_MyFtoa:	
 10250                           
 10251                           	psect	text42
 10252  00B2                     __ptext42:	
 10253 ;; *************** function _sprintf *****************
 10254 ;; Defined at:
 10255 ;;		line 492 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\doprnt.c"
 10256 ;; Parameters:    Size  Location     Type
 10257 ;;  sp              1    wreg     PTR unsigned char 
 10258 ;;		 -> TempCelStr(50), 
 10259 ;;  f               2   60[BANK0 ] PTR const unsigned char 
 10260 ;;		 -> STR_1(8), 
 10261 ;; Auto vars:     Size  Location     Type
 10262 ;;  sp              1    9[BANK1 ] PTR unsigned char 
 10263 ;;		 -> TempCelStr(50), 
 10264 ;;  tmpval          4    0        struct .
 10265 ;;  width           2    7[BANK1 ] int 
 10266 ;;  val             2    4[BANK1 ] unsigned int 
 10267 ;;  ccnt            2    1[BANK1 ] int 
 10268 ;;  cp              2    0        PTR const unsigned char 
 10269 ;;  len             2    0        unsigned int 
 10270 ;;  c               1   10[BANK1 ] char 
 10271 ;;  flag            1    6[BANK1 ] unsigned char 
 10272 ;;  ap              1    3[BANK1 ] PTR void [1]
 10273 ;;		 -> ?_sprintf(2), 
 10274 ;;  prec            1    0[BANK1 ] char 
 10275 ;; Return value:  Size  Location     Type
 10276 ;;                  2   60[BANK0 ] int 
 10277 ;; Registers used:
 10278 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10279 ;; Tracked objects:
 10280 ;;		On entry : 0/0
 10281 ;;		On exit  : 0/0
 10282 ;;		Unchanged: 0/0
 10283 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10284 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10285 ;;      Locals:         0       0      11       0       0       0       0       0       0       0       0       0       
      +0       0
 10286 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10287 ;;      Totals:         0      10      11       0       0       0       0       0       0       0       0       0       
      +0       0
 10288 ;;Total ram usage:       21 bytes
 10289 ;; Hardware stack levels used:    1
 10290 ;; Hardware stack levels required when called:    3
 10291 ;; This function calls:
 10292 ;;		___lwdiv
 10293 ;;		___lwmod
 10294 ;;		___wmul
 10295 ;;		_isdigit
 10296 ;; This function is called by:
 10297 ;;		_MyFtoa
 10298 ;; This function uses a non-reentrant model
 10299 ;;
 10300                           
 10301                           
 10302                           ;psect for function _sprintf
 10303  00B2                     _sprintf:	
 10304                           
 10305                           ;incstack = 0
 10306                           ; Regs used in _sprintf: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 10307                           ;sprintf@sp stored from wreg
 10308  00B2  0021               	movlb	1	; select bank1
 10309  00B3  00A9               	movwf	sprintf@sp^(0+128)
 10310                           
 10311                           ;doprnt.c: 494: va_list ap;
 10312                           ;doprnt.c: 499: signed char c;
 10313                           ;doprnt.c: 501: int width;
 10314                           ;doprnt.c: 506: signed char prec;
 10315                           ;doprnt.c: 508: unsigned char flag;
 10316                           ;doprnt.c: 510: int ccnt = 0;
 10317  00B4  01A1               	clrf	sprintf@ccnt^(0+128)
 10318  00B5  01A2               	clrf	(sprintf@ccnt+1)^(0+128)
 10319                           
 10320                           ;doprnt.c: 523: union {
 10321                           ;doprnt.c: 524: unsigned long vd;
 10322                           ;doprnt.c: 525: double integ;
 10323                           ;doprnt.c: 526: } tmpval;
 10324                           ;doprnt.c: 528: unsigned int val;
 10325                           ;doprnt.c: 529: unsigned len;
 10326                           ;doprnt.c: 530: const char * cp;
 10327                           ;doprnt.c: 533: *ap = __va_start();
 10328  00B6  305E               	movlw	(low ((?_sprintf| 0+2)))& (0+255)
 10329  00B7  0020               	movlb	0	; select bank0
 10330  00B8  00E2               	movwf	??_sprintf
 10331  00B9  0862               	movf	??_sprintf,w
 10332  00BA  0021               	movlb	1	; select bank1
 10333  00BB  00A3               	movwf	sprintf@ap^(0+128)
 10334  00BC                     l4484:	
 10335                           ;doprnt.c: 536: while(c = *f++) {
 10336                           
 10337  00BC  0020               	movlb	0	; select bank0
 10338  00BD  085D               	movf	sprintf@f+1,w
 10339  00BE  00E3               	movwf	??_sprintf+1
 10340  00BF  085C               	movf	sprintf@f,w
 10341  00C0  00E2               	movwf	??_sprintf
 10342  00C1  0ADC               	incf	sprintf@f,f
 10343  00C2  1903               	skipnz
 10344  00C3  0ADD               	incf	sprintf@f+1,f
 10345  00C4  0862               	movf	??_sprintf,w
 10346  00C5  0084               	movwf	4
 10347  00C6  0863               	movf	??_sprintf+1,w
 10348  00C7  0085               	movwf	5
 10349  00C8  0800               	movf	0,w	;code access
 10350  00C9  00E4               	movwf	??_sprintf+2
 10351  00CA  0864               	movf	??_sprintf+2,w
 10352  00CB  0021               	movlb	1	; select bank1
 10353  00CC  00AA               	movwf	sprintf@c^(0+128)
 10354  00CD  082A               	movf	sprintf@c^(0+128),w
 10355  00CE  1903               	btfsc	3,2
 10356  00CF  2AB1               	goto	l4486
 10357                           
 10358                           ;doprnt.c: 538: if(c != '%')
 10359  00D0  3025               	movlw	37
 10360  00D1  062A               	xorwf	sprintf@c^(0+128),w
 10361  00D2  1903               	btfsc	3,2
 10362  00D3  28E9               	goto	l4374
 10363                           
 10364                           ;doprnt.c: 540: {
 10365                           ;doprnt.c: 541: ((*sp++ = (c)),(++ccnt));
 10366  00D4  082A               	movf	sprintf@c^(0+128),w
 10367  00D5  0020               	movlb	0	; select bank0
 10368  00D6  00E2               	movwf	??_sprintf
 10369  00D7  0021               	movlb	1	; select bank1
 10370  00D8  0829               	movf	sprintf@sp^(0+128),w
 10371  00D9  0086               	movwf	6
 10372  00DA  3002               	movlw	2	; select bank4/5
 10373  00DB  0087               	movwf	7
 10374  00DC  0020               	movlb	0	; select bank0
 10375  00DD  0862               	movf	??_sprintf,w
 10376  00DE  0081               	movwf	1
 10377  00DF  3001               	movlw	1
 10378  00E0  00E2               	movwf	??_sprintf
 10379  00E1  0862               	movf	??_sprintf,w
 10380  00E2  0021               	movlb	1	; select bank1
 10381  00E3  07A9               	addwf	sprintf@sp^(0+128),f
 10382  00E4  3001               	movlw	1
 10383  00E5  07A1               	addwf	sprintf@ccnt^(0+128),f
 10384  00E6  3000               	movlw	0
 10385  00E7  3DA2               	addwfc	(sprintf@ccnt+1)^(0+128),f
 10386                           
 10387                           ;doprnt.c: 542: continue;
 10388  00E8  28BC               	goto	l4484
 10389  00E9                     l4374:	
 10390                           
 10391                           ;doprnt.c: 543: }
 10392                           ;doprnt.c: 546: width = 0;
 10393  00E9  01A7               	clrf	sprintf@width^(0+128)
 10394  00EA  01A8               	clrf	(sprintf@width+1)^(0+128)
 10395                           
 10396                           ;doprnt.c: 548: flag = 0;
 10397  00EB  01A6               	clrf	sprintf@flag^(0+128)
 10398                           
 10399                           ;doprnt.c: 551: switch(*f) {
 10400                           
 10401                           ;doprnt.c: 550: for(;;) {
 10402  00EC  28F4               	goto	l4380
 10403  00ED                     l835:	
 10404                           ;doprnt.c: 579: case '0':
 10405                           
 10406                           
 10407                           ;doprnt.c: 580: flag |= 0x04;
 10408  00ED  0021               	movlb	1	; select bank1
 10409  00EE  1526               	bsf	sprintf@flag^(0+128),2
 10410                           
 10411                           ;doprnt.c: 581: f++;
 10412  00EF  3001               	movlw	1
 10413  00F0  0020               	movlb	0	; select bank0
 10414  00F1  07DC               	addwf	sprintf@f,f
 10415  00F2  3000               	movlw	0
 10416  00F3  3DDD               	addwfc	sprintf@f+1,f
 10417  00F4                     l4380:	
 10418                           ;doprnt.c: 584: }
 10419                           
 10420                           ;doprnt.c: 582: continue;
 10421                           
 10422  00F4  0020               	movlb	0	; select bank0
 10423  00F5  085C               	movf	sprintf@f,w
 10424  00F6  0084               	movwf	4
 10425  00F7  085D               	movf	sprintf@f+1,w
 10426  00F8  0085               	movwf	5
 10427  00F9  0800               	movf	0,w	;code access
 10428                           
 10429                           ; Switch size 1, requested type "space"
 10430                           ; Number of cases is 1, Range of values is 48 to 48
 10431                           ; switch strategies available:
 10432                           ; Name         Instructions Cycles
 10433                           ; simple_byte            4     3 (average)
 10434                           ; direct_byte           11     9 (fixed)
 10435                           ; jumptable            263     9 (fixed)
 10436                           ;	Chosen strategy is simple_byte
 10437  00FA  3A30               	xorlw	48	; case 48
 10438  00FB  1903               	skipnz
 10439  00FC  28ED               	goto	l835
 10440  00FD  28FE               	goto	l4382
 10441  00FE                     l4382:	
 10442                           ;doprnt.c: 586: }
 10443                           
 10444                           ;doprnt.c: 585: break;
 10445                           
 10446                           
 10447                           ;doprnt.c: 597: if(isdigit((unsigned)*f)) {
 10448  00FE  085C               	movf	sprintf@f,w
 10449  00FF  0084               	movwf	4
 10450  0100  085D               	movf	sprintf@f+1,w
 10451  0101  0085               	movwf	5
 10452  0102  0800               	movf	0,w	;code access
 10453  0103  3193  23D8  3180   	fcall	_isdigit
 10454  0106  1C03               	btfss	3,0
 10455  0107  2948               	goto	l4396
 10456                           
 10457                           ;doprnt.c: 598: width = 0;
 10458  0108  0021               	movlb	1	; select bank1
 10459  0109  01A7               	clrf	sprintf@width^(0+128)
 10460  010A  01A8               	clrf	(sprintf@width+1)^(0+128)
 10461  010B                     l4386:	
 10462                           ;doprnt.c: 599: do {
 10463                           
 10464                           
 10465                           ;doprnt.c: 600: width *= 10;
 10466  010B  300A               	movlw	10
 10467  010C  0020               	movlb	0	; select bank0
 10468  010D  00A0               	movwf	___wmul@multiplier
 10469  010E  3000               	movlw	0
 10470  010F  00A1               	movwf	___wmul@multiplier+1
 10471  0110  0021               	movlb	1	; select bank1
 10472  0111  0828               	movf	(sprintf@width+1)^(0+128),w
 10473  0112  0020               	movlb	0	; select bank0
 10474  0113  00A3               	movwf	___wmul@multiplicand+1
 10475  0114  0021               	movlb	1	; select bank1
 10476  0115  0827               	movf	sprintf@width^(0+128),w
 10477  0116  0020               	movlb	0	; select bank0
 10478  0117  00A2               	movwf	___wmul@multiplicand
 10479  0118  3194  24C7  3180   	fcall	___wmul
 10480  011B  0020               	movlb	0	; select bank0
 10481  011C  0821               	movf	?___wmul+1,w
 10482  011D  0021               	movlb	1	; select bank1
 10483  011E  00A8               	movwf	(sprintf@width+1)^(0+128)
 10484  011F  0020               	movlb	0	; select bank0
 10485  0120  0820               	movf	?___wmul,w
 10486  0121  0021               	movlb	1	; select bank1
 10487  0122  00A7               	movwf	sprintf@width^(0+128)
 10488                           
 10489                           ;doprnt.c: 601: width += *f++ - '0';
 10490  0123  0020               	movlb	0	; select bank0
 10491  0124  085C               	movf	sprintf@f,w
 10492  0125  0084               	movwf	4
 10493  0126  085D               	movf	sprintf@f+1,w
 10494  0127  0085               	movwf	5
 10495  0128  0800               	movf	0,w	;code access
 10496  0129  3ED0               	addlw	208
 10497  012A  00E2               	movwf	??_sprintf
 10498  012B  30FF               	movlw	255
 10499  012C  1803               	skipnc
 10500  012D  3000               	movlw	0
 10501  012E  00E3               	movwf	??_sprintf+1
 10502  012F  0862               	movf	??_sprintf,w
 10503  0130  0021               	movlb	1	; select bank1
 10504  0131  07A7               	addwf	sprintf@width^(0+128),f
 10505  0132  0020               	movlb	0	; select bank0
 10506  0133  0863               	movf	??_sprintf+1,w
 10507  0134  0021               	movlb	1	; select bank1
 10508  0135  3DA8               	addwfc	(sprintf@width+1)^(0+128),f
 10509  0136  3001               	movlw	1
 10510  0137  0020               	movlb	0	; select bank0
 10511  0138  07DC               	addwf	sprintf@f,f
 10512  0139  3000               	movlw	0
 10513  013A  3DDD               	addwfc	sprintf@f+1,f
 10514                           
 10515                           ;doprnt.c: 602: } while(isdigit((unsigned)*f));
 10516  013B  085C               	movf	sprintf@f,w
 10517  013C  0084               	movwf	4
 10518  013D  085D               	movf	sprintf@f+1,w
 10519  013E  0085               	movwf	5
 10520  013F  0800               	movf	0,w	;code access
 10521  0140  3193  23D8  3180   	fcall	_isdigit
 10522  0143  1C03               	btfss	3,0
 10523  0144  2948               	goto	l4396
 10524  0145  290B               	goto	l4386
 10525  0146                     l849:	
 10526                           ;doprnt.c: 817: case 'u':
 10527                           
 10528                           ;doprnt.c: 813: continue;
 10529                           
 10530                           ;doprnt.c: 802: default:
 10531                           
 10532                           ;doprnt.c: 698: case 'i':
 10533                           ;doprnt.c: 699: break;
 10534                           
 10535                           ;doprnt.c: 697: case 'd':
 10536                           
 10537                           ;doprnt.c: 638: goto alldone;
 10538                           
 10539                           ;doprnt.c: 637: case 0:
 10540                           
 10541                           ;doprnt.c: 608: }
 10542                           ;doprnt.c: 635: switch(c = *f++) {
 10543                           
 10544                           
 10545                           ;doprnt.c: 818: flag |= 0x40;
 10546  0146  1726               	bsf	sprintf@flag^(0+128),6
 10547                           
 10548                           ;doprnt.c: 822: }
 10549                           
 10550                           ;doprnt.c: 819: break;
 10551  0147  2964               	goto	l847
 10552  0148                     l4396:	
 10553  0148  0020               	movlb	0	; select bank0
 10554  0149  085D               	movf	sprintf@f+1,w
 10555  014A  00E3               	movwf	??_sprintf+1
 10556  014B  085C               	movf	sprintf@f,w
 10557  014C  00E2               	movwf	??_sprintf
 10558  014D  0ADC               	incf	sprintf@f,f
 10559  014E  1903               	skipnz
 10560  014F  0ADD               	incf	sprintf@f+1,f
 10561  0150  0862               	movf	??_sprintf,w
 10562  0151  0084               	movwf	4
 10563  0152  0863               	movf	??_sprintf+1,w
 10564  0153  0085               	movwf	5
 10565  0154  0800               	movf	0,w	;code access
 10566  0155  0021               	movlb	1	; select bank1
 10567  0156  00AA               	movwf	sprintf@c^(0+128)
 10568                           
 10569                           ; Switch size 1, requested type "space"
 10570                           ; Number of cases is 4, Range of values is 0 to 117
 10571                           ; switch strategies available:
 10572                           ; Name         Instructions Cycles
 10573                           ; simple_byte           13     7 (average)
 10574                           ; direct_byte          242     6 (fixed)
 10575                           ; jumptable            260     6 (fixed)
 10576                           ;	Chosen strategy is simple_byte
 10577  0157  3A00               	xorlw	0	; case 0
 10578  0158  1903               	skipnz
 10579  0159  2AB1               	goto	l4486
 10580  015A  3A64               	xorlw	100	; case 100
 10581  015B  1903               	skipnz
 10582  015C  2964               	goto	l847
 10583  015D  3A0D               	xorlw	13	; case 105
 10584  015E  1903               	skipnz
 10585  015F  2964               	goto	l847
 10586  0160  3A1C               	xorlw	28	; case 117
 10587  0161  1903               	skipnz
 10588  0162  2946               	goto	l849
 10589  0163  28BC               	goto	l4484
 10590  0164                     l847:	
 10591                           
 10592                           ;doprnt.c: 1251: if((flag & 0x40) == 0x00)
 10593  0164  0021               	movlb	1	; select bank1
 10594  0165  1B26               	btfsc	sprintf@flag^(0+128),6
 10595  0166  2982               	goto	l4408
 10596                           
 10597                           ;doprnt.c: 1253: {
 10598                           ;doprnt.c: 1259: val = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
 10599  0167  0823               	movf	sprintf@ap^(0+128),w
 10600  0168  0086               	movwf	6
 10601  0169  0187               	clrf	7
 10602  016A  3F40               	moviw [0]fsr1
 10603  016B  00A4               	movwf	sprintf@val^(0+128)
 10604  016C  3F41               	moviw [1]fsr1
 10605  016D  00A5               	movwf	(sprintf@val+1)^(0+128)
 10606  016E  3002               	movlw	2
 10607  016F  0020               	movlb	0	; select bank0
 10608  0170  00E2               	movwf	??_sprintf
 10609  0171  0862               	movf	??_sprintf,w
 10610  0172  0021               	movlb	1	; select bank1
 10611  0173  07A3               	addwf	sprintf@ap^(0+128),f
 10612                           
 10613                           ;doprnt.c: 1261: if((int)val < 0) {
 10614  0174  1FA5               	btfss	(sprintf@val+1)^(0+128),7
 10615  0175  298F               	goto	l4412
 10616                           
 10617                           ;doprnt.c: 1262: flag |= 0x03;
 10618  0176  3003               	movlw	3
 10619  0177  0020               	movlb	0	; select bank0
 10620  0178  00E2               	movwf	??_sprintf
 10621  0179  0862               	movf	??_sprintf,w
 10622  017A  0021               	movlb	1	; select bank1
 10623  017B  04A6               	iorwf	sprintf@flag^(0+128),f
 10624                           
 10625                           ;doprnt.c: 1263: val = -val;
 10626  017C  09A4               	comf	sprintf@val^(0+128),f
 10627  017D  09A5               	comf	(sprintf@val+1)^(0+128),f
 10628  017E  0AA4               	incf	sprintf@val^(0+128),f
 10629  017F  1903               	skipnz
 10630  0180  0AA5               	incf	(sprintf@val+1)^(0+128),f
 10631                           
 10632                           ;doprnt.c: 1264: }
 10633                           ;doprnt.c: 1266: }
 10634  0181  298F               	goto	l4412
 10635  0182                     l4408:	
 10636                           
 10637                           ;doprnt.c: 1268: else
 10638                           ;doprnt.c: 1273: {
 10639                           ;doprnt.c: 1286: val = (*(unsigned *)__va_arg((*(unsigned **)ap), (unsigned)0));
 10640  0182  0823               	movf	sprintf@ap^(0+128),w
 10641  0183  0086               	movwf	6
 10642  0184  0187               	clrf	7
 10643  0185  3F40               	moviw [0]fsr1
 10644  0186  00A4               	movwf	sprintf@val^(0+128)
 10645  0187  3F41               	moviw [1]fsr1
 10646  0188  00A5               	movwf	(sprintf@val+1)^(0+128)
 10647  0189  3002               	movlw	2
 10648  018A  0020               	movlb	0	; select bank0
 10649  018B  00E2               	movwf	??_sprintf
 10650  018C  0862               	movf	??_sprintf,w
 10651  018D  0021               	movlb	1	; select bank1
 10652  018E  07A3               	addwf	sprintf@ap^(0+128),f
 10653  018F                     l4412:	
 10654                           
 10655                           ;doprnt.c: 1287: }
 10656                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
 10657  018F  01AA               	clrf	sprintf@c^(0+128)
 10658  0190  0AAA               	incf	sprintf@c^(0+128),f
 10659  0191  3005               	movlw	5
 10660  0192  062A               	xorwf	sprintf@c^(0+128),w
 10661  0193  1903               	btfsc	3,2
 10662  0194  29BA               	goto	l4424
 10663  0195                     l4418:	
 10664                           
 10665                           ;doprnt.c: 1306: if(val < dpowers[c])
 10666  0195  082A               	movf	sprintf@c^(0+128),w
 10667  0196  0020               	movlb	0	; select bank0
 10668  0197  00E2               	movwf	??_sprintf
 10669  0198  01E3               	clrf	??_sprintf+1
 10670  0199  35E2               	lslf	??_sprintf,f
 10671  019A  0DE3               	rlf	??_sprintf+1,f
 10672  019B  3000               	movlw	low (_dpowers| (0+32768))
 10673  019C  0762               	addwf	??_sprintf,w
 10674  019D  0084               	movwf	4
 10675  019E  3098               	movlw	high (_dpowers| (0+32768))
 10676  019F  3D63               	addwfc	??_sprintf+1,w
 10677  01A0  0085               	movwf	5
 10678  01A1  3F00               	moviw [0]fsr0
 10679  01A2  00E4               	movwf	??_sprintf+2
 10680  01A3  3F01               	moviw [1]fsr0
 10681  01A4  00E5               	movwf	??_sprintf+3
 10682  01A5  0865               	movf	??_sprintf+3,w
 10683  01A6  0021               	movlb	1	; select bank1
 10684  01A7  0225               	subwf	(sprintf@val+1)^(0+128),w
 10685  01A8  1D03               	skipz
 10686  01A9  29AE               	goto	u4685
 10687  01AA  0020               	movlb	0	; select bank0
 10688  01AB  0864               	movf	??_sprintf+2,w
 10689  01AC  0021               	movlb	1	; select bank1
 10690  01AD  0224               	subwf	sprintf@val^(0+128),w
 10691  01AE                     u4685:	
 10692  01AE  1C03               	btfss	3,0
 10693  01AF  29BA               	goto	l4424
 10694                           
 10695                           ;doprnt.c: 1307: break;
 10696  01B0  3001               	movlw	1
 10697  01B1  0020               	movlb	0	; select bank0
 10698  01B2  00E2               	movwf	??_sprintf
 10699  01B3  0862               	movf	??_sprintf,w
 10700  01B4  0021               	movlb	1	; select bank1
 10701  01B5  07AA               	addwf	sprintf@c^(0+128),f
 10702  01B6  3005               	movlw	5
 10703  01B7  062A               	xorwf	sprintf@c^(0+128),w
 10704  01B8  1D03               	btfss	3,2
 10705  01B9  2995               	goto	l4418
 10706  01BA                     l4424:	
 10707                           
 10708                           ;doprnt.c: 1345: if(width && flag & 0x03)
 10709  01BA  0827               	movf	sprintf@width^(0+128),w
 10710  01BB  0428               	iorwf	(sprintf@width+1)^(0+128),w
 10711  01BC  1903               	btfsc	3,2
 10712  01BD  29C6               	goto	l856
 10713  01BE  0826               	movf	sprintf@flag^(0+128),w
 10714  01BF  3903               	andlw	3
 10715  01C0  1903               	btfsc	3,2
 10716  01C1  29C6               	goto	l856
 10717                           
 10718                           ;doprnt.c: 1346: width--;
 10719  01C2  30FF               	movlw	255
 10720  01C3  07A7               	addwf	sprintf@width^(0+128),f
 10721  01C4  30FF               	movlw	255
 10722  01C5  3DA8               	addwfc	(sprintf@width+1)^(0+128),f
 10723  01C6                     l856:	
 10724                           
 10725                           ;doprnt.c: 1381: if(width > c)
 10726  01C6  082A               	movf	sprintf@c^(0+128),w
 10727  01C7  0020               	movlb	0	; select bank0
 10728  01C8  00E2               	movwf	??_sprintf
 10729  01C9  01E3               	clrf	??_sprintf+1
 10730  01CA  1BE2               	btfsc	??_sprintf,7
 10731  01CB  03E3               	decf	??_sprintf+1,f
 10732  01CC  0863               	movf	??_sprintf+1,w
 10733  01CD  3A80               	xorlw	128
 10734  01CE  00E4               	movwf	??_sprintf+2
 10735  01CF  0021               	movlb	1	; select bank1
 10736  01D0  0828               	movf	(sprintf@width+1)^(0+128),w
 10737  01D1  3A80               	xorlw	128
 10738  01D2  0020               	movlb	0	; select bank0
 10739  01D3  0264               	subwf	??_sprintf+2,w
 10740  01D4  1D03               	skipz
 10741  01D5  29DA               	goto	u4725
 10742  01D6  0021               	movlb	1	; select bank1
 10743  01D7  0827               	movf	sprintf@width^(0+128),w
 10744  01D8  0020               	movlb	0	; select bank0
 10745  01D9  0262               	subwf	??_sprintf,w
 10746  01DA                     u4725:	
 10747  01DA  1803               	skipnc
 10748  01DB  29EB               	goto	l4432
 10749                           
 10750                           ;doprnt.c: 1382: width -= c;
 10751  01DC  0021               	movlb	1	; select bank1
 10752  01DD  082A               	movf	sprintf@c^(0+128),w
 10753  01DE  0020               	movlb	0	; select bank0
 10754  01DF  00E2               	movwf	??_sprintf
 10755  01E0  01E3               	clrf	??_sprintf+1
 10756  01E1  1BE2               	btfsc	??_sprintf,7
 10757  01E2  03E3               	decf	??_sprintf+1,f
 10758  01E3  0862               	movf	??_sprintf,w
 10759  01E4  0021               	movlb	1	; select bank1
 10760  01E5  02A7               	subwf	sprintf@width^(0+128),f
 10761  01E6  0020               	movlb	0	; select bank0
 10762  01E7  0863               	movf	??_sprintf+1,w
 10763  01E8  0021               	movlb	1	; select bank1
 10764  01E9  3BA8               	subwfb	(sprintf@width+1)^(0+128),f
 10765  01EA  29EE               	goto	l4434
 10766  01EB                     l4432:	
 10767                           
 10768                           ;doprnt.c: 1383: else
 10769                           ;doprnt.c: 1384: width = 0;
 10770  01EB  0021               	movlb	1	; select bank1
 10771  01EC  01A7               	clrf	sprintf@width^(0+128)
 10772  01ED  01A8               	clrf	(sprintf@width+1)^(0+128)
 10773  01EE                     l4434:	
 10774                           
 10775                           ;doprnt.c: 1387: if(flag & 0x04) {
 10776  01EE  1D26               	btfss	sprintf@flag^(0+128),2
 10777  01EF  2A25               	goto	l4454
 10778                           
 10779                           ;doprnt.c: 1392: if(flag & 0x03)
 10780  01F0  0826               	movf	sprintf@flag^(0+128),w
 10781  01F1  3903               	andlw	3
 10782  01F2  1903               	btfsc	3,2
 10783  01F3  2A08               	goto	l4444
 10784                           
 10785                           ;doprnt.c: 1393: ((*sp++ = ('-')),(++ccnt));
 10786  01F4  302D               	movlw	45
 10787  01F5  0020               	movlb	0	; select bank0
 10788  01F6  00E2               	movwf	??_sprintf
 10789  01F7  0021               	movlb	1	; select bank1
 10790  01F8  0829               	movf	sprintf@sp^(0+128),w
 10791  01F9  0086               	movwf	6
 10792  01FA  3002               	movlw	2	; select bank4/5
 10793  01FB  0087               	movwf	7
 10794  01FC  0020               	movlb	0	; select bank0
 10795  01FD  0862               	movf	??_sprintf,w
 10796  01FE  0081               	movwf	1
 10797  01FF  3001               	movlw	1
 10798  0200  00E2               	movwf	??_sprintf
 10799  0201  0862               	movf	??_sprintf,w
 10800  0202  0021               	movlb	1	; select bank1
 10801  0203  07A9               	addwf	sprintf@sp^(0+128),f
 10802  0204  3001               	movlw	1
 10803  0205  07A1               	addwf	sprintf@ccnt^(0+128),f
 10804  0206  3000               	movlw	0
 10805  0207  3DA2               	addwfc	(sprintf@ccnt+1)^(0+128),f
 10806  0208                     l4444:	
 10807                           
 10808                           ;doprnt.c: 1415: if(width)
 10809  0208  0827               	movf	sprintf@width^(0+128),w
 10810  0209  0428               	iorwf	(sprintf@width+1)^(0+128),w
 10811  020A  1903               	btfsc	3,2
 10812  020B  2A5D               	goto	l4472
 10813                           
 10814                           ;doprnt.c: 1417: ((*sp++ = ('0')),(++ccnt));
 10815                           
 10816                           ;doprnt.c: 1416: do
 10817  020C  3030               	movlw	48
 10818  020D  0020               	movlb	0	; select bank0
 10819  020E  00E2               	movwf	??_sprintf
 10820  020F  0021               	movlb	1	; select bank1
 10821  0210  0829               	movf	sprintf@sp^(0+128),w
 10822  0211  0086               	movwf	6
 10823  0212  3002               	movlw	2	; select bank4/5
 10824  0213  0087               	movwf	7
 10825  0214  0020               	movlb	0	; select bank0
 10826  0215  0862               	movf	??_sprintf,w
 10827  0216  0081               	movwf	1
 10828  0217  3001               	movlw	1
 10829  0218  00E2               	movwf	??_sprintf
 10830  0219  0862               	movf	??_sprintf,w
 10831  021A  0021               	movlb	1	; select bank1
 10832  021B  07A9               	addwf	sprintf@sp^(0+128),f
 10833  021C  3001               	movlw	1
 10834  021D  07A1               	addwf	sprintf@ccnt^(0+128),f
 10835  021E  3000               	movlw	0
 10836  021F  3DA2               	addwfc	(sprintf@ccnt+1)^(0+128),f
 10837                           
 10838                           ;doprnt.c: 1418: while(--width);
 10839  0220  30FF               	movlw	255
 10840  0221  07A7               	addwf	sprintf@width^(0+128),f
 10841  0222  30FF               	movlw	255
 10842  0223  3DA8               	addwfc	(sprintf@width+1)^(0+128),f
 10843  0224  2A08               	goto	l4444
 10844  0225                     l4454:	
 10845                           ;doprnt.c: 1420: } else
 10846                           
 10847                           
 10848                           ;doprnt.c: 1422: {
 10849                           ;doprnt.c: 1424: if(width
 10850                           ;doprnt.c: 1428: )
 10851  0225  0827               	movf	sprintf@width^(0+128),w
 10852  0226  0428               	iorwf	(sprintf@width+1)^(0+128),w
 10853  0227  1903               	btfsc	3,2
 10854  0228  2A45               	goto	l4464
 10855  0229                     l4456:	
 10856                           ;doprnt.c: 1429: do
 10857                           
 10858                           
 10859                           ;doprnt.c: 1430: ((*sp++ = (' ')),(++ccnt));
 10860  0229  3020               	movlw	32
 10861  022A  0020               	movlb	0	; select bank0
 10862  022B  00E2               	movwf	??_sprintf
 10863  022C  0021               	movlb	1	; select bank1
 10864  022D  0829               	movf	sprintf@sp^(0+128),w
 10865  022E  0086               	movwf	6
 10866  022F  3002               	movlw	2	; select bank4/5
 10867  0230  0087               	movwf	7
 10868  0231  0020               	movlb	0	; select bank0
 10869  0232  0862               	movf	??_sprintf,w
 10870  0233  0081               	movwf	1
 10871  0234  3001               	movlw	1
 10872  0235  00E2               	movwf	??_sprintf
 10873  0236  0862               	movf	??_sprintf,w
 10874  0237  0021               	movlb	1	; select bank1
 10875  0238  07A9               	addwf	sprintf@sp^(0+128),f
 10876  0239  3001               	movlw	1
 10877  023A  07A1               	addwf	sprintf@ccnt^(0+128),f
 10878  023B  3000               	movlw	0
 10879  023C  3DA2               	addwfc	(sprintf@ccnt+1)^(0+128),f
 10880                           
 10881                           ;doprnt.c: 1431: while(--width);
 10882  023D  30FF               	movlw	255
 10883  023E  07A7               	addwf	sprintf@width^(0+128),f
 10884  023F  30FF               	movlw	255
 10885  0240  3DA8               	addwfc	(sprintf@width+1)^(0+128),f
 10886  0241  0827               	movf	sprintf@width^(0+128),w
 10887  0242  0428               	iorwf	(sprintf@width+1)^(0+128),w
 10888  0243  1D03               	btfss	3,2
 10889  0244  2A29               	goto	l4456
 10890  0245                     l4464:	
 10891                           
 10892                           ;doprnt.c: 1438: if(flag & 0x03)
 10893  0245  0826               	movf	sprintf@flag^(0+128),w
 10894  0246  3903               	andlw	3
 10895  0247  1903               	btfsc	3,2
 10896  0248  2A5D               	goto	l4472
 10897                           
 10898                           ;doprnt.c: 1439: ((*sp++ = ('-')),(++ccnt));
 10899  0249  302D               	movlw	45
 10900  024A  0020               	movlb	0	; select bank0
 10901  024B  00E2               	movwf	??_sprintf
 10902  024C  0021               	movlb	1	; select bank1
 10903  024D  0829               	movf	sprintf@sp^(0+128),w
 10904  024E  0086               	movwf	6
 10905  024F  3002               	movlw	2	; select bank4/5
 10906  0250  0087               	movwf	7
 10907  0251  0020               	movlb	0	; select bank0
 10908  0252  0862               	movf	??_sprintf,w
 10909  0253  0081               	movwf	1
 10910  0254  3001               	movlw	1
 10911  0255  00E2               	movwf	??_sprintf
 10912  0256  0862               	movf	??_sprintf,w
 10913  0257  0021               	movlb	1	; select bank1
 10914  0258  07A9               	addwf	sprintf@sp^(0+128),f
 10915  0259  3001               	movlw	1
 10916  025A  07A1               	addwf	sprintf@ccnt^(0+128),f
 10917  025B  3000               	movlw	0
 10918  025C  3DA2               	addwfc	(sprintf@ccnt+1)^(0+128),f
 10919  025D                     l4472:	
 10920                           
 10921                           ;doprnt.c: 1469: }
 10922                           ;doprnt.c: 1472: prec = c;
 10923  025D  082A               	movf	sprintf@c^(0+128),w
 10924  025E  0020               	movlb	0	; select bank0
 10925  025F  00E2               	movwf	??_sprintf
 10926  0260  0862               	movf	??_sprintf,w
 10927  0261  0021               	movlb	1	; select bank1
 10928  0262  00A0               	movwf	sprintf@prec^(0+128)
 10929  0263                     l4482:	
 10930                           ;doprnt.c: 1474: while(prec--) {
 10931                           
 10932  0263  30FF               	movlw	255
 10933  0264  0020               	movlb	0	; select bank0
 10934  0265  00E2               	movwf	??_sprintf
 10935  0266  0862               	movf	??_sprintf,w
 10936  0267  0021               	movlb	1	; select bank1
 10937  0268  07A0               	addwf	sprintf@prec^(0+128),f
 10938  0269  0A20               	incf	sprintf@prec^(0+128),w
 10939  026A  1903               	btfsc	3,2
 10940  026B  28BC               	goto	l4484
 10941                           
 10942                           ;doprnt.c: 1478: {
 10943                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
 10944  026C  300A               	movlw	10
 10945  026D  0020               	movlb	0	; select bank0
 10946  026E  00A8               	movwf	___lwmod@divisor
 10947  026F  3000               	movlw	0
 10948  0270  00A9               	movwf	___lwmod@divisor+1
 10949  0271  0021               	movlb	1	; select bank1
 10950  0272  0820               	movf	sprintf@prec^(0+128),w
 10951  0273  0020               	movlb	0	; select bank0
 10952  0274  00E2               	movwf	??_sprintf
 10953  0275  01E3               	clrf	??_sprintf+1
 10954  0276  35E2               	lslf	??_sprintf,f
 10955  0277  0DE3               	rlf	??_sprintf+1,f
 10956  0278  3000               	movlw	low (_dpowers| (0+32768))
 10957  0279  0762               	addwf	??_sprintf,w
 10958  027A  0084               	movwf	4
 10959  027B  3098               	movlw	high (_dpowers| (0+32768))
 10960  027C  3D63               	addwfc	??_sprintf+1,w
 10961  027D  0085               	movwf	5
 10962  027E  3F00               	moviw [0]fsr0
 10963  027F  00A0               	movwf	___lwdiv@divisor
 10964  0280  3F01               	moviw [1]fsr0
 10965  0281  00A1               	movwf	___lwdiv@divisor+1
 10966  0282  0021               	movlb	1	; select bank1
 10967  0283  0825               	movf	(sprintf@val+1)^(0+128),w
 10968  0284  0020               	movlb	0	; select bank0
 10969  0285  00A3               	movwf	___lwdiv@dividend+1
 10970  0286  0021               	movlb	1	; select bank1
 10971  0287  0824               	movf	sprintf@val^(0+128),w
 10972  0288  0020               	movlb	0	; select bank0
 10973  0289  00A2               	movwf	___lwdiv@dividend
 10974  028A  3196  269C  3180   	fcall	___lwdiv
 10975  028D  0020               	movlb	0	; select bank0
 10976  028E  0821               	movf	?___lwdiv+1,w
 10977  028F  00AB               	movwf	___lwmod@dividend+1
 10978  0290  0820               	movf	?___lwdiv,w
 10979  0291  00AA               	movwf	___lwmod@dividend
 10980  0292  3196  260F  3180   	fcall	___lwmod
 10981  0295  0020               	movlb	0	; select bank0
 10982  0296  0828               	movf	?___lwmod,w
 10983  0297  3E30               	addlw	48
 10984  0298  00E4               	movwf	??_sprintf+2
 10985  0299  0864               	movf	??_sprintf+2,w
 10986  029A  0021               	movlb	1	; select bank1
 10987  029B  00AA               	movwf	sprintf@c^(0+128)
 10988                           
 10989                           ;doprnt.c: 1523: }
 10990                           ;doprnt.c: 1524: ((*sp++ = (c)),(++ccnt));
 10991  029C  082A               	movf	sprintf@c^(0+128),w
 10992  029D  0020               	movlb	0	; select bank0
 10993  029E  00E2               	movwf	??_sprintf
 10994  029F  0021               	movlb	1	; select bank1
 10995  02A0  0829               	movf	sprintf@sp^(0+128),w
 10996  02A1  0086               	movwf	6
 10997  02A2  3002               	movlw	2	; select bank4/5
 10998  02A3  0087               	movwf	7
 10999  02A4  0020               	movlb	0	; select bank0
 11000  02A5  0862               	movf	??_sprintf,w
 11001  02A6  0081               	movwf	1
 11002  02A7  3001               	movlw	1
 11003  02A8  00E2               	movwf	??_sprintf
 11004  02A9  0862               	movf	??_sprintf,w
 11005  02AA  0021               	movlb	1	; select bank1
 11006  02AB  07A9               	addwf	sprintf@sp^(0+128),f
 11007  02AC  3001               	movlw	1
 11008  02AD  07A1               	addwf	sprintf@ccnt^(0+128),f
 11009  02AE  3000               	movlw	0
 11010  02AF  3DA2               	addwfc	(sprintf@ccnt+1)^(0+128),f
 11011  02B0  2A63               	goto	l4482
 11012  02B1                     l4486:	
 11013                           ;doprnt.c: 1525: }
 11014                           ;doprnt.c: 1533: }
 11015                           ;doprnt.c: 1535: alldone:
 11016                           
 11017                           
 11018                           ;doprnt.c: 1538: *sp = 0;
 11019  02B1  0021               	movlb	1	; select bank1
 11020  02B2  0829               	movf	sprintf@sp^(0+128),w
 11021  02B3  0086               	movwf	6
 11022  02B4  3002               	movlw	2	; select bank4/5
 11023  02B5  0087               	movwf	7
 11024  02B6  0181               	clrf	1
 11025                           
 11026                           ;doprnt.c: 1540: return ccnt;
 11027  02B7  0822               	movf	(sprintf@ccnt+1)^(0+128),w
 11028  02B8  0020               	movlb	0	; select bank0
 11029  02B9  00DD               	movwf	?_sprintf+1
 11030  02BA  0021               	movlb	1	; select bank1
 11031  02BB  0821               	movf	sprintf@ccnt^(0+128),w
 11032  02BC  0020               	movlb	0	; select bank0
 11033  02BD  00DC               	movwf	?_sprintf
 11034  02BE  0008               	return
 11035  02BF                     __end_of_sprintf:	
 11036                           
 11037                           	psect	text43
 11038  13D8                     __ptext43:	
 11039 ;; *************** function _isdigit *****************
 11040 ;; Defined at:
 11041 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\isdigit.c"
 11042 ;; Parameters:    Size  Location     Type
 11043 ;;  c               1    wreg     unsigned char 
 11044 ;; Auto vars:     Size  Location     Type
 11045 ;;  c               1    1[BANK0 ] unsigned char 
 11046 ;; Return value:  Size  Location     Type
 11047 ;;		None               void
 11048 ;; Registers used:
 11049 ;;		wreg, status,2, status,0
 11050 ;; Tracked objects:
 11051 ;;		On entry : 0/0
 11052 ;;		On exit  : 0/0
 11053 ;;		Unchanged: 0/0
 11054 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11055 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11056 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11057 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11058 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11059 ;;Total ram usage:        2 bytes
 11060 ;; Hardware stack levels used:    1
 11061 ;; Hardware stack levels required when called:    2
 11062 ;; This function calls:
 11063 ;;		Nothing
 11064 ;; This function is called by:
 11065 ;;		_sprintf
 11066 ;; This function uses a non-reentrant model
 11067 ;;
 11068                           
 11069                           
 11070                           ;psect for function _isdigit
 11071  13D8                     _isdigit:	
 11072                           
 11073                           ;incstack = 0
 11074                           ; Regs used in _isdigit: [wreg+status,2+status,0]
 11075                           ;isdigit@c stored from wreg
 11076  13D8  0020               	movlb	0	; select bank0
 11077  13D9  00A1               	movwf	isdigit@c
 11078  13DA  01A0               	clrf	_isdigit$2094
 11079  13DB  303A               	movlw	58
 11080  13DC  0221               	subwf	isdigit@c,w
 11081  13DD  1803               	skipnc
 11082  13DE  2BE5               	goto	l4294
 11083  13DF  3030               	movlw	48
 11084  13E0  0221               	subwf	isdigit@c,w
 11085  13E1  1C03               	skipc
 11086  13E2  2BE5               	goto	l4294
 11087  13E3  01A0               	clrf	_isdigit$2094
 11088  13E4  0AA0               	incf	_isdigit$2094,f
 11089  13E5                     l4294:	
 11090  13E5  0C20               	rrf	_isdigit$2094,w
 11091  13E6  0008               	return
 11092  13E7                     __end_of_isdigit:	
 11093                           
 11094                           	psect	text44
 11095  14C7                     __ptext44:	
 11096 ;; *************** function ___wmul *****************
 11097 ;; Defined at:
 11098 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\Umul16.c"
 11099 ;; Parameters:    Size  Location     Type
 11100 ;;  multiplier      2    0[BANK0 ] unsigned int 
 11101 ;;  multiplicand    2    2[BANK0 ] unsigned int 
 11102 ;; Auto vars:     Size  Location     Type
 11103 ;;  product         2    4[BANK0 ] unsigned int 
 11104 ;; Return value:  Size  Location     Type
 11105 ;;                  2    0[BANK0 ] unsigned int 
 11106 ;; Registers used:
 11107 ;;		wreg, status,2, status,0
 11108 ;; Tracked objects:
 11109 ;;		On entry : 0/0
 11110 ;;		On exit  : 0/0
 11111 ;;		Unchanged: 0/0
 11112 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11113 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11114 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11115 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11116 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11117 ;;Total ram usage:        6 bytes
 11118 ;; Hardware stack levels used:    1
 11119 ;; Hardware stack levels required when called:    2
 11120 ;; This function calls:
 11121 ;;		Nothing
 11122 ;; This function is called by:
 11123 ;;		_Tmr_TmrBPrSet
 11124 ;;		_sprintf
 11125 ;; This function uses a non-reentrant model
 11126 ;;
 11127                           
 11128                           
 11129                           ;psect for function ___wmul
 11130  14C7                     ___wmul:	
 11131                           
 11132                           ;incstack = 0
 11133                           ; Regs used in ___wmul: [wreg+status,2+status,0]
 11134  14C7  0020               	movlb	0	; select bank0
 11135  14C8  01A4               	clrf	___wmul@product
 11136  14C9  01A5               	clrf	___wmul@product+1
 11137  14CA                     l4300:	
 11138  14CA  1C20               	btfss	___wmul@multiplier,0
 11139  14CB  2CD0               	goto	l957
 11140  14CC  0822               	movf	___wmul@multiplicand,w
 11141  14CD  07A4               	addwf	___wmul@product,f
 11142  14CE  0823               	movf	___wmul@multiplicand+1,w
 11143  14CF  3DA5               	addwfc	___wmul@product+1,f
 11144  14D0                     l957:	
 11145  14D0  3001               	movlw	1
 11146  14D1                     u4445:	
 11147  14D1  35A2               	lslf	___wmul@multiplicand,f
 11148  14D2  0DA3               	rlf	___wmul@multiplicand+1,f
 11149  14D3  0B89               	decfsz	9,f
 11150  14D4  2CD1               	goto	u4445
 11151  14D5  3001               	movlw	1
 11152  14D6                     u4455:	
 11153  14D6  36A1               	lsrf	___wmul@multiplier+1,f
 11154  14D7  0CA0               	rrf	___wmul@multiplier,f
 11155  14D8  0B89               	decfsz	9,f
 11156  14D9  2CD6               	goto	u4455
 11157  14DA  0820               	movf	___wmul@multiplier,w
 11158  14DB  0421               	iorwf	___wmul@multiplier+1,w
 11159  14DC  1D03               	btfss	3,2
 11160  14DD  2CCA               	goto	l4300
 11161  14DE  0825               	movf	___wmul@product+1,w
 11162  14DF  00A1               	movwf	?___wmul+1
 11163  14E0  0824               	movf	___wmul@product,w
 11164  14E1  00A0               	movwf	?___wmul
 11165  14E2  0008               	return
 11166  14E3                     __end_of___wmul:	
 11167                           
 11168                           	psect	text45
 11169  0AD9                     __ptext45:	
 11170 ;; *************** function ___fttol *****************
 11171 ;; Defined at:
 11172 ;;		line 44 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\fttol.c"
 11173 ;; Parameters:    Size  Location     Type
 11174 ;;  f1              3    8[BANK0 ] float 
 11175 ;; Auto vars:     Size  Location     Type
 11176 ;;  lval            4   17[BANK0 ] unsigned long 
 11177 ;;  exp1            1   21[BANK0 ] unsigned char 
 11178 ;;  sign1           1   16[BANK0 ] unsigned char 
 11179 ;; Return value:  Size  Location     Type
 11180 ;;                  4    8[BANK0 ] long 
 11181 ;; Registers used:
 11182 ;;		wreg, status,2, status,0
 11183 ;; Tracked objects:
 11184 ;;		On entry : 0/0
 11185 ;;		On exit  : 0/0
 11186 ;;		Unchanged: 0/0
 11187 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11188 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11189 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11190 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11191 ;;      Totals:         0      14       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11192 ;;Total ram usage:       14 bytes
 11193 ;; Hardware stack levels used:    1
 11194 ;; Hardware stack levels required when called:    2
 11195 ;; This function calls:
 11196 ;;		Nothing
 11197 ;; This function is called by:
 11198 ;;		_MyFtoa
 11199 ;; This function uses a non-reentrant model
 11200 ;;
 11201                           
 11202                           
 11203                           ;psect for function ___fttol
 11204  0AD9                     ___fttol:	
 11205                           
 11206                           ;incstack = 0
 11207                           ; Regs used in ___fttol: [wreg+status,2+status,0]
 11208  0AD9  0020               	movlb	0	; select bank0
 11209  0ADA  0828               	movf	___fttol@f1,w
 11210  0ADB  00AC               	movwf	??___fttol
 11211  0ADC  0829               	movf	___fttol@f1+1,w
 11212  0ADD  00AD               	movwf	??___fttol+1
 11213  0ADE  082A               	movf	___fttol@f1+2,w
 11214  0ADF  00AE               	movwf	??___fttol+2
 11215  0AE0  1003               	clrc
 11216  0AE1  0D2D               	rlf	??___fttol+1,w
 11217  0AE2  0D2E               	rlf	??___fttol+2,w
 11218  0AE3  00AF               	movwf	??___fttol+3
 11219  0AE4  082F               	movf	??___fttol+3,w
 11220  0AE5  00B5               	movwf	___fttol@exp1
 11221  0AE6  0835               	movf	___fttol@exp1,w
 11222  0AE7  1D03               	btfss	3,2
 11223  0AE8  2AF2               	goto	l4698
 11224  0AE9  3000               	movlw	0
 11225  0AEA  00AB               	movwf	?___fttol+3
 11226  0AEB  3000               	movlw	0
 11227  0AEC  00AA               	movwf	?___fttol+2
 11228  0AED  3000               	movlw	0
 11229  0AEE  00A9               	movwf	?___fttol+1
 11230  0AEF  3000               	movlw	0
 11231  0AF0  00A8               	movwf	?___fttol
 11232  0AF1  0008               	return
 11233  0AF2                     l4698:	
 11234  0AF2  0828               	movf	___fttol@f1,w
 11235  0AF3  00AC               	movwf	??___fttol
 11236  0AF4  0829               	movf	___fttol@f1+1,w
 11237  0AF5  00AD               	movwf	??___fttol+1
 11238  0AF6  082A               	movf	___fttol@f1+2,w
 11239  0AF7  00AE               	movwf	??___fttol+2
 11240  0AF8  3017               	movlw	23
 11241  0AF9                     u5205:	
 11242  0AF9  36AE               	lsrf	??___fttol+2,f
 11243  0AFA  0CAD               	rrf	??___fttol+1,f
 11244  0AFB  0CAC               	rrf	??___fttol,f
 11245  0AFC  0B89               	decfsz	9,f
 11246  0AFD  2AF9               	goto	u5205
 11247  0AFE  082C               	movf	??___fttol,w
 11248  0AFF  00AF               	movwf	??___fttol+3
 11249  0B00  082F               	movf	??___fttol+3,w
 11250  0B01  00B0               	movwf	___fttol@sign1
 11251  0B02  17A9               	bsf	___fttol@f1+1,7
 11252  0B03  30FF               	movlw	255
 11253  0B04  05A8               	andwf	___fttol@f1,f
 11254  0B05  30FF               	movlw	255
 11255  0B06  05A9               	andwf	___fttol@f1+1,f
 11256  0B07  3000               	movlw	0
 11257  0B08  05AA               	andwf	___fttol@f1+2,f
 11258  0B09  0828               	movf	___fttol@f1,w
 11259  0B0A  00B1               	movwf	___fttol@lval
 11260  0B0B  0829               	movf	___fttol@f1+1,w
 11261  0B0C  00B2               	movwf	___fttol@lval+1
 11262  0B0D  082A               	movf	___fttol@f1+2,w
 11263  0B0E  00B3               	movwf	___fttol@lval+2
 11264  0B0F  01B4               	clrf	___fttol@lval+3
 11265  0B10  308E               	movlw	142
 11266  0B11  02B5               	subwf	___fttol@exp1,f
 11267  0B12  1FB5               	btfss	___fttol@exp1,7
 11268  0B13  2B30               	goto	l4718
 11269  0B14  0835               	movf	___fttol@exp1,w
 11270  0B15  3A80               	xorlw	128
 11271  0B16  3E8F               	addlw	143
 11272  0B17  1803               	skipnc
 11273  0B18  2B22               	goto	l4716
 11274  0B19  3000               	movlw	0
 11275  0B1A  00AB               	movwf	?___fttol+3
 11276  0B1B  3000               	movlw	0
 11277  0B1C  00AA               	movwf	?___fttol+2
 11278  0B1D  3000               	movlw	0
 11279  0B1E  00A9               	movwf	?___fttol+1
 11280  0B1F  3000               	movlw	0
 11281  0B20  00A8               	movwf	?___fttol
 11282  0B21  0008               	return
 11283  0B22                     l4716:	
 11284  0B22  3001               	movlw	1
 11285  0B23                     u5235:	
 11286  0B23  36B4               	lsrf	___fttol@lval+3,f
 11287  0B24  0CB3               	rrf	___fttol@lval+2,f
 11288  0B25  0CB2               	rrf	___fttol@lval+1,f
 11289  0B26  0CB1               	rrf	___fttol@lval,f
 11290  0B27  0B89               	decfsz	9,f
 11291  0B28  2B23               	goto	u5235
 11292  0B29  3001               	movlw	1
 11293  0B2A  00AC               	movwf	??___fttol
 11294  0B2B  082C               	movf	??___fttol,w
 11295  0B2C  07B5               	addwf	___fttol@exp1,f
 11296  0B2D  1903               	btfsc	3,2
 11297  0B2E  2B49               	goto	l4726
 11298  0B2F  2B22               	goto	l4716
 11299  0B30                     l4718:	
 11300  0B30  3018               	movlw	24
 11301  0B31  0235               	subwf	___fttol@exp1,w
 11302  0B32  1C03               	skipc
 11303  0B33  2B46               	goto	l1209
 11304  0B34  3000               	movlw	0
 11305  0B35  00AB               	movwf	?___fttol+3
 11306  0B36  3000               	movlw	0
 11307  0B37  00AA               	movwf	?___fttol+2
 11308  0B38  3000               	movlw	0
 11309  0B39  00A9               	movwf	?___fttol+1
 11310  0B3A  3000               	movlw	0
 11311  0B3B  00A8               	movwf	?___fttol
 11312  0B3C  0008               	return
 11313  0B3D                     l4724:	
 11314  0B3D  3001               	movlw	1
 11315  0B3E                     u5265:	
 11316  0B3E  35B1               	lslf	___fttol@lval,f
 11317  0B3F  0DB2               	rlf	___fttol@lval+1,f
 11318  0B40  0DB3               	rlf	___fttol@lval+2,f
 11319  0B41  0DB4               	rlf	___fttol@lval+3,f
 11320  0B42  0B89               	decfsz	9,f
 11321  0B43  2B3E               	goto	u5265
 11322  0B44  3001               	movlw	1
 11323  0B45  02B5               	subwf	___fttol@exp1,f
 11324  0B46                     l1209:	
 11325  0B46  0835               	movf	___fttol@exp1,w
 11326  0B47  1D03               	btfss	3,2
 11327  0B48  2B3D               	goto	l4724
 11328  0B49                     l4726:	
 11329  0B49  0830               	movf	___fttol@sign1,w
 11330  0B4A  1903               	btfsc	3,2
 11331  0B4B  2B57               	goto	l4730
 11332  0B4C  09B1               	comf	___fttol@lval,f
 11333  0B4D  09B2               	comf	___fttol@lval+1,f
 11334  0B4E  09B3               	comf	___fttol@lval+2,f
 11335  0B4F  09B4               	comf	___fttol@lval+3,f
 11336  0B50  0AB1               	incf	___fttol@lval,f
 11337  0B51  1903               	skipnz
 11338  0B52  0AB2               	incf	___fttol@lval+1,f
 11339  0B53  1903               	skipnz
 11340  0B54  0AB3               	incf	___fttol@lval+2,f
 11341  0B55  1903               	skipnz
 11342  0B56  0AB4               	incf	___fttol@lval+3,f
 11343  0B57                     l4730:	
 11344  0B57  0834               	movf	___fttol@lval+3,w
 11345  0B58  00AB               	movwf	?___fttol+3
 11346  0B59  0833               	movf	___fttol@lval+2,w
 11347  0B5A  00AA               	movwf	?___fttol+2
 11348  0B5B  0832               	movf	___fttol@lval+1,w
 11349  0B5C  00A9               	movwf	?___fttol+1
 11350  0B5D  0831               	movf	___fttol@lval,w
 11351  0B5E  00A8               	movwf	?___fttol
 11352  0B5F  0008               	return
 11353  0B60                     __end_of___fttol:	
 11354                           
 11355                           	psect	text46
 11356  1333                     __ptext46:	
 11357 ;; *************** function ___ftneg *****************
 11358 ;; Defined at:
 11359 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\ftneg.c"
 11360 ;; Parameters:    Size  Location     Type
 11361 ;;  f1              3   28[BANK0 ] float 
 11362 ;; Auto vars:     Size  Location     Type
 11363 ;;		None
 11364 ;; Return value:  Size  Location     Type
 11365 ;;                  3   28[BANK0 ] float 
 11366 ;; Registers used:
 11367 ;;		wreg
 11368 ;; Tracked objects:
 11369 ;;		On entry : 0/0
 11370 ;;		On exit  : 0/0
 11371 ;;		Unchanged: 0/0
 11372 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11373 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11374 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11375 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11376 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11377 ;;Total ram usage:        3 bytes
 11378 ;; Hardware stack levels used:    1
 11379 ;; Hardware stack levels required when called:    2
 11380 ;; This function calls:
 11381 ;;		Nothing
 11382 ;; This function is called by:
 11383 ;;		_MyFtoa
 11384 ;; This function uses a non-reentrant model
 11385 ;;
 11386                           
 11387                           
 11388                           ;psect for function ___ftneg
 11389  1333                     ___ftneg:	
 11390                           
 11391                           ;incstack = 0
 11392                           ; Regs used in ___ftneg: [wreg]
 11393  1333  0020               	movlb	0	; select bank0
 11394  1334  083E               	movf	___ftneg@f1+2,w
 11395  1335  043D               	iorwf	___ftneg@f1+1,w
 11396  1336  043C               	iorwf	___ftneg@f1,w
 11397  1337  1903               	skipnz
 11398  1338  0008               	return
 11399  1339  3080               	movlw	128
 11400  133A  06BE               	xorwf	___ftneg@f1+2,f
 11401  133B  0008               	return
 11402  133C                     __end_of___ftneg:	
 11403                           
 11404                           	psect	text47
 11405  0D1A                     __ptext47:	
 11406 ;; *************** function ___ftmul *****************
 11407 ;; Defined at:
 11408 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\ftmul.c"
 11409 ;; Parameters:    Size  Location     Type
 11410 ;;  f1              3   44[BANK0 ] float 
 11411 ;;  f2              3   47[BANK0 ] float 
 11412 ;; Auto vars:     Size  Location     Type
 11413 ;;  f3_as_produc    3   55[BANK0 ] unsigned um
 11414 ;;  sign            1   59[BANK0 ] unsigned char 
 11415 ;;  cntr            1   58[BANK0 ] unsigned char 
 11416 ;;  exp             1   54[BANK0 ] unsigned char 
 11417 ;; Return value:  Size  Location     Type
 11418 ;;                  3   44[BANK0 ] float 
 11419 ;; Registers used:
 11420 ;;		wreg, status,2, status,0, pclath, cstack
 11421 ;; Tracked objects:
 11422 ;;		On entry : 0/0
 11423 ;;		On exit  : 0/0
 11424 ;;		Unchanged: 0/0
 11425 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11426 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11427 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11428 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11429 ;;      Totals:         0      16       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11430 ;;Total ram usage:       16 bytes
 11431 ;; Hardware stack levels used:    1
 11432 ;; Hardware stack levels required when called:    3
 11433 ;; This function calls:
 11434 ;;		___ftpack
 11435 ;; This function is called by:
 11436 ;;		_MyFtoa
 11437 ;;		_GetTemperature
 11438 ;; This function uses a non-reentrant model
 11439 ;;
 11440                           
 11441                           
 11442                           ;psect for function ___ftmul
 11443  0D1A                     ___ftmul:	
 11444                           
 11445                           ;incstack = 0
 11446                           ; Regs used in ___ftmul: [wreg+status,2+status,0+pclath+cstack]
 11447  0D1A  0020               	movlb	0	; select bank0
 11448  0D1B  084C               	movf	___ftmul@f1,w
 11449  0D1C  00D2               	movwf	??___ftmul
 11450  0D1D  084D               	movf	___ftmul@f1+1,w
 11451  0D1E  00D3               	movwf	??___ftmul+1
 11452  0D1F  084E               	movf	___ftmul@f1+2,w
 11453  0D20  00D4               	movwf	??___ftmul+2
 11454  0D21  1003               	clrc
 11455  0D22  0D53               	rlf	??___ftmul+1,w
 11456  0D23  0D54               	rlf	??___ftmul+2,w
 11457  0D24  00D5               	movwf	??___ftmul+3
 11458  0D25  0855               	movf	??___ftmul+3,w
 11459  0D26  00D6               	movwf	___ftmul@exp
 11460  0D27  0856               	movf	___ftmul@exp,w
 11461  0D28  1D03               	btfss	3,2
 11462  0D29  2D31               	goto	l4640
 11463  0D2A  3000               	movlw	0
 11464  0D2B  00CC               	movwf	?___ftmul
 11465  0D2C  3000               	movlw	0
 11466  0D2D  00CD               	movwf	?___ftmul+1
 11467  0D2E  3000               	movlw	0
 11468  0D2F  00CE               	movwf	?___ftmul+2
 11469  0D30  0008               	return
 11470  0D31                     l4640:	
 11471  0D31  084F               	movf	___ftmul@f2,w
 11472  0D32  00D2               	movwf	??___ftmul
 11473  0D33  0850               	movf	___ftmul@f2+1,w
 11474  0D34  00D3               	movwf	??___ftmul+1
 11475  0D35  0851               	movf	___ftmul@f2+2,w
 11476  0D36  00D4               	movwf	??___ftmul+2
 11477  0D37  1003               	clrc
 11478  0D38  0D53               	rlf	??___ftmul+1,w
 11479  0D39  0D54               	rlf	??___ftmul+2,w
 11480  0D3A  00D5               	movwf	??___ftmul+3
 11481  0D3B  0855               	movf	??___ftmul+3,w
 11482  0D3C  00DB               	movwf	___ftmul@sign
 11483  0D3D  085B               	movf	___ftmul@sign,w
 11484  0D3E  1D03               	btfss	3,2
 11485  0D3F  2D47               	goto	l4646
 11486  0D40  3000               	movlw	0
 11487  0D41  00CC               	movwf	?___ftmul
 11488  0D42  3000               	movlw	0
 11489  0D43  00CD               	movwf	?___ftmul+1
 11490  0D44  3000               	movlw	0
 11491  0D45  00CE               	movwf	?___ftmul+2
 11492  0D46  0008               	return
 11493  0D47                     l4646:	
 11494  0D47  085B               	movf	___ftmul@sign,w
 11495  0D48  3E7B               	addlw	123
 11496  0D49  00D2               	movwf	??___ftmul
 11497  0D4A  0852               	movf	??___ftmul,w
 11498  0D4B  07D6               	addwf	___ftmul@exp,f
 11499  0D4C  084C               	movf	___ftmul@f1,w
 11500  0D4D  00D2               	movwf	??___ftmul
 11501  0D4E  084D               	movf	___ftmul@f1+1,w
 11502  0D4F  00D3               	movwf	??___ftmul+1
 11503  0D50  084E               	movf	___ftmul@f1+2,w
 11504  0D51  00D4               	movwf	??___ftmul+2
 11505  0D52  3010               	movlw	16
 11506  0D53                     u5085:	
 11507  0D53  36D4               	lsrf	??___ftmul+2,f
 11508  0D54  0CD3               	rrf	??___ftmul+1,f
 11509  0D55  0CD2               	rrf	??___ftmul,f
 11510  0D56  0B89               	decfsz	9,f
 11511  0D57  2D53               	goto	u5085
 11512  0D58  0852               	movf	??___ftmul,w
 11513  0D59  00D5               	movwf	??___ftmul+3
 11514  0D5A  0855               	movf	??___ftmul+3,w
 11515  0D5B  00DB               	movwf	___ftmul@sign
 11516  0D5C  084F               	movf	___ftmul@f2,w
 11517  0D5D  00D2               	movwf	??___ftmul
 11518  0D5E  0850               	movf	___ftmul@f2+1,w
 11519  0D5F  00D3               	movwf	??___ftmul+1
 11520  0D60  0851               	movf	___ftmul@f2+2,w
 11521  0D61  00D4               	movwf	??___ftmul+2
 11522  0D62  3010               	movlw	16
 11523  0D63                     u5095:	
 11524  0D63  36D4               	lsrf	??___ftmul+2,f
 11525  0D64  0CD3               	rrf	??___ftmul+1,f
 11526  0D65  0CD2               	rrf	??___ftmul,f
 11527  0D66  0B89               	decfsz	9,f
 11528  0D67  2D63               	goto	u5095
 11529  0D68  0852               	movf	??___ftmul,w
 11530  0D69  00D5               	movwf	??___ftmul+3
 11531  0D6A  0855               	movf	??___ftmul+3,w
 11532  0D6B  06DB               	xorwf	___ftmul@sign,f
 11533  0D6C  3080               	movlw	128
 11534  0D6D  00D2               	movwf	??___ftmul
 11535  0D6E  0852               	movf	??___ftmul,w
 11536  0D6F  05DB               	andwf	___ftmul@sign,f
 11537  0D70  17CD               	bsf	___ftmul@f1+1,7
 11538  0D71  17D0               	bsf	___ftmul@f2+1,7
 11539  0D72  30FF               	movlw	255
 11540  0D73  05CF               	andwf	___ftmul@f2,f
 11541  0D74  30FF               	movlw	255
 11542  0D75  05D0               	andwf	___ftmul@f2+1,f
 11543  0D76  3000               	movlw	0
 11544  0D77  05D1               	andwf	___ftmul@f2+2,f
 11545  0D78  3000               	movlw	0
 11546  0D79  00D7               	movwf	___ftmul@f3_as_product
 11547  0D7A  3000               	movlw	0
 11548  0D7B  00D8               	movwf	___ftmul@f3_as_product+1
 11549  0D7C  3000               	movlw	0
 11550  0D7D  00D9               	movwf	___ftmul@f3_as_product+2
 11551  0D7E  3007               	movlw	7
 11552  0D7F  00D2               	movwf	??___ftmul
 11553  0D80  0852               	movf	??___ftmul,w
 11554  0D81  00DA               	movwf	___ftmul@cntr
 11555  0D82                     l4658:	
 11556  0D82  1C4C               	btfss	___ftmul@f1,0
 11557  0D83  2D8A               	goto	l4662
 11558  0D84  084F               	movf	___ftmul@f2,w
 11559  0D85  07D7               	addwf	___ftmul@f3_as_product,f
 11560  0D86  0850               	movf	___ftmul@f2+1,w
 11561  0D87  3DD8               	addwfc	___ftmul@f3_as_product+1,f
 11562  0D88  0851               	movf	___ftmul@f2+2,w
 11563  0D89  3DD9               	addwfc	___ftmul@f3_as_product+2,f
 11564  0D8A                     l4662:	
 11565  0D8A  3001               	movlw	1
 11566  0D8B                     u5115:	
 11567  0D8B  36CE               	lsrf	___ftmul@f1+2,f
 11568  0D8C  0CCD               	rrf	___ftmul@f1+1,f
 11569  0D8D  0CCC               	rrf	___ftmul@f1,f
 11570  0D8E  0B89               	decfsz	9,f
 11571  0D8F  2D8B               	goto	u5115
 11572  0D90  3001               	movlw	1
 11573  0D91                     u5125:	
 11574  0D91  35CF               	lslf	___ftmul@f2,f
 11575  0D92  0DD0               	rlf	___ftmul@f2+1,f
 11576  0D93  0DD1               	rlf	___ftmul@f2+2,f
 11577  0D94  0B89               	decfsz	9,f
 11578  0D95  2D91               	goto	u5125
 11579  0D96  3001               	movlw	1
 11580  0D97  02DA               	subwf	___ftmul@cntr,f
 11581  0D98  1D03               	btfss	3,2
 11582  0D99  2D82               	goto	l4658
 11583  0D9A  3009               	movlw	9
 11584  0D9B  00D2               	movwf	??___ftmul
 11585  0D9C  0852               	movf	??___ftmul,w
 11586  0D9D  00DA               	movwf	___ftmul@cntr
 11587  0D9E                     l4670:	
 11588  0D9E  1C4C               	btfss	___ftmul@f1,0
 11589  0D9F  2DA6               	goto	l4674
 11590  0DA0  084F               	movf	___ftmul@f2,w
 11591  0DA1  07D7               	addwf	___ftmul@f3_as_product,f
 11592  0DA2  0850               	movf	___ftmul@f2+1,w
 11593  0DA3  3DD8               	addwfc	___ftmul@f3_as_product+1,f
 11594  0DA4  0851               	movf	___ftmul@f2+2,w
 11595  0DA5  3DD9               	addwfc	___ftmul@f3_as_product+2,f
 11596  0DA6                     l4674:	
 11597  0DA6  3001               	movlw	1
 11598  0DA7                     u5155:	
 11599  0DA7  36CE               	lsrf	___ftmul@f1+2,f
 11600  0DA8  0CCD               	rrf	___ftmul@f1+1,f
 11601  0DA9  0CCC               	rrf	___ftmul@f1,f
 11602  0DAA  0B89               	decfsz	9,f
 11603  0DAB  2DA7               	goto	u5155
 11604  0DAC  3001               	movlw	1
 11605  0DAD                     u5165:	
 11606  0DAD  36D9               	lsrf	___ftmul@f3_as_product+2,f
 11607  0DAE  0CD8               	rrf	___ftmul@f3_as_product+1,f
 11608  0DAF  0CD7               	rrf	___ftmul@f3_as_product,f
 11609  0DB0  0B89               	decfsz	9,f
 11610  0DB1  2DAD               	goto	u5165
 11611  0DB2  3001               	movlw	1
 11612  0DB3  02DA               	subwf	___ftmul@cntr,f
 11613  0DB4  1D03               	btfss	3,2
 11614  0DB5  2D9E               	goto	l4670
 11615  0DB6  0857               	movf	___ftmul@f3_as_product,w
 11616  0DB7  00A0               	movwf	___ftpack@arg
 11617  0DB8  0858               	movf	___ftmul@f3_as_product+1,w
 11618  0DB9  00A1               	movwf	___ftpack@arg+1
 11619  0DBA  0859               	movf	___ftmul@f3_as_product+2,w
 11620  0DBB  00A2               	movwf	___ftpack@arg+2
 11621  0DBC  0856               	movf	___ftmul@exp,w
 11622  0DBD  00D2               	movwf	??___ftmul
 11623  0DBE  0852               	movf	??___ftmul,w
 11624  0DBF  00A3               	movwf	___ftpack@exp
 11625  0DC0  085B               	movf	___ftmul@sign,w
 11626  0DC1  00D3               	movwf	??___ftmul+1
 11627  0DC2  0853               	movf	??___ftmul+1,w
 11628  0DC3  00A4               	movwf	___ftpack@sign
 11629  0DC4  3189  2102         	fcall	___ftpack
 11630  0DC6  0020               	movlb	0	; select bank0
 11631  0DC7  0820               	movf	?___ftpack,w
 11632  0DC8  00CC               	movwf	?___ftmul
 11633  0DC9  0821               	movf	?___ftpack+1,w
 11634  0DCA  00CD               	movwf	?___ftmul+1
 11635  0DCB  0822               	movf	?___ftpack+2,w
 11636  0DCC  00CE               	movwf	?___ftmul+2
 11637  0DCD  0008               	return
 11638  0DCE                     __end_of___ftmul:	
 11639                           
 11640                           	psect	text48
 11641  04C2                     __ptext48:	
 11642 ;; *************** function ___ftadd *****************
 11643 ;; Defined at:
 11644 ;;		line 86 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\ftadd.c"
 11645 ;; Parameters:    Size  Location     Type
 11646 ;;  f1              3   31[BANK0 ] float 
 11647 ;;  f2              3   34[BANK0 ] float 
 11648 ;; Auto vars:     Size  Location     Type
 11649 ;;  exp1            1   43[BANK0 ] unsigned char 
 11650 ;;  exp2            1   42[BANK0 ] unsigned char 
 11651 ;;  sign            1   41[BANK0 ] unsigned char 
 11652 ;; Return value:  Size  Location     Type
 11653 ;;                  3   31[BANK0 ] float 
 11654 ;; Registers used:
 11655 ;;		wreg, status,2, status,0, pclath, cstack
 11656 ;; Tracked objects:
 11657 ;;		On entry : 0/0
 11658 ;;		On exit  : 0/0
 11659 ;;		Unchanged: 0/0
 11660 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11661 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11662 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11663 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11664 ;;      Totals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11665 ;;Total ram usage:       13 bytes
 11666 ;; Hardware stack levels used:    1
 11667 ;; Hardware stack levels required when called:    3
 11668 ;; This function calls:
 11669 ;;		___ftpack
 11670 ;; This function is called by:
 11671 ;;		_MyFtoa
 11672 ;;		_GetTemperature
 11673 ;; This function uses a non-reentrant model
 11674 ;;
 11675                           
 11676                           
 11677                           ;psect for function ___ftadd
 11678  04C2                     ___ftadd:	
 11679                           
 11680                           ;incstack = 0
 11681                           ; Regs used in ___ftadd: [wreg+status,2+status,0+pclath+cstack]
 11682  04C2  0020               	movlb	0	; select bank0
 11683  04C3  083F               	movf	___ftadd@f1,w
 11684  04C4  00C5               	movwf	??___ftadd
 11685  04C5  0840               	movf	___ftadd@f1+1,w
 11686  04C6  00C6               	movwf	??___ftadd+1
 11687  04C7  0841               	movf	___ftadd@f1+2,w
 11688  04C8  00C7               	movwf	??___ftadd+2
 11689  04C9  1003               	clrc
 11690  04CA  0D46               	rlf	??___ftadd+1,w
 11691  04CB  0D47               	rlf	??___ftadd+2,w
 11692  04CC  00C8               	movwf	??___ftadd+3
 11693  04CD  0848               	movf	??___ftadd+3,w
 11694  04CE  00CB               	movwf	___ftadd@exp1
 11695  04CF  0842               	movf	___ftadd@f2,w
 11696  04D0  00C5               	movwf	??___ftadd
 11697  04D1  0843               	movf	___ftadd@f2+1,w
 11698  04D2  00C6               	movwf	??___ftadd+1
 11699  04D3  0844               	movf	___ftadd@f2+2,w
 11700  04D4  00C7               	movwf	??___ftadd+2
 11701  04D5  1003               	clrc
 11702  04D6  0D46               	rlf	??___ftadd+1,w
 11703  04D7  0D47               	rlf	??___ftadd+2,w
 11704  04D8  00C8               	movwf	??___ftadd+3
 11705  04D9  0848               	movf	??___ftadd+3,w
 11706  04DA  00CA               	movwf	___ftadd@exp2
 11707  04DB  084B               	movf	___ftadd@exp1,w
 11708  04DC  1903               	btfsc	3,2
 11709  04DD  2CEA               	goto	l4570
 11710  04DE  084A               	movf	___ftadd@exp2,w
 11711  04DF  024B               	subwf	___ftadd@exp1,w
 11712  04E0  1803               	skipnc
 11713  04E1  2CF1               	goto	l4574
 11714  04E2  034B               	decf	___ftadd@exp1,w
 11715  04E3  3AFF               	xorlw	255
 11716  04E4  074A               	addwf	___ftadd@exp2,w
 11717  04E5  00C5               	movwf	??___ftadd
 11718  04E6  3019               	movlw	25
 11719  04E7  0245               	subwf	??___ftadd,w
 11720  04E8  1C03               	skipc
 11721  04E9  2CF1               	goto	l4574
 11722  04EA                     l4570:	
 11723  04EA  0842               	movf	___ftadd@f2,w
 11724  04EB  00BF               	movwf	?___ftadd
 11725  04EC  0843               	movf	___ftadd@f2+1,w
 11726  04ED  00C0               	movwf	?___ftadd+1
 11727  04EE  0844               	movf	___ftadd@f2+2,w
 11728  04EF  00C1               	movwf	?___ftadd+2
 11729  04F0  0008               	return
 11730  04F1                     l4574:	
 11731  04F1  084A               	movf	___ftadd@exp2,w
 11732  04F2  1903               	btfsc	3,2
 11733  04F3  0008               	return
 11734  04F4  084B               	movf	___ftadd@exp1,w
 11735  04F5  024A               	subwf	___ftadd@exp2,w
 11736  04F6  1803               	skipnc
 11737  04F7  2D00               	goto	l4580
 11738  04F8  034A               	decf	___ftadd@exp2,w
 11739  04F9  3AFF               	xorlw	255
 11740  04FA  074B               	addwf	___ftadd@exp1,w
 11741  04FB  00C5               	movwf	??___ftadd
 11742  04FC  3019               	movlw	25
 11743  04FD  0245               	subwf	??___ftadd,w
 11744  04FE  1803               	btfsc	3,0
 11745  04FF  0008               	return
 11746  0500                     l4580:	
 11747  0500  3006               	movlw	6
 11748  0501  00C5               	movwf	??___ftadd
 11749  0502  0845               	movf	??___ftadd,w
 11750  0503  00C9               	movwf	___ftadd@sign
 11751  0504  1BC1               	btfsc	___ftadd@f1+2,7
 11752  0505  17C9               	bsf	___ftadd@sign,7
 11753  0506  1BC4               	btfsc	___ftadd@f2+2,7
 11754  0507  1749               	bsf	___ftadd@sign,6
 11755  0508  17C0               	bsf	___ftadd@f1+1,7
 11756  0509  30FF               	movlw	255
 11757  050A  05BF               	andwf	___ftadd@f1,f
 11758  050B  30FF               	movlw	255
 11759  050C  05C0               	andwf	___ftadd@f1+1,f
 11760  050D  3000               	movlw	0
 11761  050E  05C1               	andwf	___ftadd@f1+2,f
 11762  050F  17C3               	bsf	___ftadd@f2+1,7
 11763  0510  30FF               	movlw	255
 11764  0511  05C2               	andwf	___ftadd@f2,f
 11765  0512  30FF               	movlw	255
 11766  0513  05C3               	andwf	___ftadd@f2+1,f
 11767  0514  3000               	movlw	0
 11768  0515  05C4               	andwf	___ftadd@f2+2,f
 11769  0516  084A               	movf	___ftadd@exp2,w
 11770  0517  024B               	subwf	___ftadd@exp1,w
 11771  0518  1803               	skipnc
 11772  0519  2D3C               	goto	l4602
 11773  051A                     l4592:	
 11774  051A  3001               	movlw	1
 11775  051B                     u4925:	
 11776  051B  35C2               	lslf	___ftadd@f2,f
 11777  051C  0DC3               	rlf	___ftadd@f2+1,f
 11778  051D  0DC4               	rlf	___ftadd@f2+2,f
 11779  051E  0B89               	decfsz	9,f
 11780  051F  2D1B               	goto	u4925
 11781  0520  3001               	movlw	1
 11782  0521  02CA               	subwf	___ftadd@exp2,f
 11783  0522  084A               	movf	___ftadd@exp2,w
 11784  0523  064B               	xorwf	___ftadd@exp1,w
 11785  0524  1903               	skipnz
 11786  0525  2D37               	goto	l4600
 11787  0526  3001               	movlw	1
 11788  0527  02C9               	subwf	___ftadd@sign,f
 11789  0528  0849               	movf	___ftadd@sign,w
 11790  0529  3907               	andlw	7
 11791  052A  1903               	btfsc	3,2
 11792  052B  2D37               	goto	l4600
 11793  052C  2D1A               	goto	l4592
 11794  052D                     l4598:	
 11795  052D  3001               	movlw	1
 11796  052E                     u4955:	
 11797  052E  36C1               	lsrf	___ftadd@f1+2,f
 11798  052F  0CC0               	rrf	___ftadd@f1+1,f
 11799  0530  0CBF               	rrf	___ftadd@f1,f
 11800  0531  0B89               	decfsz	9,f
 11801  0532  2D2E               	goto	u4955
 11802  0533  3001               	movlw	1
 11803  0534  00C5               	movwf	??___ftadd
 11804  0535  0845               	movf	??___ftadd,w
 11805  0536  07CB               	addwf	___ftadd@exp1,f
 11806  0537                     l4600:	
 11807  0537  084B               	movf	___ftadd@exp1,w
 11808  0538  064A               	xorwf	___ftadd@exp2,w
 11809  0539  1903               	btfsc	3,2
 11810  053A  2D61               	goto	l1149
 11811  053B  2D2D               	goto	l4598
 11812  053C                     l4602:	
 11813  053C  084B               	movf	___ftadd@exp1,w
 11814  053D  024A               	subwf	___ftadd@exp2,w
 11815  053E  1803               	skipnc
 11816  053F  2D61               	goto	l1149
 11817  0540                     l4604:	
 11818  0540  3001               	movlw	1
 11819  0541                     u4985:	
 11820  0541  35BF               	lslf	___ftadd@f1,f
 11821  0542  0DC0               	rlf	___ftadd@f1+1,f
 11822  0543  0DC1               	rlf	___ftadd@f1+2,f
 11823  0544  0B89               	decfsz	9,f
 11824  0545  2D41               	goto	u4985
 11825  0546  3001               	movlw	1
 11826  0547  02CB               	subwf	___ftadd@exp1,f
 11827  0548  084A               	movf	___ftadd@exp2,w
 11828  0549  064B               	xorwf	___ftadd@exp1,w
 11829  054A  1903               	skipnz
 11830  054B  2D5D               	goto	l4612
 11831  054C  3001               	movlw	1
 11832  054D  02C9               	subwf	___ftadd@sign,f
 11833  054E  0849               	movf	___ftadd@sign,w
 11834  054F  3907               	andlw	7
 11835  0550  1903               	btfsc	3,2
 11836  0551  2D5D               	goto	l4612
 11837  0552  2D40               	goto	l4604
 11838  0553                     l4610:	
 11839  0553  3001               	movlw	1
 11840  0554                     u5015:	
 11841  0554  36C4               	lsrf	___ftadd@f2+2,f
 11842  0555  0CC3               	rrf	___ftadd@f2+1,f
 11843  0556  0CC2               	rrf	___ftadd@f2,f
 11844  0557  0B89               	decfsz	9,f
 11845  0558  2D54               	goto	u5015
 11846  0559  3001               	movlw	1
 11847  055A  00C5               	movwf	??___ftadd
 11848  055B  0845               	movf	??___ftadd,w
 11849  055C  07CA               	addwf	___ftadd@exp2,f
 11850  055D                     l4612:	
 11851  055D  084B               	movf	___ftadd@exp1,w
 11852  055E  064A               	xorwf	___ftadd@exp2,w
 11853  055F  1D03               	skipz
 11854  0560  2D53               	goto	l4610
 11855  0561                     l1149:	
 11856  0561  1FC9               	btfss	___ftadd@sign,7
 11857  0562  2D73               	goto	l4616
 11858  0563  30FF               	movlw	255
 11859  0564  06BF               	xorwf	___ftadd@f1,f
 11860  0565  30FF               	movlw	255
 11861  0566  06C0               	xorwf	___ftadd@f1+1,f
 11862  0567  30FF               	movlw	255
 11863  0568  06C1               	xorwf	___ftadd@f1+2,f
 11864  0569  3001               	movlw	1
 11865  056A  07BF               	addwf	___ftadd@f1,f
 11866  056B  3000               	movlw	0
 11867  056C  1803               	skipnc
 11868  056D  3001               	movlw	1
 11869  056E  07C0               	addwf	___ftadd@f1+1,f
 11870  056F  3000               	movlw	0
 11871  0570  1803               	skipnc
 11872  0571  3001               	movlw	1
 11873  0572  07C1               	addwf	___ftadd@f1+2,f
 11874  0573                     l4616:	
 11875  0573  1F49               	btfss	___ftadd@sign,6
 11876  0574  2D85               	goto	l4620
 11877  0575  30FF               	movlw	255
 11878  0576  06C2               	xorwf	___ftadd@f2,f
 11879  0577  30FF               	movlw	255
 11880  0578  06C3               	xorwf	___ftadd@f2+1,f
 11881  0579  30FF               	movlw	255
 11882  057A  06C4               	xorwf	___ftadd@f2+2,f
 11883  057B  3001               	movlw	1
 11884  057C  07C2               	addwf	___ftadd@f2,f
 11885  057D  3000               	movlw	0
 11886  057E  1803               	skipnc
 11887  057F  3001               	movlw	1
 11888  0580  07C3               	addwf	___ftadd@f2+1,f
 11889  0581  3000               	movlw	0
 11890  0582  1803               	skipnc
 11891  0583  3001               	movlw	1
 11892  0584  07C4               	addwf	___ftadd@f2+2,f
 11893  0585                     l4620:	
 11894  0585  01C9               	clrf	___ftadd@sign
 11895  0586  083F               	movf	___ftadd@f1,w
 11896  0587  07C2               	addwf	___ftadd@f2,f
 11897  0588  0840               	movf	___ftadd@f1+1,w
 11898  0589  3DC3               	addwfc	___ftadd@f2+1,f
 11899  058A  0841               	movf	___ftadd@f1+2,w
 11900  058B  3DC4               	addwfc	___ftadd@f2+2,f
 11901  058C  1FC4               	btfss	___ftadd@f2+2,7
 11902  058D  2DA0               	goto	l4630
 11903  058E  30FF               	movlw	255
 11904  058F  06C2               	xorwf	___ftadd@f2,f
 11905  0590  30FF               	movlw	255
 11906  0591  06C3               	xorwf	___ftadd@f2+1,f
 11907  0592  30FF               	movlw	255
 11908  0593  06C4               	xorwf	___ftadd@f2+2,f
 11909  0594  3001               	movlw	1
 11910  0595  07C2               	addwf	___ftadd@f2,f
 11911  0596  3000               	movlw	0
 11912  0597  1803               	skipnc
 11913  0598  3001               	movlw	1
 11914  0599  07C3               	addwf	___ftadd@f2+1,f
 11915  059A  3000               	movlw	0
 11916  059B  1803               	skipnc
 11917  059C  3001               	movlw	1
 11918  059D  07C4               	addwf	___ftadd@f2+2,f
 11919  059E  01C9               	clrf	___ftadd@sign
 11920  059F  0AC9               	incf	___ftadd@sign,f
 11921  05A0                     l4630:	
 11922  05A0  0842               	movf	___ftadd@f2,w
 11923  05A1  00A0               	movwf	___ftpack@arg
 11924  05A2  0843               	movf	___ftadd@f2+1,w
 11925  05A3  00A1               	movwf	___ftpack@arg+1
 11926  05A4  0844               	movf	___ftadd@f2+2,w
 11927  05A5  00A2               	movwf	___ftpack@arg+2
 11928  05A6  084B               	movf	___ftadd@exp1,w
 11929  05A7  00C5               	movwf	??___ftadd
 11930  05A8  0845               	movf	??___ftadd,w
 11931  05A9  00A3               	movwf	___ftpack@exp
 11932  05AA  0849               	movf	___ftadd@sign,w
 11933  05AB  00C6               	movwf	??___ftadd+1
 11934  05AC  0846               	movf	??___ftadd+1,w
 11935  05AD  00A4               	movwf	___ftpack@sign
 11936  05AE  3189  2102         	fcall	___ftpack
 11937  05B0  0020               	movlb	0	; select bank0
 11938  05B1  0820               	movf	?___ftpack,w
 11939  05B2  00BF               	movwf	?___ftadd
 11940  05B3  0821               	movf	?___ftpack+1,w
 11941  05B4  00C0               	movwf	?___ftadd+1
 11942  05B5  0822               	movf	?___ftpack+2,w
 11943  05B6  00C1               	movwf	?___ftadd+2
 11944  05B7  0008               	return
 11945  05B8                     __end_of___ftadd:	
 11946                           
 11947                           	psect	text49
 11948  1522                     __ptext49:	
 11949 ;; *************** function ___awtoft *****************
 11950 ;; Defined at:
 11951 ;;		line 32 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\awtoft.c"
 11952 ;; Parameters:    Size  Location     Type
 11953 ;;  c               2   22[BANK0 ] int 
 11954 ;; Auto vars:     Size  Location     Type
 11955 ;;  sign            1   27[BANK0 ] unsigned char 
 11956 ;; Return value:  Size  Location     Type
 11957 ;;                  3   22[BANK0 ] float 
 11958 ;; Registers used:
 11959 ;;		wreg, status,2, status,0, pclath, cstack
 11960 ;; Tracked objects:
 11961 ;;		On entry : 0/0
 11962 ;;		On exit  : 0/0
 11963 ;;		Unchanged: 0/0
 11964 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11965 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11966 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11967 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11968 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11969 ;;Total ram usage:        6 bytes
 11970 ;; Hardware stack levels used:    1
 11971 ;; Hardware stack levels required when called:    3
 11972 ;; This function calls:
 11973 ;;		___ftpack
 11974 ;; This function is called by:
 11975 ;;		_MyFtoa
 11976 ;; This function uses a non-reentrant model
 11977 ;;
 11978                           
 11979                           
 11980                           ;psect for function ___awtoft
 11981  1522                     ___awtoft:	
 11982                           
 11983                           ;incstack = 0
 11984                           ; Regs used in ___awtoft: [wreg+status,2+status,0+pclath+cstack]
 11985  1522  0020               	movlb	0	; select bank0
 11986  1523  01BB               	clrf	___awtoft@sign
 11987  1524  1FB7               	btfss	___awtoft@c+1,7
 11988  1525  2D2D               	goto	l4560
 11989  1526  09B6               	comf	___awtoft@c,f
 11990  1527  09B7               	comf	___awtoft@c+1,f
 11991  1528  0AB6               	incf	___awtoft@c,f
 11992  1529  1903               	skipnz
 11993  152A  0AB7               	incf	___awtoft@c+1,f
 11994  152B  01BB               	clrf	___awtoft@sign
 11995  152C  0ABB               	incf	___awtoft@sign,f
 11996  152D                     l4560:	
 11997  152D  0836               	movf	___awtoft@c,w
 11998  152E  00A0               	movwf	___ftpack@arg
 11999  152F  0837               	movf	___awtoft@c+1,w
 12000  1530  00A1               	movwf	___ftpack@arg+1
 12001  1531  01A2               	clrf	___ftpack@arg+2
 12002  1532  308E               	movlw	142
 12003  1533  00B9               	movwf	??___awtoft
 12004  1534  0839               	movf	??___awtoft,w
 12005  1535  00A3               	movwf	___ftpack@exp
 12006  1536  083B               	movf	___awtoft@sign,w
 12007  1537  00BA               	movwf	??___awtoft+1
 12008  1538  083A               	movf	??___awtoft+1,w
 12009  1539  00A4               	movwf	___ftpack@sign
 12010  153A  3189  2102         	fcall	___ftpack
 12011  153C  0020               	movlb	0	; select bank0
 12012  153D  0820               	movf	?___ftpack,w
 12013  153E  00B6               	movwf	?___awtoft
 12014  153F  0821               	movf	?___ftpack+1,w
 12015  1540  00B7               	movwf	?___awtoft+1
 12016  1541  0822               	movf	?___ftpack+2,w
 12017  1542  00B8               	movwf	?___awtoft+2
 12018  1543  0008               	return
 12019  1544                     __end_of___awtoft:	
 12020                           
 12021                           	psect	text50
 12022  0902                     __ptext50:	
 12023 ;; *************** function ___ftpack *****************
 12024 ;; Defined at:
 12025 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\float.c"
 12026 ;; Parameters:    Size  Location     Type
 12027 ;;  arg             3    0[BANK0 ] unsigned um
 12028 ;;  exp             1    3[BANK0 ] unsigned char 
 12029 ;;  sign            1    4[BANK0 ] unsigned char 
 12030 ;; Auto vars:     Size  Location     Type
 12031 ;;		None
 12032 ;; Return value:  Size  Location     Type
 12033 ;;                  3    0[BANK0 ] float 
 12034 ;; Registers used:
 12035 ;;		wreg, status,2, status,0
 12036 ;; Tracked objects:
 12037 ;;		On entry : 0/0
 12038 ;;		On exit  : 0/0
 12039 ;;		Unchanged: 0/0
 12040 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12041 ;;      Params:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12042 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12043 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12044 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12045 ;;Total ram usage:        8 bytes
 12046 ;; Hardware stack levels used:    1
 12047 ;; Hardware stack levels required when called:    2
 12048 ;; This function calls:
 12049 ;;		Nothing
 12050 ;; This function is called by:
 12051 ;;		___awtoft
 12052 ;;		___ftadd
 12053 ;;		___ftdiv
 12054 ;;		___ftmul
 12055 ;;		___lwtoft
 12056 ;; This function uses a non-reentrant model
 12057 ;;
 12058                           
 12059                           
 12060                           ;psect for function ___ftpack
 12061  0902                     ___ftpack:	
 12062                           
 12063                           ;incstack = 0
 12064                           ; Regs used in ___ftpack: [wreg+status,2+status,0]
 12065  0902  0020               	movlb	0	; select bank0
 12066  0903  0823               	movf	___ftpack@exp,w
 12067  0904  1903               	btfsc	3,2
 12068  0905  290B               	goto	l4316
 12069  0906  0822               	movf	___ftpack@arg+2,w
 12070  0907  0421               	iorwf	___ftpack@arg+1,w
 12071  0908  0420               	iorwf	___ftpack@arg,w
 12072  0909  1D03               	skipz
 12073  090A  291C               	goto	l4322
 12074  090B                     l4316:	
 12075  090B  3000               	movlw	0
 12076  090C  00A0               	movwf	?___ftpack
 12077  090D  3000               	movlw	0
 12078  090E  00A1               	movwf	?___ftpack+1
 12079  090F  3000               	movlw	0
 12080  0910  00A2               	movwf	?___ftpack+2
 12081  0911  0008               	return
 12082  0912                     l4320:	
 12083  0912  3001               	movlw	1
 12084  0913  00A5               	movwf	??___ftpack
 12085  0914  0825               	movf	??___ftpack,w
 12086  0915  07A3               	addwf	___ftpack@exp,f
 12087  0916  3001               	movlw	1
 12088  0917                     u4495:	
 12089  0917  36A2               	lsrf	___ftpack@arg+2,f
 12090  0918  0CA1               	rrf	___ftpack@arg+1,f
 12091  0919  0CA0               	rrf	___ftpack@arg,f
 12092  091A  0B89               	decfsz	9,f
 12093  091B  2917               	goto	u4495
 12094  091C                     l4322:	
 12095  091C  30FE               	movlw	254
 12096  091D  0522               	andwf	___ftpack@arg+2,w
 12097  091E  1903               	btfsc	3,2
 12098  091F  2935               	goto	l1118
 12099  0920  2912               	goto	l4320
 12100  0921                     l4324:	
 12101  0921  3001               	movlw	1
 12102  0922  00A5               	movwf	??___ftpack
 12103  0923  0825               	movf	??___ftpack,w
 12104  0924  07A3               	addwf	___ftpack@exp,f
 12105  0925  3001               	movlw	1
 12106  0926  07A0               	addwf	___ftpack@arg,f
 12107  0927  3000               	movlw	0
 12108  0928  1803               	skipnc
 12109  0929  3001               	movlw	1
 12110  092A  07A1               	addwf	___ftpack@arg+1,f
 12111  092B  3000               	movlw	0
 12112  092C  1803               	skipnc
 12113  092D  3001               	movlw	1
 12114  092E  07A2               	addwf	___ftpack@arg+2,f
 12115  092F  3001               	movlw	1
 12116  0930                     u4515:	
 12117  0930  36A2               	lsrf	___ftpack@arg+2,f
 12118  0931  0CA1               	rrf	___ftpack@arg+1,f
 12119  0932  0CA0               	rrf	___ftpack@arg,f
 12120  0933  0B89               	decfsz	9,f
 12121  0934  2930               	goto	u4515
 12122  0935                     l1118:	
 12123  0935  30FF               	movlw	255
 12124  0936  0522               	andwf	___ftpack@arg+2,w
 12125  0937  1903               	btfsc	3,2
 12126  0938  2942               	goto	l4332
 12127  0939  2921               	goto	l4324
 12128  093A                     l4330:	
 12129  093A  3001               	movlw	1
 12130  093B  02A3               	subwf	___ftpack@exp,f
 12131  093C  3001               	movlw	1
 12132  093D                     u4535:	
 12133  093D  35A0               	lslf	___ftpack@arg,f
 12134  093E  0DA1               	rlf	___ftpack@arg+1,f
 12135  093F  0DA2               	rlf	___ftpack@arg+2,f
 12136  0940  0B89               	decfsz	9,f
 12137  0941  293D               	goto	u4535
 12138  0942                     l4332:	
 12139  0942  1BA1               	btfsc	___ftpack@arg+1,7
 12140  0943  2948               	goto	l1125
 12141  0944  3002               	movlw	2
 12142  0945  0223               	subwf	___ftpack@exp,w
 12143  0946  1803               	skipnc
 12144  0947  293A               	goto	l4330
 12145  0948                     l1125:	
 12146  0948  1823               	btfsc	___ftpack@exp,0
 12147  0949  2950               	goto	l1126
 12148  094A  30FF               	movlw	255
 12149  094B  05A0               	andwf	___ftpack@arg,f
 12150  094C  307F               	movlw	127
 12151  094D  05A1               	andwf	___ftpack@arg+1,f
 12152  094E  30FF               	movlw	255
 12153  094F  05A2               	andwf	___ftpack@arg+2,f
 12154  0950                     l1126:	
 12155  0950  1003               	clrc
 12156  0951  0CA3               	rrf	___ftpack@exp,f
 12157  0952  0823               	movf	___ftpack@exp,w
 12158  0953  00A5               	movwf	??___ftpack
 12159  0954  01A6               	clrf	??___ftpack+1
 12160  0955  01A7               	clrf	??___ftpack+2
 12161  0956  3010               	movlw	16
 12162  0957                     u4575:	
 12163  0957  35A5               	lslf	??___ftpack,f
 12164  0958  0DA6               	rlf	??___ftpack+1,f
 12165  0959  0DA7               	rlf	??___ftpack+2,f
 12166  095A  0B89               	decfsz	9,f
 12167  095B  2957               	goto	u4575
 12168  095C  0825               	movf	??___ftpack,w
 12169  095D  04A0               	iorwf	___ftpack@arg,f
 12170  095E  0826               	movf	??___ftpack+1,w
 12171  095F  04A1               	iorwf	___ftpack@arg+1,f
 12172  0960  0827               	movf	??___ftpack+2,w
 12173  0961  04A2               	iorwf	___ftpack@arg+2,f
 12174  0962  0824               	movf	___ftpack@sign,w
 12175  0963  1903               	btfsc	3,2
 12176  0964  0008               	return
 12177  0965  17A2               	bsf	___ftpack@arg+2,7
 12178  0966  0008               	return
 12179  0967                     __end_of___ftpack:	
 12180                           
 12181                           	psect	text51
 12182  083F                     __ptext51:	
 12183 ;; *************** function _AppSm *****************
 12184 ;; Defined at:
 12185 ;;		line 133 in file "../Source/c/04_App/sb810_app.c"
 12186 ;; Parameters:    Size  Location     Type
 12187 ;;		None
 12188 ;; Auto vars:     Size  Location     Type
 12189 ;;		None
 12190 ;; Return value:  Size  Location     Type
 12191 ;;                  1    wreg      void 
 12192 ;; Registers used:
 12193 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12194 ;; Tracked objects:
 12195 ;;		On entry : 0/0
 12196 ;;		On exit  : 0/0
 12197 ;;		Unchanged: 0/0
 12198 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12199 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12200 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12201 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12202 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12203 ;;Total ram usage:        3 bytes
 12204 ;; Hardware stack levels used:    1
 12205 ;; Hardware stack levels required when called:    6
 12206 ;; This function calls:
 12207 ;;		_GenerateEvt
 12208 ;;		_ManageProtocol
 12209 ;; This function is called by:
 12210 ;;		_App_MainTask
 12211 ;; This function uses a non-reentrant model
 12212 ;;
 12213                           
 12214                           
 12215                           ;psect for function _AppSm
 12216  083F                     _AppSm:	
 12217                           
 12218                           ;sb810_app.c: 135: static AppStateType AppState = GetI2cAddressState;
 12219                           ;sb810_app.c: 136: static UINT8 WpuSetCounter = 0;
 12220                           ;sb810_app.c: 138: switch (AppState)
 12221                           
 12222                           ;incstack = 0
 12223                           ; Regs used in _AppSm: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 12224  083F  2890               	goto	l5164
 12225  0840                     l5146:	
 12226                           ;sb810_app.c: 139: {
 12227                           ;sb810_app.c: 140: case GetI2cAddressState:
 12228                           
 12229                           
 12230                           ;sb810_app.c: 143: I2cSlaveAddress |= (PORTCbits.RC6 << 3);
 12231  0840  0020               	movlb	0	; select bank0
 12232  0841  0E0E               	swapf	14,w	;volatile
 12233  0842  0C89               	rrf	9,f
 12234  0843  0C89               	rrf	9,f
 12235  0844  3901               	andlw	1
 12236  0845  00C1               	movwf	??_AppSm
 12237  0846  3002               	movlw	2
 12238  0847                     u5795:	
 12239  0847  35C1               	lslf	??_AppSm,f
 12240  0848  3EFF               	addlw	-1
 12241  0849  1D03               	skipz
 12242  084A  2847               	goto	u5795
 12243  084B  3541               	lslf	??_AppSm,w
 12244  084C  00C2               	movwf	??_AppSm+1
 12245  084D  0842               	movf	??_AppSm+1,w
 12246  084E  04F6               	iorwf	_I2cSlaveAddress,f
 12247                           
 12248                           ;sb810_app.c: 144: I2cSlaveAddress |= (PORTCbits.RC3 << 2);
 12249  084F  0C0E               	rrf	14,w	;volatile
 12250  0850  00C1               	movwf	??_AppSm
 12251  0851  0CC1               	rrf	??_AppSm,f
 12252  0852  0C41               	rrf	??_AppSm,w
 12253  0853  3901               	andlw	1
 12254  0854  00C2               	movwf	??_AppSm+1
 12255  0855  3001               	movlw	1
 12256  0856                     u5805:	
 12257  0856  35C2               	lslf	??_AppSm+1,f
 12258  0857  3EFF               	addlw	-1
 12259  0858  1D03               	skipz
 12260  0859  2856               	goto	u5805
 12261  085A  3542               	lslf	??_AppSm+1,w
 12262  085B  00C3               	movwf	??_AppSm+2
 12263  085C  0843               	movf	??_AppSm+2,w
 12264  085D  04F6               	iorwf	_I2cSlaveAddress,f
 12265                           
 12266                           ;sb810_app.c: 145: I2cSlaveAddress |= (PORTCbits.RC4 << 1);
 12267  085E  0E0E               	swapf	14,w	;volatile
 12268  085F  3901               	andlw	1
 12269  0860  0709               	addwf	9,w
 12270  0861  00C1               	movwf	??_AppSm
 12271  0862  0841               	movf	??_AppSm,w
 12272  0863  04F6               	iorwf	_I2cSlaveAddress,f
 12273                           
 12274                           ;sb810_app.c: 146: I2cSlaveAddress |= (PORTCbits.RC5 << 0);
 12275  0864  0E0E               	swapf	14,w	;volatile
 12276  0865  0C89               	rrf	9,f
 12277  0866  3901               	andlw	1
 12278  0867  00C1               	movwf	??_AppSm
 12279  0868  0841               	movf	??_AppSm,w
 12280  0869  04F6               	iorwf	_I2cSlaveAddress,f
 12281                           
 12282                           ;sb810_app.c: 155: AppState = WaitWpuSetState;
 12283  086A  0021               	movlb	1	; select bank1
 12284  086B  01E2               	clrf	AppSm@AppState^(0+128)
 12285  086C  0AE2               	incf	AppSm@AppState^(0+128),f
 12286                           
 12287                           ;sb810_app.c: 156: break;
 12288  086D  0008               	return
 12289  086E                     l5150:	
 12290                           ;sb810_app.c: 158: case WaitWpuSetState:
 12291                           
 12292                           
 12293                           ;sb810_app.c: 160: WpuSetCounter++;
 12294  086E  3001               	movlw	1
 12295  086F  0020               	movlb	0	; select bank0
 12296  0870  00C1               	movwf	??_AppSm
 12297  0871  0841               	movf	??_AppSm,w
 12298  0872  0021               	movlb	1	; select bank1
 12299  0873  07E3               	addwf	AppSm@WpuSetCounter^(0+128),f
 12300                           
 12301                           ;sb810_app.c: 162: if (WpuSetCounter >= ((UINT16)(200)/((UINT16)(100))))
 12302  0874  3002               	movlw	2
 12303  0875  0263               	subwf	AppSm@WpuSetCounter^(0+128),w
 12304  0876  1C03               	skipc
 12305  0877  0008               	return
 12306                           
 12307                           ;sb810_app.c: 163: {
 12308                           ;sb810_app.c: 165: AppState = SendI2cAddrState;
 12309  0878  3002               	movlw	2
 12310  0879  0020               	movlb	0	; select bank0
 12311  087A  00C1               	movwf	??_AppSm
 12312  087B  0841               	movf	??_AppSm,w
 12313  087C  0021               	movlb	1	; select bank1
 12314  087D  00E2               	movwf	AppSm@AppState^(0+128)
 12315                           
 12316                           ;sb810_app.c: 166: }
 12317                           ;sb810_app.c: 167: break;
 12318  087E  0008               	return
 12319  087F                     l5156:	
 12320                           ;sb810_app.c: 169: case SendI2cAddrState:
 12321                           
 12322                           
 12323                           ;sb810_app.c: 171: GenerateEvt(&I2cSetAddress);
 12324  087F  3067               	movlw	low _I2cSetAddress
 12325  0880  0020               	movlb	0	; select bank0
 12326  0881  00A0               	movwf	GenerateEvt@Event
 12327  0882  3001               	movlw	high _I2cSetAddress
 12328  0883  00A1               	movwf	GenerateEvt@Event+1
 12329  0884  3195  256B         	fcall	_GenerateEvt
 12330                           
 12331                           ;sb810_app.c: 173: AppState = ManageProtocolState;
 12332  0886  3003               	movlw	3
 12333  0887  0020               	movlb	0	; select bank0
 12334  0888  00C1               	movwf	??_AppSm
 12335  0889  0841               	movf	??_AppSm,w
 12336  088A  0021               	movlb	1	; select bank1
 12337  088B  00E2               	movwf	AppSm@AppState^(0+128)
 12338                           
 12339                           ;sb810_app.c: 174: break;
 12340  088C  0008               	return
 12341  088D                     l5160:	
 12342                           ;sb810_app.c: 176: case ManageProtocolState:
 12343                           
 12344                           
 12345                           ;sb810_app.c: 178: ManageProtocol();
 12346  088D  3188  2001         	fcall	_ManageProtocol
 12347                           
 12348                           ;sb810_app.c: 183: }
 12349                           
 12350                           ;sb810_app.c: 182: break;
 12351                           
 12352                           ;sb810_app.c: 181: default:
 12353                           
 12354                           ;sb810_app.c: 179: break;
 12355  088F  0008               	return
 12356  0890                     l5164:	
 12357  0890  0021               	movlb	1	; select bank1
 12358  0891  0862               	movf	AppSm@AppState^(0+128),w
 12359                           
 12360                           ; Switch size 1, requested type "space"
 12361                           ; Number of cases is 4, Range of values is 0 to 3
 12362                           ; switch strategies available:
 12363                           ; Name         Instructions Cycles
 12364                           ; simple_byte           13     7 (average)
 12365                           ; direct_byte           14     6 (fixed)
 12366                           ; jumptable            260     6 (fixed)
 12367                           ;	Chosen strategy is simple_byte
 12368  0892  3A00               	xorlw	0	; case 0
 12369  0893  1903               	skipnz
 12370  0894  2840               	goto	l5146
 12371  0895  3A01               	xorlw	1	; case 1
 12372  0896  1903               	skipnz
 12373  0897  286E               	goto	l5150
 12374  0898  3A03               	xorlw	3	; case 2
 12375  0899  1903               	skipnz
 12376  089A  287F               	goto	l5156
 12377  089B  3A01               	xorlw	1	; case 3
 12378  089C  1903               	skipnz
 12379  089D  288D               	goto	l5160
 12380  089E  289F               	goto	l779
 12381  089F                     l779:	
 12382  089F  0008               	return
 12383  08A0                     __end_of_AppSm:	
 12384                           
 12385                           	psect	text52
 12386  0801                     __ptext52:	
 12387 ;; *************** function _ManageProtocol *****************
 12388 ;; Defined at:
 12389 ;;		line 95 in file "../Source/c/04_App/sb810_app.c"
 12390 ;; Parameters:    Size  Location     Type
 12391 ;;		None
 12392 ;; Auto vars:     Size  Location     Type
 12393 ;;  Index           1   32[BANK0 ] unsigned char 
 12394 ;; Return value:  Size  Location     Type
 12395 ;;                  1    wreg      void 
 12396 ;; Registers used:
 12397 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12398 ;; Tracked objects:
 12399 ;;		On entry : 0/0
 12400 ;;		On exit  : 0/0
 12401 ;;		Unchanged: 0/0
 12402 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12403 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12404 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12405 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12406 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12407 ;;Total ram usage:        2 bytes
 12408 ;; Hardware stack levels used:    1
 12409 ;; Hardware stack levels required when called:    5
 12410 ;; This function calls:
 12411 ;;		_GenerateEvt
 12412 ;;		_ReceiveEvt
 12413 ;;		_StdS_ManageStdServices
 12414 ;; This function is called by:
 12415 ;;		_AppSm
 12416 ;; This function uses a non-reentrant model
 12417 ;;
 12418                           
 12419                           
 12420                           ;psect for function _ManageProtocol
 12421  0801                     _ManageProtocol:	
 12422                           
 12423                           ;sb810_app.c: 97: UINT8 Index;
 12424                           ;sb810_app.c: 100: if (ReceiveEvt(&I2cWriteRequest))
 12425                           
 12426                           ;incstack = 0
 12427                           ; Regs used in _ManageProtocol: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 12428  0801  3069               	movlw	low _I2cWriteRequest
 12429  0802  0020               	movlb	0	; select bank0
 12430  0803  00A0               	movwf	ReceiveEvt@Event
 12431  0804  3001               	movlw	high _I2cWriteRequest
 12432  0805  00A1               	movwf	ReceiveEvt@Event+1
 12433  0806  3195  25E3  3188   	fcall	_ReceiveEvt
 12434  0809  3A00               	xorlw	0
 12435  080A  1903               	skipnz
 12436  080B  0008               	return
 12437                           
 12438                           ;sb810_app.c: 101: {
 12439                           ;sb810_app.c: 103: StdS_ManageStdServices();
 12440  080C  3183  23C4  3188   	fcall	_StdS_ManageStdServices
 12441                           
 12442                           ;sb810_app.c: 105: switch (CmdBuffer[((UINT8)(0))])
 12443  080F  2837               	goto	l4796
 12444  0810                     l4778:	
 12445                           ;sb810_app.c: 106: {
 12446                           ;sb810_app.c: 107: case ((UINT8)(0x60)):
 12447                           
 12448                           
 12449                           ;sb810_app.c: 109: for (Index = 0; Index < ((UINT8)(4)); Index++)
 12450  0810  0020               	movlb	0	; select bank0
 12451  0811  01C0               	clrf	ManageProtocol@Index
 12452  0812  3004               	movlw	4
 12453  0813  0240               	subwf	ManageProtocol@Index,w
 12454  0814  1803               	btfsc	3,0
 12455  0815  282C               	goto	l4790
 12456  0816                     l4784:	
 12457                           
 12458                           ;sb810_app.c: 110: {
 12459                           ;sb810_app.c: 111: RepBuffer[Index] = TempCelStr[Index];
 12460  0816  0840               	movf	ManageProtocol@Index,w
 12461  0817  3EA0               	addlw	(low (_TempCelStr| (0+512)))& (0+255)
 12462  0818  0086               	movwf	6
 12463  0819  3002               	movlw	2	; select bank5/6
 12464  081A  0087               	movwf	7
 12465  081B  0801               	movf	1,w
 12466  081C  00BF               	movwf	??_ManageProtocol
 12467  081D  0840               	movf	ManageProtocol@Index,w
 12468  081E  3E20               	addlw	(low (_RepBuffer| (0+512)))& (0+255)
 12469  081F  0086               	movwf	6
 12470  0820  3002               	movlw	2	; select bank4/5
 12471  0821  0087               	movwf	7
 12472  0822  083F               	movf	??_ManageProtocol,w
 12473  0823  0081               	movwf	1
 12474  0824  3001               	movlw	1
 12475  0825  00BF               	movwf	??_ManageProtocol
 12476  0826  083F               	movf	??_ManageProtocol,w
 12477  0827  07C0               	addwf	ManageProtocol@Index,f
 12478  0828  3004               	movlw	4
 12479  0829  0240               	subwf	ManageProtocol@Index,w
 12480  082A  1C03               	skipc
 12481  082B  2816               	goto	l4784
 12482  082C                     l4790:	
 12483                           
 12484                           ;sb810_app.c: 112: }
 12485                           ;sb810_app.c: 114: RepBufferLen = ((UINT8)(4));
 12486  082C  3004               	movlw	4
 12487  082D  00BF               	movwf	??_ManageProtocol
 12488  082E  083F               	movf	??_ManageProtocol,w
 12489  082F  00F7               	movwf	_RepBufferLen
 12490                           
 12491                           ;sb810_app.c: 116: GenerateEvt(&I2cReplyPacketReady);
 12492  0830  3078               	movlw	low _I2cReplyPacketReady
 12493  0831  00A0               	movwf	GenerateEvt@Event
 12494  0832  3000               	movlw	high _I2cReplyPacketReady
 12495  0833  00A1               	movwf	GenerateEvt@Event+1
 12496  0834  3195  256B         	fcall	_GenerateEvt
 12497                           
 12498                           ;sb810_app.c: 121: }
 12499                           
 12500                           ;sb810_app.c: 120: break;
 12501                           
 12502                           ;sb810_app.c: 119: default:
 12503                           
 12504                           ;sb810_app.c: 117: break;
 12505  0836  0008               	return
 12506  0837                     l4796:	
 12507  0837  0026               	movlb	6	; select bank6
 12508  0838  0820               	movf	_CmdBuffer^(0+768),w
 12509                           
 12510                           ; Switch size 1, requested type "space"
 12511                           ; Number of cases is 1, Range of values is 96 to 96
 12512                           ; switch strategies available:
 12513                           ; Name         Instructions Cycles
 12514                           ; simple_byte            4     3 (average)
 12515                           ; direct_byte           11     9 (fixed)
 12516                           ; jumptable            263     9 (fixed)
 12517                           ;	Chosen strategy is simple_byte
 12518  0839  3A60               	xorlw	96	; case 96
 12519  083A  1903               	skipnz
 12520  083B  2810               	goto	l4778
 12521  083C  283E               	goto	l764
 12522  083D  0008               	return
 12523  083E                     l764:	
 12524  083E  0008               	return
 12525  083F                     __end_of_ManageProtocol:	
 12526                           
 12527                           	psect	text53
 12528  03C4                     __ptext53:	
 12529 ;; *************** function _StdS_ManageStdServices *****************
 12530 ;; Defined at:
 12531 ;;		line 182 in file "../../../../../Framework/MercuryFwk/Source/c/03_Sml/02_Ssl/std_ser.c"
 12532 ;; Parameters:    Size  Location     Type
 12533 ;;		None
 12534 ;; Auto vars:     Size  Location     Type
 12535 ;;  DieTempStr      4   25[BANK0 ] unsigned char [4]
 12536 ;;  DieTemp         2   29[BANK0 ] unsigned short 
 12537 ;; Return value:  Size  Location     Type
 12538 ;;                  1    wreg      void 
 12539 ;; Registers used:
 12540 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12541 ;; Tracked objects:
 12542 ;;		On entry : 0/0
 12543 ;;		On exit  : 0/0
 12544 ;;		Unchanged: 0/0
 12545 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12546 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12547 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12548 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12549 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12550 ;;Total ram usage:        8 bytes
 12551 ;; Hardware stack levels used:    1
 12552 ;; Hardware stack levels required when called:    4
 12553 ;; This function calls:
 12554 ;;		_BoardReset
 12555 ;;		_ControlLedDirect
 12556 ;;		_GenerateEvt
 12557 ;;		_GetDieTemperature
 12558 ;;		_LowPowerMode
 12559 ;;		_StringCopy
 12560 ;;		_UpdateLebBlinkSts
 12561 ;;		_utoa
 12562 ;; This function is called by:
 12563 ;;		_ManageProtocol
 12564 ;; This function uses a non-reentrant model
 12565 ;;
 12566                           
 12567                           
 12568                           ;psect for function _StdS_ManageStdServices
 12569  03C4                     _StdS_ManageStdServices:	
 12570                           
 12571                           ;std_ser.c: 184: UINT16 DieTemp;
 12572                           ;std_ser.c: 185: UINT8 DieTempStr[4];
 12573                           ;std_ser.c: 188: switch (CmdBuffer[((UINT8)(0))])
 12574                           
 12575                           ;incstack = 0
 12576                           ; Regs used in _StdS_ManageStdServices: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 12577  03C4  2CA0               	goto	l4550
 12578  03C5                     l4494:	
 12579                           ;std_ser.c: 189: {
 12580                           ;std_ser.c: 190: case ((UINT8)(0x10)):
 12581                           
 12582                           
 12583                           ;std_ser.c: 192: StringCopy((void*)("ECHO"),RepBuffer,((UINT8)(4)));
 12584  03C5  3023               	movlw	low (STR_2| (0+32768))
 12585  03C6  0020               	movlb	0	; select bank0
 12586  03C7  00A0               	movwf	StringCopy@SourceStr
 12587  03C8  3098               	movlw	high (STR_2| (0+32768))
 12588  03C9  00A1               	movwf	StringCopy@SourceStr+1
 12589  03CA  3020               	movlw	(low (_RepBuffer| (0+512)))& (0+255)
 12590  03CB  00B7               	movwf	??_StdS_ManageStdServices
 12591  03CC  0837               	movf	??_StdS_ManageStdServices,w
 12592  03CD  00A2               	movwf	StringCopy@DestStr
 12593  03CE  3004               	movlw	4
 12594  03CF  00B8               	movwf	??_StdS_ManageStdServices+1
 12595  03D0  0838               	movf	??_StdS_ManageStdServices+1,w
 12596  03D1  00A3               	movwf	StringCopy@Len
 12597  03D2  3195  2500  3183   	fcall	_StringCopy
 12598                           
 12599                           ;std_ser.c: 194: RepBufferLen = ((UINT8)(4));
 12600  03D5  3004               	movlw	4
 12601  03D6  0020               	movlb	0	; select bank0
 12602  03D7  00B7               	movwf	??_StdS_ManageStdServices
 12603  03D8  0837               	movf	??_StdS_ManageStdServices,w
 12604  03D9  00F7               	movwf	_RepBufferLen
 12605                           
 12606                           ;std_ser.c: 196: GenerateEvt(&I2cReplyPacketReady);
 12607  03DA  3078               	movlw	low _I2cReplyPacketReady
 12608  03DB  00A0               	movwf	GenerateEvt@Event
 12609  03DC  3000               	movlw	high _I2cReplyPacketReady
 12610  03DD  00A1               	movwf	GenerateEvt@Event+1
 12611  03DE  3195  256B         	fcall	_GenerateEvt
 12612                           
 12613                           ;std_ser.c: 197: break;
 12614  03E0  0008               	return
 12615  03E1                     l4500:	
 12616                           ;std_ser.c: 199: case ((UINT8)(0x20)):
 12617                           
 12618                           
 12619                           ;std_ser.c: 201: StringCopy((void*)"SB810",RepBuffer,((UINT8)(5)));
 12620  03E1  301D               	movlw	low (STR_3| (0+32768))
 12621  03E2  0020               	movlb	0	; select bank0
 12622  03E3  00A0               	movwf	StringCopy@SourceStr
 12623  03E4  3098               	movlw	high (STR_3| (0+32768))
 12624  03E5  00A1               	movwf	StringCopy@SourceStr+1
 12625  03E6  3020               	movlw	(low (_RepBuffer| (0+512)))& (0+255)
 12626  03E7  00B7               	movwf	??_StdS_ManageStdServices
 12627  03E8  0837               	movf	??_StdS_ManageStdServices,w
 12628  03E9  00A2               	movwf	StringCopy@DestStr
 12629  03EA  3005               	movlw	5
 12630  03EB  00B8               	movwf	??_StdS_ManageStdServices+1
 12631  03EC  0838               	movf	??_StdS_ManageStdServices+1,w
 12632  03ED  00A3               	movwf	StringCopy@Len
 12633  03EE  3195  2500  3183   	fcall	_StringCopy
 12634                           
 12635                           ;std_ser.c: 203: RepBufferLen = ((UINT8)(5));
 12636  03F1  3005               	movlw	5
 12637  03F2  0020               	movlb	0	; select bank0
 12638  03F3  00B7               	movwf	??_StdS_ManageStdServices
 12639  03F4  0837               	movf	??_StdS_ManageStdServices,w
 12640  03F5  00F7               	movwf	_RepBufferLen
 12641                           
 12642                           ;std_ser.c: 205: GenerateEvt(&I2cReplyPacketReady);
 12643  03F6  3078               	movlw	low _I2cReplyPacketReady
 12644  03F7  00A0               	movwf	GenerateEvt@Event
 12645  03F8  3000               	movlw	high _I2cReplyPacketReady
 12646  03F9  00A1               	movwf	GenerateEvt@Event+1
 12647  03FA  3195  256B         	fcall	_GenerateEvt
 12648                           
 12649                           ;std_ser.c: 206: break;
 12650  03FC  0008               	return
 12651  03FD                     l4506:	
 12652                           ;std_ser.c: 208: case ((UINT8)(0x21)):
 12653                           
 12654                           
 12655                           ;std_ser.c: 210: StringCopy((void*)"01.00.00",RepBuffer,((UINT8)(8)));
 12656  03FD  300C               	movlw	low (STR_4| (0+32768))
 12657  03FE  0020               	movlb	0	; select bank0
 12658  03FF  00A0               	movwf	StringCopy@SourceStr
 12659  0400  3098               	movlw	high (STR_4| (0+32768))
 12660  0401  00A1               	movwf	StringCopy@SourceStr+1
 12661  0402  3020               	movlw	(low (_RepBuffer| (0+512)))& (0+255)
 12662  0403  00B7               	movwf	??_StdS_ManageStdServices
 12663  0404  0837               	movf	??_StdS_ManageStdServices,w
 12664  0405  00A2               	movwf	StringCopy@DestStr
 12665  0406  3008               	movlw	8
 12666  0407  00B8               	movwf	??_StdS_ManageStdServices+1
 12667  0408  0838               	movf	??_StdS_ManageStdServices+1,w
 12668  0409  00A3               	movwf	StringCopy@Len
 12669  040A  3195  2500  3183   	fcall	_StringCopy
 12670                           
 12671                           ;std_ser.c: 212: RepBufferLen = ((UINT8)(8));
 12672  040D  3008               	movlw	8
 12673  040E  0020               	movlb	0	; select bank0
 12674  040F  00B7               	movwf	??_StdS_ManageStdServices
 12675  0410  0837               	movf	??_StdS_ManageStdServices,w
 12676  0411  00F7               	movwf	_RepBufferLen
 12677                           
 12678                           ;std_ser.c: 214: GenerateEvt(&I2cReplyPacketReady);
 12679  0412  3078               	movlw	low _I2cReplyPacketReady
 12680  0413  00A0               	movwf	GenerateEvt@Event
 12681  0414  3000               	movlw	high _I2cReplyPacketReady
 12682  0415  00A1               	movwf	GenerateEvt@Event+1
 12683  0416  3195  256B         	fcall	_GenerateEvt
 12684                           
 12685                           ;std_ser.c: 215: break;
 12686  0418  0008               	return
 12687  0419                     l4512:	
 12688                           ;std_ser.c: 217: case ((UINT8)(0x22)):
 12689                           
 12690                           
 12691                           ;std_ser.c: 219: StringCopy((void*)"01.00.00",RepBuffer,((UINT8)(8)));
 12692  0419  300C               	movlw	low (STR_4| (0+32768))
 12693  041A  0020               	movlb	0	; select bank0
 12694  041B  00A0               	movwf	StringCopy@SourceStr
 12695  041C  3098               	movlw	high (STR_4| (0+32768))
 12696  041D  00A1               	movwf	StringCopy@SourceStr+1
 12697  041E  3020               	movlw	(low (_RepBuffer| (0+512)))& (0+255)
 12698  041F  00B7               	movwf	??_StdS_ManageStdServices
 12699  0420  0837               	movf	??_StdS_ManageStdServices,w
 12700  0421  00A2               	movwf	StringCopy@DestStr
 12701  0422  3008               	movlw	8
 12702  0423  00B8               	movwf	??_StdS_ManageStdServices+1
 12703  0424  0838               	movf	??_StdS_ManageStdServices+1,w
 12704  0425  00A3               	movwf	StringCopy@Len
 12705  0426  3195  2500  3183   	fcall	_StringCopy
 12706                           
 12707                           ;std_ser.c: 221: RepBufferLen = ((UINT8)(8));
 12708  0429  3008               	movlw	8
 12709  042A  0020               	movlb	0	; select bank0
 12710  042B  00B7               	movwf	??_StdS_ManageStdServices
 12711  042C  0837               	movf	??_StdS_ManageStdServices,w
 12712  042D  00F7               	movwf	_RepBufferLen
 12713                           
 12714                           ;std_ser.c: 223: GenerateEvt(&I2cReplyPacketReady);
 12715  042E  3078               	movlw	low _I2cReplyPacketReady
 12716  042F  00A0               	movwf	GenerateEvt@Event
 12717  0430  3000               	movlw	high _I2cReplyPacketReady
 12718  0431  00A1               	movwf	GenerateEvt@Event+1
 12719  0432  3195  256B         	fcall	_GenerateEvt
 12720                           
 12721                           ;std_ser.c: 225: break;
 12722  0434  0008               	return
 12723  0435                     l4518:	
 12724                           ;std_ser.c: 227: case ((UINT8)(0x30)):
 12725                           
 12726                           
 12727                           ;std_ser.c: 229: BoardReset();
 12728  0435  3193  2304         	fcall	_BoardReset
 12729                           
 12730                           ;std_ser.c: 230: break;
 12731  0437  0008               	return
 12732  0438                     l4520:	
 12733                           ;std_ser.c: 232: case ((UINT8)(0x31)):
 12734                           
 12735                           
 12736                           ;std_ser.c: 234: LowPowerMode();
 12737  0438  3193  23AE         	fcall	_LowPowerMode
 12738                           
 12739                           ;std_ser.c: 235: break;
 12740  043A  0008               	return
 12741  043B                     l4522:	
 12742                           ;std_ser.c: 237: case ((UINT8)(0x41)):
 12743                           
 12744                           
 12745                           ;std_ser.c: 239: UpdateLebBlinkSts();
 12746  043B  3193  236A         	fcall	_UpdateLebBlinkSts
 12747                           
 12748                           ;std_ser.c: 240: break;
 12749  043D  0008               	return
 12750  043E                     l4524:	
 12751                           ;std_ser.c: 242: case ((UINT8)(0x42)):
 12752                           
 12753                           
 12754                           ;std_ser.c: 244: ControlLedDirect();
 12755  043E  3193  2360         	fcall	_ControlLedDirect
 12756                           
 12757                           ;std_ser.c: 245: break;
 12758  0440  0008               	return
 12759  0441                     l4526:	
 12760                           ;std_ser.c: 247: case ((UINT8)(0x45)):
 12761                           
 12762                           
 12763                           ;std_ser.c: 249: DieTemp = GetDieTemperature();
 12764  0441  3194  2495  3183   	fcall	_GetDieTemperature
 12765  0444  0020               	movlb	0	; select bank0
 12766  0445  0826               	movf	?_GetDieTemperature+1,w
 12767  0446  00BE               	movwf	StdS_ManageStdServices@DieTemp+1
 12768  0447  0825               	movf	?_GetDieTemperature,w
 12769  0448  00BD               	movwf	StdS_ManageStdServices@DieTemp
 12770                           
 12771                           ;std_ser.c: 251: RepBuffer[0] = ((DieTemp & 0xFF00) >> 8);
 12772  0449  083E               	movf	StdS_ManageStdServices@DieTemp+1,w
 12773  044A  00B7               	movwf	??_StdS_ManageStdServices
 12774  044B  0837               	movf	??_StdS_ManageStdServices,w
 12775  044C  0024               	movlb	4	; select bank4
 12776  044D  00A0               	movwf	_RepBuffer^(0+512)
 12777                           
 12778                           ;std_ser.c: 252: RepBuffer[1] = (DieTemp & 0x00FF);
 12779  044E  0020               	movlb	0	; select bank0
 12780  044F  083D               	movf	StdS_ManageStdServices@DieTemp,w
 12781  0450  00B7               	movwf	??_StdS_ManageStdServices
 12782  0451  0837               	movf	??_StdS_ManageStdServices,w
 12783  0452  0024               	movlb	4	; select bank4
 12784  0453  00A1               	movwf	(_RepBuffer^(0+512)+1)
 12785                           
 12786                           ;std_ser.c: 254: RepBufferLen = ((UINT8)(2));
 12787  0454  3002               	movlw	2
 12788  0455  0020               	movlb	0	; select bank0
 12789  0456  00B7               	movwf	??_StdS_ManageStdServices
 12790  0457  0837               	movf	??_StdS_ManageStdServices,w
 12791  0458  00F7               	movwf	_RepBufferLen
 12792                           
 12793                           ;std_ser.c: 256: GenerateEvt(&I2cReplyPacketReady);
 12794  0459  3078               	movlw	low _I2cReplyPacketReady
 12795  045A  00A0               	movwf	GenerateEvt@Event
 12796  045B  3000               	movlw	high _I2cReplyPacketReady
 12797  045C  00A1               	movwf	GenerateEvt@Event+1
 12798  045D  3195  256B         	fcall	_GenerateEvt
 12799                           
 12800                           ;std_ser.c: 257: break;
 12801  045F  0008               	return
 12802  0460                     l4536:	
 12803                           ;std_ser.c: 259: case ((UINT8)(0x46)):
 12804                           
 12805                           
 12806                           ;std_ser.c: 261: DieTemp = GetDieTemperature();
 12807  0460  3194  2495  3183   	fcall	_GetDieTemperature
 12808  0463  0020               	movlb	0	; select bank0
 12809  0464  0826               	movf	?_GetDieTemperature+1,w
 12810  0465  00BE               	movwf	StdS_ManageStdServices@DieTemp+1
 12811  0466  0825               	movf	?_GetDieTemperature,w
 12812  0467  00BD               	movwf	StdS_ManageStdServices@DieTemp
 12813                           
 12814                           ;std_ser.c: 263: DieTemp = (DieTemp/8) - 40;
 12815  0468  083E               	movf	StdS_ManageStdServices@DieTemp+1,w
 12816  0469  00B8               	movwf	??_StdS_ManageStdServices+1
 12817  046A  083D               	movf	StdS_ManageStdServices@DieTemp,w
 12818  046B  00B7               	movwf	??_StdS_ManageStdServices
 12819  046C  36B8               	lsrf	??_StdS_ManageStdServices+1,f
 12820  046D  0CB7               	rrf	??_StdS_ManageStdServices,f
 12821  046E  36B8               	lsrf	??_StdS_ManageStdServices+1,f
 12822  046F  0CB7               	rrf	??_StdS_ManageStdServices,f
 12823  0470  36B8               	lsrf	??_StdS_ManageStdServices+1,f
 12824  0471  0CB7               	rrf	??_StdS_ManageStdServices,f
 12825  0472  0837               	movf	??_StdS_ManageStdServices,w
 12826  0473  3ED8               	addlw	216
 12827  0474  00BD               	movwf	StdS_ManageStdServices@DieTemp
 12828  0475  30FF               	movlw	255
 12829  0476  3D38               	addwfc	??_StdS_ManageStdServices+1,w
 12830  0477  00BE               	movwf	StdS_ManageStdServices@DieTemp+1
 12831                           
 12832                           ;std_ser.c: 265: utoa(DieTempStr,DieTemp,10);
 12833  0478  083E               	movf	StdS_ManageStdServices@DieTemp+1,w
 12834  0479  00AF               	movwf	utoa@val+1
 12835  047A  083D               	movf	StdS_ManageStdServices@DieTemp,w
 12836  047B  00AE               	movwf	utoa@val
 12837  047C  300A               	movlw	10
 12838  047D  00B0               	movwf	utoa@base
 12839  047E  3000               	movlw	0
 12840  047F  00B1               	movwf	utoa@base+1
 12841  0480  3039               	movlw	(low (StdS_ManageStdServices@DieTempStr| 0))& (0+255)
 12842  0481  3188  20A0  3183   	fcall	_utoa
 12843                           
 12844                           ;std_ser.c: 267: StringCopy(DieTempStr,RepBuffer,((UINT8)(2)));
 12845  0484  3039               	movlw	low StdS_ManageStdServices@DieTempStr
 12846  0485  0020               	movlb	0	; select bank0
 12847  0486  00A0               	movwf	StringCopy@SourceStr
 12848  0487  3000               	movlw	high StdS_ManageStdServices@DieTempStr
 12849  0488  00A1               	movwf	StringCopy@SourceStr+1
 12850  0489  3020               	movlw	(low (_RepBuffer| (0+512)))& (0+255)
 12851  048A  00B7               	movwf	??_StdS_ManageStdServices
 12852  048B  0837               	movf	??_StdS_ManageStdServices,w
 12853  048C  00A2               	movwf	StringCopy@DestStr
 12854  048D  3002               	movlw	2
 12855  048E  00B8               	movwf	??_StdS_ManageStdServices+1
 12856  048F  0838               	movf	??_StdS_ManageStdServices+1,w
 12857  0490  00A3               	movwf	StringCopy@Len
 12858  0491  3195  2500  3183   	fcall	_StringCopy
 12859                           
 12860                           ;std_ser.c: 269: RepBufferLen = ((UINT8)(2));
 12861  0494  3002               	movlw	2
 12862  0495  0020               	movlb	0	; select bank0
 12863  0496  00B7               	movwf	??_StdS_ManageStdServices
 12864  0497  0837               	movf	??_StdS_ManageStdServices,w
 12865  0498  00F7               	movwf	_RepBufferLen
 12866                           
 12867                           ;std_ser.c: 271: GenerateEvt(&I2cReplyPacketReady);
 12868  0499  3078               	movlw	low _I2cReplyPacketReady
 12869  049A  00A0               	movwf	GenerateEvt@Event
 12870  049B  3000               	movlw	high _I2cReplyPacketReady
 12871  049C  00A1               	movwf	GenerateEvt@Event+1
 12872  049D  3195  256B         	fcall	_GenerateEvt
 12873                           
 12874                           ;std_ser.c: 276: }
 12875                           
 12876                           ;std_ser.c: 275: break;
 12877                           
 12878                           ;std_ser.c: 274: default:
 12879                           
 12880                           ;std_ser.c: 272: break;
 12881  049F  0008               	return
 12882  04A0                     l4550:	
 12883  04A0  0026               	movlb	6	; select bank6
 12884  04A1  0820               	movf	_CmdBuffer^(0+768),w
 12885                           
 12886                           ; Switch size 1, requested type "space"
 12887                           ; Number of cases is 10, Range of values is 16 to 70
 12888                           ; switch strategies available:
 12889                           ; Name         Instructions Cycles
 12890                           ; simple_byte           31    16 (average)
 12891                           ; direct_byte          119     9 (fixed)
 12892                           ; jumptable            263     9 (fixed)
 12893                           ;	Chosen strategy is simple_byte
 12894  04A2  3A10               	xorlw	16	; case 16
 12895  04A3  1903               	skipnz
 12896  04A4  2BC5               	goto	l4494
 12897  04A5  3A30               	xorlw	48	; case 32
 12898  04A6  1903               	skipnz
 12899  04A7  2BE1               	goto	l4500
 12900  04A8  3A01               	xorlw	1	; case 33
 12901  04A9  1903               	skipnz
 12902  04AA  2BFD               	goto	l4506
 12903  04AB  3A03               	xorlw	3	; case 34
 12904  04AC  1903               	skipnz
 12905  04AD  2C19               	goto	l4512
 12906  04AE  3A12               	xorlw	18	; case 48
 12907  04AF  1903               	skipnz
 12908  04B0  2C35               	goto	l4518
 12909  04B1  3A01               	xorlw	1	; case 49
 12910  04B2  1903               	skipnz
 12911  04B3  2C38               	goto	l4520
 12912  04B4  3A70               	xorlw	112	; case 65
 12913  04B5  1903               	skipnz
 12914  04B6  2C3B               	goto	l4522
 12915  04B7  3A03               	xorlw	3	; case 66
 12916  04B8  1903               	skipnz
 12917  04B9  2C3E               	goto	l4524
 12918  04BA  3A07               	xorlw	7	; case 69
 12919  04BB  1903               	skipnz
 12920  04BC  2C41               	goto	l4526
 12921  04BD  3A03               	xorlw	3	; case 70
 12922  04BE  1903               	skipnz
 12923  04BF  2C60               	goto	l4536
 12924  04C0  2CC1               	goto	l654
 12925  04C1                     l654:	
 12926  04C1  0008               	return
 12927  04C2                     __end_of_StdS_ManageStdServices:	
 12928                           
 12929                           	psect	text54
 12930  08A0                     __ptext54:	
 12931 ;; *************** function _utoa *****************
 12932 ;; Defined at:
 12933 ;;		line 17 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\itoa.c"
 12934 ;; Parameters:    Size  Location     Type
 12935 ;;  buf             1    wreg     PTR unsigned char 
 12936 ;;		 -> StdS_ManageStdServices@DieTempStr(4), 
 12937 ;;  val             2   14[BANK0 ] unsigned int 
 12938 ;;  base            2   16[BANK0 ] int 
 12939 ;; Auto vars:     Size  Location     Type
 12940 ;;  buf             1   22[BANK0 ] PTR unsigned char 
 12941 ;;		 -> StdS_ManageStdServices@DieTempStr(4), 
 12942 ;;  v               2   19[BANK0 ] unsigned int 
 12943 ;;  c               1   21[BANK0 ] unsigned char 
 12944 ;; Return value:  Size  Location     Type
 12945 ;;                  1    wreg      PTR unsigned char 
 12946 ;; Registers used:
 12947 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12948 ;; Tracked objects:
 12949 ;;		On entry : 0/0
 12950 ;;		On exit  : 0/0
 12951 ;;		Unchanged: 0/0
 12952 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12953 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12954 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12955 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12956 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12957 ;;Total ram usage:        9 bytes
 12958 ;; Hardware stack levels used:    1
 12959 ;; Hardware stack levels required when called:    3
 12960 ;; This function calls:
 12961 ;;		___lwdiv
 12962 ;;		___lwmod
 12963 ;; This function is called by:
 12964 ;;		_StdS_ManageStdServices
 12965 ;; This function uses a non-reentrant model
 12966 ;;
 12967                           
 12968                           
 12969                           ;psect for function _utoa
 12970  08A0                     _utoa:	
 12971                           
 12972                           ;incstack = 0
 12973                           ; Regs used in _utoa: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 12974                           ;utoa@buf stored from wreg
 12975  08A0  0020               	movlb	0	; select bank0
 12976  08A1  00B6               	movwf	utoa@buf
 12977  08A2  082F               	movf	utoa@val+1,w
 12978  08A3  00B4               	movwf	utoa@v+1
 12979  08A4  082E               	movf	utoa@val,w
 12980  08A5  00B3               	movwf	utoa@v
 12981  08A6                     l4258:	
 12982  08A6  0831               	movf	utoa@base+1,w
 12983  08A7  00A1               	movwf	___lwdiv@divisor+1
 12984  08A8  0830               	movf	utoa@base,w
 12985  08A9  00A0               	movwf	___lwdiv@divisor
 12986  08AA  0834               	movf	utoa@v+1,w
 12987  08AB  00A3               	movwf	___lwdiv@dividend+1
 12988  08AC  0833               	movf	utoa@v,w
 12989  08AD  00A2               	movwf	___lwdiv@dividend
 12990  08AE  3196  269C  3188   	fcall	___lwdiv
 12991  08B1  0020               	movlb	0	; select bank0
 12992  08B2  0821               	movf	?___lwdiv+1,w
 12993  08B3  00B4               	movwf	utoa@v+1
 12994  08B4  0820               	movf	?___lwdiv,w
 12995  08B5  00B3               	movwf	utoa@v
 12996  08B6  3001               	movlw	1
 12997  08B7  00B2               	movwf	??_utoa
 12998  08B8  0832               	movf	??_utoa,w
 12999  08B9  07B6               	addwf	utoa@buf,f
 13000  08BA  0833               	movf	utoa@v,w
 13001  08BB  0434               	iorwf	utoa@v+1,w
 13002  08BC  1D03               	btfss	3,2
 13003  08BD  28A6               	goto	l4258
 13004  08BE  0836               	movf	utoa@buf,w
 13005  08BF  0086               	movwf	6
 13006  08C0  0187               	clrf	7
 13007  08C1  0181               	clrf	1
 13008  08C2  3001               	movlw	1
 13009  08C3  02B6               	subwf	utoa@buf,f
 13010  08C4                     l4268:	
 13011  08C4  0831               	movf	utoa@base+1,w
 13012  08C5  00A9               	movwf	___lwmod@divisor+1
 13013  08C6  0830               	movf	utoa@base,w
 13014  08C7  00A8               	movwf	___lwmod@divisor
 13015  08C8  082F               	movf	utoa@val+1,w
 13016  08C9  00AB               	movwf	___lwmod@dividend+1
 13017  08CA  082E               	movf	utoa@val,w
 13018  08CB  00AA               	movwf	___lwmod@dividend
 13019  08CC  3196  260F  3188   	fcall	___lwmod
 13020  08CF  0020               	movlb	0	; select bank0
 13021  08D0  0828               	movf	?___lwmod,w
 13022  08D1  00B2               	movwf	??_utoa
 13023  08D2  0832               	movf	??_utoa,w
 13024  08D3  00B5               	movwf	utoa@c
 13025  08D4  0831               	movf	utoa@base+1,w
 13026  08D5  00A1               	movwf	___lwdiv@divisor+1
 13027  08D6  0830               	movf	utoa@base,w
 13028  08D7  00A0               	movwf	___lwdiv@divisor
 13029  08D8  082F               	movf	utoa@val+1,w
 13030  08D9  00A3               	movwf	___lwdiv@dividend+1
 13031  08DA  082E               	movf	utoa@val,w
 13032  08DB  00A2               	movwf	___lwdiv@dividend
 13033  08DC  3196  269C  3188   	fcall	___lwdiv
 13034  08DF  0020               	movlb	0	; select bank0
 13035  08E0  0821               	movf	?___lwdiv+1,w
 13036  08E1  00AF               	movwf	utoa@val+1
 13037  08E2  0820               	movf	?___lwdiv,w
 13038  08E3  00AE               	movwf	utoa@val
 13039  08E4  300A               	movlw	10
 13040  08E5  0235               	subwf	utoa@c,w
 13041  08E6  1C03               	skipc
 13042  08E7  28EC               	goto	l1229
 13043  08E8  3007               	movlw	7
 13044  08E9  00B2               	movwf	??_utoa
 13045  08EA  0832               	movf	??_utoa,w
 13046  08EB  07B5               	addwf	utoa@c,f
 13047  08EC                     l1229:	
 13048  08EC  3030               	movlw	48
 13049  08ED  00B2               	movwf	??_utoa
 13050  08EE  0832               	movf	??_utoa,w
 13051  08EF  07B5               	addwf	utoa@c,f
 13052  08F0  0835               	movf	utoa@c,w
 13053  08F1  00B2               	movwf	??_utoa
 13054  08F2  0836               	movf	utoa@buf,w
 13055  08F3  0086               	movwf	6
 13056  08F4  0187               	clrf	7
 13057  08F5  0832               	movf	??_utoa,w
 13058  08F6  0081               	movwf	1
 13059  08F7  3001               	movlw	1
 13060  08F8  02B6               	subwf	utoa@buf,f
 13061  08F9  082E               	movf	utoa@val,w
 13062  08FA  042F               	iorwf	utoa@val+1,w
 13063  08FB  1D03               	btfss	3,2
 13064  08FC  28C4               	goto	l4268
 13065                           
 13066                           ;	Return value of _utoa is never used
 13067  08FD  3001               	movlw	1
 13068  08FE  00B2               	movwf	??_utoa
 13069  08FF  0832               	movf	??_utoa,w
 13070  0900  07B6               	addwf	utoa@buf,f
 13071  0901  0008               	return
 13072  0902                     __end_of_utoa:	
 13073                           
 13074                           	psect	text55
 13075  160F                     __ptext55:	
 13076 ;; *************** function ___lwmod *****************
 13077 ;; Defined at:
 13078 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\lwmod.c"
 13079 ;; Parameters:    Size  Location     Type
 13080 ;;  divisor         2    8[BANK0 ] unsigned int 
 13081 ;;  dividend        2   10[BANK0 ] unsigned int 
 13082 ;; Auto vars:     Size  Location     Type
 13083 ;;  counter         1   13[BANK0 ] unsigned char 
 13084 ;; Return value:  Size  Location     Type
 13085 ;;                  2    8[BANK0 ] unsigned int 
 13086 ;; Registers used:
 13087 ;;		wreg, status,2, status,0
 13088 ;; Tracked objects:
 13089 ;;		On entry : 0/0
 13090 ;;		On exit  : 0/0
 13091 ;;		Unchanged: 0/0
 13092 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13093 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13094 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13095 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13096 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13097 ;;Total ram usage:        6 bytes
 13098 ;; Hardware stack levels used:    1
 13099 ;; Hardware stack levels required when called:    2
 13100 ;; This function calls:
 13101 ;;		Nothing
 13102 ;; This function is called by:
 13103 ;;		_sprintf
 13104 ;;		_utoa
 13105 ;; This function uses a non-reentrant model
 13106 ;;
 13107                           
 13108                           
 13109                           ;psect for function ___lwmod
 13110  160F                     ___lwmod:	
 13111                           
 13112                           ;incstack = 0
 13113                           ; Regs used in ___lwmod: [wreg+status,2+status,0]
 13114  160F  0020               	movlb	0	; select bank0
 13115  1610  0828               	movf	___lwmod@divisor,w
 13116  1611  0429               	iorwf	___lwmod@divisor+1,w
 13117  1612  1903               	btfsc	3,2
 13118  1613  2E37               	goto	l4200
 13119  1614  01AD               	clrf	___lwmod@counter
 13120  1615  0AAD               	incf	___lwmod@counter,f
 13121  1616                     l4190:	
 13122  1616  1BA9               	btfsc	___lwmod@divisor+1,7
 13123  1617  2E22               	goto	l4192
 13124  1618  3001               	movlw	1
 13125  1619                     u4275:	
 13126  1619  35A8               	lslf	___lwmod@divisor,f
 13127  161A  0DA9               	rlf	___lwmod@divisor+1,f
 13128  161B  0B89               	decfsz	9,f
 13129  161C  2E19               	goto	u4275
 13130  161D  3001               	movlw	1
 13131  161E  00AC               	movwf	??___lwmod
 13132  161F  082C               	movf	??___lwmod,w
 13133  1620  07AD               	addwf	___lwmod@counter,f
 13134  1621  2E16               	goto	l4190
 13135  1622                     l4192:	
 13136  1622  0829               	movf	___lwmod@divisor+1,w
 13137  1623  022B               	subwf	___lwmod@dividend+1,w
 13138  1624  1D03               	skipz
 13139  1625  2E28               	goto	u4295
 13140  1626  0828               	movf	___lwmod@divisor,w
 13141  1627  022A               	subwf	___lwmod@dividend,w
 13142  1628                     u4295:	
 13143  1628  1C03               	skipc
 13144  1629  2E2E               	goto	l4196
 13145  162A  0828               	movf	___lwmod@divisor,w
 13146  162B  02AA               	subwf	___lwmod@dividend,f
 13147  162C  0829               	movf	___lwmod@divisor+1,w
 13148  162D  3BAB               	subwfb	___lwmod@dividend+1,f
 13149  162E                     l4196:	
 13150  162E  3001               	movlw	1
 13151  162F                     u4305:	
 13152  162F  36A9               	lsrf	___lwmod@divisor+1,f
 13153  1630  0CA8               	rrf	___lwmod@divisor,f
 13154  1631  0B89               	decfsz	9,f
 13155  1632  2E2F               	goto	u4305
 13156  1633  3001               	movlw	1
 13157  1634  02AD               	subwf	___lwmod@counter,f
 13158  1635  1D03               	btfss	3,2
 13159  1636  2E22               	goto	l4192
 13160  1637                     l4200:	
 13161  1637  082B               	movf	___lwmod@dividend+1,w
 13162  1638  00A9               	movwf	?___lwmod+1
 13163  1639  082A               	movf	___lwmod@dividend,w
 13164  163A  00A8               	movwf	?___lwmod
 13165  163B  0008               	return
 13166  163C                     __end_of___lwmod:	
 13167                           
 13168                           	psect	text56
 13169  169C                     __ptext56:	
 13170 ;; *************** function ___lwdiv *****************
 13171 ;; Defined at:
 13172 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\lwdiv.c"
 13173 ;; Parameters:    Size  Location     Type
 13174 ;;  divisor         2    0[BANK0 ] unsigned int 
 13175 ;;  dividend        2    2[BANK0 ] unsigned int 
 13176 ;; Auto vars:     Size  Location     Type
 13177 ;;  quotient        2    6[BANK0 ] unsigned int 
 13178 ;;  counter         1    5[BANK0 ] unsigned char 
 13179 ;; Return value:  Size  Location     Type
 13180 ;;                  2    0[BANK0 ] unsigned int 
 13181 ;; Registers used:
 13182 ;;		wreg, status,2, status,0
 13183 ;; Tracked objects:
 13184 ;;		On entry : 0/0
 13185 ;;		On exit  : 0/0
 13186 ;;		Unchanged: 0/0
 13187 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13188 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13189 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13190 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13191 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13192 ;;Total ram usage:        8 bytes
 13193 ;; Hardware stack levels used:    1
 13194 ;; Hardware stack levels required when called:    2
 13195 ;; This function calls:
 13196 ;;		Nothing
 13197 ;; This function is called by:
 13198 ;;		_GetTemperature
 13199 ;;		_sprintf
 13200 ;;		_utoa
 13201 ;; This function uses a non-reentrant model
 13202 ;;
 13203                           
 13204                           
 13205                           ;psect for function ___lwdiv
 13206  169C                     ___lwdiv:	
 13207                           
 13208                           ;incstack = 0
 13209                           ; Regs used in ___lwdiv: [wreg+status,2+status,0]
 13210  169C  0020               	movlb	0	; select bank0
 13211  169D  01A6               	clrf	___lwdiv@quotient
 13212  169E  01A7               	clrf	___lwdiv@quotient+1
 13213  169F  0820               	movf	___lwdiv@divisor,w
 13214  16A0  0421               	iorwf	___lwdiv@divisor+1,w
 13215  16A1  1903               	btfsc	3,2
 13216  16A2  2ECC               	goto	l4178
 13217  16A3  01A5               	clrf	___lwdiv@counter
 13218  16A4  0AA5               	incf	___lwdiv@counter,f
 13219  16A5                     l4166:	
 13220  16A5  1BA1               	btfsc	___lwdiv@divisor+1,7
 13221  16A6  2EB1               	goto	l4168
 13222  16A7  3001               	movlw	1
 13223  16A8                     u4205:	
 13224  16A8  35A0               	lslf	___lwdiv@divisor,f
 13225  16A9  0DA1               	rlf	___lwdiv@divisor+1,f
 13226  16AA  0B89               	decfsz	9,f
 13227  16AB  2EA8               	goto	u4205
 13228  16AC  3001               	movlw	1
 13229  16AD  00A4               	movwf	??___lwdiv
 13230  16AE  0824               	movf	??___lwdiv,w
 13231  16AF  07A5               	addwf	___lwdiv@counter,f
 13232  16B0  2EA5               	goto	l4166
 13233  16B1                     l4168:	
 13234  16B1  3001               	movlw	1
 13235  16B2                     u4225:	
 13236  16B2  35A6               	lslf	___lwdiv@quotient,f
 13237  16B3  0DA7               	rlf	___lwdiv@quotient+1,f
 13238  16B4  0B89               	decfsz	9,f
 13239  16B5  2EB2               	goto	u4225
 13240  16B6  0821               	movf	___lwdiv@divisor+1,w
 13241  16B7  0223               	subwf	___lwdiv@dividend+1,w
 13242  16B8  1D03               	skipz
 13243  16B9  2EBC               	goto	u4235
 13244  16BA  0820               	movf	___lwdiv@divisor,w
 13245  16BB  0222               	subwf	___lwdiv@dividend,w
 13246  16BC                     u4235:	
 13247  16BC  1C03               	skipc
 13248  16BD  2EC3               	goto	l4174
 13249  16BE  0820               	movf	___lwdiv@divisor,w
 13250  16BF  02A2               	subwf	___lwdiv@dividend,f
 13251  16C0  0821               	movf	___lwdiv@divisor+1,w
 13252  16C1  3BA3               	subwfb	___lwdiv@dividend+1,f
 13253  16C2  1426               	bsf	___lwdiv@quotient,0
 13254  16C3                     l4174:	
 13255  16C3  3001               	movlw	1
 13256  16C4                     u4245:	
 13257  16C4  36A1               	lsrf	___lwdiv@divisor+1,f
 13258  16C5  0CA0               	rrf	___lwdiv@divisor,f
 13259  16C6  0B89               	decfsz	9,f
 13260  16C7  2EC4               	goto	u4245
 13261  16C8  3001               	movlw	1
 13262  16C9  02A5               	subwf	___lwdiv@counter,f
 13263  16CA  1D03               	btfss	3,2
 13264  16CB  2EB1               	goto	l4168
 13265  16CC                     l4178:	
 13266  16CC  0827               	movf	___lwdiv@quotient+1,w
 13267  16CD  00A1               	movwf	?___lwdiv+1
 13268  16CE  0826               	movf	___lwdiv@quotient,w
 13269  16CF  00A0               	movwf	?___lwdiv
 13270  16D0  0008               	return
 13271  16D1                     __end_of___lwdiv:	
 13272                           
 13273                           	psect	text57
 13274  136A                     __ptext57:	
 13275 ;; *************** function _UpdateLebBlinkSts *****************
 13276 ;; Defined at:
 13277 ;;		line 75 in file "../../../../../Framework/MercuryFwk/Source/c/03_Sml/02_Ssl/std_ser.c"
 13278 ;; Parameters:    Size  Location     Type
 13279 ;;		None
 13280 ;; Auto vars:     Size  Location     Type
 13281 ;;		None
 13282 ;; Return value:  Size  Location     Type
 13283 ;;                  1    wreg      void 
 13284 ;; Registers used:
 13285 ;;		wreg, status,2, status,0
 13286 ;; Tracked objects:
 13287 ;;		On entry : 0/0
 13288 ;;		On exit  : 0/0
 13289 ;;		Unchanged: 0/0
 13290 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13291 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13292 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13293 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13294 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13295 ;;Total ram usage:        0 bytes
 13296 ;; Hardware stack levels used:    1
 13297 ;; Hardware stack levels required when called:    2
 13298 ;; This function calls:
 13299 ;;		Nothing
 13300 ;; This function is called by:
 13301 ;;		_StdS_ManageStdServices
 13302 ;; This function uses a non-reentrant model
 13303 ;;
 13304                           
 13305                           
 13306                           ;psect for function _UpdateLebBlinkSts
 13307  136A                     _UpdateLebBlinkSts:	
 13308                           
 13309                           ;std_ser.c: 78: if (CmdBuffer[((UINT8)(1))] == ((UINT8)(1)))
 13310                           
 13311                           ;incstack = 0
 13312                           ; Regs used in _UpdateLebBlinkSts: [wreg+status,2+status,0]
 13313  136A  0026               	movlb	6	; select bank6
 13314  136B  0321               	decf	(_CmdBuffer^(0+768)+1),w
 13315  136C  1D03               	btfss	3,2
 13316  136D  2B72               	goto	l4230
 13317                           
 13318                           ;std_ser.c: 79: {
 13319                           ;std_ser.c: 80: LedBlinkSts = ((UINT8)(1));
 13320  136E  0021               	movlb	1	; select bank1
 13321  136F  01EE               	clrf	_LedBlinkSts^(0+128)
 13322  1370  0AEE               	incf	_LedBlinkSts^(0+128),f
 13323                           
 13324                           ;std_ser.c: 81: }
 13325  1371  0008               	return
 13326  1372                     l4230:	
 13327                           
 13328                           ;std_ser.c: 82: else
 13329                           ;std_ser.c: 83: {
 13330                           ;std_ser.c: 84: LedBlinkSts = ((UINT8)(0));
 13331  1372  0021               	movlb	1	; select bank1
 13332  1373  01EE               	clrf	_LedBlinkSts^(0+128)
 13333  1374  0008               	return
 13334  1375                     __end_of_UpdateLebBlinkSts:	
 13335                           
 13336                           	psect	text58
 13337  1500                     __ptext58:	
 13338 ;; *************** function _StringCopy *****************
 13339 ;; Defined at:
 13340 ;;		line 104 in file "../../../../../Framework/MercuryFwk/Source/c/03_Sml/02_Ssl/sf.c"
 13341 ;; Parameters:    Size  Location     Type
 13342 ;;  SourceStr       2    0[BANK0 ] PTR unsigned char 
 13343 ;;		 -> StdS_ManageStdServices@DieTempStr(4), STR_5(9), STR_4(9), STR_3(6), 
 13344 ;;		 -> STR_2(5), 
 13345 ;;  DestStr         1    2[BANK0 ] PTR unsigned char 
 13346 ;;		 -> RepBuffer(80), 
 13347 ;;  Len             1    3[BANK0 ] unsigned char 
 13348 ;; Auto vars:     Size  Location     Type
 13349 ;;  Index           1    8[BANK0 ] unsigned char 
 13350 ;; Return value:  Size  Location     Type
 13351 ;;                  1    wreg      void 
 13352 ;; Registers used:
 13353 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath
 13354 ;; Tracked objects:
 13355 ;;		On entry : 0/0
 13356 ;;		On exit  : 0/0
 13357 ;;		Unchanged: 0/0
 13358 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13359 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13360 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13361 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13362 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13363 ;;Total ram usage:        9 bytes
 13364 ;; Hardware stack levels used:    1
 13365 ;; Hardware stack levels required when called:    2
 13366 ;; This function calls:
 13367 ;;		Nothing
 13368 ;; This function is called by:
 13369 ;;		_StdS_ManageStdServices
 13370 ;; This function uses a non-reentrant model
 13371 ;;
 13372                           
 13373                           
 13374                           ;psect for function _StringCopy
 13375  1500                     _StringCopy:	
 13376                           
 13377                           ;sf.c: 106: UINT8 Index = 0;
 13378                           
 13379                           ;incstack = 0
 13380                           ; Regs used in _StringCopy: [wreg-fsr1h+status,2+status,0+pclath]
 13381  1500  0020               	movlb	0	; select bank0
 13382  1501  01A8               	clrf	StringCopy@Index
 13383                           
 13384                           ;sf.c: 109: for (Index = 0; Index < Len; Index++)
 13385  1502  01A8               	clrf	StringCopy@Index
 13386  1503                     l4224:	
 13387  1503  0823               	movf	StringCopy@Len,w
 13388  1504  0228               	subwf	StringCopy@Index,w
 13389  1505  1803               	btfsc	3,0
 13390  1506  0008               	return
 13391                           
 13392                           ;sf.c: 110: {
 13393                           ;sf.c: 111: DestStr[Index] = SourceStr[Index];
 13394  1507  0821               	movf	StringCopy@SourceStr+1,w
 13395  1508  00A5               	movwf	??_StringCopy+1
 13396  1509  0820               	movf	StringCopy@SourceStr,w
 13397  150A  00A4               	movwf	??_StringCopy
 13398  150B  0828               	movf	StringCopy@Index,w
 13399  150C  0724               	addwf	??_StringCopy,w
 13400  150D  0084               	movwf	4
 13401  150E  0825               	movf	??_StringCopy+1,w
 13402  150F  1803               	skipnc
 13403  1510  0A25               	incf	??_StringCopy+1,w
 13404  1511  0085               	movwf	5
 13405  1512  0800               	movf	0,w	;code access
 13406  1513  00A6               	movwf	??_StringCopy+2
 13407  1514  0828               	movf	StringCopy@Index,w
 13408  1515  0722               	addwf	StringCopy@DestStr,w
 13409  1516  00A7               	movwf	??_StringCopy+3
 13410  1517  0827               	movf	??_StringCopy+3,w
 13411  1518  0086               	movwf	6
 13412  1519  3002               	movlw	2	; select bank4/5
 13413  151A  0087               	movwf	7
 13414  151B  0826               	movf	??_StringCopy+2,w
 13415  151C  0081               	movwf	1
 13416  151D  3001               	movlw	1
 13417  151E  00A4               	movwf	??_StringCopy
 13418  151F  0824               	movf	??_StringCopy,w
 13419  1520  07A8               	addwf	StringCopy@Index,f
 13420  1521  2D03               	goto	l4224
 13421  1522                     __end_of_StringCopy:	
 13422                           
 13423                           	psect	text59
 13424  13AE                     __ptext59:	
 13425 ;; *************** function _LowPowerMode *****************
 13426 ;; Defined at:
 13427 ;;		line 131 in file "../../../../../Framework/MercuryFwk/Source/c/03_Sml/02_Ssl/std_ser.c"
 13428 ;; Parameters:    Size  Location     Type
 13429 ;;		None
 13430 ;; Auto vars:     Size  Location     Type
 13431 ;;		None
 13432 ;; Return value:  Size  Location     Type
 13433 ;;                  1    wreg      void 
 13434 ;; Registers used:
 13435 ;;		wreg, status,2, status,0, pclath, cstack
 13436 ;; Tracked objects:
 13437 ;;		On entry : 0/0
 13438 ;;		On exit  : 0/0
 13439 ;;		Unchanged: 0/0
 13440 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13441 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13442 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13443 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13444 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13445 ;;Total ram usage:        0 bytes
 13446 ;; Hardware stack levels used:    1
 13447 ;; Hardware stack levels required when called:    3
 13448 ;; This function calls:
 13449 ;;		_Mcu_SetWdgSts
 13450 ;; This function is called by:
 13451 ;;		_StdS_ManageStdServices
 13452 ;; This function uses a non-reentrant model
 13453 ;;
 13454                           
 13455                           
 13456                           ;psect for function _LowPowerMode
 13457  13AE                     _LowPowerMode:	
 13458                           
 13459                           ;std_ser.c: 134: LATA = 0x00;
 13460                           
 13461                           ;incstack = 0
 13462                           ; Regs used in _LowPowerMode: [wreg+status,2+status,0+pclath+cstack]
 13463  13AE  0022               	movlb	2	; select bank2
 13464  13AF  018C               	clrf	12	;volatile
 13465                           
 13466                           ;std_ser.c: 136: LATB = 0x00;
 13467  13B0  018D               	clrf	13	;volatile
 13468                           
 13469                           ;std_ser.c: 138: LATC = 0x00;
 13470  13B1  018E               	clrf	14	;volatile
 13471                           
 13472                           ;std_ser.c: 140: Mcu_SetWdgSts(((UINT8)(0)));
 13473  13B2  3000               	movlw	0
 13474  13B3  3193  232A  3193   	fcall	_Mcu_SetWdgSts
 13475  13B6  0063               	sleep	;# 
 13476                           
 13477                           ;std_ser.c: 147: Mcu_SetWdgSts(((UINT8)(1)));
 13478  13B7  3001               	movlw	1
 13479  13B8  3193  232A         	fcall	_Mcu_SetWdgSts
 13480  13BA  0008               	return
 13481  13BB                     __end_of_LowPowerMode:	
 13482                           
 13483                           	psect	text60
 13484  132A                     __ptext60:	
 13485 ;; *************** function _Mcu_SetWdgSts *****************
 13486 ;; Defined at:
 13487 ;;		line 211 in file "../../../../../Framework/MercuryFwk/Source/c/01_Hal/02_Drv/mcu_drv.c"
 13488 ;; Parameters:    Size  Location     Type
 13489 ;;  WdgSts          1    wreg     unsigned char 
 13490 ;; Auto vars:     Size  Location     Type
 13491 ;;  WdgSts          1    0[BANK0 ] unsigned char 
 13492 ;; Return value:  Size  Location     Type
 13493 ;;                  1    wreg      void 
 13494 ;; Registers used:
 13495 ;;		wreg, status,0
 13496 ;; Tracked objects:
 13497 ;;		On entry : 0/0
 13498 ;;		On exit  : 0/0
 13499 ;;		Unchanged: 0/0
 13500 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13501 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13502 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13503 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13504 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13505 ;;Total ram usage:        1 bytes
 13506 ;; Hardware stack levels used:    1
 13507 ;; Hardware stack levels required when called:    2
 13508 ;; This function calls:
 13509 ;;		Nothing
 13510 ;; This function is called by:
 13511 ;;		_LowPowerMode
 13512 ;;		_Wdg_MainTask
 13513 ;; This function uses a non-reentrant model
 13514 ;;
 13515                           
 13516                           
 13517                           ;psect for function _Mcu_SetWdgSts
 13518  132A                     _Mcu_SetWdgSts:	
 13519                           
 13520                           ;incstack = 0
 13521                           ; Regs used in _Mcu_SetWdgSts: [wreg+status,0]
 13522                           ;Mcu_SetWdgSts@WdgSts stored from wreg
 13523  132A  0020               	movlb	0	; select bank0
 13524  132B  00A0               	movwf	Mcu_SetWdgSts@WdgSts
 13525                           
 13526                           ;mcu_drv.c: 214: WDTCONbits.SWDTEN = WdgSts;
 13527  132C  0C20               	rrf	Mcu_SetWdgSts@WdgSts,w
 13528  132D  0021               	movlb	1	; select bank1
 13529  132E  1C03               	skipc
 13530  132F  1017               	bcf	23,0	;volatile
 13531  1330  1803               	skipnc
 13532  1331  1417               	bsf	23,0	;volatile
 13533  1332  0008               	return
 13534  1333                     __end_of_Mcu_SetWdgSts:	
 13535                           
 13536                           	psect	text61
 13537  1495                     __ptext61:	
 13538 ;; *************** function _GetDieTemperature *****************
 13539 ;; Defined at:
 13540 ;;		line 158 in file "../../../../../Framework/MercuryFwk/Source/c/03_Sml/02_Ssl/std_ser.c"
 13541 ;; Parameters:    Size  Location     Type
 13542 ;;		None
 13543 ;; Auto vars:     Size  Location     Type
 13544 ;;  DieTempRes      2    7[BANK0 ] unsigned short 
 13545 ;; Return value:  Size  Location     Type
 13546 ;;                  2    5[BANK0 ] unsigned short 
 13547 ;; Registers used:
 13548 ;;		wreg, status,2, status,0, pclath, cstack
 13549 ;; Tracked objects:
 13550 ;;		On entry : 0/0
 13551 ;;		On exit  : 0/0
 13552 ;;		Unchanged: 0/0
 13553 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13554 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13555 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13556 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13557 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13558 ;;Total ram usage:        4 bytes
 13559 ;; Hardware stack levels used:    1
 13560 ;; Hardware stack levels required when called:    3
 13561 ;; This function calls:
 13562 ;;		_Adc_GetConvResult
 13563 ;;		_Adc_GetConvSts
 13564 ;;		_Adc_SelectChannel
 13565 ;;		_Adc_StartConversion
 13566 ;; This function is called by:
 13567 ;;		_StdS_ManageStdServices
 13568 ;; This function uses a non-reentrant model
 13569 ;;
 13570                           
 13571                           
 13572                           ;psect for function _GetDieTemperature
 13573  1495                     _GetDieTemperature:	
 13574                           
 13575                           ;std_ser.c: 160: UINT16 DieTempRes;
 13576                           ;std_ser.c: 163: Adc_SelectChannel(((UINT8)(29)));
 13577                           
 13578                           ;incstack = 0
 13579                           ; Regs used in _GetDieTemperature: [wreg+status,2+status,0+pclath+cstack]
 13580  1495  301D               	movlw	29
 13581  1496  3193  23C9  3194   	fcall	_Adc_SelectChannel
 13582                           
 13583                           ;std_ser.c: 165: Adc_StartConversion();
 13584  1499  3193  230A  3194   	fcall	_Adc_StartConversion
 13585  149C                     l4248:	
 13586                           ;std_ser.c: 167: while (Adc_GetConvSts() == AdcConvInProgress);
 13587                           
 13588  149C  3187  27FB  3194   	fcall	_Adc_GetConvSts
 13589  149F  3A00               	xorlw	0
 13590  14A0  1903               	skipnz
 13591  14A1  2C9C               	goto	l4248
 13592                           
 13593                           ;std_ser.c: 169: DieTempRes = Adc_GetConvResult();
 13594  14A2  3193  23E7         	fcall	_Adc_GetConvResult
 13595  14A4  0020               	movlb	0	; select bank0
 13596  14A5  0821               	movf	?_Adc_GetConvResult+1,w
 13597  14A6  00A8               	movwf	GetDieTemperature@DieTempRes+1
 13598  14A7  0820               	movf	?_Adc_GetConvResult,w
 13599  14A8  00A7               	movwf	GetDieTemperature@DieTempRes
 13600                           
 13601                           ;std_ser.c: 171: return DieTempRes;
 13602  14A9  0828               	movf	GetDieTemperature@DieTempRes+1,w
 13603  14AA  00A6               	movwf	?_GetDieTemperature+1
 13604  14AB  0827               	movf	GetDieTemperature@DieTempRes,w
 13605  14AC  00A5               	movwf	?_GetDieTemperature
 13606  14AD  0008               	return
 13607  14AE                     __end_of_GetDieTemperature:	
 13608                           
 13609                           	psect	text62
 13610  130A                     __ptext62:	
 13611 ;; *************** function _Adc_StartConversion *****************
 13612 ;; Defined at:
 13613 ;;		line 144 in file "../../../../../Framework/MercuryFwk/Source/c/01_Hal/02_Drv/adc_drv.c"
 13614 ;; Parameters:    Size  Location     Type
 13615 ;;		None
 13616 ;; Auto vars:     Size  Location     Type
 13617 ;;		None
 13618 ;; Return value:  Size  Location     Type
 13619 ;;                  1    wreg      void 
 13620 ;; Registers used:
 13621 ;;		None
 13622 ;; Tracked objects:
 13623 ;;		On entry : 0/0
 13624 ;;		On exit  : 0/0
 13625 ;;		Unchanged: 0/0
 13626 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13627 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13628 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13629 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13630 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13631 ;;Total ram usage:        0 bytes
 13632 ;; Hardware stack levels used:    1
 13633 ;; Hardware stack levels required when called:    2
 13634 ;; This function calls:
 13635 ;;		Nothing
 13636 ;; This function is called by:
 13637 ;;		_GetDieTemperature
 13638 ;;		_GetTemperature
 13639 ;; This function uses a non-reentrant model
 13640 ;;
 13641                           
 13642                           
 13643                           ;psect for function _Adc_StartConversion
 13644  130A                     _Adc_StartConversion:	
 13645                           
 13646                           ;adc_drv.c: 147: ADCON0bits.GO_nDONE = ((UINT8)(1));
 13647                           
 13648                           ;incstack = 0
 13649                           ; Regs used in _Adc_StartConversion: []
 13650  130A  0021               	movlb	1	; select bank1
 13651  130B  149D               	bsf	29,1	;volatile
 13652  130C  0008               	return
 13653  130D                     __end_of_Adc_StartConversion:	
 13654                           
 13655                           	psect	text63
 13656  13C9                     __ptext63:	
 13657 ;; *************** function _Adc_SelectChannel *****************
 13658 ;; Defined at:
 13659 ;;		line 130 in file "../../../../../Framework/MercuryFwk/Source/c/01_Hal/02_Drv/adc_drv.c"
 13660 ;; Parameters:    Size  Location     Type
 13661 ;;  SelCh           1    wreg     unsigned char 
 13662 ;; Auto vars:     Size  Location     Type
 13663 ;;  SelCh           1    1[BANK0 ] unsigned char 
 13664 ;; Return value:  Size  Location     Type
 13665 ;;                  1    wreg      void 
 13666 ;; Registers used:
 13667 ;;		wreg, status,2, status,0
 13668 ;; Tracked objects:
 13669 ;;		On entry : 0/0
 13670 ;;		On exit  : 0/0
 13671 ;;		Unchanged: 0/0
 13672 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13673 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13674 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13675 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13676 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13677 ;;Total ram usage:        2 bytes
 13678 ;; Hardware stack levels used:    1
 13679 ;; Hardware stack levels required when called:    2
 13680 ;; This function calls:
 13681 ;;		Nothing
 13682 ;; This function is called by:
 13683 ;;		_GetDieTemperature
 13684 ;;		_App_MainTask
 13685 ;; This function uses a non-reentrant model
 13686 ;;
 13687                           
 13688                           
 13689                           ;psect for function _Adc_SelectChannel
 13690  13C9                     _Adc_SelectChannel:	
 13691                           
 13692                           ;incstack = 0
 13693                           ; Regs used in _Adc_SelectChannel: [wreg+status,2+status,0]
 13694                           ;Adc_SelectChannel@SelCh stored from wreg
 13695  13C9  0020               	movlb	0	; select bank0
 13696  13CA  00A1               	movwf	Adc_SelectChannel@SelCh
 13697                           
 13698                           ;adc_drv.c: 133: ADCON0bits.CHS = SelCh;
 13699  13CB  0821               	movf	Adc_SelectChannel@SelCh,w
 13700  13CC  00A0               	movwf	??_Adc_SelectChannel
 13701  13CD  0DA0               	rlf	??_Adc_SelectChannel,f
 13702  13CE  0DA0               	rlf	??_Adc_SelectChannel,f
 13703  13CF  0021               	movlb	1	; select bank1
 13704  13D0  081D               	movf	29,w	;volatile
 13705  13D1  0020               	movlb	0	; select bank0
 13706  13D2  0620               	xorwf	??_Adc_SelectChannel,w
 13707  13D3  3983               	andlw	-125
 13708  13D4  0620               	xorwf	??_Adc_SelectChannel,w
 13709  13D5  0021               	movlb	1	; select bank1
 13710  13D6  009D               	movwf	29	;volatile
 13711  13D7  0008               	return
 13712  13D8                     __end_of_Adc_SelectChannel:	
 13713                           
 13714                           	psect	text64
 13715  07FB                     __ptext64:	
 13716 ;; *************** function _Adc_GetConvSts *****************
 13717 ;; Defined at:
 13718 ;;		line 158 in file "../../../../../Framework/MercuryFwk/Source/c/01_Hal/02_Drv/adc_drv.c"
 13719 ;; Parameters:    Size  Location     Type
 13720 ;;		None
 13721 ;; Auto vars:     Size  Location     Type
 13722 ;;		None
 13723 ;; Return value:  Size  Location     Type
 13724 ;;                  1    wreg      enum E3651
 13725 ;; Registers used:
 13726 ;;		wreg, status,2, status,0
 13727 ;; Tracked objects:
 13728 ;;		On entry : 0/0
 13729 ;;		On exit  : 0/0
 13730 ;;		Unchanged: 0/0
 13731 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13732 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13733 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13734 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13735 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13736 ;;Total ram usage:        0 bytes
 13737 ;; Hardware stack levels used:    1
 13738 ;; Hardware stack levels required when called:    2
 13739 ;; This function calls:
 13740 ;;		Nothing
 13741 ;; This function is called by:
 13742 ;;		_GetDieTemperature
 13743 ;;		_GetTemperature
 13744 ;; This function uses a non-reentrant model
 13745 ;;
 13746                           
 13747                           
 13748                           ;psect for function _Adc_GetConvSts
 13749  07FB                     _Adc_GetConvSts:	
 13750                           
 13751                           ;adc_drv.c: 161: return ((AdcConvStsType)(ADCON0bits.GO_nDONE));
 13752                           
 13753                           ;incstack = 0
 13754                           ; Regs used in _Adc_GetConvSts: [wreg+status,2+status,0]
 13755  07FB  0021               	movlb	1	; select bank1
 13756  07FC  0C1D               	rrf	29,w	;volatile
 13757  07FD  3901               	andlw	1
 13758  07FE  0008               	return
 13759  07FF                     __end_of_Adc_GetConvSts:	
 13760                           
 13761                           	psect	text65
 13762  13E7                     __ptext65:	
 13763 ;; *************** function _Adc_GetConvResult *****************
 13764 ;; Defined at:
 13765 ;;		line 172 in file "../../../../../Framework/MercuryFwk/Source/c/01_Hal/02_Drv/adc_drv.c"
 13766 ;; Parameters:    Size  Location     Type
 13767 ;;		None
 13768 ;; Auto vars:     Size  Location     Type
 13769 ;;  AdcResult       2    3[BANK0 ] unsigned short 
 13770 ;; Return value:  Size  Location     Type
 13771 ;;                  2    0[BANK0 ] unsigned short 
 13772 ;; Registers used:
 13773 ;;		wreg, status,2, status,0
 13774 ;; Tracked objects:
 13775 ;;		On entry : 0/0
 13776 ;;		On exit  : 0/0
 13777 ;;		Unchanged: 0/0
 13778 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13779 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13780 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13781 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13782 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13783 ;;Total ram usage:        5 bytes
 13784 ;; Hardware stack levels used:    1
 13785 ;; Hardware stack levels required when called:    2
 13786 ;; This function calls:
 13787 ;;		Nothing
 13788 ;; This function is called by:
 13789 ;;		_GetDieTemperature
 13790 ;;		_GetTemperature
 13791 ;; This function uses a non-reentrant model
 13792 ;;
 13793                           
 13794                           
 13795                           ;psect for function _Adc_GetConvResult
 13796  13E7                     _Adc_GetConvResult:	
 13797                           
 13798                           ;adc_drv.c: 174: UINT16 AdcResult;
 13799                           ;adc_drv.c: 177: AdcResult = (((ADRESH & 0x03) << 8) | ADRESL);
 13800                           
 13801                           ;incstack = 0
 13802                           ; Regs used in _Adc_GetConvResult: [wreg+status,2+status,0]
 13803  13E7  3003               	movlw	3
 13804  13E8  0021               	movlb	1	; select bank1
 13805  13E9  051C               	andwf	28,w	;volatile
 13806  13EA  0020               	movlb	0	; select bank0
 13807  13EB  00A2               	movwf	??_Adc_GetConvResult
 13808  13EC  0822               	movf	??_Adc_GetConvResult,w
 13809  13ED  00A4               	movwf	Adc_GetConvResult@AdcResult+1
 13810  13EE  0021               	movlb	1	; select bank1
 13811  13EF  081B               	movf	27,w	;volatile
 13812  13F0  0020               	movlb	0	; select bank0
 13813  13F1  00A3               	movwf	Adc_GetConvResult@AdcResult
 13814                           
 13815                           ;adc_drv.c: 179: return AdcResult;
 13816  13F2  0824               	movf	Adc_GetConvResult@AdcResult+1,w
 13817  13F3  00A1               	movwf	?_Adc_GetConvResult+1
 13818  13F4  0823               	movf	Adc_GetConvResult@AdcResult,w
 13819  13F5  00A0               	movwf	?_Adc_GetConvResult
 13820  13F6  0008               	return
 13821  13F7                     __end_of_Adc_GetConvResult:	
 13822                           
 13823                           	psect	text66
 13824  156B                     __ptext66:	
 13825 ;; *************** function _GenerateEvt *****************
 13826 ;; Defined at:
 13827 ;;		line 73 in file "../../../../../Framework/MercuryFwk/Source/c/02_Osl/os_ser.c"
 13828 ;; Parameters:    Size  Location     Type
 13829 ;;  Event           2    0[BANK0 ] PTR struct _EventStructu
 13830 ;;		 -> I2cReplyPacketReady(2), I2cWriteRequest(2), I2cSetAddress(2), I2cNewTxNotification(2), 
 13831 ;;		 -> I2cNewPacketNotification(2), 
 13832 ;; Auto vars:     Size  Location     Type
 13833 ;;  EventStatus     1    4[BANK0 ] enum E3629
 13834 ;; Return value:  Size  Location     Type
 13835 ;;                  1    wreg      enum E3625
 13836 ;; Registers used:
 13837 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 13838 ;; Tracked objects:
 13839 ;;		On entry : 0/0
 13840 ;;		On exit  : 0/0
 13841 ;;		Unchanged: 0/0
 13842 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13843 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13844 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13845 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13846 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13847 ;;Total ram usage:        5 bytes
 13848 ;; Hardware stack levels used:    1
 13849 ;; Hardware stack levels required when called:    2
 13850 ;; This function calls:
 13851 ;;		Nothing
 13852 ;; This function is called by:
 13853 ;;		_I2c_DataReceiveSm
 13854 ;;		_I2cSlv_I2cDrvHandle
 13855 ;;		_StdS_ManageStdServices
 13856 ;;		_ManageProtocol
 13857 ;;		_AppSm
 13858 ;; This function uses a non-reentrant model
 13859 ;;
 13860                           
 13861                           
 13862                           ;psect for function _GenerateEvt
 13863  156B                     _GenerateEvt:	
 13864                           
 13865                           ;os_ser.c: 76: EventStatusType EventStatus = EventIdle;
 13866                           
 13867                           ;incstack = 0
 13868                           ; Regs used in _GenerateEvt: [wreg+fsr1l+fsr1h+status,2+status,0]
 13869  156B  0020               	movlb	0	; select bank0
 13870  156C  01A4               	clrf	GenerateEvt@EventStatus
 13871                           
 13872                           ;os_ser.c: 78: if ((Event->EventOptions != ((UINT8)(2))) && (Event->EventOptions != ((UI
      +                          NT8)(3))))
 13873  156D  0820               	movf	GenerateEvt@Event,w
 13874  156E  0086               	movwf	6
 13875  156F  0821               	movf	GenerateEvt@Event+1,w
 13876  1570  0087               	movwf	7
 13877  1571  3002               	movlw	2
 13878  1572  0601               	xorwf	1,w
 13879  1573  1903               	btfsc	3,2
 13880  1574  2D8E               	goto	l4214
 13881  1575  0820               	movf	GenerateEvt@Event,w
 13882  1576  0086               	movwf	6
 13883  1577  0821               	movf	GenerateEvt@Event+1,w
 13884  1578  0087               	movwf	7
 13885  1579  3003               	movlw	3
 13886  157A  0601               	xorwf	1,w
 13887  157B  1903               	btfsc	3,2
 13888  157C  2D8E               	goto	l4214
 13889                           
 13890                           ;os_ser.c: 79: {
 13891                           ;os_ser.c: 81: Event->EventStatus = EventSent;
 13892  157D  0820               	movf	GenerateEvt@Event,w
 13893  157E  3E01               	addlw	1
 13894  157F  00A2               	movwf	??_GenerateEvt
 13895  1580  3000               	movlw	0
 13896  1581  3D21               	addwfc	GenerateEvt@Event+1,w
 13897  1582  00A3               	movwf	??_GenerateEvt+1
 13898  1583  0822               	movf	??_GenerateEvt,w
 13899  1584  0086               	movwf	6
 13900  1585  0823               	movf	??_GenerateEvt+1,w
 13901  1586  0087               	movwf	7
 13902  1587  3002               	movlw	2
 13903  1588  0081               	movwf	1
 13904                           
 13905                           ;os_ser.c: 83: EventStatus = EventSent;
 13906  1589  3002               	movlw	2
 13907  158A  00A2               	movwf	??_GenerateEvt
 13908  158B  0822               	movf	??_GenerateEvt,w
 13909  158C  00A4               	movwf	GenerateEvt@EventStatus
 13910                           
 13911                           ;os_ser.c: 84: }
 13912  158D  0008               	return
 13913  158E                     l4214:	
 13914                           
 13915                           ;os_ser.c: 85: else
 13916                           ;os_ser.c: 86: {
 13917                           ;os_ser.c: 88: EventStatus = EventNotSent;
 13918  158E  3003               	movlw	3
 13919  158F  00A2               	movwf	??_GenerateEvt
 13920  1590  0822               	movf	??_GenerateEvt,w
 13921  1591  00A4               	movwf	GenerateEvt@EventStatus
 13922  1592  0008               	return
 13923  1593                     __end_of_GenerateEvt:	
 13924                           ;os_ser.c: 89: }
 13925                           ;os_ser.c: 92: return(EventStatus);
 13926                           ;	Return value of _GenerateEvt is never used
 13927                           
 13928                           
 13929                           	psect	text67
 13930  1360                     __ptext67:	
 13931 ;; *************** function _ControlLedDirect *****************
 13932 ;; Defined at:
 13933 ;;		line 96 in file "../../../../../Framework/MercuryFwk/Source/c/03_Sml/02_Ssl/std_ser.c"
 13934 ;; Parameters:    Size  Location     Type
 13935 ;;		None
 13936 ;; Auto vars:     Size  Location     Type
 13937 ;;		None
 13938 ;; Return value:  Size  Location     Type
 13939 ;;                  1    wreg      void 
 13940 ;; Registers used:
 13941 ;;		wreg, status,2, status,0
 13942 ;; Tracked objects:
 13943 ;;		On entry : 0/0
 13944 ;;		On exit  : 0/0
 13945 ;;		Unchanged: 0/0
 13946 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13947 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13948 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13949 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13950 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13951 ;;Total ram usage:        0 bytes
 13952 ;; Hardware stack levels used:    1
 13953 ;; Hardware stack levels required when called:    2
 13954 ;; This function calls:
 13955 ;;		Nothing
 13956 ;; This function is called by:
 13957 ;;		_StdS_ManageStdServices
 13958 ;; This function uses a non-reentrant model
 13959 ;;
 13960                           
 13961                           
 13962                           ;psect for function _ControlLedDirect
 13963  1360                     _ControlLedDirect:	
 13964                           
 13965                           ;std_ser.c: 99: if (CmdBuffer[((UINT8)(1))] == ((UINT8)(1)))
 13966                           
 13967                           ;incstack = 0
 13968                           ; Regs used in _ControlLedDirect: [wreg+status,2+status,0]
 13969  1360  0026               	movlb	6	; select bank6
 13970  1361  0321               	decf	(_CmdBuffer^(0+768)+1),w
 13971  1362  1D03               	btfss	3,2
 13972  1363  2B67               	goto	l624
 13973                           
 13974                           ;std_ser.c: 100: {
 13975                           ;std_ser.c: 101: LATCbits.LATC2 = ((UINT8)(1));
 13976  1364  0022               	movlb	2	; select bank2
 13977  1365  150E               	bsf	14,2	;volatile
 13978                           
 13979                           ;std_ser.c: 102: }
 13980  1366  0008               	return
 13981  1367                     l624:	
 13982                           
 13983                           ;std_ser.c: 103: else
 13984                           ;std_ser.c: 104: {
 13985                           ;std_ser.c: 105: LATCbits.LATC2 = ((UINT8)(0));
 13986  1367  0022               	movlb	2	; select bank2
 13987  1368  110E               	bcf	14,2	;volatile
 13988  1369  0008               	return
 13989  136A                     __end_of_ControlLedDirect:	
 13990                           
 13991                           	psect	text68
 13992  1304                     __ptext68:	
 13993 ;; *************** function _BoardReset *****************
 13994 ;; Defined at:
 13995 ;;		line 117 in file "../../../../../Framework/MercuryFwk/Source/c/03_Sml/02_Ssl/std_ser.c"
 13996 ;; Parameters:    Size  Location     Type
 13997 ;;		None
 13998 ;; Auto vars:     Size  Location     Type
 13999 ;;		None
 14000 ;; Return value:  Size  Location     Type
 14001 ;;                  1    wreg      void 
 14002 ;; Registers used:
 14003 ;;		None
 14004 ;; Tracked objects:
 14005 ;;		On entry : 0/0
 14006 ;;		On exit  : 0/0
 14007 ;;		Unchanged: 0/0
 14008 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14009 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14010 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14011 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14012 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14013 ;;Total ram usage:        0 bytes
 14014 ;; Hardware stack levels used:    1
 14015 ;; Hardware stack levels required when called:    2
 14016 ;; This function calls:
 14017 ;;		Nothing
 14018 ;; This function is called by:
 14019 ;;		_StdS_ManageStdServices
 14020 ;; This function uses a non-reentrant model
 14021 ;;
 14022                           
 14023                           
 14024                           ;psect for function _BoardReset
 14025  1304                     _BoardReset:	
 14026                           
 14027                           ;incstack = 0
 14028                           ; Regs used in _BoardReset: []
 14029  1304  0001               	reset	;# 
 14030  1305  0008               	return
 14031  1306                     __end_of_BoardReset:	
 14032                           
 14033                           	psect	text69
 14034  15E3                     __ptext69:	
 14035 ;; *************** function _ReceiveEvt *****************
 14036 ;; Defined at:
 14037 ;;		line 103 in file "../../../../../Framework/MercuryFwk/Source/c/02_Osl/os_ser.c"
 14038 ;; Parameters:    Size  Location     Type
 14039 ;;  Event           2    0[BANK0 ] PTR struct _EventStructu
 14040 ;;		 -> I2cReplyPacketReady(2), I2cWriteRequest(2), I2cSetAddress(2), I2cNewTxNotification(2), 
 14041 ;;		 -> I2cNewPacketNotification(2), 
 14042 ;; Auto vars:     Size  Location     Type
 14043 ;;  EventStatus     1    4[BANK0 ] enum E3629
 14044 ;; Return value:  Size  Location     Type
 14045 ;;                  1    wreg      enum E3625
 14046 ;; Registers used:
 14047 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 14048 ;; Tracked objects:
 14049 ;;		On entry : 0/0
 14050 ;;		On exit  : 0/0
 14051 ;;		Unchanged: 0/0
 14052 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14053 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14054 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14055 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14056 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14057 ;;Total ram usage:        5 bytes
 14058 ;; Hardware stack levels used:    1
 14059 ;; Hardware stack levels required when called:    2
 14060 ;; This function calls:
 14061 ;;		Nothing
 14062 ;; This function is called by:
 14063 ;;		_I2c_DataReceiveSm
 14064 ;;		_I2cSlv_I2cDrvHandle
 14065 ;;		_ManageProtocol
 14066 ;; This function uses a non-reentrant model
 14067 ;;
 14068                           
 14069                           
 14070                           ;psect for function _ReceiveEvt
 14071  15E3                     _ReceiveEvt:	
 14072                           
 14073                           ;os_ser.c: 106: EventStatusType EventStatus = EventIdle;
 14074                           
 14075                           ;incstack = 0
 14076                           ; Regs used in _ReceiveEvt: [wreg+fsr1l+fsr1h+status,2+status,0]
 14077  15E3  0020               	movlb	0	; select bank0
 14078  15E4  01A4               	clrf	ReceiveEvt@EventStatus
 14079                           
 14080                           ;os_ser.c: 108: if ((Event->EventOptions != ((UINT8)(1))) && (Event->EventOptions != ((U
      +                          INT8)(3))))
 14081  15E5  0820               	movf	ReceiveEvt@Event,w
 14082  15E6  0086               	movwf	6
 14083  15E7  0821               	movf	ReceiveEvt@Event+1,w
 14084  15E8  0087               	movwf	7
 14085  15E9  0301               	decf	1,w
 14086  15EA  1903               	btfsc	3,2
 14087  15EB  2E0D               	goto	l4358
 14088  15EC  0820               	movf	ReceiveEvt@Event,w
 14089  15ED  0086               	movwf	6
 14090  15EE  0821               	movf	ReceiveEvt@Event+1,w
 14091  15EF  0087               	movwf	7
 14092  15F0  3003               	movlw	3
 14093  15F1  0601               	xorwf	1,w
 14094  15F2  1903               	btfsc	3,2
 14095  15F3  2E0D               	goto	l4358
 14096                           
 14097                           ;os_ser.c: 109: {
 14098                           ;os_ser.c: 111: if (Event->EventStatus == EventSent)
 14099  15F4  0820               	movf	ReceiveEvt@Event,w
 14100  15F5  0086               	movwf	6
 14101  15F6  0821               	movf	ReceiveEvt@Event+1,w
 14102  15F7  0087               	movwf	7
 14103  15F8  3141               	addfsr 1,1
 14104  15F9  3002               	movlw	2
 14105  15FA  0601               	xorwf	1,w
 14106  15FB  1D03               	btfss	3,2
 14107  15FC  2E0C               	goto	l4356
 14108                           
 14109                           ;os_ser.c: 112: {
 14110                           ;os_ser.c: 114: Event->EventStatus = EventReceived;
 14111  15FD  0820               	movf	ReceiveEvt@Event,w
 14112  15FE  3E01               	addlw	1
 14113  15FF  00A2               	movwf	??_ReceiveEvt
 14114  1600  3000               	movlw	0
 14115  1601  3D21               	addwfc	ReceiveEvt@Event+1,w
 14116  1602  00A3               	movwf	??_ReceiveEvt+1
 14117  1603  0822               	movf	??_ReceiveEvt,w
 14118  1604  0086               	movwf	6
 14119  1605  0823               	movf	??_ReceiveEvt+1,w
 14120  1606  0087               	movwf	7
 14121  1607  3001               	movlw	1
 14122  1608  0081               	movwf	1
 14123                           
 14124                           ;os_ser.c: 116: EventStatus = EventReceived;
 14125  1609  01A4               	clrf	ReceiveEvt@EventStatus
 14126  160A  0AA4               	incf	ReceiveEvt@EventStatus,f
 14127                           
 14128                           ;os_ser.c: 117: }
 14129  160B  2E0D               	goto	l4358
 14130  160C                     l4356:	
 14131                           
 14132                           ;os_ser.c: 118: else
 14133                           ;os_ser.c: 119: {
 14134                           ;os_ser.c: 121: EventStatus = EventIdle;
 14135  160C  01A4               	clrf	ReceiveEvt@EventStatus
 14136  160D                     l4358:	
 14137                           
 14138                           ;os_ser.c: 122: }
 14139                           ;os_ser.c: 123: }
 14140                           ;os_ser.c: 126: return(EventStatus);
 14141  160D  0824               	movf	ReceiveEvt@EventStatus,w
 14142  160E  0008               	return
 14143  160F                     __end_of_ReceiveEvt:	
 14144                           
 14145                           	psect	text70
 14146  16D1                     __ptext70:	
 14147 ;; *************** function _Adc_InitAdcModule *****************
 14148 ;; Defined at:
 14149 ;;		line 107 in file "../../../../../Framework/MercuryFwk/Source/c/01_Hal/02_Drv/adc_drv.c"
 14150 ;; Parameters:    Size  Location     Type
 14151 ;;  AdcConfig       1    wreg     PTR struct _AdcCfgType
 14152 ;;		 -> App_MainTask@AdcConfig(6), 
 14153 ;; Auto vars:     Size  Location     Type
 14154 ;;  AdcConfig       1    0[BANK0 ] PTR struct _AdcCfgType
 14155 ;;		 -> App_MainTask@AdcConfig(6), 
 14156 ;; Return value:  Size  Location     Type
 14157 ;;                  1    wreg      void 
 14158 ;; Registers used:
 14159 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 14160 ;; Tracked objects:
 14161 ;;		On entry : 0/0
 14162 ;;		On exit  : 0/0
 14163 ;;		Unchanged: 0/0
 14164 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14165 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14166 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14167 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14168 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14169 ;;Total ram usage:        1 bytes
 14170 ;; Hardware stack levels used:    1
 14171 ;; Hardware stack levels required when called:    2
 14172 ;; This function calls:
 14173 ;;		Nothing
 14174 ;; This function is called by:
 14175 ;;		_App_MainTask
 14176 ;; This function uses a non-reentrant model
 14177 ;;
 14178                           
 14179                           
 14180                           ;psect for function _Adc_InitAdcModule
 14181  16D1                     _Adc_InitAdcModule:	
 14182                           
 14183                           ;incstack = 0
 14184                           ; Regs used in _Adc_InitAdcModule: [wreg+fsr1l+fsr1h+status,2+status,0]
 14185                           ;Adc_InitAdcModule@AdcConfig stored from wreg
 14186  16D1  0020               	movlb	0	; select bank0
 14187  16D2  00A0               	movwf	Adc_InitAdcModule@AdcConfig
 14188                           
 14189                           ;adc_drv.c: 110: ADCON0bits.ADON = AdcConfig->AdcEnable;
 14190  16D3  0820               	movf	Adc_InitAdcModule@AdcConfig,w
 14191  16D4  0086               	movwf	6
 14192  16D5  0187               	clrf	7
 14193  16D6  0C01               	rrf	1,w
 14194  16D7  0021               	movlb	1	; select bank1
 14195  16D8  1C03               	skipc
 14196  16D9  101D               	bcf	29,0	;volatile
 14197  16DA  1803               	skipnc
 14198  16DB  141D               	bsf	29,0	;volatile
 14199                           
 14200                           ;adc_drv.c: 112: ADCON1bits.ADFM = AdcConfig->AdcResultFormat;
 14201  16DC  0020               	movlb	0	; select bank0
 14202  16DD  0A20               	incf	Adc_InitAdcModule@AdcConfig,w
 14203  16DE  0086               	movwf	6
 14204  16DF  0187               	clrf	7
 14205  16E0  0C01               	rrf	1,w
 14206  16E1  0021               	movlb	1	; select bank1
 14207  16E2  1C03               	skipc
 14208  16E3  139E               	bcf	30,7	;volatile
 14209  16E4  1803               	skipnc
 14210  16E5  179E               	bsf	30,7	;volatile
 14211                           
 14212                           ;adc_drv.c: 114: ADCON1bits.ADCS0 = AdcConfig->AdcConvClock;
 14213  16E6  0020               	movlb	0	; select bank0
 14214  16E7  0820               	movf	Adc_InitAdcModule@AdcConfig,w
 14215  16E8  3E02               	addlw	2
 14216  16E9  0086               	movwf	6
 14217  16EA  0187               	clrf	7
 14218  16EB  0C01               	rrf	1,w
 14219  16EC  0021               	movlb	1	; select bank1
 14220  16ED  1C03               	skipc
 14221  16EE  121E               	bcf	30,4	;volatile
 14222  16EF  1803               	skipnc
 14223  16F0  161E               	bsf	30,4	;volatile
 14224                           
 14225                           ;adc_drv.c: 116: ADCON1bits.ADNREF = AdcConfig->AdcNegRef;
 14226  16F1  0020               	movlb	0	; select bank0
 14227  16F2  0820               	movf	Adc_InitAdcModule@AdcConfig,w
 14228  16F3  3E03               	addlw	3
 14229  16F4  0086               	movwf	6
 14230  16F5  0187               	clrf	7
 14231  16F6  0C01               	rrf	1,w
 14232  16F7  0021               	movlb	1	; select bank1
 14233  16F8  1C03               	skipc
 14234  16F9  111E               	bcf	30,2	;volatile
 14235  16FA  1803               	skipnc
 14236  16FB  151E               	bsf	30,2	;volatile
 14237                           
 14238                           ;adc_drv.c: 117: ADCON1bits.ADPREF = AdcConfig->AdcPosRef;
 14239  16FC  0020               	movlb	0	; select bank0
 14240  16FD  0820               	movf	Adc_InitAdcModule@AdcConfig,w
 14241  16FE  3E04               	addlw	4
 14242  16FF  0086               	movwf	6
 14243  1700  0187               	clrf	7
 14244  1701  0021               	movlb	1	; select bank1
 14245  1702  081E               	movf	30,w	;volatile
 14246  1703  0601               	xorwf	1,w
 14247  1704  39FC               	andlw	-4
 14248  1705  0601               	xorwf	1,w
 14249  1706  009E               	movwf	30	;volatile
 14250                           
 14251                           ;adc_drv.c: 119: PIE1bits.ADIE = AdcConfig->AdcIntEnabled;
 14252  1707  0020               	movlb	0	; select bank0
 14253  1708  0820               	movf	Adc_InitAdcModule@AdcConfig,w
 14254  1709  3E05               	addlw	5
 14255  170A  0086               	movwf	6
 14256  170B  0187               	clrf	7
 14257  170C  0C01               	rrf	1,w
 14258  170D  0021               	movlb	1	; select bank1
 14259  170E  1C03               	skipc
 14260  170F  1311               	bcf	17,6	;volatile
 14261  1710  1803               	skipnc
 14262  1711  1711               	bsf	17,6	;volatile
 14263  1712  0008               	return
 14264  1713                     __end_of_Adc_InitAdcModule:	
 14265                           
 14266                           	psect	text71
 14267  0BE8                     __ptext71:	
 14268 ;; *************** function _Adc_ConfigAnCh *****************
 14269 ;; Defined at:
 14270 ;;		line 73 in file "../../../../../Framework/MercuryFwk/Source/c/01_Hal/02_Drv/adc_drv.c"
 14271 ;; Parameters:    Size  Location     Type
 14272 ;;  AnChSel         1    wreg     PTR struct _AnalogChSelT
 14273 ;;		 -> App_MainTask@AnalogChSel(12), 
 14274 ;; Auto vars:     Size  Location     Type
 14275 ;;  AnChSel         1    0[BANK0 ] PTR struct _AnalogChSelT
 14276 ;;		 -> App_MainTask@AnalogChSel(12), 
 14277 ;; Return value:  Size  Location     Type
 14278 ;;                  1    wreg      void 
 14279 ;; Registers used:
 14280 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 14281 ;; Tracked objects:
 14282 ;;		On entry : 0/0
 14283 ;;		On exit  : 0/0
 14284 ;;		Unchanged: 0/0
 14285 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14286 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14287 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14288 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14289 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14290 ;;Total ram usage:        1 bytes
 14291 ;; Hardware stack levels used:    1
 14292 ;; Hardware stack levels required when called:    2
 14293 ;; This function calls:
 14294 ;;		Nothing
 14295 ;; This function is called by:
 14296 ;;		_App_MainTask
 14297 ;; This function uses a non-reentrant model
 14298 ;;
 14299                           
 14300                           
 14301                           ;psect for function _Adc_ConfigAnCh
 14302  0BE8                     _Adc_ConfigAnCh:	
 14303                           
 14304                           ;incstack = 0
 14305                           ; Regs used in _Adc_ConfigAnCh: [wreg+fsr1l+fsr1h+status,2+status,0]
 14306                           ;Adc_ConfigAnCh@AnChSel stored from wreg
 14307  0BE8  0020               	movlb	0	; select bank0
 14308  0BE9  00A0               	movwf	Adc_ConfigAnCh@AnChSel
 14309                           
 14310                           ;adc_drv.c: 76: ANSELA = 0x00;
 14311  0BEA  0023               	movlb	3	; select bank3
 14312  0BEB  018C               	clrf	12	;volatile
 14313                           
 14314                           ;adc_drv.c: 77: ANSELAbits.ANSA0 = AnChSel->AnSelA0An0;
 14315  0BEC  0020               	movlb	0	; select bank0
 14316  0BED  0820               	movf	Adc_ConfigAnCh@AnChSel,w
 14317  0BEE  0086               	movwf	6
 14318  0BEF  0187               	clrf	7
 14319  0BF0  0C01               	rrf	1,w
 14320  0BF1  0023               	movlb	3	; select bank3
 14321  0BF2  1C03               	skipc
 14322  0BF3  100C               	bcf	12,0	;volatile
 14323  0BF4  1803               	skipnc
 14324  0BF5  140C               	bsf	12,0	;volatile
 14325                           
 14326                           ;adc_drv.c: 78: ANSELAbits.ANSA1 = AnChSel->AnSelA1An1;
 14327  0BF6  0020               	movlb	0	; select bank0
 14328  0BF7  0A20               	incf	Adc_ConfigAnCh@AnChSel,w
 14329  0BF8  0086               	movwf	6
 14330  0BF9  0187               	clrf	7
 14331  0BFA  0C01               	rrf	1,w
 14332  0BFB  0023               	movlb	3	; select bank3
 14333  0BFC  1C03               	skipc
 14334  0BFD  108C               	bcf	12,1	;volatile
 14335  0BFE  1803               	skipnc
 14336  0BFF  148C               	bsf	12,1	;volatile
 14337                           
 14338                           ;adc_drv.c: 79: ANSELAbits.ANSA2 = AnChSel->AnSelA2An2;
 14339  0C00  0020               	movlb	0	; select bank0
 14340  0C01  0820               	movf	Adc_ConfigAnCh@AnChSel,w
 14341  0C02  3E02               	addlw	2
 14342  0C03  0086               	movwf	6
 14343  0C04  0187               	clrf	7
 14344  0C05  0C01               	rrf	1,w
 14345  0C06  0023               	movlb	3	; select bank3
 14346  0C07  1C03               	skipc
 14347  0C08  110C               	bcf	12,2	;volatile
 14348  0C09  1803               	skipnc
 14349  0C0A  150C               	bsf	12,2	;volatile
 14350                           
 14351                           ;adc_drv.c: 80: ANSELAbits.ANSA4 = AnChSel->AnSelA4An3;
 14352  0C0B  0020               	movlb	0	; select bank0
 14353  0C0C  0820               	movf	Adc_ConfigAnCh@AnChSel,w
 14354  0C0D  3E03               	addlw	3
 14355  0C0E  0086               	movwf	6
 14356  0C0F  0187               	clrf	7
 14357  0C10  0C01               	rrf	1,w
 14358  0C11  0023               	movlb	3	; select bank3
 14359  0C12  1C03               	skipc
 14360  0C13  120C               	bcf	12,4	;volatile
 14361  0C14  1803               	skipnc
 14362  0C15  160C               	bsf	12,4	;volatile
 14363                           
 14364                           ;adc_drv.c: 83: ANSELB = 0x00;
 14365  0C16  018D               	clrf	13	;volatile
 14366                           
 14367                           ;adc_drv.c: 84: ANSELBbits.ANSB4 = AnChSel->AnSelB4An10;
 14368  0C17  0020               	movlb	0	; select bank0
 14369  0C18  0820               	movf	Adc_ConfigAnCh@AnChSel,w
 14370  0C19  3E04               	addlw	4
 14371  0C1A  0086               	movwf	6
 14372  0C1B  0187               	clrf	7
 14373  0C1C  0C01               	rrf	1,w
 14374  0C1D  0023               	movlb	3	; select bank3
 14375  0C1E  1C03               	skipc
 14376  0C1F  120D               	bcf	13,4	;volatile
 14377  0C20  1803               	skipnc
 14378  0C21  160D               	bsf	13,4	;volatile
 14379                           
 14380                           ;adc_drv.c: 85: ANSELBbits.ANSB5 = AnChSel->AnSelB5An11;
 14381  0C22  0020               	movlb	0	; select bank0
 14382  0C23  0820               	movf	Adc_ConfigAnCh@AnChSel,w
 14383  0C24  3E05               	addlw	5
 14384  0C25  0086               	movwf	6
 14385  0C26  0187               	clrf	7
 14386  0C27  0C01               	rrf	1,w
 14387  0C28  0023               	movlb	3	; select bank3
 14388  0C29  1C03               	skipc
 14389  0C2A  128D               	bcf	13,5	;volatile
 14390  0C2B  1803               	skipnc
 14391  0C2C  168D               	bsf	13,5	;volatile
 14392                           
 14393                           ;adc_drv.c: 88: ANSELC = 0x00;
 14394  0C2D  018E               	clrf	14	;volatile
 14395                           
 14396                           ;adc_drv.c: 89: ANSELCbits.ANSC0 = AnChSel->AnSelC0An4;
 14397  0C2E  0020               	movlb	0	; select bank0
 14398  0C2F  0820               	movf	Adc_ConfigAnCh@AnChSel,w
 14399  0C30  3E06               	addlw	6
 14400  0C31  0086               	movwf	6
 14401  0C32  0187               	clrf	7
 14402  0C33  0C01               	rrf	1,w
 14403  0C34  0023               	movlb	3	; select bank3
 14404  0C35  1C03               	skipc
 14405  0C36  100E               	bcf	14,0	;volatile
 14406  0C37  1803               	skipnc
 14407  0C38  140E               	bsf	14,0	;volatile
 14408                           
 14409                           ;adc_drv.c: 90: ANSELCbits.ANSC1 = AnChSel->AnSelC1An5;
 14410  0C39  0020               	movlb	0	; select bank0
 14411  0C3A  0820               	movf	Adc_ConfigAnCh@AnChSel,w
 14412  0C3B  3E07               	addlw	7
 14413  0C3C  0086               	movwf	6
 14414  0C3D  0187               	clrf	7
 14415  0C3E  0C01               	rrf	1,w
 14416  0C3F  0023               	movlb	3	; select bank3
 14417  0C40  1C03               	skipc
 14418  0C41  108E               	bcf	14,1	;volatile
 14419  0C42  1803               	skipnc
 14420  0C43  148E               	bsf	14,1	;volatile
 14421                           
 14422                           ;adc_drv.c: 91: ANSELCbits.ANSC2 = AnChSel->AnSelC2An6;
 14423  0C44  0020               	movlb	0	; select bank0
 14424  0C45  0820               	movf	Adc_ConfigAnCh@AnChSel,w
 14425  0C46  3E08               	addlw	8
 14426  0C47  0086               	movwf	6
 14427  0C48  0187               	clrf	7
 14428  0C49  0C01               	rrf	1,w
 14429  0C4A  0023               	movlb	3	; select bank3
 14430  0C4B  1C03               	skipc
 14431  0C4C  110E               	bcf	14,2	;volatile
 14432  0C4D  1803               	skipnc
 14433  0C4E  150E               	bsf	14,2	;volatile
 14434                           
 14435                           ;adc_drv.c: 92: ANSELCbits.ANSC3 = AnChSel->AnSelC3An7;
 14436  0C4F  0020               	movlb	0	; select bank0
 14437  0C50  0820               	movf	Adc_ConfigAnCh@AnChSel,w
 14438  0C51  3E09               	addlw	9
 14439  0C52  0086               	movwf	6
 14440  0C53  0187               	clrf	7
 14441  0C54  0C01               	rrf	1,w
 14442  0C55  0023               	movlb	3	; select bank3
 14443  0C56  1C03               	skipc
 14444  0C57  118E               	bcf	14,3	;volatile
 14445  0C58  1803               	skipnc
 14446  0C59  158E               	bsf	14,3	;volatile
 14447                           
 14448                           ;adc_drv.c: 94: ANSELCbits.ANSC6 = AnChSel->AnSelC6An8;
 14449  0C5A  0020               	movlb	0	; select bank0
 14450  0C5B  0820               	movf	Adc_ConfigAnCh@AnChSel,w
 14451  0C5C  3E0A               	addlw	10
 14452  0C5D  0086               	movwf	6
 14453  0C5E  0187               	clrf	7
 14454  0C5F  0C01               	rrf	1,w
 14455  0C60  0023               	movlb	3	; select bank3
 14456  0C61  1C03               	skipc
 14457  0C62  130E               	bcf	14,6	;volatile
 14458  0C63  1803               	skipnc
 14459  0C64  170E               	bsf	14,6	;volatile
 14460                           
 14461                           ;adc_drv.c: 95: ANSELCbits.ANSC7 = AnChSel->AnSelC7An9;
 14462  0C65  0020               	movlb	0	; select bank0
 14463  0C66  0820               	movf	Adc_ConfigAnCh@AnChSel,w
 14464  0C67  3E0B               	addlw	11
 14465  0C68  0086               	movwf	6
 14466  0C69  0187               	clrf	7
 14467  0C6A  0C01               	rrf	1,w
 14468  0C6B  0023               	movlb	3	; select bank3
 14469  0C6C  1C03               	skipc
 14470  0C6D  138E               	bcf	14,7	;volatile
 14471  0C6E  1803               	skipnc
 14472  0C6F  178E               	bsf	14,7	;volatile
 14473  0C70  0008               	return
 14474  0C71                     __end_of_Adc_ConfigAnCh:	
 14475                           
 14476                           	psect	intentry
 14477  0004                     __pintentry:	
 14478 ;; *************** function _MainInterrupt *****************
 14479 ;; Defined at:
 14480 ;;		line 50 in file "../../../../../Framework/MercuryFwk/Source/c/02_Osl/interrupts.c"
 14481 ;; Parameters:    Size  Location     Type
 14482 ;;		None
 14483 ;; Auto vars:     Size  Location     Type
 14484 ;;		None
 14485 ;; Return value:  Size  Location     Type
 14486 ;;                  1    wreg      void 
 14487 ;; Registers used:
 14488 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 14489 ;; Tracked objects:
 14490 ;;		On entry : 0/0
 14491 ;;		On exit  : 0/0
 14492 ;;		Unchanged: 0/0
 14493 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14494 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14495 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14496 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14497 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14498 ;;Total ram usage:        1 bytes
 14499 ;; Hardware stack levels used:    1
 14500 ;; Hardware stack levels required when called:    1
 14501 ;; This function calls:
 14502 ;;		i1_GenerateEvt
 14503 ;; This function is called by:
 14504 ;;		Interrupt level 1
 14505 ;; This function uses a non-reentrant model
 14506 ;;
 14507                           
 14508  0004                     _MainInterrupt:	
 14509                           
 14510                           ;incstack = 0
 14511  0004  147E               	bsf	126,0	;set compiler interrupt flag (level 1)
 14512                           
 14513                           ; Regs used in _MainInterrupt: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 14514  0005  3180               	pagesel	$
 14515  0006  0020               	movlb	0	; select bank0
 14516  0007  087F               	movf	127,w
 14517  0008  00F5               	movwf	??_MainInterrupt
 14518                           
 14519                           ;interrupts.c: 53: if (PIR1bits.TMR2IF == ((UINT8)(1)) && PIE1bits.TMR2IE == ((UINT8)(1)
      +                          ))
 14520  0009  1C91               	btfss	17,1	;volatile
 14521  000A  281D               	goto	i1l5486
 14522  000B  0021               	movlb	1	; select bank1
 14523  000C  1C91               	btfss	17,1	;volatile
 14524  000D  281D               	goto	i1l5486
 14525                           
 14526                           ;interrupts.c: 54: {
 14527                           ;interrupts.c: 56: PIR1bits.TMR2IF = ((UINT8)(0));
 14528  000E  0020               	movlb	0	; select bank0
 14529  000F  1091               	bcf	17,1	;volatile
 14530                           
 14531                           ;interrupts.c: 58: InterruptCounter++;
 14532  0010  3001               	movlw	1
 14533  0011  0022               	movlb	2	; select bank2
 14534  0012  07D2               	addwf	_InterruptCounter^(0+256),f
 14535  0013  3000               	movlw	0
 14536  0014  3DD3               	addwfc	(_InterruptCounter+1)^(0+256),f
 14537                           
 14538                           ;interrupts.c: 60: if (InterruptCounter >= ((UINT16)(1)))
 14539  0015  0852               	movf	_InterruptCounter^(0+256),w
 14540  0016  0453               	iorwf	(_InterruptCounter+1)^(0+256),w
 14541  0017  1903               	btfsc	3,2
 14542  0018  281D               	goto	i1l5486
 14543                           
 14544                           ;interrupts.c: 61: {
 14545                           ;interrupts.c: 63: InterruptCounter = 0;
 14546  0019  01D2               	clrf	_InterruptCounter^(0+256)
 14547  001A  01D3               	clrf	(_InterruptCounter+1)^(0+256)
 14548                           
 14549                           ;interrupts.c: 65: MainSystemTimebaseFlag = CallTaskPhase;
 14550  001B  0021               	movlb	1	; select bank1
 14551  001C  01EF               	clrf	_MainSystemTimebaseFlag^(0+128)
 14552  001D                     i1l5486:	
 14553                           
 14554                           ;interrupts.c: 66: }
 14555                           ;interrupts.c: 67: }
 14556                           ;interrupts.c: 70: if(PIE1bits.SSP1IE == ((UINT8)(1)) && PIR1bits.SSP1IF == ((UINT8)(1))
      +                          )
 14557  001D  0021               	movlb	1	; select bank1
 14558  001E  1D91               	btfss	17,3	;volatile
 14559  001F  282A               	goto	i1l363
 14560  0020  0020               	movlb	0	; select bank0
 14561  0021  1D91               	btfss	17,3	;volatile
 14562  0022  282A               	goto	i1l363
 14563                           
 14564                           ;interrupts.c: 71: {
 14565                           ;interrupts.c: 73: PIR1bits.SSP1IF = ((UINT8)(0));
 14566  0023  1191               	bcf	17,3	;volatile
 14567                           
 14568                           ;interrupts.c: 75: GenerateEvt(&I2cNewTxNotification);
 14569  0024  3065               	movlw	low _I2cNewTxNotification
 14570  0025  00F0               	movwf	i1GenerateEvt@Event
 14571  0026  3001               	movlw	high _I2cNewTxNotification
 14572  0027  00F1               	movwf	i1GenerateEvt@Event+1
 14573  0028  3195  2544         	fcall	i1_GenerateEvt
 14574  002A                     i1l363:	
 14575  002A  0875               	movf	??_MainInterrupt,w
 14576  002B  0020               	movlb	0	; select bank0
 14577  002C  00FF               	movwf	127
 14578  002D  107E               	bcf	126,0	;clear compiler interrupt flag (level 1)
 14579  002E  0009               	retfie
 14580  002F                     __end_of_MainInterrupt:	
 14581                           
 14582                           	psect	text73
 14583  1544                     __ptext73:	
 14584 ;; *************** function i1_GenerateEvt *****************
 14585 ;; Defined at:
 14586 ;;		line 73 in file "../../../../../Framework/MercuryFwk/Source/c/02_Osl/os_ser.c"
 14587 ;; Parameters:    Size  Location     Type
 14588 ;;  Event           2    0[COMMON] PTR struct _EventStructu
 14589 ;;		 -> I2cReplyPacketReady(2), I2cWriteRequest(2), I2cSetAddress(2), I2cNewTxNotification(2), 
 14590 ;;		 -> I2cNewPacketNotification(2), 
 14591 ;; Auto vars:     Size  Location     Type
 14592 ;;  GenerateEvt     1    4[COMMON] enum E3629
 14593 ;; Return value:  Size  Location     Type
 14594 ;;                  1    wreg      enum E3625
 14595 ;; Registers used:
 14596 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 14597 ;; Tracked objects:
 14598 ;;		On entry : 0/0
 14599 ;;		On exit  : 0/0
 14600 ;;		Unchanged: 0/0
 14601 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14602 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14603 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14604 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14605 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14606 ;;Total ram usage:        5 bytes
 14607 ;; Hardware stack levels used:    1
 14608 ;; This function calls:
 14609 ;;		Nothing
 14610 ;; This function is called by:
 14611 ;;		_MainInterrupt
 14612 ;; This function uses a non-reentrant model
 14613 ;;
 14614                           
 14615                           
 14616                           ;psect for function i1_GenerateEvt
 14617  1544                     i1_GenerateEvt:	
 14618                           
 14619                           ;os_ser.c: 76: EventStatusType EventStatus = EventIdle;
 14620                           
 14621                           ;incstack = 0
 14622                           ; Regs used in i1_GenerateEvt: [wreg+fsr1l+fsr1h+status,2+status,0]
 14623  1544  01F4               	clrf	i1GenerateEvt@EventStatus
 14624                           
 14625                           ;os_ser.c: 78: if ((Event->EventOptions != ((UINT8)(2))) && (Event->EventOptions != ((UI
      +                          NT8)(3))))
 14626  1545  0870               	movf	i1GenerateEvt@Event,w
 14627  1546  0086               	movwf	6
 14628  1547  0871               	movf	i1GenerateEvt@Event+1,w
 14629  1548  0087               	movwf	7
 14630  1549  3002               	movlw	2
 14631  154A  0601               	xorwf	1,w
 14632  154B  1903               	btfsc	3,2
 14633  154C  2D66               	goto	i1l5466
 14634  154D  0870               	movf	i1GenerateEvt@Event,w
 14635  154E  0086               	movwf	6
 14636  154F  0871               	movf	i1GenerateEvt@Event+1,w
 14637  1550  0087               	movwf	7
 14638  1551  3003               	movlw	3
 14639  1552  0601               	xorwf	1,w
 14640  1553  1903               	btfsc	3,2
 14641  1554  2D66               	goto	i1l5466
 14642                           
 14643                           ;os_ser.c: 79: {
 14644                           ;os_ser.c: 81: Event->EventStatus = EventSent;
 14645  1555  0870               	movf	i1GenerateEvt@Event,w
 14646  1556  3E01               	addlw	1
 14647  1557  00F2               	movwf	??i1_GenerateEvt
 14648  1558  3000               	movlw	0
 14649  1559  3D71               	addwfc	i1GenerateEvt@Event+1,w
 14650  155A  00F3               	movwf	??i1_GenerateEvt+1
 14651  155B  0872               	movf	??i1_GenerateEvt,w
 14652  155C  0086               	movwf	6
 14653  155D  0873               	movf	??i1_GenerateEvt+1,w
 14654  155E  0087               	movwf	7
 14655  155F  3002               	movlw	2
 14656  1560  0081               	movwf	1
 14657                           
 14658                           ;os_ser.c: 83: EventStatus = EventSent;
 14659  1561  3002               	movlw	2
 14660  1562  00F2               	movwf	??i1_GenerateEvt
 14661  1563  0872               	movf	??i1_GenerateEvt,w
 14662  1564  00F4               	movwf	i1GenerateEvt@EventStatus
 14663                           
 14664                           ;os_ser.c: 84: }
 14665  1565  0008               	return
 14666  1566                     i1l5466:	
 14667                           
 14668                           ;os_ser.c: 85: else
 14669                           ;os_ser.c: 86: {
 14670                           ;os_ser.c: 88: EventStatus = EventNotSent;
 14671  1566  3003               	movlw	3
 14672  1567  00F2               	movwf	??i1_GenerateEvt
 14673  1568  0872               	movf	??i1_GenerateEvt,w
 14674  1569  00F4               	movwf	i1GenerateEvt@EventStatus
 14675  156A  0008               	return
 14676  156B                     __end_ofi1_GenerateEvt:	
 14677                           ;os_ser.c: 89: }
 14678                           ;os_ser.c: 92: return(EventStatus);
 14679                           ;	Return value of i1_GenerateEvt is never used
 14680                           
 14681  007E                     btemp	set	126	;btemp
 14682  007E                     int$flags	set	126
 14683  007E                     wtemp	set	126
 14684  007E                     wtemp0	set	126
 14685  0080                     wtemp1	set	128
 14686  0082                     wtemp2	set	130
 14687  0084                     wtemp3	set	132
 14688  0086                     wtemp4	set	134
 14689  0088                     wtemp5	set	136
 14690  007F                     wtemp6	set	127
 14691  007E                     ttemp	set	126
 14692  007E                     ttemp0	set	126
 14693  0081                     ttemp1	set	129
 14694  0084                     ttemp2	set	132
 14695  0087                     ttemp3	set	135
 14696  007F                     ttemp4	set	127
 14697  007E                     ltemp	set	126
 14698  007E                     ltemp0	set	126
 14699  0082                     ltemp1	set	130
 14700  0086                     ltemp2	set	134
 14701  0080                     ltemp3	set	128


Data Sizes:
    Strings     28
    Constant    12
    Data        50
    BSS         488
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14      6      10
    BANK0            80     79      79
    BANK1            80     61      80
    BANK2            80      4      79
    BANK3            80      6      76
    BANK4            80      0      80
    BANK5            80      0      50
    BANK6            80      0      80
    BANK7            80      0      80
    BANK8            80      0      80
    BANK9            80      0       0
    BANK10           80      0       0
    BANK11           45      0       0
    BANK12            0      0       0

Pointer List with Targets:

    Tmr6IsrCallback	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), 

    Tmr4IsrCallback	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), 

    Tmr2IsrCallback	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), 

    utoa@buf	PTR unsigned char  size(1) Largest target is 4
		 -> StdS_ManageStdServices@DieTempStr(BANK0[4]), 

    sp__itoa	PTR unsigned char  size(1) Largest target is 0

    sprintf@f	PTR const unsigned char  size(2) Largest target is 8
		 -> STR_1(CODE[8]), 

    sprintf@sp	PTR unsigned char  size(1) Largest target is 50
		 -> TempCelStr(BANK5[50]), 

    sprintf@ap	PTR void [1] size(1) Largest target is 2
		 -> ?_sprintf(BANK0[2]), 

    sp__utoa	PTR unsigned char  size(1) Largest target is 4
		 -> StdS_ManageStdServices@DieTempStr(BANK0[4]), 

    MyFtoa@string	PTR unsigned char  size(1) Largest target is 50
		 -> TempCelStr(BANK5[50]), 

    StringCopy@SourceStr	PTR unsigned char  size(2) Largest target is 9
		 -> StdS_ManageStdServices@DieTempStr(BANK0[4]), STR_5(CODE[9]), STR_4(CODE[9]), STR_3(CODE[6]), 
		 -> STR_2(CODE[5]), 

    StringCopy@DestStr	PTR unsigned char  size(1) Largest target is 80
		 -> RepBuffer(BANK4[80]), 

    ReceiveEvt@Event	PTR struct _EventStructure size(2) Largest target is 2
		 -> I2cReplyPacketReady(COMMON[2]), I2cWriteRequest(BANK2[2]), I2cSetAddress(BANK2[2]), I2cNewTxNotification(BANK2[2]), 
		 -> I2cNewPacketNotification(BANK1[2]), 

    GenerateEvt@Event	PTR struct _EventStructure size(2) Largest target is 2
		 -> I2cReplyPacketReady(COMMON[2]), I2cWriteRequest(BANK2[2]), I2cSetAddress(BANK2[2]), I2cNewTxNotification(BANK2[2]), 
		 -> I2cNewPacketNotification(BANK1[2]), 

    S1194_SchedTblType$Task	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> App_MainTask(), Led_MainTask(), Wdg_MainTask(), I2cSlv_MainTask(), 
		 -> I2c_DataReceiveSm(), 

    TaskTable.Task	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> App_MainTask(), Led_MainTask(), Wdg_MainTask(), I2cSlv_MainTask(), 
		 -> I2c_DataReceiveSm(), 

    Tmr_TmrBConfig@TmrBConfig	PTR struct _TmrBConfigType size(1) Largest target is 6
		 -> InitSchTimer@TmrBConfig(BANK0[6]), 

    Mcu_ConfigPullUps@WpuCh	PTR struct _WpuChType size(1) Largest target is 18
		 -> App_MainTask@WpuCh(BANK1[18]), 

    LedBlinkStateMachine@LedBlink	PTR struct LedBlinkStr size(1) Largest target is 8
		 -> Led1(BANK2[8]), 

    I2c_UpdateTxBuffer@DataBuffer	PTR unsigned char  size(1) Largest target is 80
		 -> RepBuffer(BANK4[80]), 

    I2c_InitI2cModule@I2cConfig	PTR struct _I2cConfig size(1) Largest target is 11
		 -> I2cConfig(BANK2[11]), 

    Adc_InitAdcModule@AdcConfig	PTR struct _AdcCfgType size(1) Largest target is 6
		 -> App_MainTask@AdcConfig(BANK1[6]), 

    Adc_ConfigAnCh@AnChSel	PTR struct _AnalogChSelType size(1) Largest target is 12
		 -> App_MainTask@AnalogChSel(BANK1[12]), 


Critical Paths under _main in COMMON

    None.

Critical Paths under _MainInterrupt in COMMON

    _MainInterrupt->i1_GenerateEvt

Critical Paths under _main in BANK0

    _SystemInit->_InitSchTimer
    _InitSchTimer->_Tmr_TmrBConfig
    _Tmr_TmrBConfig->_Tmr_TmrBPrSet
    _Tmr_TmrBPrSet->___lmul
    ___lmul->___wmul
    _MainScheduler->_InitializeTasks
    _MainScheduler->_ScheduleTasks
    _ScheduleTasks->_App_MainTask
    _ScheduleTasks->_I2c_DataReceiveSm
    _ScheduleTasks->_Led_MainTask
    _InitializeTasks->_App_MainTask
    _InitializeTasks->_I2c_DataReceiveSm
    _InitializeTasks->_Led_MainTask
    _I2c_InitI2cModule->_ClearRxBuffer
    _I2c_InitI2cModule->_ClearTxBuffer
    _I2cSlv_I2cDrvHandle->_GenerateEvt
    _I2cSlv_I2cDrvHandle->_I2c_UpdateTxBuffer
    _I2cSlv_I2cDrvHandle->_ReceiveEvt
    _App_MainTask->_GetTemperature
    _GetTemperature->_MyFtoa
    ___lwtoft->___ftpack
    ___ftdiv->___ftadd
    _MyFtoa->_sprintf
    _sprintf->___ftmul
    ___fttol->___ftpack
    ___ftneg->___awtoft
    ___ftmul->___ftadd
    ___ftadd->___ftneg
    ___awtoft->___fttol
    _AppSm->_ManageProtocol
    _ManageProtocol->_StdS_ManageStdServices
    _StdS_ManageStdServices->_utoa
    _utoa->___lwmod
    ___lwmod->___lwdiv
    _LowPowerMode->_Mcu_SetWdgSts
    _GetDieTemperature->_Adc_GetConvResult

Critical Paths under _MainInterrupt in BANK0

    None.

Critical Paths under _main in BANK1

    _ScheduleTasks->_App_MainTask
    _InitializeTasks->_App_MainTask
    _App_MainTask->_GetTemperature
    _GetTemperature->_MyFtoa
    _MyFtoa->_sprintf

Critical Paths under _MainInterrupt in BANK1

    None.

Critical Paths under _main in BANK2

    _MainScheduler->_InitializeTasks

Critical Paths under _MainInterrupt in BANK2

    None.

Critical Paths under _main in BANK3

    _MainScheduler->_ScheduleTasks

Critical Paths under _MainInterrupt in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _MainInterrupt in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _MainInterrupt in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _MainInterrupt in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _MainInterrupt in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _MainInterrupt in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _MainInterrupt in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _MainInterrupt in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _MainInterrupt in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _MainInterrupt in BANK12

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0   87333
                      _MainScheduler
                         _SystemInit
 ---------------------------------------------------------------------------------
 (1) _SystemInit                                           0     0      0    3445
                       _InitSchTimer
               _Mcu_EnableInterrupts
                     _Mcu_InitIntOsc
 ---------------------------------------------------------------------------------
 (2) _Mcu_InitIntOsc                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _Mcu_EnableInterrupts                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _InitSchTimer                                         7     7      0    3445
                                             39 BANK0      7     7      0
                     _Tmr_TmrBConfig
 ---------------------------------------------------------------------------------
 (3) _Tmr_TmrBConfig                                       3     2      1    3242
                                             36 BANK0      3     2      1
                           _TmrBInit
                       _Tmr_StartTmr
                     _Tmr_TmrBIrqSet
                      _Tmr_TmrBPrSet
 ---------------------------------------------------------------------------------
 (4) _Tmr_TmrBPrSet                                       18    14      4    2113
                                             18 BANK0     18    14      4
                            ___lldiv
                             ___lmul
                             ___wmul
 ---------------------------------------------------------------------------------
 (5) ___lmul                                              12     4      8     290
                                              6 BANK0     12     4      8
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (5) ___lldiv                                             14     6      8     857
                                              0 BANK0     14     6      8
 ---------------------------------------------------------------------------------
 (4) _Tmr_TmrBIrqSet                                       2     1      1     278
                                              0 BANK0      2     1      1
 ---------------------------------------------------------------------------------
 (4) _Tmr_StartTmr                                         1     1      0      31
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (4) _TmrBInit                                             4     2      2     371
                                              0 BANK0      4     2      2
 ---------------------------------------------------------------------------------
 (1) _MainScheduler                                        0     0      0   83888
                    _InitializeTasks
                      _ScheduleTasks
 ---------------------------------------------------------------------------------
 (2) _ScheduleTasks                                        7     7      0   42037
                                             78 BANK0      1     1      0
                                              0 BANK3      6     6      0
                       _App_MainTask *
                    _I2cSlv_MainTask *
                  _I2c_DataReceiveSm *
                       _Led_MainTask *
                       _Wdg_MainTask *
 ---------------------------------------------------------------------------------
 (2) _InitializeTasks                                      5     5      0   41851
                                             78 BANK0      1     1      0
                                              0 BANK2      4     4      0
                       _App_MainTask *
                    _I2cSlv_MainTask *
                  _I2c_DataReceiveSm *
                       _Led_MainTask *
                       _Wdg_MainTask *
 ---------------------------------------------------------------------------------
 (3) _Wdg_MainTask                                         1     0      1      62
                                             24 BANK1      1     0      1
                       _Mcu_ClearWdg
                   _Mcu_SetWdgPeriod
                      _Mcu_SetWdgSts
 ---------------------------------------------------------------------------------
 (4) _Mcu_SetWdgPeriod                                     2     2      0      31
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (4) _Mcu_ClearWdg                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _Led_MainTask                                         2     1      1     606
                                             77 BANK0      1     1      0
                                             24 BANK1      1     0      1
               _LedBlinkStateMachine
 ---------------------------------------------------------------------------------
 (4) _LedBlinkStateMachine                                 6     5      1     606
                                              0 BANK0      6     5      1
 ---------------------------------------------------------------------------------
 (3) _I2c_DataReceiveSm                                    9     8      1    1189
                                             77 BANK0      1     1      0
                                             24 BANK1      8     7      1
                     _CheckAckStatus
                    _CheckByteStatus
                 _CheckStopBitStatus
                      _ClearRxBuffer
                      _ClearTxBuffer
                        _GenerateEvt
                         _ReceiveEvt
 ---------------------------------------------------------------------------------
 (4) _CheckStopBitStatus                                   1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (4) _CheckByteStatus                                      1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (4) _CheckAckStatus                                       1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (3) _I2cSlv_MainTask                                      1     0      1    1902
                                             24 BANK1      1     0      1
                _I2cSlv_I2cDrvHandle
                  _I2c_InitI2cModule
                      _I2c_SetConfig
 ---------------------------------------------------------------------------------
 (4) _I2c_SetConfig                                        1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (4) _I2c_InitI2cModule                                    3     3      0     572
                                              2 BANK0      3     3      0
                      _ClearRxBuffer
                      _ClearTxBuffer
 ---------------------------------------------------------------------------------
 (4) _ClearTxBuffer                                        2     2      0      99
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (4) _ClearRxBuffer                                        2     2      0      99
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (4) _I2cSlv_I2cDrvHandle                                  6     6      0    1330
                                              5 BANK0      6     6      0
                        _GenerateEvt
                  _I2c_SetI2cAddress
              _I2c_SetI2cAddressMask
                 _I2c_UpdateTxBuffer
                         _ReceiveEvt
 ---------------------------------------------------------------------------------
 (5) _I2c_UpdateTxBuffer                                   5     4      1     274
                                              0 BANK0      5     4      1
 ---------------------------------------------------------------------------------
 (5) _I2c_SetI2cAddressMask                                1     1      0      31
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (5) _I2c_SetI2cAddress                                    1     1      0      31
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (3) _App_MainTask                                        38    37      1   37959
                                             77 BANK0      1     1      0
                                             24 BANK1     37    36      1
                     _Adc_ConfigAnCh
                  _Adc_InitAdcModule
                  _Adc_SelectChannel
                              _AppSm
                     _GetTemperature
                  _Mcu_ConfigPullUps
                 _Mcu_SetDieTempMode
                  _Mcu_SetDieTempSts
                  _Mcu_SetPullUpsSts
 ---------------------------------------------------------------------------------
 (4) _Mcu_SetPullUpsSts                                    1     1      0      31
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (4) _Mcu_SetDieTempSts                                    1     1      0      31
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (4) _Mcu_SetDieTempMode                                   1     1      0      31
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (4) _Mcu_ConfigPullUps                                    1     1      0     591
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (4) _GetTemperature                                       9     9      0   29683
                                             75 BANK0      2     2      0
                                             17 BANK1      7     7      0
                  _Adc_GetConvResult
                     _Adc_GetConvSts
                _Adc_StartConversion
                             _MyFtoa
                            ___ftadd
                            ___ftdiv
                            ___ftmul
                            ___lwdiv
                           ___lwtoft
 ---------------------------------------------------------------------------------
 (5) ___lwtoft                                             4     1      3    2632
                                              8 BANK0      4     1      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (5) ___ftdiv                                             16    10      6    3098
                                             44 BANK0     16    10      6
                            ___ftadd (ARG)
                           ___ftpack
 ---------------------------------------------------------------------------------
 (5) _MyFtoa                                              11     5      6   15120
                                             70 BANK0      5     5      0
                                             11 BANK1      6     0      6
                           ___awtoft
                            ___ftadd
                            ___ftmul
                            ___ftneg
                            ___fttol
                            _sprintf
 ---------------------------------------------------------------------------------
 (6) _sprintf                                             29    23      6    3497
                                             60 BANK0     10     4      6
                                              0 BANK1     11    11      0
                           ___awtoft (ARG)
                            ___ftadd (ARG)
                            ___ftmul (ARG)
                            ___ftneg (ARG)
                            ___fttol (ARG)
                            ___lwdiv
                            ___lwmod
                             ___wmul
                            _isdigit
 ---------------------------------------------------------------------------------
 (7) _isdigit                                              2     2      0      99
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (5) ___wmul                                               6     2      4     444
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (6) ___fttol                                             14    10      4     602
                                              8 BANK0     14    10      4
                           ___ftpack (ARG)
 ---------------------------------------------------------------------------------
 (6) ___ftneg                                              3     0      3     142
                                             28 BANK0      3     0      3
                           ___awtoft (ARG)
                            ___fttol (ARG)
 ---------------------------------------------------------------------------------
 (5) ___ftmul                                             16    10      6    3320
                                             44 BANK0     16    10      6
                           ___awtoft (ARG)
                            ___ftadd (ARG)
                            ___ftneg (ARG)
                           ___ftpack
                            ___fttol (ARG)
                           ___lwtoft (ARG)
 ---------------------------------------------------------------------------------
 (5) ___ftadd                                             13     7      6    4325
                                             31 BANK0     13     7      6
                           ___awtoft (ARG)
                            ___ftneg (ARG)
                           ___ftpack
                            ___fttol (ARG)
 ---------------------------------------------------------------------------------
 (6) ___awtoft                                             6     3      3    2811
                                             22 BANK0      6     3      3
                           ___ftpack
                            ___fttol (ARG)
 ---------------------------------------------------------------------------------
 (6) ___ftpack                                             8     3      5    2524
                                              0 BANK0      8     3      5
 ---------------------------------------------------------------------------------
 (4) _AppSm                                                3     3      0    5876
                                             33 BANK0      3     3      0
                        _GenerateEvt
                     _ManageProtocol
 ---------------------------------------------------------------------------------
 (5) _ManageProtocol                                       2     2      0    5364
                                             31 BANK0      2     2      0
                        _GenerateEvt
                         _ReceiveEvt
             _StdS_ManageStdServices
 ---------------------------------------------------------------------------------
 (6) _StdS_ManageStdServices                               8     8      0    4373
                                             23 BANK0      8     8      0
                         _BoardReset
                   _ControlLedDirect
                        _GenerateEvt
                  _GetDieTemperature
                       _LowPowerMode
                         _StringCopy
                  _UpdateLebBlinkSts
                               _utoa
 ---------------------------------------------------------------------------------
 (7) _utoa                                                 9     5      4    2171
                                             14 BANK0      9     5      4
                            ___lwdiv
                            ___lwmod
 ---------------------------------------------------------------------------------
 (7) ___lwmod                                              6     2      4     540
                                              8 BANK0      6     2      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (5) ___lwdiv                                              8     4      4     857
                                              0 BANK0      8     4      4
 ---------------------------------------------------------------------------------
 (7) _UpdateLebBlinkSts                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (7) _StringCopy                                           9     5      4    1350
                                              0 BANK0      9     5      4
 ---------------------------------------------------------------------------------
 (7) _LowPowerMode                                         0     0      0      31
                      _Mcu_SetWdgSts
 ---------------------------------------------------------------------------------
 (4) _Mcu_SetWdgSts                                        1     1      0      31
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (7) _GetDieTemperature                                    4     2      2      99
                                              5 BANK0      4     2      2
                  _Adc_GetConvResult
                     _Adc_GetConvSts
                  _Adc_SelectChannel
                _Adc_StartConversion
 ---------------------------------------------------------------------------------
 (5) _Adc_StartConversion                                  0     0      0       0
 ---------------------------------------------------------------------------------
 (8) _Adc_SelectChannel                                    2     2      0      31
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (5) _Adc_GetConvSts                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (5) _Adc_GetConvResult                                    5     3      2      34
                                              0 BANK0      5     3      2
 ---------------------------------------------------------------------------------
 (4) _GenerateEvt                                          5     3      2     512
                                              0 BANK0      5     3      2
 ---------------------------------------------------------------------------------
 (7) _ControlLedDirect                                     0     0      0       0
 ---------------------------------------------------------------------------------
 (7) _BoardReset                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (4) _ReceiveEvt                                           5     3      2     349
                                              0 BANK0      5     3      2
 ---------------------------------------------------------------------------------
 (4) _Adc_InitAdcModule                                    1     1      0     219
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (4) _Adc_ConfigAnCh                                       1     1      0     405
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 8
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (9) _MainInterrupt                                        1     1      0     113
                                              5 COMMON     1     1      0
                      i1_GenerateEvt
 ---------------------------------------------------------------------------------
 (10) i1_GenerateEvt                                       5     3      2     113
                                              0 COMMON     5     3      2
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 10
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _MainScheduler
     _InitializeTasks
       _App_MainTask *
         _Adc_ConfigAnCh
         _Adc_InitAdcModule
         _Adc_SelectChannel
         _AppSm
           _GenerateEvt
           _ManageProtocol
             _GenerateEvt
             _ReceiveEvt
             _StdS_ManageStdServices
               _BoardReset
               _ControlLedDirect
               _GenerateEvt
               _GetDieTemperature
                 _Adc_GetConvResult
                 _Adc_GetConvSts
                 _Adc_SelectChannel
                 _Adc_StartConversion
               _LowPowerMode
                 _Mcu_SetWdgSts
               _StringCopy
               _UpdateLebBlinkSts
               _utoa
                 ___lwdiv
                 ___lwmod
                   ___lwdiv (ARG)
         _GetTemperature
           _Adc_GetConvResult
           _Adc_GetConvSts
           _Adc_StartConversion
           _MyFtoa
             ___awtoft
               ___ftpack
               ___fttol (ARG)
                 ___ftpack (ARG)
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
                 ___fttol (ARG)
                   ___ftpack (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                   ___fttol (ARG)
                     ___ftpack (ARG)
                 ___fttol (ARG)
                   ___ftpack (ARG)
               ___ftpack (ARG)
               ___fttol (ARG)
                 ___ftpack (ARG)
             ___ftmul
               ___awtoft (ARG)
                 ___ftpack
                 ___fttol (ARG)
                   ___ftpack (ARG)
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                   ___fttol (ARG)
                     ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                     ___fttol (ARG)
                       ___ftpack (ARG)
                   ___fttol (ARG)
                     ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___fttol (ARG)
                   ___ftpack (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                   ___fttol (ARG)
                     ___ftpack (ARG)
                 ___fttol (ARG)
                   ___ftpack (ARG)
               ___ftpack (ARG)
               ___fttol (ARG)
                 ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
             ___ftneg
               ___awtoft (ARG)
                 ___ftpack
                 ___fttol (ARG)
                   ___ftpack (ARG)
               ___fttol (ARG)
                 ___ftpack (ARG)
             ___fttol
               ___ftpack (ARG)
             _sprintf
               ___awtoft (ARG)
                 ___ftpack
                 ___fttol (ARG)
                   ___ftpack (ARG)
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                   ___fttol (ARG)
                     ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                     ___fttol (ARG)
                       ___ftpack (ARG)
                   ___fttol (ARG)
                     ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___fttol (ARG)
                   ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                   ___fttol (ARG)
                     ___ftpack (ARG)
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                     ___fttol (ARG)
                       ___ftpack (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                       ___fttol (ARG)
                         ___ftpack (ARG)
                     ___fttol (ARG)
                       ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___fttol (ARG)
                     ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                     ___fttol (ARG)
                       ___ftpack (ARG)
                   ___fttol (ARG)
                     ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___fttol (ARG)
                   ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                   ___fttol (ARG)
                     ___ftpack (ARG)
                 ___fttol (ARG)
                   ___ftpack (ARG)
               ___fttol (ARG)
                 ___ftpack (ARG)
               ___lwdiv (ARG)
               ___lwmod (ARG)
                 ___lwdiv (ARG)
               ___wmul (ARG)
               _isdigit (ARG)
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
               ___fttol (ARG)
                 ___ftpack (ARG)
             ___ftneg (ARG)
               ___awtoft (ARG)
                 ___ftpack
                 ___fttol (ARG)
                   ___ftpack (ARG)
               ___fttol (ARG)
                 ___ftpack (ARG)
             ___ftpack (ARG)
             ___fttol (ARG)
               ___ftpack (ARG)
           ___ftdiv
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
                 ___fttol (ARG)
                   ___ftpack (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                   ___fttol (ARG)
                     ___ftpack (ARG)
                 ___fttol (ARG)
                   ___ftpack (ARG)
               ___ftpack (ARG)
               ___fttol (ARG)
                 ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftmul
             ___awtoft (ARG)
               ___ftpack
               ___fttol (ARG)
                 ___ftpack (ARG)
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
                 ___fttol (ARG)
                   ___ftpack (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                   ___fttol (ARG)
                     ___ftpack (ARG)
                 ___fttol (ARG)
                   ___ftpack (ARG)
               ___ftpack (ARG)
               ___fttol (ARG)
                 ___ftpack (ARG)
             ___ftneg (ARG)
               ___awtoft (ARG)
                 ___ftpack
                 ___fttol (ARG)
                   ___ftpack (ARG)
               ___fttol (ARG)
                 ___ftpack (ARG)
             ___ftpack (ARG)
             ___fttol (ARG)
               ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
           ___lwdiv
           ___lwtoft
             ___ftpack
         _Mcu_ConfigPullUps
         _Mcu_SetDieTempMode
         _Mcu_SetDieTempSts
         _Mcu_SetPullUpsSts
       _I2cSlv_MainTask *
         _I2cSlv_I2cDrvHandle
           _GenerateEvt
           _I2c_SetI2cAddress
           _I2c_SetI2cAddressMask
           _I2c_UpdateTxBuffer
           _ReceiveEvt
         _I2c_InitI2cModule
           _ClearRxBuffer
           _ClearTxBuffer
         _I2c_SetConfig
       _I2c_DataReceiveSm *
         _CheckAckStatus
         _CheckByteStatus
         _CheckStopBitStatus
         _ClearRxBuffer
         _ClearTxBuffer
         _GenerateEvt
         _ReceiveEvt
       _Led_MainTask *
         _LedBlinkStateMachine
       _Wdg_MainTask *
         _Mcu_ClearWdg
         _Mcu_SetWdgPeriod
         _Mcu_SetWdgSts
     _ScheduleTasks
       _App_MainTask *
         _Adc_ConfigAnCh
         _Adc_InitAdcModule
         _Adc_SelectChannel
         _AppSm
           _GenerateEvt
           _ManageProtocol
             _GenerateEvt
             _ReceiveEvt
             _StdS_ManageStdServices
               _BoardReset
               _ControlLedDirect
               _GenerateEvt
               _GetDieTemperature
                 _Adc_GetConvResult
                 _Adc_GetConvSts
                 _Adc_SelectChannel
                 _Adc_StartConversion
               _LowPowerMode
                 _Mcu_SetWdgSts
               _StringCopy
               _UpdateLebBlinkSts
               _utoa
                 ___lwdiv
                 ___lwmod
                   ___lwdiv (ARG)
         _GetTemperature
           _Adc_GetConvResult
           _Adc_GetConvSts
           _Adc_StartConversion
           _MyFtoa
             ___awtoft
               ___ftpack
               ___fttol (ARG)
                 ___ftpack (ARG)
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
                 ___fttol (ARG)
                   ___ftpack (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                   ___fttol (ARG)
                     ___ftpack (ARG)
                 ___fttol (ARG)
                   ___ftpack (ARG)
               ___ftpack (ARG)
               ___fttol (ARG)
                 ___ftpack (ARG)
             ___ftmul
               ___awtoft (ARG)
                 ___ftpack
                 ___fttol (ARG)
                   ___ftpack (ARG)
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                   ___fttol (ARG)
                     ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                     ___fttol (ARG)
                       ___ftpack (ARG)
                   ___fttol (ARG)
                     ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___fttol (ARG)
                   ___ftpack (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                   ___fttol (ARG)
                     ___ftpack (ARG)
                 ___fttol (ARG)
                   ___ftpack (ARG)
               ___ftpack (ARG)
               ___fttol (ARG)
                 ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
             ___ftneg
               ___awtoft (ARG)
                 ___ftpack
                 ___fttol (ARG)
                   ___ftpack (ARG)
               ___fttol (ARG)
                 ___ftpack (ARG)
             ___fttol
               ___ftpack (ARG)
             _sprintf
               ___awtoft (ARG)
                 ___ftpack
                 ___fttol (ARG)
                   ___ftpack (ARG)
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                   ___fttol (ARG)
                     ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                     ___fttol (ARG)
                       ___ftpack (ARG)
                   ___fttol (ARG)
                     ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___fttol (ARG)
                   ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                   ___fttol (ARG)
                     ___ftpack (ARG)
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                     ___fttol (ARG)
                       ___ftpack (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                       ___fttol (ARG)
                         ___ftpack (ARG)
                     ___fttol (ARG)
                       ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___fttol (ARG)
                     ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                     ___fttol (ARG)
                       ___ftpack (ARG)
                   ___fttol (ARG)
                     ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___fttol (ARG)
                   ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                   ___fttol (ARG)
                     ___ftpack (ARG)
                 ___fttol (ARG)
                   ___ftpack (ARG)
               ___fttol (ARG)
                 ___ftpack (ARG)
               ___lwdiv (ARG)
               ___lwmod (ARG)
                 ___lwdiv (ARG)
               ___wmul (ARG)
               _isdigit (ARG)
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
               ___fttol (ARG)
                 ___ftpack (ARG)
             ___ftneg (ARG)
               ___awtoft (ARG)
                 ___ftpack
                 ___fttol (ARG)
                   ___ftpack (ARG)
               ___fttol (ARG)
                 ___ftpack (ARG)
             ___ftpack (ARG)
             ___fttol (ARG)
               ___ftpack (ARG)
           ___ftdiv
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
                 ___fttol (ARG)
                   ___ftpack (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                   ___fttol (ARG)
                     ___ftpack (ARG)
                 ___fttol (ARG)
                   ___ftpack (ARG)
               ___ftpack (ARG)
               ___fttol (ARG)
                 ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftmul
             ___awtoft (ARG)
               ___ftpack
               ___fttol (ARG)
                 ___ftpack (ARG)
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
                 ___fttol (ARG)
                   ___ftpack (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                   ___fttol (ARG)
                     ___ftpack (ARG)
                 ___fttol (ARG)
                   ___ftpack (ARG)
               ___ftpack (ARG)
               ___fttol (ARG)
                 ___ftpack (ARG)
             ___ftneg (ARG)
               ___awtoft (ARG)
                 ___ftpack
                 ___fttol (ARG)
                   ___ftpack (ARG)
               ___fttol (ARG)
                 ___ftpack (ARG)
             ___ftpack (ARG)
             ___fttol (ARG)
               ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
           ___lwdiv
           ___lwtoft
             ___ftpack
         _Mcu_ConfigPullUps
         _Mcu_SetDieTempMode
         _Mcu_SetDieTempSts
         _Mcu_SetPullUpsSts
       _I2cSlv_MainTask *
         _I2cSlv_I2cDrvHandle
           _GenerateEvt
           _I2c_SetI2cAddress
           _I2c_SetI2cAddressMask
           _I2c_UpdateTxBuffer
           _ReceiveEvt
         _I2c_InitI2cModule
           _ClearRxBuffer
           _ClearTxBuffer
         _I2c_SetConfig
       _I2c_DataReceiveSm *
         _CheckAckStatus
         _CheckByteStatus
         _CheckStopBitStatus
         _ClearRxBuffer
         _ClearTxBuffer
         _GenerateEvt
         _ReceiveEvt
       _Led_MainTask *
         _LedBlinkStateMachine
       _Wdg_MainTask *
         _Mcu_ClearWdg
         _Mcu_SetWdgPeriod
         _Mcu_SetWdgSts
   _SystemInit
     _InitSchTimer
       _Tmr_TmrBConfig
         _TmrBInit
         _Tmr_StartTmr
         _Tmr_TmrBIrqSet
         _Tmr_TmrBPrSet
           ___lldiv
           ___lmul
             ___wmul (ARG)
           ___wmul
     _Mcu_EnableInterrupts
     _Mcu_InitIntOsc

 _MainInterrupt (ROOT)
   i1_GenerateEvt

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             3F0      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            E      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               E      6       A       2       71.4%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0       0       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50     4F      4F       5       98.8%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BANK1               50     3D      50       7      100.0%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BITBANK2            50      0       0       8        0.0%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
BANK2               50      4      4F       9       98.8%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
BITBANK3            50      0       0      10        0.0%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BANK3               50      6      4C      11       95.0%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
BITBANK4            50      0       0      12        0.0%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BANK4               50      0      50      13      100.0%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BITBANK5            50      0       0      14        0.0%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
BANK5               50      0      32      15       62.5%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
BITBANK6            50      0       0      16        0.0%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
BANK6               50      0      50      17      100.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BITBANK7            50      0       0      18        0.0%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BANK7               50      0      50      19      100.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
ABS                  0      0     2B6      20        0.0%
BITBANK8            50      0       0      21        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BANK8               50      0      50      22      100.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BITBANK9            50      0       0      23        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BANK9               50      0       0      24        0.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BITBANK10           50      0       0      25        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BANK10              50      0       0      26        0.0%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BITBANK11           50      0       0      27        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BANK11              2D      0       0      28        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
BITBANK12           30      0       0      29        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BANK12               0      0       0      30        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
DATA                 0      0     2B6      31        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%


Microchip Technology PIC Macro Assembler V1.38 build -256452561 
Symbol Table                                                                                   Fri Mar 02 20:17:07 2018

                                    pc 0002                       _Mcu_SetWdgPeriod 13BB  
                    _UpdateLebBlinkSts 136A                            __CFG_CP$OFF 0000  
           __end_of_I2c_UpdateTxBuffer 1500                 __end_of_Mcu_InitIntOsc 1323  
           __size_of_GetDieTemperature 0019                 ??_LedBlinkStateMachine 0021  
                  ___wmul@multiplicand 0022            __size_of_CheckStopBitStatus 000B  
                   ?_UpdateLebBlinkSts 0070                   __end_of_App_MainTask 09D8  
                         ___ftadd@exp1 004B                           ___ftadd@exp2 004A  
                  GetTemperature@Index 00B7                           ___ftadd@sign 0049  
                                  l213 1320                                    l303 15BE  
                                  l311 0E80                                    l305 15C6  
                                  l306 15CE                                    l323 1480  
                                  l308 15E2                                    l325 1482  
       __end_of_StdS_ManageStdServices 04C2                                    l326 1485  
                                  l335 1751                                    l168 0695  
                                  l280 09DD                                    l328 1494  
                                  l281 09E0                                    l516 0AD8  
                                  l540 1594                                    l293 0A21  
                                  l286 09FA                                    l278 09DB  
                                  l543 15AE                                    l295 0A24  
                                  l624 1367                                    l296 0A28  
                                  l288 09FD                                    l801 09D7  
                                  l289 0A01                                    l546 15BA  
                                  l299 0A54                                    l654 04C1  
                                  l496 1466                                    l835 00ED  
                                  l764 083E                                    l692 147C  
                                  l847 0164                                    l856 01C6  
                                  l849 0146                                    l779 089F  
                                  l957 14D0                                    l797 0985  
                                  _PR2 001B                                    _PR4 0416  
                         __CFG_CPD$OFF 0000                                    _PR6 041D  
                         __CFG_BORV$LO 0000                                    wreg 0009  
                         __CFG_IESO$ON 0000                    ??_UpdateLebBlinkSts 0020  
                                 S5514 1000                 Mcu_SetPullUpsSts@PuSts 0020  
                      ??_MainInterrupt 0075                           __CFG_LVP$OFF 0000  
                      ??_MainScheduler 006F                           ___ftdiv@cntr 0056  
                         ___ftdiv@sign 005B                                   l1125 0948  
                                 l1126 0950                                   l1118 0935  
                                 l1209 0B46                                   l1229 08EC  
                                 l1149 0561                                   l4200 1637  
                                 l4300 14CA                                   l4214 158E  
                                 l4230 1372                                   l5030 0A11  
                                 l5022 09E3                                   l4224 1503  
                                 l4320 0912                                   l5120 0A88  
                                 l5024 09EE                                   l5040 0A48  
                                 l4330 093A                                   l4322 091C  
                                 l5114 0A6E                                   l5210 05B9  
                                 l5034 0A2C                                   l4500 03E1  
                                 l4332 0942                                   l4324 0921  
                                 l4316 090B                                   l4412 018F  
                                 l5108 0A58                                   l5036 0A38  
                                 l5028 0A05                                   l5052 15D6  
                                 l4174 16C3                                   l4166 16A5  
                                 l4190 1616                                   l5150 086E  
                                 l5134 0AB4                                   l5142 0ACF  
                                 l5062 0E29                                   l5070 0E71  
                                 l4248 149C                                   l4168 16B1  
                                 l4192 1622                                   l4520 0438  
                                 l4512 0419                                   l5160 088D  
                                 l4600 0537                                   l4432 01EB  
                                 l4424 01BA                                   l4408 0182  
                                 l5128 0A96                                   l5136 0ABB  
                                 l5240 060D                                   l5224 05E2  
                                 l5216 05D0                                   l5312 145A  
                                 l5320 1598                                   l5064 0E40  
                                 l5072 0E7D                                   l4178 16CC  
                                 l4258 08A6                                   l4522 043B  
                                 l4506 03FD                                   l5146 0840  
                                 l4610 0553                                   l4602 053C  
                                 l4434 01EE                                   l4418 0195  
                                 l5330 1468                                   l5226 05E7  
                                 l5082 1488                                   l5074 0E82  
                                 l5066 0E58                                   l4356 160C  
                                 l4196 162E                                   l4268 08C4  
                                 l4524 043E                                   l5156 087F  
                                 l5164 0890                                   l4620 0585  
                                 l4612 055D                                   l4604 0540  
                                 l4444 0208                                   l4380 00F4  
                                 l5180 02E1                                   l5172 02C5  
                                 l5332 1470                                   l5252 062D  
                                 l5308 1453                                   l5316 145D  
                                 l4358 160D                                   l4526 0441  
                                 l4518 0435                                   l4550 04A0  
                                 l4630 05A0                                   l4294 13E5  
                                 l4454 0225                                   l4382 00FE  
                                 l4374 00E9                                   l5190 02F8  
                                 l5270 0675                                   l5238 0608  
                                 l5326 15B1                                   l4536 0460  
                                 l4560 152D                                   l4616 0573  
                                 l4640 0D31                                   l4456 0229  
                                 l4464 0245                                   l4472 025D  
                                 l5336 1473                                   l5280 068F  
                                 l5264 0660                                   l4800 1645  
                                 l4570 04EA                                   l4730 0B57  
                                 l4482 0263                                   l4386 010B  
                                 l5178 02DE                                   l5258 0653  
                                 l5426 0FCD                                   l5450 13FD  
                                 l4580 0500                                   l4724 0B3D  
                                 l4716 0B22                                   l4396 0148  
                                 l4484 00BC                                   l5196 0313  
                                 l5276 068A                                   l5268 066F  
                                 l5428 0FF1                                   l4804 164F  
                                 l4494 03C5                                   l4574 04F1  
                                 l4670 0D9E                                   l4662 0D8A  
                                 l4646 0D47                                   l4726 0B49  
                                 l4718 0B30                                   l4486 02B1  
                                 l5286 069A                                   l5390 09C8  
                                 l4592 051A                                   l4824 0C9E  
                                 l4674 0DA6                                   l4658 0D82  
                                 l4818 0C88                                   l5394 09CE  
                                 l5298 1730                                   l4860 17BE  
                                 l4790 082C                                   l4598 052D  
                                 l4846 0CF8                                   l4838 0CDF  
                                 l4870 17EC                                   l4862 17CC  
                                 l4784 0816                                   l4768 14E7  
                                 l4944 0B63                                   l4778 0810  
                                 l4698 0AF2                                   l4954 0BA7  
                                 l4946 0B6D                                   l4874 17F7  
                                 l4796 0837                                   l4964 0BD6  
                                 l4966 0BE2                                   STR_1 1815  
                                 STR_2 1823                                   STR_3 181D  
                                 STR_4 180C                                   STR_5 180C  
                                 _LATA 010C                                   _LATB 010D  
                                 _LATC 010E                                   u4205 16A8  
                                 u5015 0554                                   u4225 16B2  
                                 u4305 162F                                   u6010 0972  
                                 u4235 16BC                                   u5115 0D8B  
                                 u6020 0980                                   u4245 16C4  
                                 u5125 0D91                                   u5205 0AF9  
                                 u6105 0F6C                                   u4275 1619  
                                 u4515 0930                                   u5155 0DA7  
                                 u5235 0B23                                   u6115 0F80  
                                 u5165 0DAD                                   u5085 0D53  
                                 u4445 14D1                                   u6045 1775  
                                 u6125 0F87                                   u4295 1628  
                                 u4535 093D                                   u5095 0D63  
                                 u4455 14D6                                   u6055 177C  
                                 u6135 0F99                                   u5265 0B3E  
                                 u6065 1790                                   u6145 0FAA  
                                 u5505 17C1                                   u5435 0CB0  
                                 u6155 0FBE                                   u4725 01DA  
                                 u5445 0CC0                                   u5605 0EB8  
                                 u6165 0FD2                                   u6085 0F52  
                                 u5525 17CD                                   u4575 0957  
                                 u4495 0917                                   u5455 0CE0  
                                 u5615 0ECA                                   u6175 0FE6  
                                 u6095 0F59                                   u5535 17E1  
                                 u5465 0CEF                                   u5625 0EDC  
                                 u5545 17ED                                   u5385 1650  
                                 u5475 0CF9                                   u5635 0EEE  
                                 u5395 1657                                   u5805 0856  
                                 u4925 051B                                   u4685 01AE  
                                 u5645 0F00                                   u5565 137A  
                                 u5655 0F28                                   u5575 1385  
                                 u5585 1390                                   u4955 052E  
                                 u5595 0E9B                                   u5675 0B96  
                                 u5695 0BC6                                   u4985 0541  
                                 u5795 0847                                   _WPUA 020C  
                                 _WPUB 020D                                   _WPUC 020E  
                                 _Led1 0148                           __CFG_WRT$OFF 0000  
                        __CFG_FCMEN$ON 0000                                   _main 1323  
                         ___ftpack@arg 0020                           ___ftpack@exp 0023  
                                 fsr0h 0005                                   fsr1h 0007  
                                 fsr0l 0004                                   indf0 0000  
                                 indf1 0001                                   fsr1l 0006  
                                 btemp 007E                        _I2cSlaveAddress 0076  
                                 _utoa 08A0                          __CFG_BOREN$ON 0000  
                                 ltemp 007E                      _Mcu_SetPullUpsSts 134E  
                                 start 002F                                   ttemp 007E  
                                 wtemp 007E                     AppSm@WpuSetCounter 00E3  
                  __end_of_GenerateEvt 1593                          ?_InitSchTimer 0070  
                       ??_Mcu_ClearWdg 0020                         ?_Mcu_SetWdgSts 0070  
                           _BoardReset 1304             __size_of_Mcu_SetDieTempSts 0009  
                        __CFG_MCLRE$ON 0000                     ?_Mcu_SetPullUpsSts 0070  
                         ___ftmul@cntr 005A              __end_of_UpdateLebBlinkSts 1375  
                         ___ftmul@sign 005B                    StringCopy@SourceStr 0020  
                         ___fttol@exp1 0035                           ___fttol@lval 0031  
                      ?_Mcu_InitIntOsc 0070                          __CFG_PLLEN$ON 0000  
                  ??_Mcu_SetPullUpsSts 0020                                  ?_main 0070  
                      __end_of___ftadd 05B8                        __end_of___ftdiv 0D1A  
                      __end_of___ftneg 133C                        __end_of___lldiv 1800  
                                ?_utoa 002E                        __end_of___ftmul 0DCE  
                      __end_of___fttol 0B60                        __end_of___lwdiv 16D1  
                      __end_of___lwmod 163C                                  i1l363 002A  
            Mcu_SetWdgPeriod@WdgPeriod 0021                                  _AppSm 083F  
                  ___lmul@multiplicand 002A             __size_of_I2c_SetI2cAddress 0006  
                     ??_Adc_GetConvSts 0020                   __end_of_Led_MainTask 15BB  
                        ___awtoft@sign 003B                        __end_of_dpowers 180A  
                      __end_of_isdigit 13E7                          ___ftpack@sign 0024  
              __size_of_GetTemperature 0105                                  pclath 000A  
                                ltemp0 007E                                  ltemp1 0082  
                                ltemp2 0086                                  ltemp3 0080  
            __end_of_Mcu_SetPullUpsSts 1357                                  ttemp0 007E  
                                ttemp1 0081                                  ttemp2 0084  
                                ttemp3 0087                                  ttemp4 007F  
                                utoa@c 0035                                  utoa@v 0033  
                                status 0003                        _I2cSlv_MainTask 1452  
                                wtemp0 007E                                  wtemp1 0080  
                                wtemp2 0082                                  wtemp3 0084  
                                wtemp4 0086                                  wtemp5 0088  
                                wtemp6 007F                        __end_of_sprintf 02BF  
                     ??_Adc_ConfigAnCh 0020                         ??_InitSchTimer 0047  
          __size_of_Mcu_SetDieTempMode 0009                        __initialization 0031  
                    _I2c_DataReceiveSm 05B8       StdS_ManageStdServices@DieTempStr 0039  
                         __end_of_main 132A                           __end_of_utoa 0902  
                        AppSm@AppState 00E2                     ?_I2c_DataReceiveSm 00B8  
                          _LedBlinkSts 00EE                                 ??_main 006F  
                        ___fttol@sign1 0030                                 ??_utoa 0032  
       __size_of_I2c_SetI2cAddressMask 0006                       __end_of_TmrBInit 0A55  
                           _ReceiveEvt 15E3          __end_of_I2c_SetI2cAddressMask 131C  
                  ??_I2c_DataReceiveSm 00B9                                 ?_AppSm 0070  
             I2cSlv_I2cDrvHandle@Index 002A                        ReceiveEvt@Event 0020  
                               _ADRESH 009C                                 _ADRESL 009B  
                     ??_ManageProtocol 003F                       __end_of___awtoft 1544  
                               _ANSELA 018C                                 _ANSELB 018D  
                               _ANSELC 018E                       __end_of___ftpack 0967  
                          _GenerateEvt 156B                                 i1l5466 1566  
                               i1l5486 001D                       __end_of___lwtoft 1452  
                           _TempCelStr 02A0                             _TaskNumber 180A  
                  App_MainTask@Options 00B8                        ??_Mcu_SetWdgSts 0020  
        I2c_DataReceiveSm@I2cRxAddress 00E5              __end_of_I2c_DataReceiveSm 06A6  
                       __CFG_PWRTE$OFF 0000                                 _MyFtoa 0771  
                          ?_BoardReset 0070           __end_of_Mcu_EnableInterrupts 1310  
           __size_of_UpdateLebBlinkSts 000B                  __size_of_App_MainTask 0071  
                               ___lmul 163C                                 ___wmul 14C7  
                            ??___ftadd 0045                         __CFG_STVREN$ON 0000  
                            ??___ftdiv 0052                              ??___ftneg 003F  
                            ??___lldiv 0028                              ??___ftmul 0052  
                            ??___fttol 002C                              ??___lwdiv 0024  
               Tmr_TmrBPrSet@IntFreqHz 0032                              ??___lwmod 002C  
          GetDieTemperature@DieTempRes 0027              __size_of_ControlLedDirect 000A  
                      _CheckByteStatus 1380                      _Adc_InitAdcModule 16D1  
                ___ftmul@f3_as_product 0057                              ??_isdigit 0020  
                   ?_Adc_InitAdcModule 0070            __end_of_I2cSlv_I2cDrvHandle 0AD9  
                        ?_LowPowerMode 0070                 Adc_SelectChannel@SelCh 0021  
                 __end_of_Mcu_ClearWdg 1308                __end_of_I2cSlv_MainTask 1467  
                            ??_sprintf 0062                 __size_of_ScheduleTasks 00C5  
             __end_of_Mcu_SetWdgPeriod 13C9                    ??_Adc_InitAdcModule 0020  
                __end_ofi1_GenerateEvt 156B             __size_of_Mcu_SetPullUpsSts 0009  
                        ?_Wdg_MainTask 00B8                __end_of__initialization 00AE  
               Tmr_TmrBPrSet@Prescaler 0034                             ___ftadd@f1 003F  
                           ___ftadd@f2 0042                           _App_MainTask 0967  
               InitSchTimer@TmrBConfig 0048                             ___ftdiv@f1 004F  
                           ___ftdiv@f2 004C                             ___ftdiv@f3 0057  
                           ___ftneg@f1 003C                            _InitCounter 0150  
                           ___awtoft@c 0036                             _StringCopy 1500  
                           ___ftmul@f1 004C                             ___ftmul@f2 004F  
                        __end_of_AppSm 08A0                             ___fttol@f1 0028  
                       __pcstackCOMMON 0070           __size_of_Adc_StartConversion 0003  
                         __pidataBANK1 1308                           __pidataBANK2 166C  
                          _MyFtoa$2438 0068              __end_of_Adc_InitAdcModule 1713  
             __size_of_InitializeTasks 004F                             ___lwtoft@c 0028  
                __size_of_Led_MainTask 0028                  __end_of_I2c_SetConfig 143D  
                          ?_ReceiveEvt 0020               _I2cNewPacketNotification 00EC  
                       ??_LowPowerMode 0021                         _OPTION_REGbits 0095  
                           _SystemInit 1357                   __end_of_InitSchTimer 14C7  
                              ??_AppSm 0041          StdS_ManageStdServices@DieTemp 003D  
                __end_of_Tmr_TmrBPrSet 0E84                    __size_of_BoardReset 0002  
                   _I2c_UpdateTxBuffer 14E3                         _GetTemperature 02BF  
                         sprintf@width 00A7                             __pbssBANK1 00DD  
                           __pbssBANK2 0150                             __pbssBANK3 01A0  
                           __pbssBANK4 0220                             __pbssBANK5 02A0  
                           __pbssBANK6 0320                             __pbssBANK7 03A0  
                           __pbssBANK8 0420                         ??_Wdg_MainTask 006D  
                  ?_I2c_UpdateTxBuffer 0020                      _Mcu_ConfigPullUps 06A6  
           __size_of_I2c_DataReceiveSm 00EE                              ?_TmrBInit 0020  
                              ?_MyFtoa 00AB                     ?_Mcu_ConfigPullUps 0070  
                     ??_Mcu_InitIntOsc 0020                __size_of_Tmr_TmrBConfig 004B  
                           __pmaintext 1323                __end_of_CheckByteStatus 138B  
              __size_of_Tmr_TmrBIrqSet 0028                    ManageProtocol@Index 0040  
                         MyFtoa@number 00AB                                ?___lmul 0026  
                         _Led_MainTask 1593                                ?___wmul 0020  
                        _ScheduleTasks 0F3B                           MyFtoa@string 00AE  
           __end_of_CheckStopBitStatus 1396                             __pintentry 0004  
                   ClearRxBuffer@Index 0021                    ??_Mcu_ConfigPullUps 0020  
                       ___lmul@product 002E                __size_of_CheckAckStatus 000B  
                            ?___awtoft 0036                              ?___ftpack 0020  
                 ??_I2c_UpdateTxBuffer 0021               i1GenerateEvt@EventStatus 0074  
                            ?___lwtoft 0028          __size_of_LedBlinkStateMachine 0088  
                  Wdg_MainTask@Options 00B8                 __size_of_ClearRxBuffer 0011  
               __end_of_GetTemperature 03C4                                _SSP1ADD 0212  
                 _Mcu_EnableInterrupts 130D                 __size_of_ClearTxBuffer 0011  
                              _SSP1BUF 0211                                _SSP1MSK 0213  
                     ?_I2cSlv_MainTask 00B8                        _I2cWriteRequest 0169  
                __end_of_MainInterrupt 002F                  __end_of_MainScheduler 1407  
            __end_of_Mcu_ConfigPullUps 0771                            ?_StringCopy 0020  
                  __size_of_ReceiveEvt 002C                             ??_TmrBInit 0022  
                              _TempCel 00DD                                _TempRes 00E0  
                      __size_of_MyFtoa 008A                         ?_ScheduleTasks 0070  
                      __size_of___lmul 0030                                ___ftadd 04C2  
                              ___ftdiv 0C71                                ___ftneg 1333  
                              ___lldiv 17AD                        __size_of___wmul 001C  
                              ___ftmul 0D1A                                ___fttol 0AD9  
                              ___lwdiv 169C                                ___lwmod 160F  
           __size_of_Adc_InitAdcModule 0042                       _ControlLedDirect 1360  
                           ??___awtoft 0039                             ??___ftpack 0025  
                            _I2cConfig 015A                              _I2cPacket 239D  
                Tmr_TmrBIrqSet@TmrNumb 0021                                __ptext1 1357  
                              __ptext2 131C                                __ptext3 130D  
                              __ptext4 14AE                                __ptext5 1713  
                              __ptext6 0DCE                                __ptext7 163C  
                              __ptext8 17AD                                __ptext9 15BB  
                __size_of_Mcu_ClearWdg 0002                             ??___lwtoft 002B  
                              _dpowers 1800                              _T2CONbits 001C  
                              _isdigit 13D8                          ?_Tmr_StartTmr 0070  
                          ?_SystemInit 0070                      ??_InitializeTasks 016B  
                            _T4CONbits 0417                        _Tmr2IsrCallback 0154  
                ?_Mcu_EnableInterrupts 0070                              _T6CONbits 041E  
                      ?_GetTemperature 0070          I2c_SetI2cAddress@SlaveAddress 0020  
                  Mcu_SetWdgSts@WdgSts 0020                                _sprintf 00B2  
                              clrloop0 1397                   end_of_initialization 00AE  
                         ?_GenerateEvt 0020                 _MainSystemTimebaseFlag 00EF  
                              init_ram 13A2             __end_of_Mcu_SetDieTempMode 1345  
                              initloop 13A3                        ___lldiv@divisor 0020  
                 __end_of_LowPowerMode 13BB                           ??_BoardReset 0020  
                      ___lldiv@counter 002D                          _ClearRxBuffer 1407  
                        _ClearTxBuffer 1418                          StringCopy@Len 0023  
                     ?_CheckByteStatus 0070                           _Mcu_ClearWdg 1306  
             ??_StdS_ManageStdServices 0037                           __pstringtext 1800  
                              utoa@buf 0036                                utoa@val 002E  
                __size_of_InitSchTimer 0019                   __end_of_Wdg_MainTask 147D  
                            _PORTCbits 000E          Mcu_SetDieTempMode@DieTempMode 0020  
                       ??_Tmr_StartTmr 0020                       _InterruptCounter 0152  
    LedBlinkStateMachine@LedInitStatus 0020                       __CFG_FOSC$INTOSC 0000  
                    StringCopy@DestStr 0022                        _Tmr4IsrCallback 0156  
                            _TRISBbits 008D                              _TRISCbits 008E  
                  __size_of_StringCopy 0022                  _I2c_SetI2cAddressMask 1316  
                  _Adc_StartConversion 130A                     __end_of_BoardReset 1306  
          I2c_DataReceiveSm@I2cRxState 00E7                     GetTemperature@Val1 00B1  
                   GetTemperature@Val2 00B4                      ?_Mcu_SetWdgPeriod 0070  
            Tmr_TmrBPrSet@TmrBPrCfgSts 003F             __size_of_Mcu_ConfigPullUps 00CB  
                            _CmdBuffer 0320                     ??_Mcu_SetWdgPeriod 0020  
                          ___ftdiv@exp 005A                __size_of_Adc_GetConvSts 0004  
                       ?_ClearRxBuffer 0070                        ??_ScheduleTasks 01E6  
                    App_MainTask@F4020 01C8                      App_MainTask@F4040 01DA  
                       _Tmr_TmrBConfig 1713                Tmr_TmrBPrSet@Postscaler 0035  
                __end_of_Mcu_SetWdgSts 1333                           _InitSchTimer 14AE  
                       ?_ClearTxBuffer 0070                    __size_of_SystemInit 0009  
                       _Tmr_TmrBIrqSet 15BB                            ___ftmul@exp 0056  
          Mcu_SetDieTempSts@DieTempSts 0020                   ?_Adc_StartConversion 0070  
                       __end_of_MyFtoa 07FB             Adc_InitAdcModule@AdcConfig 0020  
                            MyFtoa@ret 0066                         __end_of___lmul 166C  
                       _CheckAckStatus 1375                         __end_of___wmul 14E3  
              __size_of_Adc_ConfigAnCh 0089                      App_MainTask@WpuCh 00BF  
                         ??_ReceiveEvt 0022                 ??_Mcu_EnableInterrupts 0020  
                  start_initialization 0031                        _Tmr6IsrCallback 0158  
                            _RepBuffer 0220             I2c_InitI2cModule@I2cConfig 0024  
         __size_of_I2cSlv_I2cDrvHandle 0084                 __end_of_Tmr_TmrBConfig 175E  
               __end_of_Tmr_TmrBIrqSet 15E3                              _TaskTable 0120  
                          _SystemState 00EB                               ??_MyFtoa 0066  
                   __end_of_ReceiveEvt 160F                __size_of_ManageProtocol 003E  
                ??_Adc_StartConversion 0020                  Tmr_TmrBConfig@TmrNumb 0046  
               __end_of_CheckAckStatus 1380                               ??___lmul 002E  
                             ??___wmul 0024                      __size_of_TmrBInit 007D  
                         _RepBufferLen 0077        __size_of_StdS_ManageStdServices 00FE  
                          __pdataBANK1 00EE                            __pdataBANK2 0120  
                   ClearTxBuffer@Index 0021                 __size_ofi1_GenerateEvt 0027  
                  Tmr_StartTmr@TmrNumb 0020                      __size_of___awtoft 0022  
                    __size_of___ftpack 0065                            __pbssBIGRAM 239D  
                   __end_of_TaskNumber 180C                 ?_I2c_SetI2cAddressMask 0070  
                          __pbssCOMMON 0076                              ___latbits 0002  
                App_MainTask@AdcConfig 00B9                      __size_of___lwtoft 0015  
                        __pcstackBANK0 0020                          __pcstackBANK1 00A0  
                        __pcstackBANK2 016B                          __pcstackBANK3 01E6  
                   _CheckStopBitStatus 138B                 GenerateEvt@EventStatus 0024  
                         _isdigit$2094 0020               __end_of_ControlLedDirect 136A  
                __size_of_LowPowerMode 000D                    ?_CheckStopBitStatus 0070  
         __end_of_LedBlinkStateMachine 0BE8                            sprintf@ccnt 00A1  
                          sprintf@flag 00A6                        ??_ClearRxBuffer 0020  
                          sprintf@prec 00A0                   __size_of_GenerateEvt 0028  
                      ?_Tmr_TmrBConfig 0044                        ??_ClearTxBuffer 0020  
                      ?_Tmr_TmrBIrqSet 0020                   __end_of_Tmr_StartTmr 1495  
                         ??_StringCopy 0024                 __size_of_I2c_SetConfig 0014  
                     ___lwdiv@dividend 0022                       GenerateEvt@Event 0020  
               __size_of_Tmr_TmrBPrSet 00B6                  __size_of_Wdg_MainTask 0016  
                    _Adc_SelectChannel 13C9                App_MainTask@AnalogChSel 00D1  
                      ?_CheckAckStatus 0070                Tmr_TmrBIrqSet@TmrIrqSts 0020  
                             ?___ftadd 003F                        _InitializeTasks 175E  
                             ?___ftdiv 004C                               ?___ftneg 003C  
                             ?___lldiv 0020                               ?___ftmul 004C  
                             ?___fttol 0028                    _I2cReplyPacketReady 0078  
                             ?___lwdiv 0020                               ?___lwmod 0028  
                   ?_Adc_SelectChannel 0070                   ??_CheckStopBitStatus 0020  
                            __pswtext1 1000            __size_of_I2c_UpdateTxBuffer 001D  
                     ??_GetTemperature 006B                            _I2cRxBuffer 0420  
                      MyFtoa@precision 00AF               I2c_DataReceiveSm@Options 00B8  
                Adc_ConfigAnCh@AnChSel 0020                            _I2cTxBuffer 03A0  
                         ??_SystemInit 004E                               ?_isdigit 0070  
       InitializeTasks@ActiveTaskIndex 006E                    ??_Adc_SelectChannel 0020  
                       __size_of_AppSm 0061                           _LowPowerMode 13AE  
                     __CFG_WDTE$SWDTEN 0000                     __end_of_StringCopy 1522  
                     ___lwdiv@quotient 0026                 _StdS_ManageStdServices 03C4  
                             ?_sprintf 005C                          i1_GenerateEvt 1544  
                         _Wdg_MainTask 1467                         ___wmul@product 0024  
                             _LATCbits 010E                         _Adc_GetConvSts 07FB  
                            clear_ram0 1396               __size_of_I2cSlv_MainTask 0015  
                             _PIE1bits 0091                               _PIE3bits 0093  
                        _I2cSetAddress 0167              __end_of_Adc_SelectChannel 13D8  
                    _I2c_InitI2cModule 0E84                               _PIR1bits 0011  
                             _PIR3bits 0013             Adc_GetConvResult@AdcResult 0023  
                   __end_of_SystemInit 1360                     ?_I2c_InitI2cModule 0070  
                             _SSP1CON1 0215                               _SSP1CON2 0216  
                             _SSP1CON3 0217                               _SSP1STAT 0214  
                       _Adc_ConfigAnCh 0BE8                     _Mcu_SetDieTempMode 133C  
               __size_of_MainInterrupt 002B             I2c_DataReceiveSm@I2cRxFlag 00E6  
               __size_of_MainScheduler 0010                             _ADCON0bits 009D  
                           _ADCON1bits 009E                      ___wmul@multiplier 0020  
                  ??_I2c_InitI2cModule 0022                __size_of_Mcu_InitIntOsc 0007  
                             _WPUAbits 020C                               _WPUBbits 020D  
                             _WPUCbits 020E                          _I2c_SetConfig 1429  
                  ?_Mcu_SetDieTempMode 0070                          _Tmr_TmrBPrSet 0DCE  
                         _TempResArray 01A0                      ___lmul@multiplier 0026  
               I2cSlv_MainTask@Options 00B8                         ?i1_GenerateEvt 0070  
             Tmr_TmrBConfig@TmrBConfig 0044                 __end_of_Adc_GetConvSts 07FF  
         LedBlinkStateMachine@LedBlink 0025                          ?_App_MainTask 00B8  
            __end_of_I2c_InitI2cModule 0F3B                      _Adc_GetConvResult 13E7  
              __end_of_InitializeTasks 17AD                   ??_Mcu_SetDieTempMode 0020  
                             _TmrBInit 09D8                     ?_Adc_GetConvResult 0020  
                       _ManageProtocol 0801                   Tmr_TmrBPrSet@Divisor 0040  
               __end_of_Adc_ConfigAnCh 0C71              __size_of_Mcu_SetWdgPeriod 000E  
                     __size_of___ftadd 00F6                       __size_of___ftdiv 00A9  
                     __size_of___ftneg 0009                       __size_of___lldiv 0053  
                     __size_of___ftmul 00B4                    ??_Adc_GetConvResult 0022  
                     __size_of___fttol 0087                    _I2cSlv_I2cDrvHandle 0A55  
                     __size_of___lwdiv 0035                   Tmr_TmrBPrSet@TmrNumb 003E  
                     __size_of___lwmod 002D                               ___awtoft 1522  
                             ___ftpack 0902                      _GetDieTemperature 1495  
                           _ANSELAbits 018C                               ___lwtoft 143D  
                           _ANSELBbits 018D                             _ANSELCbits 018E  
             __size_of_CheckByteStatus 000B                   _LedBlinkStateMachine 0B60  
                       ?_I2c_SetConfig 0070                             sprintf@val 00A4  
                   ?_GetDieTemperature 0025                         ?_Tmr_TmrBPrSet 0032  
                     __size_of_isdigit 000F                        ___lwdiv@divisor 0020  
                      ___lwdiv@counter 0025                               __ptext10 147D  
                             __ptext11 09D8                               __ptext20 13BB  
                             __ptext12 13F7                               __ptext21 1306  
                             __ptext13 0F3B                               __ptext30 0A55  
                             __ptext22 0B60                               __ptext14 175E  
                             __ptext31 14E3                               __ptext23 138B  
                             __ptext15 0967                               __ptext40 0C71  
                             __ptext32 1316                               __ptext24 1380  
                             __ptext16 1593                               __ptext41 0771  
                             __ptext33 1310                               __ptext25 1375  
                             __ptext17 1452                               __ptext50 0902  
                             __ptext42 00B2                               __ptext34 134E  
                             __ptext26 1429                               __ptext18 05B8  
                             __ptext51 083F                               __ptext43 13D8  
                             __ptext35 1345                               __ptext27 0E84  
                             __ptext19 1467                               __ptext60 132A  
                             __ptext52 0801                               __ptext44 14C7  
                             __ptext36 133C                               __ptext28 1418  
                             __ptext61 1495                               __ptext53 03C4  
                             __ptext45 0AD9                               __ptext37 06A6  
                             __ptext29 1407                               __ptext70 16D1  
                             __ptext62 130A                               __ptext54 08A0  
                             __ptext46 1333                               __ptext38 02BF  
                             __ptext71 0BE8                               __ptext63 13C9  
                             __ptext55 160F                               __ptext47 0D1A  
                             __ptext39 143D                               __ptext64 07FB  
                             __ptext56 169C                               __ptext48 04C2  
                             __ptext73 1544                               __ptext65 13E7  
                             __ptext57 136A                               __ptext49 1522  
                             __ptext66 156B                               __ptext58 1500  
                             __ptext67 1360                               __ptext59 13AE  
                             __ptext68 1304                               __ptext69 15E3  
                         _SSP1CON1bits 0215                I2c_DataReceiveSm@OpType 00E8  
                     __size_of_sprintf 020D                    ??_GetDieTemperature 0027  
                 ?_I2cSlv_I2cDrvHandle 0070                  __size_of_Tmr_StartTmr 0018  
            __end_of_Adc_GetConvResult 13F7                         ??_App_MainTask 006D  
                        _MainInterrupt 0004                     i1GenerateEvt@Event 0070  
                      ?_Adc_GetConvSts 0070                          _MainScheduler 13F7  
                   TmrBInit@Postscaler 0021                          __size_of_main 0007  
                        __size_of_utoa 0062                    Led_MainTask@Options 00B8  
               __end_of_ManageProtocol 083F           I2c_UpdateTxBuffer@DataBuffer 0023  
           __size_of_Adc_SelectChannel 000F                  __end_of_ScheduleTasks 1000  
                        ?_Led_MainTask 00B8                        ?_Adc_ConfigAnCh 0070  
                             int$flags 007E                      _Mcu_SetDieTempSts 1345  
                    ??_I2cSlv_MainTask 006D                        StringCopy@Index 0028  
         ScheduleTasks@ActiveTaskIndex 006E              __end_of_GetDieTemperature 14AE  
                   ?_Mcu_SetDieTempSts 0070                ??_I2c_SetI2cAddressMask 0020  
                ?_LedBlinkStateMachine 0020                            _OSCSTATbits 009A  
                           _INTCONbits 000B                           _Tmr_StartTmr 147D  
                  ??_Mcu_SetDieTempSts 0020                             _FVRCONbits 0117  
                 _I2cNewTxNotification 0165          __size_of_Mcu_EnableInterrupts 0003  
               __size_of_Mcu_SetWdgSts 0009                               isdigit@c 0021  
                      ??i1_GenerateEvt 0072                      _I2c_SetI2cAddress 1310  
                     ??_Tmr_TmrBConfig 0045                  ??_I2cSlv_I2cDrvHandle 0025  
                     ??_Tmr_TmrBIrqSet 0021                               intlevel1 0000  
                       ?_MainInterrupt 0070                              sprintf@ap 00A3  
                            sprintf@sp 00A9                      TmrBInit@Prescaler 0020  
                       ?_MainScheduler 0070                     ?_I2c_SetI2cAddress 0070  
             I2c_UpdateTxBuffer@Length 0020                      ?_ControlLedDirect 0070  
                     ___lwmod@dividend 002A                 I2c_DataReceiveSm@Index 006D  
          __end_of_Adc_StartConversion 130D                       ___lldiv@dividend 0024  
               Mcu_ConfigPullUps@WpuCh 0020             __size_of_I2c_InitI2cModule 00B7  
                    __CFG_CLKOUTEN$OFF 0000                       ??_CheckAckStatus 0020  
                      ?_ManageProtocol 0070                     ??_ControlLedDirect 0020  
           I2c_DataReceiveSm@RxCounter 00E9                       ?_InitializeTasks 0070  
                           _OSCCONbits 0099                    ??_I2c_SetI2cAddress 0020  
            __end_of_Mcu_SetDieTempSts 134E                         ??_Led_MainTask 006D  
           I2c_DataReceiveSm@TxCounter 00EA                        ??_I2c_SetConfig 0020  
                             utoa@base 0030                         _Mcu_InitIntOsc 131C  
                      ??_Tmr_TmrBPrSet 0036                               sprintf@c 00AA  
                             sprintf@f 005C                I2c_UpdateTxBuffer@Index 0024  
                     ___lldiv@quotient 0029                        ___lwmod@divisor 0028  
              ?_StdS_ManageStdServices 0070                        ___lwmod@counter 002D  
            __end_of_I2c_SetI2cAddress 1316                  ReceiveEvt@EventStatus 0024  
                           _WDTCONbits 0097                      ??_CheckByteStatus 0020  
                        ??_GenerateEvt 0022                        TmrBInit@TmrNumb 0023  
           __size_of_Adc_GetConvResult 0010  I2c_SetI2cAddressMask@SlaveAddressMask 0020  
I2cSlv_I2cDrvHandle@I2cReceiveMsgState 00E4                  __end_of_ClearRxBuffer 1418  
                __end_of_ClearTxBuffer 1429                          ?_Mcu_ClearWdg 0070  
                        _Mcu_SetWdgSts 132A  
