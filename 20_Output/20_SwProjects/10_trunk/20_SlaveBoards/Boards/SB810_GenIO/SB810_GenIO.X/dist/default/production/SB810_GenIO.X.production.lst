

Microchip Technology PIC LITE Macro Assembler V1.38 build -256452561 
                                                                                               Sun Mar 24 11:38:24 2019

Microchip Technology Omniscient Code Generator v1.38 (Free mode) build 201607010351
     1                           	processor	16F1829
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	idataCOMMON,global,class=CODE,delta=2
     5                           	psect	idataBANK0,global,class=CODE,delta=2
     6                           	psect	idataBANK2,global,class=CODE,delta=2
     7                           	psect	stringtext,global,class=STRCODE,delta=2
     8                           	psect	cinit,global,class=CODE,merge=1,delta=2
     9                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
    10                           	psect	dataCOMMON,global,class=COMMON,space=1,delta=1
    11                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    12                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1
    13                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    14                           	psect	dataBANK2,global,class=BANK2,space=1,delta=1
    15                           	psect	bssBANK3,global,class=BANK3,space=1,delta=1
    16                           	psect	bssBANK4,global,class=BANK4,space=1,delta=1
    17                           	psect	bssBANK5,global,class=BANK5,space=1,delta=1
    18                           	psect	bssBANK6,global,class=BANK6,space=1,delta=1
    19                           	psect	inittext,global,class=CODE,delta=2
    20                           	psect	clrtext,global,class=CODE,delta=2
    21                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1
    22                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    23                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    24                           	psect	maintext,global,class=CODE,merge=1,split=1,delta=2
    25                           	psect	text1,local,class=CODE,merge=1,delta=2
    26                           	psect	text2,local,class=CODE,merge=1,delta=2
    27                           	psect	text3,local,class=CODE,merge=1,delta=2
    28                           	psect	text4,local,class=CODE,merge=1,delta=2
    29                           	psect	text5,local,class=CODE,merge=1,delta=2
    30                           	psect	text6,local,class=CODE,merge=1,delta=2
    31                           	psect	text7,local,class=CODE,merge=1,delta=2
    32                           	psect	text8,local,class=CODE,merge=1,delta=2
    33                           	psect	text9,local,class=CODE,merge=1,delta=2
    34                           	psect	text10,local,class=CODE,merge=1,delta=2
    35                           	psect	text11,local,class=CODE,merge=1,delta=2
    36                           	psect	text12,local,class=CODE,merge=1,delta=2
    37                           	psect	text13,local,class=CODE,merge=1,delta=2
    38                           	psect	text14,local,class=CODE,merge=1,delta=2
    39                           	psect	text15,local,class=CODE,merge=1,delta=2
    40                           	psect	text16,local,class=CODE,merge=1,delta=2
    41                           	psect	text17,local,class=CODE,merge=1,delta=2
    42                           	psect	text18,local,class=CODE,merge=1,delta=2
    43                           	psect	text19,local,class=CODE,merge=1,delta=2
    44                           	psect	swtext1,local,class=CONST,delta=2
    45                           	psect	text20,local,class=CODE,merge=1,delta=2
    46                           	psect	text21,local,class=CODE,merge=1,delta=2
    47                           	psect	text22,local,class=CODE,merge=1,delta=2
    48                           	psect	text23,local,class=CODE,merge=1,delta=2
    49                           	psect	text24,local,class=CODE,merge=1,delta=2
    50                           	psect	text25,local,class=CODE,merge=1,delta=2
    51                           	psect	text26,local,class=CODE,merge=1,delta=2
    52                           	psect	text27,local,class=CODE,merge=1,delta=2
    53                           	psect	text28,local,class=CODE,merge=1,delta=2
    54                           	psect	text29,local,class=CODE,merge=1,delta=2
    55                           	psect	text30,local,class=CODE,merge=1,delta=2
    56                           	psect	text31,local,class=CODE,merge=1,delta=2
    57                           	psect	text32,local,class=CODE,merge=1,delta=2
    58                           	psect	text33,local,class=CODE,merge=1,delta=2
    59                           	psect	text34,local,class=CODE,merge=1,delta=2
    60                           	psect	text35,local,class=CODE,merge=1,delta=2
    61                           	psect	text36,local,class=CODE,merge=1,delta=2
    62                           	psect	text37,local,class=CODE,merge=1,delta=2
    63                           	psect	text38,local,class=CODE,merge=1,delta=2
    64                           	psect	text39,local,class=CODE,merge=1,delta=2
    65                           	psect	text40,local,class=CODE,merge=1,delta=2
    66                           	psect	text41,local,class=CODE,merge=1,delta=2
    67                           	psect	text42,local,class=CODE,merge=1,delta=2
    68                           	psect	text43,local,class=CODE,merge=1,delta=2
    69                           	psect	text44,local,class=CODE,merge=1,delta=2
    70                           	psect	text45,local,class=CODE,merge=1,delta=2
    71                           	psect	text46,local,class=CODE,merge=1,delta=2
    72                           	psect	text47,local,class=CODE,merge=1,delta=2
    73                           	psect	text48,local,class=CODE,merge=1,delta=2
    74                           	psect	text49,local,class=CODE,merge=1,delta=2
    75                           	psect	text50,local,class=CODE,merge=1,delta=2
    76                           	psect	text51,local,class=CODE,merge=1,delta=2
    77                           	psect	text52,local,class=CODE,merge=1,delta=2
    78                           	psect	text53,local,class=CODE,merge=1,delta=2
    79                           	psect	text54,local,class=CODE,merge=1,delta=2
    80                           	psect	text55,local,class=CODE,merge=1,delta=2
    81                           	psect	text56,local,class=CODE,merge=1,delta=2
    82                           	psect	text57,local,class=CODE,merge=1,delta=2
    83                           	psect	text58,local,class=CODE,merge=1,delta=2
    84                           	psect	text59,local,class=CODE,merge=1,delta=2
    85                           	psect	text60,local,class=CODE,merge=1,delta=2
    86                           	psect	text61,local,class=CODE,merge=1,delta=2
    87                           	psect	text62,local,class=CODE,merge=1,delta=2
    88                           	psect	text63,local,class=CODE,merge=1,delta=2
    89                           	psect	text64,local,class=CODE,merge=1,delta=2
    90                           	psect	text65,local,class=CODE,merge=1,delta=2
    91                           	psect	text66,local,class=CODE,merge=1,delta=2
    92                           	psect	text67,local,class=CODE,merge=1,delta=2
    93                           	psect	text68,local,class=CODE,merge=1,delta=2
    94                           	psect	text69,local,class=CODE,merge=1,delta=2
    95                           	psect	text70,local,class=CODE,merge=1,delta=2
    96                           	psect	text71,local,class=CODE,merge=1,delta=2
    97                           	psect	text72,local,class=CODE,merge=1,delta=2
    98                           	psect	text73,local,class=CODE,merge=1,delta=2
    99                           	psect	intentry,global,class=CODE,delta=2
   100                           	psect	text75,local,class=CODE,merge=1,delta=2
   101                           	dabs	1,0x620,48
   102                           	dabs	1,0x5CD,35
   103                           	dabs	1,0x239D,0,_I2cPacket
   104                           	dabs	1,0x7E,2
   105  0000                     	;# 
   106  0001                     	;# 
   107  0002                     	;# 
   108  0003                     	;# 
   109  0004                     	;# 
   110  0005                     	;# 
   111  0006                     	;# 
   112  0007                     	;# 
   113  0008                     	;# 
   114  0009                     	;# 
   115  000A                     	;# 
   116  000B                     	;# 
   117  000C                     	;# 
   118  000D                     	;# 
   119  000E                     	;# 
   120  0011                     	;# 
   121  0012                     	;# 
   122  0013                     	;# 
   123  0014                     	;# 
   124  0015                     	;# 
   125  0016                     	;# 
   126  0016                     	;# 
   127  0017                     	;# 
   128  0018                     	;# 
   129  0019                     	;# 
   130  001A                     	;# 
   131  001B                     	;# 
   132  001C                     	;# 
   133  001E                     	;# 
   134  001F                     	;# 
   135  008C                     	;# 
   136  008D                     	;# 
   137  008E                     	;# 
   138  0091                     	;# 
   139  0092                     	;# 
   140  0093                     	;# 
   141  0094                     	;# 
   142  0095                     	;# 
   143  0096                     	;# 
   144  0097                     	;# 
   145  0098                     	;# 
   146  0099                     	;# 
   147  009A                     	;# 
   148  009B                     	;# 
   149  009B                     	;# 
   150  009C                     	;# 
   151  009D                     	;# 
   152  009E                     	;# 
   153  010C                     	;# 
   154  010D                     	;# 
   155  010E                     	;# 
   156  0111                     	;# 
   157  0112                     	;# 
   158  0113                     	;# 
   159  0114                     	;# 
   160  0115                     	;# 
   161  0116                     	;# 
   162  0117                     	;# 
   163  0118                     	;# 
   164  0119                     	;# 
   165  011A                     	;# 
   166  011B                     	;# 
   167  011D                     	;# 
   168  011E                     	;# 
   169  018C                     	;# 
   170  018D                     	;# 
   171  018E                     	;# 
   172  0191                     	;# 
   173  0191                     	;# 
   174  0192                     	;# 
   175  0193                     	;# 
   176  0193                     	;# 
   177  0193                     	;# 
   178  0194                     	;# 
   179  0195                     	;# 
   180  0196                     	;# 
   181  0199                     	;# 
   182  019A                     	;# 
   183  019B                     	;# 
   184  019B                     	;# 
   185  019C                     	;# 
   186  019D                     	;# 
   187  019E                     	;# 
   188  019F                     	;# 
   189  020C                     	;# 
   190  020D                     	;# 
   191  020E                     	;# 
   192  0211                     	;# 
   193  0211                     	;# 
   194  0212                     	;# 
   195  0212                     	;# 
   196  0213                     	;# 
   197  0213                     	;# 
   198  0214                     	;# 
   199  0214                     	;# 
   200  0215                     	;# 
   201  0215                     	;# 
   202  0215                     	;# 
   203  0216                     	;# 
   204  0216                     	;# 
   205  0217                     	;# 
   206  0217                     	;# 
   207  0219                     	;# 
   208  021A                     	;# 
   209  021B                     	;# 
   210  021C                     	;# 
   211  021D                     	;# 
   212  021E                     	;# 
   213  021F                     	;# 
   214  0291                     	;# 
   215  0291                     	;# 
   216  0292                     	;# 
   217  0293                     	;# 
   218  0294                     	;# 
   219  0295                     	;# 
   220  0295                     	;# 
   221  0296                     	;# 
   222  0298                     	;# 
   223  0298                     	;# 
   224  0299                     	;# 
   225  029A                     	;# 
   226  029B                     	;# 
   227  029C                     	;# 
   228  029D                     	;# 
   229  029E                     	;# 
   230  0311                     	;# 
   231  0311                     	;# 
   232  0312                     	;# 
   233  0313                     	;# 
   234  0318                     	;# 
   235  0318                     	;# 
   236  0319                     	;# 
   237  031A                     	;# 
   238  038C                     	;# 
   239  038D                     	;# 
   240  038E                     	;# 
   241  0391                     	;# 
   242  0392                     	;# 
   243  0393                     	;# 
   244  0394                     	;# 
   245  0395                     	;# 
   246  0396                     	;# 
   247  039A                     	;# 
   248  039C                     	;# 
   249  039D                     	;# 
   250  039E                     	;# 
   251  039F                     	;# 
   252  0415                     	;# 
   253  0416                     	;# 
   254  0417                     	;# 
   255  041C                     	;# 
   256  041D                     	;# 
   257  041E                     	;# 
   258  0FE4                     	;# 
   259  0FE5                     	;# 
   260  0FE6                     	;# 
   261  0FE7                     	;# 
   262  0FE8                     	;# 
   263  0FE9                     	;# 
   264  0FEA                     	;# 
   265  0FEB                     	;# 
   266  0FED                     	;# 
   267  0FEE                     	;# 
   268  0FEF                     	;# 
   269  0000                     	;# 
   270  0001                     	;# 
   271  0002                     	;# 
   272  0003                     	;# 
   273  0004                     	;# 
   274  0005                     	;# 
   275  0006                     	;# 
   276  0007                     	;# 
   277  0008                     	;# 
   278  0009                     	;# 
   279  000A                     	;# 
   280  000B                     	;# 
   281  000C                     	;# 
   282  000D                     	;# 
   283  000E                     	;# 
   284  0011                     	;# 
   285  0012                     	;# 
   286  0013                     	;# 
   287  0014                     	;# 
   288  0015                     	;# 
   289  0016                     	;# 
   290  0016                     	;# 
   291  0017                     	;# 
   292  0018                     	;# 
   293  0019                     	;# 
   294  001A                     	;# 
   295  001B                     	;# 
   296  001C                     	;# 
   297  001E                     	;# 
   298  001F                     	;# 
   299  008C                     	;# 
   300  008D                     	;# 
   301  008E                     	;# 
   302  0091                     	;# 
   303  0092                     	;# 
   304  0093                     	;# 
   305  0094                     	;# 
   306  0095                     	;# 
   307  0096                     	;# 
   308  0097                     	;# 
   309  0098                     	;# 
   310  0099                     	;# 
   311  009A                     	;# 
   312  009B                     	;# 
   313  009B                     	;# 
   314  009C                     	;# 
   315  009D                     	;# 
   316  009E                     	;# 
   317  010C                     	;# 
   318  010D                     	;# 
   319  010E                     	;# 
   320  0111                     	;# 
   321  0112                     	;# 
   322  0113                     	;# 
   323  0114                     	;# 
   324  0115                     	;# 
   325  0116                     	;# 
   326  0117                     	;# 
   327  0118                     	;# 
   328  0119                     	;# 
   329  011A                     	;# 
   330  011B                     	;# 
   331  011D                     	;# 
   332  011E                     	;# 
   333  018C                     	;# 
   334  018D                     	;# 
   335  018E                     	;# 
   336  0191                     	;# 
   337  0191                     	;# 
   338  0192                     	;# 
   339  0193                     	;# 
   340  0193                     	;# 
   341  0193                     	;# 
   342  0194                     	;# 
   343  0195                     	;# 
   344  0196                     	;# 
   345  0199                     	;# 
   346  019A                     	;# 
   347  019B                     	;# 
   348  019B                     	;# 
   349  019C                     	;# 
   350  019D                     	;# 
   351  019E                     	;# 
   352  019F                     	;# 
   353  020C                     	;# 
   354  020D                     	;# 
   355  020E                     	;# 
   356  0211                     	;# 
   357  0211                     	;# 
   358  0212                     	;# 
   359  0212                     	;# 
   360  0213                     	;# 
   361  0213                     	;# 
   362  0214                     	;# 
   363  0214                     	;# 
   364  0215                     	;# 
   365  0215                     	;# 
   366  0215                     	;# 
   367  0216                     	;# 
   368  0216                     	;# 
   369  0217                     	;# 
   370  0217                     	;# 
   371  0219                     	;# 
   372  021A                     	;# 
   373  021B                     	;# 
   374  021C                     	;# 
   375  021D                     	;# 
   376  021E                     	;# 
   377  021F                     	;# 
   378  0291                     	;# 
   379  0291                     	;# 
   380  0292                     	;# 
   381  0293                     	;# 
   382  0294                     	;# 
   383  0295                     	;# 
   384  0295                     	;# 
   385  0296                     	;# 
   386  0298                     	;# 
   387  0298                     	;# 
   388  0299                     	;# 
   389  029A                     	;# 
   390  029B                     	;# 
   391  029C                     	;# 
   392  029D                     	;# 
   393  029E                     	;# 
   394  0311                     	;# 
   395  0311                     	;# 
   396  0312                     	;# 
   397  0313                     	;# 
   398  0318                     	;# 
   399  0318                     	;# 
   400  0319                     	;# 
   401  031A                     	;# 
   402  038C                     	;# 
   403  038D                     	;# 
   404  038E                     	;# 
   405  0391                     	;# 
   406  0392                     	;# 
   407  0393                     	;# 
   408  0394                     	;# 
   409  0395                     	;# 
   410  0396                     	;# 
   411  039A                     	;# 
   412  039C                     	;# 
   413  039D                     	;# 
   414  039E                     	;# 
   415  039F                     	;# 
   416  0415                     	;# 
   417  0416                     	;# 
   418  0417                     	;# 
   419  041C                     	;# 
   420  041D                     	;# 
   421  041E                     	;# 
   422  0FE4                     	;# 
   423  0FE5                     	;# 
   424  0FE6                     	;# 
   425  0FE7                     	;# 
   426  0FE8                     	;# 
   427  0FE9                     	;# 
   428  0FEA                     	;# 
   429  0FEB                     	;# 
   430  0FED                     	;# 
   431  0FEE                     	;# 
   432  0FEF                     	;# 
   433  0000                     	;# 
   434  0001                     	;# 
   435  0002                     	;# 
   436  0003                     	;# 
   437  0004                     	;# 
   438  0005                     	;# 
   439  0006                     	;# 
   440  0007                     	;# 
   441  0008                     	;# 
   442  0009                     	;# 
   443  000A                     	;# 
   444  000B                     	;# 
   445  000C                     	;# 
   446  000D                     	;# 
   447  000E                     	;# 
   448  0011                     	;# 
   449  0012                     	;# 
   450  0013                     	;# 
   451  0014                     	;# 
   452  0015                     	;# 
   453  0016                     	;# 
   454  0016                     	;# 
   455  0017                     	;# 
   456  0018                     	;# 
   457  0019                     	;# 
   458  001A                     	;# 
   459  001B                     	;# 
   460  001C                     	;# 
   461  001E                     	;# 
   462  001F                     	;# 
   463  008C                     	;# 
   464  008D                     	;# 
   465  008E                     	;# 
   466  0091                     	;# 
   467  0092                     	;# 
   468  0093                     	;# 
   469  0094                     	;# 
   470  0095                     	;# 
   471  0096                     	;# 
   472  0097                     	;# 
   473  0098                     	;# 
   474  0099                     	;# 
   475  009A                     	;# 
   476  009B                     	;# 
   477  009B                     	;# 
   478  009C                     	;# 
   479  009D                     	;# 
   480  009E                     	;# 
   481  010C                     	;# 
   482  010D                     	;# 
   483  010E                     	;# 
   484  0111                     	;# 
   485  0112                     	;# 
   486  0113                     	;# 
   487  0114                     	;# 
   488  0115                     	;# 
   489  0116                     	;# 
   490  0117                     	;# 
   491  0118                     	;# 
   492  0119                     	;# 
   493  011A                     	;# 
   494  011B                     	;# 
   495  011D                     	;# 
   496  011E                     	;# 
   497  018C                     	;# 
   498  018D                     	;# 
   499  018E                     	;# 
   500  0191                     	;# 
   501  0191                     	;# 
   502  0192                     	;# 
   503  0193                     	;# 
   504  0193                     	;# 
   505  0193                     	;# 
   506  0194                     	;# 
   507  0195                     	;# 
   508  0196                     	;# 
   509  0199                     	;# 
   510  019A                     	;# 
   511  019B                     	;# 
   512  019B                     	;# 
   513  019C                     	;# 
   514  019D                     	;# 
   515  019E                     	;# 
   516  019F                     	;# 
   517  020C                     	;# 
   518  020D                     	;# 
   519  020E                     	;# 
   520  0211                     	;# 
   521  0211                     	;# 
   522  0212                     	;# 
   523  0212                     	;# 
   524  0213                     	;# 
   525  0213                     	;# 
   526  0214                     	;# 
   527  0214                     	;# 
   528  0215                     	;# 
   529  0215                     	;# 
   530  0215                     	;# 
   531  0216                     	;# 
   532  0216                     	;# 
   533  0217                     	;# 
   534  0217                     	;# 
   535  0219                     	;# 
   536  021A                     	;# 
   537  021B                     	;# 
   538  021C                     	;# 
   539  021D                     	;# 
   540  021E                     	;# 
   541  021F                     	;# 
   542  0291                     	;# 
   543  0291                     	;# 
   544  0292                     	;# 
   545  0293                     	;# 
   546  0294                     	;# 
   547  0295                     	;# 
   548  0295                     	;# 
   549  0296                     	;# 
   550  0298                     	;# 
   551  0298                     	;# 
   552  0299                     	;# 
   553  029A                     	;# 
   554  029B                     	;# 
   555  029C                     	;# 
   556  029D                     	;# 
   557  029E                     	;# 
   558  0311                     	;# 
   559  0311                     	;# 
   560  0312                     	;# 
   561  0313                     	;# 
   562  0318                     	;# 
   563  0318                     	;# 
   564  0319                     	;# 
   565  031A                     	;# 
   566  038C                     	;# 
   567  038D                     	;# 
   568  038E                     	;# 
   569  0391                     	;# 
   570  0392                     	;# 
   571  0393                     	;# 
   572  0394                     	;# 
   573  0395                     	;# 
   574  0396                     	;# 
   575  039A                     	;# 
   576  039C                     	;# 
   577  039D                     	;# 
   578  039E                     	;# 
   579  039F                     	;# 
   580  0415                     	;# 
   581  0416                     	;# 
   582  0417                     	;# 
   583  041C                     	;# 
   584  041D                     	;# 
   585  041E                     	;# 
   586  0FE4                     	;# 
   587  0FE5                     	;# 
   588  0FE6                     	;# 
   589  0FE7                     	;# 
   590  0FE8                     	;# 
   591  0FE9                     	;# 
   592  0FEA                     	;# 
   593  0FEB                     	;# 
   594  0FED                     	;# 
   595  0FEE                     	;# 
   596  0FEF                     	;# 
   597  0000                     	;# 
   598  0001                     	;# 
   599  0002                     	;# 
   600  0003                     	;# 
   601  0004                     	;# 
   602  0005                     	;# 
   603  0006                     	;# 
   604  0007                     	;# 
   605  0008                     	;# 
   606  0009                     	;# 
   607  000A                     	;# 
   608  000B                     	;# 
   609  000C                     	;# 
   610  000D                     	;# 
   611  000E                     	;# 
   612  0011                     	;# 
   613  0012                     	;# 
   614  0013                     	;# 
   615  0014                     	;# 
   616  0015                     	;# 
   617  0016                     	;# 
   618  0016                     	;# 
   619  0017                     	;# 
   620  0018                     	;# 
   621  0019                     	;# 
   622  001A                     	;# 
   623  001B                     	;# 
   624  001C                     	;# 
   625  001E                     	;# 
   626  001F                     	;# 
   627  008C                     	;# 
   628  008D                     	;# 
   629  008E                     	;# 
   630  0091                     	;# 
   631  0092                     	;# 
   632  0093                     	;# 
   633  0094                     	;# 
   634  0095                     	;# 
   635  0096                     	;# 
   636  0097                     	;# 
   637  0098                     	;# 
   638  0099                     	;# 
   639  009A                     	;# 
   640  009B                     	;# 
   641  009B                     	;# 
   642  009C                     	;# 
   643  009D                     	;# 
   644  009E                     	;# 
   645  010C                     	;# 
   646  010D                     	;# 
   647  010E                     	;# 
   648  0111                     	;# 
   649  0112                     	;# 
   650  0113                     	;# 
   651  0114                     	;# 
   652  0115                     	;# 
   653  0116                     	;# 
   654  0117                     	;# 
   655  0118                     	;# 
   656  0119                     	;# 
   657  011A                     	;# 
   658  011B                     	;# 
   659  011D                     	;# 
   660  011E                     	;# 
   661  018C                     	;# 
   662  018D                     	;# 
   663  018E                     	;# 
   664  0191                     	;# 
   665  0191                     	;# 
   666  0192                     	;# 
   667  0193                     	;# 
   668  0193                     	;# 
   669  0193                     	;# 
   670  0194                     	;# 
   671  0195                     	;# 
   672  0196                     	;# 
   673  0199                     	;# 
   674  019A                     	;# 
   675  019B                     	;# 
   676  019B                     	;# 
   677  019C                     	;# 
   678  019D                     	;# 
   679  019E                     	;# 
   680  019F                     	;# 
   681  020C                     	;# 
   682  020D                     	;# 
   683  020E                     	;# 
   684  0211                     	;# 
   685  0211                     	;# 
   686  0212                     	;# 
   687  0212                     	;# 
   688  0213                     	;# 
   689  0213                     	;# 
   690  0214                     	;# 
   691  0214                     	;# 
   692  0215                     	;# 
   693  0215                     	;# 
   694  0215                     	;# 
   695  0216                     	;# 
   696  0216                     	;# 
   697  0217                     	;# 
   698  0217                     	;# 
   699  0219                     	;# 
   700  021A                     	;# 
   701  021B                     	;# 
   702  021C                     	;# 
   703  021D                     	;# 
   704  021E                     	;# 
   705  021F                     	;# 
   706  0291                     	;# 
   707  0291                     	;# 
   708  0292                     	;# 
   709  0293                     	;# 
   710  0294                     	;# 
   711  0295                     	;# 
   712  0295                     	;# 
   713  0296                     	;# 
   714  0298                     	;# 
   715  0298                     	;# 
   716  0299                     	;# 
   717  029A                     	;# 
   718  029B                     	;# 
   719  029C                     	;# 
   720  029D                     	;# 
   721  029E                     	;# 
   722  0311                     	;# 
   723  0311                     	;# 
   724  0312                     	;# 
   725  0313                     	;# 
   726  0318                     	;# 
   727  0318                     	;# 
   728  0319                     	;# 
   729  031A                     	;# 
   730  038C                     	;# 
   731  038D                     	;# 
   732  038E                     	;# 
   733  0391                     	;# 
   734  0392                     	;# 
   735  0393                     	;# 
   736  0394                     	;# 
   737  0395                     	;# 
   738  0396                     	;# 
   739  039A                     	;# 
   740  039C                     	;# 
   741  039D                     	;# 
   742  039E                     	;# 
   743  039F                     	;# 
   744  0415                     	;# 
   745  0416                     	;# 
   746  0417                     	;# 
   747  041C                     	;# 
   748  041D                     	;# 
   749  041E                     	;# 
   750  0FE4                     	;# 
   751  0FE5                     	;# 
   752  0FE6                     	;# 
   753  0FE7                     	;# 
   754  0FE8                     	;# 
   755  0FE9                     	;# 
   756  0FEA                     	;# 
   757  0FEB                     	;# 
   758  0FED                     	;# 
   759  0FEE                     	;# 
   760  0FEF                     	;# 
   761  0000                     	;# 
   762  0001                     	;# 
   763  0002                     	;# 
   764  0003                     	;# 
   765  0004                     	;# 
   766  0005                     	;# 
   767  0006                     	;# 
   768  0007                     	;# 
   769  0008                     	;# 
   770  0009                     	;# 
   771  000A                     	;# 
   772  000B                     	;# 
   773  000C                     	;# 
   774  000D                     	;# 
   775  000E                     	;# 
   776  0011                     	;# 
   777  0012                     	;# 
   778  0013                     	;# 
   779  0014                     	;# 
   780  0015                     	;# 
   781  0016                     	;# 
   782  0016                     	;# 
   783  0017                     	;# 
   784  0018                     	;# 
   785  0019                     	;# 
   786  001A                     	;# 
   787  001B                     	;# 
   788  001C                     	;# 
   789  001E                     	;# 
   790  001F                     	;# 
   791  008C                     	;# 
   792  008D                     	;# 
   793  008E                     	;# 
   794  0091                     	;# 
   795  0092                     	;# 
   796  0093                     	;# 
   797  0094                     	;# 
   798  0095                     	;# 
   799  0096                     	;# 
   800  0097                     	;# 
   801  0098                     	;# 
   802  0099                     	;# 
   803  009A                     	;# 
   804  009B                     	;# 
   805  009B                     	;# 
   806  009C                     	;# 
   807  009D                     	;# 
   808  009E                     	;# 
   809  010C                     	;# 
   810  010D                     	;# 
   811  010E                     	;# 
   812  0111                     	;# 
   813  0112                     	;# 
   814  0113                     	;# 
   815  0114                     	;# 
   816  0115                     	;# 
   817  0116                     	;# 
   818  0117                     	;# 
   819  0118                     	;# 
   820  0119                     	;# 
   821  011A                     	;# 
   822  011B                     	;# 
   823  011D                     	;# 
   824  011E                     	;# 
   825  018C                     	;# 
   826  018D                     	;# 
   827  018E                     	;# 
   828  0191                     	;# 
   829  0191                     	;# 
   830  0192                     	;# 
   831  0193                     	;# 
   832  0193                     	;# 
   833  0193                     	;# 
   834  0194                     	;# 
   835  0195                     	;# 
   836  0196                     	;# 
   837  0199                     	;# 
   838  019A                     	;# 
   839  019B                     	;# 
   840  019B                     	;# 
   841  019C                     	;# 
   842  019D                     	;# 
   843  019E                     	;# 
   844  019F                     	;# 
   845  020C                     	;# 
   846  020D                     	;# 
   847  020E                     	;# 
   848  0211                     	;# 
   849  0211                     	;# 
   850  0212                     	;# 
   851  0212                     	;# 
   852  0213                     	;# 
   853  0213                     	;# 
   854  0214                     	;# 
   855  0214                     	;# 
   856  0215                     	;# 
   857  0215                     	;# 
   858  0215                     	;# 
   859  0216                     	;# 
   860  0216                     	;# 
   861  0217                     	;# 
   862  0217                     	;# 
   863  0219                     	;# 
   864  021A                     	;# 
   865  021B                     	;# 
   866  021C                     	;# 
   867  021D                     	;# 
   868  021E                     	;# 
   869  021F                     	;# 
   870  0291                     	;# 
   871  0291                     	;# 
   872  0292                     	;# 
   873  0293                     	;# 
   874  0294                     	;# 
   875  0295                     	;# 
   876  0295                     	;# 
   877  0296                     	;# 
   878  0298                     	;# 
   879  0298                     	;# 
   880  0299                     	;# 
   881  029A                     	;# 
   882  029B                     	;# 
   883  029C                     	;# 
   884  029D                     	;# 
   885  029E                     	;# 
   886  0311                     	;# 
   887  0311                     	;# 
   888  0312                     	;# 
   889  0313                     	;# 
   890  0318                     	;# 
   891  0318                     	;# 
   892  0319                     	;# 
   893  031A                     	;# 
   894  038C                     	;# 
   895  038D                     	;# 
   896  038E                     	;# 
   897  0391                     	;# 
   898  0392                     	;# 
   899  0393                     	;# 
   900  0394                     	;# 
   901  0395                     	;# 
   902  0396                     	;# 
   903  039A                     	;# 
   904  039C                     	;# 
   905  039D                     	;# 
   906  039E                     	;# 
   907  039F                     	;# 
   908  0415                     	;# 
   909  0416                     	;# 
   910  0417                     	;# 
   911  041C                     	;# 
   912  041D                     	;# 
   913  041E                     	;# 
   914  0FE4                     	;# 
   915  0FE5                     	;# 
   916  0FE6                     	;# 
   917  0FE7                     	;# 
   918  0FE8                     	;# 
   919  0FE9                     	;# 
   920  0FEA                     	;# 
   921  0FEB                     	;# 
   922  0FED                     	;# 
   923  0FEE                     	;# 
   924  0FEF                     	;# 
   925  0000                     	;# 
   926  0001                     	;# 
   927  0002                     	;# 
   928  0003                     	;# 
   929  0004                     	;# 
   930  0005                     	;# 
   931  0006                     	;# 
   932  0007                     	;# 
   933  0008                     	;# 
   934  0009                     	;# 
   935  000A                     	;# 
   936  000B                     	;# 
   937  000C                     	;# 
   938  000D                     	;# 
   939  000E                     	;# 
   940  0011                     	;# 
   941  0012                     	;# 
   942  0013                     	;# 
   943  0014                     	;# 
   944  0015                     	;# 
   945  0016                     	;# 
   946  0016                     	;# 
   947  0017                     	;# 
   948  0018                     	;# 
   949  0019                     	;# 
   950  001A                     	;# 
   951  001B                     	;# 
   952  001C                     	;# 
   953  001E                     	;# 
   954  001F                     	;# 
   955  008C                     	;# 
   956  008D                     	;# 
   957  008E                     	;# 
   958  0091                     	;# 
   959  0092                     	;# 
   960  0093                     	;# 
   961  0094                     	;# 
   962  0095                     	;# 
   963  0096                     	;# 
   964  0097                     	;# 
   965  0098                     	;# 
   966  0099                     	;# 
   967  009A                     	;# 
   968  009B                     	;# 
   969  009B                     	;# 
   970  009C                     	;# 
   971  009D                     	;# 
   972  009E                     	;# 
   973  010C                     	;# 
   974  010D                     	;# 
   975  010E                     	;# 
   976  0111                     	;# 
   977  0112                     	;# 
   978  0113                     	;# 
   979  0114                     	;# 
   980  0115                     	;# 
   981  0116                     	;# 
   982  0117                     	;# 
   983  0118                     	;# 
   984  0119                     	;# 
   985  011A                     	;# 
   986  011B                     	;# 
   987  011D                     	;# 
   988  011E                     	;# 
   989  018C                     	;# 
   990  018D                     	;# 
   991  018E                     	;# 
   992  0191                     	;# 
   993  0191                     	;# 
   994  0192                     	;# 
   995  0193                     	;# 
   996  0193                     	;# 
   997  0193                     	;# 
   998  0194                     	;# 
   999  0195                     	;# 
  1000  0196                     	;# 
  1001  0199                     	;# 
  1002  019A                     	;# 
  1003  019B                     	;# 
  1004  019B                     	;# 
  1005  019C                     	;# 
  1006  019D                     	;# 
  1007  019E                     	;# 
  1008  019F                     	;# 
  1009  020C                     	;# 
  1010  020D                     	;# 
  1011  020E                     	;# 
  1012  0211                     	;# 
  1013  0211                     	;# 
  1014  0212                     	;# 
  1015  0212                     	;# 
  1016  0213                     	;# 
  1017  0213                     	;# 
  1018  0214                     	;# 
  1019  0214                     	;# 
  1020  0215                     	;# 
  1021  0215                     	;# 
  1022  0215                     	;# 
  1023  0216                     	;# 
  1024  0216                     	;# 
  1025  0217                     	;# 
  1026  0217                     	;# 
  1027  0219                     	;# 
  1028  021A                     	;# 
  1029  021B                     	;# 
  1030  021C                     	;# 
  1031  021D                     	;# 
  1032  021E                     	;# 
  1033  021F                     	;# 
  1034  0291                     	;# 
  1035  0291                     	;# 
  1036  0292                     	;# 
  1037  0293                     	;# 
  1038  0294                     	;# 
  1039  0295                     	;# 
  1040  0295                     	;# 
  1041  0296                     	;# 
  1042  0298                     	;# 
  1043  0298                     	;# 
  1044  0299                     	;# 
  1045  029A                     	;# 
  1046  029B                     	;# 
  1047  029C                     	;# 
  1048  029D                     	;# 
  1049  029E                     	;# 
  1050  0311                     	;# 
  1051  0311                     	;# 
  1052  0312                     	;# 
  1053  0313                     	;# 
  1054  0318                     	;# 
  1055  0318                     	;# 
  1056  0319                     	;# 
  1057  031A                     	;# 
  1058  038C                     	;# 
  1059  038D                     	;# 
  1060  038E                     	;# 
  1061  0391                     	;# 
  1062  0392                     	;# 
  1063  0393                     	;# 
  1064  0394                     	;# 
  1065  0395                     	;# 
  1066  0396                     	;# 
  1067  039A                     	;# 
  1068  039C                     	;# 
  1069  039D                     	;# 
  1070  039E                     	;# 
  1071  039F                     	;# 
  1072  0415                     	;# 
  1073  0416                     	;# 
  1074  0417                     	;# 
  1075  041C                     	;# 
  1076  041D                     	;# 
  1077  041E                     	;# 
  1078  0FE4                     	;# 
  1079  0FE5                     	;# 
  1080  0FE6                     	;# 
  1081  0FE7                     	;# 
  1082  0FE8                     	;# 
  1083  0FE9                     	;# 
  1084  0FEA                     	;# 
  1085  0FEB                     	;# 
  1086  0FED                     	;# 
  1087  0FEE                     	;# 
  1088  0FEF                     	;# 
  1089  0000                     	;# 
  1090  0001                     	;# 
  1091  0002                     	;# 
  1092  0003                     	;# 
  1093  0004                     	;# 
  1094  0005                     	;# 
  1095  0006                     	;# 
  1096  0007                     	;# 
  1097  0008                     	;# 
  1098  0009                     	;# 
  1099  000A                     	;# 
  1100  000B                     	;# 
  1101  000C                     	;# 
  1102  000D                     	;# 
  1103  000E                     	;# 
  1104  0011                     	;# 
  1105  0012                     	;# 
  1106  0013                     	;# 
  1107  0014                     	;# 
  1108  0015                     	;# 
  1109  0016                     	;# 
  1110  0016                     	;# 
  1111  0017                     	;# 
  1112  0018                     	;# 
  1113  0019                     	;# 
  1114  001A                     	;# 
  1115  001B                     	;# 
  1116  001C                     	;# 
  1117  001E                     	;# 
  1118  001F                     	;# 
  1119  008C                     	;# 
  1120  008D                     	;# 
  1121  008E                     	;# 
  1122  0091                     	;# 
  1123  0092                     	;# 
  1124  0093                     	;# 
  1125  0094                     	;# 
  1126  0095                     	;# 
  1127  0096                     	;# 
  1128  0097                     	;# 
  1129  0098                     	;# 
  1130  0099                     	;# 
  1131  009A                     	;# 
  1132  009B                     	;# 
  1133  009B                     	;# 
  1134  009C                     	;# 
  1135  009D                     	;# 
  1136  009E                     	;# 
  1137  010C                     	;# 
  1138  010D                     	;# 
  1139  010E                     	;# 
  1140  0111                     	;# 
  1141  0112                     	;# 
  1142  0113                     	;# 
  1143  0114                     	;# 
  1144  0115                     	;# 
  1145  0116                     	;# 
  1146  0117                     	;# 
  1147  0118                     	;# 
  1148  0119                     	;# 
  1149  011A                     	;# 
  1150  011B                     	;# 
  1151  011D                     	;# 
  1152  011E                     	;# 
  1153  018C                     	;# 
  1154  018D                     	;# 
  1155  018E                     	;# 
  1156  0191                     	;# 
  1157  0191                     	;# 
  1158  0192                     	;# 
  1159  0193                     	;# 
  1160  0193                     	;# 
  1161  0193                     	;# 
  1162  0194                     	;# 
  1163  0195                     	;# 
  1164  0196                     	;# 
  1165  0199                     	;# 
  1166  019A                     	;# 
  1167  019B                     	;# 
  1168  019B                     	;# 
  1169  019C                     	;# 
  1170  019D                     	;# 
  1171  019E                     	;# 
  1172  019F                     	;# 
  1173  020C                     	;# 
  1174  020D                     	;# 
  1175  020E                     	;# 
  1176  0211                     	;# 
  1177  0211                     	;# 
  1178  0212                     	;# 
  1179  0212                     	;# 
  1180  0213                     	;# 
  1181  0213                     	;# 
  1182  0214                     	;# 
  1183  0214                     	;# 
  1184  0215                     	;# 
  1185  0215                     	;# 
  1186  0215                     	;# 
  1187  0216                     	;# 
  1188  0216                     	;# 
  1189  0217                     	;# 
  1190  0217                     	;# 
  1191  0219                     	;# 
  1192  021A                     	;# 
  1193  021B                     	;# 
  1194  021C                     	;# 
  1195  021D                     	;# 
  1196  021E                     	;# 
  1197  021F                     	;# 
  1198  0291                     	;# 
  1199  0291                     	;# 
  1200  0292                     	;# 
  1201  0293                     	;# 
  1202  0294                     	;# 
  1203  0295                     	;# 
  1204  0295                     	;# 
  1205  0296                     	;# 
  1206  0298                     	;# 
  1207  0298                     	;# 
  1208  0299                     	;# 
  1209  029A                     	;# 
  1210  029B                     	;# 
  1211  029C                     	;# 
  1212  029D                     	;# 
  1213  029E                     	;# 
  1214  0311                     	;# 
  1215  0311                     	;# 
  1216  0312                     	;# 
  1217  0313                     	;# 
  1218  0318                     	;# 
  1219  0318                     	;# 
  1220  0319                     	;# 
  1221  031A                     	;# 
  1222  038C                     	;# 
  1223  038D                     	;# 
  1224  038E                     	;# 
  1225  0391                     	;# 
  1226  0392                     	;# 
  1227  0393                     	;# 
  1228  0394                     	;# 
  1229  0395                     	;# 
  1230  0396                     	;# 
  1231  039A                     	;# 
  1232  039C                     	;# 
  1233  039D                     	;# 
  1234  039E                     	;# 
  1235  039F                     	;# 
  1236  0415                     	;# 
  1237  0416                     	;# 
  1238  0417                     	;# 
  1239  041C                     	;# 
  1240  041D                     	;# 
  1241  041E                     	;# 
  1242  0FE4                     	;# 
  1243  0FE5                     	;# 
  1244  0FE6                     	;# 
  1245  0FE7                     	;# 
  1246  0FE8                     	;# 
  1247  0FE9                     	;# 
  1248  0FEA                     	;# 
  1249  0FEB                     	;# 
  1250  0FED                     	;# 
  1251  0FEE                     	;# 
  1252  0FEF                     	;# 
  1253  0000                     	;# 
  1254  0001                     	;# 
  1255  0002                     	;# 
  1256  0003                     	;# 
  1257  0004                     	;# 
  1258  0005                     	;# 
  1259  0006                     	;# 
  1260  0007                     	;# 
  1261  0008                     	;# 
  1262  0009                     	;# 
  1263  000A                     	;# 
  1264  000B                     	;# 
  1265  000C                     	;# 
  1266  000D                     	;# 
  1267  000E                     	;# 
  1268  0011                     	;# 
  1269  0012                     	;# 
  1270  0013                     	;# 
  1271  0014                     	;# 
  1272  0015                     	;# 
  1273  0016                     	;# 
  1274  0016                     	;# 
  1275  0017                     	;# 
  1276  0018                     	;# 
  1277  0019                     	;# 
  1278  001A                     	;# 
  1279  001B                     	;# 
  1280  001C                     	;# 
  1281  001E                     	;# 
  1282  001F                     	;# 
  1283  008C                     	;# 
  1284  008D                     	;# 
  1285  008E                     	;# 
  1286  0091                     	;# 
  1287  0092                     	;# 
  1288  0093                     	;# 
  1289  0094                     	;# 
  1290  0095                     	;# 
  1291  0096                     	;# 
  1292  0097                     	;# 
  1293  0098                     	;# 
  1294  0099                     	;# 
  1295  009A                     	;# 
  1296  009B                     	;# 
  1297  009B                     	;# 
  1298  009C                     	;# 
  1299  009D                     	;# 
  1300  009E                     	;# 
  1301  010C                     	;# 
  1302  010D                     	;# 
  1303  010E                     	;# 
  1304  0111                     	;# 
  1305  0112                     	;# 
  1306  0113                     	;# 
  1307  0114                     	;# 
  1308  0115                     	;# 
  1309  0116                     	;# 
  1310  0117                     	;# 
  1311  0118                     	;# 
  1312  0119                     	;# 
  1313  011A                     	;# 
  1314  011B                     	;# 
  1315  011D                     	;# 
  1316  011E                     	;# 
  1317  018C                     	;# 
  1318  018D                     	;# 
  1319  018E                     	;# 
  1320  0191                     	;# 
  1321  0191                     	;# 
  1322  0192                     	;# 
  1323  0193                     	;# 
  1324  0193                     	;# 
  1325  0193                     	;# 
  1326  0194                     	;# 
  1327  0195                     	;# 
  1328  0196                     	;# 
  1329  0199                     	;# 
  1330  019A                     	;# 
  1331  019B                     	;# 
  1332  019B                     	;# 
  1333  019C                     	;# 
  1334  019D                     	;# 
  1335  019E                     	;# 
  1336  019F                     	;# 
  1337  020C                     	;# 
  1338  020D                     	;# 
  1339  020E                     	;# 
  1340  0211                     	;# 
  1341  0211                     	;# 
  1342  0212                     	;# 
  1343  0212                     	;# 
  1344  0213                     	;# 
  1345  0213                     	;# 
  1346  0214                     	;# 
  1347  0214                     	;# 
  1348  0215                     	;# 
  1349  0215                     	;# 
  1350  0215                     	;# 
  1351  0216                     	;# 
  1352  0216                     	;# 
  1353  0217                     	;# 
  1354  0217                     	;# 
  1355  0219                     	;# 
  1356  021A                     	;# 
  1357  021B                     	;# 
  1358  021C                     	;# 
  1359  021D                     	;# 
  1360  021E                     	;# 
  1361  021F                     	;# 
  1362  0291                     	;# 
  1363  0291                     	;# 
  1364  0292                     	;# 
  1365  0293                     	;# 
  1366  0294                     	;# 
  1367  0295                     	;# 
  1368  0295                     	;# 
  1369  0296                     	;# 
  1370  0298                     	;# 
  1371  0298                     	;# 
  1372  0299                     	;# 
  1373  029A                     	;# 
  1374  029B                     	;# 
  1375  029C                     	;# 
  1376  029D                     	;# 
  1377  029E                     	;# 
  1378  0311                     	;# 
  1379  0311                     	;# 
  1380  0312                     	;# 
  1381  0313                     	;# 
  1382  0318                     	;# 
  1383  0318                     	;# 
  1384  0319                     	;# 
  1385  031A                     	;# 
  1386  038C                     	;# 
  1387  038D                     	;# 
  1388  038E                     	;# 
  1389  0391                     	;# 
  1390  0392                     	;# 
  1391  0393                     	;# 
  1392  0394                     	;# 
  1393  0395                     	;# 
  1394  0396                     	;# 
  1395  039A                     	;# 
  1396  039C                     	;# 
  1397  039D                     	;# 
  1398  039E                     	;# 
  1399  039F                     	;# 
  1400  0415                     	;# 
  1401  0416                     	;# 
  1402  0417                     	;# 
  1403  041C                     	;# 
  1404  041D                     	;# 
  1405  041E                     	;# 
  1406  0FE4                     	;# 
  1407  0FE5                     	;# 
  1408  0FE6                     	;# 
  1409  0FE7                     	;# 
  1410  0FE8                     	;# 
  1411  0FE9                     	;# 
  1412  0FEA                     	;# 
  1413  0FEB                     	;# 
  1414  0FED                     	;# 
  1415  0FEE                     	;# 
  1416  0FEF                     	;# 
  1417  0000                     	;# 
  1418  0001                     	;# 
  1419  0002                     	;# 
  1420  0003                     	;# 
  1421  0004                     	;# 
  1422  0005                     	;# 
  1423  0006                     	;# 
  1424  0007                     	;# 
  1425  0008                     	;# 
  1426  0009                     	;# 
  1427  000A                     	;# 
  1428  000B                     	;# 
  1429  000C                     	;# 
  1430  000D                     	;# 
  1431  000E                     	;# 
  1432  0011                     	;# 
  1433  0012                     	;# 
  1434  0013                     	;# 
  1435  0014                     	;# 
  1436  0015                     	;# 
  1437  0016                     	;# 
  1438  0016                     	;# 
  1439  0017                     	;# 
  1440  0018                     	;# 
  1441  0019                     	;# 
  1442  001A                     	;# 
  1443  001B                     	;# 
  1444  001C                     	;# 
  1445  001E                     	;# 
  1446  001F                     	;# 
  1447  008C                     	;# 
  1448  008D                     	;# 
  1449  008E                     	;# 
  1450  0091                     	;# 
  1451  0092                     	;# 
  1452  0093                     	;# 
  1453  0094                     	;# 
  1454  0095                     	;# 
  1455  0096                     	;# 
  1456  0097                     	;# 
  1457  0098                     	;# 
  1458  0099                     	;# 
  1459  009A                     	;# 
  1460  009B                     	;# 
  1461  009B                     	;# 
  1462  009C                     	;# 
  1463  009D                     	;# 
  1464  009E                     	;# 
  1465  010C                     	;# 
  1466  010D                     	;# 
  1467  010E                     	;# 
  1468  0111                     	;# 
  1469  0112                     	;# 
  1470  0113                     	;# 
  1471  0114                     	;# 
  1472  0115                     	;# 
  1473  0116                     	;# 
  1474  0117                     	;# 
  1475  0118                     	;# 
  1476  0119                     	;# 
  1477  011A                     	;# 
  1478  011B                     	;# 
  1479  011D                     	;# 
  1480  011E                     	;# 
  1481  018C                     	;# 
  1482  018D                     	;# 
  1483  018E                     	;# 
  1484  0191                     	;# 
  1485  0191                     	;# 
  1486  0192                     	;# 
  1487  0193                     	;# 
  1488  0193                     	;# 
  1489  0193                     	;# 
  1490  0194                     	;# 
  1491  0195                     	;# 
  1492  0196                     	;# 
  1493  0199                     	;# 
  1494  019A                     	;# 
  1495  019B                     	;# 
  1496  019B                     	;# 
  1497  019C                     	;# 
  1498  019D                     	;# 
  1499  019E                     	;# 
  1500  019F                     	;# 
  1501  020C                     	;# 
  1502  020D                     	;# 
  1503  020E                     	;# 
  1504  0211                     	;# 
  1505  0211                     	;# 
  1506  0212                     	;# 
  1507  0212                     	;# 
  1508  0213                     	;# 
  1509  0213                     	;# 
  1510  0214                     	;# 
  1511  0214                     	;# 
  1512  0215                     	;# 
  1513  0215                     	;# 
  1514  0215                     	;# 
  1515  0216                     	;# 
  1516  0216                     	;# 
  1517  0217                     	;# 
  1518  0217                     	;# 
  1519  0219                     	;# 
  1520  021A                     	;# 
  1521  021B                     	;# 
  1522  021C                     	;# 
  1523  021D                     	;# 
  1524  021E                     	;# 
  1525  021F                     	;# 
  1526  0291                     	;# 
  1527  0291                     	;# 
  1528  0292                     	;# 
  1529  0293                     	;# 
  1530  0294                     	;# 
  1531  0295                     	;# 
  1532  0295                     	;# 
  1533  0296                     	;# 
  1534  0298                     	;# 
  1535  0298                     	;# 
  1536  0299                     	;# 
  1537  029A                     	;# 
  1538  029B                     	;# 
  1539  029C                     	;# 
  1540  029D                     	;# 
  1541  029E                     	;# 
  1542  0311                     	;# 
  1543  0311                     	;# 
  1544  0312                     	;# 
  1545  0313                     	;# 
  1546  0318                     	;# 
  1547  0318                     	;# 
  1548  0319                     	;# 
  1549  031A                     	;# 
  1550  038C                     	;# 
  1551  038D                     	;# 
  1552  038E                     	;# 
  1553  0391                     	;# 
  1554  0392                     	;# 
  1555  0393                     	;# 
  1556  0394                     	;# 
  1557  0395                     	;# 
  1558  0396                     	;# 
  1559  039A                     	;# 
  1560  039C                     	;# 
  1561  039D                     	;# 
  1562  039E                     	;# 
  1563  039F                     	;# 
  1564  0415                     	;# 
  1565  0416                     	;# 
  1566  0417                     	;# 
  1567  041C                     	;# 
  1568  041D                     	;# 
  1569  041E                     	;# 
  1570  0FE4                     	;# 
  1571  0FE5                     	;# 
  1572  0FE6                     	;# 
  1573  0FE7                     	;# 
  1574  0FE8                     	;# 
  1575  0FE9                     	;# 
  1576  0FEA                     	;# 
  1577  0FEB                     	;# 
  1578  0FED                     	;# 
  1579  0FEE                     	;# 
  1580  0FEF                     	;# 
  1581  0000                     	;# 
  1582  0001                     	;# 
  1583  0002                     	;# 
  1584  0003                     	;# 
  1585  0004                     	;# 
  1586  0005                     	;# 
  1587  0006                     	;# 
  1588  0007                     	;# 
  1589  0008                     	;# 
  1590  0009                     	;# 
  1591  000A                     	;# 
  1592  000B                     	;# 
  1593  000C                     	;# 
  1594  000D                     	;# 
  1595  000E                     	;# 
  1596  0011                     	;# 
  1597  0012                     	;# 
  1598  0013                     	;# 
  1599  0014                     	;# 
  1600  0015                     	;# 
  1601  0016                     	;# 
  1602  0016                     	;# 
  1603  0017                     	;# 
  1604  0018                     	;# 
  1605  0019                     	;# 
  1606  001A                     	;# 
  1607  001B                     	;# 
  1608  001C                     	;# 
  1609  001E                     	;# 
  1610  001F                     	;# 
  1611  008C                     	;# 
  1612  008D                     	;# 
  1613  008E                     	;# 
  1614  0091                     	;# 
  1615  0092                     	;# 
  1616  0093                     	;# 
  1617  0094                     	;# 
  1618  0095                     	;# 
  1619  0096                     	;# 
  1620  0097                     	;# 
  1621  0098                     	;# 
  1622  0099                     	;# 
  1623  009A                     	;# 
  1624  009B                     	;# 
  1625  009B                     	;# 
  1626  009C                     	;# 
  1627  009D                     	;# 
  1628  009E                     	;# 
  1629  010C                     	;# 
  1630  010D                     	;# 
  1631  010E                     	;# 
  1632  0111                     	;# 
  1633  0112                     	;# 
  1634  0113                     	;# 
  1635  0114                     	;# 
  1636  0115                     	;# 
  1637  0116                     	;# 
  1638  0117                     	;# 
  1639  0118                     	;# 
  1640  0119                     	;# 
  1641  011A                     	;# 
  1642  011B                     	;# 
  1643  011D                     	;# 
  1644  011E                     	;# 
  1645  018C                     	;# 
  1646  018D                     	;# 
  1647  018E                     	;# 
  1648  0191                     	;# 
  1649  0191                     	;# 
  1650  0192                     	;# 
  1651  0193                     	;# 
  1652  0193                     	;# 
  1653  0193                     	;# 
  1654  0194                     	;# 
  1655  0195                     	;# 
  1656  0196                     	;# 
  1657  0199                     	;# 
  1658  019A                     	;# 
  1659  019B                     	;# 
  1660  019B                     	;# 
  1661  019C                     	;# 
  1662  019D                     	;# 
  1663  019E                     	;# 
  1664  019F                     	;# 
  1665  020C                     	;# 
  1666  020D                     	;# 
  1667  020E                     	;# 
  1668  0211                     	;# 
  1669  0211                     	;# 
  1670  0212                     	;# 
  1671  0212                     	;# 
  1672  0213                     	;# 
  1673  0213                     	;# 
  1674  0214                     	;# 
  1675  0214                     	;# 
  1676  0215                     	;# 
  1677  0215                     	;# 
  1678  0215                     	;# 
  1679  0216                     	;# 
  1680  0216                     	;# 
  1681  0217                     	;# 
  1682  0217                     	;# 
  1683  0219                     	;# 
  1684  021A                     	;# 
  1685  021B                     	;# 
  1686  021C                     	;# 
  1687  021D                     	;# 
  1688  021E                     	;# 
  1689  021F                     	;# 
  1690  0291                     	;# 
  1691  0291                     	;# 
  1692  0292                     	;# 
  1693  0293                     	;# 
  1694  0294                     	;# 
  1695  0295                     	;# 
  1696  0295                     	;# 
  1697  0296                     	;# 
  1698  0298                     	;# 
  1699  0298                     	;# 
  1700  0299                     	;# 
  1701  029A                     	;# 
  1702  029B                     	;# 
  1703  029C                     	;# 
  1704  029D                     	;# 
  1705  029E                     	;# 
  1706  0311                     	;# 
  1707  0311                     	;# 
  1708  0312                     	;# 
  1709  0313                     	;# 
  1710  0318                     	;# 
  1711  0318                     	;# 
  1712  0319                     	;# 
  1713  031A                     	;# 
  1714  038C                     	;# 
  1715  038D                     	;# 
  1716  038E                     	;# 
  1717  0391                     	;# 
  1718  0392                     	;# 
  1719  0393                     	;# 
  1720  0394                     	;# 
  1721  0395                     	;# 
  1722  0396                     	;# 
  1723  039A                     	;# 
  1724  039C                     	;# 
  1725  039D                     	;# 
  1726  039E                     	;# 
  1727  039F                     	;# 
  1728  0415                     	;# 
  1729  0416                     	;# 
  1730  0417                     	;# 
  1731  041C                     	;# 
  1732  041D                     	;# 
  1733  041E                     	;# 
  1734  0FE4                     	;# 
  1735  0FE5                     	;# 
  1736  0FE6                     	;# 
  1737  0FE7                     	;# 
  1738  0FE8                     	;# 
  1739  0FE9                     	;# 
  1740  0FEA                     	;# 
  1741  0FEB                     	;# 
  1742  0FED                     	;# 
  1743  0FEE                     	;# 
  1744  0FEF                     	;# 
  1745  0000                     	;# 
  1746  0001                     	;# 
  1747  0002                     	;# 
  1748  0003                     	;# 
  1749  0004                     	;# 
  1750  0005                     	;# 
  1751  0006                     	;# 
  1752  0007                     	;# 
  1753  0008                     	;# 
  1754  0009                     	;# 
  1755  000A                     	;# 
  1756  000B                     	;# 
  1757  000C                     	;# 
  1758  000D                     	;# 
  1759  000E                     	;# 
  1760  0011                     	;# 
  1761  0012                     	;# 
  1762  0013                     	;# 
  1763  0014                     	;# 
  1764  0015                     	;# 
  1765  0016                     	;# 
  1766  0016                     	;# 
  1767  0017                     	;# 
  1768  0018                     	;# 
  1769  0019                     	;# 
  1770  001A                     	;# 
  1771  001B                     	;# 
  1772  001C                     	;# 
  1773  001E                     	;# 
  1774  001F                     	;# 
  1775  008C                     	;# 
  1776  008D                     	;# 
  1777  008E                     	;# 
  1778  0091                     	;# 
  1779  0092                     	;# 
  1780  0093                     	;# 
  1781  0094                     	;# 
  1782  0095                     	;# 
  1783  0096                     	;# 
  1784  0097                     	;# 
  1785  0098                     	;# 
  1786  0099                     	;# 
  1787  009A                     	;# 
  1788  009B                     	;# 
  1789  009B                     	;# 
  1790  009C                     	;# 
  1791  009D                     	;# 
  1792  009E                     	;# 
  1793  010C                     	;# 
  1794  010D                     	;# 
  1795  010E                     	;# 
  1796  0111                     	;# 
  1797  0112                     	;# 
  1798  0113                     	;# 
  1799  0114                     	;# 
  1800  0115                     	;# 
  1801  0116                     	;# 
  1802  0117                     	;# 
  1803  0118                     	;# 
  1804  0119                     	;# 
  1805  011A                     	;# 
  1806  011B                     	;# 
  1807  011D                     	;# 
  1808  011E                     	;# 
  1809  018C                     	;# 
  1810  018D                     	;# 
  1811  018E                     	;# 
  1812  0191                     	;# 
  1813  0191                     	;# 
  1814  0192                     	;# 
  1815  0193                     	;# 
  1816  0193                     	;# 
  1817  0193                     	;# 
  1818  0194                     	;# 
  1819  0195                     	;# 
  1820  0196                     	;# 
  1821  0199                     	;# 
  1822  019A                     	;# 
  1823  019B                     	;# 
  1824  019B                     	;# 
  1825  019C                     	;# 
  1826  019D                     	;# 
  1827  019E                     	;# 
  1828  019F                     	;# 
  1829  020C                     	;# 
  1830  020D                     	;# 
  1831  020E                     	;# 
  1832  0211                     	;# 
  1833  0211                     	;# 
  1834  0212                     	;# 
  1835  0212                     	;# 
  1836  0213                     	;# 
  1837  0213                     	;# 
  1838  0214                     	;# 
  1839  0214                     	;# 
  1840  0215                     	;# 
  1841  0215                     	;# 
  1842  0215                     	;# 
  1843  0216                     	;# 
  1844  0216                     	;# 
  1845  0217                     	;# 
  1846  0217                     	;# 
  1847  0219                     	;# 
  1848  021A                     	;# 
  1849  021B                     	;# 
  1850  021C                     	;# 
  1851  021D                     	;# 
  1852  021E                     	;# 
  1853  021F                     	;# 
  1854  0291                     	;# 
  1855  0291                     	;# 
  1856  0292                     	;# 
  1857  0293                     	;# 
  1858  0294                     	;# 
  1859  0295                     	;# 
  1860  0295                     	;# 
  1861  0296                     	;# 
  1862  0298                     	;# 
  1863  0298                     	;# 
  1864  0299                     	;# 
  1865  029A                     	;# 
  1866  029B                     	;# 
  1867  029C                     	;# 
  1868  029D                     	;# 
  1869  029E                     	;# 
  1870  0311                     	;# 
  1871  0311                     	;# 
  1872  0312                     	;# 
  1873  0313                     	;# 
  1874  0318                     	;# 
  1875  0318                     	;# 
  1876  0319                     	;# 
  1877  031A                     	;# 
  1878  038C                     	;# 
  1879  038D                     	;# 
  1880  038E                     	;# 
  1881  0391                     	;# 
  1882  0392                     	;# 
  1883  0393                     	;# 
  1884  0394                     	;# 
  1885  0395                     	;# 
  1886  0396                     	;# 
  1887  039A                     	;# 
  1888  039C                     	;# 
  1889  039D                     	;# 
  1890  039E                     	;# 
  1891  039F                     	;# 
  1892  0415                     	;# 
  1893  0416                     	;# 
  1894  0417                     	;# 
  1895  041C                     	;# 
  1896  041D                     	;# 
  1897  041E                     	;# 
  1898  0FE4                     	;# 
  1899  0FE5                     	;# 
  1900  0FE6                     	;# 
  1901  0FE7                     	;# 
  1902  0FE8                     	;# 
  1903  0FE9                     	;# 
  1904  0FEA                     	;# 
  1905  0FEB                     	;# 
  1906  0FED                     	;# 
  1907  0FEE                     	;# 
  1908  0FEF                     	;# 
  1909  0000                     	;# 
  1910  0001                     	;# 
  1911  0002                     	;# 
  1912  0003                     	;# 
  1913  0004                     	;# 
  1914  0005                     	;# 
  1915  0006                     	;# 
  1916  0007                     	;# 
  1917  0008                     	;# 
  1918  0009                     	;# 
  1919  000A                     	;# 
  1920  000B                     	;# 
  1921  000C                     	;# 
  1922  000D                     	;# 
  1923  000E                     	;# 
  1924  0011                     	;# 
  1925  0012                     	;# 
  1926  0013                     	;# 
  1927  0014                     	;# 
  1928  0015                     	;# 
  1929  0016                     	;# 
  1930  0016                     	;# 
  1931  0017                     	;# 
  1932  0018                     	;# 
  1933  0019                     	;# 
  1934  001A                     	;# 
  1935  001B                     	;# 
  1936  001C                     	;# 
  1937  001E                     	;# 
  1938  001F                     	;# 
  1939  008C                     	;# 
  1940  008D                     	;# 
  1941  008E                     	;# 
  1942  0091                     	;# 
  1943  0092                     	;# 
  1944  0093                     	;# 
  1945  0094                     	;# 
  1946  0095                     	;# 
  1947  0096                     	;# 
  1948  0097                     	;# 
  1949  0098                     	;# 
  1950  0099                     	;# 
  1951  009A                     	;# 
  1952  009B                     	;# 
  1953  009B                     	;# 
  1954  009C                     	;# 
  1955  009D                     	;# 
  1956  009E                     	;# 
  1957  010C                     	;# 
  1958  010D                     	;# 
  1959  010E                     	;# 
  1960  0111                     	;# 
  1961  0112                     	;# 
  1962  0113                     	;# 
  1963  0114                     	;# 
  1964  0115                     	;# 
  1965  0116                     	;# 
  1966  0117                     	;# 
  1967  0118                     	;# 
  1968  0119                     	;# 
  1969  011A                     	;# 
  1970  011B                     	;# 
  1971  011D                     	;# 
  1972  011E                     	;# 
  1973  018C                     	;# 
  1974  018D                     	;# 
  1975  018E                     	;# 
  1976  0191                     	;# 
  1977  0191                     	;# 
  1978  0192                     	;# 
  1979  0193                     	;# 
  1980  0193                     	;# 
  1981  0193                     	;# 
  1982  0194                     	;# 
  1983  0195                     	;# 
  1984  0196                     	;# 
  1985  0199                     	;# 
  1986  019A                     	;# 
  1987  019B                     	;# 
  1988  019B                     	;# 
  1989  019C                     	;# 
  1990  019D                     	;# 
  1991  019E                     	;# 
  1992  019F                     	;# 
  1993  020C                     	;# 
  1994  020D                     	;# 
  1995  020E                     	;# 
  1996  0211                     	;# 
  1997  0211                     	;# 
  1998  0212                     	;# 
  1999  0212                     	;# 
  2000  0213                     	;# 
  2001  0213                     	;# 
  2002  0214                     	;# 
  2003  0214                     	;# 
  2004  0215                     	;# 
  2005  0215                     	;# 
  2006  0215                     	;# 
  2007  0216                     	;# 
  2008  0216                     	;# 
  2009  0217                     	;# 
  2010  0217                     	;# 
  2011  0219                     	;# 
  2012  021A                     	;# 
  2013  021B                     	;# 
  2014  021C                     	;# 
  2015  021D                     	;# 
  2016  021E                     	;# 
  2017  021F                     	;# 
  2018  0291                     	;# 
  2019  0291                     	;# 
  2020  0292                     	;# 
  2021  0293                     	;# 
  2022  0294                     	;# 
  2023  0295                     	;# 
  2024  0295                     	;# 
  2025  0296                     	;# 
  2026  0298                     	;# 
  2027  0298                     	;# 
  2028  0299                     	;# 
  2029  029A                     	;# 
  2030  029B                     	;# 
  2031  029C                     	;# 
  2032  029D                     	;# 
  2033  029E                     	;# 
  2034  0311                     	;# 
  2035  0311                     	;# 
  2036  0312                     	;# 
  2037  0313                     	;# 
  2038  0318                     	;# 
  2039  0318                     	;# 
  2040  0319                     	;# 
  2041  031A                     	;# 
  2042  038C                     	;# 
  2043  038D                     	;# 
  2044  038E                     	;# 
  2045  0391                     	;# 
  2046  0392                     	;# 
  2047  0393                     	;# 
  2048  0394                     	;# 
  2049  0395                     	;# 
  2050  0396                     	;# 
  2051  039A                     	;# 
  2052  039C                     	;# 
  2053  039D                     	;# 
  2054  039E                     	;# 
  2055  039F                     	;# 
  2056  0415                     	;# 
  2057  0416                     	;# 
  2058  0417                     	;# 
  2059  041C                     	;# 
  2060  041D                     	;# 
  2061  041E                     	;# 
  2062  0FE4                     	;# 
  2063  0FE5                     	;# 
  2064  0FE6                     	;# 
  2065  0FE7                     	;# 
  2066  0FE8                     	;# 
  2067  0FE9                     	;# 
  2068  0FEA                     	;# 
  2069  0FEB                     	;# 
  2070  0FED                     	;# 
  2071  0FEE                     	;# 
  2072  0FEF                     	;# 
  2073  0000                     	;# 
  2074  0001                     	;# 
  2075  0002                     	;# 
  2076  0003                     	;# 
  2077  0004                     	;# 
  2078  0005                     	;# 
  2079  0006                     	;# 
  2080  0007                     	;# 
  2081  0008                     	;# 
  2082  0009                     	;# 
  2083  000A                     	;# 
  2084  000B                     	;# 
  2085  000C                     	;# 
  2086  000D                     	;# 
  2087  000E                     	;# 
  2088  0011                     	;# 
  2089  0012                     	;# 
  2090  0013                     	;# 
  2091  0014                     	;# 
  2092  0015                     	;# 
  2093  0016                     	;# 
  2094  0016                     	;# 
  2095  0017                     	;# 
  2096  0018                     	;# 
  2097  0019                     	;# 
  2098  001A                     	;# 
  2099  001B                     	;# 
  2100  001C                     	;# 
  2101  001E                     	;# 
  2102  001F                     	;# 
  2103  008C                     	;# 
  2104  008D                     	;# 
  2105  008E                     	;# 
  2106  0091                     	;# 
  2107  0092                     	;# 
  2108  0093                     	;# 
  2109  0094                     	;# 
  2110  0095                     	;# 
  2111  0096                     	;# 
  2112  0097                     	;# 
  2113  0098                     	;# 
  2114  0099                     	;# 
  2115  009A                     	;# 
  2116  009B                     	;# 
  2117  009B                     	;# 
  2118  009C                     	;# 
  2119  009D                     	;# 
  2120  009E                     	;# 
  2121  010C                     	;# 
  2122  010D                     	;# 
  2123  010E                     	;# 
  2124  0111                     	;# 
  2125  0112                     	;# 
  2126  0113                     	;# 
  2127  0114                     	;# 
  2128  0115                     	;# 
  2129  0116                     	;# 
  2130  0117                     	;# 
  2131  0118                     	;# 
  2132  0119                     	;# 
  2133  011A                     	;# 
  2134  011B                     	;# 
  2135  011D                     	;# 
  2136  011E                     	;# 
  2137  018C                     	;# 
  2138  018D                     	;# 
  2139  018E                     	;# 
  2140  0191                     	;# 
  2141  0191                     	;# 
  2142  0192                     	;# 
  2143  0193                     	;# 
  2144  0193                     	;# 
  2145  0193                     	;# 
  2146  0194                     	;# 
  2147  0195                     	;# 
  2148  0196                     	;# 
  2149  0199                     	;# 
  2150  019A                     	;# 
  2151  019B                     	;# 
  2152  019B                     	;# 
  2153  019C                     	;# 
  2154  019D                     	;# 
  2155  019E                     	;# 
  2156  019F                     	;# 
  2157  020C                     	;# 
  2158  020D                     	;# 
  2159  020E                     	;# 
  2160  0211                     	;# 
  2161  0211                     	;# 
  2162  0212                     	;# 
  2163  0212                     	;# 
  2164  0213                     	;# 
  2165  0213                     	;# 
  2166  0214                     	;# 
  2167  0214                     	;# 
  2168  0215                     	;# 
  2169  0215                     	;# 
  2170  0215                     	;# 
  2171  0216                     	;# 
  2172  0216                     	;# 
  2173  0217                     	;# 
  2174  0217                     	;# 
  2175  0219                     	;# 
  2176  021A                     	;# 
  2177  021B                     	;# 
  2178  021C                     	;# 
  2179  021D                     	;# 
  2180  021E                     	;# 
  2181  021F                     	;# 
  2182  0291                     	;# 
  2183  0291                     	;# 
  2184  0292                     	;# 
  2185  0293                     	;# 
  2186  0294                     	;# 
  2187  0295                     	;# 
  2188  0295                     	;# 
  2189  0296                     	;# 
  2190  0298                     	;# 
  2191  0298                     	;# 
  2192  0299                     	;# 
  2193  029A                     	;# 
  2194  029B                     	;# 
  2195  029C                     	;# 
  2196  029D                     	;# 
  2197  029E                     	;# 
  2198  0311                     	;# 
  2199  0311                     	;# 
  2200  0312                     	;# 
  2201  0313                     	;# 
  2202  0318                     	;# 
  2203  0318                     	;# 
  2204  0319                     	;# 
  2205  031A                     	;# 
  2206  038C                     	;# 
  2207  038D                     	;# 
  2208  038E                     	;# 
  2209  0391                     	;# 
  2210  0392                     	;# 
  2211  0393                     	;# 
  2212  0394                     	;# 
  2213  0395                     	;# 
  2214  0396                     	;# 
  2215  039A                     	;# 
  2216  039C                     	;# 
  2217  039D                     	;# 
  2218  039E                     	;# 
  2219  039F                     	;# 
  2220  0415                     	;# 
  2221  0416                     	;# 
  2222  0417                     	;# 
  2223  041C                     	;# 
  2224  041D                     	;# 
  2225  041E                     	;# 
  2226  0FE4                     	;# 
  2227  0FE5                     	;# 
  2228  0FE6                     	;# 
  2229  0FE7                     	;# 
  2230  0FE8                     	;# 
  2231  0FE9                     	;# 
  2232  0FEA                     	;# 
  2233  0FEB                     	;# 
  2234  0FED                     	;# 
  2235  0FEE                     	;# 
  2236  0FEF                     	;# 
  2237  0000                     	;# 
  2238  0001                     	;# 
  2239  0002                     	;# 
  2240  0003                     	;# 
  2241  0004                     	;# 
  2242  0005                     	;# 
  2243  0006                     	;# 
  2244  0007                     	;# 
  2245  0008                     	;# 
  2246  0009                     	;# 
  2247  000A                     	;# 
  2248  000B                     	;# 
  2249  000C                     	;# 
  2250  000D                     	;# 
  2251  000E                     	;# 
  2252  0011                     	;# 
  2253  0012                     	;# 
  2254  0013                     	;# 
  2255  0014                     	;# 
  2256  0015                     	;# 
  2257  0016                     	;# 
  2258  0016                     	;# 
  2259  0017                     	;# 
  2260  0018                     	;# 
  2261  0019                     	;# 
  2262  001A                     	;# 
  2263  001B                     	;# 
  2264  001C                     	;# 
  2265  001E                     	;# 
  2266  001F                     	;# 
  2267  008C                     	;# 
  2268  008D                     	;# 
  2269  008E                     	;# 
  2270  0091                     	;# 
  2271  0092                     	;# 
  2272  0093                     	;# 
  2273  0094                     	;# 
  2274  0095                     	;# 
  2275  0096                     	;# 
  2276  0097                     	;# 
  2277  0098                     	;# 
  2278  0099                     	;# 
  2279  009A                     	;# 
  2280  009B                     	;# 
  2281  009B                     	;# 
  2282  009C                     	;# 
  2283  009D                     	;# 
  2284  009E                     	;# 
  2285  010C                     	;# 
  2286  010D                     	;# 
  2287  010E                     	;# 
  2288  0111                     	;# 
  2289  0112                     	;# 
  2290  0113                     	;# 
  2291  0114                     	;# 
  2292  0115                     	;# 
  2293  0116                     	;# 
  2294  0117                     	;# 
  2295  0118                     	;# 
  2296  0119                     	;# 
  2297  011A                     	;# 
  2298  011B                     	;# 
  2299  011D                     	;# 
  2300  011E                     	;# 
  2301  018C                     	;# 
  2302  018D                     	;# 
  2303  018E                     	;# 
  2304  0191                     	;# 
  2305  0191                     	;# 
  2306  0192                     	;# 
  2307  0193                     	;# 
  2308  0193                     	;# 
  2309  0193                     	;# 
  2310  0194                     	;# 
  2311  0195                     	;# 
  2312  0196                     	;# 
  2313  0199                     	;# 
  2314  019A                     	;# 
  2315  019B                     	;# 
  2316  019B                     	;# 
  2317  019C                     	;# 
  2318  019D                     	;# 
  2319  019E                     	;# 
  2320  019F                     	;# 
  2321  020C                     	;# 
  2322  020D                     	;# 
  2323  020E                     	;# 
  2324  0211                     	;# 
  2325  0211                     	;# 
  2326  0212                     	;# 
  2327  0212                     	;# 
  2328  0213                     	;# 
  2329  0213                     	;# 
  2330  0214                     	;# 
  2331  0214                     	;# 
  2332  0215                     	;# 
  2333  0215                     	;# 
  2334  0215                     	;# 
  2335  0216                     	;# 
  2336  0216                     	;# 
  2337  0217                     	;# 
  2338  0217                     	;# 
  2339  0219                     	;# 
  2340  021A                     	;# 
  2341  021B                     	;# 
  2342  021C                     	;# 
  2343  021D                     	;# 
  2344  021E                     	;# 
  2345  021F                     	;# 
  2346  0291                     	;# 
  2347  0291                     	;# 
  2348  0292                     	;# 
  2349  0293                     	;# 
  2350  0294                     	;# 
  2351  0295                     	;# 
  2352  0295                     	;# 
  2353  0296                     	;# 
  2354  0298                     	;# 
  2355  0298                     	;# 
  2356  0299                     	;# 
  2357  029A                     	;# 
  2358  029B                     	;# 
  2359  029C                     	;# 
  2360  029D                     	;# 
  2361  029E                     	;# 
  2362  0311                     	;# 
  2363  0311                     	;# 
  2364  0312                     	;# 
  2365  0313                     	;# 
  2366  0318                     	;# 
  2367  0318                     	;# 
  2368  0319                     	;# 
  2369  031A                     	;# 
  2370  038C                     	;# 
  2371  038D                     	;# 
  2372  038E                     	;# 
  2373  0391                     	;# 
  2374  0392                     	;# 
  2375  0393                     	;# 
  2376  0394                     	;# 
  2377  0395                     	;# 
  2378  0396                     	;# 
  2379  039A                     	;# 
  2380  039C                     	;# 
  2381  039D                     	;# 
  2382  039E                     	;# 
  2383  039F                     	;# 
  2384  0415                     	;# 
  2385  0416                     	;# 
  2386  0417                     	;# 
  2387  041C                     	;# 
  2388  041D                     	;# 
  2389  041E                     	;# 
  2390  0FE4                     	;# 
  2391  0FE5                     	;# 
  2392  0FE6                     	;# 
  2393  0FE7                     	;# 
  2394  0FE8                     	;# 
  2395  0FE9                     	;# 
  2396  0FEA                     	;# 
  2397  0FEB                     	;# 
  2398  0FED                     	;# 
  2399  0FEE                     	;# 
  2400  0FEF                     	;# 
  2401  0000                     	;# 
  2402  0001                     	;# 
  2403  0002                     	;# 
  2404  0003                     	;# 
  2405  0004                     	;# 
  2406  0005                     	;# 
  2407  0006                     	;# 
  2408  0007                     	;# 
  2409  0008                     	;# 
  2410  0009                     	;# 
  2411  000A                     	;# 
  2412  000B                     	;# 
  2413  000C                     	;# 
  2414  000D                     	;# 
  2415  000E                     	;# 
  2416  0011                     	;# 
  2417  0012                     	;# 
  2418  0013                     	;# 
  2419  0014                     	;# 
  2420  0015                     	;# 
  2421  0016                     	;# 
  2422  0016                     	;# 
  2423  0017                     	;# 
  2424  0018                     	;# 
  2425  0019                     	;# 
  2426  001A                     	;# 
  2427  001B                     	;# 
  2428  001C                     	;# 
  2429  001E                     	;# 
  2430  001F                     	;# 
  2431  008C                     	;# 
  2432  008D                     	;# 
  2433  008E                     	;# 
  2434  0091                     	;# 
  2435  0092                     	;# 
  2436  0093                     	;# 
  2437  0094                     	;# 
  2438  0095                     	;# 
  2439  0096                     	;# 
  2440  0097                     	;# 
  2441  0098                     	;# 
  2442  0099                     	;# 
  2443  009A                     	;# 
  2444  009B                     	;# 
  2445  009B                     	;# 
  2446  009C                     	;# 
  2447  009D                     	;# 
  2448  009E                     	;# 
  2449  010C                     	;# 
  2450  010D                     	;# 
  2451  010E                     	;# 
  2452  0111                     	;# 
  2453  0112                     	;# 
  2454  0113                     	;# 
  2455  0114                     	;# 
  2456  0115                     	;# 
  2457  0116                     	;# 
  2458  0117                     	;# 
  2459  0118                     	;# 
  2460  0119                     	;# 
  2461  011A                     	;# 
  2462  011B                     	;# 
  2463  011D                     	;# 
  2464  011E                     	;# 
  2465  018C                     	;# 
  2466  018D                     	;# 
  2467  018E                     	;# 
  2468  0191                     	;# 
  2469  0191                     	;# 
  2470  0192                     	;# 
  2471  0193                     	;# 
  2472  0193                     	;# 
  2473  0193                     	;# 
  2474  0194                     	;# 
  2475  0195                     	;# 
  2476  0196                     	;# 
  2477  0199                     	;# 
  2478  019A                     	;# 
  2479  019B                     	;# 
  2480  019B                     	;# 
  2481  019C                     	;# 
  2482  019D                     	;# 
  2483  019E                     	;# 
  2484  019F                     	;# 
  2485  020C                     	;# 
  2486  020D                     	;# 
  2487  020E                     	;# 
  2488  0211                     	;# 
  2489  0211                     	;# 
  2490  0212                     	;# 
  2491  0212                     	;# 
  2492  0213                     	;# 
  2493  0213                     	;# 
  2494  0214                     	;# 
  2495  0214                     	;# 
  2496  0215                     	;# 
  2497  0215                     	;# 
  2498  0215                     	;# 
  2499  0216                     	;# 
  2500  0216                     	;# 
  2501  0217                     	;# 
  2502  0217                     	;# 
  2503  0219                     	;# 
  2504  021A                     	;# 
  2505  021B                     	;# 
  2506  021C                     	;# 
  2507  021D                     	;# 
  2508  021E                     	;# 
  2509  021F                     	;# 
  2510  0291                     	;# 
  2511  0291                     	;# 
  2512  0292                     	;# 
  2513  0293                     	;# 
  2514  0294                     	;# 
  2515  0295                     	;# 
  2516  0295                     	;# 
  2517  0296                     	;# 
  2518  0298                     	;# 
  2519  0298                     	;# 
  2520  0299                     	;# 
  2521  029A                     	;# 
  2522  029B                     	;# 
  2523  029C                     	;# 
  2524  029D                     	;# 
  2525  029E                     	;# 
  2526  0311                     	;# 
  2527  0311                     	;# 
  2528  0312                     	;# 
  2529  0313                     	;# 
  2530  0318                     	;# 
  2531  0318                     	;# 
  2532  0319                     	;# 
  2533  031A                     	;# 
  2534  038C                     	;# 
  2535  038D                     	;# 
  2536  038E                     	;# 
  2537  0391                     	;# 
  2538  0392                     	;# 
  2539  0393                     	;# 
  2540  0394                     	;# 
  2541  0395                     	;# 
  2542  0396                     	;# 
  2543  039A                     	;# 
  2544  039C                     	;# 
  2545  039D                     	;# 
  2546  039E                     	;# 
  2547  039F                     	;# 
  2548  0415                     	;# 
  2549  0416                     	;# 
  2550  0417                     	;# 
  2551  041C                     	;# 
  2552  041D                     	;# 
  2553  041E                     	;# 
  2554  0FE4                     	;# 
  2555  0FE5                     	;# 
  2556  0FE6                     	;# 
  2557  0FE7                     	;# 
  2558  0FE8                     	;# 
  2559  0FE9                     	;# 
  2560  0FEA                     	;# 
  2561  0FEB                     	;# 
  2562  0FED                     	;# 
  2563  0FEE                     	;# 
  2564  0FEF                     	;# 
  2565  0000                     	;# 
  2566  0001                     	;# 
  2567  0002                     	;# 
  2568  0003                     	;# 
  2569  0004                     	;# 
  2570  0005                     	;# 
  2571  0006                     	;# 
  2572  0007                     	;# 
  2573  0008                     	;# 
  2574  0009                     	;# 
  2575  000A                     	;# 
  2576  000B                     	;# 
  2577  000C                     	;# 
  2578  000D                     	;# 
  2579  000E                     	;# 
  2580  0011                     	;# 
  2581  0012                     	;# 
  2582  0013                     	;# 
  2583  0014                     	;# 
  2584  0015                     	;# 
  2585  0016                     	;# 
  2586  0016                     	;# 
  2587  0017                     	;# 
  2588  0018                     	;# 
  2589  0019                     	;# 
  2590  001A                     	;# 
  2591  001B                     	;# 
  2592  001C                     	;# 
  2593  001E                     	;# 
  2594  001F                     	;# 
  2595  008C                     	;# 
  2596  008D                     	;# 
  2597  008E                     	;# 
  2598  0091                     	;# 
  2599  0092                     	;# 
  2600  0093                     	;# 
  2601  0094                     	;# 
  2602  0095                     	;# 
  2603  0096                     	;# 
  2604  0097                     	;# 
  2605  0098                     	;# 
  2606  0099                     	;# 
  2607  009A                     	;# 
  2608  009B                     	;# 
  2609  009B                     	;# 
  2610  009C                     	;# 
  2611  009D                     	;# 
  2612  009E                     	;# 
  2613  010C                     	;# 
  2614  010D                     	;# 
  2615  010E                     	;# 
  2616  0111                     	;# 
  2617  0112                     	;# 
  2618  0113                     	;# 
  2619  0114                     	;# 
  2620  0115                     	;# 
  2621  0116                     	;# 
  2622  0117                     	;# 
  2623  0118                     	;# 
  2624  0119                     	;# 
  2625  011A                     	;# 
  2626  011B                     	;# 
  2627  011D                     	;# 
  2628  011E                     	;# 
  2629  018C                     	;# 
  2630  018D                     	;# 
  2631  018E                     	;# 
  2632  0191                     	;# 
  2633  0191                     	;# 
  2634  0192                     	;# 
  2635  0193                     	;# 
  2636  0193                     	;# 
  2637  0193                     	;# 
  2638  0194                     	;# 
  2639  0195                     	;# 
  2640  0196                     	;# 
  2641  0199                     	;# 
  2642  019A                     	;# 
  2643  019B                     	;# 
  2644  019B                     	;# 
  2645  019C                     	;# 
  2646  019D                     	;# 
  2647  019E                     	;# 
  2648  019F                     	;# 
  2649  020C                     	;# 
  2650  020D                     	;# 
  2651  020E                     	;# 
  2652  0211                     	;# 
  2653  0211                     	;# 
  2654  0212                     	;# 
  2655  0212                     	;# 
  2656  0213                     	;# 
  2657  0213                     	;# 
  2658  0214                     	;# 
  2659  0214                     	;# 
  2660  0215                     	;# 
  2661  0215                     	;# 
  2662  0215                     	;# 
  2663  0216                     	;# 
  2664  0216                     	;# 
  2665  0217                     	;# 
  2666  0217                     	;# 
  2667  0219                     	;# 
  2668  021A                     	;# 
  2669  021B                     	;# 
  2670  021C                     	;# 
  2671  021D                     	;# 
  2672  021E                     	;# 
  2673  021F                     	;# 
  2674  0291                     	;# 
  2675  0291                     	;# 
  2676  0292                     	;# 
  2677  0293                     	;# 
  2678  0294                     	;# 
  2679  0295                     	;# 
  2680  0295                     	;# 
  2681  0296                     	;# 
  2682  0298                     	;# 
  2683  0298                     	;# 
  2684  0299                     	;# 
  2685  029A                     	;# 
  2686  029B                     	;# 
  2687  029C                     	;# 
  2688  029D                     	;# 
  2689  029E                     	;# 
  2690  0311                     	;# 
  2691  0311                     	;# 
  2692  0312                     	;# 
  2693  0313                     	;# 
  2694  0318                     	;# 
  2695  0318                     	;# 
  2696  0319                     	;# 
  2697  031A                     	;# 
  2698  038C                     	;# 
  2699  038D                     	;# 
  2700  038E                     	;# 
  2701  0391                     	;# 
  2702  0392                     	;# 
  2703  0393                     	;# 
  2704  0394                     	;# 
  2705  0395                     	;# 
  2706  0396                     	;# 
  2707  039A                     	;# 
  2708  039C                     	;# 
  2709  039D                     	;# 
  2710  039E                     	;# 
  2711  039F                     	;# 
  2712  0415                     	;# 
  2713  0416                     	;# 
  2714  0417                     	;# 
  2715  041C                     	;# 
  2716  041D                     	;# 
  2717  041E                     	;# 
  2718  0FE4                     	;# 
  2719  0FE5                     	;# 
  2720  0FE6                     	;# 
  2721  0FE7                     	;# 
  2722  0FE8                     	;# 
  2723  0FE9                     	;# 
  2724  0FEA                     	;# 
  2725  0FEB                     	;# 
  2726  0FED                     	;# 
  2727  0FEE                     	;# 
  2728  0FEF                     	;# 
  2729  0000                     	;# 
  2730  0001                     	;# 
  2731  0002                     	;# 
  2732  0003                     	;# 
  2733  0004                     	;# 
  2734  0005                     	;# 
  2735  0006                     	;# 
  2736  0007                     	;# 
  2737  0008                     	;# 
  2738  0009                     	;# 
  2739  000A                     	;# 
  2740  000B                     	;# 
  2741  000C                     	;# 
  2742  000D                     	;# 
  2743  000E                     	;# 
  2744  0011                     	;# 
  2745  0012                     	;# 
  2746  0013                     	;# 
  2747  0014                     	;# 
  2748  0015                     	;# 
  2749  0016                     	;# 
  2750  0016                     	;# 
  2751  0017                     	;# 
  2752  0018                     	;# 
  2753  0019                     	;# 
  2754  001A                     	;# 
  2755  001B                     	;# 
  2756  001C                     	;# 
  2757  001E                     	;# 
  2758  001F                     	;# 
  2759  008C                     	;# 
  2760  008D                     	;# 
  2761  008E                     	;# 
  2762  0091                     	;# 
  2763  0092                     	;# 
  2764  0093                     	;# 
  2765  0094                     	;# 
  2766  0095                     	;# 
  2767  0096                     	;# 
  2768  0097                     	;# 
  2769  0098                     	;# 
  2770  0099                     	;# 
  2771  009A                     	;# 
  2772  009B                     	;# 
  2773  009B                     	;# 
  2774  009C                     	;# 
  2775  009D                     	;# 
  2776  009E                     	;# 
  2777  010C                     	;# 
  2778  010D                     	;# 
  2779  010E                     	;# 
  2780  0111                     	;# 
  2781  0112                     	;# 
  2782  0113                     	;# 
  2783  0114                     	;# 
  2784  0115                     	;# 
  2785  0116                     	;# 
  2786  0117                     	;# 
  2787  0118                     	;# 
  2788  0119                     	;# 
  2789  011A                     	;# 
  2790  011B                     	;# 
  2791  011D                     	;# 
  2792  011E                     	;# 
  2793  018C                     	;# 
  2794  018D                     	;# 
  2795  018E                     	;# 
  2796  0191                     	;# 
  2797  0191                     	;# 
  2798  0192                     	;# 
  2799  0193                     	;# 
  2800  0193                     	;# 
  2801  0193                     	;# 
  2802  0194                     	;# 
  2803  0195                     	;# 
  2804  0196                     	;# 
  2805  0199                     	;# 
  2806  019A                     	;# 
  2807  019B                     	;# 
  2808  019B                     	;# 
  2809  019C                     	;# 
  2810  019D                     	;# 
  2811  019E                     	;# 
  2812  019F                     	;# 
  2813  020C                     	;# 
  2814  020D                     	;# 
  2815  020E                     	;# 
  2816  0211                     	;# 
  2817  0211                     	;# 
  2818  0212                     	;# 
  2819  0212                     	;# 
  2820  0213                     	;# 
  2821  0213                     	;# 
  2822  0214                     	;# 
  2823  0214                     	;# 
  2824  0215                     	;# 
  2825  0215                     	;# 
  2826  0215                     	;# 
  2827  0216                     	;# 
  2828  0216                     	;# 
  2829  0217                     	;# 
  2830  0217                     	;# 
  2831  0219                     	;# 
  2832  021A                     	;# 
  2833  021B                     	;# 
  2834  021C                     	;# 
  2835  021D                     	;# 
  2836  021E                     	;# 
  2837  021F                     	;# 
  2838  0291                     	;# 
  2839  0291                     	;# 
  2840  0292                     	;# 
  2841  0293                     	;# 
  2842  0294                     	;# 
  2843  0295                     	;# 
  2844  0295                     	;# 
  2845  0296                     	;# 
  2846  0298                     	;# 
  2847  0298                     	;# 
  2848  0299                     	;# 
  2849  029A                     	;# 
  2850  029B                     	;# 
  2851  029C                     	;# 
  2852  029D                     	;# 
  2853  029E                     	;# 
  2854  0311                     	;# 
  2855  0311                     	;# 
  2856  0312                     	;# 
  2857  0313                     	;# 
  2858  0318                     	;# 
  2859  0318                     	;# 
  2860  0319                     	;# 
  2861  031A                     	;# 
  2862  038C                     	;# 
  2863  038D                     	;# 
  2864  038E                     	;# 
  2865  0391                     	;# 
  2866  0392                     	;# 
  2867  0393                     	;# 
  2868  0394                     	;# 
  2869  0395                     	;# 
  2870  0396                     	;# 
  2871  039A                     	;# 
  2872  039C                     	;# 
  2873  039D                     	;# 
  2874  039E                     	;# 
  2875  039F                     	;# 
  2876  0415                     	;# 
  2877  0416                     	;# 
  2878  0417                     	;# 
  2879  041C                     	;# 
  2880  041D                     	;# 
  2881  041E                     	;# 
  2882  0FE4                     	;# 
  2883  0FE5                     	;# 
  2884  0FE6                     	;# 
  2885  0FE7                     	;# 
  2886  0FE8                     	;# 
  2887  0FE9                     	;# 
  2888  0FEA                     	;# 
  2889  0FEB                     	;# 
  2890  0FED                     	;# 
  2891  0FEE                     	;# 
  2892  0FEF                     	;# 
  2893  0000                     	;# 
  2894  0001                     	;# 
  2895  0002                     	;# 
  2896  0003                     	;# 
  2897  0004                     	;# 
  2898  0005                     	;# 
  2899  0006                     	;# 
  2900  0007                     	;# 
  2901  0008                     	;# 
  2902  0009                     	;# 
  2903  000A                     	;# 
  2904  000B                     	;# 
  2905  000C                     	;# 
  2906  000D                     	;# 
  2907  000E                     	;# 
  2908  0011                     	;# 
  2909  0012                     	;# 
  2910  0013                     	;# 
  2911  0014                     	;# 
  2912  0015                     	;# 
  2913  0016                     	;# 
  2914  0016                     	;# 
  2915  0017                     	;# 
  2916  0018                     	;# 
  2917  0019                     	;# 
  2918  001A                     	;# 
  2919  001B                     	;# 
  2920  001C                     	;# 
  2921  001E                     	;# 
  2922  001F                     	;# 
  2923  008C                     	;# 
  2924  008D                     	;# 
  2925  008E                     	;# 
  2926  0091                     	;# 
  2927  0092                     	;# 
  2928  0093                     	;# 
  2929  0094                     	;# 
  2930  0095                     	;# 
  2931  0096                     	;# 
  2932  0097                     	;# 
  2933  0098                     	;# 
  2934  0099                     	;# 
  2935  009A                     	;# 
  2936  009B                     	;# 
  2937  009B                     	;# 
  2938  009C                     	;# 
  2939  009D                     	;# 
  2940  009E                     	;# 
  2941  010C                     	;# 
  2942  010D                     	;# 
  2943  010E                     	;# 
  2944  0111                     	;# 
  2945  0112                     	;# 
  2946  0113                     	;# 
  2947  0114                     	;# 
  2948  0115                     	;# 
  2949  0116                     	;# 
  2950  0117                     	;# 
  2951  0118                     	;# 
  2952  0119                     	;# 
  2953  011A                     	;# 
  2954  011B                     	;# 
  2955  011D                     	;# 
  2956  011E                     	;# 
  2957  018C                     	;# 
  2958  018D                     	;# 
  2959  018E                     	;# 
  2960  0191                     	;# 
  2961  0191                     	;# 
  2962  0192                     	;# 
  2963  0193                     	;# 
  2964  0193                     	;# 
  2965  0193                     	;# 
  2966  0194                     	;# 
  2967  0195                     	;# 
  2968  0196                     	;# 
  2969  0199                     	;# 
  2970  019A                     	;# 
  2971  019B                     	;# 
  2972  019B                     	;# 
  2973  019C                     	;# 
  2974  019D                     	;# 
  2975  019E                     	;# 
  2976  019F                     	;# 
  2977  020C                     	;# 
  2978  020D                     	;# 
  2979  020E                     	;# 
  2980  0211                     	;# 
  2981  0211                     	;# 
  2982  0212                     	;# 
  2983  0212                     	;# 
  2984  0213                     	;# 
  2985  0213                     	;# 
  2986  0214                     	;# 
  2987  0214                     	;# 
  2988  0215                     	;# 
  2989  0215                     	;# 
  2990  0215                     	;# 
  2991  0216                     	;# 
  2992  0216                     	;# 
  2993  0217                     	;# 
  2994  0217                     	;# 
  2995  0219                     	;# 
  2996  021A                     	;# 
  2997  021B                     	;# 
  2998  021C                     	;# 
  2999  021D                     	;# 
  3000  021E                     	;# 
  3001  021F                     	;# 
  3002  0291                     	;# 
  3003  0291                     	;# 
  3004  0292                     	;# 
  3005  0293                     	;# 
  3006  0294                     	;# 
  3007  0295                     	;# 
  3008  0295                     	;# 
  3009  0296                     	;# 
  3010  0298                     	;# 
  3011  0298                     	;# 
  3012  0299                     	;# 
  3013  029A                     	;# 
  3014  029B                     	;# 
  3015  029C                     	;# 
  3016  029D                     	;# 
  3017  029E                     	;# 
  3018  0311                     	;# 
  3019  0311                     	;# 
  3020  0312                     	;# 
  3021  0313                     	;# 
  3022  0318                     	;# 
  3023  0318                     	;# 
  3024  0319                     	;# 
  3025  031A                     	;# 
  3026  038C                     	;# 
  3027  038D                     	;# 
  3028  038E                     	;# 
  3029  0391                     	;# 
  3030  0392                     	;# 
  3031  0393                     	;# 
  3032  0394                     	;# 
  3033  0395                     	;# 
  3034  0396                     	;# 
  3035  039A                     	;# 
  3036  039C                     	;# 
  3037  039D                     	;# 
  3038  039E                     	;# 
  3039  039F                     	;# 
  3040  0415                     	;# 
  3041  0416                     	;# 
  3042  0417                     	;# 
  3043  041C                     	;# 
  3044  041D                     	;# 
  3045  041E                     	;# 
  3046  0FE4                     	;# 
  3047  0FE5                     	;# 
  3048  0FE6                     	;# 
  3049  0FE7                     	;# 
  3050  0FE8                     	;# 
  3051  0FE9                     	;# 
  3052  0FEA                     	;# 
  3053  0FEB                     	;# 
  3054  0FED                     	;# 
  3055  0FEE                     	;# 
  3056  0FEF                     	;# 
  3057  0000                     	;# 
  3058  0001                     	;# 
  3059  0002                     	;# 
  3060  0003                     	;# 
  3061  0004                     	;# 
  3062  0005                     	;# 
  3063  0006                     	;# 
  3064  0007                     	;# 
  3065  0008                     	;# 
  3066  0009                     	;# 
  3067  000A                     	;# 
  3068  000B                     	;# 
  3069  000C                     	;# 
  3070  000D                     	;# 
  3071  000E                     	;# 
  3072  0011                     	;# 
  3073  0012                     	;# 
  3074  0013                     	;# 
  3075  0014                     	;# 
  3076  0015                     	;# 
  3077  0016                     	;# 
  3078  0016                     	;# 
  3079  0017                     	;# 
  3080  0018                     	;# 
  3081  0019                     	;# 
  3082  001A                     	;# 
  3083  001B                     	;# 
  3084  001C                     	;# 
  3085  001E                     	;# 
  3086  001F                     	;# 
  3087  008C                     	;# 
  3088  008D                     	;# 
  3089  008E                     	;# 
  3090  0091                     	;# 
  3091  0092                     	;# 
  3092  0093                     	;# 
  3093  0094                     	;# 
  3094  0095                     	;# 
  3095  0096                     	;# 
  3096  0097                     	;# 
  3097  0098                     	;# 
  3098  0099                     	;# 
  3099  009A                     	;# 
  3100  009B                     	;# 
  3101  009B                     	;# 
  3102  009C                     	;# 
  3103  009D                     	;# 
  3104  009E                     	;# 
  3105  010C                     	;# 
  3106  010D                     	;# 
  3107  010E                     	;# 
  3108  0111                     	;# 
  3109  0112                     	;# 
  3110  0113                     	;# 
  3111  0114                     	;# 
  3112  0115                     	;# 
  3113  0116                     	;# 
  3114  0117                     	;# 
  3115  0118                     	;# 
  3116  0119                     	;# 
  3117  011A                     	;# 
  3118  011B                     	;# 
  3119  011D                     	;# 
  3120  011E                     	;# 
  3121  018C                     	;# 
  3122  018D                     	;# 
  3123  018E                     	;# 
  3124  0191                     	;# 
  3125  0191                     	;# 
  3126  0192                     	;# 
  3127  0193                     	;# 
  3128  0193                     	;# 
  3129  0193                     	;# 
  3130  0194                     	;# 
  3131  0195                     	;# 
  3132  0196                     	;# 
  3133  0199                     	;# 
  3134  019A                     	;# 
  3135  019B                     	;# 
  3136  019B                     	;# 
  3137  019C                     	;# 
  3138  019D                     	;# 
  3139  019E                     	;# 
  3140  019F                     	;# 
  3141  020C                     	;# 
  3142  020D                     	;# 
  3143  020E                     	;# 
  3144  0211                     	;# 
  3145  0211                     	;# 
  3146  0212                     	;# 
  3147  0212                     	;# 
  3148  0213                     	;# 
  3149  0213                     	;# 
  3150  0214                     	;# 
  3151  0214                     	;# 
  3152  0215                     	;# 
  3153  0215                     	;# 
  3154  0215                     	;# 
  3155  0216                     	;# 
  3156  0216                     	;# 
  3157  0217                     	;# 
  3158  0217                     	;# 
  3159  0219                     	;# 
  3160  021A                     	;# 
  3161  021B                     	;# 
  3162  021C                     	;# 
  3163  021D                     	;# 
  3164  021E                     	;# 
  3165  021F                     	;# 
  3166  0291                     	;# 
  3167  0291                     	;# 
  3168  0292                     	;# 
  3169  0293                     	;# 
  3170  0294                     	;# 
  3171  0295                     	;# 
  3172  0295                     	;# 
  3173  0296                     	;# 
  3174  0298                     	;# 
  3175  0298                     	;# 
  3176  0299                     	;# 
  3177  029A                     	;# 
  3178  029B                     	;# 
  3179  029C                     	;# 
  3180  029D                     	;# 
  3181  029E                     	;# 
  3182  0311                     	;# 
  3183  0311                     	;# 
  3184  0312                     	;# 
  3185  0313                     	;# 
  3186  0318                     	;# 
  3187  0318                     	;# 
  3188  0319                     	;# 
  3189  031A                     	;# 
  3190  038C                     	;# 
  3191  038D                     	;# 
  3192  038E                     	;# 
  3193  0391                     	;# 
  3194  0392                     	;# 
  3195  0393                     	;# 
  3196  0394                     	;# 
  3197  0395                     	;# 
  3198  0396                     	;# 
  3199  039A                     	;# 
  3200  039C                     	;# 
  3201  039D                     	;# 
  3202  039E                     	;# 
  3203  039F                     	;# 
  3204  0415                     	;# 
  3205  0416                     	;# 
  3206  0417                     	;# 
  3207  041C                     	;# 
  3208  041D                     	;# 
  3209  041E                     	;# 
  3210  0FE4                     	;# 
  3211  0FE5                     	;# 
  3212  0FE6                     	;# 
  3213  0FE7                     	;# 
  3214  0FE8                     	;# 
  3215  0FE9                     	;# 
  3216  0FEA                     	;# 
  3217  0FEB                     	;# 
  3218  0FED                     	;# 
  3219  0FEE                     	;# 
  3220  0FEF                     	;# 
  3221  0000                     	;# 
  3222  0001                     	;# 
  3223  0002                     	;# 
  3224  0003                     	;# 
  3225  0004                     	;# 
  3226  0005                     	;# 
  3227  0006                     	;# 
  3228  0007                     	;# 
  3229  0008                     	;# 
  3230  0009                     	;# 
  3231  000A                     	;# 
  3232  000B                     	;# 
  3233  000C                     	;# 
  3234  000D                     	;# 
  3235  000E                     	;# 
  3236  0011                     	;# 
  3237  0012                     	;# 
  3238  0013                     	;# 
  3239  0014                     	;# 
  3240  0015                     	;# 
  3241  0016                     	;# 
  3242  0016                     	;# 
  3243  0017                     	;# 
  3244  0018                     	;# 
  3245  0019                     	;# 
  3246  001A                     	;# 
  3247  001B                     	;# 
  3248  001C                     	;# 
  3249  001E                     	;# 
  3250  001F                     	;# 
  3251  008C                     	;# 
  3252  008D                     	;# 
  3253  008E                     	;# 
  3254  0091                     	;# 
  3255  0092                     	;# 
  3256  0093                     	;# 
  3257  0094                     	;# 
  3258  0095                     	;# 
  3259  0096                     	;# 
  3260  0097                     	;# 
  3261  0098                     	;# 
  3262  0099                     	;# 
  3263  009A                     	;# 
  3264  009B                     	;# 
  3265  009B                     	;# 
  3266  009C                     	;# 
  3267  009D                     	;# 
  3268  009E                     	;# 
  3269  010C                     	;# 
  3270  010D                     	;# 
  3271  010E                     	;# 
  3272  0111                     	;# 
  3273  0112                     	;# 
  3274  0113                     	;# 
  3275  0114                     	;# 
  3276  0115                     	;# 
  3277  0116                     	;# 
  3278  0117                     	;# 
  3279  0118                     	;# 
  3280  0119                     	;# 
  3281  011A                     	;# 
  3282  011B                     	;# 
  3283  011D                     	;# 
  3284  011E                     	;# 
  3285  018C                     	;# 
  3286  018D                     	;# 
  3287  018E                     	;# 
  3288  0191                     	;# 
  3289  0191                     	;# 
  3290  0192                     	;# 
  3291  0193                     	;# 
  3292  0193                     	;# 
  3293  0193                     	;# 
  3294  0194                     	;# 
  3295  0195                     	;# 
  3296  0196                     	;# 
  3297  0199                     	;# 
  3298  019A                     	;# 
  3299  019B                     	;# 
  3300  019B                     	;# 
  3301  019C                     	;# 
  3302  019D                     	;# 
  3303  019E                     	;# 
  3304  019F                     	;# 
  3305  020C                     	;# 
  3306  020D                     	;# 
  3307  020E                     	;# 
  3308  0211                     	;# 
  3309  0211                     	;# 
  3310  0212                     	;# 
  3311  0212                     	;# 
  3312  0213                     	;# 
  3313  0213                     	;# 
  3314  0214                     	;# 
  3315  0214                     	;# 
  3316  0215                     	;# 
  3317  0215                     	;# 
  3318  0215                     	;# 
  3319  0216                     	;# 
  3320  0216                     	;# 
  3321  0217                     	;# 
  3322  0217                     	;# 
  3323  0219                     	;# 
  3324  021A                     	;# 
  3325  021B                     	;# 
  3326  021C                     	;# 
  3327  021D                     	;# 
  3328  021E                     	;# 
  3329  021F                     	;# 
  3330  0291                     	;# 
  3331  0291                     	;# 
  3332  0292                     	;# 
  3333  0293                     	;# 
  3334  0294                     	;# 
  3335  0295                     	;# 
  3336  0295                     	;# 
  3337  0296                     	;# 
  3338  0298                     	;# 
  3339  0298                     	;# 
  3340  0299                     	;# 
  3341  029A                     	;# 
  3342  029B                     	;# 
  3343  029C                     	;# 
  3344  029D                     	;# 
  3345  029E                     	;# 
  3346  0311                     	;# 
  3347  0311                     	;# 
  3348  0312                     	;# 
  3349  0313                     	;# 
  3350  0318                     	;# 
  3351  0318                     	;# 
  3352  0319                     	;# 
  3353  031A                     	;# 
  3354  038C                     	;# 
  3355  038D                     	;# 
  3356  038E                     	;# 
  3357  0391                     	;# 
  3358  0392                     	;# 
  3359  0393                     	;# 
  3360  0394                     	;# 
  3361  0395                     	;# 
  3362  0396                     	;# 
  3363  039A                     	;# 
  3364  039C                     	;# 
  3365  039D                     	;# 
  3366  039E                     	;# 
  3367  039F                     	;# 
  3368  0415                     	;# 
  3369  0416                     	;# 
  3370  0417                     	;# 
  3371  041C                     	;# 
  3372  041D                     	;# 
  3373  041E                     	;# 
  3374  0FE4                     	;# 
  3375  0FE5                     	;# 
  3376  0FE6                     	;# 
  3377  0FE7                     	;# 
  3378  0FE8                     	;# 
  3379  0FE9                     	;# 
  3380  0FEA                     	;# 
  3381  0FEB                     	;# 
  3382  0FED                     	;# 
  3383  0FEE                     	;# 
  3384  0FEF                     	;_I2cPacket
  3385                           
  3386                           	psect	idataCOMMON
  3387  080E                     __pidataCOMMON:	
  3388                           
  3389                           ;initializer for _LedBehaviourSts
  3390  080E  3401               	retlw	1
  3391                           
  3392                           	psect	idataBANK0
  3393  080D                     __pidataBANK0:	
  3394                           
  3395                           ;initializer for _MainSystemTimebaseFlag
  3396  080D  3401               	retlw	1
  3397                           
  3398                           	psect	idataBANK2
  3399  0AE7                     __pidataBANK2:	
  3400                           
  3401                           ;initializer for _TaskTable
  3402  0AE7  3488               	retlw	low _I2c_DataReceiveSm
  3403  0AE8  3401               	retlw	high _I2c_DataReceiveSm
  3404  0AE9  3400               	retlw	0
  3405  0AEA  3400               	retlw	0
  3406  0AEB  3400               	retlw	0
  3407  0AEC  3401               	retlw	1
  3408  0AED  3400               	retlw	0
  3409  0AEE  3400               	retlw	0
  3410  0AEF  343B               	retlw	low _I2cSlv_MainTask
  3411  0AF0  3409               	retlw	high _I2cSlv_MainTask
  3412  0AF1  3400               	retlw	0
  3413  0AF2  3400               	retlw	0
  3414  0AF3  3400               	retlw	0
  3415  0AF4  3401               	retlw	1
  3416  0AF5  3400               	retlw	0
  3417  0AF6  3400               	retlw	0
  3418  0AF7  3450               	retlw	low _Wdg_MainTask
  3419  0AF8  3409               	retlw	high _Wdg_MainTask
  3420  0AF9  3400               	retlw	0
  3421  0AFA  3400               	retlw	0
  3422  0AFB  3400               	retlw	0
  3423  0AFC  34E8               	retlw	232
  3424  0AFD  3403               	retlw	3
  3425  0AFE  3400               	retlw	0
  3426  0AFF  348E               	retlw	low _Led_MainTask
  3427  0B00  340B               	retlw	high _Led_MainTask
  3428  0B01  3400               	retlw	0
  3429  0B02  3400               	retlw	0
  3430  0B03  3400               	retlw	0
  3431  0B04  3464               	retlw	100
  3432  0B05  3400               	retlw	0
  3433  0B06  3400               	retlw	0
  3434  0B07  3492               	retlw	low _App_MainTask
  3435  0B08  340F               	retlw	high _App_MainTask
  3436  0B09  3400               	retlw	0
  3437  0B0A  3400               	retlw	0
  3438  0B0B  3400               	retlw	0
  3439  0B0C  34C8               	retlw	200
  3440  0B0D  3400               	retlw	0
  3441  0B0E  3400               	retlw	0
  3442                           
  3443                           	psect	stringtext
  3444  1000                     __pstringtext:	
  3445  1000                     _dpowers:	
  3446  1000  3401               	retlw	1
  3447  1001  3400               	retlw	0
  3448  1002  340A               	retlw	10
  3449  1003  3400               	retlw	0
  3450  1004  3464               	retlw	100
  3451  1005  3400               	retlw	0
  3452  1006  34E8               	retlw	232
  3453  1007  3403               	retlw	3
  3454  1008  3410               	retlw	16
  3455  1009  3427               	retlw	39
  3456  100A                     __end_of_dpowers:	
  3457  100A                     _TaskNumber:	
  3458  100A  3405               	retlw	5
  3459  100B  3400               	retlw	0
  3460  100C                     __end_of_TaskNumber:	
  3461  000B                     _INTCONbits	set	11
  3462  0011                     _PIR1bits	set	17
  3463  0013                     _PIR3bits	set	19
  3464  000C                     _PORTAbits	set	12
  3465  000E                     _PORTCbits	set	14
  3466  001B                     _PR2	set	27
  3467  001C                     _T2CONbits	set	28
  3468  009D                     _ADCON0bits	set	157
  3469  009E                     _ADCON1bits	set	158
  3470  009C                     _ADRESH	set	156
  3471  009B                     _ADRESL	set	155
  3472  0095                     _OPTION_REGbits	set	149
  3473  0099                     _OSCCONbits	set	153
  3474  009A                     _OSCSTATbits	set	154
  3475  0091                     _PIE1bits	set	145
  3476  0093                     _PIE3bits	set	147
  3477  008C                     _TRISAbits	set	140
  3478  008D                     _TRISBbits	set	141
  3479  008E                     _TRISCbits	set	142
  3480  0097                     _WDTCONbits	set	151
  3481  0117                     _FVRCONbits	set	279
  3482  010C                     _LATA	set	268
  3483  010C                     _LATAbits	set	268
  3484  010D                     _LATB	set	269
  3485  010E                     _LATC	set	270
  3486  010E                     _LATCbits	set	270
  3487  018C                     _ANSELA	set	396
  3488  018C                     _ANSELAbits	set	396
  3489  018D                     _ANSELB	set	397
  3490  018D                     _ANSELBbits	set	397
  3491  018E                     _ANSELC	set	398
  3492  018E                     _ANSELCbits	set	398
  3493  0212                     _SSP1ADD	set	530
  3494  0211                     _SSP1BUF	set	529
  3495  0215                     _SSP1CON1	set	533
  3496  0215                     _SSP1CON1bits	set	533
  3497  0216                     _SSP1CON2	set	534
  3498  0217                     _SSP1CON3	set	535
  3499  0213                     _SSP1MSK	set	531
  3500  0214                     _SSP1STAT	set	532
  3501  020C                     _WPUA	set	524
  3502  020C                     _WPUAbits	set	524
  3503  020D                     _WPUB	set	525
  3504  020D                     _WPUBbits	set	525
  3505  020E                     _WPUC	set	526
  3506  020E                     _WPUCbits	set	526
  3507  0416                     _PR4	set	1046
  3508  041D                     _PR6	set	1053
  3509  0417                     _T4CONbits	set	1047
  3510  041E                     _T6CONbits	set	1054
  3511  100C                     STR_4:	
  3512  100C  3430               	retlw	48	;'0'
  3513  100D  3431               	retlw	49	;'1'
  3514  100E  342E               	retlw	46	;'.'
  3515  100F  3430               	retlw	48	;'0'
  3516  1010  3431               	retlw	49	;'1'
  3517  1011  342E               	retlw	46	;'.'
  3518  1012  3430               	retlw	48	;'0'
  3519  1013  3430               	retlw	48	;'0'
  3520  1014  3400               	retlw	0
  3521  1015                     STR_1:	
  3522  1015  3425               	retlw	37	;'%'
  3523  1016  3464               	retlw	100	;'d'
  3524  1017  342E               	retlw	46	;'.'
  3525  1018  3425               	retlw	37	;'%'
  3526  1019  3430               	retlw	48	;'0'
  3527  101A  3431               	retlw	49	;'1'
  3528  101B  3475               	retlw	117	;'u'
  3529  101C  3400               	retlw	0
  3530  101D                     STR_3:	
  3531  101D  3453               	retlw	83	;'S'
  3532  101E  3442               	retlw	66	;'B'
  3533  101F  3438               	retlw	56	;'8'
  3534  1020  3431               	retlw	49	;'1'
  3535  1021  3430               	retlw	48	;'0'
  3536  1022  3400               	retlw	0
  3537  1023                     STR_6:	
  3538  1023  3420               	retlw	32	;' '
  3539  1024  3420               	retlw	32	;' '
  3540  1025  3420               	retlw	32	;' '
  3541  1026  3420               	retlw	32	;' '
  3542  1027  3400               	retlw	0
  3543  1028                     STR_2:	
  3544  1028  3445               	retlw	69	;'E'
  3545  1029  3443               	retlw	67	;'C'
  3546  102A  3448               	retlw	72	;'H'
  3547  102B  344F               	retlw	79	;'O'
  3548  102C  3400               	retlw	0
  3549  100C                     
  3550                           ; #config settings
  3551  0000                     
  3552                           	psect	cinit
  3553  002E                     start_initialization:	
  3554  002E                     __initialization:		;BIGRAM
  3555                           
  3556                           ; Initialize objects allocated to COMMON
  3557  002E  3188  200E  3180   	fcall	__pidataCOMMON	;fetch initializer
  3558  0031  00F9               	movwf	__pdataCOMMON& (0+127)
  3559                           
  3560                           ; Initialize objects allocated to BANK0
  3561  0032  3188  200D  3180   	fcall	__pidataBANK0	;fetch initializer
  3562  0035  00ED               	movwf	__pdataBANK0& (0+127)
  3563                           
  3564                           ; Initialize objects allocated to BANK2
  3565  0036  30E7               	movlw	low __pidataBANK2
  3566  0037  0084               	movwf	4
  3567  0038  308A               	movlw	(high __pidataBANK2)| (0+128)
  3568  0039  0085               	movwf	5
  3569  003A  3020               	movlw	low __pdataBANK2
  3570  003B  0086               	movwf	6
  3571  003C  3001               	movlw	high __pdataBANK2
  3572  003D  0087               	movwf	7
  3573  003E  3000               	movlw	0
  3574  003F  00FF               	movwf	btemp+1
  3575  0040  3028               	movlw	40
  3576  0041  3188  209D  3180   	fcall	init_ram
  3577                           
  3578                           ; Clear objects allocated to BIGRAM
  3579  0044  309D               	movlw	low (0+9117)
  3580  0045  0084               	movwf	4
  3581  0046  3023               	movlw	high (0+9117)
  3582  0047  0085               	movwf	5
  3583  0048  3053               	movlw	83
  3584  0049  00FE               	movwf	btemp
  3585  004A  3000               	movlw	0
  3586  004B  00FF               	movwf	btemp+1
  3587  004C  3188  2091  3180   	fcall	clear_ram0
  3588                           
  3589                           ; Clear objects allocated to COMMON
  3590  004F  01F6               	clrf	__pbssCOMMON& (0+127)
  3591  0050  01F7               	clrf	(__pbssCOMMON+1)& (0+127)
  3592  0051  01F8               	clrf	(__pbssCOMMON+2)& (0+127)
  3593                           
  3594                           ; Clear objects allocated to BANK0
  3595  0052  3061               	movlw	low __pbssBANK0
  3596  0053  0084               	movwf	4
  3597  0054  3000               	movlw	high __pbssBANK0
  3598  0055  0085               	movwf	5
  3599  0056  300C               	movlw	12
  3600  0057  00FE               	movwf	btemp
  3601  0058  3000               	movlw	0
  3602  0059  00FF               	movwf	btemp+1
  3603  005A  3188  2091  3180   	fcall	clear_ram0
  3604                           
  3605                           ; Clear objects allocated to BANK1
  3606  005D  30A0               	movlw	low __pbssBANK1
  3607  005E  0084               	movwf	4
  3608  005F  3000               	movlw	high __pbssBANK1
  3609  0060  0085               	movwf	5
  3610  0061  3048               	movlw	72
  3611  0062  00FE               	movwf	btemp
  3612  0063  3000               	movlw	0
  3613  0064  00FF               	movwf	btemp+1
  3614  0065  3188  2091  3180   	fcall	clear_ram0
  3615                           
  3616                           ; Clear objects allocated to BANK3
  3617  0068  30A0               	movlw	low __pbssBANK3
  3618  0069  0084               	movwf	4
  3619  006A  3001               	movlw	high __pbssBANK3
  3620  006B  0085               	movwf	5
  3621  006C  3050               	movlw	80
  3622  006D  00FE               	movwf	btemp
  3623  006E  3000               	movlw	0
  3624  006F  00FF               	movwf	btemp+1
  3625  0070  3188  2091  3180   	fcall	clear_ram0
  3626                           
  3627                           ; Clear objects allocated to BANK4
  3628  0073  3020               	movlw	low __pbssBANK4
  3629  0074  0084               	movwf	4
  3630  0075  3002               	movlw	high __pbssBANK4
  3631  0076  0085               	movwf	5
  3632  0077  3050               	movlw	80
  3633  0078  00FE               	movwf	btemp
  3634  0079  3000               	movlw	0
  3635  007A  00FF               	movwf	btemp+1
  3636  007B  3188  2091  3180   	fcall	clear_ram0
  3637                           
  3638                           ; Clear objects allocated to BANK5
  3639  007E  30A0               	movlw	low __pbssBANK5
  3640  007F  0084               	movwf	4
  3641  0080  3002               	movlw	high __pbssBANK5
  3642  0081  0085               	movwf	5
  3643  0082  3050               	movlw	80
  3644  0083  00FE               	movwf	btemp
  3645  0084  3000               	movlw	0
  3646  0085  00FF               	movwf	btemp+1
  3647  0086  3188  2091  3180   	fcall	clear_ram0
  3648                           
  3649                           ; Clear objects allocated to BANK6
  3650  0089  3020               	movlw	low __pbssBANK6
  3651  008A  0084               	movwf	4
  3652  008B  3003               	movlw	high __pbssBANK6
  3653  008C  0085               	movwf	5
  3654  008D  3050               	movlw	80
  3655  008E  00FE               	movwf	btemp
  3656  008F  3000               	movlw	0
  3657  0090  00FF               	movwf	btemp+1
  3658  0091  3188  2091         	fcall	clear_ram0
  3659  0093                     end_of_initialization:	
  3660                           ;End of C runtime variable initialization code
  3661                           
  3662  0093                     __end_of__initialization:	
  3663  0093  107E               	bcf	int$flags,0	;clear compiler interrupt flag (level 1)
  3664  0094  0020               	movlb	0
  3665  0095  3188  282C         	ljmp	_main	;jump to C main() function
  3666                           
  3667                           	psect	bssCOMMON
  3668  0076                     __pbssCOMMON:	
  3669  0076                     _I2cSlaveAddress:	
  3670  0076                     	ds	1
  3671  0077                     _I2cReplyPacketReady:	
  3672  0077                     	ds	2
  3673                           
  3674                           	psect	dataCOMMON
  3675  0079                     __pdataCOMMON:	
  3676  0079                     _LedBehaviourSts:	
  3677  0079                     	ds	1
  3678                           
  3679                           	psect	bssBANK0
  3680  0061                     __pbssBANK0:	
  3681  0061                     AppSm@AppState:	
  3682  0061                     	ds	1
  3683  0062                     AppSm@WpuSetCounter:	
  3684  0062                     	ds	1
  3685  0063                     I2cSlv_I2cDrvHandle@I2cReceiveMsgState:	
  3686  0063                     	ds	1
  3687  0064                     I2c_DataReceiveSm@I2cRxAddress:	
  3688  0064                     	ds	1
  3689  0065                     I2c_DataReceiveSm@I2cRxFlag:	
  3690  0065                     	ds	1
  3691  0066                     I2c_DataReceiveSm@I2cRxState:	
  3692  0066                     	ds	1
  3693  0067                     I2c_DataReceiveSm@OpType:	
  3694  0067                     	ds	1
  3695  0068                     I2c_DataReceiveSm@RxCounter:	
  3696  0068                     	ds	1
  3697  0069                     I2c_DataReceiveSm@TxCounter:	
  3698  0069                     	ds	1
  3699  006A                     _RepBufferLen:	
  3700  006A                     	ds	1
  3701  006B                     _SystemState:	
  3702  006B                     	ds	1
  3703  006C                     _Led1Sts:	
  3704  006C                     	ds	1
  3705                           
  3706                           	psect	dataBANK0
  3707  006D                     __pdataBANK0:	
  3708  006D                     _MainSystemTimebaseFlag:	
  3709  006D                     	ds	1
  3710                           
  3711                           	psect	bssBANK1
  3712  00A0                     __pbssBANK1:	
  3713  00A0                     App_MainTask@F4117:	
  3714  00A0                     	ds	18
  3715  00B2                     App_MainTask@F4137:	
  3716  00B2                     	ds	12
  3717  00BE                     _InterruptCounter:	
  3718  00BE                     	ds	2
  3719  00C0                     _Tmr2IsrCallback:	
  3720  00C0                     	ds	2
  3721  00C2                     _Tmr4IsrCallback:	
  3722  00C2                     	ds	2
  3723  00C4                     _Tmr6IsrCallback:	
  3724  00C4                     	ds	2
  3725  00C6                     _I2cConfig:	
  3726  00C6                     	ds	11
  3727  00D1                     _Led1Blink:	
  3728  00D1                     	ds	9
  3729  00DA                     _Led1Pulse:	
  3730  00DA                     	ds	6
  3731  00E0                     _I2cNewPacketNotification:	
  3732  00E0                     	ds	2
  3733  00E2                     _I2cNewTxNotification:	
  3734  00E2                     	ds	2
  3735  00E4                     _I2cSetAddress:	
  3736  00E4                     	ds	2
  3737  00E6                     _I2cWriteRequest:	
  3738  00E6                     	ds	2
  3739                           
  3740                           	psect	dataBANK2
  3741  0120                     __pdataBANK2:	
  3742  0120                     _TaskTable:	
  3743  0120                     	ds	40
  3744                           
  3745                           	psect	bssBANK3
  3746  01A0                     __pbssBANK3:	
  3747  01A0                     _CmdBuffer:	
  3748  01A0                     	ds	80
  3749                           
  3750                           	psect	bssBANK4
  3751  0220                     __pbssBANK4:	
  3752  0220                     _RepBuffer:	
  3753  0220                     	ds	80
  3754                           
  3755                           	psect	bssBANK5
  3756  02A0                     __pbssBANK5:	
  3757  02A0                     _I2cTxBuffer:	
  3758  02A0                     	ds	80
  3759                           
  3760                           	psect	bssBANK6
  3761  0320                     __pbssBANK6:	
  3762  0320                     _I2cRxBuffer:	
  3763  0320                     	ds	80
  3764                           
  3765                           	psect	inittext
  3766  089D                     init_ram:	
  3767  089D  00FE               	movwf	126
  3768  089E                     initloop:	
  3769  089E  0012               	moviw fsr0++
  3770  089F  001E               	movwi fsr1++
  3771  08A0  3001               	movlw	1
  3772  08A1  02FE               	subwf	126,f
  3773  08A2  3000               	movlw	0
  3774  08A3  3BFF               	subwfb	127,f
  3775  08A4  087F               	movf	127,w
  3776  08A5  047E               	iorwf	126,w
  3777  08A6  1903               	btfsc	3,2
  3778  08A7  3400               	retlw	0
  3779  08A8  289E               	goto	initloop
  3780                           
  3781                           	psect	clrtext
  3782  0891                     clear_ram0:	
  3783                           ;	Called with FSR0 containing the base address, and
  3784                           ;	btemp/btemp+1 has the size to clear
  3785                           
  3786  0891  0064               	clrwdt	;clear the watchdog before getting into this loop
  3787  0892                     clrloop0:	
  3788  0892  0180               	clrf	0	;clear RAM location pointed to by FSR
  3789  0893  3101               	addfsr 0,1
  3790  0894  3001               	movlw	1
  3791  0895  02FE               	subwf	126,f
  3792  0896  3000               	movlw	0
  3793  0897  3BFF               	subwfb	127,f
  3794  0898  087F               	movf	127,w
  3795  0899  047E               	iorwf	126,w
  3796  089A  1903               	btfsc	3,2
  3797  089B  3400               	retlw	0	;all done for this memory range, return
  3798  089C  2892               	goto	clrloop0	;have we reached the end yet?
  3799                           
  3800                           	psect	cstackBANK1
  3801  00E8                     __pcstackBANK1:	
  3802  00E8                     ??_InitializeTasks:	
  3803  00E8                     ??_ScheduleTasks:	
  3804                           ; 1 bytes @ 0x0
  3805                           
  3806                           
  3807                           ; 1 bytes @ 0x0
  3808  00E8                     	ds	6
  3809                           
  3810                           	psect	cstackCOMMON
  3811  0070                     __pcstackCOMMON:	
  3812  0070                     ?_SystemInit:	
  3813  0070                     ?_MainScheduler:	
  3814                           ; 1 bytes @ 0x0
  3815                           
  3816  0070                     ?_ReceiveEvt:	
  3817                           ; 1 bytes @ 0x0
  3818                           
  3819  0070                     ?_GenerateEvt:	
  3820                           ; 1 bytes @ 0x0
  3821                           
  3822  0070                     ?_InitializeTasks:	
  3823                           ; 1 bytes @ 0x0
  3824                           
  3825  0070                     ?_ScheduleTasks:	
  3826                           ; 1 bytes @ 0x0
  3827                           
  3828  0070                     ?_I2cSlv_I2cDrvHandle:	
  3829                           ; 1 bytes @ 0x0
  3830                           
  3831  0070                     ?_SetLedBehavSts:	
  3832                           ; 1 bytes @ 0x0
  3833                           
  3834  0070                     ?_GetAnalogRaw:	
  3835                           ; 1 bytes @ 0x0
  3836                           
  3837  0070                     ?_GetAnalogAscii:	
  3838                           ; 1 bytes @ 0x0
  3839                           
  3840  0070                     ?_GetDigitalRaw:	
  3841                           ; 1 bytes @ 0x0
  3842                           
  3843  0070                     ?_SetDigitalDir:	
  3844                           ; 1 bytes @ 0x0
  3845                           
  3846  0070                     ?_SetDigitalOutSts:	
  3847                           ; 1 bytes @ 0x0
  3848                           
  3849  0070                     ?_Adc_ConfigAnCh:	
  3850                           ; 1 bytes @ 0x0
  3851                           
  3852  0070                     ?_Adc_InitAdcModule:	
  3853                           ; 1 bytes @ 0x0
  3854                           
  3855  0070                     ?_Adc_SelectChannel:	
  3856                           ; 1 bytes @ 0x0
  3857                           
  3858  0070                     ?_Adc_StartConversion:	
  3859                           ; 1 bytes @ 0x0
  3860                           
  3861  0070                     ?_Adc_GetConvSts:	
  3862                           ; 1 bytes @ 0x0
  3863                           
  3864  0070                     ?_CheckAckStatus:	
  3865                           ; 1 bytes @ 0x0
  3866                           
  3867  0070                     ?_CheckByteStatus:	
  3868                           ; 1 bytes @ 0x0
  3869                           
  3870  0070                     ?_CheckStopBitStatus:	
  3871                           ; 1 bytes @ 0x0
  3872                           
  3873  0070                     ?_ClearRxBuffer:	
  3874                           ; 1 bytes @ 0x0
  3875                           
  3876  0070                     ?_ClearTxBuffer:	
  3877                           ; 1 bytes @ 0x0
  3878                           
  3879  0070                     ?_I2c_InitI2cModule:	
  3880                           ; 1 bytes @ 0x0
  3881                           
  3882  0070                     ?_I2c_SetI2cAddress:	
  3883                           ; 1 bytes @ 0x0
  3884                           
  3885  0070                     ?_I2c_SetI2cAddressMask:	
  3886                           ; 1 bytes @ 0x0
  3887                           
  3888  0070                     ?_LedBlinkStateMachine:	
  3889                           ; 1 bytes @ 0x0
  3890                           
  3891  0070                     ?_Mcu_InitIntOsc:	
  3892                           ; 1 bytes @ 0x0
  3893                           
  3894  0070                     ?_Mcu_EnableInterrupts:	
  3895                           ; 1 bytes @ 0x0
  3896                           
  3897  0070                     ?_Mcu_SetPullUpsSts:	
  3898                           ; 1 bytes @ 0x0
  3899                           
  3900  0070                     ?_Mcu_ConfigPullUps:	
  3901                           ; 1 bytes @ 0x0
  3902                           
  3903  0070                     ?_Mcu_SetWdgPeriod:	
  3904                           ; 1 bytes @ 0x0
  3905                           
  3906  0070                     ?_Mcu_SetWdgSts:	
  3907                           ; 1 bytes @ 0x0
  3908                           
  3909  0070                     ?_Mcu_ClearWdg:	
  3910                           ; 1 bytes @ 0x0
  3911                           
  3912  0070                     ?_Mcu_SetDieTempSts:	
  3913                           ; 1 bytes @ 0x0
  3914                           
  3915  0070                     ?_Mcu_SetDieTempMode:	
  3916                           ; 1 bytes @ 0x0
  3917                           
  3918  0070                     ?_Tmr_StartTmr:	
  3919                           ; 1 bytes @ 0x0
  3920                           
  3921  0070                     ?_MainInterrupt:	
  3922                           ; 1 bytes @ 0x0
  3923                           
  3924  0070                     ?_I2c_SetConfig:	
  3925                           ; 1 bytes @ 0x0
  3926                           
  3927  0070                     ?_ControlLedDirect:	
  3928                           ; 1 bytes @ 0x0
  3929                           
  3930  0070                     ?_BoardReset:	
  3931                           ; 1 bytes @ 0x0
  3932                           
  3933  0070                     ?_LowPowerMode:	
  3934                           ; 1 bytes @ 0x0
  3935                           
  3936  0070                     ?_StdS_ManageStdServices:	
  3937                           ; 1 bytes @ 0x0
  3938                           
  3939  0070                     ?_StdS_SetI2cAddress:	
  3940                           ; 1 bytes @ 0x0
  3941                           
  3942  0070                     ?_ManageProtocol:	
  3943                           ; 1 bytes @ 0x0
  3944                           
  3945  0070                     ?_AppSm:	
  3946                           ; 1 bytes @ 0x0
  3947                           
  3948  0070                     ?_InitSchTimer:	
  3949                           ; 1 bytes @ 0x0
  3950                           
  3951  0070                     ?i1_GenerateEvt:	
  3952                           ; 1 bytes @ 0x0
  3953                           
  3954  0070                     ??i1_GenerateEvt:	
  3955                           ; 1 bytes @ 0x0
  3956                           
  3957  0070                     ?_main:	
  3958                           ; 1 bytes @ 0x0
  3959                           
  3960                           
  3961                           ; 2 bytes @ 0x0
  3962  0070                     	ds	1
  3963  0071                     i1GenerateEvt@Event:	
  3964                           
  3965                           ; 1 bytes @ 0x1
  3966  0071                     	ds	1
  3967  0072                     i1GenerateEvt@EventStatus:	
  3968                           
  3969                           ; 1 bytes @ 0x2
  3970  0072                     	ds	1
  3971  0073                     ??_MainInterrupt:	
  3972                           
  3973                           ; 1 bytes @ 0x3
  3974  0073                     	ds	1
  3975  0074                     ??_ReceiveEvt:	
  3976  0074                     ??_GenerateEvt:	
  3977                           ; 1 bytes @ 0x4
  3978                           
  3979  0074                     ?_Led_SetLedStatus:	
  3980                           ; 1 bytes @ 0x4
  3981                           
  3982  0074                     ??_SetDigitalDir:	
  3983                           ; 1 bytes @ 0x4
  3984                           
  3985  0074                     ??_SetDigitalOutSts:	
  3986                           ; 1 bytes @ 0x4
  3987                           
  3988  0074                     ??_memset:	
  3989                           ; 1 bytes @ 0x4
  3990                           
  3991  0074                     ?_strcat:	
  3992                           ; 1 bytes @ 0x4
  3993                           
  3994  0074                     ??_Adc_ConfigAnCh:	
  3995                           ; 1 bytes @ 0x4
  3996                           
  3997  0074                     ??_Adc_InitAdcModule:	
  3998                           ; 1 bytes @ 0x4
  3999                           
  4000  0074                     ??_Adc_SelectChannel:	
  4001                           ; 1 bytes @ 0x4
  4002                           
  4003  0074                     ??_Adc_StartConversion:	
  4004                           ; 1 bytes @ 0x4
  4005                           
  4006  0074                     ??_Adc_GetConvSts:	
  4007                           ; 1 bytes @ 0x4
  4008                           
  4009  0074                     ??_CheckAckStatus:	
  4010                           ; 1 bytes @ 0x4
  4011                           
  4012  0074                     ??_CheckByteStatus:	
  4013                           ; 1 bytes @ 0x4
  4014                           
  4015  0074                     ??_CheckStopBitStatus:	
  4016                           ; 1 bytes @ 0x4
  4017                           
  4018  0074                     ??_ClearRxBuffer:	
  4019                           ; 1 bytes @ 0x4
  4020                           
  4021  0074                     ??_ClearTxBuffer:	
  4022                           ; 1 bytes @ 0x4
  4023                           
  4024  0074                     ??_I2c_SetI2cAddress:	
  4025                           ; 1 bytes @ 0x4
  4026                           
  4027  0074                     ??_I2c_SetI2cAddressMask:	
  4028                           ; 1 bytes @ 0x4
  4029                           
  4030  0074                     ?_I2c_UpdateTxBuffer:	
  4031                           ; 1 bytes @ 0x4
  4032                           
  4033  0074                     ??_Mcu_InitIntOsc:	
  4034                           ; 1 bytes @ 0x4
  4035                           
  4036  0074                     ??_Mcu_EnableInterrupts:	
  4037                           ; 1 bytes @ 0x4
  4038                           
  4039  0074                     ??_Mcu_SetPullUpsSts:	
  4040                           ; 1 bytes @ 0x4
  4041                           
  4042  0074                     ??_Mcu_ConfigPullUps:	
  4043                           ; 1 bytes @ 0x4
  4044                           
  4045  0074                     ??_Mcu_SetWdgPeriod:	
  4046                           ; 1 bytes @ 0x4
  4047                           
  4048  0074                     ??_Mcu_SetWdgSts:	
  4049                           ; 1 bytes @ 0x4
  4050                           
  4051  0074                     ??_Mcu_ClearWdg:	
  4052                           ; 1 bytes @ 0x4
  4053                           
  4054  0074                     ??_Mcu_SetDieTempSts:	
  4055                           ; 1 bytes @ 0x4
  4056                           
  4057  0074                     ??_Mcu_SetDieTempMode:	
  4058                           ; 1 bytes @ 0x4
  4059                           
  4060  0074                     ?_TmrBInit:	
  4061                           ; 1 bytes @ 0x4
  4062                           
  4063  0074                     ?_Tmr_TmrBIrqSet:	
  4064                           ; 1 bytes @ 0x4
  4065                           
  4066  0074                     ??_Tmr_StartTmr:	
  4067                           ; 1 bytes @ 0x4
  4068                           
  4069  0074                     ??_I2c_SetConfig:	
  4070                           ; 1 bytes @ 0x4
  4071                           
  4072  0074                     ??_Led_SetLedBlinkTime:	
  4073                           ; 1 bytes @ 0x4
  4074                           
  4075  0074                     ?_Led_SetLedPulseTime:	
  4076                           ; 1 bytes @ 0x4
  4077                           
  4078  0074                     ??_BoardReset:	
  4079                           ; 1 bytes @ 0x4
  4080                           
  4081  0074                     ??_StdS_SetI2cAddress:	
  4082                           ; 1 bytes @ 0x4
  4083                           
  4084  0074                     ??___wmul:	
  4085                           ; 1 bytes @ 0x4
  4086                           
  4087  0074                     ??___lldiv:	
  4088                           ; 1 bytes @ 0x4
  4089                           
  4090  0074                     ??___lwdiv:	
  4091                           ; 1 bytes @ 0x4
  4092                           
  4093  0074                     ??___lwmod:	
  4094                           ; 1 bytes @ 0x4
  4095                           
  4096  0074                     ?_Adc_GetConvResult:	
  4097                           ; 1 bytes @ 0x4
  4098                           
  4099  0074                     Adc_ConfigAnCh@AnChSel:	
  4100                           ; 2 bytes @ 0x4
  4101                           
  4102  0074                     Adc_InitAdcModule@AdcConfig:	
  4103                           ; 1 bytes @ 0x4
  4104                           
  4105  0074                     I2c_SetI2cAddress@SlaveAddress:	
  4106                           ; 1 bytes @ 0x4
  4107                           
  4108  0074                     I2c_SetI2cAddressMask@SlaveAddressMask:	
  4109                           ; 1 bytes @ 0x4
  4110                           
  4111  0074                     I2c_UpdateTxBuffer@Length:	
  4112                           ; 1 bytes @ 0x4
  4113                           
  4114  0074                     Mcu_SetPullUpsSts@PuSts:	
  4115                           ; 1 bytes @ 0x4
  4116                           
  4117  0074                     Mcu_ConfigPullUps@WpuCh:	
  4118                           ; 1 bytes @ 0x4
  4119                           
  4120  0074                     Mcu_SetWdgSts@WdgSts:	
  4121                           ; 1 bytes @ 0x4
  4122                           
  4123  0074                     Mcu_SetDieTempSts@DieTempSts:	
  4124                           ; 1 bytes @ 0x4
  4125                           
  4126  0074                     Mcu_SetDieTempMode@DieTempMode:	
  4127                           ; 1 bytes @ 0x4
  4128                           
  4129  0074                     TmrBInit@Prescaler:	
  4130                           ; 1 bytes @ 0x4
  4131                           
  4132  0074                     Tmr_TmrBIrqSet@TmrIrqSts:	
  4133                           ; 1 bytes @ 0x4
  4134                           
  4135  0074                     Tmr_StartTmr@TmrNumb:	
  4136                           ; 1 bytes @ 0x4
  4137                           
  4138  0074                     ReceiveEvt@EventStatus:	
  4139                           ; 1 bytes @ 0x4
  4140                           
  4141  0074                     Led_SetLedStatus@LedSts:	
  4142                           ; 1 bytes @ 0x4
  4143                           
  4144  0074                     Led_SetLedBlinkTime@Led:	
  4145                           ; 1 bytes @ 0x4
  4146                           
  4147  0074                     StringCopy@Index:	
  4148                           ; 1 bytes @ 0x4
  4149                           
  4150  0074                     SetDigitalDir@Ch:	
  4151                           ; 1 bytes @ 0x4
  4152                           
  4153  0074                     SetDigitalOutSts@Ch:	
  4154                           ; 1 bytes @ 0x4
  4155                           
  4156  0074                     Led_SetLedPulseTime@PulseTimeMs:	
  4157                           ; 1 bytes @ 0x4
  4158                           
  4159  0074                     ___wmul@product:	
  4160                           ; 2 bytes @ 0x4
  4161                           
  4162  0074                     strcat@from:	
  4163                           ; 2 bytes @ 0x4
  4164                           
  4165                           
  4166                           ; 2 bytes @ 0x4
  4167  0074                     	ds	1
  4168  0075                     ??_Led_SetLedStatus:	
  4169  0075                     ??_GetDigitalRaw:	
  4170                           ; 1 bytes @ 0x5
  4171                           
  4172  0075                     ??_Tmr_TmrBIrqSet:	
  4173                           ; 1 bytes @ 0x5
  4174                           
  4175  0075                     ??_LowPowerMode:	
  4176                           ; 1 bytes @ 0x5
  4177                           
  4178  0075                     Adc_SelectChannel@SelCh:	
  4179                           ; 1 bytes @ 0x5
  4180                           
  4181  0075                     ClearRxBuffer@Index:	
  4182                           ; 1 bytes @ 0x5
  4183                           
  4184  0075                     ClearTxBuffer@Index:	
  4185                           ; 1 bytes @ 0x5
  4186                           
  4187  0075                     LedBlinkStateMachine@LedBlink:	
  4188                           ; 1 bytes @ 0x5
  4189                           
  4190  0075                     Mcu_SetWdgPeriod@WdgPeriod:	
  4191                           ; 1 bytes @ 0x5
  4192                           
  4193  0075                     TmrBInit@Postscaler:	
  4194                           ; 1 bytes @ 0x5
  4195                           
  4196  0075                     Tmr_TmrBIrqSet@TmrNumb:	
  4197                           ; 1 bytes @ 0x5
  4198                           
  4199  0075                     ReceiveEvt@Event:	
  4200                           ; 1 bytes @ 0x5
  4201                           
  4202  0075                     GetDigitalRaw@Ch:	
  4203                           ; 1 bytes @ 0x5
  4204                           
  4205  0075                     ___lwmod@counter:	
  4206                           ; 1 bytes @ 0x5
  4207                           
  4208                           
  4209                           ; 1 bytes @ 0x5
  4210  0075                     	ds	1
  4211  0076                     ??_SystemInit:	
  4212  0076                     ??_MainScheduler:	
  4213                           ; 1 bytes @ 0x6
  4214                           
  4215  0076                     ??_I2cSlv_MainTask:	
  4216                           ; 1 bytes @ 0x6
  4217                           
  4218  0076                     ??_Wdg_MainTask:	
  4219                           ; 1 bytes @ 0x6
  4220                           
  4221  0076                     ??_main:	
  4222                           ; 1 bytes @ 0x6
  4223                           
  4224  0076                     ??_Led_SetLedPulseTime:	
  4225                           ; 1 bytes @ 0x6
  4226                           
  4227  0076                     ??_ControlLedDirect:	
  4228                           ; 1 bytes @ 0x6
  4229                           
  4230  0076                     ??_GetDieTemperature:	
  4231                           ; 1 bytes @ 0x6
  4232                           
  4233  0076                     ??_ManageProtocol:	
  4234                           ; 1 bytes @ 0x6
  4235                           
  4236  0076                     ??_AdcGetValueCh:	
  4237                           ; 1 bytes @ 0x6
  4238                           
  4239  0076                     ??___lmul:	
  4240                           ; 1 bytes @ 0x6
  4241                           
  4242                           
  4243                           	psect	cstackBANK0
  4244  0020                     __pcstackBANK0:	
  4245                           ; 1 bytes @ 0x6
  4246                           
  4247  0020                     ?_memset:	
  4248  0020                     ??_strcat:	
  4249                           ; 1 bytes @ 0x0
  4250                           
  4251  0020                     ??_Adc_GetConvResult:	
  4252                           ; 1 bytes @ 0x0
  4253                           
  4254  0020                     ??_I2c_InitI2cModule:	
  4255                           ; 1 bytes @ 0x0
  4256                           
  4257  0020                     ??_I2c_UpdateTxBuffer:	
  4258                           ; 1 bytes @ 0x0
  4259                           
  4260  0020                     ??_TmrBInit:	
  4261                           ; 1 bytes @ 0x0
  4262                           
  4263  0020                     ?_Led_SetLedBlinkTime:	
  4264                           ; 1 bytes @ 0x0
  4265                           
  4266  0020                     ?_StringCopy:	
  4267                           ; 1 bytes @ 0x0
  4268                           
  4269  0020                     ?___wmul:	
  4270                           ; 1 bytes @ 0x0
  4271                           
  4272  0020                     ?___lwdiv:	
  4273                           ; 2 bytes @ 0x0
  4274                           
  4275  0020                     ?___lwmod:	
  4276                           ; 2 bytes @ 0x0
  4277                           
  4278  0020                     ?___lldiv:	
  4279                           ; 2 bytes @ 0x0
  4280                           
  4281  0020                     GenerateEvt@EventStatus:	
  4282                           ; 4 bytes @ 0x0
  4283                           
  4284  0020                     Led_SetLedStatus@Led:	
  4285                           ; 1 bytes @ 0x0
  4286                           
  4287  0020                     Led_SetLedPulseTime@Led:	
  4288                           ; 1 bytes @ 0x0
  4289                           
  4290  0020                     Led_SetLedBlinkTime@OnTimeMs:	
  4291                           ; 1 bytes @ 0x0
  4292                           
  4293  0020                     StringCopy@SourceStr:	
  4294                           ; 2 bytes @ 0x0
  4295                           
  4296  0020                     ___wmul@multiplier:	
  4297                           ; 2 bytes @ 0x0
  4298                           
  4299  0020                     ___lwdiv@divisor:	
  4300                           ; 2 bytes @ 0x0
  4301                           
  4302  0020                     ___lwmod@divisor:	
  4303                           ; 2 bytes @ 0x0
  4304                           
  4305  0020                     memset@c:	
  4306                           ; 2 bytes @ 0x0
  4307                           
  4308  0020                     ___lldiv@divisor:	
  4309                           ; 2 bytes @ 0x0
  4310                           
  4311                           
  4312                           ; 4 bytes @ 0x0
  4313  0020                     	ds	1
  4314  0021                     TmrBInit@TmrNumb:	
  4315  0021                     GenerateEvt@Event:	
  4316                           ; 1 bytes @ 0x1
  4317                           
  4318  0021                     strcat@to:	
  4319                           ; 1 bytes @ 0x1
  4320                           
  4321  0021                     Adc_GetConvResult@AdcResult:	
  4322                           ; 1 bytes @ 0x1
  4323                           
  4324                           
  4325                           ; 2 bytes @ 0x1
  4326  0021                     	ds	1
  4327  0022                     I2c_InitI2cModule@I2cConfig:	
  4328  0022                     I2c_UpdateTxBuffer@DataBuffer:	
  4329                           ; 1 bytes @ 0x2
  4330                           
  4331  0022                     StringCopy@DestStr:	
  4332                           ; 1 bytes @ 0x2
  4333                           
  4334  0022                     strcat@cp:	
  4335                           ; 1 bytes @ 0x2
  4336                           
  4337  0022                     Led_SetLedBlinkTime@OffTimeMs:	
  4338                           ; 1 bytes @ 0x2
  4339                           
  4340  0022                     ___wmul@multiplicand:	
  4341                           ; 2 bytes @ 0x2
  4342                           
  4343  0022                     ___lwdiv@dividend:	
  4344                           ; 2 bytes @ 0x2
  4345                           
  4346  0022                     ___lwmod@dividend:	
  4347                           ; 2 bytes @ 0x2
  4348                           
  4349  0022                     memset@n:	
  4350                           ; 2 bytes @ 0x2
  4351                           
  4352                           
  4353                           ; 2 bytes @ 0x2
  4354  0022                     	ds	1
  4355  0023                     ?_GetDieTemperature:	
  4356  0023                     ?_AdcGetValueCh:	
  4357                           ; 2 bytes @ 0x3
  4358                           
  4359  0023                     I2c_UpdateTxBuffer@Index:	
  4360                           ; 2 bytes @ 0x3
  4361                           
  4362  0023                     StringCopy@Len:	
  4363                           ; 1 bytes @ 0x3
  4364                           
  4365                           
  4366                           ; 1 bytes @ 0x3
  4367  0023                     	ds	1
  4368  0024                     ??_I2cSlv_I2cDrvHandle:	
  4369  0024                     ??_SetLedBehavSts:	
  4370                           ; 1 bytes @ 0x4
  4371                           
  4372  0024                     ??_StringCopy:	
  4373                           ; 1 bytes @ 0x4
  4374                           
  4375  0024                     ?___lmul:	
  4376                           ; 1 bytes @ 0x4
  4377                           
  4378  0024                     ___lwdiv@counter:	
  4379                           ; 4 bytes @ 0x4
  4380                           
  4381  0024                     memset@p:	
  4382                           ; 1 bytes @ 0x4
  4383                           
  4384  0024                     ___lmul@multiplier:	
  4385                           ; 1 bytes @ 0x4
  4386                           
  4387  0024                     ___lldiv@dividend:	
  4388                           ; 4 bytes @ 0x4
  4389                           
  4390                           
  4391                           ; 4 bytes @ 0x4
  4392  0024                     	ds	1
  4393  0025                     SetLedBehavSts@LedBehav:	
  4394  0025                     memset@p1:	
  4395                           ; 1 bytes @ 0x5
  4396                           
  4397  0025                     GetDieTemperature@DieTempRes:	
  4398                           ; 1 bytes @ 0x5
  4399                           
  4400  0025                     ___lwdiv@quotient:	
  4401                           ; 2 bytes @ 0x5
  4402                           
  4403                           
  4404                           ; 2 bytes @ 0x5
  4405  0025                     	ds	1
  4406  0026                     AdcGetValueCh@Ch:	
  4407                           
  4408                           ; 1 bytes @ 0x6
  4409  0026                     	ds	1
  4410  0027                     ??_LedBlinkStateMachine:	
  4411  0027                     ?_LedPulseStateMachine:	
  4412                           ; 1 bytes @ 0x7
  4413                           
  4414  0027                     ?_utoa:	
  4415                           ; 1 bytes @ 0x7
  4416                           
  4417  0027                     LedPulseStateMachine@Led:	
  4418                           ; 2 bytes @ 0x7
  4419                           
  4420  0027                     AdcGetValueCh@Result:	
  4421                           ; 1 bytes @ 0x7
  4422                           
  4423  0027                     utoa@buf:	
  4424                           ; 2 bytes @ 0x7
  4425                           
  4426                           
  4427                           ; 2 bytes @ 0x7
  4428  0027                     	ds	1
  4429  0028                     ??_LedPulseStateMachine:	
  4430  0028                     ___lmul@multiplicand:	
  4431                           ; 1 bytes @ 0x8
  4432                           
  4433  0028                     ___lldiv@quotient:	
  4434                           ; 4 bytes @ 0x8
  4435                           
  4436                           
  4437                           ; 4 bytes @ 0x8
  4438  0028                     	ds	1
  4439  0029                     ??_GetAnalogRaw:	
  4440  0029                     I2cSlv_I2cDrvHandle@Index:	
  4441                           ; 1 bytes @ 0x9
  4442                           
  4443  0029                     utoa@val:	
  4444                           ; 1 bytes @ 0x9
  4445                           
  4446                           
  4447                           ; 2 bytes @ 0x9
  4448  0029                     	ds	1
  4449  002A                     LedPulseStateMachine@LedPulse:	
  4450                           
  4451                           ; 1 bytes @ 0xA
  4452  002A                     	ds	1
  4453  002B                     ?_LedStateMachine:	
  4454  002B                     LedStateMachine@LedSts:	
  4455                           ; 1 bytes @ 0xB
  4456                           
  4457  002B                     utoa@base:	
  4458                           ; 1 bytes @ 0xB
  4459                           
  4460                           
  4461                           ; 2 bytes @ 0xB
  4462  002B                     	ds	1
  4463  002C                     LedStateMachine@LedBlink:	
  4464  002C                     ___lldiv@counter:	
  4465                           ; 1 bytes @ 0xC
  4466                           
  4467  002C                     ___lmul@product:	
  4468                           ; 1 bytes @ 0xC
  4469                           
  4470                           
  4471                           ; 4 bytes @ 0xC
  4472  002C                     	ds	1
  4473  002D                     ??_utoa:	
  4474  002D                     LedStateMachine@LedPulse:	
  4475                           ; 1 bytes @ 0xD
  4476                           
  4477  002D                     GetAnalogRaw@AdcData:	
  4478                           ; 1 bytes @ 0xD
  4479                           
  4480                           
  4481                           ; 2 bytes @ 0xD
  4482  002D                     	ds	1
  4483  002E                     ??_LedStateMachine:	
  4484  002E                     utoa@v:	
  4485                           ; 1 bytes @ 0xE
  4486                           
  4487                           
  4488                           ; 2 bytes @ 0xE
  4489  002E                     	ds	1
  4490  002F                     GetAnalogRaw@j:	
  4491                           
  4492                           ; 1 bytes @ 0xF
  4493  002F                     	ds	1
  4494  0030                     ?_Tmr_TmrBPrSet:	
  4495  0030                     LedStateMachine@Led:	
  4496                           ; 1 bytes @ 0x10
  4497                           
  4498  0030                     GetAnalogRaw@Ch:	
  4499                           ; 1 bytes @ 0x10
  4500                           
  4501  0030                     utoa@c:	
  4502                           ; 1 bytes @ 0x10
  4503                           
  4504  0030                     Tmr_TmrBPrSet@IntFreqHz:	
  4505                           ; 1 bytes @ 0x10
  4506                           
  4507                           
  4508                           ; 2 bytes @ 0x10
  4509  0030                     	ds	1
  4510  0031                     ??_GetAnalogAscii:	
  4511  0031                     ??_StdS_ManageStdServices:	
  4512                           ; 1 bytes @ 0x11
  4513                           
  4514  0031                     LedStateMachine@LedOutSts:	
  4515                           ; 1 bytes @ 0x11
  4516                           
  4517  0031                     GetAnalogRaw@i:	
  4518                           ; 1 bytes @ 0x11
  4519                           
  4520                           
  4521                           ; 1 bytes @ 0x11
  4522  0031                     	ds	1
  4523  0032                     Tmr_TmrBPrSet@Prescaler:	
  4524  0032                     GetAnalogAscii@AdcData:	
  4525                           ; 1 bytes @ 0x12
  4526                           
  4527                           
  4528                           ; 2 bytes @ 0x12
  4529  0032                     	ds	1
  4530  0033                     Tmr_TmrBPrSet@Postscaler:	
  4531  0033                     StdS_ManageStdServices@DieTempStr:	
  4532                           ; 1 bytes @ 0x13
  4533                           
  4534                           
  4535                           ; 4 bytes @ 0x13
  4536  0033                     	ds	1
  4537  0034                     ??_Tmr_TmrBPrSet:	
  4538  0034                     GetAnalogAscii@Ch:	
  4539                           ; 1 bytes @ 0x14
  4540                           
  4541                           
  4542                           ; 1 bytes @ 0x14
  4543  0034                     	ds	3
  4544  0037                     StdS_ManageStdServices@DieTemp:	
  4545                           
  4546                           ; 2 bytes @ 0x17
  4547  0037                     	ds	2
  4548  0039                     ??_AppSm:	
  4549                           
  4550                           ; 1 bytes @ 0x19
  4551  0039                     	ds	1
  4552  003A                     ?_I2cSlv_MainTask:	
  4553  003A                     ?_Wdg_MainTask:	
  4554                           ; 1 bytes @ 0x1A
  4555                           
  4556  003A                     ?_Led_MainTask:	
  4557                           ; 1 bytes @ 0x1A
  4558                           
  4559  003A                     ?_App_MainTask:	
  4560                           ; 1 bytes @ 0x1A
  4561                           
  4562  003A                     ?_I2c_DataReceiveSm:	
  4563                           ; 1 bytes @ 0x1A
  4564                           
  4565  003A                     I2c_DataReceiveSm@Options:	
  4566                           ; 1 bytes @ 0x1A
  4567                           
  4568  003A                     I2cSlv_MainTask@Options:	
  4569                           ; 1 bytes @ 0x1A
  4570                           
  4571  003A                     Led_MainTask@Options:	
  4572                           ; 1 bytes @ 0x1A
  4573                           
  4574  003A                     Wdg_MainTask@Options:	
  4575                           ; 1 bytes @ 0x1A
  4576                           
  4577  003A                     App_MainTask@Options:	
  4578                           ; 1 bytes @ 0x1A
  4579                           
  4580                           
  4581                           ; 1 bytes @ 0x1A
  4582  003A                     	ds	1
  4583  003B                     ??_Led_MainTask:	
  4584  003B                     ??_App_MainTask:	
  4585                           ; 1 bytes @ 0x1B
  4586                           
  4587  003B                     ??_I2c_DataReceiveSm:	
  4588                           ; 1 bytes @ 0x1B
  4589                           
  4590                           
  4591                           ; 1 bytes @ 0x1B
  4592  003B                     	ds	1
  4593  003C                     Tmr_TmrBPrSet@TmrNumb:	
  4594  003C                     App_MainTask@AdcConfig:	
  4595                           ; 1 bytes @ 0x1C
  4596                           
  4597                           
  4598                           ; 6 bytes @ 0x1C
  4599  003C                     	ds	1
  4600  003D                     Tmr_TmrBPrSet@TmrBPrCfgSts:	
  4601                           
  4602                           ; 1 bytes @ 0x1D
  4603  003D                     	ds	1
  4604  003E                     Tmr_TmrBPrSet@Divisor:	
  4605                           
  4606                           ; 4 bytes @ 0x1E
  4607  003E                     	ds	4
  4608  0042                     ?_Tmr_TmrBConfig:	
  4609  0042                     I2c_DataReceiveSm@Index:	
  4610                           ; 1 bytes @ 0x22
  4611                           
  4612  0042                     Tmr_TmrBConfig@TmrBConfig:	
  4613                           ; 1 bytes @ 0x22
  4614                           
  4615  0042                     App_MainTask@WpuCh:	
  4616                           ; 1 bytes @ 0x22
  4617                           
  4618                           
  4619                           ; 18 bytes @ 0x22
  4620  0042                     	ds	1
  4621  0043                     ??_Tmr_TmrBConfig:	
  4622                           
  4623                           ; 1 bytes @ 0x23
  4624  0043                     	ds	1
  4625  0044                     Tmr_TmrBConfig@TmrNumb:	
  4626                           
  4627                           ; 1 bytes @ 0x24
  4628  0044                     	ds	1
  4629  0045                     ??_InitSchTimer:	
  4630                           
  4631                           ; 1 bytes @ 0x25
  4632  0045                     	ds	1
  4633  0046                     InitSchTimer@TmrBConfig:	
  4634                           
  4635                           ; 6 bytes @ 0x26
  4636  0046                     	ds	14
  4637  0054                     App_MainTask@AnalogChSel:	
  4638                           
  4639                           ; 12 bytes @ 0x34
  4640  0054                     	ds	12
  4641  0060                     InitializeTasks@ActiveTaskIndex:	
  4642  0060                     ScheduleTasks@ActiveTaskIndex:	
  4643                           ; 1 bytes @ 0x40
  4644                           
  4645                           
  4646                           ; 1 bytes @ 0x40
  4647  0060                     	ds	1
  4648                           
  4649                           	psect	maintext
  4650  082C                     __pmaintext:	
  4651 ;;
  4652 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  4653 ;;
  4654 ;; *************** function _main *****************
  4655 ;; Defined at:
  4656 ;;		line 57 in file "../../../Framework/MercuryFwk/Source/c/00_Main/main.c"
  4657 ;; Parameters:    Size  Location     Type
  4658 ;;		None
  4659 ;; Auto vars:     Size  Location     Type
  4660 ;;		None
  4661 ;; Return value:  Size  Location     Type
  4662 ;;                  2   12[None  ] short 
  4663 ;; Registers used:
  4664 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4665 ;; Tracked objects:
  4666 ;;		On entry : B1F/0
  4667 ;;		On exit  : 0/0
  4668 ;;		Unchanged: 0/0
  4669 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4670 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4671 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4672 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4673 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4674 ;;Total ram usage:        0 bytes
  4675 ;; Hardware stack levels required when called:   10
  4676 ;; This function calls:
  4677 ;;		_MainScheduler
  4678 ;;		_SystemInit
  4679 ;; This function is called by:
  4680 ;;		Startup code after reset
  4681 ;; This function uses a non-reentrant model
  4682 ;;
  4683                           
  4684                           
  4685                           ;psect for function _main
  4686  082C                     _main:	
  4687                           
  4688                           ;main.c: 60: SystemInit();
  4689                           
  4690                           ;incstack = 0
  4691                           ; Regs used in _main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  4692  082C  3188  2053  3188   	fcall	_SystemInit
  4693                           
  4694                           ;main.c: 63: MainScheduler();
  4695  082F  3189  2104         	fcall	_MainScheduler
  4696                           
  4697                           ;main.c: 66: return 0;
  4698                           ;	Return value of _main is never used
  4699  0831  3180  282C         	ljmp	start
  4700  0833                     __end_of_main:	
  4701                           
  4702                           	psect	text1
  4703  0853                     __ptext1:	
  4704 ;; *************** function _SystemInit *****************
  4705 ;; Defined at:
  4706 ;;		line 97 in file "../Source/c/04_App/sys_init.c"
  4707 ;; Parameters:    Size  Location     Type
  4708 ;;		None
  4709 ;; Auto vars:     Size  Location     Type
  4710 ;;		None
  4711 ;; Return value:  Size  Location     Type
  4712 ;;                  1    wreg      void 
  4713 ;; Registers used:
  4714 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4715 ;; Tracked objects:
  4716 ;;		On entry : 0/0
  4717 ;;		On exit  : 0/0
  4718 ;;		Unchanged: 0/0
  4719 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4720 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4721 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4722 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4723 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4724 ;;Total ram usage:        0 bytes
  4725 ;; Hardware stack levels used:    1
  4726 ;; Hardware stack levels required when called:    6
  4727 ;; This function calls:
  4728 ;;		_InitSchTimer
  4729 ;;		_Mcu_EnableInterrupts
  4730 ;;		_Mcu_InitIntOsc
  4731 ;; This function is called by:
  4732 ;;		_main
  4733 ;; This function uses a non-reentrant model
  4734 ;;
  4735                           
  4736                           
  4737                           ;psect for function _SystemInit
  4738  0853                     _SystemInit:	
  4739                           
  4740                           ;sys_init.c: 100: Mcu_InitIntOsc();
  4741                           
  4742                           ;incstack = 0
  4743                           ; Regs used in _SystemInit: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  4744  0853  3188  2025  3188   	fcall	_Mcu_InitIntOsc
  4745                           
  4746                           ;sys_init.c: 102: InitSchTimer();
  4747  0856  3189  21AF  3188   	fcall	_InitSchTimer
  4748                           
  4749                           ;sys_init.c: 104: Mcu_EnableInterrupts();
  4750  0859  3188  2014         	fcall	_Mcu_EnableInterrupts
  4751  085B  0008               	return
  4752  085C                     __end_of_SystemInit:	
  4753                           
  4754                           	psect	text2
  4755  0825                     __ptext2:	
  4756 ;; *************** function _Mcu_InitIntOsc *****************
  4757 ;; Defined at:
  4758 ;;		line 79 in file "../../../Framework/MercuryFwk/Source/c/01_Hal/02_Drv/mcu_drv.c"
  4759 ;; Parameters:    Size  Location     Type
  4760 ;;		None
  4761 ;; Auto vars:     Size  Location     Type
  4762 ;;		None
  4763 ;; Return value:  Size  Location     Type
  4764 ;;                  1    wreg      void 
  4765 ;; Registers used:
  4766 ;;		wreg, status,2, status,0
  4767 ;; Tracked objects:
  4768 ;;		On entry : 0/0
  4769 ;;		On exit  : 0/0
  4770 ;;		Unchanged: 0/0
  4771 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4772 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4773 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4774 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4775 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4776 ;;Total ram usage:        0 bytes
  4777 ;; Hardware stack levels used:    1
  4778 ;; Hardware stack levels required when called:    2
  4779 ;; This function calls:
  4780 ;;		Nothing
  4781 ;; This function is called by:
  4782 ;;		_SystemInit
  4783 ;; This function uses a non-reentrant model
  4784 ;;
  4785                           
  4786                           
  4787                           ;psect for function _Mcu_InitIntOsc
  4788  0825                     _Mcu_InitIntOsc:	
  4789                           
  4790                           ;mcu_drv.c: 82: OSCCONbits.SCS1 = ((UINT8)(1));
  4791                           
  4792                           ;incstack = 0
  4793                           ; Regs used in _Mcu_InitIntOsc: [wreg+status,2+status,0]
  4794  0825  0021               	movlb	1	; select bank1
  4795  0826  1499               	bsf	25,1	;volatile
  4796                           
  4797                           ;mcu_drv.c: 84: OSCCONbits.IRCF = 0b1111;
  4798  0827  3078               	movlw	120
  4799  0828  0499               	iorwf	25,f	;volatile
  4800  0829                     l231:	
  4801                           ;mcu_drv.c: 86: while (OSCSTATbits.HFIOFS == 0);
  4802                           
  4803  0829  181A               	btfsc	26,0	;volatile
  4804  082A  0008               	return
  4805  082B  2829               	goto	l231
  4806  082C                     __end_of_Mcu_InitIntOsc:	
  4807                           
  4808                           	psect	text3
  4809  0814                     __ptext3:	
  4810 ;; *************** function _Mcu_EnableInterrupts *****************
  4811 ;; Defined at:
  4812 ;;		line 97 in file "../../../Framework/MercuryFwk/Source/c/01_Hal/02_Drv/mcu_drv.c"
  4813 ;; Parameters:    Size  Location     Type
  4814 ;;		None
  4815 ;; Auto vars:     Size  Location     Type
  4816 ;;		None
  4817 ;; Return value:  Size  Location     Type
  4818 ;;                  1    wreg      void 
  4819 ;; Registers used:
  4820 ;;		None
  4821 ;; Tracked objects:
  4822 ;;		On entry : 0/0
  4823 ;;		On exit  : 0/0
  4824 ;;		Unchanged: 0/0
  4825 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4826 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4827 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4828 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4829 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4830 ;;Total ram usage:        0 bytes
  4831 ;; Hardware stack levels used:    1
  4832 ;; Hardware stack levels required when called:    2
  4833 ;; This function calls:
  4834 ;;		Nothing
  4835 ;; This function is called by:
  4836 ;;		_SystemInit
  4837 ;; This function uses a non-reentrant model
  4838 ;;
  4839                           
  4840                           
  4841                           ;psect for function _Mcu_EnableInterrupts
  4842  0814                     _Mcu_EnableInterrupts:	
  4843                           
  4844                           ;mcu_drv.c: 100: INTCONbits.GIE = ((UINT8)(1));
  4845                           
  4846                           ;incstack = 0
  4847                           ; Regs used in _Mcu_EnableInterrupts: []
  4848  0814  178B               	bsf	11,7	;volatile
  4849                           
  4850                           ;mcu_drv.c: 101: INTCONbits.PEIE = ((UINT8)(1));
  4851  0815  170B               	bsf	11,6	;volatile
  4852  0816  0008               	return
  4853  0817                     __end_of_Mcu_EnableInterrupts:	
  4854                           
  4855                           	psect	text4
  4856  09AF                     __ptext4:	
  4857 ;; *************** function _InitSchTimer *****************
  4858 ;; Defined at:
  4859 ;;		line 70 in file "../Source/c/04_App/sys_init.c"
  4860 ;; Parameters:    Size  Location     Type
  4861 ;;		None
  4862 ;; Auto vars:     Size  Location     Type
  4863 ;;  TmrBConfig      6   38[BANK0 ] struct _TmrBConfigType
  4864 ;; Return value:  Size  Location     Type
  4865 ;;                  1    wreg      void 
  4866 ;; Registers used:
  4867 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4868 ;; Tracked objects:
  4869 ;;		On entry : 0/0
  4870 ;;		On exit  : 0/0
  4871 ;;		Unchanged: 0/0
  4872 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4873 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4874 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4875 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4876 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4877 ;;Total ram usage:        7 bytes
  4878 ;; Hardware stack levels used:    1
  4879 ;; Hardware stack levels required when called:    5
  4880 ;; This function calls:
  4881 ;;		_Tmr_TmrBConfig
  4882 ;; This function is called by:
  4883 ;;		_SystemInit
  4884 ;; This function uses a non-reentrant model
  4885 ;;
  4886                           
  4887                           
  4888                           ;psect for function _InitSchTimer
  4889  09AF                     _InitSchTimer:	
  4890                           
  4891                           ;sys_init.c: 72: TmrBConfigType TmrBConfig;
  4892                           ;sys_init.c: 75: TmrBConfig.PreScaler = 16;
  4893                           
  4894                           ;incstack = 0
  4895                           ; Regs used in _InitSchTimer: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  4896  09AF  3010               	movlw	16
  4897  09B0  0020               	movlb	0	; select bank0
  4898  09B1  00C5               	movwf	??_InitSchTimer
  4899  09B2  0845               	movf	??_InitSchTimer,w
  4900  09B3  00C6               	movwf	InitSchTimer@TmrBConfig
  4901                           
  4902                           ;sys_init.c: 76: TmrBConfig.PostScaler = 4;
  4903  09B4  3004               	movlw	4
  4904  09B5  00C5               	movwf	??_InitSchTimer
  4905  09B6  0845               	movf	??_InitSchTimer,w
  4906  09B7  00C7               	movwf	InitSchTimer@TmrBConfig+1
  4907                           
  4908                           ;sys_init.c: 77: TmrBConfig.IntEnable = 1u;
  4909  09B8  01C8               	clrf	InitSchTimer@TmrBConfig+2
  4910  09B9  0AC8               	incf	InitSchTimer@TmrBConfig+2,f
  4911                           
  4912                           ;sys_init.c: 78: TmrBConfig.IntFreqHz = 1000;
  4913  09BA  30E8               	movlw	232
  4914  09BB  00C9               	movwf	InitSchTimer@TmrBConfig+3
  4915  09BC  3003               	movlw	3
  4916  09BD  00CA               	movwf	InitSchTimer@TmrBConfig+4
  4917                           
  4918                           ;sys_init.c: 79: TmrBConfig.StartTmrRequest = StartTmrReq;
  4919  09BE  01CB               	clrf	InitSchTimer@TmrBConfig+5
  4920  09BF  0ACB               	incf	InitSchTimer@TmrBConfig+5,f
  4921                           
  4922                           ;sys_init.c: 82: Tmr_TmrBConfig(((UINT8)(2)),&TmrBConfig);
  4923  09C0  3046               	movlw	(low (InitSchTimer@TmrBConfig| 0))& (0+255)
  4924  09C1  00C5               	movwf	??_InitSchTimer
  4925  09C2  0845               	movf	??_InitSchTimer,w
  4926  09C3  00C2               	movwf	Tmr_TmrBConfig@TmrBConfig
  4927  09C4  3002               	movlw	2
  4928  09C5  318D  25D3         	fcall	_Tmr_TmrBConfig
  4929  09C7  0008               	return
  4930  09C8                     __end_of_InitSchTimer:	
  4931                           
  4932                           	psect	text5
  4933  0DD3                     __ptext5:	
  4934 ;; *************** function _Tmr_TmrBConfig *****************
  4935 ;; Defined at:
  4936 ;;		line 313 in file "../../../Framework/MercuryFwk/Source/c/01_Hal/02_Drv/tmr_drv.c"
  4937 ;; Parameters:    Size  Location     Type
  4938 ;;  TmrNumb         1    wreg     unsigned char 
  4939 ;;  TmrBConfig      1   34[BANK0 ] PTR struct _TmrBConfigTy
  4940 ;;		 -> InitSchTimer@TmrBConfig(6), 
  4941 ;; Auto vars:     Size  Location     Type
  4942 ;;  TmrNumb         1   36[BANK0 ] unsigned char 
  4943 ;; Return value:  Size  Location     Type
  4944 ;;                  1    wreg      void 
  4945 ;; Registers used:
  4946 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4947 ;; Tracked objects:
  4948 ;;		On entry : 0/0
  4949 ;;		On exit  : 0/0
  4950 ;;		Unchanged: 0/0
  4951 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4952 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4953 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4954 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4955 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4956 ;;Total ram usage:        3 bytes
  4957 ;; Hardware stack levels used:    1
  4958 ;; Hardware stack levels required when called:    4
  4959 ;; This function calls:
  4960 ;;		_TmrBInit
  4961 ;;		_Tmr_StartTmr
  4962 ;;		_Tmr_TmrBIrqSet
  4963 ;;		_Tmr_TmrBPrSet
  4964 ;; This function is called by:
  4965 ;;		_InitSchTimer
  4966 ;; This function uses a non-reentrant model
  4967 ;;
  4968                           
  4969                           
  4970                           ;psect for function _Tmr_TmrBConfig
  4971  0DD3                     _Tmr_TmrBConfig:	
  4972                           
  4973                           ;incstack = 0
  4974                           ; Regs used in _Tmr_TmrBConfig: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  4975                           ;Tmr_TmrBConfig@TmrNumb stored from wreg
  4976  0DD3  0020               	movlb	0	; select bank0
  4977  0DD4  00C4               	movwf	Tmr_TmrBConfig@TmrNumb
  4978                           
  4979                           ;tmr_drv.c: 316: TmrBInit(TmrNumb,TmrBConfig->PreScaler,TmrBConfig->PostScaler);
  4980  0DD5  0842               	movf	Tmr_TmrBConfig@TmrBConfig,w
  4981  0DD6  0086               	movwf	6
  4982  0DD7  0187               	clrf	7
  4983  0DD8  0801               	movf	1,w
  4984  0DD9  00C3               	movwf	??_Tmr_TmrBConfig
  4985  0DDA  0843               	movf	??_Tmr_TmrBConfig,w
  4986  0DDB  00F4               	movwf	TmrBInit@Prescaler
  4987  0DDC  0842               	movf	Tmr_TmrBConfig@TmrBConfig,w
  4988  0DDD  0086               	movwf	6
  4989  0DDE  0187               	clrf	7
  4990  0DDF  3F41               	moviw [1]fsr1
  4991  0DE0  00F5               	movwf	TmrBInit@Postscaler
  4992  0DE1  0844               	movf	Tmr_TmrBConfig@TmrNumb,w
  4993  0DE2  3186  2653  318D   	fcall	_TmrBInit
  4994                           
  4995                           ;tmr_drv.c: 318: if (TmrBConfig->IntEnable == EnableInt)
  4996  0DE5  0020               	movlb	0	; select bank0
  4997  0DE6  0842               	movf	Tmr_TmrBConfig@TmrBConfig,w
  4998  0DE7  3E02               	addlw	2
  4999  0DE8  0086               	movwf	6
  5000  0DE9  0187               	clrf	7
  5001  0DEA  0301               	decf	1,w
  5002  0DEB  1D03               	btfss	3,2
  5003  0DEC  2DF0               	goto	l4559
  5004                           
  5005                           ;tmr_drv.c: 319: {
  5006                           ;tmr_drv.c: 321: Tmr_TmrBIrqSet(TmrNumb,((UINT8)(1)));
  5007  0DED  01F4               	clrf	Tmr_TmrBIrqSet@TmrIrqSts
  5008  0DEE  0AF4               	incf	Tmr_TmrBIrqSet@TmrIrqSts,f
  5009  0DEF  2DF2               	goto	L1
  5010  0DF0                     l4559:	
  5011                           ;tmr_drv.c: 322: }
  5012                           
  5013                           
  5014                           ;tmr_drv.c: 323: else
  5015                           ;tmr_drv.c: 324: {
  5016                           ;tmr_drv.c: 326: Tmr_TmrBIrqSet(TmrNumb,((UINT8)(0)));
  5017  0DF0  01F4               	clrf	Tmr_TmrBIrqSet@TmrIrqSts
  5018  0DF1  0020               	movlb	0	; select bank0
  5019  0DF2                     L1:	
  5020  0DF2  0844               	movf	Tmr_TmrBConfig@TmrNumb,w
  5021  0DF3  318B  2338  318D   	fcall	_Tmr_TmrBIrqSet
  5022                           
  5023                           ;tmr_drv.c: 327: }
  5024                           ;tmr_drv.c: 329: if (Tmr_TmrBPrSet(TmrNumb,TmrBConfig->IntFreqHz,TmrBConfig->PreScaler,T
      +                          mrBConfig->PostScaler) == CfgError)
  5025  0DF6  0020               	movlb	0	; select bank0
  5026  0DF7  0842               	movf	Tmr_TmrBConfig@TmrBConfig,w
  5027  0DF8  3E03               	addlw	3
  5028  0DF9  0086               	movwf	6
  5029  0DFA  0187               	clrf	7
  5030  0DFB  3F40               	moviw [0]fsr1
  5031  0DFC  00B0               	movwf	Tmr_TmrBPrSet@IntFreqHz
  5032  0DFD  3F41               	moviw [1]fsr1
  5033  0DFE  00B1               	movwf	Tmr_TmrBPrSet@IntFreqHz+1
  5034  0DFF  0842               	movf	Tmr_TmrBConfig@TmrBConfig,w
  5035  0E00  0086               	movwf	6
  5036  0E01  0187               	clrf	7
  5037  0E02  0801               	movf	1,w
  5038  0E03  00C3               	movwf	??_Tmr_TmrBConfig
  5039  0E04  0843               	movf	??_Tmr_TmrBConfig,w
  5040  0E05  00B2               	movwf	Tmr_TmrBPrSet@Prescaler
  5041  0E06  0842               	movf	Tmr_TmrBConfig@TmrBConfig,w
  5042  0E07  0086               	movwf	6
  5043  0E08  0187               	clrf	7
  5044  0E09  3F41               	moviw [1]fsr1
  5045  0E0A  00B3               	movwf	Tmr_TmrBPrSet@Postscaler
  5046  0E0B  0844               	movf	Tmr_TmrBConfig@TmrNumb,w
  5047  0E0C  3183  232E  318D   	fcall	_Tmr_TmrBPrSet
  5048  0E0F  3A01               	xorlw	1
  5049  0E10  1903               	btfsc	3,2
  5050  0E11                     l353:	
  5051                           ;tmr_drv.c: 330: {
  5052                           ;tmr_drv.c: 332: while(1);
  5053                           
  5054  0E11  2E11               	goto	l353
  5055                           
  5056                           ;tmr_drv.c: 333: }
  5057                           ;tmr_drv.c: 335: if (TmrBConfig->StartTmrRequest == StartTmrReq)
  5058  0E12  0020               	movlb	0	; select bank0
  5059  0E13  0842               	movf	Tmr_TmrBConfig@TmrBConfig,w
  5060  0E14  3E05               	addlw	5
  5061  0E15  0086               	movwf	6
  5062  0E16  0187               	clrf	7
  5063  0E17  0301               	decf	1,w
  5064  0E18  1D03               	btfss	3,2
  5065  0E19  0008               	return
  5066                           
  5067                           ;tmr_drv.c: 336: {
  5068                           ;tmr_drv.c: 338: Tmr_StartTmr(TmrNumb);
  5069  0E1A  0844               	movf	Tmr_TmrBConfig@TmrNumb,w
  5070  0E1B  3189  2166         	fcall	_Tmr_StartTmr
  5071                           
  5072                           ;tmr_drv.c: 339: }
  5073  0E1D  0008               	return
  5074  0E1E                     __end_of_Tmr_TmrBConfig:	
  5075                           ;tmr_drv.c: 340: else
  5076                           ;tmr_drv.c: 341: {
  5077                           
  5078                           
  5079                           	psect	text6
  5080  032E                     __ptext6:	
  5081 ;; *************** function _Tmr_TmrBPrSet *****************
  5082 ;; Defined at:
  5083 ;;		line 225 in file "../../../Framework/MercuryFwk/Source/c/01_Hal/02_Drv/tmr_drv.c"
  5084 ;; Parameters:    Size  Location     Type
  5085 ;;  TmrNumb         1    wreg     unsigned char 
  5086 ;;  IntFreqHz       2   16[BANK0 ] unsigned short 
  5087 ;;  Prescaler       1   18[BANK0 ] unsigned char 
  5088 ;;  Postscaler      1   19[BANK0 ] unsigned char 
  5089 ;; Auto vars:     Size  Location     Type
  5090 ;;  TmrNumb         1   28[BANK0 ] unsigned char 
  5091 ;;  Divisor         4   30[BANK0 ] unsigned long 
  5092 ;;  TmrBPrCfgSts    1   29[BANK0 ] enum E3647
  5093 ;; Return value:  Size  Location     Type
  5094 ;;                  1    wreg      enum E3647
  5095 ;; Registers used:
  5096 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  5097 ;; Tracked objects:
  5098 ;;		On entry : 0/0
  5099 ;;		On exit  : 0/0
  5100 ;;		Unchanged: 0/0
  5101 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5102 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5103 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5104 ;;      Temps:          0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5105 ;;      Totals:         0      18       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5106 ;;Total ram usage:       18 bytes
  5107 ;; Hardware stack levels used:    1
  5108 ;; Hardware stack levels required when called:    3
  5109 ;; This function calls:
  5110 ;;		___lldiv
  5111 ;;		___lmul
  5112 ;;		___wmul
  5113 ;; This function is called by:
  5114 ;;		_Tmr_TmrBConfig
  5115 ;; This function uses a non-reentrant model
  5116 ;;
  5117                           
  5118                           
  5119                           ;psect for function _Tmr_TmrBPrSet
  5120  032E                     _Tmr_TmrBPrSet:	
  5121                           
  5122                           ;incstack = 0
  5123                           ; Regs used in _Tmr_TmrBPrSet: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  5124                           ;Tmr_TmrBPrSet@TmrNumb stored from wreg
  5125  032E  0020               	movlb	0	; select bank0
  5126  032F  00BC               	movwf	Tmr_TmrBPrSet@TmrNumb
  5127                           
  5128                           ;tmr_drv.c: 227: CfgStsType TmrBPrCfgSts;
  5129                           ;tmr_drv.c: 228: UINT32 Divisor = 0;
  5130  0330  3000               	movlw	0
  5131  0331  00C1               	movwf	Tmr_TmrBPrSet@Divisor+3
  5132  0332  3000               	movlw	0
  5133  0333  00C0               	movwf	Tmr_TmrBPrSet@Divisor+2
  5134  0334  3000               	movlw	0
  5135  0335  00BF               	movwf	Tmr_TmrBPrSet@Divisor+1
  5136  0336  3000               	movlw	0
  5137  0337  00BE               	movwf	Tmr_TmrBPrSet@Divisor
  5138                           
  5139                           ;tmr_drv.c: 231: Divisor = (UINT32)Prescaler*(UINT32)Postscaler*(UINT32)IntFreqHz;
  5140  0338  0833               	movf	Tmr_TmrBPrSet@Postscaler,w
  5141  0339  00B4               	movwf	??_Tmr_TmrBPrSet
  5142  033A  01B5               	clrf	??_Tmr_TmrBPrSet+1
  5143  033B  0834               	movf	??_Tmr_TmrBPrSet,w
  5144  033C  00A2               	movwf	___wmul@multiplicand
  5145  033D  0835               	movf	??_Tmr_TmrBPrSet+1,w
  5146  033E  00A3               	movwf	___wmul@multiplicand+1
  5147  033F  0832               	movf	Tmr_TmrBPrSet@Prescaler,w
  5148  0340  00B6               	movwf	??_Tmr_TmrBPrSet+2
  5149  0341  01B7               	clrf	??_Tmr_TmrBPrSet+3
  5150  0342  0836               	movf	??_Tmr_TmrBPrSet+2,w
  5151  0343  00A0               	movwf	___wmul@multiplier
  5152  0344  0837               	movf	??_Tmr_TmrBPrSet+3,w
  5153  0345  00A1               	movwf	___wmul@multiplier+1
  5154  0346  3189  21FF  3183   	fcall	___wmul
  5155  0349  0020               	movlb	0	; select bank0
  5156  034A  0820               	movf	?___wmul,w
  5157  034B  00B8               	movwf	??_Tmr_TmrBPrSet+4
  5158  034C  0821               	movf	?___wmul+1,w
  5159  034D  00B9               	movwf	??_Tmr_TmrBPrSet+5
  5160  034E  01BA               	clrf	??_Tmr_TmrBPrSet+6
  5161  034F  01BB               	clrf	??_Tmr_TmrBPrSet+7
  5162  0350  083B               	movf	??_Tmr_TmrBPrSet+7,w
  5163  0351  00A7               	movwf	___lmul@multiplier+3
  5164  0352  083A               	movf	??_Tmr_TmrBPrSet+6,w
  5165  0353  00A6               	movwf	___lmul@multiplier+2
  5166  0354  0839               	movf	??_Tmr_TmrBPrSet+5,w
  5167  0355  00A5               	movwf	___lmul@multiplier+1
  5168  0356  0838               	movf	??_Tmr_TmrBPrSet+4,w
  5169  0357  00A4               	movwf	___lmul@multiplier
  5170  0358  0830               	movf	Tmr_TmrBPrSet@IntFreqHz,w
  5171  0359  00A8               	movwf	___lmul@multiplicand
  5172  035A  0831               	movf	Tmr_TmrBPrSet@IntFreqHz+1,w
  5173  035B  00A9               	movwf	___lmul@multiplicand+1
  5174  035C  01AA               	clrf	___lmul@multiplicand+2
  5175  035D  01AB               	clrf	___lmul@multiplicand+3
  5176  035E  318B  23BE  3183   	fcall	___lmul
  5177  0361  0020               	movlb	0	; select bank0
  5178  0362  0827               	movf	?___lmul+3,w
  5179  0363  00C1               	movwf	Tmr_TmrBPrSet@Divisor+3
  5180  0364  0826               	movf	?___lmul+2,w
  5181  0365  00C0               	movwf	Tmr_TmrBPrSet@Divisor+2
  5182  0366  0825               	movf	?___lmul+1,w
  5183  0367  00BF               	movwf	Tmr_TmrBPrSet@Divisor+1
  5184  0368  0824               	movf	?___lmul,w
  5185  0369  00BE               	movwf	Tmr_TmrBPrSet@Divisor
  5186                           
  5187                           ;tmr_drv.c: 234: if (((((UINT32)(16000000))/4)/Divisor) <= 255)
  5188  036A  0841               	movf	Tmr_TmrBPrSet@Divisor+3,w
  5189  036B  00A3               	movwf	___lldiv@divisor+3
  5190  036C  0840               	movf	Tmr_TmrBPrSet@Divisor+2,w
  5191  036D  00A2               	movwf	___lldiv@divisor+2
  5192  036E  083F               	movf	Tmr_TmrBPrSet@Divisor+1,w
  5193  036F  00A1               	movwf	___lldiv@divisor+1
  5194  0370  083E               	movf	Tmr_TmrBPrSet@Divisor,w
  5195  0371  00A0               	movwf	___lldiv@divisor
  5196  0372  3000               	movlw	0
  5197  0373  00A7               	movwf	___lldiv@dividend+3
  5198  0374  303D               	movlw	61
  5199  0375  00A6               	movwf	___lldiv@dividend+2
  5200  0376  3009               	movlw	9
  5201  0377  00A5               	movwf	___lldiv@dividend+1
  5202  0378  3000               	movlw	0
  5203  0379  00A4               	movwf	___lldiv@dividend
  5204  037A  318E  261E  3183   	fcall	___lldiv
  5205  037D  0020               	movlb	0	; select bank0
  5206  037E  0823               	movf	?___lldiv+3,w
  5207  037F  1D03               	btfss	3,2
  5208  0380  2BE0               	goto	l329
  5209  0381  0822               	movf	?___lldiv+2,w
  5210  0382  1D03               	btfss	3,2
  5211  0383  2BE0               	goto	l329
  5212  0384  3001               	movlw	1
  5213  0385  0221               	subwf	?___lldiv+1,w
  5214  0386  1C03               	btfss	3,0
  5215  0387  2BD1               	goto	l4379
  5216  0388  2BE0               	goto	l329
  5217  0389                     l4371:	
  5218                           ;tmr_drv.c: 238: {
  5219                           ;tmr_drv.c: 239: case ((UINT8)(2)):
  5220                           
  5221                           ;tmr_drv.c: 235: {
  5222                           ;tmr_drv.c: 237: switch (TmrNumb)
  5223                           
  5224                           
  5225                           ;tmr_drv.c: 241: PR2 = (((UINT32)(16000000))/4)/Divisor;
  5226  0389  0841               	movf	Tmr_TmrBPrSet@Divisor+3,w
  5227  038A  00A3               	movwf	___lldiv@divisor+3
  5228  038B  0840               	movf	Tmr_TmrBPrSet@Divisor+2,w
  5229  038C  00A2               	movwf	___lldiv@divisor+2
  5230  038D  083F               	movf	Tmr_TmrBPrSet@Divisor+1,w
  5231  038E  00A1               	movwf	___lldiv@divisor+1
  5232  038F  083E               	movf	Tmr_TmrBPrSet@Divisor,w
  5233  0390  00A0               	movwf	___lldiv@divisor
  5234  0391  3000               	movlw	0
  5235  0392  00A7               	movwf	___lldiv@dividend+3
  5236  0393  303D               	movlw	61
  5237  0394  00A6               	movwf	___lldiv@dividend+2
  5238  0395  3009               	movlw	9
  5239  0396  00A5               	movwf	___lldiv@dividend+1
  5240  0397  3000               	movlw	0
  5241  0398  00A4               	movwf	___lldiv@dividend
  5242  0399  318E  261E  3183   	fcall	___lldiv
  5243  039C  0020               	movlb	0	; select bank0
  5244  039D  0820               	movf	?___lldiv,w
  5245  039E  009B               	movwf	27	;volatile
  5246                           
  5247                           ;tmr_drv.c: 242: break;
  5248  039F  2BDD               	goto	l4381
  5249  03A0                     l4373:	
  5250                           ;tmr_drv.c: 244: case ((UINT8)(4)):
  5251                           
  5252                           
  5253                           ;tmr_drv.c: 246: PR4 = (((UINT32)(16000000))/4)/Divisor;
  5254  03A0  0841               	movf	Tmr_TmrBPrSet@Divisor+3,w
  5255  03A1  00A3               	movwf	___lldiv@divisor+3
  5256  03A2  0840               	movf	Tmr_TmrBPrSet@Divisor+2,w
  5257  03A3  00A2               	movwf	___lldiv@divisor+2
  5258  03A4  083F               	movf	Tmr_TmrBPrSet@Divisor+1,w
  5259  03A5  00A1               	movwf	___lldiv@divisor+1
  5260  03A6  083E               	movf	Tmr_TmrBPrSet@Divisor,w
  5261  03A7  00A0               	movwf	___lldiv@divisor
  5262  03A8  3000               	movlw	0
  5263  03A9  00A7               	movwf	___lldiv@dividend+3
  5264  03AA  303D               	movlw	61
  5265  03AB  00A6               	movwf	___lldiv@dividend+2
  5266  03AC  3009               	movlw	9
  5267  03AD  00A5               	movwf	___lldiv@dividend+1
  5268  03AE  3000               	movlw	0
  5269  03AF  00A4               	movwf	___lldiv@dividend
  5270  03B0  318E  261E  3183   	fcall	___lldiv
  5271  03B3  0020               	movlb	0	; select bank0
  5272  03B4  0820               	movf	?___lldiv,w
  5273  03B5  0028               	movlb	8	; select bank8
  5274  03B6  0096               	movwf	22	;volatile
  5275                           
  5276                           ;tmr_drv.c: 247: break;
  5277  03B7  2BDD               	goto	l4381
  5278  03B8                     l4375:	
  5279                           ;tmr_drv.c: 249: case ((UINT8)(6)):
  5280                           
  5281                           
  5282                           ;tmr_drv.c: 251: PR6 = (((UINT32)(16000000))/4)/Divisor;
  5283  03B8  0020               	movlb	0	; select bank0
  5284  03B9  0841               	movf	Tmr_TmrBPrSet@Divisor+3,w
  5285  03BA  00A3               	movwf	___lldiv@divisor+3
  5286  03BB  0840               	movf	Tmr_TmrBPrSet@Divisor+2,w
  5287  03BC  00A2               	movwf	___lldiv@divisor+2
  5288  03BD  083F               	movf	Tmr_TmrBPrSet@Divisor+1,w
  5289  03BE  00A1               	movwf	___lldiv@divisor+1
  5290  03BF  083E               	movf	Tmr_TmrBPrSet@Divisor,w
  5291  03C0  00A0               	movwf	___lldiv@divisor
  5292  03C1  3000               	movlw	0
  5293  03C2  00A7               	movwf	___lldiv@dividend+3
  5294  03C3  303D               	movlw	61
  5295  03C4  00A6               	movwf	___lldiv@dividend+2
  5296  03C5  3009               	movlw	9
  5297  03C6  00A5               	movwf	___lldiv@dividend+1
  5298  03C7  3000               	movlw	0
  5299  03C8  00A4               	movwf	___lldiv@dividend
  5300  03C9  318E  261E  3183   	fcall	___lldiv
  5301  03CC  0020               	movlb	0	; select bank0
  5302  03CD  0820               	movf	?___lldiv,w
  5303  03CE  0028               	movlb	8	; select bank8
  5304  03CF  009D               	movwf	29	;volatile
  5305                           
  5306                           ;tmr_drv.c: 256: }
  5307                           
  5308                           ;tmr_drv.c: 255: break;
  5309                           
  5310                           ;tmr_drv.c: 254: default:
  5311                           
  5312                           ;tmr_drv.c: 252: break;
  5313  03D0  2BDD               	goto	l4381
  5314  03D1                     l4379:	
  5315  03D1  0020               	movlb	0	; select bank0
  5316  03D2  083C               	movf	Tmr_TmrBPrSet@TmrNumb,w
  5317                           
  5318                           ; Switch size 1, requested type "space"
  5319                           ; Number of cases is 3, Range of values is 2 to 6
  5320                           ; switch strategies available:
  5321                           ; Name         Instructions Cycles
  5322                           ; simple_byte           10     6 (average)
  5323                           ; direct_byte           19     9 (fixed)
  5324                           ; jumptable            263     9 (fixed)
  5325                           ;	Chosen strategy is simple_byte
  5326  03D3  3A02               	xorlw	2	; case 2
  5327  03D4  1903               	skipnz
  5328  03D5  2B89               	goto	l4371
  5329  03D6  3A06               	xorlw	6	; case 4
  5330  03D7  1903               	skipnz
  5331  03D8  2BA0               	goto	l4373
  5332  03D9  3A02               	xorlw	2	; case 6
  5333  03DA  1903               	skipnz
  5334  03DB  2BB8               	goto	l4375
  5335  03DC  2BDD               	goto	l4381
  5336  03DD                     l4381:	
  5337                           
  5338                           ;tmr_drv.c: 259: TmrBPrCfgSts = CfgOk;
  5339  03DD  0020               	movlb	0	; select bank0
  5340  03DE  01BD               	clrf	Tmr_TmrBPrSet@TmrBPrCfgSts
  5341                           
  5342                           ;tmr_drv.c: 260: }
  5343  03DF  2BE2               	goto	l4383
  5344  03E0                     l329:	
  5345                           
  5346                           ;tmr_drv.c: 261: else
  5347                           ;tmr_drv.c: 262: {
  5348                           ;tmr_drv.c: 264: TmrBPrCfgSts = CfgError;
  5349  03E0  01BD               	clrf	Tmr_TmrBPrSet@TmrBPrCfgSts
  5350  03E1  0ABD               	incf	Tmr_TmrBPrSet@TmrBPrCfgSts,f
  5351  03E2                     l4383:	
  5352                           
  5353                           ;tmr_drv.c: 265: }
  5354                           ;tmr_drv.c: 268: return TmrBPrCfgSts;
  5355  03E2  083D               	movf	Tmr_TmrBPrSet@TmrBPrCfgSts,w
  5356  03E3  0008               	return
  5357  03E4                     __end_of_Tmr_TmrBPrSet:	
  5358                           
  5359                           	psect	text7
  5360  09FF                     __ptext7:	
  5361 ;; *************** function ___wmul *****************
  5362 ;; Defined at:
  5363 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\Umul16.c"
  5364 ;; Parameters:    Size  Location     Type
  5365 ;;  multiplier      2    0[BANK0 ] unsigned int 
  5366 ;;  multiplicand    2    2[BANK0 ] unsigned int 
  5367 ;; Auto vars:     Size  Location     Type
  5368 ;;  product         2    4[COMMON] unsigned int 
  5369 ;; Return value:  Size  Location     Type
  5370 ;;                  2    0[BANK0 ] unsigned int 
  5371 ;; Registers used:
  5372 ;;		wreg, status,2, status,0
  5373 ;; Tracked objects:
  5374 ;;		On entry : 0/0
  5375 ;;		On exit  : 0/0
  5376 ;;		Unchanged: 0/0
  5377 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5378 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5379 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5380 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5381 ;;      Totals:         2       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5382 ;;Total ram usage:        6 bytes
  5383 ;; Hardware stack levels used:    1
  5384 ;; Hardware stack levels required when called:    2
  5385 ;; This function calls:
  5386 ;;		Nothing
  5387 ;; This function is called by:
  5388 ;;		_Tmr_TmrBPrSet
  5389 ;; This function uses a non-reentrant model
  5390 ;;
  5391                           
  5392                           
  5393                           ;psect for function ___wmul
  5394  09FF                     ___wmul:	
  5395                           
  5396                           ;incstack = 0
  5397                           ; Regs used in ___wmul: [wreg+status,2+status,0]
  5398  09FF  01F4               	clrf	___wmul@product
  5399  0A00  01F5               	clrf	___wmul@product+1
  5400  0A01                     l4291:	
  5401  0A01  0020               	movlb	0	; select bank0
  5402  0A02  1C20               	btfss	___wmul@multiplier,0
  5403  0A03  2A08               	goto	l1095
  5404  0A04  0822               	movf	___wmul@multiplicand,w
  5405  0A05  07F4               	addwf	___wmul@product,f
  5406  0A06  0823               	movf	___wmul@multiplicand+1,w
  5407  0A07  3DF5               	addwfc	___wmul@product+1,f
  5408  0A08                     l1095:	
  5409  0A08  3001               	movlw	1
  5410  0A09                     u2935:	
  5411  0A09  35A2               	lslf	___wmul@multiplicand,f
  5412  0A0A  0DA3               	rlf	___wmul@multiplicand+1,f
  5413  0A0B  0B89               	decfsz	9,f
  5414  0A0C  2A09               	goto	u2935
  5415  0A0D  3001               	movlw	1
  5416  0A0E                     u2945:	
  5417  0A0E  36A1               	lsrf	___wmul@multiplier+1,f
  5418  0A0F  0CA0               	rrf	___wmul@multiplier,f
  5419  0A10  0B89               	decfsz	9,f
  5420  0A11  2A0E               	goto	u2945
  5421  0A12  0820               	movf	___wmul@multiplier,w
  5422  0A13  0421               	iorwf	___wmul@multiplier+1,w
  5423  0A14  1D03               	btfss	3,2
  5424  0A15  2A01               	goto	l4291
  5425  0A16  0875               	movf	___wmul@product+1,w
  5426  0A17  00A1               	movwf	?___wmul+1
  5427  0A18  0874               	movf	___wmul@product,w
  5428  0A19  00A0               	movwf	?___wmul
  5429  0A1A  0008               	return
  5430  0A1B                     __end_of___wmul:	
  5431                           
  5432                           	psect	text8
  5433  0BBE                     __ptext8:	
  5434 ;; *************** function ___lmul *****************
  5435 ;; Defined at:
  5436 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\Umul32.c"
  5437 ;; Parameters:    Size  Location     Type
  5438 ;;  multiplier      4    4[BANK0 ] unsigned long 
  5439 ;;  multiplicand    4    8[BANK0 ] unsigned long 
  5440 ;; Auto vars:     Size  Location     Type
  5441 ;;  product         4   12[BANK0 ] unsigned long 
  5442 ;; Return value:  Size  Location     Type
  5443 ;;                  4    4[BANK0 ] unsigned long 
  5444 ;; Registers used:
  5445 ;;		wreg, status,2, status,0
  5446 ;; Tracked objects:
  5447 ;;		On entry : 0/0
  5448 ;;		On exit  : 0/0
  5449 ;;		Unchanged: 0/0
  5450 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5451 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5452 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5453 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5454 ;;      Totals:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5455 ;;Total ram usage:       12 bytes
  5456 ;; Hardware stack levels used:    1
  5457 ;; Hardware stack levels required when called:    2
  5458 ;; This function calls:
  5459 ;;		Nothing
  5460 ;; This function is called by:
  5461 ;;		_Tmr_TmrBPrSet
  5462 ;; This function uses a non-reentrant model
  5463 ;;
  5464                           
  5465                           
  5466                           ;psect for function ___lmul
  5467  0BBE                     ___lmul:	
  5468                           
  5469                           ;incstack = 0
  5470                           ; Regs used in ___lmul: [wreg+status,2+status,0]
  5471  0BBE  3000               	movlw	0
  5472  0BBF  0020               	movlb	0	; select bank0
  5473  0BC0  00AF               	movwf	___lmul@product+3
  5474  0BC1  3000               	movlw	0
  5475  0BC2  00AE               	movwf	___lmul@product+2
  5476  0BC3  3000               	movlw	0
  5477  0BC4  00AD               	movwf	___lmul@product+1
  5478  0BC5  3000               	movlw	0
  5479  0BC6  00AC               	movwf	___lmul@product
  5480  0BC7                     l3215:	
  5481  0BC7  1C24               	btfss	___lmul@multiplier,0
  5482  0BC8  2BD1               	goto	l3219
  5483  0BC9  0828               	movf	___lmul@multiplicand,w
  5484  0BCA  07AC               	addwf	___lmul@product,f
  5485  0BCB  0829               	movf	___lmul@multiplicand+1,w
  5486  0BCC  3DAD               	addwfc	___lmul@product+1,f
  5487  0BCD  082A               	movf	___lmul@multiplicand+2,w
  5488  0BCE  3DAE               	addwfc	___lmul@product+2,f
  5489  0BCF  082B               	movf	___lmul@multiplicand+3,w
  5490  0BD0  3DAF               	addwfc	___lmul@product+3,f
  5491  0BD1                     l3219:	
  5492  0BD1  3001               	movlw	1
  5493  0BD2                     u1785:	
  5494  0BD2  35A8               	lslf	___lmul@multiplicand,f
  5495  0BD3  0DA9               	rlf	___lmul@multiplicand+1,f
  5496  0BD4  0DAA               	rlf	___lmul@multiplicand+2,f
  5497  0BD5  0DAB               	rlf	___lmul@multiplicand+3,f
  5498  0BD6  0B89               	decfsz	9,f
  5499  0BD7  2BD2               	goto	u1785
  5500  0BD8  3001               	movlw	1
  5501  0BD9                     u1795:	
  5502  0BD9  36A7               	lsrf	___lmul@multiplier+3,f
  5503  0BDA  0CA6               	rrf	___lmul@multiplier+2,f
  5504  0BDB  0CA5               	rrf	___lmul@multiplier+1,f
  5505  0BDC  0CA4               	rrf	___lmul@multiplier,f
  5506  0BDD  0B89               	decfsz	9,f
  5507  0BDE  2BD9               	goto	u1795
  5508  0BDF  0827               	movf	___lmul@multiplier+3,w
  5509  0BE0  0426               	iorwf	___lmul@multiplier+2,w
  5510  0BE1  0425               	iorwf	___lmul@multiplier+1,w
  5511  0BE2  0424               	iorwf	___lmul@multiplier,w
  5512  0BE3  1D03               	skipz
  5513  0BE4  2BC7               	goto	l3215
  5514  0BE5  082F               	movf	___lmul@product+3,w
  5515  0BE6  00A7               	movwf	?___lmul+3
  5516  0BE7  082E               	movf	___lmul@product+2,w
  5517  0BE8  00A6               	movwf	?___lmul+2
  5518  0BE9  082D               	movf	___lmul@product+1,w
  5519  0BEA  00A5               	movwf	?___lmul+1
  5520  0BEB  082C               	movf	___lmul@product,w
  5521  0BEC  00A4               	movwf	?___lmul
  5522  0BED  0008               	return
  5523  0BEE                     __end_of___lmul:	
  5524                           
  5525                           	psect	text9
  5526  0E1E                     __ptext9:	
  5527 ;; *************** function ___lldiv *****************
  5528 ;; Defined at:
  5529 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\lldiv.c"
  5530 ;; Parameters:    Size  Location     Type
  5531 ;;  divisor         4    0[BANK0 ] unsigned long 
  5532 ;;  dividend        4    4[BANK0 ] unsigned long 
  5533 ;; Auto vars:     Size  Location     Type
  5534 ;;  quotient        4    8[BANK0 ] unsigned long 
  5535 ;;  counter         1   12[BANK0 ] unsigned char 
  5536 ;; Return value:  Size  Location     Type
  5537 ;;                  4    0[BANK0 ] unsigned long 
  5538 ;; Registers used:
  5539 ;;		wreg, status,2, status,0
  5540 ;; Tracked objects:
  5541 ;;		On entry : 0/0
  5542 ;;		On exit  : 0/0
  5543 ;;		Unchanged: 0/0
  5544 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5545 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5546 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5547 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5548 ;;      Totals:         1      13       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5549 ;;Total ram usage:       14 bytes
  5550 ;; Hardware stack levels used:    1
  5551 ;; Hardware stack levels required when called:    2
  5552 ;; This function calls:
  5553 ;;		Nothing
  5554 ;; This function is called by:
  5555 ;;		_Tmr_TmrBPrSet
  5556 ;; This function uses a non-reentrant model
  5557 ;;
  5558                           
  5559                           
  5560                           ;psect for function ___lldiv
  5561  0E1E                     ___lldiv:	
  5562                           
  5563                           ;incstack = 0
  5564                           ; Regs used in ___lldiv: [wreg+status,2+status,0]
  5565  0E1E  3000               	movlw	0
  5566  0E1F  0020               	movlb	0	; select bank0
  5567  0E20  00AB               	movwf	___lldiv@quotient+3
  5568  0E21  3000               	movlw	0
  5569  0E22  00AA               	movwf	___lldiv@quotient+2
  5570  0E23  3000               	movlw	0
  5571  0E24  00A9               	movwf	___lldiv@quotient+1
  5572  0E25  3000               	movlw	0
  5573  0E26  00A8               	movwf	___lldiv@quotient
  5574  0E27  0823               	movf	___lldiv@divisor+3,w
  5575  0E28  0422               	iorwf	___lldiv@divisor+2,w
  5576  0E29  0421               	iorwf	___lldiv@divisor+1,w
  5577  0E2A  0420               	iorwf	___lldiv@divisor,w
  5578  0E2B  1903               	skipnz
  5579  0E2C  2E68               	goto	l4323
  5580  0E2D  01AC               	clrf	___lldiv@counter
  5581  0E2E  0AAC               	incf	___lldiv@counter,f
  5582  0E2F                     l4309:	
  5583  0E2F  1BA3               	btfsc	___lldiv@divisor+3,7
  5584  0E30  2E3D               	goto	l4311
  5585  0E31  3001               	movlw	1
  5586  0E32                     u2975:	
  5587  0E32  35A0               	lslf	___lldiv@divisor,f
  5588  0E33  0DA1               	rlf	___lldiv@divisor+1,f
  5589  0E34  0DA2               	rlf	___lldiv@divisor+2,f
  5590  0E35  0DA3               	rlf	___lldiv@divisor+3,f
  5591  0E36  0B89               	decfsz	9,f
  5592  0E37  2E32               	goto	u2975
  5593  0E38  3001               	movlw	1
  5594  0E39  00F4               	movwf	??___lldiv
  5595  0E3A  0874               	movf	??___lldiv,w
  5596  0E3B  07AC               	addwf	___lldiv@counter,f
  5597  0E3C  2E2F               	goto	l4309
  5598  0E3D                     l4311:	
  5599  0E3D  3001               	movlw	1
  5600  0E3E                     u2995:	
  5601  0E3E  35A8               	lslf	___lldiv@quotient,f
  5602  0E3F  0DA9               	rlf	___lldiv@quotient+1,f
  5603  0E40  0DAA               	rlf	___lldiv@quotient+2,f
  5604  0E41  0DAB               	rlf	___lldiv@quotient+3,f
  5605  0E42  0B89               	decfsz	9,f
  5606  0E43  2E3E               	goto	u2995
  5607  0E44  0823               	movf	___lldiv@divisor+3,w
  5608  0E45  0227               	subwf	___lldiv@dividend+3,w
  5609  0E46  1D03               	skipz
  5610  0E47  2E52               	goto	u3005
  5611  0E48  0822               	movf	___lldiv@divisor+2,w
  5612  0E49  0226               	subwf	___lldiv@dividend+2,w
  5613  0E4A  1D03               	skipz
  5614  0E4B  2E52               	goto	u3005
  5615  0E4C  0821               	movf	___lldiv@divisor+1,w
  5616  0E4D  0225               	subwf	___lldiv@dividend+1,w
  5617  0E4E  1D03               	skipz
  5618  0E4F  2E52               	goto	u3005
  5619  0E50  0820               	movf	___lldiv@divisor,w
  5620  0E51  0224               	subwf	___lldiv@dividend,w
  5621  0E52                     u3005:	
  5622  0E52  1C03               	skipc
  5623  0E53  2E5D               	goto	l4319
  5624  0E54  0820               	movf	___lldiv@divisor,w
  5625  0E55  02A4               	subwf	___lldiv@dividend,f
  5626  0E56  0821               	movf	___lldiv@divisor+1,w
  5627  0E57  3BA5               	subwfb	___lldiv@dividend+1,f
  5628  0E58  0822               	movf	___lldiv@divisor+2,w
  5629  0E59  3BA6               	subwfb	___lldiv@dividend+2,f
  5630  0E5A  0823               	movf	___lldiv@divisor+3,w
  5631  0E5B  3BA7               	subwfb	___lldiv@dividend+3,f
  5632  0E5C  1428               	bsf	___lldiv@quotient,0
  5633  0E5D                     l4319:	
  5634  0E5D  3001               	movlw	1
  5635  0E5E                     u3015:	
  5636  0E5E  36A3               	lsrf	___lldiv@divisor+3,f
  5637  0E5F  0CA2               	rrf	___lldiv@divisor+2,f
  5638  0E60  0CA1               	rrf	___lldiv@divisor+1,f
  5639  0E61  0CA0               	rrf	___lldiv@divisor,f
  5640  0E62  0B89               	decfsz	9,f
  5641  0E63  2E5E               	goto	u3015
  5642  0E64  3001               	movlw	1
  5643  0E65  02AC               	subwf	___lldiv@counter,f
  5644  0E66  1D03               	btfss	3,2
  5645  0E67  2E3D               	goto	l4311
  5646  0E68                     l4323:	
  5647  0E68  082B               	movf	___lldiv@quotient+3,w
  5648  0E69  00A3               	movwf	?___lldiv+3
  5649  0E6A  082A               	movf	___lldiv@quotient+2,w
  5650  0E6B  00A2               	movwf	?___lldiv+2
  5651  0E6C  0829               	movf	___lldiv@quotient+1,w
  5652  0E6D  00A1               	movwf	?___lldiv+1
  5653  0E6E  0828               	movf	___lldiv@quotient,w
  5654  0E6F  00A0               	movwf	?___lldiv
  5655  0E70  0008               	return
  5656  0E71                     __end_of___lldiv:	
  5657                           
  5658                           	psect	text10
  5659  0B38                     __ptext10:	
  5660 ;; *************** function _Tmr_TmrBIrqSet *****************
  5661 ;; Defined at:
  5662 ;;		line 182 in file "../../../Framework/MercuryFwk/Source/c/01_Hal/02_Drv/tmr_drv.c"
  5663 ;; Parameters:    Size  Location     Type
  5664 ;;  TmrNumb         1    wreg     unsigned char 
  5665 ;;  TmrIrqSts       1    4[COMMON] unsigned char 
  5666 ;; Auto vars:     Size  Location     Type
  5667 ;;  TmrNumb         1    5[COMMON] unsigned char 
  5668 ;; Return value:  Size  Location     Type
  5669 ;;                  1    wreg      void 
  5670 ;; Registers used:
  5671 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  5672 ;; Tracked objects:
  5673 ;;		On entry : 0/0
  5674 ;;		On exit  : 0/0
  5675 ;;		Unchanged: 0/0
  5676 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5677 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5678 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5679 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5680 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5681 ;;Total ram usage:        2 bytes
  5682 ;; Hardware stack levels used:    1
  5683 ;; Hardware stack levels required when called:    2
  5684 ;; This function calls:
  5685 ;;		Nothing
  5686 ;; This function is called by:
  5687 ;;		_Tmr_TmrBConfig
  5688 ;; This function uses a non-reentrant model
  5689 ;;
  5690                           
  5691                           
  5692                           ;psect for function _Tmr_TmrBIrqSet
  5693  0B38                     _Tmr_TmrBIrqSet:	
  5694                           
  5695                           ;incstack = 0
  5696                           ; Regs used in _Tmr_TmrBIrqSet: [wreg-fsr0h+status,2+status,0]
  5697                           ;Tmr_TmrBIrqSet@TmrNumb stored from wreg
  5698  0B38  00F5               	movwf	Tmr_TmrBIrqSet@TmrNumb
  5699                           
  5700                           ;tmr_drv.c: 185: switch (TmrNumb)
  5701  0B39  2B55               	goto	l3393
  5702  0B3A                     l321:	
  5703                           ;tmr_drv.c: 186: {
  5704                           ;tmr_drv.c: 187: case ((UINT8)(2)):
  5705                           
  5706                           
  5707                           ;tmr_drv.c: 189: PIR1bits.TMR2IF = 0u;
  5708  0B3A  0020               	movlb	0	; select bank0
  5709  0B3B  1091               	bcf	17,1	;volatile
  5710                           
  5711                           ;tmr_drv.c: 191: PIE1bits.TMR2IE = TmrIrqSts;
  5712  0B3C  0C74               	rrf	Tmr_TmrBIrqSet@TmrIrqSts,w
  5713  0B3D  0021               	movlb	1	; select bank1
  5714  0B3E  1C03               	skipc
  5715  0B3F  1091               	bcf	17,1	;volatile
  5716  0B40  1803               	skipnc
  5717  0B41  1491               	bsf	17,1	;volatile
  5718                           
  5719                           ;tmr_drv.c: 192: break;
  5720  0B42  0008               	return
  5721  0B43                     l323:	
  5722                           ;tmr_drv.c: 194: case ((UINT8)(4)):
  5723                           
  5724                           
  5725                           ;tmr_drv.c: 196: PIR3bits.TMR4IF = 0u;
  5726  0B43  0020               	movlb	0	; select bank0
  5727  0B44  1093               	bcf	19,1	;volatile
  5728                           
  5729                           ;tmr_drv.c: 198: PIE3bits.TMR4IE = TmrIrqSts;
  5730  0B45  0C74               	rrf	Tmr_TmrBIrqSet@TmrIrqSts,w
  5731  0B46  0021               	movlb	1	; select bank1
  5732  0B47  1C03               	skipc
  5733  0B48  1093               	bcf	19,1	;volatile
  5734  0B49  1803               	skipnc
  5735  0B4A  1493               	bsf	19,1	;volatile
  5736                           
  5737                           ;tmr_drv.c: 199: break;
  5738  0B4B  0008               	return
  5739  0B4C                     l324:	
  5740                           ;tmr_drv.c: 201: case ((UINT8)(6)):
  5741                           
  5742                           
  5743                           ;tmr_drv.c: 203: PIR3bits.TMR6IF = 0u;
  5744  0B4C  0020               	movlb	0	; select bank0
  5745  0B4D  1193               	bcf	19,3	;volatile
  5746                           
  5747                           ;tmr_drv.c: 205: PIE3bits.TMR6IE = TmrIrqSts;
  5748  0B4E  0C74               	rrf	Tmr_TmrBIrqSet@TmrIrqSts,w
  5749  0B4F  0021               	movlb	1	; select bank1
  5750  0B50  1C03               	skipc
  5751  0B51  1193               	bcf	19,3	;volatile
  5752  0B52  1803               	skipnc
  5753  0B53  1593               	bsf	19,3	;volatile
  5754                           
  5755                           ;tmr_drv.c: 210: }
  5756                           
  5757                           ;tmr_drv.c: 209: break;
  5758                           
  5759                           ;tmr_drv.c: 208: default:
  5760                           
  5761                           ;tmr_drv.c: 206: break;
  5762  0B54  0008               	return
  5763  0B55                     l3393:	
  5764  0B55  0875               	movf	Tmr_TmrBIrqSet@TmrNumb,w
  5765                           
  5766                           ; Switch size 1, requested type "space"
  5767                           ; Number of cases is 3, Range of values is 2 to 6
  5768                           ; switch strategies available:
  5769                           ; Name         Instructions Cycles
  5770                           ; simple_byte           10     6 (average)
  5771                           ; direct_byte           19     9 (fixed)
  5772                           ; jumptable            263     9 (fixed)
  5773                           ;	Chosen strategy is simple_byte
  5774  0B56  3A02               	xorlw	2	; case 2
  5775  0B57  1903               	skipnz
  5776  0B58  2B3A               	goto	l321
  5777  0B59  3A06               	xorlw	6	; case 4
  5778  0B5A  1903               	skipnz
  5779  0B5B  2B43               	goto	l323
  5780  0B5C  3A02               	xorlw	2	; case 6
  5781  0B5D  1903               	skipnz
  5782  0B5E  2B4C               	goto	l324
  5783  0B5F  2B60               	goto	l326
  5784  0B60                     l326:	
  5785  0B60  0008               	return
  5786  0B61                     __end_of_Tmr_TmrBIrqSet:	
  5787                           
  5788                           	psect	text11
  5789  0966                     __ptext11:	
  5790 ;; *************** function _Tmr_StartTmr *****************
  5791 ;; Defined at:
  5792 ;;		line 279 in file "../../../Framework/MercuryFwk/Source/c/01_Hal/02_Drv/tmr_drv.c"
  5793 ;; Parameters:    Size  Location     Type
  5794 ;;  TmrNumb         1    wreg     unsigned char 
  5795 ;; Auto vars:     Size  Location     Type
  5796 ;;  TmrNumb         1    4[COMMON] unsigned char 
  5797 ;; Return value:  Size  Location     Type
  5798 ;;                  1    wreg      void 
  5799 ;; Registers used:
  5800 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  5801 ;; Tracked objects:
  5802 ;;		On entry : 0/0
  5803 ;;		On exit  : 0/0
  5804 ;;		Unchanged: 0/0
  5805 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5806 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5807 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5808 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5809 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5810 ;;Total ram usage:        1 bytes
  5811 ;; Hardware stack levels used:    1
  5812 ;; Hardware stack levels required when called:    2
  5813 ;; This function calls:
  5814 ;;		Nothing
  5815 ;; This function is called by:
  5816 ;;		_Tmr_TmrBConfig
  5817 ;; This function uses a non-reentrant model
  5818 ;;
  5819                           
  5820                           
  5821                           ;psect for function _Tmr_StartTmr
  5822  0966                     _Tmr_StartTmr:	
  5823                           
  5824                           ;incstack = 0
  5825                           ; Regs used in _Tmr_StartTmr: [wreg-fsr0h+status,2+status,0]
  5826                           ;Tmr_StartTmr@TmrNumb stored from wreg
  5827  0966  00F4               	movwf	Tmr_StartTmr@TmrNumb
  5828                           
  5829                           ;tmr_drv.c: 282: switch (TmrNumb)
  5830  0967  2971               	goto	l3423
  5831  0968                     l341:	
  5832                           ;tmr_drv.c: 283: {
  5833                           ;tmr_drv.c: 284: case ((UINT8)(2)):
  5834                           
  5835                           
  5836                           ;tmr_drv.c: 286: T2CONbits.TMR2ON = 1u;
  5837  0968  0020               	movlb	0	; select bank0
  5838  0969  151C               	bsf	28,2	;volatile
  5839                           
  5840                           ;tmr_drv.c: 287: break;
  5841  096A  0008               	return
  5842  096B                     l343:	
  5843                           ;tmr_drv.c: 289: case ((UINT8)(4)):
  5844                           
  5845                           
  5846                           ;tmr_drv.c: 291: T4CONbits.TMR4ON = 1u;
  5847  096B  0028               	movlb	8	; select bank8
  5848  096C  1517               	bsf	23,2	;volatile
  5849                           
  5850                           ;tmr_drv.c: 292: break;
  5851  096D  0008               	return
  5852  096E                     l344:	
  5853                           ;tmr_drv.c: 294: case ((UINT8)(6)):
  5854                           
  5855                           
  5856                           ;tmr_drv.c: 296: T6CONbits.TMR6ON = 1u;
  5857  096E  0028               	movlb	8	; select bank8
  5858  096F  151E               	bsf	30,2	;volatile
  5859                           
  5860                           ;tmr_drv.c: 301: }
  5861                           
  5862                           ;tmr_drv.c: 300: break;
  5863                           
  5864                           ;tmr_drv.c: 299: default:
  5865                           
  5866                           ;tmr_drv.c: 297: break;
  5867  0970  0008               	return
  5868  0971                     l3423:	
  5869  0971  0874               	movf	Tmr_StartTmr@TmrNumb,w
  5870                           
  5871                           ; Switch size 1, requested type "space"
  5872                           ; Number of cases is 3, Range of values is 2 to 6
  5873                           ; switch strategies available:
  5874                           ; Name         Instructions Cycles
  5875                           ; simple_byte           10     6 (average)
  5876                           ; direct_byte           19     9 (fixed)
  5877                           ; jumptable            263     9 (fixed)
  5878                           ;	Chosen strategy is simple_byte
  5879  0972  3A02               	xorlw	2	; case 2
  5880  0973  1903               	skipnz
  5881  0974  2968               	goto	l341
  5882  0975  3A06               	xorlw	6	; case 4
  5883  0976  1903               	skipnz
  5884  0977  296B               	goto	l343
  5885  0978  3A02               	xorlw	2	; case 6
  5886  0979  1903               	skipnz
  5887  097A  296E               	goto	l344
  5888  097B  297C               	goto	l346
  5889  097C                     l346:	
  5890  097C  0008               	return
  5891  097D                     __end_of_Tmr_StartTmr:	
  5892                           
  5893                           	psect	text12
  5894  0653                     __ptext12:	
  5895 ;; *************** function _TmrBInit *****************
  5896 ;; Defined at:
  5897 ;;		line 72 in file "../../../Framework/MercuryFwk/Source/c/01_Hal/02_Drv/tmr_drv.c"
  5898 ;; Parameters:    Size  Location     Type
  5899 ;;  TmrNumb         1    wreg     unsigned char 
  5900 ;;  Prescaler       1    4[COMMON] unsigned char 
  5901 ;;  Postscaler      1    5[COMMON] unsigned char 
  5902 ;; Auto vars:     Size  Location     Type
  5903 ;;  TmrNumb         1    1[BANK0 ] unsigned char 
  5904 ;; Return value:  Size  Location     Type
  5905 ;;                  1    wreg      void 
  5906 ;; Registers used:
  5907 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  5908 ;; Tracked objects:
  5909 ;;		On entry : 0/0
  5910 ;;		On exit  : 0/0
  5911 ;;		Unchanged: 0/0
  5912 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5913 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5914 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5915 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5916 ;;      Totals:         2       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5917 ;;Total ram usage:        4 bytes
  5918 ;; Hardware stack levels used:    1
  5919 ;; Hardware stack levels required when called:    2
  5920 ;; This function calls:
  5921 ;;		Nothing
  5922 ;; This function is called by:
  5923 ;;		_Tmr_TmrBConfig
  5924 ;; This function uses a non-reentrant model
  5925 ;;
  5926                           
  5927                           
  5928                           ;psect for function _TmrBInit
  5929  0653                     _TmrBInit:	
  5930                           
  5931                           ;incstack = 0
  5932                           ; Regs used in _TmrBInit: [wreg-fsr0h+status,2+status,0]
  5933                           ;TmrBInit@TmrNumb stored from wreg
  5934  0653  0020               	movlb	0	; select bank0
  5935  0654  00A1               	movwf	TmrBInit@TmrNumb
  5936                           
  5937                           ;tmr_drv.c: 75: switch (TmrNumb)
  5938  0655  2EC1               	goto	l4361
  5939  0656                     l296:	
  5940                           ;tmr_drv.c: 80: {
  5941                           ;tmr_drv.c: 81: case ((UINT8)(1)):
  5942                           
  5943                           ;tmr_drv.c: 79: switch (Prescaler)
  5944                           
  5945                           ;tmr_drv.c: 76: {
  5946                           ;tmr_drv.c: 77: case ((UINT8)(2)):
  5947                           
  5948                           
  5949                           ;tmr_drv.c: 83: T2CONbits.T2CKPS0 = 0u;
  5950  0656  101C               	bcf	28,0	;volatile
  5951  0657  2E59               	goto	L2
  5952  0658                     l298:	
  5953                           ;tmr_drv.c: 87: case ((UINT8)(4)):
  5954                           
  5955                           ;tmr_drv.c: 85: break;
  5956                           
  5957                           ;tmr_drv.c: 84: T2CONbits.T2CKPS1 = 0u;
  5958                           
  5959                           
  5960                           ;tmr_drv.c: 89: T2CONbits.T2CKPS0 = 1u;
  5961  0658  141C               	bsf	28,0	;volatile
  5962  0659                     L2:	
  5963                           
  5964                           ;tmr_drv.c: 90: T2CONbits.T2CKPS1 = 0u;
  5965  0659  109C               	bcf	28,1	;volatile
  5966                           
  5967                           ;tmr_drv.c: 91: break;
  5968  065A  2E69               	goto	l4345
  5969  065B                     l299:	
  5970                           ;tmr_drv.c: 93: case ((UINT8)(16)):
  5971                           
  5972                           
  5973                           ;tmr_drv.c: 94: T2CONbits.T2CKPS0 = 0u;
  5974  065B  101C               	bcf	28,0	;volatile
  5975                           
  5976                           ;tmr_drv.c: 95: T2CONbits.T2CKPS1 = 1u;
  5977  065C  149C               	bsf	28,1	;volatile
  5978                           
  5979                           ;tmr_drv.c: 100: }
  5980                           
  5981                           ;tmr_drv.c: 99: break;
  5982                           
  5983                           ;tmr_drv.c: 98: default:
  5984                           
  5985                           ;tmr_drv.c: 96: break;
  5986  065D  2E69               	goto	l4345
  5987  065E                     l4343:	
  5988  065E  0874               	movf	TmrBInit@Prescaler,w
  5989                           
  5990                           ; Switch size 1, requested type "space"
  5991                           ; Number of cases is 3, Range of values is 1 to 16
  5992                           ; switch strategies available:
  5993                           ; Name         Instructions Cycles
  5994                           ; simple_byte           10     6 (average)
  5995                           ; direct_byte           41     9 (fixed)
  5996                           ; jumptable            263     9 (fixed)
  5997                           ;	Chosen strategy is simple_byte
  5998  065F  3A01               	xorlw	1	; case 1
  5999  0660  1903               	skipnz
  6000  0661  2E56               	goto	l296
  6001  0662  3A05               	xorlw	5	; case 4
  6002  0663  1903               	skipnz
  6003  0664  2E58               	goto	l298
  6004  0665  3A14               	xorlw	20	; case 16
  6005  0666  1903               	skipnz
  6006  0667  2E5B               	goto	l299
  6007  0668  2E69               	goto	l4345
  6008  0669                     l4345:	
  6009                           
  6010                           ;tmr_drv.c: 103: T2CONbits.T2OUTPS = (Postscaler - 1);
  6011  0669  0875               	movf	TmrBInit@Postscaler,w
  6012  066A  3EFF               	addlw	255
  6013  066B  00A0               	movwf	??_TmrBInit
  6014  066C  0DA0               	rlf	??_TmrBInit,f
  6015  066D  0DA0               	rlf	??_TmrBInit,f
  6016  066E  0DA0               	rlf	??_TmrBInit,f
  6017  066F  081C               	movf	28,w	;volatile
  6018  0670  0620               	xorwf	??_TmrBInit,w
  6019  0671  3987               	andlw	-121
  6020  0672  0620               	xorwf	??_TmrBInit,w
  6021  0673  009C               	movwf	28	;volatile
  6022                           
  6023                           ;tmr_drv.c: 104: break;
  6024  0674  0008               	return
  6025  0675                     l304:	
  6026                           ;tmr_drv.c: 109: {
  6027                           ;tmr_drv.c: 110: case ((UINT8)(1)):
  6028                           
  6029                           ;tmr_drv.c: 108: switch (Prescaler)
  6030                           
  6031                           ;tmr_drv.c: 106: case ((UINT8)(4)):
  6032                           
  6033                           
  6034                           ;tmr_drv.c: 112: T4CONbits.T4CKPS0 = 0u;
  6035  0675  0028               	movlb	8	; select bank8
  6036  0676  1017               	bcf	23,0	;volatile
  6037  0677  2E7A               	goto	L3
  6038  0678                     l306:	
  6039                           ;tmr_drv.c: 116: case ((UINT8)(4)):
  6040                           
  6041                           ;tmr_drv.c: 114: break;
  6042                           
  6043                           ;tmr_drv.c: 113: T4CONbits.T4CKPS1 = 0u;
  6044                           
  6045                           
  6046                           ;tmr_drv.c: 118: T4CONbits.T4CKPS0 = 1u;
  6047  0678  0028               	movlb	8	; select bank8
  6048  0679  1417               	bsf	23,0	;volatile
  6049  067A                     L3:	
  6050                           
  6051                           ;tmr_drv.c: 119: T4CONbits.T4CKPS1 = 0u;
  6052  067A  1097               	bcf	23,1	;volatile
  6053                           
  6054                           ;tmr_drv.c: 120: break;
  6055  067B  2E8B               	goto	l4351
  6056  067C                     l307:	
  6057                           ;tmr_drv.c: 122: case ((UINT8)(16)):
  6058                           
  6059                           
  6060                           ;tmr_drv.c: 123: T4CONbits.T4CKPS0 = 0u;
  6061  067C  0028               	movlb	8	; select bank8
  6062  067D  1017               	bcf	23,0	;volatile
  6063                           
  6064                           ;tmr_drv.c: 124: T4CONbits.T4CKPS1 = 1u;
  6065  067E  1497               	bsf	23,1	;volatile
  6066                           
  6067                           ;tmr_drv.c: 129: }
  6068                           
  6069                           ;tmr_drv.c: 128: break;
  6070                           
  6071                           ;tmr_drv.c: 127: default:
  6072                           
  6073                           ;tmr_drv.c: 125: break;
  6074  067F  2E8B               	goto	l4351
  6075  0680                     l4349:	
  6076  0680  0874               	movf	TmrBInit@Prescaler,w
  6077                           
  6078                           ; Switch size 1, requested type "space"
  6079                           ; Number of cases is 3, Range of values is 1 to 16
  6080                           ; switch strategies available:
  6081                           ; Name         Instructions Cycles
  6082                           ; simple_byte           10     6 (average)
  6083                           ; direct_byte           41     9 (fixed)
  6084                           ; jumptable            263     9 (fixed)
  6085                           ;	Chosen strategy is simple_byte
  6086  0681  3A01               	xorlw	1	; case 1
  6087  0682  1903               	skipnz
  6088  0683  2E75               	goto	l304
  6089  0684  3A05               	xorlw	5	; case 4
  6090  0685  1903               	skipnz
  6091  0686  2E78               	goto	l306
  6092  0687  3A14               	xorlw	20	; case 16
  6093  0688  1903               	skipnz
  6094  0689  2E7C               	goto	l307
  6095  068A  2E8B               	goto	l4351
  6096  068B                     l4351:	
  6097                           
  6098                           ;tmr_drv.c: 132: T4CONbits.T4OUTPS = (Postscaler - 1);
  6099  068B  0875               	movf	TmrBInit@Postscaler,w
  6100  068C  3EFF               	addlw	255
  6101  068D  0020               	movlb	0	; select bank0
  6102  068E  00A0               	movwf	??_TmrBInit
  6103  068F  0DA0               	rlf	??_TmrBInit,f
  6104  0690  0DA0               	rlf	??_TmrBInit,f
  6105  0691  0DA0               	rlf	??_TmrBInit,f
  6106  0692  0028               	movlb	8	; select bank8
  6107  0693  0817               	movf	23,w	;volatile
  6108  0694  0020               	movlb	0	; select bank0
  6109  0695  0620               	xorwf	??_TmrBInit,w
  6110  0696  3987               	andlw	-121
  6111  0697  0620               	xorwf	??_TmrBInit,w
  6112  0698  0028               	movlb	8	; select bank8
  6113  0699  0097               	movwf	23	;volatile
  6114                           
  6115                           ;tmr_drv.c: 133: break;
  6116  069A  0008               	return
  6117  069B                     l311:	
  6118                           ;tmr_drv.c: 138: {
  6119                           ;tmr_drv.c: 139: case ((UINT8)(1)):
  6120                           
  6121                           ;tmr_drv.c: 137: switch (Prescaler)
  6122                           
  6123                           ;tmr_drv.c: 135: case ((UINT8)(6)):
  6124                           
  6125                           
  6126                           ;tmr_drv.c: 141: T6CONbits.T6CKPS0 = 0u;
  6127  069B  0028               	movlb	8	; select bank8
  6128  069C  101E               	bcf	30,0	;volatile
  6129  069D  2EA0               	goto	L4
  6130  069E                     l313:	
  6131                           ;tmr_drv.c: 145: case ((UINT8)(4)):
  6132                           
  6133                           ;tmr_drv.c: 143: break;
  6134                           
  6135                           ;tmr_drv.c: 142: T6CONbits.T6CKPS1 = 0u;
  6136                           
  6137                           
  6138                           ;tmr_drv.c: 147: T6CONbits.T6CKPS0 = 1u;
  6139  069E  0028               	movlb	8	; select bank8
  6140  069F  141E               	bsf	30,0	;volatile
  6141  06A0                     L4:	
  6142                           
  6143                           ;tmr_drv.c: 148: T6CONbits.T6CKPS1 = 0u;
  6144  06A0  109E               	bcf	30,1	;volatile
  6145                           
  6146                           ;tmr_drv.c: 149: break;
  6147  06A1  2EB1               	goto	l4357
  6148  06A2                     l314:	
  6149                           ;tmr_drv.c: 151: case ((UINT8)(16)):
  6150                           
  6151                           
  6152                           ;tmr_drv.c: 152: T6CONbits.T6CKPS0 = 0u;
  6153  06A2  0028               	movlb	8	; select bank8
  6154  06A3  101E               	bcf	30,0	;volatile
  6155                           
  6156                           ;tmr_drv.c: 153: T6CONbits.T6CKPS1 = 1u;
  6157  06A4  149E               	bsf	30,1	;volatile
  6158                           
  6159                           ;tmr_drv.c: 158: }
  6160                           
  6161                           ;tmr_drv.c: 157: break;
  6162                           
  6163                           ;tmr_drv.c: 156: default:
  6164                           
  6165                           ;tmr_drv.c: 154: break;
  6166  06A5  2EB1               	goto	l4357
  6167  06A6                     l4355:	
  6168  06A6  0874               	movf	TmrBInit@Prescaler,w
  6169                           
  6170                           ; Switch size 1, requested type "space"
  6171                           ; Number of cases is 3, Range of values is 1 to 16
  6172                           ; switch strategies available:
  6173                           ; Name         Instructions Cycles
  6174                           ; simple_byte           10     6 (average)
  6175                           ; direct_byte           41     9 (fixed)
  6176                           ; jumptable            263     9 (fixed)
  6177                           ;	Chosen strategy is simple_byte
  6178  06A7  3A01               	xorlw	1	; case 1
  6179  06A8  1903               	skipnz
  6180  06A9  2E9B               	goto	l311
  6181  06AA  3A05               	xorlw	5	; case 4
  6182  06AB  1903               	skipnz
  6183  06AC  2E9E               	goto	l313
  6184  06AD  3A14               	xorlw	20	; case 16
  6185  06AE  1903               	skipnz
  6186  06AF  2EA2               	goto	l314
  6187  06B0  2EB1               	goto	l4357
  6188  06B1                     l4357:	
  6189                           
  6190                           ;tmr_drv.c: 161: T6CONbits.T6OUTPS = (Postscaler - 1);
  6191  06B1  0875               	movf	TmrBInit@Postscaler,w
  6192  06B2  3EFF               	addlw	255
  6193  06B3  0020               	movlb	0	; select bank0
  6194  06B4  00A0               	movwf	??_TmrBInit
  6195  06B5  0DA0               	rlf	??_TmrBInit,f
  6196  06B6  0DA0               	rlf	??_TmrBInit,f
  6197  06B7  0DA0               	rlf	??_TmrBInit,f
  6198  06B8  0028               	movlb	8	; select bank8
  6199  06B9  081E               	movf	30,w	;volatile
  6200  06BA  0020               	movlb	0	; select bank0
  6201  06BB  0620               	xorwf	??_TmrBInit,w
  6202  06BC  3987               	andlw	-121
  6203  06BD  0620               	xorwf	??_TmrBInit,w
  6204  06BE  0028               	movlb	8	; select bank8
  6205  06BF  009E               	movwf	30	;volatile
  6206                           
  6207                           ;tmr_drv.c: 166: }
  6208                           
  6209                           ;tmr_drv.c: 165: break;
  6210                           
  6211                           ;tmr_drv.c: 164: default:
  6212                           
  6213                           ;tmr_drv.c: 162: break;
  6214  06C0  0008               	return
  6215  06C1                     l4361:	
  6216  06C1  0020               	movlb	0	; select bank0
  6217  06C2  0821               	movf	TmrBInit@TmrNumb,w
  6218                           
  6219                           ; Switch size 1, requested type "space"
  6220                           ; Number of cases is 3, Range of values is 2 to 6
  6221                           ; switch strategies available:
  6222                           ; Name         Instructions Cycles
  6223                           ; simple_byte           10     6 (average)
  6224                           ; direct_byte           19     9 (fixed)
  6225                           ; jumptable            263     9 (fixed)
  6226                           ;	Chosen strategy is simple_byte
  6227  06C3  3A02               	xorlw	2	; case 2
  6228  06C4  1903               	skipnz
  6229  06C5  2E5E               	goto	l4343
  6230  06C6  3A06               	xorlw	6	; case 4
  6231  06C7  1903               	skipnz
  6232  06C8  2E80               	goto	l4349
  6233  06C9  3A02               	xorlw	2	; case 6
  6234  06CA  1903               	skipnz
  6235  06CB  2EA6               	goto	l4355
  6236  06CC  2ECD               	goto	l317
  6237  06CD                     l317:	
  6238  06CD  0008               	return
  6239  06CE                     __end_of_TmrBInit:	
  6240                           
  6241                           	psect	text13
  6242  0904                     __ptext13:	
  6243 ;; *************** function _MainScheduler *****************
  6244 ;; Defined at:
  6245 ;;		line 79 in file "../../../Framework/MercuryFwk/Source/c/02_Osl/os_sched.c"
  6246 ;; Parameters:    Size  Location     Type
  6247 ;;		None
  6248 ;; Auto vars:     Size  Location     Type
  6249 ;;		None
  6250 ;; Return value:  Size  Location     Type
  6251 ;;                  1    wreg      void 
  6252 ;; Registers used:
  6253 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6254 ;; Tracked objects:
  6255 ;;		On entry : 0/0
  6256 ;;		On exit  : 0/0
  6257 ;;		Unchanged: 0/0
  6258 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6259 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6260 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6261 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6262 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6263 ;;Total ram usage:        0 bytes
  6264 ;; Hardware stack levels used:    1
  6265 ;; Hardware stack levels required when called:    9
  6266 ;; This function calls:
  6267 ;;		_InitializeTasks
  6268 ;;		_ScheduleTasks
  6269 ;; This function is called by:
  6270 ;;		_main
  6271 ;; This function uses a non-reentrant model
  6272 ;;
  6273                           
  6274                           
  6275                           ;psect for function _MainScheduler
  6276  0904                     _MainScheduler:	
  6277                           
  6278                           ;os_sched.c: 82: InitializeTasks();
  6279                           
  6280                           ;incstack = 0
  6281                           ; Regs used in _MainScheduler: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  6282  0904  3187  27B2  3189   	fcall	_InitializeTasks
  6283                           
  6284                           ;os_sched.c: 84: SystemState = RunningState;
  6285  0907  0020               	movlb	0	; select bank0
  6286  0908  01EB               	clrf	_SystemState
  6287  0909  0AEB               	incf	_SystemState,f
  6288  090A                     l4689:	
  6289                           ;os_sched.c: 91: while(((UINT8)(1)))
  6290                           
  6291                           
  6292                           ;os_sched.c: 92: {
  6293                           ;os_sched.c: 94: if (MainSystemTimebaseFlag == CallTaskPhase)
  6294  090A  086D               	movf	_MainSystemTimebaseFlag,w
  6295  090B  1D03               	btfss	3,2
  6296  090C  290A               	goto	l4689
  6297                           
  6298                           ;os_sched.c: 95: {
  6299                           ;os_sched.c: 97: ScheduleTasks();
  6300  090D  3182  226A  3189   	fcall	_ScheduleTasks
  6301                           
  6302                           ;os_sched.c: 99: MainSystemTimebaseFlag = WaitTriggerPhase;
  6303  0910  0020               	movlb	0	; select bank0
  6304  0911  01ED               	clrf	_MainSystemTimebaseFlag
  6305  0912  0AED               	incf	_MainSystemTimebaseFlag,f
  6306  0913  290A               	goto	l4689
  6307  0914                     __end_of_MainScheduler:	
  6308                           
  6309                           	psect	text14
  6310  026A                     __ptext14:	
  6311 ;; *************** function _ScheduleTasks *****************
  6312 ;; Defined at:
  6313 ;;		line 130 in file "../../../Framework/MercuryFwk/Source/c/02_Osl/os_sched.c"
  6314 ;; Parameters:    Size  Location     Type
  6315 ;;		None
  6316 ;; Auto vars:     Size  Location     Type
  6317 ;;  ActiveTaskIn    1   64[BANK0 ] unsigned char 
  6318 ;; Return value:  Size  Location     Type
  6319 ;;                  1    wreg      void 
  6320 ;; Registers used:
  6321 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6322 ;; Tracked objects:
  6323 ;;		On entry : 0/0
  6324 ;;		On exit  : 0/0
  6325 ;;		Unchanged: 0/0
  6326 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6327 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6328 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6329 ;;      Temps:          0       0       6       0       0       0       0       0       0       0       0       0       
      +0       0
  6330 ;;      Totals:         0       1       6       0       0       0       0       0       0       0       0       0       
      +0       0
  6331 ;;Total ram usage:        7 bytes
  6332 ;; Hardware stack levels used:    1
  6333 ;; Hardware stack levels required when called:    8
  6334 ;; This function calls:
  6335 ;;		_App_MainTask
  6336 ;;		_I2cSlv_MainTask
  6337 ;;		_I2c_DataReceiveSm
  6338 ;;		_Led_MainTask
  6339 ;;		_Wdg_MainTask
  6340 ;; This function is called by:
  6341 ;;		_MainScheduler
  6342 ;; This function uses a non-reentrant model
  6343 ;;
  6344                           
  6345                           
  6346                           ;psect for function _ScheduleTasks
  6347  026A                     _ScheduleTasks:	
  6348                           
  6349                           ;os_sched.c: 133: UINT8 ActiveTaskIndex = 0u;
  6350                           
  6351                           ;incstack = 0
  6352                           ; Regs used in _ScheduleTasks: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  6353  026A  0020               	movlb	0	; select bank0
  6354  026B  01E0               	clrf	ScheduleTasks@ActiveTaskIndex
  6355                           
  6356                           ;os_sched.c: 136: for (ActiveTaskIndex = 0u; ActiveTaskIndex < TaskNumber; ActiveTaskInd
      +                          ex++)
  6357  026C  01E0               	clrf	ScheduleTasks@ActiveTaskIndex
  6358  026D  300A               	movlw	low (_TaskNumber| (0+32768))
  6359  026E  0084               	movwf	4
  6360  026F  3090               	movlw	high (_TaskNumber| (0+32768))
  6361  0270  0085               	movwf	5
  6362  0271  3F00               	moviw [0]fsr0
  6363  0272  0021               	movlb	1	; select bank1
  6364  0273  00E8               	movwf	??_ScheduleTasks^(0+128)
  6365  0274  3F01               	moviw [1]fsr0
  6366  0275                     L5:	
  6367  0275  00E9               	movwf	(??_ScheduleTasks^(0+128)+1)
  6368  0276  0020               	movlb	0	; select bank0
  6369  0277  0860               	movf	ScheduleTasks@ActiveTaskIndex,w
  6370  0278  0021               	movlb	1	; select bank1
  6371  0279  00EA               	movwf	(??_ScheduleTasks+2)^(0+128)
  6372  027A  01EB               	clrf	((??_ScheduleTasks+2)^(0+128)+1)
  6373  027B  0869               	movf	(??_ScheduleTasks+1)^(0+128),w
  6374  027C  026B               	subwf	(??_ScheduleTasks+3)^(0+128),w
  6375  027D  1D03               	skipz
  6376  027E  2A81               	goto	u3415
  6377  027F  0868               	movf	??_ScheduleTasks^(0+128),w
  6378  0280  026A               	subwf	(??_ScheduleTasks+2)^(0+128),w
  6379  0281                     u3415:	
  6380  0281  1803               	btfsc	3,0
  6381  0282  0008               	return
  6382                           
  6383                           ;os_sched.c: 137: {
  6384                           ;os_sched.c: 138: if (TaskTable[ActiveTaskIndex].Counter >= (TaskTable[ActiveTaskIndex].
      +                          Timeout))
  6385  0283  0020               	movlb	0	; select bank0
  6386  0284  0860               	movf	ScheduleTasks@ActiveTaskIndex,w
  6387  0285  0021               	movlb	1	; select bank1
  6388  0286  00E8               	movwf	??_ScheduleTasks^(0+128)
  6389  0287  3002               	movlw	2
  6390  0288                     u3425:	
  6391  0288  35E8               	lslf	??_ScheduleTasks^(0+128),f
  6392  0289  3EFF               	addlw	-1
  6393  028A  1D03               	skipz
  6394  028B  2A88               	goto	u3425
  6395  028C  3568               	lslf	??_ScheduleTasks^(0+128),w
  6396  028D  3E05               	addlw	5
  6397  028E  3E20               	addlw	(low (_TaskTable| (0+256)))& (0+255)
  6398  028F  0086               	movwf	6
  6399  0290  3001               	movlw	1	; select bank2/3
  6400  0291  0087               	movwf	7
  6401  0292  3F40               	moviw [0]fsr1
  6402  0293  00E9               	movwf	(??_ScheduleTasks+1)^(0+128)
  6403  0294  3F41               	moviw [1]fsr1
  6404  0295  00EA               	movwf	((??_ScheduleTasks+1)^(0+128)+1)
  6405  0296  0020               	movlb	0	; select bank0
  6406  0297  0860               	movf	ScheduleTasks@ActiveTaskIndex,w
  6407  0298  0021               	movlb	1	; select bank1
  6408  0299  00EB               	movwf	(??_ScheduleTasks+3)^(0+128)
  6409  029A  3002               	movlw	2
  6410  029B                     u3435:	
  6411  029B  35EB               	lslf	(??_ScheduleTasks+3)^(0+128),f
  6412  029C  3EFF               	addlw	-1
  6413  029D  1D03               	skipz
  6414  029E  2A9B               	goto	u3435
  6415  029F  356B               	lslf	(??_ScheduleTasks+3)^(0+128),w
  6416  02A0  3E03               	addlw	3
  6417  02A1  3E20               	addlw	(low (_TaskTable| (0+256)))& (0+255)
  6418  02A2  0086               	movwf	6
  6419  02A3  3001               	movlw	1	; select bank2/3
  6420  02A4  0087               	movwf	7
  6421  02A5  3F40               	moviw [0]fsr1
  6422  02A6  00EC               	movwf	(??_ScheduleTasks+4)^(0+128)
  6423  02A7  3F41               	moviw [1]fsr1
  6424  02A8  00ED               	movwf	((??_ScheduleTasks+4)^(0+128)+1)
  6425  02A9  086A               	movf	(??_ScheduleTasks+2)^(0+128),w
  6426  02AA  026D               	subwf	(??_ScheduleTasks+5)^(0+128),w
  6427  02AB  1D03               	skipz
  6428  02AC  2AAF               	goto	u3445
  6429  02AD  0869               	movf	(??_ScheduleTasks+1)^(0+128),w
  6430  02AE  026C               	subwf	(??_ScheduleTasks+4)^(0+128),w
  6431  02AF                     u3445:	
  6432  02AF  1C03               	skipc
  6433  02B0  2AFB               	goto	l4665
  6434                           
  6435                           ;os_sched.c: 139: {
  6436                           ;os_sched.c: 140: TaskTable[ActiveTaskIndex].Counter = ((UINT8)(0));
  6437  02B1  0020               	movlb	0	; select bank0
  6438  02B2  0860               	movf	ScheduleTasks@ActiveTaskIndex,w
  6439  02B3  0021               	movlb	1	; select bank1
  6440  02B4  00E8               	movwf	??_ScheduleTasks^(0+128)
  6441  02B5  3002               	movlw	2
  6442  02B6                     u3455:	
  6443  02B6  35E8               	lslf	??_ScheduleTasks^(0+128),f
  6444  02B7  3EFF               	addlw	-1
  6445  02B8  1D03               	skipz
  6446  02B9  2AB6               	goto	u3455
  6447  02BA  3568               	lslf	??_ScheduleTasks^(0+128),w
  6448  02BB  3E03               	addlw	3
  6449  02BC  3E20               	addlw	(low (_TaskTable| (0+256)))& (0+255)
  6450  02BD  0086               	movwf	6
  6451  02BE  3001               	movlw	1	; select bank2/3
  6452  02BF  0087               	movwf	7
  6453  02C0  3000               	movlw	0
  6454  02C1  3FC0               	movwi [0]fsr1
  6455  02C2  3FC1               	movwi [1]fsr1
  6456                           
  6457                           ;os_sched.c: 141: TaskTable[ActiveTaskIndex].State = TaskRunning;
  6458  02C3  0020               	movlb	0	; select bank0
  6459  02C4  0860               	movf	ScheduleTasks@ActiveTaskIndex,w
  6460  02C5  0021               	movlb	1	; select bank1
  6461  02C6  00E8               	movwf	??_ScheduleTasks^(0+128)
  6462  02C7  3002               	movlw	2
  6463  02C8                     u3465:	
  6464  02C8  35E8               	lslf	??_ScheduleTasks^(0+128),f
  6465  02C9  3EFF               	addlw	-1
  6466  02CA  1D03               	skipz
  6467  02CB  2AC8               	goto	u3465
  6468  02CC  3568               	lslf	??_ScheduleTasks^(0+128),w
  6469  02CD  3E02               	addlw	2
  6470  02CE  3E20               	addlw	(low (_TaskTable| (0+256)))& (0+255)
  6471  02CF  0086               	movwf	6
  6472  02D0  3001               	movlw	1	; select bank2/3
  6473  02D1  0087               	movwf	7
  6474  02D2  0181               	clrf	1
  6475  02D3  0A81               	incf	1,f
  6476                           
  6477                           ;os_sched.c: 142: TaskTable[ActiveTaskIndex].Task(TaskTable[ActiveTaskIndex].Options);
  6478  02D4  0020               	movlb	0	; select bank0
  6479  02D5  0860               	movf	ScheduleTasks@ActiveTaskIndex,w
  6480  02D6  0021               	movlb	1	; select bank1
  6481  02D7  00E8               	movwf	??_ScheduleTasks^(0+128)
  6482  02D8  3002               	movlw	2
  6483  02D9                     u3475:	
  6484  02D9  35E8               	lslf	??_ScheduleTasks^(0+128),f
  6485  02DA  3EFF               	addlw	-1
  6486  02DB  1D03               	skipz
  6487  02DC  2AD9               	goto	u3475
  6488  02DD  3568               	lslf	??_ScheduleTasks^(0+128),w
  6489  02DE  3E07               	addlw	7
  6490  02DF  3E20               	addlw	(low (_TaskTable| (0+256)))& (0+255)
  6491  02E0  0086               	movwf	6
  6492  02E1  3001               	movlw	1	; select bank2/3
  6493  02E2  0087               	movwf	7
  6494  02E3  0801               	movf	1,w
  6495  02E4  00E9               	movwf	(??_ScheduleTasks+1)^(0+128)
  6496  02E5  0869               	movf	(??_ScheduleTasks+1)^(0+128),w
  6497  02E6  0020               	movlb	0	; select bank0
  6498  02E7  00BA               	movwf	App_MainTask@Options
  6499  02E8  0860               	movf	ScheduleTasks@ActiveTaskIndex,w
  6500  02E9  0021               	movlb	1	; select bank1
  6501  02EA  00EA               	movwf	(??_ScheduleTasks+2)^(0+128)
  6502  02EB  3002               	movlw	2
  6503  02EC                     u3485:	
  6504  02EC  35EA               	lslf	(??_ScheduleTasks+2)^(0+128),f
  6505  02ED  3EFF               	addlw	-1
  6506  02EE  1D03               	skipz
  6507  02EF  2AEC               	goto	u3485
  6508  02F0  356A               	lslf	(??_ScheduleTasks+2)^(0+128),w
  6509  02F1  3E20               	addlw	(low (_TaskTable| (0+256)))& (0+255)
  6510  02F2  0086               	movwf	6
  6511  02F3  3001               	movlw	1	; select bank2/3
  6512  02F4  0087               	movwf	7
  6513  02F5  3F41               	moviw [1]fsr1
  6514  02F6  008A               	movwf	10
  6515  02F7  3F40               	moviw [0]fsr1
  6516  02F8  000A               	callw
  6517  02F9  3182               	pagesel	$
  6518                           
  6519                           ;os_sched.c: 143: }
  6520  02FA  2B1F               	goto	l4667
  6521  02FB                     l4665:	
  6522                           
  6523                           ;os_sched.c: 144: else
  6524                           ;os_sched.c: 145: {
  6525                           ;os_sched.c: 146: TaskTable[ActiveTaskIndex].Counter++;
  6526  02FB  0020               	movlb	0	; select bank0
  6527  02FC  0860               	movf	ScheduleTasks@ActiveTaskIndex,w
  6528  02FD  0021               	movlb	1	; select bank1
  6529  02FE  00E8               	movwf	??_ScheduleTasks^(0+128)
  6530  02FF  3002               	movlw	2
  6531  0300                     u3495:	
  6532  0300  35E8               	lslf	??_ScheduleTasks^(0+128),f
  6533  0301  3EFF               	addlw	-1
  6534  0302  1D03               	skipz
  6535  0303  2B00               	goto	u3495
  6536  0304  3568               	lslf	??_ScheduleTasks^(0+128),w
  6537  0305  3E03               	addlw	3
  6538  0306  3E20               	addlw	(low (_TaskTable| (0+256)))& (0+255)
  6539  0307  0086               	movwf	6
  6540  0308  3001               	movlw	1	; select bank2/3
  6541  0309  0087               	movwf	7
  6542  030A  3001               	movlw	1
  6543  030B  0781               	addwf	1,f
  6544  030C  3141               	addfsr 1,1
  6545  030D  1803               	skipnc
  6546  030E  0A81               	incf	1,f
  6547                           
  6548                           ;os_sched.c: 147: TaskTable[ActiveTaskIndex].State = TaskIdle;
  6549  030F  0020               	movlb	0	; select bank0
  6550  0310  0860               	movf	ScheduleTasks@ActiveTaskIndex,w
  6551  0311  0021               	movlb	1	; select bank1
  6552  0312  00E8               	movwf	??_ScheduleTasks^(0+128)
  6553  0313  3002               	movlw	2
  6554  0314                     u3505:	
  6555  0314  35E8               	lslf	??_ScheduleTasks^(0+128),f
  6556  0315  3EFF               	addlw	-1
  6557  0316  1D03               	skipz
  6558  0317  2B14               	goto	u3505
  6559  0318  3568               	lslf	??_ScheduleTasks^(0+128),w
  6560  0319  3E02               	addlw	2
  6561  031A  3E20               	addlw	(low (_TaskTable| (0+256)))& (0+255)
  6562  031B  0086               	movwf	6
  6563  031C  3001               	movlw	1	; select bank2/3
  6564  031D  0087               	movwf	7
  6565  031E  0181               	clrf	1
  6566  031F                     l4667:	
  6567  031F  3001               	movlw	1
  6568  0320  0021               	movlb	1	; select bank1
  6569  0321  00E8               	movwf	??_ScheduleTasks^(0+128)
  6570  0322  0868               	movf	??_ScheduleTasks^(0+128),w
  6571  0323  0020               	movlb	0	; select bank0
  6572  0324  07E0               	addwf	ScheduleTasks@ActiveTaskIndex,f
  6573  0325  300A               	movlw	low (_TaskNumber| (0+32768))
  6574  0326  0084               	movwf	4
  6575  0327  3090               	movlw	high (_TaskNumber| (0+32768))
  6576  0328  0085               	movwf	5
  6577  0329  3F00               	moviw [0]fsr0
  6578  032A  0021               	movlb	1	; select bank1
  6579  032B  00E8               	movwf	??_ScheduleTasks^(0+128)
  6580  032C  3F01               	moviw [1]fsr0
  6581  032D  2A75               	goto	L5
  6582  032E                     __end_of_ScheduleTasks:	
  6583                           
  6584                           	psect	text15
  6585  07B2                     __ptext15:	
  6586 ;; *************** function _InitializeTasks *****************
  6587 ;; Defined at:
  6588 ;;		line 111 in file "../../../Framework/MercuryFwk/Source/c/02_Osl/os_sched.c"
  6589 ;; Parameters:    Size  Location     Type
  6590 ;;		None
  6591 ;; Auto vars:     Size  Location     Type
  6592 ;;  ActiveTaskIn    1   64[BANK0 ] unsigned char 
  6593 ;; Return value:  Size  Location     Type
  6594 ;;                  1    wreg      void 
  6595 ;; Registers used:
  6596 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6597 ;; Tracked objects:
  6598 ;;		On entry : 0/0
  6599 ;;		On exit  : 0/0
  6600 ;;		Unchanged: 0/0
  6601 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6602 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6603 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6604 ;;      Temps:          0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0
  6605 ;;      Totals:         0       1       4       0       0       0       0       0       0       0       0       0       
      +0       0
  6606 ;;Total ram usage:        5 bytes
  6607 ;; Hardware stack levels used:    1
  6608 ;; Hardware stack levels required when called:    8
  6609 ;; This function calls:
  6610 ;;		_App_MainTask
  6611 ;;		_I2cSlv_MainTask
  6612 ;;		_I2c_DataReceiveSm
  6613 ;;		_Led_MainTask
  6614 ;;		_Wdg_MainTask
  6615 ;; This function is called by:
  6616 ;;		_MainScheduler
  6617 ;; This function uses a non-reentrant model
  6618 ;;
  6619                           
  6620                           
  6621                           ;psect for function _InitializeTasks
  6622  07B2                     _InitializeTasks:	
  6623                           
  6624                           ;os_sched.c: 114: UINT8 ActiveTaskIndex = 0u;
  6625                           
  6626                           ;incstack = 0
  6627                           ; Regs used in _InitializeTasks: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  6628  07B2  0020               	movlb	0	; select bank0
  6629  07B3  01E0               	clrf	InitializeTasks@ActiveTaskIndex
  6630                           
  6631                           ;os_sched.c: 117: for (ActiveTaskIndex = 0u; ActiveTaskIndex < TaskNumber; ActiveTaskInd
      +                          ex++)
  6632  07B4  01E0               	clrf	InitializeTasks@ActiveTaskIndex
  6633  07B5  300A               	movlw	low (_TaskNumber| (0+32768))
  6634  07B6  0084               	movwf	4
  6635  07B7  3090               	movlw	high (_TaskNumber| (0+32768))
  6636  07B8  0085               	movwf	5
  6637  07B9  3F00               	moviw [0]fsr0
  6638  07BA  0021               	movlb	1	; select bank1
  6639  07BB  00E8               	movwf	??_InitializeTasks^(0+128)
  6640  07BC  3F01               	moviw [1]fsr0
  6641  07BD                     L6:	
  6642  07BD  00E9               	movwf	(??_InitializeTasks^(0+128)+1)
  6643  07BE  0020               	movlb	0	; select bank0
  6644  07BF  0860               	movf	InitializeTasks@ActiveTaskIndex,w
  6645  07C0  0021               	movlb	1	; select bank1
  6646  07C1  00EA               	movwf	(??_InitializeTasks+2)^(0+128)
  6647  07C2  01EB               	clrf	((??_InitializeTasks+2)^(0+128)+1)
  6648  07C3  0869               	movf	(??_InitializeTasks+1)^(0+128),w
  6649  07C4  026B               	subwf	(??_InitializeTasks+3)^(0+128),w
  6650  07C5  1D03               	skipz
  6651  07C6  2FC9               	goto	u3375
  6652  07C7  0868               	movf	??_InitializeTasks^(0+128),w
  6653  07C8  026A               	subwf	(??_InitializeTasks+2)^(0+128),w
  6654  07C9                     u3375:	
  6655  07C9  1803               	btfsc	3,0
  6656  07CA  0008               	return
  6657                           
  6658                           ;os_sched.c: 118: {
  6659                           ;os_sched.c: 119: TaskTable[ActiveTaskIndex].Task(TaskTable[ActiveTaskIndex].Options);
  6660  07CB  0020               	movlb	0	; select bank0
  6661  07CC  0860               	movf	InitializeTasks@ActiveTaskIndex,w
  6662  07CD  0021               	movlb	1	; select bank1
  6663  07CE  00E8               	movwf	??_InitializeTasks^(0+128)
  6664  07CF  3002               	movlw	2
  6665  07D0                     u3385:	
  6666  07D0  35E8               	lslf	??_InitializeTasks^(0+128),f
  6667  07D1  3EFF               	addlw	-1
  6668  07D2  1D03               	skipz
  6669  07D3  2FD0               	goto	u3385
  6670  07D4  3568               	lslf	??_InitializeTasks^(0+128),w
  6671  07D5  3E07               	addlw	7
  6672  07D6  3E20               	addlw	(low (_TaskTable| (0+256)))& (0+255)
  6673  07D7  0086               	movwf	6
  6674  07D8  3001               	movlw	1	; select bank2/3
  6675  07D9  0087               	movwf	7
  6676  07DA  0801               	movf	1,w
  6677  07DB  00E9               	movwf	(??_InitializeTasks+1)^(0+128)
  6678  07DC  0869               	movf	(??_InitializeTasks+1)^(0+128),w
  6679  07DD  0020               	movlb	0	; select bank0
  6680  07DE  00BA               	movwf	App_MainTask@Options
  6681  07DF  0860               	movf	InitializeTasks@ActiveTaskIndex,w
  6682  07E0  0021               	movlb	1	; select bank1
  6683  07E1  00EA               	movwf	(??_InitializeTasks+2)^(0+128)
  6684  07E2  3002               	movlw	2
  6685  07E3                     u3395:	
  6686  07E3  35EA               	lslf	(??_InitializeTasks+2)^(0+128),f
  6687  07E4  3EFF               	addlw	-1
  6688  07E5  1D03               	skipz
  6689  07E6  2FE3               	goto	u3395
  6690  07E7  356A               	lslf	(??_InitializeTasks+2)^(0+128),w
  6691  07E8  3E20               	addlw	(low (_TaskTable| (0+256)))& (0+255)
  6692  07E9  0086               	movwf	6
  6693  07EA  3001               	movlw	1	; select bank2/3
  6694  07EB  0087               	movwf	7
  6695  07EC  3F41               	moviw [1]fsr1
  6696  07ED  008A               	movwf	10
  6697  07EE  3F40               	moviw [0]fsr1
  6698  07EF  000A               	callw
  6699  07F0  3187               	pagesel	$
  6700  07F1  3001               	movlw	1
  6701  07F2  0021               	movlb	1	; select bank1
  6702  07F3  00E8               	movwf	??_InitializeTasks^(0+128)
  6703  07F4  0868               	movf	??_InitializeTasks^(0+128),w
  6704  07F5  0020               	movlb	0	; select bank0
  6705  07F6  07E0               	addwf	InitializeTasks@ActiveTaskIndex,f
  6706  07F7  300A               	movlw	low (_TaskNumber| (0+32768))
  6707  07F8  0084               	movwf	4
  6708  07F9  3090               	movlw	high (_TaskNumber| (0+32768))
  6709  07FA  0085               	movwf	5
  6710  07FB  3F00               	moviw [0]fsr0
  6711  07FC  0021               	movlb	1	; select bank1
  6712  07FD  00E8               	movwf	??_InitializeTasks^(0+128)
  6713  07FE  3F01               	moviw [1]fsr0
  6714  07FF  2FBD               	goto	L6
  6715  0800                     __end_of_InitializeTasks:	
  6716                           
  6717                           	psect	text16
  6718  0F92                     __ptext16:	
  6719 ;; *************** function _App_MainTask *****************
  6720 ;; Defined at:
  6721 ;;		line 467 in file "../Source/c/04_App/sb810_app.c"
  6722 ;; Parameters:    Size  Location     Type
  6723 ;;  Options         1   26[BANK0 ] unsigned char 
  6724 ;; Auto vars:     Size  Location     Type
  6725 ;;  WpuCh          18   34[BANK0 ] struct _WpuChType
  6726 ;;  AnalogChSel    12   52[BANK0 ] struct _AnalogChSelType
  6727 ;;  AdcConfig       6   28[BANK0 ] struct _AdcCfgType
  6728 ;; Return value:  Size  Location     Type
  6729 ;;                  1    wreg      void 
  6730 ;; Registers used:
  6731 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6732 ;; Tracked objects:
  6733 ;;		On entry : 0/0
  6734 ;;		On exit  : 0/0
  6735 ;;		Unchanged: 0/0
  6736 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6737 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6738 ;;      Locals:         0      36       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6739 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6740 ;;      Totals:         0      38       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6741 ;;Total ram usage:       38 bytes
  6742 ;; Hardware stack levels used:    1
  6743 ;; Hardware stack levels required when called:    7
  6744 ;; This function calls:
  6745 ;;		_Adc_ConfigAnCh
  6746 ;;		_Adc_InitAdcModule
  6747 ;;		_AppSm
  6748 ;;		_Mcu_ConfigPullUps
  6749 ;;		_Mcu_SetDieTempMode
  6750 ;;		_Mcu_SetDieTempSts
  6751 ;;		_Mcu_SetPullUpsSts
  6752 ;; This function is called by:
  6753 ;;		_InitializeTasks
  6754 ;;		_ScheduleTasks
  6755 ;; This function uses a non-reentrant model
  6756 ;;
  6757                           
  6758                           
  6759                           ;psect for function _App_MainTask
  6760  0F92                     _App_MainTask:	
  6761                           
  6762                           ;sb810_app.c: 469: WpuChType WpuCh = {((UINT8)(0)),((UINT8)(0)),((UINT8)(0)),((UINT8)(0)
      +                          ),((UINT8)(0)),((UINT8)(0)),((UINT8)(0)),((UINT8)(0)),((UINT8)(0)),((UINT8)(0)),((UINT8)
      +                          (0)),((UINT8)(0)),((UINT8)(0)),((UINT8)(0)),((UINT8)(0)),((UINT8)(0)),((UINT8)(0)),((UIN
      +                          T8)(0
  6763                           
  6764                           ;incstack = 0
  6765                           ; Regs used in _App_MainTask: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  6766  0F92  30A0               	movlw	low App_MainTask@F4117
  6767  0F93  0086               	movwf	6
  6768  0F94  3000               	movlw	high App_MainTask@F4117
  6769  0F95  0087               	movwf	7
  6770  0F96  3042               	movlw	low App_MainTask@WpuCh
  6771  0F97  0084               	movwf	4
  6772  0F98  3000               	movlw	high App_MainTask@WpuCh
  6773  0F99  0085               	movwf	5
  6774  0F9A  3012               	movlw	18
  6775  0F9B  0020               	movlb	0	; select bank0
  6776  0F9C  00BB               	movwf	??_App_MainTask
  6777  0F9D                     u3350:	
  6778  0F9D  0016               	moviw fsr1++
  6779  0F9E  001A               	movwi fsr0++
  6780  0F9F  0BBB               	decfsz	??_App_MainTask,f
  6781  0FA0  2F9D               	goto	u3350
  6782                           
  6783                           ;sb810_app.c: 470: AnalogChSelType AnalogChSel = {((UINT8)(0)),((UINT8)(0)),((UINT8)(0))
      +                          ,((UINT8)(0)),((UINT8)(0)),((UINT8)(0)),((UINT8)(0)),((UINT8)(0)),((UINT8)(0)),((UINT8)(
      +                          0)),((UINT8)(0)),((UINT8)(0))};
  6784  0FA1  30B2               	movlw	low App_MainTask@F4137
  6785  0FA2  0086               	movwf	6
  6786  0FA3  3000               	movlw	high App_MainTask@F4137
  6787  0FA4  0087               	movwf	7
  6788  0FA5  3054               	movlw	low App_MainTask@AnalogChSel
  6789  0FA6  0084               	movwf	4
  6790  0FA7  3000               	movlw	high App_MainTask@AnalogChSel
  6791  0FA8  0085               	movwf	5
  6792  0FA9  300C               	movlw	12
  6793  0FAA  00BB               	movwf	??_App_MainTask
  6794  0FAB                     u3360:	
  6795  0FAB  0016               	moviw fsr1++
  6796  0FAC  001A               	movwi fsr0++
  6797  0FAD  0BBB               	decfsz	??_App_MainTask,f
  6798  0FAE  2FAB               	goto	u3360
  6799                           
  6800                           ;sb810_app.c: 471: AdcConfigType AdcConfig;
  6801                           ;sb810_app.c: 473: switch (SystemState)
  6802  0FAF  2FF6               	goto	l4639
  6803  0FB0                     l935:	
  6804                           ;sb810_app.c: 474: {
  6805                           ;sb810_app.c: 476: case InitializationState:
  6806                           
  6807                           
  6808                           ;sb810_app.c: 478: TRISCbits.TRISC5 = ((UINT8)(1));
  6809  0FB0  0021               	movlb	1	; select bank1
  6810  0FB1  168E               	bsf	14,5	;volatile
  6811                           
  6812                           ;sb810_app.c: 479: TRISCbits.TRISC4 = ((UINT8)(1));
  6813  0FB2  160E               	bsf	14,4	;volatile
  6814                           
  6815                           ;sb810_app.c: 480: TRISCbits.TRISC3 = ((UINT8)(1));
  6816  0FB3  158E               	bsf	14,3	;volatile
  6817                           
  6818                           ;sb810_app.c: 481: TRISCbits.TRISC6 = ((UINT8)(1));
  6819  0FB4  170E               	bsf	14,6	;volatile
  6820                           
  6821                           ;sb810_app.c: 484: WpuCh.WpuC6 = ((UINT8)(1));
  6822  0FB5  0020               	movlb	0	; select bank0
  6823  0FB6  01D2               	clrf	App_MainTask@WpuCh+16
  6824  0FB7  0AD2               	incf	App_MainTask@WpuCh+16,f
  6825                           
  6826                           ;sb810_app.c: 485: WpuCh.WpuC3 = ((UINT8)(1));
  6827  0FB8  01CF               	clrf	App_MainTask@WpuCh+13
  6828  0FB9  0ACF               	incf	App_MainTask@WpuCh+13,f
  6829                           
  6830                           ;sb810_app.c: 486: WpuCh.WpuC4 = ((UINT8)(1));
  6831  0FBA  01D0               	clrf	App_MainTask@WpuCh+14
  6832  0FBB  0AD0               	incf	App_MainTask@WpuCh+14,f
  6833                           
  6834                           ;sb810_app.c: 487: WpuCh.WpuC5 = ((UINT8)(1));
  6835  0FBC  01D1               	clrf	App_MainTask@WpuCh+15
  6836  0FBD  0AD1               	incf	App_MainTask@WpuCh+15,f
  6837                           
  6838                           ;sb810_app.c: 489: Mcu_ConfigPullUps(&WpuCh);
  6839  0FBE  3042               	movlw	(low (App_MainTask@WpuCh| 0))& (0+255)
  6840  0FBF  3184  2490  318F   	fcall	_Mcu_ConfigPullUps
  6841                           
  6842                           ;sb810_app.c: 490: Mcu_SetPullUpsSts(Mcu_GlobalPuEnabled);
  6843  0FC2  3000               	movlw	0
  6844  0FC3  3188  204B  318F   	fcall	_Mcu_SetPullUpsSts
  6845                           
  6846                           ;sb810_app.c: 493: AnalogChSel.AnSelA0An0 = ((UINT8)(0));
  6847  0FC6  0020               	movlb	0	; select bank0
  6848  0FC7  01D4               	clrf	App_MainTask@AnalogChSel
  6849                           
  6850                           ;sb810_app.c: 494: AnalogChSel.AnSelA1An1 = ((UINT8)(0));
  6851  0FC8  01D5               	clrf	App_MainTask@AnalogChSel+1
  6852                           
  6853                           ;sb810_app.c: 495: AnalogChSel.AnSelA2An2 = ((UINT8)(1));
  6854  0FC9  01D6               	clrf	App_MainTask@AnalogChSel+2
  6855  0FCA  0AD6               	incf	App_MainTask@AnalogChSel+2,f
  6856                           
  6857                           ;sb810_app.c: 496: AnalogChSel.AnSelA4An3 = ((UINT8)(0));
  6858  0FCB  01D7               	clrf	App_MainTask@AnalogChSel+3
  6859                           
  6860                           ;sb810_app.c: 497: AnalogChSel.AnSelC0An4 = ((UINT8)(1));
  6861  0FCC  01DA               	clrf	App_MainTask@AnalogChSel+6
  6862  0FCD  0ADA               	incf	App_MainTask@AnalogChSel+6,f
  6863                           
  6864                           ;sb810_app.c: 498: AnalogChSel.AnSelC1An5 = ((UINT8)(0));
  6865  0FCE  01DB               	clrf	App_MainTask@AnalogChSel+7
  6866                           
  6867                           ;sb810_app.c: 499: AnalogChSel.AnSelC2An6 = ((UINT8)(0));
  6868  0FCF  01DC               	clrf	App_MainTask@AnalogChSel+8
  6869                           
  6870                           ;sb810_app.c: 500: AnalogChSel.AnSelC3An7 = ((UINT8)(0));
  6871  0FD0  01DD               	clrf	App_MainTask@AnalogChSel+9
  6872                           
  6873                           ;sb810_app.c: 501: AnalogChSel.AnSelC6An8 = ((UINT8)(0));
  6874  0FD1  01DE               	clrf	App_MainTask@AnalogChSel+10
  6875                           
  6876                           ;sb810_app.c: 502: AnalogChSel.AnSelC7An9 = ((UINT8)(1));
  6877  0FD2  01DF               	clrf	App_MainTask@AnalogChSel+11
  6878  0FD3  0ADF               	incf	App_MainTask@AnalogChSel+11,f
  6879                           
  6880                           ;sb810_app.c: 503: AnalogChSel.AnSelB4An10 = ((UINT8)(0));
  6881  0FD4  01D8               	clrf	App_MainTask@AnalogChSel+4
  6882                           
  6883                           ;sb810_app.c: 504: AnalogChSel.AnSelB5An11 = ((UINT8)(1));
  6884  0FD5  01D9               	clrf	App_MainTask@AnalogChSel+5
  6885  0FD6  0AD9               	incf	App_MainTask@AnalogChSel+5,f
  6886                           
  6887                           ;sb810_app.c: 505: Adc_ConfigAnCh(&AnalogChSel);
  6888  0FD7  3054               	movlw	(low (App_MainTask@AnalogChSel| 0))& (0+255)
  6889  0FD8  3187  2742  318F   	fcall	_Adc_ConfigAnCh
  6890                           
  6891                           ;sb810_app.c: 508: Mcu_SetDieTempSts(((UINT8)(1)));
  6892  0FDB  3001               	movlw	1
  6893  0FDC  3188  2043  318F   	fcall	_Mcu_SetDieTempSts
  6894                           
  6895                           ;sb810_app.c: 509: Mcu_SetDieTempMode(((UINT8)(0)));
  6896  0FDF  3000               	movlw	0
  6897  0FE0  3188  203B  318F   	fcall	_Mcu_SetDieTempMode
  6898                           
  6899                           ;sb810_app.c: 512: AdcConfig.AdcConvClock = ((UINT8)(3));
  6900  0FE3  3003               	movlw	3
  6901  0FE4  0020               	movlb	0	; select bank0
  6902  0FE5  00BB               	movwf	??_App_MainTask
  6903  0FE6  083B               	movf	??_App_MainTask,w
  6904  0FE7  00BE               	movwf	App_MainTask@AdcConfig+2
  6905                           
  6906                           ;sb810_app.c: 513: AdcConfig.AdcIntEnabled = ((UINT8)(0));
  6907  0FE8  01C1               	clrf	App_MainTask@AdcConfig+5
  6908                           
  6909                           ;sb810_app.c: 514: AdcConfig.AdcNegRef = ((UINT8)(0));
  6910  0FE9  01BF               	clrf	App_MainTask@AdcConfig+3
  6911                           
  6912                           ;sb810_app.c: 515: AdcConfig.AdcPosRef = ((UINT8)(0));
  6913  0FEA  01C0               	clrf	App_MainTask@AdcConfig+4
  6914                           
  6915                           ;sb810_app.c: 516: AdcConfig.AdcResultFormat = ((UINT8)(1));
  6916  0FEB  01BD               	clrf	App_MainTask@AdcConfig+1
  6917  0FEC  0ABD               	incf	App_MainTask@AdcConfig+1,f
  6918                           
  6919                           ;sb810_app.c: 517: AdcConfig.AdcEnable = ((UINT8)(1));
  6920  0FED  01BC               	clrf	App_MainTask@AdcConfig
  6921  0FEE  0ABC               	incf	App_MainTask@AdcConfig,f
  6922                           
  6923                           ;sb810_app.c: 518: Adc_InitAdcModule(&AdcConfig);
  6924  0FEF  303C               	movlw	(low (App_MainTask@AdcConfig| 0))& (0+255)
  6925  0FF0  318D  251A         	fcall	_Adc_InitAdcModule
  6926                           
  6927                           ;sb810_app.c: 519: break;
  6928  0FF2  0008               	return
  6929  0FF3                     l4635:	
  6930                           ;sb810_app.c: 522: case RunningState:
  6931                           
  6932                           
  6933                           ;sb810_app.c: 525: AppSm();
  6934  0FF3  318B  230F         	fcall	_AppSm
  6935                           
  6936                           ;sb810_app.c: 531: }
  6937                           
  6938                           ;sb810_app.c: 530: break;
  6939                           
  6940                           ;sb810_app.c: 529: default:
  6941                           
  6942                           ;sb810_app.c: 526: break;
  6943  0FF5  0008               	return
  6944  0FF6                     l4639:	
  6945  0FF6  0020               	movlb	0	; select bank0
  6946  0FF7  086B               	movf	_SystemState,w
  6947                           
  6948                           ; Switch size 1, requested type "space"
  6949                           ; Number of cases is 2, Range of values is 0 to 1
  6950                           ; switch strategies available:
  6951                           ; Name         Instructions Cycles
  6952                           ; simple_byte            7     4 (average)
  6953                           ; direct_byte           10     6 (fixed)
  6954                           ; jumptable            260     6 (fixed)
  6955                           ;	Chosen strategy is simple_byte
  6956  0FF8  3A00               	xorlw	0	; case 0
  6957  0FF9  1903               	skipnz
  6958  0FFA  2FB0               	goto	l935
  6959  0FFB  3A01               	xorlw	1	; case 1
  6960  0FFC  1903               	skipnz
  6961  0FFD  2FF3               	goto	l4635
  6962  0FFE  2FFF               	goto	l939
  6963  0FFF                     l939:	
  6964  0FFF  0008               	return
  6965  1000                     __end_of_App_MainTask:	
  6966                           
  6967                           	psect	text17
  6968  0B8E                     __ptext17:	
  6969 ;; *************** function _Led_MainTask *****************
  6970 ;; Defined at:
  6971 ;;		line 122 in file "../../../Framework/MercuryFwk/Source/c/03_Sml/02_Ssl/led.c"
  6972 ;; Parameters:    Size  Location     Type
  6973 ;;  Options         1   26[BANK0 ] unsigned char 
  6974 ;; Auto vars:     Size  Location     Type
  6975 ;;		None
  6976 ;; Return value:  Size  Location     Type
  6977 ;;                  1    wreg      void 
  6978 ;; Registers used:
  6979 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6980 ;; Tracked objects:
  6981 ;;		On entry : 0/0
  6982 ;;		On exit  : 0/0
  6983 ;;		Unchanged: 0/0
  6984 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6985 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6986 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6987 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6988 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6989 ;;Total ram usage:        5 bytes
  6990 ;; Hardware stack levels used:    1
  6991 ;; Hardware stack levels required when called:    5
  6992 ;; This function calls:
  6993 ;;		_LedStateMachine
  6994 ;;		_SetLedBehavSts
  6995 ;; This function is called by:
  6996 ;;		_InitializeTasks
  6997 ;;		_ScheduleTasks
  6998 ;; This function uses a non-reentrant model
  6999 ;;
  7000                           
  7001                           
  7002                           ;psect for function _Led_MainTask
  7003  0B8E                     _Led_MainTask:	
  7004                           
  7005                           ;led.c: 124: switch (SystemState)
  7006                           
  7007                           ;incstack = 0
  7008                           ; Regs used in _Led_MainTask: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  7009  0B8E  2BB4               	goto	l4587
  7010  0B8F                     l578:	
  7011                           ;led.c: 125: {
  7012                           ;led.c: 127: case InitializationState:
  7013                           
  7014                           
  7015                           ;led.c: 129: TRISCbits.TRISC2 = ((UINT8)(0));
  7016  0B8F  0021               	movlb	1	; select bank1
  7017  0B90  110E               	bcf	14,2	;volatile
  7018                           
  7019                           ;led.c: 130: LATCbits.LATC2 = ((UINT8)(0));
  7020  0B91  0022               	movlb	2	; select bank2
  7021  0B92  110E               	bcf	14,2	;volatile
  7022                           
  7023                           ;led.c: 132: SetLedBehavSts(((UINT8)(1)));
  7024  0B93  3001               	movlw	1
  7025  0B94  318D  2591         	fcall	_SetLedBehavSts
  7026                           
  7027                           ;led.c: 133: break;
  7028  0B96  0008               	return
  7029  0B97                     l4583:	
  7030                           ;led.c: 136: case RunningState:
  7031                           
  7032                           
  7033                           ;led.c: 138: LATCbits.LATC2 = LedStateMachine(1u,&Led1Sts,&Led1Blink,&Led1Pulse);
  7034  0B97  306C               	movlw	(low (_Led1Sts| 0))& (0+255)
  7035  0B98  0020               	movlb	0	; select bank0
  7036  0B99  00BB               	movwf	??_Led_MainTask
  7037  0B9A  083B               	movf	??_Led_MainTask,w
  7038  0B9B  00AB               	movwf	LedStateMachine@LedSts
  7039  0B9C  30D1               	movlw	(low (_Led1Blink| 0))& (0+255)
  7040  0B9D  00BC               	movwf	??_Led_MainTask+1
  7041  0B9E  083C               	movf	??_Led_MainTask+1,w
  7042  0B9F  00AC               	movwf	LedStateMachine@LedBlink
  7043  0BA0  30DA               	movlw	(low (_Led1Pulse| 0))& (0+255)
  7044  0BA1  00BD               	movwf	??_Led_MainTask+2
  7045  0BA2  083D               	movf	??_Led_MainTask+2,w
  7046  0BA3  00AD               	movwf	LedStateMachine@LedPulse
  7047  0BA4  3001               	movlw	1
  7048  0BA5  318C  2481         	fcall	_LedStateMachine
  7049  0BA7  0020               	movlb	0	; select bank0
  7050  0BA8  00BE               	movwf	??_Led_MainTask+3
  7051  0BA9  0DBE               	rlf	??_Led_MainTask+3,f
  7052  0BAA  0DBE               	rlf	??_Led_MainTask+3,f
  7053  0BAB  0022               	movlb	2	; select bank2
  7054  0BAC  080E               	movf	14,w	;volatile
  7055  0BAD  0020               	movlb	0	; select bank0
  7056  0BAE  063E               	xorwf	??_Led_MainTask+3,w
  7057  0BAF  39FB               	andlw	-5
  7058  0BB0  063E               	xorwf	??_Led_MainTask+3,w
  7059  0BB1  0022               	movlb	2	; select bank2
  7060  0BB2  008E               	movwf	14	;volatile
  7061                           
  7062                           ;led.c: 144: }
  7063                           
  7064                           ;led.c: 143: break;
  7065                           
  7066                           ;led.c: 142: default:
  7067                           
  7068                           ;led.c: 139: break;
  7069  0BB3  0008               	return
  7070  0BB4                     l4587:	
  7071  0BB4  0020               	movlb	0	; select bank0
  7072  0BB5  086B               	movf	_SystemState,w
  7073                           
  7074                           ; Switch size 1, requested type "space"
  7075                           ; Number of cases is 2, Range of values is 0 to 1
  7076                           ; switch strategies available:
  7077                           ; Name         Instructions Cycles
  7078                           ; simple_byte            7     4 (average)
  7079                           ; direct_byte           10     6 (fixed)
  7080                           ; jumptable            260     6 (fixed)
  7081                           ;	Chosen strategy is simple_byte
  7082  0BB6  3A00               	xorlw	0	; case 0
  7083  0BB7  1903               	skipnz
  7084  0BB8  2B8F               	goto	l578
  7085  0BB9  3A01               	xorlw	1	; case 1
  7086  0BBA  1903               	skipnz
  7087  0BBB  2B97               	goto	l4583
  7088  0BBC  2BBD               	goto	l582
  7089  0BBD                     l582:	
  7090  0BBD  0008               	return
  7091  0BBE                     __end_of_Led_MainTask:	
  7092                           
  7093                           	psect	text18
  7094  093B                     __ptext18:	
  7095 ;; *************** function _I2cSlv_MainTask *****************
  7096 ;; Defined at:
  7097 ;;		line 109 in file "../../../Framework/MercuryFwk/Source/c/03_Sml/01_Pml/01_SlvI2c/i2c_slv.c"
  7098 ;; Parameters:    Size  Location     Type
  7099 ;;  Options         1   26[BANK0 ] unsigned char 
  7100 ;; Auto vars:     Size  Location     Type
  7101 ;;		None
  7102 ;; Return value:  Size  Location     Type
  7103 ;;                  1    wreg      void 
  7104 ;; Registers used:
  7105 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7106 ;; Tracked objects:
  7107 ;;		On entry : 0/0
  7108 ;;		On exit  : 0/0
  7109 ;;		Unchanged: 0/0
  7110 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7111 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7112 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7113 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7114 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7115 ;;Total ram usage:        1 bytes
  7116 ;; Hardware stack levels used:    1
  7117 ;; Hardware stack levels required when called:    4
  7118 ;; This function calls:
  7119 ;;		_I2cSlv_I2cDrvHandle
  7120 ;;		_I2c_InitI2cModule
  7121 ;;		_I2c_SetConfig
  7122 ;; This function is called by:
  7123 ;;		_InitializeTasks
  7124 ;;		_ScheduleTasks
  7125 ;; This function uses a non-reentrant model
  7126 ;;
  7127                           
  7128                           
  7129                           ;psect for function _I2cSlv_MainTask
  7130  093B                     _I2cSlv_MainTask:	
  7131                           
  7132                           ;i2c_slv.c: 111: switch (SystemState)
  7133                           
  7134                           ;incstack = 0
  7135                           ; Regs used in _I2cSlv_MainTask: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  7136  093B  2946               	goto	l4577
  7137  093C                     l4569:	
  7138                           ;i2c_slv.c: 112: {
  7139                           ;i2c_slv.c: 114: case InitializationState:
  7140                           
  7141                           
  7142                           ;i2c_slv.c: 116: I2c_SetConfig();
  7143  093C  3189  2127  3189   	fcall	_I2c_SetConfig
  7144                           
  7145                           ;i2c_slv.c: 118: I2c_InitI2cModule(&I2cConfig);
  7146  093F  30C6               	movlw	(low (_I2cConfig| 0))& (0+255)
  7147  0940  3183  23E4         	fcall	_I2c_InitI2cModule
  7148                           
  7149                           ;i2c_slv.c: 119: break;
  7150  0942  0008               	return
  7151  0943                     l4573:	
  7152                           ;i2c_slv.c: 122: case RunningState:
  7153                           
  7154                           
  7155                           ;i2c_slv.c: 124: I2cSlv_I2cDrvHandle();
  7156  0943  3185  25C6         	fcall	_I2cSlv_I2cDrvHandle
  7157                           
  7158                           ;i2c_slv.c: 130: }
  7159                           
  7160                           ;i2c_slv.c: 129: break;
  7161                           
  7162                           ;i2c_slv.c: 128: default:
  7163                           
  7164                           ;i2c_slv.c: 125: break;
  7165  0945  0008               	return
  7166  0946                     l4577:	
  7167  0946  0020               	movlb	0	; select bank0
  7168  0947  086B               	movf	_SystemState,w
  7169                           
  7170                           ; Switch size 1, requested type "space"
  7171                           ; Number of cases is 2, Range of values is 0 to 1
  7172                           ; switch strategies available:
  7173                           ; Name         Instructions Cycles
  7174                           ; simple_byte            7     4 (average)
  7175                           ; direct_byte           10     6 (fixed)
  7176                           ; jumptable            260     6 (fixed)
  7177                           ;	Chosen strategy is simple_byte
  7178  0948  3A00               	xorlw	0	; case 0
  7179  0949  1903               	skipnz
  7180  094A  293C               	goto	l4569
  7181  094B  3A01               	xorlw	1	; case 1
  7182  094C  1903               	skipnz
  7183  094D  2943               	goto	l4573
  7184  094E  294F               	goto	l518
  7185  094F                     l518:	
  7186  094F  0008               	return
  7187  0950                     __end_of_I2cSlv_MainTask:	
  7188                           
  7189                           	psect	text19
  7190  0188                     __ptext19:	
  7191 ;; *************** function _I2c_DataReceiveSm *****************
  7192 ;; Defined at:
  7193 ;;		line 297 in file "../../../Framework/MercuryFwk/Source/c/01_Hal/02_Drv/i2c_slv_drv.c"
  7194 ;; Parameters:    Size  Location     Type
  7195 ;;  Options         1   26[BANK0 ] unsigned char 
  7196 ;; Auto vars:     Size  Location     Type
  7197 ;;  Index           1   34[BANK0 ] unsigned char 
  7198 ;; Return value:  Size  Location     Type
  7199 ;;                  1    wreg      void 
  7200 ;; Registers used:
  7201 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7202 ;; Tracked objects:
  7203 ;;		On entry : 0/0
  7204 ;;		On exit  : 0/0
  7205 ;;		Unchanged: 0/0
  7206 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7207 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7208 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7209 ;;      Temps:          0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7210 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7211 ;;Total ram usage:        9 bytes
  7212 ;; Hardware stack levels used:    1
  7213 ;; Hardware stack levels required when called:    3
  7214 ;; This function calls:
  7215 ;;		_CheckAckStatus
  7216 ;;		_CheckByteStatus
  7217 ;;		_CheckStopBitStatus
  7218 ;;		_ClearRxBuffer
  7219 ;;		_ClearTxBuffer
  7220 ;;		_GenerateEvt
  7221 ;;		_ReceiveEvt
  7222 ;; This function is called by:
  7223 ;;		_InitializeTasks
  7224 ;;		_ScheduleTasks
  7225 ;; This function uses a non-reentrant model
  7226 ;;
  7227                           
  7228                           
  7229                           ;psect for function _I2c_DataReceiveSm
  7230  0188                     _I2c_DataReceiveSm:	
  7231                           
  7232                           ;i2c_slv_drv.c: 300: static I2cRxStateType I2cRxState = CheckRxByte;
  7233                           ;i2c_slv_drv.c: 301: static UINT8 I2cRxAddress;
  7234                           ;i2c_slv_drv.c: 302: static UINT8 I2cRxFlag = ((UINT8)(0));
  7235                           ;i2c_slv_drv.c: 303: static UINT8 OpType;
  7236                           ;i2c_slv_drv.c: 304: static UINT8 RxCounter = 0;
  7237                           ;i2c_slv_drv.c: 305: static UINT8 TxCounter = 0;
  7238                           ;i2c_slv_drv.c: 306: UINT8 Index;
  7239                           ;i2c_slv_drv.c: 308: switch (I2cRxState)
  7240                           
  7241                           ;incstack = 0
  7242                           ; Regs used in _I2c_DataReceiveSm: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  7243  0188  2A5E               	goto	l4547
  7244  0189                     l4471:	
  7245                           ;i2c_slv_drv.c: 309: {
  7246                           ;i2c_slv_drv.c: 310: case CheckRxByte:
  7247                           
  7248                           
  7249                           ;i2c_slv_drv.c: 312: if (ReceiveEvt(&I2cNewTxNotification))
  7250  0189  30E2               	movlw	(low (_I2cNewTxNotification| 0))& (0+255)
  7251  018A  318A  2259  3181   	fcall	_ReceiveEvt
  7252  018D  3A00               	xorlw	0
  7253  018E  1903               	skipnz
  7254  018F  0008               	return
  7255                           
  7256                           ;i2c_slv_drv.c: 313: {
  7257                           ;i2c_slv_drv.c: 315: if (CheckByteStatus() == ((UINT8)(0)))
  7258  0190  3188  2066  3181   	fcall	_CheckByteStatus
  7259  0193  3A00               	xorlw	0
  7260  0194  1D03               	skipz
  7261  0195  299C               	goto	l4477
  7262                           
  7263                           ;i2c_slv_drv.c: 316: {
  7264                           ;i2c_slv_drv.c: 318: I2cRxFlag = ((UINT8)(1));
  7265  0196  0020               	movlb	0	; select bank0
  7266  0197  01E5               	clrf	I2c_DataReceiveSm@I2cRxFlag
  7267  0198  0AE5               	incf	I2c_DataReceiveSm@I2cRxFlag,f
  7268                           
  7269                           ;i2c_slv_drv.c: 320: I2cRxState = StoreAddrByte;
  7270  0199  01E6               	clrf	I2c_DataReceiveSm@I2cRxState
  7271  019A  0AE6               	incf	I2c_DataReceiveSm@I2cRxState,f
  7272                           
  7273                           ;i2c_slv_drv.c: 321: }
  7274  019B  0008               	return
  7275  019C                     l4477:	
  7276                           
  7277                           ;i2c_slv_drv.c: 322: else if ((CheckByteStatus() == ((UINT8)(1))) && (I2cRxFlag == ((UIN
      +                          T8)(1))))
  7278  019C  3188  2066  3181   	fcall	_CheckByteStatus
  7279  019F  3A01               	xorlw	1
  7280  01A0  1D03               	skipz
  7281  01A1  0008               	return
  7282  01A2  0020               	movlb	0	; select bank0
  7283  01A3  0365               	decf	I2c_DataReceiveSm@I2cRxFlag,w
  7284  01A4  1D03               	btfss	3,2
  7285  01A5  0008               	return
  7286                           
  7287                           ;i2c_slv_drv.c: 323: {
  7288                           ;i2c_slv_drv.c: 324: if (OpType == ((UINT8)(0)))
  7289  01A6  0867               	movf	I2c_DataReceiveSm@OpType,w
  7290  01A7  1D03               	btfss	3,2
  7291  01A8  29AE               	goto	l4485
  7292                           
  7293                           ;i2c_slv_drv.c: 325: {
  7294                           ;i2c_slv_drv.c: 327: I2cRxState = HandleWrite;
  7295  01A9  3002               	movlw	2
  7296  01AA  00BB               	movwf	??_I2c_DataReceiveSm
  7297  01AB  083B               	movf	??_I2c_DataReceiveSm,w
  7298  01AC  00E6               	movwf	I2c_DataReceiveSm@I2cRxState
  7299                           
  7300                           ;i2c_slv_drv.c: 328: }
  7301  01AD  0008               	return
  7302  01AE                     l4485:	
  7303                           
  7304                           ;i2c_slv_drv.c: 329: else
  7305                           ;i2c_slv_drv.c: 330: {
  7306                           ;i2c_slv_drv.c: 332: I2cRxState = HandleRead;
  7307  01AE  3003               	movlw	3
  7308  01AF  00BB               	movwf	??_I2c_DataReceiveSm
  7309  01B0  083B               	movf	??_I2c_DataReceiveSm,w
  7310  01B1  00E6               	movwf	I2c_DataReceiveSm@I2cRxState
  7311                           
  7312                           ;i2c_slv_drv.c: 338: }
  7313                           ;i2c_slv_drv.c: 339: }
  7314                           ;i2c_slv_drv.c: 340: break;
  7315                           
  7316                           ;i2c_slv_drv.c: 335: else
  7317                           ;i2c_slv_drv.c: 336: {
  7318                           
  7319                           ;i2c_slv_drv.c: 333: }
  7320                           ;i2c_slv_drv.c: 334: }
  7321  01B2  0008               	return
  7322  01B3                     l4487:	
  7323                           ;i2c_slv_drv.c: 342: case StoreAddrByte:
  7324                           
  7325                           
  7326                           ;i2c_slv_drv.c: 344: I2cRxAddress = SSP1BUF;
  7327  01B3  0024               	movlb	4	; select bank4
  7328  01B4  0811               	movf	17,w	;volatile
  7329  01B5  0020               	movlb	0	; select bank0
  7330  01B6  00BB               	movwf	??_I2c_DataReceiveSm
  7331  01B7  083B               	movf	??_I2c_DataReceiveSm,w
  7332  01B8  00E4               	movwf	I2c_DataReceiveSm@I2cRxAddress
  7333                           
  7334                           ;i2c_slv_drv.c: 346: I2cRxAddress = (I2cRxAddress >> ((UINT8)(1)));
  7335  01B9  3664               	lsrf	I2c_DataReceiveSm@I2cRxAddress,w
  7336  01BA  00BB               	movwf	??_I2c_DataReceiveSm
  7337  01BB  083B               	movf	??_I2c_DataReceiveSm,w
  7338  01BC  00E4               	movwf	I2c_DataReceiveSm@I2cRxAddress
  7339                           
  7340                           ;i2c_slv_drv.c: 348: OpType = (SSP1BUF & ((UINT8)(0x01)));
  7341  01BD  0024               	movlb	4	; select bank4
  7342  01BE  0811               	movf	17,w	;volatile
  7343  01BF  3901               	andlw	1
  7344  01C0  0020               	movlb	0	; select bank0
  7345  01C1  00BB               	movwf	??_I2c_DataReceiveSm
  7346  01C2  083B               	movf	??_I2c_DataReceiveSm,w
  7347  01C3  00E7               	movwf	I2c_DataReceiveSm@OpType
  7348                           
  7349                           ;i2c_slv_drv.c: 350: if (OpType == ((UINT8)(1)))
  7350  01C4  0367               	decf	I2c_DataReceiveSm@OpType,w
  7351  01C5  1D03               	btfss	3,2
  7352  01C6  29D4               	goto	l4499
  7353                           
  7354                           ;i2c_slv_drv.c: 351: {
  7355                           ;i2c_slv_drv.c: 353: SSP1BUF = I2cTxBuffer[TxCounter];
  7356  01C7  0869               	movf	I2c_DataReceiveSm@TxCounter,w
  7357  01C8  3EA0               	addlw	(low (_I2cTxBuffer| (0+512)))& (0+255)
  7358  01C9  0086               	movwf	6
  7359  01CA  3002               	movlw	2	; select bank5/6
  7360  01CB  0087               	movwf	7
  7361  01CC  0801               	movf	1,w
  7362  01CD  0024               	movlb	4	; select bank4
  7363  01CE  0091               	movwf	17	;volatile
  7364                           
  7365                           ;i2c_slv_drv.c: 355: TxCounter++;
  7366  01CF  3001               	movlw	1
  7367  01D0  0020               	movlb	0	; select bank0
  7368  01D1  00BB               	movwf	??_I2c_DataReceiveSm
  7369  01D2  083B               	movf	??_I2c_DataReceiveSm,w
  7370  01D3  07E9               	addwf	I2c_DataReceiveSm@TxCounter,f
  7371  01D4                     l4499:	
  7372                           ;i2c_slv_drv.c: 357: else
  7373                           ;i2c_slv_drv.c: 358: {
  7374                           
  7375                           ;i2c_slv_drv.c: 356: }
  7376                           
  7377                           
  7378                           ;i2c_slv_drv.c: 360: }
  7379                           ;i2c_slv_drv.c: 362: I2cRxState = StopClkStretch;
  7380  01D4  3004               	movlw	4
  7381  01D5  00BB               	movwf	??_I2c_DataReceiveSm
  7382  01D6  083B               	movf	??_I2c_DataReceiveSm,w
  7383  01D7  00E6               	movwf	I2c_DataReceiveSm@I2cRxState
  7384                           
  7385                           ;i2c_slv_drv.c: 363: break;
  7386  01D8  0008               	return
  7387  01D9                     l4501:	
  7388                           ;i2c_slv_drv.c: 365: case HandleWrite:
  7389                           
  7390                           
  7391                           ;i2c_slv_drv.c: 367: if (CheckStopBitStatus() == ((UINT8)(1)))
  7392  01D9  3188  2070  3181   	fcall	_CheckStopBitStatus
  7393  01DC  3A01               	xorlw	1
  7394  01DD  1D03               	skipz
  7395  01DE  2A24               	goto	l4525
  7396                           
  7397                           ;i2c_slv_drv.c: 368: {
  7398                           ;i2c_slv_drv.c: 370: I2cRxFlag = ((UINT8)(0));
  7399  01DF  0020               	movlb	0	; select bank0
  7400  01E0  01E5               	clrf	I2c_DataReceiveSm@I2cRxFlag
  7401                           
  7402                           ;i2c_slv_drv.c: 372: I2cPacket.Lenght = RxCounter;
  7403  01E1  30EF               	movlw	239
  7404  01E2  0086               	movwf	6
  7405  01E3  3023               	movlw	35
  7406  01E4  0087               	movwf	7
  7407  01E5  0868               	movf	I2c_DataReceiveSm@RxCounter,w
  7408  01E6  0081               	movwf	1
  7409                           
  7410                           ;i2c_slv_drv.c: 373: I2cPacket.ReadWrite = ((UINT8)(0));
  7411  01E7  309D               	movlw	157
  7412  01E8  0086               	movwf	6
  7413  01E9  3023               	movlw	35
  7414  01EA  0087               	movwf	7
  7415  01EB  3141               	addfsr 1,1
  7416  01EC  0181               	clrf	1
  7417                           
  7418                           ;i2c_slv_drv.c: 374: I2cPacket.SlaveAddress = I2cRxAddress;
  7419  01ED  309D               	movlw	157
  7420  01EE  0086               	movwf	6
  7421  01EF  3023               	movlw	35
  7422  01F0  0087               	movwf	7
  7423  01F1  0864               	movf	I2c_DataReceiveSm@I2cRxAddress,w
  7424  01F2  3FC0               	movwi [0]fsr1
  7425                           
  7426                           ;i2c_slv_drv.c: 375: for (Index = 0; Index < ((UINT8)(80)); Index++)
  7427  01F3  01C2               	clrf	I2c_DataReceiveSm@Index
  7428  01F4  3050               	movlw	80
  7429  01F5  0242               	subwf	I2c_DataReceiveSm@Index,w
  7430  01F6  1803               	btfsc	3,0
  7431  01F7  2A1A               	goto	l4519
  7432  01F8                     l4513:	
  7433                           
  7434                           ;i2c_slv_drv.c: 376: {
  7435                           ;i2c_slv_drv.c: 377: I2cPacket.Buffer[Index] = I2cRxBuffer[Index];
  7436  01F8  0842               	movf	I2c_DataReceiveSm@Index,w
  7437  01F9  3E20               	addlw	(low (_I2cRxBuffer| (0+768)))& (0+255)
  7438  01FA  0086               	movwf	6
  7439  01FB  3003               	movlw	3	; select bank6/7
  7440  01FC  0087               	movwf	7
  7441  01FD  0801               	movf	1,w
  7442  01FE  00BB               	movwf	??_I2c_DataReceiveSm
  7443  01FF  0842               	movf	I2c_DataReceiveSm@Index,w
  7444  0200  00BC               	movwf	??_I2c_DataReceiveSm+1
  7445  0201  01BD               	clrf	??_I2c_DataReceiveSm+2
  7446  0202  309F               	movlw	159
  7447  0203  00BE               	movwf	??_I2c_DataReceiveSm+3
  7448  0204  3023               	movlw	35
  7449  0205  00BF               	movwf	??_I2c_DataReceiveSm+4
  7450  0206  083C               	movf	??_I2c_DataReceiveSm+1,w
  7451  0207  073E               	addwf	??_I2c_DataReceiveSm+3,w
  7452  0208  00C0               	movwf	??_I2c_DataReceiveSm+5
  7453  0209  083D               	movf	??_I2c_DataReceiveSm+2,w
  7454  020A  3D3F               	addwfc	??_I2c_DataReceiveSm+4,w
  7455  020B  00C1               	movwf	??_I2c_DataReceiveSm+6
  7456  020C  0840               	movf	??_I2c_DataReceiveSm+5,w
  7457  020D  0086               	movwf	6
  7458  020E  0841               	movf	??_I2c_DataReceiveSm+6,w
  7459  020F  0087               	movwf	7
  7460  0210  083B               	movf	??_I2c_DataReceiveSm,w
  7461  0211  0081               	movwf	1
  7462  0212  3001               	movlw	1
  7463  0213  00BB               	movwf	??_I2c_DataReceiveSm
  7464  0214  083B               	movf	??_I2c_DataReceiveSm,w
  7465  0215  07C2               	addwf	I2c_DataReceiveSm@Index,f
  7466  0216  3050               	movlw	80
  7467  0217  0242               	subwf	I2c_DataReceiveSm@Index,w
  7468  0218  1C03               	skipc
  7469  0219  29F8               	goto	l4513
  7470  021A                     l4519:	
  7471                           
  7472                           ;i2c_slv_drv.c: 378: }
  7473                           ;i2c_slv_drv.c: 381: GenerateEvt(&I2cNewPacketNotification);
  7474  021A  30E0               	movlw	(low (_I2cNewPacketNotification| 0))& (0+255)
  7475  021B  318A  227A  3181   	fcall	_GenerateEvt
  7476                           
  7477                           ;i2c_slv_drv.c: 384: RxCounter = 0;
  7478  021E  0020               	movlb	0	; select bank0
  7479  021F  01E8               	clrf	I2c_DataReceiveSm@RxCounter
  7480                           
  7481                           ;i2c_slv_drv.c: 386: ClearRxBuffer();
  7482  0220  3188  20E4  3181   	fcall	_ClearRxBuffer
  7483                           
  7484                           ;i2c_slv_drv.c: 387: }
  7485  0223  2A33               	goto	l4529
  7486  0224                     l4525:	
  7487                           
  7488                           ;i2c_slv_drv.c: 388: else
  7489                           ;i2c_slv_drv.c: 389: {
  7490                           ;i2c_slv_drv.c: 391: I2cRxBuffer[RxCounter] = SSP1BUF;
  7491  0224  0024               	movlb	4	; select bank4
  7492  0225  0811               	movf	17,w	;volatile
  7493  0226  0020               	movlb	0	; select bank0
  7494  0227  00BB               	movwf	??_I2c_DataReceiveSm
  7495  0228  0868               	movf	I2c_DataReceiveSm@RxCounter,w
  7496  0229  3E20               	addlw	(low (_I2cRxBuffer| (0+768)))& (0+255)
  7497  022A  0086               	movwf	6
  7498  022B  3003               	movlw	3	; select bank6/7
  7499  022C  0087               	movwf	7
  7500  022D  083B               	movf	??_I2c_DataReceiveSm,w
  7501  022E  0081               	movwf	1
  7502                           
  7503                           ;i2c_slv_drv.c: 393: RxCounter++;
  7504  022F  3001               	movlw	1
  7505  0230  00BB               	movwf	??_I2c_DataReceiveSm
  7506  0231  083B               	movf	??_I2c_DataReceiveSm,w
  7507  0232  07E8               	addwf	I2c_DataReceiveSm@RxCounter,f
  7508  0233                     l4529:	
  7509                           
  7510                           ;i2c_slv_drv.c: 394: }
  7511                           ;i2c_slv_drv.c: 396: I2cRxState = StopClkStretch;
  7512  0233  3004               	movlw	4
  7513  0234  0020               	movlb	0	; select bank0
  7514  0235  00BB               	movwf	??_I2c_DataReceiveSm
  7515  0236  083B               	movf	??_I2c_DataReceiveSm,w
  7516  0237  00E6               	movwf	I2c_DataReceiveSm@I2cRxState
  7517                           
  7518                           ;i2c_slv_drv.c: 397: break;
  7519  0238  0008               	return
  7520  0239                     l4531:	
  7521                           ;i2c_slv_drv.c: 399: case HandleRead:
  7522                           
  7523                           
  7524                           ;i2c_slv_drv.c: 401: if (CheckAckStatus() == ((UINT8)(0)))
  7525  0239  3188  205C  3181   	fcall	_CheckAckStatus
  7526  023C  3A00               	xorlw	0
  7527  023D  1D03               	skipz
  7528  023E  2A4E               	goto	l4537
  7529                           
  7530                           ;i2c_slv_drv.c: 402: {
  7531                           ;i2c_slv_drv.c: 404: SSP1BUF = I2cTxBuffer[TxCounter];
  7532  023F  0020               	movlb	0	; select bank0
  7533  0240  0869               	movf	I2c_DataReceiveSm@TxCounter,w
  7534  0241  3EA0               	addlw	(low (_I2cTxBuffer| (0+512)))& (0+255)
  7535  0242  0086               	movwf	6
  7536  0243  3002               	movlw	2	; select bank5/6
  7537  0244  0087               	movwf	7
  7538  0245  0801               	movf	1,w
  7539  0246  0024               	movlb	4	; select bank4
  7540  0247  0091               	movwf	17	;volatile
  7541                           
  7542                           ;i2c_slv_drv.c: 406: TxCounter++;
  7543  0248  3001               	movlw	1
  7544  0249  0020               	movlb	0	; select bank0
  7545  024A  00BB               	movwf	??_I2c_DataReceiveSm
  7546  024B  083B               	movf	??_I2c_DataReceiveSm,w
  7547  024C  07E9               	addwf	I2c_DataReceiveSm@TxCounter,f
  7548                           
  7549                           ;i2c_slv_drv.c: 407: }
  7550  024D  2A53               	goto	l4541
  7551  024E                     l4537:	
  7552                           
  7553                           ;i2c_slv_drv.c: 408: else
  7554                           ;i2c_slv_drv.c: 409: {
  7555                           ;i2c_slv_drv.c: 411: TxCounter = 0;
  7556  024E  0020               	movlb	0	; select bank0
  7557  024F  01E9               	clrf	I2c_DataReceiveSm@TxCounter
  7558                           
  7559                           ;i2c_slv_drv.c: 413: I2cRxFlag = ((UINT8)(0));
  7560  0250  01E5               	clrf	I2c_DataReceiveSm@I2cRxFlag
  7561                           
  7562                           ;i2c_slv_drv.c: 415: ClearTxBuffer();
  7563  0251  3188  20F4         	fcall	_ClearTxBuffer
  7564  0253                     l4541:	
  7565                           
  7566                           ;i2c_slv_drv.c: 417: }
  7567                           ;i2c_slv_drv.c: 419: I2cRxState = StopClkStretch;
  7568  0253  3004               	movlw	4
  7569  0254  0020               	movlb	0	; select bank0
  7570  0255  00BB               	movwf	??_I2c_DataReceiveSm
  7571  0256  083B               	movf	??_I2c_DataReceiveSm,w
  7572  0257  00E6               	movwf	I2c_DataReceiveSm@I2cRxState
  7573                           
  7574                           ;i2c_slv_drv.c: 420: break;
  7575  0258  0008               	return
  7576  0259                     l168:	
  7577                           ;i2c_slv_drv.c: 422: case StopClkStretch:
  7578                           
  7579                           
  7580                           ;i2c_slv_drv.c: 424: SSP1CON1bits.CKP = ((UINT8)(1));
  7581  0259  0024               	movlb	4	; select bank4
  7582  025A  1615               	bsf	21,4	;volatile
  7583                           
  7584                           ;i2c_slv_drv.c: 426: I2cRxState = CheckRxByte;
  7585  025B  0020               	movlb	0	; select bank0
  7586  025C  01E6               	clrf	I2c_DataReceiveSm@I2cRxState
  7587                           
  7588                           ;i2c_slv_drv.c: 431: }
  7589                           
  7590                           ;i2c_slv_drv.c: 430: break;
  7591                           
  7592                           ;i2c_slv_drv.c: 429: default:
  7593                           
  7594                           ;i2c_slv_drv.c: 427: break;
  7595  025D  0008               	return
  7596  025E                     l4547:	
  7597  025E  0020               	movlb	0	; select bank0
  7598  025F  0866               	movf	I2c_DataReceiveSm@I2cRxState,w
  7599                           
  7600                           ; Switch size 1, requested type "space"
  7601                           ; Number of cases is 5, Range of values is 0 to 4
  7602                           ; switch strategies available:
  7603                           ; Name         Instructions Cycles
  7604                           ; direct_byte           16     6 (fixed)
  7605                           ; simple_byte           16     9 (average)
  7606                           ; jumptable            260     6 (fixed)
  7607                           ;	Chosen strategy is direct_byte
  7608  0260  0084               	movwf	4
  7609  0261  3005               	movlw	5
  7610  0262  0204               	subwf	4,w
  7611  0263  1803               	skipnc
  7612  0264  0008               	return
  7613  0265  3188               	movlp	high S4719
  7614  0266  3504               	lslf	4,w
  7615  0267  3E00               	addlw	low S4719
  7616  0268  0082               	movwf	2
  7617  0269  0008               	return
  7618  026A                     __end_of_I2c_DataReceiveSm:	
  7619                           
  7620                           	psect	swtext1
  7621  0800                     __pswtext1:	
  7622  0800                     S4719:	
  7623  0800  3181  2989         	ljmp	l4471
  7624  0802  3181  29B3         	ljmp	l4487
  7625  0804  3181  29D9         	ljmp	l4501
  7626  0806  3182  2A39         	ljmp	l4531
  7627  0808  3182  2A59         	ljmp	l168
  7628                           
  7629                           	psect	text20
  7630  0950                     __ptext20:	
  7631 ;; *************** function _Wdg_MainTask *****************
  7632 ;; Defined at:
  7633 ;;		line 73 in file "../../../Framework/MercuryFwk/Source/c/03_Sml/02_Ssl/wdg.c"
  7634 ;; Parameters:    Size  Location     Type
  7635 ;;  Options         1   26[BANK0 ] unsigned char 
  7636 ;; Auto vars:     Size  Location     Type
  7637 ;;		None
  7638 ;; Return value:  Size  Location     Type
  7639 ;;                  1    wreg      void 
  7640 ;; Registers used:
  7641 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  7642 ;; Tracked objects:
  7643 ;;		On entry : 0/0
  7644 ;;		On exit  : 0/0
  7645 ;;		Unchanged: 0/0
  7646 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7647 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7648 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7649 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7650 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7651 ;;Total ram usage:        1 bytes
  7652 ;; Hardware stack levels used:    1
  7653 ;; Hardware stack levels required when called:    3
  7654 ;; This function calls:
  7655 ;;		_Mcu_ClearWdg
  7656 ;;		_Mcu_SetWdgPeriod
  7657 ;;		_Mcu_SetWdgSts
  7658 ;; This function is called by:
  7659 ;;		_InitializeTasks
  7660 ;;		_ScheduleTasks
  7661 ;; This function uses a non-reentrant model
  7662 ;;
  7663                           
  7664                           
  7665                           ;psect for function _Wdg_MainTask
  7666  0950                     _Wdg_MainTask:	
  7667                           
  7668                           ;wdg.c: 75: switch (SystemState)
  7669                           
  7670                           ;incstack = 0
  7671                           ; Regs used in _Wdg_MainTask: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  7672  0950  295C               	goto	l3657
  7673  0951                     l3651:	
  7674                           ;wdg.c: 76: {
  7675                           ;wdg.c: 78: case InitializationState:
  7676                           
  7677                           
  7678                           ;wdg.c: 80: Mcu_SetWdgPeriod(WdgPer_2s);
  7679  0951  300B               	movlw	11
  7680  0952  3188  207A  3189   	fcall	_Mcu_SetWdgPeriod
  7681                           
  7682                           ;wdg.c: 82: Mcu_SetWdgSts(((UINT8)(1)));
  7683  0955  3001               	movlw	1
  7684  0956  3188  2033         	fcall	_Mcu_SetWdgSts
  7685                           
  7686                           ;wdg.c: 83: break;
  7687  0958  0008               	return
  7688  0959                     l3653:	
  7689                           ;wdg.c: 86: case RunningState:
  7690                           
  7691                           
  7692                           ;wdg.c: 88: Mcu_ClearWdg();
  7693  0959  3180  2002         	fcall	_Mcu_ClearWdg
  7694                           
  7695                           ;wdg.c: 94: }
  7696                           
  7697                           ;wdg.c: 93: break;
  7698                           
  7699                           ;wdg.c: 92: default:
  7700                           
  7701                           ;wdg.c: 89: break;
  7702  095B  0008               	return
  7703  095C                     l3657:	
  7704  095C  0020               	movlb	0	; select bank0
  7705  095D  086B               	movf	_SystemState,w
  7706                           
  7707                           ; Switch size 1, requested type "space"
  7708                           ; Number of cases is 2, Range of values is 0 to 1
  7709                           ; switch strategies available:
  7710                           ; Name         Instructions Cycles
  7711                           ; simple_byte            7     4 (average)
  7712                           ; direct_byte           10     6 (fixed)
  7713                           ; jumptable            260     6 (fixed)
  7714                           ;	Chosen strategy is simple_byte
  7715  095E  3A00               	xorlw	0	; case 0
  7716  095F  1903               	skipnz
  7717  0960  2951               	goto	l3651
  7718  0961  3A01               	xorlw	1	; case 1
  7719  0962  1903               	skipnz
  7720  0963  2959               	goto	l3653
  7721  0964  2965               	goto	l772
  7722  0965                     l772:	
  7723  0965  0008               	return
  7724  0966                     __end_of_Wdg_MainTask:	
  7725                           
  7726                           	psect	text21
  7727  087A                     __ptext21:	
  7728 ;; *************** function _Mcu_SetWdgPeriod *****************
  7729 ;; Defined at:
  7730 ;;		line 197 in file "../../../Framework/MercuryFwk/Source/c/01_Hal/02_Drv/mcu_drv.c"
  7731 ;; Parameters:    Size  Location     Type
  7732 ;;  WdgPeriod       1    wreg     enum E3675
  7733 ;; Auto vars:     Size  Location     Type
  7734 ;;  WdgPeriod       1    5[COMMON] enum E3675
  7735 ;; Return value:  Size  Location     Type
  7736 ;;                  1    wreg      void 
  7737 ;; Registers used:
  7738 ;;		wreg, status,2, status,0
  7739 ;; Tracked objects:
  7740 ;;		On entry : 0/0
  7741 ;;		On exit  : 0/0
  7742 ;;		Unchanged: 0/0
  7743 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7744 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7745 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7746 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7747 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7748 ;;Total ram usage:        2 bytes
  7749 ;; Hardware stack levels used:    1
  7750 ;; Hardware stack levels required when called:    2
  7751 ;; This function calls:
  7752 ;;		Nothing
  7753 ;; This function is called by:
  7754 ;;		_Wdg_MainTask
  7755 ;; This function uses a non-reentrant model
  7756 ;;
  7757                           
  7758                           
  7759                           ;psect for function _Mcu_SetWdgPeriod
  7760  087A                     _Mcu_SetWdgPeriod:	
  7761                           
  7762                           ;incstack = 0
  7763                           ; Regs used in _Mcu_SetWdgPeriod: [wreg+status,2+status,0]
  7764                           ;Mcu_SetWdgPeriod@WdgPeriod stored from wreg
  7765  087A  00F5               	movwf	Mcu_SetWdgPeriod@WdgPeriod
  7766                           
  7767                           ;mcu_drv.c: 200: WDTCONbits.WDTPS = WdgPeriod;
  7768  087B  0875               	movf	Mcu_SetWdgPeriod@WdgPeriod,w
  7769  087C  00F4               	movwf	??_Mcu_SetWdgPeriod
  7770  087D  0DF4               	rlf	??_Mcu_SetWdgPeriod,f
  7771  087E  0021               	movlb	1	; select bank1
  7772  087F  0817               	movf	23,w	;volatile
  7773  0880  0674               	xorwf	??_Mcu_SetWdgPeriod,w
  7774  0881  39C1               	andlw	-63
  7775  0882  0674               	xorwf	??_Mcu_SetWdgPeriod,w
  7776  0883  0097               	movwf	23	;volatile
  7777  0884  0008               	return
  7778  0885                     __end_of_Mcu_SetWdgPeriod:	
  7779                           
  7780                           	psect	text22
  7781  0002                     __ptext22:	
  7782 ;; *************** function _Mcu_ClearWdg *****************
  7783 ;; Defined at:
  7784 ;;		line 225 in file "../../../Framework/MercuryFwk/Source/c/01_Hal/02_Drv/mcu_drv.c"
  7785 ;; Parameters:    Size  Location     Type
  7786 ;;		None
  7787 ;; Auto vars:     Size  Location     Type
  7788 ;;		None
  7789 ;; Return value:  Size  Location     Type
  7790 ;;                  1    wreg      void 
  7791 ;; Registers used:
  7792 ;;		None
  7793 ;; Tracked objects:
  7794 ;;		On entry : 0/0
  7795 ;;		On exit  : 0/0
  7796 ;;		Unchanged: 0/0
  7797 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7798 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7799 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7800 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7801 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7802 ;;Total ram usage:        0 bytes
  7803 ;; Hardware stack levels used:    1
  7804 ;; Hardware stack levels required when called:    2
  7805 ;; This function calls:
  7806 ;;		Nothing
  7807 ;; This function is called by:
  7808 ;;		_Wdg_MainTask
  7809 ;; This function uses a non-reentrant model
  7810 ;;
  7811                           
  7812                           
  7813                           ;psect for function _Mcu_ClearWdg
  7814  0002                     _Mcu_ClearWdg:	
  7815                           
  7816                           ;incstack = 0
  7817                           ; Regs used in _Mcu_ClearWdg: []
  7818  0002  0064               	clrwdt	;# 
  7819  0003  0008               	return
  7820  0004                     __end_of_Mcu_ClearWdg:	
  7821                           
  7822                           	psect	text23
  7823  0C81                     __ptext23:	
  7824 ;; *************** function _LedStateMachine *****************
  7825 ;; Defined at:
  7826 ;;		line 75 in file "../../../Framework/MercuryFwk/Source/c/03_Sml/02_Ssl/led.c"
  7827 ;; Parameters:    Size  Location     Type
  7828 ;;  Led             1    wreg     unsigned char 
  7829 ;;  LedSts          1   11[BANK0 ] PTR enum E4018
  7830 ;;		 -> Led1Sts(1), 
  7831 ;;  LedBlink        1   12[BANK0 ] PTR struct _LedBlinkType
  7832 ;;		 -> Led1Blink(9), 
  7833 ;;  LedPulse        1   13[BANK0 ] PTR struct _LedPulseType
  7834 ;;		 -> Led1Pulse(6), 
  7835 ;; Auto vars:     Size  Location     Type
  7836 ;;  Led             1   16[BANK0 ] unsigned char 
  7837 ;;  LedOutSts       1   17[BANK0 ] unsigned char 
  7838 ;; Return value:  Size  Location     Type
  7839 ;;                  1    wreg      unsigned char 
  7840 ;; Registers used:
  7841 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7842 ;; Tracked objects:
  7843 ;;		On entry : 0/0
  7844 ;;		On exit  : 0/0
  7845 ;;		Unchanged: 0/0
  7846 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7847 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7848 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7849 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7850 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7851 ;;Total ram usage:        7 bytes
  7852 ;; Hardware stack levels used:    1
  7853 ;; Hardware stack levels required when called:    4
  7854 ;; This function calls:
  7855 ;;		_LedBlinkStateMachine
  7856 ;;		_LedPulseStateMachine
  7857 ;; This function is called by:
  7858 ;;		_Led_MainTask
  7859 ;; This function uses a non-reentrant model
  7860 ;;
  7861                           
  7862                           
  7863                           ;psect for function _LedStateMachine
  7864  0C81                     _LedStateMachine:	
  7865                           
  7866                           ;incstack = 0
  7867                           ; Regs used in _LedStateMachine: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  7868                           ;LedStateMachine@Led stored from wreg
  7869  0C81  0020               	movlb	0	; select bank0
  7870  0C82  00B0               	movwf	LedStateMachine@Led
  7871                           
  7872                           ;led.c: 78: UINT8 LedOutSts = 0u;
  7873  0C83  01B1               	clrf	LedStateMachine@LedOutSts
  7874                           
  7875                           ;led.c: 81: switch (*LedSts)
  7876  0C84  2C9F               	goto	l4443
  7877  0C85                     l4435:	
  7878                           ;led.c: 82: {
  7879                           ;led.c: 83: case LED_STS_OFF:
  7880                           
  7881                           
  7882                           ;led.c: 85: LedOutSts = ((UINT8)(0));
  7883  0C85  01B1               	clrf	LedStateMachine@LedOutSts
  7884                           
  7885                           ;led.c: 86: break;
  7886  0C86  2CB0               	goto	l4445
  7887  0C87                     l570:	
  7888                           ;led.c: 88: case LED_STS_ON:
  7889                           
  7890                           
  7891                           ;led.c: 90: LedOutSts = ((UINT8)(1));
  7892  0C87  01B1               	clrf	LedStateMachine@LedOutSts
  7893  0C88  0AB1               	incf	LedStateMachine@LedOutSts,f
  7894                           
  7895                           ;led.c: 91: break;
  7896  0C89  2CB0               	goto	l4445
  7897  0C8A                     l4437:	
  7898                           ;led.c: 93: case LED_STS_BLINK:
  7899                           
  7900                           
  7901                           ;led.c: 95: LedOutSts = LedBlinkStateMachine(LedBlink);
  7902  0C8A  082C               	movf	LedStateMachine@LedBlink,w
  7903  0C8B  3185  2536  318C   	fcall	_LedBlinkStateMachine
  7904  0C8E  0020               	movlb	0	; select bank0
  7905  0C8F  00AE               	movwf	??_LedStateMachine
  7906  0C90  082E               	movf	??_LedStateMachine,w
  7907  0C91  2C9D               	goto	L7
  7908  0C92                     l4439:	
  7909                           ;led.c: 98: case LED_STS_PULSE:
  7910                           
  7911                           ;led.c: 96: break;
  7912                           
  7913                           
  7914                           ;led.c: 100: LedOutSts = LedPulseStateMachine(LedPulse, Led);
  7915  0C92  0830               	movf	LedStateMachine@Led,w
  7916  0C93  00AE               	movwf	??_LedStateMachine
  7917  0C94  082E               	movf	??_LedStateMachine,w
  7918  0C95  00A7               	movwf	LedPulseStateMachine@Led
  7919  0C96  082D               	movf	LedStateMachine@LedPulse,w
  7920  0C97  318F  272A  318C   	fcall	_LedPulseStateMachine
  7921  0C9A  0020               	movlb	0	; select bank0
  7922  0C9B  00AF               	movwf	??_LedStateMachine+1
  7923  0C9C  082F               	movf	??_LedStateMachine+1,w
  7924  0C9D                     L7:	
  7925  0C9D  00B1               	movwf	LedStateMachine@LedOutSts
  7926                           
  7927                           ;led.c: 105: }
  7928                           
  7929                           ;led.c: 104: break;
  7930                           
  7931                           ;led.c: 103: default:
  7932                           
  7933                           ;led.c: 101: break;
  7934  0C9E  2CB0               	goto	l4445
  7935  0C9F                     l4443:	
  7936  0C9F  082B               	movf	LedStateMachine@LedSts,w
  7937  0CA0  0086               	movwf	6
  7938  0CA1  0187               	clrf	7
  7939  0CA2  0801               	movf	1,w
  7940                           
  7941                           ; Switch size 1, requested type "space"
  7942                           ; Number of cases is 4, Range of values is 0 to 3
  7943                           ; switch strategies available:
  7944                           ; Name         Instructions Cycles
  7945                           ; simple_byte           13     7 (average)
  7946                           ; direct_byte           14     6 (fixed)
  7947                           ; jumptable            260     6 (fixed)
  7948                           ;	Chosen strategy is simple_byte
  7949  0CA3  3A00               	xorlw	0	; case 0
  7950  0CA4  1903               	skipnz
  7951  0CA5  2C85               	goto	l4435
  7952  0CA6  3A01               	xorlw	1	; case 1
  7953  0CA7  1903               	skipnz
  7954  0CA8  2C87               	goto	l570
  7955  0CA9  3A03               	xorlw	3	; case 2
  7956  0CAA  1903               	skipnz
  7957  0CAB  2C8A               	goto	l4437
  7958  0CAC  3A01               	xorlw	1	; case 3
  7959  0CAD  1903               	skipnz
  7960  0CAE  2C92               	goto	l4439
  7961  0CAF  2CB0               	goto	l4445
  7962  0CB0                     l4445:	
  7963                           
  7964                           ;led.c: 107: return LedOutSts;
  7965  0CB0  0831               	movf	LedStateMachine@LedOutSts,w
  7966  0CB1  0008               	return
  7967  0CB2                     __end_of_LedStateMachine:	
  7968                           
  7969                           	psect	text24
  7970  0F2A                     __ptext24:	
  7971 ;; *************** function _LedPulseStateMachine *****************
  7972 ;; Defined at:
  7973 ;;		line 131 in file "../../../Framework/MercuryFwk/Source/c/01_Hal/02_Drv/led_drv.c"
  7974 ;; Parameters:    Size  Location     Type
  7975 ;;  LedPulse        1    wreg     PTR struct _LedPulseType
  7976 ;;		 -> Led1Pulse(6), 
  7977 ;;  Led             1    7[BANK0 ] unsigned char 
  7978 ;; Auto vars:     Size  Location     Type
  7979 ;;  LedPulse        1   10[BANK0 ] PTR struct _LedPulseType
  7980 ;;		 -> Led1Pulse(6), 
  7981 ;; Return value:  Size  Location     Type
  7982 ;;                  1    wreg      unsigned char 
  7983 ;; Registers used:
  7984 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7985 ;; Tracked objects:
  7986 ;;		On entry : 0/0
  7987 ;;		On exit  : 0/0
  7988 ;;		Unchanged: 0/0
  7989 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7990 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7991 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7992 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7993 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7994 ;;Total ram usage:        4 bytes
  7995 ;; Hardware stack levels used:    1
  7996 ;; Hardware stack levels required when called:    3
  7997 ;; This function calls:
  7998 ;;		_Led_SetLedStatus
  7999 ;;		___lwdiv
  8000 ;; This function is called by:
  8001 ;;		_LedStateMachine
  8002 ;; This function uses a non-reentrant model
  8003 ;;
  8004                           
  8005                           
  8006                           ;psect for function _LedPulseStateMachine
  8007  0F2A                     _LedPulseStateMachine:	
  8008                           
  8009                           ;incstack = 0
  8010                           ; Regs used in _LedPulseStateMachine: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  8011                           ;LedPulseStateMachine@LedPulse stored from wreg
  8012  0F2A  0020               	movlb	0	; select bank0
  8013  0F2B  00AA               	movwf	LedPulseStateMachine@LedPulse
  8014                           
  8015                           ;led_drv.c: 134: switch (LedPulse->LedPulseState)
  8016  0F2C  2F7D               	goto	l4247
  8017  0F2D                     l4229:	
  8018                           ;led_drv.c: 135: {
  8019                           ;led_drv.c: 136: case LedPulseOn:
  8020                           
  8021                           
  8022                           ;led_drv.c: 138: LedPulse->LedOutState = ((UINT8)(1));
  8023  0F2D  0A2A               	incf	LedPulseStateMachine@LedPulse,w
  8024  0F2E  0086               	movwf	6
  8025  0F2F  0187               	clrf	7
  8026  0F30  0181               	clrf	1
  8027  0F31  0A81               	incf	1,f
  8028                           
  8029                           ;led_drv.c: 140: LedPulse->LedPulseState = LedPulseDelay;
  8030  0F32  082A               	movf	LedPulseStateMachine@LedPulse,w
  8031  0F33  0086               	movwf	6
  8032  0F34  0187               	clrf	7
  8033  0F35  0181               	clrf	1
  8034  0F36  0A81               	incf	1,f
  8035  0F37                     l4231:	
  8036                           ;led_drv.c: 143: case LedPulseDelay:
  8037                           
  8038                           
  8039                           ;led_drv.c: 145: LedPulse->LedPulseCounter++;
  8040  0F37  082A               	movf	LedPulseStateMachine@LedPulse,w
  8041  0F38  3E02               	addlw	2
  8042  0F39  0086               	movwf	6
  8043  0F3A  0187               	clrf	7
  8044  0F3B  3001               	movlw	1
  8045  0F3C  0781               	addwf	1,f
  8046  0F3D  3141               	addfsr 1,1
  8047  0F3E  1803               	skipnc
  8048  0F3F  0A81               	incf	1,f
  8049                           
  8050                           ;led_drv.c: 147: if (LedPulse->LedPulseCounter >= (LedPulse->LedPulseTimeMs/((UINT16)(10
      +                          ))))
  8051  0F40  300A               	movlw	10
  8052  0F41  00A0               	movwf	___lwdiv@divisor
  8053  0F42  3000               	movlw	0
  8054  0F43  00A1               	movwf	___lwdiv@divisor+1
  8055  0F44  082A               	movf	LedPulseStateMachine@LedPulse,w
  8056  0F45  3E04               	addlw	4
  8057  0F46  0086               	movwf	6
  8058  0F47  0187               	clrf	7
  8059  0F48  3F40               	moviw [0]fsr1
  8060  0F49  00A2               	movwf	___lwdiv@dividend
  8061  0F4A  3F41               	moviw [1]fsr1
  8062  0F4B  00A3               	movwf	___lwdiv@dividend+1
  8063  0F4C  318C  24E5  318F   	fcall	___lwdiv
  8064  0F4F  0020               	movlb	0	; select bank0
  8065  0F50  082A               	movf	LedPulseStateMachine@LedPulse,w
  8066  0F51  3E02               	addlw	2
  8067  0F52  0086               	movwf	6
  8068  0F53  0187               	clrf	7
  8069  0F54  3F40               	moviw [0]fsr1
  8070  0F55  00A8               	movwf	??_LedPulseStateMachine
  8071  0F56  3F41               	moviw [1]fsr1
  8072  0F57  00A9               	movwf	??_LedPulseStateMachine+1
  8073  0F58  0821               	movf	?___lwdiv+1,w
  8074  0F59  0229               	subwf	??_LedPulseStateMachine+1,w
  8075  0F5A  1D03               	skipz
  8076  0F5B  2F5E               	goto	u2905
  8077  0F5C  0820               	movf	?___lwdiv,w
  8078  0F5D  0228               	subwf	??_LedPulseStateMachine,w
  8079  0F5E                     u2905:	
  8080  0F5E  1C03               	skipc
  8081  0F5F  2F8C               	goto	l4249
  8082                           
  8083                           ;led_drv.c: 148: {
  8084                           ;led_drv.c: 150: LedPulse->LedPulseCounter = 0;
  8085  0F60  082A               	movf	LedPulseStateMachine@LedPulse,w
  8086  0F61  3E02               	addlw	2
  8087  0F62  0086               	movwf	6
  8088  0F63  0187               	clrf	7
  8089  0F64  3000               	movlw	0
  8090  0F65  3FC0               	movwi [0]fsr1
  8091  0F66  3FC1               	movwi [1]fsr1
  8092                           
  8093                           ;led_drv.c: 152: LedPulse->LedOutState = ((UINT8)(0));
  8094  0F67  0A2A               	incf	LedPulseStateMachine@LedPulse,w
  8095  0F68  0086               	movwf	6
  8096  0F69  0187               	clrf	7
  8097  0F6A  0181               	clrf	1
  8098                           
  8099                           ;led_drv.c: 154: LedPulse->LedPulseState = LedPulseOff;
  8100  0F6B  3002               	movlw	2
  8101  0F6C  00A8               	movwf	??_LedPulseStateMachine
  8102  0F6D  082A               	movf	LedPulseStateMachine@LedPulse,w
  8103  0F6E  0086               	movwf	6
  8104  0F6F  0187               	clrf	7
  8105  0F70  0828               	movf	??_LedPulseStateMachine,w
  8106  0F71  0081               	movwf	1
  8107                           
  8108                           ;led_drv.c: 155: }
  8109                           ;led_drv.c: 156: break;
  8110  0F72  2F8C               	goto	l4249
  8111  0F73                     l4241:	
  8112                           ;led_drv.c: 158: case LedPulseOff:
  8113                           
  8114                           
  8115                           ;led_drv.c: 160: LedPulse->LedPulseState = LedPulseOn;
  8116  0F73  082A               	movf	LedPulseStateMachine@LedPulse,w
  8117  0F74  0086               	movwf	6
  8118  0F75  0187               	clrf	7
  8119  0F76  0181               	clrf	1
  8120                           
  8121                           ;led_drv.c: 162: Led_SetLedStatus(Led,LED_STS_OFF);
  8122  0F77  01F4               	clrf	Led_SetLedStatus@LedSts
  8123  0F78  0827               	movf	LedPulseStateMachine@Led,w
  8124  0F79  3188  20B6  318F   	fcall	_Led_SetLedStatus
  8125                           
  8126                           ;led_drv.c: 167: }
  8127                           
  8128                           ;led_drv.c: 166: break;
  8129                           
  8130                           ;led_drv.c: 165: default:
  8131                           
  8132                           ;led_drv.c: 163: break;
  8133  0F7C  2F8C               	goto	l4249
  8134  0F7D                     l4247:	
  8135  0F7D  0020               	movlb	0	; select bank0
  8136  0F7E  082A               	movf	LedPulseStateMachine@LedPulse,w
  8137  0F7F  0086               	movwf	6
  8138  0F80  0187               	clrf	7
  8139  0F81  0801               	movf	1,w
  8140                           
  8141                           ; Switch size 1, requested type "space"
  8142                           ; Number of cases is 3, Range of values is 0 to 2
  8143                           ; switch strategies available:
  8144                           ; Name         Instructions Cycles
  8145                           ; simple_byte           10     6 (average)
  8146                           ; direct_byte           12     6 (fixed)
  8147                           ; jumptable            260     6 (fixed)
  8148                           ;	Chosen strategy is simple_byte
  8149  0F82  3A00               	xorlw	0	; case 0
  8150  0F83  1903               	skipnz
  8151  0F84  2F2D               	goto	l4229
  8152  0F85  3A01               	xorlw	1	; case 1
  8153  0F86  1903               	skipnz
  8154  0F87  2F37               	goto	l4231
  8155  0F88  3A03               	xorlw	3	; case 2
  8156  0F89  1903               	skipnz
  8157  0F8A  2F73               	goto	l4241
  8158  0F8B  2F8C               	goto	l4249
  8159  0F8C                     l4249:	
  8160                           
  8161                           ;led_drv.c: 170: return (LedPulse->LedOutState);
  8162  0F8C  0020               	movlb	0	; select bank0
  8163  0F8D  0A2A               	incf	LedPulseStateMachine@LedPulse,w
  8164  0F8E  0086               	movwf	6
  8165  0F8F  0187               	clrf	7
  8166  0F90  0801               	movf	1,w
  8167  0F91  0008               	return
  8168  0F92                     __end_of_LedPulseStateMachine:	
  8169                           
  8170                           	psect	text25
  8171  0536                     __ptext25:	
  8172 ;; *************** function _LedBlinkStateMachine *****************
  8173 ;; Defined at:
  8174 ;;		line 74 in file "../../../Framework/MercuryFwk/Source/c/01_Hal/02_Drv/led_drv.c"
  8175 ;; Parameters:    Size  Location     Type
  8176 ;;  LedBlink        1    wreg     PTR struct _LedBlinkType
  8177 ;;		 -> Led1Blink(9), 
  8178 ;; Auto vars:     Size  Location     Type
  8179 ;;  LedBlink        1    5[COMMON] PTR struct _LedBlinkType
  8180 ;;		 -> Led1Blink(9), 
  8181 ;; Return value:  Size  Location     Type
  8182 ;;                  1    wreg      unsigned char 
  8183 ;; Registers used:
  8184 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8185 ;; Tracked objects:
  8186 ;;		On entry : 0/0
  8187 ;;		On exit  : 0/0
  8188 ;;		Unchanged: 0/0
  8189 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8190 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8191 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8192 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8193 ;;      Totals:         1       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8194 ;;Total ram usage:        3 bytes
  8195 ;; Hardware stack levels used:    1
  8196 ;; Hardware stack levels required when called:    3
  8197 ;; This function calls:
  8198 ;;		___lwdiv
  8199 ;; This function is called by:
  8200 ;;		_LedStateMachine
  8201 ;; This function uses a non-reentrant model
  8202 ;;
  8203                           
  8204                           
  8205                           ;psect for function _LedBlinkStateMachine
  8206  0536                     _LedBlinkStateMachine:	
  8207                           
  8208                           ;incstack = 0
  8209                           ; Regs used in _LedBlinkStateMachine: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  8210                           ;LedBlinkStateMachine@LedBlink stored from wreg
  8211  0536  00F5               	movwf	LedBlinkStateMachine@LedBlink
  8212                           
  8213                           ;led_drv.c: 77: switch (LedBlink->LedBlinkState)
  8214  0537  2DB6               	goto	l4221
  8215  0538                     l4199:	
  8216                           ;led_drv.c: 78: {
  8217                           ;led_drv.c: 79: case LedBlinkInit:
  8218                           
  8219                           
  8220                           ;led_drv.c: 81: LedBlink->LedOutState = LedBlink->LedInitStatus;
  8221  0538  0875               	movf	LedBlinkStateMachine@LedBlink,w
  8222  0539  3E08               	addlw	8
  8223  053A  0086               	movwf	6
  8224  053B  0187               	clrf	7
  8225  053C  0801               	movf	1,w
  8226  053D  0020               	movlb	0	; select bank0
  8227  053E  00A7               	movwf	??_LedBlinkStateMachine
  8228  053F  0A75               	incf	LedBlinkStateMachine@LedBlink,w
  8229  0540  0086               	movwf	6
  8230  0541  0187               	clrf	7
  8231  0542  0827               	movf	??_LedBlinkStateMachine,w
  8232  0543  0081               	movwf	1
  8233                           
  8234                           ;led_drv.c: 83: LedBlink->LedBlinkState = LedBlinkRunning;
  8235  0544  0875               	movf	LedBlinkStateMachine@LedBlink,w
  8236  0545  2D7E               	goto	L8
  8237  0546                     l4203:	
  8238                           ;led_drv.c: 86: case LedBlinkRunning:
  8239                           
  8240                           ;led_drv.c: 84: break;
  8241                           
  8242                           
  8243                           ;led_drv.c: 88: LedBlink->LedBlinkCounter++;
  8244  0546  0875               	movf	LedBlinkStateMachine@LedBlink,w
  8245  0547  3E02               	addlw	2
  8246  0548  0086               	movwf	6
  8247  0549  0187               	clrf	7
  8248  054A  3001               	movlw	1
  8249  054B  0781               	addwf	1,f
  8250  054C  3141               	addfsr 1,1
  8251  054D  1803               	skipnc
  8252  054E  0A81               	incf	1,f
  8253                           
  8254                           ;led_drv.c: 90: if (LedBlink->LedOutState == OffState)
  8255  054F  0A75               	incf	LedBlinkStateMachine@LedBlink,w
  8256  0550  0086               	movwf	6
  8257  0551  0187               	clrf	7
  8258  0552  0801               	movf	1,w
  8259  0553  1D03               	btfss	3,2
  8260  0554  2D83               	goto	l4211
  8261                           
  8262                           ;led_drv.c: 91: {
  8263                           ;led_drv.c: 93: if (LedBlink->LedBlinkCounter >= (LedBlink->LedOffTimeMs/((UINT16)(10)))
      +                          )
  8264  0555  300A               	movlw	10
  8265  0556  0020               	movlb	0	; select bank0
  8266  0557  00A0               	movwf	___lwdiv@divisor
  8267  0558  3000               	movlw	0
  8268  0559  00A1               	movwf	___lwdiv@divisor+1
  8269  055A  0875               	movf	LedBlinkStateMachine@LedBlink,w
  8270  055B  3E06               	addlw	6
  8271  055C  0086               	movwf	6
  8272  055D  0187               	clrf	7
  8273  055E  3F40               	moviw [0]fsr1
  8274  055F  00A2               	movwf	___lwdiv@dividend
  8275  0560  3F41               	moviw [1]fsr1
  8276  0561  00A3               	movwf	___lwdiv@dividend+1
  8277  0562  318C  24E5  3185   	fcall	___lwdiv
  8278  0565  0875               	movf	LedBlinkStateMachine@LedBlink,w
  8279  0566  3E02               	addlw	2
  8280  0567  0086               	movwf	6
  8281  0568  0187               	clrf	7
  8282  0569  3F40               	moviw [0]fsr1
  8283  056A  0020               	movlb	0	; select bank0
  8284  056B  00A7               	movwf	??_LedBlinkStateMachine
  8285  056C  3F41               	moviw [1]fsr1
  8286  056D  00A8               	movwf	??_LedBlinkStateMachine+1
  8287  056E  0821               	movf	?___lwdiv+1,w
  8288  056F  0228               	subwf	??_LedBlinkStateMachine+1,w
  8289  0570  1D03               	skipz
  8290  0571  2D74               	goto	u2875
  8291  0572  0820               	movf	?___lwdiv,w
  8292  0573  0227               	subwf	??_LedBlinkStateMachine,w
  8293  0574                     u2875:	
  8294  0574  1C03               	skipc
  8295  0575  2DC1               	goto	l4223
  8296                           
  8297                           ;led_drv.c: 94: {
  8298                           ;led_drv.c: 96: LedBlink->LedBlinkCounter = 0;
  8299  0576  0875               	movf	LedBlinkStateMachine@LedBlink,w
  8300  0577  3E02               	addlw	2
  8301  0578  0086               	movwf	6
  8302  0579  0187               	clrf	7
  8303  057A  3000               	movlw	0
  8304  057B  3FC0               	movwi [0]fsr1
  8305  057C  3FC1               	movwi [1]fsr1
  8306                           
  8307                           ;led_drv.c: 98: LedBlink->LedOutState = OnState;
  8308  057D  0A75               	incf	LedBlinkStateMachine@LedBlink,w
  8309  057E                     L8:	
  8310  057E  0086               	movwf	6
  8311  057F  0187               	clrf	7
  8312  0580  0181               	clrf	1
  8313  0581  0A81               	incf	1,f
  8314                           
  8315                           ;led_drv.c: 99: }
  8316                           ;led_drv.c: 100: }
  8317  0582  2DC1               	goto	l4223
  8318  0583                     l4211:	
  8319                           
  8320                           ;led_drv.c: 101: else if (LedBlink->LedOutState == OnState)
  8321  0583  0A75               	incf	LedBlinkStateMachine@LedBlink,w
  8322  0584  0086               	movwf	6
  8323  0585  0187               	clrf	7
  8324  0586  0301               	decf	1,w
  8325  0587  1D03               	btfss	3,2
  8326  0588  2DC1               	goto	l4223
  8327                           
  8328                           ;led_drv.c: 102: {
  8329                           ;led_drv.c: 104: if (LedBlink->LedBlinkCounter >= (LedBlink->LedOnTimeMs/((UINT16)(10)))
      +                          )
  8330  0589  300A               	movlw	10
  8331  058A  0020               	movlb	0	; select bank0
  8332  058B  00A0               	movwf	___lwdiv@divisor
  8333  058C  3000               	movlw	0
  8334  058D  00A1               	movwf	___lwdiv@divisor+1
  8335  058E  0875               	movf	LedBlinkStateMachine@LedBlink,w
  8336  058F  3E04               	addlw	4
  8337  0590  0086               	movwf	6
  8338  0591  0187               	clrf	7
  8339  0592  3F40               	moviw [0]fsr1
  8340  0593  00A2               	movwf	___lwdiv@dividend
  8341  0594  3F41               	moviw [1]fsr1
  8342  0595  00A3               	movwf	___lwdiv@dividend+1
  8343  0596  318C  24E5  3185   	fcall	___lwdiv
  8344  0599  0875               	movf	LedBlinkStateMachine@LedBlink,w
  8345  059A  3E02               	addlw	2
  8346  059B  0086               	movwf	6
  8347  059C  0187               	clrf	7
  8348  059D  3F40               	moviw [0]fsr1
  8349  059E  0020               	movlb	0	; select bank0
  8350  059F  00A7               	movwf	??_LedBlinkStateMachine
  8351  05A0  3F41               	moviw [1]fsr1
  8352  05A1  00A8               	movwf	??_LedBlinkStateMachine+1
  8353  05A2  0821               	movf	?___lwdiv+1,w
  8354  05A3  0228               	subwf	??_LedBlinkStateMachine+1,w
  8355  05A4  1D03               	skipz
  8356  05A5  2DA8               	goto	u2895
  8357  05A6  0820               	movf	?___lwdiv,w
  8358  05A7  0227               	subwf	??_LedBlinkStateMachine,w
  8359  05A8                     u2895:	
  8360  05A8  1C03               	skipc
  8361  05A9  2DC1               	goto	l4223
  8362                           
  8363                           ;led_drv.c: 105: {
  8364                           ;led_drv.c: 107: LedBlink->LedBlinkCounter = 0;
  8365  05AA  0875               	movf	LedBlinkStateMachine@LedBlink,w
  8366  05AB  3E02               	addlw	2
  8367  05AC  0086               	movwf	6
  8368  05AD  0187               	clrf	7
  8369  05AE  3000               	movlw	0
  8370  05AF  3FC0               	movwi [0]fsr1
  8371  05B0  3FC1               	movwi [1]fsr1
  8372                           
  8373                           ;led_drv.c: 109: LedBlink->LedOutState = OffState;
  8374  05B1  0A75               	incf	LedBlinkStateMachine@LedBlink,w
  8375  05B2  0086               	movwf	6
  8376  05B3  0187               	clrf	7
  8377  05B4  0181               	clrf	1
  8378                           
  8379                           ;led_drv.c: 116: }
  8380                           
  8381                           ;led_drv.c: 115: break;
  8382                           
  8383                           ;led_drv.c: 114: default:
  8384                           
  8385                           ;led_drv.c: 110: }
  8386                           ;led_drv.c: 111: }
  8387                           ;led_drv.c: 112: break;
  8388  05B5  2DC1               	goto	l4223
  8389  05B6                     l4221:	
  8390  05B6  0875               	movf	LedBlinkStateMachine@LedBlink,w
  8391  05B7  0086               	movwf	6
  8392  05B8  0187               	clrf	7
  8393  05B9  0801               	movf	1,w
  8394                           
  8395                           ; Switch size 1, requested type "space"
  8396                           ; Number of cases is 2, Range of values is 0 to 1
  8397                           ; switch strategies available:
  8398                           ; Name         Instructions Cycles
  8399                           ; simple_byte            7     4 (average)
  8400                           ; direct_byte           10     6 (fixed)
  8401                           ; jumptable            260     6 (fixed)
  8402                           ;	Chosen strategy is simple_byte
  8403  05BA  3A00               	xorlw	0	; case 0
  8404  05BB  1903               	skipnz
  8405  05BC  2D38               	goto	l4199
  8406  05BD  3A01               	xorlw	1	; case 1
  8407  05BE  1903               	skipnz
  8408  05BF  2D46               	goto	l4203
  8409  05C0  2DC1               	goto	l4223
  8410  05C1                     l4223:	
  8411                           
  8412                           ;led_drv.c: 119: return (LedBlink->LedOutState);
  8413  05C1  0A75               	incf	LedBlinkStateMachine@LedBlink,w
  8414  05C2  0086               	movwf	6
  8415  05C3  0187               	clrf	7
  8416  05C4  0801               	movf	1,w
  8417  05C5  0008               	return
  8418  05C6                     __end_of_LedBlinkStateMachine:	
  8419                           
  8420                           	psect	text26
  8421  0870                     __ptext26:	
  8422 ;; *************** function _CheckStopBitStatus *****************
  8423 ;; Defined at:
  8424 ;;		line 150 in file "../../../Framework/MercuryFwk/Source/c/01_Hal/02_Drv/i2c_slv_drv.c"
  8425 ;; Parameters:    Size  Location     Type
  8426 ;;		None
  8427 ;; Auto vars:     Size  Location     Type
  8428 ;;		None
  8429 ;; Return value:  Size  Location     Type
  8430 ;;                  1    wreg      unsigned char 
  8431 ;; Registers used:
  8432 ;;		wreg, status,2, status,0
  8433 ;; Tracked objects:
  8434 ;;		On entry : 0/0
  8435 ;;		On exit  : 0/0
  8436 ;;		Unchanged: 0/0
  8437 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8438 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8439 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8440 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8441 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8442 ;;Total ram usage:        1 bytes
  8443 ;; Hardware stack levels used:    1
  8444 ;; Hardware stack levels required when called:    2
  8445 ;; This function calls:
  8446 ;;		Nothing
  8447 ;; This function is called by:
  8448 ;;		_I2c_DataReceiveSm
  8449 ;; This function uses a non-reentrant model
  8450 ;;
  8451                           
  8452                           
  8453                           ;psect for function _CheckStopBitStatus
  8454  0870                     _CheckStopBitStatus:	
  8455                           
  8456                           ;i2c_slv_drv.c: 153: return ((SSP1STAT & ((UINT8)(0x10))) >> ((UINT8)(4)));
  8457                           
  8458                           ;incstack = 0
  8459                           ; Regs used in _CheckStopBitStatus: [wreg+status,2+status,0]
  8460  0870  0024               	movlb	4	; select bank4
  8461  0871  0814               	movf	20,w	;volatile
  8462  0872  00F4               	movwf	??_CheckStopBitStatus
  8463  0873  3004               	movlw	4
  8464  0874                     u1905:	
  8465  0874  36F4               	lsrf	??_CheckStopBitStatus,f
  8466  0875  0B89               	decfsz	9,f
  8467  0876  2874               	goto	u1905
  8468  0877  0874               	movf	??_CheckStopBitStatus,w
  8469  0878  3901               	andlw	1
  8470  0879  0008               	return
  8471  087A                     __end_of_CheckStopBitStatus:	
  8472                           
  8473                           	psect	text27
  8474  0866                     __ptext27:	
  8475 ;; *************** function _CheckByteStatus *****************
  8476 ;; Defined at:
  8477 ;;		line 136 in file "../../../Framework/MercuryFwk/Source/c/01_Hal/02_Drv/i2c_slv_drv.c"
  8478 ;; Parameters:    Size  Location     Type
  8479 ;;		None
  8480 ;; Auto vars:     Size  Location     Type
  8481 ;;		None
  8482 ;; Return value:  Size  Location     Type
  8483 ;;                  1    wreg      unsigned char 
  8484 ;; Registers used:
  8485 ;;		wreg, status,2, status,0
  8486 ;; Tracked objects:
  8487 ;;		On entry : 0/0
  8488 ;;		On exit  : 0/0
  8489 ;;		Unchanged: 0/0
  8490 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8491 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8492 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8493 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8494 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8495 ;;Total ram usage:        1 bytes
  8496 ;; Hardware stack levels used:    1
  8497 ;; Hardware stack levels required when called:    2
  8498 ;; This function calls:
  8499 ;;		Nothing
  8500 ;; This function is called by:
  8501 ;;		_I2c_DataReceiveSm
  8502 ;; This function uses a non-reentrant model
  8503 ;;
  8504                           
  8505                           
  8506                           ;psect for function _CheckByteStatus
  8507  0866                     _CheckByteStatus:	
  8508                           
  8509                           ;i2c_slv_drv.c: 139: return ((SSP1STAT & ((UINT8)(0x20))) >> ((UINT8)(5)));
  8510                           
  8511                           ;incstack = 0
  8512                           ; Regs used in _CheckByteStatus: [wreg+status,2+status,0]
  8513  0866  0024               	movlb	4	; select bank4
  8514  0867  0814               	movf	20,w	;volatile
  8515  0868  00F4               	movwf	??_CheckByteStatus
  8516  0869  3005               	movlw	5
  8517  086A                     u1895:	
  8518  086A  36F4               	lsrf	??_CheckByteStatus,f
  8519  086B  0B89               	decfsz	9,f
  8520  086C  286A               	goto	u1895
  8521  086D  0874               	movf	??_CheckByteStatus,w
  8522  086E  3901               	andlw	1
  8523  086F  0008               	return
  8524  0870                     __end_of_CheckByteStatus:	
  8525                           
  8526                           	psect	text28
  8527  085C                     __ptext28:	
  8528 ;; *************** function _CheckAckStatus *****************
  8529 ;; Defined at:
  8530 ;;		line 108 in file "../../../Framework/MercuryFwk/Source/c/01_Hal/02_Drv/i2c_slv_drv.c"
  8531 ;; Parameters:    Size  Location     Type
  8532 ;;		None
  8533 ;; Auto vars:     Size  Location     Type
  8534 ;;		None
  8535 ;; Return value:  Size  Location     Type
  8536 ;;                  1    wreg      unsigned char 
  8537 ;; Registers used:
  8538 ;;		wreg, status,2, status,0
  8539 ;; Tracked objects:
  8540 ;;		On entry : 0/0
  8541 ;;		On exit  : 0/0
  8542 ;;		Unchanged: 0/0
  8543 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8544 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8545 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8546 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8547 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8548 ;;Total ram usage:        1 bytes
  8549 ;; Hardware stack levels used:    1
  8550 ;; Hardware stack levels required when called:    2
  8551 ;; This function calls:
  8552 ;;		Nothing
  8553 ;; This function is called by:
  8554 ;;		_I2c_DataReceiveSm
  8555 ;; This function uses a non-reentrant model
  8556 ;;
  8557                           
  8558                           
  8559                           ;psect for function _CheckAckStatus
  8560  085C                     _CheckAckStatus:	
  8561                           
  8562                           ;i2c_slv_drv.c: 111: return ((SSP1CON2 & ((UINT8)(0x40))) >> ((UINT8)(6)));
  8563                           
  8564                           ;incstack = 0
  8565                           ; Regs used in _CheckAckStatus: [wreg+status,2+status,0]
  8566  085C  0024               	movlb	4	; select bank4
  8567  085D  0816               	movf	22,w	;volatile
  8568  085E  00F4               	movwf	??_CheckAckStatus
  8569  085F  3006               	movlw	6
  8570  0860                     u1885:	
  8571  0860  36F4               	lsrf	??_CheckAckStatus,f
  8572  0861  0B89               	decfsz	9,f
  8573  0862  2860               	goto	u1885
  8574  0863  0874               	movf	??_CheckAckStatus,w
  8575  0864  3901               	andlw	1
  8576  0865  0008               	return
  8577  0866                     __end_of_CheckAckStatus:	
  8578                           
  8579                           	psect	text29
  8580  0927                     __ptext29:	
  8581 ;; *************** function _I2c_SetConfig *****************
  8582 ;; Defined at:
  8583 ;;		line 82 in file "../../../Framework/MercuryFwk/Source/c/03_Sml/01_Pml/01_SlvI2c/i2c_slv.c"
  8584 ;; Parameters:    Size  Location     Type
  8585 ;;		None
  8586 ;; Auto vars:     Size  Location     Type
  8587 ;;		None
  8588 ;; Return value:  Size  Location     Type
  8589 ;;                  1    wreg      void 
  8590 ;; Registers used:
  8591 ;;		wreg, status,2
  8592 ;; Tracked objects:
  8593 ;;		On entry : 0/0
  8594 ;;		On exit  : 0/0
  8595 ;;		Unchanged: 0/0
  8596 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8597 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8598 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8599 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8600 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8601 ;;Total ram usage:        1 bytes
  8602 ;; Hardware stack levels used:    1
  8603 ;; Hardware stack levels required when called:    2
  8604 ;; This function calls:
  8605 ;;		Nothing
  8606 ;; This function is called by:
  8607 ;;		_I2cSlv_MainTask
  8608 ;; This function uses a non-reentrant model
  8609 ;;
  8610                           
  8611                           
  8612                           ;psect for function _I2c_SetConfig
  8613  0927                     _I2c_SetConfig:	
  8614                           
  8615                           ;i2c_slv.c: 84: I2cConfig.I2cModuleMode = ((UINT8)(0b0110));
  8616                           
  8617                           ;incstack = 0
  8618                           ; Regs used in _I2c_SetConfig: [wreg+status,2]
  8619  0927  3006               	movlw	6
  8620  0928  00F4               	movwf	??_I2c_SetConfig
  8621  0929  0874               	movf	??_I2c_SetConfig,w
  8622  092A  0021               	movlb	1	; select bank1
  8623  092B  00C6               	movwf	_I2cConfig^(0+128)
  8624                           
  8625                           ;i2c_slv.c: 85: I2cConfig.I2cReceiverEnable = ((UINT8)(0));
  8626  092C  01C7               	clrf	(_I2cConfig^(0+128)+1)
  8627                           
  8628                           ;i2c_slv.c: 86: I2cConfig.EnableI2cModule = ((UINT8)(1));
  8629  092D  01C8               	clrf	(_I2cConfig^(0+128)+2)
  8630  092E  0AC8               	incf	(_I2cConfig^(0+128)+2),f
  8631                           
  8632                           ;i2c_slv.c: 87: I2cConfig.ClockStretchEnable = ((UINT8)(0));
  8633  092F  01C9               	clrf	(_I2cConfig^(0+128)+3)
  8634                           
  8635                           ;i2c_slv.c: 88: I2cConfig.StopCondIntEnable = ((UINT8)(1));
  8636  0930  01CA               	clrf	(_I2cConfig^(0+128)+4)
  8637  0931  0ACA               	incf	(_I2cConfig^(0+128)+4),f
  8638                           
  8639                           ;i2c_slv.c: 89: I2cConfig.StartCondIntEnable = ((UINT8)(1));
  8640  0932  01CB               	clrf	(_I2cConfig^(0+128)+5)
  8641  0933  0ACB               	incf	(_I2cConfig^(0+128)+5),f
  8642                           
  8643                           ;i2c_slv.c: 90: I2cConfig.BufferOverwriteEnable = ((UINT8)(0));
  8644  0934  01CC               	clrf	(_I2cConfig^(0+128)+6)
  8645                           
  8646                           ;i2c_slv.c: 91: I2cConfig.BusCollisionDetectEnable = ((UINT8)(0));
  8647  0935  01CD               	clrf	(_I2cConfig^(0+128)+7)
  8648                           
  8649                           ;i2c_slv.c: 92: I2cConfig.AddrHoldEnable = ((UINT8)(0));
  8650  0936  01CE               	clrf	(_I2cConfig^(0+128)+8)
  8651                           
  8652                           ;i2c_slv.c: 93: I2cConfig.DataHoldEnable = ((UINT8)(0));
  8653  0937  01CF               	clrf	(_I2cConfig^(0+128)+9)
  8654                           
  8655                           ;i2c_slv.c: 94: I2cConfig.GeneralCallEnable = ((UINT8)(1));
  8656  0938  01D0               	clrf	(_I2cConfig^(0+128)+10)
  8657  0939  0AD0               	incf	(_I2cConfig^(0+128)+10),f
  8658  093A  0008               	return
  8659  093B                     __end_of_I2c_SetConfig:	
  8660                           
  8661                           	psect	text30
  8662  03E4                     __ptext30:	
  8663 ;; *************** function _I2c_InitI2cModule *****************
  8664 ;; Defined at:
  8665 ;;		line 206 in file "../../../Framework/MercuryFwk/Source/c/01_Hal/02_Drv/i2c_slv_drv.c"
  8666 ;; Parameters:    Size  Location     Type
  8667 ;;  I2cConfig       1    wreg     PTR struct _I2cConfig
  8668 ;;		 -> I2cConfig(11), 
  8669 ;; Auto vars:     Size  Location     Type
  8670 ;;  I2cConfig       1    2[BANK0 ] PTR struct _I2cConfig
  8671 ;;		 -> I2cConfig(11), 
  8672 ;; Return value:  Size  Location     Type
  8673 ;;                  1    wreg      void 
  8674 ;; Registers used:
  8675 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8676 ;; Tracked objects:
  8677 ;;		On entry : 0/0
  8678 ;;		On exit  : 0/0
  8679 ;;		Unchanged: 0/0
  8680 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8681 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8682 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8683 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8684 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8685 ;;Total ram usage:        3 bytes
  8686 ;; Hardware stack levels used:    1
  8687 ;; Hardware stack levels required when called:    3
  8688 ;; This function calls:
  8689 ;;		_ClearRxBuffer
  8690 ;;		_ClearTxBuffer
  8691 ;; This function is called by:
  8692 ;;		_I2cSlv_MainTask
  8693 ;; This function uses a non-reentrant model
  8694 ;;
  8695                           
  8696                           
  8697                           ;psect for function _I2c_InitI2cModule
  8698  03E4                     _I2c_InitI2cModule:	
  8699                           
  8700                           ;incstack = 0
  8701                           ; Regs used in _I2c_InitI2cModule: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  8702                           ;I2c_InitI2cModule@I2cConfig stored from wreg
  8703  03E4  0020               	movlb	0	; select bank0
  8704  03E5  00A2               	movwf	I2c_InitI2cModule@I2cConfig
  8705                           
  8706                           ;i2c_slv_drv.c: 209: TRISBbits.TRISB6 = ((UINT8)(1));
  8707  03E6  0021               	movlb	1	; select bank1
  8708  03E7  170D               	bsf	13,6	;volatile
  8709                           
  8710                           ;i2c_slv_drv.c: 210: TRISBbits.TRISB4 = ((UINT8)(1));
  8711  03E8  160D               	bsf	13,4	;volatile
  8712                           
  8713                           ;i2c_slv_drv.c: 214: SSP1CON1 |= (I2cConfig->I2cModuleMode) << ((UINT8)(0));
  8714  03E9  0020               	movlb	0	; select bank0
  8715  03EA  0822               	movf	I2c_InitI2cModule@I2cConfig,w
  8716  03EB  0086               	movwf	6
  8717  03EC  0187               	clrf	7
  8718  03ED  0801               	movf	1,w
  8719  03EE  00A0               	movwf	??_I2c_InitI2cModule
  8720  03EF  0820               	movf	??_I2c_InitI2cModule,w
  8721  03F0  0024               	movlb	4	; select bank4
  8722  03F1  0495               	iorwf	21,f	;volatile
  8723                           
  8724                           ;i2c_slv_drv.c: 217: SSP1CON2 |= (I2cConfig->I2cReceiverEnable) << ((UINT8)(3));
  8725  03F2  0020               	movlb	0	; select bank0
  8726  03F3  0A22               	incf	I2c_InitI2cModule@I2cConfig,w
  8727  03F4  0086               	movwf	6
  8728  03F5  0187               	clrf	7
  8729  03F6  0801               	movf	1,w
  8730  03F7  00A0               	movwf	??_I2c_InitI2cModule
  8731  03F8  3002               	movlw	2
  8732  03F9                     u3035:	
  8733  03F9  35A0               	lslf	??_I2c_InitI2cModule,f
  8734  03FA  3EFF               	addlw	-1
  8735  03FB  1D03               	skipz
  8736  03FC  2BF9               	goto	u3035
  8737  03FD  3520               	lslf	??_I2c_InitI2cModule,w
  8738  03FE  00A1               	movwf	??_I2c_InitI2cModule+1
  8739  03FF  0821               	movf	??_I2c_InitI2cModule+1,w
  8740  0400  0024               	movlb	4	; select bank4
  8741  0401  0496               	iorwf	22,f	;volatile
  8742                           
  8743                           ;i2c_slv_drv.c: 218: SSP1CON2 |= (I2cConfig->ClockStretchEnable) << ((UINT8)(0));
  8744  0402  0020               	movlb	0	; select bank0
  8745  0403  0822               	movf	I2c_InitI2cModule@I2cConfig,w
  8746  0404  3E03               	addlw	3
  8747  0405  0086               	movwf	6
  8748  0406  0187               	clrf	7
  8749  0407  0801               	movf	1,w
  8750  0408  00A0               	movwf	??_I2c_InitI2cModule
  8751  0409  0820               	movf	??_I2c_InitI2cModule,w
  8752  040A  0024               	movlb	4	; select bank4
  8753  040B  0496               	iorwf	22,f	;volatile
  8754                           
  8755                           ;i2c_slv_drv.c: 219: SSP1CON2 |= (I2cConfig->GeneralCallEnable) << ((UINT8)(7));
  8756  040C  0020               	movlb	0	; select bank0
  8757  040D  0822               	movf	I2c_InitI2cModule@I2cConfig,w
  8758  040E  3E0A               	addlw	10
  8759  040F  0086               	movwf	6
  8760  0410  0187               	clrf	7
  8761  0411  0801               	movf	1,w
  8762  0412  00A0               	movwf	??_I2c_InitI2cModule
  8763  0413  3006               	movlw	6
  8764  0414                     u3045:	
  8765  0414  35A0               	lslf	??_I2c_InitI2cModule,f
  8766  0415  3EFF               	addlw	-1
  8767  0416  1D03               	skipz
  8768  0417  2C14               	goto	u3045
  8769  0418  3520               	lslf	??_I2c_InitI2cModule,w
  8770  0419  00A1               	movwf	??_I2c_InitI2cModule+1
  8771  041A  0821               	movf	??_I2c_InitI2cModule+1,w
  8772  041B  0024               	movlb	4	; select bank4
  8773  041C  0496               	iorwf	22,f	;volatile
  8774                           
  8775                           ;i2c_slv_drv.c: 222: SSP1CON3 |= (I2cConfig->StopCondIntEnable) << ((UINT8)(6));
  8776  041D  0020               	movlb	0	; select bank0
  8777  041E  0822               	movf	I2c_InitI2cModule@I2cConfig,w
  8778  041F  3E04               	addlw	4
  8779  0420  0086               	movwf	6
  8780  0421  0187               	clrf	7
  8781  0422  0801               	movf	1,w
  8782  0423  00A0               	movwf	??_I2c_InitI2cModule
  8783  0424  3005               	movlw	5
  8784  0425                     u3055:	
  8785  0425  35A0               	lslf	??_I2c_InitI2cModule,f
  8786  0426  3EFF               	addlw	-1
  8787  0427  1D03               	skipz
  8788  0428  2C25               	goto	u3055
  8789  0429  3520               	lslf	??_I2c_InitI2cModule,w
  8790  042A  00A1               	movwf	??_I2c_InitI2cModule+1
  8791  042B  0821               	movf	??_I2c_InitI2cModule+1,w
  8792  042C  0024               	movlb	4	; select bank4
  8793  042D  0497               	iorwf	23,f	;volatile
  8794                           
  8795                           ;i2c_slv_drv.c: 223: SSP1CON3 |= (I2cConfig->StartCondIntEnable) << ((UINT8)(5));
  8796  042E  0020               	movlb	0	; select bank0
  8797  042F  0822               	movf	I2c_InitI2cModule@I2cConfig,w
  8798  0430  3E05               	addlw	5
  8799  0431  0086               	movwf	6
  8800  0432  0187               	clrf	7
  8801  0433  0801               	movf	1,w
  8802  0434  00A0               	movwf	??_I2c_InitI2cModule
  8803  0435  3004               	movlw	4
  8804  0436                     u3065:	
  8805  0436  35A0               	lslf	??_I2c_InitI2cModule,f
  8806  0437  3EFF               	addlw	-1
  8807  0438  1D03               	skipz
  8808  0439  2C36               	goto	u3065
  8809  043A  3520               	lslf	??_I2c_InitI2cModule,w
  8810  043B  00A1               	movwf	??_I2c_InitI2cModule+1
  8811  043C  0821               	movf	??_I2c_InitI2cModule+1,w
  8812  043D  0024               	movlb	4	; select bank4
  8813  043E  0497               	iorwf	23,f	;volatile
  8814                           
  8815                           ;i2c_slv_drv.c: 224: SSP1CON3 |= (I2cConfig->BufferOverwriteEnable) << ((UINT8)(4));
  8816  043F  0020               	movlb	0	; select bank0
  8817  0440  0822               	movf	I2c_InitI2cModule@I2cConfig,w
  8818  0441  3E06               	addlw	6
  8819  0442  0086               	movwf	6
  8820  0443  0187               	clrf	7
  8821  0444  0801               	movf	1,w
  8822  0445  00A0               	movwf	??_I2c_InitI2cModule
  8823  0446  3003               	movlw	3
  8824  0447                     u3075:	
  8825  0447  35A0               	lslf	??_I2c_InitI2cModule,f
  8826  0448  3EFF               	addlw	-1
  8827  0449  1D03               	skipz
  8828  044A  2C47               	goto	u3075
  8829  044B  3520               	lslf	??_I2c_InitI2cModule,w
  8830  044C  00A1               	movwf	??_I2c_InitI2cModule+1
  8831  044D  0821               	movf	??_I2c_InitI2cModule+1,w
  8832  044E  0024               	movlb	4	; select bank4
  8833  044F  0497               	iorwf	23,f	;volatile
  8834                           
  8835                           ;i2c_slv_drv.c: 225: SSP1CON3 |= (I2cConfig->BusCollisionDetectEnable) << ((UINT8)(2));
  8836  0450  0020               	movlb	0	; select bank0
  8837  0451  0822               	movf	I2c_InitI2cModule@I2cConfig,w
  8838  0452  3E07               	addlw	7
  8839  0453  0086               	movwf	6
  8840  0454  0187               	clrf	7
  8841  0455  0801               	movf	1,w
  8842  0456  00A0               	movwf	??_I2c_InitI2cModule
  8843  0457  3001               	movlw	1
  8844  0458                     u3085:	
  8845  0458  35A0               	lslf	??_I2c_InitI2cModule,f
  8846  0459  3EFF               	addlw	-1
  8847  045A  1D03               	skipz
  8848  045B  2C58               	goto	u3085
  8849  045C  3520               	lslf	??_I2c_InitI2cModule,w
  8850  045D  00A1               	movwf	??_I2c_InitI2cModule+1
  8851  045E  0821               	movf	??_I2c_InitI2cModule+1,w
  8852  045F  0024               	movlb	4	; select bank4
  8853  0460  0497               	iorwf	23,f	;volatile
  8854                           
  8855                           ;i2c_slv_drv.c: 226: SSP1CON3 |= (I2cConfig->AddrHoldEnable) << ((UINT8)(1));
  8856  0461  0020               	movlb	0	; select bank0
  8857  0462  0822               	movf	I2c_InitI2cModule@I2cConfig,w
  8858  0463  3E08               	addlw	8
  8859  0464  0086               	movwf	6
  8860  0465  0187               	clrf	7
  8861  0466  3501               	lslf	1,w
  8862  0467  00A0               	movwf	??_I2c_InitI2cModule
  8863  0468  0820               	movf	??_I2c_InitI2cModule,w
  8864  0469  0024               	movlb	4	; select bank4
  8865  046A  0497               	iorwf	23,f	;volatile
  8866                           
  8867                           ;i2c_slv_drv.c: 227: SSP1CON3 |= (I2cConfig->DataHoldEnable) << ((UINT8)(0));
  8868  046B  0020               	movlb	0	; select bank0
  8869  046C  0822               	movf	I2c_InitI2cModule@I2cConfig,w
  8870  046D  3E09               	addlw	9
  8871  046E  0086               	movwf	6
  8872  046F  0187               	clrf	7
  8873  0470  0801               	movf	1,w
  8874  0471  00A0               	movwf	??_I2c_InitI2cModule
  8875  0472  0820               	movf	??_I2c_InitI2cModule,w
  8876  0473  0024               	movlb	4	; select bank4
  8877  0474  0497               	iorwf	23,f	;volatile
  8878                           
  8879                           ;i2c_slv_drv.c: 230: SSP1CON1 |= (I2cConfig->EnableI2cModule) << ((UINT8)(5));
  8880  0475  0020               	movlb	0	; select bank0
  8881  0476  0822               	movf	I2c_InitI2cModule@I2cConfig,w
  8882  0477  3E02               	addlw	2
  8883  0478  0086               	movwf	6
  8884  0479  0187               	clrf	7
  8885  047A  0801               	movf	1,w
  8886  047B  00A0               	movwf	??_I2c_InitI2cModule
  8887  047C  3004               	movlw	4
  8888  047D                     u3095:	
  8889  047D  35A0               	lslf	??_I2c_InitI2cModule,f
  8890  047E  3EFF               	addlw	-1
  8891  047F  1D03               	skipz
  8892  0480  2C7D               	goto	u3095
  8893  0481  3520               	lslf	??_I2c_InitI2cModule,w
  8894  0482  00A1               	movwf	??_I2c_InitI2cModule+1
  8895  0483  0821               	movf	??_I2c_InitI2cModule+1,w
  8896  0484  0024               	movlb	4	; select bank4
  8897  0485  0495               	iorwf	21,f	;volatile
  8898                           
  8899                           ;i2c_slv_drv.c: 233: PIR1bits.SSP1IF = ((UINT8)(0));
  8900  0486  0020               	movlb	0	; select bank0
  8901  0487  1191               	bcf	17,3	;volatile
  8902                           
  8903                           ;i2c_slv_drv.c: 234: PIE1bits.SSP1IE = ((UINT8)(1));
  8904  0488  0021               	movlb	1	; select bank1
  8905  0489  1591               	bsf	17,3	;volatile
  8906                           
  8907                           ;i2c_slv_drv.c: 237: ClearRxBuffer();
  8908  048A  3188  20E4  3183   	fcall	_ClearRxBuffer
  8909                           
  8910                           ;i2c_slv_drv.c: 238: ClearTxBuffer();
  8911  048D  3188  20F4         	fcall	_ClearTxBuffer
  8912  048F  0008               	return
  8913  0490                     __end_of_I2c_InitI2cModule:	
  8914                           
  8915                           	psect	text31
  8916  08F4                     __ptext31:	
  8917 ;; *************** function _ClearTxBuffer *****************
  8918 ;; Defined at:
  8919 ;;		line 183 in file "../../../Framework/MercuryFwk/Source/c/01_Hal/02_Drv/i2c_slv_drv.c"
  8920 ;; Parameters:    Size  Location     Type
  8921 ;;		None
  8922 ;; Auto vars:     Size  Location     Type
  8923 ;;  Index           1    5[COMMON] unsigned char 
  8924 ;; Return value:  Size  Location     Type
  8925 ;;                  1    wreg      void 
  8926 ;; Registers used:
  8927 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  8928 ;; Tracked objects:
  8929 ;;		On entry : 0/0
  8930 ;;		On exit  : 0/0
  8931 ;;		Unchanged: 0/0
  8932 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8933 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8934 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8935 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8936 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8937 ;;Total ram usage:        2 bytes
  8938 ;; Hardware stack levels used:    1
  8939 ;; Hardware stack levels required when called:    2
  8940 ;; This function calls:
  8941 ;;		Nothing
  8942 ;; This function is called by:
  8943 ;;		_I2c_InitI2cModule
  8944 ;;		_I2c_DataReceiveSm
  8945 ;; This function uses a non-reentrant model
  8946 ;;
  8947                           
  8948                           
  8949                           ;psect for function _ClearTxBuffer
  8950  08F4                     _ClearTxBuffer:	
  8951                           
  8952                           ;i2c_slv_drv.c: 185: UINT8 Index;
  8953                           ;i2c_slv_drv.c: 188: for (Index = 0; Index < ((UINT8)(80)); Index++)
  8954                           
  8955                           ;incstack = 0
  8956                           ; Regs used in _ClearTxBuffer: [wreg+fsr1l+fsr1h+status,2+status,0]
  8957  08F4  01F5               	clrf	ClearTxBuffer@Index
  8958  08F5                     L9:	
  8959  08F5  3050               	movlw	80
  8960  08F6  0275               	subwf	ClearTxBuffer@Index,w
  8961  08F7  1803               	btfsc	3,0
  8962  08F8  0008               	return
  8963                           
  8964                           ;i2c_slv_drv.c: 189: {
  8965                           ;i2c_slv_drv.c: 190: I2cTxBuffer[Index] = 0x00;
  8966  08F9  0875               	movf	ClearTxBuffer@Index,w
  8967  08FA  3EA0               	addlw	(low (_I2cTxBuffer| (0+512)))& (0+255)
  8968  08FB  0086               	movwf	6
  8969  08FC  3002               	movlw	2	; select bank5/6
  8970  08FD  0087               	movwf	7
  8971  08FE  0181               	clrf	1
  8972  08FF  3001               	movlw	1
  8973  0900  00F4               	movwf	??_ClearTxBuffer
  8974  0901  0874               	movf	??_ClearTxBuffer,w
  8975  0902  07F5               	addwf	ClearTxBuffer@Index,f
  8976  0903  28F5               	goto	L9
  8977  0904                     __end_of_ClearTxBuffer:	
  8978                           
  8979                           	psect	text32
  8980  08E4                     __ptext32:	
  8981 ;; *************** function _ClearRxBuffer *****************
  8982 ;; Defined at:
  8983 ;;		line 164 in file "../../../Framework/MercuryFwk/Source/c/01_Hal/02_Drv/i2c_slv_drv.c"
  8984 ;; Parameters:    Size  Location     Type
  8985 ;;		None
  8986 ;; Auto vars:     Size  Location     Type
  8987 ;;  Index           1    5[COMMON] unsigned char 
  8988 ;; Return value:  Size  Location     Type
  8989 ;;                  1    wreg      void 
  8990 ;; Registers used:
  8991 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  8992 ;; Tracked objects:
  8993 ;;		On entry : 0/0
  8994 ;;		On exit  : 0/0
  8995 ;;		Unchanged: 0/0
  8996 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8997 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8998 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8999 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9000 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9001 ;;Total ram usage:        2 bytes
  9002 ;; Hardware stack levels used:    1
  9003 ;; Hardware stack levels required when called:    2
  9004 ;; This function calls:
  9005 ;;		Nothing
  9006 ;; This function is called by:
  9007 ;;		_I2c_InitI2cModule
  9008 ;;		_I2c_DataReceiveSm
  9009 ;; This function uses a non-reentrant model
  9010 ;;
  9011                           
  9012                           
  9013                           ;psect for function _ClearRxBuffer
  9014  08E4                     _ClearRxBuffer:	
  9015                           
  9016                           ;i2c_slv_drv.c: 166: UINT8 Index;
  9017                           ;i2c_slv_drv.c: 169: for (Index = 0; Index < ((UINT8)(80)); Index++)
  9018                           
  9019                           ;incstack = 0
  9020                           ; Regs used in _ClearRxBuffer: [wreg+fsr1l+fsr1h+status,2+status,0]
  9021  08E4  01F5               	clrf	ClearRxBuffer@Index
  9022  08E5                     L10:	
  9023  08E5  3050               	movlw	80
  9024  08E6  0275               	subwf	ClearRxBuffer@Index,w
  9025  08E7  1803               	btfsc	3,0
  9026  08E8  0008               	return
  9027                           
  9028                           ;i2c_slv_drv.c: 170: {
  9029                           ;i2c_slv_drv.c: 171: I2cRxBuffer[Index] = 0x00;
  9030  08E9  0875               	movf	ClearRxBuffer@Index,w
  9031  08EA  3E20               	addlw	(low (_I2cRxBuffer| (0+768)))& (0+255)
  9032  08EB  0086               	movwf	6
  9033  08EC  3003               	movlw	3	; select bank6/7
  9034  08ED  0087               	movwf	7
  9035  08EE  0181               	clrf	1
  9036  08EF  3001               	movlw	1
  9037  08F0  00F4               	movwf	??_ClearRxBuffer
  9038  08F1  0874               	movf	??_ClearRxBuffer,w
  9039  08F2  07F5               	addwf	ClearRxBuffer@Index,f
  9040  08F3  28E5               	goto	L10
  9041  08F4                     __end_of_ClearRxBuffer:	
  9042                           
  9043                           	psect	text33
  9044  05C6                     __ptext33:	
  9045 ;; *************** function _I2cSlv_I2cDrvHandle *****************
  9046 ;; Defined at:
  9047 ;;		line 141 in file "../../../Framework/MercuryFwk/Source/c/03_Sml/01_Pml/01_SlvI2c/i2c_slv.c"
  9048 ;; Parameters:    Size  Location     Type
  9049 ;;		None
  9050 ;; Auto vars:     Size  Location     Type
  9051 ;;  Index           1    9[BANK0 ] unsigned char 
  9052 ;; Return value:  Size  Location     Type
  9053 ;;                  1    wreg      void 
  9054 ;; Registers used:
  9055 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9056 ;; Tracked objects:
  9057 ;;		On entry : 0/0
  9058 ;;		On exit  : 0/0
  9059 ;;		Unchanged: 0/0
  9060 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9061 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9062 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9063 ;;      Temps:          0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9064 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9065 ;;Total ram usage:        6 bytes
  9066 ;; Hardware stack levels used:    1
  9067 ;; Hardware stack levels required when called:    3
  9068 ;; This function calls:
  9069 ;;		_GenerateEvt
  9070 ;;		_I2c_SetI2cAddress
  9071 ;;		_I2c_SetI2cAddressMask
  9072 ;;		_I2c_UpdateTxBuffer
  9073 ;;		_Led_SetLedStatus
  9074 ;;		_ReceiveEvt
  9075 ;; This function is called by:
  9076 ;;		_I2cSlv_MainTask
  9077 ;; This function uses a non-reentrant model
  9078 ;;
  9079                           
  9080                           
  9081                           ;psect for function _I2cSlv_I2cDrvHandle
  9082  05C6                     _I2cSlv_I2cDrvHandle:	
  9083                           
  9084                           ;i2c_slv.c: 143: static I2cReceiveMsgStateType I2cReceiveMsgState = I2cSetSlaveAddres;
  9085                           ;i2c_slv.c: 144: UINT8 Index = 0;
  9086                           
  9087                           ;incstack = 0
  9088                           ; Regs used in _I2cSlv_I2cDrvHandle: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  9089  05C6  0020               	movlb	0	; select bank0
  9090  05C7  01A9               	clrf	I2cSlv_I2cDrvHandle@Index
  9091                           
  9092                           ;i2c_slv.c: 146: switch (I2cReceiveMsgState)
  9093  05C8  2E49               	goto	l4431
  9094  05C9                     l4389:	
  9095                           ;i2c_slv.c: 147: {
  9096                           ;i2c_slv.c: 148: case I2cSetSlaveAddres:
  9097                           
  9098                           
  9099                           ;i2c_slv.c: 150: if (ReceiveEvt(&I2cSetAddress))
  9100  05C9  30E4               	movlw	(low (_I2cSetAddress| 0))& (0+255)
  9101  05CA  318A  2259  3185   	fcall	_ReceiveEvt
  9102  05CD  3A00               	xorlw	0
  9103  05CE  1903               	skipnz
  9104  05CF  0008               	return
  9105                           
  9106                           ;i2c_slv.c: 151: {
  9107                           ;i2c_slv.c: 153: I2c_SetI2cAddress(I2cSlaveAddress);
  9108  05D0  0876               	movf	_I2cSlaveAddress,w
  9109  05D1  3188  201B  3185   	fcall	_I2c_SetI2cAddress
  9110                           
  9111                           ;i2c_slv.c: 154: I2c_SetI2cAddressMask(((UINT8)(0x7F)));
  9112  05D4  307F               	movlw	127
  9113  05D5  3188  2020         	fcall	_I2c_SetI2cAddressMask
  9114                           
  9115                           ;i2c_slv.c: 156: I2cReceiveMsgState = I2cReceiveData;
  9116  05D7  0020               	movlb	0	; select bank0
  9117  05D8  01E3               	clrf	I2cSlv_I2cDrvHandle@I2cReceiveMsgState
  9118  05D9  0AE3               	incf	I2cSlv_I2cDrvHandle@I2cReceiveMsgState,f
  9119                           
  9120                           ;i2c_slv.c: 157: }
  9121                           ;i2c_slv.c: 158: break;
  9122  05DA  0008               	return
  9123  05DB                     l4395:	
  9124                           ;i2c_slv.c: 160: case I2cReceiveData:
  9125                           
  9126                           
  9127                           ;i2c_slv.c: 162: if (ReceiveEvt(&I2cNewPacketNotification))
  9128  05DB  30E0               	movlw	(low (_I2cNewPacketNotification| 0))& (0+255)
  9129  05DC  318A  2259  3185   	fcall	_ReceiveEvt
  9130  05DF  3A00               	xorlw	0
  9131  05E0  1903               	skipnz
  9132  05E1  2E2D               	goto	l4421
  9133                           
  9134                           ;i2c_slv.c: 163: {
  9135                           ;i2c_slv.c: 165: if ((I2cPacket.SlaveAddress == I2cSlaveAddress) || (I2cPacket.SlaveAddr
      +                          ess == ((UINT8)(0x00))))
  9136  05E2  309D               	movlw	157
  9137  05E3  0086               	movwf	6
  9138  05E4  3023               	movlw	35
  9139  05E5  0087               	movwf	7
  9140  05E6  0801               	movf	1,w
  9141  05E7  0676               	xorwf	_I2cSlaveAddress,w
  9142  05E8  1903               	skipnz
  9143  05E9  2DF1               	goto	l4401
  9144  05EA  309D               	movlw	157
  9145  05EB  0086               	movwf	6
  9146  05EC  3023               	movlw	35
  9147  05ED  0087               	movwf	7
  9148  05EE  0801               	movf	1,w
  9149  05EF  1D03               	btfss	3,2
  9150  05F0  0008               	return
  9151  05F1                     l4401:	
  9152                           
  9153                           ;i2c_slv.c: 166: {
  9154                           ;i2c_slv.c: 167: if (I2cPacket.ReadWrite == ((UINT8)(0)))
  9155  05F1  309D               	movlw	157
  9156  05F2  0086               	movwf	6
  9157  05F3  3023               	movlw	35
  9158  05F4  0087               	movwf	7
  9159  05F5  3141               	addfsr 1,1
  9160  05F6  0801               	movf	1,w
  9161  05F7  1D03               	btfss	3,2
  9162  05F8  0008               	return
  9163                           
  9164                           ;i2c_slv.c: 168: {
  9165                           ;i2c_slv.c: 170: for (Index = 0; Index < ((UINT8)(80));Index++)
  9166  05F9  0020               	movlb	0	; select bank0
  9167  05FA  01A9               	clrf	I2cSlv_I2cDrvHandle@Index
  9168  05FB  3050               	movlw	80
  9169  05FC  0229               	subwf	I2cSlv_I2cDrvHandle@Index,w
  9170  05FD  1803               	btfsc	3,0
  9171  05FE  2E1D               	goto	l4415
  9172  05FF                     l4409:	
  9173                           
  9174                           ;i2c_slv.c: 171: {
  9175                           ;i2c_slv.c: 172: CmdBuffer[Index] = I2cPacket.Buffer[Index];
  9176  05FF  0829               	movf	I2cSlv_I2cDrvHandle@Index,w
  9177  0600  00A4               	movwf	??_I2cSlv_I2cDrvHandle
  9178  0601  01A5               	clrf	??_I2cSlv_I2cDrvHandle+1
  9179  0602  309F               	movlw	159
  9180  0603  00A6               	movwf	??_I2cSlv_I2cDrvHandle+2
  9181  0604  3023               	movlw	35
  9182  0605  00A7               	movwf	??_I2cSlv_I2cDrvHandle+3
  9183  0606  0824               	movf	??_I2cSlv_I2cDrvHandle,w
  9184  0607  0726               	addwf	??_I2cSlv_I2cDrvHandle+2,w
  9185  0608  0086               	movwf	6
  9186  0609  0825               	movf	??_I2cSlv_I2cDrvHandle+1,w
  9187  060A  3D27               	addwfc	??_I2cSlv_I2cDrvHandle+3,w
  9188  060B  0087               	movwf	7
  9189  060C  0801               	movf	1,w
  9190  060D  00A8               	movwf	??_I2cSlv_I2cDrvHandle+4
  9191  060E  0829               	movf	I2cSlv_I2cDrvHandle@Index,w
  9192  060F  3EA0               	addlw	(low (_CmdBuffer| (0+256)))& (0+255)
  9193  0610  0086               	movwf	6
  9194  0611  3001               	movlw	1	; select bank3/4
  9195  0612  0087               	movwf	7
  9196  0613  0828               	movf	??_I2cSlv_I2cDrvHandle+4,w
  9197  0614  0081               	movwf	1
  9198  0615  3001               	movlw	1
  9199  0616  00A4               	movwf	??_I2cSlv_I2cDrvHandle
  9200  0617  0824               	movf	??_I2cSlv_I2cDrvHandle,w
  9201  0618  07A9               	addwf	I2cSlv_I2cDrvHandle@Index,f
  9202  0619  3050               	movlw	80
  9203  061A  0229               	subwf	I2cSlv_I2cDrvHandle@Index,w
  9204  061B  1C03               	skipc
  9205  061C  2DFF               	goto	l4409
  9206  061D                     l4415:	
  9207                           
  9208                           ;i2c_slv.c: 173: }
  9209                           ;i2c_slv.c: 175: GenerateEvt(&I2cWriteRequest);
  9210  061D  30E6               	movlw	(low (_I2cWriteRequest| 0))& (0+255)
  9211  061E  318A  227A  3185   	fcall	_GenerateEvt
  9212                           
  9213                           ;i2c_slv.c: 177: if (LedBehaviourSts == ((UINT8)(1)))
  9214  0621  0379               	decf	_LedBehaviourSts,w
  9215  0622  1D03               	btfss	3,2
  9216  0623  0008               	return
  9217                           
  9218                           ;i2c_slv.c: 178: {
  9219                           ;i2c_slv.c: 179: Led_SetLedStatus(1u, LED_STS_PULSE);
  9220  0624  3003               	movlw	3
  9221  0625  0020               	movlb	0	; select bank0
  9222  0626  00A4               	movwf	??_I2cSlv_I2cDrvHandle
  9223  0627  0824               	movf	??_I2cSlv_I2cDrvHandle,w
  9224  0628  00F4               	movwf	Led_SetLedStatus@LedSts
  9225  0629  3001               	movlw	1
  9226  062A  3188  20B6         	fcall	_Led_SetLedStatus
  9227                           
  9228                           ;i2c_slv.c: 180: }
  9229                           ;i2c_slv.c: 181: }
  9230                           ;i2c_slv.c: 182: }
  9231                           ;i2c_slv.c: 183: }
  9232  062C  0008               	return
  9233  062D                     l4421:	
  9234                           
  9235                           ;i2c_slv.c: 185: else if (ReceiveEvt(&I2cReplyPacketReady))
  9236  062D  3077               	movlw	(low (_I2cReplyPacketReady| 0))& (0+255)
  9237  062E  318A  2259  3185   	fcall	_ReceiveEvt
  9238  0631  3A00               	xorlw	0
  9239  0632  1903               	skipnz
  9240  0633  0008               	return
  9241                           
  9242                           ;i2c_slv.c: 186: {
  9243                           ;i2c_slv.c: 188: I2c_UpdateTxBuffer(RepBuffer,RepBufferLen);
  9244  0634  0020               	movlb	0	; select bank0
  9245  0635  086A               	movf	_RepBufferLen,w
  9246  0636  00A4               	movwf	??_I2cSlv_I2cDrvHandle
  9247  0637  0824               	movf	??_I2cSlv_I2cDrvHandle,w
  9248  0638  00F4               	movwf	I2c_UpdateTxBuffer@Length
  9249  0639  3020               	movlw	(low (_RepBuffer| (0+512)))& (0+255)
  9250  063A  318A  221B  3185   	fcall	_I2c_UpdateTxBuffer
  9251                           
  9252                           ;i2c_slv.c: 190: if (LedBehaviourSts == ((UINT8)(1)))
  9253  063D  0379               	decf	_LedBehaviourSts,w
  9254  063E  1D03               	btfss	3,2
  9255  063F  0008               	return
  9256                           
  9257                           ;i2c_slv.c: 191: {
  9258                           ;i2c_slv.c: 192: Led_SetLedStatus(1u, LED_STS_PULSE);
  9259  0640  3003               	movlw	3
  9260  0641  0020               	movlb	0	; select bank0
  9261  0642  00A4               	movwf	??_I2cSlv_I2cDrvHandle
  9262  0643  0824               	movf	??_I2cSlv_I2cDrvHandle,w
  9263  0644  00F4               	movwf	Led_SetLedStatus@LedSts
  9264  0645  3001               	movlw	1
  9265  0646  3188  20B6         	fcall	_Led_SetLedStatus
  9266                           
  9267                           ;i2c_slv.c: 199: }
  9268                           
  9269                           ;i2c_slv.c: 198: break;
  9270                           
  9271                           ;i2c_slv.c: 197: default:
  9272                           
  9273                           ;i2c_slv.c: 193: }
  9274                           ;i2c_slv.c: 194: }
  9275                           ;i2c_slv.c: 195: break;
  9276  0648  0008               	return
  9277  0649                     l4431:	
  9278  0649  0020               	movlb	0	; select bank0
  9279  064A  0863               	movf	I2cSlv_I2cDrvHandle@I2cReceiveMsgState,w
  9280                           
  9281                           ; Switch size 1, requested type "space"
  9282                           ; Number of cases is 2, Range of values is 0 to 1
  9283                           ; switch strategies available:
  9284                           ; Name         Instructions Cycles
  9285                           ; simple_byte            7     4 (average)
  9286                           ; direct_byte           10     6 (fixed)
  9287                           ; jumptable            260     6 (fixed)
  9288                           ;	Chosen strategy is simple_byte
  9289  064B  3A00               	xorlw	0	; case 0
  9290  064C  1903               	skipnz
  9291  064D  2DC9               	goto	l4389
  9292  064E  3A01               	xorlw	1	; case 1
  9293  064F  1903               	skipnz
  9294  0650  2DDB               	goto	l4395
  9295  0651  2E52               	goto	l540
  9296  0652                     l540:	
  9297  0652  0008               	return
  9298  0653                     __end_of_I2cSlv_I2cDrvHandle:	
  9299                           
  9300                           	psect	text34
  9301  0A1B                     __ptext34:	
  9302 ;; *************** function _I2c_UpdateTxBuffer *****************
  9303 ;; Defined at:
  9304 ;;		line 278 in file "../../../Framework/MercuryFwk/Source/c/01_Hal/02_Drv/i2c_slv_drv.c"
  9305 ;; Parameters:    Size  Location     Type
  9306 ;;  DataBuffer      1    wreg     PTR unsigned char 
  9307 ;;		 -> RepBuffer(80), 
  9308 ;;  Length          1    4[COMMON] unsigned char 
  9309 ;; Auto vars:     Size  Location     Type
  9310 ;;  DataBuffer      1    2[BANK0 ] PTR unsigned char 
  9311 ;;		 -> RepBuffer(80), 
  9312 ;;  Index           1    3[BANK0 ] unsigned char 
  9313 ;; Return value:  Size  Location     Type
  9314 ;;                  1    wreg      void 
  9315 ;; Registers used:
  9316 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  9317 ;; Tracked objects:
  9318 ;;		On entry : 0/0
  9319 ;;		On exit  : 0/0
  9320 ;;		Unchanged: 0/0
  9321 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9322 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9323 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9324 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9325 ;;      Totals:         1       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9326 ;;Total ram usage:        5 bytes
  9327 ;; Hardware stack levels used:    1
  9328 ;; Hardware stack levels required when called:    2
  9329 ;; This function calls:
  9330 ;;		Nothing
  9331 ;; This function is called by:
  9332 ;;		_I2cSlv_I2cDrvHandle
  9333 ;; This function uses a non-reentrant model
  9334 ;;
  9335                           
  9336                           
  9337                           ;psect for function _I2c_UpdateTxBuffer
  9338  0A1B                     _I2c_UpdateTxBuffer:	
  9339                           
  9340                           ;incstack = 0
  9341                           ; Regs used in _I2c_UpdateTxBuffer: [wreg+fsr1l+fsr1h+status,2+status,0]
  9342                           ;I2c_UpdateTxBuffer@DataBuffer stored from wreg
  9343  0A1B  0020               	movlb	0	; select bank0
  9344  0A1C  00A2               	movwf	I2c_UpdateTxBuffer@DataBuffer
  9345                           
  9346                           ;i2c_slv_drv.c: 280: UINT8 Index = 0;
  9347  0A1D  01A3               	clrf	I2c_UpdateTxBuffer@Index
  9348                           
  9349                           ;i2c_slv_drv.c: 283: for (Index = 0; Index < Length; Index++)
  9350  0A1E  01A3               	clrf	I2c_UpdateTxBuffer@Index
  9351  0A1F                     l4195:	
  9352  0A1F  0874               	movf	I2c_UpdateTxBuffer@Length,w
  9353  0A20  0223               	subwf	I2c_UpdateTxBuffer@Index,w
  9354  0A21  1803               	btfsc	3,0
  9355  0A22  0008               	return
  9356                           
  9357                           ;i2c_slv_drv.c: 284: {
  9358                           ;i2c_slv_drv.c: 285: I2cTxBuffer[Index] = *(DataBuffer + Index);
  9359  0A23  0823               	movf	I2c_UpdateTxBuffer@Index,w
  9360  0A24  0722               	addwf	I2c_UpdateTxBuffer@DataBuffer,w
  9361  0A25  00A0               	movwf	??_I2c_UpdateTxBuffer
  9362  0A26  0820               	movf	??_I2c_UpdateTxBuffer,w
  9363  0A27  0086               	movwf	6
  9364  0A28  3002               	movlw	2	; select bank4/5
  9365  0A29  0087               	movwf	7
  9366  0A2A  0801               	movf	1,w
  9367  0A2B  00A1               	movwf	??_I2c_UpdateTxBuffer+1
  9368  0A2C  0823               	movf	I2c_UpdateTxBuffer@Index,w
  9369  0A2D  3EA0               	addlw	(low (_I2cTxBuffer| (0+512)))& (0+255)
  9370  0A2E  0086               	movwf	6
  9371  0A2F  3002               	movlw	2	; select bank5/6
  9372  0A30  0087               	movwf	7
  9373  0A31  0821               	movf	??_I2c_UpdateTxBuffer+1,w
  9374  0A32  0081               	movwf	1
  9375  0A33  3001               	movlw	1
  9376  0A34  00A0               	movwf	??_I2c_UpdateTxBuffer
  9377  0A35  0820               	movf	??_I2c_UpdateTxBuffer,w
  9378  0A36  07A3               	addwf	I2c_UpdateTxBuffer@Index,f
  9379  0A37  2A1F               	goto	l4195
  9380  0A38                     __end_of_I2c_UpdateTxBuffer:	
  9381                           
  9382                           	psect	text35
  9383  0820                     __ptext35:	
  9384 ;; *************** function _I2c_SetI2cAddressMask *****************
  9385 ;; Defined at:
  9386 ;;		line 263 in file "../../../Framework/MercuryFwk/Source/c/01_Hal/02_Drv/i2c_slv_drv.c"
  9387 ;; Parameters:    Size  Location     Type
  9388 ;;  SlaveAddress    1    wreg     unsigned char 
  9389 ;; Auto vars:     Size  Location     Type
  9390 ;;  SlaveAddress    1    4[COMMON] unsigned char 
  9391 ;; Return value:  Size  Location     Type
  9392 ;;                  1    wreg      void 
  9393 ;; Registers used:
  9394 ;;		wreg, status,2, status,0
  9395 ;; Tracked objects:
  9396 ;;		On entry : 0/0
  9397 ;;		On exit  : 0/0
  9398 ;;		Unchanged: 0/0
  9399 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9400 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9401 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9402 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9403 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9404 ;;Total ram usage:        1 bytes
  9405 ;; Hardware stack levels used:    1
  9406 ;; Hardware stack levels required when called:    2
  9407 ;; This function calls:
  9408 ;;		Nothing
  9409 ;; This function is called by:
  9410 ;;		_I2cSlv_I2cDrvHandle
  9411 ;; This function uses a non-reentrant model
  9412 ;;
  9413                           
  9414                           
  9415                           ;psect for function _I2c_SetI2cAddressMask
  9416  0820                     _I2c_SetI2cAddressMask:	
  9417                           
  9418                           ;incstack = 0
  9419                           ; Regs used in _I2c_SetI2cAddressMask: [wreg+status,2+status,0]
  9420                           ;I2c_SetI2cAddressMask@SlaveAddressMask stored from wreg
  9421  0820  00F4               	movwf	I2c_SetI2cAddressMask@SlaveAddressMask
  9422                           
  9423                           ;i2c_slv_drv.c: 266: SSP1MSK = (SlaveAddressMask << ((UINT8)(1)));
  9424  0821  3574               	lslf	I2c_SetI2cAddressMask@SlaveAddressMask,w
  9425  0822  0024               	movlb	4	; select bank4
  9426  0823  0093               	movwf	19	;volatile
  9427  0824  0008               	return
  9428  0825                     __end_of_I2c_SetI2cAddressMask:	
  9429                           
  9430                           	psect	text36
  9431  081B                     __ptext36:	
  9432 ;; *************** function _I2c_SetI2cAddress *****************
  9433 ;; Defined at:
  9434 ;;		line 249 in file "../../../Framework/MercuryFwk/Source/c/01_Hal/02_Drv/i2c_slv_drv.c"
  9435 ;; Parameters:    Size  Location     Type
  9436 ;;  SlaveAddress    1    wreg     unsigned char 
  9437 ;; Auto vars:     Size  Location     Type
  9438 ;;  SlaveAddress    1    4[COMMON] unsigned char 
  9439 ;; Return value:  Size  Location     Type
  9440 ;;                  1    wreg      void 
  9441 ;; Registers used:
  9442 ;;		wreg, status,2, status,0
  9443 ;; Tracked objects:
  9444 ;;		On entry : 0/0
  9445 ;;		On exit  : 0/0
  9446 ;;		Unchanged: 0/0
  9447 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9448 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9449 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9450 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9451 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9452 ;;Total ram usage:        1 bytes
  9453 ;; Hardware stack levels used:    1
  9454 ;; Hardware stack levels required when called:    2
  9455 ;; This function calls:
  9456 ;;		Nothing
  9457 ;; This function is called by:
  9458 ;;		_I2cSlv_I2cDrvHandle
  9459 ;; This function uses a non-reentrant model
  9460 ;;
  9461                           
  9462                           
  9463                           ;psect for function _I2c_SetI2cAddress
  9464  081B                     _I2c_SetI2cAddress:	
  9465                           
  9466                           ;incstack = 0
  9467                           ; Regs used in _I2c_SetI2cAddress: [wreg+status,2+status,0]
  9468                           ;I2c_SetI2cAddress@SlaveAddress stored from wreg
  9469  081B  00F4               	movwf	I2c_SetI2cAddress@SlaveAddress
  9470                           
  9471                           ;i2c_slv_drv.c: 252: SSP1ADD = (SlaveAddress << ((UINT8)(1)));
  9472  081C  3574               	lslf	I2c_SetI2cAddress@SlaveAddress,w
  9473  081D  0024               	movlb	4	; select bank4
  9474  081E  0092               	movwf	18	;volatile
  9475  081F  0008               	return
  9476  0820                     __end_of_I2c_SetI2cAddress:	
  9477                           
  9478                           	psect	text37
  9479  084B                     __ptext37:	
  9480 ;; *************** function _Mcu_SetPullUpsSts *****************
  9481 ;; Defined at:
  9482 ;;		line 141 in file "../../../Framework/MercuryFwk/Source/c/01_Hal/02_Drv/mcu_drv.c"
  9483 ;; Parameters:    Size  Location     Type
  9484 ;;  PuSts           1    wreg     enum E3651
  9485 ;; Auto vars:     Size  Location     Type
  9486 ;;  PuSts           1    4[COMMON] enum E3651
  9487 ;; Return value:  Size  Location     Type
  9488 ;;                  1    wreg      void 
  9489 ;; Registers used:
  9490 ;;		wreg, status,0
  9491 ;; Tracked objects:
  9492 ;;		On entry : 0/0
  9493 ;;		On exit  : 0/0
  9494 ;;		Unchanged: 0/0
  9495 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9496 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9497 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9498 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9499 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9500 ;;Total ram usage:        1 bytes
  9501 ;; Hardware stack levels used:    1
  9502 ;; Hardware stack levels required when called:    2
  9503 ;; This function calls:
  9504 ;;		Nothing
  9505 ;; This function is called by:
  9506 ;;		_App_MainTask
  9507 ;; This function uses a non-reentrant model
  9508 ;;
  9509                           
  9510                           
  9511                           ;psect for function _Mcu_SetPullUpsSts
  9512  084B                     _Mcu_SetPullUpsSts:	
  9513                           
  9514                           ;incstack = 0
  9515                           ; Regs used in _Mcu_SetPullUpsSts: [wreg+status,0]
  9516                           ;Mcu_SetPullUpsSts@PuSts stored from wreg
  9517  084B  00F4               	movwf	Mcu_SetPullUpsSts@PuSts
  9518                           
  9519                           ;mcu_drv.c: 144: OPTION_REGbits.nWPUEN = PuSts;
  9520  084C  0C74               	rrf	Mcu_SetPullUpsSts@PuSts,w
  9521  084D  0021               	movlb	1	; select bank1
  9522  084E  1C03               	skipc
  9523  084F  1395               	bcf	21,7	;volatile
  9524  0850  1803               	skipnc
  9525  0851  1795               	bsf	21,7	;volatile
  9526  0852  0008               	return
  9527  0853                     __end_of_Mcu_SetPullUpsSts:	
  9528                           
  9529                           	psect	text38
  9530  0843                     __ptext38:	
  9531 ;; *************** function _Mcu_SetDieTempSts *****************
  9532 ;; Defined at:
  9533 ;;		line 239 in file "../../../Framework/MercuryFwk/Source/c/01_Hal/02_Drv/mcu_drv.c"
  9534 ;; Parameters:    Size  Location     Type
  9535 ;;  DieTempSts      1    wreg     unsigned char 
  9536 ;; Auto vars:     Size  Location     Type
  9537 ;;  DieTempSts      1    4[COMMON] unsigned char 
  9538 ;; Return value:  Size  Location     Type
  9539 ;;                  1    wreg      void 
  9540 ;; Registers used:
  9541 ;;		wreg, status,0
  9542 ;; Tracked objects:
  9543 ;;		On entry : 0/0
  9544 ;;		On exit  : 0/0
  9545 ;;		Unchanged: 0/0
  9546 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9547 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9548 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9549 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9550 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9551 ;;Total ram usage:        1 bytes
  9552 ;; Hardware stack levels used:    1
  9553 ;; Hardware stack levels required when called:    2
  9554 ;; This function calls:
  9555 ;;		Nothing
  9556 ;; This function is called by:
  9557 ;;		_App_MainTask
  9558 ;; This function uses a non-reentrant model
  9559 ;;
  9560                           
  9561                           
  9562                           ;psect for function _Mcu_SetDieTempSts
  9563  0843                     _Mcu_SetDieTempSts:	
  9564                           
  9565                           ;incstack = 0
  9566                           ; Regs used in _Mcu_SetDieTempSts: [wreg+status,0]
  9567                           ;Mcu_SetDieTempSts@DieTempSts stored from wreg
  9568  0843  00F4               	movwf	Mcu_SetDieTempSts@DieTempSts
  9569                           
  9570                           ;mcu_drv.c: 242: FVRCONbits.TSEN = DieTempSts;
  9571  0844  0C74               	rrf	Mcu_SetDieTempSts@DieTempSts,w
  9572  0845  0022               	movlb	2	; select bank2
  9573  0846  1C03               	skipc
  9574  0847  1297               	bcf	23,5	;volatile
  9575  0848  1803               	skipnc
  9576  0849  1697               	bsf	23,5	;volatile
  9577  084A  0008               	return
  9578  084B                     __end_of_Mcu_SetDieTempSts:	
  9579                           
  9580                           	psect	text39
  9581  083B                     __ptext39:	
  9582 ;; *************** function _Mcu_SetDieTempMode *****************
  9583 ;; Defined at:
  9584 ;;		line 253 in file "../../../Framework/MercuryFwk/Source/c/01_Hal/02_Drv/mcu_drv.c"
  9585 ;; Parameters:    Size  Location     Type
  9586 ;;  DieTempMode     1    wreg     unsigned char 
  9587 ;; Auto vars:     Size  Location     Type
  9588 ;;  DieTempMode     1    4[COMMON] unsigned char 
  9589 ;; Return value:  Size  Location     Type
  9590 ;;                  1    wreg      void 
  9591 ;; Registers used:
  9592 ;;		wreg, status,0
  9593 ;; Tracked objects:
  9594 ;;		On entry : 0/0
  9595 ;;		On exit  : 0/0
  9596 ;;		Unchanged: 0/0
  9597 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9598 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9599 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9600 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9601 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9602 ;;Total ram usage:        1 bytes
  9603 ;; Hardware stack levels used:    1
  9604 ;; Hardware stack levels required when called:    2
  9605 ;; This function calls:
  9606 ;;		Nothing
  9607 ;; This function is called by:
  9608 ;;		_App_MainTask
  9609 ;; This function uses a non-reentrant model
  9610 ;;
  9611                           
  9612                           
  9613                           ;psect for function _Mcu_SetDieTempMode
  9614  083B                     _Mcu_SetDieTempMode:	
  9615                           
  9616                           ;incstack = 0
  9617                           ; Regs used in _Mcu_SetDieTempMode: [wreg+status,0]
  9618                           ;Mcu_SetDieTempMode@DieTempMode stored from wreg
  9619  083B  00F4               	movwf	Mcu_SetDieTempMode@DieTempMode
  9620                           
  9621                           ;mcu_drv.c: 256: FVRCONbits.TSRNG = DieTempMode;
  9622  083C  0C74               	rrf	Mcu_SetDieTempMode@DieTempMode,w
  9623  083D  0022               	movlb	2	; select bank2
  9624  083E  1C03               	skipc
  9625  083F  1217               	bcf	23,4	;volatile
  9626  0840  1803               	skipnc
  9627  0841  1617               	bsf	23,4	;volatile
  9628  0842  0008               	return
  9629  0843                     __end_of_Mcu_SetDieTempMode:	
  9630                           
  9631                           	psect	text40
  9632  0490                     __ptext40:	
  9633 ;; *************** function _Mcu_ConfigPullUps *****************
  9634 ;; Defined at:
  9635 ;;		line 155 in file "../../../Framework/MercuryFwk/Source/c/01_Hal/02_Drv/mcu_drv.c"
  9636 ;; Parameters:    Size  Location     Type
  9637 ;;  WpuCh           1    wreg     PTR struct _WpuChType
  9638 ;;		 -> App_MainTask@WpuCh(18), 
  9639 ;; Auto vars:     Size  Location     Type
  9640 ;;  WpuCh           1    4[COMMON] PTR struct _WpuChType
  9641 ;;		 -> App_MainTask@WpuCh(18), 
  9642 ;; Return value:  Size  Location     Type
  9643 ;;                  1    wreg      void 
  9644 ;; Registers used:
  9645 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  9646 ;; Tracked objects:
  9647 ;;		On entry : 0/0
  9648 ;;		On exit  : 0/0
  9649 ;;		Unchanged: 0/0
  9650 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9651 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9652 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9653 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9654 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9655 ;;Total ram usage:        1 bytes
  9656 ;; Hardware stack levels used:    1
  9657 ;; Hardware stack levels required when called:    2
  9658 ;; This function calls:
  9659 ;;		Nothing
  9660 ;; This function is called by:
  9661 ;;		_App_MainTask
  9662 ;; This function uses a non-reentrant model
  9663 ;;
  9664                           
  9665                           
  9666                           ;psect for function _Mcu_ConfigPullUps
  9667  0490                     _Mcu_ConfigPullUps:	
  9668                           
  9669                           ;incstack = 0
  9670                           ; Regs used in _Mcu_ConfigPullUps: [wreg+fsr1l+fsr1h+status,2+status,0]
  9671                           ;Mcu_ConfigPullUps@WpuCh stored from wreg
  9672  0490  00F4               	movwf	Mcu_ConfigPullUps@WpuCh
  9673                           
  9674                           ;mcu_drv.c: 158: WPUA = 0x00;
  9675  0491  0024               	movlb	4	; select bank4
  9676  0492  018C               	clrf	12	;volatile
  9677                           
  9678                           ;mcu_drv.c: 159: WPUAbits.WPUA0 = WpuCh->WpuA0;
  9679  0493  0874               	movf	Mcu_ConfigPullUps@WpuCh,w
  9680  0494  0086               	movwf	6
  9681  0495  0187               	clrf	7
  9682  0496  0C01               	rrf	1,w
  9683  0497  1C03               	skipc
  9684  0498  100C               	bcf	12,0	;volatile
  9685  0499  1803               	skipnc
  9686  049A  140C               	bsf	12,0	;volatile
  9687                           
  9688                           ;mcu_drv.c: 160: WPUAbits.WPUA1 = WpuCh->WpuA1;
  9689  049B  0A74               	incf	Mcu_ConfigPullUps@WpuCh,w
  9690  049C  0086               	movwf	6
  9691  049D  0187               	clrf	7
  9692  049E  0C01               	rrf	1,w
  9693  049F  1C03               	skipc
  9694  04A0  108C               	bcf	12,1	;volatile
  9695  04A1  1803               	skipnc
  9696  04A2  148C               	bsf	12,1	;volatile
  9697                           
  9698                           ;mcu_drv.c: 161: WPUAbits.WPUA2 = WpuCh->WpuA2;
  9699  04A3  0874               	movf	Mcu_ConfigPullUps@WpuCh,w
  9700  04A4  3E02               	addlw	2
  9701  04A5  0086               	movwf	6
  9702  04A6  0187               	clrf	7
  9703  04A7  0C01               	rrf	1,w
  9704  04A8  1C03               	skipc
  9705  04A9  110C               	bcf	12,2	;volatile
  9706  04AA  1803               	skipnc
  9707  04AB  150C               	bsf	12,2	;volatile
  9708                           
  9709                           ;mcu_drv.c: 162: WPUAbits.WPUA3 = WpuCh->WpuA3;
  9710  04AC  0874               	movf	Mcu_ConfigPullUps@WpuCh,w
  9711  04AD  3E03               	addlw	3
  9712  04AE  0086               	movwf	6
  9713  04AF  0187               	clrf	7
  9714  04B0  0C01               	rrf	1,w
  9715  04B1  1C03               	skipc
  9716  04B2  118C               	bcf	12,3	;volatile
  9717  04B3  1803               	skipnc
  9718  04B4  158C               	bsf	12,3	;volatile
  9719                           
  9720                           ;mcu_drv.c: 163: WPUAbits.WPUA4 = WpuCh->WpuA4;
  9721  04B5  0874               	movf	Mcu_ConfigPullUps@WpuCh,w
  9722  04B6  3E04               	addlw	4
  9723  04B7  0086               	movwf	6
  9724  04B8  0187               	clrf	7
  9725  04B9  0C01               	rrf	1,w
  9726  04BA  1C03               	skipc
  9727  04BB  120C               	bcf	12,4	;volatile
  9728  04BC  1803               	skipnc
  9729  04BD  160C               	bsf	12,4	;volatile
  9730                           
  9731                           ;mcu_drv.c: 164: WPUAbits.WPUA5 = WpuCh->WpuA5;
  9732  04BE  0874               	movf	Mcu_ConfigPullUps@WpuCh,w
  9733  04BF  3E05               	addlw	5
  9734  04C0  0086               	movwf	6
  9735  04C1  0187               	clrf	7
  9736  04C2  0C01               	rrf	1,w
  9737  04C3  1C03               	skipc
  9738  04C4  128C               	bcf	12,5	;volatile
  9739  04C5  1803               	skipnc
  9740  04C6  168C               	bsf	12,5	;volatile
  9741                           
  9742                           ;mcu_drv.c: 168: WPUB = 0x00;
  9743  04C7  018D               	clrf	13	;volatile
  9744                           
  9745                           ;mcu_drv.c: 169: WPUBbits.WPUB4 = WpuCh->WpuB4;
  9746  04C8  0874               	movf	Mcu_ConfigPullUps@WpuCh,w
  9747  04C9  3E06               	addlw	6
  9748  04CA  0086               	movwf	6
  9749  04CB  0187               	clrf	7
  9750  04CC  0C01               	rrf	1,w
  9751  04CD  1C03               	skipc
  9752  04CE  120D               	bcf	13,4	;volatile
  9753  04CF  1803               	skipnc
  9754  04D0  160D               	bsf	13,4	;volatile
  9755                           
  9756                           ;mcu_drv.c: 170: WPUBbits.WPUB5 = WpuCh->WpuB5;
  9757  04D1  0874               	movf	Mcu_ConfigPullUps@WpuCh,w
  9758  04D2  3E07               	addlw	7
  9759  04D3  0086               	movwf	6
  9760  04D4  0187               	clrf	7
  9761  04D5  0C01               	rrf	1,w
  9762  04D6  1C03               	skipc
  9763  04D7  128D               	bcf	13,5	;volatile
  9764  04D8  1803               	skipnc
  9765  04D9  168D               	bsf	13,5	;volatile
  9766                           
  9767                           ;mcu_drv.c: 171: WPUBbits.WPUB6 = WpuCh->WpuB6;
  9768  04DA  0874               	movf	Mcu_ConfigPullUps@WpuCh,w
  9769  04DB  3E08               	addlw	8
  9770  04DC  0086               	movwf	6
  9771  04DD  0187               	clrf	7
  9772  04DE  0C01               	rrf	1,w
  9773  04DF  1C03               	skipc
  9774  04E0  130D               	bcf	13,6	;volatile
  9775  04E1  1803               	skipnc
  9776  04E2  170D               	bsf	13,6	;volatile
  9777                           
  9778                           ;mcu_drv.c: 172: WPUBbits.WPUB7 = WpuCh->WpuB7;
  9779  04E3  0874               	movf	Mcu_ConfigPullUps@WpuCh,w
  9780  04E4  3E09               	addlw	9
  9781  04E5  0086               	movwf	6
  9782  04E6  0187               	clrf	7
  9783  04E7  0C01               	rrf	1,w
  9784  04E8  1C03               	skipc
  9785  04E9  138D               	bcf	13,7	;volatile
  9786  04EA  1803               	skipnc
  9787  04EB  178D               	bsf	13,7	;volatile
  9788                           
  9789                           ;mcu_drv.c: 176: WPUC = 0x00;
  9790  04EC  018E               	clrf	14	;volatile
  9791                           
  9792                           ;mcu_drv.c: 177: WPUCbits.WPUC0 = WpuCh->WpuC0;
  9793  04ED  0874               	movf	Mcu_ConfigPullUps@WpuCh,w
  9794  04EE  3E0A               	addlw	10
  9795  04EF  0086               	movwf	6
  9796  04F0  0187               	clrf	7
  9797  04F1  0C01               	rrf	1,w
  9798  04F2  1C03               	skipc
  9799  04F3  100E               	bcf	14,0	;volatile
  9800  04F4  1803               	skipnc
  9801  04F5  140E               	bsf	14,0	;volatile
  9802                           
  9803                           ;mcu_drv.c: 178: WPUCbits.WPUC1 = WpuCh->WpuC1;
  9804  04F6  0874               	movf	Mcu_ConfigPullUps@WpuCh,w
  9805  04F7  3E0B               	addlw	11
  9806  04F8  0086               	movwf	6
  9807  04F9  0187               	clrf	7
  9808  04FA  0C01               	rrf	1,w
  9809  04FB  1C03               	skipc
  9810  04FC  108E               	bcf	14,1	;volatile
  9811  04FD  1803               	skipnc
  9812  04FE  148E               	bsf	14,1	;volatile
  9813                           
  9814                           ;mcu_drv.c: 179: WPUCbits.WPUC2 = WpuCh->WpuC2;
  9815  04FF  0874               	movf	Mcu_ConfigPullUps@WpuCh,w
  9816  0500  3E0C               	addlw	12
  9817  0501  0086               	movwf	6
  9818  0502  0187               	clrf	7
  9819  0503  0C01               	rrf	1,w
  9820  0504  1C03               	skipc
  9821  0505  110E               	bcf	14,2	;volatile
  9822  0506  1803               	skipnc
  9823  0507  150E               	bsf	14,2	;volatile
  9824                           
  9825                           ;mcu_drv.c: 180: WPUCbits.WPUC3 = WpuCh->WpuC3;
  9826  0508  0874               	movf	Mcu_ConfigPullUps@WpuCh,w
  9827  0509  3E0D               	addlw	13
  9828  050A  0086               	movwf	6
  9829  050B  0187               	clrf	7
  9830  050C  0C01               	rrf	1,w
  9831  050D  1C03               	skipc
  9832  050E  118E               	bcf	14,3	;volatile
  9833  050F  1803               	skipnc
  9834  0510  158E               	bsf	14,3	;volatile
  9835                           
  9836                           ;mcu_drv.c: 181: WPUCbits.WPUC4 = WpuCh->WpuC4;
  9837  0511  0874               	movf	Mcu_ConfigPullUps@WpuCh,w
  9838  0512  3E0E               	addlw	14
  9839  0513  0086               	movwf	6
  9840  0514  0187               	clrf	7
  9841  0515  0C01               	rrf	1,w
  9842  0516  1C03               	skipc
  9843  0517  120E               	bcf	14,4	;volatile
  9844  0518  1803               	skipnc
  9845  0519  160E               	bsf	14,4	;volatile
  9846                           
  9847                           ;mcu_drv.c: 182: WPUCbits.WPUC5 = WpuCh->WpuC5;
  9848  051A  0874               	movf	Mcu_ConfigPullUps@WpuCh,w
  9849  051B  3E0F               	addlw	15
  9850  051C  0086               	movwf	6
  9851  051D  0187               	clrf	7
  9852  051E  0C01               	rrf	1,w
  9853  051F  1C03               	skipc
  9854  0520  128E               	bcf	14,5	;volatile
  9855  0521  1803               	skipnc
  9856  0522  168E               	bsf	14,5	;volatile
  9857                           
  9858                           ;mcu_drv.c: 184: WPUCbits.WPUC6 = WpuCh->WpuC6;
  9859  0523  0874               	movf	Mcu_ConfigPullUps@WpuCh,w
  9860  0524  3E10               	addlw	16
  9861  0525  0086               	movwf	6
  9862  0526  0187               	clrf	7
  9863  0527  0C01               	rrf	1,w
  9864  0528  1C03               	skipc
  9865  0529  130E               	bcf	14,6	;volatile
  9866  052A  1803               	skipnc
  9867  052B  170E               	bsf	14,6	;volatile
  9868                           
  9869                           ;mcu_drv.c: 185: WPUCbits.WPUC7 = WpuCh->WpuC7;
  9870  052C  0874               	movf	Mcu_ConfigPullUps@WpuCh,w
  9871  052D  3E11               	addlw	17
  9872  052E  0086               	movwf	6
  9873  052F  0187               	clrf	7
  9874  0530  0C01               	rrf	1,w
  9875  0531  1C03               	skipc
  9876  0532  138E               	bcf	14,7	;volatile
  9877  0533  1803               	skipnc
  9878  0534  178E               	bsf	14,7	;volatile
  9879  0535  0008               	return
  9880  0536                     __end_of_Mcu_ConfigPullUps:	
  9881                           
  9882                           	psect	text41
  9883  0B0F                     __ptext41:	
  9884 ;; *************** function _AppSm *****************
  9885 ;; Defined at:
  9886 ;;		line 234 in file "../Source/c/04_App/sb810_app.c"
  9887 ;; Parameters:    Size  Location     Type
  9888 ;;		None
  9889 ;; Auto vars:     Size  Location     Type
  9890 ;;		None
  9891 ;; Return value:  Size  Location     Type
  9892 ;;                  1    wreg      void 
  9893 ;; Registers used:
  9894 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9895 ;; Tracked objects:
  9896 ;;		On entry : 0/0
  9897 ;;		On exit  : 0/0
  9898 ;;		Unchanged: 0/0
  9899 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9900 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9901 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9902 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9903 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9904 ;;Total ram usage:        1 bytes
  9905 ;; Hardware stack levels used:    1
  9906 ;; Hardware stack levels required when called:    6
  9907 ;; This function calls:
  9908 ;;		_GenerateEvt
  9909 ;;		_ManageProtocol
  9910 ;;		_StdS_SetI2cAddress
  9911 ;; This function is called by:
  9912 ;;		_App_MainTask
  9913 ;; This function uses a non-reentrant model
  9914 ;;
  9915                           
  9916                           
  9917                           ;psect for function _AppSm
  9918  0B0F                     _AppSm:	
  9919                           
  9920                           ;sb810_app.c: 236: static AppStateType AppState = WaitWpuSetState;
  9921                           ;sb810_app.c: 237: static UINT8 WpuSetCounter = 0;
  9922                           ;sb810_app.c: 239: switch (AppState)
  9923                           
  9924                           ;incstack = 0
  9925                           ; Regs used in _AppSm: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  9926  0B0F  2B2B               	goto	l4467
  9927  0B10                     l4451:	
  9928                           ;sb810_app.c: 240: {
  9929                           ;sb810_app.c: 241: case WaitWpuSetState:
  9930                           
  9931                           
  9932                           ;sb810_app.c: 243: WpuSetCounter++;
  9933  0B10  3001               	movlw	1
  9934  0B11  0020               	movlb	0	; select bank0
  9935  0B12  00B9               	movwf	??_AppSm
  9936  0B13  0839               	movf	??_AppSm,w
  9937  0B14  07E2               	addwf	AppSm@WpuSetCounter,f
  9938                           
  9939                           ;sb810_app.c: 245: if (WpuSetCounter >= ((UINT16)(100)/((UINT16)(20))))
  9940  0B15  3005               	movlw	5
  9941  0B16  0262               	subwf	AppSm@WpuSetCounter,w
  9942  0B17  1C03               	skipc
  9943  0B18  0008               	return
  9944                           
  9945                           ;sb810_app.c: 246: {
  9946                           ;sb810_app.c: 248: StdS_SetI2cAddress();
  9947  0B19  318C  2450         	fcall	_StdS_SetI2cAddress
  9948                           
  9949                           ;sb810_app.c: 250: AppState = SendI2cAddrState;
  9950  0B1B  0020               	movlb	0	; select bank0
  9951  0B1C  01E1               	clrf	AppSm@AppState
  9952  0B1D  0AE1               	incf	AppSm@AppState,f
  9953                           
  9954                           ;sb810_app.c: 251: }
  9955                           ;sb810_app.c: 252: break;
  9956  0B1E  0008               	return
  9957  0B1F                     l4459:	
  9958                           ;sb810_app.c: 254: case SendI2cAddrState:
  9959                           
  9960                           
  9961                           ;sb810_app.c: 256: GenerateEvt(&I2cSetAddress);
  9962  0B1F  30E4               	movlw	(low (_I2cSetAddress| 0))& (0+255)
  9963  0B20  318A  227A         	fcall	_GenerateEvt
  9964                           
  9965                           ;sb810_app.c: 258: AppState = ManageProtocolState;
  9966  0B22  3002               	movlw	2
  9967  0B23  0020               	movlb	0	; select bank0
  9968  0B24  00B9               	movwf	??_AppSm
  9969  0B25  0839               	movf	??_AppSm,w
  9970  0B26  00E1               	movwf	AppSm@AppState
  9971                           
  9972                           ;sb810_app.c: 259: break;
  9973  0B27  0008               	return
  9974  0B28                     l4463:	
  9975                           ;sb810_app.c: 261: case ManageProtocolState:
  9976                           
  9977                           
  9978                           ;sb810_app.c: 263: ManageProtocol();
  9979  0B28  3186  26CE         	fcall	_ManageProtocol
  9980                           
  9981                           ;sb810_app.c: 268: }
  9982                           
  9983                           ;sb810_app.c: 267: break;
  9984                           
  9985                           ;sb810_app.c: 266: default:
  9986                           
  9987                           ;sb810_app.c: 264: break;
  9988  0B2A  0008               	return
  9989  0B2B                     l4467:	
  9990  0B2B  0020               	movlb	0	; select bank0
  9991  0B2C  0861               	movf	AppSm@AppState,w
  9992                           
  9993                           ; Switch size 1, requested type "space"
  9994                           ; Number of cases is 3, Range of values is 0 to 2
  9995                           ; switch strategies available:
  9996                           ; Name         Instructions Cycles
  9997                           ; simple_byte           10     6 (average)
  9998                           ; direct_byte           12     6 (fixed)
  9999                           ; jumptable            260     6 (fixed)
 10000                           ;	Chosen strategy is simple_byte
 10001  0B2D  3A00               	xorlw	0	; case 0
 10002  0B2E  1903               	skipnz
 10003  0B2F  2B10               	goto	l4451
 10004  0B30  3A01               	xorlw	1	; case 1
 10005  0B31  1903               	skipnz
 10006  0B32  2B1F               	goto	l4459
 10007  0B33  3A03               	xorlw	3	; case 2
 10008  0B34  1903               	skipnz
 10009  0B35  2B28               	goto	l4463
 10010  0B36  2B37               	goto	l883
 10011  0B37                     l883:	
 10012  0B37  0008               	return
 10013  0B38                     __end_of_AppSm:	
 10014                           
 10015                           	psect	text42
 10016  0C50                     __ptext42:	
 10017 ;; *************** function _StdS_SetI2cAddress *****************
 10018 ;; Defined at:
 10019 ;;		line 317 in file "../../../Framework/MercuryFwk/Source/c/03_Sml/02_Ssl/std_ser.c"
 10020 ;; Parameters:    Size  Location     Type
 10021 ;;		None
 10022 ;; Auto vars:     Size  Location     Type
 10023 ;;		None
 10024 ;; Return value:  Size  Location     Type
 10025 ;;                  1    wreg      void 
 10026 ;; Registers used:
 10027 ;;		wreg, status,2, status,0
 10028 ;; Tracked objects:
 10029 ;;		On entry : 0/0
 10030 ;;		On exit  : 0/0
 10031 ;;		Unchanged: 0/0
 10032 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10033 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10034 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10035 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10036 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10037 ;;Total ram usage:        2 bytes
 10038 ;; Hardware stack levels used:    1
 10039 ;; Hardware stack levels required when called:    2
 10040 ;; This function calls:
 10041 ;;		Nothing
 10042 ;; This function is called by:
 10043 ;;		_AppSm
 10044 ;; This function uses a non-reentrant model
 10045 ;;
 10046                           
 10047                           
 10048                           ;psect for function _StdS_SetI2cAddress
 10049  0C50                     _StdS_SetI2cAddress:	
 10050                           
 10051                           ;std_ser.c: 321: I2cSlaveAddress |= (!PORTCbits.RC6 << 3);
 10052                           
 10053                           ;incstack = 0
 10054                           ; Regs used in _StdS_SetI2cAddress: [wreg+status,2+status,0]
 10055  0C50  1003               	clrc
 10056  0C51  0020               	movlb	0	; select bank0
 10057  0C52  1F0E               	btfss	14,6	;volatile
 10058  0C53  1403               	setc
 10059  0C54  3000               	movlw	0
 10060  0C55  3D09               	addwfc	9,w
 10061  0C56  00F4               	movwf	??_StdS_SetI2cAddress
 10062  0C57  3002               	movlw	2
 10063  0C58                     u1705:	
 10064  0C58  35F4               	lslf	??_StdS_SetI2cAddress,f
 10065  0C59  3EFF               	addlw	-1
 10066  0C5A  1D03               	skipz
 10067  0C5B  2C58               	goto	u1705
 10068  0C5C  3574               	lslf	??_StdS_SetI2cAddress,w
 10069  0C5D  00F5               	movwf	??_StdS_SetI2cAddress+1
 10070  0C5E  0875               	movf	??_StdS_SetI2cAddress+1,w
 10071  0C5F  04F6               	iorwf	_I2cSlaveAddress,f
 10072                           
 10073                           ;std_ser.c: 322: I2cSlaveAddress |= (!PORTCbits.RC3 << 2);
 10074  0C60  1003               	clrc
 10075  0C61  1D8E               	btfss	14,3	;volatile
 10076  0C62  1403               	setc
 10077  0C63  3000               	movlw	0
 10078  0C64  3D09               	addwfc	9,w
 10079  0C65  00F4               	movwf	??_StdS_SetI2cAddress
 10080  0C66  3001               	movlw	1
 10081  0C67                     u1715:	
 10082  0C67  35F4               	lslf	??_StdS_SetI2cAddress,f
 10083  0C68  3EFF               	addlw	-1
 10084  0C69  1D03               	skipz
 10085  0C6A  2C67               	goto	u1715
 10086  0C6B  3574               	lslf	??_StdS_SetI2cAddress,w
 10087  0C6C  00F5               	movwf	??_StdS_SetI2cAddress+1
 10088  0C6D  0875               	movf	??_StdS_SetI2cAddress+1,w
 10089  0C6E  04F6               	iorwf	_I2cSlaveAddress,f
 10090                           
 10091                           ;std_ser.c: 323: I2cSlaveAddress |= (!PORTCbits.RC4 << 1);
 10092  0C6F  1003               	clrc
 10093  0C70  1E0E               	btfss	14,4	;volatile
 10094  0C71  1403               	setc
 10095  0C72  3000               	movlw	0
 10096  0C73  3D09               	addwfc	9,w
 10097  0C74  0709               	addwf	9,w
 10098  0C75  00F4               	movwf	??_StdS_SetI2cAddress
 10099  0C76  0874               	movf	??_StdS_SetI2cAddress,w
 10100  0C77  04F6               	iorwf	_I2cSlaveAddress,f
 10101                           
 10102                           ;std_ser.c: 324: I2cSlaveAddress |= (!PORTCbits.RC5 << 0);
 10103  0C78  1003               	clrc
 10104  0C79  1E8E               	btfss	14,5	;volatile
 10105  0C7A  1403               	setc
 10106  0C7B  3000               	movlw	0
 10107  0C7C  3D09               	addwfc	9,w
 10108  0C7D  00F4               	movwf	??_StdS_SetI2cAddress
 10109  0C7E  0874               	movf	??_StdS_SetI2cAddress,w
 10110  0C7F  04F6               	iorwf	_I2cSlaveAddress,f
 10111  0C80  0008               	return
 10112  0C81                     __end_of_StdS_SetI2cAddress:	
 10113                           
 10114                           	psect	text43
 10115  06CE                     __ptext43:	
 10116 ;; *************** function _ManageProtocol *****************
 10117 ;; Defined at:
 10118 ;;		line 138 in file "../Source/c/04_App/sb810_app.c"
 10119 ;; Parameters:    Size  Location     Type
 10120 ;;		None
 10121 ;; Auto vars:     Size  Location     Type
 10122 ;;		None
 10123 ;; Return value:  Size  Location     Type
 10124 ;;                  1    wreg      void 
 10125 ;; Registers used:
 10126 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10127 ;; Tracked objects:
 10128 ;;		On entry : 0/0
 10129 ;;		On exit  : 0/0
 10130 ;;		Unchanged: 0/0
 10131 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10132 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10133 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10134 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10135 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10136 ;;Total ram usage:        0 bytes
 10137 ;; Hardware stack levels used:    1
 10138 ;; Hardware stack levels required when called:    5
 10139 ;; This function calls:
 10140 ;;		_GetAnalogAscii
 10141 ;;		_GetAnalogRaw
 10142 ;;		_GetDigitalRaw
 10143 ;;		_ReceiveEvt
 10144 ;;		_SetDigitalDir
 10145 ;;		_SetDigitalOutSts
 10146 ;;		_StdS_ManageStdServices
 10147 ;; This function is called by:
 10148 ;;		_AppSm
 10149 ;; This function uses a non-reentrant model
 10150 ;;
 10151                           
 10152                           
 10153                           ;psect for function _ManageProtocol
 10154  06CE                     _ManageProtocol:	
 10155                           
 10156                           ;sb810_app.c: 143: if (ReceiveEvt(&I2cWriteRequest))
 10157                           
 10158                           ;incstack = 0
 10159                           ; Regs used in _ManageProtocol: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 10160  06CE  30E6               	movlw	(low (_I2cWriteRequest| 0))& (0+255)
 10161  06CF  318A  2259  3186   	fcall	_ReceiveEvt
 10162  06D2  3A00               	xorlw	0
 10163  06D3  1903               	skipnz
 10164  06D4  0008               	return
 10165                           
 10166                           ;sb810_app.c: 144: {
 10167                           ;sb810_app.c: 146: StdS_ManageStdServices();
 10168  06D5  3180  2097  3186   	fcall	_StdS_ManageStdServices
 10169                           
 10170                           ;sb810_app.c: 148: switch (CmdBuffer[((UINT8)(0))])
 10171  06D8  2F13               	goto	l4287
 10172  06D9                     l4257:	
 10173                           ;sb810_app.c: 149: {
 10174                           ;sb810_app.c: 150: case ((UINT8)(0x70)):
 10175                           
 10176                           
 10177                           ;sb810_app.c: 152: GetAnalogRaw(((UINT8)(2)));
 10178  06D9  3002               	movlw	2
 10179  06DA  318E  2671         	fcall	_GetAnalogRaw
 10180                           
 10181                           ;sb810_app.c: 153: break;
 10182  06DC  0008               	return
 10183  06DD                     l4259:	
 10184                           ;sb810_app.c: 155: case ((UINT8)(0x80)):
 10185                           
 10186                           
 10187                           ;sb810_app.c: 157: GetAnalogAscii(((UINT8)(2)));
 10188  06DD  3002               	movlw	2
 10189  06DE  318D  2551         	fcall	_GetAnalogAscii
 10190                           
 10191                           ;sb810_app.c: 158: break;
 10192  06E0  0008               	return
 10193  06E1                     l4261:	
 10194                           ;sb810_app.c: 160: case ((UINT8)(0x71)):
 10195                           
 10196                           
 10197                           ;sb810_app.c: 162: GetAnalogRaw(((UINT8)(4)));
 10198  06E1  3004               	movlw	4
 10199  06E2  318E  2671         	fcall	_GetAnalogRaw
 10200                           
 10201                           ;sb810_app.c: 163: break;
 10202  06E4  0008               	return
 10203  06E5                     l4263:	
 10204                           ;sb810_app.c: 165: case ((UINT8)(0x81)):
 10205                           
 10206                           
 10207                           ;sb810_app.c: 167: GetAnalogAscii(((UINT8)(4)));
 10208  06E5  3004               	movlw	4
 10209  06E6  318D  2551         	fcall	_GetAnalogAscii
 10210                           
 10211                           ;sb810_app.c: 168: break;
 10212  06E8  0008               	return
 10213  06E9                     l4265:	
 10214                           ;sb810_app.c: 170: case ((UINT8)(0x72)):
 10215                           
 10216                           
 10217                           ;sb810_app.c: 172: GetAnalogRaw(((UINT8)(9)));
 10218  06E9  3009               	movlw	9
 10219  06EA  318E  2671         	fcall	_GetAnalogRaw
 10220                           
 10221                           ;sb810_app.c: 173: break;
 10222  06EC  0008               	return
 10223  06ED                     l4267:	
 10224                           ;sb810_app.c: 175: case ((UINT8)(0x82)):
 10225                           
 10226                           
 10227                           ;sb810_app.c: 177: GetAnalogAscii(((UINT8)(9)));
 10228  06ED  3009               	movlw	9
 10229  06EE  318D  2551         	fcall	_GetAnalogAscii
 10230                           
 10231                           ;sb810_app.c: 178: break;
 10232  06F0  0008               	return
 10233  06F1                     l4269:	
 10234                           ;sb810_app.c: 180: case ((UINT8)(0x73)):
 10235                           
 10236                           
 10237                           ;sb810_app.c: 182: GetAnalogRaw(((UINT8)(11)));
 10238  06F1  300B               	movlw	11
 10239  06F2  318E  2671         	fcall	_GetAnalogRaw
 10240                           
 10241                           ;sb810_app.c: 183: break;
 10242  06F4  0008               	return
 10243  06F5                     l4271:	
 10244                           ;sb810_app.c: 185: case ((UINT8)(0x83)):
 10245                           
 10246                           
 10247                           ;sb810_app.c: 187: GetAnalogAscii(((UINT8)(11)));
 10248  06F5  300B               	movlw	11
 10249  06F6  318D  2551         	fcall	_GetAnalogAscii
 10250                           
 10251                           ;sb810_app.c: 188: break;
 10252  06F8  0008               	return
 10253  06F9                     l4273:	
 10254                           ;sb810_app.c: 190: case ((UINT8)(0x60)):
 10255                           
 10256                           
 10257                           ;sb810_app.c: 192: GetDigitalRaw(0u);
 10258  06F9  3000               	movlw	0
 10259  06FA  318C  24B2         	fcall	_GetDigitalRaw
 10260                           
 10261                           ;sb810_app.c: 193: break;
 10262  06FC  0008               	return
 10263  06FD                     l4275:	
 10264                           ;sb810_app.c: 195: case ((UINT8)(0x61)):
 10265                           
 10266                           
 10267                           ;sb810_app.c: 197: GetDigitalRaw(1u);
 10268  06FD  3001               	movlw	1
 10269  06FE  318C  24B2         	fcall	_GetDigitalRaw
 10270                           
 10271                           ;sb810_app.c: 198: break;
 10272  0700  0008               	return
 10273  0701                     l4277:	
 10274                           ;sb810_app.c: 200: case ((UINT8)(0x62)):
 10275                           
 10276                           
 10277                           ;sb810_app.c: 202: GetDigitalRaw(2u);
 10278  0701  3002               	movlw	2
 10279  0702  318C  24B2         	fcall	_GetDigitalRaw
 10280                           
 10281                           ;sb810_app.c: 203: break;
 10282  0704  0008               	return
 10283  0705                     l4279:	
 10284                           ;sb810_app.c: 205: case ((UINT8)(0x63)):
 10285                           
 10286                           
 10287                           ;sb810_app.c: 207: GetDigitalRaw(3u);
 10288  0705  3003               	movlw	3
 10289  0706  318C  24B2         	fcall	_GetDigitalRaw
 10290                           
 10291                           ;sb810_app.c: 208: break;
 10292  0708  0008               	return
 10293  0709                     l4281:	
 10294                           ;sb810_app.c: 210: case ((UINT8)(0x50)):
 10295                           
 10296                           
 10297                           ;sb810_app.c: 212: SetDigitalDir(CmdBuffer[((UINT8)(1))]);
 10298  0709  0023               	movlb	3	; select bank3
 10299  070A  0821               	movf	(_CmdBuffer^(0+384)+1),w
 10300  070B  318B  23EE         	fcall	_SetDigitalDir
 10301                           
 10302                           ;sb810_app.c: 213: break;
 10303  070D  0008               	return
 10304  070E                     l4283:	
 10305                           ;sb810_app.c: 215: case ((UINT8)(0x51)):
 10306                           
 10307                           
 10308                           ;sb810_app.c: 217: SetDigitalOutSts(CmdBuffer[((UINT8)(1))]);
 10309  070E  0023               	movlb	3	; select bank3
 10310  070F  0821               	movf	(_CmdBuffer^(0+384)+1),w
 10311  0710  318C  241F         	fcall	_SetDigitalOutSts
 10312                           
 10313                           ;sb810_app.c: 222: }
 10314                           
 10315                           ;sb810_app.c: 221: break;
 10316                           
 10317                           ;sb810_app.c: 220: default:
 10318                           
 10319                           ;sb810_app.c: 218: break;
 10320  0712  0008               	return
 10321  0713                     l4287:	
 10322  0713  0023               	movlb	3	; select bank3
 10323  0714  0820               	movf	_CmdBuffer^(0+384),w
 10324                           
 10325                           ; Switch size 1, requested type "space"
 10326                           ; Number of cases is 14, Range of values is 80 to 131
 10327                           ; switch strategies available:
 10328                           ; Name         Instructions Cycles
 10329                           ; simple_byte           43    22 (average)
 10330                           ; direct_byte          113     9 (fixed)
 10331                           ; jumptable            263     9 (fixed)
 10332                           ;	Chosen strategy is simple_byte
 10333  0715  3A50               	xorlw	80	; case 80
 10334  0716  1903               	skipnz
 10335  0717  2F09               	goto	l4281
 10336  0718  3A01               	xorlw	1	; case 81
 10337  0719  1903               	skipnz
 10338  071A  2F0E               	goto	l4283
 10339  071B  3A31               	xorlw	49	; case 96
 10340  071C  1903               	skipnz
 10341  071D  2EF9               	goto	l4273
 10342  071E  3A01               	xorlw	1	; case 97
 10343  071F  1903               	skipnz
 10344  0720  2EFD               	goto	l4275
 10345  0721  3A03               	xorlw	3	; case 98
 10346  0722  1903               	skipnz
 10347  0723  2F01               	goto	l4277
 10348  0724  3A01               	xorlw	1	; case 99
 10349  0725  1903               	skipnz
 10350  0726  2F05               	goto	l4279
 10351  0727  3A13               	xorlw	19	; case 112
 10352  0728  1903               	skipnz
 10353  0729  2ED9               	goto	l4257
 10354  072A  3A01               	xorlw	1	; case 113
 10355  072B  1903               	skipnz
 10356  072C  2EE1               	goto	l4261
 10357  072D  3A03               	xorlw	3	; case 114
 10358  072E  1903               	skipnz
 10359  072F  2EE9               	goto	l4265
 10360  0730  3A01               	xorlw	1	; case 115
 10361  0731  1903               	skipnz
 10362  0732  2EF1               	goto	l4269
 10363  0733  3AF3               	xorlw	243	; case 128
 10364  0734  1903               	skipnz
 10365  0735  2EDD               	goto	l4259
 10366  0736  3A01               	xorlw	1	; case 129
 10367  0737  1903               	skipnz
 10368  0738  2EE5               	goto	l4263
 10369  0739  3A03               	xorlw	3	; case 130
 10370  073A  1903               	skipnz
 10371  073B  2EED               	goto	l4267
 10372  073C  3A01               	xorlw	1	; case 131
 10373  073D  1903               	skipnz
 10374  073E  2EF5               	goto	l4271
 10375  073F  2F41               	goto	l869
 10376  0740  0008               	return
 10377  0741                     l869:	
 10378  0741  0008               	return
 10379  0742                     __end_of_ManageProtocol:	
 10380                           
 10381                           	psect	text44
 10382  0097                     __ptext44:	
 10383 ;; *************** function _StdS_ManageStdServices *****************
 10384 ;; Defined at:
 10385 ;;		line 212 in file "../../../Framework/MercuryFwk/Source/c/03_Sml/02_Ssl/std_ser.c"
 10386 ;; Parameters:    Size  Location     Type
 10387 ;;		None
 10388 ;; Auto vars:     Size  Location     Type
 10389 ;;  DieTempStr      4   19[BANK0 ] unsigned char [4]
 10390 ;;  DieTemp         2   23[BANK0 ] unsigned short 
 10391 ;; Return value:  Size  Location     Type
 10392 ;;                  1    wreg      void 
 10393 ;; Registers used:
 10394 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10395 ;; Tracked objects:
 10396 ;;		On entry : 0/0
 10397 ;;		On exit  : 0/0
 10398 ;;		Unchanged: 0/0
 10399 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10400 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10401 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10402 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10403 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10404 ;;Total ram usage:        8 bytes
 10405 ;; Hardware stack levels used:    1
 10406 ;; Hardware stack levels required when called:    4
 10407 ;; This function calls:
 10408 ;;		_BoardReset
 10409 ;;		_ControlLedDirect
 10410 ;;		_GenerateEvt
 10411 ;;		_GetDieTemperature
 10412 ;;		_LowPowerMode
 10413 ;;		_SetLedBehavSts
 10414 ;;		_StringCopy
 10415 ;;		_utoa
 10416 ;; This function is called by:
 10417 ;;		_ManageProtocol
 10418 ;; This function uses a non-reentrant model
 10419 ;;
 10420                           
 10421                           
 10422                           ;psect for function _StdS_ManageStdServices
 10423  0097                     _StdS_ManageStdServices:	
 10424                           
 10425                           ;std_ser.c: 214: UINT16 DieTemp;
 10426                           ;std_ser.c: 215: UINT8 DieTempStr[4];
 10427                           ;std_ser.c: 218: switch (CmdBuffer[((UINT8)(0))])
 10428                           
 10429                           ;incstack = 0
 10430                           ; Regs used in _StdS_ManageStdServices: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 10431  0097  2966               	goto	l4107
 10432  0098                     l4051:	
 10433                           ;std_ser.c: 219: {
 10434                           ;std_ser.c: 220: case ((UINT8)(0x10)):
 10435                           
 10436                           
 10437                           ;std_ser.c: 222: StringCopy((void*)("ECHO"),RepBuffer,((UINT8)(4)));
 10438  0098  3028               	movlw	low (STR_2| (0+32768))
 10439  0099  0020               	movlb	0	; select bank0
 10440  009A  00A0               	movwf	StringCopy@SourceStr
 10441  009B  3090               	movlw	high (STR_2| (0+32768))
 10442  009C  00A1               	movwf	StringCopy@SourceStr+1
 10443  009D  3020               	movlw	(low (_RepBuffer| (0+512)))& (0+255)
 10444  009E  00B1               	movwf	??_StdS_ManageStdServices
 10445  009F  0831               	movf	??_StdS_ManageStdServices,w
 10446  00A0  00A2               	movwf	StringCopy@DestStr
 10447  00A1  3004               	movlw	4
 10448  00A2  00B2               	movwf	??_StdS_ManageStdServices+1
 10449  00A3  0832               	movf	??_StdS_ManageStdServices+1,w
 10450  00A4  00A3               	movwf	StringCopy@Len
 10451  00A5  318A  229C  3180   	fcall	_StringCopy
 10452                           
 10453                           ;std_ser.c: 224: RepBufferLen = ((UINT8)(4));
 10454  00A8  3004               	movlw	4
 10455  00A9  0020               	movlb	0	; select bank0
 10456  00AA  00B1               	movwf	??_StdS_ManageStdServices
 10457  00AB  0831               	movf	??_StdS_ManageStdServices,w
 10458  00AC  00EA               	movwf	_RepBufferLen
 10459                           
 10460                           ;std_ser.c: 226: GenerateEvt(&I2cReplyPacketReady);
 10461  00AD  3077               	movlw	(low (_I2cReplyPacketReady| 0))& (0+255)
 10462  00AE  318A  227A         	fcall	_GenerateEvt
 10463                           
 10464                           ;std_ser.c: 227: break;
 10465  00B0  0008               	return
 10466  00B1                     l4057:	
 10467                           ;std_ser.c: 229: case ((UINT8)(0x20)):
 10468                           
 10469                           
 10470                           ;std_ser.c: 231: StringCopy((void*)"SB810",RepBuffer,((UINT8)(5)));
 10471  00B1  301D               	movlw	low (STR_3| (0+32768))
 10472  00B2  0020               	movlb	0	; select bank0
 10473  00B3  00A0               	movwf	StringCopy@SourceStr
 10474  00B4  3090               	movlw	high (STR_3| (0+32768))
 10475  00B5  00A1               	movwf	StringCopy@SourceStr+1
 10476  00B6  3020               	movlw	(low (_RepBuffer| (0+512)))& (0+255)
 10477  00B7  00B1               	movwf	??_StdS_ManageStdServices
 10478  00B8  0831               	movf	??_StdS_ManageStdServices,w
 10479  00B9  00A2               	movwf	StringCopy@DestStr
 10480  00BA  3005               	movlw	5
 10481  00BB  00B2               	movwf	??_StdS_ManageStdServices+1
 10482  00BC  0832               	movf	??_StdS_ManageStdServices+1,w
 10483  00BD  00A3               	movwf	StringCopy@Len
 10484  00BE  318A  229C  3180   	fcall	_StringCopy
 10485                           
 10486                           ;std_ser.c: 233: RepBufferLen = ((UINT8)(5));
 10487  00C1  3005               	movlw	5
 10488  00C2  0020               	movlb	0	; select bank0
 10489  00C3  00B1               	movwf	??_StdS_ManageStdServices
 10490  00C4  0831               	movf	??_StdS_ManageStdServices,w
 10491  00C5  00EA               	movwf	_RepBufferLen
 10492                           
 10493                           ;std_ser.c: 235: GenerateEvt(&I2cReplyPacketReady);
 10494  00C6  3077               	movlw	(low (_I2cReplyPacketReady| 0))& (0+255)
 10495  00C7  318A  227A         	fcall	_GenerateEvt
 10496                           
 10497                           ;std_ser.c: 236: break;
 10498  00C9  0008               	return
 10499  00CA                     l4063:	
 10500                           ;std_ser.c: 238: case ((UINT8)(0x21)):
 10501                           
 10502                           
 10503                           ;std_ser.c: 240: StringCopy((void*)"01.01.00",RepBuffer,((UINT8)(8)));
 10504  00CA  300C               	movlw	low (STR_4| (0+32768))
 10505  00CB  0020               	movlb	0	; select bank0
 10506  00CC  00A0               	movwf	StringCopy@SourceStr
 10507  00CD  3090               	movlw	high (STR_4| (0+32768))
 10508  00CE  00A1               	movwf	StringCopy@SourceStr+1
 10509  00CF  3020               	movlw	(low (_RepBuffer| (0+512)))& (0+255)
 10510  00D0  00B1               	movwf	??_StdS_ManageStdServices
 10511  00D1  0831               	movf	??_StdS_ManageStdServices,w
 10512  00D2  00A2               	movwf	StringCopy@DestStr
 10513  00D3  3008               	movlw	8
 10514  00D4  00B2               	movwf	??_StdS_ManageStdServices+1
 10515  00D5  0832               	movf	??_StdS_ManageStdServices+1,w
 10516  00D6  00A3               	movwf	StringCopy@Len
 10517  00D7  318A  229C  3180   	fcall	_StringCopy
 10518                           
 10519                           ;std_ser.c: 242: RepBufferLen = ((UINT8)(8));
 10520  00DA  3008               	movlw	8
 10521  00DB  0020               	movlb	0	; select bank0
 10522  00DC  00B1               	movwf	??_StdS_ManageStdServices
 10523  00DD  0831               	movf	??_StdS_ManageStdServices,w
 10524  00DE  00EA               	movwf	_RepBufferLen
 10525                           
 10526                           ;std_ser.c: 244: GenerateEvt(&I2cReplyPacketReady);
 10527  00DF  3077               	movlw	(low (_I2cReplyPacketReady| 0))& (0+255)
 10528  00E0  318A  227A         	fcall	_GenerateEvt
 10529                           
 10530                           ;std_ser.c: 245: break;
 10531  00E2  0008               	return
 10532  00E3                     l4069:	
 10533                           ;std_ser.c: 247: case ((UINT8)(0x22)):
 10534                           
 10535                           
 10536                           ;std_ser.c: 249: StringCopy((void*)"01.01.00",RepBuffer,((UINT8)(8)));
 10537  00E3  300C               	movlw	low (STR_4| (0+32768))
 10538  00E4  0020               	movlb	0	; select bank0
 10539  00E5  00A0               	movwf	StringCopy@SourceStr
 10540  00E6  3090               	movlw	high (STR_4| (0+32768))
 10541  00E7  00A1               	movwf	StringCopy@SourceStr+1
 10542  00E8  3020               	movlw	(low (_RepBuffer| (0+512)))& (0+255)
 10543  00E9  00B1               	movwf	??_StdS_ManageStdServices
 10544  00EA  0831               	movf	??_StdS_ManageStdServices,w
 10545  00EB  00A2               	movwf	StringCopy@DestStr
 10546  00EC  3008               	movlw	8
 10547  00ED  00B2               	movwf	??_StdS_ManageStdServices+1
 10548  00EE  0832               	movf	??_StdS_ManageStdServices+1,w
 10549  00EF  00A3               	movwf	StringCopy@Len
 10550  00F0  318A  229C  3180   	fcall	_StringCopy
 10551                           
 10552                           ;std_ser.c: 251: RepBufferLen = ((UINT8)(8));
 10553  00F3  3008               	movlw	8
 10554  00F4  0020               	movlb	0	; select bank0
 10555  00F5  00B1               	movwf	??_StdS_ManageStdServices
 10556  00F6  0831               	movf	??_StdS_ManageStdServices,w
 10557  00F7  00EA               	movwf	_RepBufferLen
 10558                           
 10559                           ;std_ser.c: 253: GenerateEvt(&I2cReplyPacketReady);
 10560  00F8  3077               	movlw	(low (_I2cReplyPacketReady| 0))& (0+255)
 10561  00F9  318A  227A         	fcall	_GenerateEvt
 10562                           
 10563                           ;std_ser.c: 255: break;
 10564  00FB  0008               	return
 10565  00FC                     l4075:	
 10566                           ;std_ser.c: 257: case ((UINT8)(0x30)):
 10567                           
 10568                           
 10569                           ;std_ser.c: 259: BoardReset();
 10570  00FC  3188  200F         	fcall	_BoardReset
 10571                           
 10572                           ;std_ser.c: 260: break;
 10573  00FE  0008               	return
 10574  00FF                     l4077:	
 10575                           ;std_ser.c: 262: case ((UINT8)(0x31)):
 10576                           
 10577                           
 10578                           ;std_ser.c: 264: LowPowerMode();
 10579  00FF  3188  20A9         	fcall	_LowPowerMode
 10580                           
 10581                           ;std_ser.c: 265: break;
 10582  0101  0008               	return
 10583  0102                     l4079:	
 10584                           ;std_ser.c: 267: case ((UINT8)(0x41)):
 10585                           
 10586                           
 10587                           ;std_ser.c: 269: SetLedBehavSts(CmdBuffer[((UINT8)(1))]);
 10588  0102  0023               	movlb	3	; select bank3
 10589  0103  0821               	movf	(_CmdBuffer^(0+384)+1),w
 10590  0104  318D  2591         	fcall	_SetLedBehavSts
 10591                           
 10592                           ;std_ser.c: 270: break;
 10593  0106  0008               	return
 10594  0107                     l4081:	
 10595                           ;std_ser.c: 272: case ((UINT8)(0x42)):
 10596                           
 10597                           
 10598                           ;std_ser.c: 274: ControlLedDirect();
 10599  0107  3189  2114         	fcall	_ControlLedDirect
 10600                           
 10601                           ;std_ser.c: 275: break;
 10602  0109  0008               	return
 10603  010A                     l4083:	
 10604                           ;std_ser.c: 277: case ((UINT8)(0x45)):
 10605                           
 10606                           
 10607                           ;std_ser.c: 279: DieTemp = GetDieTemperature();
 10608  010A  3189  217D  3180   	fcall	_GetDieTemperature
 10609  010D  0020               	movlb	0	; select bank0
 10610  010E  0824               	movf	?_GetDieTemperature+1,w
 10611  010F  00B8               	movwf	StdS_ManageStdServices@DieTemp+1
 10612  0110  0823               	movf	?_GetDieTemperature,w
 10613  0111  00B7               	movwf	StdS_ManageStdServices@DieTemp
 10614                           
 10615                           ;std_ser.c: 281: RepBuffer[0] = ((DieTemp & 0xFF00) >> 8);
 10616  0112  0838               	movf	StdS_ManageStdServices@DieTemp+1,w
 10617  0113  00B1               	movwf	??_StdS_ManageStdServices
 10618  0114  0831               	movf	??_StdS_ManageStdServices,w
 10619  0115  0024               	movlb	4	; select bank4
 10620  0116  00A0               	movwf	_RepBuffer^(0+512)
 10621                           
 10622                           ;std_ser.c: 282: RepBuffer[1] = (DieTemp & 0x00FF);
 10623  0117  0020               	movlb	0	; select bank0
 10624  0118  0837               	movf	StdS_ManageStdServices@DieTemp,w
 10625  0119  00B1               	movwf	??_StdS_ManageStdServices
 10626  011A  0831               	movf	??_StdS_ManageStdServices,w
 10627  011B  0024               	movlb	4	; select bank4
 10628  011C  00A1               	movwf	(_RepBuffer^(0+512)+1)
 10629                           
 10630                           ;std_ser.c: 284: RepBufferLen = ((UINT8)(2));
 10631  011D  3002               	movlw	2
 10632  011E  0020               	movlb	0	; select bank0
 10633  011F  00B1               	movwf	??_StdS_ManageStdServices
 10634  0120  0831               	movf	??_StdS_ManageStdServices,w
 10635  0121  00EA               	movwf	_RepBufferLen
 10636                           
 10637                           ;std_ser.c: 286: GenerateEvt(&I2cReplyPacketReady);
 10638  0122  3077               	movlw	(low (_I2cReplyPacketReady| 0))& (0+255)
 10639  0123  318A  227A         	fcall	_GenerateEvt
 10640                           
 10641                           ;std_ser.c: 287: break;
 10642  0125  0008               	return
 10643  0126                     l4093:	
 10644                           ;std_ser.c: 289: case ((UINT8)(0x46)):
 10645                           
 10646                           
 10647                           ;std_ser.c: 291: DieTemp = GetDieTemperature();
 10648  0126  3189  217D  3180   	fcall	_GetDieTemperature
 10649  0129  0020               	movlb	0	; select bank0
 10650  012A  0824               	movf	?_GetDieTemperature+1,w
 10651  012B  00B8               	movwf	StdS_ManageStdServices@DieTemp+1
 10652  012C  0823               	movf	?_GetDieTemperature,w
 10653  012D  00B7               	movwf	StdS_ManageStdServices@DieTemp
 10654                           
 10655                           ;std_ser.c: 293: DieTemp = (DieTemp/8) - 40;
 10656  012E  0838               	movf	StdS_ManageStdServices@DieTemp+1,w
 10657  012F  00B2               	movwf	??_StdS_ManageStdServices+1
 10658  0130  0837               	movf	StdS_ManageStdServices@DieTemp,w
 10659  0131  00B1               	movwf	??_StdS_ManageStdServices
 10660  0132  36B2               	lsrf	??_StdS_ManageStdServices+1,f
 10661  0133  0CB1               	rrf	??_StdS_ManageStdServices,f
 10662  0134  36B2               	lsrf	??_StdS_ManageStdServices+1,f
 10663  0135  0CB1               	rrf	??_StdS_ManageStdServices,f
 10664  0136  36B2               	lsrf	??_StdS_ManageStdServices+1,f
 10665  0137  0CB1               	rrf	??_StdS_ManageStdServices,f
 10666  0138  0831               	movf	??_StdS_ManageStdServices,w
 10667  0139  3ED8               	addlw	216
 10668  013A  00B7               	movwf	StdS_ManageStdServices@DieTemp
 10669  013B  30FF               	movlw	255
 10670  013C  3D32               	addwfc	??_StdS_ManageStdServices+1,w
 10671  013D  00B8               	movwf	StdS_ManageStdServices@DieTemp+1
 10672                           
 10673                           ;std_ser.c: 295: utoa(DieTempStr,DieTemp,10);
 10674  013E  3033               	movlw	low StdS_ManageStdServices@DieTempStr
 10675  013F  00A7               	movwf	utoa@buf
 10676  0140  3000               	movlw	high StdS_ManageStdServices@DieTempStr
 10677  0141  00A8               	movwf	utoa@buf+1
 10678  0142  0838               	movf	StdS_ManageStdServices@DieTemp+1,w
 10679  0143  00AA               	movwf	utoa@val+1
 10680  0144  0837               	movf	StdS_ManageStdServices@DieTemp,w
 10681  0145  00A9               	movwf	utoa@val
 10682  0146  300A               	movlw	10
 10683  0147  00AB               	movwf	utoa@base
 10684  0148  3000               	movlw	0
 10685  0149  00AC               	movwf	utoa@base+1
 10686  014A  318E  26C5  3180   	fcall	_utoa
 10687                           
 10688                           ;std_ser.c: 297: StringCopy(DieTempStr,RepBuffer,((UINT8)(2)));
 10689  014D  3033               	movlw	low StdS_ManageStdServices@DieTempStr
 10690  014E  0020               	movlb	0	; select bank0
 10691  014F  00A0               	movwf	StringCopy@SourceStr
 10692  0150  3000               	movlw	high StdS_ManageStdServices@DieTempStr
 10693  0151  00A1               	movwf	StringCopy@SourceStr+1
 10694  0152  3020               	movlw	(low (_RepBuffer| (0+512)))& (0+255)
 10695  0153  00B1               	movwf	??_StdS_ManageStdServices
 10696  0154  0831               	movf	??_StdS_ManageStdServices,w
 10697  0155  00A2               	movwf	StringCopy@DestStr
 10698  0156  3002               	movlw	2
 10699  0157  00B2               	movwf	??_StdS_ManageStdServices+1
 10700  0158  0832               	movf	??_StdS_ManageStdServices+1,w
 10701  0159  00A3               	movwf	StringCopy@Len
 10702  015A  318A  229C  3180   	fcall	_StringCopy
 10703                           
 10704                           ;std_ser.c: 299: RepBufferLen = ((UINT8)(2));
 10705  015D  3002               	movlw	2
 10706  015E  0020               	movlb	0	; select bank0
 10707  015F  00B1               	movwf	??_StdS_ManageStdServices
 10708  0160  0831               	movf	??_StdS_ManageStdServices,w
 10709  0161  00EA               	movwf	_RepBufferLen
 10710                           
 10711                           ;std_ser.c: 301: GenerateEvt(&I2cReplyPacketReady);
 10712  0162  3077               	movlw	(low (_I2cReplyPacketReady| 0))& (0+255)
 10713  0163  318A  227A         	fcall	_GenerateEvt
 10714                           
 10715                           ;std_ser.c: 306: }
 10716                           
 10717                           ;std_ser.c: 305: break;
 10718                           
 10719                           ;std_ser.c: 304: default:
 10720                           
 10721                           ;std_ser.c: 302: break;
 10722  0165  0008               	return
 10723  0166                     l4107:	
 10724  0166  0023               	movlb	3	; select bank3
 10725  0167  0820               	movf	_CmdBuffer^(0+384),w
 10726                           
 10727                           ; Switch size 1, requested type "space"
 10728                           ; Number of cases is 10, Range of values is 16 to 70
 10729                           ; switch strategies available:
 10730                           ; Name         Instructions Cycles
 10731                           ; simple_byte           31    16 (average)
 10732                           ; direct_byte          119     9 (fixed)
 10733                           ; jumptable            263     9 (fixed)
 10734                           ;	Chosen strategy is simple_byte
 10735  0168  3A10               	xorlw	16	; case 16
 10736  0169  1903               	skipnz
 10737  016A  2898               	goto	l4051
 10738  016B  3A30               	xorlw	48	; case 32
 10739  016C  1903               	skipnz
 10740  016D  28B1               	goto	l4057
 10741  016E  3A01               	xorlw	1	; case 33
 10742  016F  1903               	skipnz
 10743  0170  28CA               	goto	l4063
 10744  0171  3A03               	xorlw	3	; case 34
 10745  0172  1903               	skipnz
 10746  0173  28E3               	goto	l4069
 10747  0174  3A12               	xorlw	18	; case 48
 10748  0175  1903               	skipnz
 10749  0176  28FC               	goto	l4075
 10750  0177  3A01               	xorlw	1	; case 49
 10751  0178  1903               	skipnz
 10752  0179  28FF               	goto	l4077
 10753  017A  3A70               	xorlw	112	; case 65
 10754  017B  1903               	skipnz
 10755  017C  2902               	goto	l4079
 10756  017D  3A03               	xorlw	3	; case 66
 10757  017E  1903               	skipnz
 10758  017F  2907               	goto	l4081
 10759  0180  3A07               	xorlw	7	; case 69
 10760  0181  1903               	skipnz
 10761  0182  290A               	goto	l4083
 10762  0183  3A03               	xorlw	3	; case 70
 10763  0184  1903               	skipnz
 10764  0185  2926               	goto	l4093
 10765  0186  2987               	goto	l731
 10766  0187                     l731:	
 10767  0187  0008               	return
 10768  0188                     __end_of_StdS_ManageStdServices:	
 10769                           
 10770                           	psect	text45
 10771  0A9C                     __ptext45:	
 10772 ;; *************** function _StringCopy *****************
 10773 ;; Defined at:
 10774 ;;		line 104 in file "../../../Framework/MercuryFwk/Source/c/03_Sml/02_Ssl/sf.c"
 10775 ;; Parameters:    Size  Location     Type
 10776 ;;  SourceStr       2    0[BANK0 ] PTR unsigned char 
 10777 ;;		 -> StdS_ManageStdServices@DieTempStr(4), STR_5(9), STR_4(9), STR_3(6), 
 10778 ;;		 -> STR_2(5), 
 10779 ;;  DestStr         1    2[BANK0 ] PTR unsigned char 
 10780 ;;		 -> RepBuffer(80), 
 10781 ;;  Len             1    3[BANK0 ] unsigned char 
 10782 ;; Auto vars:     Size  Location     Type
 10783 ;;  Index           1    4[COMMON] unsigned char 
 10784 ;; Return value:  Size  Location     Type
 10785 ;;                  1    wreg      void 
 10786 ;; Registers used:
 10787 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath
 10788 ;; Tracked objects:
 10789 ;;		On entry : 0/0
 10790 ;;		On exit  : 0/0
 10791 ;;		Unchanged: 0/0
 10792 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10793 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10794 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10795 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10796 ;;      Totals:         1       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10797 ;;Total ram usage:        9 bytes
 10798 ;; Hardware stack levels used:    1
 10799 ;; Hardware stack levels required when called:    2
 10800 ;; This function calls:
 10801 ;;		Nothing
 10802 ;; This function is called by:
 10803 ;;		_StdS_ManageStdServices
 10804 ;; This function uses a non-reentrant model
 10805 ;;
 10806                           
 10807                           
 10808                           ;psect for function _StringCopy
 10809  0A9C                     _StringCopy:	
 10810                           
 10811                           ;sf.c: 106: UINT8 Index = 0;
 10812                           
 10813                           ;incstack = 0
 10814                           ; Regs used in _StringCopy: [wreg-fsr1h+status,2+status,0+pclath]
 10815  0A9C  01F4               	clrf	StringCopy@Index
 10816                           
 10817                           ;sf.c: 109: for (Index = 0; Index < Len; Index++)
 10818  0A9D  01F4               	clrf	StringCopy@Index
 10819  0A9E                     l3947:	
 10820  0A9E  0020               	movlb	0	; select bank0
 10821  0A9F  0823               	movf	StringCopy@Len,w
 10822  0AA0  0274               	subwf	StringCopy@Index,w
 10823  0AA1  1803               	btfsc	3,0
 10824  0AA2  0008               	return
 10825                           
 10826                           ;sf.c: 110: {
 10827                           ;sf.c: 111: DestStr[Index] = SourceStr[Index];
 10828  0AA3  0020               	movlb	0	; select bank0
 10829  0AA4  0821               	movf	StringCopy@SourceStr+1,w
 10830  0AA5  00A5               	movwf	??_StringCopy+1
 10831  0AA6  0820               	movf	StringCopy@SourceStr,w
 10832  0AA7  00A4               	movwf	??_StringCopy
 10833  0AA8  0874               	movf	StringCopy@Index,w
 10834  0AA9  0724               	addwf	??_StringCopy,w
 10835  0AAA  0084               	movwf	4
 10836  0AAB  0825               	movf	??_StringCopy+1,w
 10837  0AAC  1803               	skipnc
 10838  0AAD  0A25               	incf	??_StringCopy+1,w
 10839  0AAE  0085               	movwf	5
 10840  0AAF  0800               	movf	0,w	;code access
 10841  0AB0  00A6               	movwf	??_StringCopy+2
 10842  0AB1  0874               	movf	StringCopy@Index,w
 10843  0AB2  0722               	addwf	StringCopy@DestStr,w
 10844  0AB3  00A7               	movwf	??_StringCopy+3
 10845  0AB4  0827               	movf	??_StringCopy+3,w
 10846  0AB5  0086               	movwf	6
 10847  0AB6  3002               	movlw	2	; select bank4/5
 10848  0AB7  0087               	movwf	7
 10849  0AB8  0826               	movf	??_StringCopy+2,w
 10850  0AB9  0081               	movwf	1
 10851  0ABA  3001               	movlw	1
 10852  0ABB  00A4               	movwf	??_StringCopy
 10853  0ABC  0824               	movf	??_StringCopy,w
 10854  0ABD  07F4               	addwf	StringCopy@Index,f
 10855  0ABE  2A9E               	goto	l3947
 10856  0ABF                     __end_of_StringCopy:	
 10857                           
 10858                           	psect	text46
 10859  0D91                     __ptext46:	
 10860 ;; *************** function _SetLedBehavSts *****************
 10861 ;; Defined at:
 10862 ;;		line 76 in file "../../../Framework/MercuryFwk/Source/c/03_Sml/02_Ssl/std_ser.c"
 10863 ;; Parameters:    Size  Location     Type
 10864 ;;  LedBehav        1    wreg     unsigned char 
 10865 ;; Auto vars:     Size  Location     Type
 10866 ;;  LedBehav        1    5[BANK0 ] unsigned char 
 10867 ;; Return value:  Size  Location     Type
 10868 ;;                  1    wreg      void 
 10869 ;; Registers used:
 10870 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
 10871 ;; Tracked objects:
 10872 ;;		On entry : 0/0
 10873 ;;		On exit  : 0/0
 10874 ;;		Unchanged: 0/0
 10875 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10876 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10877 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10878 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10879 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10880 ;;Total ram usage:        2 bytes
 10881 ;; Hardware stack levels used:    1
 10882 ;; Hardware stack levels required when called:    3
 10883 ;; This function calls:
 10884 ;;		_Led_SetLedBlinkTime
 10885 ;;		_Led_SetLedPulseTime
 10886 ;;		_Led_SetLedStatus
 10887 ;; This function is called by:
 10888 ;;		_Led_MainTask
 10889 ;;		_StdS_ManageStdServices
 10890 ;; This function uses a non-reentrant model
 10891 ;;
 10892                           
 10893                           
 10894                           ;psect for function _SetLedBehavSts
 10895  0D91                     _SetLedBehavSts:	
 10896                           
 10897                           ;incstack = 0
 10898                           ; Regs used in _SetLedBehavSts: [wreg-fsr0h+status,2+status,0+pclath+cstack]
 10899                           ;SetLedBehavSts@LedBehav stored from wreg
 10900  0D91  0020               	movlb	0	; select bank0
 10901  0D92  00A5               	movwf	SetLedBehavSts@LedBehav
 10902                           
 10903                           ;std_ser.c: 79: switch (LedBehav)
 10904  0D93  2DC4               	goto	l3939
 10905  0D94                     l3923:	
 10906                           ;std_ser.c: 80: {
 10907                           ;std_ser.c: 81: case ((UINT8)(0)):
 10908                           
 10909                           
 10910                           ;std_ser.c: 83: Led_SetLedStatus(1u,LED_STS_OFF);
 10911  0D94  01F4               	clrf	Led_SetLedStatus@LedSts
 10912  0D95  3001               	movlw	1
 10913  0D96  3188  20B6         	fcall	_Led_SetLedStatus
 10914                           
 10915                           ;std_ser.c: 85: LedBehaviourSts = ((UINT8)(0));
 10916  0D98  01F9               	clrf	_LedBehaviourSts
 10917                           
 10918                           ;std_ser.c: 86: break;
 10919  0D99  0008               	return
 10920  0D9A                     l3927:	
 10921                           ;std_ser.c: 88: case ((UINT8)(1)):
 10922                           
 10923                           
 10924                           ;std_ser.c: 90: Led_SetLedPulseTime(1u,50);
 10925  0D9A  3032               	movlw	50
 10926  0D9B  00F4               	movwf	Led_SetLedPulseTime@PulseTimeMs
 10927  0D9C  3000               	movlw	0
 10928  0D9D  00F5               	movwf	Led_SetLedPulseTime@PulseTimeMs+1
 10929  0D9E  3001               	movlw	1
 10930  0D9F  3188  20D4         	fcall	_Led_SetLedPulseTime
 10931                           
 10932                           ;std_ser.c: 92: LedBehaviourSts = ((UINT8)(1));
 10933  0DA1  01F9               	clrf	_LedBehaviourSts
 10934  0DA2  0AF9               	incf	_LedBehaviourSts,f
 10935                           
 10936                           ;std_ser.c: 93: break;
 10937  0DA3  0008               	return
 10938  0DA4                     l3931:	
 10939                           ;std_ser.c: 95: case ((UINT8)(2)):
 10940                           
 10941                           
 10942                           ;std_ser.c: 97: Led_SetLedBlinkTime(1u,50,950);
 10943  0DA4  3032               	movlw	50
 10944  0DA5  0020               	movlb	0	; select bank0
 10945  0DA6  00A0               	movwf	Led_SetLedBlinkTime@OnTimeMs
 10946  0DA7  3000               	movlw	0
 10947  0DA8  00A1               	movwf	Led_SetLedBlinkTime@OnTimeMs+1
 10948  0DA9  30B6               	movlw	182
 10949  0DAA  00A2               	movwf	Led_SetLedBlinkTime@OffTimeMs
 10950  0DAB  3003               	movlw	3
 10951  0DAC  00A3               	movwf	Led_SetLedBlinkTime@OffTimeMs+1
 10952  0DAD  3001               	movlw	1
 10953  0DAE  3189  2196  318D   	fcall	_Led_SetLedBlinkTime
 10954                           
 10955                           ;std_ser.c: 99: Led_SetLedStatus(1u,LED_STS_BLINK);
 10956  0DB1  3002               	movlw	2
 10957  0DB2  0020               	movlb	0	; select bank0
 10958  0DB3  00A4               	movwf	??_SetLedBehavSts
 10959  0DB4  0824               	movf	??_SetLedBehavSts,w
 10960  0DB5  00F4               	movwf	Led_SetLedStatus@LedSts
 10961  0DB6  3001               	movlw	1
 10962  0DB7  3188  20B6         	fcall	_Led_SetLedStatus
 10963                           
 10964                           ;std_ser.c: 101: LedBehaviourSts = ((UINT8)(2));
 10965  0DB9  3002               	movlw	2
 10966  0DBA  0020               	movlb	0	; select bank0
 10967  0DBB  00A4               	movwf	??_SetLedBehavSts
 10968  0DBC  0824               	movf	??_SetLedBehavSts,w
 10969  0DBD  00F9               	movwf	_LedBehaviourSts
 10970                           
 10971                           ;std_ser.c: 102: break;
 10972  0DBE  0008               	return
 10973  0DBF                     l3935:	
 10974                           ;std_ser.c: 104: case ((UINT8)(3)):
 10975                           
 10976                           
 10977                           ;std_ser.c: 106: LedBehaviourSts = ((UINT8)(3));
 10978  0DBF  3003               	movlw	3
 10979  0DC0  00A4               	movwf	??_SetLedBehavSts
 10980  0DC1  0824               	movf	??_SetLedBehavSts,w
 10981  0DC2  00F9               	movwf	_LedBehaviourSts
 10982                           
 10983                           ;std_ser.c: 111: }
 10984                           
 10985                           ;std_ser.c: 110: break;
 10986                           
 10987                           ;std_ser.c: 109: default:
 10988                           
 10989                           ;std_ser.c: 107: break;
 10990  0DC3  0008               	return
 10991  0DC4                     l3939:	
 10992  0DC4  0825               	movf	SetLedBehavSts@LedBehav,w
 10993                           
 10994                           ; Switch size 1, requested type "space"
 10995                           ; Number of cases is 4, Range of values is 0 to 3
 10996                           ; switch strategies available:
 10997                           ; Name         Instructions Cycles
 10998                           ; simple_byte           13     7 (average)
 10999                           ; direct_byte           14     6 (fixed)
 11000                           ; jumptable            260     6 (fixed)
 11001                           ;	Chosen strategy is simple_byte
 11002  0DC5  3A00               	xorlw	0	; case 0
 11003  0DC6  1903               	skipnz
 11004  0DC7  2D94               	goto	l3923
 11005  0DC8  3A01               	xorlw	1	; case 1
 11006  0DC9  1903               	skipnz
 11007  0DCA  2D9A               	goto	l3927
 11008  0DCB  3A03               	xorlw	3	; case 2
 11009  0DCC  1903               	skipnz
 11010  0DCD  2DA4               	goto	l3931
 11011  0DCE  3A01               	xorlw	1	; case 3
 11012  0DCF  1903               	skipnz
 11013  0DD0  2DBF               	goto	l3935
 11014  0DD1  2DD2               	goto	l697
 11015  0DD2                     l697:	
 11016  0DD2  0008               	return
 11017  0DD3                     __end_of_SetLedBehavSts:	
 11018                           
 11019                           	psect	text47
 11020  08D4                     __ptext47:	
 11021 ;; *************** function _Led_SetLedPulseTime *****************
 11022 ;; Defined at:
 11023 ;;		line 204 in file "../../../Framework/MercuryFwk/Source/c/03_Sml/02_Ssl/led.c"
 11024 ;; Parameters:    Size  Location     Type
 11025 ;;  Led             1    wreg     unsigned char 
 11026 ;;  PulseTimeMs     2    4[COMMON] unsigned short 
 11027 ;; Auto vars:     Size  Location     Type
 11028 ;;  Led             1    0[BANK0 ] unsigned char 
 11029 ;; Return value:  Size  Location     Type
 11030 ;;                  1    wreg      void 
 11031 ;; Registers used:
 11032 ;;		wreg, fsr0l, fsr0h, status,2, status,0
 11033 ;; Tracked objects:
 11034 ;;		On entry : 0/0
 11035 ;;		On exit  : 0/0
 11036 ;;		Unchanged: 0/0
 11037 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11038 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11039 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11040 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11041 ;;      Totals:         2       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11042 ;;Total ram usage:        3 bytes
 11043 ;; Hardware stack levels used:    1
 11044 ;; Hardware stack levels required when called:    2
 11045 ;; This function calls:
 11046 ;;		Nothing
 11047 ;; This function is called by:
 11048 ;;		_SetLedBehavSts
 11049 ;; This function uses a non-reentrant model
 11050 ;;
 11051                           
 11052                           
 11053                           ;psect for function _Led_SetLedPulseTime
 11054  08D4                     _Led_SetLedPulseTime:	
 11055                           
 11056                           ;incstack = 0
 11057                           ; Regs used in _Led_SetLedPulseTime: [wreg-fsr0h+status,2+status,0]
 11058                           ;Led_SetLedPulseTime@Led stored from wreg
 11059  08D4  0020               	movlb	0	; select bank0
 11060  08D5  00A0               	movwf	Led_SetLedPulseTime@Led
 11061                           
 11062                           ;led.c: 207: switch (Led)
 11063  08D6  28DD               	goto	l3857
 11064  08D7                     l3853:	
 11065                           ;led.c: 208: {
 11066                           ;led.c: 209: case 1u:
 11067                           
 11068                           
 11069                           ;led.c: 210: Led1Pulse.LedPulseTimeMs = PulseTimeMs;
 11070  08D7  0875               	movf	Led_SetLedPulseTime@PulseTimeMs+1,w
 11071  08D8  0021               	movlb	1	; select bank1
 11072  08D9  00DF               	movwf	((_Led1Pulse+1)^(0+128)+4)
 11073  08DA  0874               	movf	Led_SetLedPulseTime@PulseTimeMs,w
 11074  08DB  00DE               	movwf	(_Led1Pulse^(0+128)+4)
 11075                           
 11076                           ;led.c: 215: }
 11077                           
 11078                           ;led.c: 214: break;
 11079                           
 11080                           ;led.c: 213: default:
 11081                           
 11082                           ;led.c: 211: break;
 11083  08DC  0008               	return
 11084  08DD                     l3857:	
 11085  08DD  0020               	movlb	0	; select bank0
 11086  08DE  0820               	movf	Led_SetLedPulseTime@Led,w
 11087                           
 11088                           ; Switch size 1, requested type "space"
 11089                           ; Number of cases is 1, Range of values is 1 to 1
 11090                           ; switch strategies available:
 11091                           ; Name         Instructions Cycles
 11092                           ; simple_byte            4     3 (average)
 11093                           ; direct_byte           11     9 (fixed)
 11094                           ; jumptable            263     9 (fixed)
 11095                           ;	Chosen strategy is simple_byte
 11096  08DF  3A01               	xorlw	1	; case 1
 11097  08E0  1903               	skipnz
 11098  08E1  28D7               	goto	l3853
 11099  08E2  28E3               	goto	l603
 11100  08E3                     l603:	
 11101  08E3  0008               	return
 11102  08E4                     __end_of_Led_SetLedPulseTime:	
 11103                           
 11104                           	psect	text48
 11105  0996                     __ptext48:	
 11106 ;; *************** function _Led_SetLedBlinkTime *****************
 11107 ;; Defined at:
 11108 ;;		line 180 in file "../../../Framework/MercuryFwk/Source/c/03_Sml/02_Ssl/led.c"
 11109 ;; Parameters:    Size  Location     Type
 11110 ;;  Led             1    wreg     unsigned char 
 11111 ;;  OnTimeMs        2    0[BANK0 ] unsigned short 
 11112 ;;  OffTimeMs       2    2[BANK0 ] unsigned short 
 11113 ;; Auto vars:     Size  Location     Type
 11114 ;;  Led             1    4[COMMON] unsigned char 
 11115 ;; Return value:  Size  Location     Type
 11116 ;;                  1    wreg      void 
 11117 ;; Registers used:
 11118 ;;		wreg, fsr0l, fsr0h, status,2, status,0
 11119 ;; Tracked objects:
 11120 ;;		On entry : 0/0
 11121 ;;		On exit  : 0/0
 11122 ;;		Unchanged: 0/0
 11123 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11124 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11125 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11126 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11127 ;;      Totals:         1       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11128 ;;Total ram usage:        5 bytes
 11129 ;; Hardware stack levels used:    1
 11130 ;; Hardware stack levels required when called:    2
 11131 ;; This function calls:
 11132 ;;		Nothing
 11133 ;; This function is called by:
 11134 ;;		_SetLedBehavSts
 11135 ;; This function uses a non-reentrant model
 11136 ;;
 11137                           
 11138                           
 11139                           ;psect for function _Led_SetLedBlinkTime
 11140  0996                     _Led_SetLedBlinkTime:	
 11141                           
 11142                           ;incstack = 0
 11143                           ; Regs used in _Led_SetLedBlinkTime: [wreg-fsr0h+status,2+status,0]
 11144                           ;Led_SetLedBlinkTime@Led stored from wreg
 11145  0996  00F4               	movwf	Led_SetLedBlinkTime@Led
 11146                           
 11147                           ;led.c: 183: switch (Led)
 11148  0997  29A9               	goto	l3849
 11149  0998                     l3845:	
 11150                           ;led.c: 184: {
 11151                           ;led.c: 185: case 1u:
 11152                           
 11153                           
 11154                           ;led.c: 186: Led1Blink.LedOnTimeMs = OnTimeMs;
 11155  0998  0020               	movlb	0	; select bank0
 11156  0999  0821               	movf	Led_SetLedBlinkTime@OnTimeMs+1,w
 11157  099A  0021               	movlb	1	; select bank1
 11158  099B  00D6               	movwf	((_Led1Blink+1)^(0+128)+4)
 11159  099C  0020               	movlb	0	; select bank0
 11160  099D  0820               	movf	Led_SetLedBlinkTime@OnTimeMs,w
 11161  099E  0021               	movlb	1	; select bank1
 11162  099F  00D5               	movwf	(_Led1Blink^(0+128)+4)
 11163                           
 11164                           ;led.c: 187: Led1Blink.LedOffTimeMs = OffTimeMs;
 11165  09A0  0020               	movlb	0	; select bank0
 11166  09A1  0823               	movf	Led_SetLedBlinkTime@OffTimeMs+1,w
 11167  09A2  0021               	movlb	1	; select bank1
 11168  09A3  00D8               	movwf	((_Led1Blink+1)^(0+128)+6)
 11169  09A4  0020               	movlb	0	; select bank0
 11170  09A5  0822               	movf	Led_SetLedBlinkTime@OffTimeMs,w
 11171  09A6  0021               	movlb	1	; select bank1
 11172  09A7  00D7               	movwf	(_Led1Blink^(0+128)+6)
 11173                           
 11174                           ;led.c: 192: }
 11175                           
 11176                           ;led.c: 191: break;
 11177                           
 11178                           ;led.c: 190: default:
 11179                           
 11180                           ;led.c: 188: break;
 11181  09A8  0008               	return
 11182  09A9                     l3849:	
 11183  09A9  0874               	movf	Led_SetLedBlinkTime@Led,w
 11184                           
 11185                           ; Switch size 1, requested type "space"
 11186                           ; Number of cases is 1, Range of values is 1 to 1
 11187                           ; switch strategies available:
 11188                           ; Name         Instructions Cycles
 11189                           ; simple_byte            4     3 (average)
 11190                           ; direct_byte           11     9 (fixed)
 11191                           ; jumptable            263     9 (fixed)
 11192                           ;	Chosen strategy is simple_byte
 11193  09AA  3A01               	xorlw	1	; case 1
 11194  09AB  1903               	skipnz
 11195  09AC  2998               	goto	l3845
 11196  09AD  29AE               	goto	l596
 11197  09AE                     l596:	
 11198  09AE  0008               	return
 11199  09AF                     __end_of_Led_SetLedBlinkTime:	
 11200                           
 11201                           	psect	text49
 11202  08A9                     __ptext49:	
 11203 ;; *************** function _LowPowerMode *****************
 11204 ;; Defined at:
 11205 ;;		line 161 in file "../../../Framework/MercuryFwk/Source/c/03_Sml/02_Ssl/std_ser.c"
 11206 ;; Parameters:    Size  Location     Type
 11207 ;;		None
 11208 ;; Auto vars:     Size  Location     Type
 11209 ;;		None
 11210 ;; Return value:  Size  Location     Type
 11211 ;;                  1    wreg      void 
 11212 ;; Registers used:
 11213 ;;		wreg, status,2, status,0, pclath, cstack
 11214 ;; Tracked objects:
 11215 ;;		On entry : 0/0
 11216 ;;		On exit  : 0/0
 11217 ;;		Unchanged: 0/0
 11218 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11219 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11220 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11221 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11222 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11223 ;;Total ram usage:        0 bytes
 11224 ;; Hardware stack levels used:    1
 11225 ;; Hardware stack levels required when called:    3
 11226 ;; This function calls:
 11227 ;;		_Mcu_SetWdgSts
 11228 ;; This function is called by:
 11229 ;;		_StdS_ManageStdServices
 11230 ;; This function uses a non-reentrant model
 11231 ;;
 11232                           
 11233                           
 11234                           ;psect for function _LowPowerMode
 11235  08A9                     _LowPowerMode:	
 11236                           
 11237                           ;std_ser.c: 164: LATA = 0x00;
 11238                           
 11239                           ;incstack = 0
 11240                           ; Regs used in _LowPowerMode: [wreg+status,2+status,0+pclath+cstack]
 11241  08A9  0022               	movlb	2	; select bank2
 11242  08AA  018C               	clrf	12	;volatile
 11243                           
 11244                           ;std_ser.c: 166: LATB = 0x00;
 11245  08AB  018D               	clrf	13	;volatile
 11246                           
 11247                           ;std_ser.c: 168: LATC = 0x00;
 11248  08AC  018E               	clrf	14	;volatile
 11249                           
 11250                           ;std_ser.c: 170: Mcu_SetWdgSts(((UINT8)(0)));
 11251  08AD  3000               	movlw	0
 11252  08AE  3188  2033  3188   	fcall	_Mcu_SetWdgSts
 11253  08B1  0063               	sleep	;# 
 11254                           
 11255                           ;std_ser.c: 177: Mcu_SetWdgSts(((UINT8)(1)));
 11256  08B2  3001               	movlw	1
 11257  08B3  3188  2033         	fcall	_Mcu_SetWdgSts
 11258  08B5  0008               	return
 11259  08B6                     __end_of_LowPowerMode:	
 11260                           
 11261                           	psect	text50
 11262  0833                     __ptext50:	
 11263 ;; *************** function _Mcu_SetWdgSts *****************
 11264 ;; Defined at:
 11265 ;;		line 211 in file "../../../Framework/MercuryFwk/Source/c/01_Hal/02_Drv/mcu_drv.c"
 11266 ;; Parameters:    Size  Location     Type
 11267 ;;  WdgSts          1    wreg     unsigned char 
 11268 ;; Auto vars:     Size  Location     Type
 11269 ;;  WdgSts          1    4[COMMON] unsigned char 
 11270 ;; Return value:  Size  Location     Type
 11271 ;;                  1    wreg      void 
 11272 ;; Registers used:
 11273 ;;		wreg, status,0
 11274 ;; Tracked objects:
 11275 ;;		On entry : 0/0
 11276 ;;		On exit  : 0/0
 11277 ;;		Unchanged: 0/0
 11278 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11279 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11280 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11281 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11282 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11283 ;;Total ram usage:        1 bytes
 11284 ;; Hardware stack levels used:    1
 11285 ;; Hardware stack levels required when called:    2
 11286 ;; This function calls:
 11287 ;;		Nothing
 11288 ;; This function is called by:
 11289 ;;		_LowPowerMode
 11290 ;;		_Wdg_MainTask
 11291 ;; This function uses a non-reentrant model
 11292 ;;
 11293                           
 11294                           
 11295                           ;psect for function _Mcu_SetWdgSts
 11296  0833                     _Mcu_SetWdgSts:	
 11297                           
 11298                           ;incstack = 0
 11299                           ; Regs used in _Mcu_SetWdgSts: [wreg+status,0]
 11300                           ;Mcu_SetWdgSts@WdgSts stored from wreg
 11301  0833  00F4               	movwf	Mcu_SetWdgSts@WdgSts
 11302                           
 11303                           ;mcu_drv.c: 214: WDTCONbits.SWDTEN = WdgSts;
 11304  0834  0C74               	rrf	Mcu_SetWdgSts@WdgSts,w
 11305  0835  0021               	movlb	1	; select bank1
 11306  0836  1C03               	skipc
 11307  0837  1017               	bcf	23,0	;volatile
 11308  0838  1803               	skipnc
 11309  0839  1417               	bsf	23,0	;volatile
 11310  083A  0008               	return
 11311  083B                     __end_of_Mcu_SetWdgSts:	
 11312                           
 11313                           	psect	text51
 11314  097D                     __ptext51:	
 11315 ;; *************** function _GetDieTemperature *****************
 11316 ;; Defined at:
 11317 ;;		line 188 in file "../../../Framework/MercuryFwk/Source/c/03_Sml/02_Ssl/std_ser.c"
 11318 ;; Parameters:    Size  Location     Type
 11319 ;;		None
 11320 ;; Auto vars:     Size  Location     Type
 11321 ;;  DieTempRes      2    5[BANK0 ] unsigned short 
 11322 ;; Return value:  Size  Location     Type
 11323 ;;                  2    3[BANK0 ] unsigned short 
 11324 ;; Registers used:
 11325 ;;		wreg, status,2, status,0, pclath, cstack
 11326 ;; Tracked objects:
 11327 ;;		On entry : 0/0
 11328 ;;		On exit  : 0/0
 11329 ;;		Unchanged: 0/0
 11330 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11331 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11332 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11333 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11334 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11335 ;;Total ram usage:        4 bytes
 11336 ;; Hardware stack levels used:    1
 11337 ;; Hardware stack levels required when called:    3
 11338 ;; This function calls:
 11339 ;;		_Adc_GetConvResult
 11340 ;;		_Adc_GetConvSts
 11341 ;;		_Adc_SelectChannel
 11342 ;;		_Adc_StartConversion
 11343 ;; This function is called by:
 11344 ;;		_StdS_ManageStdServices
 11345 ;; This function uses a non-reentrant model
 11346 ;;
 11347                           
 11348                           
 11349                           ;psect for function _GetDieTemperature
 11350  097D                     _GetDieTemperature:	
 11351                           
 11352                           ;std_ser.c: 190: UINT16 DieTempRes;
 11353                           ;std_ser.c: 193: Adc_SelectChannel(((UINT8)(29)));
 11354                           
 11355                           ;incstack = 0
 11356                           ; Regs used in _GetDieTemperature: [wreg+status,2+status,0+pclath+cstack]
 11357  097D  301D               	movlw	29
 11358  097E  3188  2085  3189   	fcall	_Adc_SelectChannel
 11359                           
 11360                           ;std_ser.c: 195: Adc_StartConversion();
 11361  0981  3188  2011  3189   	fcall	_Adc_StartConversion
 11362  0984                     l3961:	
 11363                           ;std_ser.c: 197: while (Adc_GetConvSts() == AdcConvInProgress);
 11364                           
 11365  0984  3188  2017  3189   	fcall	_Adc_GetConvSts
 11366  0987  3A00               	xorlw	0
 11367  0988  1903               	skipnz
 11368  0989  2984               	goto	l3961
 11369                           
 11370                           ;std_ser.c: 199: DieTempRes = Adc_GetConvResult();
 11371  098A  3188  20C4         	fcall	_Adc_GetConvResult
 11372  098C  0875               	movf	?_Adc_GetConvResult+1,w
 11373  098D  0020               	movlb	0	; select bank0
 11374  098E  00A6               	movwf	GetDieTemperature@DieTempRes+1
 11375  098F  0874               	movf	?_Adc_GetConvResult,w
 11376  0990  00A5               	movwf	GetDieTemperature@DieTempRes
 11377                           
 11378                           ;std_ser.c: 201: return DieTempRes;
 11379  0991  0826               	movf	GetDieTemperature@DieTempRes+1,w
 11380  0992  00A4               	movwf	?_GetDieTemperature+1
 11381  0993  0825               	movf	GetDieTemperature@DieTempRes,w
 11382  0994  00A3               	movwf	?_GetDieTemperature
 11383  0995  0008               	return
 11384  0996                     __end_of_GetDieTemperature:	
 11385                           
 11386                           	psect	text52
 11387  0914                     __ptext52:	
 11388 ;; *************** function _ControlLedDirect *****************
 11389 ;; Defined at:
 11390 ;;		line 122 in file "../../../Framework/MercuryFwk/Source/c/03_Sml/02_Ssl/std_ser.c"
 11391 ;; Parameters:    Size  Location     Type
 11392 ;;		None
 11393 ;; Auto vars:     Size  Location     Type
 11394 ;;		None
 11395 ;; Return value:  Size  Location     Type
 11396 ;;                  1    wreg      void 
 11397 ;; Registers used:
 11398 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
 11399 ;; Tracked objects:
 11400 ;;		On entry : 0/0
 11401 ;;		On exit  : 0/0
 11402 ;;		Unchanged: 0/0
 11403 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11404 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11405 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11406 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11407 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11408 ;;Total ram usage:        0 bytes
 11409 ;; Hardware stack levels used:    1
 11410 ;; Hardware stack levels required when called:    3
 11411 ;; This function calls:
 11412 ;;		_Led_SetLedStatus
 11413 ;; This function is called by:
 11414 ;;		_StdS_ManageStdServices
 11415 ;; This function uses a non-reentrant model
 11416 ;;
 11417                           
 11418                           
 11419                           ;psect for function _ControlLedDirect
 11420  0914                     _ControlLedDirect:	
 11421                           
 11422                           ;std_ser.c: 125: if (LedBehaviourSts == ((UINT8)(3)))
 11423                           
 11424                           ;incstack = 0
 11425                           ; Regs used in _ControlLedDirect: [wreg-fsr0h+status,2+status,0+pclath+cstack]
 11426  0914  3003               	movlw	3
 11427  0915  0679               	xorwf	_LedBehaviourSts,w
 11428  0916  1D03               	btfss	3,2
 11429  0917  0008               	return
 11430                           
 11431                           ;std_ser.c: 126: {
 11432                           ;std_ser.c: 128: if (CmdBuffer[((UINT8)(1))] == ((UINT8)(1)))
 11433  0918  0023               	movlb	3	; select bank3
 11434  0919  0321               	decf	(_CmdBuffer^(0+384)+1),w
 11435  091A  1D03               	btfss	3,2
 11436  091B  2922               	goto	l3955
 11437                           
 11438                           ;std_ser.c: 129: {
 11439                           ;std_ser.c: 130: Led_SetLedStatus(1u,LED_STS_ON);
 11440  091C  01F4               	clrf	Led_SetLedStatus@LedSts
 11441  091D  0AF4               	incf	Led_SetLedStatus@LedSts,f
 11442  091E  3001               	movlw	1
 11443  091F  3188  20B6         	fcall	_Led_SetLedStatus
 11444                           
 11445                           ;std_ser.c: 131: }
 11446  0921  0008               	return
 11447  0922                     l3955:	
 11448                           
 11449                           ;std_ser.c: 132: else
 11450                           ;std_ser.c: 133: {
 11451                           ;std_ser.c: 134: Led_SetLedStatus(1u,LED_STS_OFF);
 11452  0922  01F4               	clrf	Led_SetLedStatus@LedSts
 11453  0923  3001               	movlw	1
 11454  0924  3188  20B6         	fcall	_Led_SetLedStatus
 11455  0926  0008               	return
 11456  0927                     __end_of_ControlLedDirect:	
 11457                           
 11458                           	psect	text53
 11459  08B6                     __ptext53:	
 11460 ;; *************** function _Led_SetLedStatus *****************
 11461 ;; Defined at:
 11462 ;;		line 156 in file "../../../Framework/MercuryFwk/Source/c/03_Sml/02_Ssl/led.c"
 11463 ;; Parameters:    Size  Location     Type
 11464 ;;  Led             1    wreg     unsigned char 
 11465 ;;  LedSts          1    4[COMMON] unsigned char 
 11466 ;; Auto vars:     Size  Location     Type
 11467 ;;  Led             1    0[BANK0 ] unsigned char 
 11468 ;; Return value:  Size  Location     Type
 11469 ;;                  1    wreg      void 
 11470 ;; Registers used:
 11471 ;;		wreg, fsr0l, fsr0h, status,2, status,0
 11472 ;; Tracked objects:
 11473 ;;		On entry : 0/0
 11474 ;;		On exit  : 0/0
 11475 ;;		Unchanged: 0/0
 11476 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11477 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11478 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11479 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11480 ;;      Totals:         2       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11481 ;;Total ram usage:        3 bytes
 11482 ;; Hardware stack levels used:    1
 11483 ;; Hardware stack levels required when called:    2
 11484 ;; This function calls:
 11485 ;;		Nothing
 11486 ;; This function is called by:
 11487 ;;		_LedPulseStateMachine
 11488 ;;		_I2cSlv_I2cDrvHandle
 11489 ;;		_SetLedBehavSts
 11490 ;;		_ControlLedDirect
 11491 ;; This function uses a non-reentrant model
 11492 ;;
 11493                           
 11494                           
 11495                           ;psect for function _Led_SetLedStatus
 11496  08B6                     _Led_SetLedStatus:	
 11497                           
 11498                           ;incstack = 0
 11499                           ; Regs used in _Led_SetLedStatus: [wreg-fsr0h+status,2+status,0]
 11500                           ;Led_SetLedStatus@Led stored from wreg
 11501  08B6  0020               	movlb	0	; select bank0
 11502  08B7  00A0               	movwf	Led_SetLedStatus@Led
 11503                           
 11504                           ;led.c: 159: switch (Led)
 11505  08B8  28BE               	goto	l3841
 11506  08B9                     l3837:	
 11507                           ;led.c: 160: {
 11508                           ;led.c: 161: case 1u:
 11509                           
 11510                           
 11511                           ;led.c: 162: Led1Sts = LedSts;
 11512  08B9  0874               	movf	Led_SetLedStatus@LedSts,w
 11513  08BA  00F5               	movwf	??_Led_SetLedStatus
 11514  08BB  0875               	movf	??_Led_SetLedStatus,w
 11515  08BC  00EC               	movwf	_Led1Sts
 11516                           
 11517                           ;led.c: 167: }
 11518                           
 11519                           ;led.c: 166: break;
 11520                           
 11521                           ;led.c: 165: default:
 11522                           
 11523                           ;led.c: 163: break;
 11524  08BD  0008               	return
 11525  08BE                     l3841:	
 11526  08BE  0820               	movf	Led_SetLedStatus@Led,w
 11527                           
 11528                           ; Switch size 1, requested type "space"
 11529                           ; Number of cases is 1, Range of values is 1 to 1
 11530                           ; switch strategies available:
 11531                           ; Name         Instructions Cycles
 11532                           ; simple_byte            4     3 (average)
 11533                           ; direct_byte           11     9 (fixed)
 11534                           ; jumptable            263     9 (fixed)
 11535                           ;	Chosen strategy is simple_byte
 11536  08BF  3A01               	xorlw	1	; case 1
 11537  08C0  1903               	skipnz
 11538  08C1  28B9               	goto	l3837
 11539  08C2  28C3               	goto	l589
 11540  08C3                     l589:	
 11541  08C3  0008               	return
 11542  08C4                     __end_of_Led_SetLedStatus:	
 11543                           
 11544                           	psect	text54
 11545  080F                     __ptext54:	
 11546 ;; *************** function _BoardReset *****************
 11547 ;; Defined at:
 11548 ;;		line 147 in file "../../../Framework/MercuryFwk/Source/c/03_Sml/02_Ssl/std_ser.c"
 11549 ;; Parameters:    Size  Location     Type
 11550 ;;		None
 11551 ;; Auto vars:     Size  Location     Type
 11552 ;;		None
 11553 ;; Return value:  Size  Location     Type
 11554 ;;                  1    wreg      void 
 11555 ;; Registers used:
 11556 ;;		None
 11557 ;; Tracked objects:
 11558 ;;		On entry : 0/0
 11559 ;;		On exit  : 0/0
 11560 ;;		Unchanged: 0/0
 11561 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11562 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11563 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11564 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11565 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11566 ;;Total ram usage:        0 bytes
 11567 ;; Hardware stack levels used:    1
 11568 ;; Hardware stack levels required when called:    2
 11569 ;; This function calls:
 11570 ;;		Nothing
 11571 ;; This function is called by:
 11572 ;;		_StdS_ManageStdServices
 11573 ;; This function uses a non-reentrant model
 11574 ;;
 11575                           
 11576                           
 11577                           ;psect for function _BoardReset
 11578  080F                     _BoardReset:	
 11579                           
 11580                           ;incstack = 0
 11581                           ; Regs used in _BoardReset: []
 11582  080F  0001               	reset	;# 
 11583  0810  0008               	return
 11584  0811                     __end_of_BoardReset:	
 11585                           
 11586                           	psect	text55
 11587  0C1F                     __ptext55:	
 11588 ;; *************** function _SetDigitalOutSts *****************
 11589 ;; Defined at:
 11590 ;;		line 429 in file "../Source/c/04_App/sb810_app.c"
 11591 ;; Parameters:    Size  Location     Type
 11592 ;;  Ch              1    wreg     unsigned char 
 11593 ;; Auto vars:     Size  Location     Type
 11594 ;;  Ch              1    4[COMMON] unsigned char 
 11595 ;; Return value:  Size  Location     Type
 11596 ;;                  1    wreg      void 
 11597 ;; Registers used:
 11598 ;;		wreg, fsr0l, fsr0h, status,2, status,0
 11599 ;; Tracked objects:
 11600 ;;		On entry : 0/0
 11601 ;;		On exit  : 0/0
 11602 ;;		Unchanged: 0/0
 11603 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11604 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11605 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11606 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11607 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11608 ;;Total ram usage:        1 bytes
 11609 ;; Hardware stack levels used:    1
 11610 ;; Hardware stack levels required when called:    2
 11611 ;; This function calls:
 11612 ;;		Nothing
 11613 ;; This function is called by:
 11614 ;;		_ManageProtocol
 11615 ;; This function uses a non-reentrant model
 11616 ;;
 11617                           
 11618                           
 11619                           ;psect for function _SetDigitalOutSts
 11620  0C1F                     _SetDigitalOutSts:	
 11621                           
 11622                           ;incstack = 0
 11623                           ; Regs used in _SetDigitalOutSts: [wreg-fsr0h+status,2+status,0]
 11624                           ;SetDigitalOutSts@Ch stored from wreg
 11625  0C1F  00F4               	movwf	SetDigitalOutSts@Ch
 11626                           
 11627                           ;sb810_app.c: 431: switch (Ch)
 11628  0C20  2C41               	goto	l3067
 11629  0C21                     l3057:	
 11630                           ;sb810_app.c: 432: {
 11631                           ;sb810_app.c: 433: case 0u:
 11632                           
 11633                           
 11634                           ;sb810_app.c: 434: LATCbits.LATC2 = CmdBuffer[((UINT8)(2))];
 11635  0C21  0023               	movlb	3	; select bank3
 11636  0C22  0C22               	rrf	(_CmdBuffer^(0+384)+2),w
 11637  0C23  0022               	movlb	2	; select bank2
 11638  0C24  1C03               	skipc
 11639  0C25  110E               	bcf	14,2	;volatile
 11640  0C26  1803               	skipnc
 11641  0C27  150E               	bsf	14,2	;volatile
 11642                           
 11643                           ;sb810_app.c: 435: break;
 11644  0C28  0008               	return
 11645  0C29                     l3059:	
 11646                           ;sb810_app.c: 437: case 1u:
 11647                           
 11648                           
 11649                           ;sb810_app.c: 438: LATCbits.LATC1 = CmdBuffer[((UINT8)(2))];
 11650  0C29  0023               	movlb	3	; select bank3
 11651  0C2A  0C22               	rrf	(_CmdBuffer^(0+384)+2),w
 11652  0C2B  0022               	movlb	2	; select bank2
 11653  0C2C  1C03               	skipc
 11654  0C2D  108E               	bcf	14,1	;volatile
 11655  0C2E  1803               	skipnc
 11656  0C2F  148E               	bsf	14,1	;volatile
 11657                           
 11658                           ;sb810_app.c: 439: break;
 11659  0C30  0008               	return
 11660  0C31                     l3061:	
 11661                           ;sb810_app.c: 441: case 2u:
 11662                           
 11663                           
 11664                           ;sb810_app.c: 442: LATAbits.LATA4 = CmdBuffer[((UINT8)(2))];
 11665  0C31  0023               	movlb	3	; select bank3
 11666  0C32  0C22               	rrf	(_CmdBuffer^(0+384)+2),w
 11667  0C33  0022               	movlb	2	; select bank2
 11668  0C34  1C03               	skipc
 11669  0C35  120C               	bcf	12,4	;volatile
 11670  0C36  1803               	skipnc
 11671  0C37  160C               	bsf	12,4	;volatile
 11672                           
 11673                           ;sb810_app.c: 443: break;
 11674  0C38  0008               	return
 11675  0C39                     l3063:	
 11676                           ;sb810_app.c: 445: case 3u:
 11677                           
 11678                           
 11679                           ;sb810_app.c: 446: LATAbits.LATA5 = CmdBuffer[((UINT8)(2))];
 11680  0C39  0023               	movlb	3	; select bank3
 11681  0C3A  0C22               	rrf	(_CmdBuffer^(0+384)+2),w
 11682  0C3B  0022               	movlb	2	; select bank2
 11683  0C3C  1C03               	skipc
 11684  0C3D  128C               	bcf	12,5	;volatile
 11685  0C3E  1803               	skipnc
 11686  0C3F  168C               	bsf	12,5	;volatile
 11687                           
 11688                           ;sb810_app.c: 451: }
 11689                           
 11690                           ;sb810_app.c: 450: break;
 11691                           
 11692                           ;sb810_app.c: 449: default:
 11693                           
 11694                           ;sb810_app.c: 447: break;
 11695  0C40  0008               	return
 11696  0C41                     l3067:	
 11697  0C41  0874               	movf	SetDigitalOutSts@Ch,w
 11698                           
 11699                           ; Switch size 1, requested type "space"
 11700                           ; Number of cases is 4, Range of values is 0 to 3
 11701                           ; switch strategies available:
 11702                           ; Name         Instructions Cycles
 11703                           ; simple_byte           13     7 (average)
 11704                           ; direct_byte           14     6 (fixed)
 11705                           ; jumptable            260     6 (fixed)
 11706                           ;	Chosen strategy is simple_byte
 11707  0C42  3A00               	xorlw	0	; case 0
 11708  0C43  1903               	skipnz
 11709  0C44  2C21               	goto	l3057
 11710  0C45  3A01               	xorlw	1	; case 1
 11711  0C46  1903               	skipnz
 11712  0C47  2C29               	goto	l3059
 11713  0C48  3A03               	xorlw	3	; case 2
 11714  0C49  1903               	skipnz
 11715  0C4A  2C31               	goto	l3061
 11716  0C4B  3A01               	xorlw	1	; case 3
 11717  0C4C  1903               	skipnz
 11718  0C4D  2C39               	goto	l3063
 11719  0C4E  2C4F               	goto	l927
 11720  0C4F                     l927:	
 11721  0C4F  0008               	return
 11722  0C50                     __end_of_SetDigitalOutSts:	
 11723                           
 11724                           	psect	text56
 11725  0BEE                     __ptext56:	
 11726 ;; *************** function _SetDigitalDir *****************
 11727 ;; Defined at:
 11728 ;;		line 396 in file "../Source/c/04_App/sb810_app.c"
 11729 ;; Parameters:    Size  Location     Type
 11730 ;;  Ch              1    wreg     unsigned char 
 11731 ;; Auto vars:     Size  Location     Type
 11732 ;;  Ch              1    4[COMMON] unsigned char 
 11733 ;; Return value:  Size  Location     Type
 11734 ;;                  1    wreg      void 
 11735 ;; Registers used:
 11736 ;;		wreg, fsr0l, fsr0h, status,2, status,0
 11737 ;; Tracked objects:
 11738 ;;		On entry : 0/0
 11739 ;;		On exit  : 0/0
 11740 ;;		Unchanged: 0/0
 11741 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11742 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11743 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11744 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11745 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11746 ;;Total ram usage:        1 bytes
 11747 ;; Hardware stack levels used:    1
 11748 ;; Hardware stack levels required when called:    2
 11749 ;; This function calls:
 11750 ;;		Nothing
 11751 ;; This function is called by:
 11752 ;;		_ManageProtocol
 11753 ;; This function uses a non-reentrant model
 11754 ;;
 11755                           
 11756                           
 11757                           ;psect for function _SetDigitalDir
 11758  0BEE                     _SetDigitalDir:	
 11759                           
 11760                           ;incstack = 0
 11761                           ; Regs used in _SetDigitalDir: [wreg-fsr0h+status,2+status,0]
 11762                           ;SetDigitalDir@Ch stored from wreg
 11763  0BEE  00F4               	movwf	SetDigitalDir@Ch
 11764                           
 11765                           ;sb810_app.c: 398: switch (Ch)
 11766  0BEF  2C10               	goto	l3053
 11767  0BF0                     l3043:	
 11768                           ;sb810_app.c: 399: {
 11769                           ;sb810_app.c: 400: case 0u:
 11770                           
 11771                           
 11772                           ;sb810_app.c: 401: TRISCbits.TRISC2 = CmdBuffer[((UINT8)(2))];
 11773  0BF0  0023               	movlb	3	; select bank3
 11774  0BF1  0C22               	rrf	(_CmdBuffer^(0+384)+2),w
 11775  0BF2  0021               	movlb	1	; select bank1
 11776  0BF3  1C03               	skipc
 11777  0BF4  110E               	bcf	14,2	;volatile
 11778  0BF5  1803               	skipnc
 11779  0BF6  150E               	bsf	14,2	;volatile
 11780                           
 11781                           ;sb810_app.c: 402: break;
 11782  0BF7  0008               	return
 11783  0BF8                     l3045:	
 11784                           ;sb810_app.c: 404: case 1u:
 11785                           
 11786                           
 11787                           ;sb810_app.c: 405: TRISCbits.TRISC1 = CmdBuffer[((UINT8)(2))];
 11788  0BF8  0023               	movlb	3	; select bank3
 11789  0BF9  0C22               	rrf	(_CmdBuffer^(0+384)+2),w
 11790  0BFA  0021               	movlb	1	; select bank1
 11791  0BFB  1C03               	skipc
 11792  0BFC  108E               	bcf	14,1	;volatile
 11793  0BFD  1803               	skipnc
 11794  0BFE  148E               	bsf	14,1	;volatile
 11795                           
 11796                           ;sb810_app.c: 406: break;
 11797  0BFF  0008               	return
 11798  0C00                     l3047:	
 11799                           ;sb810_app.c: 408: case 2u:
 11800                           
 11801                           
 11802                           ;sb810_app.c: 409: TRISAbits.TRISA4 = CmdBuffer[((UINT8)(2))];
 11803  0C00  0023               	movlb	3	; select bank3
 11804  0C01  0C22               	rrf	(_CmdBuffer^(0+384)+2),w
 11805  0C02  0021               	movlb	1	; select bank1
 11806  0C03  1C03               	skipc
 11807  0C04  120C               	bcf	12,4	;volatile
 11808  0C05  1803               	skipnc
 11809  0C06  160C               	bsf	12,4	;volatile
 11810                           
 11811                           ;sb810_app.c: 410: break;
 11812  0C07  0008               	return
 11813  0C08                     l3049:	
 11814                           ;sb810_app.c: 412: case 3u:
 11815                           
 11816                           
 11817                           ;sb810_app.c: 413: TRISAbits.TRISA5 = CmdBuffer[((UINT8)(2))];
 11818  0C08  0023               	movlb	3	; select bank3
 11819  0C09  0C22               	rrf	(_CmdBuffer^(0+384)+2),w
 11820  0C0A  0021               	movlb	1	; select bank1
 11821  0C0B  1C03               	skipc
 11822  0C0C  128C               	bcf	12,5	;volatile
 11823  0C0D  1803               	skipnc
 11824  0C0E  168C               	bsf	12,5	;volatile
 11825                           
 11826                           ;sb810_app.c: 418: }
 11827                           
 11828                           ;sb810_app.c: 417: break;
 11829                           
 11830                           ;sb810_app.c: 416: default:
 11831                           
 11832                           ;sb810_app.c: 414: break;
 11833  0C0F  0008               	return
 11834  0C10                     l3053:	
 11835  0C10  0874               	movf	SetDigitalDir@Ch,w
 11836                           
 11837                           ; Switch size 1, requested type "space"
 11838                           ; Number of cases is 4, Range of values is 0 to 3
 11839                           ; switch strategies available:
 11840                           ; Name         Instructions Cycles
 11841                           ; simple_byte           13     7 (average)
 11842                           ; direct_byte           14     6 (fixed)
 11843                           ; jumptable            260     6 (fixed)
 11844                           ;	Chosen strategy is simple_byte
 11845  0C11  3A00               	xorlw	0	; case 0
 11846  0C12  1903               	skipnz
 11847  0C13  2BF0               	goto	l3043
 11848  0C14  3A01               	xorlw	1	; case 1
 11849  0C15  1903               	skipnz
 11850  0C16  2BF8               	goto	l3045
 11851  0C17  3A03               	xorlw	3	; case 2
 11852  0C18  1903               	skipnz
 11853  0C19  2C00               	goto	l3047
 11854  0C1A  3A01               	xorlw	1	; case 3
 11855  0C1B  1903               	skipnz
 11856  0C1C  2C08               	goto	l3049
 11857  0C1D  2C1E               	goto	l917
 11858  0C1E                     l917:	
 11859  0C1E  0008               	return
 11860  0C1F                     __end_of_SetDigitalDir:	
 11861                           
 11862                           	psect	text57
 11863  0A59                     __ptext57:	
 11864 ;; *************** function _ReceiveEvt *****************
 11865 ;; Defined at:
 11866 ;;		line 103 in file "../../../Framework/MercuryFwk/Source/c/02_Osl/os_ser.c"
 11867 ;; Parameters:    Size  Location     Type
 11868 ;;  Event           1    wreg     PTR struct _EventStructu
 11869 ;;		 -> I2cReplyPacketReady(2), I2cWriteRequest(2), I2cSetAddress(2), I2cNewTxNotification(2), 
 11870 ;;		 -> I2cNewPacketNotification(2), 
 11871 ;; Auto vars:     Size  Location     Type
 11872 ;;  Event           1    5[COMMON] PTR struct _EventStructu
 11873 ;;		 -> I2cReplyPacketReady(2), I2cWriteRequest(2), I2cSetAddress(2), I2cNewTxNotification(2), 
 11874 ;;		 -> I2cNewPacketNotification(2), 
 11875 ;;  EventStatus     1    4[COMMON] enum E3629
 11876 ;; Return value:  Size  Location     Type
 11877 ;;                  1    wreg      enum E3625
 11878 ;; Registers used:
 11879 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 11880 ;; Tracked objects:
 11881 ;;		On entry : 0/0
 11882 ;;		On exit  : 0/0
 11883 ;;		Unchanged: 0/0
 11884 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11885 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11886 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11887 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11888 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11889 ;;Total ram usage:        2 bytes
 11890 ;; Hardware stack levels used:    1
 11891 ;; Hardware stack levels required when called:    2
 11892 ;; This function calls:
 11893 ;;		Nothing
 11894 ;; This function is called by:
 11895 ;;		_I2c_DataReceiveSm
 11896 ;;		_I2cSlv_I2cDrvHandle
 11897 ;;		_ManageProtocol
 11898 ;; This function uses a non-reentrant model
 11899 ;;
 11900                           
 11901                           
 11902                           ;psect for function _ReceiveEvt
 11903  0A59                     _ReceiveEvt:	
 11904                           
 11905                           ;incstack = 0
 11906                           ; Regs used in _ReceiveEvt: [wreg+fsr1l+fsr1h+status,2+status,0]
 11907                           ;ReceiveEvt@Event stored from wreg
 11908  0A59  00F5               	movwf	ReceiveEvt@Event
 11909                           
 11910                           ;os_ser.c: 106: EventStatusType EventStatus = EventIdle;
 11911  0A5A  01F4               	clrf	ReceiveEvt@EventStatus
 11912                           
 11913                           ;os_ser.c: 108: if ((Event->EventOptions != ((UINT8)(1))) && (Event->EventOptions != ((U
      +                          INT8)(3))))
 11914  0A5B  0875               	movf	ReceiveEvt@Event,w
 11915  0A5C  0086               	movwf	6
 11916  0A5D  0187               	clrf	7
 11917  0A5E  0301               	decf	1,w
 11918  0A5F  1903               	btfsc	3,2
 11919  0A60  2A78               	goto	l4045
 11920  0A61  0875               	movf	ReceiveEvt@Event,w
 11921  0A62  0086               	movwf	6
 11922  0A63  0187               	clrf	7
 11923  0A64  3003               	movlw	3
 11924  0A65  0601               	xorwf	1,w
 11925  0A66  1903               	btfsc	3,2
 11926  0A67  2A78               	goto	l4045
 11927                           
 11928                           ;os_ser.c: 109: {
 11929                           ;os_ser.c: 111: if (Event->EventStatus == EventSent)
 11930  0A68  0A75               	incf	ReceiveEvt@Event,w
 11931  0A69  0086               	movwf	6
 11932  0A6A  0187               	clrf	7
 11933  0A6B  3002               	movlw	2
 11934  0A6C  0601               	xorwf	1,w
 11935  0A6D  1D03               	btfss	3,2
 11936  0A6E  2A77               	goto	l4043
 11937                           
 11938                           ;os_ser.c: 112: {
 11939                           ;os_ser.c: 114: Event->EventStatus = EventReceived;
 11940  0A6F  0A75               	incf	ReceiveEvt@Event,w
 11941  0A70  0086               	movwf	6
 11942  0A71  0187               	clrf	7
 11943  0A72  0181               	clrf	1
 11944  0A73  0A81               	incf	1,f
 11945                           
 11946                           ;os_ser.c: 116: EventStatus = EventReceived;
 11947  0A74  01F4               	clrf	ReceiveEvt@EventStatus
 11948  0A75  0AF4               	incf	ReceiveEvt@EventStatus,f
 11949                           
 11950                           ;os_ser.c: 117: }
 11951  0A76  2A78               	goto	l4045
 11952  0A77                     l4043:	
 11953                           
 11954                           ;os_ser.c: 118: else
 11955                           ;os_ser.c: 119: {
 11956                           ;os_ser.c: 121: EventStatus = EventIdle;
 11957  0A77  01F4               	clrf	ReceiveEvt@EventStatus
 11958  0A78                     l4045:	
 11959                           
 11960                           ;os_ser.c: 122: }
 11961                           ;os_ser.c: 123: }
 11962                           ;os_ser.c: 126: return(EventStatus);
 11963  0A78  0874               	movf	ReceiveEvt@EventStatus,w
 11964  0A79  0008               	return
 11965  0A7A                     __end_of_ReceiveEvt:	
 11966                           
 11967                           	psect	text58
 11968  0CB2                     __ptext58:	
 11969 ;; *************** function _GetDigitalRaw *****************
 11970 ;; Defined at:
 11971 ;;		line 358 in file "../Source/c/04_App/sb810_app.c"
 11972 ;; Parameters:    Size  Location     Type
 11973 ;;  Ch              1    wreg     unsigned char 
 11974 ;; Auto vars:     Size  Location     Type
 11975 ;;  Ch              1    5[COMMON] unsigned char 
 11976 ;; Return value:  Size  Location     Type
 11977 ;;                  1    wreg      void 
 11978 ;; Registers used:
 11979 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11980 ;; Tracked objects:
 11981 ;;		On entry : 0/0
 11982 ;;		On exit  : 0/0
 11983 ;;		Unchanged: 0/0
 11984 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11985 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11986 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11987 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11988 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11989 ;;Total ram usage:        1 bytes
 11990 ;; Hardware stack levels used:    1
 11991 ;; Hardware stack levels required when called:    3
 11992 ;; This function calls:
 11993 ;;		_GenerateEvt
 11994 ;; This function is called by:
 11995 ;;		_ManageProtocol
 11996 ;; This function uses a non-reentrant model
 11997 ;;
 11998                           
 11999                           
 12000                           ;psect for function _GetDigitalRaw
 12001  0CB2                     _GetDigitalRaw:	
 12002                           
 12003                           ;incstack = 0
 12004                           ; Regs used in _GetDigitalRaw: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 12005                           ;GetDigitalRaw@Ch stored from wreg
 12006  0CB2  00F5               	movwf	GetDigitalRaw@Ch
 12007                           
 12008                           ;sb810_app.c: 360: switch (Ch)
 12009  0CB3  2CD0               	goto	l4157
 12010  0CB4                     l4147:	
 12011                           ;sb810_app.c: 361: {
 12012                           ;sb810_app.c: 362: case 0u:
 12013                           
 12014                           
 12015                           ;sb810_app.c: 363: RepBuffer[0] = PORTCbits.RC2;
 12016  0CB4  3000               	movlw	0
 12017  0CB5  0020               	movlb	0	; select bank0
 12018  0CB6  190E               	btfsc	14,2	;volatile
 12019  0CB7  3001               	movlw	1
 12020  0CB8  0024               	movlb	4	; select bank4
 12021  0CB9  00A0               	movwf	_RepBuffer^(0+512)
 12022                           
 12023                           ;sb810_app.c: 364: break;
 12024  0CBA  2CDE               	goto	l902
 12025  0CBB                     l4149:	
 12026                           ;sb810_app.c: 366: case 1u:
 12027                           
 12028                           
 12029                           ;sb810_app.c: 367: RepBuffer[0] = PORTCbits.RC1;
 12030  0CBB  3000               	movlw	0
 12031  0CBC  0020               	movlb	0	; select bank0
 12032  0CBD  188E               	btfsc	14,1	;volatile
 12033  0CBE  3001               	movlw	1
 12034  0CBF  0024               	movlb	4	; select bank4
 12035  0CC0  00A0               	movwf	_RepBuffer^(0+512)
 12036                           
 12037                           ;sb810_app.c: 368: break;
 12038  0CC1  2CDE               	goto	l902
 12039  0CC2                     l4151:	
 12040                           ;sb810_app.c: 370: case 2u:
 12041                           
 12042                           
 12043                           ;sb810_app.c: 371: RepBuffer[0] = PORTAbits.RA4;
 12044  0CC2  3000               	movlw	0
 12045  0CC3  0020               	movlb	0	; select bank0
 12046  0CC4  1A0C               	btfsc	12,4	;volatile
 12047  0CC5  3001               	movlw	1
 12048  0CC6  0024               	movlb	4	; select bank4
 12049  0CC7  00A0               	movwf	_RepBuffer^(0+512)
 12050                           
 12051                           ;sb810_app.c: 372: break;
 12052  0CC8  2CDE               	goto	l902
 12053  0CC9                     l4153:	
 12054                           ;sb810_app.c: 374: case 3u:
 12055                           
 12056                           
 12057                           ;sb810_app.c: 375: RepBuffer[0] = PORTAbits.RA5;
 12058  0CC9  3000               	movlw	0
 12059  0CCA  0020               	movlb	0	; select bank0
 12060  0CCB  1A8C               	btfsc	12,5	;volatile
 12061  0CCC  3001               	movlw	1
 12062  0CCD  0024               	movlb	4	; select bank4
 12063  0CCE  00A0               	movwf	_RepBuffer^(0+512)
 12064                           
 12065                           ;sb810_app.c: 380: }
 12066                           
 12067                           ;sb810_app.c: 379: break;
 12068                           
 12069                           ;sb810_app.c: 378: default:
 12070                           
 12071                           ;sb810_app.c: 376: break;
 12072  0CCF  2CDE               	goto	l902
 12073  0CD0                     l4157:	
 12074  0CD0  0875               	movf	GetDigitalRaw@Ch,w
 12075                           
 12076                           ; Switch size 1, requested type "space"
 12077                           ; Number of cases is 4, Range of values is 0 to 3
 12078                           ; switch strategies available:
 12079                           ; Name         Instructions Cycles
 12080                           ; simple_byte           13     7 (average)
 12081                           ; direct_byte           14     6 (fixed)
 12082                           ; jumptable            260     6 (fixed)
 12083                           ;	Chosen strategy is simple_byte
 12084  0CD1  3A00               	xorlw	0	; case 0
 12085  0CD2  1903               	skipnz
 12086  0CD3  2CB4               	goto	l4147
 12087  0CD4  3A01               	xorlw	1	; case 1
 12088  0CD5  1903               	skipnz
 12089  0CD6  2CBB               	goto	l4149
 12090  0CD7  3A03               	xorlw	3	; case 2
 12091  0CD8  1903               	skipnz
 12092  0CD9  2CC2               	goto	l4151
 12093  0CDA  3A01               	xorlw	1	; case 3
 12094  0CDB  1903               	skipnz
 12095  0CDC  2CC9               	goto	l4153
 12096  0CDD  2CDE               	goto	l902
 12097  0CDE                     l902:	
 12098                           
 12099                           ;sb810_app.c: 383: RepBufferLen = ((UINT8)(1));
 12100  0CDE  0020               	movlb	0	; select bank0
 12101  0CDF  01EA               	clrf	_RepBufferLen
 12102  0CE0  0AEA               	incf	_RepBufferLen,f
 12103                           
 12104                           ;sb810_app.c: 385: GenerateEvt(&I2cReplyPacketReady);
 12105  0CE1  3077               	movlw	(low (_I2cReplyPacketReady| 0))& (0+255)
 12106  0CE2  318A  227A         	fcall	_GenerateEvt
 12107  0CE4  0008               	return
 12108  0CE5                     __end_of_GetDigitalRaw:	
 12109                           
 12110                           	psect	text59
 12111  0E71                     __ptext59:	
 12112 ;; *************** function _GetAnalogRaw *****************
 12113 ;; Defined at:
 12114 ;;		line 303 in file "../Source/c/04_App/sb810_app.c"
 12115 ;; Parameters:    Size  Location     Type
 12116 ;;  Ch              1    wreg     unsigned char 
 12117 ;; Auto vars:     Size  Location     Type
 12118 ;;  Ch              1   16[BANK0 ] unsigned char 
 12119 ;;  AdcData         2   13[BANK0 ] unsigned short 
 12120 ;;  i               1   17[BANK0 ] unsigned char 
 12121 ;;  j               1   15[BANK0 ] unsigned char 
 12122 ;; Return value:  Size  Location     Type
 12123 ;;                  1    wreg      void 
 12124 ;; Registers used:
 12125 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12126 ;; Tracked objects:
 12127 ;;		On entry : 0/0
 12128 ;;		On exit  : 0/0
 12129 ;;		Unchanged: 0/0
 12130 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12131 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12132 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12133 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12134 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12135 ;;Total ram usage:        9 bytes
 12136 ;; Hardware stack levels used:    1
 12137 ;; Hardware stack levels required when called:    4
 12138 ;; This function calls:
 12139 ;;		_AdcGetValueCh
 12140 ;;		_GenerateEvt
 12141 ;;		_memset
 12142 ;; This function is called by:
 12143 ;;		_ManageProtocol
 12144 ;; This function uses a non-reentrant model
 12145 ;;
 12146                           
 12147                           
 12148                           ;psect for function _GetAnalogRaw
 12149  0E71                     _GetAnalogRaw:	
 12150                           
 12151                           ;incstack = 0
 12152                           ; Regs used in _GetAnalogRaw: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 12153                           ;GetAnalogRaw@Ch stored from wreg
 12154  0E71  0020               	movlb	0	; select bank0
 12155  0E72  00B0               	movwf	GetAnalogRaw@Ch
 12156                           
 12157                           ;sb810_app.c: 305: UINT8 i,j;
 12158                           ;sb810_app.c: 306: UINT16 AdcData;
 12159                           ;sb810_app.c: 309: AdcData = AdcGetValueCh(Ch);
 12160  0E73  0830               	movf	GetAnalogRaw@Ch,w
 12161  0E74  3189  21C8  318E   	fcall	_AdcGetValueCh
 12162  0E77  0020               	movlb	0	; select bank0
 12163  0E78  0824               	movf	?_AdcGetValueCh+1,w
 12164  0E79  00AE               	movwf	GetAnalogRaw@AdcData+1
 12165  0E7A  0823               	movf	?_AdcGetValueCh,w
 12166  0E7B  00AD               	movwf	GetAnalogRaw@AdcData
 12167                           
 12168                           ;sb810_app.c: 310: AdcData = AdcGetValueCh(Ch);
 12169  0E7C  0830               	movf	GetAnalogRaw@Ch,w
 12170  0E7D  3189  21C8  318E   	fcall	_AdcGetValueCh
 12171  0E80  0020               	movlb	0	; select bank0
 12172  0E81  0824               	movf	?_AdcGetValueCh+1,w
 12173  0E82  00AE               	movwf	GetAnalogRaw@AdcData+1
 12174  0E83  0823               	movf	?_AdcGetValueCh,w
 12175  0E84  00AD               	movwf	GetAnalogRaw@AdcData
 12176                           
 12177                           ;sb810_app.c: 312: memset(RepBuffer,0,((UINT8)(80)));
 12178  0E85  3000               	movlw	0
 12179  0E86  00A0               	movwf	memset@c
 12180  0E87  00A1               	movwf	memset@c+1
 12181  0E88  3050               	movlw	80
 12182  0E89  00A2               	movwf	memset@n
 12183  0E8A  3000               	movlw	0
 12184  0E8B  00A3               	movwf	memset@n+1
 12185  0E8C  3020               	movlw	(low (_RepBuffer| (0+512)))& (0+255)
 12186  0E8D  3189  21E3  318E   	fcall	_memset
 12187                           
 12188                           ;sb810_app.c: 314: for (i = 0,j = 1; i < ((UINT8)(2)); i++,j--)
 12189  0E90  0020               	movlb	0	; select bank0
 12190  0E91  01B1               	clrf	GetAnalogRaw@i
 12191  0E92  01AF               	clrf	GetAnalogRaw@j
 12192  0E93  0AAF               	incf	GetAnalogRaw@j,f
 12193  0E94  3002               	movlw	2
 12194  0E95  0231               	subwf	GetAnalogRaw@i,w
 12195  0E96  1803               	btfsc	3,0
 12196  0E97  2EBD               	goto	l4129
 12197  0E98                     l4121:	
 12198                           
 12199                           ;sb810_app.c: 315: {
 12200                           ;sb810_app.c: 316: RepBuffer[i] |= (AdcData >> (8*j)) & 0x00FF;
 12201  0E98  082E               	movf	GetAnalogRaw@AdcData+1,w
 12202  0E99  00AA               	movwf	??_GetAnalogRaw+1
 12203  0E9A  082D               	movf	GetAnalogRaw@AdcData,w
 12204  0E9B  00A9               	movwf	??_GetAnalogRaw
 12205  0E9C  082F               	movf	GetAnalogRaw@j,w
 12206  0E9D  00AB               	movwf	??_GetAnalogRaw+2
 12207  0E9E  3002               	movlw	2
 12208  0E9F                     u2785:	
 12209  0E9F  35AB               	lslf	??_GetAnalogRaw+2,f
 12210  0EA0  3EFF               	addlw	-1
 12211  0EA1  1D03               	skipz
 12212  0EA2  2E9F               	goto	u2785
 12213  0EA3  352B               	lslf	??_GetAnalogRaw+2,w
 12214  0EA4  0A89               	incf	9,f
 12215  0EA5  2EA8               	goto	u2794
 12216  0EA6                     u2795:	
 12217  0EA6  36AA               	lsrf	??_GetAnalogRaw+1,f
 12218  0EA7  0CA9               	rrf	??_GetAnalogRaw,f
 12219  0EA8                     u2794:	
 12220  0EA8  0B89               	decfsz	9,f
 12221  0EA9  2EA6               	goto	u2795
 12222  0EAA  0829               	movf	??_GetAnalogRaw,w
 12223  0EAB  00AC               	movwf	??_GetAnalogRaw+3
 12224  0EAC  0831               	movf	GetAnalogRaw@i,w
 12225  0EAD  3E20               	addlw	(low (_RepBuffer| (0+512)))& (0+255)
 12226  0EAE  0086               	movwf	6
 12227  0EAF  3002               	movlw	2	; select bank4/5
 12228  0EB0  0087               	movwf	7
 12229  0EB1  082C               	movf	??_GetAnalogRaw+3,w
 12230  0EB2  0481               	iorwf	1,f
 12231  0EB3  3001               	movlw	1
 12232  0EB4  00A9               	movwf	??_GetAnalogRaw
 12233  0EB5  0829               	movf	??_GetAnalogRaw,w
 12234  0EB6  07B1               	addwf	GetAnalogRaw@i,f
 12235  0EB7  3001               	movlw	1
 12236  0EB8  02AF               	subwf	GetAnalogRaw@j,f
 12237  0EB9  3002               	movlw	2
 12238  0EBA  0231               	subwf	GetAnalogRaw@i,w
 12239  0EBB  1C03               	skipc
 12240  0EBC  2E98               	goto	l4121
 12241  0EBD                     l4129:	
 12242                           
 12243                           ;sb810_app.c: 317: }
 12244                           ;sb810_app.c: 319: RepBufferLen = ((UINT8)(2));
 12245  0EBD  3002               	movlw	2
 12246  0EBE  00A9               	movwf	??_GetAnalogRaw
 12247  0EBF  0829               	movf	??_GetAnalogRaw,w
 12248  0EC0  00EA               	movwf	_RepBufferLen
 12249                           
 12250                           ;sb810_app.c: 321: GenerateEvt(&I2cReplyPacketReady);
 12251  0EC1  3077               	movlw	(low (_I2cReplyPacketReady| 0))& (0+255)
 12252  0EC2  318A  227A         	fcall	_GenerateEvt
 12253  0EC4  0008               	return
 12254  0EC5                     __end_of_GetAnalogRaw:	
 12255                           
 12256                           	psect	text60
 12257  0D51                     __ptext60:	
 12258 ;; *************** function _GetAnalogAscii *****************
 12259 ;; Defined at:
 12260 ;;		line 332 in file "../Source/c/04_App/sb810_app.c"
 12261 ;; Parameters:    Size  Location     Type
 12262 ;;  Ch              1    wreg     unsigned char 
 12263 ;; Auto vars:     Size  Location     Type
 12264 ;;  Ch              1   20[BANK0 ] unsigned char 
 12265 ;;  AdcData         2   18[BANK0 ] unsigned short 
 12266 ;; Return value:  Size  Location     Type
 12267 ;;                  1    wreg      void 
 12268 ;; Registers used:
 12269 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12270 ;; Tracked objects:
 12271 ;;		On entry : 0/0
 12272 ;;		On exit  : 0/0
 12273 ;;		Unchanged: 0/0
 12274 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12275 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12276 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12277 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12278 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12279 ;;Total ram usage:        4 bytes
 12280 ;; Hardware stack levels used:    1
 12281 ;; Hardware stack levels required when called:    4
 12282 ;; This function calls:
 12283 ;;		_AdcGetValueCh
 12284 ;;		_GenerateEvt
 12285 ;;		_memset
 12286 ;;		_strcat
 12287 ;;		_utoa
 12288 ;; This function is called by:
 12289 ;;		_ManageProtocol
 12290 ;; This function uses a non-reentrant model
 12291 ;;
 12292                           
 12293                           
 12294                           ;psect for function _GetAnalogAscii
 12295  0D51                     _GetAnalogAscii:	
 12296                           
 12297                           ;incstack = 0
 12298                           ; Regs used in _GetAnalogAscii: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 12299                           ;GetAnalogAscii@Ch stored from wreg
 12300  0D51  0020               	movlb	0	; select bank0
 12301  0D52  00B4               	movwf	GetAnalogAscii@Ch
 12302                           
 12303                           ;sb810_app.c: 334: UINT16 AdcData;
 12304                           ;sb810_app.c: 337: AdcData = AdcGetValueCh(Ch);
 12305  0D53  0834               	movf	GetAnalogAscii@Ch,w
 12306  0D54  3189  21C8  318D   	fcall	_AdcGetValueCh
 12307  0D57  0020               	movlb	0	; select bank0
 12308  0D58  0824               	movf	?_AdcGetValueCh+1,w
 12309  0D59  00B3               	movwf	GetAnalogAscii@AdcData+1
 12310  0D5A  0823               	movf	?_AdcGetValueCh,w
 12311  0D5B  00B2               	movwf	GetAnalogAscii@AdcData
 12312                           
 12313                           ;sb810_app.c: 338: AdcData = AdcGetValueCh(Ch);
 12314  0D5C  0834               	movf	GetAnalogAscii@Ch,w
 12315  0D5D  3189  21C8  318D   	fcall	_AdcGetValueCh
 12316  0D60  0020               	movlb	0	; select bank0
 12317  0D61  0824               	movf	?_AdcGetValueCh+1,w
 12318  0D62  00B3               	movwf	GetAnalogAscii@AdcData+1
 12319  0D63  0823               	movf	?_AdcGetValueCh,w
 12320  0D64  00B2               	movwf	GetAnalogAscii@AdcData
 12321                           
 12322                           ;sb810_app.c: 340: memset(RepBuffer,0,((UINT8)(80)));
 12323  0D65  3000               	movlw	0
 12324  0D66  00A0               	movwf	memset@c
 12325  0D67  00A1               	movwf	memset@c+1
 12326  0D68  3050               	movlw	80
 12327  0D69  00A2               	movwf	memset@n
 12328  0D6A  3000               	movlw	0
 12329  0D6B  00A3               	movwf	memset@n+1
 12330  0D6C  3020               	movlw	(low (_RepBuffer| (0+512)))& (0+255)
 12331  0D6D  3189  21E3  318D   	fcall	_memset
 12332                           
 12333                           ;sb810_app.c: 342: utoa(RepBuffer,AdcData,10);
 12334  0D70  3020               	movlw	low _RepBuffer
 12335  0D71  0020               	movlb	0	; select bank0
 12336  0D72  00A7               	movwf	utoa@buf
 12337  0D73  3002               	movlw	high _RepBuffer
 12338  0D74  00A8               	movwf	utoa@buf+1
 12339  0D75  0833               	movf	GetAnalogAscii@AdcData+1,w
 12340  0D76  00AA               	movwf	utoa@val+1
 12341  0D77  0832               	movf	GetAnalogAscii@AdcData,w
 12342  0D78  00A9               	movwf	utoa@val
 12343  0D79  300A               	movlw	10
 12344  0D7A  00AB               	movwf	utoa@base
 12345  0D7B  3000               	movlw	0
 12346  0D7C  00AC               	movwf	utoa@base+1
 12347  0D7D  318E  26C5  318D   	fcall	_utoa
 12348                           
 12349                           ;sb810_app.c: 343: strcat(RepBuffer,"    ");
 12350  0D80  3023               	movlw	low (STR_6| (0+32768))
 12351  0D81  00F4               	movwf	strcat@from
 12352  0D82  3090               	movlw	high (STR_6| (0+32768))
 12353  0D83  00F5               	movwf	strcat@from+1
 12354  0D84  3020               	movlw	(low (_RepBuffer| (0+512)))& (0+255)
 12355  0D85  318A  22BF  318D   	fcall	_strcat
 12356                           
 12357                           ;sb810_app.c: 345: RepBufferLen = ((UINT8)(4));
 12358  0D88  3004               	movlw	4
 12359  0D89  0020               	movlb	0	; select bank0
 12360  0D8A  00B1               	movwf	??_GetAnalogAscii
 12361  0D8B  0831               	movf	??_GetAnalogAscii,w
 12362  0D8C  00EA               	movwf	_RepBufferLen
 12363                           
 12364                           ;sb810_app.c: 347: GenerateEvt(&I2cReplyPacketReady);
 12365  0D8D  3077               	movlw	(low (_I2cReplyPacketReady| 0))& (0+255)
 12366  0D8E  318A  227A         	fcall	_GenerateEvt
 12367  0D90  0008               	return
 12368  0D91                     __end_of_GetAnalogAscii:	
 12369                           
 12370                           	psect	text61
 12371  0EC5                     __ptext61:	
 12372 ;; *************** function _utoa *****************
 12373 ;; Defined at:
 12374 ;;		line 17 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\itoa.c"
 12375 ;; Parameters:    Size  Location     Type
 12376 ;;  buf             2    7[BANK0 ] PTR unsigned char 
 12377 ;;		 -> StdS_ManageStdServices@DieTempStr(4), RepBuffer(80), 
 12378 ;;  val             2    9[BANK0 ] unsigned int 
 12379 ;;  base            2   11[BANK0 ] int 
 12380 ;; Auto vars:     Size  Location     Type
 12381 ;;  v               2   14[BANK0 ] unsigned int 
 12382 ;;  c               1   16[BANK0 ] unsigned char 
 12383 ;; Return value:  Size  Location     Type
 12384 ;;                  2    7[BANK0 ] PTR unsigned char 
 12385 ;; Registers used:
 12386 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12387 ;; Tracked objects:
 12388 ;;		On entry : 0/0
 12389 ;;		On exit  : 0/0
 12390 ;;		Unchanged: 0/0
 12391 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12392 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12393 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12394 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12395 ;;      Totals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12396 ;;Total ram usage:       10 bytes
 12397 ;; Hardware stack levels used:    1
 12398 ;; Hardware stack levels required when called:    3
 12399 ;; This function calls:
 12400 ;;		___lwdiv
 12401 ;;		___lwmod
 12402 ;; This function is called by:
 12403 ;;		_StdS_ManageStdServices
 12404 ;;		_GetAnalogAscii
 12405 ;; This function uses a non-reentrant model
 12406 ;;
 12407                           
 12408                           
 12409                           ;psect for function _utoa
 12410  0EC5                     _utoa:	
 12411                           
 12412                           ;incstack = 0
 12413                           ; Regs used in _utoa: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 12414  0EC5  0020               	movlb	0	; select bank0
 12415  0EC6  082A               	movf	utoa@val+1,w
 12416  0EC7  00AF               	movwf	utoa@v+1
 12417  0EC8  0829               	movf	utoa@val,w
 12418  0EC9  00AE               	movwf	utoa@v
 12419  0ECA                     l3971:	
 12420  0ECA  082C               	movf	utoa@base+1,w
 12421  0ECB  00A1               	movwf	___lwdiv@divisor+1
 12422  0ECC  082B               	movf	utoa@base,w
 12423  0ECD  00A0               	movwf	___lwdiv@divisor
 12424  0ECE  082F               	movf	utoa@v+1,w
 12425  0ECF  00A3               	movwf	___lwdiv@dividend+1
 12426  0ED0  082E               	movf	utoa@v,w
 12427  0ED1  00A2               	movwf	___lwdiv@dividend
 12428  0ED2  318C  24E5  318E   	fcall	___lwdiv
 12429  0ED5  0020               	movlb	0	; select bank0
 12430  0ED6  0821               	movf	?___lwdiv+1,w
 12431  0ED7  00AF               	movwf	utoa@v+1
 12432  0ED8  0820               	movf	?___lwdiv,w
 12433  0ED9  00AE               	movwf	utoa@v
 12434  0EDA  3001               	movlw	1
 12435  0EDB  07A7               	addwf	utoa@buf,f
 12436  0EDC  3000               	movlw	0
 12437  0EDD  3DA8               	addwfc	utoa@buf+1,f
 12438  0EDE  082E               	movf	utoa@v,w
 12439  0EDF  042F               	iorwf	utoa@v+1,w
 12440  0EE0  1D03               	btfss	3,2
 12441  0EE1  2ECA               	goto	l3971
 12442  0EE2  0827               	movf	utoa@buf,w
 12443  0EE3  0086               	movwf	6
 12444  0EE4  0828               	movf	utoa@buf+1,w
 12445  0EE5  0087               	movwf	7
 12446  0EE6  0181               	clrf	1
 12447  0EE7  3001               	movlw	1
 12448  0EE8  02A7               	subwf	utoa@buf,f
 12449  0EE9  3000               	movlw	0
 12450  0EEA  3BA8               	subwfb	utoa@buf+1,f
 12451  0EEB                     l3981:	
 12452  0EEB  082C               	movf	utoa@base+1,w
 12453  0EEC  00A1               	movwf	___lwmod@divisor+1
 12454  0EED  082B               	movf	utoa@base,w
 12455  0EEE  00A0               	movwf	___lwmod@divisor
 12456  0EEF  082A               	movf	utoa@val+1,w
 12457  0EF0  00A3               	movwf	___lwmod@dividend+1
 12458  0EF1  0829               	movf	utoa@val,w
 12459  0EF2  00A2               	movwf	___lwmod@dividend
 12460  0EF3  318B  2361  318E   	fcall	___lwmod
 12461  0EF6  0020               	movlb	0	; select bank0
 12462  0EF7  0820               	movf	?___lwmod,w
 12463  0EF8  00AD               	movwf	??_utoa
 12464  0EF9  082D               	movf	??_utoa,w
 12465  0EFA  00B0               	movwf	utoa@c
 12466  0EFB  082C               	movf	utoa@base+1,w
 12467  0EFC  00A1               	movwf	___lwdiv@divisor+1
 12468  0EFD  082B               	movf	utoa@base,w
 12469  0EFE  00A0               	movwf	___lwdiv@divisor
 12470  0EFF  082A               	movf	utoa@val+1,w
 12471  0F00  00A3               	movwf	___lwdiv@dividend+1
 12472  0F01  0829               	movf	utoa@val,w
 12473  0F02  00A2               	movwf	___lwdiv@dividend
 12474  0F03  318C  24E5  318E   	fcall	___lwdiv
 12475  0F06  0020               	movlb	0	; select bank0
 12476  0F07  0821               	movf	?___lwdiv+1,w
 12477  0F08  00AA               	movwf	utoa@val+1
 12478  0F09  0820               	movf	?___lwdiv,w
 12479  0F0A  00A9               	movwf	utoa@val
 12480  0F0B  300A               	movlw	10
 12481  0F0C  0230               	subwf	utoa@c,w
 12482  0F0D  1C03               	skipc
 12483  0F0E  2F13               	goto	l1367
 12484  0F0F  3007               	movlw	7
 12485  0F10  00AD               	movwf	??_utoa
 12486  0F11  082D               	movf	??_utoa,w
 12487  0F12  07B0               	addwf	utoa@c,f
 12488  0F13                     l1367:	
 12489  0F13  3030               	movlw	48
 12490  0F14  00AD               	movwf	??_utoa
 12491  0F15  082D               	movf	??_utoa,w
 12492  0F16  07B0               	addwf	utoa@c,f
 12493  0F17  0827               	movf	utoa@buf,w
 12494  0F18  0086               	movwf	6
 12495  0F19  0828               	movf	utoa@buf+1,w
 12496  0F1A  0087               	movwf	7
 12497  0F1B  0830               	movf	utoa@c,w
 12498  0F1C  0081               	movwf	1
 12499  0F1D  3001               	movlw	1
 12500  0F1E  02A7               	subwf	utoa@buf,f
 12501  0F1F  3000               	movlw	0
 12502  0F20  3BA8               	subwfb	utoa@buf+1,f
 12503  0F21  0829               	movf	utoa@val,w
 12504  0F22  042A               	iorwf	utoa@val+1,w
 12505  0F23  1D03               	btfss	3,2
 12506  0F24  2EEB               	goto	l3981
 12507                           
 12508                           ;	Return value of _utoa is never used
 12509  0F25  3001               	movlw	1
 12510  0F26  07A7               	addwf	utoa@buf,f
 12511  0F27  3000               	movlw	0
 12512  0F28  3DA8               	addwfc	utoa@buf+1,f
 12513  0F29  0008               	return
 12514  0F2A                     __end_of_utoa:	
 12515                           
 12516                           	psect	text62
 12517  0B61                     __ptext62:	
 12518 ;; *************** function ___lwmod *****************
 12519 ;; Defined at:
 12520 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\lwmod.c"
 12521 ;; Parameters:    Size  Location     Type
 12522 ;;  divisor         2    0[BANK0 ] unsigned int 
 12523 ;;  dividend        2    2[BANK0 ] unsigned int 
 12524 ;; Auto vars:     Size  Location     Type
 12525 ;;  counter         1    5[COMMON] unsigned char 
 12526 ;; Return value:  Size  Location     Type
 12527 ;;                  2    0[BANK0 ] unsigned int 
 12528 ;; Registers used:
 12529 ;;		wreg, status,2, status,0
 12530 ;; Tracked objects:
 12531 ;;		On entry : 0/0
 12532 ;;		On exit  : 0/0
 12533 ;;		Unchanged: 0/0
 12534 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12535 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12536 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12537 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12538 ;;      Totals:         2       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12539 ;;Total ram usage:        6 bytes
 12540 ;; Hardware stack levels used:    1
 12541 ;; Hardware stack levels required when called:    2
 12542 ;; This function calls:
 12543 ;;		Nothing
 12544 ;; This function is called by:
 12545 ;;		_utoa
 12546 ;; This function uses a non-reentrant model
 12547 ;;
 12548                           
 12549                           
 12550                           ;psect for function ___lwmod
 12551  0B61                     ___lwmod:	
 12552                           
 12553                           ;incstack = 0
 12554                           ; Regs used in ___lwmod: [wreg+status,2+status,0]
 12555  0B61  0020               	movlb	0	; select bank0
 12556  0B62  0820               	movf	___lwmod@divisor,w
 12557  0B63  0421               	iorwf	___lwmod@divisor+1,w
 12558  0B64  1903               	btfsc	3,2
 12559  0B65  2B89               	goto	l3903
 12560  0B66  01F5               	clrf	___lwmod@counter
 12561  0B67  0AF5               	incf	___lwmod@counter,f
 12562  0B68                     l3893:	
 12563  0B68  1BA1               	btfsc	___lwmod@divisor+1,7
 12564  0B69  2B74               	goto	l3895
 12565  0B6A  3001               	movlw	1
 12566  0B6B                     u2565:	
 12567  0B6B  35A0               	lslf	___lwmod@divisor,f
 12568  0B6C  0DA1               	rlf	___lwmod@divisor+1,f
 12569  0B6D  0B89               	decfsz	9,f
 12570  0B6E  2B6B               	goto	u2565
 12571  0B6F  3001               	movlw	1
 12572  0B70  00F4               	movwf	??___lwmod
 12573  0B71  0874               	movf	??___lwmod,w
 12574  0B72  07F5               	addwf	___lwmod@counter,f
 12575  0B73  2B68               	goto	l3893
 12576  0B74                     l3895:	
 12577  0B74  0821               	movf	___lwmod@divisor+1,w
 12578  0B75  0223               	subwf	___lwmod@dividend+1,w
 12579  0B76  1D03               	skipz
 12580  0B77  2B7A               	goto	u2585
 12581  0B78  0820               	movf	___lwmod@divisor,w
 12582  0B79  0222               	subwf	___lwmod@dividend,w
 12583  0B7A                     u2585:	
 12584  0B7A  1C03               	skipc
 12585  0B7B  2B80               	goto	l3899
 12586  0B7C  0820               	movf	___lwmod@divisor,w
 12587  0B7D  02A2               	subwf	___lwmod@dividend,f
 12588  0B7E  0821               	movf	___lwmod@divisor+1,w
 12589  0B7F  3BA3               	subwfb	___lwmod@dividend+1,f
 12590  0B80                     l3899:	
 12591  0B80  3001               	movlw	1
 12592  0B81                     u2595:	
 12593  0B81  36A1               	lsrf	___lwmod@divisor+1,f
 12594  0B82  0CA0               	rrf	___lwmod@divisor,f
 12595  0B83  0B89               	decfsz	9,f
 12596  0B84  2B81               	goto	u2595
 12597  0B85  3001               	movlw	1
 12598  0B86  02F5               	subwf	___lwmod@counter,f
 12599  0B87  1D03               	btfss	3,2
 12600  0B88  2B74               	goto	l3895
 12601  0B89                     l3903:	
 12602  0B89  0823               	movf	___lwmod@dividend+1,w
 12603  0B8A  00A1               	movwf	?___lwmod+1
 12604  0B8B  0822               	movf	___lwmod@dividend,w
 12605  0B8C  00A0               	movwf	?___lwmod
 12606  0B8D  0008               	return
 12607  0B8E                     __end_of___lwmod:	
 12608                           
 12609                           	psect	text63
 12610  0CE5                     __ptext63:	
 12611 ;; *************** function ___lwdiv *****************
 12612 ;; Defined at:
 12613 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\lwdiv.c"
 12614 ;; Parameters:    Size  Location     Type
 12615 ;;  divisor         2    0[BANK0 ] unsigned int 
 12616 ;;  dividend        2    2[BANK0 ] unsigned int 
 12617 ;; Auto vars:     Size  Location     Type
 12618 ;;  quotient        2    5[BANK0 ] unsigned int 
 12619 ;;  counter         1    4[BANK0 ] unsigned char 
 12620 ;; Return value:  Size  Location     Type
 12621 ;;                  2    0[BANK0 ] unsigned int 
 12622 ;; Registers used:
 12623 ;;		wreg, status,2, status,0
 12624 ;; Tracked objects:
 12625 ;;		On entry : 0/0
 12626 ;;		On exit  : 0/0
 12627 ;;		Unchanged: 0/0
 12628 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12629 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12630 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12631 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12632 ;;      Totals:         1       7       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12633 ;;Total ram usage:        8 bytes
 12634 ;; Hardware stack levels used:    1
 12635 ;; Hardware stack levels required when called:    2
 12636 ;; This function calls:
 12637 ;;		Nothing
 12638 ;; This function is called by:
 12639 ;;		_LedBlinkStateMachine
 12640 ;;		_LedPulseStateMachine
 12641 ;;		_utoa
 12642 ;; This function uses a non-reentrant model
 12643 ;;
 12644                           
 12645                           
 12646                           ;psect for function ___lwdiv
 12647  0CE5                     ___lwdiv:	
 12648                           
 12649                           ;incstack = 0
 12650                           ; Regs used in ___lwdiv: [wreg+status,2+status,0]
 12651  0CE5  0020               	movlb	0	; select bank0
 12652  0CE6  01A5               	clrf	___lwdiv@quotient
 12653  0CE7  01A6               	clrf	___lwdiv@quotient+1
 12654  0CE8  0820               	movf	___lwdiv@divisor,w
 12655  0CE9  0421               	iorwf	___lwdiv@divisor+1,w
 12656  0CEA  1903               	btfsc	3,2
 12657  0CEB  2D15               	goto	l3881
 12658  0CEC  01A4               	clrf	___lwdiv@counter
 12659  0CED  0AA4               	incf	___lwdiv@counter,f
 12660  0CEE                     l3869:	
 12661  0CEE  1BA1               	btfsc	___lwdiv@divisor+1,7
 12662  0CEF  2CFA               	goto	l3871
 12663  0CF0  3001               	movlw	1
 12664  0CF1                     u2495:	
 12665  0CF1  35A0               	lslf	___lwdiv@divisor,f
 12666  0CF2  0DA1               	rlf	___lwdiv@divisor+1,f
 12667  0CF3  0B89               	decfsz	9,f
 12668  0CF4  2CF1               	goto	u2495
 12669  0CF5  3001               	movlw	1
 12670  0CF6  00F4               	movwf	??___lwdiv
 12671  0CF7  0874               	movf	??___lwdiv,w
 12672  0CF8  07A4               	addwf	___lwdiv@counter,f
 12673  0CF9  2CEE               	goto	l3869
 12674  0CFA                     l3871:	
 12675  0CFA  3001               	movlw	1
 12676  0CFB                     u2515:	
 12677  0CFB  35A5               	lslf	___lwdiv@quotient,f
 12678  0CFC  0DA6               	rlf	___lwdiv@quotient+1,f
 12679  0CFD  0B89               	decfsz	9,f
 12680  0CFE  2CFB               	goto	u2515
 12681  0CFF  0821               	movf	___lwdiv@divisor+1,w
 12682  0D00  0223               	subwf	___lwdiv@dividend+1,w
 12683  0D01  1D03               	skipz
 12684  0D02  2D05               	goto	u2525
 12685  0D03  0820               	movf	___lwdiv@divisor,w
 12686  0D04  0222               	subwf	___lwdiv@dividend,w
 12687  0D05                     u2525:	
 12688  0D05  1C03               	skipc
 12689  0D06  2D0C               	goto	l3877
 12690  0D07  0820               	movf	___lwdiv@divisor,w
 12691  0D08  02A2               	subwf	___lwdiv@dividend,f
 12692  0D09  0821               	movf	___lwdiv@divisor+1,w
 12693  0D0A  3BA3               	subwfb	___lwdiv@dividend+1,f
 12694  0D0B  1425               	bsf	___lwdiv@quotient,0
 12695  0D0C                     l3877:	
 12696  0D0C  3001               	movlw	1
 12697  0D0D                     u2535:	
 12698  0D0D  36A1               	lsrf	___lwdiv@divisor+1,f
 12699  0D0E  0CA0               	rrf	___lwdiv@divisor,f
 12700  0D0F  0B89               	decfsz	9,f
 12701  0D10  2D0D               	goto	u2535
 12702  0D11  3001               	movlw	1
 12703  0D12  02A4               	subwf	___lwdiv@counter,f
 12704  0D13  1D03               	btfss	3,2
 12705  0D14  2CFA               	goto	l3871
 12706  0D15                     l3881:	
 12707  0D15  0826               	movf	___lwdiv@quotient+1,w
 12708  0D16  00A1               	movwf	?___lwdiv+1
 12709  0D17  0825               	movf	___lwdiv@quotient,w
 12710  0D18  00A0               	movwf	?___lwdiv
 12711  0D19  0008               	return
 12712  0D1A                     __end_of___lwdiv:	
 12713                           
 12714                           	psect	text64
 12715  0ABF                     __ptext64:	
 12716 ;; *************** function _strcat *****************
 12717 ;; Defined at:
 12718 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\strcat.c"
 12719 ;; Parameters:    Size  Location     Type
 12720 ;;  to              1    wreg     PTR unsigned char 
 12721 ;;		 -> RepBuffer(80), 
 12722 ;;  from            2    4[COMMON] PTR const unsigned char 
 12723 ;;		 -> STR_6(5), 
 12724 ;; Auto vars:     Size  Location     Type
 12725 ;;  to              1    1[BANK0 ] PTR unsigned char 
 12726 ;;		 -> RepBuffer(80), 
 12727 ;;  cp              1    2[BANK0 ] PTR unsigned char 
 12728 ;;		 -> RepBuffer(80), 
 12729 ;; Return value:  Size  Location     Type
 12730 ;;                  1    wreg      PTR unsigned char 
 12731 ;; Registers used:
 12732 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath
 12733 ;; Tracked objects:
 12734 ;;		On entry : 0/0
 12735 ;;		On exit  : 0/0
 12736 ;;		Unchanged: 0/0
 12737 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12738 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12739 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12740 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12741 ;;      Totals:         2       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12742 ;;Total ram usage:        5 bytes
 12743 ;; Hardware stack levels used:    1
 12744 ;; Hardware stack levels required when called:    2
 12745 ;; This function calls:
 12746 ;;		Nothing
 12747 ;; This function is called by:
 12748 ;;		_GetAnalogAscii
 12749 ;; This function uses a non-reentrant model
 12750 ;;
 12751                           
 12752                           
 12753                           ;psect for function _strcat
 12754  0ABF                     _strcat:	
 12755                           
 12756                           ;incstack = 0
 12757                           ; Regs used in _strcat: [wreg-fsr1h+status,2+status,0+pclath]
 12758                           ;strcat@to stored from wreg
 12759  0ABF  0020               	movlb	0	; select bank0
 12760  0AC0  00A1               	movwf	strcat@to
 12761  0AC1  0821               	movf	strcat@to,w
 12762  0AC2  00A0               	movwf	??_strcat
 12763  0AC3  0820               	movf	??_strcat,w
 12764  0AC4  00A2               	movwf	strcat@cp
 12765  0AC5                     l4023:	
 12766  0AC5  0822               	movf	strcat@cp,w
 12767  0AC6  0086               	movwf	6
 12768  0AC7  3002               	movlw	2	; select bank4/5
 12769  0AC8  0087               	movwf	7
 12770  0AC9  0801               	movf	1,w
 12771  0ACA  1903               	btfsc	3,2
 12772  0ACB  2AD9               	goto	l4029
 12773  0ACC  3001               	movlw	1
 12774  0ACD  00A0               	movwf	??_strcat
 12775  0ACE  0820               	movf	??_strcat,w
 12776  0ACF  07A2               	addwf	strcat@cp,f
 12777  0AD0  2AC5               	goto	l4023
 12778  0AD1                     l4025:	
 12779  0AD1  3001               	movlw	1
 12780  0AD2  00A0               	movwf	??_strcat
 12781  0AD3  0820               	movf	??_strcat,w
 12782  0AD4  07A2               	addwf	strcat@cp,f
 12783  0AD5  3001               	movlw	1
 12784  0AD6  07F4               	addwf	strcat@from,f
 12785  0AD7  3000               	movlw	0
 12786  0AD8  3DF5               	addwfc	strcat@from+1,f
 12787  0AD9                     l4029:	
 12788  0AD9  0822               	movf	strcat@cp,w
 12789  0ADA  0086               	movwf	6
 12790  0ADB  3002               	movlw	2	; select bank4/5
 12791  0ADC  0087               	movwf	7
 12792  0ADD  0874               	movf	strcat@from,w
 12793  0ADE  0084               	movwf	4
 12794  0ADF  0875               	movf	strcat@from+1,w
 12795  0AE0  0085               	movwf	5
 12796  0AE1  0800               	movf	0,w	;code access
 12797  0AE2  3FC0               	movwi [0]fsr1
 12798  0AE3  0889               	movf	9,f
 12799  0AE4  1903               	btfsc	3,2
 12800  0AE5  0008               	return
 12801  0AE6  2AD1               	goto	l4025
 12802  0AE7                     __end_of_strcat:	
 12803                           ;	Return value of _strcat is never used
 12804                           
 12805                           
 12806                           	psect	text65
 12807  09E3                     __ptext65:	
 12808 ;; *************** function _memset *****************
 12809 ;; Defined at:
 12810 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\memset.c"
 12811 ;; Parameters:    Size  Location     Type
 12812 ;;  p1              1    wreg     PTR void 
 12813 ;;		 -> RepBuffer(80), 
 12814 ;;  c               2    0[BANK0 ] int 
 12815 ;;  n               2    2[BANK0 ] unsigned int 
 12816 ;; Auto vars:     Size  Location     Type
 12817 ;;  p1              1    5[BANK0 ] PTR void 
 12818 ;;		 -> RepBuffer(80), 
 12819 ;;  p               1    4[BANK0 ] PTR unsigned char 
 12820 ;;		 -> RepBuffer(80), 
 12821 ;; Return value:  Size  Location     Type
 12822 ;;                  1    wreg      PTR void 
 12823 ;; Registers used:
 12824 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 12825 ;; Tracked objects:
 12826 ;;		On entry : 0/0
 12827 ;;		On exit  : 0/0
 12828 ;;		Unchanged: 0/0
 12829 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12830 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12831 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12832 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12833 ;;      Totals:         1       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12834 ;;Total ram usage:        7 bytes
 12835 ;; Hardware stack levels used:    1
 12836 ;; Hardware stack levels required when called:    2
 12837 ;; This function calls:
 12838 ;;		Nothing
 12839 ;; This function is called by:
 12840 ;;		_GetAnalogRaw
 12841 ;;		_GetAnalogAscii
 12842 ;; This function uses a non-reentrant model
 12843 ;;
 12844                           
 12845                           
 12846                           ;psect for function _memset
 12847  09E3                     _memset:	
 12848                           
 12849                           ;incstack = 0
 12850                           ; Regs used in _memset: [wreg+fsr1l+fsr1h+status,2+status,0]
 12851                           ;memset@p1 stored from wreg
 12852  09E3  0020               	movlb	0	; select bank0
 12853  09E4  00A5               	movwf	memset@p1
 12854  09E5  0825               	movf	memset@p1,w
 12855  09E6  00F4               	movwf	??_memset
 12856  09E7  0874               	movf	??_memset,w
 12857  09E8  00A4               	movwf	memset@p
 12858  09E9                     l4017:	
 12859  09E9  3001               	movlw	1
 12860  09EA  02A2               	subwf	memset@n,f
 12861  09EB  3000               	movlw	0
 12862  09EC  3BA3               	subwfb	memset@n+1,f
 12863  09ED  0A22               	incf	memset@n,w
 12864  09EE  1903               	btfsc	3,2
 12865  09EF  0A23               	incf	memset@n+1,w
 12866  09F0  1903               	btfsc	3,2
 12867  09F1  0008               	return
 12868  09F2  0820               	movf	memset@c,w
 12869  09F3  00F4               	movwf	??_memset
 12870  09F4  0824               	movf	memset@p,w
 12871  09F5  0086               	movwf	6
 12872  09F6  3002               	movlw	2	; select bank4/5
 12873  09F7  0087               	movwf	7
 12874  09F8  0874               	movf	??_memset,w
 12875  09F9  0081               	movwf	1
 12876  09FA  3001               	movlw	1
 12877  09FB  00F4               	movwf	??_memset
 12878  09FC  0874               	movf	??_memset,w
 12879  09FD  07A4               	addwf	memset@p,f
 12880  09FE  29E9               	goto	l4017
 12881  09FF                     __end_of_memset:	
 12882                           ;	Return value of _memset is never used
 12883                           
 12884                           
 12885                           	psect	text66
 12886  0A7A                     __ptext66:	
 12887 ;; *************** function _GenerateEvt *****************
 12888 ;; Defined at:
 12889 ;;		line 73 in file "../../../Framework/MercuryFwk/Source/c/02_Osl/os_ser.c"
 12890 ;; Parameters:    Size  Location     Type
 12891 ;;  Event           1    wreg     PTR struct _EventStructu
 12892 ;;		 -> I2cReplyPacketReady(2), I2cWriteRequest(2), I2cSetAddress(2), I2cNewTxNotification(2), 
 12893 ;;		 -> I2cNewPacketNotification(2), 
 12894 ;; Auto vars:     Size  Location     Type
 12895 ;;  Event           1    1[BANK0 ] PTR struct _EventStructu
 12896 ;;		 -> I2cReplyPacketReady(2), I2cWriteRequest(2), I2cSetAddress(2), I2cNewTxNotification(2), 
 12897 ;;		 -> I2cNewPacketNotification(2), 
 12898 ;;  EventStatus     1    0[BANK0 ] enum E3629
 12899 ;; Return value:  Size  Location     Type
 12900 ;;                  1    wreg      enum E3625
 12901 ;; Registers used:
 12902 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 12903 ;; Tracked objects:
 12904 ;;		On entry : 0/0
 12905 ;;		On exit  : 0/0
 12906 ;;		Unchanged: 0/0
 12907 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12908 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12909 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12910 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12911 ;;      Totals:         1       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12912 ;;Total ram usage:        3 bytes
 12913 ;; Hardware stack levels used:    1
 12914 ;; Hardware stack levels required when called:    2
 12915 ;; This function calls:
 12916 ;;		Nothing
 12917 ;; This function is called by:
 12918 ;;		_I2c_DataReceiveSm
 12919 ;;		_I2cSlv_I2cDrvHandle
 12920 ;;		_StdS_ManageStdServices
 12921 ;;		_AppSm
 12922 ;;		_GetAnalogRaw
 12923 ;;		_GetAnalogAscii
 12924 ;;		_GetDigitalRaw
 12925 ;; This function uses a non-reentrant model
 12926 ;;
 12927                           
 12928                           
 12929                           ;psect for function _GenerateEvt
 12930  0A7A                     _GenerateEvt:	
 12931                           
 12932                           ;incstack = 0
 12933                           ; Regs used in _GenerateEvt: [wreg+fsr1l+fsr1h+status,2+status,0]
 12934                           ;GenerateEvt@Event stored from wreg
 12935  0A7A  0020               	movlb	0	; select bank0
 12936  0A7B  00A1               	movwf	GenerateEvt@Event
 12937                           
 12938                           ;os_ser.c: 76: EventStatusType EventStatus = EventIdle;
 12939  0A7C  01A0               	clrf	GenerateEvt@EventStatus
 12940                           
 12941                           ;os_ser.c: 78: if ((Event->EventOptions != ((UINT8)(2))) && (Event->EventOptions != ((UI
      +                          NT8)(3))))
 12942  0A7D  0821               	movf	GenerateEvt@Event,w
 12943  0A7E  0086               	movwf	6
 12944  0A7F  0187               	clrf	7
 12945  0A80  3002               	movlw	2
 12946  0A81  0601               	xorwf	1,w
 12947  0A82  1903               	btfsc	3,2
 12948  0A83  2A97               	goto	l3917
 12949  0A84  0821               	movf	GenerateEvt@Event,w
 12950  0A85  0086               	movwf	6
 12951  0A86  0187               	clrf	7
 12952  0A87  3003               	movlw	3
 12953  0A88  0601               	xorwf	1,w
 12954  0A89  1903               	btfsc	3,2
 12955  0A8A  2A97               	goto	l3917
 12956                           
 12957                           ;os_ser.c: 79: {
 12958                           ;os_ser.c: 81: Event->EventStatus = EventSent;
 12959  0A8B  3002               	movlw	2
 12960  0A8C  00F4               	movwf	??_GenerateEvt
 12961  0A8D  0A21               	incf	GenerateEvt@Event,w
 12962  0A8E  0086               	movwf	6
 12963  0A8F  0187               	clrf	7
 12964  0A90  0874               	movf	??_GenerateEvt,w
 12965  0A91  0081               	movwf	1
 12966                           
 12967                           ;os_ser.c: 83: EventStatus = EventSent;
 12968  0A92  3002               	movlw	2
 12969  0A93  00F4               	movwf	??_GenerateEvt
 12970  0A94  0874               	movf	??_GenerateEvt,w
 12971  0A95  00A0               	movwf	GenerateEvt@EventStatus
 12972                           
 12973                           ;os_ser.c: 84: }
 12974  0A96  0008               	return
 12975  0A97                     l3917:	
 12976                           
 12977                           ;os_ser.c: 85: else
 12978                           ;os_ser.c: 86: {
 12979                           ;os_ser.c: 88: EventStatus = EventNotSent;
 12980  0A97  3003               	movlw	3
 12981  0A98  00F4               	movwf	??_GenerateEvt
 12982  0A99  0874               	movf	??_GenerateEvt,w
 12983  0A9A  00A0               	movwf	GenerateEvt@EventStatus
 12984  0A9B  0008               	return
 12985  0A9C                     __end_of_GenerateEvt:	
 12986                           ;os_ser.c: 89: }
 12987                           ;os_ser.c: 92: return(EventStatus);
 12988                           ;	Return value of _GenerateEvt is never used
 12989                           
 12990                           
 12991                           	psect	text67
 12992  09C8                     __ptext67:	
 12993 ;; *************** function _AdcGetValueCh *****************
 12994 ;; Defined at:
 12995 ;;		line 279 in file "../Source/c/04_App/sb810_app.c"
 12996 ;; Parameters:    Size  Location     Type
 12997 ;;  Ch              1    wreg     unsigned char 
 12998 ;; Auto vars:     Size  Location     Type
 12999 ;;  Ch              1    6[BANK0 ] unsigned char 
 13000 ;;  Result          2    7[BANK0 ] unsigned short 
 13001 ;; Return value:  Size  Location     Type
 13002 ;;                  2    3[BANK0 ] unsigned short 
 13003 ;; Registers used:
 13004 ;;		wreg, status,2, status,0, pclath, cstack
 13005 ;; Tracked objects:
 13006 ;;		On entry : 0/0
 13007 ;;		On exit  : 0/0
 13008 ;;		Unchanged: 0/0
 13009 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13010 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13011 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13012 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13013 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13014 ;;Total ram usage:        6 bytes
 13015 ;; Hardware stack levels used:    1
 13016 ;; Hardware stack levels required when called:    3
 13017 ;; This function calls:
 13018 ;;		_Adc_GetConvResult
 13019 ;;		_Adc_GetConvSts
 13020 ;;		_Adc_SelectChannel
 13021 ;;		_Adc_StartConversion
 13022 ;; This function is called by:
 13023 ;;		_GetAnalogRaw
 13024 ;;		_GetAnalogAscii
 13025 ;; This function uses a non-reentrant model
 13026 ;;
 13027                           
 13028                           
 13029                           ;psect for function _AdcGetValueCh
 13030  09C8                     _AdcGetValueCh:	
 13031                           
 13032                           ;incstack = 0
 13033                           ; Regs used in _AdcGetValueCh: [wreg+status,2+status,0+pclath+cstack]
 13034                           ;AdcGetValueCh@Ch stored from wreg
 13035  09C8  0020               	movlb	0	; select bank0
 13036  09C9  00A6               	movwf	AdcGetValueCh@Ch
 13037                           
 13038                           ;sb810_app.c: 281: UINT16 Result;
 13039                           ;sb810_app.c: 284: Adc_SelectChannel(Ch);
 13040  09CA  0826               	movf	AdcGetValueCh@Ch,w
 13041  09CB  3188  2085  3189   	fcall	_Adc_SelectChannel
 13042                           
 13043                           ;sb810_app.c: 286: Adc_StartConversion();
 13044  09CE  3188  2011  3189   	fcall	_Adc_StartConversion
 13045  09D1                     l4003:	
 13046                           ;sb810_app.c: 288: while (Adc_GetConvSts() == AdcConvInProgress);
 13047                           
 13048  09D1  3188  2017  3189   	fcall	_Adc_GetConvSts
 13049  09D4  3A00               	xorlw	0
 13050  09D5  1903               	skipnz
 13051  09D6  29D1               	goto	l4003
 13052                           
 13053                           ;sb810_app.c: 290: Result = Adc_GetConvResult();
 13054  09D7  3188  20C4         	fcall	_Adc_GetConvResult
 13055  09D9  0875               	movf	?_Adc_GetConvResult+1,w
 13056  09DA  0020               	movlb	0	; select bank0
 13057  09DB  00A8               	movwf	AdcGetValueCh@Result+1
 13058  09DC  0874               	movf	?_Adc_GetConvResult,w
 13059  09DD  00A7               	movwf	AdcGetValueCh@Result
 13060                           
 13061                           ;sb810_app.c: 292: return Result;
 13062  09DE  0828               	movf	AdcGetValueCh@Result+1,w
 13063  09DF  00A4               	movwf	?_AdcGetValueCh+1
 13064  09E0  0827               	movf	AdcGetValueCh@Result,w
 13065  09E1  00A3               	movwf	?_AdcGetValueCh
 13066  09E2  0008               	return
 13067  09E3                     __end_of_AdcGetValueCh:	
 13068                           
 13069                           	psect	text68
 13070  0811                     __ptext68:	
 13071 ;; *************** function _Adc_StartConversion *****************
 13072 ;; Defined at:
 13073 ;;		line 144 in file "../../../Framework/MercuryFwk/Source/c/01_Hal/02_Drv/adc_drv.c"
 13074 ;; Parameters:    Size  Location     Type
 13075 ;;		None
 13076 ;; Auto vars:     Size  Location     Type
 13077 ;;		None
 13078 ;; Return value:  Size  Location     Type
 13079 ;;                  1    wreg      void 
 13080 ;; Registers used:
 13081 ;;		None
 13082 ;; Tracked objects:
 13083 ;;		On entry : 0/0
 13084 ;;		On exit  : 0/0
 13085 ;;		Unchanged: 0/0
 13086 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13087 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13088 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13089 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13090 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13091 ;;Total ram usage:        0 bytes
 13092 ;; Hardware stack levels used:    1
 13093 ;; Hardware stack levels required when called:    2
 13094 ;; This function calls:
 13095 ;;		Nothing
 13096 ;; This function is called by:
 13097 ;;		_GetDieTemperature
 13098 ;;		_AdcGetValueCh
 13099 ;; This function uses a non-reentrant model
 13100 ;;
 13101                           
 13102                           
 13103                           ;psect for function _Adc_StartConversion
 13104  0811                     _Adc_StartConversion:	
 13105                           
 13106                           ;adc_drv.c: 147: ADCON0bits.GO_nDONE = ((UINT8)(1));
 13107                           
 13108                           ;incstack = 0
 13109                           ; Regs used in _Adc_StartConversion: []
 13110  0811  0021               	movlb	1	; select bank1
 13111  0812  149D               	bsf	29,1	;volatile
 13112  0813  0008               	return
 13113  0814                     __end_of_Adc_StartConversion:	
 13114                           
 13115                           	psect	text69
 13116  0885                     __ptext69:	
 13117 ;; *************** function _Adc_SelectChannel *****************
 13118 ;; Defined at:
 13119 ;;		line 130 in file "../../../Framework/MercuryFwk/Source/c/01_Hal/02_Drv/adc_drv.c"
 13120 ;; Parameters:    Size  Location     Type
 13121 ;;  SelCh           1    wreg     unsigned char 
 13122 ;; Auto vars:     Size  Location     Type
 13123 ;;  SelCh           1    5[COMMON] unsigned char 
 13124 ;; Return value:  Size  Location     Type
 13125 ;;                  1    wreg      void 
 13126 ;; Registers used:
 13127 ;;		wreg, status,2, status,0
 13128 ;; Tracked objects:
 13129 ;;		On entry : 0/0
 13130 ;;		On exit  : 0/0
 13131 ;;		Unchanged: 0/0
 13132 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13133 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13134 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13135 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13136 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13137 ;;Total ram usage:        2 bytes
 13138 ;; Hardware stack levels used:    1
 13139 ;; Hardware stack levels required when called:    2
 13140 ;; This function calls:
 13141 ;;		Nothing
 13142 ;; This function is called by:
 13143 ;;		_GetDieTemperature
 13144 ;;		_AdcGetValueCh
 13145 ;; This function uses a non-reentrant model
 13146 ;;
 13147                           
 13148                           
 13149                           ;psect for function _Adc_SelectChannel
 13150  0885                     _Adc_SelectChannel:	
 13151                           
 13152                           ;incstack = 0
 13153                           ; Regs used in _Adc_SelectChannel: [wreg+status,2+status,0]
 13154                           ;Adc_SelectChannel@SelCh stored from wreg
 13155  0885  00F5               	movwf	Adc_SelectChannel@SelCh
 13156                           
 13157                           ;adc_drv.c: 133: ADCON0bits.CHS = SelCh;
 13158  0886  0875               	movf	Adc_SelectChannel@SelCh,w
 13159  0887  00F4               	movwf	??_Adc_SelectChannel
 13160  0888  0DF4               	rlf	??_Adc_SelectChannel,f
 13161  0889  0DF4               	rlf	??_Adc_SelectChannel,f
 13162  088A  0021               	movlb	1	; select bank1
 13163  088B  081D               	movf	29,w	;volatile
 13164  088C  0674               	xorwf	??_Adc_SelectChannel,w
 13165  088D  3983               	andlw	-125
 13166  088E  0674               	xorwf	??_Adc_SelectChannel,w
 13167  088F  009D               	movwf	29	;volatile
 13168  0890  0008               	return
 13169  0891                     __end_of_Adc_SelectChannel:	
 13170                           
 13171                           	psect	text70
 13172  0817                     __ptext70:	
 13173 ;; *************** function _Adc_GetConvSts *****************
 13174 ;; Defined at:
 13175 ;;		line 158 in file "../../../Framework/MercuryFwk/Source/c/01_Hal/02_Drv/adc_drv.c"
 13176 ;; Parameters:    Size  Location     Type
 13177 ;;		None
 13178 ;; Auto vars:     Size  Location     Type
 13179 ;;		None
 13180 ;; Return value:  Size  Location     Type
 13181 ;;                  1    wreg      enum E3651
 13182 ;; Registers used:
 13183 ;;		wreg, status,2, status,0
 13184 ;; Tracked objects:
 13185 ;;		On entry : 0/0
 13186 ;;		On exit  : 0/0
 13187 ;;		Unchanged: 0/0
 13188 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13189 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13190 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13191 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13192 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13193 ;;Total ram usage:        0 bytes
 13194 ;; Hardware stack levels used:    1
 13195 ;; Hardware stack levels required when called:    2
 13196 ;; This function calls:
 13197 ;;		Nothing
 13198 ;; This function is called by:
 13199 ;;		_GetDieTemperature
 13200 ;;		_AdcGetValueCh
 13201 ;; This function uses a non-reentrant model
 13202 ;;
 13203                           
 13204                           
 13205                           ;psect for function _Adc_GetConvSts
 13206  0817                     _Adc_GetConvSts:	
 13207                           
 13208                           ;adc_drv.c: 161: return ((AdcConvStsType)(ADCON0bits.GO_nDONE));
 13209                           
 13210                           ;incstack = 0
 13211                           ; Regs used in _Adc_GetConvSts: [wreg+status,2+status,0]
 13212  0817  0021               	movlb	1	; select bank1
 13213  0818  0C1D               	rrf	29,w	;volatile
 13214  0819  3901               	andlw	1
 13215  081A  0008               	return
 13216  081B                     __end_of_Adc_GetConvSts:	
 13217                           
 13218                           	psect	text71
 13219  08C4                     __ptext71:	
 13220 ;; *************** function _Adc_GetConvResult *****************
 13221 ;; Defined at:
 13222 ;;		line 172 in file "../../../Framework/MercuryFwk/Source/c/01_Hal/02_Drv/adc_drv.c"
 13223 ;; Parameters:    Size  Location     Type
 13224 ;;		None
 13225 ;; Auto vars:     Size  Location     Type
 13226 ;;  AdcResult       2    1[BANK0 ] unsigned short 
 13227 ;; Return value:  Size  Location     Type
 13228 ;;                  2    4[COMMON] unsigned short 
 13229 ;; Registers used:
 13230 ;;		wreg, status,2, status,0
 13231 ;; Tracked objects:
 13232 ;;		On entry : 0/0
 13233 ;;		On exit  : 0/0
 13234 ;;		Unchanged: 0/0
 13235 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13236 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13237 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13238 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13239 ;;      Totals:         2       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13240 ;;Total ram usage:        5 bytes
 13241 ;; Hardware stack levels used:    1
 13242 ;; Hardware stack levels required when called:    2
 13243 ;; This function calls:
 13244 ;;		Nothing
 13245 ;; This function is called by:
 13246 ;;		_GetDieTemperature
 13247 ;;		_AdcGetValueCh
 13248 ;; This function uses a non-reentrant model
 13249 ;;
 13250                           
 13251                           
 13252                           ;psect for function _Adc_GetConvResult
 13253  08C4                     _Adc_GetConvResult:	
 13254                           
 13255                           ;adc_drv.c: 174: UINT16 AdcResult;
 13256                           ;adc_drv.c: 177: AdcResult = (((ADRESH & 0x03) << 8) | ADRESL);
 13257                           
 13258                           ;incstack = 0
 13259                           ; Regs used in _Adc_GetConvResult: [wreg+status,2+status,0]
 13260  08C4  3003               	movlw	3
 13261  08C5  0021               	movlb	1	; select bank1
 13262  08C6  051C               	andwf	28,w	;volatile
 13263  08C7  0020               	movlb	0	; select bank0
 13264  08C8  00A0               	movwf	??_Adc_GetConvResult
 13265  08C9  0820               	movf	??_Adc_GetConvResult,w
 13266  08CA  00A2               	movwf	Adc_GetConvResult@AdcResult+1
 13267  08CB  0021               	movlb	1	; select bank1
 13268  08CC  081B               	movf	27,w	;volatile
 13269  08CD  0020               	movlb	0	; select bank0
 13270  08CE  00A1               	movwf	Adc_GetConvResult@AdcResult
 13271                           
 13272                           ;adc_drv.c: 179: return AdcResult;
 13273  08CF  0822               	movf	Adc_GetConvResult@AdcResult+1,w
 13274  08D0  00F5               	movwf	?_Adc_GetConvResult+1
 13275  08D1  0821               	movf	Adc_GetConvResult@AdcResult,w
 13276  08D2  00F4               	movwf	?_Adc_GetConvResult
 13277  08D3  0008               	return
 13278  08D4                     __end_of_Adc_GetConvResult:	
 13279                           
 13280                           	psect	text72
 13281  0D1A                     __ptext72:	
 13282 ;; *************** function _Adc_InitAdcModule *****************
 13283 ;; Defined at:
 13284 ;;		line 107 in file "../../../Framework/MercuryFwk/Source/c/01_Hal/02_Drv/adc_drv.c"
 13285 ;; Parameters:    Size  Location     Type
 13286 ;;  AdcConfig       1    wreg     PTR struct _AdcCfgType
 13287 ;;		 -> App_MainTask@AdcConfig(6), 
 13288 ;; Auto vars:     Size  Location     Type
 13289 ;;  AdcConfig       1    4[COMMON] PTR struct _AdcCfgType
 13290 ;;		 -> App_MainTask@AdcConfig(6), 
 13291 ;; Return value:  Size  Location     Type
 13292 ;;                  1    wreg      void 
 13293 ;; Registers used:
 13294 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 13295 ;; Tracked objects:
 13296 ;;		On entry : 0/0
 13297 ;;		On exit  : 0/0
 13298 ;;		Unchanged: 0/0
 13299 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13300 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13301 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13302 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13303 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13304 ;;Total ram usage:        1 bytes
 13305 ;; Hardware stack levels used:    1
 13306 ;; Hardware stack levels required when called:    2
 13307 ;; This function calls:
 13308 ;;		Nothing
 13309 ;; This function is called by:
 13310 ;;		_App_MainTask
 13311 ;; This function uses a non-reentrant model
 13312 ;;
 13313                           
 13314                           
 13315                           ;psect for function _Adc_InitAdcModule
 13316  0D1A                     _Adc_InitAdcModule:	
 13317                           
 13318                           ;incstack = 0
 13319                           ; Regs used in _Adc_InitAdcModule: [wreg+fsr1l+fsr1h+status,2+status,0]
 13320                           ;Adc_InitAdcModule@AdcConfig stored from wreg
 13321  0D1A  00F4               	movwf	Adc_InitAdcModule@AdcConfig
 13322                           
 13323                           ;adc_drv.c: 110: ADCON0bits.ADON = AdcConfig->AdcEnable;
 13324  0D1B  0874               	movf	Adc_InitAdcModule@AdcConfig,w
 13325  0D1C  0086               	movwf	6
 13326  0D1D  0187               	clrf	7
 13327  0D1E  0C01               	rrf	1,w
 13328  0D1F  0021               	movlb	1	; select bank1
 13329  0D20  1C03               	skipc
 13330  0D21  101D               	bcf	29,0	;volatile
 13331  0D22  1803               	skipnc
 13332  0D23  141D               	bsf	29,0	;volatile
 13333                           
 13334                           ;adc_drv.c: 112: ADCON1bits.ADFM = AdcConfig->AdcResultFormat;
 13335  0D24  0A74               	incf	Adc_InitAdcModule@AdcConfig,w
 13336  0D25  0086               	movwf	6
 13337  0D26  0187               	clrf	7
 13338  0D27  0C01               	rrf	1,w
 13339  0D28  1C03               	skipc
 13340  0D29  139E               	bcf	30,7	;volatile
 13341  0D2A  1803               	skipnc
 13342  0D2B  179E               	bsf	30,7	;volatile
 13343                           
 13344                           ;adc_drv.c: 114: ADCON1bits.ADCS0 = AdcConfig->AdcConvClock;
 13345  0D2C  0874               	movf	Adc_InitAdcModule@AdcConfig,w
 13346  0D2D  3E02               	addlw	2
 13347  0D2E  0086               	movwf	6
 13348  0D2F  0187               	clrf	7
 13349  0D30  0C01               	rrf	1,w
 13350  0D31  1C03               	skipc
 13351  0D32  121E               	bcf	30,4	;volatile
 13352  0D33  1803               	skipnc
 13353  0D34  161E               	bsf	30,4	;volatile
 13354                           
 13355                           ;adc_drv.c: 116: ADCON1bits.ADNREF = AdcConfig->AdcNegRef;
 13356  0D35  0874               	movf	Adc_InitAdcModule@AdcConfig,w
 13357  0D36  3E03               	addlw	3
 13358  0D37  0086               	movwf	6
 13359  0D38  0187               	clrf	7
 13360  0D39  0C01               	rrf	1,w
 13361  0D3A  1C03               	skipc
 13362  0D3B  111E               	bcf	30,2	;volatile
 13363  0D3C  1803               	skipnc
 13364  0D3D  151E               	bsf	30,2	;volatile
 13365                           
 13366                           ;adc_drv.c: 117: ADCON1bits.ADPREF = AdcConfig->AdcPosRef;
 13367  0D3E  0874               	movf	Adc_InitAdcModule@AdcConfig,w
 13368  0D3F  3E04               	addlw	4
 13369  0D40  0086               	movwf	6
 13370  0D41  0187               	clrf	7
 13371  0D42  081E               	movf	30,w	;volatile
 13372  0D43  0601               	xorwf	1,w
 13373  0D44  39FC               	andlw	-4
 13374  0D45  0601               	xorwf	1,w
 13375  0D46  009E               	movwf	30	;volatile
 13376                           
 13377                           ;adc_drv.c: 119: PIE1bits.ADIE = AdcConfig->AdcIntEnabled;
 13378  0D47  0874               	movf	Adc_InitAdcModule@AdcConfig,w
 13379  0D48  3E05               	addlw	5
 13380  0D49  0086               	movwf	6
 13381  0D4A  0187               	clrf	7
 13382  0D4B  0C01               	rrf	1,w
 13383  0D4C  1C03               	skipc
 13384  0D4D  1311               	bcf	17,6	;volatile
 13385  0D4E  1803               	skipnc
 13386  0D4F  1711               	bsf	17,6	;volatile
 13387  0D50  0008               	return
 13388  0D51                     __end_of_Adc_InitAdcModule:	
 13389                           
 13390                           	psect	text73
 13391  0742                     __ptext73:	
 13392 ;; *************** function _Adc_ConfigAnCh *****************
 13393 ;; Defined at:
 13394 ;;		line 73 in file "../../../Framework/MercuryFwk/Source/c/01_Hal/02_Drv/adc_drv.c"
 13395 ;; Parameters:    Size  Location     Type
 13396 ;;  AnChSel         1    wreg     PTR struct _AnalogChSelT
 13397 ;;		 -> App_MainTask@AnalogChSel(12), 
 13398 ;; Auto vars:     Size  Location     Type
 13399 ;;  AnChSel         1    4[COMMON] PTR struct _AnalogChSelT
 13400 ;;		 -> App_MainTask@AnalogChSel(12), 
 13401 ;; Return value:  Size  Location     Type
 13402 ;;                  1    wreg      void 
 13403 ;; Registers used:
 13404 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 13405 ;; Tracked objects:
 13406 ;;		On entry : 0/0
 13407 ;;		On exit  : 0/0
 13408 ;;		Unchanged: 0/0
 13409 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13410 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13411 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13412 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13413 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13414 ;;Total ram usage:        1 bytes
 13415 ;; Hardware stack levels used:    1
 13416 ;; Hardware stack levels required when called:    2
 13417 ;; This function calls:
 13418 ;;		Nothing
 13419 ;; This function is called by:
 13420 ;;		_App_MainTask
 13421 ;; This function uses a non-reentrant model
 13422 ;;
 13423                           
 13424                           
 13425                           ;psect for function _Adc_ConfigAnCh
 13426  0742                     _Adc_ConfigAnCh:	
 13427                           
 13428                           ;incstack = 0
 13429                           ; Regs used in _Adc_ConfigAnCh: [wreg+fsr1l+fsr1h+status,2+status,0]
 13430                           ;Adc_ConfigAnCh@AnChSel stored from wreg
 13431  0742  00F4               	movwf	Adc_ConfigAnCh@AnChSel
 13432                           
 13433                           ;adc_drv.c: 76: ANSELA = 0x00;
 13434  0743  0023               	movlb	3	; select bank3
 13435  0744  018C               	clrf	12	;volatile
 13436                           
 13437                           ;adc_drv.c: 77: ANSELAbits.ANSA0 = AnChSel->AnSelA0An0;
 13438  0745  0874               	movf	Adc_ConfigAnCh@AnChSel,w
 13439  0746  0086               	movwf	6
 13440  0747  0187               	clrf	7
 13441  0748  0C01               	rrf	1,w
 13442  0749  1C03               	skipc
 13443  074A  100C               	bcf	12,0	;volatile
 13444  074B  1803               	skipnc
 13445  074C  140C               	bsf	12,0	;volatile
 13446                           
 13447                           ;adc_drv.c: 78: ANSELAbits.ANSA1 = AnChSel->AnSelA1An1;
 13448  074D  0A74               	incf	Adc_ConfigAnCh@AnChSel,w
 13449  074E  0086               	movwf	6
 13450  074F  0187               	clrf	7
 13451  0750  0C01               	rrf	1,w
 13452  0751  1C03               	skipc
 13453  0752  108C               	bcf	12,1	;volatile
 13454  0753  1803               	skipnc
 13455  0754  148C               	bsf	12,1	;volatile
 13456                           
 13457                           ;adc_drv.c: 79: ANSELAbits.ANSA2 = AnChSel->AnSelA2An2;
 13458  0755  0874               	movf	Adc_ConfigAnCh@AnChSel,w
 13459  0756  3E02               	addlw	2
 13460  0757  0086               	movwf	6
 13461  0758  0187               	clrf	7
 13462  0759  0C01               	rrf	1,w
 13463  075A  1C03               	skipc
 13464  075B  110C               	bcf	12,2	;volatile
 13465  075C  1803               	skipnc
 13466  075D  150C               	bsf	12,2	;volatile
 13467                           
 13468                           ;adc_drv.c: 80: ANSELAbits.ANSA4 = AnChSel->AnSelA4An3;
 13469  075E  0874               	movf	Adc_ConfigAnCh@AnChSel,w
 13470  075F  3E03               	addlw	3
 13471  0760  0086               	movwf	6
 13472  0761  0187               	clrf	7
 13473  0762  0C01               	rrf	1,w
 13474  0763  1C03               	skipc
 13475  0764  120C               	bcf	12,4	;volatile
 13476  0765  1803               	skipnc
 13477  0766  160C               	bsf	12,4	;volatile
 13478                           
 13479                           ;adc_drv.c: 83: ANSELB = 0x00;
 13480  0767  018D               	clrf	13	;volatile
 13481                           
 13482                           ;adc_drv.c: 84: ANSELBbits.ANSB4 = AnChSel->AnSelB4An10;
 13483  0768  0874               	movf	Adc_ConfigAnCh@AnChSel,w
 13484  0769  3E04               	addlw	4
 13485  076A  0086               	movwf	6
 13486  076B  0187               	clrf	7
 13487  076C  0C01               	rrf	1,w
 13488  076D  1C03               	skipc
 13489  076E  120D               	bcf	13,4	;volatile
 13490  076F  1803               	skipnc
 13491  0770  160D               	bsf	13,4	;volatile
 13492                           
 13493                           ;adc_drv.c: 85: ANSELBbits.ANSB5 = AnChSel->AnSelB5An11;
 13494  0771  0874               	movf	Adc_ConfigAnCh@AnChSel,w
 13495  0772  3E05               	addlw	5
 13496  0773  0086               	movwf	6
 13497  0774  0187               	clrf	7
 13498  0775  0C01               	rrf	1,w
 13499  0776  1C03               	skipc
 13500  0777  128D               	bcf	13,5	;volatile
 13501  0778  1803               	skipnc
 13502  0779  168D               	bsf	13,5	;volatile
 13503                           
 13504                           ;adc_drv.c: 88: ANSELC = 0x00;
 13505  077A  018E               	clrf	14	;volatile
 13506                           
 13507                           ;adc_drv.c: 89: ANSELCbits.ANSC0 = AnChSel->AnSelC0An4;
 13508  077B  0874               	movf	Adc_ConfigAnCh@AnChSel,w
 13509  077C  3E06               	addlw	6
 13510  077D  0086               	movwf	6
 13511  077E  0187               	clrf	7
 13512  077F  0C01               	rrf	1,w
 13513  0780  1C03               	skipc
 13514  0781  100E               	bcf	14,0	;volatile
 13515  0782  1803               	skipnc
 13516  0783  140E               	bsf	14,0	;volatile
 13517                           
 13518                           ;adc_drv.c: 90: ANSELCbits.ANSC1 = AnChSel->AnSelC1An5;
 13519  0784  0874               	movf	Adc_ConfigAnCh@AnChSel,w
 13520  0785  3E07               	addlw	7
 13521  0786  0086               	movwf	6
 13522  0787  0187               	clrf	7
 13523  0788  0C01               	rrf	1,w
 13524  0789  1C03               	skipc
 13525  078A  108E               	bcf	14,1	;volatile
 13526  078B  1803               	skipnc
 13527  078C  148E               	bsf	14,1	;volatile
 13528                           
 13529                           ;adc_drv.c: 91: ANSELCbits.ANSC2 = AnChSel->AnSelC2An6;
 13530  078D  0874               	movf	Adc_ConfigAnCh@AnChSel,w
 13531  078E  3E08               	addlw	8
 13532  078F  0086               	movwf	6
 13533  0790  0187               	clrf	7
 13534  0791  0C01               	rrf	1,w
 13535  0792  1C03               	skipc
 13536  0793  110E               	bcf	14,2	;volatile
 13537  0794  1803               	skipnc
 13538  0795  150E               	bsf	14,2	;volatile
 13539                           
 13540                           ;adc_drv.c: 92: ANSELCbits.ANSC3 = AnChSel->AnSelC3An7;
 13541  0796  0874               	movf	Adc_ConfigAnCh@AnChSel,w
 13542  0797  3E09               	addlw	9
 13543  0798  0086               	movwf	6
 13544  0799  0187               	clrf	7
 13545  079A  0C01               	rrf	1,w
 13546  079B  1C03               	skipc
 13547  079C  118E               	bcf	14,3	;volatile
 13548  079D  1803               	skipnc
 13549  079E  158E               	bsf	14,3	;volatile
 13550                           
 13551                           ;adc_drv.c: 94: ANSELCbits.ANSC6 = AnChSel->AnSelC6An8;
 13552  079F  0874               	movf	Adc_ConfigAnCh@AnChSel,w
 13553  07A0  3E0A               	addlw	10
 13554  07A1  0086               	movwf	6
 13555  07A2  0187               	clrf	7
 13556  07A3  0C01               	rrf	1,w
 13557  07A4  1C03               	skipc
 13558  07A5  130E               	bcf	14,6	;volatile
 13559  07A6  1803               	skipnc
 13560  07A7  170E               	bsf	14,6	;volatile
 13561                           
 13562                           ;adc_drv.c: 95: ANSELCbits.ANSC7 = AnChSel->AnSelC7An9;
 13563  07A8  0874               	movf	Adc_ConfigAnCh@AnChSel,w
 13564  07A9  3E0B               	addlw	11
 13565  07AA  0086               	movwf	6
 13566  07AB  0187               	clrf	7
 13567  07AC  0C01               	rrf	1,w
 13568  07AD  1C03               	skipc
 13569  07AE  138E               	bcf	14,7	;volatile
 13570  07AF  1803               	skipnc
 13571  07B0  178E               	bsf	14,7	;volatile
 13572  07B1  0008               	return
 13573  07B2                     __end_of_Adc_ConfigAnCh:	
 13574                           
 13575                           	psect	intentry
 13576  0004                     __pintentry:	
 13577 ;; *************** function _MainInterrupt *****************
 13578 ;; Defined at:
 13579 ;;		line 50 in file "../../../Framework/MercuryFwk/Source/c/02_Osl/interrupts.c"
 13580 ;; Parameters:    Size  Location     Type
 13581 ;;		None
 13582 ;; Auto vars:     Size  Location     Type
 13583 ;;		None
 13584 ;; Return value:  Size  Location     Type
 13585 ;;                  1    wreg      void 
 13586 ;; Registers used:
 13587 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13588 ;; Tracked objects:
 13589 ;;		On entry : 0/0
 13590 ;;		On exit  : 0/0
 13591 ;;		Unchanged: 0/0
 13592 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13593 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13594 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13595 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13596 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13597 ;;Total ram usage:        1 bytes
 13598 ;; Hardware stack levels used:    1
 13599 ;; Hardware stack levels required when called:    1
 13600 ;; This function calls:
 13601 ;;		i1_GenerateEvt
 13602 ;; This function is called by:
 13603 ;;		Interrupt level 1
 13604 ;; This function uses a non-reentrant model
 13605 ;;
 13606                           
 13607  0004                     _MainInterrupt:	
 13608                           
 13609                           ;incstack = 0
 13610  0004  147E               	bsf	126,0	;set compiler interrupt flag (level 1)
 13611                           
 13612                           ; Regs used in _MainInterrupt: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 13613  0005  3180               	pagesel	$
 13614  0006  0020               	movlb	0	; select bank0
 13615  0007  087F               	movf	127,w
 13616  0008  00F3               	movwf	??_MainInterrupt
 13617                           
 13618                           ;interrupts.c: 53: if (PIR1bits.TMR2IF == ((UINT8)(1)) && PIE1bits.TMR2IE == ((UINT8)(1)
      +                          ))
 13619  0009  1C91               	btfss	17,1	;volatile
 13620  000A  281D               	goto	i1l3795
 13621  000B  0021               	movlb	1	; select bank1
 13622  000C  1C91               	btfss	17,1	;volatile
 13623  000D  281D               	goto	i1l3795
 13624                           
 13625                           ;interrupts.c: 54: {
 13626                           ;interrupts.c: 56: PIR1bits.TMR2IF = ((UINT8)(0));
 13627  000E  0020               	movlb	0	; select bank0
 13628  000F  1091               	bcf	17,1	;volatile
 13629                           
 13630                           ;interrupts.c: 58: InterruptCounter++;
 13631  0010  3001               	movlw	1
 13632  0011  0021               	movlb	1	; select bank1
 13633  0012  07BE               	addwf	_InterruptCounter^(0+128),f
 13634  0013  3000               	movlw	0
 13635  0014  3DBF               	addwfc	(_InterruptCounter+1)^(0+128),f
 13636                           
 13637                           ;interrupts.c: 60: if (InterruptCounter >= ((UINT16)(1)))
 13638  0015  083E               	movf	_InterruptCounter^(0+128),w
 13639  0016  043F               	iorwf	(_InterruptCounter+1)^(0+128),w
 13640  0017  1903               	btfsc	3,2
 13641  0018  281D               	goto	i1l3795
 13642                           
 13643                           ;interrupts.c: 61: {
 13644                           ;interrupts.c: 63: InterruptCounter = 0;
 13645  0019  01BE               	clrf	_InterruptCounter^(0+128)
 13646  001A  01BF               	clrf	(_InterruptCounter+1)^(0+128)
 13647                           
 13648                           ;interrupts.c: 65: MainSystemTimebaseFlag = CallTaskPhase;
 13649  001B  0020               	movlb	0	; select bank0
 13650  001C  01ED               	clrf	_MainSystemTimebaseFlag
 13651  001D                     i1l3795:	
 13652                           
 13653                           ;interrupts.c: 66: }
 13654                           ;interrupts.c: 67: }
 13655                           ;interrupts.c: 70: if(PIE1bits.SSP1IE == ((UINT8)(1)) && PIR1bits.SSP1IF == ((UINT8)(1))
      +                          )
 13656  001D  0021               	movlb	1	; select bank1
 13657  001E  1D91               	btfss	17,3	;volatile
 13658  001F  2827               	goto	i1l381
 13659  0020  0020               	movlb	0	; select bank0
 13660  0021  1D91               	btfss	17,3	;volatile
 13661  0022  2827               	goto	i1l381
 13662                           
 13663                           ;interrupts.c: 71: {
 13664                           ;interrupts.c: 73: PIR1bits.SSP1IF = ((UINT8)(0));
 13665  0023  1191               	bcf	17,3	;volatile
 13666                           
 13667                           ;interrupts.c: 77: GenerateEvt(&I2cNewTxNotification);
 13668  0024  30E2               	movlw	(low (_I2cNewTxNotification| 0))& (0+255)
 13669  0025  318A  2238         	fcall	i1_GenerateEvt
 13670  0027                     i1l381:	
 13671  0027  0873               	movf	??_MainInterrupt,w
 13672  0028  0020               	movlb	0	; select bank0
 13673  0029  00FF               	movwf	127
 13674  002A  107E               	bcf	126,0	;clear compiler interrupt flag (level 1)
 13675  002B  0009               	retfie
 13676  002C                     __end_of_MainInterrupt:	
 13677                           
 13678                           	psect	text75
 13679  0A38                     __ptext75:	
 13680 ;; *************** function i1_GenerateEvt *****************
 13681 ;; Defined at:
 13682 ;;		line 73 in file "../../../Framework/MercuryFwk/Source/c/02_Osl/os_ser.c"
 13683 ;; Parameters:    Size  Location     Type
 13684 ;;  Event           1    wreg     PTR struct _EventStructu
 13685 ;;		 -> I2cReplyPacketReady(2), I2cWriteRequest(2), I2cSetAddress(2), I2cNewTxNotification(2), 
 13686 ;;		 -> I2cNewPacketNotification(2), 
 13687 ;; Auto vars:     Size  Location     Type
 13688 ;;  Event           1    1[COMMON] PTR struct _EventStructu
 13689 ;;		 -> I2cReplyPacketReady(2), I2cWriteRequest(2), I2cSetAddress(2), I2cNewTxNotification(2), 
 13690 ;;		 -> I2cNewPacketNotification(2), 
 13691 ;;  GenerateEvt     1    2[COMMON] enum E3629
 13692 ;; Return value:  Size  Location     Type
 13693 ;;                  1    wreg      enum E3625
 13694 ;; Registers used:
 13695 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 13696 ;; Tracked objects:
 13697 ;;		On entry : 0/0
 13698 ;;		On exit  : 0/0
 13699 ;;		Unchanged: 0/0
 13700 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13701 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13702 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13703 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13704 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13705 ;;Total ram usage:        3 bytes
 13706 ;; Hardware stack levels used:    1
 13707 ;; This function calls:
 13708 ;;		Nothing
 13709 ;; This function is called by:
 13710 ;;		_MainInterrupt
 13711 ;; This function uses a non-reentrant model
 13712 ;;
 13713                           
 13714                           
 13715                           ;psect for function i1_GenerateEvt
 13716  0A38                     i1_GenerateEvt:	
 13717                           
 13718                           ;incstack = 0
 13719                           ; Regs used in i1_GenerateEvt: [wreg+fsr1l+fsr1h+status,2+status,0]
 13720                           ;i1GenerateEvt@Event stored from wreg
 13721  0A38  00F1               	movwf	i1GenerateEvt@Event
 13722                           
 13723                           ;os_ser.c: 76: EventStatusType EventStatus = EventIdle;
 13724  0A39  01F2               	clrf	i1GenerateEvt@EventStatus
 13725                           
 13726                           ;os_ser.c: 78: if ((Event->EventOptions != ((UINT8)(2))) && (Event->EventOptions != ((UI
      +                          NT8)(3))))
 13727  0A3A  0871               	movf	i1GenerateEvt@Event,w
 13728  0A3B  0086               	movwf	6
 13729  0A3C  0187               	clrf	7
 13730  0A3D  3002               	movlw	2
 13731  0A3E  0601               	xorwf	1,w
 13732  0A3F  1903               	btfsc	3,2
 13733  0A40  2A54               	goto	i1l3775
 13734  0A41  0871               	movf	i1GenerateEvt@Event,w
 13735  0A42  0086               	movwf	6
 13736  0A43  0187               	clrf	7
 13737  0A44  3003               	movlw	3
 13738  0A45  0601               	xorwf	1,w
 13739  0A46  1903               	btfsc	3,2
 13740  0A47  2A54               	goto	i1l3775
 13741                           
 13742                           ;os_ser.c: 79: {
 13743                           ;os_ser.c: 81: Event->EventStatus = EventSent;
 13744  0A48  3002               	movlw	2
 13745  0A49  00F0               	movwf	??i1_GenerateEvt
 13746  0A4A  0A71               	incf	i1GenerateEvt@Event,w
 13747  0A4B  0086               	movwf	6
 13748  0A4C  0187               	clrf	7
 13749  0A4D  0870               	movf	??i1_GenerateEvt,w
 13750  0A4E  0081               	movwf	1
 13751                           
 13752                           ;os_ser.c: 83: EventStatus = EventSent;
 13753  0A4F  3002               	movlw	2
 13754  0A50  00F0               	movwf	??i1_GenerateEvt
 13755  0A51  0870               	movf	??i1_GenerateEvt,w
 13756  0A52  00F2               	movwf	i1GenerateEvt@EventStatus
 13757                           
 13758                           ;os_ser.c: 84: }
 13759  0A53  0008               	return
 13760  0A54                     i1l3775:	
 13761                           
 13762                           ;os_ser.c: 85: else
 13763                           ;os_ser.c: 86: {
 13764                           ;os_ser.c: 88: EventStatus = EventNotSent;
 13765  0A54  3003               	movlw	3
 13766  0A55  00F0               	movwf	??i1_GenerateEvt
 13767  0A56  0870               	movf	??i1_GenerateEvt,w
 13768  0A57  00F2               	movwf	i1GenerateEvt@EventStatus
 13769  0A58  0008               	return
 13770  0A59                     __end_ofi1_GenerateEvt:	
 13771                           ;os_ser.c: 89: }
 13772                           ;os_ser.c: 92: return(EventStatus);
 13773                           ;	Return value of i1_GenerateEvt is never used
 13774                           
 13775  007E                     btemp	set	126	;btemp
 13776  007E                     int$flags	set	126
 13777  007E                     wtemp	set	126
 13778  007E                     wtemp0	set	126
 13779  0080                     wtemp1	set	128
 13780  0082                     wtemp2	set	130
 13781  0084                     wtemp3	set	132
 13782  0086                     wtemp4	set	134
 13783  0088                     wtemp5	set	136
 13784  007F                     wtemp6	set	127
 13785  007E                     ttemp	set	126
 13786  007E                     ttemp0	set	126
 13787  0081                     ttemp1	set	129
 13788  0084                     ttemp2	set	132
 13789  0087                     ttemp3	set	135
 13790  007F                     ttemp4	set	127
 13791  007E                     ltemp	set	126
 13792  007E                     ltemp0	set	126
 13793  0082                     ltemp1	set	130
 13794  0086                     ltemp2	set	134
 13795  0080                     ltemp3	set	128


Data Sizes:
    Strings     33
    Constant    12
    Data        42
    BSS         407
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14      6      10
    BANK0            80     65      78
    BANK1            80      6      78
    BANK2            80      0      40
    BANK3            80      0      80
    BANK4            80      0      80
    BANK5            80      0      80
    BANK6            80      0      80
    BANK7            80      0       0
    BANK8            80      0       0
    BANK9            80      0       0
    BANK10           80      0       0
    BANK11           45      0       0
    BANK12            0      0       0

Pointer List with Targets:

    Tmr6IsrCallback	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), 

    Tmr4IsrCallback	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), 

    Tmr2IsrCallback	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), 

    strcat@from	PTR const unsigned char  size(2) Largest target is 5
		 -> STR_6(CODE[5]), 

    strcat@to	PTR unsigned char  size(1) Largest target is 80
		 -> RepBuffer(BANK4[80]), 

    strcat@cp	PTR unsigned char  size(1) Largest target is 80
		 -> RepBuffer(BANK4[80]), 

    memset@p1	PTR void  size(1) Largest target is 80
		 -> RepBuffer(BANK4[80]), 

    memset@p	PTR unsigned char  size(1) Largest target is 80
		 -> RepBuffer(BANK4[80]), 

    utoa@buf	PTR unsigned char  size(2) Largest target is 80
		 -> StdS_ManageStdServices@DieTempStr(BANK0[4]), RepBuffer(BANK4[80]), 

    sp__itoa	PTR unsigned char  size(1) Largest target is 0

    sp__strcat	PTR unsigned char  size(1) Largest target is 80
		 -> RepBuffer(BANK4[80]), 

    sp__memset	PTR void  size(1) Largest target is 80
		 -> RepBuffer(BANK4[80]), 

    sp__utoa	PTR unsigned char  size(2) Largest target is 80
		 -> StdS_ManageStdServices@DieTempStr(BANK0[4]), RepBuffer(BANK4[80]), 

    StringCopy@SourceStr	PTR unsigned char  size(2) Largest target is 9
		 -> StdS_ManageStdServices@DieTempStr(BANK0[4]), STR_5(CODE[9]), STR_4(CODE[9]), STR_3(CODE[6]), 
		 -> STR_2(CODE[5]), 

    StringCopy@DestStr	PTR unsigned char  size(1) Largest target is 80
		 -> RepBuffer(BANK4[80]), 

    LedStateMachine@LedSts	PTR enum E4018 size(1) Largest target is 1
		 -> Led1Sts(BANK0[1]), 

    LedStateMachine@LedPulse	PTR struct _LedPulseType size(1) Largest target is 6
		 -> Led1Pulse(BANK1[6]), 

    LedStateMachine@LedBlink	PTR struct _LedBlinkType size(1) Largest target is 9
		 -> Led1Blink(BANK1[9]), 

    ReceiveEvt@Event	PTR struct _EventStructure size(1) Largest target is 2
		 -> I2cReplyPacketReady(COMMON[2]), I2cWriteRequest(BANK1[2]), I2cSetAddress(BANK1[2]), I2cNewTxNotification(BANK1[2]), 
		 -> I2cNewPacketNotification(BANK1[2]), 

    GenerateEvt@Event	PTR struct _EventStructure size(1) Largest target is 2
		 -> I2cReplyPacketReady(COMMON[2]), I2cWriteRequest(BANK1[2]), I2cSetAddress(BANK1[2]), I2cNewTxNotification(BANK1[2]), 
		 -> I2cNewPacketNotification(BANK1[2]), 

    S1226_SchedTblType$Task	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> App_MainTask(), Led_MainTask(), Wdg_MainTask(), I2cSlv_MainTask(), 
		 -> I2c_DataReceiveSm(), 

    TaskTable.Task	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> App_MainTask(), Led_MainTask(), Wdg_MainTask(), I2cSlv_MainTask(), 
		 -> I2c_DataReceiveSm(), 

    Tmr_TmrBConfig@TmrBConfig	PTR struct _TmrBConfigType size(1) Largest target is 6
		 -> InitSchTimer@TmrBConfig(BANK0[6]), 

    Mcu_ConfigPullUps@WpuCh	PTR struct _WpuChType size(1) Largest target is 18
		 -> App_MainTask@WpuCh(BANK0[18]), 

    LedPulseStateMachine@LedPulse	PTR struct _LedPulseType size(1) Largest target is 6
		 -> Led1Pulse(BANK1[6]), 

    LedBlinkStateMachine@LedBlink	PTR struct _LedBlinkType size(1) Largest target is 9
		 -> Led1Blink(BANK1[9]), 

    I2c_UpdateTxBuffer@DataBuffer	PTR unsigned char  size(1) Largest target is 80
		 -> RepBuffer(BANK4[80]), 

    I2c_InitI2cModule@I2cConfig	PTR struct _I2cConfig size(1) Largest target is 11
		 -> I2cConfig(BANK1[11]), 

    Adc_InitAdcModule@AdcConfig	PTR struct _AdcCfgType size(1) Largest target is 6
		 -> App_MainTask@AdcConfig(BANK0[6]), 

    Adc_ConfigAnCh@AnChSel	PTR struct _AnalogChSelType size(1) Largest target is 12
		 -> App_MainTask@AnalogChSel(BANK0[12]), 


Critical Paths under _main in COMMON

    _Tmr_TmrBConfig->_TmrBInit
    _Tmr_TmrBConfig->_Tmr_TmrBIrqSet
    _Tmr_TmrBPrSet->___wmul
    ___lmul->___wmul
    _Wdg_MainTask->_Mcu_SetWdgPeriod
    _LedStateMachine->_LedBlinkStateMachine
    _LedPulseStateMachine->_Led_SetLedStatus
    _LedBlinkStateMachine->___lwdiv
    _I2c_DataReceiveSm->_ClearRxBuffer
    _I2c_DataReceiveSm->_ClearTxBuffer
    _I2c_DataReceiveSm->_ReceiveEvt
    _I2c_InitI2cModule->_ClearRxBuffer
    _I2c_InitI2cModule->_ClearTxBuffer
    _I2cSlv_I2cDrvHandle->_Led_SetLedStatus
    _I2cSlv_I2cDrvHandle->_ReceiveEvt
    _AppSm->_StdS_SetI2cAddress
    _ManageProtocol->_GetDigitalRaw
    _ManageProtocol->_ReceiveEvt
    _SetLedBehavSts->_Led_SetLedPulseTime
    _SetLedBehavSts->_Led_SetLedStatus
    _LowPowerMode->_Mcu_SetWdgSts
    _GetDieTemperature->_Adc_GetConvResult
    _GetDieTemperature->_Adc_SelectChannel
    _ControlLedDirect->_Led_SetLedStatus
    _GetDigitalRaw->_GenerateEvt
    _GetAnalogAscii->_strcat
    _utoa->___lwmod
    _AdcGetValueCh->_Adc_GetConvResult
    _AdcGetValueCh->_Adc_SelectChannel

Critical Paths under _MainInterrupt in COMMON

    _MainInterrupt->i1_GenerateEvt

Critical Paths under _main in BANK0

    _SystemInit->_InitSchTimer
    _InitSchTimer->_Tmr_TmrBConfig
    _Tmr_TmrBConfig->_Tmr_TmrBPrSet
    _Tmr_TmrBPrSet->___lmul
    ___lmul->___wmul
    _MainScheduler->_InitializeTasks
    _MainScheduler->_ScheduleTasks
    _ScheduleTasks->_App_MainTask
    _InitializeTasks->_App_MainTask
    _LedStateMachine->_LedPulseStateMachine
    _LedPulseStateMachine->___lwdiv
    _LedBlinkStateMachine->___lwdiv
    _I2cSlv_I2cDrvHandle->_I2c_UpdateTxBuffer
    _App_MainTask->_AppSm
    _ManageProtocol->_StdS_ManageStdServices
    _StdS_ManageStdServices->_utoa
    _SetLedBehavSts->_Led_SetLedBlinkTime
    _GetDieTemperature->_Adc_GetConvResult
    _ControlLedDirect->_Led_SetLedStatus
    _GetDigitalRaw->_GenerateEvt
    _GetAnalogRaw->_AdcGetValueCh
    _GetAnalogAscii->_utoa
    _utoa->___lwdiv
    _AdcGetValueCh->_Adc_GetConvResult

Critical Paths under _MainInterrupt in BANK0

    None.

Critical Paths under _main in BANK1

    _MainScheduler->_ScheduleTasks

Critical Paths under _MainInterrupt in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _MainInterrupt in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _MainInterrupt in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _MainInterrupt in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _MainInterrupt in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _MainInterrupt in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _MainInterrupt in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _MainInterrupt in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _MainInterrupt in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _MainInterrupt in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _MainInterrupt in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _MainInterrupt in BANK12

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0   52640
                      _MainScheduler
                         _SystemInit
 ---------------------------------------------------------------------------------
 (1) _SystemInit                                           0     0      0    3264
                       _InitSchTimer
               _Mcu_EnableInterrupts
                     _Mcu_InitIntOsc
 ---------------------------------------------------------------------------------
 (2) _Mcu_InitIntOsc                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _Mcu_EnableInterrupts                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _InitSchTimer                                         7     7      0    3264
                                             37 BANK0      7     7      0
                     _Tmr_TmrBConfig
 ---------------------------------------------------------------------------------
 (3) _Tmr_TmrBConfig                                       3     2      1    3061
                                             34 BANK0      3     2      1
                           _TmrBInit
                       _Tmr_StartTmr
                     _Tmr_TmrBIrqSet
                      _Tmr_TmrBPrSet
 ---------------------------------------------------------------------------------
 (4) _Tmr_TmrBPrSet                                       18    14      4    2003
                                             16 BANK0     18    14      4
                            ___lldiv
                             ___lmul
                             ___wmul
 ---------------------------------------------------------------------------------
 (5) ___wmul                                               6     2      4     404
                                              4 COMMON     2     2      0
                                              0 BANK0      4     0      4
 ---------------------------------------------------------------------------------
 (5) ___lmul                                              12     4      8     220
                                              4 BANK0     12     4      8
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (5) ___lldiv                                             14     6      8     857
                                              4 COMMON     1     1      0
                                              0 BANK0     13     5      8
 ---------------------------------------------------------------------------------
 (4) _Tmr_TmrBIrqSet                                       2     1      1     216
                                              4 COMMON     2     1      1
 ---------------------------------------------------------------------------------
 (4) _Tmr_StartTmr                                         1     1      0      22
                                              4 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (4) _TmrBInit                                             4     2      2     371
                                              4 COMMON     2     0      2
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _MainScheduler                                        0     0      0   49376
                    _InitializeTasks
                      _ScheduleTasks
 ---------------------------------------------------------------------------------
 (2) _ScheduleTasks                                        7     7      0   24781
                                             64 BANK0      1     1      0
                                              0 BANK1      6     6      0
                       _App_MainTask *
                    _I2cSlv_MainTask *
                  _I2c_DataReceiveSm *
                       _Led_MainTask *
                       _Wdg_MainTask *
 ---------------------------------------------------------------------------------
 (2) _InitializeTasks                                      5     5      0   24595
                                             64 BANK0      1     1      0
                                              0 BANK1      4     4      0
                       _App_MainTask *
                    _I2cSlv_MainTask *
                  _I2c_DataReceiveSm *
                       _Led_MainTask *
                       _Wdg_MainTask *
 ---------------------------------------------------------------------------------
 (3) _Wdg_MainTask                                         1     0      1      44
                                             26 BANK0      1     0      1
                       _Mcu_ClearWdg
                   _Mcu_SetWdgPeriod
                      _Mcu_SetWdgSts
 ---------------------------------------------------------------------------------
 (4) _Mcu_SetWdgPeriod                                     2     2      0      22
                                              4 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (4) _Mcu_ClearWdg                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _Led_MainTask                                         5     4      1    5281
                                             26 BANK0      5     4      1
                    _LedStateMachine
                     _SetLedBehavSts
 ---------------------------------------------------------------------------------
 (4) _LedStateMachine                                      7     4      3    4263
                                             11 BANK0      7     4      3
               _LedBlinkStateMachine
               _LedPulseStateMachine
 ---------------------------------------------------------------------------------
 (5) _LedPulseStateMachine                                 4     3      1    2208
                                              7 BANK0      4     3      1
                   _Led_SetLedStatus
                            ___lwdiv
 ---------------------------------------------------------------------------------
 (5) _LedBlinkStateMachine                                 3     3      0    1654
                                              5 COMMON     1     1      0
                                              7 BANK0      2     2      0
                            ___lwdiv
 ---------------------------------------------------------------------------------
 (3) _I2c_DataReceiveSm                                    9     8      1    1195
                                             26 BANK0      9     8      1
                     _CheckAckStatus
                    _CheckByteStatus
                 _CheckStopBitStatus
                      _ClearRxBuffer
                      _ClearTxBuffer
                        _GenerateEvt
                         _ReceiveEvt
 ---------------------------------------------------------------------------------
 (4) _CheckStopBitStatus                                   1     1      0       0
                                              4 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (4) _CheckByteStatus                                      1     1      0       0
                                              4 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (4) _CheckAckStatus                                       1     1      0       0
                                              4 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (3) _I2cSlv_MainTask                                      1     0      1    2509
                                             26 BANK0      1     0      1
                _I2cSlv_I2cDrvHandle
                  _I2c_InitI2cModule
                      _I2c_SetConfig
 ---------------------------------------------------------------------------------
 (4) _I2c_SetConfig                                        1     1      0       0
                                              4 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (4) _I2c_InitI2cModule                                    3     3      0     572
                                              0 BANK0      3     3      0
                      _ClearRxBuffer
                      _ClearTxBuffer
 ---------------------------------------------------------------------------------
 (4) _ClearTxBuffer                                        2     2      0      99
                                              4 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (4) _ClearRxBuffer                                        2     2      0      99
                                              4 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (4) _I2cSlv_I2cDrvHandle                                  6     6      0    1937
                                              4 BANK0      6     6      0
                        _GenerateEvt
                  _I2c_SetI2cAddress
              _I2c_SetI2cAddressMask
                 _I2c_UpdateTxBuffer
                   _Led_SetLedStatus
                         _ReceiveEvt
 ---------------------------------------------------------------------------------
 (5) _I2c_UpdateTxBuffer                                   5     4      1     274
                                              4 COMMON     1     0      1
                                              0 BANK0      4     4      0
 ---------------------------------------------------------------------------------
 (5) _I2c_SetI2cAddressMask                                1     1      0      31
                                              4 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (5) _I2c_SetI2cAddress                                    1     1      0      31
                                              4 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (3) _App_MainTask                                        38    37      1   15433
                                             26 BANK0     38    37      1
                     _Adc_ConfigAnCh
                  _Adc_InitAdcModule
                              _AppSm
                  _Mcu_ConfigPullUps
                 _Mcu_SetDieTempMode
                  _Mcu_SetDieTempSts
                  _Mcu_SetPullUpsSts
 ---------------------------------------------------------------------------------
 (4) _Mcu_SetPullUpsSts                                    1     1      0      22
                                              4 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (4) _Mcu_SetDieTempSts                                    1     1      0      22
                                              4 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (4) _Mcu_SetDieTempMode                                   1     1      0      22
                                              4 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (4) _Mcu_ConfigPullUps                                    1     1      0     426
                                              4 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (4) _AppSm                                                1     1      0   13424
                                             25 BANK0      1     1      0
                        _GenerateEvt
                     _ManageProtocol
                 _StdS_SetI2cAddress
 ---------------------------------------------------------------------------------
 (5) _StdS_SetI2cAddress                                   2     2      0       0
                                              4 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (5) _ManageProtocol                                       0     0      0   12886
                     _GetAnalogAscii
                       _GetAnalogRaw
                      _GetDigitalRaw
                         _ReceiveEvt
                      _SetDigitalDir
                   _SetDigitalOutSts
             _StdS_ManageStdServices
 ---------------------------------------------------------------------------------
 (6) _StdS_ManageStdServices                               8     8      0    6423
                                             17 BANK0      8     8      0
                         _BoardReset
                   _ControlLedDirect
                        _GenerateEvt
                  _GetDieTemperature
                       _LowPowerMode
                     _SetLedBehavSts
                         _StringCopy
                               _utoa
 ---------------------------------------------------------------------------------
 (7) _StringCopy                                           9     5      4    1350
                                              4 COMMON     1     1      0
                                              0 BANK0      8     4      4
 ---------------------------------------------------------------------------------
 (4) _SetLedBehavSts                                       2     2      0    1018
                                              4 BANK0      2     2      0
                _Led_SetLedBlinkTime
                _Led_SetLedPulseTime
                   _Led_SetLedStatus
 ---------------------------------------------------------------------------------
 (5) _Led_SetLedPulseTime                                  3     1      2     139
                                              4 COMMON     2     0      2
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (5) _Led_SetLedBlinkTime                                  5     1      4     247
                                              4 COMMON     1     1      0
                                              0 BANK0      4     0      4
 ---------------------------------------------------------------------------------
 (7) _LowPowerMode                                         0     0      0      22
                      _Mcu_SetWdgSts
 ---------------------------------------------------------------------------------
 (4) _Mcu_SetWdgSts                                        1     1      0      22
                                              4 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (7) _GetDieTemperature                                    4     2      2      90
                                              3 BANK0      4     2      2
                  _Adc_GetConvResult
                     _Adc_GetConvSts
                  _Adc_SelectChannel
                _Adc_StartConversion
 ---------------------------------------------------------------------------------
 (7) _ControlLedDirect                                     0     0      0     601
                   _Led_SetLedStatus
 ---------------------------------------------------------------------------------
 (5) _Led_SetLedStatus                                     3     2      1     601
                                              4 COMMON     2     1      1
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (7) _BoardReset                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (6) _SetDigitalOutSts                                     1     1      0      22
                                              4 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (6) _SetDigitalDir                                        1     1      0      22
                                              4 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (4) _ReceiveEvt                                           2     2      0     329
                                              4 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (6) _GetDigitalRaw                                        1     1      0     569
                                              5 COMMON     1     1      0
                        _GenerateEvt
 ---------------------------------------------------------------------------------
 (6) _GetAnalogRaw                                         9     9      0    1405
                                              9 BANK0      9     9      0
                      _AdcGetValueCh
                        _GenerateEvt
                             _memset
 ---------------------------------------------------------------------------------
 (6) _GetAnalogAscii                                       4     4      0    4116
                                             17 BANK0      4     4      0
                      _AdcGetValueCh
                        _GenerateEvt
                             _memset
                             _strcat
                               _utoa
 ---------------------------------------------------------------------------------
 (7) _utoa                                                10     4      6    2594
                                              7 BANK0     10     4      6
                            ___lwdiv
                            ___lwmod
 ---------------------------------------------------------------------------------
 (8) ___lwmod                                              6     2      4     500
                                              4 COMMON     2     2      0
                                              0 BANK0      4     0      4
 ---------------------------------------------------------------------------------
 (6) ___lwdiv                                              8     4      4    1125
                                              4 COMMON     1     1      0
                                              0 BANK0      7     3      4
 ---------------------------------------------------------------------------------
 (7) _strcat                                               5     3      2     253
                                              4 COMMON     2     0      2
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (7) _memset                                               7     3      4     511
                                              4 COMMON     1     1      0
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (4) _GenerateEvt                                          3     3      0     538
                                              4 COMMON     1     1      0
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (7) _AdcGetValueCh                                        6     3      3     121
                                              3 BANK0      6     3      3
                  _Adc_GetConvResult
                     _Adc_GetConvSts
                  _Adc_SelectChannel
                _Adc_StartConversion
 ---------------------------------------------------------------------------------
 (8) _Adc_StartConversion                                  0     0      0       0
 ---------------------------------------------------------------------------------
 (8) _Adc_SelectChannel                                    2     2      0      22
                                              4 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (8) _Adc_GetConvSts                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (8) _Adc_GetConvResult                                    5     3      2      34
                                              4 COMMON     2     0      2
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (4) _Adc_InitAdcModule                                    1     1      0     162
                                              4 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (4) _Adc_ConfigAnCh                                       1     1      0     294
                                              4 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 8
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (9) _MainInterrupt                                        1     1      0      75
                                              3 COMMON     1     1      0
                      i1_GenerateEvt
 ---------------------------------------------------------------------------------
 (10) i1_GenerateEvt                                       3     3      0      75
                                              0 COMMON     3     3      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 10
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _MainScheduler
     _InitializeTasks
       _App_MainTask *
         _Adc_ConfigAnCh
         _Adc_InitAdcModule
         _AppSm
           _GenerateEvt
           _ManageProtocol
             _GetAnalogAscii
               _AdcGetValueCh
                 _Adc_GetConvResult
                 _Adc_GetConvSts
                 _Adc_SelectChannel
                 _Adc_StartConversion
               _GenerateEvt
               _memset
               _strcat
               _utoa
                 ___lwdiv
                 ___lwmod
             _GetAnalogRaw
               _AdcGetValueCh
                 _Adc_GetConvResult
                 _Adc_GetConvSts
                 _Adc_SelectChannel
                 _Adc_StartConversion
               _GenerateEvt
               _memset
             _GetDigitalRaw
               _GenerateEvt
             _ReceiveEvt
             _SetDigitalDir
             _SetDigitalOutSts
             _StdS_ManageStdServices
               _BoardReset
               _ControlLedDirect
                 _Led_SetLedStatus
               _GenerateEvt
               _GetDieTemperature
                 _Adc_GetConvResult
                 _Adc_GetConvSts
                 _Adc_SelectChannel
                 _Adc_StartConversion
               _LowPowerMode
                 _Mcu_SetWdgSts
               _SetLedBehavSts
                 _Led_SetLedBlinkTime
                 _Led_SetLedPulseTime
                 _Led_SetLedStatus
               _StringCopy
               _utoa
                 ___lwdiv
                 ___lwmod
           _StdS_SetI2cAddress
         _Mcu_ConfigPullUps
         _Mcu_SetDieTempMode
         _Mcu_SetDieTempSts
         _Mcu_SetPullUpsSts
       _I2cSlv_MainTask *
         _I2cSlv_I2cDrvHandle
           _GenerateEvt
           _I2c_SetI2cAddress
           _I2c_SetI2cAddressMask
           _I2c_UpdateTxBuffer
           _Led_SetLedStatus
           _ReceiveEvt
         _I2c_InitI2cModule
           _ClearRxBuffer
           _ClearTxBuffer
         _I2c_SetConfig
       _I2c_DataReceiveSm *
         _CheckAckStatus
         _CheckByteStatus
         _CheckStopBitStatus
         _ClearRxBuffer
         _ClearTxBuffer
         _GenerateEvt
         _ReceiveEvt
       _Led_MainTask *
         _LedStateMachine
           _LedBlinkStateMachine
             ___lwdiv
           _LedPulseStateMachine
             _Led_SetLedStatus
             ___lwdiv
         _SetLedBehavSts
           _Led_SetLedBlinkTime
           _Led_SetLedPulseTime
           _Led_SetLedStatus
       _Wdg_MainTask *
         _Mcu_ClearWdg
         _Mcu_SetWdgPeriod
         _Mcu_SetWdgSts
     _ScheduleTasks
       _App_MainTask *
         _Adc_ConfigAnCh
         _Adc_InitAdcModule
         _AppSm
           _GenerateEvt
           _ManageProtocol
             _GetAnalogAscii
               _AdcGetValueCh
                 _Adc_GetConvResult
                 _Adc_GetConvSts
                 _Adc_SelectChannel
                 _Adc_StartConversion
               _GenerateEvt
               _memset
               _strcat
               _utoa
                 ___lwdiv
                 ___lwmod
             _GetAnalogRaw
               _AdcGetValueCh
                 _Adc_GetConvResult
                 _Adc_GetConvSts
                 _Adc_SelectChannel
                 _Adc_StartConversion
               _GenerateEvt
               _memset
             _GetDigitalRaw
               _GenerateEvt
             _ReceiveEvt
             _SetDigitalDir
             _SetDigitalOutSts
             _StdS_ManageStdServices
               _BoardReset
               _ControlLedDirect
                 _Led_SetLedStatus
               _GenerateEvt
               _GetDieTemperature
                 _Adc_GetConvResult
                 _Adc_GetConvSts
                 _Adc_SelectChannel
                 _Adc_StartConversion
               _LowPowerMode
                 _Mcu_SetWdgSts
               _SetLedBehavSts
                 _Led_SetLedBlinkTime
                 _Led_SetLedPulseTime
                 _Led_SetLedStatus
               _StringCopy
               _utoa
                 ___lwdiv
                 ___lwmod
           _StdS_SetI2cAddress
         _Mcu_ConfigPullUps
         _Mcu_SetDieTempMode
         _Mcu_SetDieTempSts
         _Mcu_SetPullUpsSts
       _I2cSlv_MainTask *
         _I2cSlv_I2cDrvHandle
           _GenerateEvt
           _I2c_SetI2cAddress
           _I2c_SetI2cAddressMask
           _I2c_UpdateTxBuffer
           _Led_SetLedStatus
           _ReceiveEvt
         _I2c_InitI2cModule
           _ClearRxBuffer
           _ClearTxBuffer
         _I2c_SetConfig
       _I2c_DataReceiveSm *
         _CheckAckStatus
         _CheckByteStatus
         _CheckStopBitStatus
         _ClearRxBuffer
         _ClearTxBuffer
         _GenerateEvt
         _ReceiveEvt
       _Led_MainTask *
         _LedStateMachine
           _LedBlinkStateMachine
             ___lwdiv
           _LedPulseStateMachine
             _Led_SetLedStatus
             ___lwdiv
         _SetLedBehavSts
           _Led_SetLedBlinkTime
           _Led_SetLedPulseTime
           _Led_SetLedStatus
       _Wdg_MainTask *
         _Mcu_ClearWdg
         _Mcu_SetWdgPeriod
         _Mcu_SetWdgSts
   _SystemInit
     _InitSchTimer
       _Tmr_TmrBConfig
         _TmrBInit
         _Tmr_StartTmr
         _Tmr_TmrBIrqSet
         _Tmr_TmrBPrSet
           ___lldiv
           ___lmul
             ___wmul (ARG)
           ___wmul
     _Mcu_EnableInterrupts
     _Mcu_InitIntOsc

 _MainInterrupt (ROOT)
   i1_GenerateEvt

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             3F0      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            E      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               E      6       A       2       71.4%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0       0       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50     41      4E       5       97.5%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BANK1               50      6      4E       7       97.5%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BITBANK2            50      0       0       8        0.0%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
BANK2               50      0      28       9       50.0%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
BITBANK3            50      0       0      10        0.0%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BANK3               50      0      50      11      100.0%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
BITBANK4            50      0       0      12        0.0%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BANK4               50      0      50      13      100.0%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BITBANK5            50      0       0      14        0.0%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
BANK5               50      0      50      15      100.0%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
BITBANK6            50      0       0      16        0.0%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
BANK6               50      0      50      17      100.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BITBANK7            50      0       0      18        0.0%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BANK7               50      0       0      19        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
ABS                  0      0     20E      20        0.0%
BITBANK8            50      0       0      21        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BANK8               50      0       0      22        0.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BITBANK9            50      0       0      23        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BANK9               50      0       0      24        0.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BITBANK10           50      0       0      25        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BANK10              50      0       0      26        0.0%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BITBANK11           50      0       0      27        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BANK11              2D      0       0      28        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
BITBANK12           30      0       0      29        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BANK12               0      0       0      30        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
DATA                 0      0     20E      31        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%


Microchip Technology PIC Macro Assembler V1.38 build -256452561 
Symbol Table                                                                                   Sun Mar 24 11:38:24 2019

                                    pc 0002                       _Mcu_SetWdgPeriod 087A  
                          __CFG_CP$OFF 0000             __end_of_I2c_UpdateTxBuffer 0A38  
                ?_LedPulseStateMachine 0027                 __end_of_Mcu_InitIntOsc 082C  
           __size_of_GetDieTemperature 0019                 ??_LedBlinkStateMachine 0027  
                  ___wmul@multiplicand 0022                   __end_of_GetAnalogRaw 0EC5  
          __size_of_CheckStopBitStatus 000A                   __end_of_App_MainTask 1000  
                                  l311 069B                                    l231 0829  
                                  l304 0675                                    l313 069E  
                                  l321 0B3A                                    l314 06A2  
                                  l306 0678                                    l307 067C  
                                  l323 0B43                                    l324 0B4C  
                                  l317 06CD                                    l341 0968  
       __end_of_StdS_ManageStdServices 0188                                    l326 0B60  
                                  l343 096B                                    l168 0259  
                                  l344 096E                                    l329 03E0  
                                  l353 0E11                                    l346 097C  
                                  l603 08E3                                    l540 0652  
                                  l518 094F                                    l296 0656  
                                  l570 0C87                                    l298 0658  
                                  l731 0187                                    l299 065B  
                                  l902 0CDE                                    l582 0BBD  
                                  l578 0B8F                                    l596 09AE  
                                  l772 0965                                    l917 0C1E  
                                  l589 08C3                                    l927 0C4F  
                                  l935 0FB0                                    l697 0DD2  
                                  l883 0B37                                    l939 0FFF  
                                  l869 0741                                    _PR2 001B  
                                  _PR4 0416                           __CFG_CPD$OFF 0000  
                                  _PR6 041D                           __CFG_BORV$LO 0000  
                                  wreg 0009                           __CFG_IESO$ON 0000  
                     ??_SetLedBehavSts 0024                                   S4719 0800  
               Mcu_SetPullUpsSts@PuSts 0074                        ??_MainInterrupt 0073  
                         __CFG_LVP$OFF 0000                        ??_MainScheduler 0076  
                                 l1095 0A08                                   l4003 09D1  
                                 l3043 0BF0                                   l3045 0BF8  
                                 l3053 0C10                                   l3061 0C31  
                                 l4023 0AC5                                   l1367 0F13  
                                 l3047 0C00                                   l3063 0C39  
                                 l3215 0BC7                                   l4017 09E9  
                                 l4025 0AD1                                   l4121 0E98  
                                 l3049 0C08                                   l3057 0C21  
                                 l4043 0A77                                   l3059 0C29  
                                 l3067 0C41                                   l4051 0098  
                                 l4107 0166                                   l4211 0583  
                                 l4203 0546                                   l3219 0BD1  
                                 l4029 0AD9                                   l4045 0A78  
                                 l4221 05B6                                   l4151 0CC2  
                                 l4063 00CA                                   l4223 05C1  
                                 l4231 0F37                                   l3423 0971  
                                 l4311 0E3D                                   l4129 0EBD  
                                 l4153 0CC9                                   l4081 0107  
                                 l4057 00B1                                   l4401 05F1  
                                 l4241 0F73                                   l4147 0CB4  
                                 l4083 010A                                   l4075 00FC  
                                 l4323 0E68                                   l4149 0CBB  
                                 l4157 0CD0                                   l4093 0126  
                                 l4077 00FF                                   l4069 00E3  
                                 l4261 06E1                                   l4421 062D  
                                 l4229 0F2D                                   l4501 01D9  
                                 l4309 0E2F                                   l4079 0102  
                                 l4271 06F5                                   l4263 06E5  
                                 l4415 061D                                   l4431 0649  
                                 l4247 0F7D                                   l4351 068B  
                                 l4343 065E                                   l4319 0E5D  
                                 l4281 0709                                   l4273 06F9  
                                 l4265 06E9                                   l4257 06D9  
                                 l4409 05FF                                   l4249 0F8C  
                                 l4513 01F8                                   l4345 0669  
                                 l4361 06C1                                   l3393 0B55  
                                 l4283 070E                                   l4275 06FD  
                                 l4267 06ED                                   l4259 06DD  
                                 l4451 0B10                                   l4195 0A1F  
                                 l4435 0C85                                   l4443 0C9F  
                                 l3651 0951                                   l4531 0239  
                                 l4355 06A6                                   l4291 0A01  
                                 l4371 0389                                   l4277 0701  
                                 l4269 06F1                                   l4437 0C8A  
                                 l4445 0CB0                                   l3653 0959  
                                 l4541 0253                                   l4525 0224  
                                 l4357 06B1                                   l4349 0680  
                                 l4373 03A0                                   l4381 03DD  
                                 l3903 0B89                                   l4279 0705  
                                 l4287 0713                                   l4463 0B28  
                                 l4199 0538                                   l4439 0C92  
                                 l4519 021A                                   l4471 0189  
                                 l4383 03E2                                   l4375 03B8  
                                 l3841 08BE                                   l3657 095C  
                                 l4537 024E                                   l4529 0233  
                                 l3931 0DA4                                   l3923 0D94  
                                 l4459 0B1F                                   l4467 0B2B  
                                 l4395 05DB                                   l4547 025E  
                                 l4635 0FF3                                   l4379 03D1  
                                 l3917 0A97                                   l3837 08B9  
                                 l3845 0998                                   l3853 08D7  
                                 l4389 05C9                                   l4485 01AE  
                                 l4477 019C                                   l4573 0943  
                                 l3871 0CFA                                   l3935 0DBF  
                                 l3927 0D9A                                   l4487 01B3  
                                 l4583 0B97                                   l4639 0FF6  
                                 l4559 0DF0                                   l3881 0D15  
                                 l3961 0984                                   l3849 09A9  
                                 l3857 08DD                                   l4569 093C  
                                 l4577 0946                                   l4665 02FB  
                                 l3971 0ECA                                   l3955 0922  
                                 l3939 0DC4                                   l3947 0A9E  
                                 l4499 01D4                                   l4587 0BB4  
                                 l4667 031F                                   l3877 0D0C  
                                 l3869 0CEE                                   l3893 0B68  
                                 l3981 0EEB                                   l3895 0B74  
                                 l4689 090A                                   l3899 0B80  
                                 STR_1 1015                                   STR_2 1028  
                                 STR_3 101D                                   STR_4 100C  
                                 STR_5 100C                                   STR_6 1023  
                                 u3005 0E52                                   _LATA 010C  
                                 _LATB 010D                                   u3015 0E5E  
                                 _LATC 010E                                   u3035 03F9  
                                 u3045 0414                                   u3055 0425  
                                 u1705 0C58                                   u3065 0436  
                                 u2515 0CFB                                   u1715 0C67  
                                 u3075 0447                                   u2525 0D05  
                                 u3085 0458                                   u3350 0F9D  
                                 u2535 0D0D                                   u3095 047D  
                                 u3415 0281                                   u3360 0FAB  
                                 u1905 0874                                   u3505 0314  
                                 u3425 0288                                   u3435 029B  
                                 u2565 0B6B                                   u3445 02AF  
                                 u2495 0CF1                                   u3375 07C9  
                                 u3455 02B6                                   u2585 0B7A  
                                 u2905 0F5E                                   u3385 07D0  
                                 u3465 02C8                                   u1785 0BD2  
                                 u2595 0B81                                   u3395 07E3  
                                 u3475 02D9                                   u1795 0BD9  
                                 u1885 0860                                   u3485 02EC  
                                 u1895 086A                                   u3495 0300  
                                 u2935 0A09                                   u2785 0E9F  
                                 u2945 0A0E                                   u2794 0EA8  
                                 u2795 0EA6                                   u2875 0574  
                                 u2895 05A8                                   u2975 0E32  
                                 u2995 0E3E                  __end_of_GetDigitalRaw 0CE5  
                                 _WPUA 020C                                   _WPUB 020D  
                                 _WPUC 020E                           __CFG_WRT$OFF 0000  
                        __CFG_FCMEN$ON 0000            Led_SetLedBlinkTime@OnTimeMs 0020  
                                 _main 082C                                   fsr0h 0005  
                                 fsr1h 0007                                   fsr0l 0004  
                                 indf0 0000                                   indf1 0001  
                                 fsr1l 0006                                   btemp 007E  
                      _I2cSlaveAddress 0076                                   _utoa 0EC5  
         __size_of_Led_SetLedPulseTime 0010                          __CFG_BOREN$ON 0000  
               __end_of_GetAnalogAscii 0D91                                   ltemp 007E  
                    _Mcu_SetPullUpsSts 084B                                   start 002C  
                                 ttemp 007E                                   wtemp 007E  
                   AppSm@WpuSetCounter 0062                    __end_of_GenerateEvt 0A9C  
                        ?_InitSchTimer 0070                         ??_Mcu_ClearWdg 0074  
                       ?_Mcu_SetWdgSts 0070                             _BoardReset 080F  
           __size_of_Mcu_SetDieTempSts 0008                          __CFG_MCLRE$ON 0000  
                   ?_Mcu_SetPullUpsSts 0070                    StringCopy@SourceStr 0020  
                      ?_Mcu_InitIntOsc 0070                          __CFG_PLLEN$ON 0000  
                  ??_Mcu_SetPullUpsSts 0074                                  ?_main 0070  
                      __end_of___lldiv 0E71                                  ?_utoa 0027  
                      __end_of___lwdiv 0D1A                        __end_of___lwmod 0B8E  
                                i1l381 0027           Led_SetLedBlinkTime@OffTimeMs 0022  
            Mcu_SetWdgPeriod@WdgPeriod 0075                __end_of_LedStateMachine 0CB2  
                                _AppSm 0B0F                    ___lmul@multiplicand 0028  
           __size_of_I2c_SetI2cAddress 0005                       ??_Adc_GetConvSts 0074  
                 __end_of_Led_MainTask 0BBE           LedPulseStateMachine@LedPulse 002A  
                      __end_of_dpowers 100A                                  pclath 000A  
                                ltemp0 007E                                  ltemp1 0082  
                                ltemp2 0086                                  ltemp3 0080  
            __end_of_Mcu_SetPullUpsSts 0853                                  ttemp0 007E  
                                ttemp1 0081                                  ttemp2 0084  
                                ttemp3 0087                                  ttemp4 007F  
                                utoa@c 0030                                  utoa@v 002E  
                                status 0003                        _I2cSlv_MainTask 093B  
                                wtemp0 007E                                  wtemp1 0080  
                                wtemp2 0082                                  wtemp3 0084  
                                wtemp4 0086                                  wtemp5 0088  
                                wtemp6 007F                       ??_Adc_ConfigAnCh 0074  
                      ?_GetAnalogAscii 0070                         ??_InitSchTimer 0045  
          __size_of_Mcu_SetDieTempMode 0008                LedStateMachine@LedBlink 002C  
                      __initialization 002E                      _I2c_DataReceiveSm 0188  
              LedStateMachine@LedPulse 002D       StdS_ManageStdServices@DieTempStr 0033  
                         __end_of_main 0833                 ??_LedPulseStateMachine 0028  
                         __end_of_utoa 0F2A                          AppSm@AppState 0061  
                   ?_I2c_DataReceiveSm 003A                       GetAnalogAscii@Ch 0034  
                    ?_SetDigitalOutSts 0070                                 ??_main 0076  
                               ??_utoa 002D         __size_of_I2c_SetI2cAddressMask 0005  
                     __end_of_TmrBInit 06CE                     ??_SetDigitalOutSts 0074  
                           _ReceiveEvt 0A59          __end_of_I2c_SetI2cAddressMask 0825  
                  ??_I2c_DataReceiveSm 003B                                 ?_AppSm 0070  
                    ?_Led_SetLedStatus 0074               I2cSlv_I2cDrvHandle@Index 0029  
                      ReceiveEvt@Event 0075                                 _ADRESH 009C  
                               _ADRESL 009B                     ??_Led_SetLedStatus 0075  
                     ??_ManageProtocol 0076                                 _ANSELA 018C  
                               _ANSELB 018D                                 _ANSELC 018E  
                          _GenerateEvt 0A7A                                 i1l3775 0A54  
                               i1l3795 001D                             _TaskNumber 100A  
                  App_MainTask@Options 003A                        ??_Mcu_SetWdgSts 0074  
        I2c_DataReceiveSm@I2cRxAddress 0064              __end_of_I2c_DataReceiveSm 026A  
                       __CFG_PWRTE$OFF 0000                            ?_BoardReset 0070  
         __end_of_Mcu_EnableInterrupts 0817                  __size_of_GetAnalogRaw 0054  
                __size_of_App_MainTask 006E                                 ___lmul 0BBE  
                      _LedBehaviourSts 0079                                 ___wmul 09FF  
                       __CFG_STVREN$ON 0000                    _Led_SetLedBlinkTime 0996  
                            ??___lldiv 0074                              ??___lwdiv 0074  
               Tmr_TmrBPrSet@IntFreqHz 0030                              ??___lwmod 0074  
          GetDieTemperature@DieTempRes 0025              __size_of_ControlLedDirect 0013  
                               _memset 09E3                        _CheckByteStatus 0866  
                      GetDigitalRaw@Ch 0075                      _Adc_InitAdcModule 0D1A  
                               _strcat 0ABF                           __pdataCOMMON 0079  
                   ?_Adc_InitAdcModule 0070            __end_of_I2cSlv_I2cDrvHandle 0653  
                     ?_LedStateMachine 002B                          ?_LowPowerMode 0070  
               __size_of_SetDigitalDir 0031                 Adc_SelectChannel@SelCh 0075  
                 __end_of_Mcu_ClearWdg 0004                __end_of_I2cSlv_MainTask 0950  
                 ?_Led_SetLedBlinkTime 0020                 __size_of_ScheduleTasks 00C4  
             __end_of_Mcu_SetWdgPeriod 0885                    ??_Adc_InitAdcModule 0074  
                __end_ofi1_GenerateEvt 0A59                           _GetAnalogRaw 0E71  
           __size_of_Mcu_SetPullUpsSts 0008                          ?_Wdg_MainTask 003A  
              __end_of__initialization 0093                 Tmr_TmrBPrSet@Prescaler 0032  
                         _App_MainTask 0F92                 InitSchTimer@TmrBConfig 0046  
                           _StringCopy 0A9C                          __end_of_AppSm 0B38  
                       __pcstackCOMMON 0070               LedStateMachine@LedOutSts 0031  
                        GetAnalogRaw@i 0031                          GetAnalogRaw@j 002F  
         __size_of_Adc_StartConversion 0003                           __pidataBANK0 080D  
                         __pidataBANK2 0AE7              __end_of_Adc_InitAdcModule 0D51  
             __size_of_InitializeTasks 004E                  LedStateMachine@LedSts 002B  
                   LedStateMachine@Led 0030                  __size_of_Led_MainTask 0030  
                  _Led_SetLedPulseTime 08D4                  __end_of_I2c_SetConfig 093B  
                          ?_ReceiveEvt 0070               _I2cNewPacketNotification 00E0  
                       ??_LowPowerMode 0075                         _OPTION_REGbits 0095  
                  GetAnalogRaw@AdcData 002D                             _SystemInit 0853  
                 __end_of_InitSchTimer 09C8                                ??_AppSm 0039  
        StdS_ManageStdServices@DieTemp 0037                  __end_of_Tmr_TmrBPrSet 03E4  
                  __size_of_BoardReset 0002            __size_of_StdS_SetI2cAddress 0031  
                ??_Led_SetLedBlinkTime 0074                     _I2c_UpdateTxBuffer 0A1B  
                           __pbssBANK0 0061                             __pbssBANK1 00A0  
                           __pbssBANK3 01A0                             __pbssBANK4 0220  
                           __pbssBANK5 02A0                             __pbssBANK6 0320  
                       ??_Wdg_MainTask 0076                    ?_I2c_UpdateTxBuffer 0074  
                 ?_Led_SetLedPulseTime 0074                      _Mcu_ConfigPullUps 0490  
           __size_of_I2c_DataReceiveSm 00E2                  __end_of_AdcGetValueCh 09E3  
                        _SetDigitalDir 0BEE                              ?_TmrBInit 0074  
                   ?_Mcu_ConfigPullUps 0070                       ??_Mcu_InitIntOsc 0074  
              __size_of_Tmr_TmrBConfig 004B                             __pmaintext 082C  
              __end_of_CheckByteStatus 0870                __size_of_Tmr_TmrBIrqSet 0029  
                              ?___lmul 0024                           _Led_MainTask 0B8E  
                              ?___wmul 0020                          _ScheduleTasks 026A  
           __end_of_CheckStopBitStatus 087A                             __pintentry 0004  
                   ClearRxBuffer@Index 0075                    ??_Mcu_ConfigPullUps 0074  
                              ?_memset 0020                         ___lmul@product 002C  
              __size_of_CheckAckStatus 000A                   ??_I2c_UpdateTxBuffer 0020  
             i1GenerateEvt@EventStatus 0072                                ?_strcat 0074  
        __size_of_LedBlinkStateMachine 0090                    Wdg_MainTask@Options 003A  
               __size_of_ClearRxBuffer 0010                                _SSP1ADD 0212  
                 _Mcu_EnableInterrupts 0814                 __size_of_ClearTxBuffer 0010  
                              _SSP1BUF 0211                                _SSP1MSK 0213  
                     ?_I2cSlv_MainTask 003A                        _I2cWriteRequest 00E6  
                     ??_GetAnalogAscii 0031         Led_SetLedPulseTime@PulseTimeMs 0074  
                __end_of_MainInterrupt 002C                  __end_of_MainScheduler 0914  
                              _Led1Sts 006C              __end_of_Mcu_ConfigPullUps 0536  
                ??_Led_SetLedPulseTime 0076                         ?_SetDigitalDir 0070  
                          ?_StringCopy 0020                    __size_of_ReceiveEvt 0021  
                           ??_TmrBInit 0020                         ?_ScheduleTasks 0070  
                      __size_of___lmul 0030                                ___lldiv 0E1E  
                      __size_of___wmul 001C                                ___lwdiv 0CE5  
                              ___lwmod 0B61             __size_of_Adc_InitAdcModule 0037  
                     _ControlLedDirect 0914                        __size_of_memset 001C  
                            _I2cConfig 00C6                              _I2cPacket 239D  
                Tmr_TmrBIrqSet@TmrNumb 0075                                __ptext1 0853  
                              __ptext2 0825                                __ptext3 0814  
                              __ptext4 09AF                                __ptext5 0DD3  
                              __ptext6 032E                 __size_of_GetDigitalRaw 0033  
                              __ptext7 09FF                                __ptext8 0BBE  
                              __ptext9 0E1E                  __size_of_Mcu_ClearWdg 0002  
                      __size_of_strcat 0028                                _dpowers 1000  
                            _T2CONbits 001C                          ?_Tmr_StartTmr 0070  
                          ?_SystemInit 0070                      ??_InitializeTasks 00E8  
                            _T4CONbits 0417                        _Tmr2IsrCallback 00C0  
                ?_Mcu_EnableInterrupts 0070                              _T6CONbits 041E  
        I2c_SetI2cAddress@SlaveAddress 0074                    Mcu_SetWdgSts@WdgSts 0074  
                              clrloop0 0892                   end_of_initialization 0093  
                         ?_GenerateEvt 0070              __size_of_SetDigitalOutSts 0031  
               _MainSystemTimebaseFlag 006D                                init_ram 089D  
                              memset@c 0020                                memset@n 0022  
                              memset@p 0024             __end_of_Mcu_SetDieTempMode 0843  
                              initloop 089E                __size_of_SetLedBehavSts 0042  
                      ___lldiv@divisor 0020              __size_of_Led_SetLedStatus 000E  
                 __end_of_LowPowerMode 08B6                           ??_BoardReset 0074  
                      ___lldiv@counter 002C                          _ClearRxBuffer 08E4  
                        _ClearTxBuffer 08F4                          StringCopy@Len 0023  
                     ?_CheckByteStatus 0070                           _Mcu_ClearWdg 0002  
             ??_StdS_ManageStdServices 0031                        AdcGetValueCh@Ch 0026  
                         __pstringtext 1000                                utoa@buf 0027  
                              utoa@val 0029          __size_of_LedPulseStateMachine 0068  
                __size_of_InitSchTimer 0019                   __end_of_Wdg_MainTask 0966  
                            _PORTAbits 000C                              _PORTCbits 000E  
        Mcu_SetDieTempMode@DieTempMode 0074                         ??_Tmr_StartTmr 0074  
                     _InterruptCounter 00BE                       __CFG_FOSC$INTOSC 0000  
                    StringCopy@DestStr 0022                        _Tmr4IsrCallback 00C2  
                            _TRISAbits 008C                              _TRISBbits 008D  
                            _TRISCbits 008E                    __size_of_StringCopy 0023  
                _I2c_SetI2cAddressMask 0820                    _Adc_StartConversion 0811  
                   __end_of_BoardReset 0811            I2c_DataReceiveSm@I2cRxState 0066  
                    ?_Mcu_SetWdgPeriod 0070              Tmr_TmrBPrSet@TmrBPrCfgSts 003D  
           __size_of_Mcu_ConfigPullUps 00A6                              _Led1Blink 00D1  
                            _CmdBuffer 01A0                          _GetDigitalRaw 0CB2  
                      ??_SetDigitalDir 0074                     ??_Mcu_SetWdgPeriod 0074  
                            _Led1Pulse 00DA                __size_of_Adc_GetConvSts 0004  
                       ?_ClearRxBuffer 0070                        ??_ScheduleTasks 00E8  
                    App_MainTask@F4117 00A0                         _Tmr_TmrBConfig 0DD3  
                    App_MainTask@F4137 00B2                Tmr_TmrBPrSet@Postscaler 0033  
                __end_of_Mcu_SetWdgSts 083B                           _InitSchTimer 09AF  
                       ?_ClearTxBuffer 0070                    __size_of_SystemInit 0009  
                       _Tmr_TmrBIrqSet 0B38            Mcu_SetDieTempSts@DieTempSts 0074  
                 ?_Adc_StartConversion 0070             Adc_InitAdcModule@AdcConfig 0074  
                       GetAnalogRaw@Ch 0030                         __end_of___lmul 0BEE  
                       _CheckAckStatus 085C                         __end_of___wmul 0A1B  
              __size_of_Adc_ConfigAnCh 0070                      App_MainTask@WpuCh 0042  
                        __pidataCOMMON 080E                         __end_of_memset 09FF  
                         ??_ReceiveEvt 0074                         __end_of_strcat 0AE7  
               ??_Mcu_EnableInterrupts 0074                    start_initialization 002E  
                      _Tmr6IsrCallback 00C4                              _RepBuffer 0220  
           I2c_InitI2cModule@I2cConfig 0022           __size_of_I2cSlv_I2cDrvHandle 008D  
                       ?_GetDigitalRaw 0070               __size_of_LedStateMachine 0031  
               __end_of_Tmr_TmrBConfig 0E1E                 __end_of_Tmr_TmrBIrqSet 0B61  
                            _TaskTable 0120                            _SystemState 006B  
               Led_SetLedBlinkTime@Led 0074                     __end_of_ReceiveEvt 0A7A  
              __size_of_ManageProtocol 0074                  ??_Adc_StartConversion 0074  
                Tmr_TmrBConfig@TmrNumb 0044                 __end_of_CheckAckStatus 0866  
                             ??___lmul 0076                               ??___wmul 0074  
                    __size_of_TmrBInit 007B                           _RepBufferLen 006A  
      __size_of_StdS_ManageStdServices 00F1                            __pdataBANK0 006D  
                          __pdataBANK2 0120                               ??_memset 0074  
                   ClearTxBuffer@Index 0075                 __size_ofi1_GenerateEvt 0021  
                  Tmr_StartTmr@TmrNumb 0074                               ??_strcat 0020  
          __end_of_Led_SetLedBlinkTime 09AF                    AdcGetValueCh@Result 0027  
                          __pbssBIGRAM 239D             __end_of_StdS_SetI2cAddress 0C81  
                   __end_of_TaskNumber 100C                 ?_I2c_SetI2cAddressMask 0070  
                          __pbssCOMMON 0076                              ___latbits 0002  
                App_MainTask@AdcConfig 003C                          __pcstackBANK0 0020  
                        __pcstackBANK1 00E8                     _CheckStopBitStatus 0870  
               GenerateEvt@EventStatus 0020                       _SetDigitalOutSts 0C1F  
             __end_of_ControlLedDirect 0927                  __size_of_LowPowerMode 000D  
                  ?_CheckStopBitStatus 0070           __end_of_LedBlinkStateMachine 05C6  
                      ??_ClearRxBuffer 0074                   __size_of_GenerateEvt 0022  
                      ?_Tmr_TmrBConfig 0042                         _SetLedBehavSts 0D91  
                      ??_ClearTxBuffer 0074                        ?_Tmr_TmrBIrqSet 0074  
                 __end_of_Tmr_StartTmr 097D                           ??_StringCopy 0024  
                     _Led_SetLedStatus 08B6                 __size_of_I2c_SetConfig 0014  
                     ___lwdiv@dividend 0022                       GenerateEvt@Event 0021  
               __size_of_Tmr_TmrBPrSet 00B6                  __size_of_Wdg_MainTask 0016  
                    _Adc_SelectChannel 0885                App_MainTask@AnalogChSel 0054  
                      ?_CheckAckStatus 0070                Tmr_TmrBIrqSet@TmrIrqSts 0074  
                      _InitializeTasks 07B2                               ?___lldiv 0020  
                  _I2cReplyPacketReady 0077                               ?___lwdiv 0020  
                             ?___lwmod 0020                     ?_Adc_SelectChannel 0070  
                 ??_CheckStopBitStatus 0074                              __pswtext1 0800  
          __size_of_I2c_UpdateTxBuffer 001D                            _I2cRxBuffer 0320  
             I2c_DataReceiveSm@Options 003A                  Adc_ConfigAnCh@AnChSel 0074  
                          _I2cTxBuffer 02A0                           ??_SystemInit 0076  
       InitializeTasks@ActiveTaskIndex 0060                    ??_Adc_SelectChannel 0074  
                       __size_of_AppSm 0029                           _LowPowerMode 08A9  
               __size_of_AdcGetValueCh 001B                       __CFG_WDTE$SWDTEN 0000  
                   __end_of_StringCopy 0ABF            __end_of_Led_SetLedPulseTime 08E4  
                     ___lwdiv@quotient 0025                 _StdS_ManageStdServices 0097  
                      ??_GetDigitalRaw 0075                  GetAnalogAscii@AdcData 0032  
                      SetDigitalDir@Ch 0074                 __end_of_SetLedBehavSts 0DD3  
                        i1_GenerateEvt 0A38                           _Wdg_MainTask 0950  
                       ___wmul@product 0074                               _LATAbits 010C  
                             _LATCbits 010E                         _Adc_GetConvSts 0817  
                            clear_ram0 0891               __size_of_I2cSlv_MainTask 0015  
              LedPulseStateMachine@Led 0027                               _PIE1bits 0091  
                             _PIE3bits 0093                          _I2cSetAddress 00E4  
            __end_of_Adc_SelectChannel 0891                      _I2c_InitI2cModule 03E4  
                             _PIR1bits 0011                               _PIR3bits 0013  
                    ??_LedStateMachine 002E             Adc_GetConvResult@AdcResult 0021  
                   __end_of_SystemInit 085C                     ?_I2c_InitI2cModule 0070  
                             _SSP1CON1 0215                               _SSP1CON2 0216  
                             _SSP1CON3 0217                               _SSP1STAT 0214  
                       _Adc_ConfigAnCh 0742                     _Mcu_SetDieTempMode 083B  
               __size_of_MainInterrupt 0028             I2c_DataReceiveSm@I2cRxFlag 0065  
               __size_of_MainScheduler 0010                             _ADCON0bits 009D  
                           _ADCON1bits 009E                      ___wmul@multiplier 0020  
                  ??_I2c_InitI2cModule 0020                __size_of_Mcu_InitIntOsc 0007  
                             _WPUAbits 020C                               _WPUBbits 020D  
                             _WPUCbits 020E                          _I2c_SetConfig 0927  
                  ?_Mcu_SetDieTempMode 0070                          _Tmr_TmrBPrSet 032E  
                    ___lmul@multiplier 0024                 I2cSlv_MainTask@Options 003A  
         __end_of_LedPulseStateMachine 0F92                         ?i1_GenerateEvt 0070  
             Tmr_TmrBConfig@TmrBConfig 0042                        ?_SetLedBehavSts 0070  
                        ?_GetAnalogRaw 0070                 __end_of_Adc_GetConvSts 081B  
         LedBlinkStateMachine@LedBlink 0075                          ?_App_MainTask 003A  
            __end_of_I2c_InitI2cModule 0490                      _Adc_GetConvResult 08C4  
              __end_of_InitializeTasks 0800                   ??_Mcu_SetDieTempMode 0074  
                             _TmrBInit 0653                     ?_Adc_GetConvResult 0074  
                       _ManageProtocol 06CE                          _AdcGetValueCh 09C8  
                 Tmr_TmrBPrSet@Divisor 003E                __size_of_GetAnalogAscii 0040  
               __end_of_Adc_ConfigAnCh 07B2                     SetDigitalOutSts@Ch 0074  
            __size_of_Mcu_SetWdgPeriod 000B                       __size_of___lldiv 0053  
                  ??_Adc_GetConvResult 0020                    _I2cSlv_I2cDrvHandle 05C6  
                     __size_of___lwdiv 0035                   Tmr_TmrBPrSet@TmrNumb 003C  
                     __size_of___lwmod 002D                      _GetDieTemperature 097D  
                           _ANSELAbits 018C                             _ANSELBbits 018D  
                           _ANSELCbits 018E               __size_of_CheckByteStatus 000A  
                 _LedBlinkStateMachine 0536                         ?_I2c_SetConfig 0070  
                   ?_GetDieTemperature 0023                             strcat@from 0074  
                       ?_Tmr_TmrBPrSet 0030                        ___lwdiv@divisor 0020  
                      ___lwdiv@counter 0024                               __ptext10 0B38  
                             __ptext11 0966                               __ptext20 0950  
                             __ptext12 0653                               __ptext21 087A  
                             __ptext13 0904                               __ptext30 03E4  
                             __ptext22 0002                               __ptext14 026A  
                             __ptext31 08F4                               __ptext23 0C81  
                             __ptext15 07B2                               __ptext40 0490  
                             __ptext32 08E4                               __ptext24 0F2A  
                             __ptext16 0F92                               __ptext41 0B0F  
                             __ptext33 05C6                               __ptext25 0536  
                             __ptext17 0B8E                               __ptext50 0833  
                             __ptext42 0C50                               __ptext34 0A1B  
                             __ptext26 0870                               __ptext18 093B  
                             __ptext51 097D                               __ptext43 06CE  
                             __ptext35 0820                               __ptext27 0866  
                             __ptext19 0188                               __ptext60 0D51  
                             __ptext52 0914                               __ptext44 0097  
                             __ptext36 081B                               __ptext28 085C  
                             __ptext61 0EC5                               __ptext53 08B6  
                             __ptext45 0A9C                               __ptext37 084B  
                             __ptext29 0927                               __ptext70 0817  
                             __ptext62 0B61                               __ptext54 080F  
                             __ptext46 0D91                               __ptext38 0843  
                             __ptext71 08C4                               __ptext63 0CE5  
                             __ptext55 0C1F                               __ptext47 08D4  
                             __ptext39 083B                               __ptext72 0D1A  
                             __ptext64 0ABF                               __ptext56 0BEE  
                             __ptext48 0996                               __ptext73 0742  
                             __ptext65 09E3                               __ptext57 0A59  
                             __ptext49 08A9                               __ptext66 0A7A  
                             __ptext58 0CB2                               __ptext75 0A38  
                             __ptext67 09C8                               __ptext59 0E71  
                             __ptext68 0811                               __ptext69 0885  
                         _SSP1CON1bits 0215                I2c_DataReceiveSm@OpType 0067  
                       ??_GetAnalogRaw 0029                    ??_GetDieTemperature 0076  
                 ?_I2cSlv_I2cDrvHandle 0070                  __size_of_Tmr_StartTmr 0017  
            __end_of_Adc_GetConvResult 08D4                         ??_App_MainTask 003B  
                        _MainInterrupt 0004                     i1GenerateEvt@Event 0071  
                      ?_Adc_GetConvSts 0070                          _MainScheduler 0904  
                   TmrBInit@Postscaler 0075                          __size_of_main 0007  
                        __size_of_utoa 0065                    Led_MainTask@Options 003A  
               __end_of_ManageProtocol 0742           I2c_UpdateTxBuffer@DataBuffer 0022  
                __end_of_SetDigitalDir 0C1F                         ?_AdcGetValueCh 0023  
           __size_of_Adc_SelectChannel 000C                  __end_of_ScheduleTasks 032E  
                        ?_Led_MainTask 003A                        ?_Adc_ConfigAnCh 0070  
                  Led_SetLedStatus@Led 0020                               int$flags 007E  
                    _Mcu_SetDieTempSts 0843                      ??_I2cSlv_MainTask 0076  
                      StringCopy@Index 0074           ScheduleTasks@ActiveTaskIndex 0060  
            __end_of_GetDieTemperature 0996               __end_of_SetDigitalOutSts 0C50  
                   ?_Mcu_SetDieTempSts 0070                ??_I2c_SetI2cAddressMask 0074  
                ?_LedBlinkStateMachine 0070                            _OSCSTATbits 009A  
                           _INTCONbits 000B                           _Tmr_StartTmr 0966  
             __end_of_Led_SetLedStatus 08C4                    ??_Mcu_SetDieTempSts 0074  
                           _FVRCONbits 0117                   _I2cNewTxNotification 00E2  
        __size_of_Mcu_EnableInterrupts 0003                 __size_of_Mcu_SetWdgSts 0008  
                             memset@p1 0025                        ??i1_GenerateEvt 0070  
                    _I2c_SetI2cAddress 081B                       ??_Tmr_TmrBConfig 0043  
                ??_I2cSlv_I2cDrvHandle 0024                       ??_Tmr_TmrBIrqSet 0075  
                             intlevel1 0000                         ?_MainInterrupt 0070  
                    TmrBInit@Prescaler 0074                         ?_MainScheduler 0070  
                   ?_I2c_SetI2cAddress 0070               I2c_UpdateTxBuffer@Length 0074  
                    ?_ControlLedDirect 0070                 Led_SetLedPulseTime@Led 0020  
                     ___lwmod@dividend 0022                 I2c_DataReceiveSm@Index 0042  
          __end_of_Adc_StartConversion 0814                     _StdS_SetI2cAddress 0C50  
                     ___lldiv@dividend 0024                 Mcu_ConfigPullUps@WpuCh 0074  
           __size_of_I2c_InitI2cModule 00AC                 SetLedBehavSts@LedBehav 0025  
                    __CFG_CLKOUTEN$OFF 0000                       ??_CheckAckStatus 0074  
                      ?_ManageProtocol 0070                     ??_ControlLedDirect 0076  
           I2c_DataReceiveSm@RxCounter 0068                       ?_InitializeTasks 0070  
                           _OSCCONbits 0099                    ??_I2c_SetI2cAddress 0074  
            __end_of_Mcu_SetDieTempSts 084B                         ??_Led_MainTask 003B  
           I2c_DataReceiveSm@TxCounter 0069                    ?_StdS_SetI2cAddress 0070  
                 _LedPulseStateMachine 0F2A                        ??_I2c_SetConfig 0074  
                             utoa@base 002B                         _Mcu_InitIntOsc 0825  
                      ??_Tmr_TmrBPrSet 0034                               strcat@cp 0022  
              I2c_UpdateTxBuffer@Index 0023                               strcat@to 0021  
                     ___lldiv@quotient 0028                        ___lwmod@divisor 0020  
              ?_StdS_ManageStdServices 0070                        ___lwmod@counter 0075  
            __end_of_I2c_SetI2cAddress 0820                  ReceiveEvt@EventStatus 0074  
                 ??_StdS_SetI2cAddress 0074                             _WDTCONbits 0097  
                    ??_CheckByteStatus 0074           __size_of_Led_SetLedBlinkTime 0019  
                        ??_GenerateEvt 0074                        _LedStateMachine 0C81  
                      TmrBInit@TmrNumb 0021             __size_of_Adc_GetConvResult 0010  
               Led_SetLedStatus@LedSts 0074                        ??_AdcGetValueCh 0076  
I2c_SetI2cAddressMask@SlaveAddressMask 0074  I2cSlv_I2cDrvHandle@I2cReceiveMsgState 0063  
                __end_of_ClearRxBuffer 08F4                  __end_of_ClearTxBuffer 0904  
                       _GetAnalogAscii 0D51                          ?_Mcu_ClearWdg 0070  
                        _Mcu_SetWdgSts 0833  
