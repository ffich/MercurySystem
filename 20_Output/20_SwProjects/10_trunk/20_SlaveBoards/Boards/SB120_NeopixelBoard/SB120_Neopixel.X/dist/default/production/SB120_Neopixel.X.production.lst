

Microchip Technology PIC LITE Macro Assembler V1.38 build -256452561 
                                                                                               Sun Mar 24 11:32:46 2019

Microchip Technology Omniscient Code Generator v1.38 (Free mode) build 201607010351
     1                           	processor	16F1829
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	idataCOMMON,global,class=CODE,delta=2
     5                           	psect	idataBANK1,global,class=CODE,delta=2
     6                           	psect	idataBANK2,global,class=CODE,delta=2
     7                           	psect	stringtext,global,class=STRCODE,delta=2
     8                           	psect	cinit,global,class=CODE,merge=1,delta=2
     9                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
    10                           	psect	dataCOMMON,global,class=COMMON,space=1,delta=1
    11                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    12                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    13                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1
    14                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1
    15                           	psect	dataBANK2,global,class=BANK2,space=1,delta=1
    16                           	psect	bssBANK3,global,class=BANK3,space=1,delta=1
    17                           	psect	bssBANK4,global,class=BANK4,space=1,delta=1
    18                           	psect	bssBANK5,global,class=BANK5,space=1,delta=1
    19                           	psect	bssBANK6,global,class=BANK6,space=1,delta=1
    20                           	psect	inittext,global,class=CODE,delta=2
    21                           	psect	clrtext,global,class=CODE,delta=2
    22                           	psect	cstackBANK2,global,class=BANK2,space=1,delta=1
    23                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1
    24                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    25                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    26                           	psect	maintext,global,class=CODE,merge=1,split=1,delta=2
    27                           	psect	text1,local,class=CODE,merge=1,delta=2
    28                           	psect	text2,local,class=CODE,merge=1,delta=2
    29                           	psect	text3,local,class=CODE,merge=1,delta=2
    30                           	psect	text4,local,class=CODE,merge=1,delta=2
    31                           	psect	text5,local,class=CODE,merge=1,delta=2
    32                           	psect	text6,local,class=CODE,merge=1,delta=2
    33                           	psect	text7,local,class=CODE,merge=1,delta=2
    34                           	psect	text8,local,class=CODE,merge=1,delta=2
    35                           	psect	text9,local,class=CODE,merge=1,delta=2
    36                           	psect	text10,local,class=CODE,merge=1,delta=2
    37                           	psect	text11,local,class=CODE,merge=1,delta=2
    38                           	psect	text12,local,class=CODE,merge=1,delta=2
    39                           	psect	text13,local,class=CODE,merge=1,delta=2
    40                           	psect	text14,local,class=CODE,merge=1,delta=2
    41                           	psect	text15,local,class=CODE,merge=1,delta=2
    42                           	psect	text16,local,class=CODE,merge=1,delta=2
    43                           	psect	text17,local,class=CODE,merge=1,delta=2
    44                           	psect	text18,local,class=CODE,merge=1,delta=2
    45                           	psect	swtext1,local,class=CONST,delta=2
    46                           	psect	text19,local,class=CODE,merge=1,delta=2
    47                           	psect	text20,local,class=CODE,merge=1,delta=2
    48                           	psect	text21,local,class=CODE,merge=1,delta=2
    49                           	psect	text22,local,class=CODE,merge=1,delta=2
    50                           	psect	text23,local,class=CODE,merge=1,delta=2
    51                           	psect	text24,local,class=CODE,merge=1,delta=2
    52                           	psect	text25,local,class=CODE,merge=1,delta=2
    53                           	psect	text26,local,class=CODE,merge=1,delta=2
    54                           	psect	text27,local,class=CODE,merge=1,delta=2
    55                           	psect	text28,local,class=CODE,merge=1,delta=2
    56                           	psect	text29,local,class=CODE,merge=1,delta=2
    57                           	psect	text30,local,class=CODE,merge=1,delta=2
    58                           	psect	text31,local,class=CODE,merge=1,delta=2
    59                           	psect	text32,local,class=CODE,merge=1,delta=2
    60                           	psect	text33,local,class=CODE,merge=1,delta=2
    61                           	psect	text34,local,class=CODE,merge=1,delta=2
    62                           	psect	text35,local,class=CODE,merge=1,delta=2
    63                           	psect	text36,local,class=CODE,merge=1,delta=2
    64                           	psect	text37,local,class=CODE,merge=1,delta=2
    65                           	psect	text38,local,class=CODE,merge=1,delta=2
    66                           	psect	text39,local,class=CODE,merge=1,delta=2
    67                           	psect	text40,local,class=CODE,merge=1,delta=2
    68                           	psect	text41,local,class=CODE,merge=1,delta=2
    69                           	psect	text42,local,class=CODE,merge=1,delta=2
    70                           	psect	swtext2,local,class=CONST,delta=2
    71                           	psect	text43,local,class=CODE,merge=1,delta=2
    72                           	psect	text44,local,class=CODE,merge=1,delta=2
    73                           	psect	text45,local,class=CODE,merge=1,delta=2
    74                           	psect	text46,local,class=CODE,merge=1,delta=2
    75                           	psect	text47,local,class=CODE,merge=1,delta=2
    76                           	psect	text48,local,class=CODE,merge=1,delta=2
    77                           	psect	text49,local,class=CODE,merge=1,delta=2
    78                           	psect	text50,local,class=CODE,merge=1,delta=2
    79                           	psect	text51,local,class=CODE,merge=1,delta=2
    80                           	psect	text52,local,class=CODE,merge=1,delta=2
    81                           	psect	text53,local,class=CODE,merge=1,delta=2
    82                           	psect	text54,local,class=CODE,merge=1,delta=2
    83                           	psect	text55,local,class=CODE,merge=1,delta=2
    84                           	psect	text56,local,class=CODE,merge=1,delta=2
    85                           	psect	text57,local,class=CODE,merge=1,delta=2
    86                           	psect	text58,local,class=CODE,merge=1,delta=2
    87                           	psect	text59,local,class=CODE,merge=1,delta=2
    88                           	psect	text60,local,class=CODE,merge=1,delta=2
    89                           	psect	text61,local,class=CODE,merge=1,delta=2
    90                           	psect	text62,local,class=CODE,merge=1,delta=2
    91                           	psect	text63,local,class=CODE,merge=1,delta=2
    92                           	psect	text64,local,class=CODE,merge=1,delta=2
    93                           	psect	text65,local,class=CODE,merge=1,delta=2
    94                           	psect	text66,local,class=CODE,merge=1,delta=2
    95                           	psect	text67,local,class=CODE,merge=1,delta=2
    96                           	psect	text68,local,class=CODE,merge=1,delta=2
    97                           	psect	text69,local,class=CODE,merge=1,delta=2
    98                           	psect	intentry,global,class=CODE,delta=2
    99                           	psect	text71,local,class=CODE,merge=1,delta=2
   100                           	dabs	1,0x620,48
   101                           	dabs	1,0x5CD,35
   102                           	dabs	1,0x239D,0,_I2cPacket
   103                           	dabs	1,0x7E,2
   104  0000                     	;# 
   105  0001                     	;# 
   106  0002                     	;# 
   107  0003                     	;# 
   108  0004                     	;# 
   109  0005                     	;# 
   110  0006                     	;# 
   111  0007                     	;# 
   112  0008                     	;# 
   113  0009                     	;# 
   114  000A                     	;# 
   115  000B                     	;# 
   116  000C                     	;# 
   117  000D                     	;# 
   118  000E                     	;# 
   119  0011                     	;# 
   120  0012                     	;# 
   121  0013                     	;# 
   122  0014                     	;# 
   123  0015                     	;# 
   124  0016                     	;# 
   125  0016                     	;# 
   126  0017                     	;# 
   127  0018                     	;# 
   128  0019                     	;# 
   129  001A                     	;# 
   130  001B                     	;# 
   131  001C                     	;# 
   132  001E                     	;# 
   133  001F                     	;# 
   134  008C                     	;# 
   135  008D                     	;# 
   136  008E                     	;# 
   137  0091                     	;# 
   138  0092                     	;# 
   139  0093                     	;# 
   140  0094                     	;# 
   141  0095                     	;# 
   142  0096                     	;# 
   143  0097                     	;# 
   144  0098                     	;# 
   145  0099                     	;# 
   146  009A                     	;# 
   147  009B                     	;# 
   148  009B                     	;# 
   149  009C                     	;# 
   150  009D                     	;# 
   151  009E                     	;# 
   152  010C                     	;# 
   153  010D                     	;# 
   154  010E                     	;# 
   155  0111                     	;# 
   156  0112                     	;# 
   157  0113                     	;# 
   158  0114                     	;# 
   159  0115                     	;# 
   160  0116                     	;# 
   161  0117                     	;# 
   162  0118                     	;# 
   163  0119                     	;# 
   164  011A                     	;# 
   165  011B                     	;# 
   166  011D                     	;# 
   167  011E                     	;# 
   168  018C                     	;# 
   169  018D                     	;# 
   170  018E                     	;# 
   171  0191                     	;# 
   172  0191                     	;# 
   173  0192                     	;# 
   174  0193                     	;# 
   175  0193                     	;# 
   176  0193                     	;# 
   177  0194                     	;# 
   178  0195                     	;# 
   179  0196                     	;# 
   180  0199                     	;# 
   181  019A                     	;# 
   182  019B                     	;# 
   183  019B                     	;# 
   184  019C                     	;# 
   185  019D                     	;# 
   186  019E                     	;# 
   187  019F                     	;# 
   188  020C                     	;# 
   189  020D                     	;# 
   190  020E                     	;# 
   191  0211                     	;# 
   192  0211                     	;# 
   193  0212                     	;# 
   194  0212                     	;# 
   195  0213                     	;# 
   196  0213                     	;# 
   197  0214                     	;# 
   198  0214                     	;# 
   199  0215                     	;# 
   200  0215                     	;# 
   201  0215                     	;# 
   202  0216                     	;# 
   203  0216                     	;# 
   204  0217                     	;# 
   205  0217                     	;# 
   206  0219                     	;# 
   207  021A                     	;# 
   208  021B                     	;# 
   209  021C                     	;# 
   210  021D                     	;# 
   211  021E                     	;# 
   212  021F                     	;# 
   213  0291                     	;# 
   214  0291                     	;# 
   215  0292                     	;# 
   216  0293                     	;# 
   217  0294                     	;# 
   218  0295                     	;# 
   219  0295                     	;# 
   220  0296                     	;# 
   221  0298                     	;# 
   222  0298                     	;# 
   223  0299                     	;# 
   224  029A                     	;# 
   225  029B                     	;# 
   226  029C                     	;# 
   227  029D                     	;# 
   228  029E                     	;# 
   229  0311                     	;# 
   230  0311                     	;# 
   231  0312                     	;# 
   232  0313                     	;# 
   233  0318                     	;# 
   234  0318                     	;# 
   235  0319                     	;# 
   236  031A                     	;# 
   237  038C                     	;# 
   238  038D                     	;# 
   239  038E                     	;# 
   240  0391                     	;# 
   241  0392                     	;# 
   242  0393                     	;# 
   243  0394                     	;# 
   244  0395                     	;# 
   245  0396                     	;# 
   246  039A                     	;# 
   247  039C                     	;# 
   248  039D                     	;# 
   249  039E                     	;# 
   250  039F                     	;# 
   251  0415                     	;# 
   252  0416                     	;# 
   253  0417                     	;# 
   254  041C                     	;# 
   255  041D                     	;# 
   256  041E                     	;# 
   257  0FE4                     	;# 
   258  0FE5                     	;# 
   259  0FE6                     	;# 
   260  0FE7                     	;# 
   261  0FE8                     	;# 
   262  0FE9                     	;# 
   263  0FEA                     	;# 
   264  0FEB                     	;# 
   265  0FED                     	;# 
   266  0FEE                     	;# 
   267  0FEF                     	;# 
   268  0000                     	;# 
   269  0001                     	;# 
   270  0002                     	;# 
   271  0003                     	;# 
   272  0004                     	;# 
   273  0005                     	;# 
   274  0006                     	;# 
   275  0007                     	;# 
   276  0008                     	;# 
   277  0009                     	;# 
   278  000A                     	;# 
   279  000B                     	;# 
   280  000C                     	;# 
   281  000D                     	;# 
   282  000E                     	;# 
   283  0011                     	;# 
   284  0012                     	;# 
   285  0013                     	;# 
   286  0014                     	;# 
   287  0015                     	;# 
   288  0016                     	;# 
   289  0016                     	;# 
   290  0017                     	;# 
   291  0018                     	;# 
   292  0019                     	;# 
   293  001A                     	;# 
   294  001B                     	;# 
   295  001C                     	;# 
   296  001E                     	;# 
   297  001F                     	;# 
   298  008C                     	;# 
   299  008D                     	;# 
   300  008E                     	;# 
   301  0091                     	;# 
   302  0092                     	;# 
   303  0093                     	;# 
   304  0094                     	;# 
   305  0095                     	;# 
   306  0096                     	;# 
   307  0097                     	;# 
   308  0098                     	;# 
   309  0099                     	;# 
   310  009A                     	;# 
   311  009B                     	;# 
   312  009B                     	;# 
   313  009C                     	;# 
   314  009D                     	;# 
   315  009E                     	;# 
   316  010C                     	;# 
   317  010D                     	;# 
   318  010E                     	;# 
   319  0111                     	;# 
   320  0112                     	;# 
   321  0113                     	;# 
   322  0114                     	;# 
   323  0115                     	;# 
   324  0116                     	;# 
   325  0117                     	;# 
   326  0118                     	;# 
   327  0119                     	;# 
   328  011A                     	;# 
   329  011B                     	;# 
   330  011D                     	;# 
   331  011E                     	;# 
   332  018C                     	;# 
   333  018D                     	;# 
   334  018E                     	;# 
   335  0191                     	;# 
   336  0191                     	;# 
   337  0192                     	;# 
   338  0193                     	;# 
   339  0193                     	;# 
   340  0193                     	;# 
   341  0194                     	;# 
   342  0195                     	;# 
   343  0196                     	;# 
   344  0199                     	;# 
   345  019A                     	;# 
   346  019B                     	;# 
   347  019B                     	;# 
   348  019C                     	;# 
   349  019D                     	;# 
   350  019E                     	;# 
   351  019F                     	;# 
   352  020C                     	;# 
   353  020D                     	;# 
   354  020E                     	;# 
   355  0211                     	;# 
   356  0211                     	;# 
   357  0212                     	;# 
   358  0212                     	;# 
   359  0213                     	;# 
   360  0213                     	;# 
   361  0214                     	;# 
   362  0214                     	;# 
   363  0215                     	;# 
   364  0215                     	;# 
   365  0215                     	;# 
   366  0216                     	;# 
   367  0216                     	;# 
   368  0217                     	;# 
   369  0217                     	;# 
   370  0219                     	;# 
   371  021A                     	;# 
   372  021B                     	;# 
   373  021C                     	;# 
   374  021D                     	;# 
   375  021E                     	;# 
   376  021F                     	;# 
   377  0291                     	;# 
   378  0291                     	;# 
   379  0292                     	;# 
   380  0293                     	;# 
   381  0294                     	;# 
   382  0295                     	;# 
   383  0295                     	;# 
   384  0296                     	;# 
   385  0298                     	;# 
   386  0298                     	;# 
   387  0299                     	;# 
   388  029A                     	;# 
   389  029B                     	;# 
   390  029C                     	;# 
   391  029D                     	;# 
   392  029E                     	;# 
   393  0311                     	;# 
   394  0311                     	;# 
   395  0312                     	;# 
   396  0313                     	;# 
   397  0318                     	;# 
   398  0318                     	;# 
   399  0319                     	;# 
   400  031A                     	;# 
   401  038C                     	;# 
   402  038D                     	;# 
   403  038E                     	;# 
   404  0391                     	;# 
   405  0392                     	;# 
   406  0393                     	;# 
   407  0394                     	;# 
   408  0395                     	;# 
   409  0396                     	;# 
   410  039A                     	;# 
   411  039C                     	;# 
   412  039D                     	;# 
   413  039E                     	;# 
   414  039F                     	;# 
   415  0415                     	;# 
   416  0416                     	;# 
   417  0417                     	;# 
   418  041C                     	;# 
   419  041D                     	;# 
   420  041E                     	;# 
   421  0FE4                     	;# 
   422  0FE5                     	;# 
   423  0FE6                     	;# 
   424  0FE7                     	;# 
   425  0FE8                     	;# 
   426  0FE9                     	;# 
   427  0FEA                     	;# 
   428  0FEB                     	;# 
   429  0FED                     	;# 
   430  0FEE                     	;# 
   431  0FEF                     	;# 
   432  0000                     	;# 
   433  0001                     	;# 
   434  0002                     	;# 
   435  0003                     	;# 
   436  0004                     	;# 
   437  0005                     	;# 
   438  0006                     	;# 
   439  0007                     	;# 
   440  0008                     	;# 
   441  0009                     	;# 
   442  000A                     	;# 
   443  000B                     	;# 
   444  000C                     	;# 
   445  000D                     	;# 
   446  000E                     	;# 
   447  0011                     	;# 
   448  0012                     	;# 
   449  0013                     	;# 
   450  0014                     	;# 
   451  0015                     	;# 
   452  0016                     	;# 
   453  0016                     	;# 
   454  0017                     	;# 
   455  0018                     	;# 
   456  0019                     	;# 
   457  001A                     	;# 
   458  001B                     	;# 
   459  001C                     	;# 
   460  001E                     	;# 
   461  001F                     	;# 
   462  008C                     	;# 
   463  008D                     	;# 
   464  008E                     	;# 
   465  0091                     	;# 
   466  0092                     	;# 
   467  0093                     	;# 
   468  0094                     	;# 
   469  0095                     	;# 
   470  0096                     	;# 
   471  0097                     	;# 
   472  0098                     	;# 
   473  0099                     	;# 
   474  009A                     	;# 
   475  009B                     	;# 
   476  009B                     	;# 
   477  009C                     	;# 
   478  009D                     	;# 
   479  009E                     	;# 
   480  010C                     	;# 
   481  010D                     	;# 
   482  010E                     	;# 
   483  0111                     	;# 
   484  0112                     	;# 
   485  0113                     	;# 
   486  0114                     	;# 
   487  0115                     	;# 
   488  0116                     	;# 
   489  0117                     	;# 
   490  0118                     	;# 
   491  0119                     	;# 
   492  011A                     	;# 
   493  011B                     	;# 
   494  011D                     	;# 
   495  011E                     	;# 
   496  018C                     	;# 
   497  018D                     	;# 
   498  018E                     	;# 
   499  0191                     	;# 
   500  0191                     	;# 
   501  0192                     	;# 
   502  0193                     	;# 
   503  0193                     	;# 
   504  0193                     	;# 
   505  0194                     	;# 
   506  0195                     	;# 
   507  0196                     	;# 
   508  0199                     	;# 
   509  019A                     	;# 
   510  019B                     	;# 
   511  019B                     	;# 
   512  019C                     	;# 
   513  019D                     	;# 
   514  019E                     	;# 
   515  019F                     	;# 
   516  020C                     	;# 
   517  020D                     	;# 
   518  020E                     	;# 
   519  0211                     	;# 
   520  0211                     	;# 
   521  0212                     	;# 
   522  0212                     	;# 
   523  0213                     	;# 
   524  0213                     	;# 
   525  0214                     	;# 
   526  0214                     	;# 
   527  0215                     	;# 
   528  0215                     	;# 
   529  0215                     	;# 
   530  0216                     	;# 
   531  0216                     	;# 
   532  0217                     	;# 
   533  0217                     	;# 
   534  0219                     	;# 
   535  021A                     	;# 
   536  021B                     	;# 
   537  021C                     	;# 
   538  021D                     	;# 
   539  021E                     	;# 
   540  021F                     	;# 
   541  0291                     	;# 
   542  0291                     	;# 
   543  0292                     	;# 
   544  0293                     	;# 
   545  0294                     	;# 
   546  0295                     	;# 
   547  0295                     	;# 
   548  0296                     	;# 
   549  0298                     	;# 
   550  0298                     	;# 
   551  0299                     	;# 
   552  029A                     	;# 
   553  029B                     	;# 
   554  029C                     	;# 
   555  029D                     	;# 
   556  029E                     	;# 
   557  0311                     	;# 
   558  0311                     	;# 
   559  0312                     	;# 
   560  0313                     	;# 
   561  0318                     	;# 
   562  0318                     	;# 
   563  0319                     	;# 
   564  031A                     	;# 
   565  038C                     	;# 
   566  038D                     	;# 
   567  038E                     	;# 
   568  0391                     	;# 
   569  0392                     	;# 
   570  0393                     	;# 
   571  0394                     	;# 
   572  0395                     	;# 
   573  0396                     	;# 
   574  039A                     	;# 
   575  039C                     	;# 
   576  039D                     	;# 
   577  039E                     	;# 
   578  039F                     	;# 
   579  0415                     	;# 
   580  0416                     	;# 
   581  0417                     	;# 
   582  041C                     	;# 
   583  041D                     	;# 
   584  041E                     	;# 
   585  0FE4                     	;# 
   586  0FE5                     	;# 
   587  0FE6                     	;# 
   588  0FE7                     	;# 
   589  0FE8                     	;# 
   590  0FE9                     	;# 
   591  0FEA                     	;# 
   592  0FEB                     	;# 
   593  0FED                     	;# 
   594  0FEE                     	;# 
   595  0FEF                     	;# 
   596  0000                     	;# 
   597  0001                     	;# 
   598  0002                     	;# 
   599  0003                     	;# 
   600  0004                     	;# 
   601  0005                     	;# 
   602  0006                     	;# 
   603  0007                     	;# 
   604  0008                     	;# 
   605  0009                     	;# 
   606  000A                     	;# 
   607  000B                     	;# 
   608  000C                     	;# 
   609  000D                     	;# 
   610  000E                     	;# 
   611  0011                     	;# 
   612  0012                     	;# 
   613  0013                     	;# 
   614  0014                     	;# 
   615  0015                     	;# 
   616  0016                     	;# 
   617  0016                     	;# 
   618  0017                     	;# 
   619  0018                     	;# 
   620  0019                     	;# 
   621  001A                     	;# 
   622  001B                     	;# 
   623  001C                     	;# 
   624  001E                     	;# 
   625  001F                     	;# 
   626  008C                     	;# 
   627  008D                     	;# 
   628  008E                     	;# 
   629  0091                     	;# 
   630  0092                     	;# 
   631  0093                     	;# 
   632  0094                     	;# 
   633  0095                     	;# 
   634  0096                     	;# 
   635  0097                     	;# 
   636  0098                     	;# 
   637  0099                     	;# 
   638  009A                     	;# 
   639  009B                     	;# 
   640  009B                     	;# 
   641  009C                     	;# 
   642  009D                     	;# 
   643  009E                     	;# 
   644  010C                     	;# 
   645  010D                     	;# 
   646  010E                     	;# 
   647  0111                     	;# 
   648  0112                     	;# 
   649  0113                     	;# 
   650  0114                     	;# 
   651  0115                     	;# 
   652  0116                     	;# 
   653  0117                     	;# 
   654  0118                     	;# 
   655  0119                     	;# 
   656  011A                     	;# 
   657  011B                     	;# 
   658  011D                     	;# 
   659  011E                     	;# 
   660  018C                     	;# 
   661  018D                     	;# 
   662  018E                     	;# 
   663  0191                     	;# 
   664  0191                     	;# 
   665  0192                     	;# 
   666  0193                     	;# 
   667  0193                     	;# 
   668  0193                     	;# 
   669  0194                     	;# 
   670  0195                     	;# 
   671  0196                     	;# 
   672  0199                     	;# 
   673  019A                     	;# 
   674  019B                     	;# 
   675  019B                     	;# 
   676  019C                     	;# 
   677  019D                     	;# 
   678  019E                     	;# 
   679  019F                     	;# 
   680  020C                     	;# 
   681  020D                     	;# 
   682  020E                     	;# 
   683  0211                     	;# 
   684  0211                     	;# 
   685  0212                     	;# 
   686  0212                     	;# 
   687  0213                     	;# 
   688  0213                     	;# 
   689  0214                     	;# 
   690  0214                     	;# 
   691  0215                     	;# 
   692  0215                     	;# 
   693  0215                     	;# 
   694  0216                     	;# 
   695  0216                     	;# 
   696  0217                     	;# 
   697  0217                     	;# 
   698  0219                     	;# 
   699  021A                     	;# 
   700  021B                     	;# 
   701  021C                     	;# 
   702  021D                     	;# 
   703  021E                     	;# 
   704  021F                     	;# 
   705  0291                     	;# 
   706  0291                     	;# 
   707  0292                     	;# 
   708  0293                     	;# 
   709  0294                     	;# 
   710  0295                     	;# 
   711  0295                     	;# 
   712  0296                     	;# 
   713  0298                     	;# 
   714  0298                     	;# 
   715  0299                     	;# 
   716  029A                     	;# 
   717  029B                     	;# 
   718  029C                     	;# 
   719  029D                     	;# 
   720  029E                     	;# 
   721  0311                     	;# 
   722  0311                     	;# 
   723  0312                     	;# 
   724  0313                     	;# 
   725  0318                     	;# 
   726  0318                     	;# 
   727  0319                     	;# 
   728  031A                     	;# 
   729  038C                     	;# 
   730  038D                     	;# 
   731  038E                     	;# 
   732  0391                     	;# 
   733  0392                     	;# 
   734  0393                     	;# 
   735  0394                     	;# 
   736  0395                     	;# 
   737  0396                     	;# 
   738  039A                     	;# 
   739  039C                     	;# 
   740  039D                     	;# 
   741  039E                     	;# 
   742  039F                     	;# 
   743  0415                     	;# 
   744  0416                     	;# 
   745  0417                     	;# 
   746  041C                     	;# 
   747  041D                     	;# 
   748  041E                     	;# 
   749  0FE4                     	;# 
   750  0FE5                     	;# 
   751  0FE6                     	;# 
   752  0FE7                     	;# 
   753  0FE8                     	;# 
   754  0FE9                     	;# 
   755  0FEA                     	;# 
   756  0FEB                     	;# 
   757  0FED                     	;# 
   758  0FEE                     	;# 
   759  0FEF                     	;# 
   760  0000                     	;# 
   761  0001                     	;# 
   762  0002                     	;# 
   763  0003                     	;# 
   764  0004                     	;# 
   765  0005                     	;# 
   766  0006                     	;# 
   767  0007                     	;# 
   768  0008                     	;# 
   769  0009                     	;# 
   770  000A                     	;# 
   771  000B                     	;# 
   772  000C                     	;# 
   773  000D                     	;# 
   774  000E                     	;# 
   775  0011                     	;# 
   776  0012                     	;# 
   777  0013                     	;# 
   778  0014                     	;# 
   779  0015                     	;# 
   780  0016                     	;# 
   781  0016                     	;# 
   782  0017                     	;# 
   783  0018                     	;# 
   784  0019                     	;# 
   785  001A                     	;# 
   786  001B                     	;# 
   787  001C                     	;# 
   788  001E                     	;# 
   789  001F                     	;# 
   790  008C                     	;# 
   791  008D                     	;# 
   792  008E                     	;# 
   793  0091                     	;# 
   794  0092                     	;# 
   795  0093                     	;# 
   796  0094                     	;# 
   797  0095                     	;# 
   798  0096                     	;# 
   799  0097                     	;# 
   800  0098                     	;# 
   801  0099                     	;# 
   802  009A                     	;# 
   803  009B                     	;# 
   804  009B                     	;# 
   805  009C                     	;# 
   806  009D                     	;# 
   807  009E                     	;# 
   808  010C                     	;# 
   809  010D                     	;# 
   810  010E                     	;# 
   811  0111                     	;# 
   812  0112                     	;# 
   813  0113                     	;# 
   814  0114                     	;# 
   815  0115                     	;# 
   816  0116                     	;# 
   817  0117                     	;# 
   818  0118                     	;# 
   819  0119                     	;# 
   820  011A                     	;# 
   821  011B                     	;# 
   822  011D                     	;# 
   823  011E                     	;# 
   824  018C                     	;# 
   825  018D                     	;# 
   826  018E                     	;# 
   827  0191                     	;# 
   828  0191                     	;# 
   829  0192                     	;# 
   830  0193                     	;# 
   831  0193                     	;# 
   832  0193                     	;# 
   833  0194                     	;# 
   834  0195                     	;# 
   835  0196                     	;# 
   836  0199                     	;# 
   837  019A                     	;# 
   838  019B                     	;# 
   839  019B                     	;# 
   840  019C                     	;# 
   841  019D                     	;# 
   842  019E                     	;# 
   843  019F                     	;# 
   844  020C                     	;# 
   845  020D                     	;# 
   846  020E                     	;# 
   847  0211                     	;# 
   848  0211                     	;# 
   849  0212                     	;# 
   850  0212                     	;# 
   851  0213                     	;# 
   852  0213                     	;# 
   853  0214                     	;# 
   854  0214                     	;# 
   855  0215                     	;# 
   856  0215                     	;# 
   857  0215                     	;# 
   858  0216                     	;# 
   859  0216                     	;# 
   860  0217                     	;# 
   861  0217                     	;# 
   862  0219                     	;# 
   863  021A                     	;# 
   864  021B                     	;# 
   865  021C                     	;# 
   866  021D                     	;# 
   867  021E                     	;# 
   868  021F                     	;# 
   869  0291                     	;# 
   870  0291                     	;# 
   871  0292                     	;# 
   872  0293                     	;# 
   873  0294                     	;# 
   874  0295                     	;# 
   875  0295                     	;# 
   876  0296                     	;# 
   877  0298                     	;# 
   878  0298                     	;# 
   879  0299                     	;# 
   880  029A                     	;# 
   881  029B                     	;# 
   882  029C                     	;# 
   883  029D                     	;# 
   884  029E                     	;# 
   885  0311                     	;# 
   886  0311                     	;# 
   887  0312                     	;# 
   888  0313                     	;# 
   889  0318                     	;# 
   890  0318                     	;# 
   891  0319                     	;# 
   892  031A                     	;# 
   893  038C                     	;# 
   894  038D                     	;# 
   895  038E                     	;# 
   896  0391                     	;# 
   897  0392                     	;# 
   898  0393                     	;# 
   899  0394                     	;# 
   900  0395                     	;# 
   901  0396                     	;# 
   902  039A                     	;# 
   903  039C                     	;# 
   904  039D                     	;# 
   905  039E                     	;# 
   906  039F                     	;# 
   907  0415                     	;# 
   908  0416                     	;# 
   909  0417                     	;# 
   910  041C                     	;# 
   911  041D                     	;# 
   912  041E                     	;# 
   913  0FE4                     	;# 
   914  0FE5                     	;# 
   915  0FE6                     	;# 
   916  0FE7                     	;# 
   917  0FE8                     	;# 
   918  0FE9                     	;# 
   919  0FEA                     	;# 
   920  0FEB                     	;# 
   921  0FED                     	;# 
   922  0FEE                     	;# 
   923  0FEF                     	;# 
   924  0000                     	;# 
   925  0001                     	;# 
   926  0002                     	;# 
   927  0003                     	;# 
   928  0004                     	;# 
   929  0005                     	;# 
   930  0006                     	;# 
   931  0007                     	;# 
   932  0008                     	;# 
   933  0009                     	;# 
   934  000A                     	;# 
   935  000B                     	;# 
   936  000C                     	;# 
   937  000D                     	;# 
   938  000E                     	;# 
   939  0011                     	;# 
   940  0012                     	;# 
   941  0013                     	;# 
   942  0014                     	;# 
   943  0015                     	;# 
   944  0016                     	;# 
   945  0016                     	;# 
   946  0017                     	;# 
   947  0018                     	;# 
   948  0019                     	;# 
   949  001A                     	;# 
   950  001B                     	;# 
   951  001C                     	;# 
   952  001E                     	;# 
   953  001F                     	;# 
   954  008C                     	;# 
   955  008D                     	;# 
   956  008E                     	;# 
   957  0091                     	;# 
   958  0092                     	;# 
   959  0093                     	;# 
   960  0094                     	;# 
   961  0095                     	;# 
   962  0096                     	;# 
   963  0097                     	;# 
   964  0098                     	;# 
   965  0099                     	;# 
   966  009A                     	;# 
   967  009B                     	;# 
   968  009B                     	;# 
   969  009C                     	;# 
   970  009D                     	;# 
   971  009E                     	;# 
   972  010C                     	;# 
   973  010D                     	;# 
   974  010E                     	;# 
   975  0111                     	;# 
   976  0112                     	;# 
   977  0113                     	;# 
   978  0114                     	;# 
   979  0115                     	;# 
   980  0116                     	;# 
   981  0117                     	;# 
   982  0118                     	;# 
   983  0119                     	;# 
   984  011A                     	;# 
   985  011B                     	;# 
   986  011D                     	;# 
   987  011E                     	;# 
   988  018C                     	;# 
   989  018D                     	;# 
   990  018E                     	;# 
   991  0191                     	;# 
   992  0191                     	;# 
   993  0192                     	;# 
   994  0193                     	;# 
   995  0193                     	;# 
   996  0193                     	;# 
   997  0194                     	;# 
   998  0195                     	;# 
   999  0196                     	;# 
  1000  0199                     	;# 
  1001  019A                     	;# 
  1002  019B                     	;# 
  1003  019B                     	;# 
  1004  019C                     	;# 
  1005  019D                     	;# 
  1006  019E                     	;# 
  1007  019F                     	;# 
  1008  020C                     	;# 
  1009  020D                     	;# 
  1010  020E                     	;# 
  1011  0211                     	;# 
  1012  0211                     	;# 
  1013  0212                     	;# 
  1014  0212                     	;# 
  1015  0213                     	;# 
  1016  0213                     	;# 
  1017  0214                     	;# 
  1018  0214                     	;# 
  1019  0215                     	;# 
  1020  0215                     	;# 
  1021  0215                     	;# 
  1022  0216                     	;# 
  1023  0216                     	;# 
  1024  0217                     	;# 
  1025  0217                     	;# 
  1026  0219                     	;# 
  1027  021A                     	;# 
  1028  021B                     	;# 
  1029  021C                     	;# 
  1030  021D                     	;# 
  1031  021E                     	;# 
  1032  021F                     	;# 
  1033  0291                     	;# 
  1034  0291                     	;# 
  1035  0292                     	;# 
  1036  0293                     	;# 
  1037  0294                     	;# 
  1038  0295                     	;# 
  1039  0295                     	;# 
  1040  0296                     	;# 
  1041  0298                     	;# 
  1042  0298                     	;# 
  1043  0299                     	;# 
  1044  029A                     	;# 
  1045  029B                     	;# 
  1046  029C                     	;# 
  1047  029D                     	;# 
  1048  029E                     	;# 
  1049  0311                     	;# 
  1050  0311                     	;# 
  1051  0312                     	;# 
  1052  0313                     	;# 
  1053  0318                     	;# 
  1054  0318                     	;# 
  1055  0319                     	;# 
  1056  031A                     	;# 
  1057  038C                     	;# 
  1058  038D                     	;# 
  1059  038E                     	;# 
  1060  0391                     	;# 
  1061  0392                     	;# 
  1062  0393                     	;# 
  1063  0394                     	;# 
  1064  0395                     	;# 
  1065  0396                     	;# 
  1066  039A                     	;# 
  1067  039C                     	;# 
  1068  039D                     	;# 
  1069  039E                     	;# 
  1070  039F                     	;# 
  1071  0415                     	;# 
  1072  0416                     	;# 
  1073  0417                     	;# 
  1074  041C                     	;# 
  1075  041D                     	;# 
  1076  041E                     	;# 
  1077  0FE4                     	;# 
  1078  0FE5                     	;# 
  1079  0FE6                     	;# 
  1080  0FE7                     	;# 
  1081  0FE8                     	;# 
  1082  0FE9                     	;# 
  1083  0FEA                     	;# 
  1084  0FEB                     	;# 
  1085  0FED                     	;# 
  1086  0FEE                     	;# 
  1087  0FEF                     	;# 
  1088  0000                     	;# 
  1089  0001                     	;# 
  1090  0002                     	;# 
  1091  0003                     	;# 
  1092  0004                     	;# 
  1093  0005                     	;# 
  1094  0006                     	;# 
  1095  0007                     	;# 
  1096  0008                     	;# 
  1097  0009                     	;# 
  1098  000A                     	;# 
  1099  000B                     	;# 
  1100  000C                     	;# 
  1101  000D                     	;# 
  1102  000E                     	;# 
  1103  0011                     	;# 
  1104  0012                     	;# 
  1105  0013                     	;# 
  1106  0014                     	;# 
  1107  0015                     	;# 
  1108  0016                     	;# 
  1109  0016                     	;# 
  1110  0017                     	;# 
  1111  0018                     	;# 
  1112  0019                     	;# 
  1113  001A                     	;# 
  1114  001B                     	;# 
  1115  001C                     	;# 
  1116  001E                     	;# 
  1117  001F                     	;# 
  1118  008C                     	;# 
  1119  008D                     	;# 
  1120  008E                     	;# 
  1121  0091                     	;# 
  1122  0092                     	;# 
  1123  0093                     	;# 
  1124  0094                     	;# 
  1125  0095                     	;# 
  1126  0096                     	;# 
  1127  0097                     	;# 
  1128  0098                     	;# 
  1129  0099                     	;# 
  1130  009A                     	;# 
  1131  009B                     	;# 
  1132  009B                     	;# 
  1133  009C                     	;# 
  1134  009D                     	;# 
  1135  009E                     	;# 
  1136  010C                     	;# 
  1137  010D                     	;# 
  1138  010E                     	;# 
  1139  0111                     	;# 
  1140  0112                     	;# 
  1141  0113                     	;# 
  1142  0114                     	;# 
  1143  0115                     	;# 
  1144  0116                     	;# 
  1145  0117                     	;# 
  1146  0118                     	;# 
  1147  0119                     	;# 
  1148  011A                     	;# 
  1149  011B                     	;# 
  1150  011D                     	;# 
  1151  011E                     	;# 
  1152  018C                     	;# 
  1153  018D                     	;# 
  1154  018E                     	;# 
  1155  0191                     	;# 
  1156  0191                     	;# 
  1157  0192                     	;# 
  1158  0193                     	;# 
  1159  0193                     	;# 
  1160  0193                     	;# 
  1161  0194                     	;# 
  1162  0195                     	;# 
  1163  0196                     	;# 
  1164  0199                     	;# 
  1165  019A                     	;# 
  1166  019B                     	;# 
  1167  019B                     	;# 
  1168  019C                     	;# 
  1169  019D                     	;# 
  1170  019E                     	;# 
  1171  019F                     	;# 
  1172  020C                     	;# 
  1173  020D                     	;# 
  1174  020E                     	;# 
  1175  0211                     	;# 
  1176  0211                     	;# 
  1177  0212                     	;# 
  1178  0212                     	;# 
  1179  0213                     	;# 
  1180  0213                     	;# 
  1181  0214                     	;# 
  1182  0214                     	;# 
  1183  0215                     	;# 
  1184  0215                     	;# 
  1185  0215                     	;# 
  1186  0216                     	;# 
  1187  0216                     	;# 
  1188  0217                     	;# 
  1189  0217                     	;# 
  1190  0219                     	;# 
  1191  021A                     	;# 
  1192  021B                     	;# 
  1193  021C                     	;# 
  1194  021D                     	;# 
  1195  021E                     	;# 
  1196  021F                     	;# 
  1197  0291                     	;# 
  1198  0291                     	;# 
  1199  0292                     	;# 
  1200  0293                     	;# 
  1201  0294                     	;# 
  1202  0295                     	;# 
  1203  0295                     	;# 
  1204  0296                     	;# 
  1205  0298                     	;# 
  1206  0298                     	;# 
  1207  0299                     	;# 
  1208  029A                     	;# 
  1209  029B                     	;# 
  1210  029C                     	;# 
  1211  029D                     	;# 
  1212  029E                     	;# 
  1213  0311                     	;# 
  1214  0311                     	;# 
  1215  0312                     	;# 
  1216  0313                     	;# 
  1217  0318                     	;# 
  1218  0318                     	;# 
  1219  0319                     	;# 
  1220  031A                     	;# 
  1221  038C                     	;# 
  1222  038D                     	;# 
  1223  038E                     	;# 
  1224  0391                     	;# 
  1225  0392                     	;# 
  1226  0393                     	;# 
  1227  0394                     	;# 
  1228  0395                     	;# 
  1229  0396                     	;# 
  1230  039A                     	;# 
  1231  039C                     	;# 
  1232  039D                     	;# 
  1233  039E                     	;# 
  1234  039F                     	;# 
  1235  0415                     	;# 
  1236  0416                     	;# 
  1237  0417                     	;# 
  1238  041C                     	;# 
  1239  041D                     	;# 
  1240  041E                     	;# 
  1241  0FE4                     	;# 
  1242  0FE5                     	;# 
  1243  0FE6                     	;# 
  1244  0FE7                     	;# 
  1245  0FE8                     	;# 
  1246  0FE9                     	;# 
  1247  0FEA                     	;# 
  1248  0FEB                     	;# 
  1249  0FED                     	;# 
  1250  0FEE                     	;# 
  1251  0FEF                     	;# 
  1252  0000                     	;# 
  1253  0001                     	;# 
  1254  0002                     	;# 
  1255  0003                     	;# 
  1256  0004                     	;# 
  1257  0005                     	;# 
  1258  0006                     	;# 
  1259  0007                     	;# 
  1260  0008                     	;# 
  1261  0009                     	;# 
  1262  000A                     	;# 
  1263  000B                     	;# 
  1264  000C                     	;# 
  1265  000D                     	;# 
  1266  000E                     	;# 
  1267  0011                     	;# 
  1268  0012                     	;# 
  1269  0013                     	;# 
  1270  0014                     	;# 
  1271  0015                     	;# 
  1272  0016                     	;# 
  1273  0016                     	;# 
  1274  0017                     	;# 
  1275  0018                     	;# 
  1276  0019                     	;# 
  1277  001A                     	;# 
  1278  001B                     	;# 
  1279  001C                     	;# 
  1280  001E                     	;# 
  1281  001F                     	;# 
  1282  008C                     	;# 
  1283  008D                     	;# 
  1284  008E                     	;# 
  1285  0091                     	;# 
  1286  0092                     	;# 
  1287  0093                     	;# 
  1288  0094                     	;# 
  1289  0095                     	;# 
  1290  0096                     	;# 
  1291  0097                     	;# 
  1292  0098                     	;# 
  1293  0099                     	;# 
  1294  009A                     	;# 
  1295  009B                     	;# 
  1296  009B                     	;# 
  1297  009C                     	;# 
  1298  009D                     	;# 
  1299  009E                     	;# 
  1300  010C                     	;# 
  1301  010D                     	;# 
  1302  010E                     	;# 
  1303  0111                     	;# 
  1304  0112                     	;# 
  1305  0113                     	;# 
  1306  0114                     	;# 
  1307  0115                     	;# 
  1308  0116                     	;# 
  1309  0117                     	;# 
  1310  0118                     	;# 
  1311  0119                     	;# 
  1312  011A                     	;# 
  1313  011B                     	;# 
  1314  011D                     	;# 
  1315  011E                     	;# 
  1316  018C                     	;# 
  1317  018D                     	;# 
  1318  018E                     	;# 
  1319  0191                     	;# 
  1320  0191                     	;# 
  1321  0192                     	;# 
  1322  0193                     	;# 
  1323  0193                     	;# 
  1324  0193                     	;# 
  1325  0194                     	;# 
  1326  0195                     	;# 
  1327  0196                     	;# 
  1328  0199                     	;# 
  1329  019A                     	;# 
  1330  019B                     	;# 
  1331  019B                     	;# 
  1332  019C                     	;# 
  1333  019D                     	;# 
  1334  019E                     	;# 
  1335  019F                     	;# 
  1336  020C                     	;# 
  1337  020D                     	;# 
  1338  020E                     	;# 
  1339  0211                     	;# 
  1340  0211                     	;# 
  1341  0212                     	;# 
  1342  0212                     	;# 
  1343  0213                     	;# 
  1344  0213                     	;# 
  1345  0214                     	;# 
  1346  0214                     	;# 
  1347  0215                     	;# 
  1348  0215                     	;# 
  1349  0215                     	;# 
  1350  0216                     	;# 
  1351  0216                     	;# 
  1352  0217                     	;# 
  1353  0217                     	;# 
  1354  0219                     	;# 
  1355  021A                     	;# 
  1356  021B                     	;# 
  1357  021C                     	;# 
  1358  021D                     	;# 
  1359  021E                     	;# 
  1360  021F                     	;# 
  1361  0291                     	;# 
  1362  0291                     	;# 
  1363  0292                     	;# 
  1364  0293                     	;# 
  1365  0294                     	;# 
  1366  0295                     	;# 
  1367  0295                     	;# 
  1368  0296                     	;# 
  1369  0298                     	;# 
  1370  0298                     	;# 
  1371  0299                     	;# 
  1372  029A                     	;# 
  1373  029B                     	;# 
  1374  029C                     	;# 
  1375  029D                     	;# 
  1376  029E                     	;# 
  1377  0311                     	;# 
  1378  0311                     	;# 
  1379  0312                     	;# 
  1380  0313                     	;# 
  1381  0318                     	;# 
  1382  0318                     	;# 
  1383  0319                     	;# 
  1384  031A                     	;# 
  1385  038C                     	;# 
  1386  038D                     	;# 
  1387  038E                     	;# 
  1388  0391                     	;# 
  1389  0392                     	;# 
  1390  0393                     	;# 
  1391  0394                     	;# 
  1392  0395                     	;# 
  1393  0396                     	;# 
  1394  039A                     	;# 
  1395  039C                     	;# 
  1396  039D                     	;# 
  1397  039E                     	;# 
  1398  039F                     	;# 
  1399  0415                     	;# 
  1400  0416                     	;# 
  1401  0417                     	;# 
  1402  041C                     	;# 
  1403  041D                     	;# 
  1404  041E                     	;# 
  1405  0FE4                     	;# 
  1406  0FE5                     	;# 
  1407  0FE6                     	;# 
  1408  0FE7                     	;# 
  1409  0FE8                     	;# 
  1410  0FE9                     	;# 
  1411  0FEA                     	;# 
  1412  0FEB                     	;# 
  1413  0FED                     	;# 
  1414  0FEE                     	;# 
  1415  0FEF                     	;# 
  1416  0000                     	;# 
  1417  0001                     	;# 
  1418  0002                     	;# 
  1419  0003                     	;# 
  1420  0004                     	;# 
  1421  0005                     	;# 
  1422  0006                     	;# 
  1423  0007                     	;# 
  1424  0008                     	;# 
  1425  0009                     	;# 
  1426  000A                     	;# 
  1427  000B                     	;# 
  1428  000C                     	;# 
  1429  000D                     	;# 
  1430  000E                     	;# 
  1431  0011                     	;# 
  1432  0012                     	;# 
  1433  0013                     	;# 
  1434  0014                     	;# 
  1435  0015                     	;# 
  1436  0016                     	;# 
  1437  0016                     	;# 
  1438  0017                     	;# 
  1439  0018                     	;# 
  1440  0019                     	;# 
  1441  001A                     	;# 
  1442  001B                     	;# 
  1443  001C                     	;# 
  1444  001E                     	;# 
  1445  001F                     	;# 
  1446  008C                     	;# 
  1447  008D                     	;# 
  1448  008E                     	;# 
  1449  0091                     	;# 
  1450  0092                     	;# 
  1451  0093                     	;# 
  1452  0094                     	;# 
  1453  0095                     	;# 
  1454  0096                     	;# 
  1455  0097                     	;# 
  1456  0098                     	;# 
  1457  0099                     	;# 
  1458  009A                     	;# 
  1459  009B                     	;# 
  1460  009B                     	;# 
  1461  009C                     	;# 
  1462  009D                     	;# 
  1463  009E                     	;# 
  1464  010C                     	;# 
  1465  010D                     	;# 
  1466  010E                     	;# 
  1467  0111                     	;# 
  1468  0112                     	;# 
  1469  0113                     	;# 
  1470  0114                     	;# 
  1471  0115                     	;# 
  1472  0116                     	;# 
  1473  0117                     	;# 
  1474  0118                     	;# 
  1475  0119                     	;# 
  1476  011A                     	;# 
  1477  011B                     	;# 
  1478  011D                     	;# 
  1479  011E                     	;# 
  1480  018C                     	;# 
  1481  018D                     	;# 
  1482  018E                     	;# 
  1483  0191                     	;# 
  1484  0191                     	;# 
  1485  0192                     	;# 
  1486  0193                     	;# 
  1487  0193                     	;# 
  1488  0193                     	;# 
  1489  0194                     	;# 
  1490  0195                     	;# 
  1491  0196                     	;# 
  1492  0199                     	;# 
  1493  019A                     	;# 
  1494  019B                     	;# 
  1495  019B                     	;# 
  1496  019C                     	;# 
  1497  019D                     	;# 
  1498  019E                     	;# 
  1499  019F                     	;# 
  1500  020C                     	;# 
  1501  020D                     	;# 
  1502  020E                     	;# 
  1503  0211                     	;# 
  1504  0211                     	;# 
  1505  0212                     	;# 
  1506  0212                     	;# 
  1507  0213                     	;# 
  1508  0213                     	;# 
  1509  0214                     	;# 
  1510  0214                     	;# 
  1511  0215                     	;# 
  1512  0215                     	;# 
  1513  0215                     	;# 
  1514  0216                     	;# 
  1515  0216                     	;# 
  1516  0217                     	;# 
  1517  0217                     	;# 
  1518  0219                     	;# 
  1519  021A                     	;# 
  1520  021B                     	;# 
  1521  021C                     	;# 
  1522  021D                     	;# 
  1523  021E                     	;# 
  1524  021F                     	;# 
  1525  0291                     	;# 
  1526  0291                     	;# 
  1527  0292                     	;# 
  1528  0293                     	;# 
  1529  0294                     	;# 
  1530  0295                     	;# 
  1531  0295                     	;# 
  1532  0296                     	;# 
  1533  0298                     	;# 
  1534  0298                     	;# 
  1535  0299                     	;# 
  1536  029A                     	;# 
  1537  029B                     	;# 
  1538  029C                     	;# 
  1539  029D                     	;# 
  1540  029E                     	;# 
  1541  0311                     	;# 
  1542  0311                     	;# 
  1543  0312                     	;# 
  1544  0313                     	;# 
  1545  0318                     	;# 
  1546  0318                     	;# 
  1547  0319                     	;# 
  1548  031A                     	;# 
  1549  038C                     	;# 
  1550  038D                     	;# 
  1551  038E                     	;# 
  1552  0391                     	;# 
  1553  0392                     	;# 
  1554  0393                     	;# 
  1555  0394                     	;# 
  1556  0395                     	;# 
  1557  0396                     	;# 
  1558  039A                     	;# 
  1559  039C                     	;# 
  1560  039D                     	;# 
  1561  039E                     	;# 
  1562  039F                     	;# 
  1563  0415                     	;# 
  1564  0416                     	;# 
  1565  0417                     	;# 
  1566  041C                     	;# 
  1567  041D                     	;# 
  1568  041E                     	;# 
  1569  0FE4                     	;# 
  1570  0FE5                     	;# 
  1571  0FE6                     	;# 
  1572  0FE7                     	;# 
  1573  0FE8                     	;# 
  1574  0FE9                     	;# 
  1575  0FEA                     	;# 
  1576  0FEB                     	;# 
  1577  0FED                     	;# 
  1578  0FEE                     	;# 
  1579  0FEF                     	;# 
  1580  0000                     	;# 
  1581  0001                     	;# 
  1582  0002                     	;# 
  1583  0003                     	;# 
  1584  0004                     	;# 
  1585  0005                     	;# 
  1586  0006                     	;# 
  1587  0007                     	;# 
  1588  0008                     	;# 
  1589  0009                     	;# 
  1590  000A                     	;# 
  1591  000B                     	;# 
  1592  000C                     	;# 
  1593  000D                     	;# 
  1594  000E                     	;# 
  1595  0011                     	;# 
  1596  0012                     	;# 
  1597  0013                     	;# 
  1598  0014                     	;# 
  1599  0015                     	;# 
  1600  0016                     	;# 
  1601  0016                     	;# 
  1602  0017                     	;# 
  1603  0018                     	;# 
  1604  0019                     	;# 
  1605  001A                     	;# 
  1606  001B                     	;# 
  1607  001C                     	;# 
  1608  001E                     	;# 
  1609  001F                     	;# 
  1610  008C                     	;# 
  1611  008D                     	;# 
  1612  008E                     	;# 
  1613  0091                     	;# 
  1614  0092                     	;# 
  1615  0093                     	;# 
  1616  0094                     	;# 
  1617  0095                     	;# 
  1618  0096                     	;# 
  1619  0097                     	;# 
  1620  0098                     	;# 
  1621  0099                     	;# 
  1622  009A                     	;# 
  1623  009B                     	;# 
  1624  009B                     	;# 
  1625  009C                     	;# 
  1626  009D                     	;# 
  1627  009E                     	;# 
  1628  010C                     	;# 
  1629  010D                     	;# 
  1630  010E                     	;# 
  1631  0111                     	;# 
  1632  0112                     	;# 
  1633  0113                     	;# 
  1634  0114                     	;# 
  1635  0115                     	;# 
  1636  0116                     	;# 
  1637  0117                     	;# 
  1638  0118                     	;# 
  1639  0119                     	;# 
  1640  011A                     	;# 
  1641  011B                     	;# 
  1642  011D                     	;# 
  1643  011E                     	;# 
  1644  018C                     	;# 
  1645  018D                     	;# 
  1646  018E                     	;# 
  1647  0191                     	;# 
  1648  0191                     	;# 
  1649  0192                     	;# 
  1650  0193                     	;# 
  1651  0193                     	;# 
  1652  0193                     	;# 
  1653  0194                     	;# 
  1654  0195                     	;# 
  1655  0196                     	;# 
  1656  0199                     	;# 
  1657  019A                     	;# 
  1658  019B                     	;# 
  1659  019B                     	;# 
  1660  019C                     	;# 
  1661  019D                     	;# 
  1662  019E                     	;# 
  1663  019F                     	;# 
  1664  020C                     	;# 
  1665  020D                     	;# 
  1666  020E                     	;# 
  1667  0211                     	;# 
  1668  0211                     	;# 
  1669  0212                     	;# 
  1670  0212                     	;# 
  1671  0213                     	;# 
  1672  0213                     	;# 
  1673  0214                     	;# 
  1674  0214                     	;# 
  1675  0215                     	;# 
  1676  0215                     	;# 
  1677  0215                     	;# 
  1678  0216                     	;# 
  1679  0216                     	;# 
  1680  0217                     	;# 
  1681  0217                     	;# 
  1682  0219                     	;# 
  1683  021A                     	;# 
  1684  021B                     	;# 
  1685  021C                     	;# 
  1686  021D                     	;# 
  1687  021E                     	;# 
  1688  021F                     	;# 
  1689  0291                     	;# 
  1690  0291                     	;# 
  1691  0292                     	;# 
  1692  0293                     	;# 
  1693  0294                     	;# 
  1694  0295                     	;# 
  1695  0295                     	;# 
  1696  0296                     	;# 
  1697  0298                     	;# 
  1698  0298                     	;# 
  1699  0299                     	;# 
  1700  029A                     	;# 
  1701  029B                     	;# 
  1702  029C                     	;# 
  1703  029D                     	;# 
  1704  029E                     	;# 
  1705  0311                     	;# 
  1706  0311                     	;# 
  1707  0312                     	;# 
  1708  0313                     	;# 
  1709  0318                     	;# 
  1710  0318                     	;# 
  1711  0319                     	;# 
  1712  031A                     	;# 
  1713  038C                     	;# 
  1714  038D                     	;# 
  1715  038E                     	;# 
  1716  0391                     	;# 
  1717  0392                     	;# 
  1718  0393                     	;# 
  1719  0394                     	;# 
  1720  0395                     	;# 
  1721  0396                     	;# 
  1722  039A                     	;# 
  1723  039C                     	;# 
  1724  039D                     	;# 
  1725  039E                     	;# 
  1726  039F                     	;# 
  1727  0415                     	;# 
  1728  0416                     	;# 
  1729  0417                     	;# 
  1730  041C                     	;# 
  1731  041D                     	;# 
  1732  041E                     	;# 
  1733  0FE4                     	;# 
  1734  0FE5                     	;# 
  1735  0FE6                     	;# 
  1736  0FE7                     	;# 
  1737  0FE8                     	;# 
  1738  0FE9                     	;# 
  1739  0FEA                     	;# 
  1740  0FEB                     	;# 
  1741  0FED                     	;# 
  1742  0FEE                     	;# 
  1743  0FEF                     	;# 
  1744  0000                     	;# 
  1745  0001                     	;# 
  1746  0002                     	;# 
  1747  0003                     	;# 
  1748  0004                     	;# 
  1749  0005                     	;# 
  1750  0006                     	;# 
  1751  0007                     	;# 
  1752  0008                     	;# 
  1753  0009                     	;# 
  1754  000A                     	;# 
  1755  000B                     	;# 
  1756  000C                     	;# 
  1757  000D                     	;# 
  1758  000E                     	;# 
  1759  0011                     	;# 
  1760  0012                     	;# 
  1761  0013                     	;# 
  1762  0014                     	;# 
  1763  0015                     	;# 
  1764  0016                     	;# 
  1765  0016                     	;# 
  1766  0017                     	;# 
  1767  0018                     	;# 
  1768  0019                     	;# 
  1769  001A                     	;# 
  1770  001B                     	;# 
  1771  001C                     	;# 
  1772  001E                     	;# 
  1773  001F                     	;# 
  1774  008C                     	;# 
  1775  008D                     	;# 
  1776  008E                     	;# 
  1777  0091                     	;# 
  1778  0092                     	;# 
  1779  0093                     	;# 
  1780  0094                     	;# 
  1781  0095                     	;# 
  1782  0096                     	;# 
  1783  0097                     	;# 
  1784  0098                     	;# 
  1785  0099                     	;# 
  1786  009A                     	;# 
  1787  009B                     	;# 
  1788  009B                     	;# 
  1789  009C                     	;# 
  1790  009D                     	;# 
  1791  009E                     	;# 
  1792  010C                     	;# 
  1793  010D                     	;# 
  1794  010E                     	;# 
  1795  0111                     	;# 
  1796  0112                     	;# 
  1797  0113                     	;# 
  1798  0114                     	;# 
  1799  0115                     	;# 
  1800  0116                     	;# 
  1801  0117                     	;# 
  1802  0118                     	;# 
  1803  0119                     	;# 
  1804  011A                     	;# 
  1805  011B                     	;# 
  1806  011D                     	;# 
  1807  011E                     	;# 
  1808  018C                     	;# 
  1809  018D                     	;# 
  1810  018E                     	;# 
  1811  0191                     	;# 
  1812  0191                     	;# 
  1813  0192                     	;# 
  1814  0193                     	;# 
  1815  0193                     	;# 
  1816  0193                     	;# 
  1817  0194                     	;# 
  1818  0195                     	;# 
  1819  0196                     	;# 
  1820  0199                     	;# 
  1821  019A                     	;# 
  1822  019B                     	;# 
  1823  019B                     	;# 
  1824  019C                     	;# 
  1825  019D                     	;# 
  1826  019E                     	;# 
  1827  019F                     	;# 
  1828  020C                     	;# 
  1829  020D                     	;# 
  1830  020E                     	;# 
  1831  0211                     	;# 
  1832  0211                     	;# 
  1833  0212                     	;# 
  1834  0212                     	;# 
  1835  0213                     	;# 
  1836  0213                     	;# 
  1837  0214                     	;# 
  1838  0214                     	;# 
  1839  0215                     	;# 
  1840  0215                     	;# 
  1841  0215                     	;# 
  1842  0216                     	;# 
  1843  0216                     	;# 
  1844  0217                     	;# 
  1845  0217                     	;# 
  1846  0219                     	;# 
  1847  021A                     	;# 
  1848  021B                     	;# 
  1849  021C                     	;# 
  1850  021D                     	;# 
  1851  021E                     	;# 
  1852  021F                     	;# 
  1853  0291                     	;# 
  1854  0291                     	;# 
  1855  0292                     	;# 
  1856  0293                     	;# 
  1857  0294                     	;# 
  1858  0295                     	;# 
  1859  0295                     	;# 
  1860  0296                     	;# 
  1861  0298                     	;# 
  1862  0298                     	;# 
  1863  0299                     	;# 
  1864  029A                     	;# 
  1865  029B                     	;# 
  1866  029C                     	;# 
  1867  029D                     	;# 
  1868  029E                     	;# 
  1869  0311                     	;# 
  1870  0311                     	;# 
  1871  0312                     	;# 
  1872  0313                     	;# 
  1873  0318                     	;# 
  1874  0318                     	;# 
  1875  0319                     	;# 
  1876  031A                     	;# 
  1877  038C                     	;# 
  1878  038D                     	;# 
  1879  038E                     	;# 
  1880  0391                     	;# 
  1881  0392                     	;# 
  1882  0393                     	;# 
  1883  0394                     	;# 
  1884  0395                     	;# 
  1885  0396                     	;# 
  1886  039A                     	;# 
  1887  039C                     	;# 
  1888  039D                     	;# 
  1889  039E                     	;# 
  1890  039F                     	;# 
  1891  0415                     	;# 
  1892  0416                     	;# 
  1893  0417                     	;# 
  1894  041C                     	;# 
  1895  041D                     	;# 
  1896  041E                     	;# 
  1897  0FE4                     	;# 
  1898  0FE5                     	;# 
  1899  0FE6                     	;# 
  1900  0FE7                     	;# 
  1901  0FE8                     	;# 
  1902  0FE9                     	;# 
  1903  0FEA                     	;# 
  1904  0FEB                     	;# 
  1905  0FED                     	;# 
  1906  0FEE                     	;# 
  1907  0FEF                     	;# 
  1908  0000                     	;# 
  1909  0001                     	;# 
  1910  0002                     	;# 
  1911  0003                     	;# 
  1912  0004                     	;# 
  1913  0005                     	;# 
  1914  0006                     	;# 
  1915  0007                     	;# 
  1916  0008                     	;# 
  1917  0009                     	;# 
  1918  000A                     	;# 
  1919  000B                     	;# 
  1920  000C                     	;# 
  1921  000D                     	;# 
  1922  000E                     	;# 
  1923  0011                     	;# 
  1924  0012                     	;# 
  1925  0013                     	;# 
  1926  0014                     	;# 
  1927  0015                     	;# 
  1928  0016                     	;# 
  1929  0016                     	;# 
  1930  0017                     	;# 
  1931  0018                     	;# 
  1932  0019                     	;# 
  1933  001A                     	;# 
  1934  001B                     	;# 
  1935  001C                     	;# 
  1936  001E                     	;# 
  1937  001F                     	;# 
  1938  008C                     	;# 
  1939  008D                     	;# 
  1940  008E                     	;# 
  1941  0091                     	;# 
  1942  0092                     	;# 
  1943  0093                     	;# 
  1944  0094                     	;# 
  1945  0095                     	;# 
  1946  0096                     	;# 
  1947  0097                     	;# 
  1948  0098                     	;# 
  1949  0099                     	;# 
  1950  009A                     	;# 
  1951  009B                     	;# 
  1952  009B                     	;# 
  1953  009C                     	;# 
  1954  009D                     	;# 
  1955  009E                     	;# 
  1956  010C                     	;# 
  1957  010D                     	;# 
  1958  010E                     	;# 
  1959  0111                     	;# 
  1960  0112                     	;# 
  1961  0113                     	;# 
  1962  0114                     	;# 
  1963  0115                     	;# 
  1964  0116                     	;# 
  1965  0117                     	;# 
  1966  0118                     	;# 
  1967  0119                     	;# 
  1968  011A                     	;# 
  1969  011B                     	;# 
  1970  011D                     	;# 
  1971  011E                     	;# 
  1972  018C                     	;# 
  1973  018D                     	;# 
  1974  018E                     	;# 
  1975  0191                     	;# 
  1976  0191                     	;# 
  1977  0192                     	;# 
  1978  0193                     	;# 
  1979  0193                     	;# 
  1980  0193                     	;# 
  1981  0194                     	;# 
  1982  0195                     	;# 
  1983  0196                     	;# 
  1984  0199                     	;# 
  1985  019A                     	;# 
  1986  019B                     	;# 
  1987  019B                     	;# 
  1988  019C                     	;# 
  1989  019D                     	;# 
  1990  019E                     	;# 
  1991  019F                     	;# 
  1992  020C                     	;# 
  1993  020D                     	;# 
  1994  020E                     	;# 
  1995  0211                     	;# 
  1996  0211                     	;# 
  1997  0212                     	;# 
  1998  0212                     	;# 
  1999  0213                     	;# 
  2000  0213                     	;# 
  2001  0214                     	;# 
  2002  0214                     	;# 
  2003  0215                     	;# 
  2004  0215                     	;# 
  2005  0215                     	;# 
  2006  0216                     	;# 
  2007  0216                     	;# 
  2008  0217                     	;# 
  2009  0217                     	;# 
  2010  0219                     	;# 
  2011  021A                     	;# 
  2012  021B                     	;# 
  2013  021C                     	;# 
  2014  021D                     	;# 
  2015  021E                     	;# 
  2016  021F                     	;# 
  2017  0291                     	;# 
  2018  0291                     	;# 
  2019  0292                     	;# 
  2020  0293                     	;# 
  2021  0294                     	;# 
  2022  0295                     	;# 
  2023  0295                     	;# 
  2024  0296                     	;# 
  2025  0298                     	;# 
  2026  0298                     	;# 
  2027  0299                     	;# 
  2028  029A                     	;# 
  2029  029B                     	;# 
  2030  029C                     	;# 
  2031  029D                     	;# 
  2032  029E                     	;# 
  2033  0311                     	;# 
  2034  0311                     	;# 
  2035  0312                     	;# 
  2036  0313                     	;# 
  2037  0318                     	;# 
  2038  0318                     	;# 
  2039  0319                     	;# 
  2040  031A                     	;# 
  2041  038C                     	;# 
  2042  038D                     	;# 
  2043  038E                     	;# 
  2044  0391                     	;# 
  2045  0392                     	;# 
  2046  0393                     	;# 
  2047  0394                     	;# 
  2048  0395                     	;# 
  2049  0396                     	;# 
  2050  039A                     	;# 
  2051  039C                     	;# 
  2052  039D                     	;# 
  2053  039E                     	;# 
  2054  039F                     	;# 
  2055  0415                     	;# 
  2056  0416                     	;# 
  2057  0417                     	;# 
  2058  041C                     	;# 
  2059  041D                     	;# 
  2060  041E                     	;# 
  2061  0FE4                     	;# 
  2062  0FE5                     	;# 
  2063  0FE6                     	;# 
  2064  0FE7                     	;# 
  2065  0FE8                     	;# 
  2066  0FE9                     	;# 
  2067  0FEA                     	;# 
  2068  0FEB                     	;# 
  2069  0FED                     	;# 
  2070  0FEE                     	;# 
  2071  0FEF                     	;# 
  2072  0000                     	;# 
  2073  0001                     	;# 
  2074  0002                     	;# 
  2075  0003                     	;# 
  2076  0004                     	;# 
  2077  0005                     	;# 
  2078  0006                     	;# 
  2079  0007                     	;# 
  2080  0008                     	;# 
  2081  0009                     	;# 
  2082  000A                     	;# 
  2083  000B                     	;# 
  2084  000C                     	;# 
  2085  000D                     	;# 
  2086  000E                     	;# 
  2087  0011                     	;# 
  2088  0012                     	;# 
  2089  0013                     	;# 
  2090  0014                     	;# 
  2091  0015                     	;# 
  2092  0016                     	;# 
  2093  0016                     	;# 
  2094  0017                     	;# 
  2095  0018                     	;# 
  2096  0019                     	;# 
  2097  001A                     	;# 
  2098  001B                     	;# 
  2099  001C                     	;# 
  2100  001E                     	;# 
  2101  001F                     	;# 
  2102  008C                     	;# 
  2103  008D                     	;# 
  2104  008E                     	;# 
  2105  0091                     	;# 
  2106  0092                     	;# 
  2107  0093                     	;# 
  2108  0094                     	;# 
  2109  0095                     	;# 
  2110  0096                     	;# 
  2111  0097                     	;# 
  2112  0098                     	;# 
  2113  0099                     	;# 
  2114  009A                     	;# 
  2115  009B                     	;# 
  2116  009B                     	;# 
  2117  009C                     	;# 
  2118  009D                     	;# 
  2119  009E                     	;# 
  2120  010C                     	;# 
  2121  010D                     	;# 
  2122  010E                     	;# 
  2123  0111                     	;# 
  2124  0112                     	;# 
  2125  0113                     	;# 
  2126  0114                     	;# 
  2127  0115                     	;# 
  2128  0116                     	;# 
  2129  0117                     	;# 
  2130  0118                     	;# 
  2131  0119                     	;# 
  2132  011A                     	;# 
  2133  011B                     	;# 
  2134  011D                     	;# 
  2135  011E                     	;# 
  2136  018C                     	;# 
  2137  018D                     	;# 
  2138  018E                     	;# 
  2139  0191                     	;# 
  2140  0191                     	;# 
  2141  0192                     	;# 
  2142  0193                     	;# 
  2143  0193                     	;# 
  2144  0193                     	;# 
  2145  0194                     	;# 
  2146  0195                     	;# 
  2147  0196                     	;# 
  2148  0199                     	;# 
  2149  019A                     	;# 
  2150  019B                     	;# 
  2151  019B                     	;# 
  2152  019C                     	;# 
  2153  019D                     	;# 
  2154  019E                     	;# 
  2155  019F                     	;# 
  2156  020C                     	;# 
  2157  020D                     	;# 
  2158  020E                     	;# 
  2159  0211                     	;# 
  2160  0211                     	;# 
  2161  0212                     	;# 
  2162  0212                     	;# 
  2163  0213                     	;# 
  2164  0213                     	;# 
  2165  0214                     	;# 
  2166  0214                     	;# 
  2167  0215                     	;# 
  2168  0215                     	;# 
  2169  0215                     	;# 
  2170  0216                     	;# 
  2171  0216                     	;# 
  2172  0217                     	;# 
  2173  0217                     	;# 
  2174  0219                     	;# 
  2175  021A                     	;# 
  2176  021B                     	;# 
  2177  021C                     	;# 
  2178  021D                     	;# 
  2179  021E                     	;# 
  2180  021F                     	;# 
  2181  0291                     	;# 
  2182  0291                     	;# 
  2183  0292                     	;# 
  2184  0293                     	;# 
  2185  0294                     	;# 
  2186  0295                     	;# 
  2187  0295                     	;# 
  2188  0296                     	;# 
  2189  0298                     	;# 
  2190  0298                     	;# 
  2191  0299                     	;# 
  2192  029A                     	;# 
  2193  029B                     	;# 
  2194  029C                     	;# 
  2195  029D                     	;# 
  2196  029E                     	;# 
  2197  0311                     	;# 
  2198  0311                     	;# 
  2199  0312                     	;# 
  2200  0313                     	;# 
  2201  0318                     	;# 
  2202  0318                     	;# 
  2203  0319                     	;# 
  2204  031A                     	;# 
  2205  038C                     	;# 
  2206  038D                     	;# 
  2207  038E                     	;# 
  2208  0391                     	;# 
  2209  0392                     	;# 
  2210  0393                     	;# 
  2211  0394                     	;# 
  2212  0395                     	;# 
  2213  0396                     	;# 
  2214  039A                     	;# 
  2215  039C                     	;# 
  2216  039D                     	;# 
  2217  039E                     	;# 
  2218  039F                     	;# 
  2219  0415                     	;# 
  2220  0416                     	;# 
  2221  0417                     	;# 
  2222  041C                     	;# 
  2223  041D                     	;# 
  2224  041E                     	;# 
  2225  0FE4                     	;# 
  2226  0FE5                     	;# 
  2227  0FE6                     	;# 
  2228  0FE7                     	;# 
  2229  0FE8                     	;# 
  2230  0FE9                     	;# 
  2231  0FEA                     	;# 
  2232  0FEB                     	;# 
  2233  0FED                     	;# 
  2234  0FEE                     	;# 
  2235  0FEF                     	;# 
  2236  0000                     	;# 
  2237  0001                     	;# 
  2238  0002                     	;# 
  2239  0003                     	;# 
  2240  0004                     	;# 
  2241  0005                     	;# 
  2242  0006                     	;# 
  2243  0007                     	;# 
  2244  0008                     	;# 
  2245  0009                     	;# 
  2246  000A                     	;# 
  2247  000B                     	;# 
  2248  000C                     	;# 
  2249  000D                     	;# 
  2250  000E                     	;# 
  2251  0011                     	;# 
  2252  0012                     	;# 
  2253  0013                     	;# 
  2254  0014                     	;# 
  2255  0015                     	;# 
  2256  0016                     	;# 
  2257  0016                     	;# 
  2258  0017                     	;# 
  2259  0018                     	;# 
  2260  0019                     	;# 
  2261  001A                     	;# 
  2262  001B                     	;# 
  2263  001C                     	;# 
  2264  001E                     	;# 
  2265  001F                     	;# 
  2266  008C                     	;# 
  2267  008D                     	;# 
  2268  008E                     	;# 
  2269  0091                     	;# 
  2270  0092                     	;# 
  2271  0093                     	;# 
  2272  0094                     	;# 
  2273  0095                     	;# 
  2274  0096                     	;# 
  2275  0097                     	;# 
  2276  0098                     	;# 
  2277  0099                     	;# 
  2278  009A                     	;# 
  2279  009B                     	;# 
  2280  009B                     	;# 
  2281  009C                     	;# 
  2282  009D                     	;# 
  2283  009E                     	;# 
  2284  010C                     	;# 
  2285  010D                     	;# 
  2286  010E                     	;# 
  2287  0111                     	;# 
  2288  0112                     	;# 
  2289  0113                     	;# 
  2290  0114                     	;# 
  2291  0115                     	;# 
  2292  0116                     	;# 
  2293  0117                     	;# 
  2294  0118                     	;# 
  2295  0119                     	;# 
  2296  011A                     	;# 
  2297  011B                     	;# 
  2298  011D                     	;# 
  2299  011E                     	;# 
  2300  018C                     	;# 
  2301  018D                     	;# 
  2302  018E                     	;# 
  2303  0191                     	;# 
  2304  0191                     	;# 
  2305  0192                     	;# 
  2306  0193                     	;# 
  2307  0193                     	;# 
  2308  0193                     	;# 
  2309  0194                     	;# 
  2310  0195                     	;# 
  2311  0196                     	;# 
  2312  0199                     	;# 
  2313  019A                     	;# 
  2314  019B                     	;# 
  2315  019B                     	;# 
  2316  019C                     	;# 
  2317  019D                     	;# 
  2318  019E                     	;# 
  2319  019F                     	;# 
  2320  020C                     	;# 
  2321  020D                     	;# 
  2322  020E                     	;# 
  2323  0211                     	;# 
  2324  0211                     	;# 
  2325  0212                     	;# 
  2326  0212                     	;# 
  2327  0213                     	;# 
  2328  0213                     	;# 
  2329  0214                     	;# 
  2330  0214                     	;# 
  2331  0215                     	;# 
  2332  0215                     	;# 
  2333  0215                     	;# 
  2334  0216                     	;# 
  2335  0216                     	;# 
  2336  0217                     	;# 
  2337  0217                     	;# 
  2338  0219                     	;# 
  2339  021A                     	;# 
  2340  021B                     	;# 
  2341  021C                     	;# 
  2342  021D                     	;# 
  2343  021E                     	;# 
  2344  021F                     	;# 
  2345  0291                     	;# 
  2346  0291                     	;# 
  2347  0292                     	;# 
  2348  0293                     	;# 
  2349  0294                     	;# 
  2350  0295                     	;# 
  2351  0295                     	;# 
  2352  0296                     	;# 
  2353  0298                     	;# 
  2354  0298                     	;# 
  2355  0299                     	;# 
  2356  029A                     	;# 
  2357  029B                     	;# 
  2358  029C                     	;# 
  2359  029D                     	;# 
  2360  029E                     	;# 
  2361  0311                     	;# 
  2362  0311                     	;# 
  2363  0312                     	;# 
  2364  0313                     	;# 
  2365  0318                     	;# 
  2366  0318                     	;# 
  2367  0319                     	;# 
  2368  031A                     	;# 
  2369  038C                     	;# 
  2370  038D                     	;# 
  2371  038E                     	;# 
  2372  0391                     	;# 
  2373  0392                     	;# 
  2374  0393                     	;# 
  2375  0394                     	;# 
  2376  0395                     	;# 
  2377  0396                     	;# 
  2378  039A                     	;# 
  2379  039C                     	;# 
  2380  039D                     	;# 
  2381  039E                     	;# 
  2382  039F                     	;# 
  2383  0415                     	;# 
  2384  0416                     	;# 
  2385  0417                     	;# 
  2386  041C                     	;# 
  2387  041D                     	;# 
  2388  041E                     	;# 
  2389  0FE4                     	;# 
  2390  0FE5                     	;# 
  2391  0FE6                     	;# 
  2392  0FE7                     	;# 
  2393  0FE8                     	;# 
  2394  0FE9                     	;# 
  2395  0FEA                     	;# 
  2396  0FEB                     	;# 
  2397  0FED                     	;# 
  2398  0FEE                     	;# 
  2399  0FEF                     	;# 
  2400  0000                     	;# 
  2401  0001                     	;# 
  2402  0002                     	;# 
  2403  0003                     	;# 
  2404  0004                     	;# 
  2405  0005                     	;# 
  2406  0006                     	;# 
  2407  0007                     	;# 
  2408  0008                     	;# 
  2409  0009                     	;# 
  2410  000A                     	;# 
  2411  000B                     	;# 
  2412  000C                     	;# 
  2413  000D                     	;# 
  2414  000E                     	;# 
  2415  0011                     	;# 
  2416  0012                     	;# 
  2417  0013                     	;# 
  2418  0014                     	;# 
  2419  0015                     	;# 
  2420  0016                     	;# 
  2421  0016                     	;# 
  2422  0017                     	;# 
  2423  0018                     	;# 
  2424  0019                     	;# 
  2425  001A                     	;# 
  2426  001B                     	;# 
  2427  001C                     	;# 
  2428  001E                     	;# 
  2429  001F                     	;# 
  2430  008C                     	;# 
  2431  008D                     	;# 
  2432  008E                     	;# 
  2433  0091                     	;# 
  2434  0092                     	;# 
  2435  0093                     	;# 
  2436  0094                     	;# 
  2437  0095                     	;# 
  2438  0096                     	;# 
  2439  0097                     	;# 
  2440  0098                     	;# 
  2441  0099                     	;# 
  2442  009A                     	;# 
  2443  009B                     	;# 
  2444  009B                     	;# 
  2445  009C                     	;# 
  2446  009D                     	;# 
  2447  009E                     	;# 
  2448  010C                     	;# 
  2449  010D                     	;# 
  2450  010E                     	;# 
  2451  0111                     	;# 
  2452  0112                     	;# 
  2453  0113                     	;# 
  2454  0114                     	;# 
  2455  0115                     	;# 
  2456  0116                     	;# 
  2457  0117                     	;# 
  2458  0118                     	;# 
  2459  0119                     	;# 
  2460  011A                     	;# 
  2461  011B                     	;# 
  2462  011D                     	;# 
  2463  011E                     	;# 
  2464  018C                     	;# 
  2465  018D                     	;# 
  2466  018E                     	;# 
  2467  0191                     	;# 
  2468  0191                     	;# 
  2469  0192                     	;# 
  2470  0193                     	;# 
  2471  0193                     	;# 
  2472  0193                     	;# 
  2473  0194                     	;# 
  2474  0195                     	;# 
  2475  0196                     	;# 
  2476  0199                     	;# 
  2477  019A                     	;# 
  2478  019B                     	;# 
  2479  019B                     	;# 
  2480  019C                     	;# 
  2481  019D                     	;# 
  2482  019E                     	;# 
  2483  019F                     	;# 
  2484  020C                     	;# 
  2485  020D                     	;# 
  2486  020E                     	;# 
  2487  0211                     	;# 
  2488  0211                     	;# 
  2489  0212                     	;# 
  2490  0212                     	;# 
  2491  0213                     	;# 
  2492  0213                     	;# 
  2493  0214                     	;# 
  2494  0214                     	;# 
  2495  0215                     	;# 
  2496  0215                     	;# 
  2497  0215                     	;# 
  2498  0216                     	;# 
  2499  0216                     	;# 
  2500  0217                     	;# 
  2501  0217                     	;# 
  2502  0219                     	;# 
  2503  021A                     	;# 
  2504  021B                     	;# 
  2505  021C                     	;# 
  2506  021D                     	;# 
  2507  021E                     	;# 
  2508  021F                     	;# 
  2509  0291                     	;# 
  2510  0291                     	;# 
  2511  0292                     	;# 
  2512  0293                     	;# 
  2513  0294                     	;# 
  2514  0295                     	;# 
  2515  0295                     	;# 
  2516  0296                     	;# 
  2517  0298                     	;# 
  2518  0298                     	;# 
  2519  0299                     	;# 
  2520  029A                     	;# 
  2521  029B                     	;# 
  2522  029C                     	;# 
  2523  029D                     	;# 
  2524  029E                     	;# 
  2525  0311                     	;# 
  2526  0311                     	;# 
  2527  0312                     	;# 
  2528  0313                     	;# 
  2529  0318                     	;# 
  2530  0318                     	;# 
  2531  0319                     	;# 
  2532  031A                     	;# 
  2533  038C                     	;# 
  2534  038D                     	;# 
  2535  038E                     	;# 
  2536  0391                     	;# 
  2537  0392                     	;# 
  2538  0393                     	;# 
  2539  0394                     	;# 
  2540  0395                     	;# 
  2541  0396                     	;# 
  2542  039A                     	;# 
  2543  039C                     	;# 
  2544  039D                     	;# 
  2545  039E                     	;# 
  2546  039F                     	;# 
  2547  0415                     	;# 
  2548  0416                     	;# 
  2549  0417                     	;# 
  2550  041C                     	;# 
  2551  041D                     	;# 
  2552  041E                     	;# 
  2553  0FE4                     	;# 
  2554  0FE5                     	;# 
  2555  0FE6                     	;# 
  2556  0FE7                     	;# 
  2557  0FE8                     	;# 
  2558  0FE9                     	;# 
  2559  0FEA                     	;# 
  2560  0FEB                     	;# 
  2561  0FED                     	;# 
  2562  0FEE                     	;# 
  2563  0FEF                     	;# 
  2564  0000                     	;# 
  2565  0001                     	;# 
  2566  0002                     	;# 
  2567  0003                     	;# 
  2568  0004                     	;# 
  2569  0005                     	;# 
  2570  0006                     	;# 
  2571  0007                     	;# 
  2572  0008                     	;# 
  2573  0009                     	;# 
  2574  000A                     	;# 
  2575  000B                     	;# 
  2576  000C                     	;# 
  2577  000D                     	;# 
  2578  000E                     	;# 
  2579  0011                     	;# 
  2580  0012                     	;# 
  2581  0013                     	;# 
  2582  0014                     	;# 
  2583  0015                     	;# 
  2584  0016                     	;# 
  2585  0016                     	;# 
  2586  0017                     	;# 
  2587  0018                     	;# 
  2588  0019                     	;# 
  2589  001A                     	;# 
  2590  001B                     	;# 
  2591  001C                     	;# 
  2592  001E                     	;# 
  2593  001F                     	;# 
  2594  008C                     	;# 
  2595  008D                     	;# 
  2596  008E                     	;# 
  2597  0091                     	;# 
  2598  0092                     	;# 
  2599  0093                     	;# 
  2600  0094                     	;# 
  2601  0095                     	;# 
  2602  0096                     	;# 
  2603  0097                     	;# 
  2604  0098                     	;# 
  2605  0099                     	;# 
  2606  009A                     	;# 
  2607  009B                     	;# 
  2608  009B                     	;# 
  2609  009C                     	;# 
  2610  009D                     	;# 
  2611  009E                     	;# 
  2612  010C                     	;# 
  2613  010D                     	;# 
  2614  010E                     	;# 
  2615  0111                     	;# 
  2616  0112                     	;# 
  2617  0113                     	;# 
  2618  0114                     	;# 
  2619  0115                     	;# 
  2620  0116                     	;# 
  2621  0117                     	;# 
  2622  0118                     	;# 
  2623  0119                     	;# 
  2624  011A                     	;# 
  2625  011B                     	;# 
  2626  011D                     	;# 
  2627  011E                     	;# 
  2628  018C                     	;# 
  2629  018D                     	;# 
  2630  018E                     	;# 
  2631  0191                     	;# 
  2632  0191                     	;# 
  2633  0192                     	;# 
  2634  0193                     	;# 
  2635  0193                     	;# 
  2636  0193                     	;# 
  2637  0194                     	;# 
  2638  0195                     	;# 
  2639  0196                     	;# 
  2640  0199                     	;# 
  2641  019A                     	;# 
  2642  019B                     	;# 
  2643  019B                     	;# 
  2644  019C                     	;# 
  2645  019D                     	;# 
  2646  019E                     	;# 
  2647  019F                     	;# 
  2648  020C                     	;# 
  2649  020D                     	;# 
  2650  020E                     	;# 
  2651  0211                     	;# 
  2652  0211                     	;# 
  2653  0212                     	;# 
  2654  0212                     	;# 
  2655  0213                     	;# 
  2656  0213                     	;# 
  2657  0214                     	;# 
  2658  0214                     	;# 
  2659  0215                     	;# 
  2660  0215                     	;# 
  2661  0215                     	;# 
  2662  0216                     	;# 
  2663  0216                     	;# 
  2664  0217                     	;# 
  2665  0217                     	;# 
  2666  0219                     	;# 
  2667  021A                     	;# 
  2668  021B                     	;# 
  2669  021C                     	;# 
  2670  021D                     	;# 
  2671  021E                     	;# 
  2672  021F                     	;# 
  2673  0291                     	;# 
  2674  0291                     	;# 
  2675  0292                     	;# 
  2676  0293                     	;# 
  2677  0294                     	;# 
  2678  0295                     	;# 
  2679  0295                     	;# 
  2680  0296                     	;# 
  2681  0298                     	;# 
  2682  0298                     	;# 
  2683  0299                     	;# 
  2684  029A                     	;# 
  2685  029B                     	;# 
  2686  029C                     	;# 
  2687  029D                     	;# 
  2688  029E                     	;# 
  2689  0311                     	;# 
  2690  0311                     	;# 
  2691  0312                     	;# 
  2692  0313                     	;# 
  2693  0318                     	;# 
  2694  0318                     	;# 
  2695  0319                     	;# 
  2696  031A                     	;# 
  2697  038C                     	;# 
  2698  038D                     	;# 
  2699  038E                     	;# 
  2700  0391                     	;# 
  2701  0392                     	;# 
  2702  0393                     	;# 
  2703  0394                     	;# 
  2704  0395                     	;# 
  2705  0396                     	;# 
  2706  039A                     	;# 
  2707  039C                     	;# 
  2708  039D                     	;# 
  2709  039E                     	;# 
  2710  039F                     	;# 
  2711  0415                     	;# 
  2712  0416                     	;# 
  2713  0417                     	;# 
  2714  041C                     	;# 
  2715  041D                     	;# 
  2716  041E                     	;# 
  2717  0FE4                     	;# 
  2718  0FE5                     	;# 
  2719  0FE6                     	;# 
  2720  0FE7                     	;# 
  2721  0FE8                     	;# 
  2722  0FE9                     	;# 
  2723  0FEA                     	;# 
  2724  0FEB                     	;# 
  2725  0FED                     	;# 
  2726  0FEE                     	;# 
  2727  0FEF                     	;# 
  2728  0000                     	;# 
  2729  0001                     	;# 
  2730  0002                     	;# 
  2731  0003                     	;# 
  2732  0004                     	;# 
  2733  0005                     	;# 
  2734  0006                     	;# 
  2735  0007                     	;# 
  2736  0008                     	;# 
  2737  0009                     	;# 
  2738  000A                     	;# 
  2739  000B                     	;# 
  2740  000C                     	;# 
  2741  000D                     	;# 
  2742  000E                     	;# 
  2743  0011                     	;# 
  2744  0012                     	;# 
  2745  0013                     	;# 
  2746  0014                     	;# 
  2747  0015                     	;# 
  2748  0016                     	;# 
  2749  0016                     	;# 
  2750  0017                     	;# 
  2751  0018                     	;# 
  2752  0019                     	;# 
  2753  001A                     	;# 
  2754  001B                     	;# 
  2755  001C                     	;# 
  2756  001E                     	;# 
  2757  001F                     	;# 
  2758  008C                     	;# 
  2759  008D                     	;# 
  2760  008E                     	;# 
  2761  0091                     	;# 
  2762  0092                     	;# 
  2763  0093                     	;# 
  2764  0094                     	;# 
  2765  0095                     	;# 
  2766  0096                     	;# 
  2767  0097                     	;# 
  2768  0098                     	;# 
  2769  0099                     	;# 
  2770  009A                     	;# 
  2771  009B                     	;# 
  2772  009B                     	;# 
  2773  009C                     	;# 
  2774  009D                     	;# 
  2775  009E                     	;# 
  2776  010C                     	;# 
  2777  010D                     	;# 
  2778  010E                     	;# 
  2779  0111                     	;# 
  2780  0112                     	;# 
  2781  0113                     	;# 
  2782  0114                     	;# 
  2783  0115                     	;# 
  2784  0116                     	;# 
  2785  0117                     	;# 
  2786  0118                     	;# 
  2787  0119                     	;# 
  2788  011A                     	;# 
  2789  011B                     	;# 
  2790  011D                     	;# 
  2791  011E                     	;# 
  2792  018C                     	;# 
  2793  018D                     	;# 
  2794  018E                     	;# 
  2795  0191                     	;# 
  2796  0191                     	;# 
  2797  0192                     	;# 
  2798  0193                     	;# 
  2799  0193                     	;# 
  2800  0193                     	;# 
  2801  0194                     	;# 
  2802  0195                     	;# 
  2803  0196                     	;# 
  2804  0199                     	;# 
  2805  019A                     	;# 
  2806  019B                     	;# 
  2807  019B                     	;# 
  2808  019C                     	;# 
  2809  019D                     	;# 
  2810  019E                     	;# 
  2811  019F                     	;# 
  2812  020C                     	;# 
  2813  020D                     	;# 
  2814  020E                     	;# 
  2815  0211                     	;# 
  2816  0211                     	;# 
  2817  0212                     	;# 
  2818  0212                     	;# 
  2819  0213                     	;# 
  2820  0213                     	;# 
  2821  0214                     	;# 
  2822  0214                     	;# 
  2823  0215                     	;# 
  2824  0215                     	;# 
  2825  0215                     	;# 
  2826  0216                     	;# 
  2827  0216                     	;# 
  2828  0217                     	;# 
  2829  0217                     	;# 
  2830  0219                     	;# 
  2831  021A                     	;# 
  2832  021B                     	;# 
  2833  021C                     	;# 
  2834  021D                     	;# 
  2835  021E                     	;# 
  2836  021F                     	;# 
  2837  0291                     	;# 
  2838  0291                     	;# 
  2839  0292                     	;# 
  2840  0293                     	;# 
  2841  0294                     	;# 
  2842  0295                     	;# 
  2843  0295                     	;# 
  2844  0296                     	;# 
  2845  0298                     	;# 
  2846  0298                     	;# 
  2847  0299                     	;# 
  2848  029A                     	;# 
  2849  029B                     	;# 
  2850  029C                     	;# 
  2851  029D                     	;# 
  2852  029E                     	;# 
  2853  0311                     	;# 
  2854  0311                     	;# 
  2855  0312                     	;# 
  2856  0313                     	;# 
  2857  0318                     	;# 
  2858  0318                     	;# 
  2859  0319                     	;# 
  2860  031A                     	;# 
  2861  038C                     	;# 
  2862  038D                     	;# 
  2863  038E                     	;# 
  2864  0391                     	;# 
  2865  0392                     	;# 
  2866  0393                     	;# 
  2867  0394                     	;# 
  2868  0395                     	;# 
  2869  0396                     	;# 
  2870  039A                     	;# 
  2871  039C                     	;# 
  2872  039D                     	;# 
  2873  039E                     	;# 
  2874  039F                     	;# 
  2875  0415                     	;# 
  2876  0416                     	;# 
  2877  0417                     	;# 
  2878  041C                     	;# 
  2879  041D                     	;# 
  2880  041E                     	;# 
  2881  0FE4                     	;# 
  2882  0FE5                     	;# 
  2883  0FE6                     	;# 
  2884  0FE7                     	;# 
  2885  0FE8                     	;# 
  2886  0FE9                     	;# 
  2887  0FEA                     	;# 
  2888  0FEB                     	;# 
  2889  0FED                     	;# 
  2890  0FEE                     	;# 
  2891  0FEF                     	;# 
  2892  0000                     	;# 
  2893  0001                     	;# 
  2894  0002                     	;# 
  2895  0003                     	;# 
  2896  0004                     	;# 
  2897  0005                     	;# 
  2898  0006                     	;# 
  2899  0007                     	;# 
  2900  0008                     	;# 
  2901  0009                     	;# 
  2902  000A                     	;# 
  2903  000B                     	;# 
  2904  000C                     	;# 
  2905  000D                     	;# 
  2906  000E                     	;# 
  2907  0011                     	;# 
  2908  0012                     	;# 
  2909  0013                     	;# 
  2910  0014                     	;# 
  2911  0015                     	;# 
  2912  0016                     	;# 
  2913  0016                     	;# 
  2914  0017                     	;# 
  2915  0018                     	;# 
  2916  0019                     	;# 
  2917  001A                     	;# 
  2918  001B                     	;# 
  2919  001C                     	;# 
  2920  001E                     	;# 
  2921  001F                     	;# 
  2922  008C                     	;# 
  2923  008D                     	;# 
  2924  008E                     	;# 
  2925  0091                     	;# 
  2926  0092                     	;# 
  2927  0093                     	;# 
  2928  0094                     	;# 
  2929  0095                     	;# 
  2930  0096                     	;# 
  2931  0097                     	;# 
  2932  0098                     	;# 
  2933  0099                     	;# 
  2934  009A                     	;# 
  2935  009B                     	;# 
  2936  009B                     	;# 
  2937  009C                     	;# 
  2938  009D                     	;# 
  2939  009E                     	;# 
  2940  010C                     	;# 
  2941  010D                     	;# 
  2942  010E                     	;# 
  2943  0111                     	;# 
  2944  0112                     	;# 
  2945  0113                     	;# 
  2946  0114                     	;# 
  2947  0115                     	;# 
  2948  0116                     	;# 
  2949  0117                     	;# 
  2950  0118                     	;# 
  2951  0119                     	;# 
  2952  011A                     	;# 
  2953  011B                     	;# 
  2954  011D                     	;# 
  2955  011E                     	;# 
  2956  018C                     	;# 
  2957  018D                     	;# 
  2958  018E                     	;# 
  2959  0191                     	;# 
  2960  0191                     	;# 
  2961  0192                     	;# 
  2962  0193                     	;# 
  2963  0193                     	;# 
  2964  0193                     	;# 
  2965  0194                     	;# 
  2966  0195                     	;# 
  2967  0196                     	;# 
  2968  0199                     	;# 
  2969  019A                     	;# 
  2970  019B                     	;# 
  2971  019B                     	;# 
  2972  019C                     	;# 
  2973  019D                     	;# 
  2974  019E                     	;# 
  2975  019F                     	;# 
  2976  020C                     	;# 
  2977  020D                     	;# 
  2978  020E                     	;# 
  2979  0211                     	;# 
  2980  0211                     	;# 
  2981  0212                     	;# 
  2982  0212                     	;# 
  2983  0213                     	;# 
  2984  0213                     	;# 
  2985  0214                     	;# 
  2986  0214                     	;# 
  2987  0215                     	;# 
  2988  0215                     	;# 
  2989  0215                     	;# 
  2990  0216                     	;# 
  2991  0216                     	;# 
  2992  0217                     	;# 
  2993  0217                     	;# 
  2994  0219                     	;# 
  2995  021A                     	;# 
  2996  021B                     	;# 
  2997  021C                     	;# 
  2998  021D                     	;# 
  2999  021E                     	;# 
  3000  021F                     	;# 
  3001  0291                     	;# 
  3002  0291                     	;# 
  3003  0292                     	;# 
  3004  0293                     	;# 
  3005  0294                     	;# 
  3006  0295                     	;# 
  3007  0295                     	;# 
  3008  0296                     	;# 
  3009  0298                     	;# 
  3010  0298                     	;# 
  3011  0299                     	;# 
  3012  029A                     	;# 
  3013  029B                     	;# 
  3014  029C                     	;# 
  3015  029D                     	;# 
  3016  029E                     	;# 
  3017  0311                     	;# 
  3018  0311                     	;# 
  3019  0312                     	;# 
  3020  0313                     	;# 
  3021  0318                     	;# 
  3022  0318                     	;# 
  3023  0319                     	;# 
  3024  031A                     	;# 
  3025  038C                     	;# 
  3026  038D                     	;# 
  3027  038E                     	;# 
  3028  0391                     	;# 
  3029  0392                     	;# 
  3030  0393                     	;# 
  3031  0394                     	;# 
  3032  0395                     	;# 
  3033  0396                     	;# 
  3034  039A                     	;# 
  3035  039C                     	;# 
  3036  039D                     	;# 
  3037  039E                     	;# 
  3038  039F                     	;# 
  3039  0415                     	;# 
  3040  0416                     	;# 
  3041  0417                     	;# 
  3042  041C                     	;# 
  3043  041D                     	;# 
  3044  041E                     	;# 
  3045  0FE4                     	;# 
  3046  0FE5                     	;# 
  3047  0FE6                     	;# 
  3048  0FE7                     	;# 
  3049  0FE8                     	;# 
  3050  0FE9                     	;# 
  3051  0FEA                     	;# 
  3052  0FEB                     	;# 
  3053  0FED                     	;# 
  3054  0FEE                     	;# 
  3055  0FEF                     	;# 
  3056  0000                     	;# 
  3057  0001                     	;# 
  3058  0002                     	;# 
  3059  0003                     	;# 
  3060  0004                     	;# 
  3061  0005                     	;# 
  3062  0006                     	;# 
  3063  0007                     	;# 
  3064  0008                     	;# 
  3065  0009                     	;# 
  3066  000A                     	;# 
  3067  000B                     	;# 
  3068  000C                     	;# 
  3069  000D                     	;# 
  3070  000E                     	;# 
  3071  0011                     	;# 
  3072  0012                     	;# 
  3073  0013                     	;# 
  3074  0014                     	;# 
  3075  0015                     	;# 
  3076  0016                     	;# 
  3077  0016                     	;# 
  3078  0017                     	;# 
  3079  0018                     	;# 
  3080  0019                     	;# 
  3081  001A                     	;# 
  3082  001B                     	;# 
  3083  001C                     	;# 
  3084  001E                     	;# 
  3085  001F                     	;# 
  3086  008C                     	;# 
  3087  008D                     	;# 
  3088  008E                     	;# 
  3089  0091                     	;# 
  3090  0092                     	;# 
  3091  0093                     	;# 
  3092  0094                     	;# 
  3093  0095                     	;# 
  3094  0096                     	;# 
  3095  0097                     	;# 
  3096  0098                     	;# 
  3097  0099                     	;# 
  3098  009A                     	;# 
  3099  009B                     	;# 
  3100  009B                     	;# 
  3101  009C                     	;# 
  3102  009D                     	;# 
  3103  009E                     	;# 
  3104  010C                     	;# 
  3105  010D                     	;# 
  3106  010E                     	;# 
  3107  0111                     	;# 
  3108  0112                     	;# 
  3109  0113                     	;# 
  3110  0114                     	;# 
  3111  0115                     	;# 
  3112  0116                     	;# 
  3113  0117                     	;# 
  3114  0118                     	;# 
  3115  0119                     	;# 
  3116  011A                     	;# 
  3117  011B                     	;# 
  3118  011D                     	;# 
  3119  011E                     	;# 
  3120  018C                     	;# 
  3121  018D                     	;# 
  3122  018E                     	;# 
  3123  0191                     	;# 
  3124  0191                     	;# 
  3125  0192                     	;# 
  3126  0193                     	;# 
  3127  0193                     	;# 
  3128  0193                     	;# 
  3129  0194                     	;# 
  3130  0195                     	;# 
  3131  0196                     	;# 
  3132  0199                     	;# 
  3133  019A                     	;# 
  3134  019B                     	;# 
  3135  019B                     	;# 
  3136  019C                     	;# 
  3137  019D                     	;# 
  3138  019E                     	;# 
  3139  019F                     	;# 
  3140  020C                     	;# 
  3141  020D                     	;# 
  3142  020E                     	;# 
  3143  0211                     	;# 
  3144  0211                     	;# 
  3145  0212                     	;# 
  3146  0212                     	;# 
  3147  0213                     	;# 
  3148  0213                     	;# 
  3149  0214                     	;# 
  3150  0214                     	;# 
  3151  0215                     	;# 
  3152  0215                     	;# 
  3153  0215                     	;# 
  3154  0216                     	;# 
  3155  0216                     	;# 
  3156  0217                     	;# 
  3157  0217                     	;# 
  3158  0219                     	;# 
  3159  021A                     	;# 
  3160  021B                     	;# 
  3161  021C                     	;# 
  3162  021D                     	;# 
  3163  021E                     	;# 
  3164  021F                     	;# 
  3165  0291                     	;# 
  3166  0291                     	;# 
  3167  0292                     	;# 
  3168  0293                     	;# 
  3169  0294                     	;# 
  3170  0295                     	;# 
  3171  0295                     	;# 
  3172  0296                     	;# 
  3173  0298                     	;# 
  3174  0298                     	;# 
  3175  0299                     	;# 
  3176  029A                     	;# 
  3177  029B                     	;# 
  3178  029C                     	;# 
  3179  029D                     	;# 
  3180  029E                     	;# 
  3181  0311                     	;# 
  3182  0311                     	;# 
  3183  0312                     	;# 
  3184  0313                     	;# 
  3185  0318                     	;# 
  3186  0318                     	;# 
  3187  0319                     	;# 
  3188  031A                     	;# 
  3189  038C                     	;# 
  3190  038D                     	;# 
  3191  038E                     	;# 
  3192  0391                     	;# 
  3193  0392                     	;# 
  3194  0393                     	;# 
  3195  0394                     	;# 
  3196  0395                     	;# 
  3197  0396                     	;# 
  3198  039A                     	;# 
  3199  039C                     	;# 
  3200  039D                     	;# 
  3201  039E                     	;# 
  3202  039F                     	;# 
  3203  0415                     	;# 
  3204  0416                     	;# 
  3205  0417                     	;# 
  3206  041C                     	;# 
  3207  041D                     	;# 
  3208  041E                     	;# 
  3209  0FE4                     	;# 
  3210  0FE5                     	;# 
  3211  0FE6                     	;# 
  3212  0FE7                     	;# 
  3213  0FE8                     	;# 
  3214  0FE9                     	;# 
  3215  0FEA                     	;# 
  3216  0FEB                     	;# 
  3217  0FED                     	;# 
  3218  0FEE                     	;# 
  3219  0FEF                     	;# 
  3220  0000                     	;# 
  3221  0001                     	;# 
  3222  0002                     	;# 
  3223  0003                     	;# 
  3224  0004                     	;# 
  3225  0005                     	;# 
  3226  0006                     	;# 
  3227  0007                     	;# 
  3228  0008                     	;# 
  3229  0009                     	;# 
  3230  000A                     	;# 
  3231  000B                     	;# 
  3232  000C                     	;# 
  3233  000D                     	;# 
  3234  000E                     	;# 
  3235  0011                     	;# 
  3236  0012                     	;# 
  3237  0013                     	;# 
  3238  0014                     	;# 
  3239  0015                     	;# 
  3240  0016                     	;# 
  3241  0016                     	;# 
  3242  0017                     	;# 
  3243  0018                     	;# 
  3244  0019                     	;# 
  3245  001A                     	;# 
  3246  001B                     	;# 
  3247  001C                     	;# 
  3248  001E                     	;# 
  3249  001F                     	;# 
  3250  008C                     	;# 
  3251  008D                     	;# 
  3252  008E                     	;# 
  3253  0091                     	;# 
  3254  0092                     	;# 
  3255  0093                     	;# 
  3256  0094                     	;# 
  3257  0095                     	;# 
  3258  0096                     	;# 
  3259  0097                     	;# 
  3260  0098                     	;# 
  3261  0099                     	;# 
  3262  009A                     	;# 
  3263  009B                     	;# 
  3264  009B                     	;# 
  3265  009C                     	;# 
  3266  009D                     	;# 
  3267  009E                     	;# 
  3268  010C                     	;# 
  3269  010D                     	;# 
  3270  010E                     	;# 
  3271  0111                     	;# 
  3272  0112                     	;# 
  3273  0113                     	;# 
  3274  0114                     	;# 
  3275  0115                     	;# 
  3276  0116                     	;# 
  3277  0117                     	;# 
  3278  0118                     	;# 
  3279  0119                     	;# 
  3280  011A                     	;# 
  3281  011B                     	;# 
  3282  011D                     	;# 
  3283  011E                     	;# 
  3284  018C                     	;# 
  3285  018D                     	;# 
  3286  018E                     	;# 
  3287  0191                     	;# 
  3288  0191                     	;# 
  3289  0192                     	;# 
  3290  0193                     	;# 
  3291  0193                     	;# 
  3292  0193                     	;# 
  3293  0194                     	;# 
  3294  0195                     	;# 
  3295  0196                     	;# 
  3296  0199                     	;# 
  3297  019A                     	;# 
  3298  019B                     	;# 
  3299  019B                     	;# 
  3300  019C                     	;# 
  3301  019D                     	;# 
  3302  019E                     	;# 
  3303  019F                     	;# 
  3304  020C                     	;# 
  3305  020D                     	;# 
  3306  020E                     	;# 
  3307  0211                     	;# 
  3308  0211                     	;# 
  3309  0212                     	;# 
  3310  0212                     	;# 
  3311  0213                     	;# 
  3312  0213                     	;# 
  3313  0214                     	;# 
  3314  0214                     	;# 
  3315  0215                     	;# 
  3316  0215                     	;# 
  3317  0215                     	;# 
  3318  0216                     	;# 
  3319  0216                     	;# 
  3320  0217                     	;# 
  3321  0217                     	;# 
  3322  0219                     	;# 
  3323  021A                     	;# 
  3324  021B                     	;# 
  3325  021C                     	;# 
  3326  021D                     	;# 
  3327  021E                     	;# 
  3328  021F                     	;# 
  3329  0291                     	;# 
  3330  0291                     	;# 
  3331  0292                     	;# 
  3332  0293                     	;# 
  3333  0294                     	;# 
  3334  0295                     	;# 
  3335  0295                     	;# 
  3336  0296                     	;# 
  3337  0298                     	;# 
  3338  0298                     	;# 
  3339  0299                     	;# 
  3340  029A                     	;# 
  3341  029B                     	;# 
  3342  029C                     	;# 
  3343  029D                     	;# 
  3344  029E                     	;# 
  3345  0311                     	;# 
  3346  0311                     	;# 
  3347  0312                     	;# 
  3348  0313                     	;# 
  3349  0318                     	;# 
  3350  0318                     	;# 
  3351  0319                     	;# 
  3352  031A                     	;# 
  3353  038C                     	;# 
  3354  038D                     	;# 
  3355  038E                     	;# 
  3356  0391                     	;# 
  3357  0392                     	;# 
  3358  0393                     	;# 
  3359  0394                     	;# 
  3360  0395                     	;# 
  3361  0396                     	;# 
  3362  039A                     	;# 
  3363  039C                     	;# 
  3364  039D                     	;# 
  3365  039E                     	;# 
  3366  039F                     	;# 
  3367  0415                     	;# 
  3368  0416                     	;# 
  3369  0417                     	;# 
  3370  041C                     	;# 
  3371  041D                     	;# 
  3372  041E                     	;# 
  3373  0FE4                     	;# 
  3374  0FE5                     	;# 
  3375  0FE6                     	;# 
  3376  0FE7                     	;# 
  3377  0FE8                     	;# 
  3378  0FE9                     	;# 
  3379  0FEA                     	;# 
  3380  0FEB                     	;# 
  3381  0FED                     	;# 
  3382  0FEE                     	;# 
  3383  0FEF                     	;# 
  3384  0000                     	;# 
  3385  0001                     	;# 
  3386  0002                     	;# 
  3387  0003                     	;# 
  3388  0004                     	;# 
  3389  0005                     	;# 
  3390  0006                     	;# 
  3391  0007                     	;# 
  3392  0008                     	;# 
  3393  0009                     	;# 
  3394  000A                     	;# 
  3395  000B                     	;# 
  3396  000C                     	;# 
  3397  000D                     	;# 
  3398  000E                     	;# 
  3399  0011                     	;# 
  3400  0012                     	;# 
  3401  0013                     	;# 
  3402  0014                     	;# 
  3403  0015                     	;# 
  3404  0016                     	;# 
  3405  0016                     	;# 
  3406  0017                     	;# 
  3407  0018                     	;# 
  3408  0019                     	;# 
  3409  001A                     	;# 
  3410  001B                     	;# 
  3411  001C                     	;# 
  3412  001E                     	;# 
  3413  001F                     	;# 
  3414  008C                     	;# 
  3415  008D                     	;# 
  3416  008E                     	;# 
  3417  0091                     	;# 
  3418  0092                     	;# 
  3419  0093                     	;# 
  3420  0094                     	;# 
  3421  0095                     	;# 
  3422  0096                     	;# 
  3423  0097                     	;# 
  3424  0098                     	;# 
  3425  0099                     	;# 
  3426  009A                     	;# 
  3427  009B                     	;# 
  3428  009B                     	;# 
  3429  009C                     	;# 
  3430  009D                     	;# 
  3431  009E                     	;# 
  3432  010C                     	;# 
  3433  010D                     	;# 
  3434  010E                     	;# 
  3435  0111                     	;# 
  3436  0112                     	;# 
  3437  0113                     	;# 
  3438  0114                     	;# 
  3439  0115                     	;# 
  3440  0116                     	;# 
  3441  0117                     	;# 
  3442  0118                     	;# 
  3443  0119                     	;# 
  3444  011A                     	;# 
  3445  011B                     	;# 
  3446  011D                     	;# 
  3447  011E                     	;# 
  3448  018C                     	;# 
  3449  018D                     	;# 
  3450  018E                     	;# 
  3451  0191                     	;# 
  3452  0191                     	;# 
  3453  0192                     	;# 
  3454  0193                     	;# 
  3455  0193                     	;# 
  3456  0193                     	;# 
  3457  0194                     	;# 
  3458  0195                     	;# 
  3459  0196                     	;# 
  3460  0199                     	;# 
  3461  019A                     	;# 
  3462  019B                     	;# 
  3463  019B                     	;# 
  3464  019C                     	;# 
  3465  019D                     	;# 
  3466  019E                     	;# 
  3467  019F                     	;# 
  3468  020C                     	;# 
  3469  020D                     	;# 
  3470  020E                     	;# 
  3471  0211                     	;# 
  3472  0211                     	;# 
  3473  0212                     	;# 
  3474  0212                     	;# 
  3475  0213                     	;# 
  3476  0213                     	;# 
  3477  0214                     	;# 
  3478  0214                     	;# 
  3479  0215                     	;# 
  3480  0215                     	;# 
  3481  0215                     	;# 
  3482  0216                     	;# 
  3483  0216                     	;# 
  3484  0217                     	;# 
  3485  0217                     	;# 
  3486  0219                     	;# 
  3487  021A                     	;# 
  3488  021B                     	;# 
  3489  021C                     	;# 
  3490  021D                     	;# 
  3491  021E                     	;# 
  3492  021F                     	;# 
  3493  0291                     	;# 
  3494  0291                     	;# 
  3495  0292                     	;# 
  3496  0293                     	;# 
  3497  0294                     	;# 
  3498  0295                     	;# 
  3499  0295                     	;# 
  3500  0296                     	;# 
  3501  0298                     	;# 
  3502  0298                     	;# 
  3503  0299                     	;# 
  3504  029A                     	;# 
  3505  029B                     	;# 
  3506  029C                     	;# 
  3507  029D                     	;# 
  3508  029E                     	;# 
  3509  0311                     	;# 
  3510  0311                     	;# 
  3511  0312                     	;# 
  3512  0313                     	;# 
  3513  0318                     	;# 
  3514  0318                     	;# 
  3515  0319                     	;# 
  3516  031A                     	;# 
  3517  038C                     	;# 
  3518  038D                     	;# 
  3519  038E                     	;# 
  3520  0391                     	;# 
  3521  0392                     	;# 
  3522  0393                     	;# 
  3523  0394                     	;# 
  3524  0395                     	;# 
  3525  0396                     	;# 
  3526  039A                     	;# 
  3527  039C                     	;# 
  3528  039D                     	;# 
  3529  039E                     	;# 
  3530  039F                     	;# 
  3531  0415                     	;# 
  3532  0416                     	;# 
  3533  0417                     	;# 
  3534  041C                     	;# 
  3535  041D                     	;# 
  3536  041E                     	;# 
  3537  0FE4                     	;# 
  3538  0FE5                     	;# 
  3539  0FE6                     	;# 
  3540  0FE7                     	;# 
  3541  0FE8                     	;# 
  3542  0FE9                     	;# 
  3543  0FEA                     	;# 
  3544  0FEB                     	;# 
  3545  0FED                     	;# 
  3546  0FEE                     	;# 
  3547  0FEF                     	;_I2cPacket
  3548                           
  3549                           	psect	idataCOMMON
  3550  15C3                     __pidataCOMMON:	
  3551                           
  3552                           ;initializer for _LedBehaviourSts
  3553  15C3  3401               	retlw	1
  3554                           
  3555                           	psect	idataBANK1
  3556  15C2                     __pidataBANK1:	
  3557                           
  3558                           ;initializer for _MainSystemTimebaseFlag
  3559  15C2  3401               	retlw	1
  3560                           
  3561                           	psect	idataBANK2
  3562  0834                     __pidataBANK2:	
  3563                           
  3564                           ;initializer for _TaskTable
  3565  0834  3417               	retlw	low _I2c_DataReceiveSm
  3566  0835  3403               	retlw	high _I2c_DataReceiveSm
  3567  0836  3400               	retlw	0
  3568  0837  3400               	retlw	0
  3569  0838  3400               	retlw	0
  3570  0839  3401               	retlw	1
  3571  083A  3400               	retlw	0
  3572  083B  3400               	retlw	0
  3573  083C  34D8               	retlw	low _I2cSlv_MainTask
  3574  083D  3416               	retlw	high _I2cSlv_MainTask
  3575  083E  3400               	retlw	0
  3576  083F  3400               	retlw	0
  3577  0840  3400               	retlw	0
  3578  0841  3401               	retlw	1
  3579  0842  3400               	retlw	0
  3580  0843  3400               	retlw	0
  3581  0844  34ED               	retlw	low _Wdg_MainTask
  3582  0845  3416               	retlw	high _Wdg_MainTask
  3583  0846  3400               	retlw	0
  3584  0847  3400               	retlw	0
  3585  0848  3400               	retlw	0
  3586  0849  34E8               	retlw	232
  3587  084A  3403               	retlw	3
  3588  084B  3400               	retlw	0
  3589  084C  34DD               	retlw	low _Led_MainTask
  3590  084D  3408               	retlw	high _Led_MainTask
  3591  084E  3400               	retlw	0
  3592  084F  3400               	retlw	0
  3593  0850  3400               	retlw	0
  3594  0851  3464               	retlw	100
  3595  0852  3400               	retlw	0
  3596  0853  3400               	retlw	0
  3597  0854  340A               	retlw	low _App_MainTask
  3598  0855  340E               	retlw	high _App_MainTask
  3599  0856  3400               	retlw	0
  3600  0857  3400               	retlw	0
  3601  0858  3400               	retlw	0
  3602  0859  3464               	retlw	100
  3603  085A  3400               	retlw	0
  3604  085B  3400               	retlw	0
  3605                           
  3606                           	psect	stringtext
  3607  1000                     __pstringtext:	
  3608  1000                     _dpowers:	
  3609  1000  3401               	retlw	1
  3610  1001  3400               	retlw	0
  3611  1002  340A               	retlw	10
  3612  1003  3400               	retlw	0
  3613  1004  3464               	retlw	100
  3614  1005  3400               	retlw	0
  3615  1006  34E8               	retlw	232
  3616  1007  3403               	retlw	3
  3617  1008  3410               	retlw	16
  3618  1009  3427               	retlw	39
  3619  100A                     __end_of_dpowers:	
  3620  100A                     _TaskNumber:	
  3621  100A  3405               	retlw	5
  3622  100B  3400               	retlw	0
  3623  100C                     __end_of_TaskNumber:	
  3624  000B                     _INTCONbits	set	11
  3625  0011                     _PIR1bits	set	17
  3626  0013                     _PIR3bits	set	19
  3627  000E                     _PORTCbits	set	14
  3628  001B                     _PR2	set	27
  3629  001C                     _T2CONbits	set	28
  3630  009D                     _ADCON0bits	set	157
  3631  009E                     _ADCON1bits	set	158
  3632  009C                     _ADRESH	set	156
  3633  009B                     _ADRESL	set	155
  3634  0095                     _OPTION_REGbits	set	149
  3635  0099                     _OSCCONbits	set	153
  3636  009A                     _OSCSTATbits	set	154
  3637  0091                     _PIE1bits	set	145
  3638  0093                     _PIE3bits	set	147
  3639  008C                     _TRISAbits	set	140
  3640  008E                     _TRISCbits	set	142
  3641  0097                     _WDTCONbits	set	151
  3642  0117                     _FVRCONbits	set	279
  3643  010C                     _LATA	set	268
  3644  010C                     _LATAbits	set	268
  3645  010D                     _LATB	set	269
  3646  010E                     _LATC	set	270
  3647  010E                     _LATCbits	set	270
  3648  018C                     _ANSELA	set	396
  3649  018C                     _ANSELAbits	set	396
  3650  018D                     _ANSELB	set	397
  3651  018D                     _ANSELBbits	set	397
  3652  018E                     _ANSELC	set	398
  3653  018E                     _ANSELCbits	set	398
  3654  0212                     _SSP1ADD	set	530
  3655  0211                     _SSP1BUF	set	529
  3656  0215                     _SSP1CON1	set	533
  3657  0215                     _SSP1CON1bits	set	533
  3658  0216                     _SSP1CON2	set	534
  3659  0217                     _SSP1CON3	set	535
  3660  0213                     _SSP1MSK	set	531
  3661  0214                     _SSP1STAT	set	532
  3662  020C                     _WPUA	set	524
  3663  020C                     _WPUAbits	set	524
  3664  020D                     _WPUB	set	525
  3665  020D                     _WPUBbits	set	525
  3666  020E                     _WPUC	set	526
  3667  020E                     _WPUCbits	set	526
  3668  0416                     _PR4	set	1046
  3669  041D                     _PR6	set	1053
  3670  0417                     _T4CONbits	set	1047
  3671  041E                     _T6CONbits	set	1054
  3672  100C                     STR_4:	
  3673  100C  3430               	retlw	48	;'0'
  3674  100D  3431               	retlw	49	;'1'
  3675  100E  342E               	retlw	46	;'.'
  3676  100F  3430               	retlw	48	;'0'
  3677  1010  3431               	retlw	49	;'1'
  3678  1011  342E               	retlw	46	;'.'
  3679  1012  3430               	retlw	48	;'0'
  3680  1013  3430               	retlw	48	;'0'
  3681  1014  3400               	retlw	0
  3682  1015                     STR_1:	
  3683  1015  3425               	retlw	37	;'%'
  3684  1016  3464               	retlw	100	;'d'
  3685  1017  342E               	retlw	46	;'.'
  3686  1018  3425               	retlw	37	;'%'
  3687  1019  3430               	retlw	48	;'0'
  3688  101A  3431               	retlw	49	;'1'
  3689  101B  3475               	retlw	117	;'u'
  3690  101C  3400               	retlw	0
  3691  101D                     STR_3:	
  3692  101D  3453               	retlw	83	;'S'
  3693  101E  3442               	retlw	66	;'B'
  3694  101F  3431               	retlw	49	;'1'
  3695  1020  3432               	retlw	50	;'2'
  3696  1021  3430               	retlw	48	;'0'
  3697  1022  3400               	retlw	0
  3698  1023                     STR_2:	
  3699  1023  3445               	retlw	69	;'E'
  3700  1024  3443               	retlw	67	;'C'
  3701  1025  3448               	retlw	72	;'H'
  3702  1026  344F               	retlw	79	;'O'
  3703  1027  3400               	retlw	0
  3704  100C                     
  3705                           ; #config settings
  3706  0000                     
  3707                           	psect	cinit
  3708  002D                     start_initialization:	
  3709  002D                     __initialization:		;BIGRAM
  3710                           
  3711                           ; Initialize objects allocated to COMMON
  3712  002D  3195  25C3  3180   	fcall	__pidataCOMMON	;fetch initializer
  3713  0030  00F9               	movwf	__pdataCOMMON& (0+127)
  3714                           
  3715                           ; Initialize objects allocated to BANK1
  3716  0031  0021               	movlb	1	; select bank1
  3717  0032  3195  25C2  3180   	fcall	__pidataBANK1	;fetch initializer
  3718  0035  00EB               	movwf	__pdataBANK1& (0+127)
  3719                           
  3720                           ; Initialize objects allocated to BANK2
  3721  0036  3034               	movlw	low __pidataBANK2
  3722  0037  0084               	movwf	4
  3723  0038  3088               	movlw	(high __pidataBANK2)| (0+128)
  3724  0039  0085               	movwf	5
  3725  003A  3020               	movlw	low __pdataBANK2
  3726  003B  0086               	movwf	6
  3727  003C  3001               	movlw	high __pdataBANK2
  3728  003D  0087               	movwf	7
  3729  003E  3000               	movlw	0
  3730  003F  00FF               	movwf	btemp+1
  3731  0040  3028               	movlw	40
  3732  0041  3196  2648  3180   	fcall	init_ram
  3733                           
  3734                           ; Clear objects allocated to BIGRAM
  3735  0044  309D               	movlw	low (0+9117)
  3736  0045  0084               	movwf	4
  3737  0046  3023               	movlw	high (0+9117)
  3738  0047  0085               	movwf	5
  3739  0048  3053               	movlw	83
  3740  0049  00FE               	movwf	btemp
  3741  004A  3000               	movlw	0
  3742  004B  00FF               	movwf	btemp+1
  3743  004C  3196  263C  3180   	fcall	clear_ram0
  3744                           
  3745                           ; Clear objects allocated to COMMON
  3746  004F  01F6               	clrf	__pbssCOMMON& (0+127)
  3747  0050  01F7               	clrf	(__pbssCOMMON+1)& (0+127)
  3748  0051  01F8               	clrf	(__pbssCOMMON+2)& (0+127)
  3749                           
  3750                           ; Clear objects allocated to BANK0
  3751  0052  0020               	movlb	0	; select bank0
  3752  0053  01ED               	clrf	__pbssBANK0& (0+127)
  3753  0054  01EE               	clrf	(__pbssBANK0+1)& (0+127)
  3754  0055  01EF               	clrf	(__pbssBANK0+2)& (0+127)
  3755                           
  3756                           ; Clear objects allocated to BANK1
  3757  0056  30A0               	movlw	low __pbssBANK1
  3758  0057  0084               	movwf	4
  3759  0058  3000               	movlw	high __pbssBANK1
  3760  0059  0085               	movwf	5
  3761  005A  304B               	movlw	75
  3762  005B  00FE               	movwf	btemp
  3763  005C  3000               	movlw	0
  3764  005D  00FF               	movwf	btemp+1
  3765  005E  3196  263C  3180   	fcall	clear_ram0
  3766                           
  3767                           ; Clear objects allocated to BANK2
  3768  0061  3048               	movlw	low __pbssBANK2
  3769  0062  0084               	movwf	4
  3770  0063  3001               	movlw	high __pbssBANK2
  3771  0064  0085               	movwf	5
  3772  0065  3012               	movlw	18
  3773  0066  00FE               	movwf	btemp
  3774  0067  3000               	movlw	0
  3775  0068  00FF               	movwf	btemp+1
  3776  0069  3196  263C  3180   	fcall	clear_ram0
  3777                           
  3778                           ; Clear objects allocated to BANK3
  3779  006C  30A0               	movlw	low __pbssBANK3
  3780  006D  0084               	movwf	4
  3781  006E  3001               	movlw	high __pbssBANK3
  3782  006F  0085               	movwf	5
  3783  0070  3050               	movlw	80
  3784  0071  00FE               	movwf	btemp
  3785  0072  3000               	movlw	0
  3786  0073  00FF               	movwf	btemp+1
  3787  0074  3196  263C  3180   	fcall	clear_ram0
  3788                           
  3789                           ; Clear objects allocated to BANK4
  3790  0077  3020               	movlw	low __pbssBANK4
  3791  0078  0084               	movwf	4
  3792  0079  3002               	movlw	high __pbssBANK4
  3793  007A  0085               	movwf	5
  3794  007B  3050               	movlw	80
  3795  007C  00FE               	movwf	btemp
  3796  007D  3000               	movlw	0
  3797  007E  00FF               	movwf	btemp+1
  3798  007F  3196  263C  3180   	fcall	clear_ram0
  3799                           
  3800                           ; Clear objects allocated to BANK5
  3801  0082  30A0               	movlw	low __pbssBANK5
  3802  0083  0084               	movwf	4
  3803  0084  3002               	movlw	high __pbssBANK5
  3804  0085  0085               	movwf	5
  3805  0086  3050               	movlw	80
  3806  0087  00FE               	movwf	btemp
  3807  0088  3000               	movlw	0
  3808  0089  00FF               	movwf	btemp+1
  3809  008A  3196  263C  3180   	fcall	clear_ram0
  3810                           
  3811                           ; Clear objects allocated to BANK6
  3812  008D  3020               	movlw	low __pbssBANK6
  3813  008E  0084               	movwf	4
  3814  008F  3003               	movlw	high __pbssBANK6
  3815  0090  0085               	movwf	5
  3816  0091  3050               	movlw	80
  3817  0092  00FE               	movwf	btemp
  3818  0093  3000               	movlw	0
  3819  0094  00FF               	movwf	btemp+1
  3820  0095  3196  263C         	fcall	clear_ram0
  3821  0097                     end_of_initialization:	
  3822                           ;End of C runtime variable initialization code
  3823                           
  3824  0097                     __end_of__initialization:	
  3825  0097  107E               	bcf	int$flags,0	;clear compiler interrupt flag (level 1)
  3826  0098  0020               	movlb	0
  3827  0099  3195  2DE0         	ljmp	_main	;jump to C main() function
  3828                           
  3829                           	psect	bssCOMMON
  3830  0076                     __pbssCOMMON:	
  3831  0076                     I2c_DataReceiveSm@RxCounter:	
  3832  0076                     	ds	1
  3833  0077                     I2c_DataReceiveSm@TxCounter:	
  3834  0077                     	ds	1
  3835  0078                     _I2cSlaveAddress:	
  3836  0078                     	ds	1
  3837                           
  3838                           	psect	dataCOMMON
  3839  0079                     __pdataCOMMON:	
  3840  0079                     _LedBehaviourSts:	
  3841  0079                     	ds	1
  3842                           
  3843                           	psect	bssBANK0
  3844  006D                     __pbssBANK0:	
  3845  006D                     I2c_DataReceiveSm@I2cRxAddress:	
  3846  006D                     	ds	1
  3847  006E                     I2c_DataReceiveSm@OpType:	
  3848  006E                     	ds	1
  3849  006F                     _SystemState:	
  3850  006F                     	ds	1
  3851                           
  3852                           	psect	bssBANK1
  3853  00A0                     __pbssBANK1:	
  3854  00A0                     App_MainTask@F4172:	
  3855  00A0                     	ds	12
  3856  00AC                     _NeopixelChannels:	
  3857  00AC                     	ds	12
  3858  00B8                     _InterruptCounter:	
  3859  00B8                     	ds	2
  3860  00BA                     _Tmr2IsrCallback:	
  3861  00BA                     	ds	2
  3862  00BC                     _Tmr4IsrCallback:	
  3863  00BC                     	ds	2
  3864  00BE                     _Tmr6IsrCallback:	
  3865  00BE                     	ds	2
  3866  00C0                     AppSm@AppState:	
  3867  00C0                     	ds	1
  3868  00C1                     AppSm@WpuSetCounter:	
  3869  00C1                     	ds	1
  3870  00C2                     I2cSlv_I2cDrvHandle@I2cReceiveMsgState:	
  3871  00C2                     	ds	1
  3872  00C3                     I2c_DataReceiveSm@I2cRxFlag:	
  3873  00C3                     	ds	1
  3874  00C4                     I2c_DataReceiveSm@I2cRxState:	
  3875  00C4                     	ds	1
  3876  00C5                     _RepBufferLen:	
  3877  00C5                     	ds	1
  3878  00C6                     _I2cConfig:	
  3879  00C6                     	ds	11
  3880  00D1                     _Led1Blink:	
  3881  00D1                     	ds	9
  3882  00DA                     _Led1Pulse:	
  3883  00DA                     	ds	6
  3884  00E0                     _I2cNewPacketNotification:	
  3885  00E0                     	ds	2
  3886  00E2                     _I2cNewTxNotification:	
  3887  00E2                     	ds	2
  3888  00E4                     _I2cReplyPacketReady:	
  3889  00E4                     	ds	2
  3890  00E6                     _I2cSetAddress:	
  3891  00E6                     	ds	2
  3892  00E8                     _I2cWriteRequest:	
  3893  00E8                     	ds	2
  3894  00EA                     _Led1Sts:	
  3895  00EA                     	ds	1
  3896                           
  3897                           	psect	dataBANK1
  3898  00EB                     __pdataBANK1:	
  3899  00EB                     _MainSystemTimebaseFlag:	
  3900  00EB                     	ds	1
  3901                           
  3902                           	psect	bssBANK2
  3903  0148                     __pbssBANK2:	
  3904  0148                     App_MainTask@F4158:	
  3905  0148                     	ds	18
  3906                           
  3907                           	psect	dataBANK2
  3908  0120                     __pdataBANK2:	
  3909  0120                     _TaskTable:	
  3910  0120                     	ds	40
  3911                           
  3912                           	psect	bssBANK3
  3913  01A0                     __pbssBANK3:	
  3914  01A0                     _CmdBuffer:	
  3915  01A0                     	ds	80
  3916                           
  3917                           	psect	bssBANK4
  3918  0220                     __pbssBANK4:	
  3919  0220                     _RepBuffer:	
  3920  0220                     	ds	80
  3921                           
  3922                           	psect	bssBANK5
  3923  02A0                     __pbssBANK5:	
  3924  02A0                     _I2cTxBuffer:	
  3925  02A0                     	ds	80
  3926                           
  3927                           	psect	bssBANK6
  3928  0320                     __pbssBANK6:	
  3929  0320                     _I2cRxBuffer:	
  3930  0320                     	ds	80
  3931                           
  3932                           	psect	inittext
  3933  1648                     init_ram:	
  3934  1648  00FE               	movwf	126
  3935  1649                     initloop:	
  3936  1649  0012               	moviw fsr0++
  3937  164A  001E               	movwi fsr1++
  3938  164B  3001               	movlw	1
  3939  164C  02FE               	subwf	126,f
  3940  164D  3000               	movlw	0
  3941  164E  3BFF               	subwfb	127,f
  3942  164F  087F               	movf	127,w
  3943  1650  047E               	iorwf	126,w
  3944  1651  1903               	btfsc	3,2
  3945  1652  3400               	retlw	0
  3946  1653  2E49               	goto	initloop
  3947                           
  3948                           	psect	clrtext
  3949  163C                     clear_ram0:	
  3950                           ;	Called with FSR0 containing the base address, and
  3951                           ;	btemp/btemp+1 has the size to clear
  3952                           
  3953  163C  0064               	clrwdt	;clear the watchdog before getting into this loop
  3954  163D                     clrloop0:	
  3955  163D  0180               	clrf	0	;clear RAM location pointed to by FSR
  3956  163E  3101               	addfsr 0,1
  3957  163F  3001               	movlw	1
  3958  1640  02FE               	subwf	126,f
  3959  1641  3000               	movlw	0
  3960  1642  3BFF               	subwfb	127,f
  3961  1643  087F               	movf	127,w
  3962  1644  047E               	iorwf	126,w
  3963  1645  1903               	btfsc	3,2
  3964  1646  3400               	retlw	0	;all done for this memory range, return
  3965  1647  2E3D               	goto	clrloop0	;have we reached the end yet?
  3966                           
  3967                           	psect	cstackBANK2
  3968  015A                     __pcstackBANK2:	
  3969  015A                     ??_ScheduleTasks:	
  3970                           
  3971                           ; 1 bytes @ 0x0
  3972  015A                     	ds	6
  3973                           
  3974                           	psect	cstackBANK1
  3975  00EC                     __pcstackBANK1:	
  3976  00EC                     InitializeTasks@ActiveTaskIndex:	
  3977                           
  3978                           ; 1 bytes @ 0x0
  3979  00EC                     	ds	1
  3980                           
  3981                           	psect	cstackCOMMON
  3982  0070                     __pcstackCOMMON:	
  3983  0070                     ?_SystemInit:	
  3984  0070                     ?_MainScheduler:	
  3985                           ; 1 bytes @ 0x0
  3986                           
  3987  0070                     ?_ReceiveEvt:	
  3988                           ; 1 bytes @ 0x0
  3989                           
  3990  0070                     ?_GenerateEvt:	
  3991                           ; 1 bytes @ 0x0
  3992                           
  3993  0070                     ?_InitializeTasks:	
  3994                           ; 1 bytes @ 0x0
  3995                           
  3996  0070                     ?_ScheduleTasks:	
  3997                           ; 1 bytes @ 0x0
  3998                           
  3999  0070                     ?_I2cSlv_I2cDrvHandle:	
  4000                           ; 1 bytes @ 0x0
  4001                           
  4002  0070                     ?_SetLedBehavSts:	
  4003                           ; 1 bytes @ 0x0
  4004                           
  4005  0070                     ?_Adc_ConfigAnCh:	
  4006                           ; 1 bytes @ 0x0
  4007                           
  4008  0070                     ?_Adc_InitAdcModule:	
  4009                           ; 1 bytes @ 0x0
  4010                           
  4011  0070                     ?_Adc_SelectChannel:	
  4012                           ; 1 bytes @ 0x0
  4013                           
  4014  0070                     ?_Adc_StartConversion:	
  4015                           ; 1 bytes @ 0x0
  4016                           
  4017  0070                     ?_Adc_GetConvSts:	
  4018                           ; 1 bytes @ 0x0
  4019                           
  4020  0070                     ?_CheckAckStatus:	
  4021                           ; 1 bytes @ 0x0
  4022                           
  4023  0070                     ?_CheckByteStatus:	
  4024                           ; 1 bytes @ 0x0
  4025                           
  4026  0070                     ?_CheckStopBitStatus:	
  4027                           ; 1 bytes @ 0x0
  4028                           
  4029  0070                     ?_ClearRxBuffer:	
  4030                           ; 1 bytes @ 0x0
  4031                           
  4032  0070                     ?_ClearTxBuffer:	
  4033                           ; 1 bytes @ 0x0
  4034                           
  4035  0070                     ?_I2c_InitI2cModule:	
  4036                           ; 1 bytes @ 0x0
  4037                           
  4038  0070                     ?_I2c_SetI2cAddress:	
  4039                           ; 1 bytes @ 0x0
  4040                           
  4041  0070                     ?_I2c_SetI2cAddressMask:	
  4042                           ; 1 bytes @ 0x0
  4043                           
  4044  0070                     ?_LedBlinkStateMachine:	
  4045                           ; 1 bytes @ 0x0
  4046                           
  4047  0070                     ?_Mcu_EnableInterrupts:	
  4048                           ; 1 bytes @ 0x0
  4049                           
  4050  0070                     ?_Mcu_DisableInterrupts:	
  4051                           ; 1 bytes @ 0x0
  4052                           
  4053  0070                     ?_Mcu_StartSystemPll:	
  4054                           ; 1 bytes @ 0x0
  4055                           
  4056  0070                     ?_Mcu_SetPullUpsSts:	
  4057                           ; 1 bytes @ 0x0
  4058                           
  4059  0070                     ?_Mcu_ConfigPullUps:	
  4060                           ; 1 bytes @ 0x0
  4061                           
  4062  0070                     ?_Mcu_SetWdgPeriod:	
  4063                           ; 1 bytes @ 0x0
  4064                           
  4065  0070                     ?_Mcu_SetWdgSts:	
  4066                           ; 1 bytes @ 0x0
  4067                           
  4068  0070                     ?_Mcu_ClearWdg:	
  4069                           ; 1 bytes @ 0x0
  4070                           
  4071  0070                     ?_Mcu_SetDieTempSts:	
  4072                           ; 1 bytes @ 0x0
  4073                           
  4074  0070                     ?_Mcu_SetDieTempMode:	
  4075                           ; 1 bytes @ 0x0
  4076                           
  4077  0070                     ?_Tmr_StartTmr:	
  4078                           ; 1 bytes @ 0x0
  4079                           
  4080  0070                     ?_MainInterrupt:	
  4081                           ; 1 bytes @ 0x0
  4082                           
  4083  0070                     ?_I2c_SetConfig:	
  4084                           ; 1 bytes @ 0x0
  4085                           
  4086  0070                     ?_ControlLedDirect:	
  4087                           ; 1 bytes @ 0x0
  4088                           
  4089  0070                     ?_BoardReset:	
  4090                           ; 1 bytes @ 0x0
  4091                           
  4092  0070                     ?_LowPowerMode:	
  4093                           ; 1 bytes @ 0x0
  4094                           
  4095  0070                     ?_StdS_ManageStdServices:	
  4096                           ; 1 bytes @ 0x0
  4097                           
  4098  0070                     ?_StdS_SetI2cAddress:	
  4099                           ; 1 bytes @ 0x0
  4100                           
  4101  0070                     ?_ManageProtocol:	
  4102                           ; 1 bytes @ 0x0
  4103                           
  4104  0070                     ?_AppSm:	
  4105                           ; 1 bytes @ 0x0
  4106                           
  4107  0070                     ?_InitSchTimer:	
  4108                           ; 1 bytes @ 0x0
  4109                           
  4110  0070                     ?i1_GenerateEvt:	
  4111                           ; 1 bytes @ 0x0
  4112                           
  4113  0070                     ??i1_GenerateEvt:	
  4114                           ; 1 bytes @ 0x0
  4115                           
  4116  0070                     ?_main:	
  4117                           ; 1 bytes @ 0x0
  4118                           
  4119                           
  4120                           ; 2 bytes @ 0x0
  4121  0070                     	ds	1
  4122  0071                     i1GenerateEvt@Event:	
  4123                           
  4124                           ; 1 bytes @ 0x1
  4125  0071                     	ds	1
  4126  0072                     i1GenerateEvt@EventStatus:	
  4127                           
  4128                           ; 1 bytes @ 0x2
  4129  0072                     	ds	1
  4130  0073                     ??_MainInterrupt:	
  4131                           
  4132                           ; 1 bytes @ 0x3
  4133  0073                     	ds	1
  4134  0074                     ??_ReceiveEvt:	
  4135  0074                     ??_GenerateEvt:	
  4136                           ; 1 bytes @ 0x4
  4137                           
  4138  0074                     ?_Led_SetLedStatus:	
  4139                           ; 1 bytes @ 0x4
  4140                           
  4141  0074                     ??_Adc_ConfigAnCh:	
  4142                           ; 1 bytes @ 0x4
  4143                           
  4144  0074                     ??_Adc_InitAdcModule:	
  4145                           ; 1 bytes @ 0x4
  4146                           
  4147  0074                     ??_Adc_SelectChannel:	
  4148                           ; 1 bytes @ 0x4
  4149                           
  4150  0074                     ??_Adc_StartConversion:	
  4151                           ; 1 bytes @ 0x4
  4152                           
  4153  0074                     ??_Adc_GetConvSts:	
  4154                           ; 1 bytes @ 0x4
  4155                           
  4156  0074                     ??_CheckAckStatus:	
  4157                           ; 1 bytes @ 0x4
  4158                           
  4159  0074                     ??_CheckByteStatus:	
  4160                           ; 1 bytes @ 0x4
  4161                           
  4162  0074                     ??_CheckStopBitStatus:	
  4163                           ; 1 bytes @ 0x4
  4164                           
  4165  0074                     ??_ClearRxBuffer:	
  4166                           ; 1 bytes @ 0x4
  4167                           
  4168  0074                     ??_ClearTxBuffer:	
  4169                           ; 1 bytes @ 0x4
  4170                           
  4171  0074                     ??_I2c_SetI2cAddress:	
  4172                           ; 1 bytes @ 0x4
  4173                           
  4174  0074                     ??_I2c_SetI2cAddressMask:	
  4175                           ; 1 bytes @ 0x4
  4176                           
  4177  0074                     ?_I2c_UpdateTxBuffer:	
  4178                           ; 1 bytes @ 0x4
  4179                           
  4180  0074                     ??_Mcu_EnableInterrupts:	
  4181                           ; 1 bytes @ 0x4
  4182                           
  4183  0074                     ??_Mcu_DisableInterrupts:	
  4184                           ; 1 bytes @ 0x4
  4185                           
  4186  0074                     ??_Mcu_StartSystemPll:	
  4187                           ; 1 bytes @ 0x4
  4188                           
  4189  0074                     ??_Mcu_SetPullUpsSts:	
  4190                           ; 1 bytes @ 0x4
  4191                           
  4192  0074                     ??_Mcu_ConfigPullUps:	
  4193                           ; 1 bytes @ 0x4
  4194                           
  4195  0074                     ??_Mcu_SetWdgPeriod:	
  4196                           ; 1 bytes @ 0x4
  4197                           
  4198  0074                     ??_Mcu_SetWdgSts:	
  4199                           ; 1 bytes @ 0x4
  4200                           
  4201  0074                     ??_Mcu_ClearWdg:	
  4202                           ; 1 bytes @ 0x4
  4203                           
  4204  0074                     ??_Mcu_SetDieTempSts:	
  4205                           ; 1 bytes @ 0x4
  4206                           
  4207  0074                     ??_Mcu_SetDieTempMode:	
  4208                           ; 1 bytes @ 0x4
  4209                           
  4210  0074                     ?_TmrBInit:	
  4211                           ; 1 bytes @ 0x4
  4212                           
  4213  0074                     ?_Tmr_TmrBIrqSet:	
  4214                           ; 1 bytes @ 0x4
  4215                           
  4216  0074                     ??_Tmr_StartTmr:	
  4217                           ; 1 bytes @ 0x4
  4218                           
  4219  0074                     ??_Npdrv_Ch1_WriteNeopixelColor:	
  4220                           ; 1 bytes @ 0x4
  4221                           
  4222  0074                     ??_Npdrv_Ch2_WriteNeopixelColor:	
  4223                           ; 1 bytes @ 0x4
  4224                           
  4225  0074                     ??_Npdrv_Ch3_WriteNeopixelColor:	
  4226                           ; 1 bytes @ 0x4
  4227                           
  4228  0074                     ??_I2c_SetConfig:	
  4229                           ; 1 bytes @ 0x4
  4230                           
  4231  0074                     ??_Led_SetLedBlinkTime:	
  4232                           ; 1 bytes @ 0x4
  4233                           
  4234  0074                     ?_Led_SetLedPulseTime:	
  4235                           ; 1 bytes @ 0x4
  4236                           
  4237  0074                     ??_BoardReset:	
  4238                           ; 1 bytes @ 0x4
  4239                           
  4240  0074                     ??_StdS_SetI2cAddress:	
  4241                           ; 1 bytes @ 0x4
  4242                           
  4243  0074                     ??___wmul:	
  4244                           ; 1 bytes @ 0x4
  4245                           
  4246  0074                     ??___lldiv:	
  4247                           ; 1 bytes @ 0x4
  4248                           
  4249  0074                     ??___lwdiv:	
  4250                           ; 1 bytes @ 0x4
  4251                           
  4252  0074                     ??___lwmod:	
  4253                           ; 1 bytes @ 0x4
  4254                           
  4255  0074                     ?_Adc_GetConvResult:	
  4256                           ; 1 bytes @ 0x4
  4257                           
  4258  0074                     Adc_ConfigAnCh@AnChSel:	
  4259                           ; 2 bytes @ 0x4
  4260                           
  4261  0074                     Adc_InitAdcModule@AdcConfig:	
  4262                           ; 1 bytes @ 0x4
  4263                           
  4264  0074                     I2c_SetI2cAddress@SlaveAddress:	
  4265                           ; 1 bytes @ 0x4
  4266                           
  4267  0074                     I2c_SetI2cAddressMask@SlaveAddressMask:	
  4268                           ; 1 bytes @ 0x4
  4269                           
  4270  0074                     I2c_UpdateTxBuffer@Length:	
  4271                           ; 1 bytes @ 0x4
  4272                           
  4273  0074                     Mcu_SetPullUpsSts@PuSts:	
  4274                           ; 1 bytes @ 0x4
  4275                           
  4276  0074                     Mcu_ConfigPullUps@WpuCh:	
  4277                           ; 1 bytes @ 0x4
  4278                           
  4279  0074                     Mcu_SetWdgSts@WdgSts:	
  4280                           ; 1 bytes @ 0x4
  4281                           
  4282  0074                     Mcu_SetDieTempSts@DieTempSts:	
  4283                           ; 1 bytes @ 0x4
  4284                           
  4285  0074                     Mcu_SetDieTempMode@DieTempMode:	
  4286                           ; 1 bytes @ 0x4
  4287                           
  4288  0074                     TmrBInit@Prescaler:	
  4289                           ; 1 bytes @ 0x4
  4290                           
  4291  0074                     Tmr_TmrBIrqSet@TmrIrqSts:	
  4292                           ; 1 bytes @ 0x4
  4293                           
  4294  0074                     Tmr_StartTmr@TmrNumb:	
  4295                           ; 1 bytes @ 0x4
  4296                           
  4297  0074                     ReceiveEvt@EventStatus:	
  4298                           ; 1 bytes @ 0x4
  4299                           
  4300  0074                     Led_SetLedStatus@LedSts:	
  4301                           ; 1 bytes @ 0x4
  4302                           
  4303  0074                     Led_SetLedBlinkTime@Led:	
  4304                           ; 1 bytes @ 0x4
  4305                           
  4306  0074                     StringCopy@Index:	
  4307                           ; 1 bytes @ 0x4
  4308                           
  4309  0074                     Led_SetLedPulseTime@PulseTimeMs:	
  4310                           ; 1 bytes @ 0x4
  4311                           
  4312  0074                     ___wmul@product:	
  4313                           ; 2 bytes @ 0x4
  4314                           
  4315                           
  4316                           ; 2 bytes @ 0x4
  4317  0074                     	ds	1
  4318  0075                     ??_Led_SetLedStatus:	
  4319  0075                     ??_Tmr_TmrBIrqSet:	
  4320                           ; 1 bytes @ 0x5
  4321                           
  4322  0075                     ??_LowPowerMode:	
  4323                           ; 1 bytes @ 0x5
  4324                           
  4325  0075                     Adc_SelectChannel@SelCh:	
  4326                           ; 1 bytes @ 0x5
  4327                           
  4328  0075                     ClearRxBuffer@Index:	
  4329                           ; 1 bytes @ 0x5
  4330                           
  4331  0075                     ClearTxBuffer@Index:	
  4332                           ; 1 bytes @ 0x5
  4333                           
  4334  0075                     LedBlinkStateMachine@LedBlink:	
  4335                           ; 1 bytes @ 0x5
  4336                           
  4337  0075                     Mcu_SetWdgPeriod@WdgPeriod:	
  4338                           ; 1 bytes @ 0x5
  4339                           
  4340  0075                     TmrBInit@Postscaler:	
  4341                           ; 1 bytes @ 0x5
  4342                           
  4343  0075                     Tmr_TmrBIrqSet@TmrNumb:	
  4344                           ; 1 bytes @ 0x5
  4345                           
  4346  0075                     ReceiveEvt@Event:	
  4347                           ; 1 bytes @ 0x5
  4348                           
  4349  0075                     ___lwmod@counter:	
  4350                           ; 1 bytes @ 0x5
  4351                           
  4352                           
  4353                           ; 1 bytes @ 0x5
  4354  0075                     	ds	1
  4355  0076                     ??_SystemInit:	
  4356  0076                     ??_MainScheduler:	
  4357                           ; 1 bytes @ 0x6
  4358                           
  4359  0076                     ??_I2cSlv_MainTask:	
  4360                           ; 1 bytes @ 0x6
  4361                           
  4362  0076                     ??_Wdg_MainTask:	
  4363                           ; 1 bytes @ 0x6
  4364                           
  4365  0076                     ??_main:	
  4366                           ; 1 bytes @ 0x6
  4367                           
  4368  0076                     ??_Led_SetLedPulseTime:	
  4369                           ; 1 bytes @ 0x6
  4370                           
  4371  0076                     ??_ControlLedDirect:	
  4372                           ; 1 bytes @ 0x6
  4373                           
  4374  0076                     ??_GetDieTemperature:	
  4375                           ; 1 bytes @ 0x6
  4376                           
  4377  0076                     ??___lmul:	
  4378                           ; 1 bytes @ 0x6
  4379                           
  4380                           
  4381                           	psect	cstackBANK0
  4382  0020                     __pcstackBANK0:	
  4383                           ; 1 bytes @ 0x6
  4384                           
  4385  0020                     ??_Adc_GetConvResult:	
  4386  0020                     ??_I2c_InitI2cModule:	
  4387                           ; 1 bytes @ 0x0
  4388                           
  4389  0020                     ??_I2c_UpdateTxBuffer:	
  4390                           ; 1 bytes @ 0x0
  4391                           
  4392  0020                     ??_TmrBInit:	
  4393                           ; 1 bytes @ 0x0
  4394                           
  4395  0020                     ?_Npdrv_Ch1_WriteNeopixelColor:	
  4396                           ; 1 bytes @ 0x0
  4397                           
  4398  0020                     ?_Npdrv_Ch2_WriteNeopixelColor:	
  4399                           ; 1 bytes @ 0x0
  4400                           
  4401  0020                     ?_Npdrv_Ch3_WriteNeopixelColor:	
  4402                           ; 1 bytes @ 0x0
  4403                           
  4404  0020                     ?_Led_SetLedBlinkTime:	
  4405                           ; 1 bytes @ 0x0
  4406                           
  4407  0020                     ?_StringCopy:	
  4408                           ; 1 bytes @ 0x0
  4409                           
  4410  0020                     ?___wmul:	
  4411                           ; 1 bytes @ 0x0
  4412                           
  4413  0020                     ?___lwdiv:	
  4414                           ; 2 bytes @ 0x0
  4415                           
  4416  0020                     ?___lwmod:	
  4417                           ; 2 bytes @ 0x0
  4418                           
  4419  0020                     ?___lldiv:	
  4420                           ; 2 bytes @ 0x0
  4421                           
  4422  0020                     Npdrv_Ch1_WriteNeopixelColor@Green:	
  4423                           ; 4 bytes @ 0x0
  4424                           
  4425  0020                     Npdrv_Ch2_WriteNeopixelColor@Green:	
  4426                           ; 1 bytes @ 0x0
  4427                           
  4428  0020                     Npdrv_Ch3_WriteNeopixelColor@Green:	
  4429                           ; 1 bytes @ 0x0
  4430                           
  4431  0020                     GenerateEvt@EventStatus:	
  4432                           ; 1 bytes @ 0x0
  4433                           
  4434  0020                     Led_SetLedStatus@Led:	
  4435                           ; 1 bytes @ 0x0
  4436                           
  4437  0020                     Led_SetLedPulseTime@Led:	
  4438                           ; 1 bytes @ 0x0
  4439                           
  4440  0020                     Led_SetLedBlinkTime@OnTimeMs:	
  4441                           ; 1 bytes @ 0x0
  4442                           
  4443  0020                     StringCopy@SourceStr:	
  4444                           ; 2 bytes @ 0x0
  4445                           
  4446  0020                     ___wmul@multiplier:	
  4447                           ; 2 bytes @ 0x0
  4448                           
  4449  0020                     ___lwdiv@divisor:	
  4450                           ; 2 bytes @ 0x0
  4451                           
  4452  0020                     ___lwmod@divisor:	
  4453                           ; 2 bytes @ 0x0
  4454                           
  4455  0020                     ___lldiv@divisor:	
  4456                           ; 2 bytes @ 0x0
  4457                           
  4458                           
  4459                           ; 4 bytes @ 0x0
  4460  0020                     	ds	1
  4461  0021                     TmrBInit@TmrNumb:	
  4462  0021                     Npdrv_Ch1_WriteNeopixelColor@Red:	
  4463                           ; 1 bytes @ 0x1
  4464                           
  4465  0021                     Npdrv_Ch2_WriteNeopixelColor@Red:	
  4466                           ; 1 bytes @ 0x1
  4467                           
  4468  0021                     Npdrv_Ch3_WriteNeopixelColor@Red:	
  4469                           ; 1 bytes @ 0x1
  4470                           
  4471  0021                     GenerateEvt@Event:	
  4472                           ; 1 bytes @ 0x1
  4473                           
  4474  0021                     Adc_GetConvResult@AdcResult:	
  4475                           ; 1 bytes @ 0x1
  4476                           
  4477                           
  4478                           ; 2 bytes @ 0x1
  4479  0021                     	ds	1
  4480  0022                     I2c_InitI2cModule@I2cConfig:	
  4481  0022                     I2c_UpdateTxBuffer@DataBuffer:	
  4482                           ; 1 bytes @ 0x2
  4483                           
  4484  0022                     Npdrv_Ch1_WriteNeopixelColor@Blue:	
  4485                           ; 1 bytes @ 0x2
  4486                           
  4487  0022                     Npdrv_Ch2_WriteNeopixelColor@Blue:	
  4488                           ; 1 bytes @ 0x2
  4489                           
  4490  0022                     Npdrv_Ch3_WriteNeopixelColor@Blue:	
  4491                           ; 1 bytes @ 0x2
  4492                           
  4493  0022                     StringCopy@DestStr:	
  4494                           ; 1 bytes @ 0x2
  4495                           
  4496  0022                     Led_SetLedBlinkTime@OffTimeMs:	
  4497                           ; 1 bytes @ 0x2
  4498                           
  4499  0022                     ___wmul@multiplicand:	
  4500                           ; 2 bytes @ 0x2
  4501                           
  4502  0022                     ___lwdiv@dividend:	
  4503                           ; 2 bytes @ 0x2
  4504                           
  4505  0022                     ___lwmod@dividend:	
  4506                           ; 2 bytes @ 0x2
  4507                           
  4508                           
  4509                           ; 2 bytes @ 0x2
  4510  0022                     	ds	1
  4511  0023                     ?_GetDieTemperature:	
  4512  0023                     I2c_UpdateTxBuffer@Index:	
  4513                           ; 2 bytes @ 0x3
  4514                           
  4515  0023                     StringCopy@Len:	
  4516                           ; 1 bytes @ 0x3
  4517                           
  4518  0023                     Npdrv_Ch1_WriteNeopixelColor@GreenBitArray:	
  4519                           ; 1 bytes @ 0x3
  4520                           
  4521  0023                     Npdrv_Ch2_WriteNeopixelColor@GreenBitArray:	
  4522                           ; 8 bytes @ 0x3
  4523                           
  4524  0023                     Npdrv_Ch3_WriteNeopixelColor@GreenBitArray:	
  4525                           ; 8 bytes @ 0x3
  4526                           
  4527                           
  4528                           ; 8 bytes @ 0x3
  4529  0023                     	ds	1
  4530  0024                     ??_I2cSlv_I2cDrvHandle:	
  4531  0024                     ??_SetLedBehavSts:	
  4532                           ; 1 bytes @ 0x4
  4533                           
  4534  0024                     ??_StringCopy:	
  4535                           ; 1 bytes @ 0x4
  4536                           
  4537  0024                     ?___lmul:	
  4538                           ; 1 bytes @ 0x4
  4539                           
  4540  0024                     ___lwdiv@counter:	
  4541                           ; 4 bytes @ 0x4
  4542                           
  4543  0024                     ___lmul@multiplier:	
  4544                           ; 1 bytes @ 0x4
  4545                           
  4546  0024                     ___lldiv@dividend:	
  4547                           ; 4 bytes @ 0x4
  4548                           
  4549                           
  4550                           ; 4 bytes @ 0x4
  4551  0024                     	ds	1
  4552  0025                     SetLedBehavSts@LedBehav:	
  4553  0025                     GetDieTemperature@DieTempRes:	
  4554                           ; 1 bytes @ 0x5
  4555                           
  4556  0025                     ___lwdiv@quotient:	
  4557                           ; 2 bytes @ 0x5
  4558                           
  4559                           
  4560                           ; 2 bytes @ 0x5
  4561  0025                     	ds	2
  4562  0027                     ?_utoa:	
  4563  0027                     ??_LedBlinkStateMachine:	
  4564                           ; 1 bytes @ 0x7
  4565                           
  4566  0027                     ?_LedPulseStateMachine:	
  4567                           ; 1 bytes @ 0x7
  4568                           
  4569  0027                     LedPulseStateMachine@Led:	
  4570                           ; 1 bytes @ 0x7
  4571                           
  4572  0027                     utoa@val:	
  4573                           ; 1 bytes @ 0x7
  4574                           
  4575                           
  4576                           ; 2 bytes @ 0x7
  4577  0027                     	ds	1
  4578  0028                     ??_LedPulseStateMachine:	
  4579  0028                     ___lmul@multiplicand:	
  4580                           ; 1 bytes @ 0x8
  4581                           
  4582  0028                     ___lldiv@quotient:	
  4583                           ; 4 bytes @ 0x8
  4584                           
  4585                           
  4586                           ; 4 bytes @ 0x8
  4587  0028                     	ds	1
  4588  0029                     I2cSlv_I2cDrvHandle@Index:	
  4589  0029                     utoa@base:	
  4590                           ; 1 bytes @ 0x9
  4591                           
  4592                           
  4593                           ; 2 bytes @ 0x9
  4594  0029                     	ds	1
  4595  002A                     LedPulseStateMachine@LedPulse:	
  4596                           
  4597                           ; 1 bytes @ 0xA
  4598  002A                     	ds	1
  4599  002B                     ??_utoa:	
  4600  002B                     ?_LedStateMachine:	
  4601                           ; 1 bytes @ 0xB
  4602                           
  4603  002B                     LedStateMachine@LedSts:	
  4604                           ; 1 bytes @ 0xB
  4605                           
  4606  002B                     Npdrv_Ch1_WriteNeopixelColor@RedBitArray:	
  4607                           ; 1 bytes @ 0xB
  4608                           
  4609  002B                     Npdrv_Ch2_WriteNeopixelColor@RedBitArray:	
  4610                           ; 8 bytes @ 0xB
  4611                           
  4612  002B                     Npdrv_Ch3_WriteNeopixelColor@RedBitArray:	
  4613                           ; 8 bytes @ 0xB
  4614                           
  4615                           
  4616                           ; 8 bytes @ 0xB
  4617  002B                     	ds	1
  4618  002C                     LedStateMachine@LedBlink:	
  4619  002C                     ___lldiv@counter:	
  4620                           ; 1 bytes @ 0xC
  4621                           
  4622  002C                     utoa@v:	
  4623                           ; 1 bytes @ 0xC
  4624                           
  4625  002C                     ___lmul@product:	
  4626                           ; 2 bytes @ 0xC
  4627                           
  4628                           
  4629                           ; 4 bytes @ 0xC
  4630  002C                     	ds	1
  4631  002D                     LedStateMachine@LedPulse:	
  4632                           
  4633                           ; 1 bytes @ 0xD
  4634  002D                     	ds	1
  4635  002E                     ??_LedStateMachine:	
  4636  002E                     utoa@c:	
  4637                           ; 1 bytes @ 0xE
  4638                           
  4639                           
  4640                           ; 1 bytes @ 0xE
  4641  002E                     	ds	1
  4642  002F                     utoa@buf:	
  4643                           
  4644                           ; 1 bytes @ 0xF
  4645  002F                     	ds	1
  4646  0030                     ?_Tmr_TmrBPrSet:	
  4647  0030                     ??_StdS_ManageStdServices:	
  4648                           ; 1 bytes @ 0x10
  4649                           
  4650  0030                     LedStateMachine@Led:	
  4651                           ; 1 bytes @ 0x10
  4652                           
  4653  0030                     Tmr_TmrBPrSet@IntFreqHz:	
  4654                           ; 1 bytes @ 0x10
  4655                           
  4656                           
  4657                           ; 2 bytes @ 0x10
  4658  0030                     	ds	1
  4659  0031                     LedStateMachine@LedOutSts:	
  4660                           
  4661                           ; 1 bytes @ 0x11
  4662  0031                     	ds	1
  4663  0032                     Tmr_TmrBPrSet@Prescaler:	
  4664  0032                     StdS_ManageStdServices@DieTempStr:	
  4665                           ; 1 bytes @ 0x12
  4666                           
  4667                           
  4668                           ; 4 bytes @ 0x12
  4669  0032                     	ds	1
  4670  0033                     Tmr_TmrBPrSet@Postscaler:	
  4671  0033                     Npdrv_Ch1_WriteNeopixelColor@BlueBitArray:	
  4672                           ; 1 bytes @ 0x13
  4673                           
  4674  0033                     Npdrv_Ch2_WriteNeopixelColor@BlueBitArray:	
  4675                           ; 8 bytes @ 0x13
  4676                           
  4677  0033                     Npdrv_Ch3_WriteNeopixelColor@BlueBitArray:	
  4678                           ; 8 bytes @ 0x13
  4679                           
  4680                           
  4681                           ; 8 bytes @ 0x13
  4682  0033                     	ds	1
  4683  0034                     ??_Tmr_TmrBPrSet:	
  4684                           
  4685                           ; 1 bytes @ 0x14
  4686  0034                     	ds	2
  4687  0036                     StdS_ManageStdServices@DieTemp:	
  4688                           
  4689                           ; 2 bytes @ 0x16
  4690  0036                     	ds	5
  4691  003B                     Npdrv_Ch1_WriteNeopixelColor@PixNumb:	
  4692  003B                     Npdrv_Ch2_WriteNeopixelColor@PixNumb:	
  4693                           ; 1 bytes @ 0x1B
  4694                           
  4695  003B                     Npdrv_Ch3_WriteNeopixelColor@PixNumb:	
  4696                           ; 1 bytes @ 0x1B
  4697                           
  4698                           
  4699                           ; 1 bytes @ 0x1B
  4700  003B                     	ds	1
  4701  003C                     Tmr_TmrBPrSet@TmrNumb:	
  4702  003C                     Npdrv_Ch1_WriteNeopixelColor@j:	
  4703                           ; 1 bytes @ 0x1C
  4704                           
  4705  003C                     Npdrv_Ch2_WriteNeopixelColor@j:	
  4706                           ; 1 bytes @ 0x1C
  4707                           
  4708  003C                     Npdrv_Ch3_WriteNeopixelColor@j:	
  4709                           ; 1 bytes @ 0x1C
  4710                           
  4711                           
  4712                           ; 1 bytes @ 0x1C
  4713  003C                     	ds	1
  4714  003D                     Tmr_TmrBPrSet@TmrBPrCfgSts:	
  4715  003D                     Npdrv_Ch1_WriteNeopixelColor@i:	
  4716                           ; 1 bytes @ 0x1D
  4717                           
  4718  003D                     Npdrv_Ch2_WriteNeopixelColor@i:	
  4719                           ; 1 bytes @ 0x1D
  4720                           
  4721  003D                     Npdrv_Ch3_WriteNeopixelColor@i:	
  4722                           ; 1 bytes @ 0x1D
  4723                           
  4724                           
  4725                           ; 1 bytes @ 0x1D
  4726  003D                     	ds	1
  4727  003E                     ??_ManageProtocol:	
  4728  003E                     Tmr_TmrBPrSet@Divisor:	
  4729                           ; 1 bytes @ 0x1E
  4730                           
  4731                           
  4732                           ; 4 bytes @ 0x1E
  4733  003E                     	ds	3
  4734  0041                     ??_AppSm:	
  4735                           
  4736                           ; 1 bytes @ 0x21
  4737  0041                     	ds	1
  4738  0042                     ?_I2cSlv_MainTask:	
  4739  0042                     ?_Wdg_MainTask:	
  4740                           ; 1 bytes @ 0x22
  4741                           
  4742  0042                     ?_Led_MainTask:	
  4743                           ; 1 bytes @ 0x22
  4744                           
  4745  0042                     ?_App_MainTask:	
  4746                           ; 1 bytes @ 0x22
  4747                           
  4748  0042                     ?_I2c_DataReceiveSm:	
  4749                           ; 1 bytes @ 0x22
  4750                           
  4751  0042                     ?_Tmr_TmrBConfig:	
  4752                           ; 1 bytes @ 0x22
  4753                           
  4754  0042                     I2c_DataReceiveSm@Options:	
  4755                           ; 1 bytes @ 0x22
  4756                           
  4757  0042                     Tmr_TmrBConfig@TmrBConfig:	
  4758                           ; 1 bytes @ 0x22
  4759                           
  4760  0042                     I2cSlv_MainTask@Options:	
  4761                           ; 1 bytes @ 0x22
  4762                           
  4763  0042                     Led_MainTask@Options:	
  4764                           ; 1 bytes @ 0x22
  4765                           
  4766  0042                     Wdg_MainTask@Options:	
  4767                           ; 1 bytes @ 0x22
  4768                           
  4769  0042                     App_MainTask@Options:	
  4770                           ; 1 bytes @ 0x22
  4771                           
  4772                           
  4773                           ; 1 bytes @ 0x22
  4774  0042                     	ds	1
  4775  0043                     ??_Led_MainTask:	
  4776  0043                     ??_App_MainTask:	
  4777                           ; 1 bytes @ 0x23
  4778                           
  4779  0043                     ??_I2c_DataReceiveSm:	
  4780                           ; 1 bytes @ 0x23
  4781                           
  4782  0043                     ??_Tmr_TmrBConfig:	
  4783                           ; 1 bytes @ 0x23
  4784                           
  4785                           
  4786                           ; 1 bytes @ 0x23
  4787  0043                     	ds	1
  4788  0044                     Tmr_TmrBConfig@TmrNumb:	
  4789  0044                     App_MainTask@AnalogChSel:	
  4790                           ; 1 bytes @ 0x24
  4791                           
  4792                           
  4793                           ; 12 bytes @ 0x24
  4794  0044                     	ds	1
  4795  0045                     ??_InitSchTimer:	
  4796                           
  4797                           ; 1 bytes @ 0x25
  4798  0045                     	ds	1
  4799  0046                     InitSchTimer@TmrBConfig:	
  4800                           
  4801                           ; 6 bytes @ 0x26
  4802  0046                     	ds	4
  4803  004A                     I2c_DataReceiveSm@Index:	
  4804                           
  4805                           ; 1 bytes @ 0x2A
  4806  004A                     	ds	6
  4807  0050                     App_MainTask@Index:	
  4808                           
  4809                           ; 1 bytes @ 0x30
  4810  0050                     	ds	1
  4811  0051                     App_MainTask@AdcConfig:	
  4812                           
  4813                           ; 6 bytes @ 0x31
  4814  0051                     	ds	6
  4815  0057                     App_MainTask@WpuCh:	
  4816                           
  4817                           ; 18 bytes @ 0x37
  4818  0057                     	ds	18
  4819  0069                     ??_InitializeTasks:	
  4820  0069                     ScheduleTasks@ActiveTaskIndex:	
  4821                           ; 1 bytes @ 0x49
  4822                           
  4823                           
  4824                           ; 1 bytes @ 0x49
  4825  0069                     	ds	4
  4826                           
  4827                           	psect	maintext
  4828  15E0                     __pmaintext:	
  4829 ;;
  4830 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  4831 ;;
  4832 ;; *************** function _main *****************
  4833 ;; Defined at:
  4834 ;;		line 57 in file "../../../Framework/MercuryFwk/Source/c/00_Main/main.c"
  4835 ;; Parameters:    Size  Location     Type
  4836 ;;		None
  4837 ;; Auto vars:     Size  Location     Type
  4838 ;;		None
  4839 ;; Return value:  Size  Location     Type
  4840 ;;                  2   12[None  ] short 
  4841 ;; Registers used:
  4842 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4843 ;; Tracked objects:
  4844 ;;		On entry : B1F/0
  4845 ;;		On exit  : 0/0
  4846 ;;		Unchanged: 0/0
  4847 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4848 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4849 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4850 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4851 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4852 ;;Total ram usage:        0 bytes
  4853 ;; Hardware stack levels required when called:   10
  4854 ;; This function calls:
  4855 ;;		_MainScheduler
  4856 ;;		_SystemInit
  4857 ;; This function is called by:
  4858 ;;		Startup code after reset
  4859 ;; This function uses a non-reentrant model
  4860 ;;
  4861                           
  4862                           
  4863                           ;psect for function _main
  4864  15E0                     _main:	
  4865                           
  4866                           ;main.c: 60: SystemInit();
  4867                           
  4868                           ;incstack = 0
  4869                           ; Regs used in _main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  4870  15E0  3187  27F7  3195   	fcall	_SystemInit
  4871                           
  4872                           ;main.c: 63: MainScheduler();
  4873  15E3  3188  2000         	fcall	_MainScheduler
  4874                           
  4875                           ;main.c: 66: return 0;
  4876                           ;	Return value of _main is never used
  4877  15E5  3180  282B         	ljmp	start
  4878  15E7                     __end_of_main:	
  4879                           
  4880                           	psect	text1
  4881  07F7                     __ptext1:	
  4882 ;; *************** function _SystemInit *****************
  4883 ;; Defined at:
  4884 ;;		line 98 in file "../Source/c/04_App/sys_init.c"
  4885 ;; Parameters:    Size  Location     Type
  4886 ;;		None
  4887 ;; Auto vars:     Size  Location     Type
  4888 ;;		None
  4889 ;; Return value:  Size  Location     Type
  4890 ;;                  1    wreg      void 
  4891 ;; Registers used:
  4892 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4893 ;; Tracked objects:
  4894 ;;		On entry : 0/0
  4895 ;;		On exit  : 0/0
  4896 ;;		Unchanged: 0/0
  4897 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4898 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4899 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4900 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4901 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4902 ;;Total ram usage:        0 bytes
  4903 ;; Hardware stack levels used:    1
  4904 ;; Hardware stack levels required when called:    6
  4905 ;; This function calls:
  4906 ;;		_InitSchTimer
  4907 ;;		_Mcu_EnableInterrupts
  4908 ;;		_Mcu_StartSystemPll
  4909 ;; This function is called by:
  4910 ;;		_main
  4911 ;; This function uses a non-reentrant model
  4912 ;;
  4913                           
  4914                           
  4915                           ;psect for function _SystemInit
  4916  07F7                     _SystemInit:	
  4917                           
  4918                           ;sys_init.c: 101: Mcu_StartSystemPll();
  4919                           
  4920                           ;incstack = 0
  4921                           ; Regs used in _SystemInit: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  4922  07F7  3195  25CF  3187   	fcall	_Mcu_StartSystemPll
  4923                           
  4924                           ;sys_init.c: 103: InitSchTimer();
  4925  07FA  3197  271A  3187   	fcall	_InitSchTimer
  4926                           
  4927                           ;sys_init.c: 105: Mcu_EnableInterrupts();
  4928  07FD  3195  25C9         	fcall	_Mcu_EnableInterrupts
  4929  07FF  0008               	return
  4930  0800                     __end_of_SystemInit:	
  4931                           
  4932                           	psect	text2
  4933  15CF                     __ptext2:	
  4934 ;; *************** function _Mcu_StartSystemPll *****************
  4935 ;; Defined at:
  4936 ;;		line 127 in file "../../../Framework/MercuryFwk/Source/c/01_Hal/02_Drv/mcu_drv.c"
  4937 ;; Parameters:    Size  Location     Type
  4938 ;;		None
  4939 ;; Auto vars:     Size  Location     Type
  4940 ;;		None
  4941 ;; Return value:  Size  Location     Type
  4942 ;;                  1    wreg      void 
  4943 ;; Registers used:
  4944 ;;		None
  4945 ;; Tracked objects:
  4946 ;;		On entry : 0/0
  4947 ;;		On exit  : 0/0
  4948 ;;		Unchanged: 0/0
  4949 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4950 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4951 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4952 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4953 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4954 ;;Total ram usage:        0 bytes
  4955 ;; Hardware stack levels used:    1
  4956 ;; Hardware stack levels required when called:    2
  4957 ;; This function calls:
  4958 ;;		Nothing
  4959 ;; This function is called by:
  4960 ;;		_SystemInit
  4961 ;; This function uses a non-reentrant model
  4962 ;;
  4963                           
  4964                           
  4965                           ;psect for function _Mcu_StartSystemPll
  4966  15CF                     _Mcu_StartSystemPll:	
  4967                           
  4968                           ;mcu_drv.c: 130: OSCCONbits.SPLLEN = ((UINT8)(1));
  4969                           
  4970                           ;incstack = 0
  4971                           ; Regs used in _Mcu_StartSystemPll: []
  4972  15CF  0021               	movlb	1	; select bank1
  4973  15D0  1799               	bsf	25,7	;volatile
  4974  15D1  0008               	return
  4975  15D2                     __end_of_Mcu_StartSystemPll:	
  4976                           
  4977                           	psect	text3
  4978  171A                     __ptext3:	
  4979 ;; *************** function _InitSchTimer *****************
  4980 ;; Defined at:
  4981 ;;		line 71 in file "../Source/c/04_App/sys_init.c"
  4982 ;; Parameters:    Size  Location     Type
  4983 ;;		None
  4984 ;; Auto vars:     Size  Location     Type
  4985 ;;  TmrBConfig      6   38[BANK0 ] struct _TmrBConfigType
  4986 ;; Return value:  Size  Location     Type
  4987 ;;                  1    wreg      void 
  4988 ;; Registers used:
  4989 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4990 ;; Tracked objects:
  4991 ;;		On entry : 0/0
  4992 ;;		On exit  : 0/0
  4993 ;;		Unchanged: 0/0
  4994 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4995 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4996 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4997 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4998 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4999 ;;Total ram usage:        7 bytes
  5000 ;; Hardware stack levels used:    1
  5001 ;; Hardware stack levels required when called:    5
  5002 ;; This function calls:
  5003 ;;		_Tmr_TmrBConfig
  5004 ;; This function is called by:
  5005 ;;		_SystemInit
  5006 ;; This function uses a non-reentrant model
  5007 ;;
  5008                           
  5009                           
  5010                           ;psect for function _InitSchTimer
  5011  171A                     _InitSchTimer:	
  5012                           
  5013                           ;sys_init.c: 73: TmrBConfigType TmrBConfig;
  5014                           ;sys_init.c: 76: TmrBConfig.PreScaler = 1;
  5015                           
  5016                           ;incstack = 0
  5017                           ; Regs used in _InitSchTimer: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  5018  171A  0020               	movlb	0	; select bank0
  5019  171B  01C6               	clrf	InitSchTimer@TmrBConfig
  5020  171C  0AC6               	incf	InitSchTimer@TmrBConfig,f
  5021                           
  5022                           ;sys_init.c: 77: TmrBConfig.PostScaler = 8;
  5023  171D  3008               	movlw	8
  5024  171E  00C5               	movwf	??_InitSchTimer
  5025  171F  0845               	movf	??_InitSchTimer,w
  5026  1720  00C7               	movwf	InitSchTimer@TmrBConfig+1
  5027                           
  5028                           ;sys_init.c: 78: TmrBConfig.IntEnable = 1u;
  5029  1721  01C8               	clrf	InitSchTimer@TmrBConfig+2
  5030  1722  0AC8               	incf	InitSchTimer@TmrBConfig+2,f
  5031                           
  5032                           ;sys_init.c: 79: TmrBConfig.IntFreqHz = 10000;
  5033  1723  3010               	movlw	16
  5034  1724  00C9               	movwf	InitSchTimer@TmrBConfig+3
  5035  1725  3027               	movlw	39
  5036  1726  00CA               	movwf	InitSchTimer@TmrBConfig+4
  5037                           
  5038                           ;sys_init.c: 80: TmrBConfig.StartTmrRequest = StartTmrReq;
  5039  1727  01CB               	clrf	InitSchTimer@TmrBConfig+5
  5040  1728  0ACB               	incf	InitSchTimer@TmrBConfig+5,f
  5041                           
  5042                           ;sys_init.c: 83: Tmr_TmrBConfig(((UINT8)(2)),&TmrBConfig);
  5043  1729  3046               	movlw	(low (InitSchTimer@TmrBConfig| 0))& (0+255)
  5044  172A  00C5               	movwf	??_InitSchTimer
  5045  172B  0845               	movf	??_InitSchTimer,w
  5046  172C  00C2               	movwf	Tmr_TmrBConfig@TmrBConfig
  5047  172D  3002               	movlw	2
  5048  172E  318A  224B         	fcall	_Tmr_TmrBConfig
  5049  1730  0008               	return
  5050  1731                     __end_of_InitSchTimer:	
  5051                           
  5052                           	psect	text4
  5053  0A4B                     __ptext4:	
  5054 ;; *************** function _Tmr_TmrBConfig *****************
  5055 ;; Defined at:
  5056 ;;		line 313 in file "../../../Framework/MercuryFwk/Source/c/01_Hal/02_Drv/tmr_drv.c"
  5057 ;; Parameters:    Size  Location     Type
  5058 ;;  TmrNumb         1    wreg     unsigned char 
  5059 ;;  TmrBConfig      1   34[BANK0 ] PTR struct _TmrBConfigTy
  5060 ;;		 -> InitSchTimer@TmrBConfig(6), 
  5061 ;; Auto vars:     Size  Location     Type
  5062 ;;  TmrNumb         1   36[BANK0 ] unsigned char 
  5063 ;; Return value:  Size  Location     Type
  5064 ;;                  1    wreg      void 
  5065 ;; Registers used:
  5066 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5067 ;; Tracked objects:
  5068 ;;		On entry : 0/0
  5069 ;;		On exit  : 0/0
  5070 ;;		Unchanged: 0/0
  5071 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5072 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5073 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5074 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5075 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5076 ;;Total ram usage:        3 bytes
  5077 ;; Hardware stack levels used:    1
  5078 ;; Hardware stack levels required when called:    4
  5079 ;; This function calls:
  5080 ;;		_TmrBInit
  5081 ;;		_Tmr_StartTmr
  5082 ;;		_Tmr_TmrBIrqSet
  5083 ;;		_Tmr_TmrBPrSet
  5084 ;; This function is called by:
  5085 ;;		_InitSchTimer
  5086 ;; This function uses a non-reentrant model
  5087 ;;
  5088                           
  5089                           
  5090                           ;psect for function _Tmr_TmrBConfig
  5091  0A4B                     _Tmr_TmrBConfig:	
  5092                           
  5093                           ;incstack = 0
  5094                           ; Regs used in _Tmr_TmrBConfig: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  5095                           ;Tmr_TmrBConfig@TmrNumb stored from wreg
  5096  0A4B  0020               	movlb	0	; select bank0
  5097  0A4C  00C4               	movwf	Tmr_TmrBConfig@TmrNumb
  5098                           
  5099                           ;tmr_drv.c: 316: TmrBInit(TmrNumb,TmrBConfig->PreScaler,TmrBConfig->PostScaler);
  5100  0A4D  0842               	movf	Tmr_TmrBConfig@TmrBConfig,w
  5101  0A4E  0086               	movwf	6
  5102  0A4F  0187               	clrf	7
  5103  0A50  0801               	movf	1,w
  5104  0A51  00C3               	movwf	??_Tmr_TmrBConfig
  5105  0A52  0843               	movf	??_Tmr_TmrBConfig,w
  5106  0A53  00F4               	movwf	TmrBInit@Prescaler
  5107  0A54  0842               	movf	Tmr_TmrBConfig@TmrBConfig,w
  5108  0A55  0086               	movwf	6
  5109  0A56  0187               	clrf	7
  5110  0A57  3F41               	moviw [1]fsr1
  5111  0A58  00F5               	movwf	TmrBInit@Postscaler
  5112  0A59  0844               	movf	Tmr_TmrBConfig@TmrNumb,w
  5113  0A5A  318C  2471  318A   	fcall	_TmrBInit
  5114                           
  5115                           ;tmr_drv.c: 318: if (TmrBConfig->IntEnable == EnableInt)
  5116  0A5D  0020               	movlb	0	; select bank0
  5117  0A5E  0842               	movf	Tmr_TmrBConfig@TmrBConfig,w
  5118  0A5F  3E02               	addlw	2
  5119  0A60  0086               	movwf	6
  5120  0A61  0187               	clrf	7
  5121  0A62  0301               	decf	1,w
  5122  0A63  1D03               	btfss	3,2
  5123  0A64  2A68               	goto	l5167
  5124                           
  5125                           ;tmr_drv.c: 319: {
  5126                           ;tmr_drv.c: 321: Tmr_TmrBIrqSet(TmrNumb,((UINT8)(1)));
  5127  0A65  01F4               	clrf	Tmr_TmrBIrqSet@TmrIrqSts
  5128  0A66  0AF4               	incf	Tmr_TmrBIrqSet@TmrIrqSts,f
  5129  0A67  2A6A               	goto	L1
  5130  0A68                     l5167:	
  5131                           ;tmr_drv.c: 322: }
  5132                           
  5133                           
  5134                           ;tmr_drv.c: 323: else
  5135                           ;tmr_drv.c: 324: {
  5136                           ;tmr_drv.c: 326: Tmr_TmrBIrqSet(TmrNumb,((UINT8)(0)));
  5137  0A68  01F4               	clrf	Tmr_TmrBIrqSet@TmrIrqSts
  5138  0A69  0020               	movlb	0	; select bank0
  5139  0A6A                     L1:	
  5140  0A6A  0844               	movf	Tmr_TmrBConfig@TmrNumb,w
  5141  0A6B  3188  205C  318A   	fcall	_Tmr_TmrBIrqSet
  5142                           
  5143                           ;tmr_drv.c: 327: }
  5144                           ;tmr_drv.c: 329: if (Tmr_TmrBPrSet(TmrNumb,TmrBConfig->IntFreqHz,TmrBConfig->PreScaler,T
      +                          mrBConfig->PostScaler) == CfgError)
  5145  0A6E  0020               	movlb	0	; select bank0
  5146  0A6F  0842               	movf	Tmr_TmrBConfig@TmrBConfig,w
  5147  0A70  3E03               	addlw	3
  5148  0A71  0086               	movwf	6
  5149  0A72  0187               	clrf	7
  5150  0A73  3F40               	moviw [0]fsr1
  5151  0A74  00B0               	movwf	Tmr_TmrBPrSet@IntFreqHz
  5152  0A75  3F41               	moviw [1]fsr1
  5153  0A76  00B1               	movwf	Tmr_TmrBPrSet@IntFreqHz+1
  5154  0A77  0842               	movf	Tmr_TmrBConfig@TmrBConfig,w
  5155  0A78  0086               	movwf	6
  5156  0A79  0187               	clrf	7
  5157  0A7A  0801               	movf	1,w
  5158  0A7B  00C3               	movwf	??_Tmr_TmrBConfig
  5159  0A7C  0843               	movf	??_Tmr_TmrBConfig,w
  5160  0A7D  00B2               	movwf	Tmr_TmrBPrSet@Prescaler
  5161  0A7E  0842               	movf	Tmr_TmrBConfig@TmrBConfig,w
  5162  0A7F  0086               	movwf	6
  5163  0A80  0187               	clrf	7
  5164  0A81  3F41               	moviw [1]fsr1
  5165  0A82  00B3               	movwf	Tmr_TmrBPrSet@Postscaler
  5166  0A83  0844               	movf	Tmr_TmrBConfig@TmrNumb,w
  5167  0A84  3187  2741  318A   	fcall	_Tmr_TmrBPrSet
  5168  0A87  3A01               	xorlw	1
  5169  0A88  1903               	btfsc	3,2
  5170  0A89                     l353:	
  5171                           ;tmr_drv.c: 330: {
  5172                           ;tmr_drv.c: 332: while(1);
  5173                           
  5174  0A89  2A89               	goto	l353
  5175                           
  5176                           ;tmr_drv.c: 333: }
  5177                           ;tmr_drv.c: 335: if (TmrBConfig->StartTmrRequest == StartTmrReq)
  5178  0A8A  0020               	movlb	0	; select bank0
  5179  0A8B  0842               	movf	Tmr_TmrBConfig@TmrBConfig,w
  5180  0A8C  3E05               	addlw	5
  5181  0A8D  0086               	movwf	6
  5182  0A8E  0187               	clrf	7
  5183  0A8F  0301               	decf	1,w
  5184  0A90  1D03               	btfss	3,2
  5185  0A91  0008               	return
  5186                           
  5187                           ;tmr_drv.c: 336: {
  5188                           ;tmr_drv.c: 338: Tmr_StartTmr(TmrNumb);
  5189  0A92  0844               	movf	Tmr_TmrBConfig@TmrNumb,w
  5190  0A93  3197  2703         	fcall	_Tmr_StartTmr
  5191                           
  5192                           ;tmr_drv.c: 339: }
  5193  0A95  0008               	return
  5194  0A96                     __end_of_Tmr_TmrBConfig:	
  5195                           ;tmr_drv.c: 340: else
  5196                           ;tmr_drv.c: 341: {
  5197                           
  5198                           
  5199                           	psect	text5
  5200  0741                     __ptext5:	
  5201 ;; *************** function _Tmr_TmrBPrSet *****************
  5202 ;; Defined at:
  5203 ;;		line 225 in file "../../../Framework/MercuryFwk/Source/c/01_Hal/02_Drv/tmr_drv.c"
  5204 ;; Parameters:    Size  Location     Type
  5205 ;;  TmrNumb         1    wreg     unsigned char 
  5206 ;;  IntFreqHz       2   16[BANK0 ] unsigned short 
  5207 ;;  Prescaler       1   18[BANK0 ] unsigned char 
  5208 ;;  Postscaler      1   19[BANK0 ] unsigned char 
  5209 ;; Auto vars:     Size  Location     Type
  5210 ;;  TmrNumb         1   28[BANK0 ] unsigned char 
  5211 ;;  Divisor         4   30[BANK0 ] unsigned long 
  5212 ;;  TmrBPrCfgSts    1   29[BANK0 ] enum E3647
  5213 ;; Return value:  Size  Location     Type
  5214 ;;                  1    wreg      enum E3647
  5215 ;; Registers used:
  5216 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  5217 ;; Tracked objects:
  5218 ;;		On entry : 0/0
  5219 ;;		On exit  : 0/0
  5220 ;;		Unchanged: 0/0
  5221 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5222 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5223 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5224 ;;      Temps:          0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5225 ;;      Totals:         0      18       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5226 ;;Total ram usage:       18 bytes
  5227 ;; Hardware stack levels used:    1
  5228 ;; Hardware stack levels required when called:    3
  5229 ;; This function calls:
  5230 ;;		___lldiv
  5231 ;;		___lmul
  5232 ;;		___wmul
  5233 ;; This function is called by:
  5234 ;;		_Tmr_TmrBConfig
  5235 ;; This function uses a non-reentrant model
  5236 ;;
  5237                           
  5238                           
  5239                           ;psect for function _Tmr_TmrBPrSet
  5240  0741                     _Tmr_TmrBPrSet:	
  5241                           
  5242                           ;incstack = 0
  5243                           ; Regs used in _Tmr_TmrBPrSet: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  5244                           ;Tmr_TmrBPrSet@TmrNumb stored from wreg
  5245  0741  0020               	movlb	0	; select bank0
  5246  0742  00BC               	movwf	Tmr_TmrBPrSet@TmrNumb
  5247                           
  5248                           ;tmr_drv.c: 227: CfgStsType TmrBPrCfgSts;
  5249                           ;tmr_drv.c: 228: UINT32 Divisor = 0;
  5250  0743  3000               	movlw	0
  5251  0744  00C1               	movwf	Tmr_TmrBPrSet@Divisor+3
  5252  0745  3000               	movlw	0
  5253  0746  00C0               	movwf	Tmr_TmrBPrSet@Divisor+2
  5254  0747  3000               	movlw	0
  5255  0748  00BF               	movwf	Tmr_TmrBPrSet@Divisor+1
  5256  0749  3000               	movlw	0
  5257  074A  00BE               	movwf	Tmr_TmrBPrSet@Divisor
  5258                           
  5259                           ;tmr_drv.c: 231: Divisor = (UINT32)Prescaler*(UINT32)Postscaler*(UINT32)IntFreqHz;
  5260  074B  0833               	movf	Tmr_TmrBPrSet@Postscaler,w
  5261  074C  00B4               	movwf	??_Tmr_TmrBPrSet
  5262  074D  01B5               	clrf	??_Tmr_TmrBPrSet+1
  5263  074E  0834               	movf	??_Tmr_TmrBPrSet,w
  5264  074F  00A2               	movwf	___wmul@multiplicand
  5265  0750  0835               	movf	??_Tmr_TmrBPrSet+1,w
  5266  0751  00A3               	movwf	___wmul@multiplicand+1
  5267  0752  0832               	movf	Tmr_TmrBPrSet@Prescaler,w
  5268  0753  00B6               	movwf	??_Tmr_TmrBPrSet+2
  5269  0754  01B7               	clrf	??_Tmr_TmrBPrSet+3
  5270  0755  0836               	movf	??_Tmr_TmrBPrSet+2,w
  5271  0756  00A0               	movwf	___wmul@multiplier
  5272  0757  0837               	movf	??_Tmr_TmrBPrSet+3,w
  5273  0758  00A1               	movwf	___wmul@multiplier+1
  5274  0759  3197  2763  3187   	fcall	___wmul
  5275  075C  0020               	movlb	0	; select bank0
  5276  075D  0820               	movf	?___wmul,w
  5277  075E  00B8               	movwf	??_Tmr_TmrBPrSet+4
  5278  075F  0821               	movf	?___wmul+1,w
  5279  0760  00B9               	movwf	??_Tmr_TmrBPrSet+5
  5280  0761  01BA               	clrf	??_Tmr_TmrBPrSet+6
  5281  0762  01BB               	clrf	??_Tmr_TmrBPrSet+7
  5282  0763  083B               	movf	??_Tmr_TmrBPrSet+7,w
  5283  0764  00A7               	movwf	___lmul@multiplier+3
  5284  0765  083A               	movf	??_Tmr_TmrBPrSet+6,w
  5285  0766  00A6               	movwf	___lmul@multiplier+2
  5286  0767  0839               	movf	??_Tmr_TmrBPrSet+5,w
  5287  0768  00A5               	movwf	___lmul@multiplier+1
  5288  0769  0838               	movf	??_Tmr_TmrBPrSet+4,w
  5289  076A  00A4               	movwf	___lmul@multiplier
  5290  076B  0830               	movf	Tmr_TmrBPrSet@IntFreqHz,w
  5291  076C  00A8               	movwf	___lmul@multiplicand
  5292  076D  0831               	movf	Tmr_TmrBPrSet@IntFreqHz+1,w
  5293  076E  00A9               	movwf	___lmul@multiplicand+1
  5294  076F  01AA               	clrf	___lmul@multiplicand+2
  5295  0770  01AB               	clrf	___lmul@multiplicand+3
  5296  0771  3189  210B  3187   	fcall	___lmul
  5297  0774  0020               	movlb	0	; select bank0
  5298  0775  0827               	movf	?___lmul+3,w
  5299  0776  00C1               	movwf	Tmr_TmrBPrSet@Divisor+3
  5300  0777  0826               	movf	?___lmul+2,w
  5301  0778  00C0               	movwf	Tmr_TmrBPrSet@Divisor+2
  5302  0779  0825               	movf	?___lmul+1,w
  5303  077A  00BF               	movwf	Tmr_TmrBPrSet@Divisor+1
  5304  077B  0824               	movf	?___lmul,w
  5305  077C  00BE               	movwf	Tmr_TmrBPrSet@Divisor
  5306                           
  5307                           ;tmr_drv.c: 234: if (((((UINT32)(32000000))/4)/Divisor) <= 255)
  5308  077D  0841               	movf	Tmr_TmrBPrSet@Divisor+3,w
  5309  077E  00A3               	movwf	___lldiv@divisor+3
  5310  077F  0840               	movf	Tmr_TmrBPrSet@Divisor+2,w
  5311  0780  00A2               	movwf	___lldiv@divisor+2
  5312  0781  083F               	movf	Tmr_TmrBPrSet@Divisor+1,w
  5313  0782  00A1               	movwf	___lldiv@divisor+1
  5314  0783  083E               	movf	Tmr_TmrBPrSet@Divisor,w
  5315  0784  00A0               	movwf	___lldiv@divisor
  5316  0785  3000               	movlw	0
  5317  0786  00A7               	movwf	___lldiv@dividend+3
  5318  0787  307A               	movlw	122
  5319  0788  00A6               	movwf	___lldiv@dividend+2
  5320  0789  3012               	movlw	18
  5321  078A  00A5               	movwf	___lldiv@dividend+1
  5322  078B  3000               	movlw	0
  5323  078C  00A4               	movwf	___lldiv@dividend
  5324  078D  318A  22E4  3187   	fcall	___lldiv
  5325  0790  0020               	movlb	0	; select bank0
  5326  0791  0823               	movf	?___lldiv+3,w
  5327  0792  1D03               	btfss	3,2
  5328  0793  2FF3               	goto	l329
  5329  0794  0822               	movf	?___lldiv+2,w
  5330  0795  1D03               	btfss	3,2
  5331  0796  2FF3               	goto	l329
  5332  0797  3001               	movlw	1
  5333  0798  0221               	subwf	?___lldiv+1,w
  5334  0799  1C03               	btfss	3,0
  5335  079A  2FE4               	goto	l4965
  5336  079B  2FF3               	goto	l329
  5337  079C                     l4957:	
  5338                           ;tmr_drv.c: 238: {
  5339                           ;tmr_drv.c: 239: case ((UINT8)(2)):
  5340                           
  5341                           ;tmr_drv.c: 235: {
  5342                           ;tmr_drv.c: 237: switch (TmrNumb)
  5343                           
  5344                           
  5345                           ;tmr_drv.c: 241: PR2 = (((UINT32)(32000000))/4)/Divisor;
  5346  079C  0841               	movf	Tmr_TmrBPrSet@Divisor+3,w
  5347  079D  00A3               	movwf	___lldiv@divisor+3
  5348  079E  0840               	movf	Tmr_TmrBPrSet@Divisor+2,w
  5349  079F  00A2               	movwf	___lldiv@divisor+2
  5350  07A0  083F               	movf	Tmr_TmrBPrSet@Divisor+1,w
  5351  07A1  00A1               	movwf	___lldiv@divisor+1
  5352  07A2  083E               	movf	Tmr_TmrBPrSet@Divisor,w
  5353  07A3  00A0               	movwf	___lldiv@divisor
  5354  07A4  3000               	movlw	0
  5355  07A5  00A7               	movwf	___lldiv@dividend+3
  5356  07A6  307A               	movlw	122
  5357  07A7  00A6               	movwf	___lldiv@dividend+2
  5358  07A8  3012               	movlw	18
  5359  07A9  00A5               	movwf	___lldiv@dividend+1
  5360  07AA  3000               	movlw	0
  5361  07AB  00A4               	movwf	___lldiv@dividend
  5362  07AC  318A  22E4  3187   	fcall	___lldiv
  5363  07AF  0020               	movlb	0	; select bank0
  5364  07B0  0820               	movf	?___lldiv,w
  5365  07B1  009B               	movwf	27	;volatile
  5366                           
  5367                           ;tmr_drv.c: 242: break;
  5368  07B2  2FF0               	goto	l4967
  5369  07B3                     l4959:	
  5370                           ;tmr_drv.c: 244: case ((UINT8)(4)):
  5371                           
  5372                           
  5373                           ;tmr_drv.c: 246: PR4 = (((UINT32)(32000000))/4)/Divisor;
  5374  07B3  0841               	movf	Tmr_TmrBPrSet@Divisor+3,w
  5375  07B4  00A3               	movwf	___lldiv@divisor+3
  5376  07B5  0840               	movf	Tmr_TmrBPrSet@Divisor+2,w
  5377  07B6  00A2               	movwf	___lldiv@divisor+2
  5378  07B7  083F               	movf	Tmr_TmrBPrSet@Divisor+1,w
  5379  07B8  00A1               	movwf	___lldiv@divisor+1
  5380  07B9  083E               	movf	Tmr_TmrBPrSet@Divisor,w
  5381  07BA  00A0               	movwf	___lldiv@divisor
  5382  07BB  3000               	movlw	0
  5383  07BC  00A7               	movwf	___lldiv@dividend+3
  5384  07BD  307A               	movlw	122
  5385  07BE  00A6               	movwf	___lldiv@dividend+2
  5386  07BF  3012               	movlw	18
  5387  07C0  00A5               	movwf	___lldiv@dividend+1
  5388  07C1  3000               	movlw	0
  5389  07C2  00A4               	movwf	___lldiv@dividend
  5390  07C3  318A  22E4  3187   	fcall	___lldiv
  5391  07C6  0020               	movlb	0	; select bank0
  5392  07C7  0820               	movf	?___lldiv,w
  5393  07C8  0028               	movlb	8	; select bank8
  5394  07C9  0096               	movwf	22	;volatile
  5395                           
  5396                           ;tmr_drv.c: 247: break;
  5397  07CA  2FF0               	goto	l4967
  5398  07CB                     l4961:	
  5399                           ;tmr_drv.c: 249: case ((UINT8)(6)):
  5400                           
  5401                           
  5402                           ;tmr_drv.c: 251: PR6 = (((UINT32)(32000000))/4)/Divisor;
  5403  07CB  0020               	movlb	0	; select bank0
  5404  07CC  0841               	movf	Tmr_TmrBPrSet@Divisor+3,w
  5405  07CD  00A3               	movwf	___lldiv@divisor+3
  5406  07CE  0840               	movf	Tmr_TmrBPrSet@Divisor+2,w
  5407  07CF  00A2               	movwf	___lldiv@divisor+2
  5408  07D0  083F               	movf	Tmr_TmrBPrSet@Divisor+1,w
  5409  07D1  00A1               	movwf	___lldiv@divisor+1
  5410  07D2  083E               	movf	Tmr_TmrBPrSet@Divisor,w
  5411  07D3  00A0               	movwf	___lldiv@divisor
  5412  07D4  3000               	movlw	0
  5413  07D5  00A7               	movwf	___lldiv@dividend+3
  5414  07D6  307A               	movlw	122
  5415  07D7  00A6               	movwf	___lldiv@dividend+2
  5416  07D8  3012               	movlw	18
  5417  07D9  00A5               	movwf	___lldiv@dividend+1
  5418  07DA  3000               	movlw	0
  5419  07DB  00A4               	movwf	___lldiv@dividend
  5420  07DC  318A  22E4  3187   	fcall	___lldiv
  5421  07DF  0020               	movlb	0	; select bank0
  5422  07E0  0820               	movf	?___lldiv,w
  5423  07E1  0028               	movlb	8	; select bank8
  5424  07E2  009D               	movwf	29	;volatile
  5425                           
  5426                           ;tmr_drv.c: 256: }
  5427                           
  5428                           ;tmr_drv.c: 255: break;
  5429                           
  5430                           ;tmr_drv.c: 254: default:
  5431                           
  5432                           ;tmr_drv.c: 252: break;
  5433  07E3  2FF0               	goto	l4967
  5434  07E4                     l4965:	
  5435  07E4  0020               	movlb	0	; select bank0
  5436  07E5  083C               	movf	Tmr_TmrBPrSet@TmrNumb,w
  5437                           
  5438                           ; Switch size 1, requested type "space"
  5439                           ; Number of cases is 3, Range of values is 2 to 6
  5440                           ; switch strategies available:
  5441                           ; Name         Instructions Cycles
  5442                           ; simple_byte           10     6 (average)
  5443                           ; direct_byte           19     9 (fixed)
  5444                           ; jumptable            263     9 (fixed)
  5445                           ;	Chosen strategy is simple_byte
  5446  07E6  3A02               	xorlw	2	; case 2
  5447  07E7  1903               	skipnz
  5448  07E8  2F9C               	goto	l4957
  5449  07E9  3A06               	xorlw	6	; case 4
  5450  07EA  1903               	skipnz
  5451  07EB  2FB3               	goto	l4959
  5452  07EC  3A02               	xorlw	2	; case 6
  5453  07ED  1903               	skipnz
  5454  07EE  2FCB               	goto	l4961
  5455  07EF  2FF0               	goto	l4967
  5456  07F0                     l4967:	
  5457                           
  5458                           ;tmr_drv.c: 259: TmrBPrCfgSts = CfgOk;
  5459  07F0  0020               	movlb	0	; select bank0
  5460  07F1  01BD               	clrf	Tmr_TmrBPrSet@TmrBPrCfgSts
  5461                           
  5462                           ;tmr_drv.c: 260: }
  5463  07F2  2FF5               	goto	l4969
  5464  07F3                     l329:	
  5465                           
  5466                           ;tmr_drv.c: 261: else
  5467                           ;tmr_drv.c: 262: {
  5468                           ;tmr_drv.c: 264: TmrBPrCfgSts = CfgError;
  5469  07F3  01BD               	clrf	Tmr_TmrBPrSet@TmrBPrCfgSts
  5470  07F4  0ABD               	incf	Tmr_TmrBPrSet@TmrBPrCfgSts,f
  5471  07F5                     l4969:	
  5472                           
  5473                           ;tmr_drv.c: 265: }
  5474                           ;tmr_drv.c: 268: return TmrBPrCfgSts;
  5475  07F5  083D               	movf	Tmr_TmrBPrSet@TmrBPrCfgSts,w
  5476  07F6  0008               	return
  5477  07F7                     __end_of_Tmr_TmrBPrSet:	
  5478                           
  5479                           	psect	text6
  5480  1763                     __ptext6:	
  5481 ;; *************** function ___wmul *****************
  5482 ;; Defined at:
  5483 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\Umul16.c"
  5484 ;; Parameters:    Size  Location     Type
  5485 ;;  multiplier      2    0[BANK0 ] unsigned int 
  5486 ;;  multiplicand    2    2[BANK0 ] unsigned int 
  5487 ;; Auto vars:     Size  Location     Type
  5488 ;;  product         2    4[COMMON] unsigned int 
  5489 ;; Return value:  Size  Location     Type
  5490 ;;                  2    0[BANK0 ] unsigned int 
  5491 ;; Registers used:
  5492 ;;		wreg, status,2, status,0
  5493 ;; Tracked objects:
  5494 ;;		On entry : 0/0
  5495 ;;		On exit  : 0/0
  5496 ;;		Unchanged: 0/0
  5497 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5498 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5499 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5500 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5501 ;;      Totals:         2       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5502 ;;Total ram usage:        6 bytes
  5503 ;; Hardware stack levels used:    1
  5504 ;; Hardware stack levels required when called:    2
  5505 ;; This function calls:
  5506 ;;		Nothing
  5507 ;; This function is called by:
  5508 ;;		_Tmr_TmrBPrSet
  5509 ;; This function uses a non-reentrant model
  5510 ;;
  5511                           
  5512                           
  5513                           ;psect for function ___wmul
  5514  1763                     ___wmul:	
  5515                           
  5516                           ;incstack = 0
  5517                           ; Regs used in ___wmul: [wreg+status,2+status,0]
  5518  1763  01F4               	clrf	___wmul@product
  5519  1764  01F5               	clrf	___wmul@product+1
  5520  1765                     l4781:	
  5521  1765  0020               	movlb	0	; select bank0
  5522  1766  1C20               	btfss	___wmul@multiplier,0
  5523  1767  2F6C               	goto	l1110
  5524  1768  0822               	movf	___wmul@multiplicand,w
  5525  1769  07F4               	addwf	___wmul@product,f
  5526  176A  0823               	movf	___wmul@multiplicand+1,w
  5527  176B  3DF5               	addwfc	___wmul@product+1,f
  5528  176C                     l1110:	
  5529  176C  3001               	movlw	1
  5530  176D                     u4365:	
  5531  176D  35A2               	lslf	___wmul@multiplicand,f
  5532  176E  0DA3               	rlf	___wmul@multiplicand+1,f
  5533  176F  0B89               	decfsz	9,f
  5534  1770  2F6D               	goto	u4365
  5535  1771  3001               	movlw	1
  5536  1772                     u4375:	
  5537  1772  36A1               	lsrf	___wmul@multiplier+1,f
  5538  1773  0CA0               	rrf	___wmul@multiplier,f
  5539  1774  0B89               	decfsz	9,f
  5540  1775  2F72               	goto	u4375
  5541  1776  0820               	movf	___wmul@multiplier,w
  5542  1777  0421               	iorwf	___wmul@multiplier+1,w
  5543  1778  1D03               	btfss	3,2
  5544  1779  2F65               	goto	l4781
  5545  177A  0875               	movf	___wmul@product+1,w
  5546  177B  00A1               	movwf	?___wmul+1
  5547  177C  0874               	movf	___wmul@product,w
  5548  177D  00A0               	movwf	?___wmul
  5549  177E  0008               	return
  5550  177F                     __end_of___wmul:	
  5551                           
  5552                           	psect	text7
  5553  090B                     __ptext7:	
  5554 ;; *************** function ___lmul *****************
  5555 ;; Defined at:
  5556 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\Umul32.c"
  5557 ;; Parameters:    Size  Location     Type
  5558 ;;  multiplier      4    4[BANK0 ] unsigned long 
  5559 ;;  multiplicand    4    8[BANK0 ] unsigned long 
  5560 ;; Auto vars:     Size  Location     Type
  5561 ;;  product         4   12[BANK0 ] unsigned long 
  5562 ;; Return value:  Size  Location     Type
  5563 ;;                  4    4[BANK0 ] unsigned long 
  5564 ;; Registers used:
  5565 ;;		wreg, status,2, status,0
  5566 ;; Tracked objects:
  5567 ;;		On entry : 0/0
  5568 ;;		On exit  : 0/0
  5569 ;;		Unchanged: 0/0
  5570 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5571 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5572 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5573 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5574 ;;      Totals:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5575 ;;Total ram usage:       12 bytes
  5576 ;; Hardware stack levels used:    1
  5577 ;; Hardware stack levels required when called:    2
  5578 ;; This function calls:
  5579 ;;		Nothing
  5580 ;; This function is called by:
  5581 ;;		_Tmr_TmrBPrSet
  5582 ;; This function uses a non-reentrant model
  5583 ;;
  5584                           
  5585                           
  5586                           ;psect for function ___lmul
  5587  090B                     ___lmul:	
  5588                           
  5589                           ;incstack = 0
  5590                           ; Regs used in ___lmul: [wreg+status,2+status,0]
  5591  090B  3000               	movlw	0
  5592  090C  0020               	movlb	0	; select bank0
  5593  090D  00AF               	movwf	___lmul@product+3
  5594  090E  3000               	movlw	0
  5595  090F  00AE               	movwf	___lmul@product+2
  5596  0910  3000               	movlw	0
  5597  0911  00AD               	movwf	___lmul@product+1
  5598  0912  3000               	movlw	0
  5599  0913  00AC               	movwf	___lmul@product
  5600  0914                     l3505:	
  5601  0914  1C24               	btfss	___lmul@multiplier,0
  5602  0915  291E               	goto	l3509
  5603  0916  0828               	movf	___lmul@multiplicand,w
  5604  0917  07AC               	addwf	___lmul@product,f
  5605  0918  0829               	movf	___lmul@multiplicand+1,w
  5606  0919  3DAD               	addwfc	___lmul@product+1,f
  5607  091A  082A               	movf	___lmul@multiplicand+2,w
  5608  091B  3DAE               	addwfc	___lmul@product+2,f
  5609  091C  082B               	movf	___lmul@multiplicand+3,w
  5610  091D  3DAF               	addwfc	___lmul@product+3,f
  5611  091E                     l3509:	
  5612  091E  3001               	movlw	1
  5613  091F                     u2705:	
  5614  091F  35A8               	lslf	___lmul@multiplicand,f
  5615  0920  0DA9               	rlf	___lmul@multiplicand+1,f
  5616  0921  0DAA               	rlf	___lmul@multiplicand+2,f
  5617  0922  0DAB               	rlf	___lmul@multiplicand+3,f
  5618  0923  0B89               	decfsz	9,f
  5619  0924  291F               	goto	u2705
  5620  0925  3001               	movlw	1
  5621  0926                     u2715:	
  5622  0926  36A7               	lsrf	___lmul@multiplier+3,f
  5623  0927  0CA6               	rrf	___lmul@multiplier+2,f
  5624  0928  0CA5               	rrf	___lmul@multiplier+1,f
  5625  0929  0CA4               	rrf	___lmul@multiplier,f
  5626  092A  0B89               	decfsz	9,f
  5627  092B  2926               	goto	u2715
  5628  092C  0827               	movf	___lmul@multiplier+3,w
  5629  092D  0426               	iorwf	___lmul@multiplier+2,w
  5630  092E  0425               	iorwf	___lmul@multiplier+1,w
  5631  092F  0424               	iorwf	___lmul@multiplier,w
  5632  0930  1D03               	skipz
  5633  0931  2914               	goto	l3505
  5634  0932  082F               	movf	___lmul@product+3,w
  5635  0933  00A7               	movwf	?___lmul+3
  5636  0934  082E               	movf	___lmul@product+2,w
  5637  0935  00A6               	movwf	?___lmul+2
  5638  0936  082D               	movf	___lmul@product+1,w
  5639  0937  00A5               	movwf	?___lmul+1
  5640  0938  082C               	movf	___lmul@product,w
  5641  0939  00A4               	movwf	?___lmul
  5642  093A  0008               	return
  5643  093B                     __end_of___lmul:	
  5644                           
  5645                           	psect	text8
  5646  0AE4                     __ptext8:	
  5647 ;; *************** function ___lldiv *****************
  5648 ;; Defined at:
  5649 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\lldiv.c"
  5650 ;; Parameters:    Size  Location     Type
  5651 ;;  divisor         4    0[BANK0 ] unsigned long 
  5652 ;;  dividend        4    4[BANK0 ] unsigned long 
  5653 ;; Auto vars:     Size  Location     Type
  5654 ;;  quotient        4    8[BANK0 ] unsigned long 
  5655 ;;  counter         1   12[BANK0 ] unsigned char 
  5656 ;; Return value:  Size  Location     Type
  5657 ;;                  4    0[BANK0 ] unsigned long 
  5658 ;; Registers used:
  5659 ;;		wreg, status,2, status,0
  5660 ;; Tracked objects:
  5661 ;;		On entry : 0/0
  5662 ;;		On exit  : 0/0
  5663 ;;		Unchanged: 0/0
  5664 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5665 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5666 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5667 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5668 ;;      Totals:         1      13       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5669 ;;Total ram usage:       14 bytes
  5670 ;; Hardware stack levels used:    1
  5671 ;; Hardware stack levels required when called:    2
  5672 ;; This function calls:
  5673 ;;		Nothing
  5674 ;; This function is called by:
  5675 ;;		_Tmr_TmrBPrSet
  5676 ;; This function uses a non-reentrant model
  5677 ;;
  5678                           
  5679                           
  5680                           ;psect for function ___lldiv
  5681  0AE4                     ___lldiv:	
  5682                           
  5683                           ;incstack = 0
  5684                           ; Regs used in ___lldiv: [wreg+status,2+status,0]
  5685  0AE4  3000               	movlw	0
  5686  0AE5  0020               	movlb	0	; select bank0
  5687  0AE6  00AB               	movwf	___lldiv@quotient+3
  5688  0AE7  3000               	movlw	0
  5689  0AE8  00AA               	movwf	___lldiv@quotient+2
  5690  0AE9  3000               	movlw	0
  5691  0AEA  00A9               	movwf	___lldiv@quotient+1
  5692  0AEB  3000               	movlw	0
  5693  0AEC  00A8               	movwf	___lldiv@quotient
  5694  0AED  0823               	movf	___lldiv@divisor+3,w
  5695  0AEE  0422               	iorwf	___lldiv@divisor+2,w
  5696  0AEF  0421               	iorwf	___lldiv@divisor+1,w
  5697  0AF0  0420               	iorwf	___lldiv@divisor,w
  5698  0AF1  1903               	skipnz
  5699  0AF2  2B2E               	goto	l4813
  5700  0AF3  01AC               	clrf	___lldiv@counter
  5701  0AF4  0AAC               	incf	___lldiv@counter,f
  5702  0AF5                     l4799:	
  5703  0AF5  1BA3               	btfsc	___lldiv@divisor+3,7
  5704  0AF6  2B03               	goto	l4801
  5705  0AF7  3001               	movlw	1
  5706  0AF8                     u4405:	
  5707  0AF8  35A0               	lslf	___lldiv@divisor,f
  5708  0AF9  0DA1               	rlf	___lldiv@divisor+1,f
  5709  0AFA  0DA2               	rlf	___lldiv@divisor+2,f
  5710  0AFB  0DA3               	rlf	___lldiv@divisor+3,f
  5711  0AFC  0B89               	decfsz	9,f
  5712  0AFD  2AF8               	goto	u4405
  5713  0AFE  3001               	movlw	1
  5714  0AFF  00F4               	movwf	??___lldiv
  5715  0B00  0874               	movf	??___lldiv,w
  5716  0B01  07AC               	addwf	___lldiv@counter,f
  5717  0B02  2AF5               	goto	l4799
  5718  0B03                     l4801:	
  5719  0B03  3001               	movlw	1
  5720  0B04                     u4425:	
  5721  0B04  35A8               	lslf	___lldiv@quotient,f
  5722  0B05  0DA9               	rlf	___lldiv@quotient+1,f
  5723  0B06  0DAA               	rlf	___lldiv@quotient+2,f
  5724  0B07  0DAB               	rlf	___lldiv@quotient+3,f
  5725  0B08  0B89               	decfsz	9,f
  5726  0B09  2B04               	goto	u4425
  5727  0B0A  0823               	movf	___lldiv@divisor+3,w
  5728  0B0B  0227               	subwf	___lldiv@dividend+3,w
  5729  0B0C  1D03               	skipz
  5730  0B0D  2B18               	goto	u4435
  5731  0B0E  0822               	movf	___lldiv@divisor+2,w
  5732  0B0F  0226               	subwf	___lldiv@dividend+2,w
  5733  0B10  1D03               	skipz
  5734  0B11  2B18               	goto	u4435
  5735  0B12  0821               	movf	___lldiv@divisor+1,w
  5736  0B13  0225               	subwf	___lldiv@dividend+1,w
  5737  0B14  1D03               	skipz
  5738  0B15  2B18               	goto	u4435
  5739  0B16  0820               	movf	___lldiv@divisor,w
  5740  0B17  0224               	subwf	___lldiv@dividend,w
  5741  0B18                     u4435:	
  5742  0B18  1C03               	skipc
  5743  0B19  2B23               	goto	l4809
  5744  0B1A  0820               	movf	___lldiv@divisor,w
  5745  0B1B  02A4               	subwf	___lldiv@dividend,f
  5746  0B1C  0821               	movf	___lldiv@divisor+1,w
  5747  0B1D  3BA5               	subwfb	___lldiv@dividend+1,f
  5748  0B1E  0822               	movf	___lldiv@divisor+2,w
  5749  0B1F  3BA6               	subwfb	___lldiv@dividend+2,f
  5750  0B20  0823               	movf	___lldiv@divisor+3,w
  5751  0B21  3BA7               	subwfb	___lldiv@dividend+3,f
  5752  0B22  1428               	bsf	___lldiv@quotient,0
  5753  0B23                     l4809:	
  5754  0B23  3001               	movlw	1
  5755  0B24                     u4445:	
  5756  0B24  36A3               	lsrf	___lldiv@divisor+3,f
  5757  0B25  0CA2               	rrf	___lldiv@divisor+2,f
  5758  0B26  0CA1               	rrf	___lldiv@divisor+1,f
  5759  0B27  0CA0               	rrf	___lldiv@divisor,f
  5760  0B28  0B89               	decfsz	9,f
  5761  0B29  2B24               	goto	u4445
  5762  0B2A  3001               	movlw	1
  5763  0B2B  02AC               	subwf	___lldiv@counter,f
  5764  0B2C  1D03               	btfss	3,2
  5765  0B2D  2B03               	goto	l4801
  5766  0B2E                     l4813:	
  5767  0B2E  082B               	movf	___lldiv@quotient+3,w
  5768  0B2F  00A3               	movwf	?___lldiv+3
  5769  0B30  082A               	movf	___lldiv@quotient+2,w
  5770  0B31  00A2               	movwf	?___lldiv+2
  5771  0B32  0829               	movf	___lldiv@quotient+1,w
  5772  0B33  00A1               	movwf	?___lldiv+1
  5773  0B34  0828               	movf	___lldiv@quotient,w
  5774  0B35  00A0               	movwf	?___lldiv
  5775  0B36  0008               	return
  5776  0B37                     __end_of___lldiv:	
  5777                           
  5778                           	psect	text9
  5779  085C                     __ptext9:	
  5780 ;; *************** function _Tmr_TmrBIrqSet *****************
  5781 ;; Defined at:
  5782 ;;		line 182 in file "../../../Framework/MercuryFwk/Source/c/01_Hal/02_Drv/tmr_drv.c"
  5783 ;; Parameters:    Size  Location     Type
  5784 ;;  TmrNumb         1    wreg     unsigned char 
  5785 ;;  TmrIrqSts       1    4[COMMON] unsigned char 
  5786 ;; Auto vars:     Size  Location     Type
  5787 ;;  TmrNumb         1    5[COMMON] unsigned char 
  5788 ;; Return value:  Size  Location     Type
  5789 ;;                  1    wreg      void 
  5790 ;; Registers used:
  5791 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  5792 ;; Tracked objects:
  5793 ;;		On entry : 0/0
  5794 ;;		On exit  : 0/0
  5795 ;;		Unchanged: 0/0
  5796 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5797 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5798 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5799 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5800 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5801 ;;Total ram usage:        2 bytes
  5802 ;; Hardware stack levels used:    1
  5803 ;; Hardware stack levels required when called:    2
  5804 ;; This function calls:
  5805 ;;		Nothing
  5806 ;; This function is called by:
  5807 ;;		_Tmr_TmrBConfig
  5808 ;; This function uses a non-reentrant model
  5809 ;;
  5810                           
  5811                           
  5812                           ;psect for function _Tmr_TmrBIrqSet
  5813  085C                     _Tmr_TmrBIrqSet:	
  5814                           
  5815                           ;incstack = 0
  5816                           ; Regs used in _Tmr_TmrBIrqSet: [wreg-fsr0h+status,2+status,0]
  5817                           ;Tmr_TmrBIrqSet@TmrNumb stored from wreg
  5818  085C  00F5               	movwf	Tmr_TmrBIrqSet@TmrNumb
  5819                           
  5820                           ;tmr_drv.c: 185: switch (TmrNumb)
  5821  085D  2879               	goto	l3683
  5822  085E                     l321:	
  5823                           ;tmr_drv.c: 186: {
  5824                           ;tmr_drv.c: 187: case ((UINT8)(2)):
  5825                           
  5826                           
  5827                           ;tmr_drv.c: 189: PIR1bits.TMR2IF = 0u;
  5828  085E  0020               	movlb	0	; select bank0
  5829  085F  1091               	bcf	17,1	;volatile
  5830                           
  5831                           ;tmr_drv.c: 191: PIE1bits.TMR2IE = TmrIrqSts;
  5832  0860  0C74               	rrf	Tmr_TmrBIrqSet@TmrIrqSts,w
  5833  0861  0021               	movlb	1	; select bank1
  5834  0862  1C03               	skipc
  5835  0863  1091               	bcf	17,1	;volatile
  5836  0864  1803               	skipnc
  5837  0865  1491               	bsf	17,1	;volatile
  5838                           
  5839                           ;tmr_drv.c: 192: break;
  5840  0866  0008               	return
  5841  0867                     l323:	
  5842                           ;tmr_drv.c: 194: case ((UINT8)(4)):
  5843                           
  5844                           
  5845                           ;tmr_drv.c: 196: PIR3bits.TMR4IF = 0u;
  5846  0867  0020               	movlb	0	; select bank0
  5847  0868  1093               	bcf	19,1	;volatile
  5848                           
  5849                           ;tmr_drv.c: 198: PIE3bits.TMR4IE = TmrIrqSts;
  5850  0869  0C74               	rrf	Tmr_TmrBIrqSet@TmrIrqSts,w
  5851  086A  0021               	movlb	1	; select bank1
  5852  086B  1C03               	skipc
  5853  086C  1093               	bcf	19,1	;volatile
  5854  086D  1803               	skipnc
  5855  086E  1493               	bsf	19,1	;volatile
  5856                           
  5857                           ;tmr_drv.c: 199: break;
  5858  086F  0008               	return
  5859  0870                     l324:	
  5860                           ;tmr_drv.c: 201: case ((UINT8)(6)):
  5861                           
  5862                           
  5863                           ;tmr_drv.c: 203: PIR3bits.TMR6IF = 0u;
  5864  0870  0020               	movlb	0	; select bank0
  5865  0871  1193               	bcf	19,3	;volatile
  5866                           
  5867                           ;tmr_drv.c: 205: PIE3bits.TMR6IE = TmrIrqSts;
  5868  0872  0C74               	rrf	Tmr_TmrBIrqSet@TmrIrqSts,w
  5869  0873  0021               	movlb	1	; select bank1
  5870  0874  1C03               	skipc
  5871  0875  1193               	bcf	19,3	;volatile
  5872  0876  1803               	skipnc
  5873  0877  1593               	bsf	19,3	;volatile
  5874                           
  5875                           ;tmr_drv.c: 210: }
  5876                           
  5877                           ;tmr_drv.c: 209: break;
  5878                           
  5879                           ;tmr_drv.c: 208: default:
  5880                           
  5881                           ;tmr_drv.c: 206: break;
  5882  0878  0008               	return
  5883  0879                     l3683:	
  5884  0879  0875               	movf	Tmr_TmrBIrqSet@TmrNumb,w
  5885                           
  5886                           ; Switch size 1, requested type "space"
  5887                           ; Number of cases is 3, Range of values is 2 to 6
  5888                           ; switch strategies available:
  5889                           ; Name         Instructions Cycles
  5890                           ; simple_byte           10     6 (average)
  5891                           ; direct_byte           19     9 (fixed)
  5892                           ; jumptable            263     9 (fixed)
  5893                           ;	Chosen strategy is simple_byte
  5894  087A  3A02               	xorlw	2	; case 2
  5895  087B  1903               	skipnz
  5896  087C  285E               	goto	l321
  5897  087D  3A06               	xorlw	6	; case 4
  5898  087E  1903               	skipnz
  5899  087F  2867               	goto	l323
  5900  0880  3A02               	xorlw	2	; case 6
  5901  0881  1903               	skipnz
  5902  0882  2870               	goto	l324
  5903  0883  2884               	goto	l326
  5904  0884                     l326:	
  5905  0884  0008               	return
  5906  0885                     __end_of_Tmr_TmrBIrqSet:	
  5907                           
  5908                           	psect	text10
  5909  1703                     __ptext10:	
  5910 ;; *************** function _Tmr_StartTmr *****************
  5911 ;; Defined at:
  5912 ;;		line 279 in file "../../../Framework/MercuryFwk/Source/c/01_Hal/02_Drv/tmr_drv.c"
  5913 ;; Parameters:    Size  Location     Type
  5914 ;;  TmrNumb         1    wreg     unsigned char 
  5915 ;; Auto vars:     Size  Location     Type
  5916 ;;  TmrNumb         1    4[COMMON] unsigned char 
  5917 ;; Return value:  Size  Location     Type
  5918 ;;                  1    wreg      void 
  5919 ;; Registers used:
  5920 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  5921 ;; Tracked objects:
  5922 ;;		On entry : 0/0
  5923 ;;		On exit  : 0/0
  5924 ;;		Unchanged: 0/0
  5925 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5926 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5927 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5928 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5929 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5930 ;;Total ram usage:        1 bytes
  5931 ;; Hardware stack levels used:    1
  5932 ;; Hardware stack levels required when called:    2
  5933 ;; This function calls:
  5934 ;;		Nothing
  5935 ;; This function is called by:
  5936 ;;		_Tmr_TmrBConfig
  5937 ;; This function uses a non-reentrant model
  5938 ;;
  5939                           
  5940                           
  5941                           ;psect for function _Tmr_StartTmr
  5942  1703                     _Tmr_StartTmr:	
  5943                           
  5944                           ;incstack = 0
  5945                           ; Regs used in _Tmr_StartTmr: [wreg-fsr0h+status,2+status,0]
  5946                           ;Tmr_StartTmr@TmrNumb stored from wreg
  5947  1703  00F4               	movwf	Tmr_StartTmr@TmrNumb
  5948                           
  5949                           ;tmr_drv.c: 282: switch (TmrNumb)
  5950  1704  2F0E               	goto	l3713
  5951  1705                     l341:	
  5952                           ;tmr_drv.c: 283: {
  5953                           ;tmr_drv.c: 284: case ((UINT8)(2)):
  5954                           
  5955                           
  5956                           ;tmr_drv.c: 286: T2CONbits.TMR2ON = 1u;
  5957  1705  0020               	movlb	0	; select bank0
  5958  1706  151C               	bsf	28,2	;volatile
  5959                           
  5960                           ;tmr_drv.c: 287: break;
  5961  1707  0008               	return
  5962  1708                     l343:	
  5963                           ;tmr_drv.c: 289: case ((UINT8)(4)):
  5964                           
  5965                           
  5966                           ;tmr_drv.c: 291: T4CONbits.TMR4ON = 1u;
  5967  1708  0028               	movlb	8	; select bank8
  5968  1709  1517               	bsf	23,2	;volatile
  5969                           
  5970                           ;tmr_drv.c: 292: break;
  5971  170A  0008               	return
  5972  170B                     l344:	
  5973                           ;tmr_drv.c: 294: case ((UINT8)(6)):
  5974                           
  5975                           
  5976                           ;tmr_drv.c: 296: T6CONbits.TMR6ON = 1u;
  5977  170B  0028               	movlb	8	; select bank8
  5978  170C  151E               	bsf	30,2	;volatile
  5979                           
  5980                           ;tmr_drv.c: 301: }
  5981                           
  5982                           ;tmr_drv.c: 300: break;
  5983                           
  5984                           ;tmr_drv.c: 299: default:
  5985                           
  5986                           ;tmr_drv.c: 297: break;
  5987  170D  0008               	return
  5988  170E                     l3713:	
  5989  170E  0874               	movf	Tmr_StartTmr@TmrNumb,w
  5990                           
  5991                           ; Switch size 1, requested type "space"
  5992                           ; Number of cases is 3, Range of values is 2 to 6
  5993                           ; switch strategies available:
  5994                           ; Name         Instructions Cycles
  5995                           ; simple_byte           10     6 (average)
  5996                           ; direct_byte           19     9 (fixed)
  5997                           ; jumptable            263     9 (fixed)
  5998                           ;	Chosen strategy is simple_byte
  5999  170F  3A02               	xorlw	2	; case 2
  6000  1710  1903               	skipnz
  6001  1711  2F05               	goto	l341
  6002  1712  3A06               	xorlw	6	; case 4
  6003  1713  1903               	skipnz
  6004  1714  2F08               	goto	l343
  6005  1715  3A02               	xorlw	2	; case 6
  6006  1716  1903               	skipnz
  6007  1717  2F0B               	goto	l344
  6008  1718  2F19               	goto	l346
  6009  1719                     l346:	
  6010  1719  0008               	return
  6011  171A                     __end_of_Tmr_StartTmr:	
  6012                           
  6013                           	psect	text11
  6014  0C71                     __ptext11:	
  6015 ;; *************** function _TmrBInit *****************
  6016 ;; Defined at:
  6017 ;;		line 72 in file "../../../Framework/MercuryFwk/Source/c/01_Hal/02_Drv/tmr_drv.c"
  6018 ;; Parameters:    Size  Location     Type
  6019 ;;  TmrNumb         1    wreg     unsigned char 
  6020 ;;  Prescaler       1    4[COMMON] unsigned char 
  6021 ;;  Postscaler      1    5[COMMON] unsigned char 
  6022 ;; Auto vars:     Size  Location     Type
  6023 ;;  TmrNumb         1    1[BANK0 ] unsigned char 
  6024 ;; Return value:  Size  Location     Type
  6025 ;;                  1    wreg      void 
  6026 ;; Registers used:
  6027 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  6028 ;; Tracked objects:
  6029 ;;		On entry : 0/0
  6030 ;;		On exit  : 0/0
  6031 ;;		Unchanged: 0/0
  6032 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6033 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6034 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6035 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6036 ;;      Totals:         2       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6037 ;;Total ram usage:        4 bytes
  6038 ;; Hardware stack levels used:    1
  6039 ;; Hardware stack levels required when called:    2
  6040 ;; This function calls:
  6041 ;;		Nothing
  6042 ;; This function is called by:
  6043 ;;		_Tmr_TmrBConfig
  6044 ;; This function uses a non-reentrant model
  6045 ;;
  6046                           
  6047                           
  6048                           ;psect for function _TmrBInit
  6049  0C71                     _TmrBInit:	
  6050                           
  6051                           ;incstack = 0
  6052                           ; Regs used in _TmrBInit: [wreg-fsr0h+status,2+status,0]
  6053                           ;TmrBInit@TmrNumb stored from wreg
  6054  0C71  0020               	movlb	0	; select bank0
  6055  0C72  00A1               	movwf	TmrBInit@TmrNumb
  6056                           
  6057                           ;tmr_drv.c: 75: switch (TmrNumb)
  6058  0C73  2CDF               	goto	l4947
  6059  0C74                     l296:	
  6060                           ;tmr_drv.c: 80: {
  6061                           ;tmr_drv.c: 81: case ((UINT8)(1)):
  6062                           
  6063                           ;tmr_drv.c: 79: switch (Prescaler)
  6064                           
  6065                           ;tmr_drv.c: 76: {
  6066                           ;tmr_drv.c: 77: case ((UINT8)(2)):
  6067                           
  6068                           
  6069                           ;tmr_drv.c: 83: T2CONbits.T2CKPS0 = 0u;
  6070  0C74  101C               	bcf	28,0	;volatile
  6071  0C75  2C77               	goto	L2
  6072  0C76                     l298:	
  6073                           ;tmr_drv.c: 87: case ((UINT8)(4)):
  6074                           
  6075                           ;tmr_drv.c: 85: break;
  6076                           
  6077                           ;tmr_drv.c: 84: T2CONbits.T2CKPS1 = 0u;
  6078                           
  6079                           
  6080                           ;tmr_drv.c: 89: T2CONbits.T2CKPS0 = 1u;
  6081  0C76  141C               	bsf	28,0	;volatile
  6082  0C77                     L2:	
  6083                           
  6084                           ;tmr_drv.c: 90: T2CONbits.T2CKPS1 = 0u;
  6085  0C77  109C               	bcf	28,1	;volatile
  6086                           
  6087                           ;tmr_drv.c: 91: break;
  6088  0C78  2C87               	goto	l4931
  6089  0C79                     l299:	
  6090                           ;tmr_drv.c: 93: case ((UINT8)(16)):
  6091                           
  6092                           
  6093                           ;tmr_drv.c: 94: T2CONbits.T2CKPS0 = 0u;
  6094  0C79  101C               	bcf	28,0	;volatile
  6095                           
  6096                           ;tmr_drv.c: 95: T2CONbits.T2CKPS1 = 1u;
  6097  0C7A  149C               	bsf	28,1	;volatile
  6098                           
  6099                           ;tmr_drv.c: 100: }
  6100                           
  6101                           ;tmr_drv.c: 99: break;
  6102                           
  6103                           ;tmr_drv.c: 98: default:
  6104                           
  6105                           ;tmr_drv.c: 96: break;
  6106  0C7B  2C87               	goto	l4931
  6107  0C7C                     l4929:	
  6108  0C7C  0874               	movf	TmrBInit@Prescaler,w
  6109                           
  6110                           ; Switch size 1, requested type "space"
  6111                           ; Number of cases is 3, Range of values is 1 to 16
  6112                           ; switch strategies available:
  6113                           ; Name         Instructions Cycles
  6114                           ; simple_byte           10     6 (average)
  6115                           ; direct_byte           41     9 (fixed)
  6116                           ; jumptable            263     9 (fixed)
  6117                           ;	Chosen strategy is simple_byte
  6118  0C7D  3A01               	xorlw	1	; case 1
  6119  0C7E  1903               	skipnz
  6120  0C7F  2C74               	goto	l296
  6121  0C80  3A05               	xorlw	5	; case 4
  6122  0C81  1903               	skipnz
  6123  0C82  2C76               	goto	l298
  6124  0C83  3A14               	xorlw	20	; case 16
  6125  0C84  1903               	skipnz
  6126  0C85  2C79               	goto	l299
  6127  0C86  2C87               	goto	l4931
  6128  0C87                     l4931:	
  6129                           
  6130                           ;tmr_drv.c: 103: T2CONbits.T2OUTPS = (Postscaler - 1);
  6131  0C87  0875               	movf	TmrBInit@Postscaler,w
  6132  0C88  3EFF               	addlw	255
  6133  0C89  00A0               	movwf	??_TmrBInit
  6134  0C8A  0DA0               	rlf	??_TmrBInit,f
  6135  0C8B  0DA0               	rlf	??_TmrBInit,f
  6136  0C8C  0DA0               	rlf	??_TmrBInit,f
  6137  0C8D  081C               	movf	28,w	;volatile
  6138  0C8E  0620               	xorwf	??_TmrBInit,w
  6139  0C8F  3987               	andlw	-121
  6140  0C90  0620               	xorwf	??_TmrBInit,w
  6141  0C91  009C               	movwf	28	;volatile
  6142                           
  6143                           ;tmr_drv.c: 104: break;
  6144  0C92  0008               	return
  6145  0C93                     l304:	
  6146                           ;tmr_drv.c: 109: {
  6147                           ;tmr_drv.c: 110: case ((UINT8)(1)):
  6148                           
  6149                           ;tmr_drv.c: 108: switch (Prescaler)
  6150                           
  6151                           ;tmr_drv.c: 106: case ((UINT8)(4)):
  6152                           
  6153                           
  6154                           ;tmr_drv.c: 112: T4CONbits.T4CKPS0 = 0u;
  6155  0C93  0028               	movlb	8	; select bank8
  6156  0C94  1017               	bcf	23,0	;volatile
  6157  0C95  2C98               	goto	L3
  6158  0C96                     l306:	
  6159                           ;tmr_drv.c: 116: case ((UINT8)(4)):
  6160                           
  6161                           ;tmr_drv.c: 114: break;
  6162                           
  6163                           ;tmr_drv.c: 113: T4CONbits.T4CKPS1 = 0u;
  6164                           
  6165                           
  6166                           ;tmr_drv.c: 118: T4CONbits.T4CKPS0 = 1u;
  6167  0C96  0028               	movlb	8	; select bank8
  6168  0C97  1417               	bsf	23,0	;volatile
  6169  0C98                     L3:	
  6170                           
  6171                           ;tmr_drv.c: 119: T4CONbits.T4CKPS1 = 0u;
  6172  0C98  1097               	bcf	23,1	;volatile
  6173                           
  6174                           ;tmr_drv.c: 120: break;
  6175  0C99  2CA9               	goto	l4937
  6176  0C9A                     l307:	
  6177                           ;tmr_drv.c: 122: case ((UINT8)(16)):
  6178                           
  6179                           
  6180                           ;tmr_drv.c: 123: T4CONbits.T4CKPS0 = 0u;
  6181  0C9A  0028               	movlb	8	; select bank8
  6182  0C9B  1017               	bcf	23,0	;volatile
  6183                           
  6184                           ;tmr_drv.c: 124: T4CONbits.T4CKPS1 = 1u;
  6185  0C9C  1497               	bsf	23,1	;volatile
  6186                           
  6187                           ;tmr_drv.c: 129: }
  6188                           
  6189                           ;tmr_drv.c: 128: break;
  6190                           
  6191                           ;tmr_drv.c: 127: default:
  6192                           
  6193                           ;tmr_drv.c: 125: break;
  6194  0C9D  2CA9               	goto	l4937
  6195  0C9E                     l4935:	
  6196  0C9E  0874               	movf	TmrBInit@Prescaler,w
  6197                           
  6198                           ; Switch size 1, requested type "space"
  6199                           ; Number of cases is 3, Range of values is 1 to 16
  6200                           ; switch strategies available:
  6201                           ; Name         Instructions Cycles
  6202                           ; simple_byte           10     6 (average)
  6203                           ; direct_byte           41     9 (fixed)
  6204                           ; jumptable            263     9 (fixed)
  6205                           ;	Chosen strategy is simple_byte
  6206  0C9F  3A01               	xorlw	1	; case 1
  6207  0CA0  1903               	skipnz
  6208  0CA1  2C93               	goto	l304
  6209  0CA2  3A05               	xorlw	5	; case 4
  6210  0CA3  1903               	skipnz
  6211  0CA4  2C96               	goto	l306
  6212  0CA5  3A14               	xorlw	20	; case 16
  6213  0CA6  1903               	skipnz
  6214  0CA7  2C9A               	goto	l307
  6215  0CA8  2CA9               	goto	l4937
  6216  0CA9                     l4937:	
  6217                           
  6218                           ;tmr_drv.c: 132: T4CONbits.T4OUTPS = (Postscaler - 1);
  6219  0CA9  0875               	movf	TmrBInit@Postscaler,w
  6220  0CAA  3EFF               	addlw	255
  6221  0CAB  0020               	movlb	0	; select bank0
  6222  0CAC  00A0               	movwf	??_TmrBInit
  6223  0CAD  0DA0               	rlf	??_TmrBInit,f
  6224  0CAE  0DA0               	rlf	??_TmrBInit,f
  6225  0CAF  0DA0               	rlf	??_TmrBInit,f
  6226  0CB0  0028               	movlb	8	; select bank8
  6227  0CB1  0817               	movf	23,w	;volatile
  6228  0CB2  0020               	movlb	0	; select bank0
  6229  0CB3  0620               	xorwf	??_TmrBInit,w
  6230  0CB4  3987               	andlw	-121
  6231  0CB5  0620               	xorwf	??_TmrBInit,w
  6232  0CB6  0028               	movlb	8	; select bank8
  6233  0CB7  0097               	movwf	23	;volatile
  6234                           
  6235                           ;tmr_drv.c: 133: break;
  6236  0CB8  0008               	return
  6237  0CB9                     l311:	
  6238                           ;tmr_drv.c: 138: {
  6239                           ;tmr_drv.c: 139: case ((UINT8)(1)):
  6240                           
  6241                           ;tmr_drv.c: 137: switch (Prescaler)
  6242                           
  6243                           ;tmr_drv.c: 135: case ((UINT8)(6)):
  6244                           
  6245                           
  6246                           ;tmr_drv.c: 141: T6CONbits.T6CKPS0 = 0u;
  6247  0CB9  0028               	movlb	8	; select bank8
  6248  0CBA  101E               	bcf	30,0	;volatile
  6249  0CBB  2CBE               	goto	L4
  6250  0CBC                     l313:	
  6251                           ;tmr_drv.c: 145: case ((UINT8)(4)):
  6252                           
  6253                           ;tmr_drv.c: 143: break;
  6254                           
  6255                           ;tmr_drv.c: 142: T6CONbits.T6CKPS1 = 0u;
  6256                           
  6257                           
  6258                           ;tmr_drv.c: 147: T6CONbits.T6CKPS0 = 1u;
  6259  0CBC  0028               	movlb	8	; select bank8
  6260  0CBD  141E               	bsf	30,0	;volatile
  6261  0CBE                     L4:	
  6262                           
  6263                           ;tmr_drv.c: 148: T6CONbits.T6CKPS1 = 0u;
  6264  0CBE  109E               	bcf	30,1	;volatile
  6265                           
  6266                           ;tmr_drv.c: 149: break;
  6267  0CBF  2CCF               	goto	l4943
  6268  0CC0                     l314:	
  6269                           ;tmr_drv.c: 151: case ((UINT8)(16)):
  6270                           
  6271                           
  6272                           ;tmr_drv.c: 152: T6CONbits.T6CKPS0 = 0u;
  6273  0CC0  0028               	movlb	8	; select bank8
  6274  0CC1  101E               	bcf	30,0	;volatile
  6275                           
  6276                           ;tmr_drv.c: 153: T6CONbits.T6CKPS1 = 1u;
  6277  0CC2  149E               	bsf	30,1	;volatile
  6278                           
  6279                           ;tmr_drv.c: 158: }
  6280                           
  6281                           ;tmr_drv.c: 157: break;
  6282                           
  6283                           ;tmr_drv.c: 156: default:
  6284                           
  6285                           ;tmr_drv.c: 154: break;
  6286  0CC3  2CCF               	goto	l4943
  6287  0CC4                     l4941:	
  6288  0CC4  0874               	movf	TmrBInit@Prescaler,w
  6289                           
  6290                           ; Switch size 1, requested type "space"
  6291                           ; Number of cases is 3, Range of values is 1 to 16
  6292                           ; switch strategies available:
  6293                           ; Name         Instructions Cycles
  6294                           ; simple_byte           10     6 (average)
  6295                           ; direct_byte           41     9 (fixed)
  6296                           ; jumptable            263     9 (fixed)
  6297                           ;	Chosen strategy is simple_byte
  6298  0CC5  3A01               	xorlw	1	; case 1
  6299  0CC6  1903               	skipnz
  6300  0CC7  2CB9               	goto	l311
  6301  0CC8  3A05               	xorlw	5	; case 4
  6302  0CC9  1903               	skipnz
  6303  0CCA  2CBC               	goto	l313
  6304  0CCB  3A14               	xorlw	20	; case 16
  6305  0CCC  1903               	skipnz
  6306  0CCD  2CC0               	goto	l314
  6307  0CCE  2CCF               	goto	l4943
  6308  0CCF                     l4943:	
  6309                           
  6310                           ;tmr_drv.c: 161: T6CONbits.T6OUTPS = (Postscaler - 1);
  6311  0CCF  0875               	movf	TmrBInit@Postscaler,w
  6312  0CD0  3EFF               	addlw	255
  6313  0CD1  0020               	movlb	0	; select bank0
  6314  0CD2  00A0               	movwf	??_TmrBInit
  6315  0CD3  0DA0               	rlf	??_TmrBInit,f
  6316  0CD4  0DA0               	rlf	??_TmrBInit,f
  6317  0CD5  0DA0               	rlf	??_TmrBInit,f
  6318  0CD6  0028               	movlb	8	; select bank8
  6319  0CD7  081E               	movf	30,w	;volatile
  6320  0CD8  0020               	movlb	0	; select bank0
  6321  0CD9  0620               	xorwf	??_TmrBInit,w
  6322  0CDA  3987               	andlw	-121
  6323  0CDB  0620               	xorwf	??_TmrBInit,w
  6324  0CDC  0028               	movlb	8	; select bank8
  6325  0CDD  009E               	movwf	30	;volatile
  6326                           
  6327                           ;tmr_drv.c: 166: }
  6328                           
  6329                           ;tmr_drv.c: 165: break;
  6330                           
  6331                           ;tmr_drv.c: 164: default:
  6332                           
  6333                           ;tmr_drv.c: 162: break;
  6334  0CDE  0008               	return
  6335  0CDF                     l4947:	
  6336  0CDF  0020               	movlb	0	; select bank0
  6337  0CE0  0821               	movf	TmrBInit@TmrNumb,w
  6338                           
  6339                           ; Switch size 1, requested type "space"
  6340                           ; Number of cases is 3, Range of values is 2 to 6
  6341                           ; switch strategies available:
  6342                           ; Name         Instructions Cycles
  6343                           ; simple_byte           10     6 (average)
  6344                           ; direct_byte           19     9 (fixed)
  6345                           ; jumptable            263     9 (fixed)
  6346                           ;	Chosen strategy is simple_byte
  6347  0CE1  3A02               	xorlw	2	; case 2
  6348  0CE2  1903               	skipnz
  6349  0CE3  2C7C               	goto	l4929
  6350  0CE4  3A06               	xorlw	6	; case 4
  6351  0CE5  1903               	skipnz
  6352  0CE6  2C9E               	goto	l4935
  6353  0CE7  3A02               	xorlw	2	; case 6
  6354  0CE8  1903               	skipnz
  6355  0CE9  2CC4               	goto	l4941
  6356  0CEA  2CEB               	goto	l317
  6357  0CEB                     l317:	
  6358  0CEB  0008               	return
  6359  0CEC                     __end_of_TmrBInit:	
  6360                           
  6361                           	psect	text12
  6362  0800                     __ptext12:	
  6363 ;; *************** function _MainScheduler *****************
  6364 ;; Defined at:
  6365 ;;		line 79 in file "../../../Framework/MercuryFwk/Source/c/02_Osl/os_sched.c"
  6366 ;; Parameters:    Size  Location     Type
  6367 ;;		None
  6368 ;; Auto vars:     Size  Location     Type
  6369 ;;		None
  6370 ;; Return value:  Size  Location     Type
  6371 ;;                  1    wreg      void 
  6372 ;; Registers used:
  6373 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6374 ;; Tracked objects:
  6375 ;;		On entry : 0/0
  6376 ;;		On exit  : 0/0
  6377 ;;		Unchanged: 0/0
  6378 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6379 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6380 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6381 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6382 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6383 ;;Total ram usage:        0 bytes
  6384 ;; Hardware stack levels used:    1
  6385 ;; Hardware stack levels required when called:    9
  6386 ;; This function calls:
  6387 ;;		_InitializeTasks
  6388 ;;		_ScheduleTasks
  6389 ;; This function is called by:
  6390 ;;		_main
  6391 ;; This function uses a non-reentrant model
  6392 ;;
  6393                           
  6394                           
  6395                           ;psect for function _MainScheduler
  6396  0800                     _MainScheduler:	
  6397                           
  6398                           ;os_sched.c: 82: InitializeTasks();
  6399                           
  6400                           ;incstack = 0
  6401                           ; Regs used in _MainScheduler: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  6402  0800  318A  2296  3188   	fcall	_InitializeTasks
  6403                           
  6404                           ;os_sched.c: 84: SystemState = RunningState;
  6405  0803  0020               	movlb	0	; select bank0
  6406  0804  01EF               	clrf	_SystemState
  6407  0805  0AEF               	incf	_SystemState,f
  6408  0806                     l5297:	
  6409                           ;os_sched.c: 91: while(((UINT8)(1)))
  6410                           
  6411                           
  6412                           ;os_sched.c: 92: {
  6413                           ;os_sched.c: 94: if (MainSystemTimebaseFlag == CallTaskPhase)
  6414  0806  0021               	movlb	1	; select bank1
  6415  0807  086B               	movf	_MainSystemTimebaseFlag^(0+128),w
  6416  0808  1D03               	btfss	3,2
  6417  0809  2806               	goto	l5297
  6418                           
  6419                           ;os_sched.c: 95: {
  6420                           ;os_sched.c: 97: ScheduleTasks();
  6421  080A  3186  267D  3188   	fcall	_ScheduleTasks
  6422                           
  6423                           ;os_sched.c: 99: MainSystemTimebaseFlag = WaitTriggerPhase;
  6424  080D  0021               	movlb	1	; select bank1
  6425  080E  01EB               	clrf	_MainSystemTimebaseFlag^(0+128)
  6426  080F  0AEB               	incf	_MainSystemTimebaseFlag^(0+128),f
  6427  0810  2806               	goto	l5297
  6428  0811                     __end_of_MainScheduler:	
  6429                           
  6430                           	psect	text13
  6431  067D                     __ptext13:	
  6432 ;; *************** function _ScheduleTasks *****************
  6433 ;; Defined at:
  6434 ;;		line 130 in file "../../../Framework/MercuryFwk/Source/c/02_Osl/os_sched.c"
  6435 ;; Parameters:    Size  Location     Type
  6436 ;;		None
  6437 ;; Auto vars:     Size  Location     Type
  6438 ;;  ActiveTaskIn    1   73[BANK0 ] unsigned char 
  6439 ;; Return value:  Size  Location     Type
  6440 ;;                  1    wreg      void 
  6441 ;; Registers used:
  6442 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6443 ;; Tracked objects:
  6444 ;;		On entry : 0/0
  6445 ;;		On exit  : 0/0
  6446 ;;		Unchanged: 0/0
  6447 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6448 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6449 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6450 ;;      Temps:          0       0       0       6       0       0       0       0       0       0       0       0       
      +0       0
  6451 ;;      Totals:         0       1       0       6       0       0       0       0       0       0       0       0       
      +0       0
  6452 ;;Total ram usage:        7 bytes
  6453 ;; Hardware stack levels used:    1
  6454 ;; Hardware stack levels required when called:    8
  6455 ;; This function calls:
  6456 ;;		_App_MainTask
  6457 ;;		_I2cSlv_MainTask
  6458 ;;		_I2c_DataReceiveSm
  6459 ;;		_Led_MainTask
  6460 ;;		_Wdg_MainTask
  6461 ;; This function is called by:
  6462 ;;		_MainScheduler
  6463 ;; This function uses a non-reentrant model
  6464 ;;
  6465                           
  6466                           
  6467                           ;psect for function _ScheduleTasks
  6468  067D                     _ScheduleTasks:	
  6469                           
  6470                           ;os_sched.c: 133: UINT8 ActiveTaskIndex = 0u;
  6471                           
  6472                           ;incstack = 0
  6473                           ; Regs used in _ScheduleTasks: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  6474  067D  0020               	movlb	0	; select bank0
  6475  067E  01E9               	clrf	ScheduleTasks@ActiveTaskIndex
  6476                           
  6477                           ;os_sched.c: 136: for (ActiveTaskIndex = 0u; ActiveTaskIndex < TaskNumber; ActiveTaskInd
      +                          ex++)
  6478  067F  01E9               	clrf	ScheduleTasks@ActiveTaskIndex
  6479  0680  300A               	movlw	low (_TaskNumber| (0+32768))
  6480  0681  0084               	movwf	4
  6481  0682  3090               	movlw	high (_TaskNumber| (0+32768))
  6482  0683  0085               	movwf	5
  6483  0684  3F00               	moviw [0]fsr0
  6484  0685  0022               	movlb	2	; select bank2
  6485  0686  00DA               	movwf	??_ScheduleTasks^(0+256)
  6486  0687  3F01               	moviw [1]fsr0
  6487  0688                     L5:	
  6488  0688  00DB               	movwf	(??_ScheduleTasks^(0+256)+1)
  6489  0689  0020               	movlb	0	; select bank0
  6490  068A  0869               	movf	ScheduleTasks@ActiveTaskIndex,w
  6491  068B  0022               	movlb	2	; select bank2
  6492  068C  00DC               	movwf	(??_ScheduleTasks+2)^(0+256)
  6493  068D  01DD               	clrf	((??_ScheduleTasks+2)^(0+256)+1)
  6494  068E  085B               	movf	(??_ScheduleTasks+1)^(0+256),w
  6495  068F  025D               	subwf	(??_ScheduleTasks+3)^(0+256),w
  6496  0690  1D03               	skipz
  6497  0691  2E94               	goto	u4935
  6498  0692  085A               	movf	??_ScheduleTasks^(0+256),w
  6499  0693  025C               	subwf	(??_ScheduleTasks+2)^(0+256),w
  6500  0694                     u4935:	
  6501  0694  1803               	btfsc	3,0
  6502  0695  0008               	return
  6503                           
  6504                           ;os_sched.c: 137: {
  6505                           ;os_sched.c: 138: if (TaskTable[ActiveTaskIndex].Counter >= (TaskTable[ActiveTaskIndex].
      +                          Timeout))
  6506  0696  0020               	movlb	0	; select bank0
  6507  0697  0869               	movf	ScheduleTasks@ActiveTaskIndex,w
  6508  0698  0022               	movlb	2	; select bank2
  6509  0699  00DA               	movwf	??_ScheduleTasks^(0+256)
  6510  069A  3002               	movlw	2
  6511  069B                     u4945:	
  6512  069B  35DA               	lslf	??_ScheduleTasks^(0+256),f
  6513  069C  3EFF               	addlw	-1
  6514  069D  1D03               	skipz
  6515  069E  2E9B               	goto	u4945
  6516  069F  355A               	lslf	??_ScheduleTasks^(0+256),w
  6517  06A0  3E05               	addlw	5
  6518  06A1  3E20               	addlw	(low (_TaskTable| (0+256)))& (0+255)
  6519  06A2  0086               	movwf	6
  6520  06A3  3001               	movlw	1	; select bank2/3
  6521  06A4  0087               	movwf	7
  6522  06A5  3F40               	moviw [0]fsr1
  6523  06A6  00DB               	movwf	(??_ScheduleTasks+1)^(0+256)
  6524  06A7  3F41               	moviw [1]fsr1
  6525  06A8  00DC               	movwf	((??_ScheduleTasks+1)^(0+256)+1)
  6526  06A9  0020               	movlb	0	; select bank0
  6527  06AA  0869               	movf	ScheduleTasks@ActiveTaskIndex,w
  6528  06AB  0022               	movlb	2	; select bank2
  6529  06AC  00DD               	movwf	(??_ScheduleTasks+3)^(0+256)
  6530  06AD  3002               	movlw	2
  6531  06AE                     u4955:	
  6532  06AE  35DD               	lslf	(??_ScheduleTasks+3)^(0+256),f
  6533  06AF  3EFF               	addlw	-1
  6534  06B0  1D03               	skipz
  6535  06B1  2EAE               	goto	u4955
  6536  06B2  355D               	lslf	(??_ScheduleTasks+3)^(0+256),w
  6537  06B3  3E03               	addlw	3
  6538  06B4  3E20               	addlw	(low (_TaskTable| (0+256)))& (0+255)
  6539  06B5  0086               	movwf	6
  6540  06B6  3001               	movlw	1	; select bank2/3
  6541  06B7  0087               	movwf	7
  6542  06B8  3F40               	moviw [0]fsr1
  6543  06B9  00DE               	movwf	(??_ScheduleTasks+4)^(0+256)
  6544  06BA  3F41               	moviw [1]fsr1
  6545  06BB  00DF               	movwf	((??_ScheduleTasks+4)^(0+256)+1)
  6546  06BC  085C               	movf	(??_ScheduleTasks+2)^(0+256),w
  6547  06BD  025F               	subwf	(??_ScheduleTasks+5)^(0+256),w
  6548  06BE  1D03               	skipz
  6549  06BF  2EC2               	goto	u4965
  6550  06C0  085B               	movf	(??_ScheduleTasks+1)^(0+256),w
  6551  06C1  025E               	subwf	(??_ScheduleTasks+4)^(0+256),w
  6552  06C2                     u4965:	
  6553  06C2  1C03               	skipc
  6554  06C3  2F0E               	goto	l5271
  6555                           
  6556                           ;os_sched.c: 139: {
  6557                           ;os_sched.c: 140: TaskTable[ActiveTaskIndex].Counter = ((UINT8)(0));
  6558  06C4  0020               	movlb	0	; select bank0
  6559  06C5  0869               	movf	ScheduleTasks@ActiveTaskIndex,w
  6560  06C6  0022               	movlb	2	; select bank2
  6561  06C7  00DA               	movwf	??_ScheduleTasks^(0+256)
  6562  06C8  3002               	movlw	2
  6563  06C9                     u4975:	
  6564  06C9  35DA               	lslf	??_ScheduleTasks^(0+256),f
  6565  06CA  3EFF               	addlw	-1
  6566  06CB  1D03               	skipz
  6567  06CC  2EC9               	goto	u4975
  6568  06CD  355A               	lslf	??_ScheduleTasks^(0+256),w
  6569  06CE  3E03               	addlw	3
  6570  06CF  3E20               	addlw	(low (_TaskTable| (0+256)))& (0+255)
  6571  06D0  0086               	movwf	6
  6572  06D1  3001               	movlw	1	; select bank2/3
  6573  06D2  0087               	movwf	7
  6574  06D3  3000               	movlw	0
  6575  06D4  3FC0               	movwi [0]fsr1
  6576  06D5  3FC1               	movwi [1]fsr1
  6577                           
  6578                           ;os_sched.c: 141: TaskTable[ActiveTaskIndex].State = TaskRunning;
  6579  06D6  0020               	movlb	0	; select bank0
  6580  06D7  0869               	movf	ScheduleTasks@ActiveTaskIndex,w
  6581  06D8  0022               	movlb	2	; select bank2
  6582  06D9  00DA               	movwf	??_ScheduleTasks^(0+256)
  6583  06DA  3002               	movlw	2
  6584  06DB                     u4985:	
  6585  06DB  35DA               	lslf	??_ScheduleTasks^(0+256),f
  6586  06DC  3EFF               	addlw	-1
  6587  06DD  1D03               	skipz
  6588  06DE  2EDB               	goto	u4985
  6589  06DF  355A               	lslf	??_ScheduleTasks^(0+256),w
  6590  06E0  3E02               	addlw	2
  6591  06E1  3E20               	addlw	(low (_TaskTable| (0+256)))& (0+255)
  6592  06E2  0086               	movwf	6
  6593  06E3  3001               	movlw	1	; select bank2/3
  6594  06E4  0087               	movwf	7
  6595  06E5  0181               	clrf	1
  6596  06E6  0A81               	incf	1,f
  6597                           
  6598                           ;os_sched.c: 142: TaskTable[ActiveTaskIndex].Task(TaskTable[ActiveTaskIndex].Options);
  6599  06E7  0020               	movlb	0	; select bank0
  6600  06E8  0869               	movf	ScheduleTasks@ActiveTaskIndex,w
  6601  06E9  0022               	movlb	2	; select bank2
  6602  06EA  00DA               	movwf	??_ScheduleTasks^(0+256)
  6603  06EB  3002               	movlw	2
  6604  06EC                     u4995:	
  6605  06EC  35DA               	lslf	??_ScheduleTasks^(0+256),f
  6606  06ED  3EFF               	addlw	-1
  6607  06EE  1D03               	skipz
  6608  06EF  2EEC               	goto	u4995
  6609  06F0  355A               	lslf	??_ScheduleTasks^(0+256),w
  6610  06F1  3E07               	addlw	7
  6611  06F2  3E20               	addlw	(low (_TaskTable| (0+256)))& (0+255)
  6612  06F3  0086               	movwf	6
  6613  06F4  3001               	movlw	1	; select bank2/3
  6614  06F5  0087               	movwf	7
  6615  06F6  0801               	movf	1,w
  6616  06F7  00DB               	movwf	(??_ScheduleTasks+1)^(0+256)
  6617  06F8  085B               	movf	(??_ScheduleTasks+1)^(0+256),w
  6618  06F9  0020               	movlb	0	; select bank0
  6619  06FA  00C2               	movwf	App_MainTask@Options
  6620  06FB  0869               	movf	ScheduleTasks@ActiveTaskIndex,w
  6621  06FC  0022               	movlb	2	; select bank2
  6622  06FD  00DC               	movwf	(??_ScheduleTasks+2)^(0+256)
  6623  06FE  3002               	movlw	2
  6624  06FF                     u5005:	
  6625  06FF  35DC               	lslf	(??_ScheduleTasks+2)^(0+256),f
  6626  0700  3EFF               	addlw	-1
  6627  0701  1D03               	skipz
  6628  0702  2EFF               	goto	u5005
  6629  0703  355C               	lslf	(??_ScheduleTasks+2)^(0+256),w
  6630  0704  3E20               	addlw	(low (_TaskTable| (0+256)))& (0+255)
  6631  0705  0086               	movwf	6
  6632  0706  3001               	movlw	1	; select bank2/3
  6633  0707  0087               	movwf	7
  6634  0708  3F41               	moviw [1]fsr1
  6635  0709  008A               	movwf	10
  6636  070A  3F40               	moviw [0]fsr1
  6637  070B  000A               	callw
  6638  070C  3186               	pagesel	$
  6639                           
  6640                           ;os_sched.c: 143: }
  6641  070D  2F32               	goto	l5273
  6642  070E                     l5271:	
  6643                           
  6644                           ;os_sched.c: 144: else
  6645                           ;os_sched.c: 145: {
  6646                           ;os_sched.c: 146: TaskTable[ActiveTaskIndex].Counter++;
  6647  070E  0020               	movlb	0	; select bank0
  6648  070F  0869               	movf	ScheduleTasks@ActiveTaskIndex,w
  6649  0710  0022               	movlb	2	; select bank2
  6650  0711  00DA               	movwf	??_ScheduleTasks^(0+256)
  6651  0712  3002               	movlw	2
  6652  0713                     u5015:	
  6653  0713  35DA               	lslf	??_ScheduleTasks^(0+256),f
  6654  0714  3EFF               	addlw	-1
  6655  0715  1D03               	skipz
  6656  0716  2F13               	goto	u5015
  6657  0717  355A               	lslf	??_ScheduleTasks^(0+256),w
  6658  0718  3E03               	addlw	3
  6659  0719  3E20               	addlw	(low (_TaskTable| (0+256)))& (0+255)
  6660  071A  0086               	movwf	6
  6661  071B  3001               	movlw	1	; select bank2/3
  6662  071C  0087               	movwf	7
  6663  071D  3001               	movlw	1
  6664  071E  0781               	addwf	1,f
  6665  071F  3141               	addfsr 1,1
  6666  0720  1803               	skipnc
  6667  0721  0A81               	incf	1,f
  6668                           
  6669                           ;os_sched.c: 147: TaskTable[ActiveTaskIndex].State = TaskIdle;
  6670  0722  0020               	movlb	0	; select bank0
  6671  0723  0869               	movf	ScheduleTasks@ActiveTaskIndex,w
  6672  0724  0022               	movlb	2	; select bank2
  6673  0725  00DA               	movwf	??_ScheduleTasks^(0+256)
  6674  0726  3002               	movlw	2
  6675  0727                     u5025:	
  6676  0727  35DA               	lslf	??_ScheduleTasks^(0+256),f
  6677  0728  3EFF               	addlw	-1
  6678  0729  1D03               	skipz
  6679  072A  2F27               	goto	u5025
  6680  072B  355A               	lslf	??_ScheduleTasks^(0+256),w
  6681  072C  3E02               	addlw	2
  6682  072D  3E20               	addlw	(low (_TaskTable| (0+256)))& (0+255)
  6683  072E  0086               	movwf	6
  6684  072F  3001               	movlw	1	; select bank2/3
  6685  0730  0087               	movwf	7
  6686  0731  0181               	clrf	1
  6687  0732                     l5273:	
  6688  0732  3001               	movlw	1
  6689  0733  0022               	movlb	2	; select bank2
  6690  0734  00DA               	movwf	??_ScheduleTasks^(0+256)
  6691  0735  085A               	movf	??_ScheduleTasks^(0+256),w
  6692  0736  0020               	movlb	0	; select bank0
  6693  0737  07E9               	addwf	ScheduleTasks@ActiveTaskIndex,f
  6694  0738  300A               	movlw	low (_TaskNumber| (0+32768))
  6695  0739  0084               	movwf	4
  6696  073A  3090               	movlw	high (_TaskNumber| (0+32768))
  6697  073B  0085               	movwf	5
  6698  073C  3F00               	moviw [0]fsr0
  6699  073D  0022               	movlb	2	; select bank2
  6700  073E  00DA               	movwf	??_ScheduleTasks^(0+256)
  6701  073F  3F01               	moviw [1]fsr0
  6702  0740  2E88               	goto	L5
  6703  0741                     __end_of_ScheduleTasks:	
  6704                           
  6705                           	psect	text14
  6706  0A96                     __ptext14:	
  6707 ;; *************** function _InitializeTasks *****************
  6708 ;; Defined at:
  6709 ;;		line 111 in file "../../../Framework/MercuryFwk/Source/c/02_Osl/os_sched.c"
  6710 ;; Parameters:    Size  Location     Type
  6711 ;;		None
  6712 ;; Auto vars:     Size  Location     Type
  6713 ;;  ActiveTaskIn    1    0[BANK1 ] unsigned char 
  6714 ;; Return value:  Size  Location     Type
  6715 ;;                  1    wreg      void 
  6716 ;; Registers used:
  6717 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6718 ;; Tracked objects:
  6719 ;;		On entry : 0/0
  6720 ;;		On exit  : 0/0
  6721 ;;		Unchanged: 0/0
  6722 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6723 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6724 ;;      Locals:         0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0
  6725 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6726 ;;      Totals:         0       4       1       0       0       0       0       0       0       0       0       0       
      +0       0
  6727 ;;Total ram usage:        5 bytes
  6728 ;; Hardware stack levels used:    1
  6729 ;; Hardware stack levels required when called:    8
  6730 ;; This function calls:
  6731 ;;		_App_MainTask
  6732 ;;		_I2cSlv_MainTask
  6733 ;;		_I2c_DataReceiveSm
  6734 ;;		_Led_MainTask
  6735 ;;		_Wdg_MainTask
  6736 ;; This function is called by:
  6737 ;;		_MainScheduler
  6738 ;; This function uses a non-reentrant model
  6739 ;;
  6740                           
  6741                           
  6742                           ;psect for function _InitializeTasks
  6743  0A96                     _InitializeTasks:	
  6744                           
  6745                           ;os_sched.c: 114: UINT8 ActiveTaskIndex = 0u;
  6746                           
  6747                           ;incstack = 0
  6748                           ; Regs used in _InitializeTasks: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  6749  0A96  0021               	movlb	1	; select bank1
  6750  0A97  01EC               	clrf	InitializeTasks@ActiveTaskIndex^(0+128)
  6751                           
  6752                           ;os_sched.c: 117: for (ActiveTaskIndex = 0u; ActiveTaskIndex < TaskNumber; ActiveTaskInd
      +                          ex++)
  6753  0A98  01EC               	clrf	InitializeTasks@ActiveTaskIndex^(0+128)
  6754  0A99  300A               	movlw	low (_TaskNumber| (0+32768))
  6755  0A9A  0084               	movwf	4
  6756  0A9B  3090               	movlw	high (_TaskNumber| (0+32768))
  6757  0A9C  0085               	movwf	5
  6758  0A9D  3F00               	moviw [0]fsr0
  6759  0A9E  0020               	movlb	0	; select bank0
  6760  0A9F  00E9               	movwf	??_InitializeTasks
  6761  0AA0  3F01               	moviw [1]fsr0
  6762  0AA1                     L6:	
  6763  0AA1  00EA               	movwf	??_InitializeTasks+1
  6764  0AA2  0021               	movlb	1	; select bank1
  6765  0AA3  086C               	movf	InitializeTasks@ActiveTaskIndex^(0+128),w
  6766  0AA4  0020               	movlb	0	; select bank0
  6767  0AA5  00EB               	movwf	??_InitializeTasks+2
  6768  0AA6  01EC               	clrf	??_InitializeTasks+3
  6769  0AA7  086A               	movf	??_InitializeTasks+1,w
  6770  0AA8  026C               	subwf	??_InitializeTasks+3,w
  6771  0AA9  1D03               	skipz
  6772  0AAA  2AAD               	goto	u4895
  6773  0AAB  0869               	movf	??_InitializeTasks,w
  6774  0AAC  026B               	subwf	??_InitializeTasks+2,w
  6775  0AAD                     u4895:	
  6776  0AAD  1803               	btfsc	3,0
  6777  0AAE  0008               	return
  6778                           
  6779                           ;os_sched.c: 118: {
  6780                           ;os_sched.c: 119: TaskTable[ActiveTaskIndex].Task(TaskTable[ActiveTaskIndex].Options);
  6781  0AAF  0021               	movlb	1	; select bank1
  6782  0AB0  086C               	movf	InitializeTasks@ActiveTaskIndex^(0+128),w
  6783  0AB1  0020               	movlb	0	; select bank0
  6784  0AB2  00E9               	movwf	??_InitializeTasks
  6785  0AB3  3002               	movlw	2
  6786  0AB4                     u4905:	
  6787  0AB4  35E9               	lslf	??_InitializeTasks,f
  6788  0AB5  3EFF               	addlw	-1
  6789  0AB6  1D03               	skipz
  6790  0AB7  2AB4               	goto	u4905
  6791  0AB8  3569               	lslf	??_InitializeTasks,w
  6792  0AB9  3E07               	addlw	7
  6793  0ABA  3E20               	addlw	(low (_TaskTable| (0+256)))& (0+255)
  6794  0ABB  0086               	movwf	6
  6795  0ABC  3001               	movlw	1	; select bank2/3
  6796  0ABD  0087               	movwf	7
  6797  0ABE  0801               	movf	1,w
  6798  0ABF  00EA               	movwf	??_InitializeTasks+1
  6799  0AC0  086A               	movf	??_InitializeTasks+1,w
  6800  0AC1  00C2               	movwf	App_MainTask@Options
  6801  0AC2  0021               	movlb	1	; select bank1
  6802  0AC3  086C               	movf	InitializeTasks@ActiveTaskIndex^(0+128),w
  6803  0AC4  0020               	movlb	0	; select bank0
  6804  0AC5  00EB               	movwf	??_InitializeTasks+2
  6805  0AC6  3002               	movlw	2
  6806  0AC7                     u4915:	
  6807  0AC7  35EB               	lslf	??_InitializeTasks+2,f
  6808  0AC8  3EFF               	addlw	-1
  6809  0AC9  1D03               	skipz
  6810  0ACA  2AC7               	goto	u4915
  6811  0ACB  356B               	lslf	??_InitializeTasks+2,w
  6812  0ACC  3E20               	addlw	(low (_TaskTable| (0+256)))& (0+255)
  6813  0ACD  0086               	movwf	6
  6814  0ACE  3001               	movlw	1	; select bank2/3
  6815  0ACF  0087               	movwf	7
  6816  0AD0  3F41               	moviw [1]fsr1
  6817  0AD1  008A               	movwf	10
  6818  0AD2  3F40               	moviw [0]fsr1
  6819  0AD3  000A               	callw
  6820  0AD4  318A               	pagesel	$
  6821  0AD5  3001               	movlw	1
  6822  0AD6  0020               	movlb	0	; select bank0
  6823  0AD7  00E9               	movwf	??_InitializeTasks
  6824  0AD8  0869               	movf	??_InitializeTasks,w
  6825  0AD9  0021               	movlb	1	; select bank1
  6826  0ADA  07EC               	addwf	InitializeTasks@ActiveTaskIndex^(0+128),f
  6827  0ADB  300A               	movlw	low (_TaskNumber| (0+32768))
  6828  0ADC  0084               	movwf	4
  6829  0ADD  3090               	movlw	high (_TaskNumber| (0+32768))
  6830  0ADE  0085               	movwf	5
  6831  0ADF  3F00               	moviw [0]fsr0
  6832  0AE0  0020               	movlb	0	; select bank0
  6833  0AE1  00E9               	movwf	??_InitializeTasks
  6834  0AE2  3F01               	moviw [1]fsr0
  6835  0AE3  2AA1               	goto	L6
  6836  0AE4                     __end_of_InitializeTasks:	
  6837                           
  6838                           	psect	text15
  6839  0E0A                     __ptext15:	
  6840 ;; *************** function _App_MainTask *****************
  6841 ;; Defined at:
  6842 ;;		line 333 in file "../Source/c/04_App/sb120_app.c"
  6843 ;; Parameters:    Size  Location     Type
  6844 ;;  Options         1   34[BANK0 ] unsigned char 
  6845 ;; Auto vars:     Size  Location     Type
  6846 ;;  WpuCh          18   55[BANK0 ] struct _WpuChType
  6847 ;;  AnalogChSel    12   36[BANK0 ] struct _AnalogChSelType
  6848 ;;  AdcConfig       6   49[BANK0 ] struct _AdcCfgType
  6849 ;;  Index           1   48[BANK0 ] unsigned char 
  6850 ;; Return value:  Size  Location     Type
  6851 ;;                  1    wreg      void 
  6852 ;; Registers used:
  6853 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6854 ;; Tracked objects:
  6855 ;;		On entry : 0/0
  6856 ;;		On exit  : 0/0
  6857 ;;		Unchanged: 0/0
  6858 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6859 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6860 ;;      Locals:         0      37       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6861 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6862 ;;      Totals:         0      39       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6863 ;;Total ram usage:       39 bytes
  6864 ;; Hardware stack levels used:    1
  6865 ;; Hardware stack levels required when called:    7
  6866 ;; This function calls:
  6867 ;;		_Adc_ConfigAnCh
  6868 ;;		_Adc_InitAdcModule
  6869 ;;		_AppSm
  6870 ;;		_Mcu_ConfigPullUps
  6871 ;;		_Mcu_SetDieTempMode
  6872 ;;		_Mcu_SetDieTempSts
  6873 ;;		_Mcu_SetPullUpsSts
  6874 ;; This function is called by:
  6875 ;;		_InitializeTasks
  6876 ;;		_ScheduleTasks
  6877 ;; This function uses a non-reentrant model
  6878 ;;
  6879                           
  6880                           
  6881                           ;psect for function _App_MainTask
  6882  0E0A                     _App_MainTask:	
  6883                           
  6884                           ;sb120_app.c: 335: WpuChType WpuCh = {((UINT8)(0)),((UINT8)(0)),((UINT8)(0)),((UINT8)(0)
      +                          ),((UINT8)(0)),((UINT8)(0)),((UINT8)(0)),((UINT8)(0)),((UINT8)(0)),((UINT8)(0)),((UINT8)
      +                          (0)),((UINT8)(0))};
  6885                           
  6886                           ;incstack = 0
  6887                           ; Regs used in _App_MainTask: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  6888  0E0A  3048               	movlw	low App_MainTask@F4158
  6889  0E0B  0086               	movwf	6
  6890  0E0C  3001               	movlw	high App_MainTask@F4158
  6891  0E0D  0087               	movwf	7
  6892  0E0E  3057               	movlw	low App_MainTask@WpuCh
  6893  0E0F  0084               	movwf	4
  6894  0E10  3000               	movlw	high App_MainTask@WpuCh
  6895  0E11  0085               	movwf	5
  6896  0E12  3012               	movlw	18
  6897  0E13  0020               	movlb	0	; select bank0
  6898  0E14  00C3               	movwf	??_App_MainTask
  6899  0E15                     u4810:	
  6900  0E15  0016               	moviw fsr1++
  6901  0E16  001A               	movwi fsr0++
  6902  0E17  0BC3               	decfsz	??_App_MainTask,f
  6903  0E18  2E15               	goto	u4810
  6904                           
  6905                           ;sb120_app.c: 336: AnalogChSelType AnalogChSel = {((UINT8)(0)),((UINT8)(0)),((UINT8)(0))
      +                          ,((UINT8)(0)),((UINT8)(0)),((UINT8)(0)),((UINT8)(0)),((UINT8)(0)),((UINT8)(0)),((UINT8)(
      +                          0)),((UINT8)(0)),((UINT8)(0))};
  6906  0E19  30A0               	movlw	low App_MainTask@F4172
  6907  0E1A  0086               	movwf	6
  6908  0E1B  3000               	movlw	high App_MainTask@F4172
  6909  0E1C  0087               	movwf	7
  6910  0E1D  3044               	movlw	low App_MainTask@AnalogChSel
  6911  0E1E  0084               	movwf	4
  6912  0E1F  3000               	movlw	high App_MainTask@AnalogChSel
  6913  0E20  0085               	movwf	5
  6914  0E21  300C               	movlw	12
  6915  0E22  00C3               	movwf	??_App_MainTask
  6916  0E23                     u4820:	
  6917  0E23  0016               	moviw fsr1++
  6918  0E24  001A               	movwi fsr0++
  6919  0E25  0BC3               	decfsz	??_App_MainTask,f
  6920  0E26  2E23               	goto	u4820
  6921                           
  6922                           ;sb120_app.c: 337: AdcConfigType AdcConfig;
  6923                           ;sb120_app.c: 338: UINT8 Index;
  6924                           ;sb120_app.c: 340: switch (SystemState)
  6925  0E27  2EA4               	goto	l5245
  6926  0E28                     l948:	
  6927                           ;sb120_app.c: 341: {
  6928                           ;sb120_app.c: 343: case InitializationState:
  6929                           
  6930                           
  6931                           ;sb120_app.c: 345: TRISAbits.TRISA2 = ((UINT8)(0));
  6932  0E28  0021               	movlb	1	; select bank1
  6933  0E29  110C               	bcf	12,2	;volatile
  6934                           
  6935                           ;sb120_app.c: 346: TRISCbits.TRISC1 = ((UINT8)(0));
  6936  0E2A  108E               	bcf	14,1	;volatile
  6937                           
  6938                           ;sb120_app.c: 347: TRISCbits.TRISC2 = ((UINT8)(0));
  6939  0E2B  110E               	bcf	14,2	;volatile
  6940                           
  6941                           ;sb120_app.c: 348: LATAbits.LATA2 = 0u;
  6942  0E2C  0022               	movlb	2	; select bank2
  6943  0E2D  110C               	bcf	12,2	;volatile
  6944                           
  6945                           ;sb120_app.c: 349: LATCbits.LATC1 = 0u;
  6946  0E2E  108E               	bcf	14,1	;volatile
  6947                           
  6948                           ;sb120_app.c: 350: LATCbits.LATC2 = 0u;
  6949  0E2F  110E               	bcf	14,2	;volatile
  6950                           
  6951                           ;sb120_app.c: 353: TRISCbits.TRISC6 = ((UINT8)(1));
  6952  0E30  0021               	movlb	1	; select bank1
  6953  0E31  170E               	bsf	14,6	;volatile
  6954                           
  6955                           ;sb120_app.c: 354: TRISCbits.TRISC3 = ((UINT8)(1));
  6956  0E32  158E               	bsf	14,3	;volatile
  6957                           
  6958                           ;sb120_app.c: 355: TRISCbits.TRISC4 = ((UINT8)(1));
  6959  0E33  160E               	bsf	14,4	;volatile
  6960                           
  6961                           ;sb120_app.c: 356: TRISCbits.TRISC5 = ((UINT8)(1));
  6962  0E34  168E               	bsf	14,5	;volatile
  6963                           
  6964                           ;sb120_app.c: 359: WpuCh.WpuC6 = ((UINT8)(1));
  6965  0E35  0020               	movlb	0	; select bank0
  6966  0E36  01E7               	clrf	App_MainTask@WpuCh+16
  6967  0E37  0AE7               	incf	App_MainTask@WpuCh+16,f
  6968                           
  6969                           ;sb120_app.c: 360: WpuCh.WpuC3 = ((UINT8)(1));
  6970  0E38  01E4               	clrf	App_MainTask@WpuCh+13
  6971  0E39  0AE4               	incf	App_MainTask@WpuCh+13,f
  6972                           
  6973                           ;sb120_app.c: 361: WpuCh.WpuC4 = ((UINT8)(1));
  6974  0E3A  01E5               	clrf	App_MainTask@WpuCh+14
  6975  0E3B  0AE5               	incf	App_MainTask@WpuCh+14,f
  6976                           
  6977                           ;sb120_app.c: 362: WpuCh.WpuC5 = ((UINT8)(1));
  6978  0E3C  01E6               	clrf	App_MainTask@WpuCh+15
  6979  0E3D  0AE6               	incf	App_MainTask@WpuCh+15,f
  6980                           
  6981                           ;sb120_app.c: 364: Mcu_ConfigPullUps(&WpuCh);
  6982  0E3E  3057               	movlw	(low (App_MainTask@WpuCh| 0))& (0+255)
  6983  0E3F  318E  26AE  318E   	fcall	_Mcu_ConfigPullUps
  6984                           
  6985                           ;sb120_app.c: 365: Mcu_SetPullUpsSts(Mcu_GlobalPuEnabled);
  6986  0E42  3000               	movlw	0
  6987  0E43  3195  25FF  318E   	fcall	_Mcu_SetPullUpsSts
  6988                           
  6989                           ;sb120_app.c: 368: Adc_ConfigAnCh(&AnalogChSel);
  6990  0E46  3044               	movlw	(low (App_MainTask@AnalogChSel| 0))& (0+255)
  6991  0E47  318C  2401  318E   	fcall	_Adc_ConfigAnCh
  6992                           
  6993                           ;sb120_app.c: 371: Mcu_SetDieTempSts(((UINT8)(1)));
  6994  0E4A  3001               	movlw	1
  6995  0E4B  3195  25F7  318E   	fcall	_Mcu_SetDieTempSts
  6996                           
  6997                           ;sb120_app.c: 372: Mcu_SetDieTempMode(((UINT8)(0)));
  6998  0E4E  3000               	movlw	0
  6999  0E4F  3195  25EF  318E   	fcall	_Mcu_SetDieTempMode
  7000                           
  7001                           ;sb120_app.c: 375: AdcConfig.AdcConvClock = ((UINT8)(3));
  7002  0E52  3003               	movlw	3
  7003  0E53  0020               	movlb	0	; select bank0
  7004  0E54  00C3               	movwf	??_App_MainTask
  7005  0E55  0843               	movf	??_App_MainTask,w
  7006  0E56  00D3               	movwf	App_MainTask@AdcConfig+2
  7007                           
  7008                           ;sb120_app.c: 376: AdcConfig.AdcIntEnabled = ((UINT8)(0));
  7009  0E57  01D6               	clrf	App_MainTask@AdcConfig+5
  7010                           
  7011                           ;sb120_app.c: 377: AdcConfig.AdcNegRef = ((UINT8)(0));
  7012  0E58  01D4               	clrf	App_MainTask@AdcConfig+3
  7013                           
  7014                           ;sb120_app.c: 378: AdcConfig.AdcPosRef = ((UINT8)(0));
  7015  0E59  01D5               	clrf	App_MainTask@AdcConfig+4
  7016                           
  7017                           ;sb120_app.c: 379: AdcConfig.AdcResultFormat = ((UINT8)(1));
  7018  0E5A  01D2               	clrf	App_MainTask@AdcConfig+1
  7019  0E5B  0AD2               	incf	App_MainTask@AdcConfig+1,f
  7020                           
  7021                           ;sb120_app.c: 380: AdcConfig.AdcEnable = ((UINT8)(1));
  7022  0E5C  01D1               	clrf	App_MainTask@AdcConfig
  7023  0E5D  0AD1               	incf	App_MainTask@AdcConfig,f
  7024                           
  7025                           ;sb120_app.c: 381: Adc_InitAdcModule(&AdcConfig);
  7026  0E5E  3051               	movlw	(low (App_MainTask@AdcConfig| 0))& (0+255)
  7027  0E5F  3189  21D2  318E   	fcall	_Adc_InitAdcModule
  7028                           
  7029                           ;sb120_app.c: 384: for (Index = 0; Index < ((UINT8)(3)); Index++)
  7030  0E62  0020               	movlb	0	; select bank0
  7031  0E63  01D0               	clrf	App_MainTask@Index
  7032  0E64                     L7:	
  7033  0E64  3003               	movlw	3
  7034  0E65  0250               	subwf	App_MainTask@Index,w
  7035  0E66  1803               	btfsc	3,0
  7036  0E67  0008               	return
  7037                           
  7038                           ;sb120_app.c: 385: {
  7039                           ;sb120_app.c: 386: NeopixelChannels[Index].NpxCh_PixelNumber = ((UINT8)(1));
  7040  0E68  0850               	movf	App_MainTask@Index,w
  7041  0E69  00C3               	movwf	??_App_MainTask
  7042  0E6A  3001               	movlw	1
  7043  0E6B                     u4845:	
  7044  0E6B  35C3               	lslf	??_App_MainTask,f
  7045  0E6C  3EFF               	addlw	-1
  7046  0E6D  1D03               	skipz
  7047  0E6E  2E6B               	goto	u4845
  7048  0E6F  3543               	lslf	??_App_MainTask,w
  7049  0E70  3EAC               	addlw	(low (_NeopixelChannels| 0))& (0+255)
  7050  0E71  0086               	movwf	6
  7051  0E72  0187               	clrf	7
  7052  0E73  0181               	clrf	1
  7053  0E74  0A81               	incf	1,f
  7054                           
  7055                           ;sb120_app.c: 387: NeopixelChannels[Index].NpxCh_PixelGreen = 0x00;
  7056  0E75  0850               	movf	App_MainTask@Index,w
  7057  0E76  00C3               	movwf	??_App_MainTask
  7058  0E77  3001               	movlw	1
  7059  0E78                     u4855:	
  7060  0E78  35C3               	lslf	??_App_MainTask,f
  7061  0E79  3EFF               	addlw	-1
  7062  0E7A  1D03               	skipz
  7063  0E7B  2E78               	goto	u4855
  7064  0E7C  3543               	lslf	??_App_MainTask,w
  7065  0E7D  3E01               	addlw	1
  7066  0E7E  3EAC               	addlw	(low (_NeopixelChannels| 0))& (0+255)
  7067  0E7F  0086               	movwf	6
  7068  0E80  0187               	clrf	7
  7069  0E81  0181               	clrf	1
  7070                           
  7071                           ;sb120_app.c: 388: NeopixelChannels[Index].NpxCh_PixelRed = 0x00;
  7072  0E82  0850               	movf	App_MainTask@Index,w
  7073  0E83  00C3               	movwf	??_App_MainTask
  7074  0E84  3001               	movlw	1
  7075  0E85                     u4865:	
  7076  0E85  35C3               	lslf	??_App_MainTask,f
  7077  0E86  3EFF               	addlw	-1
  7078  0E87  1D03               	skipz
  7079  0E88  2E85               	goto	u4865
  7080  0E89  3543               	lslf	??_App_MainTask,w
  7081  0E8A  3E02               	addlw	2
  7082  0E8B  3EAC               	addlw	(low (_NeopixelChannels| 0))& (0+255)
  7083  0E8C  0086               	movwf	6
  7084  0E8D  0187               	clrf	7
  7085  0E8E  0181               	clrf	1
  7086                           
  7087                           ;sb120_app.c: 389: NeopixelChannels[Index].NpxCh_PixelBlue = 0x00;
  7088  0E8F  0850               	movf	App_MainTask@Index,w
  7089  0E90  00C3               	movwf	??_App_MainTask
  7090  0E91  3001               	movlw	1
  7091  0E92                     u4875:	
  7092  0E92  35C3               	lslf	??_App_MainTask,f
  7093  0E93  3EFF               	addlw	-1
  7094  0E94  1D03               	skipz
  7095  0E95  2E92               	goto	u4875
  7096  0E96  3543               	lslf	??_App_MainTask,w
  7097  0E97  3E03               	addlw	3
  7098  0E98  3EAC               	addlw	(low (_NeopixelChannels| 0))& (0+255)
  7099  0E99  0086               	movwf	6
  7100  0E9A  0187               	clrf	7
  7101  0E9B  0181               	clrf	1
  7102  0E9C  3001               	movlw	1
  7103  0E9D  00C3               	movwf	??_App_MainTask
  7104  0E9E  0843               	movf	??_App_MainTask,w
  7105  0E9F  07D0               	addwf	App_MainTask@Index,f
  7106  0EA0  2E64               	goto	L7
  7107  0EA1                     l5241:	
  7108                           ;sb120_app.c: 394: case RunningState:
  7109                           
  7110                           ;sb120_app.c: 390: }
  7111                           ;sb120_app.c: 391: break;
  7112                           
  7113                           
  7114                           ;sb120_app.c: 398: AppSm();
  7115  0EA1  3188  2085         	fcall	_AppSm
  7116                           
  7117                           ;sb120_app.c: 404: }
  7118                           
  7119                           ;sb120_app.c: 403: break;
  7120                           
  7121                           ;sb120_app.c: 402: default:
  7122                           
  7123                           ;sb120_app.c: 399: break;
  7124  0EA3  0008               	return
  7125  0EA4                     l5245:	
  7126  0EA4  0020               	movlb	0	; select bank0
  7127  0EA5  086F               	movf	_SystemState,w
  7128                           
  7129                           ; Switch size 1, requested type "space"
  7130                           ; Number of cases is 2, Range of values is 0 to 1
  7131                           ; switch strategies available:
  7132                           ; Name         Instructions Cycles
  7133                           ; simple_byte            7     4 (average)
  7134                           ; direct_byte           10     6 (fixed)
  7135                           ; jumptable            260     6 (fixed)
  7136                           ;	Chosen strategy is simple_byte
  7137  0EA6  3A00               	xorlw	0	; case 0
  7138  0EA7  1903               	skipnz
  7139  0EA8  2E28               	goto	l948
  7140  0EA9  3A01               	xorlw	1	; case 1
  7141  0EAA  1903               	skipnz
  7142  0EAB  2EA1               	goto	l5241
  7143  0EAC  2EAD               	goto	l954
  7144  0EAD                     l954:	
  7145  0EAD  0008               	return
  7146  0EAE                     __end_of_App_MainTask:	
  7147                           
  7148                           	psect	text16
  7149  08DD                     __ptext16:	
  7150 ;; *************** function _Led_MainTask *****************
  7151 ;; Defined at:
  7152 ;;		line 122 in file "../../../Framework/MercuryFwk/Source/c/03_Sml/02_Ssl/led.c"
  7153 ;; Parameters:    Size  Location     Type
  7154 ;;  Options         1   34[BANK0 ] unsigned char 
  7155 ;; Auto vars:     Size  Location     Type
  7156 ;;		None
  7157 ;; Return value:  Size  Location     Type
  7158 ;;                  1    wreg      void 
  7159 ;; Registers used:
  7160 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7161 ;; Tracked objects:
  7162 ;;		On entry : 0/0
  7163 ;;		On exit  : 0/0
  7164 ;;		Unchanged: 0/0
  7165 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7166 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7167 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7168 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7169 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7170 ;;Total ram usage:        5 bytes
  7171 ;; Hardware stack levels used:    1
  7172 ;; Hardware stack levels required when called:    5
  7173 ;; This function calls:
  7174 ;;		_LedStateMachine
  7175 ;;		_SetLedBehavSts
  7176 ;; This function is called by:
  7177 ;;		_InitializeTasks
  7178 ;;		_ScheduleTasks
  7179 ;; This function uses a non-reentrant model
  7180 ;;
  7181                           
  7182                           
  7183                           ;psect for function _Led_MainTask
  7184  08DD                     _Led_MainTask:	
  7185                           
  7186                           ;led.c: 124: switch (SystemState)
  7187                           
  7188                           ;incstack = 0
  7189                           ; Regs used in _Led_MainTask: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  7190  08DD  2901               	goto	l5195
  7191  08DE                     l648:	
  7192                           ;led.c: 125: {
  7193                           ;led.c: 127: case InitializationState:
  7194                           
  7195                           
  7196                           ;led.c: 129: TRISCbits.TRISC0 = ((UINT8)(0));
  7197  08DE  0021               	movlb	1	; select bank1
  7198  08DF  100E               	bcf	14,0	;volatile
  7199                           
  7200                           ;led.c: 130: LATCbits.LATC0 = ((UINT8)(0));
  7201  08E0  0022               	movlb	2	; select bank2
  7202  08E1  100E               	bcf	14,0	;volatile
  7203                           
  7204                           ;led.c: 132: SetLedBehavSts(((UINT8)(1)));
  7205  08E2  3001               	movlw	1
  7206  08E3  318A  2209         	fcall	_SetLedBehavSts
  7207                           
  7208                           ;led.c: 133: break;
  7209  08E5  0008               	return
  7210  08E6                     l5191:	
  7211                           ;led.c: 136: case RunningState:
  7212                           
  7213                           
  7214                           ;led.c: 138: LATCbits.LATC0 = LedStateMachine(1u,&Led1Sts,&Led1Blink,&Led1Pulse);
  7215  08E6  30EA               	movlw	(low (_Led1Sts| 0))& (0+255)
  7216  08E7  0020               	movlb	0	; select bank0
  7217  08E8  00C3               	movwf	??_Led_MainTask
  7218  08E9  0843               	movf	??_Led_MainTask,w
  7219  08EA  00AB               	movwf	LedStateMachine@LedSts
  7220  08EB  30D1               	movlw	(low (_Led1Blink| 0))& (0+255)
  7221  08EC  00C4               	movwf	??_Led_MainTask+1
  7222  08ED  0844               	movf	??_Led_MainTask+1,w
  7223  08EE  00AC               	movwf	LedStateMachine@LedBlink
  7224  08EF  30DA               	movlw	(low (_Led1Pulse| 0))& (0+255)
  7225  08F0  00C5               	movwf	??_Led_MainTask+2
  7226  08F1  0845               	movf	??_Led_MainTask+2,w
  7227  08F2  00AD               	movwf	LedStateMachine@LedPulse
  7228  08F3  3001               	movlw	1
  7229  08F4  3189  216C         	fcall	_LedStateMachine
  7230  08F6  0020               	movlb	0	; select bank0
  7231  08F7  00C6               	movwf	??_Led_MainTask+3
  7232  08F8  0022               	movlb	2	; select bank2
  7233  08F9  080E               	movf	14,w	;volatile
  7234  08FA  0020               	movlb	0	; select bank0
  7235  08FB  0646               	xorwf	??_Led_MainTask+3,w
  7236  08FC  39FE               	andlw	-2
  7237  08FD  0646               	xorwf	??_Led_MainTask+3,w
  7238  08FE  0022               	movlb	2	; select bank2
  7239  08FF  008E               	movwf	14	;volatile
  7240                           
  7241                           ;led.c: 144: }
  7242                           
  7243                           ;led.c: 143: break;
  7244                           
  7245                           ;led.c: 142: default:
  7246                           
  7247                           ;led.c: 139: break;
  7248  0900  0008               	return
  7249  0901                     l5195:	
  7250  0901  0020               	movlb	0	; select bank0
  7251  0902  086F               	movf	_SystemState,w
  7252                           
  7253                           ; Switch size 1, requested type "space"
  7254                           ; Number of cases is 2, Range of values is 0 to 1
  7255                           ; switch strategies available:
  7256                           ; Name         Instructions Cycles
  7257                           ; simple_byte            7     4 (average)
  7258                           ; direct_byte           10     6 (fixed)
  7259                           ; jumptable            260     6 (fixed)
  7260                           ;	Chosen strategy is simple_byte
  7261  0903  3A00               	xorlw	0	; case 0
  7262  0904  1903               	skipnz
  7263  0905  28DE               	goto	l648
  7264  0906  3A01               	xorlw	1	; case 1
  7265  0907  1903               	skipnz
  7266  0908  28E6               	goto	l5191
  7267  0909  290A               	goto	l652
  7268  090A                     l652:	
  7269  090A  0008               	return
  7270  090B                     __end_of_Led_MainTask:	
  7271                           
  7272                           	psect	text17
  7273  16D8                     __ptext17:	
  7274 ;; *************** function _I2cSlv_MainTask *****************
  7275 ;; Defined at:
  7276 ;;		line 109 in file "../../../Framework/MercuryFwk/Source/c/03_Sml/01_Pml/01_SlvI2c/i2c_slv.c"
  7277 ;; Parameters:    Size  Location     Type
  7278 ;;  Options         1   34[BANK0 ] unsigned char 
  7279 ;; Auto vars:     Size  Location     Type
  7280 ;;		None
  7281 ;; Return value:  Size  Location     Type
  7282 ;;                  1    wreg      void 
  7283 ;; Registers used:
  7284 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7285 ;; Tracked objects:
  7286 ;;		On entry : 0/0
  7287 ;;		On exit  : 0/0
  7288 ;;		Unchanged: 0/0
  7289 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7290 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7291 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7292 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7293 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7294 ;;Total ram usage:        1 bytes
  7295 ;; Hardware stack levels used:    1
  7296 ;; Hardware stack levels required when called:    4
  7297 ;; This function calls:
  7298 ;;		_I2cSlv_I2cDrvHandle
  7299 ;;		_I2c_InitI2cModule
  7300 ;;		_I2c_SetConfig
  7301 ;; This function is called by:
  7302 ;;		_InitializeTasks
  7303 ;;		_ScheduleTasks
  7304 ;; This function uses a non-reentrant model
  7305 ;;
  7306                           
  7307                           
  7308                           ;psect for function _I2cSlv_MainTask
  7309  16D8                     _I2cSlv_MainTask:	
  7310                           
  7311                           ;i2c_slv.c: 111: switch (SystemState)
  7312                           
  7313                           ;incstack = 0
  7314                           ; Regs used in _I2cSlv_MainTask: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  7315  16D8  2EE3               	goto	l5185
  7316  16D9                     l5177:	
  7317                           ;i2c_slv.c: 112: {
  7318                           ;i2c_slv.c: 114: case InitializationState:
  7319                           
  7320                           
  7321                           ;i2c_slv.c: 116: I2c_SetConfig();
  7322  16D9  3196  26C4  3196   	fcall	_I2c_SetConfig
  7323                           
  7324                           ;i2c_slv.c: 118: I2c_InitI2cModule(&I2cConfig);
  7325  16DC  30C6               	movlw	(low (_I2cConfig| 0))& (0+255)
  7326  16DD  318F  2754         	fcall	_I2c_InitI2cModule
  7327                           
  7328                           ;i2c_slv.c: 119: break;
  7329  16DF  0008               	return
  7330  16E0                     l5181:	
  7331                           ;i2c_slv.c: 122: case RunningState:
  7332                           
  7333                           
  7334                           ;i2c_slv.c: 124: I2cSlv_I2cDrvHandle();
  7335  16E0  318C  24EC         	fcall	_I2cSlv_I2cDrvHandle
  7336                           
  7337                           ;i2c_slv.c: 130: }
  7338                           
  7339                           ;i2c_slv.c: 129: break;
  7340                           
  7341                           ;i2c_slv.c: 128: default:
  7342                           
  7343                           ;i2c_slv.c: 125: break;
  7344  16E2  0008               	return
  7345  16E3                     l5185:	
  7346  16E3  0020               	movlb	0	; select bank0
  7347  16E4  086F               	movf	_SystemState,w
  7348                           
  7349                           ; Switch size 1, requested type "space"
  7350                           ; Number of cases is 2, Range of values is 0 to 1
  7351                           ; switch strategies available:
  7352                           ; Name         Instructions Cycles
  7353                           ; simple_byte            7     4 (average)
  7354                           ; direct_byte           10     6 (fixed)
  7355                           ; jumptable            260     6 (fixed)
  7356                           ;	Chosen strategy is simple_byte
  7357  16E5  3A00               	xorlw	0	; case 0
  7358  16E6  1903               	skipnz
  7359  16E7  2ED9               	goto	l5177
  7360  16E8  3A01               	xorlw	1	; case 1
  7361  16E9  1903               	skipnz
  7362  16EA  2EE0               	goto	l5181
  7363  16EB  2EEC               	goto	l588
  7364  16EC                     l588:	
  7365  16EC  0008               	return
  7366  16ED                     __end_of_I2cSlv_MainTask:	
  7367                           
  7368                           	psect	text18
  7369  0317                     __ptext18:	
  7370 ;; *************** function _I2c_DataReceiveSm *****************
  7371 ;; Defined at:
  7372 ;;		line 297 in file "../../../Framework/MercuryFwk/Source/c/01_Hal/02_Drv/i2c_slv_drv.c"
  7373 ;; Parameters:    Size  Location     Type
  7374 ;;  Options         1   34[BANK0 ] unsigned char 
  7375 ;; Auto vars:     Size  Location     Type
  7376 ;;  Index           1   42[BANK0 ] unsigned char 
  7377 ;; Return value:  Size  Location     Type
  7378 ;;                  1    wreg      void 
  7379 ;; Registers used:
  7380 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7381 ;; Tracked objects:
  7382 ;;		On entry : 0/0
  7383 ;;		On exit  : 0/0
  7384 ;;		Unchanged: 0/0
  7385 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7386 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7387 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7388 ;;      Temps:          0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7389 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7390 ;;Total ram usage:        9 bytes
  7391 ;; Hardware stack levels used:    1
  7392 ;; Hardware stack levels required when called:    3
  7393 ;; This function calls:
  7394 ;;		_CheckAckStatus
  7395 ;;		_CheckByteStatus
  7396 ;;		_CheckStopBitStatus
  7397 ;;		_ClearRxBuffer
  7398 ;;		_ClearTxBuffer
  7399 ;;		_GenerateEvt
  7400 ;;		_ReceiveEvt
  7401 ;; This function is called by:
  7402 ;;		_InitializeTasks
  7403 ;;		_ScheduleTasks
  7404 ;; This function uses a non-reentrant model
  7405 ;;
  7406                           
  7407                           
  7408                           ;psect for function _I2c_DataReceiveSm
  7409  0317                     _I2c_DataReceiveSm:	
  7410                           
  7411                           ;i2c_slv_drv.c: 300: static I2cRxStateType I2cRxState = CheckRxByte;
  7412                           ;i2c_slv_drv.c: 301: static UINT8 I2cRxAddress;
  7413                           ;i2c_slv_drv.c: 302: static UINT8 I2cRxFlag = ((UINT8)(0));
  7414                           ;i2c_slv_drv.c: 303: static UINT8 OpType;
  7415                           ;i2c_slv_drv.c: 304: static UINT8 RxCounter = 0;
  7416                           ;i2c_slv_drv.c: 305: static UINT8 TxCounter = 0;
  7417                           ;i2c_slv_drv.c: 306: UINT8 Index;
  7418                           ;i2c_slv_drv.c: 308: switch (I2cRxState)
  7419                           
  7420                           ;incstack = 0
  7421                           ; Regs used in _I2c_DataReceiveSm: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  7422  0317  2BF3               	goto	l5155
  7423  0318                     l5079:	
  7424                           ;i2c_slv_drv.c: 309: {
  7425                           ;i2c_slv_drv.c: 310: case CheckRxByte:
  7426                           
  7427                           
  7428                           ;i2c_slv_drv.c: 312: if (ReceiveEvt(&I2cNewTxNotification))
  7429  0318  30E2               	movlw	(low (_I2cNewTxNotification| 0))& (0+255)
  7430  0319  3197  27BD  3183   	fcall	_ReceiveEvt
  7431  031C  3A00               	xorlw	0
  7432  031D  1903               	skipnz
  7433  031E  0008               	return
  7434                           
  7435                           ;i2c_slv_drv.c: 313: {
  7436                           ;i2c_slv_drv.c: 315: if (CheckByteStatus() == ((UINT8)(0)))
  7437  031F  3196  2611  3183   	fcall	_CheckByteStatus
  7438  0322  3A00               	xorlw	0
  7439  0323  1D03               	skipz
  7440  0324  2B2B               	goto	l5085
  7441                           
  7442                           ;i2c_slv_drv.c: 316: {
  7443                           ;i2c_slv_drv.c: 318: I2cRxFlag = ((UINT8)(1));
  7444  0325  0021               	movlb	1	; select bank1
  7445  0326  01C3               	clrf	I2c_DataReceiveSm@I2cRxFlag^(0+128)
  7446  0327  0AC3               	incf	I2c_DataReceiveSm@I2cRxFlag^(0+128),f
  7447                           
  7448                           ;i2c_slv_drv.c: 320: I2cRxState = StoreAddrByte;
  7449  0328  01C4               	clrf	I2c_DataReceiveSm@I2cRxState^(0+128)
  7450  0329  0AC4               	incf	I2c_DataReceiveSm@I2cRxState^(0+128),f
  7451                           
  7452                           ;i2c_slv_drv.c: 321: }
  7453  032A  0008               	return
  7454  032B                     l5085:	
  7455                           
  7456                           ;i2c_slv_drv.c: 322: else if ((CheckByteStatus() == ((UINT8)(1))) && (I2cRxFlag == ((UIN
      +                          T8)(1))))
  7457  032B  3196  2611  3183   	fcall	_CheckByteStatus
  7458  032E  3A01               	xorlw	1
  7459  032F  1D03               	skipz
  7460  0330  0008               	return
  7461  0331  0021               	movlb	1	; select bank1
  7462  0332  0343               	decf	I2c_DataReceiveSm@I2cRxFlag^(0+128),w
  7463  0333  1D03               	btfss	3,2
  7464  0334  0008               	return
  7465                           
  7466                           ;i2c_slv_drv.c: 323: {
  7467                           ;i2c_slv_drv.c: 324: if (OpType == ((UINT8)(0)))
  7468  0335  0020               	movlb	0	; select bank0
  7469  0336  086E               	movf	I2c_DataReceiveSm@OpType,w
  7470  0337  1D03               	btfss	3,2
  7471  0338  2B3F               	goto	l5093
  7472                           
  7473                           ;i2c_slv_drv.c: 325: {
  7474                           ;i2c_slv_drv.c: 327: I2cRxState = HandleWrite;
  7475  0339  3002               	movlw	2
  7476  033A  00C3               	movwf	??_I2c_DataReceiveSm
  7477  033B  0843               	movf	??_I2c_DataReceiveSm,w
  7478  033C  0021               	movlb	1	; select bank1
  7479  033D  00C4               	movwf	I2c_DataReceiveSm@I2cRxState^(0+128)
  7480                           
  7481                           ;i2c_slv_drv.c: 328: }
  7482  033E  0008               	return
  7483  033F                     l5093:	
  7484                           
  7485                           ;i2c_slv_drv.c: 329: else
  7486                           ;i2c_slv_drv.c: 330: {
  7487                           ;i2c_slv_drv.c: 332: I2cRxState = HandleRead;
  7488  033F  3003               	movlw	3
  7489  0340  0020               	movlb	0	; select bank0
  7490  0341  00C3               	movwf	??_I2c_DataReceiveSm
  7491  0342  0843               	movf	??_I2c_DataReceiveSm,w
  7492  0343  0021               	movlb	1	; select bank1
  7493  0344  00C4               	movwf	I2c_DataReceiveSm@I2cRxState^(0+128)
  7494                           
  7495                           ;i2c_slv_drv.c: 338: }
  7496                           ;i2c_slv_drv.c: 339: }
  7497                           ;i2c_slv_drv.c: 340: break;
  7498                           
  7499                           ;i2c_slv_drv.c: 335: else
  7500                           ;i2c_slv_drv.c: 336: {
  7501                           
  7502                           ;i2c_slv_drv.c: 333: }
  7503                           ;i2c_slv_drv.c: 334: }
  7504  0345  0008               	return
  7505  0346                     l5095:	
  7506                           ;i2c_slv_drv.c: 342: case StoreAddrByte:
  7507                           
  7508                           
  7509                           ;i2c_slv_drv.c: 344: I2cRxAddress = SSP1BUF;
  7510  0346  0024               	movlb	4	; select bank4
  7511  0347  0811               	movf	17,w	;volatile
  7512  0348  0020               	movlb	0	; select bank0
  7513  0349  00C3               	movwf	??_I2c_DataReceiveSm
  7514  034A  0843               	movf	??_I2c_DataReceiveSm,w
  7515  034B  00ED               	movwf	I2c_DataReceiveSm@I2cRxAddress
  7516                           
  7517                           ;i2c_slv_drv.c: 346: I2cRxAddress = (I2cRxAddress >> ((UINT8)(1)));
  7518  034C  366D               	lsrf	I2c_DataReceiveSm@I2cRxAddress,w
  7519  034D  00C3               	movwf	??_I2c_DataReceiveSm
  7520  034E  0843               	movf	??_I2c_DataReceiveSm,w
  7521  034F  00ED               	movwf	I2c_DataReceiveSm@I2cRxAddress
  7522                           
  7523                           ;i2c_slv_drv.c: 348: OpType = (SSP1BUF & ((UINT8)(0x01)));
  7524  0350  0024               	movlb	4	; select bank4
  7525  0351  0811               	movf	17,w	;volatile
  7526  0352  3901               	andlw	1
  7527  0353  0020               	movlb	0	; select bank0
  7528  0354  00C3               	movwf	??_I2c_DataReceiveSm
  7529  0355  0843               	movf	??_I2c_DataReceiveSm,w
  7530  0356  00EE               	movwf	I2c_DataReceiveSm@OpType
  7531                           
  7532                           ;i2c_slv_drv.c: 350: if (OpType == ((UINT8)(1)))
  7533  0357  036E               	decf	I2c_DataReceiveSm@OpType,w
  7534  0358  1D03               	btfss	3,2
  7535  0359  2B67               	goto	l5107
  7536                           
  7537                           ;i2c_slv_drv.c: 351: {
  7538                           ;i2c_slv_drv.c: 353: SSP1BUF = I2cTxBuffer[TxCounter];
  7539  035A  0877               	movf	I2c_DataReceiveSm@TxCounter,w
  7540  035B  3EA0               	addlw	(low (_I2cTxBuffer| (0+512)))& (0+255)
  7541  035C  0086               	movwf	6
  7542  035D  3002               	movlw	2	; select bank5/6
  7543  035E  0087               	movwf	7
  7544  035F  0801               	movf	1,w
  7545  0360  0024               	movlb	4	; select bank4
  7546  0361  0091               	movwf	17	;volatile
  7547                           
  7548                           ;i2c_slv_drv.c: 355: TxCounter++;
  7549  0362  3001               	movlw	1
  7550  0363  0020               	movlb	0	; select bank0
  7551  0364  00C3               	movwf	??_I2c_DataReceiveSm
  7552  0365  0843               	movf	??_I2c_DataReceiveSm,w
  7553  0366  07F7               	addwf	I2c_DataReceiveSm@TxCounter,f
  7554  0367                     l5107:	
  7555                           ;i2c_slv_drv.c: 357: else
  7556                           ;i2c_slv_drv.c: 358: {
  7557                           
  7558                           ;i2c_slv_drv.c: 356: }
  7559                           
  7560                           
  7561                           ;i2c_slv_drv.c: 360: }
  7562                           ;i2c_slv_drv.c: 362: I2cRxState = StopClkStretch;
  7563  0367  3004               	movlw	4
  7564  0368  00C3               	movwf	??_I2c_DataReceiveSm
  7565  0369  0843               	movf	??_I2c_DataReceiveSm,w
  7566  036A  0021               	movlb	1	; select bank1
  7567  036B  00C4               	movwf	I2c_DataReceiveSm@I2cRxState^(0+128)
  7568                           
  7569                           ;i2c_slv_drv.c: 363: break;
  7570  036C  0008               	return
  7571  036D                     l5109:	
  7572                           ;i2c_slv_drv.c: 365: case HandleWrite:
  7573                           
  7574                           
  7575                           ;i2c_slv_drv.c: 367: if (CheckStopBitStatus() == ((UINT8)(1)))
  7576  036D  3196  261B  3183   	fcall	_CheckStopBitStatus
  7577  0370  3A01               	xorlw	1
  7578  0371  1D03               	skipz
  7579  0372  2BB8               	goto	l5133
  7580                           
  7581                           ;i2c_slv_drv.c: 368: {
  7582                           ;i2c_slv_drv.c: 370: I2cRxFlag = ((UINT8)(0));
  7583  0373  0021               	movlb	1	; select bank1
  7584  0374  01C3               	clrf	I2c_DataReceiveSm@I2cRxFlag^(0+128)
  7585                           
  7586                           ;i2c_slv_drv.c: 372: I2cPacket.Lenght = RxCounter;
  7587  0375  30EF               	movlw	239
  7588  0376  0086               	movwf	6
  7589  0377  3023               	movlw	35
  7590  0378  0087               	movwf	7
  7591  0379  0876               	movf	I2c_DataReceiveSm@RxCounter,w
  7592  037A  0081               	movwf	1
  7593                           
  7594                           ;i2c_slv_drv.c: 373: I2cPacket.ReadWrite = ((UINT8)(0));
  7595  037B  309D               	movlw	157
  7596  037C  0086               	movwf	6
  7597  037D  3023               	movlw	35
  7598  037E  0087               	movwf	7
  7599  037F  3141               	addfsr 1,1
  7600  0380  0181               	clrf	1
  7601                           
  7602                           ;i2c_slv_drv.c: 374: I2cPacket.SlaveAddress = I2cRxAddress;
  7603  0381  309D               	movlw	157
  7604  0382  0086               	movwf	6
  7605  0383  3023               	movlw	35
  7606  0384  0087               	movwf	7
  7607  0385  0020               	movlb	0	; select bank0
  7608  0386  086D               	movf	I2c_DataReceiveSm@I2cRxAddress,w
  7609  0387  3FC0               	movwi [0]fsr1
  7610                           
  7611                           ;i2c_slv_drv.c: 375: for (Index = 0; Index < ((UINT8)(80)); Index++)
  7612  0388  01CA               	clrf	I2c_DataReceiveSm@Index
  7613  0389  3050               	movlw	80
  7614  038A  024A               	subwf	I2c_DataReceiveSm@Index,w
  7615  038B  1803               	btfsc	3,0
  7616  038C  2BAF               	goto	l5127
  7617  038D                     l5121:	
  7618                           
  7619                           ;i2c_slv_drv.c: 376: {
  7620                           ;i2c_slv_drv.c: 377: I2cPacket.Buffer[Index] = I2cRxBuffer[Index];
  7621  038D  084A               	movf	I2c_DataReceiveSm@Index,w
  7622  038E  3E20               	addlw	(low (_I2cRxBuffer| (0+768)))& (0+255)
  7623  038F  0086               	movwf	6
  7624  0390  3003               	movlw	3	; select bank6/7
  7625  0391  0087               	movwf	7
  7626  0392  0801               	movf	1,w
  7627  0393  00C3               	movwf	??_I2c_DataReceiveSm
  7628  0394  084A               	movf	I2c_DataReceiveSm@Index,w
  7629  0395  00C4               	movwf	??_I2c_DataReceiveSm+1
  7630  0396  01C5               	clrf	??_I2c_DataReceiveSm+2
  7631  0397  309F               	movlw	159
  7632  0398  00C6               	movwf	??_I2c_DataReceiveSm+3
  7633  0399  3023               	movlw	35
  7634  039A  00C7               	movwf	??_I2c_DataReceiveSm+4
  7635  039B  0844               	movf	??_I2c_DataReceiveSm+1,w
  7636  039C  0746               	addwf	??_I2c_DataReceiveSm+3,w
  7637  039D  00C8               	movwf	??_I2c_DataReceiveSm+5
  7638  039E  0845               	movf	??_I2c_DataReceiveSm+2,w
  7639  039F  3D47               	addwfc	??_I2c_DataReceiveSm+4,w
  7640  03A0  00C9               	movwf	??_I2c_DataReceiveSm+6
  7641  03A1  0848               	movf	??_I2c_DataReceiveSm+5,w
  7642  03A2  0086               	movwf	6
  7643  03A3  0849               	movf	??_I2c_DataReceiveSm+6,w
  7644  03A4  0087               	movwf	7
  7645  03A5  0843               	movf	??_I2c_DataReceiveSm,w
  7646  03A6  0081               	movwf	1
  7647  03A7  3001               	movlw	1
  7648  03A8  00C3               	movwf	??_I2c_DataReceiveSm
  7649  03A9  0843               	movf	??_I2c_DataReceiveSm,w
  7650  03AA  07CA               	addwf	I2c_DataReceiveSm@Index,f
  7651  03AB  3050               	movlw	80
  7652  03AC  024A               	subwf	I2c_DataReceiveSm@Index,w
  7653  03AD  1C03               	skipc
  7654  03AE  2B8D               	goto	l5121
  7655  03AF                     l5127:	
  7656                           
  7657                           ;i2c_slv_drv.c: 378: }
  7658                           ;i2c_slv_drv.c: 381: GenerateEvt(&I2cNewPacketNotification);
  7659  03AF  30E0               	movlw	(low (_I2cNewPacketNotification| 0))& (0+255)
  7660  03B0  3197  27DE  3183   	fcall	_GenerateEvt
  7661                           
  7662                           ;i2c_slv_drv.c: 384: RxCounter = 0;
  7663  03B3  01F6               	clrf	I2c_DataReceiveSm@RxCounter
  7664                           
  7665                           ;i2c_slv_drv.c: 386: ClearRxBuffer();
  7666  03B4  3196  2691  3183   	fcall	_ClearRxBuffer
  7667                           
  7668                           ;i2c_slv_drv.c: 387: }
  7669  03B7  2BC7               	goto	l5137
  7670  03B8                     l5133:	
  7671                           
  7672                           ;i2c_slv_drv.c: 388: else
  7673                           ;i2c_slv_drv.c: 389: {
  7674                           ;i2c_slv_drv.c: 391: I2cRxBuffer[RxCounter] = SSP1BUF;
  7675  03B8  0024               	movlb	4	; select bank4
  7676  03B9  0811               	movf	17,w	;volatile
  7677  03BA  0020               	movlb	0	; select bank0
  7678  03BB  00C3               	movwf	??_I2c_DataReceiveSm
  7679  03BC  0876               	movf	I2c_DataReceiveSm@RxCounter,w
  7680  03BD  3E20               	addlw	(low (_I2cRxBuffer| (0+768)))& (0+255)
  7681  03BE  0086               	movwf	6
  7682  03BF  3003               	movlw	3	; select bank6/7
  7683  03C0  0087               	movwf	7
  7684  03C1  0843               	movf	??_I2c_DataReceiveSm,w
  7685  03C2  0081               	movwf	1
  7686                           
  7687                           ;i2c_slv_drv.c: 393: RxCounter++;
  7688  03C3  3001               	movlw	1
  7689  03C4  00C3               	movwf	??_I2c_DataReceiveSm
  7690  03C5  0843               	movf	??_I2c_DataReceiveSm,w
  7691  03C6  07F6               	addwf	I2c_DataReceiveSm@RxCounter,f
  7692  03C7                     l5137:	
  7693                           
  7694                           ;i2c_slv_drv.c: 394: }
  7695                           ;i2c_slv_drv.c: 396: I2cRxState = StopClkStretch;
  7696  03C7  3004               	movlw	4
  7697  03C8  0020               	movlb	0	; select bank0
  7698  03C9  00C3               	movwf	??_I2c_DataReceiveSm
  7699  03CA  0843               	movf	??_I2c_DataReceiveSm,w
  7700  03CB  0021               	movlb	1	; select bank1
  7701  03CC  00C4               	movwf	I2c_DataReceiveSm@I2cRxState^(0+128)
  7702                           
  7703                           ;i2c_slv_drv.c: 397: break;
  7704  03CD  0008               	return
  7705  03CE                     l5139:	
  7706                           ;i2c_slv_drv.c: 399: case HandleRead:
  7707                           
  7708                           
  7709                           ;i2c_slv_drv.c: 401: if (CheckAckStatus() == ((UINT8)(0)))
  7710  03CE  3196  2607  3183   	fcall	_CheckAckStatus
  7711  03D1  3A00               	xorlw	0
  7712  03D2  1D03               	skipz
  7713  03D3  2BE2               	goto	l5145
  7714                           
  7715                           ;i2c_slv_drv.c: 402: {
  7716                           ;i2c_slv_drv.c: 404: SSP1BUF = I2cTxBuffer[TxCounter];
  7717  03D4  0877               	movf	I2c_DataReceiveSm@TxCounter,w
  7718  03D5  3EA0               	addlw	(low (_I2cTxBuffer| (0+512)))& (0+255)
  7719  03D6  0086               	movwf	6
  7720  03D7  3002               	movlw	2	; select bank5/6
  7721  03D8  0087               	movwf	7
  7722  03D9  0801               	movf	1,w
  7723  03DA  0024               	movlb	4	; select bank4
  7724  03DB  0091               	movwf	17	;volatile
  7725                           
  7726                           ;i2c_slv_drv.c: 406: TxCounter++;
  7727  03DC  3001               	movlw	1
  7728  03DD  0020               	movlb	0	; select bank0
  7729  03DE  00C3               	movwf	??_I2c_DataReceiveSm
  7730  03DF  0843               	movf	??_I2c_DataReceiveSm,w
  7731  03E0  07F7               	addwf	I2c_DataReceiveSm@TxCounter,f
  7732                           
  7733                           ;i2c_slv_drv.c: 407: }
  7734  03E1  2BE7               	goto	l5149
  7735  03E2                     l5145:	
  7736                           
  7737                           ;i2c_slv_drv.c: 408: else
  7738                           ;i2c_slv_drv.c: 409: {
  7739                           ;i2c_slv_drv.c: 411: TxCounter = 0;
  7740  03E2  01F7               	clrf	I2c_DataReceiveSm@TxCounter
  7741                           
  7742                           ;i2c_slv_drv.c: 413: I2cRxFlag = ((UINT8)(0));
  7743  03E3  0021               	movlb	1	; select bank1
  7744  03E4  01C3               	clrf	I2c_DataReceiveSm@I2cRxFlag^(0+128)
  7745                           
  7746                           ;i2c_slv_drv.c: 415: ClearTxBuffer();
  7747  03E5  3196  26A1         	fcall	_ClearTxBuffer
  7748  03E7                     l5149:	
  7749                           
  7750                           ;i2c_slv_drv.c: 417: }
  7751                           ;i2c_slv_drv.c: 419: I2cRxState = StopClkStretch;
  7752  03E7  3004               	movlw	4
  7753  03E8  0020               	movlb	0	; select bank0
  7754  03E9  00C3               	movwf	??_I2c_DataReceiveSm
  7755  03EA  0843               	movf	??_I2c_DataReceiveSm,w
  7756  03EB  0021               	movlb	1	; select bank1
  7757  03EC  00C4               	movwf	I2c_DataReceiveSm@I2cRxState^(0+128)
  7758                           
  7759                           ;i2c_slv_drv.c: 420: break;
  7760  03ED  0008               	return
  7761  03EE                     l168:	
  7762                           ;i2c_slv_drv.c: 422: case StopClkStretch:
  7763                           
  7764                           
  7765                           ;i2c_slv_drv.c: 424: SSP1CON1bits.CKP = ((UINT8)(1));
  7766  03EE  0024               	movlb	4	; select bank4
  7767  03EF  1615               	bsf	21,4	;volatile
  7768                           
  7769                           ;i2c_slv_drv.c: 426: I2cRxState = CheckRxByte;
  7770  03F0  0021               	movlb	1	; select bank1
  7771  03F1  01C4               	clrf	I2c_DataReceiveSm@I2cRxState^(0+128)
  7772                           
  7773                           ;i2c_slv_drv.c: 431: }
  7774                           
  7775                           ;i2c_slv_drv.c: 430: break;
  7776                           
  7777                           ;i2c_slv_drv.c: 429: default:
  7778                           
  7779                           ;i2c_slv_drv.c: 427: break;
  7780  03F2  0008               	return
  7781  03F3                     l5155:	
  7782  03F3  0021               	movlb	1	; select bank1
  7783  03F4  0844               	movf	I2c_DataReceiveSm@I2cRxState^(0+128),w
  7784                           
  7785                           ; Switch size 1, requested type "space"
  7786                           ; Number of cases is 5, Range of values is 0 to 4
  7787                           ; switch strategies available:
  7788                           ; Name         Instructions Cycles
  7789                           ; direct_byte           16     6 (fixed)
  7790                           ; simple_byte           16     9 (average)
  7791                           ; jumptable            260     6 (fixed)
  7792                           ;	Chosen strategy is direct_byte
  7793  03F5  0084               	movwf	4
  7794  03F6  3005               	movlw	5
  7795  03F7  0204               	subwf	4,w
  7796  03F8  1803               	skipnc
  7797  03F9  0008               	return
  7798  03FA  3190               	movlp	high S5347
  7799  03FB  3504               	lslf	4,w
  7800  03FC  3E3A               	addlw	low S5347
  7801  03FD  0082               	movwf	2
  7802  03FE  0008               	return
  7803  03FF                     __end_of_I2c_DataReceiveSm:	
  7804                           
  7805                           	psect	swtext1
  7806  103A                     __pswtext1:	
  7807  103A                     S5347:	
  7808  103A  3183  2B18         	ljmp	l5079
  7809  103C  3183  2B46         	ljmp	l5095
  7810  103E  3183  2B6D         	ljmp	l5109
  7811  1040  3183  2BCE         	ljmp	l5139
  7812  1042  3183  2BEE         	ljmp	l168
  7813                           
  7814                           	psect	text19
  7815  16ED                     __ptext19:	
  7816 ;; *************** function _Wdg_MainTask *****************
  7817 ;; Defined at:
  7818 ;;		line 73 in file "../../../Framework/MercuryFwk/Source/c/03_Sml/02_Ssl/wdg.c"
  7819 ;; Parameters:    Size  Location     Type
  7820 ;;  Options         1   34[BANK0 ] unsigned char 
  7821 ;; Auto vars:     Size  Location     Type
  7822 ;;		None
  7823 ;; Return value:  Size  Location     Type
  7824 ;;                  1    wreg      void 
  7825 ;; Registers used:
  7826 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  7827 ;; Tracked objects:
  7828 ;;		On entry : 0/0
  7829 ;;		On exit  : 0/0
  7830 ;;		Unchanged: 0/0
  7831 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7832 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7833 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7834 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7835 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7836 ;;Total ram usage:        1 bytes
  7837 ;; Hardware stack levels used:    1
  7838 ;; Hardware stack levels required when called:    3
  7839 ;; This function calls:
  7840 ;;		_Mcu_ClearWdg
  7841 ;;		_Mcu_SetWdgPeriod
  7842 ;;		_Mcu_SetWdgSts
  7843 ;; This function is called by:
  7844 ;;		_InitializeTasks
  7845 ;;		_ScheduleTasks
  7846 ;; This function uses a non-reentrant model
  7847 ;;
  7848                           
  7849                           
  7850                           ;psect for function _Wdg_MainTask
  7851  16ED                     _Wdg_MainTask:	
  7852                           
  7853                           ;wdg.c: 75: switch (SystemState)
  7854                           
  7855                           ;incstack = 0
  7856                           ; Regs used in _Wdg_MainTask: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  7857  16ED  2EF9               	goto	l5205
  7858  16EE                     l5199:	
  7859                           ;wdg.c: 76: {
  7860                           ;wdg.c: 78: case InitializationState:
  7861                           
  7862                           
  7863                           ;wdg.c: 80: Mcu_SetWdgPeriod(WdgPer_2s);
  7864  16EE  300B               	movlw	11
  7865  16EF  3196  2625  3196   	fcall	_Mcu_SetWdgPeriod
  7866                           
  7867                           ;wdg.c: 82: Mcu_SetWdgSts(((UINT8)(1)));
  7868  16F2  3001               	movlw	1
  7869  16F3  3195  25E7         	fcall	_Mcu_SetWdgSts
  7870                           
  7871                           ;wdg.c: 83: break;
  7872  16F5  0008               	return
  7873  16F6                     l5201:	
  7874                           ;wdg.c: 86: case RunningState:
  7875                           
  7876                           
  7877                           ;wdg.c: 88: Mcu_ClearWdg();
  7878  16F6  3180  2002         	fcall	_Mcu_ClearWdg
  7879                           
  7880                           ;wdg.c: 94: }
  7881                           
  7882                           ;wdg.c: 93: break;
  7883                           
  7884                           ;wdg.c: 92: default:
  7885                           
  7886                           ;wdg.c: 89: break;
  7887  16F8  0008               	return
  7888  16F9                     l5205:	
  7889  16F9  0020               	movlb	0	; select bank0
  7890  16FA  086F               	movf	_SystemState,w
  7891                           
  7892                           ; Switch size 1, requested type "space"
  7893                           ; Number of cases is 2, Range of values is 0 to 1
  7894                           ; switch strategies available:
  7895                           ; Name         Instructions Cycles
  7896                           ; simple_byte            7     4 (average)
  7897                           ; direct_byte           10     6 (fixed)
  7898                           ; jumptable            260     6 (fixed)
  7899                           ;	Chosen strategy is simple_byte
  7900  16FB  3A00               	xorlw	0	; case 0
  7901  16FC  1903               	skipnz
  7902  16FD  2EEE               	goto	l5199
  7903  16FE  3A01               	xorlw	1	; case 1
  7904  16FF  1903               	skipnz
  7905  1700  2EF6               	goto	l5201
  7906  1701  2F02               	goto	l842
  7907  1702                     l842:	
  7908  1702  0008               	return
  7909  1703                     __end_of_Wdg_MainTask:	
  7910                           
  7911                           	psect	text20
  7912  1625                     __ptext20:	
  7913 ;; *************** function _Mcu_SetWdgPeriod *****************
  7914 ;; Defined at:
  7915 ;;		line 197 in file "../../../Framework/MercuryFwk/Source/c/01_Hal/02_Drv/mcu_drv.c"
  7916 ;; Parameters:    Size  Location     Type
  7917 ;;  WdgPeriod       1    wreg     enum E3675
  7918 ;; Auto vars:     Size  Location     Type
  7919 ;;  WdgPeriod       1    5[COMMON] enum E3675
  7920 ;; Return value:  Size  Location     Type
  7921 ;;                  1    wreg      void 
  7922 ;; Registers used:
  7923 ;;		wreg, status,2, status,0
  7924 ;; Tracked objects:
  7925 ;;		On entry : 0/0
  7926 ;;		On exit  : 0/0
  7927 ;;		Unchanged: 0/0
  7928 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7929 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7930 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7931 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7932 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7933 ;;Total ram usage:        2 bytes
  7934 ;; Hardware stack levels used:    1
  7935 ;; Hardware stack levels required when called:    2
  7936 ;; This function calls:
  7937 ;;		Nothing
  7938 ;; This function is called by:
  7939 ;;		_Wdg_MainTask
  7940 ;; This function uses a non-reentrant model
  7941 ;;
  7942                           
  7943                           
  7944                           ;psect for function _Mcu_SetWdgPeriod
  7945  1625                     _Mcu_SetWdgPeriod:	
  7946                           
  7947                           ;incstack = 0
  7948                           ; Regs used in _Mcu_SetWdgPeriod: [wreg+status,2+status,0]
  7949                           ;Mcu_SetWdgPeriod@WdgPeriod stored from wreg
  7950  1625  00F5               	movwf	Mcu_SetWdgPeriod@WdgPeriod
  7951                           
  7952                           ;mcu_drv.c: 200: WDTCONbits.WDTPS = WdgPeriod;
  7953  1626  0875               	movf	Mcu_SetWdgPeriod@WdgPeriod,w
  7954  1627  00F4               	movwf	??_Mcu_SetWdgPeriod
  7955  1628  0DF4               	rlf	??_Mcu_SetWdgPeriod,f
  7956  1629  0021               	movlb	1	; select bank1
  7957  162A  0817               	movf	23,w	;volatile
  7958  162B  0674               	xorwf	??_Mcu_SetWdgPeriod,w
  7959  162C  39C1               	andlw	-63
  7960  162D  0674               	xorwf	??_Mcu_SetWdgPeriod,w
  7961  162E  0097               	movwf	23	;volatile
  7962  162F  0008               	return
  7963  1630                     __end_of_Mcu_SetWdgPeriod:	
  7964                           
  7965                           	psect	text21
  7966  0002                     __ptext21:	
  7967 ;; *************** function _Mcu_ClearWdg *****************
  7968 ;; Defined at:
  7969 ;;		line 225 in file "../../../Framework/MercuryFwk/Source/c/01_Hal/02_Drv/mcu_drv.c"
  7970 ;; Parameters:    Size  Location     Type
  7971 ;;		None
  7972 ;; Auto vars:     Size  Location     Type
  7973 ;;		None
  7974 ;; Return value:  Size  Location     Type
  7975 ;;                  1    wreg      void 
  7976 ;; Registers used:
  7977 ;;		None
  7978 ;; Tracked objects:
  7979 ;;		On entry : 0/0
  7980 ;;		On exit  : 0/0
  7981 ;;		Unchanged: 0/0
  7982 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7983 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7984 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7985 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7986 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7987 ;;Total ram usage:        0 bytes
  7988 ;; Hardware stack levels used:    1
  7989 ;; Hardware stack levels required when called:    2
  7990 ;; This function calls:
  7991 ;;		Nothing
  7992 ;; This function is called by:
  7993 ;;		_Wdg_MainTask
  7994 ;; This function uses a non-reentrant model
  7995 ;;
  7996                           
  7997                           
  7998                           ;psect for function _Mcu_ClearWdg
  7999  0002                     _Mcu_ClearWdg:	
  8000                           
  8001                           ;incstack = 0
  8002                           ; Regs used in _Mcu_ClearWdg: []
  8003  0002  0064               	clrwdt	;# 
  8004  0003  0008               	return
  8005  0004                     __end_of_Mcu_ClearWdg:	
  8006                           
  8007                           	psect	text22
  8008  096C                     __ptext22:	
  8009 ;; *************** function _LedStateMachine *****************
  8010 ;; Defined at:
  8011 ;;		line 75 in file "../../../Framework/MercuryFwk/Source/c/03_Sml/02_Ssl/led.c"
  8012 ;; Parameters:    Size  Location     Type
  8013 ;;  Led             1    wreg     unsigned char 
  8014 ;;  LedSts          1   11[BANK0 ] PTR enum E4018
  8015 ;;		 -> Led1Sts(1), 
  8016 ;;  LedBlink        1   12[BANK0 ] PTR struct _LedBlinkType
  8017 ;;		 -> Led1Blink(9), 
  8018 ;;  LedPulse        1   13[BANK0 ] PTR struct _LedPulseType
  8019 ;;		 -> Led1Pulse(6), 
  8020 ;; Auto vars:     Size  Location     Type
  8021 ;;  Led             1   16[BANK0 ] unsigned char 
  8022 ;;  LedOutSts       1   17[BANK0 ] unsigned char 
  8023 ;; Return value:  Size  Location     Type
  8024 ;;                  1    wreg      unsigned char 
  8025 ;; Registers used:
  8026 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8027 ;; Tracked objects:
  8028 ;;		On entry : 0/0
  8029 ;;		On exit  : 0/0
  8030 ;;		Unchanged: 0/0
  8031 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8032 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8033 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8034 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8035 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8036 ;;Total ram usage:        7 bytes
  8037 ;; Hardware stack levels used:    1
  8038 ;; Hardware stack levels required when called:    4
  8039 ;; This function calls:
  8040 ;;		_LedBlinkStateMachine
  8041 ;;		_LedPulseStateMachine
  8042 ;; This function is called by:
  8043 ;;		_Led_MainTask
  8044 ;; This function uses a non-reentrant model
  8045 ;;
  8046                           
  8047                           
  8048                           ;psect for function _LedStateMachine
  8049  096C                     _LedStateMachine:	
  8050                           
  8051                           ;incstack = 0
  8052                           ; Regs used in _LedStateMachine: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  8053                           ;LedStateMachine@Led stored from wreg
  8054  096C  0020               	movlb	0	; select bank0
  8055  096D  00B0               	movwf	LedStateMachine@Led
  8056                           
  8057                           ;led.c: 78: UINT8 LedOutSts = 0u;
  8058  096E  01B1               	clrf	LedStateMachine@LedOutSts
  8059                           
  8060                           ;led.c: 81: switch (*LedSts)
  8061  096F  298A               	goto	l5051
  8062  0970                     l5043:	
  8063                           ;led.c: 82: {
  8064                           ;led.c: 83: case LED_STS_OFF:
  8065                           
  8066                           
  8067                           ;led.c: 85: LedOutSts = ((UINT8)(0));
  8068  0970  01B1               	clrf	LedStateMachine@LedOutSts
  8069                           
  8070                           ;led.c: 86: break;
  8071  0971  299B               	goto	l5053
  8072  0972                     l640:	
  8073                           ;led.c: 88: case LED_STS_ON:
  8074                           
  8075                           
  8076                           ;led.c: 90: LedOutSts = ((UINT8)(1));
  8077  0972  01B1               	clrf	LedStateMachine@LedOutSts
  8078  0973  0AB1               	incf	LedStateMachine@LedOutSts,f
  8079                           
  8080                           ;led.c: 91: break;
  8081  0974  299B               	goto	l5053
  8082  0975                     l5045:	
  8083                           ;led.c: 93: case LED_STS_BLINK:
  8084                           
  8085                           
  8086                           ;led.c: 95: LedOutSts = LedBlinkStateMachine(LedBlink);
  8087  0975  082C               	movf	LedStateMachine@LedBlink,w
  8088  0976  318D  257A  3189   	fcall	_LedBlinkStateMachine
  8089  0979  0020               	movlb	0	; select bank0
  8090  097A  00AE               	movwf	??_LedStateMachine
  8091  097B  082E               	movf	??_LedStateMachine,w
  8092  097C  2988               	goto	L8
  8093  097D                     l5047:	
  8094                           ;led.c: 98: case LED_STS_PULSE:
  8095                           
  8096                           ;led.c: 96: break;
  8097                           
  8098                           
  8099                           ;led.c: 100: LedOutSts = LedPulseStateMachine(LedPulse, Led);
  8100  097D  0830               	movf	LedStateMachine@Led,w
  8101  097E  00AE               	movwf	??_LedStateMachine
  8102  097F  082E               	movf	??_LedStateMachine,w
  8103  0980  00A7               	movwf	LedPulseStateMachine@Led
  8104  0981  082D               	movf	LedStateMachine@LedPulse,w
  8105  0982  318B  2399  3189   	fcall	_LedPulseStateMachine
  8106  0985  0020               	movlb	0	; select bank0
  8107  0986  00AF               	movwf	??_LedStateMachine+1
  8108  0987  082F               	movf	??_LedStateMachine+1,w
  8109  0988                     L8:	
  8110  0988  00B1               	movwf	LedStateMachine@LedOutSts
  8111                           
  8112                           ;led.c: 105: }
  8113                           
  8114                           ;led.c: 104: break;
  8115                           
  8116                           ;led.c: 103: default:
  8117                           
  8118                           ;led.c: 101: break;
  8119  0989  299B               	goto	l5053
  8120  098A                     l5051:	
  8121  098A  082B               	movf	LedStateMachine@LedSts,w
  8122  098B  0086               	movwf	6
  8123  098C  0187               	clrf	7
  8124  098D  0801               	movf	1,w
  8125                           
  8126                           ; Switch size 1, requested type "space"
  8127                           ; Number of cases is 4, Range of values is 0 to 3
  8128                           ; switch strategies available:
  8129                           ; Name         Instructions Cycles
  8130                           ; simple_byte           13     7 (average)
  8131                           ; direct_byte           14     6 (fixed)
  8132                           ; jumptable            260     6 (fixed)
  8133                           ;	Chosen strategy is simple_byte
  8134  098E  3A00               	xorlw	0	; case 0
  8135  098F  1903               	skipnz
  8136  0990  2970               	goto	l5043
  8137  0991  3A01               	xorlw	1	; case 1
  8138  0992  1903               	skipnz
  8139  0993  2972               	goto	l640
  8140  0994  3A03               	xorlw	3	; case 2
  8141  0995  1903               	skipnz
  8142  0996  2975               	goto	l5045
  8143  0997  3A01               	xorlw	1	; case 3
  8144  0998  1903               	skipnz
  8145  0999  297D               	goto	l5047
  8146  099A  299B               	goto	l5053
  8147  099B                     l5053:	
  8148                           
  8149                           ;led.c: 107: return LedOutSts;
  8150  099B  0831               	movf	LedStateMachine@LedOutSts,w
  8151  099C  0008               	return
  8152  099D                     __end_of_LedStateMachine:	
  8153                           
  8154                           	psect	text23
  8155  0B99                     __ptext23:	
  8156 ;; *************** function _LedPulseStateMachine *****************
  8157 ;; Defined at:
  8158 ;;		line 131 in file "../../../Framework/MercuryFwk/Source/c/01_Hal/02_Drv/led_drv.c"
  8159 ;; Parameters:    Size  Location     Type
  8160 ;;  LedPulse        1    wreg     PTR struct _LedPulseType
  8161 ;;		 -> Led1Pulse(6), 
  8162 ;;  Led             1    7[BANK0 ] unsigned char 
  8163 ;; Auto vars:     Size  Location     Type
  8164 ;;  LedPulse        1   10[BANK0 ] PTR struct _LedPulseType
  8165 ;;		 -> Led1Pulse(6), 
  8166 ;; Return value:  Size  Location     Type
  8167 ;;                  1    wreg      unsigned char 
  8168 ;; Registers used:
  8169 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8170 ;; Tracked objects:
  8171 ;;		On entry : 0/0
  8172 ;;		On exit  : 0/0
  8173 ;;		Unchanged: 0/0
  8174 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8175 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8176 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8177 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8178 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8179 ;;Total ram usage:        4 bytes
  8180 ;; Hardware stack levels used:    1
  8181 ;; Hardware stack levels required when called:    3
  8182 ;; This function calls:
  8183 ;;		_Led_SetLedStatus
  8184 ;;		___lwdiv
  8185 ;; This function is called by:
  8186 ;;		_LedStateMachine
  8187 ;; This function uses a non-reentrant model
  8188 ;;
  8189                           
  8190                           
  8191                           ;psect for function _LedPulseStateMachine
  8192  0B99                     _LedPulseStateMachine:	
  8193                           
  8194                           ;incstack = 0
  8195                           ; Regs used in _LedPulseStateMachine: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  8196                           ;LedPulseStateMachine@LedPulse stored from wreg
  8197  0B99  0020               	movlb	0	; select bank0
  8198  0B9A  00AA               	movwf	LedPulseStateMachine@LedPulse
  8199                           
  8200                           ;led_drv.c: 134: switch (LedPulse->LedPulseState)
  8201  0B9B  2BEC               	goto	l4699
  8202  0B9C                     l4681:	
  8203                           ;led_drv.c: 135: {
  8204                           ;led_drv.c: 136: case LedPulseOn:
  8205                           
  8206                           
  8207                           ;led_drv.c: 138: LedPulse->LedOutState = ((UINT8)(1));
  8208  0B9C  0A2A               	incf	LedPulseStateMachine@LedPulse,w
  8209  0B9D  0086               	movwf	6
  8210  0B9E  0187               	clrf	7
  8211  0B9F  0181               	clrf	1
  8212  0BA0  0A81               	incf	1,f
  8213                           
  8214                           ;led_drv.c: 140: LedPulse->LedPulseState = LedPulseDelay;
  8215  0BA1  082A               	movf	LedPulseStateMachine@LedPulse,w
  8216  0BA2  0086               	movwf	6
  8217  0BA3  0187               	clrf	7
  8218  0BA4  0181               	clrf	1
  8219  0BA5  0A81               	incf	1,f
  8220  0BA6                     l4683:	
  8221                           ;led_drv.c: 143: case LedPulseDelay:
  8222                           
  8223                           
  8224                           ;led_drv.c: 145: LedPulse->LedPulseCounter++;
  8225  0BA6  082A               	movf	LedPulseStateMachine@LedPulse,w
  8226  0BA7  3E02               	addlw	2
  8227  0BA8  0086               	movwf	6
  8228  0BA9  0187               	clrf	7
  8229  0BAA  3001               	movlw	1
  8230  0BAB  0781               	addwf	1,f
  8231  0BAC  3141               	addfsr 1,1
  8232  0BAD  1803               	skipnc
  8233  0BAE  0A81               	incf	1,f
  8234                           
  8235                           ;led_drv.c: 147: if (LedPulse->LedPulseCounter >= (LedPulse->LedPulseTimeMs/((UINT16)(10
      +                          ))))
  8236  0BAF  300A               	movlw	10
  8237  0BB0  00A0               	movwf	___lwdiv@divisor
  8238  0BB1  3000               	movlw	0
  8239  0BB2  00A1               	movwf	___lwdiv@divisor+1
  8240  0BB3  082A               	movf	LedPulseStateMachine@LedPulse,w
  8241  0BB4  3E04               	addlw	4
  8242  0BB5  0086               	movwf	6
  8243  0BB6  0187               	clrf	7
  8244  0BB7  3F40               	moviw [0]fsr1
  8245  0BB8  00A2               	movwf	___lwdiv@dividend
  8246  0BB9  3F41               	moviw [1]fsr1
  8247  0BBA  00A3               	movwf	___lwdiv@dividend+1
  8248  0BBB  3189  219D  318B   	fcall	___lwdiv
  8249  0BBE  0020               	movlb	0	; select bank0
  8250  0BBF  082A               	movf	LedPulseStateMachine@LedPulse,w
  8251  0BC0  3E02               	addlw	2
  8252  0BC1  0086               	movwf	6
  8253  0BC2  0187               	clrf	7
  8254  0BC3  3F40               	moviw [0]fsr1
  8255  0BC4  00A8               	movwf	??_LedPulseStateMachine
  8256  0BC5  3F41               	moviw [1]fsr1
  8257  0BC6  00A9               	movwf	??_LedPulseStateMachine+1
  8258  0BC7  0821               	movf	?___lwdiv+1,w
  8259  0BC8  0229               	subwf	??_LedPulseStateMachine+1,w
  8260  0BC9  1D03               	skipz
  8261  0BCA  2BCD               	goto	u4255
  8262  0BCB  0820               	movf	?___lwdiv,w
  8263  0BCC  0228               	subwf	??_LedPulseStateMachine,w
  8264  0BCD                     u4255:	
  8265  0BCD  1C03               	skipc
  8266  0BCE  2BFB               	goto	l4701
  8267                           
  8268                           ;led_drv.c: 148: {
  8269                           ;led_drv.c: 150: LedPulse->LedPulseCounter = 0;
  8270  0BCF  082A               	movf	LedPulseStateMachine@LedPulse,w
  8271  0BD0  3E02               	addlw	2
  8272  0BD1  0086               	movwf	6
  8273  0BD2  0187               	clrf	7
  8274  0BD3  3000               	movlw	0
  8275  0BD4  3FC0               	movwi [0]fsr1
  8276  0BD5  3FC1               	movwi [1]fsr1
  8277                           
  8278                           ;led_drv.c: 152: LedPulse->LedOutState = ((UINT8)(0));
  8279  0BD6  0A2A               	incf	LedPulseStateMachine@LedPulse,w
  8280  0BD7  0086               	movwf	6
  8281  0BD8  0187               	clrf	7
  8282  0BD9  0181               	clrf	1
  8283                           
  8284                           ;led_drv.c: 154: LedPulse->LedPulseState = LedPulseOff;
  8285  0BDA  3002               	movlw	2
  8286  0BDB  00A8               	movwf	??_LedPulseStateMachine
  8287  0BDC  082A               	movf	LedPulseStateMachine@LedPulse,w
  8288  0BDD  0086               	movwf	6
  8289  0BDE  0187               	clrf	7
  8290  0BDF  0828               	movf	??_LedPulseStateMachine,w
  8291  0BE0  0081               	movwf	1
  8292                           
  8293                           ;led_drv.c: 155: }
  8294                           ;led_drv.c: 156: break;
  8295  0BE1  2BFB               	goto	l4701
  8296  0BE2                     l4693:	
  8297                           ;led_drv.c: 158: case LedPulseOff:
  8298                           
  8299                           
  8300                           ;led_drv.c: 160: LedPulse->LedPulseState = LedPulseOn;
  8301  0BE2  082A               	movf	LedPulseStateMachine@LedPulse,w
  8302  0BE3  0086               	movwf	6
  8303  0BE4  0187               	clrf	7
  8304  0BE5  0181               	clrf	1
  8305                           
  8306                           ;led_drv.c: 162: Led_SetLedStatus(Led,LED_STS_OFF);
  8307  0BE6  01F4               	clrf	Led_SetLedStatus@LedSts
  8308  0BE7  0827               	movf	LedPulseStateMachine@Led,w
  8309  0BE8  3196  2661  318B   	fcall	_Led_SetLedStatus
  8310                           
  8311                           ;led_drv.c: 167: }
  8312                           
  8313                           ;led_drv.c: 166: break;
  8314                           
  8315                           ;led_drv.c: 165: default:
  8316                           
  8317                           ;led_drv.c: 163: break;
  8318  0BEB  2BFB               	goto	l4701
  8319  0BEC                     l4699:	
  8320  0BEC  0020               	movlb	0	; select bank0
  8321  0BED  082A               	movf	LedPulseStateMachine@LedPulse,w
  8322  0BEE  0086               	movwf	6
  8323  0BEF  0187               	clrf	7
  8324  0BF0  0801               	movf	1,w
  8325                           
  8326                           ; Switch size 1, requested type "space"
  8327                           ; Number of cases is 3, Range of values is 0 to 2
  8328                           ; switch strategies available:
  8329                           ; Name         Instructions Cycles
  8330                           ; simple_byte           10     6 (average)
  8331                           ; direct_byte           12     6 (fixed)
  8332                           ; jumptable            260     6 (fixed)
  8333                           ;	Chosen strategy is simple_byte
  8334  0BF1  3A00               	xorlw	0	; case 0
  8335  0BF2  1903               	skipnz
  8336  0BF3  2B9C               	goto	l4681
  8337  0BF4  3A01               	xorlw	1	; case 1
  8338  0BF5  1903               	skipnz
  8339  0BF6  2BA6               	goto	l4683
  8340  0BF7  3A03               	xorlw	3	; case 2
  8341  0BF8  1903               	skipnz
  8342  0BF9  2BE2               	goto	l4693
  8343  0BFA  2BFB               	goto	l4701
  8344  0BFB                     l4701:	
  8345                           
  8346                           ;led_drv.c: 170: return (LedPulse->LedOutState);
  8347  0BFB  0020               	movlb	0	; select bank0
  8348  0BFC  0A2A               	incf	LedPulseStateMachine@LedPulse,w
  8349  0BFD  0086               	movwf	6
  8350  0BFE  0187               	clrf	7
  8351  0BFF  0801               	movf	1,w
  8352  0C00  0008               	return
  8353  0C01                     __end_of_LedPulseStateMachine:	
  8354                           
  8355                           	psect	text24
  8356  0D7A                     __ptext24:	
  8357 ;; *************** function _LedBlinkStateMachine *****************
  8358 ;; Defined at:
  8359 ;;		line 74 in file "../../../Framework/MercuryFwk/Source/c/01_Hal/02_Drv/led_drv.c"
  8360 ;; Parameters:    Size  Location     Type
  8361 ;;  LedBlink        1    wreg     PTR struct _LedBlinkType
  8362 ;;		 -> Led1Blink(9), 
  8363 ;; Auto vars:     Size  Location     Type
  8364 ;;  LedBlink        1    5[COMMON] PTR struct _LedBlinkType
  8365 ;;		 -> Led1Blink(9), 
  8366 ;; Return value:  Size  Location     Type
  8367 ;;                  1    wreg      unsigned char 
  8368 ;; Registers used:
  8369 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8370 ;; Tracked objects:
  8371 ;;		On entry : 0/0
  8372 ;;		On exit  : 0/0
  8373 ;;		Unchanged: 0/0
  8374 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8375 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8376 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8377 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8378 ;;      Totals:         1       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8379 ;;Total ram usage:        3 bytes
  8380 ;; Hardware stack levels used:    1
  8381 ;; Hardware stack levels required when called:    3
  8382 ;; This function calls:
  8383 ;;		___lwdiv
  8384 ;; This function is called by:
  8385 ;;		_LedStateMachine
  8386 ;; This function uses a non-reentrant model
  8387 ;;
  8388                           
  8389                           
  8390                           ;psect for function _LedBlinkStateMachine
  8391  0D7A                     _LedBlinkStateMachine:	
  8392                           
  8393                           ;incstack = 0
  8394                           ; Regs used in _LedBlinkStateMachine: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  8395                           ;LedBlinkStateMachine@LedBlink stored from wreg
  8396  0D7A  00F5               	movwf	LedBlinkStateMachine@LedBlink
  8397                           
  8398                           ;led_drv.c: 77: switch (LedBlink->LedBlinkState)
  8399  0D7B  2DFA               	goto	l4673
  8400  0D7C                     l4651:	
  8401                           ;led_drv.c: 78: {
  8402                           ;led_drv.c: 79: case LedBlinkInit:
  8403                           
  8404                           
  8405                           ;led_drv.c: 81: LedBlink->LedOutState = LedBlink->LedInitStatus;
  8406  0D7C  0875               	movf	LedBlinkStateMachine@LedBlink,w
  8407  0D7D  3E08               	addlw	8
  8408  0D7E  0086               	movwf	6
  8409  0D7F  0187               	clrf	7
  8410  0D80  0801               	movf	1,w
  8411  0D81  0020               	movlb	0	; select bank0
  8412  0D82  00A7               	movwf	??_LedBlinkStateMachine
  8413  0D83  0A75               	incf	LedBlinkStateMachine@LedBlink,w
  8414  0D84  0086               	movwf	6
  8415  0D85  0187               	clrf	7
  8416  0D86  0827               	movf	??_LedBlinkStateMachine,w
  8417  0D87  0081               	movwf	1
  8418                           
  8419                           ;led_drv.c: 83: LedBlink->LedBlinkState = LedBlinkRunning;
  8420  0D88  0875               	movf	LedBlinkStateMachine@LedBlink,w
  8421  0D89  2DC2               	goto	L9
  8422  0D8A                     l4655:	
  8423                           ;led_drv.c: 86: case LedBlinkRunning:
  8424                           
  8425                           ;led_drv.c: 84: break;
  8426                           
  8427                           
  8428                           ;led_drv.c: 88: LedBlink->LedBlinkCounter++;
  8429  0D8A  0875               	movf	LedBlinkStateMachine@LedBlink,w
  8430  0D8B  3E02               	addlw	2
  8431  0D8C  0086               	movwf	6
  8432  0D8D  0187               	clrf	7
  8433  0D8E  3001               	movlw	1
  8434  0D8F  0781               	addwf	1,f
  8435  0D90  3141               	addfsr 1,1
  8436  0D91  1803               	skipnc
  8437  0D92  0A81               	incf	1,f
  8438                           
  8439                           ;led_drv.c: 90: if (LedBlink->LedOutState == OffState)
  8440  0D93  0A75               	incf	LedBlinkStateMachine@LedBlink,w
  8441  0D94  0086               	movwf	6
  8442  0D95  0187               	clrf	7
  8443  0D96  0801               	movf	1,w
  8444  0D97  1D03               	btfss	3,2
  8445  0D98  2DC7               	goto	l4663
  8446                           
  8447                           ;led_drv.c: 91: {
  8448                           ;led_drv.c: 93: if (LedBlink->LedBlinkCounter >= (LedBlink->LedOffTimeMs/((UINT16)(10)))
      +                          )
  8449  0D99  300A               	movlw	10
  8450  0D9A  0020               	movlb	0	; select bank0
  8451  0D9B  00A0               	movwf	___lwdiv@divisor
  8452  0D9C  3000               	movlw	0
  8453  0D9D  00A1               	movwf	___lwdiv@divisor+1
  8454  0D9E  0875               	movf	LedBlinkStateMachine@LedBlink,w
  8455  0D9F  3E06               	addlw	6
  8456  0DA0  0086               	movwf	6
  8457  0DA1  0187               	clrf	7
  8458  0DA2  3F40               	moviw [0]fsr1
  8459  0DA3  00A2               	movwf	___lwdiv@dividend
  8460  0DA4  3F41               	moviw [1]fsr1
  8461  0DA5  00A3               	movwf	___lwdiv@dividend+1
  8462  0DA6  3189  219D  318D   	fcall	___lwdiv
  8463  0DA9  0875               	movf	LedBlinkStateMachine@LedBlink,w
  8464  0DAA  3E02               	addlw	2
  8465  0DAB  0086               	movwf	6
  8466  0DAC  0187               	clrf	7
  8467  0DAD  3F40               	moviw [0]fsr1
  8468  0DAE  0020               	movlb	0	; select bank0
  8469  0DAF  00A7               	movwf	??_LedBlinkStateMachine
  8470  0DB0  3F41               	moviw [1]fsr1
  8471  0DB1  00A8               	movwf	??_LedBlinkStateMachine+1
  8472  0DB2  0821               	movf	?___lwdiv+1,w
  8473  0DB3  0228               	subwf	??_LedBlinkStateMachine+1,w
  8474  0DB4  1D03               	skipz
  8475  0DB5  2DB8               	goto	u4225
  8476  0DB6  0820               	movf	?___lwdiv,w
  8477  0DB7  0227               	subwf	??_LedBlinkStateMachine,w
  8478  0DB8                     u4225:	
  8479  0DB8  1C03               	skipc
  8480  0DB9  2E05               	goto	l4675
  8481                           
  8482                           ;led_drv.c: 94: {
  8483                           ;led_drv.c: 96: LedBlink->LedBlinkCounter = 0;
  8484  0DBA  0875               	movf	LedBlinkStateMachine@LedBlink,w
  8485  0DBB  3E02               	addlw	2
  8486  0DBC  0086               	movwf	6
  8487  0DBD  0187               	clrf	7
  8488  0DBE  3000               	movlw	0
  8489  0DBF  3FC0               	movwi [0]fsr1
  8490  0DC0  3FC1               	movwi [1]fsr1
  8491                           
  8492                           ;led_drv.c: 98: LedBlink->LedOutState = OnState;
  8493  0DC1  0A75               	incf	LedBlinkStateMachine@LedBlink,w
  8494  0DC2                     L9:	
  8495  0DC2  0086               	movwf	6
  8496  0DC3  0187               	clrf	7
  8497  0DC4  0181               	clrf	1
  8498  0DC5  0A81               	incf	1,f
  8499                           
  8500                           ;led_drv.c: 99: }
  8501                           ;led_drv.c: 100: }
  8502  0DC6  2E05               	goto	l4675
  8503  0DC7                     l4663:	
  8504                           
  8505                           ;led_drv.c: 101: else if (LedBlink->LedOutState == OnState)
  8506  0DC7  0A75               	incf	LedBlinkStateMachine@LedBlink,w
  8507  0DC8  0086               	movwf	6
  8508  0DC9  0187               	clrf	7
  8509  0DCA  0301               	decf	1,w
  8510  0DCB  1D03               	btfss	3,2
  8511  0DCC  2E05               	goto	l4675
  8512                           
  8513                           ;led_drv.c: 102: {
  8514                           ;led_drv.c: 104: if (LedBlink->LedBlinkCounter >= (LedBlink->LedOnTimeMs/((UINT16)(10)))
      +                          )
  8515  0DCD  300A               	movlw	10
  8516  0DCE  0020               	movlb	0	; select bank0
  8517  0DCF  00A0               	movwf	___lwdiv@divisor
  8518  0DD0  3000               	movlw	0
  8519  0DD1  00A1               	movwf	___lwdiv@divisor+1
  8520  0DD2  0875               	movf	LedBlinkStateMachine@LedBlink,w
  8521  0DD3  3E04               	addlw	4
  8522  0DD4  0086               	movwf	6
  8523  0DD5  0187               	clrf	7
  8524  0DD6  3F40               	moviw [0]fsr1
  8525  0DD7  00A2               	movwf	___lwdiv@dividend
  8526  0DD8  3F41               	moviw [1]fsr1
  8527  0DD9  00A3               	movwf	___lwdiv@dividend+1
  8528  0DDA  3189  219D  318D   	fcall	___lwdiv
  8529  0DDD  0875               	movf	LedBlinkStateMachine@LedBlink,w
  8530  0DDE  3E02               	addlw	2
  8531  0DDF  0086               	movwf	6
  8532  0DE0  0187               	clrf	7
  8533  0DE1  3F40               	moviw [0]fsr1
  8534  0DE2  0020               	movlb	0	; select bank0
  8535  0DE3  00A7               	movwf	??_LedBlinkStateMachine
  8536  0DE4  3F41               	moviw [1]fsr1
  8537  0DE5  00A8               	movwf	??_LedBlinkStateMachine+1
  8538  0DE6  0821               	movf	?___lwdiv+1,w
  8539  0DE7  0228               	subwf	??_LedBlinkStateMachine+1,w
  8540  0DE8  1D03               	skipz
  8541  0DE9  2DEC               	goto	u4245
  8542  0DEA  0820               	movf	?___lwdiv,w
  8543  0DEB  0227               	subwf	??_LedBlinkStateMachine,w
  8544  0DEC                     u4245:	
  8545  0DEC  1C03               	skipc
  8546  0DED  2E05               	goto	l4675
  8547                           
  8548                           ;led_drv.c: 105: {
  8549                           ;led_drv.c: 107: LedBlink->LedBlinkCounter = 0;
  8550  0DEE  0875               	movf	LedBlinkStateMachine@LedBlink,w
  8551  0DEF  3E02               	addlw	2
  8552  0DF0  0086               	movwf	6
  8553  0DF1  0187               	clrf	7
  8554  0DF2  3000               	movlw	0
  8555  0DF3  3FC0               	movwi [0]fsr1
  8556  0DF4  3FC1               	movwi [1]fsr1
  8557                           
  8558                           ;led_drv.c: 109: LedBlink->LedOutState = OffState;
  8559  0DF5  0A75               	incf	LedBlinkStateMachine@LedBlink,w
  8560  0DF6  0086               	movwf	6
  8561  0DF7  0187               	clrf	7
  8562  0DF8  0181               	clrf	1
  8563                           
  8564                           ;led_drv.c: 116: }
  8565                           
  8566                           ;led_drv.c: 115: break;
  8567                           
  8568                           ;led_drv.c: 114: default:
  8569                           
  8570                           ;led_drv.c: 110: }
  8571                           ;led_drv.c: 111: }
  8572                           ;led_drv.c: 112: break;
  8573  0DF9  2E05               	goto	l4675
  8574  0DFA                     l4673:	
  8575  0DFA  0875               	movf	LedBlinkStateMachine@LedBlink,w
  8576  0DFB  0086               	movwf	6
  8577  0DFC  0187               	clrf	7
  8578  0DFD  0801               	movf	1,w
  8579                           
  8580                           ; Switch size 1, requested type "space"
  8581                           ; Number of cases is 2, Range of values is 0 to 1
  8582                           ; switch strategies available:
  8583                           ; Name         Instructions Cycles
  8584                           ; simple_byte            7     4 (average)
  8585                           ; direct_byte           10     6 (fixed)
  8586                           ; jumptable            260     6 (fixed)
  8587                           ;	Chosen strategy is simple_byte
  8588  0DFE  3A00               	xorlw	0	; case 0
  8589  0DFF  1903               	skipnz
  8590  0E00  2D7C               	goto	l4651
  8591  0E01  3A01               	xorlw	1	; case 1
  8592  0E02  1903               	skipnz
  8593  0E03  2D8A               	goto	l4655
  8594  0E04  2E05               	goto	l4675
  8595  0E05                     l4675:	
  8596                           
  8597                           ;led_drv.c: 119: return (LedBlink->LedOutState);
  8598  0E05  0A75               	incf	LedBlinkStateMachine@LedBlink,w
  8599  0E06  0086               	movwf	6
  8600  0E07  0187               	clrf	7
  8601  0E08  0801               	movf	1,w
  8602  0E09  0008               	return
  8603  0E0A                     __end_of_LedBlinkStateMachine:	
  8604                           
  8605                           	psect	text25
  8606  161B                     __ptext25:	
  8607 ;; *************** function _CheckStopBitStatus *****************
  8608 ;; Defined at:
  8609 ;;		line 150 in file "../../../Framework/MercuryFwk/Source/c/01_Hal/02_Drv/i2c_slv_drv.c"
  8610 ;; Parameters:    Size  Location     Type
  8611 ;;		None
  8612 ;; Auto vars:     Size  Location     Type
  8613 ;;		None
  8614 ;; Return value:  Size  Location     Type
  8615 ;;                  1    wreg      unsigned char 
  8616 ;; Registers used:
  8617 ;;		wreg, status,2, status,0
  8618 ;; Tracked objects:
  8619 ;;		On entry : 0/0
  8620 ;;		On exit  : 0/0
  8621 ;;		Unchanged: 0/0
  8622 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8623 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8624 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8625 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8626 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8627 ;;Total ram usage:        1 bytes
  8628 ;; Hardware stack levels used:    1
  8629 ;; Hardware stack levels required when called:    2
  8630 ;; This function calls:
  8631 ;;		Nothing
  8632 ;; This function is called by:
  8633 ;;		_I2c_DataReceiveSm
  8634 ;; This function uses a non-reentrant model
  8635 ;;
  8636                           
  8637                           
  8638                           ;psect for function _CheckStopBitStatus
  8639  161B                     _CheckStopBitStatus:	
  8640                           
  8641                           ;i2c_slv_drv.c: 153: return ((SSP1STAT & ((UINT8)(0x10))) >> ((UINT8)(4)));
  8642                           
  8643                           ;incstack = 0
  8644                           ; Regs used in _CheckStopBitStatus: [wreg+status,2+status,0]
  8645  161B  0024               	movlb	4	; select bank4
  8646  161C  0814               	movf	20,w	;volatile
  8647  161D  00F4               	movwf	??_CheckStopBitStatus
  8648  161E  3004               	movlw	4
  8649  161F                     u4485:	
  8650  161F  36F4               	lsrf	??_CheckStopBitStatus,f
  8651  1620  0B89               	decfsz	9,f
  8652  1621  2E1F               	goto	u4485
  8653  1622  0874               	movf	??_CheckStopBitStatus,w
  8654  1623  3901               	andlw	1
  8655  1624  0008               	return
  8656  1625                     __end_of_CheckStopBitStatus:	
  8657                           
  8658                           	psect	text26
  8659  1611                     __ptext26:	
  8660 ;; *************** function _CheckByteStatus *****************
  8661 ;; Defined at:
  8662 ;;		line 136 in file "../../../Framework/MercuryFwk/Source/c/01_Hal/02_Drv/i2c_slv_drv.c"
  8663 ;; Parameters:    Size  Location     Type
  8664 ;;		None
  8665 ;; Auto vars:     Size  Location     Type
  8666 ;;		None
  8667 ;; Return value:  Size  Location     Type
  8668 ;;                  1    wreg      unsigned char 
  8669 ;; Registers used:
  8670 ;;		wreg, status,2, status,0
  8671 ;; Tracked objects:
  8672 ;;		On entry : 0/0
  8673 ;;		On exit  : 0/0
  8674 ;;		Unchanged: 0/0
  8675 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8676 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8677 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8678 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8679 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8680 ;;Total ram usage:        1 bytes
  8681 ;; Hardware stack levels used:    1
  8682 ;; Hardware stack levels required when called:    2
  8683 ;; This function calls:
  8684 ;;		Nothing
  8685 ;; This function is called by:
  8686 ;;		_I2c_DataReceiveSm
  8687 ;; This function uses a non-reentrant model
  8688 ;;
  8689                           
  8690                           
  8691                           ;psect for function _CheckByteStatus
  8692  1611                     _CheckByteStatus:	
  8693                           
  8694                           ;i2c_slv_drv.c: 139: return ((SSP1STAT & ((UINT8)(0x20))) >> ((UINT8)(5)));
  8695                           
  8696                           ;incstack = 0
  8697                           ; Regs used in _CheckByteStatus: [wreg+status,2+status,0]
  8698  1611  0024               	movlb	4	; select bank4
  8699  1612  0814               	movf	20,w	;volatile
  8700  1613  00F4               	movwf	??_CheckByteStatus
  8701  1614  3005               	movlw	5
  8702  1615                     u4475:	
  8703  1615  36F4               	lsrf	??_CheckByteStatus,f
  8704  1616  0B89               	decfsz	9,f
  8705  1617  2E15               	goto	u4475
  8706  1618  0874               	movf	??_CheckByteStatus,w
  8707  1619  3901               	andlw	1
  8708  161A  0008               	return
  8709  161B                     __end_of_CheckByteStatus:	
  8710                           
  8711                           	psect	text27
  8712  1607                     __ptext27:	
  8713 ;; *************** function _CheckAckStatus *****************
  8714 ;; Defined at:
  8715 ;;		line 108 in file "../../../Framework/MercuryFwk/Source/c/01_Hal/02_Drv/i2c_slv_drv.c"
  8716 ;; Parameters:    Size  Location     Type
  8717 ;;		None
  8718 ;; Auto vars:     Size  Location     Type
  8719 ;;		None
  8720 ;; Return value:  Size  Location     Type
  8721 ;;                  1    wreg      unsigned char 
  8722 ;; Registers used:
  8723 ;;		wreg, status,2, status,0
  8724 ;; Tracked objects:
  8725 ;;		On entry : 0/0
  8726 ;;		On exit  : 0/0
  8727 ;;		Unchanged: 0/0
  8728 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8729 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8730 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8731 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8732 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8733 ;;Total ram usage:        1 bytes
  8734 ;; Hardware stack levels used:    1
  8735 ;; Hardware stack levels required when called:    2
  8736 ;; This function calls:
  8737 ;;		Nothing
  8738 ;; This function is called by:
  8739 ;;		_I2c_DataReceiveSm
  8740 ;; This function uses a non-reentrant model
  8741 ;;
  8742                           
  8743                           
  8744                           ;psect for function _CheckAckStatus
  8745  1607                     _CheckAckStatus:	
  8746                           
  8747                           ;i2c_slv_drv.c: 111: return ((SSP1CON2 & ((UINT8)(0x40))) >> ((UINT8)(6)));
  8748                           
  8749                           ;incstack = 0
  8750                           ; Regs used in _CheckAckStatus: [wreg+status,2+status,0]
  8751  1607  0024               	movlb	4	; select bank4
  8752  1608  0816               	movf	22,w	;volatile
  8753  1609  00F4               	movwf	??_CheckAckStatus
  8754  160A  3006               	movlw	6
  8755  160B                     u4465:	
  8756  160B  36F4               	lsrf	??_CheckAckStatus,f
  8757  160C  0B89               	decfsz	9,f
  8758  160D  2E0B               	goto	u4465
  8759  160E  0874               	movf	??_CheckAckStatus,w
  8760  160F  3901               	andlw	1
  8761  1610  0008               	return
  8762  1611                     __end_of_CheckAckStatus:	
  8763                           
  8764                           	psect	text28
  8765  16C4                     __ptext28:	
  8766 ;; *************** function _I2c_SetConfig *****************
  8767 ;; Defined at:
  8768 ;;		line 82 in file "../../../Framework/MercuryFwk/Source/c/03_Sml/01_Pml/01_SlvI2c/i2c_slv.c"
  8769 ;; Parameters:    Size  Location     Type
  8770 ;;		None
  8771 ;; Auto vars:     Size  Location     Type
  8772 ;;		None
  8773 ;; Return value:  Size  Location     Type
  8774 ;;                  1    wreg      void 
  8775 ;; Registers used:
  8776 ;;		wreg, status,2
  8777 ;; Tracked objects:
  8778 ;;		On entry : 0/0
  8779 ;;		On exit  : 0/0
  8780 ;;		Unchanged: 0/0
  8781 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8782 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8783 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8784 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8785 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8786 ;;Total ram usage:        1 bytes
  8787 ;; Hardware stack levels used:    1
  8788 ;; Hardware stack levels required when called:    2
  8789 ;; This function calls:
  8790 ;;		Nothing
  8791 ;; This function is called by:
  8792 ;;		_I2cSlv_MainTask
  8793 ;; This function uses a non-reentrant model
  8794 ;;
  8795                           
  8796                           
  8797                           ;psect for function _I2c_SetConfig
  8798  16C4                     _I2c_SetConfig:	
  8799                           
  8800                           ;i2c_slv.c: 84: I2cConfig.I2cModuleMode = ((UINT8)(0b0110));
  8801                           
  8802                           ;incstack = 0
  8803                           ; Regs used in _I2c_SetConfig: [wreg+status,2]
  8804  16C4  3006               	movlw	6
  8805  16C5  00F4               	movwf	??_I2c_SetConfig
  8806  16C6  0874               	movf	??_I2c_SetConfig,w
  8807  16C7  0021               	movlb	1	; select bank1
  8808  16C8  00C6               	movwf	_I2cConfig^(0+128)
  8809                           
  8810                           ;i2c_slv.c: 85: I2cConfig.I2cReceiverEnable = ((UINT8)(0));
  8811  16C9  01C7               	clrf	(_I2cConfig^(0+128)+1)
  8812                           
  8813                           ;i2c_slv.c: 86: I2cConfig.EnableI2cModule = ((UINT8)(1));
  8814  16CA  01C8               	clrf	(_I2cConfig^(0+128)+2)
  8815  16CB  0AC8               	incf	(_I2cConfig^(0+128)+2),f
  8816                           
  8817                           ;i2c_slv.c: 87: I2cConfig.ClockStretchEnable = ((UINT8)(0));
  8818  16CC  01C9               	clrf	(_I2cConfig^(0+128)+3)
  8819                           
  8820                           ;i2c_slv.c: 88: I2cConfig.StopCondIntEnable = ((UINT8)(1));
  8821  16CD  01CA               	clrf	(_I2cConfig^(0+128)+4)
  8822  16CE  0ACA               	incf	(_I2cConfig^(0+128)+4),f
  8823                           
  8824                           ;i2c_slv.c: 89: I2cConfig.StartCondIntEnable = ((UINT8)(1));
  8825  16CF  01CB               	clrf	(_I2cConfig^(0+128)+5)
  8826  16D0  0ACB               	incf	(_I2cConfig^(0+128)+5),f
  8827                           
  8828                           ;i2c_slv.c: 90: I2cConfig.BufferOverwriteEnable = ((UINT8)(0));
  8829  16D1  01CC               	clrf	(_I2cConfig^(0+128)+6)
  8830                           
  8831                           ;i2c_slv.c: 91: I2cConfig.BusCollisionDetectEnable = ((UINT8)(0));
  8832  16D2  01CD               	clrf	(_I2cConfig^(0+128)+7)
  8833                           
  8834                           ;i2c_slv.c: 92: I2cConfig.AddrHoldEnable = ((UINT8)(0));
  8835  16D3  01CE               	clrf	(_I2cConfig^(0+128)+8)
  8836                           
  8837                           ;i2c_slv.c: 93: I2cConfig.DataHoldEnable = ((UINT8)(0));
  8838  16D4  01CF               	clrf	(_I2cConfig^(0+128)+9)
  8839                           
  8840                           ;i2c_slv.c: 94: I2cConfig.GeneralCallEnable = ((UINT8)(1));
  8841  16D5  01D0               	clrf	(_I2cConfig^(0+128)+10)
  8842  16D6  0AD0               	incf	(_I2cConfig^(0+128)+10),f
  8843  16D7  0008               	return
  8844  16D8                     __end_of_I2c_SetConfig:	
  8845                           
  8846                           	psect	text29
  8847  0F54                     __ptext29:	
  8848 ;; *************** function _I2c_InitI2cModule *****************
  8849 ;; Defined at:
  8850 ;;		line 206 in file "../../../Framework/MercuryFwk/Source/c/01_Hal/02_Drv/i2c_slv_drv.c"
  8851 ;; Parameters:    Size  Location     Type
  8852 ;;  I2cConfig       1    wreg     PTR struct _I2cConfig
  8853 ;;		 -> I2cConfig(11), 
  8854 ;; Auto vars:     Size  Location     Type
  8855 ;;  I2cConfig       1    2[BANK0 ] PTR struct _I2cConfig
  8856 ;;		 -> I2cConfig(11), 
  8857 ;; Return value:  Size  Location     Type
  8858 ;;                  1    wreg      void 
  8859 ;; Registers used:
  8860 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8861 ;; Tracked objects:
  8862 ;;		On entry : 0/0
  8863 ;;		On exit  : 0/0
  8864 ;;		Unchanged: 0/0
  8865 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8866 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8867 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8868 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8869 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8870 ;;Total ram usage:        3 bytes
  8871 ;; Hardware stack levels used:    1
  8872 ;; Hardware stack levels required when called:    3
  8873 ;; This function calls:
  8874 ;;		_ClearRxBuffer
  8875 ;;		_ClearTxBuffer
  8876 ;; This function is called by:
  8877 ;;		_I2cSlv_MainTask
  8878 ;; This function uses a non-reentrant model
  8879 ;;
  8880                           
  8881                           
  8882                           ;psect for function _I2c_InitI2cModule
  8883  0F54                     _I2c_InitI2cModule:	
  8884                           
  8885                           ;incstack = 0
  8886                           ; Regs used in _I2c_InitI2cModule: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  8887                           ;I2c_InitI2cModule@I2cConfig stored from wreg
  8888  0F54  0020               	movlb	0	; select bank0
  8889  0F55  00A2               	movwf	I2c_InitI2cModule@I2cConfig
  8890                           
  8891                           ;i2c_slv_drv.c: 209: TRISCbits.TRISC1 = ((UINT8)(1));
  8892  0F56  0021               	movlb	1	; select bank1
  8893  0F57  148E               	bsf	14,1	;volatile
  8894                           
  8895                           ;i2c_slv_drv.c: 210: TRISCbits.TRISC0 = ((UINT8)(1));
  8896  0F58  140E               	bsf	14,0	;volatile
  8897                           
  8898                           ;i2c_slv_drv.c: 214: SSP1CON1 |= (I2cConfig->I2cModuleMode) << ((UINT8)(0));
  8899  0F59  0020               	movlb	0	; select bank0
  8900  0F5A  0822               	movf	I2c_InitI2cModule@I2cConfig,w
  8901  0F5B  0086               	movwf	6
  8902  0F5C  0187               	clrf	7
  8903  0F5D  0801               	movf	1,w
  8904  0F5E  00A0               	movwf	??_I2c_InitI2cModule
  8905  0F5F  0820               	movf	??_I2c_InitI2cModule,w
  8906  0F60  0024               	movlb	4	; select bank4
  8907  0F61  0495               	iorwf	21,f	;volatile
  8908                           
  8909                           ;i2c_slv_drv.c: 217: SSP1CON2 |= (I2cConfig->I2cReceiverEnable) << ((UINT8)(3));
  8910  0F62  0020               	movlb	0	; select bank0
  8911  0F63  0A22               	incf	I2c_InitI2cModule@I2cConfig,w
  8912  0F64  0086               	movwf	6
  8913  0F65  0187               	clrf	7
  8914  0F66  0801               	movf	1,w
  8915  0F67  00A0               	movwf	??_I2c_InitI2cModule
  8916  0F68  3002               	movlw	2
  8917  0F69                     u4495:	
  8918  0F69  35A0               	lslf	??_I2c_InitI2cModule,f
  8919  0F6A  3EFF               	addlw	-1
  8920  0F6B  1D03               	skipz
  8921  0F6C  2F69               	goto	u4495
  8922  0F6D  3520               	lslf	??_I2c_InitI2cModule,w
  8923  0F6E  00A1               	movwf	??_I2c_InitI2cModule+1
  8924  0F6F  0821               	movf	??_I2c_InitI2cModule+1,w
  8925  0F70  0024               	movlb	4	; select bank4
  8926  0F71  0496               	iorwf	22,f	;volatile
  8927                           
  8928                           ;i2c_slv_drv.c: 218: SSP1CON2 |= (I2cConfig->ClockStretchEnable) << ((UINT8)(0));
  8929  0F72  0020               	movlb	0	; select bank0
  8930  0F73  0822               	movf	I2c_InitI2cModule@I2cConfig,w
  8931  0F74  3E03               	addlw	3
  8932  0F75  0086               	movwf	6
  8933  0F76  0187               	clrf	7
  8934  0F77  0801               	movf	1,w
  8935  0F78  00A0               	movwf	??_I2c_InitI2cModule
  8936  0F79  0820               	movf	??_I2c_InitI2cModule,w
  8937  0F7A  0024               	movlb	4	; select bank4
  8938  0F7B  0496               	iorwf	22,f	;volatile
  8939                           
  8940                           ;i2c_slv_drv.c: 219: SSP1CON2 |= (I2cConfig->GeneralCallEnable) << ((UINT8)(7));
  8941  0F7C  0020               	movlb	0	; select bank0
  8942  0F7D  0822               	movf	I2c_InitI2cModule@I2cConfig,w
  8943  0F7E  3E0A               	addlw	10
  8944  0F7F  0086               	movwf	6
  8945  0F80  0187               	clrf	7
  8946  0F81  0801               	movf	1,w
  8947  0F82  00A0               	movwf	??_I2c_InitI2cModule
  8948  0F83  3006               	movlw	6
  8949  0F84                     u4505:	
  8950  0F84  35A0               	lslf	??_I2c_InitI2cModule,f
  8951  0F85  3EFF               	addlw	-1
  8952  0F86  1D03               	skipz
  8953  0F87  2F84               	goto	u4505
  8954  0F88  3520               	lslf	??_I2c_InitI2cModule,w
  8955  0F89  00A1               	movwf	??_I2c_InitI2cModule+1
  8956  0F8A  0821               	movf	??_I2c_InitI2cModule+1,w
  8957  0F8B  0024               	movlb	4	; select bank4
  8958  0F8C  0496               	iorwf	22,f	;volatile
  8959                           
  8960                           ;i2c_slv_drv.c: 222: SSP1CON3 |= (I2cConfig->StopCondIntEnable) << ((UINT8)(6));
  8961  0F8D  0020               	movlb	0	; select bank0
  8962  0F8E  0822               	movf	I2c_InitI2cModule@I2cConfig,w
  8963  0F8F  3E04               	addlw	4
  8964  0F90  0086               	movwf	6
  8965  0F91  0187               	clrf	7
  8966  0F92  0801               	movf	1,w
  8967  0F93  00A0               	movwf	??_I2c_InitI2cModule
  8968  0F94  3005               	movlw	5
  8969  0F95                     u4515:	
  8970  0F95  35A0               	lslf	??_I2c_InitI2cModule,f
  8971  0F96  3EFF               	addlw	-1
  8972  0F97  1D03               	skipz
  8973  0F98  2F95               	goto	u4515
  8974  0F99  3520               	lslf	??_I2c_InitI2cModule,w
  8975  0F9A  00A1               	movwf	??_I2c_InitI2cModule+1
  8976  0F9B  0821               	movf	??_I2c_InitI2cModule+1,w
  8977  0F9C  0024               	movlb	4	; select bank4
  8978  0F9D  0497               	iorwf	23,f	;volatile
  8979                           
  8980                           ;i2c_slv_drv.c: 223: SSP1CON3 |= (I2cConfig->StartCondIntEnable) << ((UINT8)(5));
  8981  0F9E  0020               	movlb	0	; select bank0
  8982  0F9F  0822               	movf	I2c_InitI2cModule@I2cConfig,w
  8983  0FA0  3E05               	addlw	5
  8984  0FA1  0086               	movwf	6
  8985  0FA2  0187               	clrf	7
  8986  0FA3  0801               	movf	1,w
  8987  0FA4  00A0               	movwf	??_I2c_InitI2cModule
  8988  0FA5  3004               	movlw	4
  8989  0FA6                     u4525:	
  8990  0FA6  35A0               	lslf	??_I2c_InitI2cModule,f
  8991  0FA7  3EFF               	addlw	-1
  8992  0FA8  1D03               	skipz
  8993  0FA9  2FA6               	goto	u4525
  8994  0FAA  3520               	lslf	??_I2c_InitI2cModule,w
  8995  0FAB  00A1               	movwf	??_I2c_InitI2cModule+1
  8996  0FAC  0821               	movf	??_I2c_InitI2cModule+1,w
  8997  0FAD  0024               	movlb	4	; select bank4
  8998  0FAE  0497               	iorwf	23,f	;volatile
  8999                           
  9000                           ;i2c_slv_drv.c: 224: SSP1CON3 |= (I2cConfig->BufferOverwriteEnable) << ((UINT8)(4));
  9001  0FAF  0020               	movlb	0	; select bank0
  9002  0FB0  0822               	movf	I2c_InitI2cModule@I2cConfig,w
  9003  0FB1  3E06               	addlw	6
  9004  0FB2  0086               	movwf	6
  9005  0FB3  0187               	clrf	7
  9006  0FB4  0801               	movf	1,w
  9007  0FB5  00A0               	movwf	??_I2c_InitI2cModule
  9008  0FB6  3003               	movlw	3
  9009  0FB7                     u4535:	
  9010  0FB7  35A0               	lslf	??_I2c_InitI2cModule,f
  9011  0FB8  3EFF               	addlw	-1
  9012  0FB9  1D03               	skipz
  9013  0FBA  2FB7               	goto	u4535
  9014  0FBB  3520               	lslf	??_I2c_InitI2cModule,w
  9015  0FBC  00A1               	movwf	??_I2c_InitI2cModule+1
  9016  0FBD  0821               	movf	??_I2c_InitI2cModule+1,w
  9017  0FBE  0024               	movlb	4	; select bank4
  9018  0FBF  0497               	iorwf	23,f	;volatile
  9019                           
  9020                           ;i2c_slv_drv.c: 225: SSP1CON3 |= (I2cConfig->BusCollisionDetectEnable) << ((UINT8)(2));
  9021  0FC0  0020               	movlb	0	; select bank0
  9022  0FC1  0822               	movf	I2c_InitI2cModule@I2cConfig,w
  9023  0FC2  3E07               	addlw	7
  9024  0FC3  0086               	movwf	6
  9025  0FC4  0187               	clrf	7
  9026  0FC5  0801               	movf	1,w
  9027  0FC6  00A0               	movwf	??_I2c_InitI2cModule
  9028  0FC7  3001               	movlw	1
  9029  0FC8                     u4545:	
  9030  0FC8  35A0               	lslf	??_I2c_InitI2cModule,f
  9031  0FC9  3EFF               	addlw	-1
  9032  0FCA  1D03               	skipz
  9033  0FCB  2FC8               	goto	u4545
  9034  0FCC  3520               	lslf	??_I2c_InitI2cModule,w
  9035  0FCD  00A1               	movwf	??_I2c_InitI2cModule+1
  9036  0FCE  0821               	movf	??_I2c_InitI2cModule+1,w
  9037  0FCF  0024               	movlb	4	; select bank4
  9038  0FD0  0497               	iorwf	23,f	;volatile
  9039                           
  9040                           ;i2c_slv_drv.c: 226: SSP1CON3 |= (I2cConfig->AddrHoldEnable) << ((UINT8)(1));
  9041  0FD1  0020               	movlb	0	; select bank0
  9042  0FD2  0822               	movf	I2c_InitI2cModule@I2cConfig,w
  9043  0FD3  3E08               	addlw	8
  9044  0FD4  0086               	movwf	6
  9045  0FD5  0187               	clrf	7
  9046  0FD6  3501               	lslf	1,w
  9047  0FD7  00A0               	movwf	??_I2c_InitI2cModule
  9048  0FD8  0820               	movf	??_I2c_InitI2cModule,w
  9049  0FD9  0024               	movlb	4	; select bank4
  9050  0FDA  0497               	iorwf	23,f	;volatile
  9051                           
  9052                           ;i2c_slv_drv.c: 227: SSP1CON3 |= (I2cConfig->DataHoldEnable) << ((UINT8)(0));
  9053  0FDB  0020               	movlb	0	; select bank0
  9054  0FDC  0822               	movf	I2c_InitI2cModule@I2cConfig,w
  9055  0FDD  3E09               	addlw	9
  9056  0FDE  0086               	movwf	6
  9057  0FDF  0187               	clrf	7
  9058  0FE0  0801               	movf	1,w
  9059  0FE1  00A0               	movwf	??_I2c_InitI2cModule
  9060  0FE2  0820               	movf	??_I2c_InitI2cModule,w
  9061  0FE3  0024               	movlb	4	; select bank4
  9062  0FE4  0497               	iorwf	23,f	;volatile
  9063                           
  9064                           ;i2c_slv_drv.c: 230: SSP1CON1 |= (I2cConfig->EnableI2cModule) << ((UINT8)(5));
  9065  0FE5  0020               	movlb	0	; select bank0
  9066  0FE6  0822               	movf	I2c_InitI2cModule@I2cConfig,w
  9067  0FE7  3E02               	addlw	2
  9068  0FE8  0086               	movwf	6
  9069  0FE9  0187               	clrf	7
  9070  0FEA  0801               	movf	1,w
  9071  0FEB  00A0               	movwf	??_I2c_InitI2cModule
  9072  0FEC  3004               	movlw	4
  9073  0FED                     u4555:	
  9074  0FED  35A0               	lslf	??_I2c_InitI2cModule,f
  9075  0FEE  3EFF               	addlw	-1
  9076  0FEF  1D03               	skipz
  9077  0FF0  2FED               	goto	u4555
  9078  0FF1  3520               	lslf	??_I2c_InitI2cModule,w
  9079  0FF2  00A1               	movwf	??_I2c_InitI2cModule+1
  9080  0FF3  0821               	movf	??_I2c_InitI2cModule+1,w
  9081  0FF4  0024               	movlb	4	; select bank4
  9082  0FF5  0495               	iorwf	21,f	;volatile
  9083                           
  9084                           ;i2c_slv_drv.c: 233: PIR1bits.SSP1IF = ((UINT8)(0));
  9085  0FF6  0020               	movlb	0	; select bank0
  9086  0FF7  1191               	bcf	17,3	;volatile
  9087                           
  9088                           ;i2c_slv_drv.c: 234: PIE1bits.SSP1IE = ((UINT8)(1));
  9089  0FF8  0021               	movlb	1	; select bank1
  9090  0FF9  1591               	bsf	17,3	;volatile
  9091                           
  9092                           ;i2c_slv_drv.c: 237: ClearRxBuffer();
  9093  0FFA  3196  2691  318F   	fcall	_ClearRxBuffer
  9094                           
  9095                           ;i2c_slv_drv.c: 238: ClearTxBuffer();
  9096  0FFD  3196  26A1         	fcall	_ClearTxBuffer
  9097  0FFF  0008               	return
  9098  1000                     __end_of_I2c_InitI2cModule:	
  9099                           
  9100                           	psect	text30
  9101  16A1                     __ptext30:	
  9102 ;; *************** function _ClearTxBuffer *****************
  9103 ;; Defined at:
  9104 ;;		line 183 in file "../../../Framework/MercuryFwk/Source/c/01_Hal/02_Drv/i2c_slv_drv.c"
  9105 ;; Parameters:    Size  Location     Type
  9106 ;;		None
  9107 ;; Auto vars:     Size  Location     Type
  9108 ;;  Index           1    5[COMMON] unsigned char 
  9109 ;; Return value:  Size  Location     Type
  9110 ;;                  1    wreg      void 
  9111 ;; Registers used:
  9112 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  9113 ;; Tracked objects:
  9114 ;;		On entry : 0/0
  9115 ;;		On exit  : 0/0
  9116 ;;		Unchanged: 0/0
  9117 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9118 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9119 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9120 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9121 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9122 ;;Total ram usage:        2 bytes
  9123 ;; Hardware stack levels used:    1
  9124 ;; Hardware stack levels required when called:    2
  9125 ;; This function calls:
  9126 ;;		Nothing
  9127 ;; This function is called by:
  9128 ;;		_I2c_InitI2cModule
  9129 ;;		_I2c_DataReceiveSm
  9130 ;; This function uses a non-reentrant model
  9131 ;;
  9132                           
  9133                           
  9134                           ;psect for function _ClearTxBuffer
  9135  16A1                     _ClearTxBuffer:	
  9136                           
  9137                           ;i2c_slv_drv.c: 185: UINT8 Index;
  9138                           ;i2c_slv_drv.c: 188: for (Index = 0; Index < ((UINT8)(80)); Index++)
  9139                           
  9140                           ;incstack = 0
  9141                           ; Regs used in _ClearTxBuffer: [wreg+fsr1l+fsr1h+status,2+status,0]
  9142  16A1  01F5               	clrf	ClearTxBuffer@Index
  9143  16A2                     L10:	
  9144  16A2  3050               	movlw	80
  9145  16A3  0275               	subwf	ClearTxBuffer@Index,w
  9146  16A4  1803               	btfsc	3,0
  9147  16A5  0008               	return
  9148                           
  9149                           ;i2c_slv_drv.c: 189: {
  9150                           ;i2c_slv_drv.c: 190: I2cTxBuffer[Index] = 0x00;
  9151  16A6  0875               	movf	ClearTxBuffer@Index,w
  9152  16A7  3EA0               	addlw	(low (_I2cTxBuffer| (0+512)))& (0+255)
  9153  16A8  0086               	movwf	6
  9154  16A9  3002               	movlw	2	; select bank5/6
  9155  16AA  0087               	movwf	7
  9156  16AB  0181               	clrf	1
  9157  16AC  3001               	movlw	1
  9158  16AD  00F4               	movwf	??_ClearTxBuffer
  9159  16AE  0874               	movf	??_ClearTxBuffer,w
  9160  16AF  07F5               	addwf	ClearTxBuffer@Index,f
  9161  16B0  2EA2               	goto	L10
  9162  16B1                     __end_of_ClearTxBuffer:	
  9163                           
  9164                           	psect	text31
  9165  1691                     __ptext31:	
  9166 ;; *************** function _ClearRxBuffer *****************
  9167 ;; Defined at:
  9168 ;;		line 164 in file "../../../Framework/MercuryFwk/Source/c/01_Hal/02_Drv/i2c_slv_drv.c"
  9169 ;; Parameters:    Size  Location     Type
  9170 ;;		None
  9171 ;; Auto vars:     Size  Location     Type
  9172 ;;  Index           1    5[COMMON] unsigned char 
  9173 ;; Return value:  Size  Location     Type
  9174 ;;                  1    wreg      void 
  9175 ;; Registers used:
  9176 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  9177 ;; Tracked objects:
  9178 ;;		On entry : 0/0
  9179 ;;		On exit  : 0/0
  9180 ;;		Unchanged: 0/0
  9181 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9182 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9183 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9184 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9185 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9186 ;;Total ram usage:        2 bytes
  9187 ;; Hardware stack levels used:    1
  9188 ;; Hardware stack levels required when called:    2
  9189 ;; This function calls:
  9190 ;;		Nothing
  9191 ;; This function is called by:
  9192 ;;		_I2c_InitI2cModule
  9193 ;;		_I2c_DataReceiveSm
  9194 ;; This function uses a non-reentrant model
  9195 ;;
  9196                           
  9197                           
  9198                           ;psect for function _ClearRxBuffer
  9199  1691                     _ClearRxBuffer:	
  9200                           
  9201                           ;i2c_slv_drv.c: 166: UINT8 Index;
  9202                           ;i2c_slv_drv.c: 169: for (Index = 0; Index < ((UINT8)(80)); Index++)
  9203                           
  9204                           ;incstack = 0
  9205                           ; Regs used in _ClearRxBuffer: [wreg+fsr1l+fsr1h+status,2+status,0]
  9206  1691  01F5               	clrf	ClearRxBuffer@Index
  9207  1692                     L11:	
  9208  1692  3050               	movlw	80
  9209  1693  0275               	subwf	ClearRxBuffer@Index,w
  9210  1694  1803               	btfsc	3,0
  9211  1695  0008               	return
  9212                           
  9213                           ;i2c_slv_drv.c: 170: {
  9214                           ;i2c_slv_drv.c: 171: I2cRxBuffer[Index] = 0x00;
  9215  1696  0875               	movf	ClearRxBuffer@Index,w
  9216  1697  3E20               	addlw	(low (_I2cRxBuffer| (0+768)))& (0+255)
  9217  1698  0086               	movwf	6
  9218  1699  3003               	movlw	3	; select bank6/7
  9219  169A  0087               	movwf	7
  9220  169B  0181               	clrf	1
  9221  169C  3001               	movlw	1
  9222  169D  00F4               	movwf	??_ClearRxBuffer
  9223  169E  0874               	movf	??_ClearRxBuffer,w
  9224  169F  07F5               	addwf	ClearRxBuffer@Index,f
  9225  16A0  2E92               	goto	L11
  9226  16A1                     __end_of_ClearRxBuffer:	
  9227                           
  9228                           	psect	text32
  9229  0CEC                     __ptext32:	
  9230 ;; *************** function _I2cSlv_I2cDrvHandle *****************
  9231 ;; Defined at:
  9232 ;;		line 141 in file "../../../Framework/MercuryFwk/Source/c/03_Sml/01_Pml/01_SlvI2c/i2c_slv.c"
  9233 ;; Parameters:    Size  Location     Type
  9234 ;;		None
  9235 ;; Auto vars:     Size  Location     Type
  9236 ;;  Index           1    9[BANK0 ] unsigned char 
  9237 ;; Return value:  Size  Location     Type
  9238 ;;                  1    wreg      void 
  9239 ;; Registers used:
  9240 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9241 ;; Tracked objects:
  9242 ;;		On entry : 0/0
  9243 ;;		On exit  : 0/0
  9244 ;;		Unchanged: 0/0
  9245 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9246 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9247 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9248 ;;      Temps:          0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9249 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9250 ;;Total ram usage:        6 bytes
  9251 ;; Hardware stack levels used:    1
  9252 ;; Hardware stack levels required when called:    3
  9253 ;; This function calls:
  9254 ;;		_GenerateEvt
  9255 ;;		_I2c_SetI2cAddress
  9256 ;;		_I2c_SetI2cAddressMask
  9257 ;;		_I2c_UpdateTxBuffer
  9258 ;;		_Led_SetLedStatus
  9259 ;;		_ReceiveEvt
  9260 ;; This function is called by:
  9261 ;;		_I2cSlv_MainTask
  9262 ;; This function uses a non-reentrant model
  9263 ;;
  9264                           
  9265                           
  9266                           ;psect for function _I2cSlv_I2cDrvHandle
  9267  0CEC                     _I2cSlv_I2cDrvHandle:	
  9268                           
  9269                           ;i2c_slv.c: 143: static I2cReceiveMsgStateType I2cReceiveMsgState = I2cSetSlaveAddres;
  9270                           ;i2c_slv.c: 144: UINT8 Index = 0;
  9271                           
  9272                           ;incstack = 0
  9273                           ; Regs used in _I2cSlv_I2cDrvHandle: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  9274  0CEC  0020               	movlb	0	; select bank0
  9275  0CED  01A9               	clrf	I2cSlv_I2cDrvHandle@Index
  9276                           
  9277                           ;i2c_slv.c: 146: switch (I2cReceiveMsgState)
  9278  0CEE  2D70               	goto	l5039
  9279  0CEF                     l4997:	
  9280                           ;i2c_slv.c: 147: {
  9281                           ;i2c_slv.c: 148: case I2cSetSlaveAddres:
  9282                           
  9283                           
  9284                           ;i2c_slv.c: 150: if (ReceiveEvt(&I2cSetAddress))
  9285  0CEF  30E6               	movlw	(low (_I2cSetAddress| 0))& (0+255)
  9286  0CF0  3197  27BD  318C   	fcall	_ReceiveEvt
  9287  0CF3  3A00               	xorlw	0
  9288  0CF4  1903               	skipnz
  9289  0CF5  0008               	return
  9290                           
  9291                           ;i2c_slv.c: 151: {
  9292                           ;i2c_slv.c: 153: I2c_SetI2cAddress(I2cSlaveAddress);
  9293  0CF6  0878               	movf	_I2cSlaveAddress,w
  9294  0CF7  3195  25D6  318C   	fcall	_I2c_SetI2cAddress
  9295                           
  9296                           ;i2c_slv.c: 154: I2c_SetI2cAddressMask(((UINT8)(0x7F)));
  9297  0CFA  307F               	movlw	127
  9298  0CFB  3195  25DB         	fcall	_I2c_SetI2cAddressMask
  9299                           
  9300                           ;i2c_slv.c: 156: I2cReceiveMsgState = I2cReceiveData;
  9301  0CFD  0021               	movlb	1	; select bank1
  9302  0CFE  01C2               	clrf	I2cSlv_I2cDrvHandle@I2cReceiveMsgState^(0+128)
  9303  0CFF  0AC2               	incf	I2cSlv_I2cDrvHandle@I2cReceiveMsgState^(0+128),f
  9304                           
  9305                           ;i2c_slv.c: 157: }
  9306                           ;i2c_slv.c: 158: break;
  9307  0D00  0008               	return
  9308  0D01                     l5003:	
  9309                           ;i2c_slv.c: 160: case I2cReceiveData:
  9310                           
  9311                           
  9312                           ;i2c_slv.c: 162: if (ReceiveEvt(&I2cNewPacketNotification))
  9313  0D01  30E0               	movlw	(low (_I2cNewPacketNotification| 0))& (0+255)
  9314  0D02  3197  27BD  318C   	fcall	_ReceiveEvt
  9315  0D05  3A00               	xorlw	0
  9316  0D06  1903               	skipnz
  9317  0D07  2D53               	goto	l5029
  9318                           
  9319                           ;i2c_slv.c: 163: {
  9320                           ;i2c_slv.c: 165: if ((I2cPacket.SlaveAddress == I2cSlaveAddress) || (I2cPacket.SlaveAddr
      +                          ess == ((UINT8)(0x00))))
  9321  0D08  309D               	movlw	157
  9322  0D09  0086               	movwf	6
  9323  0D0A  3023               	movlw	35
  9324  0D0B  0087               	movwf	7
  9325  0D0C  0801               	movf	1,w
  9326  0D0D  0678               	xorwf	_I2cSlaveAddress,w
  9327  0D0E  1903               	skipnz
  9328  0D0F  2D17               	goto	l5009
  9329  0D10  309D               	movlw	157
  9330  0D11  0086               	movwf	6
  9331  0D12  3023               	movlw	35
  9332  0D13  0087               	movwf	7
  9333  0D14  0801               	movf	1,w
  9334  0D15  1D03               	btfss	3,2
  9335  0D16  0008               	return
  9336  0D17                     l5009:	
  9337                           
  9338                           ;i2c_slv.c: 166: {
  9339                           ;i2c_slv.c: 167: if (I2cPacket.ReadWrite == ((UINT8)(0)))
  9340  0D17  309D               	movlw	157
  9341  0D18  0086               	movwf	6
  9342  0D19  3023               	movlw	35
  9343  0D1A  0087               	movwf	7
  9344  0D1B  3141               	addfsr 1,1
  9345  0D1C  0801               	movf	1,w
  9346  0D1D  1D03               	btfss	3,2
  9347  0D1E  0008               	return
  9348                           
  9349                           ;i2c_slv.c: 168: {
  9350                           ;i2c_slv.c: 170: for (Index = 0; Index < ((UINT8)(80));Index++)
  9351  0D1F  0020               	movlb	0	; select bank0
  9352  0D20  01A9               	clrf	I2cSlv_I2cDrvHandle@Index
  9353  0D21  3050               	movlw	80
  9354  0D22  0229               	subwf	I2cSlv_I2cDrvHandle@Index,w
  9355  0D23  1803               	btfsc	3,0
  9356  0D24  2D43               	goto	l5023
  9357  0D25                     l5017:	
  9358                           
  9359                           ;i2c_slv.c: 171: {
  9360                           ;i2c_slv.c: 172: CmdBuffer[Index] = I2cPacket.Buffer[Index];
  9361  0D25  0829               	movf	I2cSlv_I2cDrvHandle@Index,w
  9362  0D26  00A4               	movwf	??_I2cSlv_I2cDrvHandle
  9363  0D27  01A5               	clrf	??_I2cSlv_I2cDrvHandle+1
  9364  0D28  309F               	movlw	159
  9365  0D29  00A6               	movwf	??_I2cSlv_I2cDrvHandle+2
  9366  0D2A  3023               	movlw	35
  9367  0D2B  00A7               	movwf	??_I2cSlv_I2cDrvHandle+3
  9368  0D2C  0824               	movf	??_I2cSlv_I2cDrvHandle,w
  9369  0D2D  0726               	addwf	??_I2cSlv_I2cDrvHandle+2,w
  9370  0D2E  0086               	movwf	6
  9371  0D2F  0825               	movf	??_I2cSlv_I2cDrvHandle+1,w
  9372  0D30  3D27               	addwfc	??_I2cSlv_I2cDrvHandle+3,w
  9373  0D31  0087               	movwf	7
  9374  0D32  0801               	movf	1,w
  9375  0D33  00A8               	movwf	??_I2cSlv_I2cDrvHandle+4
  9376  0D34  0829               	movf	I2cSlv_I2cDrvHandle@Index,w
  9377  0D35  3EA0               	addlw	(low (_CmdBuffer| (0+256)))& (0+255)
  9378  0D36  0086               	movwf	6
  9379  0D37  3001               	movlw	1	; select bank3/4
  9380  0D38  0087               	movwf	7
  9381  0D39  0828               	movf	??_I2cSlv_I2cDrvHandle+4,w
  9382  0D3A  0081               	movwf	1
  9383  0D3B  3001               	movlw	1
  9384  0D3C  00A4               	movwf	??_I2cSlv_I2cDrvHandle
  9385  0D3D  0824               	movf	??_I2cSlv_I2cDrvHandle,w
  9386  0D3E  07A9               	addwf	I2cSlv_I2cDrvHandle@Index,f
  9387  0D3F  3050               	movlw	80
  9388  0D40  0229               	subwf	I2cSlv_I2cDrvHandle@Index,w
  9389  0D41  1C03               	skipc
  9390  0D42  2D25               	goto	l5017
  9391  0D43                     l5023:	
  9392                           
  9393                           ;i2c_slv.c: 173: }
  9394                           ;i2c_slv.c: 175: GenerateEvt(&I2cWriteRequest);
  9395  0D43  30E8               	movlw	(low (_I2cWriteRequest| 0))& (0+255)
  9396  0D44  3197  27DE  318C   	fcall	_GenerateEvt
  9397                           
  9398                           ;i2c_slv.c: 177: if (LedBehaviourSts == ((UINT8)(1)))
  9399  0D47  0379               	decf	_LedBehaviourSts,w
  9400  0D48  1D03               	btfss	3,2
  9401  0D49  0008               	return
  9402                           
  9403                           ;i2c_slv.c: 178: {
  9404                           ;i2c_slv.c: 179: Led_SetLedStatus(1u, LED_STS_PULSE);
  9405  0D4A  3003               	movlw	3
  9406  0D4B  0020               	movlb	0	; select bank0
  9407  0D4C  00A4               	movwf	??_I2cSlv_I2cDrvHandle
  9408  0D4D  0824               	movf	??_I2cSlv_I2cDrvHandle,w
  9409  0D4E  00F4               	movwf	Led_SetLedStatus@LedSts
  9410  0D4F  3001               	movlw	1
  9411  0D50  3196  2661         	fcall	_Led_SetLedStatus
  9412                           
  9413                           ;i2c_slv.c: 180: }
  9414                           ;i2c_slv.c: 181: }
  9415                           ;i2c_slv.c: 182: }
  9416                           ;i2c_slv.c: 183: }
  9417  0D52  0008               	return
  9418  0D53                     l5029:	
  9419                           
  9420                           ;i2c_slv.c: 185: else if (ReceiveEvt(&I2cReplyPacketReady))
  9421  0D53  30E4               	movlw	(low (_I2cReplyPacketReady| 0))& (0+255)
  9422  0D54  3197  27BD  318C   	fcall	_ReceiveEvt
  9423  0D57  3A00               	xorlw	0
  9424  0D58  1903               	skipnz
  9425  0D59  0008               	return
  9426                           
  9427                           ;i2c_slv.c: 186: {
  9428                           ;i2c_slv.c: 188: I2c_UpdateTxBuffer(RepBuffer,RepBufferLen);
  9429  0D5A  0021               	movlb	1	; select bank1
  9430  0D5B  0845               	movf	_RepBufferLen^(0+128),w
  9431  0D5C  0020               	movlb	0	; select bank0
  9432  0D5D  00A4               	movwf	??_I2cSlv_I2cDrvHandle
  9433  0D5E  0824               	movf	??_I2cSlv_I2cDrvHandle,w
  9434  0D5F  00F4               	movwf	I2c_UpdateTxBuffer@Length
  9435  0D60  3020               	movlw	(low (_RepBuffer| (0+512)))& (0+255)
  9436  0D61  3197  277F  318C   	fcall	_I2c_UpdateTxBuffer
  9437                           
  9438                           ;i2c_slv.c: 190: if (LedBehaviourSts == ((UINT8)(1)))
  9439  0D64  0379               	decf	_LedBehaviourSts,w
  9440  0D65  1D03               	btfss	3,2
  9441  0D66  0008               	return
  9442                           
  9443                           ;i2c_slv.c: 191: {
  9444                           ;i2c_slv.c: 192: Led_SetLedStatus(1u, LED_STS_PULSE);
  9445  0D67  3003               	movlw	3
  9446  0D68  0020               	movlb	0	; select bank0
  9447  0D69  00A4               	movwf	??_I2cSlv_I2cDrvHandle
  9448  0D6A  0824               	movf	??_I2cSlv_I2cDrvHandle,w
  9449  0D6B  00F4               	movwf	Led_SetLedStatus@LedSts
  9450  0D6C  3001               	movlw	1
  9451  0D6D  3196  2661         	fcall	_Led_SetLedStatus
  9452                           
  9453                           ;i2c_slv.c: 199: }
  9454                           
  9455                           ;i2c_slv.c: 198: break;
  9456                           
  9457                           ;i2c_slv.c: 197: default:
  9458                           
  9459                           ;i2c_slv.c: 193: }
  9460                           ;i2c_slv.c: 194: }
  9461                           ;i2c_slv.c: 195: break;
  9462  0D6F  0008               	return
  9463  0D70                     l5039:	
  9464  0D70  0021               	movlb	1	; select bank1
  9465  0D71  0842               	movf	I2cSlv_I2cDrvHandle@I2cReceiveMsgState^(0+128),w
  9466                           
  9467                           ; Switch size 1, requested type "space"
  9468                           ; Number of cases is 2, Range of values is 0 to 1
  9469                           ; switch strategies available:
  9470                           ; Name         Instructions Cycles
  9471                           ; simple_byte            7     4 (average)
  9472                           ; direct_byte           10     6 (fixed)
  9473                           ; jumptable            260     6 (fixed)
  9474                           ;	Chosen strategy is simple_byte
  9475  0D72  3A00               	xorlw	0	; case 0
  9476  0D73  1903               	skipnz
  9477  0D74  2CEF               	goto	l4997
  9478  0D75  3A01               	xorlw	1	; case 1
  9479  0D76  1903               	skipnz
  9480  0D77  2D01               	goto	l5003
  9481  0D78  2D79               	goto	l610
  9482  0D79                     l610:	
  9483  0D79  0008               	return
  9484  0D7A                     __end_of_I2cSlv_I2cDrvHandle:	
  9485                           
  9486                           	psect	text33
  9487  177F                     __ptext33:	
  9488 ;; *************** function _I2c_UpdateTxBuffer *****************
  9489 ;; Defined at:
  9490 ;;		line 278 in file "../../../Framework/MercuryFwk/Source/c/01_Hal/02_Drv/i2c_slv_drv.c"
  9491 ;; Parameters:    Size  Location     Type
  9492 ;;  DataBuffer      1    wreg     PTR unsigned char 
  9493 ;;		 -> RepBuffer(80), 
  9494 ;;  Length          1    4[COMMON] unsigned char 
  9495 ;; Auto vars:     Size  Location     Type
  9496 ;;  DataBuffer      1    2[BANK0 ] PTR unsigned char 
  9497 ;;		 -> RepBuffer(80), 
  9498 ;;  Index           1    3[BANK0 ] unsigned char 
  9499 ;; Return value:  Size  Location     Type
  9500 ;;                  1    wreg      void 
  9501 ;; Registers used:
  9502 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  9503 ;; Tracked objects:
  9504 ;;		On entry : 0/0
  9505 ;;		On exit  : 0/0
  9506 ;;		Unchanged: 0/0
  9507 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9508 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9509 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9510 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9511 ;;      Totals:         1       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9512 ;;Total ram usage:        5 bytes
  9513 ;; Hardware stack levels used:    1
  9514 ;; Hardware stack levels required when called:    2
  9515 ;; This function calls:
  9516 ;;		Nothing
  9517 ;; This function is called by:
  9518 ;;		_I2cSlv_I2cDrvHandle
  9519 ;; This function uses a non-reentrant model
  9520 ;;
  9521                           
  9522                           
  9523                           ;psect for function _I2c_UpdateTxBuffer
  9524  177F                     _I2c_UpdateTxBuffer:	
  9525                           
  9526                           ;incstack = 0
  9527                           ; Regs used in _I2c_UpdateTxBuffer: [wreg+fsr1l+fsr1h+status,2+status,0]
  9528                           ;I2c_UpdateTxBuffer@DataBuffer stored from wreg
  9529  177F  0020               	movlb	0	; select bank0
  9530  1780  00A2               	movwf	I2c_UpdateTxBuffer@DataBuffer
  9531                           
  9532                           ;i2c_slv_drv.c: 280: UINT8 Index = 0;
  9533  1781  01A3               	clrf	I2c_UpdateTxBuffer@Index
  9534                           
  9535                           ;i2c_slv_drv.c: 283: for (Index = 0; Index < Length; Index++)
  9536  1782  01A3               	clrf	I2c_UpdateTxBuffer@Index
  9537  1783                     l4647:	
  9538  1783  0874               	movf	I2c_UpdateTxBuffer@Length,w
  9539  1784  0223               	subwf	I2c_UpdateTxBuffer@Index,w
  9540  1785  1803               	btfsc	3,0
  9541  1786  0008               	return
  9542                           
  9543                           ;i2c_slv_drv.c: 284: {
  9544                           ;i2c_slv_drv.c: 285: I2cTxBuffer[Index] = *(DataBuffer + Index);
  9545  1787  0823               	movf	I2c_UpdateTxBuffer@Index,w
  9546  1788  0722               	addwf	I2c_UpdateTxBuffer@DataBuffer,w
  9547  1789  00A0               	movwf	??_I2c_UpdateTxBuffer
  9548  178A  0820               	movf	??_I2c_UpdateTxBuffer,w
  9549  178B  0086               	movwf	6
  9550  178C  3002               	movlw	2	; select bank4/5
  9551  178D  0087               	movwf	7
  9552  178E  0801               	movf	1,w
  9553  178F  00A1               	movwf	??_I2c_UpdateTxBuffer+1
  9554  1790  0823               	movf	I2c_UpdateTxBuffer@Index,w
  9555  1791  3EA0               	addlw	(low (_I2cTxBuffer| (0+512)))& (0+255)
  9556  1792  0086               	movwf	6
  9557  1793  3002               	movlw	2	; select bank5/6
  9558  1794  0087               	movwf	7
  9559  1795  0821               	movf	??_I2c_UpdateTxBuffer+1,w
  9560  1796  0081               	movwf	1
  9561  1797  3001               	movlw	1
  9562  1798  00A0               	movwf	??_I2c_UpdateTxBuffer
  9563  1799  0820               	movf	??_I2c_UpdateTxBuffer,w
  9564  179A  07A3               	addwf	I2c_UpdateTxBuffer@Index,f
  9565  179B  2F83               	goto	l4647
  9566  179C                     __end_of_I2c_UpdateTxBuffer:	
  9567                           
  9568                           	psect	text34
  9569  15DB                     __ptext34:	
  9570 ;; *************** function _I2c_SetI2cAddressMask *****************
  9571 ;; Defined at:
  9572 ;;		line 263 in file "../../../Framework/MercuryFwk/Source/c/01_Hal/02_Drv/i2c_slv_drv.c"
  9573 ;; Parameters:    Size  Location     Type
  9574 ;;  SlaveAddress    1    wreg     unsigned char 
  9575 ;; Auto vars:     Size  Location     Type
  9576 ;;  SlaveAddress    1    4[COMMON] unsigned char 
  9577 ;; Return value:  Size  Location     Type
  9578 ;;                  1    wreg      void 
  9579 ;; Registers used:
  9580 ;;		wreg, status,2, status,0
  9581 ;; Tracked objects:
  9582 ;;		On entry : 0/0
  9583 ;;		On exit  : 0/0
  9584 ;;		Unchanged: 0/0
  9585 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9586 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9587 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9588 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9589 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9590 ;;Total ram usage:        1 bytes
  9591 ;; Hardware stack levels used:    1
  9592 ;; Hardware stack levels required when called:    2
  9593 ;; This function calls:
  9594 ;;		Nothing
  9595 ;; This function is called by:
  9596 ;;		_I2cSlv_I2cDrvHandle
  9597 ;; This function uses a non-reentrant model
  9598 ;;
  9599                           
  9600                           
  9601                           ;psect for function _I2c_SetI2cAddressMask
  9602  15DB                     _I2c_SetI2cAddressMask:	
  9603                           
  9604                           ;incstack = 0
  9605                           ; Regs used in _I2c_SetI2cAddressMask: [wreg+status,2+status,0]
  9606                           ;I2c_SetI2cAddressMask@SlaveAddressMask stored from wreg
  9607  15DB  00F4               	movwf	I2c_SetI2cAddressMask@SlaveAddressMask
  9608                           
  9609                           ;i2c_slv_drv.c: 266: SSP1MSK = (SlaveAddressMask << ((UINT8)(1)));
  9610  15DC  3574               	lslf	I2c_SetI2cAddressMask@SlaveAddressMask,w
  9611  15DD  0024               	movlb	4	; select bank4
  9612  15DE  0093               	movwf	19	;volatile
  9613  15DF  0008               	return
  9614  15E0                     __end_of_I2c_SetI2cAddressMask:	
  9615                           
  9616                           	psect	text35
  9617  15D6                     __ptext35:	
  9618 ;; *************** function _I2c_SetI2cAddress *****************
  9619 ;; Defined at:
  9620 ;;		line 249 in file "../../../Framework/MercuryFwk/Source/c/01_Hal/02_Drv/i2c_slv_drv.c"
  9621 ;; Parameters:    Size  Location     Type
  9622 ;;  SlaveAddress    1    wreg     unsigned char 
  9623 ;; Auto vars:     Size  Location     Type
  9624 ;;  SlaveAddress    1    4[COMMON] unsigned char 
  9625 ;; Return value:  Size  Location     Type
  9626 ;;                  1    wreg      void 
  9627 ;; Registers used:
  9628 ;;		wreg, status,2, status,0
  9629 ;; Tracked objects:
  9630 ;;		On entry : 0/0
  9631 ;;		On exit  : 0/0
  9632 ;;		Unchanged: 0/0
  9633 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9634 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9635 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9636 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9637 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9638 ;;Total ram usage:        1 bytes
  9639 ;; Hardware stack levels used:    1
  9640 ;; Hardware stack levels required when called:    2
  9641 ;; This function calls:
  9642 ;;		Nothing
  9643 ;; This function is called by:
  9644 ;;		_I2cSlv_I2cDrvHandle
  9645 ;; This function uses a non-reentrant model
  9646 ;;
  9647                           
  9648                           
  9649                           ;psect for function _I2c_SetI2cAddress
  9650  15D6                     _I2c_SetI2cAddress:	
  9651                           
  9652                           ;incstack = 0
  9653                           ; Regs used in _I2c_SetI2cAddress: [wreg+status,2+status,0]
  9654                           ;I2c_SetI2cAddress@SlaveAddress stored from wreg
  9655  15D6  00F4               	movwf	I2c_SetI2cAddress@SlaveAddress
  9656                           
  9657                           ;i2c_slv_drv.c: 252: SSP1ADD = (SlaveAddress << ((UINT8)(1)));
  9658  15D7  3574               	lslf	I2c_SetI2cAddress@SlaveAddress,w
  9659  15D8  0024               	movlb	4	; select bank4
  9660  15D9  0092               	movwf	18	;volatile
  9661  15DA  0008               	return
  9662  15DB                     __end_of_I2c_SetI2cAddress:	
  9663                           
  9664                           	psect	text36
  9665  15FF                     __ptext36:	
  9666 ;; *************** function _Mcu_SetPullUpsSts *****************
  9667 ;; Defined at:
  9668 ;;		line 141 in file "../../../Framework/MercuryFwk/Source/c/01_Hal/02_Drv/mcu_drv.c"
  9669 ;; Parameters:    Size  Location     Type
  9670 ;;  PuSts           1    wreg     enum E3651
  9671 ;; Auto vars:     Size  Location     Type
  9672 ;;  PuSts           1    4[COMMON] enum E3651
  9673 ;; Return value:  Size  Location     Type
  9674 ;;                  1    wreg      void 
  9675 ;; Registers used:
  9676 ;;		wreg, status,0
  9677 ;; Tracked objects:
  9678 ;;		On entry : 0/0
  9679 ;;		On exit  : 0/0
  9680 ;;		Unchanged: 0/0
  9681 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9682 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9683 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9684 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9685 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9686 ;;Total ram usage:        1 bytes
  9687 ;; Hardware stack levels used:    1
  9688 ;; Hardware stack levels required when called:    2
  9689 ;; This function calls:
  9690 ;;		Nothing
  9691 ;; This function is called by:
  9692 ;;		_App_MainTask
  9693 ;; This function uses a non-reentrant model
  9694 ;;
  9695                           
  9696                           
  9697                           ;psect for function _Mcu_SetPullUpsSts
  9698  15FF                     _Mcu_SetPullUpsSts:	
  9699                           
  9700                           ;incstack = 0
  9701                           ; Regs used in _Mcu_SetPullUpsSts: [wreg+status,0]
  9702                           ;Mcu_SetPullUpsSts@PuSts stored from wreg
  9703  15FF  00F4               	movwf	Mcu_SetPullUpsSts@PuSts
  9704                           
  9705                           ;mcu_drv.c: 144: OPTION_REGbits.nWPUEN = PuSts;
  9706  1600  0C74               	rrf	Mcu_SetPullUpsSts@PuSts,w
  9707  1601  0021               	movlb	1	; select bank1
  9708  1602  1C03               	skipc
  9709  1603  1395               	bcf	21,7	;volatile
  9710  1604  1803               	skipnc
  9711  1605  1795               	bsf	21,7	;volatile
  9712  1606  0008               	return
  9713  1607                     __end_of_Mcu_SetPullUpsSts:	
  9714                           
  9715                           	psect	text37
  9716  15F7                     __ptext37:	
  9717 ;; *************** function _Mcu_SetDieTempSts *****************
  9718 ;; Defined at:
  9719 ;;		line 239 in file "../../../Framework/MercuryFwk/Source/c/01_Hal/02_Drv/mcu_drv.c"
  9720 ;; Parameters:    Size  Location     Type
  9721 ;;  DieTempSts      1    wreg     unsigned char 
  9722 ;; Auto vars:     Size  Location     Type
  9723 ;;  DieTempSts      1    4[COMMON] unsigned char 
  9724 ;; Return value:  Size  Location     Type
  9725 ;;                  1    wreg      void 
  9726 ;; Registers used:
  9727 ;;		wreg, status,0
  9728 ;; Tracked objects:
  9729 ;;		On entry : 0/0
  9730 ;;		On exit  : 0/0
  9731 ;;		Unchanged: 0/0
  9732 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9733 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9734 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9735 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9736 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9737 ;;Total ram usage:        1 bytes
  9738 ;; Hardware stack levels used:    1
  9739 ;; Hardware stack levels required when called:    2
  9740 ;; This function calls:
  9741 ;;		Nothing
  9742 ;; This function is called by:
  9743 ;;		_App_MainTask
  9744 ;; This function uses a non-reentrant model
  9745 ;;
  9746                           
  9747                           
  9748                           ;psect for function _Mcu_SetDieTempSts
  9749  15F7                     _Mcu_SetDieTempSts:	
  9750                           
  9751                           ;incstack = 0
  9752                           ; Regs used in _Mcu_SetDieTempSts: [wreg+status,0]
  9753                           ;Mcu_SetDieTempSts@DieTempSts stored from wreg
  9754  15F7  00F4               	movwf	Mcu_SetDieTempSts@DieTempSts
  9755                           
  9756                           ;mcu_drv.c: 242: FVRCONbits.TSEN = DieTempSts;
  9757  15F8  0C74               	rrf	Mcu_SetDieTempSts@DieTempSts,w
  9758  15F9  0022               	movlb	2	; select bank2
  9759  15FA  1C03               	skipc
  9760  15FB  1297               	bcf	23,5	;volatile
  9761  15FC  1803               	skipnc
  9762  15FD  1697               	bsf	23,5	;volatile
  9763  15FE  0008               	return
  9764  15FF                     __end_of_Mcu_SetDieTempSts:	
  9765                           
  9766                           	psect	text38
  9767  15EF                     __ptext38:	
  9768 ;; *************** function _Mcu_SetDieTempMode *****************
  9769 ;; Defined at:
  9770 ;;		line 253 in file "../../../Framework/MercuryFwk/Source/c/01_Hal/02_Drv/mcu_drv.c"
  9771 ;; Parameters:    Size  Location     Type
  9772 ;;  DieTempMode     1    wreg     unsigned char 
  9773 ;; Auto vars:     Size  Location     Type
  9774 ;;  DieTempMode     1    4[COMMON] unsigned char 
  9775 ;; Return value:  Size  Location     Type
  9776 ;;                  1    wreg      void 
  9777 ;; Registers used:
  9778 ;;		wreg, status,0
  9779 ;; Tracked objects:
  9780 ;;		On entry : 0/0
  9781 ;;		On exit  : 0/0
  9782 ;;		Unchanged: 0/0
  9783 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9784 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9785 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9786 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9787 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9788 ;;Total ram usage:        1 bytes
  9789 ;; Hardware stack levels used:    1
  9790 ;; Hardware stack levels required when called:    2
  9791 ;; This function calls:
  9792 ;;		Nothing
  9793 ;; This function is called by:
  9794 ;;		_App_MainTask
  9795 ;; This function uses a non-reentrant model
  9796 ;;
  9797                           
  9798                           
  9799                           ;psect for function _Mcu_SetDieTempMode
  9800  15EF                     _Mcu_SetDieTempMode:	
  9801                           
  9802                           ;incstack = 0
  9803                           ; Regs used in _Mcu_SetDieTempMode: [wreg+status,0]
  9804                           ;Mcu_SetDieTempMode@DieTempMode stored from wreg
  9805  15EF  00F4               	movwf	Mcu_SetDieTempMode@DieTempMode
  9806                           
  9807                           ;mcu_drv.c: 256: FVRCONbits.TSRNG = DieTempMode;
  9808  15F0  0C74               	rrf	Mcu_SetDieTempMode@DieTempMode,w
  9809  15F1  0022               	movlb	2	; select bank2
  9810  15F2  1C03               	skipc
  9811  15F3  1217               	bcf	23,4	;volatile
  9812  15F4  1803               	skipnc
  9813  15F5  1617               	bsf	23,4	;volatile
  9814  15F6  0008               	return
  9815  15F7                     __end_of_Mcu_SetDieTempMode:	
  9816                           
  9817                           	psect	text39
  9818  0EAE                     __ptext39:	
  9819 ;; *************** function _Mcu_ConfigPullUps *****************
  9820 ;; Defined at:
  9821 ;;		line 155 in file "../../../Framework/MercuryFwk/Source/c/01_Hal/02_Drv/mcu_drv.c"
  9822 ;; Parameters:    Size  Location     Type
  9823 ;;  WpuCh           1    wreg     PTR struct _WpuChType
  9824 ;;		 -> App_MainTask@WpuCh(18), 
  9825 ;; Auto vars:     Size  Location     Type
  9826 ;;  WpuCh           1    4[COMMON] PTR struct _WpuChType
  9827 ;;		 -> App_MainTask@WpuCh(18), 
  9828 ;; Return value:  Size  Location     Type
  9829 ;;                  1    wreg      void 
  9830 ;; Registers used:
  9831 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  9832 ;; Tracked objects:
  9833 ;;		On entry : 0/0
  9834 ;;		On exit  : 0/0
  9835 ;;		Unchanged: 0/0
  9836 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9837 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9838 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9839 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9840 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9841 ;;Total ram usage:        1 bytes
  9842 ;; Hardware stack levels used:    1
  9843 ;; Hardware stack levels required when called:    2
  9844 ;; This function calls:
  9845 ;;		Nothing
  9846 ;; This function is called by:
  9847 ;;		_App_MainTask
  9848 ;; This function uses a non-reentrant model
  9849 ;;
  9850                           
  9851                           
  9852                           ;psect for function _Mcu_ConfigPullUps
  9853  0EAE                     _Mcu_ConfigPullUps:	
  9854                           
  9855                           ;incstack = 0
  9856                           ; Regs used in _Mcu_ConfigPullUps: [wreg+fsr1l+fsr1h+status,2+status,0]
  9857                           ;Mcu_ConfigPullUps@WpuCh stored from wreg
  9858  0EAE  00F4               	movwf	Mcu_ConfigPullUps@WpuCh
  9859                           
  9860                           ;mcu_drv.c: 158: WPUA = 0x00;
  9861  0EAF  0024               	movlb	4	; select bank4
  9862  0EB0  018C               	clrf	12	;volatile
  9863                           
  9864                           ;mcu_drv.c: 159: WPUAbits.WPUA0 = WpuCh->WpuA0;
  9865  0EB1  0874               	movf	Mcu_ConfigPullUps@WpuCh,w
  9866  0EB2  0086               	movwf	6
  9867  0EB3  0187               	clrf	7
  9868  0EB4  0C01               	rrf	1,w
  9869  0EB5  1C03               	skipc
  9870  0EB6  100C               	bcf	12,0	;volatile
  9871  0EB7  1803               	skipnc
  9872  0EB8  140C               	bsf	12,0	;volatile
  9873                           
  9874                           ;mcu_drv.c: 160: WPUAbits.WPUA1 = WpuCh->WpuA1;
  9875  0EB9  0A74               	incf	Mcu_ConfigPullUps@WpuCh,w
  9876  0EBA  0086               	movwf	6
  9877  0EBB  0187               	clrf	7
  9878  0EBC  0C01               	rrf	1,w
  9879  0EBD  1C03               	skipc
  9880  0EBE  108C               	bcf	12,1	;volatile
  9881  0EBF  1803               	skipnc
  9882  0EC0  148C               	bsf	12,1	;volatile
  9883                           
  9884                           ;mcu_drv.c: 161: WPUAbits.WPUA2 = WpuCh->WpuA2;
  9885  0EC1  0874               	movf	Mcu_ConfigPullUps@WpuCh,w
  9886  0EC2  3E02               	addlw	2
  9887  0EC3  0086               	movwf	6
  9888  0EC4  0187               	clrf	7
  9889  0EC5  0C01               	rrf	1,w
  9890  0EC6  1C03               	skipc
  9891  0EC7  110C               	bcf	12,2	;volatile
  9892  0EC8  1803               	skipnc
  9893  0EC9  150C               	bsf	12,2	;volatile
  9894                           
  9895                           ;mcu_drv.c: 162: WPUAbits.WPUA3 = WpuCh->WpuA3;
  9896  0ECA  0874               	movf	Mcu_ConfigPullUps@WpuCh,w
  9897  0ECB  3E03               	addlw	3
  9898  0ECC  0086               	movwf	6
  9899  0ECD  0187               	clrf	7
  9900  0ECE  0C01               	rrf	1,w
  9901  0ECF  1C03               	skipc
  9902  0ED0  118C               	bcf	12,3	;volatile
  9903  0ED1  1803               	skipnc
  9904  0ED2  158C               	bsf	12,3	;volatile
  9905                           
  9906                           ;mcu_drv.c: 163: WPUAbits.WPUA4 = WpuCh->WpuA4;
  9907  0ED3  0874               	movf	Mcu_ConfigPullUps@WpuCh,w
  9908  0ED4  3E04               	addlw	4
  9909  0ED5  0086               	movwf	6
  9910  0ED6  0187               	clrf	7
  9911  0ED7  0C01               	rrf	1,w
  9912  0ED8  1C03               	skipc
  9913  0ED9  120C               	bcf	12,4	;volatile
  9914  0EDA  1803               	skipnc
  9915  0EDB  160C               	bsf	12,4	;volatile
  9916                           
  9917                           ;mcu_drv.c: 164: WPUAbits.WPUA5 = WpuCh->WpuA5;
  9918  0EDC  0874               	movf	Mcu_ConfigPullUps@WpuCh,w
  9919  0EDD  3E05               	addlw	5
  9920  0EDE  0086               	movwf	6
  9921  0EDF  0187               	clrf	7
  9922  0EE0  0C01               	rrf	1,w
  9923  0EE1  1C03               	skipc
  9924  0EE2  128C               	bcf	12,5	;volatile
  9925  0EE3  1803               	skipnc
  9926  0EE4  168C               	bsf	12,5	;volatile
  9927                           
  9928                           ;mcu_drv.c: 168: WPUB = 0x00;
  9929  0EE5  018D               	clrf	13	;volatile
  9930                           
  9931                           ;mcu_drv.c: 169: WPUBbits.WPUB4 = WpuCh->WpuB4;
  9932  0EE6  0874               	movf	Mcu_ConfigPullUps@WpuCh,w
  9933  0EE7  3E06               	addlw	6
  9934  0EE8  0086               	movwf	6
  9935  0EE9  0187               	clrf	7
  9936  0EEA  0C01               	rrf	1,w
  9937  0EEB  1C03               	skipc
  9938  0EEC  120D               	bcf	13,4	;volatile
  9939  0EED  1803               	skipnc
  9940  0EEE  160D               	bsf	13,4	;volatile
  9941                           
  9942                           ;mcu_drv.c: 170: WPUBbits.WPUB5 = WpuCh->WpuB5;
  9943  0EEF  0874               	movf	Mcu_ConfigPullUps@WpuCh,w
  9944  0EF0  3E07               	addlw	7
  9945  0EF1  0086               	movwf	6
  9946  0EF2  0187               	clrf	7
  9947  0EF3  0C01               	rrf	1,w
  9948  0EF4  1C03               	skipc
  9949  0EF5  128D               	bcf	13,5	;volatile
  9950  0EF6  1803               	skipnc
  9951  0EF7  168D               	bsf	13,5	;volatile
  9952                           
  9953                           ;mcu_drv.c: 171: WPUBbits.WPUB6 = WpuCh->WpuB6;
  9954  0EF8  0874               	movf	Mcu_ConfigPullUps@WpuCh,w
  9955  0EF9  3E08               	addlw	8
  9956  0EFA  0086               	movwf	6
  9957  0EFB  0187               	clrf	7
  9958  0EFC  0C01               	rrf	1,w
  9959  0EFD  1C03               	skipc
  9960  0EFE  130D               	bcf	13,6	;volatile
  9961  0EFF  1803               	skipnc
  9962  0F00  170D               	bsf	13,6	;volatile
  9963                           
  9964                           ;mcu_drv.c: 172: WPUBbits.WPUB7 = WpuCh->WpuB7;
  9965  0F01  0874               	movf	Mcu_ConfigPullUps@WpuCh,w
  9966  0F02  3E09               	addlw	9
  9967  0F03  0086               	movwf	6
  9968  0F04  0187               	clrf	7
  9969  0F05  0C01               	rrf	1,w
  9970  0F06  1C03               	skipc
  9971  0F07  138D               	bcf	13,7	;volatile
  9972  0F08  1803               	skipnc
  9973  0F09  178D               	bsf	13,7	;volatile
  9974                           
  9975                           ;mcu_drv.c: 176: WPUC = 0x00;
  9976  0F0A  018E               	clrf	14	;volatile
  9977                           
  9978                           ;mcu_drv.c: 177: WPUCbits.WPUC0 = WpuCh->WpuC0;
  9979  0F0B  0874               	movf	Mcu_ConfigPullUps@WpuCh,w
  9980  0F0C  3E0A               	addlw	10
  9981  0F0D  0086               	movwf	6
  9982  0F0E  0187               	clrf	7
  9983  0F0F  0C01               	rrf	1,w
  9984  0F10  1C03               	skipc
  9985  0F11  100E               	bcf	14,0	;volatile
  9986  0F12  1803               	skipnc
  9987  0F13  140E               	bsf	14,0	;volatile
  9988                           
  9989                           ;mcu_drv.c: 178: WPUCbits.WPUC1 = WpuCh->WpuC1;
  9990  0F14  0874               	movf	Mcu_ConfigPullUps@WpuCh,w
  9991  0F15  3E0B               	addlw	11
  9992  0F16  0086               	movwf	6
  9993  0F17  0187               	clrf	7
  9994  0F18  0C01               	rrf	1,w
  9995  0F19  1C03               	skipc
  9996  0F1A  108E               	bcf	14,1	;volatile
  9997  0F1B  1803               	skipnc
  9998  0F1C  148E               	bsf	14,1	;volatile
  9999                           
 10000                           ;mcu_drv.c: 179: WPUCbits.WPUC2 = WpuCh->WpuC2;
 10001  0F1D  0874               	movf	Mcu_ConfigPullUps@WpuCh,w
 10002  0F1E  3E0C               	addlw	12
 10003  0F1F  0086               	movwf	6
 10004  0F20  0187               	clrf	7
 10005  0F21  0C01               	rrf	1,w
 10006  0F22  1C03               	skipc
 10007  0F23  110E               	bcf	14,2	;volatile
 10008  0F24  1803               	skipnc
 10009  0F25  150E               	bsf	14,2	;volatile
 10010                           
 10011                           ;mcu_drv.c: 180: WPUCbits.WPUC3 = WpuCh->WpuC3;
 10012  0F26  0874               	movf	Mcu_ConfigPullUps@WpuCh,w
 10013  0F27  3E0D               	addlw	13
 10014  0F28  0086               	movwf	6
 10015  0F29  0187               	clrf	7
 10016  0F2A  0C01               	rrf	1,w
 10017  0F2B  1C03               	skipc
 10018  0F2C  118E               	bcf	14,3	;volatile
 10019  0F2D  1803               	skipnc
 10020  0F2E  158E               	bsf	14,3	;volatile
 10021                           
 10022                           ;mcu_drv.c: 181: WPUCbits.WPUC4 = WpuCh->WpuC4;
 10023  0F2F  0874               	movf	Mcu_ConfigPullUps@WpuCh,w
 10024  0F30  3E0E               	addlw	14
 10025  0F31  0086               	movwf	6
 10026  0F32  0187               	clrf	7
 10027  0F33  0C01               	rrf	1,w
 10028  0F34  1C03               	skipc
 10029  0F35  120E               	bcf	14,4	;volatile
 10030  0F36  1803               	skipnc
 10031  0F37  160E               	bsf	14,4	;volatile
 10032                           
 10033                           ;mcu_drv.c: 182: WPUCbits.WPUC5 = WpuCh->WpuC5;
 10034  0F38  0874               	movf	Mcu_ConfigPullUps@WpuCh,w
 10035  0F39  3E0F               	addlw	15
 10036  0F3A  0086               	movwf	6
 10037  0F3B  0187               	clrf	7
 10038  0F3C  0C01               	rrf	1,w
 10039  0F3D  1C03               	skipc
 10040  0F3E  128E               	bcf	14,5	;volatile
 10041  0F3F  1803               	skipnc
 10042  0F40  168E               	bsf	14,5	;volatile
 10043                           
 10044                           ;mcu_drv.c: 184: WPUCbits.WPUC6 = WpuCh->WpuC6;
 10045  0F41  0874               	movf	Mcu_ConfigPullUps@WpuCh,w
 10046  0F42  3E10               	addlw	16
 10047  0F43  0086               	movwf	6
 10048  0F44  0187               	clrf	7
 10049  0F45  0C01               	rrf	1,w
 10050  0F46  1C03               	skipc
 10051  0F47  130E               	bcf	14,6	;volatile
 10052  0F48  1803               	skipnc
 10053  0F49  170E               	bsf	14,6	;volatile
 10054                           
 10055                           ;mcu_drv.c: 185: WPUCbits.WPUC7 = WpuCh->WpuC7;
 10056  0F4A  0874               	movf	Mcu_ConfigPullUps@WpuCh,w
 10057  0F4B  3E11               	addlw	17
 10058  0F4C  0086               	movwf	6
 10059  0F4D  0187               	clrf	7
 10060  0F4E  0C01               	rrf	1,w
 10061  0F4F  1C03               	skipc
 10062  0F50  138E               	bcf	14,7	;volatile
 10063  0F51  1803               	skipnc
 10064  0F52  178E               	bsf	14,7	;volatile
 10065  0F53  0008               	return
 10066  0F54                     __end_of_Mcu_ConfigPullUps:	
 10067                           
 10068                           	psect	text40
 10069  0885                     __ptext40:	
 10070 ;; *************** function _AppSm *****************
 10071 ;; Defined at:
 10072 ;;		line 284 in file "../Source/c/04_App/sb120_app.c"
 10073 ;; Parameters:    Size  Location     Type
 10074 ;;		None
 10075 ;; Auto vars:     Size  Location     Type
 10076 ;;		None
 10077 ;; Return value:  Size  Location     Type
 10078 ;;                  1    wreg      void 
 10079 ;; Registers used:
 10080 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10081 ;; Tracked objects:
 10082 ;;		On entry : 0/0
 10083 ;;		On exit  : 0/0
 10084 ;;		Unchanged: 0/0
 10085 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10086 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10087 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10088 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10089 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10090 ;;Total ram usage:        1 bytes
 10091 ;; Hardware stack levels used:    1
 10092 ;; Hardware stack levels required when called:    6
 10093 ;; This function calls:
 10094 ;;		_GenerateEvt
 10095 ;;		_ManageProtocol
 10096 ;;		_StdS_SetI2cAddress
 10097 ;; This function is called by:
 10098 ;;		_App_MainTask
 10099 ;; This function uses a non-reentrant model
 10100 ;;
 10101                           
 10102                           
 10103                           ;psect for function _AppSm
 10104  0885                     _AppSm:	
 10105                           
 10106                           ;sb120_app.c: 286: static AppStateType AppState = WaitWpuSetState;
 10107                           ;sb120_app.c: 287: static UINT8 WpuSetCounter = 0;
 10108                           ;sb120_app.c: 289: switch (AppState)
 10109                           
 10110                           ;incstack = 0
 10111                           ; Regs used in _AppSm: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 10112  0885  28A3               	goto	l5075
 10113  0886                     l5059:	
 10114                           ;sb120_app.c: 290: {
 10115                           ;sb120_app.c: 291: case WaitWpuSetState:
 10116                           
 10117                           
 10118                           ;sb120_app.c: 293: WpuSetCounter++;
 10119  0886  3001               	movlw	1
 10120  0887  0020               	movlb	0	; select bank0
 10121  0888  00C1               	movwf	??_AppSm
 10122  0889  0841               	movf	??_AppSm,w
 10123  088A  0021               	movlb	1	; select bank1
 10124  088B  07C1               	addwf	AppSm@WpuSetCounter^(0+128),f
 10125                           
 10126                           ;sb120_app.c: 295: if (WpuSetCounter >= ((UINT16)(100)/((UINT16)(10))))
 10127  088C  300A               	movlw	10
 10128  088D  0241               	subwf	AppSm@WpuSetCounter^(0+128),w
 10129  088E  1C03               	skipc
 10130  088F  0008               	return
 10131                           
 10132                           ;sb120_app.c: 296: {
 10133                           ;sb120_app.c: 298: StdS_SetI2cAddress();
 10134  0890  3189  213B         	fcall	_StdS_SetI2cAddress
 10135                           
 10136                           ;sb120_app.c: 300: AppState = SendI2cAddrState;
 10137  0892  0021               	movlb	1	; select bank1
 10138  0893  01C0               	clrf	AppSm@AppState^(0+128)
 10139  0894  0AC0               	incf	AppSm@AppState^(0+128),f
 10140                           
 10141                           ;sb120_app.c: 301: }
 10142                           ;sb120_app.c: 302: break;
 10143  0895  0008               	return
 10144  0896                     l5067:	
 10145                           ;sb120_app.c: 304: case SendI2cAddrState:
 10146                           
 10147                           
 10148                           ;sb120_app.c: 306: GenerateEvt(&I2cSetAddress);
 10149  0896  30E6               	movlw	(low (_I2cSetAddress| 0))& (0+255)
 10150  0897  3197  27DE         	fcall	_GenerateEvt
 10151                           
 10152                           ;sb120_app.c: 308: AppState = ManageProtocolState;
 10153  0899  3002               	movlw	2
 10154  089A  0020               	movlb	0	; select bank0
 10155  089B  00C1               	movwf	??_AppSm
 10156  089C  0841               	movf	??_AppSm,w
 10157  089D  0021               	movlb	1	; select bank1
 10158  089E  00C0               	movwf	AppSm@AppState^(0+128)
 10159                           
 10160                           ;sb120_app.c: 309: break;
 10161  089F  0008               	return
 10162  08A0                     l5071:	
 10163                           ;sb120_app.c: 311: case ManageProtocolState:
 10164                           
 10165                           
 10166                           ;sb120_app.c: 313: ManageProtocol();
 10167  08A0  3180  209B         	fcall	_ManageProtocol
 10168                           
 10169                           ;sb120_app.c: 318: }
 10170                           
 10171                           ;sb120_app.c: 317: break;
 10172                           
 10173                           ;sb120_app.c: 316: default:
 10174                           
 10175                           ;sb120_app.c: 314: break;
 10176  08A2  0008               	return
 10177  08A3                     l5075:	
 10178  08A3  0021               	movlb	1	; select bank1
 10179  08A4  0840               	movf	AppSm@AppState^(0+128),w
 10180                           
 10181                           ; Switch size 1, requested type "space"
 10182                           ; Number of cases is 3, Range of values is 0 to 2
 10183                           ; switch strategies available:
 10184                           ; Name         Instructions Cycles
 10185                           ; simple_byte           10     6 (average)
 10186                           ; direct_byte           12     6 (fixed)
 10187                           ; jumptable            260     6 (fixed)
 10188                           ;	Chosen strategy is simple_byte
 10189  08A5  3A00               	xorlw	0	; case 0
 10190  08A6  1903               	skipnz
 10191  08A7  2886               	goto	l5059
 10192  08A8  3A01               	xorlw	1	; case 1
 10193  08A9  1903               	skipnz
 10194  08AA  2896               	goto	l5067
 10195  08AB  3A03               	xorlw	3	; case 2
 10196  08AC  1903               	skipnz
 10197  08AD  28A0               	goto	l5071
 10198  08AE  28AF               	goto	l940
 10199  08AF                     l940:	
 10200  08AF  0008               	return
 10201  08B0                     __end_of_AppSm:	
 10202                           
 10203                           	psect	text41
 10204  093B                     __ptext41:	
 10205 ;; *************** function _StdS_SetI2cAddress *****************
 10206 ;; Defined at:
 10207 ;;		line 317 in file "../../../Framework/MercuryFwk/Source/c/03_Sml/02_Ssl/std_ser.c"
 10208 ;; Parameters:    Size  Location     Type
 10209 ;;		None
 10210 ;; Auto vars:     Size  Location     Type
 10211 ;;		None
 10212 ;; Return value:  Size  Location     Type
 10213 ;;                  1    wreg      void 
 10214 ;; Registers used:
 10215 ;;		wreg, status,2, status,0
 10216 ;; Tracked objects:
 10217 ;;		On entry : 0/0
 10218 ;;		On exit  : 0/0
 10219 ;;		Unchanged: 0/0
 10220 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10221 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10222 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10223 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10224 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10225 ;;Total ram usage:        2 bytes
 10226 ;; Hardware stack levels used:    1
 10227 ;; Hardware stack levels required when called:    2
 10228 ;; This function calls:
 10229 ;;		Nothing
 10230 ;; This function is called by:
 10231 ;;		_AppSm
 10232 ;; This function uses a non-reentrant model
 10233 ;;
 10234                           
 10235                           
 10236                           ;psect for function _StdS_SetI2cAddress
 10237  093B                     _StdS_SetI2cAddress:	
 10238                           
 10239                           ;std_ser.c: 321: I2cSlaveAddress |= (!PORTCbits.RC5 << 3);
 10240                           
 10241                           ;incstack = 0
 10242                           ; Regs used in _StdS_SetI2cAddress: [wreg+status,2+status,0]
 10243  093B  1003               	clrc
 10244  093C  0020               	movlb	0	; select bank0
 10245  093D  1E8E               	btfss	14,5	;volatile
 10246  093E  1403               	setc
 10247  093F  3000               	movlw	0
 10248  0940  3D09               	addwfc	9,w
 10249  0941  00F4               	movwf	??_StdS_SetI2cAddress
 10250  0942  3002               	movlw	2
 10251  0943                     u4265:	
 10252  0943  35F4               	lslf	??_StdS_SetI2cAddress,f
 10253  0944  3EFF               	addlw	-1
 10254  0945  1D03               	skipz
 10255  0946  2943               	goto	u4265
 10256  0947  3574               	lslf	??_StdS_SetI2cAddress,w
 10257  0948  00F5               	movwf	??_StdS_SetI2cAddress+1
 10258  0949  0875               	movf	??_StdS_SetI2cAddress+1,w
 10259  094A  04F8               	iorwf	_I2cSlaveAddress,f
 10260                           
 10261                           ;std_ser.c: 322: I2cSlaveAddress |= (!PORTCbits.RC4 << 2);
 10262  094B  1003               	clrc
 10263  094C  1E0E               	btfss	14,4	;volatile
 10264  094D  1403               	setc
 10265  094E  3000               	movlw	0
 10266  094F  3D09               	addwfc	9,w
 10267  0950  00F4               	movwf	??_StdS_SetI2cAddress
 10268  0951  3001               	movlw	1
 10269  0952                     u4275:	
 10270  0952  35F4               	lslf	??_StdS_SetI2cAddress,f
 10271  0953  3EFF               	addlw	-1
 10272  0954  1D03               	skipz
 10273  0955  2952               	goto	u4275
 10274  0956  3574               	lslf	??_StdS_SetI2cAddress,w
 10275  0957  00F5               	movwf	??_StdS_SetI2cAddress+1
 10276  0958  0875               	movf	??_StdS_SetI2cAddress+1,w
 10277  0959  04F8               	iorwf	_I2cSlaveAddress,f
 10278                           
 10279                           ;std_ser.c: 323: I2cSlaveAddress |= (!PORTCbits.RC3 << 1);
 10280  095A  1003               	clrc
 10281  095B  1D8E               	btfss	14,3	;volatile
 10282  095C  1403               	setc
 10283  095D  3000               	movlw	0
 10284  095E  3D09               	addwfc	9,w
 10285  095F  0709               	addwf	9,w
 10286  0960  00F4               	movwf	??_StdS_SetI2cAddress
 10287  0961  0874               	movf	??_StdS_SetI2cAddress,w
 10288  0962  04F8               	iorwf	_I2cSlaveAddress,f
 10289                           
 10290                           ;std_ser.c: 324: I2cSlaveAddress |= (!PORTCbits.RC6 << 0);
 10291  0963  1003               	clrc
 10292  0964  1F0E               	btfss	14,6	;volatile
 10293  0965  1403               	setc
 10294  0966  3000               	movlw	0
 10295  0967  3D09               	addwfc	9,w
 10296  0968  00F4               	movwf	??_StdS_SetI2cAddress
 10297  0969  0874               	movf	??_StdS_SetI2cAddress,w
 10298  096A  04F8               	iorwf	_I2cSlaveAddress,f
 10299  096B  0008               	return
 10300  096C                     __end_of_StdS_SetI2cAddress:	
 10301                           
 10302                           	psect	text42
 10303  009B                     __ptext42:	
 10304 ;; *************** function _ManageProtocol *****************
 10305 ;; Defined at:
 10306 ;;		line 121 in file "../Source/c/04_App/sb120_app.c"
 10307 ;; Parameters:    Size  Location     Type
 10308 ;;		None
 10309 ;; Auto vars:     Size  Location     Type
 10310 ;;  PixelIndex      1    0        unsigned char 
 10311 ;; Return value:  Size  Location     Type
 10312 ;;                  1    wreg      void 
 10313 ;; Registers used:
 10314 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10315 ;; Tracked objects:
 10316 ;;		On entry : 0/0
 10317 ;;		On exit  : 0/0
 10318 ;;		Unchanged: 0/0
 10319 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10320 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10321 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10322 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10323 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10324 ;;Total ram usage:        3 bytes
 10325 ;; Hardware stack levels used:    1
 10326 ;; Hardware stack levels required when called:    5
 10327 ;; This function calls:
 10328 ;;		_Npdrv_Ch1_WriteNeopixelColor
 10329 ;;		_Npdrv_Ch2_WriteNeopixelColor
 10330 ;;		_Npdrv_Ch3_WriteNeopixelColor
 10331 ;;		_ReceiveEvt
 10332 ;;		_StdS_ManageStdServices
 10333 ;; This function is called by:
 10334 ;;		_AppSm
 10335 ;; This function uses a non-reentrant model
 10336 ;;
 10337                           
 10338                           
 10339                           ;psect for function _ManageProtocol
 10340  009B                     _ManageProtocol:	
 10341                           
 10342                           ;sb120_app.c: 123: UINT8 PixelIndex;
 10343                           ;sb120_app.c: 126: if (ReceiveEvt(&I2cWriteRequest))
 10344                           
 10345                           ;incstack = 0
 10346                           ; Regs used in _ManageProtocol: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 10347  009B  30E8               	movlw	(low (_I2cWriteRequest| 0))& (0+255)
 10348  009C  3197  27BD  3180   	fcall	_ReceiveEvt
 10349  009F  3A00               	xorlw	0
 10350  00A0  1903               	skipnz
 10351  00A1  0008               	return
 10352                           
 10353                           ;sb120_app.c: 127: {
 10354                           ;sb120_app.c: 129: StdS_ManageStdServices();
 10355  00A2  3182  2223  3180   	fcall	_StdS_ManageStdServices
 10356                           
 10357                           ;sb120_app.c: 131: switch (CmdBuffer[((UINT8)(0))])
 10358  00A5  2A14               	goto	l4773
 10359  00A6                     l4711:	
 10360                           ;sb120_app.c: 132: {
 10361                           ;sb120_app.c: 134: case ((UINT8)(0x50)):
 10362                           
 10363                           
 10364                           ;sb120_app.c: 136: if (CmdBuffer[((UINT8)(1))] == ((UINT8)(1)))
 10365  00A6  0023               	movlb	3	; select bank3
 10366  00A7  0321               	decf	(_CmdBuffer^(0+384)+1),w
 10367  00A8  1D03               	btfss	3,2
 10368  00A9  28E2               	goto	l4719
 10369                           
 10370                           ;sb120_app.c: 137: {
 10371                           ;sb120_app.c: 139: Npdrv_Ch1_WriteNeopixelColor(NeopixelChannels[((UINT8)(0))].NpxCh_Pix
      +                          elNumber
 10372                           ;sb120_app.c: 140: ,NeopixelChannels[((UINT8)(0))].NpxCh_PixelGreen
 10373                           ;sb120_app.c: 141: ,NeopixelChannels[((UINT8)(0))].NpxCh_PixelRed
 10374                           ;sb120_app.c: 142: ,NeopixelChannels[((UINT8)(0))].NpxCh_PixelBlue);
 10375  00AA  0021               	movlb	1	; select bank1
 10376  00AB  082D               	movf	(_NeopixelChannels^(0+128)+1),w
 10377  00AC  0020               	movlb	0	; select bank0
 10378  00AD  00BE               	movwf	??_ManageProtocol
 10379  00AE  083E               	movf	??_ManageProtocol,w
 10380  00AF  00A0               	movwf	Npdrv_Ch1_WriteNeopixelColor@Green
 10381  00B0  0021               	movlb	1	; select bank1
 10382  00B1  082E               	movf	(_NeopixelChannels^(0+128)+2),w
 10383  00B2  0020               	movlb	0	; select bank0
 10384  00B3  00BF               	movwf	??_ManageProtocol+1
 10385  00B4  083F               	movf	??_ManageProtocol+1,w
 10386  00B5  00A1               	movwf	Npdrv_Ch1_WriteNeopixelColor@Red
 10387  00B6  0021               	movlb	1	; select bank1
 10388  00B7  082F               	movf	(_NeopixelChannels^(0+128)+3),w
 10389  00B8  0020               	movlb	0	; select bank0
 10390  00B9  00C0               	movwf	??_ManageProtocol+2
 10391  00BA  0840               	movf	??_ManageProtocol+2,w
 10392  00BB  00A2               	movwf	Npdrv_Ch1_WriteNeopixelColor@Blue
 10393  00BC  0021               	movlb	1	; select bank1
 10394  00BD  082C               	movf	_NeopixelChannels^(0+128),w
 10395  00BE  3183  23FF  3180   	fcall	_Npdrv_Ch1_WriteNeopixelColor
 10396                           
 10397                           ;sb120_app.c: 145: _delay((unsigned long)((((UINT8)(10)))*(((UINT32)(32000000))/4000.0))
      +                          );
 10398  00C1  3068               	movlw	104
 10399  00C2  0020               	movlb	0	; select bank0
 10400  00C3  00BF               	movwf	??_ManageProtocol+1
 10401  00C4  30E4               	movlw	228
 10402  00C5  00BE               	movwf	??_ManageProtocol
 10403  00C6                     u5057:	
 10404  00C6  0BBE               	decfsz	??_ManageProtocol,f
 10405  00C7  28C6               	goto	u5057
 10406  00C8  0BBF               	decfsz	??_ManageProtocol+1,f
 10407  00C9  28C6               	goto	u5057
 10408  00CA  0000               	nop
 10409                           
 10410                           ;sb120_app.c: 146: Npdrv_Ch1_WriteNeopixelColor(NeopixelChannels[((UINT8)(0))].NpxCh_Pix
      +                          elNumber
 10411                           ;sb120_app.c: 147: ,NeopixelChannels[((UINT8)(0))].NpxCh_PixelGreen
 10412                           ;sb120_app.c: 148: ,NeopixelChannels[((UINT8)(0))].NpxCh_PixelRed
 10413                           ;sb120_app.c: 149: ,NeopixelChannels[((UINT8)(0))].NpxCh_PixelBlue);
 10414  00CB  0021               	movlb	1	; select bank1
 10415  00CC  082D               	movf	(_NeopixelChannels^(0+128)+1),w
 10416  00CD  0020               	movlb	0	; select bank0
 10417  00CE  00BE               	movwf	??_ManageProtocol
 10418  00CF  083E               	movf	??_ManageProtocol,w
 10419  00D0  00A0               	movwf	Npdrv_Ch1_WriteNeopixelColor@Green
 10420  00D1  0021               	movlb	1	; select bank1
 10421  00D2  082E               	movf	(_NeopixelChannels^(0+128)+2),w
 10422  00D3  0020               	movlb	0	; select bank0
 10423  00D4  00BF               	movwf	??_ManageProtocol+1
 10424  00D5  083F               	movf	??_ManageProtocol+1,w
 10425  00D6  00A1               	movwf	Npdrv_Ch1_WriteNeopixelColor@Red
 10426  00D7  0021               	movlb	1	; select bank1
 10427  00D8  082F               	movf	(_NeopixelChannels^(0+128)+3),w
 10428  00D9  0020               	movlb	0	; select bank0
 10429  00DA  00C0               	movwf	??_ManageProtocol+2
 10430  00DB  0840               	movf	??_ManageProtocol+2,w
 10431  00DC  00A2               	movwf	Npdrv_Ch1_WriteNeopixelColor@Blue
 10432  00DD  0021               	movlb	1	; select bank1
 10433  00DE  082C               	movf	_NeopixelChannels^(0+128),w
 10434  00DF  3183  23FF         	fcall	_Npdrv_Ch1_WriteNeopixelColor
 10435                           
 10436                           ;sb120_app.c: 151: }
 10437  00E1  0008               	return
 10438  00E2                     l4719:	
 10439                           
 10440                           ;sb120_app.c: 152: else if (CmdBuffer[((UINT8)(1))] == ((UINT8)(0)))
 10441  00E2  0023               	movlb	3	; select bank3
 10442  00E3  0821               	movf	(_CmdBuffer^(0+384)+1),w
 10443  00E4  1D03               	btfss	3,2
 10444  00E5  0008               	return
 10445                           
 10446                           ;sb120_app.c: 153: {
 10447                           ;sb120_app.c: 155: Npdrv_Ch1_WriteNeopixelColor(NeopixelChannels[((UINT8)(0))].NpxCh_Pix
      +                          elNumber,0,0,0);
 10448  00E6  0020               	movlb	0	; select bank0
 10449  00E7  01A0               	clrf	Npdrv_Ch1_WriteNeopixelColor@Green
 10450  00E8  01A1               	clrf	Npdrv_Ch1_WriteNeopixelColor@Red
 10451  00E9  01A2               	clrf	Npdrv_Ch1_WriteNeopixelColor@Blue
 10452  00EA  0021               	movlb	1	; select bank1
 10453  00EB  082C               	movf	_NeopixelChannels^(0+128),w
 10454  00EC  3183  23FF  3180   	fcall	_Npdrv_Ch1_WriteNeopixelColor
 10455                           
 10456                           ;sb120_app.c: 157: _delay((unsigned long)((((UINT8)(10)))*(((UINT32)(32000000))/4000.0))
      +                          );
 10457  00EF  3068               	movlw	104
 10458  00F0  0020               	movlb	0	; select bank0
 10459  00F1  00BF               	movwf	??_ManageProtocol+1
 10460  00F2  30E4               	movlw	228
 10461  00F3  00BE               	movwf	??_ManageProtocol
 10462  00F4                     u5067:	
 10463  00F4  0BBE               	decfsz	??_ManageProtocol,f
 10464  00F5  28F4               	goto	u5067
 10465  00F6  0BBF               	decfsz	??_ManageProtocol+1,f
 10466  00F7  28F4               	goto	u5067
 10467  00F8  0000               	nop
 10468                           
 10469                           ;sb120_app.c: 158: Npdrv_Ch1_WriteNeopixelColor(NeopixelChannels[((UINT8)(0))].NpxCh_Pix
      +                          elNumber,0,0,0);
 10470  00F9  0020               	movlb	0	; select bank0
 10471  00FA  01A0               	clrf	Npdrv_Ch1_WriteNeopixelColor@Green
 10472  00FB  01A1               	clrf	Npdrv_Ch1_WriteNeopixelColor@Red
 10473  00FC  01A2               	clrf	Npdrv_Ch1_WriteNeopixelColor@Blue
 10474  00FD  0021               	movlb	1	; select bank1
 10475  00FE  082C               	movf	_NeopixelChannels^(0+128),w
 10476  00FF  3183  23FF         	fcall	_Npdrv_Ch1_WriteNeopixelColor
 10477                           
 10478                           ;sb120_app.c: 164: }
 10479                           ;sb120_app.c: 165: break;
 10480                           
 10481                           ;sb120_app.c: 161: else
 10482                           ;sb120_app.c: 162: {
 10483                           
 10484                           ;sb120_app.c: 160: }
 10485  0101  0008               	return
 10486  0102                     l4727:	
 10487                           ;sb120_app.c: 167: case ((UINT8)(0x51)):
 10488                           
 10489                           
 10490                           ;sb120_app.c: 169: NeopixelChannels[((UINT8)(0))].NpxCh_PixelGreen = CmdBuffer[((UINT8)(
      +                          1))];
 10491  0102  0023               	movlb	3	; select bank3
 10492  0103  0821               	movf	(_CmdBuffer^(0+384)+1),w
 10493  0104  0020               	movlb	0	; select bank0
 10494  0105  00BE               	movwf	??_ManageProtocol
 10495  0106  083E               	movf	??_ManageProtocol,w
 10496  0107  0021               	movlb	1	; select bank1
 10497  0108  00AD               	movwf	(_NeopixelChannels^(0+128)+1)
 10498                           
 10499                           ;sb120_app.c: 170: NeopixelChannels[((UINT8)(0))].NpxCh_PixelRed = CmdBuffer[((UINT8)(2)
      +                          )];
 10500  0109  0023               	movlb	3	; select bank3
 10501  010A  0822               	movf	(_CmdBuffer^(0+384)+2),w
 10502  010B  0020               	movlb	0	; select bank0
 10503  010C  00BE               	movwf	??_ManageProtocol
 10504  010D  083E               	movf	??_ManageProtocol,w
 10505  010E  0021               	movlb	1	; select bank1
 10506  010F  00AE               	movwf	(_NeopixelChannels^(0+128)+2)
 10507                           
 10508                           ;sb120_app.c: 171: NeopixelChannels[((UINT8)(0))].NpxCh_PixelBlue = CmdBuffer[((UINT8)(3
      +                          ))];
 10509  0110  0023               	movlb	3	; select bank3
 10510  0111  0823               	movf	(_CmdBuffer^(0+384)+3),w
 10511  0112  0020               	movlb	0	; select bank0
 10512  0113  00BE               	movwf	??_ManageProtocol
 10513  0114  083E               	movf	??_ManageProtocol,w
 10514  0115  0021               	movlb	1	; select bank1
 10515  0116  00AF               	movwf	(_NeopixelChannels^(0+128)+3)
 10516                           
 10517                           ;sb120_app.c: 172: break;
 10518  0117  0008               	return
 10519  0118                     l4729:	
 10520                           ;sb120_app.c: 174: case ((UINT8)(0x52)):
 10521                           
 10522                           
 10523                           ;sb120_app.c: 176: NeopixelChannels[((UINT8)(0))].NpxCh_PixelNumber = CmdBuffer[((UINT8)
      +                          (1))];
 10524  0118  0023               	movlb	3	; select bank3
 10525  0119  0821               	movf	(_CmdBuffer^(0+384)+1),w
 10526  011A  0020               	movlb	0	; select bank0
 10527  011B  00BE               	movwf	??_ManageProtocol
 10528  011C  083E               	movf	??_ManageProtocol,w
 10529  011D  0021               	movlb	1	; select bank1
 10530  011E  00AC               	movwf	_NeopixelChannels^(0+128)
 10531                           
 10532                           ;sb120_app.c: 177: break;
 10533  011F  0008               	return
 10534  0120                     l4731:	
 10535                           ;sb120_app.c: 180: case ((UINT8)(0x53)):
 10536                           
 10537                           
 10538                           ;sb120_app.c: 183: if (CmdBuffer[((UINT8)(1))] == ((UINT8)(1)))
 10539  0120  0023               	movlb	3	; select bank3
 10540  0121  0321               	decf	(_CmdBuffer^(0+384)+1),w
 10541  0122  1D03               	btfss	3,2
 10542  0123  295C               	goto	l4739
 10543                           
 10544                           ;sb120_app.c: 184: {
 10545                           ;sb120_app.c: 186: Npdrv_Ch2_WriteNeopixelColor(NeopixelChannels[((UINT8)(1))].NpxCh_Pix
      +                          elNumber
 10546                           ;sb120_app.c: 187: ,NeopixelChannels[((UINT8)(1))].NpxCh_PixelGreen
 10547                           ;sb120_app.c: 188: ,NeopixelChannels[((UINT8)(1))].NpxCh_PixelRed
 10548                           ;sb120_app.c: 189: ,NeopixelChannels[((UINT8)(1))].NpxCh_PixelBlue);
 10549  0124  0021               	movlb	1	; select bank1
 10550  0125  0831               	movf	(_NeopixelChannels^(0+128)+5),w
 10551  0126  0020               	movlb	0	; select bank0
 10552  0127  00BE               	movwf	??_ManageProtocol
 10553  0128  083E               	movf	??_ManageProtocol,w
 10554  0129  00A0               	movwf	Npdrv_Ch2_WriteNeopixelColor@Green
 10555  012A  0021               	movlb	1	; select bank1
 10556  012B  0832               	movf	(_NeopixelChannels^(0+128)+6),w
 10557  012C  0020               	movlb	0	; select bank0
 10558  012D  00BF               	movwf	??_ManageProtocol+1
 10559  012E  083F               	movf	??_ManageProtocol+1,w
 10560  012F  00A1               	movwf	Npdrv_Ch2_WriteNeopixelColor@Red
 10561  0130  0021               	movlb	1	; select bank1
 10562  0131  0833               	movf	(_NeopixelChannels^(0+128)+7),w
 10563  0132  0020               	movlb	0	; select bank0
 10564  0133  00C0               	movwf	??_ManageProtocol+2
 10565  0134  0840               	movf	??_ManageProtocol+2,w
 10566  0135  00A2               	movwf	Npdrv_Ch2_WriteNeopixelColor@Blue
 10567  0136  0021               	movlb	1	; select bank1
 10568  0137  0830               	movf	(_NeopixelChannels^(0+128)+4),w
 10569  0138  3185  25AC  3180   	fcall	_Npdrv_Ch2_WriteNeopixelColor
 10570                           
 10571                           ;sb120_app.c: 191: _delay((unsigned long)((((UINT8)(10)))*(((UINT32)(32000000))/4000.0))
      +                          );
 10572  013B  3068               	movlw	104
 10573  013C  0020               	movlb	0	; select bank0
 10574  013D  00BF               	movwf	??_ManageProtocol+1
 10575  013E  30E4               	movlw	228
 10576  013F  00BE               	movwf	??_ManageProtocol
 10577  0140                     u5077:	
 10578  0140  0BBE               	decfsz	??_ManageProtocol,f
 10579  0141  2940               	goto	u5077
 10580  0142  0BBF               	decfsz	??_ManageProtocol+1,f
 10581  0143  2940               	goto	u5077
 10582  0144  0000               	nop
 10583                           
 10584                           ;sb120_app.c: 192: Npdrv_Ch2_WriteNeopixelColor(NeopixelChannels[((UINT8)(1))].NpxCh_Pix
      +                          elNumber
 10585                           ;sb120_app.c: 193: ,NeopixelChannels[((UINT8)(1))].NpxCh_PixelGreen
 10586                           ;sb120_app.c: 194: ,NeopixelChannels[((UINT8)(1))].NpxCh_PixelRed
 10587                           ;sb120_app.c: 195: ,NeopixelChannels[((UINT8)(1))].NpxCh_PixelBlue);
 10588  0145  0021               	movlb	1	; select bank1
 10589  0146  0831               	movf	(_NeopixelChannels^(0+128)+5),w
 10590  0147  0020               	movlb	0	; select bank0
 10591  0148  00BE               	movwf	??_ManageProtocol
 10592  0149  083E               	movf	??_ManageProtocol,w
 10593  014A  00A0               	movwf	Npdrv_Ch2_WriteNeopixelColor@Green
 10594  014B  0021               	movlb	1	; select bank1
 10595  014C  0832               	movf	(_NeopixelChannels^(0+128)+6),w
 10596  014D  0020               	movlb	0	; select bank0
 10597  014E  00BF               	movwf	??_ManageProtocol+1
 10598  014F  083F               	movf	??_ManageProtocol+1,w
 10599  0150  00A1               	movwf	Npdrv_Ch2_WriteNeopixelColor@Red
 10600  0151  0021               	movlb	1	; select bank1
 10601  0152  0833               	movf	(_NeopixelChannels^(0+128)+7),w
 10602  0153  0020               	movlb	0	; select bank0
 10603  0154  00C0               	movwf	??_ManageProtocol+2
 10604  0155  0840               	movf	??_ManageProtocol+2,w
 10605  0156  00A2               	movwf	Npdrv_Ch2_WriteNeopixelColor@Blue
 10606  0157  0021               	movlb	1	; select bank1
 10607  0158  0830               	movf	(_NeopixelChannels^(0+128)+4),w
 10608  0159  3185  25AC         	fcall	_Npdrv_Ch2_WriteNeopixelColor
 10609                           
 10610                           ;sb120_app.c: 197: }
 10611  015B  0008               	return
 10612  015C                     l4739:	
 10613                           
 10614                           ;sb120_app.c: 198: else if (CmdBuffer[((UINT8)(1))] == ((UINT8)(0)))
 10615  015C  0023               	movlb	3	; select bank3
 10616  015D  0821               	movf	(_CmdBuffer^(0+384)+1),w
 10617  015E  1D03               	btfss	3,2
 10618  015F  0008               	return
 10619                           
 10620                           ;sb120_app.c: 199: {
 10621                           ;sb120_app.c: 201: Npdrv_Ch1_WriteNeopixelColor(NeopixelChannels[((UINT8)(1))].NpxCh_Pix
      +                          elNumber,0,0,0);
 10622  0160  0020               	movlb	0	; select bank0
 10623  0161  01A0               	clrf	Npdrv_Ch1_WriteNeopixelColor@Green
 10624  0162  01A1               	clrf	Npdrv_Ch1_WriteNeopixelColor@Red
 10625  0163  01A2               	clrf	Npdrv_Ch1_WriteNeopixelColor@Blue
 10626  0164  0021               	movlb	1	; select bank1
 10627  0165  0830               	movf	(_NeopixelChannels^(0+128)+4),w
 10628  0166  3183  23FF  3180   	fcall	_Npdrv_Ch1_WriteNeopixelColor
 10629                           
 10630                           ;sb120_app.c: 203: _delay((unsigned long)((((UINT8)(10)))*(((UINT32)(32000000))/4000.0))
      +                          );
 10631  0169  3068               	movlw	104
 10632  016A  0020               	movlb	0	; select bank0
 10633  016B  00BF               	movwf	??_ManageProtocol+1
 10634  016C  30E4               	movlw	228
 10635  016D  00BE               	movwf	??_ManageProtocol
 10636  016E                     u5087:	
 10637  016E  0BBE               	decfsz	??_ManageProtocol,f
 10638  016F  296E               	goto	u5087
 10639  0170  0BBF               	decfsz	??_ManageProtocol+1,f
 10640  0171  296E               	goto	u5087
 10641  0172  0000               	nop
 10642                           
 10643                           ;sb120_app.c: 204: Npdrv_Ch1_WriteNeopixelColor(NeopixelChannels[((UINT8)(1))].NpxCh_Pix
      +                          elNumber,0,0,0);
 10644  0173  0020               	movlb	0	; select bank0
 10645  0174  01A0               	clrf	Npdrv_Ch1_WriteNeopixelColor@Green
 10646  0175  01A1               	clrf	Npdrv_Ch1_WriteNeopixelColor@Red
 10647  0176  01A2               	clrf	Npdrv_Ch1_WriteNeopixelColor@Blue
 10648  0177  0021               	movlb	1	; select bank1
 10649  0178  0830               	movf	(_NeopixelChannels^(0+128)+4),w
 10650  0179  3183  23FF         	fcall	_Npdrv_Ch1_WriteNeopixelColor
 10651                           
 10652                           ;sb120_app.c: 210: }
 10653                           ;sb120_app.c: 211: break;
 10654                           
 10655                           ;sb120_app.c: 207: else
 10656                           ;sb120_app.c: 208: {
 10657                           
 10658                           ;sb120_app.c: 206: }
 10659  017B  0008               	return
 10660  017C                     l4747:	
 10661                           ;sb120_app.c: 213: case ((UINT8)(0x54)):
 10662                           
 10663                           
 10664                           ;sb120_app.c: 215: NeopixelChannels[((UINT8)(1))].NpxCh_PixelGreen = CmdBuffer[((UINT8)(
      +                          1))];
 10665  017C  0023               	movlb	3	; select bank3
 10666  017D  0821               	movf	(_CmdBuffer^(0+384)+1),w
 10667  017E  0020               	movlb	0	; select bank0
 10668  017F  00BE               	movwf	??_ManageProtocol
 10669  0180  083E               	movf	??_ManageProtocol,w
 10670  0181  0021               	movlb	1	; select bank1
 10671  0182  00B1               	movwf	(_NeopixelChannels^(0+128)+5)
 10672                           
 10673                           ;sb120_app.c: 216: NeopixelChannels[((UINT8)(1))].NpxCh_PixelRed = CmdBuffer[((UINT8)(2)
      +                          )];
 10674  0183  0023               	movlb	3	; select bank3
 10675  0184  0822               	movf	(_CmdBuffer^(0+384)+2),w
 10676  0185  0020               	movlb	0	; select bank0
 10677  0186  00BE               	movwf	??_ManageProtocol
 10678  0187  083E               	movf	??_ManageProtocol,w
 10679  0188  0021               	movlb	1	; select bank1
 10680  0189  00B2               	movwf	(_NeopixelChannels^(0+128)+6)
 10681                           
 10682                           ;sb120_app.c: 217: NeopixelChannels[((UINT8)(1))].NpxCh_PixelBlue = CmdBuffer[((UINT8)(3
      +                          ))];
 10683  018A  0023               	movlb	3	; select bank3
 10684  018B  0823               	movf	(_CmdBuffer^(0+384)+3),w
 10685  018C  0020               	movlb	0	; select bank0
 10686  018D  00BE               	movwf	??_ManageProtocol
 10687  018E  083E               	movf	??_ManageProtocol,w
 10688  018F  0021               	movlb	1	; select bank1
 10689  0190  00B3               	movwf	(_NeopixelChannels^(0+128)+7)
 10690                           
 10691                           ;sb120_app.c: 218: break;
 10692  0191  0008               	return
 10693  0192                     l4749:	
 10694                           ;sb120_app.c: 220: case ((UINT8)(0x55)):
 10695                           
 10696                           
 10697                           ;sb120_app.c: 222: NeopixelChannels[((UINT8)(1))].NpxCh_PixelNumber = CmdBuffer[((UINT8)
      +                          (1))];
 10698  0192  0023               	movlb	3	; select bank3
 10699  0193  0821               	movf	(_CmdBuffer^(0+384)+1),w
 10700  0194  0020               	movlb	0	; select bank0
 10701  0195  00BE               	movwf	??_ManageProtocol
 10702  0196  083E               	movf	??_ManageProtocol,w
 10703  0197  0021               	movlb	1	; select bank1
 10704  0198  00B0               	movwf	(_NeopixelChannels^(0+128)+4)
 10705                           
 10706                           ;sb120_app.c: 223: break;
 10707  0199  0008               	return
 10708  019A                     l4751:	
 10709                           ;sb120_app.c: 226: case ((UINT8)(0x56)):
 10710                           
 10711                           
 10712                           ;sb120_app.c: 228: if (CmdBuffer[((UINT8)(1))] == ((UINT8)(1)))
 10713  019A  0023               	movlb	3	; select bank3
 10714  019B  0321               	decf	(_CmdBuffer^(0+384)+1),w
 10715  019C  1D03               	btfss	3,2
 10716  019D  29D6               	goto	l4759
 10717                           
 10718                           ;sb120_app.c: 229: {
 10719                           ;sb120_app.c: 231: Npdrv_Ch3_WriteNeopixelColor(NeopixelChannels[((UINT8)(2))].NpxCh_Pix
      +                          elNumber
 10720                           ;sb120_app.c: 232: ,NeopixelChannels[((UINT8)(2))].NpxCh_PixelGreen
 10721                           ;sb120_app.c: 233: ,NeopixelChannels[((UINT8)(2))].NpxCh_PixelRed
 10722                           ;sb120_app.c: 234: ,NeopixelChannels[((UINT8)(2))].NpxCh_PixelBlue);
 10723  019E  0021               	movlb	1	; select bank1
 10724  019F  0835               	movf	(_NeopixelChannels^(0+128)+9),w
 10725  01A0  0020               	movlb	0	; select bank0
 10726  01A1  00BE               	movwf	??_ManageProtocol
 10727  01A2  083E               	movf	??_ManageProtocol,w
 10728  01A3  00A0               	movwf	Npdrv_Ch3_WriteNeopixelColor@Green
 10729  01A4  0021               	movlb	1	; select bank1
 10730  01A5  0836               	movf	(_NeopixelChannels^(0+128)+10),w
 10731  01A6  0020               	movlb	0	; select bank0
 10732  01A7  00BF               	movwf	??_ManageProtocol+1
 10733  01A8  083F               	movf	??_ManageProtocol+1,w
 10734  01A9  00A1               	movwf	Npdrv_Ch3_WriteNeopixelColor@Red
 10735  01AA  0021               	movlb	1	; select bank1
 10736  01AB  0837               	movf	(_NeopixelChannels^(0+128)+11),w
 10737  01AC  0020               	movlb	0	; select bank0
 10738  01AD  00C0               	movwf	??_ManageProtocol+2
 10739  01AE  0840               	movf	??_ManageProtocol+2,w
 10740  01AF  00A2               	movwf	Npdrv_Ch3_WriteNeopixelColor@Blue
 10741  01B0  0021               	movlb	1	; select bank1
 10742  01B1  0834               	movf	(_NeopixelChannels^(0+128)+8),w
 10743  01B2  3184  24DB  3180   	fcall	_Npdrv_Ch3_WriteNeopixelColor
 10744                           
 10745                           ;sb120_app.c: 236: _delay((unsigned long)((((UINT8)(10)))*(((UINT32)(32000000))/4000.0))
      +                          );
 10746  01B5  3068               	movlw	104
 10747  01B6  0020               	movlb	0	; select bank0
 10748  01B7  00BF               	movwf	??_ManageProtocol+1
 10749  01B8  30E4               	movlw	228
 10750  01B9  00BE               	movwf	??_ManageProtocol
 10751  01BA                     u5097:	
 10752  01BA  0BBE               	decfsz	??_ManageProtocol,f
 10753  01BB  29BA               	goto	u5097
 10754  01BC  0BBF               	decfsz	??_ManageProtocol+1,f
 10755  01BD  29BA               	goto	u5097
 10756  01BE  0000               	nop
 10757                           
 10758                           ;sb120_app.c: 237: Npdrv_Ch3_WriteNeopixelColor(NeopixelChannels[((UINT8)(2))].NpxCh_Pix
      +                          elNumber
 10759                           ;sb120_app.c: 238: ,NeopixelChannels[((UINT8)(2))].NpxCh_PixelGreen
 10760                           ;sb120_app.c: 239: ,NeopixelChannels[((UINT8)(2))].NpxCh_PixelRed
 10761                           ;sb120_app.c: 240: ,NeopixelChannels[((UINT8)(2))].NpxCh_PixelBlue);
 10762  01BF  0021               	movlb	1	; select bank1
 10763  01C0  0835               	movf	(_NeopixelChannels^(0+128)+9),w
 10764  01C1  0020               	movlb	0	; select bank0
 10765  01C2  00BE               	movwf	??_ManageProtocol
 10766  01C3  083E               	movf	??_ManageProtocol,w
 10767  01C4  00A0               	movwf	Npdrv_Ch3_WriteNeopixelColor@Green
 10768  01C5  0021               	movlb	1	; select bank1
 10769  01C6  0836               	movf	(_NeopixelChannels^(0+128)+10),w
 10770  01C7  0020               	movlb	0	; select bank0
 10771  01C8  00BF               	movwf	??_ManageProtocol+1
 10772  01C9  083F               	movf	??_ManageProtocol+1,w
 10773  01CA  00A1               	movwf	Npdrv_Ch3_WriteNeopixelColor@Red
 10774  01CB  0021               	movlb	1	; select bank1
 10775  01CC  0837               	movf	(_NeopixelChannels^(0+128)+11),w
 10776  01CD  0020               	movlb	0	; select bank0
 10777  01CE  00C0               	movwf	??_ManageProtocol+2
 10778  01CF  0840               	movf	??_ManageProtocol+2,w
 10779  01D0  00A2               	movwf	Npdrv_Ch3_WriteNeopixelColor@Blue
 10780  01D1  0021               	movlb	1	; select bank1
 10781  01D2  0834               	movf	(_NeopixelChannels^(0+128)+8),w
 10782  01D3  3184  24DB         	fcall	_Npdrv_Ch3_WriteNeopixelColor
 10783                           
 10784                           ;sb120_app.c: 242: }
 10785  01D5  0008               	return
 10786  01D6                     l4759:	
 10787                           
 10788                           ;sb120_app.c: 243: else if (CmdBuffer[((UINT8)(1))] == ((UINT8)(0)))
 10789  01D6  0023               	movlb	3	; select bank3
 10790  01D7  0821               	movf	(_CmdBuffer^(0+384)+1),w
 10791  01D8  1D03               	btfss	3,2
 10792  01D9  0008               	return
 10793                           
 10794                           ;sb120_app.c: 244: {
 10795                           ;sb120_app.c: 246: Npdrv_Ch1_WriteNeopixelColor(NeopixelChannels[((UINT8)(2))].NpxCh_Pix
      +                          elNumber,0,0,0);
 10796  01DA  0020               	movlb	0	; select bank0
 10797  01DB  01A0               	clrf	Npdrv_Ch1_WriteNeopixelColor@Green
 10798  01DC  01A1               	clrf	Npdrv_Ch1_WriteNeopixelColor@Red
 10799  01DD  01A2               	clrf	Npdrv_Ch1_WriteNeopixelColor@Blue
 10800  01DE  0021               	movlb	1	; select bank1
 10801  01DF  0834               	movf	(_NeopixelChannels^(0+128)+8),w
 10802  01E0  3183  23FF  3180   	fcall	_Npdrv_Ch1_WriteNeopixelColor
 10803                           
 10804                           ;sb120_app.c: 248: _delay((unsigned long)((((UINT8)(10)))*(((UINT32)(32000000))/4000.0))
      +                          );
 10805  01E3  3068               	movlw	104
 10806  01E4  0020               	movlb	0	; select bank0
 10807  01E5  00BF               	movwf	??_ManageProtocol+1
 10808  01E6  30E4               	movlw	228
 10809  01E7  00BE               	movwf	??_ManageProtocol
 10810  01E8                     u5107:	
 10811  01E8  0BBE               	decfsz	??_ManageProtocol,f
 10812  01E9  29E8               	goto	u5107
 10813  01EA  0BBF               	decfsz	??_ManageProtocol+1,f
 10814  01EB  29E8               	goto	u5107
 10815  01EC  0000               	nop
 10816                           
 10817                           ;sb120_app.c: 249: Npdrv_Ch1_WriteNeopixelColor(NeopixelChannels[((UINT8)(2))].NpxCh_Pix
      +                          elNumber,0,0,0);
 10818  01ED  0020               	movlb	0	; select bank0
 10819  01EE  01A0               	clrf	Npdrv_Ch1_WriteNeopixelColor@Green
 10820  01EF  01A1               	clrf	Npdrv_Ch1_WriteNeopixelColor@Red
 10821  01F0  01A2               	clrf	Npdrv_Ch1_WriteNeopixelColor@Blue
 10822  01F1  0021               	movlb	1	; select bank1
 10823  01F2  0834               	movf	(_NeopixelChannels^(0+128)+8),w
 10824  01F3  3183  23FF         	fcall	_Npdrv_Ch1_WriteNeopixelColor
 10825                           
 10826                           ;sb120_app.c: 255: }
 10827                           ;sb120_app.c: 256: break;
 10828                           
 10829                           ;sb120_app.c: 252: else
 10830                           ;sb120_app.c: 253: {
 10831                           
 10832                           ;sb120_app.c: 251: }
 10833  01F5  0008               	return
 10834  01F6                     l4767:	
 10835                           ;sb120_app.c: 258: case ((UINT8)(0x57)):
 10836                           
 10837                           
 10838                           ;sb120_app.c: 260: NeopixelChannels[((UINT8)(2))].NpxCh_PixelGreen = CmdBuffer[((UINT8)(
      +                          1))];
 10839  01F6  0023               	movlb	3	; select bank3
 10840  01F7  0821               	movf	(_CmdBuffer^(0+384)+1),w
 10841  01F8  0020               	movlb	0	; select bank0
 10842  01F9  00BE               	movwf	??_ManageProtocol
 10843  01FA  083E               	movf	??_ManageProtocol,w
 10844  01FB  0021               	movlb	1	; select bank1
 10845  01FC  00B5               	movwf	(_NeopixelChannels^(0+128)+9)
 10846                           
 10847                           ;sb120_app.c: 261: NeopixelChannels[((UINT8)(2))].NpxCh_PixelRed = CmdBuffer[((UINT8)(2)
      +                          )];
 10848  01FD  0023               	movlb	3	; select bank3
 10849  01FE  0822               	movf	(_CmdBuffer^(0+384)+2),w
 10850  01FF  0020               	movlb	0	; select bank0
 10851  0200  00BE               	movwf	??_ManageProtocol
 10852  0201  083E               	movf	??_ManageProtocol,w
 10853  0202  0021               	movlb	1	; select bank1
 10854  0203  00B6               	movwf	(_NeopixelChannels^(0+128)+10)
 10855                           
 10856                           ;sb120_app.c: 262: NeopixelChannels[((UINT8)(2))].NpxCh_PixelBlue = CmdBuffer[((UINT8)(3
      +                          ))];
 10857  0204  0023               	movlb	3	; select bank3
 10858  0205  0823               	movf	(_CmdBuffer^(0+384)+3),w
 10859  0206  0020               	movlb	0	; select bank0
 10860  0207  00BE               	movwf	??_ManageProtocol
 10861  0208  083E               	movf	??_ManageProtocol,w
 10862  0209  0021               	movlb	1	; select bank1
 10863  020A  00B7               	movwf	(_NeopixelChannels^(0+128)+11)
 10864                           
 10865                           ;sb120_app.c: 263: break;
 10866  020B  0008               	return
 10867  020C                     l4769:	
 10868                           ;sb120_app.c: 265: case ((UINT8)(0x58)):
 10869                           
 10870                           
 10871                           ;sb120_app.c: 267: NeopixelChannels[((UINT8)(2))].NpxCh_PixelNumber = CmdBuffer[((UINT8)
      +                          (1))];
 10872  020C  0023               	movlb	3	; select bank3
 10873  020D  0821               	movf	(_CmdBuffer^(0+384)+1),w
 10874  020E  0020               	movlb	0	; select bank0
 10875  020F  00BE               	movwf	??_ManageProtocol
 10876  0210  083E               	movf	??_ManageProtocol,w
 10877  0211  0021               	movlb	1	; select bank1
 10878  0212  00B4               	movwf	(_NeopixelChannels^(0+128)+8)
 10879                           
 10880                           ;sb120_app.c: 272: }
 10881                           
 10882                           ;sb120_app.c: 271: break;
 10883                           
 10884                           ;sb120_app.c: 270: default:
 10885                           
 10886                           ;sb120_app.c: 268: break;
 10887  0213  0008               	return
 10888  0214                     l4773:	
 10889  0214  0023               	movlb	3	; select bank3
 10890  0215  0820               	movf	_CmdBuffer^(0+384),w
 10891                           
 10892                           ; Switch size 1, requested type "space"
 10893                           ; Number of cases is 9, Range of values is 80 to 88
 10894                           ; switch strategies available:
 10895                           ; Name         Instructions Cycles
 10896                           ; direct_byte           27     9 (fixed)
 10897                           ; simple_byte           28    15 (average)
 10898                           ; jumptable            263     9 (fixed)
 10899                           ;	Chosen strategy is direct_byte
 10900  0216  3EB0               	addlw	-80
 10901  0217  1C03               	skipc
 10902  0218  0008               	return
 10903  0219  0084               	movwf	4
 10904  021A  3009               	movlw	9
 10905  021B  0204               	subwf	4,w
 10906  021C  1803               	skipnc
 10907  021D  0008               	return
 10908  021E  3190               	movlp	high S5349
 10909  021F  3504               	lslf	4,w
 10910  0220  3E28               	addlw	low S5349
 10911  0221  0082               	movwf	2
 10912  0222  0008               	return
 10913  0223                     __end_of_ManageProtocol:	
 10914                           
 10915                           	psect	swtext2
 10916  1028                     __pswtext2:	
 10917  1028                     S5349:	
 10918  1028  3180  28A6         	ljmp	l4711
 10919  102A  3181  2902         	ljmp	l4727
 10920  102C  3181  2918         	ljmp	l4729
 10921  102E  3181  2920         	ljmp	l4731
 10922  1030  3181  297C         	ljmp	l4747
 10923  1032  3181  2992         	ljmp	l4749
 10924  1034  3181  299A         	ljmp	l4751
 10925  1036  3181  29F6         	ljmp	l4767
 10926  1038  3182  2A0C         	ljmp	l4769
 10927                           
 10928                           	psect	text43
 10929  0223                     __ptext43:	
 10930 ;; *************** function _StdS_ManageStdServices *****************
 10931 ;; Defined at:
 10932 ;;		line 212 in file "../../../Framework/MercuryFwk/Source/c/03_Sml/02_Ssl/std_ser.c"
 10933 ;; Parameters:    Size  Location     Type
 10934 ;;		None
 10935 ;; Auto vars:     Size  Location     Type
 10936 ;;  DieTempStr      4   18[BANK0 ] unsigned char [4]
 10937 ;;  DieTemp         2   22[BANK0 ] unsigned short 
 10938 ;; Return value:  Size  Location     Type
 10939 ;;                  1    wreg      void 
 10940 ;; Registers used:
 10941 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10942 ;; Tracked objects:
 10943 ;;		On entry : 0/0
 10944 ;;		On exit  : 0/0
 10945 ;;		Unchanged: 0/0
 10946 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10947 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10948 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10949 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10950 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10951 ;;Total ram usage:        8 bytes
 10952 ;; Hardware stack levels used:    1
 10953 ;; Hardware stack levels required when called:    4
 10954 ;; This function calls:
 10955 ;;		_BoardReset
 10956 ;;		_ControlLedDirect
 10957 ;;		_GenerateEvt
 10958 ;;		_GetDieTemperature
 10959 ;;		_LowPowerMode
 10960 ;;		_SetLedBehavSts
 10961 ;;		_StringCopy
 10962 ;;		_utoa
 10963 ;; This function is called by:
 10964 ;;		_ManageProtocol
 10965 ;; This function uses a non-reentrant model
 10966 ;;
 10967                           
 10968                           
 10969                           ;psect for function _StdS_ManageStdServices
 10970  0223                     _StdS_ManageStdServices:	
 10971                           
 10972                           ;std_ser.c: 214: UINT16 DieTemp;
 10973                           ;std_ser.c: 215: UINT8 DieTempStr[4];
 10974                           ;std_ser.c: 218: switch (CmdBuffer[((UINT8)(0))])
 10975                           
 10976                           ;incstack = 0
 10977                           ; Regs used in _StdS_ManageStdServices: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 10978  0223  2AF5               	goto	l4611
 10979  0224                     l4555:	
 10980                           ;std_ser.c: 219: {
 10981                           ;std_ser.c: 220: case ((UINT8)(0x10)):
 10982                           
 10983                           
 10984                           ;std_ser.c: 222: StringCopy((void*)("ECHO"),RepBuffer,((UINT8)(4)));
 10985  0224  3023               	movlw	low (STR_2| (0+32768))
 10986  0225  0020               	movlb	0	; select bank0
 10987  0226  00A0               	movwf	StringCopy@SourceStr
 10988  0227  3090               	movlw	high (STR_2| (0+32768))
 10989  0228  00A1               	movwf	StringCopy@SourceStr+1
 10990  0229  3020               	movlw	(low (_RepBuffer| (0+512)))& (0+255)
 10991  022A  00B0               	movwf	??_StdS_ManageStdServices
 10992  022B  0830               	movf	??_StdS_ManageStdServices,w
 10993  022C  00A2               	movwf	StringCopy@DestStr
 10994  022D  3004               	movlw	4
 10995  022E  00B1               	movwf	??_StdS_ManageStdServices+1
 10996  022F  0831               	movf	??_StdS_ManageStdServices+1,w
 10997  0230  00A3               	movwf	StringCopy@Len
 10998  0231  3188  2011  3182   	fcall	_StringCopy
 10999                           
 11000                           ;std_ser.c: 224: RepBufferLen = ((UINT8)(4));
 11001  0234  3004               	movlw	4
 11002  0235  0020               	movlb	0	; select bank0
 11003  0236  00B0               	movwf	??_StdS_ManageStdServices
 11004  0237  0830               	movf	??_StdS_ManageStdServices,w
 11005  0238  0021               	movlb	1	; select bank1
 11006  0239  00C5               	movwf	_RepBufferLen^(0+128)
 11007                           
 11008                           ;std_ser.c: 226: GenerateEvt(&I2cReplyPacketReady);
 11009  023A  30E4               	movlw	(low (_I2cReplyPacketReady| 0))& (0+255)
 11010  023B  3197  27DE         	fcall	_GenerateEvt
 11011                           
 11012                           ;std_ser.c: 227: break;
 11013  023D  0008               	return
 11014  023E                     l4561:	
 11015                           ;std_ser.c: 229: case ((UINT8)(0x20)):
 11016                           
 11017                           
 11018                           ;std_ser.c: 231: StringCopy((void*)"SB120",RepBuffer,((UINT8)(5)));
 11019  023E  301D               	movlw	low (STR_3| (0+32768))
 11020  023F  0020               	movlb	0	; select bank0
 11021  0240  00A0               	movwf	StringCopy@SourceStr
 11022  0241  3090               	movlw	high (STR_3| (0+32768))
 11023  0242  00A1               	movwf	StringCopy@SourceStr+1
 11024  0243  3020               	movlw	(low (_RepBuffer| (0+512)))& (0+255)
 11025  0244  00B0               	movwf	??_StdS_ManageStdServices
 11026  0245  0830               	movf	??_StdS_ManageStdServices,w
 11027  0246  00A2               	movwf	StringCopy@DestStr
 11028  0247  3005               	movlw	5
 11029  0248  00B1               	movwf	??_StdS_ManageStdServices+1
 11030  0249  0831               	movf	??_StdS_ManageStdServices+1,w
 11031  024A  00A3               	movwf	StringCopy@Len
 11032  024B  3188  2011  3182   	fcall	_StringCopy
 11033                           
 11034                           ;std_ser.c: 233: RepBufferLen = ((UINT8)(5));
 11035  024E  3005               	movlw	5
 11036  024F  0020               	movlb	0	; select bank0
 11037  0250  00B0               	movwf	??_StdS_ManageStdServices
 11038  0251  0830               	movf	??_StdS_ManageStdServices,w
 11039  0252  0021               	movlb	1	; select bank1
 11040  0253  00C5               	movwf	_RepBufferLen^(0+128)
 11041                           
 11042                           ;std_ser.c: 235: GenerateEvt(&I2cReplyPacketReady);
 11043  0254  30E4               	movlw	(low (_I2cReplyPacketReady| 0))& (0+255)
 11044  0255  3197  27DE         	fcall	_GenerateEvt
 11045                           
 11046                           ;std_ser.c: 236: break;
 11047  0257  0008               	return
 11048  0258                     l4567:	
 11049                           ;std_ser.c: 238: case ((UINT8)(0x21)):
 11050                           
 11051                           
 11052                           ;std_ser.c: 240: StringCopy((void*)"01.01.00",RepBuffer,((UINT8)(8)));
 11053  0258  300C               	movlw	low (STR_4| (0+32768))
 11054  0259  0020               	movlb	0	; select bank0
 11055  025A  00A0               	movwf	StringCopy@SourceStr
 11056  025B  3090               	movlw	high (STR_4| (0+32768))
 11057  025C  00A1               	movwf	StringCopy@SourceStr+1
 11058  025D  3020               	movlw	(low (_RepBuffer| (0+512)))& (0+255)
 11059  025E  00B0               	movwf	??_StdS_ManageStdServices
 11060  025F  0830               	movf	??_StdS_ManageStdServices,w
 11061  0260  00A2               	movwf	StringCopy@DestStr
 11062  0261  3008               	movlw	8
 11063  0262  00B1               	movwf	??_StdS_ManageStdServices+1
 11064  0263  0831               	movf	??_StdS_ManageStdServices+1,w
 11065  0264  00A3               	movwf	StringCopy@Len
 11066  0265  3188  2011  3182   	fcall	_StringCopy
 11067                           
 11068                           ;std_ser.c: 242: RepBufferLen = ((UINT8)(8));
 11069  0268  3008               	movlw	8
 11070  0269  0020               	movlb	0	; select bank0
 11071  026A  00B0               	movwf	??_StdS_ManageStdServices
 11072  026B  0830               	movf	??_StdS_ManageStdServices,w
 11073  026C  0021               	movlb	1	; select bank1
 11074  026D  00C5               	movwf	_RepBufferLen^(0+128)
 11075                           
 11076                           ;std_ser.c: 244: GenerateEvt(&I2cReplyPacketReady);
 11077  026E  30E4               	movlw	(low (_I2cReplyPacketReady| 0))& (0+255)
 11078  026F  3197  27DE         	fcall	_GenerateEvt
 11079                           
 11080                           ;std_ser.c: 245: break;
 11081  0271  0008               	return
 11082  0272                     l4573:	
 11083                           ;std_ser.c: 247: case ((UINT8)(0x22)):
 11084                           
 11085                           
 11086                           ;std_ser.c: 249: StringCopy((void*)"01.01.00",RepBuffer,((UINT8)(8)));
 11087  0272  300C               	movlw	low (STR_4| (0+32768))
 11088  0273  0020               	movlb	0	; select bank0
 11089  0274  00A0               	movwf	StringCopy@SourceStr
 11090  0275  3090               	movlw	high (STR_4| (0+32768))
 11091  0276  00A1               	movwf	StringCopy@SourceStr+1
 11092  0277  3020               	movlw	(low (_RepBuffer| (0+512)))& (0+255)
 11093  0278  00B0               	movwf	??_StdS_ManageStdServices
 11094  0279  0830               	movf	??_StdS_ManageStdServices,w
 11095  027A  00A2               	movwf	StringCopy@DestStr
 11096  027B  3008               	movlw	8
 11097  027C  00B1               	movwf	??_StdS_ManageStdServices+1
 11098  027D  0831               	movf	??_StdS_ManageStdServices+1,w
 11099  027E  00A3               	movwf	StringCopy@Len
 11100  027F  3188  2011  3182   	fcall	_StringCopy
 11101                           
 11102                           ;std_ser.c: 251: RepBufferLen = ((UINT8)(8));
 11103  0282  3008               	movlw	8
 11104  0283  0020               	movlb	0	; select bank0
 11105  0284  00B0               	movwf	??_StdS_ManageStdServices
 11106  0285  0830               	movf	??_StdS_ManageStdServices,w
 11107  0286  0021               	movlb	1	; select bank1
 11108  0287  00C5               	movwf	_RepBufferLen^(0+128)
 11109                           
 11110                           ;std_ser.c: 253: GenerateEvt(&I2cReplyPacketReady);
 11111  0288  30E4               	movlw	(low (_I2cReplyPacketReady| 0))& (0+255)
 11112  0289  3197  27DE         	fcall	_GenerateEvt
 11113                           
 11114                           ;std_ser.c: 255: break;
 11115  028B  0008               	return
 11116  028C                     l4579:	
 11117                           ;std_ser.c: 257: case ((UINT8)(0x30)):
 11118                           
 11119                           
 11120                           ;std_ser.c: 259: BoardReset();
 11121  028C  3195  25C4         	fcall	_BoardReset
 11122                           
 11123                           ;std_ser.c: 260: break;
 11124  028E  0008               	return
 11125  028F                     l4581:	
 11126                           ;std_ser.c: 262: case ((UINT8)(0x31)):
 11127                           
 11128                           
 11129                           ;std_ser.c: 264: LowPowerMode();
 11130  028F  3196  2654         	fcall	_LowPowerMode
 11131                           
 11132                           ;std_ser.c: 265: break;
 11133  0291  0008               	return
 11134  0292                     l4583:	
 11135                           ;std_ser.c: 267: case ((UINT8)(0x41)):
 11136                           
 11137                           
 11138                           ;std_ser.c: 269: SetLedBehavSts(CmdBuffer[((UINT8)(1))]);
 11139  0292  0023               	movlb	3	; select bank3
 11140  0293  0821               	movf	(_CmdBuffer^(0+384)+1),w
 11141  0294  318A  2209         	fcall	_SetLedBehavSts
 11142                           
 11143                           ;std_ser.c: 270: break;
 11144  0296  0008               	return
 11145  0297                     l4585:	
 11146                           ;std_ser.c: 272: case ((UINT8)(0x42)):
 11147                           
 11148                           
 11149                           ;std_ser.c: 274: ControlLedDirect();
 11150  0297  3196  26B1         	fcall	_ControlLedDirect
 11151                           
 11152                           ;std_ser.c: 275: break;
 11153  0299  0008               	return
 11154  029A                     l4587:	
 11155                           ;std_ser.c: 277: case ((UINT8)(0x45)):
 11156                           
 11157                           
 11158                           ;std_ser.c: 279: DieTemp = GetDieTemperature();
 11159  029A  3197  2731  3182   	fcall	_GetDieTemperature
 11160  029D  0020               	movlb	0	; select bank0
 11161  029E  0824               	movf	?_GetDieTemperature+1,w
 11162  029F  00B7               	movwf	StdS_ManageStdServices@DieTemp+1
 11163  02A0  0823               	movf	?_GetDieTemperature,w
 11164  02A1  00B6               	movwf	StdS_ManageStdServices@DieTemp
 11165                           
 11166                           ;std_ser.c: 281: RepBuffer[0] = ((DieTemp & 0xFF00) >> 8);
 11167  02A2  0837               	movf	StdS_ManageStdServices@DieTemp+1,w
 11168  02A3  00B0               	movwf	??_StdS_ManageStdServices
 11169  02A4  0830               	movf	??_StdS_ManageStdServices,w
 11170  02A5  0024               	movlb	4	; select bank4
 11171  02A6  00A0               	movwf	_RepBuffer^(0+512)
 11172                           
 11173                           ;std_ser.c: 282: RepBuffer[1] = (DieTemp & 0x00FF);
 11174  02A7  0020               	movlb	0	; select bank0
 11175  02A8  0836               	movf	StdS_ManageStdServices@DieTemp,w
 11176  02A9  00B0               	movwf	??_StdS_ManageStdServices
 11177  02AA  0830               	movf	??_StdS_ManageStdServices,w
 11178  02AB  0024               	movlb	4	; select bank4
 11179  02AC  00A1               	movwf	(_RepBuffer^(0+512)+1)
 11180                           
 11181                           ;std_ser.c: 284: RepBufferLen = ((UINT8)(2));
 11182  02AD  3002               	movlw	2
 11183  02AE  0020               	movlb	0	; select bank0
 11184  02AF  00B0               	movwf	??_StdS_ManageStdServices
 11185  02B0  0830               	movf	??_StdS_ManageStdServices,w
 11186  02B1  0021               	movlb	1	; select bank1
 11187  02B2  00C5               	movwf	_RepBufferLen^(0+128)
 11188                           
 11189                           ;std_ser.c: 286: GenerateEvt(&I2cReplyPacketReady);
 11190  02B3  30E4               	movlw	(low (_I2cReplyPacketReady| 0))& (0+255)
 11191  02B4  3197  27DE         	fcall	_GenerateEvt
 11192                           
 11193                           ;std_ser.c: 287: break;
 11194  02B6  0008               	return
 11195  02B7                     l4597:	
 11196                           ;std_ser.c: 289: case ((UINT8)(0x46)):
 11197                           
 11198                           
 11199                           ;std_ser.c: 291: DieTemp = GetDieTemperature();
 11200  02B7  3197  2731  3182   	fcall	_GetDieTemperature
 11201  02BA  0020               	movlb	0	; select bank0
 11202  02BB  0824               	movf	?_GetDieTemperature+1,w
 11203  02BC  00B7               	movwf	StdS_ManageStdServices@DieTemp+1
 11204  02BD  0823               	movf	?_GetDieTemperature,w
 11205  02BE  00B6               	movwf	StdS_ManageStdServices@DieTemp
 11206                           
 11207                           ;std_ser.c: 293: DieTemp = (DieTemp/8) - 40;
 11208  02BF  0837               	movf	StdS_ManageStdServices@DieTemp+1,w
 11209  02C0  00B1               	movwf	??_StdS_ManageStdServices+1
 11210  02C1  0836               	movf	StdS_ManageStdServices@DieTemp,w
 11211  02C2  00B0               	movwf	??_StdS_ManageStdServices
 11212  02C3  36B1               	lsrf	??_StdS_ManageStdServices+1,f
 11213  02C4  0CB0               	rrf	??_StdS_ManageStdServices,f
 11214  02C5  36B1               	lsrf	??_StdS_ManageStdServices+1,f
 11215  02C6  0CB0               	rrf	??_StdS_ManageStdServices,f
 11216  02C7  36B1               	lsrf	??_StdS_ManageStdServices+1,f
 11217  02C8  0CB0               	rrf	??_StdS_ManageStdServices,f
 11218  02C9  0830               	movf	??_StdS_ManageStdServices,w
 11219  02CA  3ED8               	addlw	216
 11220  02CB  00B6               	movwf	StdS_ManageStdServices@DieTemp
 11221  02CC  30FF               	movlw	255
 11222  02CD  3D31               	addwfc	??_StdS_ManageStdServices+1,w
 11223  02CE  00B7               	movwf	StdS_ManageStdServices@DieTemp+1
 11224                           
 11225                           ;std_ser.c: 295: utoa(DieTempStr,DieTemp,10);
 11226  02CF  0837               	movf	StdS_ManageStdServices@DieTemp+1,w
 11227  02D0  00A8               	movwf	utoa@val+1
 11228  02D1  0836               	movf	StdS_ManageStdServices@DieTemp,w
 11229  02D2  00A7               	movwf	utoa@val
 11230  02D3  300A               	movlw	10
 11231  02D4  00A9               	movwf	utoa@base
 11232  02D5  3000               	movlw	0
 11233  02D6  00AA               	movwf	utoa@base+1
 11234  02D7  3032               	movlw	(low (StdS_ManageStdServices@DieTempStr| 0))& (0+255)
 11235  02D8  318B  2337  3182   	fcall	_utoa
 11236                           
 11237                           ;std_ser.c: 297: StringCopy(DieTempStr,RepBuffer,((UINT8)(2)));
 11238  02DB  3032               	movlw	low StdS_ManageStdServices@DieTempStr
 11239  02DC  0020               	movlb	0	; select bank0
 11240  02DD  00A0               	movwf	StringCopy@SourceStr
 11241  02DE  3000               	movlw	high StdS_ManageStdServices@DieTempStr
 11242  02DF  00A1               	movwf	StringCopy@SourceStr+1
 11243  02E0  3020               	movlw	(low (_RepBuffer| (0+512)))& (0+255)
 11244  02E1  00B0               	movwf	??_StdS_ManageStdServices
 11245  02E2  0830               	movf	??_StdS_ManageStdServices,w
 11246  02E3  00A2               	movwf	StringCopy@DestStr
 11247  02E4  3002               	movlw	2
 11248  02E5  00B1               	movwf	??_StdS_ManageStdServices+1
 11249  02E6  0831               	movf	??_StdS_ManageStdServices+1,w
 11250  02E7  00A3               	movwf	StringCopy@Len
 11251  02E8  3188  2011  3182   	fcall	_StringCopy
 11252                           
 11253                           ;std_ser.c: 299: RepBufferLen = ((UINT8)(2));
 11254  02EB  3002               	movlw	2
 11255  02EC  0020               	movlb	0	; select bank0
 11256  02ED  00B0               	movwf	??_StdS_ManageStdServices
 11257  02EE  0830               	movf	??_StdS_ManageStdServices,w
 11258  02EF  0021               	movlb	1	; select bank1
 11259  02F0  00C5               	movwf	_RepBufferLen^(0+128)
 11260                           
 11261                           ;std_ser.c: 301: GenerateEvt(&I2cReplyPacketReady);
 11262  02F1  30E4               	movlw	(low (_I2cReplyPacketReady| 0))& (0+255)
 11263  02F2  3197  27DE         	fcall	_GenerateEvt
 11264                           
 11265                           ;std_ser.c: 306: }
 11266                           
 11267                           ;std_ser.c: 305: break;
 11268                           
 11269                           ;std_ser.c: 304: default:
 11270                           
 11271                           ;std_ser.c: 302: break;
 11272  02F4  0008               	return
 11273  02F5                     l4611:	
 11274  02F5  0023               	movlb	3	; select bank3
 11275  02F6  0820               	movf	_CmdBuffer^(0+384),w
 11276                           
 11277                           ; Switch size 1, requested type "space"
 11278                           ; Number of cases is 10, Range of values is 16 to 70
 11279                           ; switch strategies available:
 11280                           ; Name         Instructions Cycles
 11281                           ; simple_byte           31    16 (average)
 11282                           ; direct_byte          119     9 (fixed)
 11283                           ; jumptable            263     9 (fixed)
 11284                           ;	Chosen strategy is simple_byte
 11285  02F7  3A10               	xorlw	16	; case 16
 11286  02F8  1903               	skipnz
 11287  02F9  2A24               	goto	l4555
 11288  02FA  3A30               	xorlw	48	; case 32
 11289  02FB  1903               	skipnz
 11290  02FC  2A3E               	goto	l4561
 11291  02FD  3A01               	xorlw	1	; case 33
 11292  02FE  1903               	skipnz
 11293  02FF  2A58               	goto	l4567
 11294  0300  3A03               	xorlw	3	; case 34
 11295  0301  1903               	skipnz
 11296  0302  2A72               	goto	l4573
 11297  0303  3A12               	xorlw	18	; case 48
 11298  0304  1903               	skipnz
 11299  0305  2A8C               	goto	l4579
 11300  0306  3A01               	xorlw	1	; case 49
 11301  0307  1903               	skipnz
 11302  0308  2A8F               	goto	l4581
 11303  0309  3A70               	xorlw	112	; case 65
 11304  030A  1903               	skipnz
 11305  030B  2A92               	goto	l4583
 11306  030C  3A03               	xorlw	3	; case 66
 11307  030D  1903               	skipnz
 11308  030E  2A97               	goto	l4585
 11309  030F  3A07               	xorlw	7	; case 69
 11310  0310  1903               	skipnz
 11311  0311  2A9A               	goto	l4587
 11312  0312  3A03               	xorlw	3	; case 70
 11313  0313  1903               	skipnz
 11314  0314  2AB7               	goto	l4597
 11315  0315  2B16               	goto	l801
 11316  0316                     l801:	
 11317  0316  0008               	return
 11318  0317                     __end_of_StdS_ManageStdServices:	
 11319                           
 11320                           	psect	text44
 11321  0B37                     __ptext44:	
 11322 ;; *************** function _utoa *****************
 11323 ;; Defined at:
 11324 ;;		line 17 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\itoa.c"
 11325 ;; Parameters:    Size  Location     Type
 11326 ;;  buf             1    wreg     PTR unsigned char 
 11327 ;;		 -> StdS_ManageStdServices@DieTempStr(4), 
 11328 ;;  val             2    7[BANK0 ] unsigned int 
 11329 ;;  base            2    9[BANK0 ] int 
 11330 ;; Auto vars:     Size  Location     Type
 11331 ;;  buf             1   15[BANK0 ] PTR unsigned char 
 11332 ;;		 -> StdS_ManageStdServices@DieTempStr(4), 
 11333 ;;  v               2   12[BANK0 ] unsigned int 
 11334 ;;  c               1   14[BANK0 ] unsigned char 
 11335 ;; Return value:  Size  Location     Type
 11336 ;;                  1    wreg      PTR unsigned char 
 11337 ;; Registers used:
 11338 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11339 ;; Tracked objects:
 11340 ;;		On entry : 0/0
 11341 ;;		On exit  : 0/0
 11342 ;;		Unchanged: 0/0
 11343 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11344 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11345 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11346 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11347 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11348 ;;Total ram usage:        9 bytes
 11349 ;; Hardware stack levels used:    1
 11350 ;; Hardware stack levels required when called:    3
 11351 ;; This function calls:
 11352 ;;		___lwdiv
 11353 ;;		___lwmod
 11354 ;; This function is called by:
 11355 ;;		_StdS_ManageStdServices
 11356 ;; This function uses a non-reentrant model
 11357 ;;
 11358                           
 11359                           
 11360                           ;psect for function _utoa
 11361  0B37                     _utoa:	
 11362                           
 11363                           ;incstack = 0
 11364                           ; Regs used in _utoa: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 11365                           ;utoa@buf stored from wreg
 11366  0B37  0020               	movlb	0	; select bank0
 11367  0B38  00AF               	movwf	utoa@buf
 11368  0B39  0828               	movf	utoa@val+1,w
 11369  0B3A  00AD               	movwf	utoa@v+1
 11370  0B3B  0827               	movf	utoa@val,w
 11371  0B3C  00AC               	movwf	utoa@v
 11372  0B3D                     l4293:	
 11373  0B3D  082A               	movf	utoa@base+1,w
 11374  0B3E  00A1               	movwf	___lwdiv@divisor+1
 11375  0B3F  0829               	movf	utoa@base,w
 11376  0B40  00A0               	movwf	___lwdiv@divisor
 11377  0B41  082D               	movf	utoa@v+1,w
 11378  0B42  00A3               	movwf	___lwdiv@dividend+1
 11379  0B43  082C               	movf	utoa@v,w
 11380  0B44  00A2               	movwf	___lwdiv@dividend
 11381  0B45  3189  219D  318B   	fcall	___lwdiv
 11382  0B48  0020               	movlb	0	; select bank0
 11383  0B49  0821               	movf	?___lwdiv+1,w
 11384  0B4A  00AD               	movwf	utoa@v+1
 11385  0B4B  0820               	movf	?___lwdiv,w
 11386  0B4C  00AC               	movwf	utoa@v
 11387  0B4D  3001               	movlw	1
 11388  0B4E  00AB               	movwf	??_utoa
 11389  0B4F  082B               	movf	??_utoa,w
 11390  0B50  07AF               	addwf	utoa@buf,f
 11391  0B51  082C               	movf	utoa@v,w
 11392  0B52  042D               	iorwf	utoa@v+1,w
 11393  0B53  1D03               	btfss	3,2
 11394  0B54  2B3D               	goto	l4293
 11395  0B55  082F               	movf	utoa@buf,w
 11396  0B56  0086               	movwf	6
 11397  0B57  0187               	clrf	7
 11398  0B58  0181               	clrf	1
 11399  0B59  3001               	movlw	1
 11400  0B5A  02AF               	subwf	utoa@buf,f
 11401  0B5B                     l4303:	
 11402  0B5B  082A               	movf	utoa@base+1,w
 11403  0B5C  00A1               	movwf	___lwmod@divisor+1
 11404  0B5D  0829               	movf	utoa@base,w
 11405  0B5E  00A0               	movwf	___lwmod@divisor
 11406  0B5F  0828               	movf	utoa@val+1,w
 11407  0B60  00A3               	movwf	___lwmod@dividend+1
 11408  0B61  0827               	movf	utoa@val,w
 11409  0B62  00A2               	movwf	___lwmod@dividend
 11410  0B63  3188  20B0  318B   	fcall	___lwmod
 11411  0B66  0020               	movlb	0	; select bank0
 11412  0B67  0820               	movf	?___lwmod,w
 11413  0B68  00AB               	movwf	??_utoa
 11414  0B69  082B               	movf	??_utoa,w
 11415  0B6A  00AE               	movwf	utoa@c
 11416  0B6B  082A               	movf	utoa@base+1,w
 11417  0B6C  00A1               	movwf	___lwdiv@divisor+1
 11418  0B6D  0829               	movf	utoa@base,w
 11419  0B6E  00A0               	movwf	___lwdiv@divisor
 11420  0B6F  0828               	movf	utoa@val+1,w
 11421  0B70  00A3               	movwf	___lwdiv@dividend+1
 11422  0B71  0827               	movf	utoa@val,w
 11423  0B72  00A2               	movwf	___lwdiv@dividend
 11424  0B73  3189  219D  318B   	fcall	___lwdiv
 11425  0B76  0020               	movlb	0	; select bank0
 11426  0B77  0821               	movf	?___lwdiv+1,w
 11427  0B78  00A8               	movwf	utoa@val+1
 11428  0B79  0820               	movf	?___lwdiv,w
 11429  0B7A  00A7               	movwf	utoa@val
 11430  0B7B  300A               	movlw	10
 11431  0B7C  022E               	subwf	utoa@c,w
 11432  0B7D  1C03               	skipc
 11433  0B7E  2B83               	goto	l1382
 11434  0B7F  3007               	movlw	7
 11435  0B80  00AB               	movwf	??_utoa
 11436  0B81  082B               	movf	??_utoa,w
 11437  0B82  07AE               	addwf	utoa@c,f
 11438  0B83                     l1382:	
 11439  0B83  3030               	movlw	48
 11440  0B84  00AB               	movwf	??_utoa
 11441  0B85  082B               	movf	??_utoa,w
 11442  0B86  07AE               	addwf	utoa@c,f
 11443  0B87  082E               	movf	utoa@c,w
 11444  0B88  00AB               	movwf	??_utoa
 11445  0B89  082F               	movf	utoa@buf,w
 11446  0B8A  0086               	movwf	6
 11447  0B8B  0187               	clrf	7
 11448  0B8C  082B               	movf	??_utoa,w
 11449  0B8D  0081               	movwf	1
 11450  0B8E  3001               	movlw	1
 11451  0B8F  02AF               	subwf	utoa@buf,f
 11452  0B90  0827               	movf	utoa@val,w
 11453  0B91  0428               	iorwf	utoa@val+1,w
 11454  0B92  1D03               	btfss	3,2
 11455  0B93  2B5B               	goto	l4303
 11456                           
 11457                           ;	Return value of _utoa is never used
 11458  0B94  3001               	movlw	1
 11459  0B95  00AB               	movwf	??_utoa
 11460  0B96  082B               	movf	??_utoa,w
 11461  0B97  07AF               	addwf	utoa@buf,f
 11462  0B98  0008               	return
 11463  0B99                     __end_of_utoa:	
 11464                           
 11465                           	psect	text45
 11466  08B0                     __ptext45:	
 11467 ;; *************** function ___lwmod *****************
 11468 ;; Defined at:
 11469 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\lwmod.c"
 11470 ;; Parameters:    Size  Location     Type
 11471 ;;  divisor         2    0[BANK0 ] unsigned int 
 11472 ;;  dividend        2    2[BANK0 ] unsigned int 
 11473 ;; Auto vars:     Size  Location     Type
 11474 ;;  counter         1    5[COMMON] unsigned char 
 11475 ;; Return value:  Size  Location     Type
 11476 ;;                  2    0[BANK0 ] unsigned int 
 11477 ;; Registers used:
 11478 ;;		wreg, status,2, status,0
 11479 ;; Tracked objects:
 11480 ;;		On entry : 0/0
 11481 ;;		On exit  : 0/0
 11482 ;;		Unchanged: 0/0
 11483 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11484 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11485 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11486 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11487 ;;      Totals:         2       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11488 ;;Total ram usage:        6 bytes
 11489 ;; Hardware stack levels used:    1
 11490 ;; Hardware stack levels required when called:    2
 11491 ;; This function calls:
 11492 ;;		Nothing
 11493 ;; This function is called by:
 11494 ;;		_utoa
 11495 ;; This function uses a non-reentrant model
 11496 ;;
 11497                           
 11498                           
 11499                           ;psect for function ___lwmod
 11500  08B0                     ___lwmod:	
 11501                           
 11502                           ;incstack = 0
 11503                           ; Regs used in ___lwmod: [wreg+status,2+status,0]
 11504  08B0  0020               	movlb	0	; select bank0
 11505  08B1  0820               	movf	___lwmod@divisor,w
 11506  08B2  0421               	iorwf	___lwmod@divisor+1,w
 11507  08B3  1903               	btfsc	3,2
 11508  08B4  28D8               	goto	l4213
 11509  08B5  01F5               	clrf	___lwmod@counter
 11510  08B6  0AF5               	incf	___lwmod@counter,f
 11511  08B7                     l4203:	
 11512  08B7  1BA1               	btfsc	___lwmod@divisor+1,7
 11513  08B8  28C3               	goto	l4205
 11514  08B9  3001               	movlw	1
 11515  08BA                     u3545:	
 11516  08BA  35A0               	lslf	___lwmod@divisor,f
 11517  08BB  0DA1               	rlf	___lwmod@divisor+1,f
 11518  08BC  0B89               	decfsz	9,f
 11519  08BD  28BA               	goto	u3545
 11520  08BE  3001               	movlw	1
 11521  08BF  00F4               	movwf	??___lwmod
 11522  08C0  0874               	movf	??___lwmod,w
 11523  08C1  07F5               	addwf	___lwmod@counter,f
 11524  08C2  28B7               	goto	l4203
 11525  08C3                     l4205:	
 11526  08C3  0821               	movf	___lwmod@divisor+1,w
 11527  08C4  0223               	subwf	___lwmod@dividend+1,w
 11528  08C5  1D03               	skipz
 11529  08C6  28C9               	goto	u3565
 11530  08C7  0820               	movf	___lwmod@divisor,w
 11531  08C8  0222               	subwf	___lwmod@dividend,w
 11532  08C9                     u3565:	
 11533  08C9  1C03               	skipc
 11534  08CA  28CF               	goto	l4209
 11535  08CB  0820               	movf	___lwmod@divisor,w
 11536  08CC  02A2               	subwf	___lwmod@dividend,f
 11537  08CD  0821               	movf	___lwmod@divisor+1,w
 11538  08CE  3BA3               	subwfb	___lwmod@dividend+1,f
 11539  08CF                     l4209:	
 11540  08CF  3001               	movlw	1
 11541  08D0                     u3575:	
 11542  08D0  36A1               	lsrf	___lwmod@divisor+1,f
 11543  08D1  0CA0               	rrf	___lwmod@divisor,f
 11544  08D2  0B89               	decfsz	9,f
 11545  08D3  28D0               	goto	u3575
 11546  08D4  3001               	movlw	1
 11547  08D5  02F5               	subwf	___lwmod@counter,f
 11548  08D6  1D03               	btfss	3,2
 11549  08D7  28C3               	goto	l4205
 11550  08D8                     l4213:	
 11551  08D8  0823               	movf	___lwmod@dividend+1,w
 11552  08D9  00A1               	movwf	?___lwmod+1
 11553  08DA  0822               	movf	___lwmod@dividend,w
 11554  08DB  00A0               	movwf	?___lwmod
 11555  08DC  0008               	return
 11556  08DD                     __end_of___lwmod:	
 11557                           
 11558                           	psect	text46
 11559  099D                     __ptext46:	
 11560 ;; *************** function ___lwdiv *****************
 11561 ;; Defined at:
 11562 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\lwdiv.c"
 11563 ;; Parameters:    Size  Location     Type
 11564 ;;  divisor         2    0[BANK0 ] unsigned int 
 11565 ;;  dividend        2    2[BANK0 ] unsigned int 
 11566 ;; Auto vars:     Size  Location     Type
 11567 ;;  quotient        2    5[BANK0 ] unsigned int 
 11568 ;;  counter         1    4[BANK0 ] unsigned char 
 11569 ;; Return value:  Size  Location     Type
 11570 ;;                  2    0[BANK0 ] unsigned int 
 11571 ;; Registers used:
 11572 ;;		wreg, status,2, status,0
 11573 ;; Tracked objects:
 11574 ;;		On entry : 0/0
 11575 ;;		On exit  : 0/0
 11576 ;;		Unchanged: 0/0
 11577 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11578 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11579 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11580 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11581 ;;      Totals:         1       7       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11582 ;;Total ram usage:        8 bytes
 11583 ;; Hardware stack levels used:    1
 11584 ;; Hardware stack levels required when called:    2
 11585 ;; This function calls:
 11586 ;;		Nothing
 11587 ;; This function is called by:
 11588 ;;		_LedBlinkStateMachine
 11589 ;;		_LedPulseStateMachine
 11590 ;;		_utoa
 11591 ;; This function uses a non-reentrant model
 11592 ;;
 11593                           
 11594                           
 11595                           ;psect for function ___lwdiv
 11596  099D                     ___lwdiv:	
 11597                           
 11598                           ;incstack = 0
 11599                           ; Regs used in ___lwdiv: [wreg+status,2+status,0]
 11600  099D  0020               	movlb	0	; select bank0
 11601  099E  01A5               	clrf	___lwdiv@quotient
 11602  099F  01A6               	clrf	___lwdiv@quotient+1
 11603  09A0  0820               	movf	___lwdiv@divisor,w
 11604  09A1  0421               	iorwf	___lwdiv@divisor+1,w
 11605  09A2  1903               	btfsc	3,2
 11606  09A3  29CD               	goto	l4191
 11607  09A4  01A4               	clrf	___lwdiv@counter
 11608  09A5  0AA4               	incf	___lwdiv@counter,f
 11609  09A6                     l4179:	
 11610  09A6  1BA1               	btfsc	___lwdiv@divisor+1,7
 11611  09A7  29B2               	goto	l4181
 11612  09A8  3001               	movlw	1
 11613  09A9                     u3475:	
 11614  09A9  35A0               	lslf	___lwdiv@divisor,f
 11615  09AA  0DA1               	rlf	___lwdiv@divisor+1,f
 11616  09AB  0B89               	decfsz	9,f
 11617  09AC  29A9               	goto	u3475
 11618  09AD  3001               	movlw	1
 11619  09AE  00F4               	movwf	??___lwdiv
 11620  09AF  0874               	movf	??___lwdiv,w
 11621  09B0  07A4               	addwf	___lwdiv@counter,f
 11622  09B1  29A6               	goto	l4179
 11623  09B2                     l4181:	
 11624  09B2  3001               	movlw	1
 11625  09B3                     u3495:	
 11626  09B3  35A5               	lslf	___lwdiv@quotient,f
 11627  09B4  0DA6               	rlf	___lwdiv@quotient+1,f
 11628  09B5  0B89               	decfsz	9,f
 11629  09B6  29B3               	goto	u3495
 11630  09B7  0821               	movf	___lwdiv@divisor+1,w
 11631  09B8  0223               	subwf	___lwdiv@dividend+1,w
 11632  09B9  1D03               	skipz
 11633  09BA  29BD               	goto	u3505
 11634  09BB  0820               	movf	___lwdiv@divisor,w
 11635  09BC  0222               	subwf	___lwdiv@dividend,w
 11636  09BD                     u3505:	
 11637  09BD  1C03               	skipc
 11638  09BE  29C4               	goto	l4187
 11639  09BF  0820               	movf	___lwdiv@divisor,w
 11640  09C0  02A2               	subwf	___lwdiv@dividend,f
 11641  09C1  0821               	movf	___lwdiv@divisor+1,w
 11642  09C2  3BA3               	subwfb	___lwdiv@dividend+1,f
 11643  09C3  1425               	bsf	___lwdiv@quotient,0
 11644  09C4                     l4187:	
 11645  09C4  3001               	movlw	1
 11646  09C5                     u3515:	
 11647  09C5  36A1               	lsrf	___lwdiv@divisor+1,f
 11648  09C6  0CA0               	rrf	___lwdiv@divisor,f
 11649  09C7  0B89               	decfsz	9,f
 11650  09C8  29C5               	goto	u3515
 11651  09C9  3001               	movlw	1
 11652  09CA  02A4               	subwf	___lwdiv@counter,f
 11653  09CB  1D03               	btfss	3,2
 11654  09CC  29B2               	goto	l4181
 11655  09CD                     l4191:	
 11656  09CD  0826               	movf	___lwdiv@quotient+1,w
 11657  09CE  00A1               	movwf	?___lwdiv+1
 11658  09CF  0825               	movf	___lwdiv@quotient,w
 11659  09D0  00A0               	movwf	?___lwdiv
 11660  09D1  0008               	return
 11661  09D2                     __end_of___lwdiv:	
 11662                           
 11663                           	psect	text47
 11664  0811                     __ptext47:	
 11665 ;; *************** function _StringCopy *****************
 11666 ;; Defined at:
 11667 ;;		line 104 in file "../../../Framework/MercuryFwk/Source/c/03_Sml/02_Ssl/sf.c"
 11668 ;; Parameters:    Size  Location     Type
 11669 ;;  SourceStr       2    0[BANK0 ] PTR unsigned char 
 11670 ;;		 -> StdS_ManageStdServices@DieTempStr(4), STR_5(9), STR_4(9), STR_3(6), 
 11671 ;;		 -> STR_2(5), 
 11672 ;;  DestStr         1    2[BANK0 ] PTR unsigned char 
 11673 ;;		 -> RepBuffer(80), 
 11674 ;;  Len             1    3[BANK0 ] unsigned char 
 11675 ;; Auto vars:     Size  Location     Type
 11676 ;;  Index           1    4[COMMON] unsigned char 
 11677 ;; Return value:  Size  Location     Type
 11678 ;;                  1    wreg      void 
 11679 ;; Registers used:
 11680 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath
 11681 ;; Tracked objects:
 11682 ;;		On entry : 0/0
 11683 ;;		On exit  : 0/0
 11684 ;;		Unchanged: 0/0
 11685 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11686 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11687 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11688 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11689 ;;      Totals:         1       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11690 ;;Total ram usage:        9 bytes
 11691 ;; Hardware stack levels used:    1
 11692 ;; Hardware stack levels required when called:    2
 11693 ;; This function calls:
 11694 ;;		Nothing
 11695 ;; This function is called by:
 11696 ;;		_StdS_ManageStdServices
 11697 ;; This function uses a non-reentrant model
 11698 ;;
 11699                           
 11700                           
 11701                           ;psect for function _StringCopy
 11702  0811                     _StringCopy:	
 11703                           
 11704                           ;sf.c: 106: UINT8 Index = 0;
 11705                           
 11706                           ;incstack = 0
 11707                           ; Regs used in _StringCopy: [wreg-fsr1h+status,2+status,0+pclath]
 11708  0811  01F4               	clrf	StringCopy@Index
 11709                           
 11710                           ;sf.c: 109: for (Index = 0; Index < Len; Index++)
 11711  0812  01F4               	clrf	StringCopy@Index
 11712  0813                     l4261:	
 11713  0813  0020               	movlb	0	; select bank0
 11714  0814  0823               	movf	StringCopy@Len,w
 11715  0815  0274               	subwf	StringCopy@Index,w
 11716  0816  1803               	btfsc	3,0
 11717  0817  0008               	return
 11718                           
 11719                           ;sf.c: 110: {
 11720                           ;sf.c: 111: DestStr[Index] = SourceStr[Index];
 11721  0818  0020               	movlb	0	; select bank0
 11722  0819  0821               	movf	StringCopy@SourceStr+1,w
 11723  081A  00A5               	movwf	??_StringCopy+1
 11724  081B  0820               	movf	StringCopy@SourceStr,w
 11725  081C  00A4               	movwf	??_StringCopy
 11726  081D  0874               	movf	StringCopy@Index,w
 11727  081E  0724               	addwf	??_StringCopy,w
 11728  081F  0084               	movwf	4
 11729  0820  0825               	movf	??_StringCopy+1,w
 11730  0821  1803               	skipnc
 11731  0822  0A25               	incf	??_StringCopy+1,w
 11732  0823  0085               	movwf	5
 11733  0824  0800               	movf	0,w	;code access
 11734  0825  00A6               	movwf	??_StringCopy+2
 11735  0826  0874               	movf	StringCopy@Index,w
 11736  0827  0722               	addwf	StringCopy@DestStr,w
 11737  0828  00A7               	movwf	??_StringCopy+3
 11738  0829  0827               	movf	??_StringCopy+3,w
 11739  082A  0086               	movwf	6
 11740  082B  3002               	movlw	2	; select bank4/5
 11741  082C  0087               	movwf	7
 11742  082D  0826               	movf	??_StringCopy+2,w
 11743  082E  0081               	movwf	1
 11744  082F  3001               	movlw	1
 11745  0830  00A4               	movwf	??_StringCopy
 11746  0831  0824               	movf	??_StringCopy,w
 11747  0832  07F4               	addwf	StringCopy@Index,f
 11748  0833  2813               	goto	l4261
 11749  0834                     __end_of_StringCopy:	
 11750                           
 11751                           	psect	text48
 11752  0A09                     __ptext48:	
 11753 ;; *************** function _SetLedBehavSts *****************
 11754 ;; Defined at:
 11755 ;;		line 76 in file "../../../Framework/MercuryFwk/Source/c/03_Sml/02_Ssl/std_ser.c"
 11756 ;; Parameters:    Size  Location     Type
 11757 ;;  LedBehav        1    wreg     unsigned char 
 11758 ;; Auto vars:     Size  Location     Type
 11759 ;;  LedBehav        1    5[BANK0 ] unsigned char 
 11760 ;; Return value:  Size  Location     Type
 11761 ;;                  1    wreg      void 
 11762 ;; Registers used:
 11763 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
 11764 ;; Tracked objects:
 11765 ;;		On entry : 0/0
 11766 ;;		On exit  : 0/0
 11767 ;;		Unchanged: 0/0
 11768 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11769 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11770 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11771 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11772 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11773 ;;Total ram usage:        2 bytes
 11774 ;; Hardware stack levels used:    1
 11775 ;; Hardware stack levels required when called:    3
 11776 ;; This function calls:
 11777 ;;		_Led_SetLedBlinkTime
 11778 ;;		_Led_SetLedPulseTime
 11779 ;;		_Led_SetLedStatus
 11780 ;; This function is called by:
 11781 ;;		_Led_MainTask
 11782 ;;		_StdS_ManageStdServices
 11783 ;; This function uses a non-reentrant model
 11784 ;;
 11785                           
 11786                           
 11787                           ;psect for function _SetLedBehavSts
 11788  0A09                     _SetLedBehavSts:	
 11789                           
 11790                           ;incstack = 0
 11791                           ; Regs used in _SetLedBehavSts: [wreg-fsr0h+status,2+status,0+pclath+cstack]
 11792                           ;SetLedBehavSts@LedBehav stored from wreg
 11793  0A09  0020               	movlb	0	; select bank0
 11794  0A0A  00A5               	movwf	SetLedBehavSts@LedBehav
 11795                           
 11796                           ;std_ser.c: 79: switch (LedBehav)
 11797  0A0B  2A3C               	goto	l4253
 11798  0A0C                     l4237:	
 11799                           ;std_ser.c: 80: {
 11800                           ;std_ser.c: 81: case ((UINT8)(0)):
 11801                           
 11802                           
 11803                           ;std_ser.c: 83: Led_SetLedStatus(1u,LED_STS_OFF);
 11804  0A0C  01F4               	clrf	Led_SetLedStatus@LedSts
 11805  0A0D  3001               	movlw	1
 11806  0A0E  3196  2661         	fcall	_Led_SetLedStatus
 11807                           
 11808                           ;std_ser.c: 85: LedBehaviourSts = ((UINT8)(0));
 11809  0A10  01F9               	clrf	_LedBehaviourSts
 11810                           
 11811                           ;std_ser.c: 86: break;
 11812  0A11  0008               	return
 11813  0A12                     l4241:	
 11814                           ;std_ser.c: 88: case ((UINT8)(1)):
 11815                           
 11816                           
 11817                           ;std_ser.c: 90: Led_SetLedPulseTime(1u,50);
 11818  0A12  3032               	movlw	50
 11819  0A13  00F4               	movwf	Led_SetLedPulseTime@PulseTimeMs
 11820  0A14  3000               	movlw	0
 11821  0A15  00F5               	movwf	Led_SetLedPulseTime@PulseTimeMs+1
 11822  0A16  3001               	movlw	1
 11823  0A17  3196  2681         	fcall	_Led_SetLedPulseTime
 11824                           
 11825                           ;std_ser.c: 92: LedBehaviourSts = ((UINT8)(1));
 11826  0A19  01F9               	clrf	_LedBehaviourSts
 11827  0A1A  0AF9               	incf	_LedBehaviourSts,f
 11828                           
 11829                           ;std_ser.c: 93: break;
 11830  0A1B  0008               	return
 11831  0A1C                     l4245:	
 11832                           ;std_ser.c: 95: case ((UINT8)(2)):
 11833                           
 11834                           
 11835                           ;std_ser.c: 97: Led_SetLedBlinkTime(1u,50,950);
 11836  0A1C  3032               	movlw	50
 11837  0A1D  0020               	movlb	0	; select bank0
 11838  0A1E  00A0               	movwf	Led_SetLedBlinkTime@OnTimeMs
 11839  0A1F  3000               	movlw	0
 11840  0A20  00A1               	movwf	Led_SetLedBlinkTime@OnTimeMs+1
 11841  0A21  30B6               	movlw	182
 11842  0A22  00A2               	movwf	Led_SetLedBlinkTime@OffTimeMs
 11843  0A23  3003               	movlw	3
 11844  0A24  00A3               	movwf	Led_SetLedBlinkTime@OffTimeMs+1
 11845  0A25  3001               	movlw	1
 11846  0A26  3197  274A  318A   	fcall	_Led_SetLedBlinkTime
 11847                           
 11848                           ;std_ser.c: 99: Led_SetLedStatus(1u,LED_STS_BLINK);
 11849  0A29  3002               	movlw	2
 11850  0A2A  0020               	movlb	0	; select bank0
 11851  0A2B  00A4               	movwf	??_SetLedBehavSts
 11852  0A2C  0824               	movf	??_SetLedBehavSts,w
 11853  0A2D  00F4               	movwf	Led_SetLedStatus@LedSts
 11854  0A2E  3001               	movlw	1
 11855  0A2F  3196  2661         	fcall	_Led_SetLedStatus
 11856                           
 11857                           ;std_ser.c: 101: LedBehaviourSts = ((UINT8)(2));
 11858  0A31  3002               	movlw	2
 11859  0A32  0020               	movlb	0	; select bank0
 11860  0A33  00A4               	movwf	??_SetLedBehavSts
 11861  0A34  0824               	movf	??_SetLedBehavSts,w
 11862  0A35  00F9               	movwf	_LedBehaviourSts
 11863                           
 11864                           ;std_ser.c: 102: break;
 11865  0A36  0008               	return
 11866  0A37                     l4249:	
 11867                           ;std_ser.c: 104: case ((UINT8)(3)):
 11868                           
 11869                           
 11870                           ;std_ser.c: 106: LedBehaviourSts = ((UINT8)(3));
 11871  0A37  3003               	movlw	3
 11872  0A38  00A4               	movwf	??_SetLedBehavSts
 11873  0A39  0824               	movf	??_SetLedBehavSts,w
 11874  0A3A  00F9               	movwf	_LedBehaviourSts
 11875                           
 11876                           ;std_ser.c: 111: }
 11877                           
 11878                           ;std_ser.c: 110: break;
 11879                           
 11880                           ;std_ser.c: 109: default:
 11881                           
 11882                           ;std_ser.c: 107: break;
 11883  0A3B  0008               	return
 11884  0A3C                     l4253:	
 11885  0A3C  0825               	movf	SetLedBehavSts@LedBehav,w
 11886                           
 11887                           ; Switch size 1, requested type "space"
 11888                           ; Number of cases is 4, Range of values is 0 to 3
 11889                           ; switch strategies available:
 11890                           ; Name         Instructions Cycles
 11891                           ; simple_byte           13     7 (average)
 11892                           ; direct_byte           14     6 (fixed)
 11893                           ; jumptable            260     6 (fixed)
 11894                           ;	Chosen strategy is simple_byte
 11895  0A3D  3A00               	xorlw	0	; case 0
 11896  0A3E  1903               	skipnz
 11897  0A3F  2A0C               	goto	l4237
 11898  0A40  3A01               	xorlw	1	; case 1
 11899  0A41  1903               	skipnz
 11900  0A42  2A12               	goto	l4241
 11901  0A43  3A03               	xorlw	3	; case 2
 11902  0A44  1903               	skipnz
 11903  0A45  2A1C               	goto	l4245
 11904  0A46  3A01               	xorlw	1	; case 3
 11905  0A47  1903               	skipnz
 11906  0A48  2A37               	goto	l4249
 11907  0A49  2A4A               	goto	l767
 11908  0A4A                     l767:	
 11909  0A4A  0008               	return
 11910  0A4B                     __end_of_SetLedBehavSts:	
 11911                           
 11912                           	psect	text49
 11913  1681                     __ptext49:	
 11914 ;; *************** function _Led_SetLedPulseTime *****************
 11915 ;; Defined at:
 11916 ;;		line 204 in file "../../../Framework/MercuryFwk/Source/c/03_Sml/02_Ssl/led.c"
 11917 ;; Parameters:    Size  Location     Type
 11918 ;;  Led             1    wreg     unsigned char 
 11919 ;;  PulseTimeMs     2    4[COMMON] unsigned short 
 11920 ;; Auto vars:     Size  Location     Type
 11921 ;;  Led             1    0[BANK0 ] unsigned char 
 11922 ;; Return value:  Size  Location     Type
 11923 ;;                  1    wreg      void 
 11924 ;; Registers used:
 11925 ;;		wreg, fsr0l, fsr0h, status,2, status,0
 11926 ;; Tracked objects:
 11927 ;;		On entry : 0/0
 11928 ;;		On exit  : 0/0
 11929 ;;		Unchanged: 0/0
 11930 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11931 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11932 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11933 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11934 ;;      Totals:         2       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11935 ;;Total ram usage:        3 bytes
 11936 ;; Hardware stack levels used:    1
 11937 ;; Hardware stack levels required when called:    2
 11938 ;; This function calls:
 11939 ;;		Nothing
 11940 ;; This function is called by:
 11941 ;;		_SetLedBehavSts
 11942 ;; This function uses a non-reentrant model
 11943 ;;
 11944                           
 11945                           
 11946                           ;psect for function _Led_SetLedPulseTime
 11947  1681                     _Led_SetLedPulseTime:	
 11948                           
 11949                           ;incstack = 0
 11950                           ; Regs used in _Led_SetLedPulseTime: [wreg-fsr0h+status,2+status,0]
 11951                           ;Led_SetLedPulseTime@Led stored from wreg
 11952  1681  0020               	movlb	0	; select bank0
 11953  1682  00A0               	movwf	Led_SetLedPulseTime@Led
 11954                           
 11955                           ;led.c: 207: switch (Led)
 11956  1683  2E8A               	goto	l4167
 11957  1684                     l4163:	
 11958                           ;led.c: 208: {
 11959                           ;led.c: 209: case 1u:
 11960                           
 11961                           
 11962                           ;led.c: 210: Led1Pulse.LedPulseTimeMs = PulseTimeMs;
 11963  1684  0875               	movf	Led_SetLedPulseTime@PulseTimeMs+1,w
 11964  1685  0021               	movlb	1	; select bank1
 11965  1686  00DF               	movwf	((_Led1Pulse+1)^(0+128)+4)
 11966  1687  0874               	movf	Led_SetLedPulseTime@PulseTimeMs,w
 11967  1688  00DE               	movwf	(_Led1Pulse^(0+128)+4)
 11968                           
 11969                           ;led.c: 215: }
 11970                           
 11971                           ;led.c: 214: break;
 11972                           
 11973                           ;led.c: 213: default:
 11974                           
 11975                           ;led.c: 211: break;
 11976  1689  0008               	return
 11977  168A                     l4167:	
 11978  168A  0020               	movlb	0	; select bank0
 11979  168B  0820               	movf	Led_SetLedPulseTime@Led,w
 11980                           
 11981                           ; Switch size 1, requested type "space"
 11982                           ; Number of cases is 1, Range of values is 1 to 1
 11983                           ; switch strategies available:
 11984                           ; Name         Instructions Cycles
 11985                           ; simple_byte            4     3 (average)
 11986                           ; direct_byte           11     9 (fixed)
 11987                           ; jumptable            263     9 (fixed)
 11988                           ;	Chosen strategy is simple_byte
 11989  168C  3A01               	xorlw	1	; case 1
 11990  168D  1903               	skipnz
 11991  168E  2E84               	goto	l4163
 11992  168F  2E90               	goto	l673
 11993  1690                     l673:	
 11994  1690  0008               	return
 11995  1691                     __end_of_Led_SetLedPulseTime:	
 11996                           
 11997                           	psect	text50
 11998  174A                     __ptext50:	
 11999 ;; *************** function _Led_SetLedBlinkTime *****************
 12000 ;; Defined at:
 12001 ;;		line 180 in file "../../../Framework/MercuryFwk/Source/c/03_Sml/02_Ssl/led.c"
 12002 ;; Parameters:    Size  Location     Type
 12003 ;;  Led             1    wreg     unsigned char 
 12004 ;;  OnTimeMs        2    0[BANK0 ] unsigned short 
 12005 ;;  OffTimeMs       2    2[BANK0 ] unsigned short 
 12006 ;; Auto vars:     Size  Location     Type
 12007 ;;  Led             1    4[COMMON] unsigned char 
 12008 ;; Return value:  Size  Location     Type
 12009 ;;                  1    wreg      void 
 12010 ;; Registers used:
 12011 ;;		wreg, fsr0l, fsr0h, status,2, status,0
 12012 ;; Tracked objects:
 12013 ;;		On entry : 0/0
 12014 ;;		On exit  : 0/0
 12015 ;;		Unchanged: 0/0
 12016 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12017 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12018 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12019 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12020 ;;      Totals:         1       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12021 ;;Total ram usage:        5 bytes
 12022 ;; Hardware stack levels used:    1
 12023 ;; Hardware stack levels required when called:    2
 12024 ;; This function calls:
 12025 ;;		Nothing
 12026 ;; This function is called by:
 12027 ;;		_SetLedBehavSts
 12028 ;; This function uses a non-reentrant model
 12029 ;;
 12030                           
 12031                           
 12032                           ;psect for function _Led_SetLedBlinkTime
 12033  174A                     _Led_SetLedBlinkTime:	
 12034                           
 12035                           ;incstack = 0
 12036                           ; Regs used in _Led_SetLedBlinkTime: [wreg-fsr0h+status,2+status,0]
 12037                           ;Led_SetLedBlinkTime@Led stored from wreg
 12038  174A  00F4               	movwf	Led_SetLedBlinkTime@Led
 12039                           
 12040                           ;led.c: 183: switch (Led)
 12041  174B  2F5D               	goto	l4159
 12042  174C                     l4155:	
 12043                           ;led.c: 184: {
 12044                           ;led.c: 185: case 1u:
 12045                           
 12046                           
 12047                           ;led.c: 186: Led1Blink.LedOnTimeMs = OnTimeMs;
 12048  174C  0020               	movlb	0	; select bank0
 12049  174D  0821               	movf	Led_SetLedBlinkTime@OnTimeMs+1,w
 12050  174E  0021               	movlb	1	; select bank1
 12051  174F  00D6               	movwf	((_Led1Blink+1)^(0+128)+4)
 12052  1750  0020               	movlb	0	; select bank0
 12053  1751  0820               	movf	Led_SetLedBlinkTime@OnTimeMs,w
 12054  1752  0021               	movlb	1	; select bank1
 12055  1753  00D5               	movwf	(_Led1Blink^(0+128)+4)
 12056                           
 12057                           ;led.c: 187: Led1Blink.LedOffTimeMs = OffTimeMs;
 12058  1754  0020               	movlb	0	; select bank0
 12059  1755  0823               	movf	Led_SetLedBlinkTime@OffTimeMs+1,w
 12060  1756  0021               	movlb	1	; select bank1
 12061  1757  00D8               	movwf	((_Led1Blink+1)^(0+128)+6)
 12062  1758  0020               	movlb	0	; select bank0
 12063  1759  0822               	movf	Led_SetLedBlinkTime@OffTimeMs,w
 12064  175A  0021               	movlb	1	; select bank1
 12065  175B  00D7               	movwf	(_Led1Blink^(0+128)+6)
 12066                           
 12067                           ;led.c: 192: }
 12068                           
 12069                           ;led.c: 191: break;
 12070                           
 12071                           ;led.c: 190: default:
 12072                           
 12073                           ;led.c: 188: break;
 12074  175C  0008               	return
 12075  175D                     l4159:	
 12076  175D  0874               	movf	Led_SetLedBlinkTime@Led,w
 12077                           
 12078                           ; Switch size 1, requested type "space"
 12079                           ; Number of cases is 1, Range of values is 1 to 1
 12080                           ; switch strategies available:
 12081                           ; Name         Instructions Cycles
 12082                           ; simple_byte            4     3 (average)
 12083                           ; direct_byte           11     9 (fixed)
 12084                           ; jumptable            263     9 (fixed)
 12085                           ;	Chosen strategy is simple_byte
 12086  175E  3A01               	xorlw	1	; case 1
 12087  175F  1903               	skipnz
 12088  1760  2F4C               	goto	l4155
 12089  1761  2F62               	goto	l666
 12090  1762                     l666:	
 12091  1762  0008               	return
 12092  1763                     __end_of_Led_SetLedBlinkTime:	
 12093                           
 12094                           	psect	text51
 12095  1654                     __ptext51:	
 12096 ;; *************** function _LowPowerMode *****************
 12097 ;; Defined at:
 12098 ;;		line 161 in file "../../../Framework/MercuryFwk/Source/c/03_Sml/02_Ssl/std_ser.c"
 12099 ;; Parameters:    Size  Location     Type
 12100 ;;		None
 12101 ;; Auto vars:     Size  Location     Type
 12102 ;;		None
 12103 ;; Return value:  Size  Location     Type
 12104 ;;                  1    wreg      void 
 12105 ;; Registers used:
 12106 ;;		wreg, status,2, status,0, pclath, cstack
 12107 ;; Tracked objects:
 12108 ;;		On entry : 0/0
 12109 ;;		On exit  : 0/0
 12110 ;;		Unchanged: 0/0
 12111 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12112 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12113 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12114 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12115 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12116 ;;Total ram usage:        0 bytes
 12117 ;; Hardware stack levels used:    1
 12118 ;; Hardware stack levels required when called:    3
 12119 ;; This function calls:
 12120 ;;		_Mcu_SetWdgSts
 12121 ;; This function is called by:
 12122 ;;		_StdS_ManageStdServices
 12123 ;; This function uses a non-reentrant model
 12124 ;;
 12125                           
 12126                           
 12127                           ;psect for function _LowPowerMode
 12128  1654                     _LowPowerMode:	
 12129                           
 12130                           ;std_ser.c: 164: LATA = 0x00;
 12131                           
 12132                           ;incstack = 0
 12133                           ; Regs used in _LowPowerMode: [wreg+status,2+status,0+pclath+cstack]
 12134  1654  0022               	movlb	2	; select bank2
 12135  1655  018C               	clrf	12	;volatile
 12136                           
 12137                           ;std_ser.c: 166: LATB = 0x00;
 12138  1656  018D               	clrf	13	;volatile
 12139                           
 12140                           ;std_ser.c: 168: LATC = 0x00;
 12141  1657  018E               	clrf	14	;volatile
 12142                           
 12143                           ;std_ser.c: 170: Mcu_SetWdgSts(((UINT8)(0)));
 12144  1658  3000               	movlw	0
 12145  1659  3195  25E7  3196   	fcall	_Mcu_SetWdgSts
 12146  165C  0063               	sleep	;# 
 12147                           
 12148                           ;std_ser.c: 177: Mcu_SetWdgSts(((UINT8)(1)));
 12149  165D  3001               	movlw	1
 12150  165E  3195  25E7         	fcall	_Mcu_SetWdgSts
 12151  1660  0008               	return
 12152  1661                     __end_of_LowPowerMode:	
 12153                           
 12154                           	psect	text52
 12155  15E7                     __ptext52:	
 12156 ;; *************** function _Mcu_SetWdgSts *****************
 12157 ;; Defined at:
 12158 ;;		line 211 in file "../../../Framework/MercuryFwk/Source/c/01_Hal/02_Drv/mcu_drv.c"
 12159 ;; Parameters:    Size  Location     Type
 12160 ;;  WdgSts          1    wreg     unsigned char 
 12161 ;; Auto vars:     Size  Location     Type
 12162 ;;  WdgSts          1    4[COMMON] unsigned char 
 12163 ;; Return value:  Size  Location     Type
 12164 ;;                  1    wreg      void 
 12165 ;; Registers used:
 12166 ;;		wreg, status,0
 12167 ;; Tracked objects:
 12168 ;;		On entry : 0/0
 12169 ;;		On exit  : 0/0
 12170 ;;		Unchanged: 0/0
 12171 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12172 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12173 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12174 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12175 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12176 ;;Total ram usage:        1 bytes
 12177 ;; Hardware stack levels used:    1
 12178 ;; Hardware stack levels required when called:    2
 12179 ;; This function calls:
 12180 ;;		Nothing
 12181 ;; This function is called by:
 12182 ;;		_LowPowerMode
 12183 ;;		_Wdg_MainTask
 12184 ;; This function uses a non-reentrant model
 12185 ;;
 12186                           
 12187                           
 12188                           ;psect for function _Mcu_SetWdgSts
 12189  15E7                     _Mcu_SetWdgSts:	
 12190                           
 12191                           ;incstack = 0
 12192                           ; Regs used in _Mcu_SetWdgSts: [wreg+status,0]
 12193                           ;Mcu_SetWdgSts@WdgSts stored from wreg
 12194  15E7  00F4               	movwf	Mcu_SetWdgSts@WdgSts
 12195                           
 12196                           ;mcu_drv.c: 214: WDTCONbits.SWDTEN = WdgSts;
 12197  15E8  0C74               	rrf	Mcu_SetWdgSts@WdgSts,w
 12198  15E9  0021               	movlb	1	; select bank1
 12199  15EA  1C03               	skipc
 12200  15EB  1017               	bcf	23,0	;volatile
 12201  15EC  1803               	skipnc
 12202  15ED  1417               	bsf	23,0	;volatile
 12203  15EE  0008               	return
 12204  15EF                     __end_of_Mcu_SetWdgSts:	
 12205                           
 12206                           	psect	text53
 12207  1731                     __ptext53:	
 12208 ;; *************** function _GetDieTemperature *****************
 12209 ;; Defined at:
 12210 ;;		line 188 in file "../../../Framework/MercuryFwk/Source/c/03_Sml/02_Ssl/std_ser.c"
 12211 ;; Parameters:    Size  Location     Type
 12212 ;;		None
 12213 ;; Auto vars:     Size  Location     Type
 12214 ;;  DieTempRes      2    5[BANK0 ] unsigned short 
 12215 ;; Return value:  Size  Location     Type
 12216 ;;                  2    3[BANK0 ] unsigned short 
 12217 ;; Registers used:
 12218 ;;		wreg, status,2, status,0, pclath, cstack
 12219 ;; Tracked objects:
 12220 ;;		On entry : 0/0
 12221 ;;		On exit  : 0/0
 12222 ;;		Unchanged: 0/0
 12223 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12224 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12225 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12226 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12227 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12228 ;;Total ram usage:        4 bytes
 12229 ;; Hardware stack levels used:    1
 12230 ;; Hardware stack levels required when called:    3
 12231 ;; This function calls:
 12232 ;;		_Adc_GetConvResult
 12233 ;;		_Adc_GetConvSts
 12234 ;;		_Adc_SelectChannel
 12235 ;;		_Adc_StartConversion
 12236 ;; This function is called by:
 12237 ;;		_StdS_ManageStdServices
 12238 ;; This function uses a non-reentrant model
 12239 ;;
 12240                           
 12241                           
 12242                           ;psect for function _GetDieTemperature
 12243  1731                     _GetDieTemperature:	
 12244                           
 12245                           ;std_ser.c: 190: UINT16 DieTempRes;
 12246                           ;std_ser.c: 193: Adc_SelectChannel(((UINT8)(29)));
 12247                           
 12248                           ;incstack = 0
 12249                           ; Regs used in _GetDieTemperature: [wreg+status,2+status,0+pclath+cstack]
 12250  1731  301D               	movlw	29
 12251  1732  3196  2630  3197   	fcall	_Adc_SelectChannel
 12252                           
 12253                           ;std_ser.c: 195: Adc_StartConversion();
 12254  1735  3195  25CC  3197   	fcall	_Adc_StartConversion
 12255  1738                     l4283:	
 12256                           ;std_ser.c: 197: while (Adc_GetConvSts() == AdcConvInProgress);
 12257                           
 12258  1738  3195  25D2  3197   	fcall	_Adc_GetConvSts
 12259  173B  3A00               	xorlw	0
 12260  173C  1903               	skipnz
 12261  173D  2F38               	goto	l4283
 12262                           
 12263                           ;std_ser.c: 199: DieTempRes = Adc_GetConvResult();
 12264  173E  3196  2671         	fcall	_Adc_GetConvResult
 12265  1740  0875               	movf	?_Adc_GetConvResult+1,w
 12266  1741  0020               	movlb	0	; select bank0
 12267  1742  00A6               	movwf	GetDieTemperature@DieTempRes+1
 12268  1743  0874               	movf	?_Adc_GetConvResult,w
 12269  1744  00A5               	movwf	GetDieTemperature@DieTempRes
 12270                           
 12271                           ;std_ser.c: 201: return DieTempRes;
 12272  1745  0826               	movf	GetDieTemperature@DieTempRes+1,w
 12273  1746  00A4               	movwf	?_GetDieTemperature+1
 12274  1747  0825               	movf	GetDieTemperature@DieTempRes,w
 12275  1748  00A3               	movwf	?_GetDieTemperature
 12276  1749  0008               	return
 12277  174A                     __end_of_GetDieTemperature:	
 12278                           
 12279                           	psect	text54
 12280  15CC                     __ptext54:	
 12281 ;; *************** function _Adc_StartConversion *****************
 12282 ;; Defined at:
 12283 ;;		line 144 in file "../../../Framework/MercuryFwk/Source/c/01_Hal/02_Drv/adc_drv.c"
 12284 ;; Parameters:    Size  Location     Type
 12285 ;;		None
 12286 ;; Auto vars:     Size  Location     Type
 12287 ;;		None
 12288 ;; Return value:  Size  Location     Type
 12289 ;;                  1    wreg      void 
 12290 ;; Registers used:
 12291 ;;		None
 12292 ;; Tracked objects:
 12293 ;;		On entry : 0/0
 12294 ;;		On exit  : 0/0
 12295 ;;		Unchanged: 0/0
 12296 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12297 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12298 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12299 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12300 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12301 ;;Total ram usage:        0 bytes
 12302 ;; Hardware stack levels used:    1
 12303 ;; Hardware stack levels required when called:    2
 12304 ;; This function calls:
 12305 ;;		Nothing
 12306 ;; This function is called by:
 12307 ;;		_GetDieTemperature
 12308 ;; This function uses a non-reentrant model
 12309 ;;
 12310                           
 12311                           
 12312                           ;psect for function _Adc_StartConversion
 12313  15CC                     _Adc_StartConversion:	
 12314                           
 12315                           ;adc_drv.c: 147: ADCON0bits.GO_nDONE = ((UINT8)(1));
 12316                           
 12317                           ;incstack = 0
 12318                           ; Regs used in _Adc_StartConversion: []
 12319  15CC  0021               	movlb	1	; select bank1
 12320  15CD  149D               	bsf	29,1	;volatile
 12321  15CE  0008               	return
 12322  15CF                     __end_of_Adc_StartConversion:	
 12323                           
 12324                           	psect	text55
 12325  1630                     __ptext55:	
 12326 ;; *************** function _Adc_SelectChannel *****************
 12327 ;; Defined at:
 12328 ;;		line 130 in file "../../../Framework/MercuryFwk/Source/c/01_Hal/02_Drv/adc_drv.c"
 12329 ;; Parameters:    Size  Location     Type
 12330 ;;  SelCh           1    wreg     unsigned char 
 12331 ;; Auto vars:     Size  Location     Type
 12332 ;;  SelCh           1    5[COMMON] unsigned char 
 12333 ;; Return value:  Size  Location     Type
 12334 ;;                  1    wreg      void 
 12335 ;; Registers used:
 12336 ;;		wreg, status,2, status,0
 12337 ;; Tracked objects:
 12338 ;;		On entry : 0/0
 12339 ;;		On exit  : 0/0
 12340 ;;		Unchanged: 0/0
 12341 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12342 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12343 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12344 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12345 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12346 ;;Total ram usage:        2 bytes
 12347 ;; Hardware stack levels used:    1
 12348 ;; Hardware stack levels required when called:    2
 12349 ;; This function calls:
 12350 ;;		Nothing
 12351 ;; This function is called by:
 12352 ;;		_GetDieTemperature
 12353 ;; This function uses a non-reentrant model
 12354 ;;
 12355                           
 12356                           
 12357                           ;psect for function _Adc_SelectChannel
 12358  1630                     _Adc_SelectChannel:	
 12359                           
 12360                           ;incstack = 0
 12361                           ; Regs used in _Adc_SelectChannel: [wreg+status,2+status,0]
 12362                           ;Adc_SelectChannel@SelCh stored from wreg
 12363  1630  00F5               	movwf	Adc_SelectChannel@SelCh
 12364                           
 12365                           ;adc_drv.c: 133: ADCON0bits.CHS = SelCh;
 12366  1631  0875               	movf	Adc_SelectChannel@SelCh,w
 12367  1632  00F4               	movwf	??_Adc_SelectChannel
 12368  1633  0DF4               	rlf	??_Adc_SelectChannel,f
 12369  1634  0DF4               	rlf	??_Adc_SelectChannel,f
 12370  1635  0021               	movlb	1	; select bank1
 12371  1636  081D               	movf	29,w	;volatile
 12372  1637  0674               	xorwf	??_Adc_SelectChannel,w
 12373  1638  3983               	andlw	-125
 12374  1639  0674               	xorwf	??_Adc_SelectChannel,w
 12375  163A  009D               	movwf	29	;volatile
 12376  163B  0008               	return
 12377  163C                     __end_of_Adc_SelectChannel:	
 12378                           
 12379                           	psect	text56
 12380  15D2                     __ptext56:	
 12381 ;; *************** function _Adc_GetConvSts *****************
 12382 ;; Defined at:
 12383 ;;		line 158 in file "../../../Framework/MercuryFwk/Source/c/01_Hal/02_Drv/adc_drv.c"
 12384 ;; Parameters:    Size  Location     Type
 12385 ;;		None
 12386 ;; Auto vars:     Size  Location     Type
 12387 ;;		None
 12388 ;; Return value:  Size  Location     Type
 12389 ;;                  1    wreg      enum E3651
 12390 ;; Registers used:
 12391 ;;		wreg, status,2, status,0
 12392 ;; Tracked objects:
 12393 ;;		On entry : 0/0
 12394 ;;		On exit  : 0/0
 12395 ;;		Unchanged: 0/0
 12396 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12397 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12398 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12399 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12400 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12401 ;;Total ram usage:        0 bytes
 12402 ;; Hardware stack levels used:    1
 12403 ;; Hardware stack levels required when called:    2
 12404 ;; This function calls:
 12405 ;;		Nothing
 12406 ;; This function is called by:
 12407 ;;		_GetDieTemperature
 12408 ;; This function uses a non-reentrant model
 12409 ;;
 12410                           
 12411                           
 12412                           ;psect for function _Adc_GetConvSts
 12413  15D2                     _Adc_GetConvSts:	
 12414                           
 12415                           ;adc_drv.c: 161: return ((AdcConvStsType)(ADCON0bits.GO_nDONE));
 12416                           
 12417                           ;incstack = 0
 12418                           ; Regs used in _Adc_GetConvSts: [wreg+status,2+status,0]
 12419  15D2  0021               	movlb	1	; select bank1
 12420  15D3  0C1D               	rrf	29,w	;volatile
 12421  15D4  3901               	andlw	1
 12422  15D5  0008               	return
 12423  15D6                     __end_of_Adc_GetConvSts:	
 12424                           
 12425                           	psect	text57
 12426  1671                     __ptext57:	
 12427 ;; *************** function _Adc_GetConvResult *****************
 12428 ;; Defined at:
 12429 ;;		line 172 in file "../../../Framework/MercuryFwk/Source/c/01_Hal/02_Drv/adc_drv.c"
 12430 ;; Parameters:    Size  Location     Type
 12431 ;;		None
 12432 ;; Auto vars:     Size  Location     Type
 12433 ;;  AdcResult       2    1[BANK0 ] unsigned short 
 12434 ;; Return value:  Size  Location     Type
 12435 ;;                  2    4[COMMON] unsigned short 
 12436 ;; Registers used:
 12437 ;;		wreg, status,2, status,0
 12438 ;; Tracked objects:
 12439 ;;		On entry : 0/0
 12440 ;;		On exit  : 0/0
 12441 ;;		Unchanged: 0/0
 12442 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12443 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12444 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12445 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12446 ;;      Totals:         2       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12447 ;;Total ram usage:        5 bytes
 12448 ;; Hardware stack levels used:    1
 12449 ;; Hardware stack levels required when called:    2
 12450 ;; This function calls:
 12451 ;;		Nothing
 12452 ;; This function is called by:
 12453 ;;		_GetDieTemperature
 12454 ;; This function uses a non-reentrant model
 12455 ;;
 12456                           
 12457                           
 12458                           ;psect for function _Adc_GetConvResult
 12459  1671                     _Adc_GetConvResult:	
 12460                           
 12461                           ;adc_drv.c: 174: UINT16 AdcResult;
 12462                           ;adc_drv.c: 177: AdcResult = (((ADRESH & 0x03) << 8) | ADRESL);
 12463                           
 12464                           ;incstack = 0
 12465                           ; Regs used in _Adc_GetConvResult: [wreg+status,2+status,0]
 12466  1671  3003               	movlw	3
 12467  1672  0021               	movlb	1	; select bank1
 12468  1673  051C               	andwf	28,w	;volatile
 12469  1674  0020               	movlb	0	; select bank0
 12470  1675  00A0               	movwf	??_Adc_GetConvResult
 12471  1676  0820               	movf	??_Adc_GetConvResult,w
 12472  1677  00A2               	movwf	Adc_GetConvResult@AdcResult+1
 12473  1678  0021               	movlb	1	; select bank1
 12474  1679  081B               	movf	27,w	;volatile
 12475  167A  0020               	movlb	0	; select bank0
 12476  167B  00A1               	movwf	Adc_GetConvResult@AdcResult
 12477                           
 12478                           ;adc_drv.c: 179: return AdcResult;
 12479  167C  0822               	movf	Adc_GetConvResult@AdcResult+1,w
 12480  167D  00F5               	movwf	?_Adc_GetConvResult+1
 12481  167E  0821               	movf	Adc_GetConvResult@AdcResult,w
 12482  167F  00F4               	movwf	?_Adc_GetConvResult
 12483  1680  0008               	return
 12484  1681                     __end_of_Adc_GetConvResult:	
 12485                           
 12486                           	psect	text58
 12487  17DE                     __ptext58:	
 12488 ;; *************** function _GenerateEvt *****************
 12489 ;; Defined at:
 12490 ;;		line 73 in file "../../../Framework/MercuryFwk/Source/c/02_Osl/os_ser.c"
 12491 ;; Parameters:    Size  Location     Type
 12492 ;;  Event           1    wreg     PTR struct _EventStructu
 12493 ;;		 -> I2cReplyPacketReady(2), I2cWriteRequest(2), I2cSetAddress(2), I2cNewTxNotification(2), 
 12494 ;;		 -> I2cNewPacketNotification(2), 
 12495 ;; Auto vars:     Size  Location     Type
 12496 ;;  Event           1    1[BANK0 ] PTR struct _EventStructu
 12497 ;;		 -> I2cReplyPacketReady(2), I2cWriteRequest(2), I2cSetAddress(2), I2cNewTxNotification(2), 
 12498 ;;		 -> I2cNewPacketNotification(2), 
 12499 ;;  EventStatus     1    0[BANK0 ] enum E3629
 12500 ;; Return value:  Size  Location     Type
 12501 ;;                  1    wreg      enum E3625
 12502 ;; Registers used:
 12503 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 12504 ;; Tracked objects:
 12505 ;;		On entry : 0/0
 12506 ;;		On exit  : 0/0
 12507 ;;		Unchanged: 0/0
 12508 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12509 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12510 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12511 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12512 ;;      Totals:         1       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12513 ;;Total ram usage:        3 bytes
 12514 ;; Hardware stack levels used:    1
 12515 ;; Hardware stack levels required when called:    2
 12516 ;; This function calls:
 12517 ;;		Nothing
 12518 ;; This function is called by:
 12519 ;;		_I2c_DataReceiveSm
 12520 ;;		_I2cSlv_I2cDrvHandle
 12521 ;;		_StdS_ManageStdServices
 12522 ;;		_AppSm
 12523 ;; This function uses a non-reentrant model
 12524 ;;
 12525                           
 12526                           
 12527                           ;psect for function _GenerateEvt
 12528  17DE                     _GenerateEvt:	
 12529                           
 12530                           ;incstack = 0
 12531                           ; Regs used in _GenerateEvt: [wreg+fsr1l+fsr1h+status,2+status,0]
 12532                           ;GenerateEvt@Event stored from wreg
 12533  17DE  0020               	movlb	0	; select bank0
 12534  17DF  00A1               	movwf	GenerateEvt@Event
 12535                           
 12536                           ;os_ser.c: 76: EventStatusType EventStatus = EventIdle;
 12537  17E0  01A0               	clrf	GenerateEvt@EventStatus
 12538                           
 12539                           ;os_ser.c: 78: if ((Event->EventOptions != ((UINT8)(2))) && (Event->EventOptions != ((UI
      +                          NT8)(3))))
 12540  17E1  0821               	movf	GenerateEvt@Event,w
 12541  17E2  0086               	movwf	6
 12542  17E3  0187               	clrf	7
 12543  17E4  3002               	movlw	2
 12544  17E5  0601               	xorwf	1,w
 12545  17E6  1903               	btfsc	3,2
 12546  17E7  2FFB               	goto	l4227
 12547  17E8  0821               	movf	GenerateEvt@Event,w
 12548  17E9  0086               	movwf	6
 12549  17EA  0187               	clrf	7
 12550  17EB  3003               	movlw	3
 12551  17EC  0601               	xorwf	1,w
 12552  17ED  1903               	btfsc	3,2
 12553  17EE  2FFB               	goto	l4227
 12554                           
 12555                           ;os_ser.c: 79: {
 12556                           ;os_ser.c: 81: Event->EventStatus = EventSent;
 12557  17EF  3002               	movlw	2
 12558  17F0  00F4               	movwf	??_GenerateEvt
 12559  17F1  0A21               	incf	GenerateEvt@Event,w
 12560  17F2  0086               	movwf	6
 12561  17F3  0187               	clrf	7
 12562  17F4  0874               	movf	??_GenerateEvt,w
 12563  17F5  0081               	movwf	1
 12564                           
 12565                           ;os_ser.c: 83: EventStatus = EventSent;
 12566  17F6  3002               	movlw	2
 12567  17F7  00F4               	movwf	??_GenerateEvt
 12568  17F8  0874               	movf	??_GenerateEvt,w
 12569  17F9  00A0               	movwf	GenerateEvt@EventStatus
 12570                           
 12571                           ;os_ser.c: 84: }
 12572  17FA  0008               	return
 12573  17FB                     l4227:	
 12574                           
 12575                           ;os_ser.c: 85: else
 12576                           ;os_ser.c: 86: {
 12577                           ;os_ser.c: 88: EventStatus = EventNotSent;
 12578  17FB  3003               	movlw	3
 12579  17FC  00F4               	movwf	??_GenerateEvt
 12580  17FD  0874               	movf	??_GenerateEvt,w
 12581  17FE  00A0               	movwf	GenerateEvt@EventStatus
 12582  17FF  0008               	return
 12583  1800                     __end_of_GenerateEvt:	
 12584                           ;os_ser.c: 89: }
 12585                           ;os_ser.c: 92: return(EventStatus);
 12586                           ;	Return value of _GenerateEvt is never used
 12587                           
 12588                           
 12589                           	psect	text59
 12590  16B1                     __ptext59:	
 12591 ;; *************** function _ControlLedDirect *****************
 12592 ;; Defined at:
 12593 ;;		line 122 in file "../../../Framework/MercuryFwk/Source/c/03_Sml/02_Ssl/std_ser.c"
 12594 ;; Parameters:    Size  Location     Type
 12595 ;;		None
 12596 ;; Auto vars:     Size  Location     Type
 12597 ;;		None
 12598 ;; Return value:  Size  Location     Type
 12599 ;;                  1    wreg      void 
 12600 ;; Registers used:
 12601 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
 12602 ;; Tracked objects:
 12603 ;;		On entry : 0/0
 12604 ;;		On exit  : 0/0
 12605 ;;		Unchanged: 0/0
 12606 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12607 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12608 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12609 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12610 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12611 ;;Total ram usage:        0 bytes
 12612 ;; Hardware stack levels used:    1
 12613 ;; Hardware stack levels required when called:    3
 12614 ;; This function calls:
 12615 ;;		_Led_SetLedStatus
 12616 ;; This function is called by:
 12617 ;;		_StdS_ManageStdServices
 12618 ;; This function uses a non-reentrant model
 12619 ;;
 12620                           
 12621                           
 12622                           ;psect for function _ControlLedDirect
 12623  16B1                     _ControlLedDirect:	
 12624                           
 12625                           ;std_ser.c: 125: if (LedBehaviourSts == ((UINT8)(3)))
 12626                           
 12627                           ;incstack = 0
 12628                           ; Regs used in _ControlLedDirect: [wreg-fsr0h+status,2+status,0+pclath+cstack]
 12629  16B1  3003               	movlw	3
 12630  16B2  0679               	xorwf	_LedBehaviourSts,w
 12631  16B3  1D03               	btfss	3,2
 12632  16B4  0008               	return
 12633                           
 12634                           ;std_ser.c: 126: {
 12635                           ;std_ser.c: 128: if (CmdBuffer[((UINT8)(1))] == ((UINT8)(1)))
 12636  16B5  0023               	movlb	3	; select bank3
 12637  16B6  0321               	decf	(_CmdBuffer^(0+384)+1),w
 12638  16B7  1D03               	btfss	3,2
 12639  16B8  2EBF               	goto	l4269
 12640                           
 12641                           ;std_ser.c: 129: {
 12642                           ;std_ser.c: 130: Led_SetLedStatus(1u,LED_STS_ON);
 12643  16B9  01F4               	clrf	Led_SetLedStatus@LedSts
 12644  16BA  0AF4               	incf	Led_SetLedStatus@LedSts,f
 12645  16BB  3001               	movlw	1
 12646  16BC  3196  2661         	fcall	_Led_SetLedStatus
 12647                           
 12648                           ;std_ser.c: 131: }
 12649  16BE  0008               	return
 12650  16BF                     l4269:	
 12651                           
 12652                           ;std_ser.c: 132: else
 12653                           ;std_ser.c: 133: {
 12654                           ;std_ser.c: 134: Led_SetLedStatus(1u,LED_STS_OFF);
 12655  16BF  01F4               	clrf	Led_SetLedStatus@LedSts
 12656  16C0  3001               	movlw	1
 12657  16C1  3196  2661         	fcall	_Led_SetLedStatus
 12658  16C3  0008               	return
 12659  16C4                     __end_of_ControlLedDirect:	
 12660                           
 12661                           	psect	text60
 12662  1661                     __ptext60:	
 12663 ;; *************** function _Led_SetLedStatus *****************
 12664 ;; Defined at:
 12665 ;;		line 156 in file "../../../Framework/MercuryFwk/Source/c/03_Sml/02_Ssl/led.c"
 12666 ;; Parameters:    Size  Location     Type
 12667 ;;  Led             1    wreg     unsigned char 
 12668 ;;  LedSts          1    4[COMMON] unsigned char 
 12669 ;; Auto vars:     Size  Location     Type
 12670 ;;  Led             1    0[BANK0 ] unsigned char 
 12671 ;; Return value:  Size  Location     Type
 12672 ;;                  1    wreg      void 
 12673 ;; Registers used:
 12674 ;;		wreg, fsr0l, fsr0h, status,2, status,0
 12675 ;; Tracked objects:
 12676 ;;		On entry : 0/0
 12677 ;;		On exit  : 0/0
 12678 ;;		Unchanged: 0/0
 12679 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12680 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12681 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12682 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12683 ;;      Totals:         2       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12684 ;;Total ram usage:        3 bytes
 12685 ;; Hardware stack levels used:    1
 12686 ;; Hardware stack levels required when called:    2
 12687 ;; This function calls:
 12688 ;;		Nothing
 12689 ;; This function is called by:
 12690 ;;		_LedPulseStateMachine
 12691 ;;		_I2cSlv_I2cDrvHandle
 12692 ;;		_SetLedBehavSts
 12693 ;;		_ControlLedDirect
 12694 ;; This function uses a non-reentrant model
 12695 ;;
 12696                           
 12697                           
 12698                           ;psect for function _Led_SetLedStatus
 12699  1661                     _Led_SetLedStatus:	
 12700                           
 12701                           ;incstack = 0
 12702                           ; Regs used in _Led_SetLedStatus: [wreg-fsr0h+status,2+status,0]
 12703                           ;Led_SetLedStatus@Led stored from wreg
 12704  1661  0020               	movlb	0	; select bank0
 12705  1662  00A0               	movwf	Led_SetLedStatus@Led
 12706                           
 12707                           ;led.c: 159: switch (Led)
 12708  1663  2E6A               	goto	l4149
 12709  1664                     l4145:	
 12710                           ;led.c: 160: {
 12711                           ;led.c: 161: case 1u:
 12712                           
 12713                           
 12714                           ;led.c: 162: Led1Sts = LedSts;
 12715  1664  0874               	movf	Led_SetLedStatus@LedSts,w
 12716  1665  00F5               	movwf	??_Led_SetLedStatus
 12717  1666  0875               	movf	??_Led_SetLedStatus,w
 12718  1667  0021               	movlb	1	; select bank1
 12719  1668  00EA               	movwf	_Led1Sts^(0+128)
 12720                           
 12721                           ;led.c: 167: }
 12722                           
 12723                           ;led.c: 166: break;
 12724                           
 12725                           ;led.c: 165: default:
 12726                           
 12727                           ;led.c: 163: break;
 12728  1669  0008               	return
 12729  166A                     l4149:	
 12730  166A  0020               	movlb	0	; select bank0
 12731  166B  0820               	movf	Led_SetLedStatus@Led,w
 12732                           
 12733                           ; Switch size 1, requested type "space"
 12734                           ; Number of cases is 1, Range of values is 1 to 1
 12735                           ; switch strategies available:
 12736                           ; Name         Instructions Cycles
 12737                           ; simple_byte            4     3 (average)
 12738                           ; direct_byte           11     9 (fixed)
 12739                           ; jumptable            263     9 (fixed)
 12740                           ;	Chosen strategy is simple_byte
 12741  166C  3A01               	xorlw	1	; case 1
 12742  166D  1903               	skipnz
 12743  166E  2E64               	goto	l4145
 12744  166F  2E70               	goto	l659
 12745  1670                     l659:	
 12746  1670  0008               	return
 12747  1671                     __end_of_Led_SetLedStatus:	
 12748                           
 12749                           	psect	text61
 12750  15C4                     __ptext61:	
 12751 ;; *************** function _BoardReset *****************
 12752 ;; Defined at:
 12753 ;;		line 147 in file "../../../Framework/MercuryFwk/Source/c/03_Sml/02_Ssl/std_ser.c"
 12754 ;; Parameters:    Size  Location     Type
 12755 ;;		None
 12756 ;; Auto vars:     Size  Location     Type
 12757 ;;		None
 12758 ;; Return value:  Size  Location     Type
 12759 ;;                  1    wreg      void 
 12760 ;; Registers used:
 12761 ;;		None
 12762 ;; Tracked objects:
 12763 ;;		On entry : 0/0
 12764 ;;		On exit  : 0/0
 12765 ;;		Unchanged: 0/0
 12766 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12767 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12768 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12769 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12770 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12771 ;;Total ram usage:        0 bytes
 12772 ;; Hardware stack levels used:    1
 12773 ;; Hardware stack levels required when called:    2
 12774 ;; This function calls:
 12775 ;;		Nothing
 12776 ;; This function is called by:
 12777 ;;		_StdS_ManageStdServices
 12778 ;; This function uses a non-reentrant model
 12779 ;;
 12780                           
 12781                           
 12782                           ;psect for function _BoardReset
 12783  15C4                     _BoardReset:	
 12784                           
 12785                           ;incstack = 0
 12786                           ; Regs used in _BoardReset: []
 12787  15C4  0001               	reset	;# 
 12788  15C5  0008               	return
 12789  15C6                     __end_of_BoardReset:	
 12790                           
 12791                           	psect	text62
 12792  17BD                     __ptext62:	
 12793 ;; *************** function _ReceiveEvt *****************
 12794 ;; Defined at:
 12795 ;;		line 103 in file "../../../Framework/MercuryFwk/Source/c/02_Osl/os_ser.c"
 12796 ;; Parameters:    Size  Location     Type
 12797 ;;  Event           1    wreg     PTR struct _EventStructu
 12798 ;;		 -> I2cReplyPacketReady(2), I2cWriteRequest(2), I2cSetAddress(2), I2cNewTxNotification(2), 
 12799 ;;		 -> I2cNewPacketNotification(2), 
 12800 ;; Auto vars:     Size  Location     Type
 12801 ;;  Event           1    5[COMMON] PTR struct _EventStructu
 12802 ;;		 -> I2cReplyPacketReady(2), I2cWriteRequest(2), I2cSetAddress(2), I2cNewTxNotification(2), 
 12803 ;;		 -> I2cNewPacketNotification(2), 
 12804 ;;  EventStatus     1    4[COMMON] enum E3629
 12805 ;; Return value:  Size  Location     Type
 12806 ;;                  1    wreg      enum E3625
 12807 ;; Registers used:
 12808 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 12809 ;; Tracked objects:
 12810 ;;		On entry : 0/0
 12811 ;;		On exit  : 0/0
 12812 ;;		Unchanged: 0/0
 12813 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12814 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12815 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12816 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12817 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12818 ;;Total ram usage:        2 bytes
 12819 ;; Hardware stack levels used:    1
 12820 ;; Hardware stack levels required when called:    2
 12821 ;; This function calls:
 12822 ;;		Nothing
 12823 ;; This function is called by:
 12824 ;;		_I2c_DataReceiveSm
 12825 ;;		_I2cSlv_I2cDrvHandle
 12826 ;;		_ManageProtocol
 12827 ;; This function uses a non-reentrant model
 12828 ;;
 12829                           
 12830                           
 12831                           ;psect for function _ReceiveEvt
 12832  17BD                     _ReceiveEvt:	
 12833                           
 12834                           ;incstack = 0
 12835                           ; Regs used in _ReceiveEvt: [wreg+fsr1l+fsr1h+status,2+status,0]
 12836                           ;ReceiveEvt@Event stored from wreg
 12837  17BD  00F5               	movwf	ReceiveEvt@Event
 12838                           
 12839                           ;os_ser.c: 106: EventStatusType EventStatus = EventIdle;
 12840  17BE  01F4               	clrf	ReceiveEvt@EventStatus
 12841                           
 12842                           ;os_ser.c: 108: if ((Event->EventOptions != ((UINT8)(1))) && (Event->EventOptions != ((U
      +                          INT8)(3))))
 12843  17BF  0875               	movf	ReceiveEvt@Event,w
 12844  17C0  0086               	movwf	6
 12845  17C1  0187               	clrf	7
 12846  17C2  0301               	decf	1,w
 12847  17C3  1903               	btfsc	3,2
 12848  17C4  2FDC               	goto	l4335
 12849  17C5  0875               	movf	ReceiveEvt@Event,w
 12850  17C6  0086               	movwf	6
 12851  17C7  0187               	clrf	7
 12852  17C8  3003               	movlw	3
 12853  17C9  0601               	xorwf	1,w
 12854  17CA  1903               	btfsc	3,2
 12855  17CB  2FDC               	goto	l4335
 12856                           
 12857                           ;os_ser.c: 109: {
 12858                           ;os_ser.c: 111: if (Event->EventStatus == EventSent)
 12859  17CC  0A75               	incf	ReceiveEvt@Event,w
 12860  17CD  0086               	movwf	6
 12861  17CE  0187               	clrf	7
 12862  17CF  3002               	movlw	2
 12863  17D0  0601               	xorwf	1,w
 12864  17D1  1D03               	btfss	3,2
 12865  17D2  2FDB               	goto	l4333
 12866                           
 12867                           ;os_ser.c: 112: {
 12868                           ;os_ser.c: 114: Event->EventStatus = EventReceived;
 12869  17D3  0A75               	incf	ReceiveEvt@Event,w
 12870  17D4  0086               	movwf	6
 12871  17D5  0187               	clrf	7
 12872  17D6  0181               	clrf	1
 12873  17D7  0A81               	incf	1,f
 12874                           
 12875                           ;os_ser.c: 116: EventStatus = EventReceived;
 12876  17D8  01F4               	clrf	ReceiveEvt@EventStatus
 12877  17D9  0AF4               	incf	ReceiveEvt@EventStatus,f
 12878                           
 12879                           ;os_ser.c: 117: }
 12880  17DA  2FDC               	goto	l4335
 12881  17DB                     l4333:	
 12882                           
 12883                           ;os_ser.c: 118: else
 12884                           ;os_ser.c: 119: {
 12885                           ;os_ser.c: 121: EventStatus = EventIdle;
 12886  17DB  01F4               	clrf	ReceiveEvt@EventStatus
 12887  17DC                     l4335:	
 12888                           
 12889                           ;os_ser.c: 122: }
 12890                           ;os_ser.c: 123: }
 12891                           ;os_ser.c: 126: return(EventStatus);
 12892  17DC  0874               	movf	ReceiveEvt@EventStatus,w
 12893  17DD  0008               	return
 12894  17DE                     __end_of_ReceiveEvt:	
 12895                           
 12896                           	psect	text63
 12897  04DB                     __ptext63:	
 12898 ;; *************** function _Npdrv_Ch3_WriteNeopixelColor *****************
 12899 ;; Defined at:
 12900 ;;		line 274 in file "../../../Framework/MercuryFwk/Source/c/01_Hal/02_Drv/neopixel_drv.c"
 12901 ;; Parameters:    Size  Location     Type
 12902 ;;  PixNumb         1    wreg     unsigned char 
 12903 ;;  Green           1    0[BANK0 ] unsigned char 
 12904 ;;  Red             1    1[BANK0 ] unsigned char 
 12905 ;;  Blue            1    2[BANK0 ] unsigned char 
 12906 ;; Auto vars:     Size  Location     Type
 12907 ;;  PixNumb         1   27[BANK0 ] unsigned char 
 12908 ;;  BlueBitArray    8   19[BANK0 ] unsigned char [8]
 12909 ;;  RedBitArray     8   11[BANK0 ] unsigned char [8]
 12910 ;;  GreenBitArra    8    3[BANK0 ] unsigned char [8]
 12911 ;;  i               1   29[BANK0 ] unsigned char 
 12912 ;;  j               1   28[BANK0 ] unsigned char 
 12913 ;; Return value:  Size  Location     Type
 12914 ;;                  1    wreg      void 
 12915 ;; Registers used:
 12916 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12917 ;; Tracked objects:
 12918 ;;		On entry : 0/0
 12919 ;;		On exit  : 0/0
 12920 ;;		Unchanged: 0/0
 12921 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12922 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12923 ;;      Locals:         0      27       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12924 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12925 ;;      Totals:         2      30       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12926 ;;Total ram usage:       32 bytes
 12927 ;; Hardware stack levels used:    1
 12928 ;; Hardware stack levels required when called:    3
 12929 ;; This function calls:
 12930 ;;		_Mcu_DisableInterrupts
 12931 ;;		_Mcu_EnableInterrupts
 12932 ;; This function is called by:
 12933 ;;		_ManageProtocol
 12934 ;; This function uses a non-reentrant model
 12935 ;;
 12936                           
 12937                           
 12938                           ;psect for function _Npdrv_Ch3_WriteNeopixelColor
 12939  04DB                     _Npdrv_Ch3_WriteNeopixelColor:	
 12940                           
 12941                           ;incstack = 0
 12942                           ; Regs used in _Npdrv_Ch3_WriteNeopixelColor: [wreg+fsr1l+fsr1h+status,2+status,0+pclath
      +                          +cstack]
 12943                           ;Npdrv_Ch3_WriteNeopixelColor@PixNumb stored from wreg
 12944  04DB  0020               	movlb	0	; select bank0
 12945  04DC  00BB               	movwf	Npdrv_Ch3_WriteNeopixelColor@PixNumb
 12946                           
 12947                           ;neopixel_drv.c: 276: UINT8 i,j;
 12948                           ;neopixel_drv.c: 277: UINT8 GreenBitArray[8];
 12949                           ;neopixel_drv.c: 278: UINT8 RedBitArray[8];
 12950                           ;neopixel_drv.c: 279: UINT8 BlueBitArray[8];
 12951                           ;neopixel_drv.c: 281: for (i = 0; i < 8; i++)
 12952  04DD  01BD               	clrf	Npdrv_Ch3_WriteNeopixelColor@i
 12953  04DE  3008               	movlw	8
 12954  04DF  023D               	subwf	Npdrv_Ch3_WriteNeopixelColor@i,w
 12955  04E0  1803               	btfsc	3,0
 12956  04E1  2D23               	goto	l4495
 12957  04E2                     l4489:	
 12958                           
 12959                           ;neopixel_drv.c: 282: {
 12960                           ;neopixel_drv.c: 283: GreenBitArray[i] = ((Green >> (7 - i)) & 0x01);
 12961  04E2  0820               	movf	Npdrv_Ch3_WriteNeopixelColor@Green,w
 12962  04E3  00F4               	movwf	??_Npdrv_Ch3_WriteNeopixelColor
 12963  04E4  033D               	decf	Npdrv_Ch3_WriteNeopixelColor@i,w
 12964  04E5  3AFF               	xorlw	255
 12965  04E6  3E07               	addlw	7
 12966  04E7  0A89               	incf	9,f
 12967  04E8  2CEA               	goto	u4024
 12968  04E9                     u4025:	
 12969  04E9  36F4               	lsrf	??_Npdrv_Ch3_WriteNeopixelColor,f
 12970  04EA                     u4024:	
 12971  04EA  0B89               	decfsz	9,f
 12972  04EB  2CE9               	goto	u4025
 12973  04EC  0874               	movf	??_Npdrv_Ch3_WriteNeopixelColor,w
 12974  04ED  3901               	andlw	1
 12975  04EE  00F5               	movwf	??_Npdrv_Ch3_WriteNeopixelColor+1
 12976  04EF  083D               	movf	Npdrv_Ch3_WriteNeopixelColor@i,w
 12977  04F0  3E23               	addlw	(low (Npdrv_Ch3_WriteNeopixelColor@GreenBitArray| 0))& (0+255)
 12978  04F1  0086               	movwf	6
 12979  04F2  0187               	clrf	7
 12980  04F3  0875               	movf	??_Npdrv_Ch3_WriteNeopixelColor+1,w
 12981  04F4  0081               	movwf	1
 12982                           
 12983                           ;neopixel_drv.c: 284: RedBitArray[i] = ((Red >> (7 - i)) & 0x01);
 12984  04F5  0821               	movf	Npdrv_Ch3_WriteNeopixelColor@Red,w
 12985  04F6  00F4               	movwf	??_Npdrv_Ch3_WriteNeopixelColor
 12986  04F7  033D               	decf	Npdrv_Ch3_WriteNeopixelColor@i,w
 12987  04F8  3AFF               	xorlw	255
 12988  04F9  3E07               	addlw	7
 12989  04FA  0A89               	incf	9,f
 12990  04FB  2CFD               	goto	u4034
 12991  04FC                     u4035:	
 12992  04FC  36F4               	lsrf	??_Npdrv_Ch3_WriteNeopixelColor,f
 12993  04FD                     u4034:	
 12994  04FD  0B89               	decfsz	9,f
 12995  04FE  2CFC               	goto	u4035
 12996  04FF  0874               	movf	??_Npdrv_Ch3_WriteNeopixelColor,w
 12997  0500  3901               	andlw	1
 12998  0501  00F5               	movwf	??_Npdrv_Ch3_WriteNeopixelColor+1
 12999  0502  083D               	movf	Npdrv_Ch3_WriteNeopixelColor@i,w
 13000  0503  3E2B               	addlw	(low (Npdrv_Ch3_WriteNeopixelColor@RedBitArray| 0))& (0+255)
 13001  0504  0086               	movwf	6
 13002  0505  0187               	clrf	7
 13003  0506  0875               	movf	??_Npdrv_Ch3_WriteNeopixelColor+1,w
 13004  0507  0081               	movwf	1
 13005                           
 13006                           ;neopixel_drv.c: 285: BlueBitArray[i] = ((Blue >> (7 - i)) & 0x01);
 13007  0508  0822               	movf	Npdrv_Ch3_WriteNeopixelColor@Blue,w
 13008  0509  00F4               	movwf	??_Npdrv_Ch3_WriteNeopixelColor
 13009  050A  033D               	decf	Npdrv_Ch3_WriteNeopixelColor@i,w
 13010  050B  3AFF               	xorlw	255
 13011  050C  3E07               	addlw	7
 13012  050D  0A89               	incf	9,f
 13013  050E  2D10               	goto	u4044
 13014  050F                     u4045:	
 13015  050F  36F4               	lsrf	??_Npdrv_Ch3_WriteNeopixelColor,f
 13016  0510                     u4044:	
 13017  0510  0B89               	decfsz	9,f
 13018  0511  2D0F               	goto	u4045
 13019  0512  0874               	movf	??_Npdrv_Ch3_WriteNeopixelColor,w
 13020  0513  3901               	andlw	1
 13021  0514  00F5               	movwf	??_Npdrv_Ch3_WriteNeopixelColor+1
 13022  0515  083D               	movf	Npdrv_Ch3_WriteNeopixelColor@i,w
 13023  0516  3E33               	addlw	(low (Npdrv_Ch3_WriteNeopixelColor@BlueBitArray| 0))& (0+255)
 13024  0517  0086               	movwf	6
 13025  0518  0187               	clrf	7
 13026  0519  0875               	movf	??_Npdrv_Ch3_WriteNeopixelColor+1,w
 13027  051A  0081               	movwf	1
 13028  051B  3001               	movlw	1
 13029  051C  00F4               	movwf	??_Npdrv_Ch3_WriteNeopixelColor
 13030  051D  0874               	movf	??_Npdrv_Ch3_WriteNeopixelColor,w
 13031  051E  07BD               	addwf	Npdrv_Ch3_WriteNeopixelColor@i,f
 13032  051F  3008               	movlw	8
 13033  0520  023D               	subwf	Npdrv_Ch3_WriteNeopixelColor@i,w
 13034  0521  1C03               	skipc
 13035  0522  2CE2               	goto	l4489
 13036  0523                     l4495:	
 13037                           
 13038                           ;neopixel_drv.c: 286: }
 13039                           ;neopixel_drv.c: 289: Mcu_DisableInterrupts();
 13040  0523  3195  25C6  3184   	fcall	_Mcu_DisableInterrupts
 13041                           
 13042                           ;neopixel_drv.c: 291: for (j = 0; j < PixNumb; j++)
 13043  0526  0020               	movlb	0	; select bank0
 13044  0527  01BC               	clrf	Npdrv_Ch3_WriteNeopixelColor@j
 13045  0528                     l4549:	
 13046  0528  083B               	movf	Npdrv_Ch3_WriteNeopixelColor@PixNumb,w
 13047  0529  023C               	subwf	Npdrv_Ch3_WriteNeopixelColor@j,w
 13048  052A  1803               	btfsc	3,0
 13049  052B  2DA9               	goto	l4551
 13050                           
 13051                           ;neopixel_drv.c: 292: {
 13052                           ;neopixel_drv.c: 294: for (i = 0; i < 8; i++)
 13053  052C  01BD               	clrf	Npdrv_Ch3_WriteNeopixelColor@i
 13054  052D  3008               	movlw	8
 13055  052E  023D               	subwf	Npdrv_Ch3_WriteNeopixelColor@i,w
 13056  052F  1803               	btfsc	3,0
 13057  0530  2D54               	goto	l4515
 13058  0531                     l4505:	
 13059                           
 13060                           ;neopixel_drv.c: 295: {
 13061                           ;neopixel_drv.c: 296: if (GreenBitArray[i] == 0)
 13062  0531  083D               	movf	Npdrv_Ch3_WriteNeopixelColor@i,w
 13063  0532  3E23               	addlw	(low (Npdrv_Ch3_WriteNeopixelColor@GreenBitArray| 0))& (0+255)
 13064  0533  0086               	movwf	6
 13065  0534  0187               	clrf	7
 13066  0535  0801               	movf	1,w
 13067  0536  1D03               	btfss	3,2
 13068  0537  2D42               	goto	l416
 13069                           
 13070                           ;neopixel_drv.c: 297: {
 13071                           ;neopixel_drv.c: 298: LATCbits.LATC2 = 1u;
 13072  0538  0022               	movlb	2	; select bank2
 13073  0539  150E               	bsf	14,2	;volatile
 13074                           
 13075                           ;neopixel_drv.c: 299: _delay(2u);
 13076  053A  3200               	nop2	;2 cycle nop
 13077                           
 13078                           ;neopixel_drv.c: 300: LATCbits.LATC2 = 0u;
 13079  053B  0022               	movlb	2	; select bank2
 13080  053C  110E               	bcf	14,2	;volatile
 13081                           
 13082                           ;neopixel_drv.c: 301: _delay(7u);
 13083  053D  3002               	movlw	2
 13084  053E  00F4               	movwf	??_Npdrv_Ch3_WriteNeopixelColor
 13085  053F                     u5117:	
 13086  053F  0BF4               	decfsz	??_Npdrv_Ch3_WriteNeopixelColor,f
 13087  0540  2D3F               	goto	u5117
 13088                           
 13089                           ;neopixel_drv.c: 302: }
 13090  0541  2D4B               	goto	l4511
 13091  0542                     l416:	
 13092                           
 13093                           ;neopixel_drv.c: 303: else
 13094                           ;neopixel_drv.c: 304: {
 13095                           ;neopixel_drv.c: 305: LATCbits.LATC2 = 1u;
 13096  0542  0022               	movlb	2	; select bank2
 13097  0543  150E               	bsf	14,2	;volatile
 13098                           
 13099                           ;neopixel_drv.c: 306: _delay(6u);
 13100  0544  3200               	nop2	;2 cycle nop
 13101  0545  3200               	nop2	;2 cycle nop
 13102  0546  3200               	nop2	;2 cycle nop
 13103                           
 13104                           ;neopixel_drv.c: 307: LATCbits.LATC2 = 0u;
 13105  0547  0022               	movlb	2	; select bank2
 13106  0548  110E               	bcf	14,2	;volatile
 13107                           
 13108                           ;neopixel_drv.c: 308: _delay(3u);
 13109  0549  3200               	nop2	;2 cycle nop
 13110  054A  0000               	nop
 13111  054B                     l4511:	
 13112  054B  3001               	movlw	1
 13113  054C  00F4               	movwf	??_Npdrv_Ch3_WriteNeopixelColor
 13114  054D  0874               	movf	??_Npdrv_Ch3_WriteNeopixelColor,w
 13115  054E  0020               	movlb	0	; select bank0
 13116  054F  07BD               	addwf	Npdrv_Ch3_WriteNeopixelColor@i,f
 13117  0550  3008               	movlw	8
 13118  0551  023D               	subwf	Npdrv_Ch3_WriteNeopixelColor@i,w
 13119  0552  1C03               	skipc
 13120  0553  2D31               	goto	l4505
 13121  0554                     l4515:	
 13122                           
 13123                           ;neopixel_drv.c: 309: }
 13124                           ;neopixel_drv.c: 310: }
 13125                           ;neopixel_drv.c: 313: for (i = 0; i < 8; i++)
 13126  0554  01BD               	clrf	Npdrv_Ch3_WriteNeopixelColor@i
 13127  0555  3008               	movlw	8
 13128  0556  023D               	subwf	Npdrv_Ch3_WriteNeopixelColor@i,w
 13129  0557  1803               	btfsc	3,0
 13130  0558  2D7C               	goto	l4531
 13131  0559                     l4521:	
 13132                           
 13133                           ;neopixel_drv.c: 314: {
 13134                           ;neopixel_drv.c: 315: if (RedBitArray[i] == 0)
 13135  0559  083D               	movf	Npdrv_Ch3_WriteNeopixelColor@i,w
 13136  055A  3E2B               	addlw	(low (Npdrv_Ch3_WriteNeopixelColor@RedBitArray| 0))& (0+255)
 13137  055B  0086               	movwf	6
 13138  055C  0187               	clrf	7
 13139  055D  0801               	movf	1,w
 13140  055E  1D03               	btfss	3,2
 13141  055F  2D6A               	goto	l420
 13142                           
 13143                           ;neopixel_drv.c: 316: {
 13144                           ;neopixel_drv.c: 317: LATCbits.LATC2 = 1u;
 13145  0560  0022               	movlb	2	; select bank2
 13146  0561  150E               	bsf	14,2	;volatile
 13147                           
 13148                           ;neopixel_drv.c: 318: _delay(2u);
 13149  0562  3200               	nop2	;2 cycle nop
 13150                           
 13151                           ;neopixel_drv.c: 319: LATCbits.LATC2 = 0u;
 13152  0563  0022               	movlb	2	; select bank2
 13153  0564  110E               	bcf	14,2	;volatile
 13154                           
 13155                           ;neopixel_drv.c: 320: _delay(7u);
 13156  0565  3002               	movlw	2
 13157  0566  00F4               	movwf	??_Npdrv_Ch3_WriteNeopixelColor
 13158  0567                     u5127:	
 13159  0567  0BF4               	decfsz	??_Npdrv_Ch3_WriteNeopixelColor,f
 13160  0568  2D67               	goto	u5127
 13161                           
 13162                           ;neopixel_drv.c: 321: }
 13163  0569  2D73               	goto	l4527
 13164  056A                     l420:	
 13165                           
 13166                           ;neopixel_drv.c: 322: else
 13167                           ;neopixel_drv.c: 323: {
 13168                           ;neopixel_drv.c: 324: LATCbits.LATC2 = 1u;
 13169  056A  0022               	movlb	2	; select bank2
 13170  056B  150E               	bsf	14,2	;volatile
 13171                           
 13172                           ;neopixel_drv.c: 325: _delay(6u);
 13173  056C  3200               	nop2	;2 cycle nop
 13174  056D  3200               	nop2	;2 cycle nop
 13175  056E  3200               	nop2	;2 cycle nop
 13176                           
 13177                           ;neopixel_drv.c: 326: LATCbits.LATC2 = 0u;
 13178  056F  0022               	movlb	2	; select bank2
 13179  0570  110E               	bcf	14,2	;volatile
 13180                           
 13181                           ;neopixel_drv.c: 327: _delay(3u);
 13182  0571  3200               	nop2	;2 cycle nop
 13183  0572  0000               	nop
 13184  0573                     l4527:	
 13185  0573  3001               	movlw	1
 13186  0574  00F4               	movwf	??_Npdrv_Ch3_WriteNeopixelColor
 13187  0575  0874               	movf	??_Npdrv_Ch3_WriteNeopixelColor,w
 13188  0576  0020               	movlb	0	; select bank0
 13189  0577  07BD               	addwf	Npdrv_Ch3_WriteNeopixelColor@i,f
 13190  0578  3008               	movlw	8
 13191  0579  023D               	subwf	Npdrv_Ch3_WriteNeopixelColor@i,w
 13192  057A  1C03               	skipc
 13193  057B  2D59               	goto	l4521
 13194  057C                     l4531:	
 13195                           
 13196                           ;neopixel_drv.c: 328: }
 13197                           ;neopixel_drv.c: 329: }
 13198                           ;neopixel_drv.c: 332: for (i = 0; i < 8; i++)
 13199  057C  01BD               	clrf	Npdrv_Ch3_WriteNeopixelColor@i
 13200  057D  3008               	movlw	8
 13201  057E  023D               	subwf	Npdrv_Ch3_WriteNeopixelColor@i,w
 13202  057F  1803               	btfsc	3,0
 13203  0580  2DA4               	goto	l4547
 13204  0581                     l4537:	
 13205                           
 13206                           ;neopixel_drv.c: 333: {
 13207                           ;neopixel_drv.c: 334: if (BlueBitArray[i] == 0)
 13208  0581  083D               	movf	Npdrv_Ch3_WriteNeopixelColor@i,w
 13209  0582  3E33               	addlw	(low (Npdrv_Ch3_WriteNeopixelColor@BlueBitArray| 0))& (0+255)
 13210  0583  0086               	movwf	6
 13211  0584  0187               	clrf	7
 13212  0585  0801               	movf	1,w
 13213  0586  1D03               	btfss	3,2
 13214  0587  2D92               	goto	l424
 13215                           
 13216                           ;neopixel_drv.c: 335: {
 13217                           ;neopixel_drv.c: 336: LATCbits.LATC2 = 1u;
 13218  0588  0022               	movlb	2	; select bank2
 13219  0589  150E               	bsf	14,2	;volatile
 13220                           
 13221                           ;neopixel_drv.c: 337: _delay(2u);
 13222  058A  3200               	nop2	;2 cycle nop
 13223                           
 13224                           ;neopixel_drv.c: 338: LATCbits.LATC2 = 0u;
 13225  058B  0022               	movlb	2	; select bank2
 13226  058C  110E               	bcf	14,2	;volatile
 13227                           
 13228                           ;neopixel_drv.c: 339: _delay(7u);
 13229  058D  3002               	movlw	2
 13230  058E  00F4               	movwf	??_Npdrv_Ch3_WriteNeopixelColor
 13231  058F                     u5137:	
 13232  058F  0BF4               	decfsz	??_Npdrv_Ch3_WriteNeopixelColor,f
 13233  0590  2D8F               	goto	u5137
 13234                           
 13235                           ;neopixel_drv.c: 340: }
 13236  0591  2D9B               	goto	l4543
 13237  0592                     l424:	
 13238                           
 13239                           ;neopixel_drv.c: 341: else
 13240                           ;neopixel_drv.c: 342: {
 13241                           ;neopixel_drv.c: 343: LATCbits.LATC2 = 1u;
 13242  0592  0022               	movlb	2	; select bank2
 13243  0593  150E               	bsf	14,2	;volatile
 13244                           
 13245                           ;neopixel_drv.c: 344: _delay(6u);
 13246  0594  3200               	nop2	;2 cycle nop
 13247  0595  3200               	nop2	;2 cycle nop
 13248  0596  3200               	nop2	;2 cycle nop
 13249                           
 13250                           ;neopixel_drv.c: 345: LATCbits.LATC2 = 0u;
 13251  0597  0022               	movlb	2	; select bank2
 13252  0598  110E               	bcf	14,2	;volatile
 13253                           
 13254                           ;neopixel_drv.c: 346: _delay(3u);
 13255  0599  3200               	nop2	;2 cycle nop
 13256  059A  0000               	nop
 13257  059B                     l4543:	
 13258  059B  3001               	movlw	1
 13259  059C  00F4               	movwf	??_Npdrv_Ch3_WriteNeopixelColor
 13260  059D  0874               	movf	??_Npdrv_Ch3_WriteNeopixelColor,w
 13261  059E  0020               	movlb	0	; select bank0
 13262  059F  07BD               	addwf	Npdrv_Ch3_WriteNeopixelColor@i,f
 13263  05A0  3008               	movlw	8
 13264  05A1  023D               	subwf	Npdrv_Ch3_WriteNeopixelColor@i,w
 13265  05A2  1C03               	skipc
 13266  05A3  2D81               	goto	l4537
 13267  05A4                     l4547:	
 13268  05A4  3001               	movlw	1
 13269  05A5  00F4               	movwf	??_Npdrv_Ch3_WriteNeopixelColor
 13270  05A6  0874               	movf	??_Npdrv_Ch3_WriteNeopixelColor,w
 13271  05A7  07BC               	addwf	Npdrv_Ch3_WriteNeopixelColor@j,f
 13272  05A8  2D28               	goto	l4549
 13273  05A9                     l4551:	
 13274                           
 13275                           ;neopixel_drv.c: 347: }
 13276                           ;neopixel_drv.c: 348: }
 13277                           ;neopixel_drv.c: 349: }
 13278                           ;neopixel_drv.c: 352: Mcu_EnableInterrupts();
 13279  05A9  3195  25C9         	fcall	_Mcu_EnableInterrupts
 13280  05AB  0008               	return
 13281  05AC                     __end_of_Npdrv_Ch3_WriteNeopixelColor:	
 13282                           
 13283                           	psect	text64
 13284  05AC                     __ptext64:	
 13285 ;; *************** function _Npdrv_Ch2_WriteNeopixelColor *****************
 13286 ;; Defined at:
 13287 ;;		line 181 in file "../../../Framework/MercuryFwk/Source/c/01_Hal/02_Drv/neopixel_drv.c"
 13288 ;; Parameters:    Size  Location     Type
 13289 ;;  PixNumb         1    wreg     unsigned char 
 13290 ;;  Green           1    0[BANK0 ] unsigned char 
 13291 ;;  Red             1    1[BANK0 ] unsigned char 
 13292 ;;  Blue            1    2[BANK0 ] unsigned char 
 13293 ;; Auto vars:     Size  Location     Type
 13294 ;;  PixNumb         1   27[BANK0 ] unsigned char 
 13295 ;;  BlueBitArray    8   19[BANK0 ] unsigned char [8]
 13296 ;;  RedBitArray     8   11[BANK0 ] unsigned char [8]
 13297 ;;  GreenBitArra    8    3[BANK0 ] unsigned char [8]
 13298 ;;  i               1   29[BANK0 ] unsigned char 
 13299 ;;  j               1   28[BANK0 ] unsigned char 
 13300 ;; Return value:  Size  Location     Type
 13301 ;;                  1    wreg      void 
 13302 ;; Registers used:
 13303 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13304 ;; Tracked objects:
 13305 ;;		On entry : 0/0
 13306 ;;		On exit  : 0/0
 13307 ;;		Unchanged: 0/0
 13308 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13309 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13310 ;;      Locals:         0      27       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13311 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13312 ;;      Totals:         2      30       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13313 ;;Total ram usage:       32 bytes
 13314 ;; Hardware stack levels used:    1
 13315 ;; Hardware stack levels required when called:    3
 13316 ;; This function calls:
 13317 ;;		_Mcu_DisableInterrupts
 13318 ;;		_Mcu_EnableInterrupts
 13319 ;; This function is called by:
 13320 ;;		_ManageProtocol
 13321 ;; This function uses a non-reentrant model
 13322 ;;
 13323                           
 13324                           
 13325                           ;psect for function _Npdrv_Ch2_WriteNeopixelColor
 13326  05AC                     _Npdrv_Ch2_WriteNeopixelColor:	
 13327                           
 13328                           ;incstack = 0
 13329                           ; Regs used in _Npdrv_Ch2_WriteNeopixelColor: [wreg+fsr1l+fsr1h+status,2+status,0+pclath
      +                          +cstack]
 13330                           ;Npdrv_Ch2_WriteNeopixelColor@PixNumb stored from wreg
 13331  05AC  0020               	movlb	0	; select bank0
 13332  05AD  00BB               	movwf	Npdrv_Ch2_WriteNeopixelColor@PixNumb
 13333                           
 13334                           ;neopixel_drv.c: 183: UINT8 i,j;
 13335                           ;neopixel_drv.c: 184: UINT8 GreenBitArray[8];
 13336                           ;neopixel_drv.c: 185: UINT8 RedBitArray[8];
 13337                           ;neopixel_drv.c: 186: UINT8 BlueBitArray[8];
 13338                           ;neopixel_drv.c: 188: for (i = 0; i < 8; i++)
 13339  05AE  01BD               	clrf	Npdrv_Ch2_WriteNeopixelColor@i
 13340  05AF  3008               	movlw	8
 13341  05B0  023D               	subwf	Npdrv_Ch2_WriteNeopixelColor@i,w
 13342  05B1  1803               	btfsc	3,0
 13343  05B2  2DF4               	goto	l4425
 13344  05B3                     l4419:	
 13345                           
 13346                           ;neopixel_drv.c: 189: {
 13347                           ;neopixel_drv.c: 190: GreenBitArray[i] = ((Green >> (7 - i)) & 0x01);
 13348  05B3  0820               	movf	Npdrv_Ch2_WriteNeopixelColor@Green,w
 13349  05B4  00F4               	movwf	??_Npdrv_Ch2_WriteNeopixelColor
 13350  05B5  033D               	decf	Npdrv_Ch2_WriteNeopixelColor@i,w
 13351  05B6  3AFF               	xorlw	255
 13352  05B7  3E07               	addlw	7
 13353  05B8  0A89               	incf	9,f
 13354  05B9  2DBB               	goto	u3874
 13355  05BA                     u3875:	
 13356  05BA  36F4               	lsrf	??_Npdrv_Ch2_WriteNeopixelColor,f
 13357  05BB                     u3874:	
 13358  05BB  0B89               	decfsz	9,f
 13359  05BC  2DBA               	goto	u3875
 13360  05BD  0874               	movf	??_Npdrv_Ch2_WriteNeopixelColor,w
 13361  05BE  3901               	andlw	1
 13362  05BF  00F5               	movwf	??_Npdrv_Ch2_WriteNeopixelColor+1
 13363  05C0  083D               	movf	Npdrv_Ch2_WriteNeopixelColor@i,w
 13364  05C1  3E23               	addlw	(low (Npdrv_Ch2_WriteNeopixelColor@GreenBitArray| 0))& (0+255)
 13365  05C2  0086               	movwf	6
 13366  05C3  0187               	clrf	7
 13367  05C4  0875               	movf	??_Npdrv_Ch2_WriteNeopixelColor+1,w
 13368  05C5  0081               	movwf	1
 13369                           
 13370                           ;neopixel_drv.c: 191: RedBitArray[i] = ((Red >> (7 - i)) & 0x01);
 13371  05C6  0821               	movf	Npdrv_Ch2_WriteNeopixelColor@Red,w
 13372  05C7  00F4               	movwf	??_Npdrv_Ch2_WriteNeopixelColor
 13373  05C8  033D               	decf	Npdrv_Ch2_WriteNeopixelColor@i,w
 13374  05C9  3AFF               	xorlw	255
 13375  05CA  3E07               	addlw	7
 13376  05CB  0A89               	incf	9,f
 13377  05CC  2DCE               	goto	u3884
 13378  05CD                     u3885:	
 13379  05CD  36F4               	lsrf	??_Npdrv_Ch2_WriteNeopixelColor,f
 13380  05CE                     u3884:	
 13381  05CE  0B89               	decfsz	9,f
 13382  05CF  2DCD               	goto	u3885
 13383  05D0  0874               	movf	??_Npdrv_Ch2_WriteNeopixelColor,w
 13384  05D1  3901               	andlw	1
 13385  05D2  00F5               	movwf	??_Npdrv_Ch2_WriteNeopixelColor+1
 13386  05D3  083D               	movf	Npdrv_Ch2_WriteNeopixelColor@i,w
 13387  05D4  3E2B               	addlw	(low (Npdrv_Ch2_WriteNeopixelColor@RedBitArray| 0))& (0+255)
 13388  05D5  0086               	movwf	6
 13389  05D6  0187               	clrf	7
 13390  05D7  0875               	movf	??_Npdrv_Ch2_WriteNeopixelColor+1,w
 13391  05D8  0081               	movwf	1
 13392                           
 13393                           ;neopixel_drv.c: 192: BlueBitArray[i] = ((Blue >> (7 - i)) & 0x01);
 13394  05D9  0822               	movf	Npdrv_Ch2_WriteNeopixelColor@Blue,w
 13395  05DA  00F4               	movwf	??_Npdrv_Ch2_WriteNeopixelColor
 13396  05DB  033D               	decf	Npdrv_Ch2_WriteNeopixelColor@i,w
 13397  05DC  3AFF               	xorlw	255
 13398  05DD  3E07               	addlw	7
 13399  05DE  0A89               	incf	9,f
 13400  05DF  2DE1               	goto	u3894
 13401  05E0                     u3895:	
 13402  05E0  36F4               	lsrf	??_Npdrv_Ch2_WriteNeopixelColor,f
 13403  05E1                     u3894:	
 13404  05E1  0B89               	decfsz	9,f
 13405  05E2  2DE0               	goto	u3895
 13406  05E3  0874               	movf	??_Npdrv_Ch2_WriteNeopixelColor,w
 13407  05E4  3901               	andlw	1
 13408  05E5  00F5               	movwf	??_Npdrv_Ch2_WriteNeopixelColor+1
 13409  05E6  083D               	movf	Npdrv_Ch2_WriteNeopixelColor@i,w
 13410  05E7  3E33               	addlw	(low (Npdrv_Ch2_WriteNeopixelColor@BlueBitArray| 0))& (0+255)
 13411  05E8  0086               	movwf	6
 13412  05E9  0187               	clrf	7
 13413  05EA  0875               	movf	??_Npdrv_Ch2_WriteNeopixelColor+1,w
 13414  05EB  0081               	movwf	1
 13415  05EC  3001               	movlw	1
 13416  05ED  00F4               	movwf	??_Npdrv_Ch2_WriteNeopixelColor
 13417  05EE  0874               	movf	??_Npdrv_Ch2_WriteNeopixelColor,w
 13418  05EF  07BD               	addwf	Npdrv_Ch2_WriteNeopixelColor@i,f
 13419  05F0  3008               	movlw	8
 13420  05F1  023D               	subwf	Npdrv_Ch2_WriteNeopixelColor@i,w
 13421  05F2  1C03               	skipc
 13422  05F3  2DB3               	goto	l4419
 13423  05F4                     l4425:	
 13424                           
 13425                           ;neopixel_drv.c: 193: }
 13426                           ;neopixel_drv.c: 196: Mcu_DisableInterrupts();
 13427  05F4  3195  25C6  3185   	fcall	_Mcu_DisableInterrupts
 13428                           
 13429                           ;neopixel_drv.c: 198: for (j = 0; j < PixNumb; j++)
 13430  05F7  0020               	movlb	0	; select bank0
 13431  05F8  01BC               	clrf	Npdrv_Ch2_WriteNeopixelColor@j
 13432  05F9                     l4479:	
 13433  05F9  083B               	movf	Npdrv_Ch2_WriteNeopixelColor@PixNumb,w
 13434  05FA  023C               	subwf	Npdrv_Ch2_WriteNeopixelColor@j,w
 13435  05FB  1803               	btfsc	3,0
 13436  05FC  2E7A               	goto	l4481
 13437                           
 13438                           ;neopixel_drv.c: 199: {
 13439                           ;neopixel_drv.c: 201: for (i = 0; i < 8; i++)
 13440  05FD  01BD               	clrf	Npdrv_Ch2_WriteNeopixelColor@i
 13441  05FE  3008               	movlw	8
 13442  05FF  023D               	subwf	Npdrv_Ch2_WriteNeopixelColor@i,w
 13443  0600  1803               	btfsc	3,0
 13444  0601  2E25               	goto	l4445
 13445  0602                     l4435:	
 13446                           
 13447                           ;neopixel_drv.c: 202: {
 13448                           ;neopixel_drv.c: 203: if (GreenBitArray[i] == 0)
 13449  0602  083D               	movf	Npdrv_Ch2_WriteNeopixelColor@i,w
 13450  0603  3E23               	addlw	(low (Npdrv_Ch2_WriteNeopixelColor@GreenBitArray| 0))& (0+255)
 13451  0604  0086               	movwf	6
 13452  0605  0187               	clrf	7
 13453  0606  0801               	movf	1,w
 13454  0607  1D03               	btfss	3,2
 13455  0608  2E13               	goto	l396
 13456                           
 13457                           ;neopixel_drv.c: 204: {
 13458                           ;neopixel_drv.c: 205: LATCbits.LATC1 = 1u;
 13459  0609  0022               	movlb	2	; select bank2
 13460  060A  148E               	bsf	14,1	;volatile
 13461                           
 13462                           ;neopixel_drv.c: 206: _delay(2u);
 13463  060B  3200               	nop2	;2 cycle nop
 13464                           
 13465                           ;neopixel_drv.c: 207: LATCbits.LATC1 = 0u;
 13466  060C  0022               	movlb	2	; select bank2
 13467  060D  108E               	bcf	14,1	;volatile
 13468                           
 13469                           ;neopixel_drv.c: 208: _delay(7u);
 13470  060E  3002               	movlw	2
 13471  060F  00F4               	movwf	??_Npdrv_Ch2_WriteNeopixelColor
 13472  0610                     u5147:	
 13473  0610  0BF4               	decfsz	??_Npdrv_Ch2_WriteNeopixelColor,f
 13474  0611  2E10               	goto	u5147
 13475                           
 13476                           ;neopixel_drv.c: 209: }
 13477  0612  2E1C               	goto	l4441
 13478  0613                     l396:	
 13479                           
 13480                           ;neopixel_drv.c: 210: else
 13481                           ;neopixel_drv.c: 211: {
 13482                           ;neopixel_drv.c: 212: LATCbits.LATC1 = 1u;
 13483  0613  0022               	movlb	2	; select bank2
 13484  0614  148E               	bsf	14,1	;volatile
 13485                           
 13486                           ;neopixel_drv.c: 213: _delay(6u);
 13487  0615  3200               	nop2	;2 cycle nop
 13488  0616  3200               	nop2	;2 cycle nop
 13489  0617  3200               	nop2	;2 cycle nop
 13490                           
 13491                           ;neopixel_drv.c: 214: LATCbits.LATC1 = 0u;
 13492  0618  0022               	movlb	2	; select bank2
 13493  0619  108E               	bcf	14,1	;volatile
 13494                           
 13495                           ;neopixel_drv.c: 215: _delay(3u);
 13496  061A  3200               	nop2	;2 cycle nop
 13497  061B  0000               	nop
 13498  061C                     l4441:	
 13499  061C  3001               	movlw	1
 13500  061D  00F4               	movwf	??_Npdrv_Ch2_WriteNeopixelColor
 13501  061E  0874               	movf	??_Npdrv_Ch2_WriteNeopixelColor,w
 13502  061F  0020               	movlb	0	; select bank0
 13503  0620  07BD               	addwf	Npdrv_Ch2_WriteNeopixelColor@i,f
 13504  0621  3008               	movlw	8
 13505  0622  023D               	subwf	Npdrv_Ch2_WriteNeopixelColor@i,w
 13506  0623  1C03               	skipc
 13507  0624  2E02               	goto	l4435
 13508  0625                     l4445:	
 13509                           
 13510                           ;neopixel_drv.c: 216: }
 13511                           ;neopixel_drv.c: 217: }
 13512                           ;neopixel_drv.c: 220: for (i = 0; i < 8; i++)
 13513  0625  01BD               	clrf	Npdrv_Ch2_WriteNeopixelColor@i
 13514  0626  3008               	movlw	8
 13515  0627  023D               	subwf	Npdrv_Ch2_WriteNeopixelColor@i,w
 13516  0628  1803               	btfsc	3,0
 13517  0629  2E4D               	goto	l4461
 13518  062A                     l4451:	
 13519                           
 13520                           ;neopixel_drv.c: 221: {
 13521                           ;neopixel_drv.c: 222: if (RedBitArray[i] == 0)
 13522  062A  083D               	movf	Npdrv_Ch2_WriteNeopixelColor@i,w
 13523  062B  3E2B               	addlw	(low (Npdrv_Ch2_WriteNeopixelColor@RedBitArray| 0))& (0+255)
 13524  062C  0086               	movwf	6
 13525  062D  0187               	clrf	7
 13526  062E  0801               	movf	1,w
 13527  062F  1D03               	btfss	3,2
 13528  0630  2E3B               	goto	l400
 13529                           
 13530                           ;neopixel_drv.c: 223: {
 13531                           ;neopixel_drv.c: 224: LATCbits.LATC1 = 1u;
 13532  0631  0022               	movlb	2	; select bank2
 13533  0632  148E               	bsf	14,1	;volatile
 13534                           
 13535                           ;neopixel_drv.c: 225: _delay(2u);
 13536  0633  3200               	nop2	;2 cycle nop
 13537                           
 13538                           ;neopixel_drv.c: 226: LATCbits.LATC1 = 0u;
 13539  0634  0022               	movlb	2	; select bank2
 13540  0635  108E               	bcf	14,1	;volatile
 13541                           
 13542                           ;neopixel_drv.c: 227: _delay(7u);
 13543  0636  3002               	movlw	2
 13544  0637  00F4               	movwf	??_Npdrv_Ch2_WriteNeopixelColor
 13545  0638                     u5157:	
 13546  0638  0BF4               	decfsz	??_Npdrv_Ch2_WriteNeopixelColor,f
 13547  0639  2E38               	goto	u5157
 13548                           
 13549                           ;neopixel_drv.c: 228: }
 13550  063A  2E44               	goto	l4457
 13551  063B                     l400:	
 13552                           
 13553                           ;neopixel_drv.c: 229: else
 13554                           ;neopixel_drv.c: 230: {
 13555                           ;neopixel_drv.c: 231: LATCbits.LATC1 = 1u;
 13556  063B  0022               	movlb	2	; select bank2
 13557  063C  148E               	bsf	14,1	;volatile
 13558                           
 13559                           ;neopixel_drv.c: 232: _delay(6u);
 13560  063D  3200               	nop2	;2 cycle nop
 13561  063E  3200               	nop2	;2 cycle nop
 13562  063F  3200               	nop2	;2 cycle nop
 13563                           
 13564                           ;neopixel_drv.c: 233: LATCbits.LATC1 = 0u;
 13565  0640  0022               	movlb	2	; select bank2
 13566  0641  108E               	bcf	14,1	;volatile
 13567                           
 13568                           ;neopixel_drv.c: 234: _delay(3u);
 13569  0642  3200               	nop2	;2 cycle nop
 13570  0643  0000               	nop
 13571  0644                     l4457:	
 13572  0644  3001               	movlw	1
 13573  0645  00F4               	movwf	??_Npdrv_Ch2_WriteNeopixelColor
 13574  0646  0874               	movf	??_Npdrv_Ch2_WriteNeopixelColor,w
 13575  0647  0020               	movlb	0	; select bank0
 13576  0648  07BD               	addwf	Npdrv_Ch2_WriteNeopixelColor@i,f
 13577  0649  3008               	movlw	8
 13578  064A  023D               	subwf	Npdrv_Ch2_WriteNeopixelColor@i,w
 13579  064B  1C03               	skipc
 13580  064C  2E2A               	goto	l4451
 13581  064D                     l4461:	
 13582                           
 13583                           ;neopixel_drv.c: 235: }
 13584                           ;neopixel_drv.c: 236: }
 13585                           ;neopixel_drv.c: 239: for (i = 0; i < 8; i++)
 13586  064D  01BD               	clrf	Npdrv_Ch2_WriteNeopixelColor@i
 13587  064E  3008               	movlw	8
 13588  064F  023D               	subwf	Npdrv_Ch2_WriteNeopixelColor@i,w
 13589  0650  1803               	btfsc	3,0
 13590  0651  2E75               	goto	l4477
 13591  0652                     l4467:	
 13592                           
 13593                           ;neopixel_drv.c: 240: {
 13594                           ;neopixel_drv.c: 241: if (BlueBitArray[i] == 0)
 13595  0652  083D               	movf	Npdrv_Ch2_WriteNeopixelColor@i,w
 13596  0653  3E33               	addlw	(low (Npdrv_Ch2_WriteNeopixelColor@BlueBitArray| 0))& (0+255)
 13597  0654  0086               	movwf	6
 13598  0655  0187               	clrf	7
 13599  0656  0801               	movf	1,w
 13600  0657  1D03               	btfss	3,2
 13601  0658  2E63               	goto	l404
 13602                           
 13603                           ;neopixel_drv.c: 242: {
 13604                           ;neopixel_drv.c: 243: LATCbits.LATC1 = 1u;
 13605  0659  0022               	movlb	2	; select bank2
 13606  065A  148E               	bsf	14,1	;volatile
 13607                           
 13608                           ;neopixel_drv.c: 244: _delay(2u);
 13609  065B  3200               	nop2	;2 cycle nop
 13610                           
 13611                           ;neopixel_drv.c: 245: LATCbits.LATC1 = 0u;
 13612  065C  0022               	movlb	2	; select bank2
 13613  065D  108E               	bcf	14,1	;volatile
 13614                           
 13615                           ;neopixel_drv.c: 246: _delay(7u);
 13616  065E  3002               	movlw	2
 13617  065F  00F4               	movwf	??_Npdrv_Ch2_WriteNeopixelColor
 13618  0660                     u5167:	
 13619  0660  0BF4               	decfsz	??_Npdrv_Ch2_WriteNeopixelColor,f
 13620  0661  2E60               	goto	u5167
 13621                           
 13622                           ;neopixel_drv.c: 247: }
 13623  0662  2E6C               	goto	l4473
 13624  0663                     l404:	
 13625                           
 13626                           ;neopixel_drv.c: 248: else
 13627                           ;neopixel_drv.c: 249: {
 13628                           ;neopixel_drv.c: 250: LATCbits.LATC1 = 1u;
 13629  0663  0022               	movlb	2	; select bank2
 13630  0664  148E               	bsf	14,1	;volatile
 13631                           
 13632                           ;neopixel_drv.c: 251: _delay(6u);
 13633  0665  3200               	nop2	;2 cycle nop
 13634  0666  3200               	nop2	;2 cycle nop
 13635  0667  3200               	nop2	;2 cycle nop
 13636                           
 13637                           ;neopixel_drv.c: 252: LATCbits.LATC1 = 0u;
 13638  0668  0022               	movlb	2	; select bank2
 13639  0669  108E               	bcf	14,1	;volatile
 13640                           
 13641                           ;neopixel_drv.c: 253: _delay(3u);
 13642  066A  3200               	nop2	;2 cycle nop
 13643  066B  0000               	nop
 13644  066C                     l4473:	
 13645  066C  3001               	movlw	1
 13646  066D  00F4               	movwf	??_Npdrv_Ch2_WriteNeopixelColor
 13647  066E  0874               	movf	??_Npdrv_Ch2_WriteNeopixelColor,w
 13648  066F  0020               	movlb	0	; select bank0
 13649  0670  07BD               	addwf	Npdrv_Ch2_WriteNeopixelColor@i,f
 13650  0671  3008               	movlw	8
 13651  0672  023D               	subwf	Npdrv_Ch2_WriteNeopixelColor@i,w
 13652  0673  1C03               	skipc
 13653  0674  2E52               	goto	l4467
 13654  0675                     l4477:	
 13655  0675  3001               	movlw	1
 13656  0676  00F4               	movwf	??_Npdrv_Ch2_WriteNeopixelColor
 13657  0677  0874               	movf	??_Npdrv_Ch2_WriteNeopixelColor,w
 13658  0678  07BC               	addwf	Npdrv_Ch2_WriteNeopixelColor@j,f
 13659  0679  2DF9               	goto	l4479
 13660  067A                     l4481:	
 13661                           
 13662                           ;neopixel_drv.c: 254: }
 13663                           ;neopixel_drv.c: 255: }
 13664                           ;neopixel_drv.c: 256: }
 13665                           ;neopixel_drv.c: 259: Mcu_EnableInterrupts();
 13666  067A  3195  25C9         	fcall	_Mcu_EnableInterrupts
 13667  067C  0008               	return
 13668  067D                     __end_of_Npdrv_Ch2_WriteNeopixelColor:	
 13669                           
 13670                           	psect	text65
 13671  03FF                     __ptext65:	
 13672 ;; *************** function _Npdrv_Ch1_WriteNeopixelColor *****************
 13673 ;; Defined at:
 13674 ;;		line 85 in file "../../../Framework/MercuryFwk/Source/c/01_Hal/02_Drv/neopixel_drv.c"
 13675 ;; Parameters:    Size  Location     Type
 13676 ;;  PixNumb         1    wreg     unsigned char 
 13677 ;;  Green           1    0[BANK0 ] unsigned char 
 13678 ;;  Red             1    1[BANK0 ] unsigned char 
 13679 ;;  Blue            1    2[BANK0 ] unsigned char 
 13680 ;; Auto vars:     Size  Location     Type
 13681 ;;  PixNumb         1   27[BANK0 ] unsigned char 
 13682 ;;  BlueBitArray    8   19[BANK0 ] unsigned char [8]
 13683 ;;  RedBitArray     8   11[BANK0 ] unsigned char [8]
 13684 ;;  GreenBitArra    8    3[BANK0 ] unsigned char [8]
 13685 ;;  i               1   29[BANK0 ] unsigned char 
 13686 ;;  j               1   28[BANK0 ] unsigned char 
 13687 ;; Return value:  Size  Location     Type
 13688 ;;                  1    wreg      void 
 13689 ;; Registers used:
 13690 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13691 ;; Tracked objects:
 13692 ;;		On entry : 0/0
 13693 ;;		On exit  : 0/0
 13694 ;;		Unchanged: 0/0
 13695 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13696 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13697 ;;      Locals:         0      27       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13698 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13699 ;;      Totals:         2      30       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13700 ;;Total ram usage:       32 bytes
 13701 ;; Hardware stack levels used:    1
 13702 ;; Hardware stack levels required when called:    3
 13703 ;; This function calls:
 13704 ;;		_Mcu_DisableInterrupts
 13705 ;;		_Mcu_EnableInterrupts
 13706 ;; This function is called by:
 13707 ;;		_ManageProtocol
 13708 ;; This function uses a non-reentrant model
 13709 ;;
 13710                           
 13711                           
 13712                           ;psect for function _Npdrv_Ch1_WriteNeopixelColor
 13713  03FF                     _Npdrv_Ch1_WriteNeopixelColor:	
 13714                           
 13715                           ;incstack = 0
 13716                           ; Regs used in _Npdrv_Ch1_WriteNeopixelColor: [wreg+fsr1l+fsr1h+status,2+status,0+pclath
      +                          +cstack]
 13717                           ;Npdrv_Ch1_WriteNeopixelColor@PixNumb stored from wreg
 13718  03FF  0020               	movlb	0	; select bank0
 13719  0400  00BB               	movwf	Npdrv_Ch1_WriteNeopixelColor@PixNumb
 13720                           
 13721                           ;neopixel_drv.c: 87: UINT8 i,j;
 13722                           ;neopixel_drv.c: 88: UINT8 GreenBitArray[8];
 13723                           ;neopixel_drv.c: 89: UINT8 RedBitArray[8];
 13724                           ;neopixel_drv.c: 90: UINT8 BlueBitArray[8];
 13725                           ;neopixel_drv.c: 92: for (i = 0; i < 8; i++)
 13726  0401  01BD               	clrf	Npdrv_Ch1_WriteNeopixelColor@i
 13727  0402  3008               	movlw	8
 13728  0403  023D               	subwf	Npdrv_Ch1_WriteNeopixelColor@i,w
 13729  0404  1803               	btfsc	3,0
 13730  0405  2C47               	goto	l4351
 13731  0406                     l4345:	
 13732                           
 13733                           ;neopixel_drv.c: 93: {
 13734                           ;neopixel_drv.c: 94: GreenBitArray[i] = ((Green >> (7 - i)) & 0x01);
 13735  0406  0820               	movf	Npdrv_Ch1_WriteNeopixelColor@Green,w
 13736  0407  00F4               	movwf	??_Npdrv_Ch1_WriteNeopixelColor
 13737  0408  033D               	decf	Npdrv_Ch1_WriteNeopixelColor@i,w
 13738  0409  3AFF               	xorlw	255
 13739  040A  3E07               	addlw	7
 13740  040B  0A89               	incf	9,f
 13741  040C  2C0E               	goto	u3724
 13742  040D                     u3725:	
 13743  040D  36F4               	lsrf	??_Npdrv_Ch1_WriteNeopixelColor,f
 13744  040E                     u3724:	
 13745  040E  0B89               	decfsz	9,f
 13746  040F  2C0D               	goto	u3725
 13747  0410  0874               	movf	??_Npdrv_Ch1_WriteNeopixelColor,w
 13748  0411  3901               	andlw	1
 13749  0412  00F5               	movwf	??_Npdrv_Ch1_WriteNeopixelColor+1
 13750  0413  083D               	movf	Npdrv_Ch1_WriteNeopixelColor@i,w
 13751  0414  3E23               	addlw	(low (Npdrv_Ch1_WriteNeopixelColor@GreenBitArray| 0))& (0+255)
 13752  0415  0086               	movwf	6
 13753  0416  0187               	clrf	7
 13754  0417  0875               	movf	??_Npdrv_Ch1_WriteNeopixelColor+1,w
 13755  0418  0081               	movwf	1
 13756                           
 13757                           ;neopixel_drv.c: 95: RedBitArray[i] = ((Red >> (7 - i)) & 0x01);
 13758  0419  0821               	movf	Npdrv_Ch1_WriteNeopixelColor@Red,w
 13759  041A  00F4               	movwf	??_Npdrv_Ch1_WriteNeopixelColor
 13760  041B  033D               	decf	Npdrv_Ch1_WriteNeopixelColor@i,w
 13761  041C  3AFF               	xorlw	255
 13762  041D  3E07               	addlw	7
 13763  041E  0A89               	incf	9,f
 13764  041F  2C21               	goto	u3734
 13765  0420                     u3735:	
 13766  0420  36F4               	lsrf	??_Npdrv_Ch1_WriteNeopixelColor,f
 13767  0421                     u3734:	
 13768  0421  0B89               	decfsz	9,f
 13769  0422  2C20               	goto	u3735
 13770  0423  0874               	movf	??_Npdrv_Ch1_WriteNeopixelColor,w
 13771  0424  3901               	andlw	1
 13772  0425  00F5               	movwf	??_Npdrv_Ch1_WriteNeopixelColor+1
 13773  0426  083D               	movf	Npdrv_Ch1_WriteNeopixelColor@i,w
 13774  0427  3E2B               	addlw	(low (Npdrv_Ch1_WriteNeopixelColor@RedBitArray| 0))& (0+255)
 13775  0428  0086               	movwf	6
 13776  0429  0187               	clrf	7
 13777  042A  0875               	movf	??_Npdrv_Ch1_WriteNeopixelColor+1,w
 13778  042B  0081               	movwf	1
 13779                           
 13780                           ;neopixel_drv.c: 96: BlueBitArray[i] = ((Blue >> (7 - i)) & 0x01);
 13781  042C  0822               	movf	Npdrv_Ch1_WriteNeopixelColor@Blue,w
 13782  042D  00F4               	movwf	??_Npdrv_Ch1_WriteNeopixelColor
 13783  042E  033D               	decf	Npdrv_Ch1_WriteNeopixelColor@i,w
 13784  042F  3AFF               	xorlw	255
 13785  0430  3E07               	addlw	7
 13786  0431  0A89               	incf	9,f
 13787  0432  2C34               	goto	u3744
 13788  0433                     u3745:	
 13789  0433  36F4               	lsrf	??_Npdrv_Ch1_WriteNeopixelColor,f
 13790  0434                     u3744:	
 13791  0434  0B89               	decfsz	9,f
 13792  0435  2C33               	goto	u3745
 13793  0436  0874               	movf	??_Npdrv_Ch1_WriteNeopixelColor,w
 13794  0437  3901               	andlw	1
 13795  0438  00F5               	movwf	??_Npdrv_Ch1_WriteNeopixelColor+1
 13796  0439  083D               	movf	Npdrv_Ch1_WriteNeopixelColor@i,w
 13797  043A  3E33               	addlw	(low (Npdrv_Ch1_WriteNeopixelColor@BlueBitArray| 0))& (0+255)
 13798  043B  0086               	movwf	6
 13799  043C  0187               	clrf	7
 13800  043D  0875               	movf	??_Npdrv_Ch1_WriteNeopixelColor+1,w
 13801  043E  0081               	movwf	1
 13802  043F  3001               	movlw	1
 13803  0440  00F4               	movwf	??_Npdrv_Ch1_WriteNeopixelColor
 13804  0441  0874               	movf	??_Npdrv_Ch1_WriteNeopixelColor,w
 13805  0442  07BD               	addwf	Npdrv_Ch1_WriteNeopixelColor@i,f
 13806  0443  3008               	movlw	8
 13807  0444  023D               	subwf	Npdrv_Ch1_WriteNeopixelColor@i,w
 13808  0445  1C03               	skipc
 13809  0446  2C06               	goto	l4345
 13810  0447                     l4351:	
 13811                           
 13812                           ;neopixel_drv.c: 97: }
 13813                           ;neopixel_drv.c: 100: Mcu_DisableInterrupts();
 13814  0447  3195  25C6  3183   	fcall	_Mcu_DisableInterrupts
 13815                           
 13816                           ;neopixel_drv.c: 102: LATAbits.LATA2 = 0u;
 13817  044A  0022               	movlb	2	; select bank2
 13818  044B  110C               	bcf	12,2	;volatile
 13819                           
 13820                           ;neopixel_drv.c: 103: _delay((unsigned long)((1)*(((UINT32)(32000000))/4000.0)));
 13821  044C  300B               	movlw	11
 13822  044D  00F5               	movwf	??_Npdrv_Ch1_WriteNeopixelColor+1
 13823  044E  3062               	movlw	98
 13824  044F  00F4               	movwf	??_Npdrv_Ch1_WriteNeopixelColor
 13825  0450                     u5177:	
 13826  0450  0BF4               	decfsz	??_Npdrv_Ch1_WriteNeopixelColor,f
 13827  0451  2C50               	goto	u5177
 13828  0452  0BF5               	decfsz	??_Npdrv_Ch1_WriteNeopixelColor+1,f
 13829  0453  2C50               	goto	u5177
 13830  0454  0000               	nop
 13831                           
 13832                           ;neopixel_drv.c: 105: for (j = 0; j < PixNumb; j++)
 13833  0455  0020               	movlb	0	; select bank0
 13834  0456  01BC               	clrf	Npdrv_Ch1_WriteNeopixelColor@j
 13835  0457                     l4409:	
 13836  0457  083B               	movf	Npdrv_Ch1_WriteNeopixelColor@PixNumb,w
 13837  0458  023C               	subwf	Npdrv_Ch1_WriteNeopixelColor@j,w
 13838  0459  1803               	btfsc	3,0
 13839  045A  2CD8               	goto	l4411
 13840                           
 13841                           ;neopixel_drv.c: 106: {
 13842                           ;neopixel_drv.c: 108: for (i = 0; i < 8; i++)
 13843  045B  01BD               	clrf	Npdrv_Ch1_WriteNeopixelColor@i
 13844  045C  3008               	movlw	8
 13845  045D  023D               	subwf	Npdrv_Ch1_WriteNeopixelColor@i,w
 13846  045E  1803               	btfsc	3,0
 13847  045F  2C83               	goto	l4375
 13848  0460                     l4365:	
 13849                           
 13850                           ;neopixel_drv.c: 109: {
 13851                           ;neopixel_drv.c: 110: if (GreenBitArray[i] == 0)
 13852  0460  083D               	movf	Npdrv_Ch1_WriteNeopixelColor@i,w
 13853  0461  3E23               	addlw	(low (Npdrv_Ch1_WriteNeopixelColor@GreenBitArray| 0))& (0+255)
 13854  0462  0086               	movwf	6
 13855  0463  0187               	clrf	7
 13856  0464  0801               	movf	1,w
 13857  0465  1D03               	btfss	3,2
 13858  0466  2C71               	goto	l376
 13859                           
 13860                           ;neopixel_drv.c: 111: {
 13861                           ;neopixel_drv.c: 112: LATAbits.LATA2 = 1u;
 13862  0467  0022               	movlb	2	; select bank2
 13863  0468  150C               	bsf	12,2	;volatile
 13864                           
 13865                           ;neopixel_drv.c: 113: _delay(2u);
 13866  0469  3200               	nop2	;2 cycle nop
 13867                           
 13868                           ;neopixel_drv.c: 114: LATAbits.LATA2 = 0u;
 13869  046A  0022               	movlb	2	; select bank2
 13870  046B  110C               	bcf	12,2	;volatile
 13871                           
 13872                           ;neopixel_drv.c: 115: _delay(7u);
 13873  046C  3002               	movlw	2
 13874  046D  00F4               	movwf	??_Npdrv_Ch1_WriteNeopixelColor
 13875  046E                     u5187:	
 13876  046E  0BF4               	decfsz	??_Npdrv_Ch1_WriteNeopixelColor,f
 13877  046F  2C6E               	goto	u5187
 13878                           
 13879                           ;neopixel_drv.c: 116: }
 13880  0470  2C7A               	goto	l4371
 13881  0471                     l376:	
 13882                           
 13883                           ;neopixel_drv.c: 117: else
 13884                           ;neopixel_drv.c: 118: {
 13885                           ;neopixel_drv.c: 119: LATAbits.LATA2 = 1u;
 13886  0471  0022               	movlb	2	; select bank2
 13887  0472  150C               	bsf	12,2	;volatile
 13888                           
 13889                           ;neopixel_drv.c: 120: _delay(6u);
 13890  0473  3200               	nop2	;2 cycle nop
 13891  0474  3200               	nop2	;2 cycle nop
 13892  0475  3200               	nop2	;2 cycle nop
 13893                           
 13894                           ;neopixel_drv.c: 121: LATAbits.LATA2 = 0u;
 13895  0476  0022               	movlb	2	; select bank2
 13896  0477  110C               	bcf	12,2	;volatile
 13897                           
 13898                           ;neopixel_drv.c: 122: _delay(3u);
 13899  0478  3200               	nop2	;2 cycle nop
 13900  0479  0000               	nop
 13901  047A                     l4371:	
 13902  047A  3001               	movlw	1
 13903  047B  00F4               	movwf	??_Npdrv_Ch1_WriteNeopixelColor
 13904  047C  0874               	movf	??_Npdrv_Ch1_WriteNeopixelColor,w
 13905  047D  0020               	movlb	0	; select bank0
 13906  047E  07BD               	addwf	Npdrv_Ch1_WriteNeopixelColor@i,f
 13907  047F  3008               	movlw	8
 13908  0480  023D               	subwf	Npdrv_Ch1_WriteNeopixelColor@i,w
 13909  0481  1C03               	skipc
 13910  0482  2C60               	goto	l4365
 13911  0483                     l4375:	
 13912                           
 13913                           ;neopixel_drv.c: 123: }
 13914                           ;neopixel_drv.c: 124: }
 13915                           ;neopixel_drv.c: 127: for (i = 0; i < 8; i++)
 13916  0483  01BD               	clrf	Npdrv_Ch1_WriteNeopixelColor@i
 13917  0484  3008               	movlw	8
 13918  0485  023D               	subwf	Npdrv_Ch1_WriteNeopixelColor@i,w
 13919  0486  1803               	btfsc	3,0
 13920  0487  2CAB               	goto	l4391
 13921  0488                     l4381:	
 13922                           
 13923                           ;neopixel_drv.c: 128: {
 13924                           ;neopixel_drv.c: 129: if (RedBitArray[i] == 0)
 13925  0488  083D               	movf	Npdrv_Ch1_WriteNeopixelColor@i,w
 13926  0489  3E2B               	addlw	(low (Npdrv_Ch1_WriteNeopixelColor@RedBitArray| 0))& (0+255)
 13927  048A  0086               	movwf	6
 13928  048B  0187               	clrf	7
 13929  048C  0801               	movf	1,w
 13930  048D  1D03               	btfss	3,2
 13931  048E  2C99               	goto	l380
 13932                           
 13933                           ;neopixel_drv.c: 130: {
 13934                           ;neopixel_drv.c: 131: LATAbits.LATA2 = 1u;
 13935  048F  0022               	movlb	2	; select bank2
 13936  0490  150C               	bsf	12,2	;volatile
 13937                           
 13938                           ;neopixel_drv.c: 132: _delay(2u);
 13939  0491  3200               	nop2	;2 cycle nop
 13940                           
 13941                           ;neopixel_drv.c: 133: LATAbits.LATA2 = 0u;
 13942  0492  0022               	movlb	2	; select bank2
 13943  0493  110C               	bcf	12,2	;volatile
 13944                           
 13945                           ;neopixel_drv.c: 134: _delay(7u);
 13946  0494  3002               	movlw	2
 13947  0495  00F4               	movwf	??_Npdrv_Ch1_WriteNeopixelColor
 13948  0496                     u5197:	
 13949  0496  0BF4               	decfsz	??_Npdrv_Ch1_WriteNeopixelColor,f
 13950  0497  2C96               	goto	u5197
 13951                           
 13952                           ;neopixel_drv.c: 135: }
 13953  0498  2CA2               	goto	l4387
 13954  0499                     l380:	
 13955                           
 13956                           ;neopixel_drv.c: 136: else
 13957                           ;neopixel_drv.c: 137: {
 13958                           ;neopixel_drv.c: 138: LATAbits.LATA2 = 1u;
 13959  0499  0022               	movlb	2	; select bank2
 13960  049A  150C               	bsf	12,2	;volatile
 13961                           
 13962                           ;neopixel_drv.c: 139: _delay(6u);
 13963  049B  3200               	nop2	;2 cycle nop
 13964  049C  3200               	nop2	;2 cycle nop
 13965  049D  3200               	nop2	;2 cycle nop
 13966                           
 13967                           ;neopixel_drv.c: 140: LATAbits.LATA2 = 0u;
 13968  049E  0022               	movlb	2	; select bank2
 13969  049F  110C               	bcf	12,2	;volatile
 13970                           
 13971                           ;neopixel_drv.c: 141: _delay(3u);
 13972  04A0  3200               	nop2	;2 cycle nop
 13973  04A1  0000               	nop
 13974  04A2                     l4387:	
 13975  04A2  3001               	movlw	1
 13976  04A3  00F4               	movwf	??_Npdrv_Ch1_WriteNeopixelColor
 13977  04A4  0874               	movf	??_Npdrv_Ch1_WriteNeopixelColor,w
 13978  04A5  0020               	movlb	0	; select bank0
 13979  04A6  07BD               	addwf	Npdrv_Ch1_WriteNeopixelColor@i,f
 13980  04A7  3008               	movlw	8
 13981  04A8  023D               	subwf	Npdrv_Ch1_WriteNeopixelColor@i,w
 13982  04A9  1C03               	skipc
 13983  04AA  2C88               	goto	l4381
 13984  04AB                     l4391:	
 13985                           
 13986                           ;neopixel_drv.c: 142: }
 13987                           ;neopixel_drv.c: 143: }
 13988                           ;neopixel_drv.c: 146: for (i = 0; i < 8; i++)
 13989  04AB  01BD               	clrf	Npdrv_Ch1_WriteNeopixelColor@i
 13990  04AC  3008               	movlw	8
 13991  04AD  023D               	subwf	Npdrv_Ch1_WriteNeopixelColor@i,w
 13992  04AE  1803               	btfsc	3,0
 13993  04AF  2CD3               	goto	l4407
 13994  04B0                     l4397:	
 13995                           
 13996                           ;neopixel_drv.c: 147: {
 13997                           ;neopixel_drv.c: 148: if (BlueBitArray[i] == 0)
 13998  04B0  083D               	movf	Npdrv_Ch1_WriteNeopixelColor@i,w
 13999  04B1  3E33               	addlw	(low (Npdrv_Ch1_WriteNeopixelColor@BlueBitArray| 0))& (0+255)
 14000  04B2  0086               	movwf	6
 14001  04B3  0187               	clrf	7
 14002  04B4  0801               	movf	1,w
 14003  04B5  1D03               	btfss	3,2
 14004  04B6  2CC1               	goto	l384
 14005                           
 14006                           ;neopixel_drv.c: 149: {
 14007                           ;neopixel_drv.c: 150: LATAbits.LATA2 = 1u;
 14008  04B7  0022               	movlb	2	; select bank2
 14009  04B8  150C               	bsf	12,2	;volatile
 14010                           
 14011                           ;neopixel_drv.c: 151: _delay(2u);
 14012  04B9  3200               	nop2	;2 cycle nop
 14013                           
 14014                           ;neopixel_drv.c: 152: LATAbits.LATA2 = 0u;
 14015  04BA  0022               	movlb	2	; select bank2
 14016  04BB  110C               	bcf	12,2	;volatile
 14017                           
 14018                           ;neopixel_drv.c: 153: _delay(7u);
 14019  04BC  3002               	movlw	2
 14020  04BD  00F4               	movwf	??_Npdrv_Ch1_WriteNeopixelColor
 14021  04BE                     u5207:	
 14022  04BE  0BF4               	decfsz	??_Npdrv_Ch1_WriteNeopixelColor,f
 14023  04BF  2CBE               	goto	u5207
 14024                           
 14025                           ;neopixel_drv.c: 154: }
 14026  04C0  2CCA               	goto	l4403
 14027  04C1                     l384:	
 14028                           
 14029                           ;neopixel_drv.c: 155: else
 14030                           ;neopixel_drv.c: 156: {
 14031                           ;neopixel_drv.c: 157: LATAbits.LATA2 = 1u;
 14032  04C1  0022               	movlb	2	; select bank2
 14033  04C2  150C               	bsf	12,2	;volatile
 14034                           
 14035                           ;neopixel_drv.c: 158: _delay(6u);
 14036  04C3  3200               	nop2	;2 cycle nop
 14037  04C4  3200               	nop2	;2 cycle nop
 14038  04C5  3200               	nop2	;2 cycle nop
 14039                           
 14040                           ;neopixel_drv.c: 159: LATAbits.LATA2 = 0u;
 14041  04C6  0022               	movlb	2	; select bank2
 14042  04C7  110C               	bcf	12,2	;volatile
 14043                           
 14044                           ;neopixel_drv.c: 160: _delay(3u);
 14045  04C8  3200               	nop2	;2 cycle nop
 14046  04C9  0000               	nop
 14047  04CA                     l4403:	
 14048  04CA  3001               	movlw	1
 14049  04CB  00F4               	movwf	??_Npdrv_Ch1_WriteNeopixelColor
 14050  04CC  0874               	movf	??_Npdrv_Ch1_WriteNeopixelColor,w
 14051  04CD  0020               	movlb	0	; select bank0
 14052  04CE  07BD               	addwf	Npdrv_Ch1_WriteNeopixelColor@i,f
 14053  04CF  3008               	movlw	8
 14054  04D0  023D               	subwf	Npdrv_Ch1_WriteNeopixelColor@i,w
 14055  04D1  1C03               	skipc
 14056  04D2  2CB0               	goto	l4397
 14057  04D3                     l4407:	
 14058  04D3  3001               	movlw	1
 14059  04D4  00F4               	movwf	??_Npdrv_Ch1_WriteNeopixelColor
 14060  04D5  0874               	movf	??_Npdrv_Ch1_WriteNeopixelColor,w
 14061  04D6  07BC               	addwf	Npdrv_Ch1_WriteNeopixelColor@j,f
 14062  04D7  2C57               	goto	l4409
 14063  04D8                     l4411:	
 14064                           
 14065                           ;neopixel_drv.c: 161: }
 14066                           ;neopixel_drv.c: 162: }
 14067                           ;neopixel_drv.c: 163: }
 14068                           ;neopixel_drv.c: 166: Mcu_EnableInterrupts();
 14069  04D8  3195  25C9         	fcall	_Mcu_EnableInterrupts
 14070  04DA  0008               	return
 14071  04DB                     __end_of_Npdrv_Ch1_WriteNeopixelColor:	
 14072                           
 14073                           	psect	text66
 14074  15C9                     __ptext66:	
 14075 ;; *************** function _Mcu_EnableInterrupts *****************
 14076 ;; Defined at:
 14077 ;;		line 97 in file "../../../Framework/MercuryFwk/Source/c/01_Hal/02_Drv/mcu_drv.c"
 14078 ;; Parameters:    Size  Location     Type
 14079 ;;		None
 14080 ;; Auto vars:     Size  Location     Type
 14081 ;;		None
 14082 ;; Return value:  Size  Location     Type
 14083 ;;                  1    wreg      void 
 14084 ;; Registers used:
 14085 ;;		None
 14086 ;; Tracked objects:
 14087 ;;		On entry : 0/0
 14088 ;;		On exit  : 0/0
 14089 ;;		Unchanged: 0/0
 14090 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14091 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14092 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14093 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14094 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14095 ;;Total ram usage:        0 bytes
 14096 ;; Hardware stack levels used:    1
 14097 ;; Hardware stack levels required when called:    2
 14098 ;; This function calls:
 14099 ;;		Nothing
 14100 ;; This function is called by:
 14101 ;;		_Npdrv_Ch1_WriteNeopixelColor
 14102 ;;		_Npdrv_Ch2_WriteNeopixelColor
 14103 ;;		_Npdrv_Ch3_WriteNeopixelColor
 14104 ;;		_SystemInit
 14105 ;; This function uses a non-reentrant model
 14106 ;;
 14107                           
 14108                           
 14109                           ;psect for function _Mcu_EnableInterrupts
 14110  15C9                     _Mcu_EnableInterrupts:	
 14111                           
 14112                           ;mcu_drv.c: 100: INTCONbits.GIE = ((UINT8)(1));
 14113                           
 14114                           ;incstack = 0
 14115                           ; Regs used in _Mcu_EnableInterrupts: []
 14116  15C9  178B               	bsf	11,7	;volatile
 14117                           
 14118                           ;mcu_drv.c: 101: INTCONbits.PEIE = ((UINT8)(1));
 14119  15CA  170B               	bsf	11,6	;volatile
 14120  15CB  0008               	return
 14121  15CC                     __end_of_Mcu_EnableInterrupts:	
 14122                           
 14123                           	psect	text67
 14124  15C6                     __ptext67:	
 14125 ;; *************** function _Mcu_DisableInterrupts *****************
 14126 ;; Defined at:
 14127 ;;		line 112 in file "../../../Framework/MercuryFwk/Source/c/01_Hal/02_Drv/mcu_drv.c"
 14128 ;; Parameters:    Size  Location     Type
 14129 ;;		None
 14130 ;; Auto vars:     Size  Location     Type
 14131 ;;		None
 14132 ;; Return value:  Size  Location     Type
 14133 ;;                  1    wreg      void 
 14134 ;; Registers used:
 14135 ;;		None
 14136 ;; Tracked objects:
 14137 ;;		On entry : 0/0
 14138 ;;		On exit  : 0/0
 14139 ;;		Unchanged: 0/0
 14140 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14141 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14142 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14143 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14144 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14145 ;;Total ram usage:        0 bytes
 14146 ;; Hardware stack levels used:    1
 14147 ;; Hardware stack levels required when called:    2
 14148 ;; This function calls:
 14149 ;;		Nothing
 14150 ;; This function is called by:
 14151 ;;		_Npdrv_Ch1_WriteNeopixelColor
 14152 ;;		_Npdrv_Ch2_WriteNeopixelColor
 14153 ;;		_Npdrv_Ch3_WriteNeopixelColor
 14154 ;; This function uses a non-reentrant model
 14155 ;;
 14156                           
 14157                           
 14158                           ;psect for function _Mcu_DisableInterrupts
 14159  15C6                     _Mcu_DisableInterrupts:	
 14160                           
 14161                           ;mcu_drv.c: 115: INTCONbits.GIE = ((UINT8)(0));
 14162                           
 14163                           ;incstack = 0
 14164                           ; Regs used in _Mcu_DisableInterrupts: []
 14165  15C6  138B               	bcf	11,7	;volatile
 14166                           
 14167                           ;mcu_drv.c: 116: INTCONbits.PEIE = ((UINT8)(0));
 14168  15C7  130B               	bcf	11,6	;volatile
 14169  15C8  0008               	return
 14170  15C9                     __end_of_Mcu_DisableInterrupts:	
 14171                           
 14172                           	psect	text68
 14173  09D2                     __ptext68:	
 14174 ;; *************** function _Adc_InitAdcModule *****************
 14175 ;; Defined at:
 14176 ;;		line 107 in file "../../../Framework/MercuryFwk/Source/c/01_Hal/02_Drv/adc_drv.c"
 14177 ;; Parameters:    Size  Location     Type
 14178 ;;  AdcConfig       1    wreg     PTR struct _AdcCfgType
 14179 ;;		 -> App_MainTask@AdcConfig(6), 
 14180 ;; Auto vars:     Size  Location     Type
 14181 ;;  AdcConfig       1    4[COMMON] PTR struct _AdcCfgType
 14182 ;;		 -> App_MainTask@AdcConfig(6), 
 14183 ;; Return value:  Size  Location     Type
 14184 ;;                  1    wreg      void 
 14185 ;; Registers used:
 14186 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 14187 ;; Tracked objects:
 14188 ;;		On entry : 0/0
 14189 ;;		On exit  : 0/0
 14190 ;;		Unchanged: 0/0
 14191 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14192 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14193 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14194 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14195 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14196 ;;Total ram usage:        1 bytes
 14197 ;; Hardware stack levels used:    1
 14198 ;; Hardware stack levels required when called:    2
 14199 ;; This function calls:
 14200 ;;		Nothing
 14201 ;; This function is called by:
 14202 ;;		_App_MainTask
 14203 ;; This function uses a non-reentrant model
 14204 ;;
 14205                           
 14206                           
 14207                           ;psect for function _Adc_InitAdcModule
 14208  09D2                     _Adc_InitAdcModule:	
 14209                           
 14210                           ;incstack = 0
 14211                           ; Regs used in _Adc_InitAdcModule: [wreg+fsr1l+fsr1h+status,2+status,0]
 14212                           ;Adc_InitAdcModule@AdcConfig stored from wreg
 14213  09D2  00F4               	movwf	Adc_InitAdcModule@AdcConfig
 14214                           
 14215                           ;adc_drv.c: 110: ADCON0bits.ADON = AdcConfig->AdcEnable;
 14216  09D3  0874               	movf	Adc_InitAdcModule@AdcConfig,w
 14217  09D4  0086               	movwf	6
 14218  09D5  0187               	clrf	7
 14219  09D6  0C01               	rrf	1,w
 14220  09D7  0021               	movlb	1	; select bank1
 14221  09D8  1C03               	skipc
 14222  09D9  101D               	bcf	29,0	;volatile
 14223  09DA  1803               	skipnc
 14224  09DB  141D               	bsf	29,0	;volatile
 14225                           
 14226                           ;adc_drv.c: 112: ADCON1bits.ADFM = AdcConfig->AdcResultFormat;
 14227  09DC  0A74               	incf	Adc_InitAdcModule@AdcConfig,w
 14228  09DD  0086               	movwf	6
 14229  09DE  0187               	clrf	7
 14230  09DF  0C01               	rrf	1,w
 14231  09E0  1C03               	skipc
 14232  09E1  139E               	bcf	30,7	;volatile
 14233  09E2  1803               	skipnc
 14234  09E3  179E               	bsf	30,7	;volatile
 14235                           
 14236                           ;adc_drv.c: 114: ADCON1bits.ADCS0 = AdcConfig->AdcConvClock;
 14237  09E4  0874               	movf	Adc_InitAdcModule@AdcConfig,w
 14238  09E5  3E02               	addlw	2
 14239  09E6  0086               	movwf	6
 14240  09E7  0187               	clrf	7
 14241  09E8  0C01               	rrf	1,w
 14242  09E9  1C03               	skipc
 14243  09EA  121E               	bcf	30,4	;volatile
 14244  09EB  1803               	skipnc
 14245  09EC  161E               	bsf	30,4	;volatile
 14246                           
 14247                           ;adc_drv.c: 116: ADCON1bits.ADNREF = AdcConfig->AdcNegRef;
 14248  09ED  0874               	movf	Adc_InitAdcModule@AdcConfig,w
 14249  09EE  3E03               	addlw	3
 14250  09EF  0086               	movwf	6
 14251  09F0  0187               	clrf	7
 14252  09F1  0C01               	rrf	1,w
 14253  09F2  1C03               	skipc
 14254  09F3  111E               	bcf	30,2	;volatile
 14255  09F4  1803               	skipnc
 14256  09F5  151E               	bsf	30,2	;volatile
 14257                           
 14258                           ;adc_drv.c: 117: ADCON1bits.ADPREF = AdcConfig->AdcPosRef;
 14259  09F6  0874               	movf	Adc_InitAdcModule@AdcConfig,w
 14260  09F7  3E04               	addlw	4
 14261  09F8  0086               	movwf	6
 14262  09F9  0187               	clrf	7
 14263  09FA  081E               	movf	30,w	;volatile
 14264  09FB  0601               	xorwf	1,w
 14265  09FC  39FC               	andlw	-4
 14266  09FD  0601               	xorwf	1,w
 14267  09FE  009E               	movwf	30	;volatile
 14268                           
 14269                           ;adc_drv.c: 119: PIE1bits.ADIE = AdcConfig->AdcIntEnabled;
 14270  09FF  0874               	movf	Adc_InitAdcModule@AdcConfig,w
 14271  0A00  3E05               	addlw	5
 14272  0A01  0086               	movwf	6
 14273  0A02  0187               	clrf	7
 14274  0A03  0C01               	rrf	1,w
 14275  0A04  1C03               	skipc
 14276  0A05  1311               	bcf	17,6	;volatile
 14277  0A06  1803               	skipnc
 14278  0A07  1711               	bsf	17,6	;volatile
 14279  0A08  0008               	return
 14280  0A09                     __end_of_Adc_InitAdcModule:	
 14281                           
 14282                           	psect	text69
 14283  0C01                     __ptext69:	
 14284 ;; *************** function _Adc_ConfigAnCh *****************
 14285 ;; Defined at:
 14286 ;;		line 73 in file "../../../Framework/MercuryFwk/Source/c/01_Hal/02_Drv/adc_drv.c"
 14287 ;; Parameters:    Size  Location     Type
 14288 ;;  AnChSel         1    wreg     PTR struct _AnalogChSelT
 14289 ;;		 -> App_MainTask@AnalogChSel(12), 
 14290 ;; Auto vars:     Size  Location     Type
 14291 ;;  AnChSel         1    4[COMMON] PTR struct _AnalogChSelT
 14292 ;;		 -> App_MainTask@AnalogChSel(12), 
 14293 ;; Return value:  Size  Location     Type
 14294 ;;                  1    wreg      void 
 14295 ;; Registers used:
 14296 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 14297 ;; Tracked objects:
 14298 ;;		On entry : 0/0
 14299 ;;		On exit  : 0/0
 14300 ;;		Unchanged: 0/0
 14301 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14302 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14303 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14304 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14305 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14306 ;;Total ram usage:        1 bytes
 14307 ;; Hardware stack levels used:    1
 14308 ;; Hardware stack levels required when called:    2
 14309 ;; This function calls:
 14310 ;;		Nothing
 14311 ;; This function is called by:
 14312 ;;		_App_MainTask
 14313 ;; This function uses a non-reentrant model
 14314 ;;
 14315                           
 14316                           
 14317                           ;psect for function _Adc_ConfigAnCh
 14318  0C01                     _Adc_ConfigAnCh:	
 14319                           
 14320                           ;incstack = 0
 14321                           ; Regs used in _Adc_ConfigAnCh: [wreg+fsr1l+fsr1h+status,2+status,0]
 14322                           ;Adc_ConfigAnCh@AnChSel stored from wreg
 14323  0C01  00F4               	movwf	Adc_ConfigAnCh@AnChSel
 14324                           
 14325                           ;adc_drv.c: 76: ANSELA = 0x00;
 14326  0C02  0023               	movlb	3	; select bank3
 14327  0C03  018C               	clrf	12	;volatile
 14328                           
 14329                           ;adc_drv.c: 77: ANSELAbits.ANSA0 = AnChSel->AnSelA0An0;
 14330  0C04  0874               	movf	Adc_ConfigAnCh@AnChSel,w
 14331  0C05  0086               	movwf	6
 14332  0C06  0187               	clrf	7
 14333  0C07  0C01               	rrf	1,w
 14334  0C08  1C03               	skipc
 14335  0C09  100C               	bcf	12,0	;volatile
 14336  0C0A  1803               	skipnc
 14337  0C0B  140C               	bsf	12,0	;volatile
 14338                           
 14339                           ;adc_drv.c: 78: ANSELAbits.ANSA1 = AnChSel->AnSelA1An1;
 14340  0C0C  0A74               	incf	Adc_ConfigAnCh@AnChSel,w
 14341  0C0D  0086               	movwf	6
 14342  0C0E  0187               	clrf	7
 14343  0C0F  0C01               	rrf	1,w
 14344  0C10  1C03               	skipc
 14345  0C11  108C               	bcf	12,1	;volatile
 14346  0C12  1803               	skipnc
 14347  0C13  148C               	bsf	12,1	;volatile
 14348                           
 14349                           ;adc_drv.c: 79: ANSELAbits.ANSA2 = AnChSel->AnSelA2An2;
 14350  0C14  0874               	movf	Adc_ConfigAnCh@AnChSel,w
 14351  0C15  3E02               	addlw	2
 14352  0C16  0086               	movwf	6
 14353  0C17  0187               	clrf	7
 14354  0C18  0C01               	rrf	1,w
 14355  0C19  1C03               	skipc
 14356  0C1A  110C               	bcf	12,2	;volatile
 14357  0C1B  1803               	skipnc
 14358  0C1C  150C               	bsf	12,2	;volatile
 14359                           
 14360                           ;adc_drv.c: 80: ANSELAbits.ANSA4 = AnChSel->AnSelA4An3;
 14361  0C1D  0874               	movf	Adc_ConfigAnCh@AnChSel,w
 14362  0C1E  3E03               	addlw	3
 14363  0C1F  0086               	movwf	6
 14364  0C20  0187               	clrf	7
 14365  0C21  0C01               	rrf	1,w
 14366  0C22  1C03               	skipc
 14367  0C23  120C               	bcf	12,4	;volatile
 14368  0C24  1803               	skipnc
 14369  0C25  160C               	bsf	12,4	;volatile
 14370                           
 14371                           ;adc_drv.c: 83: ANSELB = 0x00;
 14372  0C26  018D               	clrf	13	;volatile
 14373                           
 14374                           ;adc_drv.c: 84: ANSELBbits.ANSB4 = AnChSel->AnSelB4An10;
 14375  0C27  0874               	movf	Adc_ConfigAnCh@AnChSel,w
 14376  0C28  3E04               	addlw	4
 14377  0C29  0086               	movwf	6
 14378  0C2A  0187               	clrf	7
 14379  0C2B  0C01               	rrf	1,w
 14380  0C2C  1C03               	skipc
 14381  0C2D  120D               	bcf	13,4	;volatile
 14382  0C2E  1803               	skipnc
 14383  0C2F  160D               	bsf	13,4	;volatile
 14384                           
 14385                           ;adc_drv.c: 85: ANSELBbits.ANSB5 = AnChSel->AnSelB5An11;
 14386  0C30  0874               	movf	Adc_ConfigAnCh@AnChSel,w
 14387  0C31  3E05               	addlw	5
 14388  0C32  0086               	movwf	6
 14389  0C33  0187               	clrf	7
 14390  0C34  0C01               	rrf	1,w
 14391  0C35  1C03               	skipc
 14392  0C36  128D               	bcf	13,5	;volatile
 14393  0C37  1803               	skipnc
 14394  0C38  168D               	bsf	13,5	;volatile
 14395                           
 14396                           ;adc_drv.c: 88: ANSELC = 0x00;
 14397  0C39  018E               	clrf	14	;volatile
 14398                           
 14399                           ;adc_drv.c: 89: ANSELCbits.ANSC0 = AnChSel->AnSelC0An4;
 14400  0C3A  0874               	movf	Adc_ConfigAnCh@AnChSel,w
 14401  0C3B  3E06               	addlw	6
 14402  0C3C  0086               	movwf	6
 14403  0C3D  0187               	clrf	7
 14404  0C3E  0C01               	rrf	1,w
 14405  0C3F  1C03               	skipc
 14406  0C40  100E               	bcf	14,0	;volatile
 14407  0C41  1803               	skipnc
 14408  0C42  140E               	bsf	14,0	;volatile
 14409                           
 14410                           ;adc_drv.c: 90: ANSELCbits.ANSC1 = AnChSel->AnSelC1An5;
 14411  0C43  0874               	movf	Adc_ConfigAnCh@AnChSel,w
 14412  0C44  3E07               	addlw	7
 14413  0C45  0086               	movwf	6
 14414  0C46  0187               	clrf	7
 14415  0C47  0C01               	rrf	1,w
 14416  0C48  1C03               	skipc
 14417  0C49  108E               	bcf	14,1	;volatile
 14418  0C4A  1803               	skipnc
 14419  0C4B  148E               	bsf	14,1	;volatile
 14420                           
 14421                           ;adc_drv.c: 91: ANSELCbits.ANSC2 = AnChSel->AnSelC2An6;
 14422  0C4C  0874               	movf	Adc_ConfigAnCh@AnChSel,w
 14423  0C4D  3E08               	addlw	8
 14424  0C4E  0086               	movwf	6
 14425  0C4F  0187               	clrf	7
 14426  0C50  0C01               	rrf	1,w
 14427  0C51  1C03               	skipc
 14428  0C52  110E               	bcf	14,2	;volatile
 14429  0C53  1803               	skipnc
 14430  0C54  150E               	bsf	14,2	;volatile
 14431                           
 14432                           ;adc_drv.c: 92: ANSELCbits.ANSC3 = AnChSel->AnSelC3An7;
 14433  0C55  0874               	movf	Adc_ConfigAnCh@AnChSel,w
 14434  0C56  3E09               	addlw	9
 14435  0C57  0086               	movwf	6
 14436  0C58  0187               	clrf	7
 14437  0C59  0C01               	rrf	1,w
 14438  0C5A  1C03               	skipc
 14439  0C5B  118E               	bcf	14,3	;volatile
 14440  0C5C  1803               	skipnc
 14441  0C5D  158E               	bsf	14,3	;volatile
 14442                           
 14443                           ;adc_drv.c: 94: ANSELCbits.ANSC6 = AnChSel->AnSelC6An8;
 14444  0C5E  0874               	movf	Adc_ConfigAnCh@AnChSel,w
 14445  0C5F  3E0A               	addlw	10
 14446  0C60  0086               	movwf	6
 14447  0C61  0187               	clrf	7
 14448  0C62  0C01               	rrf	1,w
 14449  0C63  1C03               	skipc
 14450  0C64  130E               	bcf	14,6	;volatile
 14451  0C65  1803               	skipnc
 14452  0C66  170E               	bsf	14,6	;volatile
 14453                           
 14454                           ;adc_drv.c: 95: ANSELCbits.ANSC7 = AnChSel->AnSelC7An9;
 14455  0C67  0874               	movf	Adc_ConfigAnCh@AnChSel,w
 14456  0C68  3E0B               	addlw	11
 14457  0C69  0086               	movwf	6
 14458  0C6A  0187               	clrf	7
 14459  0C6B  0C01               	rrf	1,w
 14460  0C6C  1C03               	skipc
 14461  0C6D  138E               	bcf	14,7	;volatile
 14462  0C6E  1803               	skipnc
 14463  0C6F  178E               	bsf	14,7	;volatile
 14464  0C70  0008               	return
 14465  0C71                     __end_of_Adc_ConfigAnCh:	
 14466                           
 14467                           	psect	intentry
 14468  0004                     __pintentry:	
 14469 ;; *************** function _MainInterrupt *****************
 14470 ;; Defined at:
 14471 ;;		line 50 in file "../../../Framework/MercuryFwk/Source/c/02_Osl/interrupts.c"
 14472 ;; Parameters:    Size  Location     Type
 14473 ;;		None
 14474 ;; Auto vars:     Size  Location     Type
 14475 ;;		None
 14476 ;; Return value:  Size  Location     Type
 14477 ;;                  1    wreg      void 
 14478 ;; Registers used:
 14479 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 14480 ;; Tracked objects:
 14481 ;;		On entry : 0/0
 14482 ;;		On exit  : 0/0
 14483 ;;		Unchanged: 0/0
 14484 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14485 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14486 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14487 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14488 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14489 ;;Total ram usage:        1 bytes
 14490 ;; Hardware stack levels used:    1
 14491 ;; Hardware stack levels required when called:    1
 14492 ;; This function calls:
 14493 ;;		i1_GenerateEvt
 14494 ;; This function is called by:
 14495 ;;		Interrupt level 1
 14496 ;; This function uses a non-reentrant model
 14497 ;;
 14498                           
 14499  0004                     _MainInterrupt:	
 14500                           
 14501                           ;incstack = 0
 14502  0004  147E               	bsf	126,0	;set compiler interrupt flag (level 1)
 14503                           
 14504                           ; Regs used in _MainInterrupt: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 14505  0005  3180               	pagesel	$
 14506  0006  0020               	movlb	0	; select bank0
 14507  0007  087F               	movf	127,w
 14508  0008  00F3               	movwf	??_MainInterrupt
 14509                           
 14510                           ;interrupts.c: 53: if (PIR1bits.TMR2IF == ((UINT8)(1)) && PIE1bits.TMR2IE == ((UINT8)(1)
      +                          ))
 14511  0009  1C91               	btfss	17,1	;volatile
 14512  000A  281C               	goto	i1l4075
 14513  000B  0021               	movlb	1	; select bank1
 14514  000C  1C91               	btfss	17,1	;volatile
 14515  000D  281C               	goto	i1l4075
 14516                           
 14517                           ;interrupts.c: 54: {
 14518                           ;interrupts.c: 56: PIR1bits.TMR2IF = ((UINT8)(0));
 14519  000E  0020               	movlb	0	; select bank0
 14520  000F  1091               	bcf	17,1	;volatile
 14521                           
 14522                           ;interrupts.c: 58: InterruptCounter++;
 14523  0010  3001               	movlw	1
 14524  0011  0021               	movlb	1	; select bank1
 14525  0012  07B8               	addwf	_InterruptCounter^(0+128),f
 14526  0013  3000               	movlw	0
 14527  0014  3DB9               	addwfc	(_InterruptCounter+1)^(0+128),f
 14528                           
 14529                           ;interrupts.c: 60: if (InterruptCounter >= ((UINT16)(1)))
 14530  0015  0838               	movf	_InterruptCounter^(0+128),w
 14531  0016  0439               	iorwf	(_InterruptCounter+1)^(0+128),w
 14532  0017  1903               	btfsc	3,2
 14533  0018  281C               	goto	i1l4075
 14534                           
 14535                           ;interrupts.c: 61: {
 14536                           ;interrupts.c: 63: InterruptCounter = 0;
 14537  0019  01B8               	clrf	_InterruptCounter^(0+128)
 14538  001A  01B9               	clrf	(_InterruptCounter+1)^(0+128)
 14539                           
 14540                           ;interrupts.c: 65: MainSystemTimebaseFlag = CallTaskPhase;
 14541  001B  01EB               	clrf	_MainSystemTimebaseFlag^(0+128)
 14542  001C                     i1l4075:	
 14543                           
 14544                           ;interrupts.c: 66: }
 14545                           ;interrupts.c: 67: }
 14546                           ;interrupts.c: 70: if(PIE1bits.SSP1IE == ((UINT8)(1)) && PIR1bits.SSP1IF == ((UINT8)(1))
      +                          )
 14547  001C  0021               	movlb	1	; select bank1
 14548  001D  1D91               	btfss	17,3	;volatile
 14549  001E  2826               	goto	i1l451
 14550  001F  0020               	movlb	0	; select bank0
 14551  0020  1D91               	btfss	17,3	;volatile
 14552  0021  2826               	goto	i1l451
 14553                           
 14554                           ;interrupts.c: 71: {
 14555                           ;interrupts.c: 73: PIR1bits.SSP1IF = ((UINT8)(0));
 14556  0022  1191               	bcf	17,3	;volatile
 14557                           
 14558                           ;interrupts.c: 77: GenerateEvt(&I2cNewTxNotification);
 14559  0023  30E2               	movlw	(low (_I2cNewTxNotification| 0))& (0+255)
 14560  0024  3197  279C         	fcall	i1_GenerateEvt
 14561  0026                     i1l451:	
 14562  0026  0873               	movf	??_MainInterrupt,w
 14563  0027  0020               	movlb	0	; select bank0
 14564  0028  00FF               	movwf	127
 14565  0029  107E               	bcf	126,0	;clear compiler interrupt flag (level 1)
 14566  002A  0009               	retfie
 14567  002B                     __end_of_MainInterrupt:	
 14568                           
 14569                           	psect	text71
 14570  179C                     __ptext71:	
 14571 ;; *************** function i1_GenerateEvt *****************
 14572 ;; Defined at:
 14573 ;;		line 73 in file "../../../Framework/MercuryFwk/Source/c/02_Osl/os_ser.c"
 14574 ;; Parameters:    Size  Location     Type
 14575 ;;  Event           1    wreg     PTR struct _EventStructu
 14576 ;;		 -> I2cReplyPacketReady(2), I2cWriteRequest(2), I2cSetAddress(2), I2cNewTxNotification(2), 
 14577 ;;		 -> I2cNewPacketNotification(2), 
 14578 ;; Auto vars:     Size  Location     Type
 14579 ;;  Event           1    1[COMMON] PTR struct _EventStructu
 14580 ;;		 -> I2cReplyPacketReady(2), I2cWriteRequest(2), I2cSetAddress(2), I2cNewTxNotification(2), 
 14581 ;;		 -> I2cNewPacketNotification(2), 
 14582 ;;  GenerateEvt     1    2[COMMON] enum E3629
 14583 ;; Return value:  Size  Location     Type
 14584 ;;                  1    wreg      enum E3625
 14585 ;; Registers used:
 14586 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 14587 ;; Tracked objects:
 14588 ;;		On entry : 0/0
 14589 ;;		On exit  : 0/0
 14590 ;;		Unchanged: 0/0
 14591 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14592 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14593 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14594 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14595 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14596 ;;Total ram usage:        3 bytes
 14597 ;; Hardware stack levels used:    1
 14598 ;; This function calls:
 14599 ;;		Nothing
 14600 ;; This function is called by:
 14601 ;;		_MainInterrupt
 14602 ;; This function uses a non-reentrant model
 14603 ;;
 14604                           
 14605                           
 14606                           ;psect for function i1_GenerateEvt
 14607  179C                     i1_GenerateEvt:	
 14608                           
 14609                           ;incstack = 0
 14610                           ; Regs used in i1_GenerateEvt: [wreg+fsr1l+fsr1h+status,2+status,0]
 14611                           ;i1GenerateEvt@Event stored from wreg
 14612  179C  00F1               	movwf	i1GenerateEvt@Event
 14613                           
 14614                           ;os_ser.c: 76: EventStatusType EventStatus = EventIdle;
 14615  179D  01F2               	clrf	i1GenerateEvt@EventStatus
 14616                           
 14617                           ;os_ser.c: 78: if ((Event->EventOptions != ((UINT8)(2))) && (Event->EventOptions != ((UI
      +                          NT8)(3))))
 14618  179E  0871               	movf	i1GenerateEvt@Event,w
 14619  179F  0086               	movwf	6
 14620  17A0  0187               	clrf	7
 14621  17A1  3002               	movlw	2
 14622  17A2  0601               	xorwf	1,w
 14623  17A3  1903               	btfsc	3,2
 14624  17A4  2FB8               	goto	i1l4055
 14625  17A5  0871               	movf	i1GenerateEvt@Event,w
 14626  17A6  0086               	movwf	6
 14627  17A7  0187               	clrf	7
 14628  17A8  3003               	movlw	3
 14629  17A9  0601               	xorwf	1,w
 14630  17AA  1903               	btfsc	3,2
 14631  17AB  2FB8               	goto	i1l4055
 14632                           
 14633                           ;os_ser.c: 79: {
 14634                           ;os_ser.c: 81: Event->EventStatus = EventSent;
 14635  17AC  3002               	movlw	2
 14636  17AD  00F0               	movwf	??i1_GenerateEvt
 14637  17AE  0A71               	incf	i1GenerateEvt@Event,w
 14638  17AF  0086               	movwf	6
 14639  17B0  0187               	clrf	7
 14640  17B1  0870               	movf	??i1_GenerateEvt,w
 14641  17B2  0081               	movwf	1
 14642                           
 14643                           ;os_ser.c: 83: EventStatus = EventSent;
 14644  17B3  3002               	movlw	2
 14645  17B4  00F0               	movwf	??i1_GenerateEvt
 14646  17B5  0870               	movf	??i1_GenerateEvt,w
 14647  17B6  00F2               	movwf	i1GenerateEvt@EventStatus
 14648                           
 14649                           ;os_ser.c: 84: }
 14650  17B7  0008               	return
 14651  17B8                     i1l4055:	
 14652                           
 14653                           ;os_ser.c: 85: else
 14654                           ;os_ser.c: 86: {
 14655                           ;os_ser.c: 88: EventStatus = EventNotSent;
 14656  17B8  3003               	movlw	3
 14657  17B9  00F0               	movwf	??i1_GenerateEvt
 14658  17BA  0870               	movf	??i1_GenerateEvt,w
 14659  17BB  00F2               	movwf	i1GenerateEvt@EventStatus
 14660  17BC  0008               	return
 14661  17BD                     __end_ofi1_GenerateEvt:	
 14662                           ;os_ser.c: 89: }
 14663                           ;os_ser.c: 92: return(EventStatus);
 14664                           ;	Return value of i1_GenerateEvt is never used
 14665                           
 14666  007E                     btemp	set	126	;btemp
 14667  007E                     int$flags	set	126
 14668  007E                     wtemp	set	126
 14669  007E                     wtemp0	set	126
 14670  0080                     wtemp1	set	128
 14671  0082                     wtemp2	set	130
 14672  0084                     wtemp3	set	132
 14673  0086                     wtemp4	set	134
 14674  0088                     wtemp5	set	136
 14675  007F                     wtemp6	set	127
 14676  007E                     ttemp	set	126
 14677  007E                     ttemp0	set	126
 14678  0081                     ttemp1	set	129
 14679  0084                     ttemp2	set	132
 14680  0087                     ttemp3	set	135
 14681  007F                     ttemp4	set	127
 14682  007E                     ltemp	set	126
 14683  007E                     ltemp0	set	126
 14684  0082                     ltemp1	set	130
 14685  0086                     ltemp2	set	134
 14686  0080                     ltemp3	set	128


Data Sizes:
    Strings     28
    Constant    12
    Data        42
    BSS         419
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14      6      10
    BANK0            80     77      80
    BANK1            80      1      77
    BANK2            80      6      64
    BANK3            80      0      80
    BANK4            80      0      80
    BANK5            80      0      80
    BANK6            80      0      80
    BANK7            80      0       0
    BANK8            80      0       0
    BANK9            80      0       0
    BANK10           80      0       0
    BANK11           45      0       0
    BANK12            0      0       0

Pointer List with Targets:

    Tmr6IsrCallback	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), 

    Tmr4IsrCallback	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), 

    Tmr2IsrCallback	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), 

    utoa@buf	PTR unsigned char  size(1) Largest target is 4
		 -> StdS_ManageStdServices@DieTempStr(BANK0[4]), 

    sp__itoa	PTR unsigned char  size(1) Largest target is 0

    sp__utoa	PTR unsigned char  size(1) Largest target is 4
		 -> StdS_ManageStdServices@DieTempStr(BANK0[4]), 

    StringCopy@SourceStr	PTR unsigned char  size(2) Largest target is 9
		 -> StdS_ManageStdServices@DieTempStr(BANK0[4]), STR_5(CODE[9]), STR_4(CODE[9]), STR_3(CODE[6]), 
		 -> STR_2(CODE[5]), 

    StringCopy@DestStr	PTR unsigned char  size(1) Largest target is 80
		 -> RepBuffer(BANK4[80]), 

    LedStateMachine@LedSts	PTR enum E4018 size(1) Largest target is 1
		 -> Led1Sts(BANK1[1]), 

    LedStateMachine@LedPulse	PTR struct _LedPulseType size(1) Largest target is 6
		 -> Led1Pulse(BANK1[6]), 

    LedStateMachine@LedBlink	PTR struct _LedBlinkType size(1) Largest target is 9
		 -> Led1Blink(BANK1[9]), 

    ReceiveEvt@Event	PTR struct _EventStructure size(1) Largest target is 2
		 -> I2cReplyPacketReady(BANK1[2]), I2cWriteRequest(BANK1[2]), I2cSetAddress(BANK1[2]), I2cNewTxNotification(BANK1[2]), 
		 -> I2cNewPacketNotification(BANK1[2]), 

    GenerateEvt@Event	PTR struct _EventStructure size(1) Largest target is 2
		 -> I2cReplyPacketReady(BANK1[2]), I2cWriteRequest(BANK1[2]), I2cSetAddress(BANK1[2]), I2cNewTxNotification(BANK1[2]), 
		 -> I2cNewPacketNotification(BANK1[2]), 

    S1327_SchedTblType$Task	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> App_MainTask(), Led_MainTask(), Wdg_MainTask(), I2cSlv_MainTask(), 
		 -> I2c_DataReceiveSm(), 

    TaskTable.Task	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> App_MainTask(), Led_MainTask(), Wdg_MainTask(), I2cSlv_MainTask(), 
		 -> I2c_DataReceiveSm(), 

    Tmr_TmrBConfig@TmrBConfig	PTR struct _TmrBConfigType size(1) Largest target is 6
		 -> InitSchTimer@TmrBConfig(BANK0[6]), 

    Mcu_ConfigPullUps@WpuCh	PTR struct _WpuChType size(1) Largest target is 18
		 -> App_MainTask@WpuCh(BANK0[18]), 

    LedPulseStateMachine@LedPulse	PTR struct _LedPulseType size(1) Largest target is 6
		 -> Led1Pulse(BANK1[6]), 

    LedBlinkStateMachine@LedBlink	PTR struct _LedBlinkType size(1) Largest target is 9
		 -> Led1Blink(BANK1[9]), 

    I2c_UpdateTxBuffer@DataBuffer	PTR unsigned char  size(1) Largest target is 80
		 -> RepBuffer(BANK4[80]), 

    I2c_InitI2cModule@I2cConfig	PTR struct _I2cConfig size(1) Largest target is 11
		 -> I2cConfig(BANK1[11]), 

    Adc_InitAdcModule@AdcConfig	PTR struct _AdcCfgType size(1) Largest target is 6
		 -> App_MainTask@AdcConfig(BANK0[6]), 

    Adc_ConfigAnCh@AnChSel	PTR struct _AnalogChSelType size(1) Largest target is 12
		 -> App_MainTask@AnalogChSel(BANK0[12]), 


Critical Paths under _main in COMMON

    _Tmr_TmrBConfig->_TmrBInit
    _Tmr_TmrBConfig->_Tmr_TmrBIrqSet
    _Tmr_TmrBPrSet->___wmul
    ___lmul->___wmul
    _Wdg_MainTask->_Mcu_SetWdgPeriod
    _LedStateMachine->_LedBlinkStateMachine
    _LedPulseStateMachine->_Led_SetLedStatus
    _LedBlinkStateMachine->___lwdiv
    _I2c_DataReceiveSm->_ClearRxBuffer
    _I2c_DataReceiveSm->_ClearTxBuffer
    _I2c_DataReceiveSm->_ReceiveEvt
    _I2c_InitI2cModule->_ClearRxBuffer
    _I2c_InitI2cModule->_ClearTxBuffer
    _I2cSlv_I2cDrvHandle->_Led_SetLedStatus
    _I2cSlv_I2cDrvHandle->_ReceiveEvt
    _AppSm->_StdS_SetI2cAddress
    _ManageProtocol->_Npdrv_Ch1_WriteNeopixelColor
    _ManageProtocol->_Npdrv_Ch2_WriteNeopixelColor
    _ManageProtocol->_Npdrv_Ch3_WriteNeopixelColor
    _ManageProtocol->_ReceiveEvt
    _utoa->___lwmod
    _SetLedBehavSts->_Led_SetLedPulseTime
    _SetLedBehavSts->_Led_SetLedStatus
    _LowPowerMode->_Mcu_SetWdgSts
    _GetDieTemperature->_Adc_GetConvResult
    _GetDieTemperature->_Adc_SelectChannel
    _ControlLedDirect->_Led_SetLedStatus

Critical Paths under _MainInterrupt in COMMON

    _MainInterrupt->i1_GenerateEvt

Critical Paths under _main in BANK0

    _SystemInit->_InitSchTimer
    _InitSchTimer->_Tmr_TmrBConfig
    _Tmr_TmrBConfig->_Tmr_TmrBPrSet
    _Tmr_TmrBPrSet->___lmul
    ___lmul->___wmul
    _MainScheduler->_InitializeTasks
    _ScheduleTasks->_App_MainTask
    _InitializeTasks->_App_MainTask
    _LedStateMachine->_LedPulseStateMachine
    _LedPulseStateMachine->___lwdiv
    _LedBlinkStateMachine->___lwdiv
    _I2cSlv_I2cDrvHandle->_I2c_UpdateTxBuffer
    _App_MainTask->_AppSm
    _AppSm->_ManageProtocol
    _ManageProtocol->_Npdrv_Ch1_WriteNeopixelColor
    _ManageProtocol->_Npdrv_Ch2_WriteNeopixelColor
    _ManageProtocol->_Npdrv_Ch3_WriteNeopixelColor
    _StdS_ManageStdServices->_utoa
    _utoa->___lwdiv
    _SetLedBehavSts->_Led_SetLedBlinkTime
    _GetDieTemperature->_Adc_GetConvResult
    _ControlLedDirect->_Led_SetLedStatus

Critical Paths under _MainInterrupt in BANK0

    None.

Critical Paths under _main in BANK1

    _MainScheduler->_InitializeTasks

Critical Paths under _MainInterrupt in BANK1

    None.

Critical Paths under _main in BANK2

    _MainScheduler->_ScheduleTasks

Critical Paths under _MainInterrupt in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _MainInterrupt in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _MainInterrupt in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _MainInterrupt in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _MainInterrupt in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _MainInterrupt in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _MainInterrupt in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _MainInterrupt in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _MainInterrupt in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _MainInterrupt in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _MainInterrupt in BANK12

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0   50640
                      _MainScheduler
                         _SystemInit
 ---------------------------------------------------------------------------------
 (1) _SystemInit                                           0     0      0    3264
                       _InitSchTimer
               _Mcu_EnableInterrupts
                 _Mcu_StartSystemPll
 ---------------------------------------------------------------------------------
 (2) _Mcu_StartSystemPll                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _InitSchTimer                                         7     7      0    3264
                                             37 BANK0      7     7      0
                     _Tmr_TmrBConfig
 ---------------------------------------------------------------------------------
 (3) _Tmr_TmrBConfig                                       3     2      1    3061
                                             34 BANK0      3     2      1
                           _TmrBInit
                       _Tmr_StartTmr
                     _Tmr_TmrBIrqSet
                      _Tmr_TmrBPrSet
 ---------------------------------------------------------------------------------
 (4) _Tmr_TmrBPrSet                                       18    14      4    2003
                                             16 BANK0     18    14      4
                            ___lldiv
                             ___lmul
                             ___wmul
 ---------------------------------------------------------------------------------
 (5) ___wmul                                               6     2      4     404
                                              4 COMMON     2     2      0
                                              0 BANK0      4     0      4
 ---------------------------------------------------------------------------------
 (5) ___lmul                                              12     4      8     220
                                              4 BANK0     12     4      8
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (5) ___lldiv                                             14     6      8     857
                                              4 COMMON     1     1      0
                                              0 BANK0     13     5      8
 ---------------------------------------------------------------------------------
 (4) _Tmr_TmrBIrqSet                                       2     1      1     216
                                              4 COMMON     2     1      1
 ---------------------------------------------------------------------------------
 (4) _Tmr_StartTmr                                         1     1      0      22
                                              4 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (4) _TmrBInit                                             4     2      2     371
                                              4 COMMON     2     0      2
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _MainScheduler                                        0     0      0   47376
                    _InitializeTasks
                      _ScheduleTasks
 ---------------------------------------------------------------------------------
 (2) _ScheduleTasks                                        7     7      0   23781
                                             73 BANK0      1     1      0
                                              0 BANK2      6     6      0
                       _App_MainTask *
                    _I2cSlv_MainTask *
                  _I2c_DataReceiveSm *
                       _Led_MainTask *
                       _Wdg_MainTask *
 ---------------------------------------------------------------------------------
 (2) _InitializeTasks                                      5     5      0   23595
                                             73 BANK0      4     4      0
                                              0 BANK1      1     1      0
                       _App_MainTask *
                    _I2cSlv_MainTask *
                  _I2c_DataReceiveSm *
                       _Led_MainTask *
                       _Wdg_MainTask *
 ---------------------------------------------------------------------------------
 (3) _Wdg_MainTask                                         1     0      1      62
                                             34 BANK0      1     0      1
                       _Mcu_ClearWdg
                   _Mcu_SetWdgPeriod
                      _Mcu_SetWdgSts
 ---------------------------------------------------------------------------------
 (4) _Mcu_SetWdgPeriod                                     2     2      0      31
                                              4 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (4) _Mcu_ClearWdg                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _Led_MainTask                                         5     4      1    5281
                                             34 BANK0      5     4      1
                    _LedStateMachine
                     _SetLedBehavSts
 ---------------------------------------------------------------------------------
 (4) _LedStateMachine                                      7     4      3    4263
                                             11 BANK0      7     4      3
               _LedBlinkStateMachine
               _LedPulseStateMachine
 ---------------------------------------------------------------------------------
 (5) _LedPulseStateMachine                                 4     3      1    2208
                                              7 BANK0      4     3      1
                   _Led_SetLedStatus
                            ___lwdiv
 ---------------------------------------------------------------------------------
 (5) _LedBlinkStateMachine                                 3     3      0    1654
                                              5 COMMON     1     1      0
                                              7 BANK0      2     2      0
                            ___lwdiv
 ---------------------------------------------------------------------------------
 (3) _I2c_DataReceiveSm                                    9     8      1    1096
                                             34 BANK0      9     8      1
                     _CheckAckStatus
                    _CheckByteStatus
                 _CheckStopBitStatus
                      _ClearRxBuffer
                      _ClearTxBuffer
                        _GenerateEvt
                         _ReceiveEvt
 ---------------------------------------------------------------------------------
 (4) _CheckStopBitStatus                                   1     1      0       0
                                              4 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (4) _CheckByteStatus                                      1     1      0       0
                                              4 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (4) _CheckAckStatus                                       1     1      0       0
                                              4 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (3) _I2cSlv_MainTask                                      1     0      1    2410
                                             34 BANK0      1     0      1
                _I2cSlv_I2cDrvHandle
                  _I2c_InitI2cModule
                      _I2c_SetConfig
 ---------------------------------------------------------------------------------
 (4) _I2c_SetConfig                                        1     1      0       0
                                              4 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (4) _I2c_InitI2cModule                                    3     3      0     572
                                              0 BANK0      3     3      0
                      _ClearRxBuffer
                      _ClearTxBuffer
 ---------------------------------------------------------------------------------
 (4) _ClearTxBuffer                                        2     2      0      99
                                              4 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (4) _ClearRxBuffer                                        2     2      0      99
                                              4 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (4) _I2cSlv_I2cDrvHandle                                  6     6      0    1838
                                              4 BANK0      6     6      0
                        _GenerateEvt
                  _I2c_SetI2cAddress
              _I2c_SetI2cAddressMask
                 _I2c_UpdateTxBuffer
                   _Led_SetLedStatus
                         _ReceiveEvt
 ---------------------------------------------------------------------------------
 (5) _I2c_UpdateTxBuffer                                   5     4      1     274
                                              4 COMMON     1     0      1
                                              0 BANK0      4     4      0
 ---------------------------------------------------------------------------------
 (5) _I2c_SetI2cAddressMask                                1     1      0      31
                                              4 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (5) _I2c_SetI2cAddress                                    1     1      0      31
                                              4 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (3) _App_MainTask                                        39    38      1   14613
                                             34 BANK0     39    38      1
                     _Adc_ConfigAnCh
                  _Adc_InitAdcModule
                              _AppSm
                  _Mcu_ConfigPullUps
                 _Mcu_SetDieTempMode
                  _Mcu_SetDieTempSts
                  _Mcu_SetPullUpsSts
 ---------------------------------------------------------------------------------
 (4) _Mcu_SetPullUpsSts                                    1     1      0      31
                                              4 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (4) _Mcu_SetDieTempSts                                    1     1      0      31
                                              4 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (4) _Mcu_SetDieTempMode                                   1     1      0      31
                                              4 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (4) _Mcu_ConfigPullUps                                    1     1      0     591
                                              4 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (4) _AppSm                                                1     1      0   12462
                                             33 BANK0      1     1      0
                        _GenerateEvt
                     _ManageProtocol
                 _StdS_SetI2cAddress
 ---------------------------------------------------------------------------------
 (5) _StdS_SetI2cAddress                                   2     2      0       0
                                              4 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (5) _ManageProtocol                                       4     4      0   12023
                                             30 BANK0      3     3      0
       _Npdrv_Ch1_WriteNeopixelColor
       _Npdrv_Ch2_WriteNeopixelColor
       _Npdrv_Ch3_WriteNeopixelColor
                         _ReceiveEvt
             _StdS_ManageStdServices
 ---------------------------------------------------------------------------------
 (6) _StdS_ManageStdServices                               8     8      0    6147
                                             16 BANK0      8     8      0
                         _BoardReset
                   _ControlLedDirect
                        _GenerateEvt
                  _GetDieTemperature
                       _LowPowerMode
                     _SetLedBehavSts
                         _StringCopy
                               _utoa
 ---------------------------------------------------------------------------------
 (7) _utoa                                                 9     5      4    2399
                                              7 BANK0      9     5      4
                            ___lwdiv
                            ___lwmod
 ---------------------------------------------------------------------------------
 (8) ___lwmod                                              6     2      4     500
                                              4 COMMON     2     2      0
                                              0 BANK0      4     0      4
 ---------------------------------------------------------------------------------
 (6) ___lwdiv                                              8     4      4    1125
                                              4 COMMON     1     1      0
                                              0 BANK0      7     3      4
 ---------------------------------------------------------------------------------
 (7) _StringCopy                                           9     5      4    1350
                                              4 COMMON     1     1      0
                                              0 BANK0      8     4      4
 ---------------------------------------------------------------------------------
 (4) _SetLedBehavSts                                       2     2      0    1018
                                              4 BANK0      2     2      0
                _Led_SetLedBlinkTime
                _Led_SetLedPulseTime
                   _Led_SetLedStatus
 ---------------------------------------------------------------------------------
 (5) _Led_SetLedPulseTime                                  3     1      2     139
                                              4 COMMON     2     0      2
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (5) _Led_SetLedBlinkTime                                  5     1      4     247
                                              4 COMMON     1     1      0
                                              0 BANK0      4     0      4
 ---------------------------------------------------------------------------------
 (7) _LowPowerMode                                         0     0      0      31
                      _Mcu_SetWdgSts
 ---------------------------------------------------------------------------------
 (4) _Mcu_SetWdgSts                                        1     1      0      31
                                              4 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (7) _GetDieTemperature                                    4     2      2      99
                                              3 BANK0      4     2      2
                  _Adc_GetConvResult
                     _Adc_GetConvSts
                  _Adc_SelectChannel
                _Adc_StartConversion
 ---------------------------------------------------------------------------------
 (8) _Adc_StartConversion                                  0     0      0       0
 ---------------------------------------------------------------------------------
 (8) _Adc_SelectChannel                                    2     2      0      31
                                              4 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (8) _Adc_GetConvSts                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (8) _Adc_GetConvResult                                    5     3      2      34
                                              4 COMMON     2     0      2
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (4) _GenerateEvt                                          3     3      0     439
                                              4 COMMON     1     1      0
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (7) _ControlLedDirect                                     0     0      0     601
                   _Led_SetLedStatus
 ---------------------------------------------------------------------------------
 (5) _Led_SetLedStatus                                     3     2      1     601
                                              4 COMMON     2     1      1
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (7) _BoardReset                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (4) _ReceiveEvt                                           2     2      0     329
                                              4 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (6) _Npdrv_Ch3_WriteNeopixelColor                        32    29      3    1387
                                              4 COMMON     2     2      0
                                              0 BANK0     30    27      3
              _Mcu_DisableInterrupts
               _Mcu_EnableInterrupts
 ---------------------------------------------------------------------------------
 (6) _Npdrv_Ch2_WriteNeopixelColor                        32    29      3    1387
                                              4 COMMON     2     2      0
                                              0 BANK0     30    27      3
              _Mcu_DisableInterrupts
               _Mcu_EnableInterrupts
 ---------------------------------------------------------------------------------
 (6) _Npdrv_Ch1_WriteNeopixelColor                        32    29      3    2773
                                              4 COMMON     2     2      0
                                              0 BANK0     30    27      3
              _Mcu_DisableInterrupts
               _Mcu_EnableInterrupts
 ---------------------------------------------------------------------------------
 (2) _Mcu_EnableInterrupts                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (7) _Mcu_DisableInterrupts                                0     0      0       0
 ---------------------------------------------------------------------------------
 (4) _Adc_InitAdcModule                                    1     1      0     219
                                              4 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (4) _Adc_ConfigAnCh                                       1     1      0     405
                                              4 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 8
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (9) _MainInterrupt                                        1     1      0      75
                                              3 COMMON     1     1      0
                      i1_GenerateEvt
 ---------------------------------------------------------------------------------
 (10) i1_GenerateEvt                                       3     3      0      75
                                              0 COMMON     3     3      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 10
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _MainScheduler
     _InitializeTasks
       _App_MainTask *
         _Adc_ConfigAnCh
         _Adc_InitAdcModule
         _AppSm
           _GenerateEvt
           _ManageProtocol
             _Npdrv_Ch1_WriteNeopixelColor
               _Mcu_DisableInterrupts
               _Mcu_EnableInterrupts
             _Npdrv_Ch2_WriteNeopixelColor
               _Mcu_DisableInterrupts
               _Mcu_EnableInterrupts
             _Npdrv_Ch3_WriteNeopixelColor
               _Mcu_DisableInterrupts
               _Mcu_EnableInterrupts
             _ReceiveEvt
             _StdS_ManageStdServices
               _BoardReset
               _ControlLedDirect
                 _Led_SetLedStatus
               _GenerateEvt
               _GetDieTemperature
                 _Adc_GetConvResult
                 _Adc_GetConvSts
                 _Adc_SelectChannel
                 _Adc_StartConversion
               _LowPowerMode
                 _Mcu_SetWdgSts
               _SetLedBehavSts
                 _Led_SetLedBlinkTime
                 _Led_SetLedPulseTime
                 _Led_SetLedStatus
               _StringCopy
               _utoa
                 ___lwdiv
                 ___lwmod
           _StdS_SetI2cAddress
         _Mcu_ConfigPullUps
         _Mcu_SetDieTempMode
         _Mcu_SetDieTempSts
         _Mcu_SetPullUpsSts
       _I2cSlv_MainTask *
         _I2cSlv_I2cDrvHandle
           _GenerateEvt
           _I2c_SetI2cAddress
           _I2c_SetI2cAddressMask
           _I2c_UpdateTxBuffer
           _Led_SetLedStatus
           _ReceiveEvt
         _I2c_InitI2cModule
           _ClearRxBuffer
           _ClearTxBuffer
         _I2c_SetConfig
       _I2c_DataReceiveSm *
         _CheckAckStatus
         _CheckByteStatus
         _CheckStopBitStatus
         _ClearRxBuffer
         _ClearTxBuffer
         _GenerateEvt
         _ReceiveEvt
       _Led_MainTask *
         _LedStateMachine
           _LedBlinkStateMachine
             ___lwdiv
           _LedPulseStateMachine
             _Led_SetLedStatus
             ___lwdiv
         _SetLedBehavSts
           _Led_SetLedBlinkTime
           _Led_SetLedPulseTime
           _Led_SetLedStatus
       _Wdg_MainTask *
         _Mcu_ClearWdg
         _Mcu_SetWdgPeriod
         _Mcu_SetWdgSts
     _ScheduleTasks
       _App_MainTask *
         _Adc_ConfigAnCh
         _Adc_InitAdcModule
         _AppSm
           _GenerateEvt
           _ManageProtocol
             _Npdrv_Ch1_WriteNeopixelColor
               _Mcu_DisableInterrupts
               _Mcu_EnableInterrupts
             _Npdrv_Ch2_WriteNeopixelColor
               _Mcu_DisableInterrupts
               _Mcu_EnableInterrupts
             _Npdrv_Ch3_WriteNeopixelColor
               _Mcu_DisableInterrupts
               _Mcu_EnableInterrupts
             _ReceiveEvt
             _StdS_ManageStdServices
               _BoardReset
               _ControlLedDirect
                 _Led_SetLedStatus
               _GenerateEvt
               _GetDieTemperature
                 _Adc_GetConvResult
                 _Adc_GetConvSts
                 _Adc_SelectChannel
                 _Adc_StartConversion
               _LowPowerMode
                 _Mcu_SetWdgSts
               _SetLedBehavSts
                 _Led_SetLedBlinkTime
                 _Led_SetLedPulseTime
                 _Led_SetLedStatus
               _StringCopy
               _utoa
                 ___lwdiv
                 ___lwmod
           _StdS_SetI2cAddress
         _Mcu_ConfigPullUps
         _Mcu_SetDieTempMode
         _Mcu_SetDieTempSts
         _Mcu_SetPullUpsSts
       _I2cSlv_MainTask *
         _I2cSlv_I2cDrvHandle
           _GenerateEvt
           _I2c_SetI2cAddress
           _I2c_SetI2cAddressMask
           _I2c_UpdateTxBuffer
           _Led_SetLedStatus
           _ReceiveEvt
         _I2c_InitI2cModule
           _ClearRxBuffer
           _ClearTxBuffer
         _I2c_SetConfig
       _I2c_DataReceiveSm *
         _CheckAckStatus
         _CheckByteStatus
         _CheckStopBitStatus
         _ClearRxBuffer
         _ClearTxBuffer
         _GenerateEvt
         _ReceiveEvt
       _Led_MainTask *
         _LedStateMachine
           _LedBlinkStateMachine
             ___lwdiv
           _LedPulseStateMachine
             _Led_SetLedStatus
             ___lwdiv
         _SetLedBehavSts
           _Led_SetLedBlinkTime
           _Led_SetLedPulseTime
           _Led_SetLedStatus
       _Wdg_MainTask *
         _Mcu_ClearWdg
         _Mcu_SetWdgPeriod
         _Mcu_SetWdgSts
   _SystemInit
     _InitSchTimer
       _Tmr_TmrBConfig
         _TmrBInit
         _Tmr_StartTmr
         _Tmr_TmrBIrqSet
         _Tmr_TmrBPrSet
           ___lldiv
           ___lmul
             ___wmul (ARG)
           ___wmul
     _Mcu_EnableInterrupts
     _Mcu_StartSystemPll

 _MainInterrupt (ROOT)
   i1_GenerateEvt

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             3F0      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            E      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               E      6       A       2       71.4%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0       0       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50     4D      50       5      100.0%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BANK1               50      1      4D       7       96.3%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BITBANK2            50      0       0       8        0.0%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
BANK2               50      6      40       9       80.0%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
BITBANK3            50      0       0      10        0.0%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BANK3               50      0      50      11      100.0%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
BITBANK4            50      0       0      12        0.0%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BANK4               50      0      50      13      100.0%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BITBANK5            50      0       0      14        0.0%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
BANK5               50      0      50      15      100.0%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
BITBANK6            50      0       0      16        0.0%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
BANK6               50      0      50      17      100.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BITBANK7            50      0       0      18        0.0%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BANK7               50      0       0      19        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
ABS                  0      0     227      20        0.0%
BITBANK8            50      0       0      21        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BANK8               50      0       0      22        0.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BITBANK9            50      0       0      23        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BANK9               50      0       0      24        0.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BITBANK10           50      0       0      25        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BANK10              50      0       0      26        0.0%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BITBANK11           50      0       0      27        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BANK11              2D      0       0      28        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
BITBANK12           30      0       0      29        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BANK12               0      0       0      30        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
DATA                 0      0     227      31        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%


Microchip Technology PIC Macro Assembler V1.38 build -256452561 
Symbol Table                                                                                   Sun Mar 24 11:32:46 2019

                                        pc 0002                           _Mcu_SetWdgPeriod 1625  
                              __CFG_CP$OFF 0000                         _Mcu_StartSystemPll 15CF  
               __end_of_I2c_UpdateTxBuffer 179C                      ?_LedPulseStateMachine 0027  
               __size_of_GetDieTemperature 0019                     ??_LedBlinkStateMachine 0027  
                      ___wmul@multiplicand 0022                __size_of_CheckStopBitStatus 000A  
                     __end_of_App_MainTask 0EAE                                        l311 0CB9  
                                      l400 063B                                        l304 0C93  
                                      l313 0CBC                                        l321 085E  
                                      l314 0CC0                                        l306 0C96  
                                      l307 0C9A                                        l323 0867  
                                      l404 0663                                        l420 056A  
                                      l324 0870                                        l317 0CEB  
                                      l341 1705             __end_of_StdS_ManageStdServices 0317  
                                      l326 0884                                        l343 1708  
                                      l424 0592                                        l416 0542  
                                      l168 03EE                                        l344 170B  
                                      l329 07F3                                        l353 0A89  
                                      l610 0D79                                        l346 1719  
                                      l380 0499                                        l384 04C1  
                                      l376 0471                                        l640 0972  
                                      l296 0C74                                        l801 0316  
                                      l298 0C76                                        l299 0C79  
                                      l396 0613                                        l652 090A  
                                      l648 08DE                                        l673 1690  
                                      l666 1762                                        l842 1702  
                                      l659 1670                                        l940 08AF  
                                      l588 16EC                                        l767 0A4A  
                                      l954 0EAD                                        l948 0E28  
                                      _PR2 001B                                        _PR4 0416  
                             __CFG_CPD$OFF 0000                                        _PR6 041D  
                      ?_Mcu_StartSystemPll 0070                               __CFG_BORV$LO 0000  
                                      wreg 0009                               __CFG_IESO$ON 0000  
                             __CFG_FOSC$HS 0000                           ??_SetLedBehavSts 0024  
                                     S5347 103A                                       S5349 1028  
                   Mcu_SetPullUpsSts@PuSts 0074              ?_Npdrv_Ch1_WriteNeopixelColor 0020  
                          ??_MainInterrupt 0073                               __CFG_LVP$OFF 0000  
                          ??_MainScheduler 0076                                       l1110 176C  
                                     l1382 0B83                                       l4203 08B7  
                                     l5003 0D01                                       l4205 08C3  
                                     l4213 08D8                                       l4303 0B5B  
                                     l5023 0D43                                       l4145 1664  
                                     l4241 0A12                                       l4209 08CF  
                                     l5017 0D25                                       l5009 0D17  
                                     l5201 16F6                                       l5121 038D  
                                     l3505 0914                                       l4411 04D8  
                                     l4403 04CA                                       l4227 17FB  
                                     l4155 174C                                       l4163 1684  
                                     l5043 0970                                       l5051 098A  
                                     l5107 0367                                       l4333 17DB  
                                     l4149 166A                                       l4245 0A1C  
                                     l4237 0A0C                                       l4253 0A3C  
                                     l4261 0813                                       l4181 09B2  
                                     l5029 0D53                                       l5045 0975  
                                     l5053 099B                                       l5205 16F9  
                                     l5133 03B8                                       l5109 036D  
                                     l3509 091E                                       l4407 04D3  
                                     l4351 0447                                       l4511 054B  
                                     l4335 17DC                                       l4159 175D  
                                     l4167 168A                                       l4191 09CD  
                                     l5071 08A0                                       l5039 0D70  
                                     l5047 097D                                       l5127 03AF  
                                     l4409 0457                                       l4345 0406  
                                     l4441 061C                                       l4425 05F4  
                                     l4521 0559                                       l4505 0531  
                                     l4249 0A37                                       l5145 03E2  
                                     l5137 03C7                                       l5241 0EA1  
                                     l3713 170E                                       l4371 047A  
                                     l4451 062A                                       l4435 0602  
                                     l4419 05B3                                       l4531 057C  
                                     l4515 0554                                       l4283 1738  
                                     l4187 09C4                                       l4179 09A6  
                                     l4611 02F5                                       l5067 0896  
                                     l5059 0886                                       l5075 08A3  
                                     l5139 03CE                                       l5155 03F3  
                                     l4381 0488                                       l4365 0460  
                                     l4461 064D                                       l4445 0625  
                                     l4269 16BF                                       l4293 0B3D  
                                     l4701 0BFB                                       l5149 03E7  
                                     l5093 033F                                       l5085 032B  
                                     l5181 16E0                                       l5245 0EA4  
                                     l4391 04AB                                       l4375 0483  
                                     l4551 05A9                                       l4543 059B  
                                     l4527 0573                                       l4711 00A6  
                                     l5095 0346                                       l5079 0318  
                                     l5191 08E6                                       l5271 070E  
                                     l5167 0A68                                       l4481 067A  
                                     l4473 066C                                       l4457 0644  
                                     l4537 0581                                       l4561 023E  
                                     l5177 16D9                                       l5185 16E3  
                                     l5273 0732                                       l4801 0B03  
                                     l4387 04A2                                       l4467 0652  
                                     l4547 05A4                                       l4555 0224  
                                     l4731 0120                                       l4651 0D7C  
                                     l5195 0901                                       l3683 0879  
                                     l4397 04B0                                       l4477 0675  
                                     l4549 0528                                       l4581 028F  
                                     l4573 0272                                       l4813 0B2E  
                                     l4479 05F9                                       l4495 0523  
                                     l4583 0292                                       l4567 0258  
                                     l4751 019A                                       l4727 0102  
                                     l4719 00E2                                       l4647 1783  
                                     l4663 0DC7                                       l4655 0D8A  
                                     l5199 16EE                                       l4489 04E2  
                                     l4585 0297                                       l4729 0118  
                                     l4673 0DFA                                       l4681 0B9C  
                                     l5297 0806                                       l4809 0B23  
                                     l4587 029A                                       l4579 028C  
                                     l4747 017C                                       l4739 015C  
                                     l4675 0E05                                       l4683 0BA6  
                                     l4931 0C87                                       l4597 02B7  
                                     l4749 0192                                       l4773 0214  
                                     l4693 0BE2                                       l4941 0CC4  
                                     l4781 1765                                       l4767 01F6  
                                     l4759 01D6                                       l4943 0CCF  
                                     l4935 0C9E                                       l4769 020C  
                                     l4937 0CA9                                       l4929 0C7C  
                                     l4961 07CB                                       l4699 0BEC  
                                     l4947 0CDF                                       l4957 079C  
                                     l4965 07E4                                       l4799 0AF5  
                                     l4959 07B3                                       l4967 07F0  
                                     l4969 07F5                                       l4997 0CEF  
                                     STR_1 1015                                       STR_2 1023  
                                     STR_3 101D                                       STR_4 100C  
                                     STR_5 100C                                       _LATA 010C  
                                     _LATB 010D                                       _LATC 010E  
                                     u4024 04EA                                       u4025 04E9  
                                     u4034 04FD                                       u4035 04FC  
                                     u4044 0510                                       u4045 050F  
                                     u5005 06FF                                       u5015 0713  
                                     u3505 09BD                                       u4225 0DB8  
                                     u5025 0727                                       u2705 091F  
                                     u3515 09C5                                       u5107 01E8  
                                     u2715 0926                                       u5117 053F  
                                     u4245 0DEC                                       u4405 0AF8  
                                     u5207 04BE                                       u5127 0567  
                                     u4255 0BCD                                       u5137 058F  
                                     u3545 08BA                                       u5057 00C6  
                                     u4265 0943                                       u4505 0F84  
                                     u4425 0B04                                       u5147 0610  
                                     u3475 09A9                                       u5067 00F4  
                                     u4275 0952                                       u4515 0F95  
                                     u4435 0B18                                       u3724 040E  
                                     u3725 040D                                       u5157 0638  
                                     u3565 08C9                                       u5077 0140  
                                     u4525 0FA6                                       u4445 0B24  
                                     u4365 176D                                       u3734 0421  
                                     u3735 0420                                       u5167 0660  
                                     u3495 09B3                                       u3575 08D0  
                                     u5087 016E                                       u4535 0FB7  
                                     u4375 1772                                       u3744 0434  
                                     u5177 0450                                       u3745 0433  
                                     u5097 01BA                                       u4545 0FC8  
                                     u4465 160B                                       u4810 0E15  
                                     u5187 046E                                       u4555 0FED  
                                     u4475 1615                                       u4820 0E23  
                                     u5197 0496                                       u4485 161F  
                                     u4495 0F69                                       u4905 0AB4  
                                     u3874 05BB                                       u3875 05BA  
                                     u4915 0AC7                                       u3884 05CE  
                                     u3885 05CD                                       u4845 0E6B  
                                     u3894 05E1                                       u3895 05E0  
                                     u4855 0E78                                       u4935 0694  
                                     u4865 0E85                                       u4945 069B  
                                     u4875 0E92                                       u4955 06AE  
                                     u4965 06C2                                       u4895 0AAD  
                                     u4975 06C9                                       u4985 06DB  
                                     u4995 06EC                                       _WPUA 020C  
                                     _WPUB 020D                                       _WPUC 020E  
                             __CFG_WRT$OFF 0000                              __CFG_FCMEN$ON 0000  
              Led_SetLedBlinkTime@OnTimeMs 0020                                       _main 15E0  
                                     fsr0h 0005                                       fsr1h 0007  
                                     fsr0l 0004                                       indf0 0000  
                                     indf1 0001                                       fsr1l 0006  
                                     btemp 007E                            _I2cSlaveAddress 0078  
                                     _utoa 0B37               __size_of_Led_SetLedPulseTime 0010  
                            __CFG_BOREN$ON 0000             __size_of_Mcu_DisableInterrupts 0003  
                                     ltemp 007E                       ??_Mcu_StartSystemPll 0074  
            __end_of_Mcu_DisableInterrupts 15C9                          _Mcu_SetPullUpsSts 15FF  
                                     start 002B                                       ttemp 007E  
                                     wtemp 007E                         AppSm@WpuSetCounter 00C1  
                      __end_of_GenerateEvt 1800                              ?_InitSchTimer 0070  
                           ??_Mcu_ClearWdg 0074                             ?_Mcu_SetWdgSts 0070  
                               _BoardReset 15C4                 __size_of_Mcu_SetDieTempSts 0008  
                            __CFG_MCLRE$ON 0000                         ?_Mcu_SetPullUpsSts 0070  
                      StringCopy@SourceStr 0020                              __CFG_PLLEN$ON 0000  
                      ??_Mcu_SetPullUpsSts 0074                                      ?_main 0070  
                          __end_of___lldiv 0B37                                      ?_utoa 0027  
                          __end_of___lwdiv 09D2                            __end_of___lwmod 08DD  
                                    i1l451 0026               Led_SetLedBlinkTime@OffTimeMs 0022  
                Mcu_SetWdgPeriod@WdgPeriod 0075                    __end_of_LedStateMachine 099D  
                                    _AppSm 0885                        ___lmul@multiplicand 0028  
               __size_of_I2c_SetI2cAddress 0005                           ??_Adc_GetConvSts 0074  
                     __end_of_Led_MainTask 090B               LedPulseStateMachine@LedPulse 002A  
                          __end_of_dpowers 100A                                      pclath 000A  
                                    ltemp0 007E                                      ltemp1 0082  
                                    ltemp2 0086                                      ltemp3 0080  
                __end_of_Mcu_SetPullUpsSts 1607                                      ttemp0 007E  
                                    ttemp1 0081                                      ttemp2 0084  
                                    ttemp3 0087                                      ttemp4 007F  
                                    utoa@c 002E                                      utoa@v 002C  
                                    status 0003                            _I2cSlv_MainTask 16D8  
                                    wtemp0 007E                                      wtemp1 0080  
                                    wtemp2 0082                                      wtemp3 0084  
                                    wtemp4 0086                                      wtemp5 0088  
                                    wtemp6 007F                           ??_Adc_ConfigAnCh 0074  
                           ??_InitSchTimer 0045                __size_of_Mcu_SetDieTempMode 0008  
                  LedStateMachine@LedBlink 002C                            __initialization 002D  
                        _I2c_DataReceiveSm 0317                    LedStateMachine@LedPulse 002D  
         StdS_ManageStdServices@DieTempStr 0032                               __end_of_main 15E7  
                   ??_LedPulseStateMachine 0028                               __end_of_utoa 0B99  
                            AppSm@AppState 00C0                         ?_I2c_DataReceiveSm 0042  
            Npdrv_Ch2_WriteNeopixelColor@i 003D              Npdrv_Ch2_WriteNeopixelColor@j 003C  
                                   ??_main 0076                                     ??_utoa 002B  
           __size_of_I2c_SetI2cAddressMask 0005                           __end_of_TmrBInit 0CEC  
                               _ReceiveEvt 17BD              __end_of_I2c_SetI2cAddressMask 15E0  
                      ??_I2c_DataReceiveSm 0043                                     ?_AppSm 0070  
                        ?_Led_SetLedStatus 0074            Npdrv_Ch2_WriteNeopixelColor@Red 0021  
                 I2cSlv_I2cDrvHandle@Index 0029                            ReceiveEvt@Event 0075  
                                   _ADRESH 009C                                     _ADRESL 009B  
                       ??_Led_SetLedStatus 0075                           ??_ManageProtocol 003E  
                                   _ANSELA 018C                                     _ANSELB 018D  
                                   _ANSELC 018E                                     i1l4055 17B8  
                                   i1l4075 001C                                _GenerateEvt 17DE  
           ??_Npdrv_Ch1_WriteNeopixelColor 0074                                 _TaskNumber 100A  
                      App_MainTask@Options 0042                            ??_Mcu_SetWdgSts 0074  
            I2c_DataReceiveSm@I2cRxAddress 006D                  __end_of_I2c_DataReceiveSm 03FF  
                           __CFG_PWRTE$OFF 0000                                ?_BoardReset 0070  
             __end_of_Mcu_EnableInterrupts 15CC                      __size_of_App_MainTask 00A4  
                                   ___lmul 090B                            _LedBehaviourSts 0079  
                                   ___wmul 1763                             __CFG_STVREN$ON 0000  
                      _Led_SetLedBlinkTime 174A                                  ??___lldiv 0074  
                                ??___lwdiv 0074                     Tmr_TmrBPrSet@IntFreqHz 0030  
                                ??___lwmod 0074                GetDieTemperature@DieTempRes 0025  
                __size_of_ControlLedDirect 0013                            _CheckByteStatus 1611  
                        _Adc_InitAdcModule 09D2                               __pdataCOMMON 0079  
                       ?_Adc_InitAdcModule 0070                __end_of_I2cSlv_I2cDrvHandle 0D7A  
                         ?_LedStateMachine 002B                              ?_LowPowerMode 0070  
                   Adc_SelectChannel@SelCh 0075                       __end_of_Mcu_ClearWdg 0004  
                  __end_of_I2cSlv_MainTask 16ED                       ?_Led_SetLedBlinkTime 0020  
                   __size_of_ScheduleTasks 00C4                   __end_of_Mcu_SetWdgPeriod 1630  
                      ??_Adc_InitAdcModule 0074                      __end_ofi1_GenerateEvt 17BD  
               __size_of_Mcu_SetPullUpsSts 0008                              ?_Wdg_MainTask 0042  
                  __end_of__initialization 0097                     Tmr_TmrBPrSet@Prescaler 0032  
                             _App_MainTask 0E0A                     InitSchTimer@TmrBConfig 0046  
                               _StringCopy 0811                              __end_of_AppSm 08B0  
                           __pcstackCOMMON 0070                   LedStateMachine@LedOutSts 0031  
             __size_of_Adc_StartConversion 0003                               __pidataBANK1 15C2  
                             __pidataBANK2 0834                  __end_of_Adc_InitAdcModule 0A09  
                 __size_of_InitializeTasks 004E                      LedStateMachine@LedSts 002B  
                       LedStateMachine@Led 0030                      __size_of_Led_MainTask 002E  
                      _Led_SetLedPulseTime 1681                      __end_of_I2c_SetConfig 16D8  
                              ?_ReceiveEvt 0070                   _I2cNewPacketNotification 00E0  
                           ??_LowPowerMode 0075                             _OPTION_REGbits 0095  
                               _SystemInit 07F7                       __end_of_InitSchTimer 1731  
                                  ??_AppSm 0041              StdS_ManageStdServices@DieTemp 0036  
                    __end_of_Tmr_TmrBPrSet 07F7       __end_of_Npdrv_Ch3_WriteNeopixelColor 05AC  
    __size_of_Npdrv_Ch3_WriteNeopixelColor 00D1               _Npdrv_Ch3_WriteNeopixelColor 04DB  
                      __size_of_BoardReset 0002                __size_of_StdS_SetI2cAddress 0031  
                    ??_Led_SetLedBlinkTime 0074                         _I2c_UpdateTxBuffer 177F  
                               __pbssBANK0 006D                                 __pbssBANK1 00A0  
                               __pbssBANK2 0148                                 __pbssBANK3 01A0  
                               __pbssBANK4 0220                                 __pbssBANK5 02A0  
                               __pbssBANK6 0320                             ??_Wdg_MainTask 0076  
                      ?_I2c_UpdateTxBuffer 0074                       ?_Led_SetLedPulseTime 0074  
                        _Mcu_ConfigPullUps 0EAE                 __size_of_I2c_DataReceiveSm 00E8  
                                ?_TmrBInit 0074                         ?_Mcu_ConfigPullUps 0070  
                  __size_of_Tmr_TmrBConfig 004B                                 __pmaintext 15E0  
                  __end_of_CheckByteStatus 161B                    __size_of_Tmr_TmrBIrqSet 0029  
         Npdrv_Ch2_WriteNeopixelColor@Blue 0022                                    ?___lmul 0024  
                             _Led_MainTask 08DD                                    ?___wmul 0020  
                            _ScheduleTasks 067D                 __end_of_CheckStopBitStatus 1625  
                               __pintentry 0004                         ClearRxBuffer@Index 0075  
                      ??_Mcu_ConfigPullUps 0074                             ___lmul@product 002C  
                  __size_of_CheckAckStatus 000A                       ??_I2c_UpdateTxBuffer 0020  
                 i1GenerateEvt@EventStatus 0072              __size_of_LedBlinkStateMachine 0090  
        Npdrv_Ch3_WriteNeopixelColor@Green 0020                        Wdg_MainTask@Options 0042  
                   __size_of_ClearRxBuffer 0010                                    _SSP1ADD 0212  
                     _Mcu_EnableInterrupts 15C9                     __size_of_ClearTxBuffer 0010  
                                  _SSP1BUF 0211                                    _SSP1MSK 0213  
                         ?_I2cSlv_MainTask 0042              ?_Npdrv_Ch3_WriteNeopixelColor 0020  
                          _I2cWriteRequest 00E8             Led_SetLedPulseTime@PulseTimeMs 0074  
                    __end_of_MainInterrupt 002B                      __end_of_MainScheduler 0811  
                                  _Led1Sts 00EA                  __end_of_Mcu_ConfigPullUps 0F54  
                    ??_Led_SetLedPulseTime 0076  Npdrv_Ch3_WriteNeopixelColor@GreenBitArray 0023  
Npdrv_Ch2_WriteNeopixelColor@GreenBitArray 0023  Npdrv_Ch1_WriteNeopixelColor@GreenBitArray 0023  
              __size_of_Mcu_StartSystemPll 0003                                ?_StringCopy 0020  
                      __size_of_ReceiveEvt 0021                                 ??_TmrBInit 0020  
                         _NeopixelChannels 00AC                      _Mcu_DisableInterrupts 15C6  
                           ?_ScheduleTasks 0070                            __size_of___lmul 0030  
                                  ___lldiv 0AE4                            __size_of___wmul 001C  
                                  ___lwdiv 099D                                    ___lwmod 08B0  
               __size_of_Adc_InitAdcModule 0037                           _ControlLedDirect 16B1  
                                _I2cConfig 00C6                                  _I2cPacket 239D  
                    Tmr_TmrBIrqSet@TmrNumb 0075                                    __ptext1 07F7  
                                  __ptext2 15CF                                    __ptext3 171A  
                                  __ptext4 0A4B                                    __ptext5 0741  
                                  __ptext6 1763                                    __ptext7 090B  
                                  __ptext8 0AE4                                    __ptext9 085C  
                    __size_of_Mcu_ClearWdg 0002                                    _dpowers 1000  
                                _T2CONbits 001C                              ?_Tmr_StartTmr 0070  
                              ?_SystemInit 0070                          ??_InitializeTasks 0069  
                                _T4CONbits 0417                            _Tmr2IsrCallback 00BA  
                    ?_Mcu_EnableInterrupts 0070                                  _T6CONbits 041E  
            I2c_SetI2cAddress@SlaveAddress 0074        Npdrv_Ch3_WriteNeopixelColor@PixNumb 003B  
                      Mcu_SetWdgSts@WdgSts 0074                                    clrloop0 163D  
                     end_of_initialization 0097                               ?_GenerateEvt 0070  
                   _MainSystemTimebaseFlag 00EB                                    init_ram 1648  
               __end_of_Mcu_SetDieTempMode 15F7                                    initloop 1649  
                  __size_of_SetLedBehavSts 0042                            ___lldiv@divisor 0020  
                __size_of_Led_SetLedStatus 0010                       __end_of_LowPowerMode 1661  
                             ??_BoardReset 0074                            ___lldiv@counter 002C  
                            _ClearRxBuffer 1691                              _ClearTxBuffer 16A1  
                            StringCopy@Len 0023                           ?_CheckByteStatus 0070  
                             _Mcu_ClearWdg 0002                   ??_StdS_ManageStdServices 0030  
                             __pstringtext 1000                                    utoa@buf 002F  
            Npdrv_Ch1_WriteNeopixelColor@i 003D              Npdrv_Ch1_WriteNeopixelColor@j 003C  
                                  utoa@val 0027              __size_of_LedPulseStateMachine 0068  
                    __size_of_InitSchTimer 0017                       __end_of_Wdg_MainTask 1703  
                                _PORTCbits 000E              Mcu_SetDieTempMode@DieTempMode 0074  
                           ??_Tmr_StartTmr 0074                           _InterruptCounter 00B8  
                        StringCopy@DestStr 0022            Npdrv_Ch1_WriteNeopixelColor@Red 0021  
                          _Tmr4IsrCallback 00BC                                  _TRISAbits 008C  
                                _TRISCbits 008E                        __size_of_StringCopy 0023  
                    _I2c_SetI2cAddressMask 15DB                        _Adc_StartConversion 15CC  
                       __end_of_BoardReset 15C6                I2c_DataReceiveSm@I2cRxState 00C4  
                        ?_Mcu_SetWdgPeriod 0070                  Tmr_TmrBPrSet@TmrBPrCfgSts 003D  
               __size_of_Mcu_ConfigPullUps 00A6                                  _Led1Blink 00D1  
                                _CmdBuffer 01A0             ??_Npdrv_Ch3_WriteNeopixelColor 0074  
                       ??_Mcu_SetWdgPeriod 0074                                  _Led1Pulse 00DA  
                  __size_of_Adc_GetConvSts 0004                             ?_ClearRxBuffer 0070  
                   ?_Mcu_DisableInterrupts 0070                            ??_ScheduleTasks 015A  
                           _Tmr_TmrBConfig 0A4B                          App_MainTask@F4172 00A0  
                        App_MainTask@F4158 0148                    Tmr_TmrBPrSet@Postscaler 0033  
                    __end_of_Mcu_SetWdgSts 15EF                               _InitSchTimer 171A  
                           ?_ClearTxBuffer 0070                        __size_of_SystemInit 0009  
                           _Tmr_TmrBIrqSet 085C                Mcu_SetDieTempSts@DieTempSts 0074  
                     ?_Adc_StartConversion 0070                 Adc_InitAdcModule@AdcConfig 0074  
                        App_MainTask@Index 0050                             __end_of___lmul 093B  
                           _CheckAckStatus 1607                             __end_of___wmul 177F  
                  __size_of_Adc_ConfigAnCh 0070                          App_MainTask@WpuCh 0057  
                            __pidataCOMMON 15C3                               ??_ReceiveEvt 0074  
                   ??_Mcu_EnableInterrupts 0074                        start_initialization 002D  
                          _Tmr6IsrCallback 00BE                                  _RepBuffer 0220  
               I2c_InitI2cModule@I2cConfig 0022               __size_of_I2cSlv_I2cDrvHandle 008E  
                 __size_of_LedStateMachine 0031                     __end_of_Tmr_TmrBConfig 0A96  
                   __end_of_Tmr_TmrBIrqSet 0885                                  _TaskTable 0120  
                              _SystemState 006F                     Led_SetLedBlinkTime@Led 0074  
                       __end_of_ReceiveEvt 17DE                    __size_of_ManageProtocol 0188  
                    ??_Adc_StartConversion 0074                      Tmr_TmrBConfig@TmrNumb 0044  
                   __end_of_CheckAckStatus 1611                                   ??___lmul 0076  
                                 ??___wmul 0074                          __size_of_TmrBInit 007B  
                             _RepBufferLen 00C5            __size_of_StdS_ManageStdServices 00F4  
                              __pdataBANK1 00EB                                __pdataBANK2 0120  
                       ClearTxBuffer@Index 0075                     __size_ofi1_GenerateEvt 0021  
                      Tmr_StartTmr@TmrNumb 0074                __end_of_Led_SetLedBlinkTime 1763  
                              __pbssBIGRAM 239D                 __end_of_StdS_SetI2cAddress 096C  
                       __end_of_TaskNumber 100C                     ?_I2c_SetI2cAddressMask 0070  
                              __pbssCOMMON 0076                                  ___latbits 0002  
     __end_of_Npdrv_Ch2_WriteNeopixelColor 067D      __size_of_Npdrv_Ch2_WriteNeopixelColor 00D1  
                    App_MainTask@AdcConfig 0051               _Npdrv_Ch2_WriteNeopixelColor 05AC  
                            __pcstackBANK0 0020                              __pcstackBANK1 00EC  
                            __pcstackBANK2 015A                         _CheckStopBitStatus 161B  
                   GenerateEvt@EventStatus 0020                   __end_of_ControlLedDirect 16C4  
                    __size_of_LowPowerMode 000D                        ?_CheckStopBitStatus 0070  
             __end_of_LedBlinkStateMachine 0E0A                            ??_ClearRxBuffer 0074  
                     __size_of_GenerateEvt 0022                            ?_Tmr_TmrBConfig 0042  
                           _SetLedBehavSts 0A09                            ??_ClearTxBuffer 0074  
                          ?_Tmr_TmrBIrqSet 0074                       __end_of_Tmr_StartTmr 171A  
                             ??_StringCopy 0024                           _Led_SetLedStatus 1661  
                   __size_of_I2c_SetConfig 0014                           ___lwdiv@dividend 0022  
  Npdrv_Ch3_WriteNeopixelColor@RedBitArray 002B    Npdrv_Ch1_WriteNeopixelColor@RedBitArray 002B  
                         GenerateEvt@Event 0021                     __size_of_Tmr_TmrBPrSet 00B6  
                    __size_of_Wdg_MainTask 0016                          _Adc_SelectChannel 1630  
                  App_MainTask@AnalogChSel 0044                            ?_CheckAckStatus 0070  
                  Tmr_TmrBIrqSet@TmrIrqSts 0074                            _InitializeTasks 0A96  
        Npdrv_Ch2_WriteNeopixelColor@Green 0020                                   ?___lldiv 0020  
                      _I2cReplyPacketReady 00E4                                   ?___lwdiv 0020  
                                 ?___lwmod 0020           Npdrv_Ch3_WriteNeopixelColor@Blue 0022  
                       ?_Adc_SelectChannel 0070                       ??_CheckStopBitStatus 0074  
                                __pswtext1 103A                                  __pswtext2 1028  
              __size_of_I2c_UpdateTxBuffer 001D                                _I2cRxBuffer 0320  
                 I2c_DataReceiveSm@Options 0042                      Adc_ConfigAnCh@AnChSel 0074  
                              _I2cTxBuffer 02A0                               ??_SystemInit 0076  
           InitializeTasks@ActiveTaskIndex 00EC                        ??_Adc_SelectChannel 0074  
                           __size_of_AppSm 002B                               _LowPowerMode 1654  
                         __CFG_WDTE$SWDTEN 0000                         __end_of_StringCopy 0834  
            ?_Npdrv_Ch2_WriteNeopixelColor 0020                __end_of_Led_SetLedPulseTime 1691  
                         ___lwdiv@quotient 0025                     _StdS_ManageStdServices 0223  
      Npdrv_Ch2_WriteNeopixelColor@PixNumb 003B   Npdrv_Ch3_WriteNeopixelColor@BlueBitArray 0033  
 Npdrv_Ch2_WriteNeopixelColor@BlueBitArray 0033   Npdrv_Ch1_WriteNeopixelColor@BlueBitArray 0033  
                   __end_of_SetLedBehavSts 0A4B                              i1_GenerateEvt 179C  
               __end_of_Mcu_StartSystemPll 15D2                               _Wdg_MainTask 16ED  
                           ___wmul@product 0074                                   _LATAbits 010C  
                                 _LATCbits 010E                             _Adc_GetConvSts 15D2  
                                clear_ram0 163C                   __size_of_I2cSlv_MainTask 0015  
                  LedPulseStateMachine@Led 0027                                   _PIE1bits 0091  
                                 _PIE3bits 0093                              _I2cSetAddress 00E6  
                __end_of_Adc_SelectChannel 163C                          _I2c_InitI2cModule 0F54  
                                 _PIR1bits 0011                                   _PIR3bits 0013  
                        ??_LedStateMachine 002E                 Adc_GetConvResult@AdcResult 0021  
                       __end_of_SystemInit 0800                         ?_I2c_InitI2cModule 0070  
                                 _SSP1CON1 0215                                   _SSP1CON2 0216  
                                 _SSP1CON3 0217                                   _SSP1STAT 0214  
                           _Adc_ConfigAnCh 0C01                         _Mcu_SetDieTempMode 15EF  
                   __size_of_MainInterrupt 0027                 I2c_DataReceiveSm@I2cRxFlag 00C3  
                   __size_of_MainScheduler 0011                                 _ADCON0bits 009D  
                               _ADCON1bits 009E                          ___wmul@multiplier 0020  
                      ??_I2c_InitI2cModule 0020                                   _WPUAbits 020C  
                                 _WPUBbits 020D                                   _WPUCbits 020E  
                            _I2c_SetConfig 16C4                        ?_Mcu_SetDieTempMode 0070  
                            _Tmr_TmrBPrSet 0741                          ___lmul@multiplier 0024  
                   I2cSlv_MainTask@Options 0042               __end_of_LedPulseStateMachine 0C01  
                           ?i1_GenerateEvt 0070                   Tmr_TmrBConfig@TmrBConfig 0042  
                          ?_SetLedBehavSts 0070                     __end_of_Adc_GetConvSts 15D6  
             LedBlinkStateMachine@LedBlink 0075                    ??_Mcu_DisableInterrupts 0074  
                            ?_App_MainTask 0042                  __end_of_I2c_InitI2cModule 1000  
                        _Adc_GetConvResult 1671                    __end_of_InitializeTasks 0AE4  
                     ??_Mcu_SetDieTempMode 0074                                   _TmrBInit 0C71  
                       ?_Adc_GetConvResult 0074                             _ManageProtocol 009B  
                     Tmr_TmrBPrSet@Divisor 003E                     __end_of_Adc_ConfigAnCh 0C71  
                __size_of_Mcu_SetWdgPeriod 000B              Npdrv_Ch3_WriteNeopixelColor@i 003D  
            Npdrv_Ch3_WriteNeopixelColor@j 003C                           __size_of___lldiv 0053  
                      ??_Adc_GetConvResult 0020                        _I2cSlv_I2cDrvHandle 0CEC  
                         __size_of___lwdiv 0035                       Tmr_TmrBPrSet@TmrNumb 003C  
                         __size_of___lwmod 002D                          _GetDieTemperature 1731  
                               _ANSELAbits 018C                                 _ANSELBbits 018D  
                               _ANSELCbits 018E                   __size_of_CheckByteStatus 000A  
                     _LedBlinkStateMachine 0D7A                             ?_I2c_SetConfig 0070  
                       ?_GetDieTemperature 0023                             ?_Tmr_TmrBPrSet 0030  
                          ___lwdiv@divisor 0020                            ___lwdiv@counter 0024  
                                 __ptext10 1703                                   __ptext11 0C71  
                                 __ptext20 1625                                   __ptext12 0800  
                                 __ptext21 0002                                   __ptext13 067D  
                                 __ptext30 16A1                                   __ptext22 096C  
                                 __ptext14 0A96                                   __ptext31 1691  
                                 __ptext23 0B99                                   __ptext15 0E0A  
                                 __ptext40 0885                                   __ptext32 0CEC  
                                 __ptext24 0D7A                                   __ptext16 08DD  
                                 __ptext41 093B                                   __ptext33 177F  
                                 __ptext25 161B                                   __ptext17 16D8  
                                 __ptext50 174A                                   __ptext42 009B  
                                 __ptext34 15DB                                   __ptext26 1611  
                                 __ptext18 0317                                   __ptext51 1654  
                                 __ptext43 0223                                   __ptext35 15D6  
                                 __ptext27 1607                                   __ptext19 16ED  
                                 __ptext60 1661                                   __ptext52 15E7  
                                 __ptext44 0B37                                   __ptext36 15FF  
                                 __ptext28 16C4                                   __ptext61 15C4  
                                 __ptext53 1731                                   __ptext45 08B0  
                                 __ptext37 15F7                                   __ptext29 0F54  
                                 __ptext62 17BD                                   __ptext54 15CC  
                                 __ptext46 099D                                   __ptext38 15EF  
                                 __ptext71 179C                                   __ptext63 04DB  
                                 __ptext55 1630                                   __ptext47 0811  
                                 __ptext39 0EAE                                   __ptext64 05AC  
                                 __ptext56 15D2                                   __ptext48 0A09  
                                 __ptext65 03FF                                   __ptext57 1671  
                                 __ptext49 1681                                   __ptext66 15C9  
                                 __ptext58 17DE                                   __ptext67 15C6  
                                 __ptext59 16B1                                   __ptext68 09D2  
                                 __ptext69 0C01                               _SSP1CON1bits 0215  
          Npdrv_Ch3_WriteNeopixelColor@Red 0021                    I2c_DataReceiveSm@OpType 006E  
                      ??_GetDieTemperature 0076                       ?_I2cSlv_I2cDrvHandle 0070  
                    __size_of_Tmr_StartTmr 0017                  __end_of_Adc_GetConvResult 1681  
                           ??_App_MainTask 0043                              _MainInterrupt 0004  
                       i1GenerateEvt@Event 0071                            ?_Adc_GetConvSts 0070  
                            _MainScheduler 0800             ??_Npdrv_Ch2_WriteNeopixelColor 0074  
                       TmrBInit@Postscaler 0075                              __size_of_main 0007  
                            __size_of_utoa 0062                        Led_MainTask@Options 0042  
                   __end_of_ManageProtocol 0223               I2c_UpdateTxBuffer@DataBuffer 0022  
               __size_of_Adc_SelectChannel 000C                      __end_of_ScheduleTasks 0741  
                            ?_Led_MainTask 0042                            ?_Adc_ConfigAnCh 0070  
                      Led_SetLedStatus@Led 0020                                   int$flags 007E  
                        _Mcu_SetDieTempSts 15F7                          ??_I2cSlv_MainTask 0076  
                          StringCopy@Index 0074               ScheduleTasks@ActiveTaskIndex 0069  
                __end_of_GetDieTemperature 174A                         ?_Mcu_SetDieTempSts 0070  
                  ??_I2c_SetI2cAddressMask 0074                      ?_LedBlinkStateMachine 0070  
                              _OSCSTATbits 009A                                 _INTCONbits 000B  
                             _Tmr_StartTmr 1703                   __end_of_Led_SetLedStatus 1671  
                      ??_Mcu_SetDieTempSts 0074                                 _FVRCONbits 0117  
                     _I2cNewTxNotification 00E2              __size_of_Mcu_EnableInterrupts 0003  
                   __size_of_Mcu_SetWdgSts 0008                            ??i1_GenerateEvt 0070  
                        _I2c_SetI2cAddress 15D6                           ??_Tmr_TmrBConfig 0043  
                    ??_I2cSlv_I2cDrvHandle 0024                           ??_Tmr_TmrBIrqSet 0075  
                                 intlevel1 0000                             ?_MainInterrupt 0070  
                        TmrBInit@Prescaler 0074                             ?_MainScheduler 0070  
                       ?_I2c_SetI2cAddress 0070                   I2c_UpdateTxBuffer@Length 0074  
                        ?_ControlLedDirect 0070                     Led_SetLedPulseTime@Led 0020  
                         ___lwmod@dividend 0022                     I2c_DataReceiveSm@Index 004A  
              __end_of_Adc_StartConversion 15CF                         _StdS_SetI2cAddress 093B  
                         ___lldiv@dividend 0024                     Mcu_ConfigPullUps@WpuCh 0074  
               __size_of_I2c_InitI2cModule 00AC                     SetLedBehavSts@LedBehav 0025  
                        __CFG_CLKOUTEN$OFF 0000                           ??_CheckAckStatus 0074  
                          ?_ManageProtocol 0070                         ??_ControlLedDirect 0076  
               I2c_DataReceiveSm@RxCounter 0076                           ?_InitializeTasks 0070  
                               _OSCCONbits 0099                        ??_I2c_SetI2cAddress 0074  
                __end_of_Mcu_SetDieTempSts 15FF                             ??_Led_MainTask 0043  
               I2c_DataReceiveSm@TxCounter 0077                        ?_StdS_SetI2cAddress 0070  
                     _LedPulseStateMachine 0B99                            ??_I2c_SetConfig 0074  
                                 utoa@base 0029                            ??_Tmr_TmrBPrSet 0034  
                  I2c_UpdateTxBuffer@Index 0023                           ___lldiv@quotient 0028  
  Npdrv_Ch2_WriteNeopixelColor@RedBitArray 002B                            ___lwmod@divisor 0020  
                  ?_StdS_ManageStdServices 0070                            ___lwmod@counter 0075  
     __end_of_Npdrv_Ch1_WriteNeopixelColor 04DB      __size_of_Npdrv_Ch1_WriteNeopixelColor 00DC  
             _Npdrv_Ch1_WriteNeopixelColor 03FF                  __end_of_I2c_SetI2cAddress 15DB  
                    ReceiveEvt@EventStatus 0074                       ??_StdS_SetI2cAddress 0074  
                               _WDTCONbits 0097                          ??_CheckByteStatus 0074  
             __size_of_Led_SetLedBlinkTime 0019        Npdrv_Ch1_WriteNeopixelColor@PixNumb 003B  
                            ??_GenerateEvt 0074                            _LedStateMachine 096C  
                          TmrBInit@TmrNumb 0021                 __size_of_Adc_GetConvResult 0010  
                   Led_SetLedStatus@LedSts 0074      I2c_SetI2cAddressMask@SlaveAddressMask 0074  
    I2cSlv_I2cDrvHandle@I2cReceiveMsgState 00C2          Npdrv_Ch1_WriteNeopixelColor@Green 0020  
                    __end_of_ClearRxBuffer 16A1           Npdrv_Ch1_WriteNeopixelColor@Blue 0022  
                    __end_of_ClearTxBuffer 16B1                              ?_Mcu_ClearWdg 0070  
                            _Mcu_SetWdgSts 15E7  
