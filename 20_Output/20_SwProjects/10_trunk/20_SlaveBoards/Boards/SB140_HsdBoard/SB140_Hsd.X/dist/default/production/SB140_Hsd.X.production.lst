

Microchip Technology PIC LITE Macro Assembler V1.38 build -256452561 
                                                                                               Sat Oct 19 09:49:21 2019

Microchip Technology Omniscient Code Generator v1.38 (Free mode) build 201607010351
     1                           	processor	16F1829
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	idataCOMMON,global,class=CODE,delta=2
     5                           	psect	idataBANK1,global,class=CODE,delta=2
     6                           	psect	idataBANK2,global,class=CODE,delta=2
     7                           	psect	stringtext,global,class=STRCODE,delta=2
     8                           	psect	cinit,global,class=CODE,merge=1,delta=2
     9                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
    10                           	psect	dataCOMMON,global,class=COMMON,space=1,delta=1
    11                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    12                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    13                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1
    14                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1
    15                           	psect	dataBANK2,global,class=BANK2,space=1,delta=1
    16                           	psect	bssBANK3,global,class=BANK3,space=1,delta=1
    17                           	psect	bssBANK4,global,class=BANK4,space=1,delta=1
    18                           	psect	bssBANK5,global,class=BANK5,space=1,delta=1
    19                           	psect	bssBANK6,global,class=BANK6,space=1,delta=1
    20                           	psect	bssBANK7,global,class=BANK7,space=1,delta=1
    21                           	psect	inittext,global,class=CODE,delta=2
    22                           	psect	clrtext,global,class=CODE,delta=2
    23                           	psect	cstackBANK2,global,class=BANK2,space=1,delta=1
    24                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1
    25                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    26                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    27                           	psect	maintext,global,class=CODE,merge=1,split=1,delta=2
    28                           	psect	text1,local,class=CODE,merge=1,delta=2
    29                           	psect	text2,local,class=CODE,merge=1,delta=2
    30                           	psect	text3,local,class=CODE,merge=1,delta=2
    31                           	psect	text4,local,class=CODE,merge=1,delta=2
    32                           	psect	text5,local,class=CODE,merge=1,delta=2
    33                           	psect	text6,local,class=CODE,merge=1,delta=2
    34                           	psect	text7,local,class=CODE,merge=1,delta=2
    35                           	psect	text8,local,class=CODE,merge=1,delta=2
    36                           	psect	text9,local,class=CODE,merge=1,delta=2
    37                           	psect	text10,local,class=CODE,merge=1,delta=2
    38                           	psect	text11,local,class=CODE,merge=1,delta=2
    39                           	psect	text12,local,class=CODE,merge=1,delta=2
    40                           	psect	text13,local,class=CODE,merge=1,delta=2
    41                           	psect	text14,local,class=CODE,merge=1,delta=2
    42                           	psect	text15,local,class=CODE,merge=1,delta=2
    43                           	psect	text16,local,class=CODE,merge=1,delta=2
    44                           	psect	text17,local,class=CODE,merge=1,delta=2
    45                           	psect	text18,local,class=CODE,merge=1,delta=2
    46                           	psect	text19,local,class=CODE,merge=1,delta=2
    47                           	psect	swtext1,local,class=CONST,delta=2
    48                           	psect	text20,local,class=CODE,merge=1,delta=2
    49                           	psect	text21,local,class=CODE,merge=1,delta=2
    50                           	psect	text22,local,class=CODE,merge=1,delta=2
    51                           	psect	text23,local,class=CODE,merge=1,delta=2
    52                           	psect	text24,local,class=CODE,merge=1,delta=2
    53                           	psect	text25,local,class=CODE,merge=1,delta=2
    54                           	psect	text26,local,class=CODE,merge=1,delta=2
    55                           	psect	text27,local,class=CODE,merge=1,delta=2
    56                           	psect	text28,local,class=CODE,merge=1,delta=2
    57                           	psect	text29,local,class=CODE,merge=1,delta=2
    58                           	psect	text30,local,class=CODE,merge=1,delta=2
    59                           	psect	text31,local,class=CODE,merge=1,delta=2
    60                           	psect	text32,local,class=CODE,merge=1,delta=2
    61                           	psect	text33,local,class=CODE,merge=1,delta=2
    62                           	psect	text34,local,class=CODE,merge=1,delta=2
    63                           	psect	text35,local,class=CODE,merge=1,delta=2
    64                           	psect	text36,local,class=CODE,merge=1,delta=2
    65                           	psect	text37,local,class=CODE,merge=1,delta=2
    66                           	psect	text38,local,class=CODE,merge=1,delta=2
    67                           	psect	text39,local,class=CODE,merge=1,delta=2
    68                           	psect	text40,local,class=CODE,merge=1,delta=2
    69                           	psect	text41,local,class=CODE,merge=1,delta=2
    70                           	psect	text42,local,class=CODE,merge=1,delta=2
    71                           	psect	text43,local,class=CODE,merge=1,delta=2
    72                           	psect	text44,local,class=CODE,merge=1,delta=2
    73                           	psect	text45,local,class=CODE,merge=1,delta=2
    74                           	psect	text46,local,class=CODE,merge=1,delta=2
    75                           	psect	text47,local,class=CODE,merge=1,delta=2
    76                           	psect	text48,local,class=CODE,merge=1,delta=2
    77                           	psect	text49,local,class=CODE,merge=1,delta=2
    78                           	psect	text50,local,class=CODE,merge=1,delta=2
    79                           	psect	text51,local,class=CODE,merge=1,delta=2
    80                           	psect	text52,local,class=CODE,merge=1,delta=2
    81                           	psect	text53,local,class=CODE,merge=1,delta=2
    82                           	psect	text54,local,class=CODE,merge=1,delta=2
    83                           	psect	text55,local,class=CODE,merge=1,delta=2
    84                           	psect	text56,local,class=CODE,merge=1,delta=2
    85                           	psect	text57,local,class=CODE,merge=1,delta=2
    86                           	psect	text58,local,class=CODE,merge=1,delta=2
    87                           	psect	text59,local,class=CODE,merge=1,delta=2
    88                           	psect	text60,local,class=CODE,merge=1,delta=2
    89                           	psect	text61,local,class=CODE,merge=1,delta=2
    90                           	psect	text62,local,class=CODE,merge=1,delta=2
    91                           	psect	text63,local,class=CODE,merge=1,delta=2
    92                           	psect	text64,local,class=CODE,merge=1,delta=2
    93                           	psect	text65,local,class=CODE,merge=1,delta=2
    94                           	psect	text66,local,class=CODE,merge=1,delta=2
    95                           	psect	text67,local,class=CODE,merge=1,delta=2
    96                           	psect	text68,local,class=CODE,merge=1,delta=2
    97                           	psect	text69,local,class=CODE,merge=1,delta=2
    98                           	psect	text70,local,class=CODE,merge=1,delta=2
    99                           	psect	intentry,global,class=CODE,delta=2
   100                           	psect	text72,local,class=CODE,merge=1,delta=2
   101                           	dabs	1,0x620,48
   102                           	dabs	1,0x5CD,35
   103                           	dabs	1,0x239D,0,_I2cPacket
   104                           	dabs	1,0x7E,2
   105  0000                     	;# 
   106  0001                     	;# 
   107  0002                     	;# 
   108  0003                     	;# 
   109  0004                     	;# 
   110  0005                     	;# 
   111  0006                     	;# 
   112  0007                     	;# 
   113  0008                     	;# 
   114  0009                     	;# 
   115  000A                     	;# 
   116  000B                     	;# 
   117  000C                     	;# 
   118  000D                     	;# 
   119  000E                     	;# 
   120  0011                     	;# 
   121  0012                     	;# 
   122  0013                     	;# 
   123  0014                     	;# 
   124  0015                     	;# 
   125  0016                     	;# 
   126  0016                     	;# 
   127  0017                     	;# 
   128  0018                     	;# 
   129  0019                     	;# 
   130  001A                     	;# 
   131  001B                     	;# 
   132  001C                     	;# 
   133  001E                     	;# 
   134  001F                     	;# 
   135  008C                     	;# 
   136  008D                     	;# 
   137  008E                     	;# 
   138  0091                     	;# 
   139  0092                     	;# 
   140  0093                     	;# 
   141  0094                     	;# 
   142  0095                     	;# 
   143  0096                     	;# 
   144  0097                     	;# 
   145  0098                     	;# 
   146  0099                     	;# 
   147  009A                     	;# 
   148  009B                     	;# 
   149  009B                     	;# 
   150  009C                     	;# 
   151  009D                     	;# 
   152  009E                     	;# 
   153  010C                     	;# 
   154  010D                     	;# 
   155  010E                     	;# 
   156  0111                     	;# 
   157  0112                     	;# 
   158  0113                     	;# 
   159  0114                     	;# 
   160  0115                     	;# 
   161  0116                     	;# 
   162  0117                     	;# 
   163  0118                     	;# 
   164  0119                     	;# 
   165  011A                     	;# 
   166  011B                     	;# 
   167  011D                     	;# 
   168  011E                     	;# 
   169  018C                     	;# 
   170  018D                     	;# 
   171  018E                     	;# 
   172  0191                     	;# 
   173  0191                     	;# 
   174  0192                     	;# 
   175  0193                     	;# 
   176  0193                     	;# 
   177  0193                     	;# 
   178  0194                     	;# 
   179  0195                     	;# 
   180  0196                     	;# 
   181  0199                     	;# 
   182  019A                     	;# 
   183  019B                     	;# 
   184  019B                     	;# 
   185  019C                     	;# 
   186  019D                     	;# 
   187  019E                     	;# 
   188  019F                     	;# 
   189  020C                     	;# 
   190  020D                     	;# 
   191  020E                     	;# 
   192  0211                     	;# 
   193  0211                     	;# 
   194  0212                     	;# 
   195  0212                     	;# 
   196  0213                     	;# 
   197  0213                     	;# 
   198  0214                     	;# 
   199  0214                     	;# 
   200  0215                     	;# 
   201  0215                     	;# 
   202  0215                     	;# 
   203  0216                     	;# 
   204  0216                     	;# 
   205  0217                     	;# 
   206  0217                     	;# 
   207  0219                     	;# 
   208  021A                     	;# 
   209  021B                     	;# 
   210  021C                     	;# 
   211  021D                     	;# 
   212  021E                     	;# 
   213  021F                     	;# 
   214  0291                     	;# 
   215  0291                     	;# 
   216  0292                     	;# 
   217  0293                     	;# 
   218  0294                     	;# 
   219  0295                     	;# 
   220  0295                     	;# 
   221  0296                     	;# 
   222  0298                     	;# 
   223  0298                     	;# 
   224  0299                     	;# 
   225  029A                     	;# 
   226  029B                     	;# 
   227  029C                     	;# 
   228  029D                     	;# 
   229  029E                     	;# 
   230  0311                     	;# 
   231  0311                     	;# 
   232  0312                     	;# 
   233  0313                     	;# 
   234  0318                     	;# 
   235  0318                     	;# 
   236  0319                     	;# 
   237  031A                     	;# 
   238  038C                     	;# 
   239  038D                     	;# 
   240  038E                     	;# 
   241  0391                     	;# 
   242  0392                     	;# 
   243  0393                     	;# 
   244  0394                     	;# 
   245  0395                     	;# 
   246  0396                     	;# 
   247  039A                     	;# 
   248  039C                     	;# 
   249  039D                     	;# 
   250  039E                     	;# 
   251  039F                     	;# 
   252  0415                     	;# 
   253  0416                     	;# 
   254  0417                     	;# 
   255  041C                     	;# 
   256  041D                     	;# 
   257  041E                     	;# 
   258  0FE4                     	;# 
   259  0FE5                     	;# 
   260  0FE6                     	;# 
   261  0FE7                     	;# 
   262  0FE8                     	;# 
   263  0FE9                     	;# 
   264  0FEA                     	;# 
   265  0FEB                     	;# 
   266  0FED                     	;# 
   267  0FEE                     	;# 
   268  0FEF                     	;# 
   269  0000                     	;# 
   270  0001                     	;# 
   271  0002                     	;# 
   272  0003                     	;# 
   273  0004                     	;# 
   274  0005                     	;# 
   275  0006                     	;# 
   276  0007                     	;# 
   277  0008                     	;# 
   278  0009                     	;# 
   279  000A                     	;# 
   280  000B                     	;# 
   281  000C                     	;# 
   282  000D                     	;# 
   283  000E                     	;# 
   284  0011                     	;# 
   285  0012                     	;# 
   286  0013                     	;# 
   287  0014                     	;# 
   288  0015                     	;# 
   289  0016                     	;# 
   290  0016                     	;# 
   291  0017                     	;# 
   292  0018                     	;# 
   293  0019                     	;# 
   294  001A                     	;# 
   295  001B                     	;# 
   296  001C                     	;# 
   297  001E                     	;# 
   298  001F                     	;# 
   299  008C                     	;# 
   300  008D                     	;# 
   301  008E                     	;# 
   302  0091                     	;# 
   303  0092                     	;# 
   304  0093                     	;# 
   305  0094                     	;# 
   306  0095                     	;# 
   307  0096                     	;# 
   308  0097                     	;# 
   309  0098                     	;# 
   310  0099                     	;# 
   311  009A                     	;# 
   312  009B                     	;# 
   313  009B                     	;# 
   314  009C                     	;# 
   315  009D                     	;# 
   316  009E                     	;# 
   317  010C                     	;# 
   318  010D                     	;# 
   319  010E                     	;# 
   320  0111                     	;# 
   321  0112                     	;# 
   322  0113                     	;# 
   323  0114                     	;# 
   324  0115                     	;# 
   325  0116                     	;# 
   326  0117                     	;# 
   327  0118                     	;# 
   328  0119                     	;# 
   329  011A                     	;# 
   330  011B                     	;# 
   331  011D                     	;# 
   332  011E                     	;# 
   333  018C                     	;# 
   334  018D                     	;# 
   335  018E                     	;# 
   336  0191                     	;# 
   337  0191                     	;# 
   338  0192                     	;# 
   339  0193                     	;# 
   340  0193                     	;# 
   341  0193                     	;# 
   342  0194                     	;# 
   343  0195                     	;# 
   344  0196                     	;# 
   345  0199                     	;# 
   346  019A                     	;# 
   347  019B                     	;# 
   348  019B                     	;# 
   349  019C                     	;# 
   350  019D                     	;# 
   351  019E                     	;# 
   352  019F                     	;# 
   353  020C                     	;# 
   354  020D                     	;# 
   355  020E                     	;# 
   356  0211                     	;# 
   357  0211                     	;# 
   358  0212                     	;# 
   359  0212                     	;# 
   360  0213                     	;# 
   361  0213                     	;# 
   362  0214                     	;# 
   363  0214                     	;# 
   364  0215                     	;# 
   365  0215                     	;# 
   366  0215                     	;# 
   367  0216                     	;# 
   368  0216                     	;# 
   369  0217                     	;# 
   370  0217                     	;# 
   371  0219                     	;# 
   372  021A                     	;# 
   373  021B                     	;# 
   374  021C                     	;# 
   375  021D                     	;# 
   376  021E                     	;# 
   377  021F                     	;# 
   378  0291                     	;# 
   379  0291                     	;# 
   380  0292                     	;# 
   381  0293                     	;# 
   382  0294                     	;# 
   383  0295                     	;# 
   384  0295                     	;# 
   385  0296                     	;# 
   386  0298                     	;# 
   387  0298                     	;# 
   388  0299                     	;# 
   389  029A                     	;# 
   390  029B                     	;# 
   391  029C                     	;# 
   392  029D                     	;# 
   393  029E                     	;# 
   394  0311                     	;# 
   395  0311                     	;# 
   396  0312                     	;# 
   397  0313                     	;# 
   398  0318                     	;# 
   399  0318                     	;# 
   400  0319                     	;# 
   401  031A                     	;# 
   402  038C                     	;# 
   403  038D                     	;# 
   404  038E                     	;# 
   405  0391                     	;# 
   406  0392                     	;# 
   407  0393                     	;# 
   408  0394                     	;# 
   409  0395                     	;# 
   410  0396                     	;# 
   411  039A                     	;# 
   412  039C                     	;# 
   413  039D                     	;# 
   414  039E                     	;# 
   415  039F                     	;# 
   416  0415                     	;# 
   417  0416                     	;# 
   418  0417                     	;# 
   419  041C                     	;# 
   420  041D                     	;# 
   421  041E                     	;# 
   422  0FE4                     	;# 
   423  0FE5                     	;# 
   424  0FE6                     	;# 
   425  0FE7                     	;# 
   426  0FE8                     	;# 
   427  0FE9                     	;# 
   428  0FEA                     	;# 
   429  0FEB                     	;# 
   430  0FED                     	;# 
   431  0FEE                     	;# 
   432  0FEF                     	;# 
   433  0000                     	;# 
   434  0001                     	;# 
   435  0002                     	;# 
   436  0003                     	;# 
   437  0004                     	;# 
   438  0005                     	;# 
   439  0006                     	;# 
   440  0007                     	;# 
   441  0008                     	;# 
   442  0009                     	;# 
   443  000A                     	;# 
   444  000B                     	;# 
   445  000C                     	;# 
   446  000D                     	;# 
   447  000E                     	;# 
   448  0011                     	;# 
   449  0012                     	;# 
   450  0013                     	;# 
   451  0014                     	;# 
   452  0015                     	;# 
   453  0016                     	;# 
   454  0016                     	;# 
   455  0017                     	;# 
   456  0018                     	;# 
   457  0019                     	;# 
   458  001A                     	;# 
   459  001B                     	;# 
   460  001C                     	;# 
   461  001E                     	;# 
   462  001F                     	;# 
   463  008C                     	;# 
   464  008D                     	;# 
   465  008E                     	;# 
   466  0091                     	;# 
   467  0092                     	;# 
   468  0093                     	;# 
   469  0094                     	;# 
   470  0095                     	;# 
   471  0096                     	;# 
   472  0097                     	;# 
   473  0098                     	;# 
   474  0099                     	;# 
   475  009A                     	;# 
   476  009B                     	;# 
   477  009B                     	;# 
   478  009C                     	;# 
   479  009D                     	;# 
   480  009E                     	;# 
   481  010C                     	;# 
   482  010D                     	;# 
   483  010E                     	;# 
   484  0111                     	;# 
   485  0112                     	;# 
   486  0113                     	;# 
   487  0114                     	;# 
   488  0115                     	;# 
   489  0116                     	;# 
   490  0117                     	;# 
   491  0118                     	;# 
   492  0119                     	;# 
   493  011A                     	;# 
   494  011B                     	;# 
   495  011D                     	;# 
   496  011E                     	;# 
   497  018C                     	;# 
   498  018D                     	;# 
   499  018E                     	;# 
   500  0191                     	;# 
   501  0191                     	;# 
   502  0192                     	;# 
   503  0193                     	;# 
   504  0193                     	;# 
   505  0193                     	;# 
   506  0194                     	;# 
   507  0195                     	;# 
   508  0196                     	;# 
   509  0199                     	;# 
   510  019A                     	;# 
   511  019B                     	;# 
   512  019B                     	;# 
   513  019C                     	;# 
   514  019D                     	;# 
   515  019E                     	;# 
   516  019F                     	;# 
   517  020C                     	;# 
   518  020D                     	;# 
   519  020E                     	;# 
   520  0211                     	;# 
   521  0211                     	;# 
   522  0212                     	;# 
   523  0212                     	;# 
   524  0213                     	;# 
   525  0213                     	;# 
   526  0214                     	;# 
   527  0214                     	;# 
   528  0215                     	;# 
   529  0215                     	;# 
   530  0215                     	;# 
   531  0216                     	;# 
   532  0216                     	;# 
   533  0217                     	;# 
   534  0217                     	;# 
   535  0219                     	;# 
   536  021A                     	;# 
   537  021B                     	;# 
   538  021C                     	;# 
   539  021D                     	;# 
   540  021E                     	;# 
   541  021F                     	;# 
   542  0291                     	;# 
   543  0291                     	;# 
   544  0292                     	;# 
   545  0293                     	;# 
   546  0294                     	;# 
   547  0295                     	;# 
   548  0295                     	;# 
   549  0296                     	;# 
   550  0298                     	;# 
   551  0298                     	;# 
   552  0299                     	;# 
   553  029A                     	;# 
   554  029B                     	;# 
   555  029C                     	;# 
   556  029D                     	;# 
   557  029E                     	;# 
   558  0311                     	;# 
   559  0311                     	;# 
   560  0312                     	;# 
   561  0313                     	;# 
   562  0318                     	;# 
   563  0318                     	;# 
   564  0319                     	;# 
   565  031A                     	;# 
   566  038C                     	;# 
   567  038D                     	;# 
   568  038E                     	;# 
   569  0391                     	;# 
   570  0392                     	;# 
   571  0393                     	;# 
   572  0394                     	;# 
   573  0395                     	;# 
   574  0396                     	;# 
   575  039A                     	;# 
   576  039C                     	;# 
   577  039D                     	;# 
   578  039E                     	;# 
   579  039F                     	;# 
   580  0415                     	;# 
   581  0416                     	;# 
   582  0417                     	;# 
   583  041C                     	;# 
   584  041D                     	;# 
   585  041E                     	;# 
   586  0FE4                     	;# 
   587  0FE5                     	;# 
   588  0FE6                     	;# 
   589  0FE7                     	;# 
   590  0FE8                     	;# 
   591  0FE9                     	;# 
   592  0FEA                     	;# 
   593  0FEB                     	;# 
   594  0FED                     	;# 
   595  0FEE                     	;# 
   596  0FEF                     	;# 
   597  0000                     	;# 
   598  0001                     	;# 
   599  0002                     	;# 
   600  0003                     	;# 
   601  0004                     	;# 
   602  0005                     	;# 
   603  0006                     	;# 
   604  0007                     	;# 
   605  0008                     	;# 
   606  0009                     	;# 
   607  000A                     	;# 
   608  000B                     	;# 
   609  000C                     	;# 
   610  000D                     	;# 
   611  000E                     	;# 
   612  0011                     	;# 
   613  0012                     	;# 
   614  0013                     	;# 
   615  0014                     	;# 
   616  0015                     	;# 
   617  0016                     	;# 
   618  0016                     	;# 
   619  0017                     	;# 
   620  0018                     	;# 
   621  0019                     	;# 
   622  001A                     	;# 
   623  001B                     	;# 
   624  001C                     	;# 
   625  001E                     	;# 
   626  001F                     	;# 
   627  008C                     	;# 
   628  008D                     	;# 
   629  008E                     	;# 
   630  0091                     	;# 
   631  0092                     	;# 
   632  0093                     	;# 
   633  0094                     	;# 
   634  0095                     	;# 
   635  0096                     	;# 
   636  0097                     	;# 
   637  0098                     	;# 
   638  0099                     	;# 
   639  009A                     	;# 
   640  009B                     	;# 
   641  009B                     	;# 
   642  009C                     	;# 
   643  009D                     	;# 
   644  009E                     	;# 
   645  010C                     	;# 
   646  010D                     	;# 
   647  010E                     	;# 
   648  0111                     	;# 
   649  0112                     	;# 
   650  0113                     	;# 
   651  0114                     	;# 
   652  0115                     	;# 
   653  0116                     	;# 
   654  0117                     	;# 
   655  0118                     	;# 
   656  0119                     	;# 
   657  011A                     	;# 
   658  011B                     	;# 
   659  011D                     	;# 
   660  011E                     	;# 
   661  018C                     	;# 
   662  018D                     	;# 
   663  018E                     	;# 
   664  0191                     	;# 
   665  0191                     	;# 
   666  0192                     	;# 
   667  0193                     	;# 
   668  0193                     	;# 
   669  0193                     	;# 
   670  0194                     	;# 
   671  0195                     	;# 
   672  0196                     	;# 
   673  0199                     	;# 
   674  019A                     	;# 
   675  019B                     	;# 
   676  019B                     	;# 
   677  019C                     	;# 
   678  019D                     	;# 
   679  019E                     	;# 
   680  019F                     	;# 
   681  020C                     	;# 
   682  020D                     	;# 
   683  020E                     	;# 
   684  0211                     	;# 
   685  0211                     	;# 
   686  0212                     	;# 
   687  0212                     	;# 
   688  0213                     	;# 
   689  0213                     	;# 
   690  0214                     	;# 
   691  0214                     	;# 
   692  0215                     	;# 
   693  0215                     	;# 
   694  0215                     	;# 
   695  0216                     	;# 
   696  0216                     	;# 
   697  0217                     	;# 
   698  0217                     	;# 
   699  0219                     	;# 
   700  021A                     	;# 
   701  021B                     	;# 
   702  021C                     	;# 
   703  021D                     	;# 
   704  021E                     	;# 
   705  021F                     	;# 
   706  0291                     	;# 
   707  0291                     	;# 
   708  0292                     	;# 
   709  0293                     	;# 
   710  0294                     	;# 
   711  0295                     	;# 
   712  0295                     	;# 
   713  0296                     	;# 
   714  0298                     	;# 
   715  0298                     	;# 
   716  0299                     	;# 
   717  029A                     	;# 
   718  029B                     	;# 
   719  029C                     	;# 
   720  029D                     	;# 
   721  029E                     	;# 
   722  0311                     	;# 
   723  0311                     	;# 
   724  0312                     	;# 
   725  0313                     	;# 
   726  0318                     	;# 
   727  0318                     	;# 
   728  0319                     	;# 
   729  031A                     	;# 
   730  038C                     	;# 
   731  038D                     	;# 
   732  038E                     	;# 
   733  0391                     	;# 
   734  0392                     	;# 
   735  0393                     	;# 
   736  0394                     	;# 
   737  0395                     	;# 
   738  0396                     	;# 
   739  039A                     	;# 
   740  039C                     	;# 
   741  039D                     	;# 
   742  039E                     	;# 
   743  039F                     	;# 
   744  0415                     	;# 
   745  0416                     	;# 
   746  0417                     	;# 
   747  041C                     	;# 
   748  041D                     	;# 
   749  041E                     	;# 
   750  0FE4                     	;# 
   751  0FE5                     	;# 
   752  0FE6                     	;# 
   753  0FE7                     	;# 
   754  0FE8                     	;# 
   755  0FE9                     	;# 
   756  0FEA                     	;# 
   757  0FEB                     	;# 
   758  0FED                     	;# 
   759  0FEE                     	;# 
   760  0FEF                     	;# 
   761  0000                     	;# 
   762  0001                     	;# 
   763  0002                     	;# 
   764  0003                     	;# 
   765  0004                     	;# 
   766  0005                     	;# 
   767  0006                     	;# 
   768  0007                     	;# 
   769  0008                     	;# 
   770  0009                     	;# 
   771  000A                     	;# 
   772  000B                     	;# 
   773  000C                     	;# 
   774  000D                     	;# 
   775  000E                     	;# 
   776  0011                     	;# 
   777  0012                     	;# 
   778  0013                     	;# 
   779  0014                     	;# 
   780  0015                     	;# 
   781  0016                     	;# 
   782  0016                     	;# 
   783  0017                     	;# 
   784  0018                     	;# 
   785  0019                     	;# 
   786  001A                     	;# 
   787  001B                     	;# 
   788  001C                     	;# 
   789  001E                     	;# 
   790  001F                     	;# 
   791  008C                     	;# 
   792  008D                     	;# 
   793  008E                     	;# 
   794  0091                     	;# 
   795  0092                     	;# 
   796  0093                     	;# 
   797  0094                     	;# 
   798  0095                     	;# 
   799  0096                     	;# 
   800  0097                     	;# 
   801  0098                     	;# 
   802  0099                     	;# 
   803  009A                     	;# 
   804  009B                     	;# 
   805  009B                     	;# 
   806  009C                     	;# 
   807  009D                     	;# 
   808  009E                     	;# 
   809  010C                     	;# 
   810  010D                     	;# 
   811  010E                     	;# 
   812  0111                     	;# 
   813  0112                     	;# 
   814  0113                     	;# 
   815  0114                     	;# 
   816  0115                     	;# 
   817  0116                     	;# 
   818  0117                     	;# 
   819  0118                     	;# 
   820  0119                     	;# 
   821  011A                     	;# 
   822  011B                     	;# 
   823  011D                     	;# 
   824  011E                     	;# 
   825  018C                     	;# 
   826  018D                     	;# 
   827  018E                     	;# 
   828  0191                     	;# 
   829  0191                     	;# 
   830  0192                     	;# 
   831  0193                     	;# 
   832  0193                     	;# 
   833  0193                     	;# 
   834  0194                     	;# 
   835  0195                     	;# 
   836  0196                     	;# 
   837  0199                     	;# 
   838  019A                     	;# 
   839  019B                     	;# 
   840  019B                     	;# 
   841  019C                     	;# 
   842  019D                     	;# 
   843  019E                     	;# 
   844  019F                     	;# 
   845  020C                     	;# 
   846  020D                     	;# 
   847  020E                     	;# 
   848  0211                     	;# 
   849  0211                     	;# 
   850  0212                     	;# 
   851  0212                     	;# 
   852  0213                     	;# 
   853  0213                     	;# 
   854  0214                     	;# 
   855  0214                     	;# 
   856  0215                     	;# 
   857  0215                     	;# 
   858  0215                     	;# 
   859  0216                     	;# 
   860  0216                     	;# 
   861  0217                     	;# 
   862  0217                     	;# 
   863  0219                     	;# 
   864  021A                     	;# 
   865  021B                     	;# 
   866  021C                     	;# 
   867  021D                     	;# 
   868  021E                     	;# 
   869  021F                     	;# 
   870  0291                     	;# 
   871  0291                     	;# 
   872  0292                     	;# 
   873  0293                     	;# 
   874  0294                     	;# 
   875  0295                     	;# 
   876  0295                     	;# 
   877  0296                     	;# 
   878  0298                     	;# 
   879  0298                     	;# 
   880  0299                     	;# 
   881  029A                     	;# 
   882  029B                     	;# 
   883  029C                     	;# 
   884  029D                     	;# 
   885  029E                     	;# 
   886  0311                     	;# 
   887  0311                     	;# 
   888  0312                     	;# 
   889  0313                     	;# 
   890  0318                     	;# 
   891  0318                     	;# 
   892  0319                     	;# 
   893  031A                     	;# 
   894  038C                     	;# 
   895  038D                     	;# 
   896  038E                     	;# 
   897  0391                     	;# 
   898  0392                     	;# 
   899  0393                     	;# 
   900  0394                     	;# 
   901  0395                     	;# 
   902  0396                     	;# 
   903  039A                     	;# 
   904  039C                     	;# 
   905  039D                     	;# 
   906  039E                     	;# 
   907  039F                     	;# 
   908  0415                     	;# 
   909  0416                     	;# 
   910  0417                     	;# 
   911  041C                     	;# 
   912  041D                     	;# 
   913  041E                     	;# 
   914  0FE4                     	;# 
   915  0FE5                     	;# 
   916  0FE6                     	;# 
   917  0FE7                     	;# 
   918  0FE8                     	;# 
   919  0FE9                     	;# 
   920  0FEA                     	;# 
   921  0FEB                     	;# 
   922  0FED                     	;# 
   923  0FEE                     	;# 
   924  0FEF                     	;# 
   925  0000                     	;# 
   926  0001                     	;# 
   927  0002                     	;# 
   928  0003                     	;# 
   929  0004                     	;# 
   930  0005                     	;# 
   931  0006                     	;# 
   932  0007                     	;# 
   933  0008                     	;# 
   934  0009                     	;# 
   935  000A                     	;# 
   936  000B                     	;# 
   937  000C                     	;# 
   938  000D                     	;# 
   939  000E                     	;# 
   940  0011                     	;# 
   941  0012                     	;# 
   942  0013                     	;# 
   943  0014                     	;# 
   944  0015                     	;# 
   945  0016                     	;# 
   946  0016                     	;# 
   947  0017                     	;# 
   948  0018                     	;# 
   949  0019                     	;# 
   950  001A                     	;# 
   951  001B                     	;# 
   952  001C                     	;# 
   953  001E                     	;# 
   954  001F                     	;# 
   955  008C                     	;# 
   956  008D                     	;# 
   957  008E                     	;# 
   958  0091                     	;# 
   959  0092                     	;# 
   960  0093                     	;# 
   961  0094                     	;# 
   962  0095                     	;# 
   963  0096                     	;# 
   964  0097                     	;# 
   965  0098                     	;# 
   966  0099                     	;# 
   967  009A                     	;# 
   968  009B                     	;# 
   969  009B                     	;# 
   970  009C                     	;# 
   971  009D                     	;# 
   972  009E                     	;# 
   973  010C                     	;# 
   974  010D                     	;# 
   975  010E                     	;# 
   976  0111                     	;# 
   977  0112                     	;# 
   978  0113                     	;# 
   979  0114                     	;# 
   980  0115                     	;# 
   981  0116                     	;# 
   982  0117                     	;# 
   983  0118                     	;# 
   984  0119                     	;# 
   985  011A                     	;# 
   986  011B                     	;# 
   987  011D                     	;# 
   988  011E                     	;# 
   989  018C                     	;# 
   990  018D                     	;# 
   991  018E                     	;# 
   992  0191                     	;# 
   993  0191                     	;# 
   994  0192                     	;# 
   995  0193                     	;# 
   996  0193                     	;# 
   997  0193                     	;# 
   998  0194                     	;# 
   999  0195                     	;# 
  1000  0196                     	;# 
  1001  0199                     	;# 
  1002  019A                     	;# 
  1003  019B                     	;# 
  1004  019B                     	;# 
  1005  019C                     	;# 
  1006  019D                     	;# 
  1007  019E                     	;# 
  1008  019F                     	;# 
  1009  020C                     	;# 
  1010  020D                     	;# 
  1011  020E                     	;# 
  1012  0211                     	;# 
  1013  0211                     	;# 
  1014  0212                     	;# 
  1015  0212                     	;# 
  1016  0213                     	;# 
  1017  0213                     	;# 
  1018  0214                     	;# 
  1019  0214                     	;# 
  1020  0215                     	;# 
  1021  0215                     	;# 
  1022  0215                     	;# 
  1023  0216                     	;# 
  1024  0216                     	;# 
  1025  0217                     	;# 
  1026  0217                     	;# 
  1027  0219                     	;# 
  1028  021A                     	;# 
  1029  021B                     	;# 
  1030  021C                     	;# 
  1031  021D                     	;# 
  1032  021E                     	;# 
  1033  021F                     	;# 
  1034  0291                     	;# 
  1035  0291                     	;# 
  1036  0292                     	;# 
  1037  0293                     	;# 
  1038  0294                     	;# 
  1039  0295                     	;# 
  1040  0295                     	;# 
  1041  0296                     	;# 
  1042  0298                     	;# 
  1043  0298                     	;# 
  1044  0299                     	;# 
  1045  029A                     	;# 
  1046  029B                     	;# 
  1047  029C                     	;# 
  1048  029D                     	;# 
  1049  029E                     	;# 
  1050  0311                     	;# 
  1051  0311                     	;# 
  1052  0312                     	;# 
  1053  0313                     	;# 
  1054  0318                     	;# 
  1055  0318                     	;# 
  1056  0319                     	;# 
  1057  031A                     	;# 
  1058  038C                     	;# 
  1059  038D                     	;# 
  1060  038E                     	;# 
  1061  0391                     	;# 
  1062  0392                     	;# 
  1063  0393                     	;# 
  1064  0394                     	;# 
  1065  0395                     	;# 
  1066  0396                     	;# 
  1067  039A                     	;# 
  1068  039C                     	;# 
  1069  039D                     	;# 
  1070  039E                     	;# 
  1071  039F                     	;# 
  1072  0415                     	;# 
  1073  0416                     	;# 
  1074  0417                     	;# 
  1075  041C                     	;# 
  1076  041D                     	;# 
  1077  041E                     	;# 
  1078  0FE4                     	;# 
  1079  0FE5                     	;# 
  1080  0FE6                     	;# 
  1081  0FE7                     	;# 
  1082  0FE8                     	;# 
  1083  0FE9                     	;# 
  1084  0FEA                     	;# 
  1085  0FEB                     	;# 
  1086  0FED                     	;# 
  1087  0FEE                     	;# 
  1088  0FEF                     	;# 
  1089  0000                     	;# 
  1090  0001                     	;# 
  1091  0002                     	;# 
  1092  0003                     	;# 
  1093  0004                     	;# 
  1094  0005                     	;# 
  1095  0006                     	;# 
  1096  0007                     	;# 
  1097  0008                     	;# 
  1098  0009                     	;# 
  1099  000A                     	;# 
  1100  000B                     	;# 
  1101  000C                     	;# 
  1102  000D                     	;# 
  1103  000E                     	;# 
  1104  0011                     	;# 
  1105  0012                     	;# 
  1106  0013                     	;# 
  1107  0014                     	;# 
  1108  0015                     	;# 
  1109  0016                     	;# 
  1110  0016                     	;# 
  1111  0017                     	;# 
  1112  0018                     	;# 
  1113  0019                     	;# 
  1114  001A                     	;# 
  1115  001B                     	;# 
  1116  001C                     	;# 
  1117  001E                     	;# 
  1118  001F                     	;# 
  1119  008C                     	;# 
  1120  008D                     	;# 
  1121  008E                     	;# 
  1122  0091                     	;# 
  1123  0092                     	;# 
  1124  0093                     	;# 
  1125  0094                     	;# 
  1126  0095                     	;# 
  1127  0096                     	;# 
  1128  0097                     	;# 
  1129  0098                     	;# 
  1130  0099                     	;# 
  1131  009A                     	;# 
  1132  009B                     	;# 
  1133  009B                     	;# 
  1134  009C                     	;# 
  1135  009D                     	;# 
  1136  009E                     	;# 
  1137  010C                     	;# 
  1138  010D                     	;# 
  1139  010E                     	;# 
  1140  0111                     	;# 
  1141  0112                     	;# 
  1142  0113                     	;# 
  1143  0114                     	;# 
  1144  0115                     	;# 
  1145  0116                     	;# 
  1146  0117                     	;# 
  1147  0118                     	;# 
  1148  0119                     	;# 
  1149  011A                     	;# 
  1150  011B                     	;# 
  1151  011D                     	;# 
  1152  011E                     	;# 
  1153  018C                     	;# 
  1154  018D                     	;# 
  1155  018E                     	;# 
  1156  0191                     	;# 
  1157  0191                     	;# 
  1158  0192                     	;# 
  1159  0193                     	;# 
  1160  0193                     	;# 
  1161  0193                     	;# 
  1162  0194                     	;# 
  1163  0195                     	;# 
  1164  0196                     	;# 
  1165  0199                     	;# 
  1166  019A                     	;# 
  1167  019B                     	;# 
  1168  019B                     	;# 
  1169  019C                     	;# 
  1170  019D                     	;# 
  1171  019E                     	;# 
  1172  019F                     	;# 
  1173  020C                     	;# 
  1174  020D                     	;# 
  1175  020E                     	;# 
  1176  0211                     	;# 
  1177  0211                     	;# 
  1178  0212                     	;# 
  1179  0212                     	;# 
  1180  0213                     	;# 
  1181  0213                     	;# 
  1182  0214                     	;# 
  1183  0214                     	;# 
  1184  0215                     	;# 
  1185  0215                     	;# 
  1186  0215                     	;# 
  1187  0216                     	;# 
  1188  0216                     	;# 
  1189  0217                     	;# 
  1190  0217                     	;# 
  1191  0219                     	;# 
  1192  021A                     	;# 
  1193  021B                     	;# 
  1194  021C                     	;# 
  1195  021D                     	;# 
  1196  021E                     	;# 
  1197  021F                     	;# 
  1198  0291                     	;# 
  1199  0291                     	;# 
  1200  0292                     	;# 
  1201  0293                     	;# 
  1202  0294                     	;# 
  1203  0295                     	;# 
  1204  0295                     	;# 
  1205  0296                     	;# 
  1206  0298                     	;# 
  1207  0298                     	;# 
  1208  0299                     	;# 
  1209  029A                     	;# 
  1210  029B                     	;# 
  1211  029C                     	;# 
  1212  029D                     	;# 
  1213  029E                     	;# 
  1214  0311                     	;# 
  1215  0311                     	;# 
  1216  0312                     	;# 
  1217  0313                     	;# 
  1218  0318                     	;# 
  1219  0318                     	;# 
  1220  0319                     	;# 
  1221  031A                     	;# 
  1222  038C                     	;# 
  1223  038D                     	;# 
  1224  038E                     	;# 
  1225  0391                     	;# 
  1226  0392                     	;# 
  1227  0393                     	;# 
  1228  0394                     	;# 
  1229  0395                     	;# 
  1230  0396                     	;# 
  1231  039A                     	;# 
  1232  039C                     	;# 
  1233  039D                     	;# 
  1234  039E                     	;# 
  1235  039F                     	;# 
  1236  0415                     	;# 
  1237  0416                     	;# 
  1238  0417                     	;# 
  1239  041C                     	;# 
  1240  041D                     	;# 
  1241  041E                     	;# 
  1242  0FE4                     	;# 
  1243  0FE5                     	;# 
  1244  0FE6                     	;# 
  1245  0FE7                     	;# 
  1246  0FE8                     	;# 
  1247  0FE9                     	;# 
  1248  0FEA                     	;# 
  1249  0FEB                     	;# 
  1250  0FED                     	;# 
  1251  0FEE                     	;# 
  1252  0FEF                     	;# 
  1253  0000                     	;# 
  1254  0001                     	;# 
  1255  0002                     	;# 
  1256  0003                     	;# 
  1257  0004                     	;# 
  1258  0005                     	;# 
  1259  0006                     	;# 
  1260  0007                     	;# 
  1261  0008                     	;# 
  1262  0009                     	;# 
  1263  000A                     	;# 
  1264  000B                     	;# 
  1265  000C                     	;# 
  1266  000D                     	;# 
  1267  000E                     	;# 
  1268  0011                     	;# 
  1269  0012                     	;# 
  1270  0013                     	;# 
  1271  0014                     	;# 
  1272  0015                     	;# 
  1273  0016                     	;# 
  1274  0016                     	;# 
  1275  0017                     	;# 
  1276  0018                     	;# 
  1277  0019                     	;# 
  1278  001A                     	;# 
  1279  001B                     	;# 
  1280  001C                     	;# 
  1281  001E                     	;# 
  1282  001F                     	;# 
  1283  008C                     	;# 
  1284  008D                     	;# 
  1285  008E                     	;# 
  1286  0091                     	;# 
  1287  0092                     	;# 
  1288  0093                     	;# 
  1289  0094                     	;# 
  1290  0095                     	;# 
  1291  0096                     	;# 
  1292  0097                     	;# 
  1293  0098                     	;# 
  1294  0099                     	;# 
  1295  009A                     	;# 
  1296  009B                     	;# 
  1297  009B                     	;# 
  1298  009C                     	;# 
  1299  009D                     	;# 
  1300  009E                     	;# 
  1301  010C                     	;# 
  1302  010D                     	;# 
  1303  010E                     	;# 
  1304  0111                     	;# 
  1305  0112                     	;# 
  1306  0113                     	;# 
  1307  0114                     	;# 
  1308  0115                     	;# 
  1309  0116                     	;# 
  1310  0117                     	;# 
  1311  0118                     	;# 
  1312  0119                     	;# 
  1313  011A                     	;# 
  1314  011B                     	;# 
  1315  011D                     	;# 
  1316  011E                     	;# 
  1317  018C                     	;# 
  1318  018D                     	;# 
  1319  018E                     	;# 
  1320  0191                     	;# 
  1321  0191                     	;# 
  1322  0192                     	;# 
  1323  0193                     	;# 
  1324  0193                     	;# 
  1325  0193                     	;# 
  1326  0194                     	;# 
  1327  0195                     	;# 
  1328  0196                     	;# 
  1329  0199                     	;# 
  1330  019A                     	;# 
  1331  019B                     	;# 
  1332  019B                     	;# 
  1333  019C                     	;# 
  1334  019D                     	;# 
  1335  019E                     	;# 
  1336  019F                     	;# 
  1337  020C                     	;# 
  1338  020D                     	;# 
  1339  020E                     	;# 
  1340  0211                     	;# 
  1341  0211                     	;# 
  1342  0212                     	;# 
  1343  0212                     	;# 
  1344  0213                     	;# 
  1345  0213                     	;# 
  1346  0214                     	;# 
  1347  0214                     	;# 
  1348  0215                     	;# 
  1349  0215                     	;# 
  1350  0215                     	;# 
  1351  0216                     	;# 
  1352  0216                     	;# 
  1353  0217                     	;# 
  1354  0217                     	;# 
  1355  0219                     	;# 
  1356  021A                     	;# 
  1357  021B                     	;# 
  1358  021C                     	;# 
  1359  021D                     	;# 
  1360  021E                     	;# 
  1361  021F                     	;# 
  1362  0291                     	;# 
  1363  0291                     	;# 
  1364  0292                     	;# 
  1365  0293                     	;# 
  1366  0294                     	;# 
  1367  0295                     	;# 
  1368  0295                     	;# 
  1369  0296                     	;# 
  1370  0298                     	;# 
  1371  0298                     	;# 
  1372  0299                     	;# 
  1373  029A                     	;# 
  1374  029B                     	;# 
  1375  029C                     	;# 
  1376  029D                     	;# 
  1377  029E                     	;# 
  1378  0311                     	;# 
  1379  0311                     	;# 
  1380  0312                     	;# 
  1381  0313                     	;# 
  1382  0318                     	;# 
  1383  0318                     	;# 
  1384  0319                     	;# 
  1385  031A                     	;# 
  1386  038C                     	;# 
  1387  038D                     	;# 
  1388  038E                     	;# 
  1389  0391                     	;# 
  1390  0392                     	;# 
  1391  0393                     	;# 
  1392  0394                     	;# 
  1393  0395                     	;# 
  1394  0396                     	;# 
  1395  039A                     	;# 
  1396  039C                     	;# 
  1397  039D                     	;# 
  1398  039E                     	;# 
  1399  039F                     	;# 
  1400  0415                     	;# 
  1401  0416                     	;# 
  1402  0417                     	;# 
  1403  041C                     	;# 
  1404  041D                     	;# 
  1405  041E                     	;# 
  1406  0FE4                     	;# 
  1407  0FE5                     	;# 
  1408  0FE6                     	;# 
  1409  0FE7                     	;# 
  1410  0FE8                     	;# 
  1411  0FE9                     	;# 
  1412  0FEA                     	;# 
  1413  0FEB                     	;# 
  1414  0FED                     	;# 
  1415  0FEE                     	;# 
  1416  0FEF                     	;# 
  1417  0000                     	;# 
  1418  0001                     	;# 
  1419  0002                     	;# 
  1420  0003                     	;# 
  1421  0004                     	;# 
  1422  0005                     	;# 
  1423  0006                     	;# 
  1424  0007                     	;# 
  1425  0008                     	;# 
  1426  0009                     	;# 
  1427  000A                     	;# 
  1428  000B                     	;# 
  1429  000C                     	;# 
  1430  000D                     	;# 
  1431  000E                     	;# 
  1432  0011                     	;# 
  1433  0012                     	;# 
  1434  0013                     	;# 
  1435  0014                     	;# 
  1436  0015                     	;# 
  1437  0016                     	;# 
  1438  0016                     	;# 
  1439  0017                     	;# 
  1440  0018                     	;# 
  1441  0019                     	;# 
  1442  001A                     	;# 
  1443  001B                     	;# 
  1444  001C                     	;# 
  1445  001E                     	;# 
  1446  001F                     	;# 
  1447  008C                     	;# 
  1448  008D                     	;# 
  1449  008E                     	;# 
  1450  0091                     	;# 
  1451  0092                     	;# 
  1452  0093                     	;# 
  1453  0094                     	;# 
  1454  0095                     	;# 
  1455  0096                     	;# 
  1456  0097                     	;# 
  1457  0098                     	;# 
  1458  0099                     	;# 
  1459  009A                     	;# 
  1460  009B                     	;# 
  1461  009B                     	;# 
  1462  009C                     	;# 
  1463  009D                     	;# 
  1464  009E                     	;# 
  1465  010C                     	;# 
  1466  010D                     	;# 
  1467  010E                     	;# 
  1468  0111                     	;# 
  1469  0112                     	;# 
  1470  0113                     	;# 
  1471  0114                     	;# 
  1472  0115                     	;# 
  1473  0116                     	;# 
  1474  0117                     	;# 
  1475  0118                     	;# 
  1476  0119                     	;# 
  1477  011A                     	;# 
  1478  011B                     	;# 
  1479  011D                     	;# 
  1480  011E                     	;# 
  1481  018C                     	;# 
  1482  018D                     	;# 
  1483  018E                     	;# 
  1484  0191                     	;# 
  1485  0191                     	;# 
  1486  0192                     	;# 
  1487  0193                     	;# 
  1488  0193                     	;# 
  1489  0193                     	;# 
  1490  0194                     	;# 
  1491  0195                     	;# 
  1492  0196                     	;# 
  1493  0199                     	;# 
  1494  019A                     	;# 
  1495  019B                     	;# 
  1496  019B                     	;# 
  1497  019C                     	;# 
  1498  019D                     	;# 
  1499  019E                     	;# 
  1500  019F                     	;# 
  1501  020C                     	;# 
  1502  020D                     	;# 
  1503  020E                     	;# 
  1504  0211                     	;# 
  1505  0211                     	;# 
  1506  0212                     	;# 
  1507  0212                     	;# 
  1508  0213                     	;# 
  1509  0213                     	;# 
  1510  0214                     	;# 
  1511  0214                     	;# 
  1512  0215                     	;# 
  1513  0215                     	;# 
  1514  0215                     	;# 
  1515  0216                     	;# 
  1516  0216                     	;# 
  1517  0217                     	;# 
  1518  0217                     	;# 
  1519  0219                     	;# 
  1520  021A                     	;# 
  1521  021B                     	;# 
  1522  021C                     	;# 
  1523  021D                     	;# 
  1524  021E                     	;# 
  1525  021F                     	;# 
  1526  0291                     	;# 
  1527  0291                     	;# 
  1528  0292                     	;# 
  1529  0293                     	;# 
  1530  0294                     	;# 
  1531  0295                     	;# 
  1532  0295                     	;# 
  1533  0296                     	;# 
  1534  0298                     	;# 
  1535  0298                     	;# 
  1536  0299                     	;# 
  1537  029A                     	;# 
  1538  029B                     	;# 
  1539  029C                     	;# 
  1540  029D                     	;# 
  1541  029E                     	;# 
  1542  0311                     	;# 
  1543  0311                     	;# 
  1544  0312                     	;# 
  1545  0313                     	;# 
  1546  0318                     	;# 
  1547  0318                     	;# 
  1548  0319                     	;# 
  1549  031A                     	;# 
  1550  038C                     	;# 
  1551  038D                     	;# 
  1552  038E                     	;# 
  1553  0391                     	;# 
  1554  0392                     	;# 
  1555  0393                     	;# 
  1556  0394                     	;# 
  1557  0395                     	;# 
  1558  0396                     	;# 
  1559  039A                     	;# 
  1560  039C                     	;# 
  1561  039D                     	;# 
  1562  039E                     	;# 
  1563  039F                     	;# 
  1564  0415                     	;# 
  1565  0416                     	;# 
  1566  0417                     	;# 
  1567  041C                     	;# 
  1568  041D                     	;# 
  1569  041E                     	;# 
  1570  0FE4                     	;# 
  1571  0FE5                     	;# 
  1572  0FE6                     	;# 
  1573  0FE7                     	;# 
  1574  0FE8                     	;# 
  1575  0FE9                     	;# 
  1576  0FEA                     	;# 
  1577  0FEB                     	;# 
  1578  0FED                     	;# 
  1579  0FEE                     	;# 
  1580  0FEF                     	;# 
  1581  0000                     	;# 
  1582  0001                     	;# 
  1583  0002                     	;# 
  1584  0003                     	;# 
  1585  0004                     	;# 
  1586  0005                     	;# 
  1587  0006                     	;# 
  1588  0007                     	;# 
  1589  0008                     	;# 
  1590  0009                     	;# 
  1591  000A                     	;# 
  1592  000B                     	;# 
  1593  000C                     	;# 
  1594  000D                     	;# 
  1595  000E                     	;# 
  1596  0011                     	;# 
  1597  0012                     	;# 
  1598  0013                     	;# 
  1599  0014                     	;# 
  1600  0015                     	;# 
  1601  0016                     	;# 
  1602  0016                     	;# 
  1603  0017                     	;# 
  1604  0018                     	;# 
  1605  0019                     	;# 
  1606  001A                     	;# 
  1607  001B                     	;# 
  1608  001C                     	;# 
  1609  001E                     	;# 
  1610  001F                     	;# 
  1611  008C                     	;# 
  1612  008D                     	;# 
  1613  008E                     	;# 
  1614  0091                     	;# 
  1615  0092                     	;# 
  1616  0093                     	;# 
  1617  0094                     	;# 
  1618  0095                     	;# 
  1619  0096                     	;# 
  1620  0097                     	;# 
  1621  0098                     	;# 
  1622  0099                     	;# 
  1623  009A                     	;# 
  1624  009B                     	;# 
  1625  009B                     	;# 
  1626  009C                     	;# 
  1627  009D                     	;# 
  1628  009E                     	;# 
  1629  010C                     	;# 
  1630  010D                     	;# 
  1631  010E                     	;# 
  1632  0111                     	;# 
  1633  0112                     	;# 
  1634  0113                     	;# 
  1635  0114                     	;# 
  1636  0115                     	;# 
  1637  0116                     	;# 
  1638  0117                     	;# 
  1639  0118                     	;# 
  1640  0119                     	;# 
  1641  011A                     	;# 
  1642  011B                     	;# 
  1643  011D                     	;# 
  1644  011E                     	;# 
  1645  018C                     	;# 
  1646  018D                     	;# 
  1647  018E                     	;# 
  1648  0191                     	;# 
  1649  0191                     	;# 
  1650  0192                     	;# 
  1651  0193                     	;# 
  1652  0193                     	;# 
  1653  0193                     	;# 
  1654  0194                     	;# 
  1655  0195                     	;# 
  1656  0196                     	;# 
  1657  0199                     	;# 
  1658  019A                     	;# 
  1659  019B                     	;# 
  1660  019B                     	;# 
  1661  019C                     	;# 
  1662  019D                     	;# 
  1663  019E                     	;# 
  1664  019F                     	;# 
  1665  020C                     	;# 
  1666  020D                     	;# 
  1667  020E                     	;# 
  1668  0211                     	;# 
  1669  0211                     	;# 
  1670  0212                     	;# 
  1671  0212                     	;# 
  1672  0213                     	;# 
  1673  0213                     	;# 
  1674  0214                     	;# 
  1675  0214                     	;# 
  1676  0215                     	;# 
  1677  0215                     	;# 
  1678  0215                     	;# 
  1679  0216                     	;# 
  1680  0216                     	;# 
  1681  0217                     	;# 
  1682  0217                     	;# 
  1683  0219                     	;# 
  1684  021A                     	;# 
  1685  021B                     	;# 
  1686  021C                     	;# 
  1687  021D                     	;# 
  1688  021E                     	;# 
  1689  021F                     	;# 
  1690  0291                     	;# 
  1691  0291                     	;# 
  1692  0292                     	;# 
  1693  0293                     	;# 
  1694  0294                     	;# 
  1695  0295                     	;# 
  1696  0295                     	;# 
  1697  0296                     	;# 
  1698  0298                     	;# 
  1699  0298                     	;# 
  1700  0299                     	;# 
  1701  029A                     	;# 
  1702  029B                     	;# 
  1703  029C                     	;# 
  1704  029D                     	;# 
  1705  029E                     	;# 
  1706  0311                     	;# 
  1707  0311                     	;# 
  1708  0312                     	;# 
  1709  0313                     	;# 
  1710  0318                     	;# 
  1711  0318                     	;# 
  1712  0319                     	;# 
  1713  031A                     	;# 
  1714  038C                     	;# 
  1715  038D                     	;# 
  1716  038E                     	;# 
  1717  0391                     	;# 
  1718  0392                     	;# 
  1719  0393                     	;# 
  1720  0394                     	;# 
  1721  0395                     	;# 
  1722  0396                     	;# 
  1723  039A                     	;# 
  1724  039C                     	;# 
  1725  039D                     	;# 
  1726  039E                     	;# 
  1727  039F                     	;# 
  1728  0415                     	;# 
  1729  0416                     	;# 
  1730  0417                     	;# 
  1731  041C                     	;# 
  1732  041D                     	;# 
  1733  041E                     	;# 
  1734  0FE4                     	;# 
  1735  0FE5                     	;# 
  1736  0FE6                     	;# 
  1737  0FE7                     	;# 
  1738  0FE8                     	;# 
  1739  0FE9                     	;# 
  1740  0FEA                     	;# 
  1741  0FEB                     	;# 
  1742  0FED                     	;# 
  1743  0FEE                     	;# 
  1744  0FEF                     	;# 
  1745  0000                     	;# 
  1746  0001                     	;# 
  1747  0002                     	;# 
  1748  0003                     	;# 
  1749  0004                     	;# 
  1750  0005                     	;# 
  1751  0006                     	;# 
  1752  0007                     	;# 
  1753  0008                     	;# 
  1754  0009                     	;# 
  1755  000A                     	;# 
  1756  000B                     	;# 
  1757  000C                     	;# 
  1758  000D                     	;# 
  1759  000E                     	;# 
  1760  0011                     	;# 
  1761  0012                     	;# 
  1762  0013                     	;# 
  1763  0014                     	;# 
  1764  0015                     	;# 
  1765  0016                     	;# 
  1766  0016                     	;# 
  1767  0017                     	;# 
  1768  0018                     	;# 
  1769  0019                     	;# 
  1770  001A                     	;# 
  1771  001B                     	;# 
  1772  001C                     	;# 
  1773  001E                     	;# 
  1774  001F                     	;# 
  1775  008C                     	;# 
  1776  008D                     	;# 
  1777  008E                     	;# 
  1778  0091                     	;# 
  1779  0092                     	;# 
  1780  0093                     	;# 
  1781  0094                     	;# 
  1782  0095                     	;# 
  1783  0096                     	;# 
  1784  0097                     	;# 
  1785  0098                     	;# 
  1786  0099                     	;# 
  1787  009A                     	;# 
  1788  009B                     	;# 
  1789  009B                     	;# 
  1790  009C                     	;# 
  1791  009D                     	;# 
  1792  009E                     	;# 
  1793  010C                     	;# 
  1794  010D                     	;# 
  1795  010E                     	;# 
  1796  0111                     	;# 
  1797  0112                     	;# 
  1798  0113                     	;# 
  1799  0114                     	;# 
  1800  0115                     	;# 
  1801  0116                     	;# 
  1802  0117                     	;# 
  1803  0118                     	;# 
  1804  0119                     	;# 
  1805  011A                     	;# 
  1806  011B                     	;# 
  1807  011D                     	;# 
  1808  011E                     	;# 
  1809  018C                     	;# 
  1810  018D                     	;# 
  1811  018E                     	;# 
  1812  0191                     	;# 
  1813  0191                     	;# 
  1814  0192                     	;# 
  1815  0193                     	;# 
  1816  0193                     	;# 
  1817  0193                     	;# 
  1818  0194                     	;# 
  1819  0195                     	;# 
  1820  0196                     	;# 
  1821  0199                     	;# 
  1822  019A                     	;# 
  1823  019B                     	;# 
  1824  019B                     	;# 
  1825  019C                     	;# 
  1826  019D                     	;# 
  1827  019E                     	;# 
  1828  019F                     	;# 
  1829  020C                     	;# 
  1830  020D                     	;# 
  1831  020E                     	;# 
  1832  0211                     	;# 
  1833  0211                     	;# 
  1834  0212                     	;# 
  1835  0212                     	;# 
  1836  0213                     	;# 
  1837  0213                     	;# 
  1838  0214                     	;# 
  1839  0214                     	;# 
  1840  0215                     	;# 
  1841  0215                     	;# 
  1842  0215                     	;# 
  1843  0216                     	;# 
  1844  0216                     	;# 
  1845  0217                     	;# 
  1846  0217                     	;# 
  1847  0219                     	;# 
  1848  021A                     	;# 
  1849  021B                     	;# 
  1850  021C                     	;# 
  1851  021D                     	;# 
  1852  021E                     	;# 
  1853  021F                     	;# 
  1854  0291                     	;# 
  1855  0291                     	;# 
  1856  0292                     	;# 
  1857  0293                     	;# 
  1858  0294                     	;# 
  1859  0295                     	;# 
  1860  0295                     	;# 
  1861  0296                     	;# 
  1862  0298                     	;# 
  1863  0298                     	;# 
  1864  0299                     	;# 
  1865  029A                     	;# 
  1866  029B                     	;# 
  1867  029C                     	;# 
  1868  029D                     	;# 
  1869  029E                     	;# 
  1870  0311                     	;# 
  1871  0311                     	;# 
  1872  0312                     	;# 
  1873  0313                     	;# 
  1874  0318                     	;# 
  1875  0318                     	;# 
  1876  0319                     	;# 
  1877  031A                     	;# 
  1878  038C                     	;# 
  1879  038D                     	;# 
  1880  038E                     	;# 
  1881  0391                     	;# 
  1882  0392                     	;# 
  1883  0393                     	;# 
  1884  0394                     	;# 
  1885  0395                     	;# 
  1886  0396                     	;# 
  1887  039A                     	;# 
  1888  039C                     	;# 
  1889  039D                     	;# 
  1890  039E                     	;# 
  1891  039F                     	;# 
  1892  0415                     	;# 
  1893  0416                     	;# 
  1894  0417                     	;# 
  1895  041C                     	;# 
  1896  041D                     	;# 
  1897  041E                     	;# 
  1898  0FE4                     	;# 
  1899  0FE5                     	;# 
  1900  0FE6                     	;# 
  1901  0FE7                     	;# 
  1902  0FE8                     	;# 
  1903  0FE9                     	;# 
  1904  0FEA                     	;# 
  1905  0FEB                     	;# 
  1906  0FED                     	;# 
  1907  0FEE                     	;# 
  1908  0FEF                     	;# 
  1909  0000                     	;# 
  1910  0001                     	;# 
  1911  0002                     	;# 
  1912  0003                     	;# 
  1913  0004                     	;# 
  1914  0005                     	;# 
  1915  0006                     	;# 
  1916  0007                     	;# 
  1917  0008                     	;# 
  1918  0009                     	;# 
  1919  000A                     	;# 
  1920  000B                     	;# 
  1921  000C                     	;# 
  1922  000D                     	;# 
  1923  000E                     	;# 
  1924  0011                     	;# 
  1925  0012                     	;# 
  1926  0013                     	;# 
  1927  0014                     	;# 
  1928  0015                     	;# 
  1929  0016                     	;# 
  1930  0016                     	;# 
  1931  0017                     	;# 
  1932  0018                     	;# 
  1933  0019                     	;# 
  1934  001A                     	;# 
  1935  001B                     	;# 
  1936  001C                     	;# 
  1937  001E                     	;# 
  1938  001F                     	;# 
  1939  008C                     	;# 
  1940  008D                     	;# 
  1941  008E                     	;# 
  1942  0091                     	;# 
  1943  0092                     	;# 
  1944  0093                     	;# 
  1945  0094                     	;# 
  1946  0095                     	;# 
  1947  0096                     	;# 
  1948  0097                     	;# 
  1949  0098                     	;# 
  1950  0099                     	;# 
  1951  009A                     	;# 
  1952  009B                     	;# 
  1953  009B                     	;# 
  1954  009C                     	;# 
  1955  009D                     	;# 
  1956  009E                     	;# 
  1957  010C                     	;# 
  1958  010D                     	;# 
  1959  010E                     	;# 
  1960  0111                     	;# 
  1961  0112                     	;# 
  1962  0113                     	;# 
  1963  0114                     	;# 
  1964  0115                     	;# 
  1965  0116                     	;# 
  1966  0117                     	;# 
  1967  0118                     	;# 
  1968  0119                     	;# 
  1969  011A                     	;# 
  1970  011B                     	;# 
  1971  011D                     	;# 
  1972  011E                     	;# 
  1973  018C                     	;# 
  1974  018D                     	;# 
  1975  018E                     	;# 
  1976  0191                     	;# 
  1977  0191                     	;# 
  1978  0192                     	;# 
  1979  0193                     	;# 
  1980  0193                     	;# 
  1981  0193                     	;# 
  1982  0194                     	;# 
  1983  0195                     	;# 
  1984  0196                     	;# 
  1985  0199                     	;# 
  1986  019A                     	;# 
  1987  019B                     	;# 
  1988  019B                     	;# 
  1989  019C                     	;# 
  1990  019D                     	;# 
  1991  019E                     	;# 
  1992  019F                     	;# 
  1993  020C                     	;# 
  1994  020D                     	;# 
  1995  020E                     	;# 
  1996  0211                     	;# 
  1997  0211                     	;# 
  1998  0212                     	;# 
  1999  0212                     	;# 
  2000  0213                     	;# 
  2001  0213                     	;# 
  2002  0214                     	;# 
  2003  0214                     	;# 
  2004  0215                     	;# 
  2005  0215                     	;# 
  2006  0215                     	;# 
  2007  0216                     	;# 
  2008  0216                     	;# 
  2009  0217                     	;# 
  2010  0217                     	;# 
  2011  0219                     	;# 
  2012  021A                     	;# 
  2013  021B                     	;# 
  2014  021C                     	;# 
  2015  021D                     	;# 
  2016  021E                     	;# 
  2017  021F                     	;# 
  2018  0291                     	;# 
  2019  0291                     	;# 
  2020  0292                     	;# 
  2021  0293                     	;# 
  2022  0294                     	;# 
  2023  0295                     	;# 
  2024  0295                     	;# 
  2025  0296                     	;# 
  2026  0298                     	;# 
  2027  0298                     	;# 
  2028  0299                     	;# 
  2029  029A                     	;# 
  2030  029B                     	;# 
  2031  029C                     	;# 
  2032  029D                     	;# 
  2033  029E                     	;# 
  2034  0311                     	;# 
  2035  0311                     	;# 
  2036  0312                     	;# 
  2037  0313                     	;# 
  2038  0318                     	;# 
  2039  0318                     	;# 
  2040  0319                     	;# 
  2041  031A                     	;# 
  2042  038C                     	;# 
  2043  038D                     	;# 
  2044  038E                     	;# 
  2045  0391                     	;# 
  2046  0392                     	;# 
  2047  0393                     	;# 
  2048  0394                     	;# 
  2049  0395                     	;# 
  2050  0396                     	;# 
  2051  039A                     	;# 
  2052  039C                     	;# 
  2053  039D                     	;# 
  2054  039E                     	;# 
  2055  039F                     	;# 
  2056  0415                     	;# 
  2057  0416                     	;# 
  2058  0417                     	;# 
  2059  041C                     	;# 
  2060  041D                     	;# 
  2061  041E                     	;# 
  2062  0FE4                     	;# 
  2063  0FE5                     	;# 
  2064  0FE6                     	;# 
  2065  0FE7                     	;# 
  2066  0FE8                     	;# 
  2067  0FE9                     	;# 
  2068  0FEA                     	;# 
  2069  0FEB                     	;# 
  2070  0FED                     	;# 
  2071  0FEE                     	;# 
  2072  0FEF                     	;# 
  2073  0000                     	;# 
  2074  0001                     	;# 
  2075  0002                     	;# 
  2076  0003                     	;# 
  2077  0004                     	;# 
  2078  0005                     	;# 
  2079  0006                     	;# 
  2080  0007                     	;# 
  2081  0008                     	;# 
  2082  0009                     	;# 
  2083  000A                     	;# 
  2084  000B                     	;# 
  2085  000C                     	;# 
  2086  000D                     	;# 
  2087  000E                     	;# 
  2088  0011                     	;# 
  2089  0012                     	;# 
  2090  0013                     	;# 
  2091  0014                     	;# 
  2092  0015                     	;# 
  2093  0016                     	;# 
  2094  0016                     	;# 
  2095  0017                     	;# 
  2096  0018                     	;# 
  2097  0019                     	;# 
  2098  001A                     	;# 
  2099  001B                     	;# 
  2100  001C                     	;# 
  2101  001E                     	;# 
  2102  001F                     	;# 
  2103  008C                     	;# 
  2104  008D                     	;# 
  2105  008E                     	;# 
  2106  0091                     	;# 
  2107  0092                     	;# 
  2108  0093                     	;# 
  2109  0094                     	;# 
  2110  0095                     	;# 
  2111  0096                     	;# 
  2112  0097                     	;# 
  2113  0098                     	;# 
  2114  0099                     	;# 
  2115  009A                     	;# 
  2116  009B                     	;# 
  2117  009B                     	;# 
  2118  009C                     	;# 
  2119  009D                     	;# 
  2120  009E                     	;# 
  2121  010C                     	;# 
  2122  010D                     	;# 
  2123  010E                     	;# 
  2124  0111                     	;# 
  2125  0112                     	;# 
  2126  0113                     	;# 
  2127  0114                     	;# 
  2128  0115                     	;# 
  2129  0116                     	;# 
  2130  0117                     	;# 
  2131  0118                     	;# 
  2132  0119                     	;# 
  2133  011A                     	;# 
  2134  011B                     	;# 
  2135  011D                     	;# 
  2136  011E                     	;# 
  2137  018C                     	;# 
  2138  018D                     	;# 
  2139  018E                     	;# 
  2140  0191                     	;# 
  2141  0191                     	;# 
  2142  0192                     	;# 
  2143  0193                     	;# 
  2144  0193                     	;# 
  2145  0193                     	;# 
  2146  0194                     	;# 
  2147  0195                     	;# 
  2148  0196                     	;# 
  2149  0199                     	;# 
  2150  019A                     	;# 
  2151  019B                     	;# 
  2152  019B                     	;# 
  2153  019C                     	;# 
  2154  019D                     	;# 
  2155  019E                     	;# 
  2156  019F                     	;# 
  2157  020C                     	;# 
  2158  020D                     	;# 
  2159  020E                     	;# 
  2160  0211                     	;# 
  2161  0211                     	;# 
  2162  0212                     	;# 
  2163  0212                     	;# 
  2164  0213                     	;# 
  2165  0213                     	;# 
  2166  0214                     	;# 
  2167  0214                     	;# 
  2168  0215                     	;# 
  2169  0215                     	;# 
  2170  0215                     	;# 
  2171  0216                     	;# 
  2172  0216                     	;# 
  2173  0217                     	;# 
  2174  0217                     	;# 
  2175  0219                     	;# 
  2176  021A                     	;# 
  2177  021B                     	;# 
  2178  021C                     	;# 
  2179  021D                     	;# 
  2180  021E                     	;# 
  2181  021F                     	;# 
  2182  0291                     	;# 
  2183  0291                     	;# 
  2184  0292                     	;# 
  2185  0293                     	;# 
  2186  0294                     	;# 
  2187  0295                     	;# 
  2188  0295                     	;# 
  2189  0296                     	;# 
  2190  0298                     	;# 
  2191  0298                     	;# 
  2192  0299                     	;# 
  2193  029A                     	;# 
  2194  029B                     	;# 
  2195  029C                     	;# 
  2196  029D                     	;# 
  2197  029E                     	;# 
  2198  0311                     	;# 
  2199  0311                     	;# 
  2200  0312                     	;# 
  2201  0313                     	;# 
  2202  0318                     	;# 
  2203  0318                     	;# 
  2204  0319                     	;# 
  2205  031A                     	;# 
  2206  038C                     	;# 
  2207  038D                     	;# 
  2208  038E                     	;# 
  2209  0391                     	;# 
  2210  0392                     	;# 
  2211  0393                     	;# 
  2212  0394                     	;# 
  2213  0395                     	;# 
  2214  0396                     	;# 
  2215  039A                     	;# 
  2216  039C                     	;# 
  2217  039D                     	;# 
  2218  039E                     	;# 
  2219  039F                     	;# 
  2220  0415                     	;# 
  2221  0416                     	;# 
  2222  0417                     	;# 
  2223  041C                     	;# 
  2224  041D                     	;# 
  2225  041E                     	;# 
  2226  0FE4                     	;# 
  2227  0FE5                     	;# 
  2228  0FE6                     	;# 
  2229  0FE7                     	;# 
  2230  0FE8                     	;# 
  2231  0FE9                     	;# 
  2232  0FEA                     	;# 
  2233  0FEB                     	;# 
  2234  0FED                     	;# 
  2235  0FEE                     	;# 
  2236  0FEF                     	;# 
  2237  0000                     	;# 
  2238  0001                     	;# 
  2239  0002                     	;# 
  2240  0003                     	;# 
  2241  0004                     	;# 
  2242  0005                     	;# 
  2243  0006                     	;# 
  2244  0007                     	;# 
  2245  0008                     	;# 
  2246  0009                     	;# 
  2247  000A                     	;# 
  2248  000B                     	;# 
  2249  000C                     	;# 
  2250  000D                     	;# 
  2251  000E                     	;# 
  2252  0011                     	;# 
  2253  0012                     	;# 
  2254  0013                     	;# 
  2255  0014                     	;# 
  2256  0015                     	;# 
  2257  0016                     	;# 
  2258  0016                     	;# 
  2259  0017                     	;# 
  2260  0018                     	;# 
  2261  0019                     	;# 
  2262  001A                     	;# 
  2263  001B                     	;# 
  2264  001C                     	;# 
  2265  001E                     	;# 
  2266  001F                     	;# 
  2267  008C                     	;# 
  2268  008D                     	;# 
  2269  008E                     	;# 
  2270  0091                     	;# 
  2271  0092                     	;# 
  2272  0093                     	;# 
  2273  0094                     	;# 
  2274  0095                     	;# 
  2275  0096                     	;# 
  2276  0097                     	;# 
  2277  0098                     	;# 
  2278  0099                     	;# 
  2279  009A                     	;# 
  2280  009B                     	;# 
  2281  009B                     	;# 
  2282  009C                     	;# 
  2283  009D                     	;# 
  2284  009E                     	;# 
  2285  010C                     	;# 
  2286  010D                     	;# 
  2287  010E                     	;# 
  2288  0111                     	;# 
  2289  0112                     	;# 
  2290  0113                     	;# 
  2291  0114                     	;# 
  2292  0115                     	;# 
  2293  0116                     	;# 
  2294  0117                     	;# 
  2295  0118                     	;# 
  2296  0119                     	;# 
  2297  011A                     	;# 
  2298  011B                     	;# 
  2299  011D                     	;# 
  2300  011E                     	;# 
  2301  018C                     	;# 
  2302  018D                     	;# 
  2303  018E                     	;# 
  2304  0191                     	;# 
  2305  0191                     	;# 
  2306  0192                     	;# 
  2307  0193                     	;# 
  2308  0193                     	;# 
  2309  0193                     	;# 
  2310  0194                     	;# 
  2311  0195                     	;# 
  2312  0196                     	;# 
  2313  0199                     	;# 
  2314  019A                     	;# 
  2315  019B                     	;# 
  2316  019B                     	;# 
  2317  019C                     	;# 
  2318  019D                     	;# 
  2319  019E                     	;# 
  2320  019F                     	;# 
  2321  020C                     	;# 
  2322  020D                     	;# 
  2323  020E                     	;# 
  2324  0211                     	;# 
  2325  0211                     	;# 
  2326  0212                     	;# 
  2327  0212                     	;# 
  2328  0213                     	;# 
  2329  0213                     	;# 
  2330  0214                     	;# 
  2331  0214                     	;# 
  2332  0215                     	;# 
  2333  0215                     	;# 
  2334  0215                     	;# 
  2335  0216                     	;# 
  2336  0216                     	;# 
  2337  0217                     	;# 
  2338  0217                     	;# 
  2339  0219                     	;# 
  2340  021A                     	;# 
  2341  021B                     	;# 
  2342  021C                     	;# 
  2343  021D                     	;# 
  2344  021E                     	;# 
  2345  021F                     	;# 
  2346  0291                     	;# 
  2347  0291                     	;# 
  2348  0292                     	;# 
  2349  0293                     	;# 
  2350  0294                     	;# 
  2351  0295                     	;# 
  2352  0295                     	;# 
  2353  0296                     	;# 
  2354  0298                     	;# 
  2355  0298                     	;# 
  2356  0299                     	;# 
  2357  029A                     	;# 
  2358  029B                     	;# 
  2359  029C                     	;# 
  2360  029D                     	;# 
  2361  029E                     	;# 
  2362  0311                     	;# 
  2363  0311                     	;# 
  2364  0312                     	;# 
  2365  0313                     	;# 
  2366  0318                     	;# 
  2367  0318                     	;# 
  2368  0319                     	;# 
  2369  031A                     	;# 
  2370  038C                     	;# 
  2371  038D                     	;# 
  2372  038E                     	;# 
  2373  0391                     	;# 
  2374  0392                     	;# 
  2375  0393                     	;# 
  2376  0394                     	;# 
  2377  0395                     	;# 
  2378  0396                     	;# 
  2379  039A                     	;# 
  2380  039C                     	;# 
  2381  039D                     	;# 
  2382  039E                     	;# 
  2383  039F                     	;# 
  2384  0415                     	;# 
  2385  0416                     	;# 
  2386  0417                     	;# 
  2387  041C                     	;# 
  2388  041D                     	;# 
  2389  041E                     	;# 
  2390  0FE4                     	;# 
  2391  0FE5                     	;# 
  2392  0FE6                     	;# 
  2393  0FE7                     	;# 
  2394  0FE8                     	;# 
  2395  0FE9                     	;# 
  2396  0FEA                     	;# 
  2397  0FEB                     	;# 
  2398  0FED                     	;# 
  2399  0FEE                     	;# 
  2400  0FEF                     	;# 
  2401  0000                     	;# 
  2402  0001                     	;# 
  2403  0002                     	;# 
  2404  0003                     	;# 
  2405  0004                     	;# 
  2406  0005                     	;# 
  2407  0006                     	;# 
  2408  0007                     	;# 
  2409  0008                     	;# 
  2410  0009                     	;# 
  2411  000A                     	;# 
  2412  000B                     	;# 
  2413  000C                     	;# 
  2414  000D                     	;# 
  2415  000E                     	;# 
  2416  0011                     	;# 
  2417  0012                     	;# 
  2418  0013                     	;# 
  2419  0014                     	;# 
  2420  0015                     	;# 
  2421  0016                     	;# 
  2422  0016                     	;# 
  2423  0017                     	;# 
  2424  0018                     	;# 
  2425  0019                     	;# 
  2426  001A                     	;# 
  2427  001B                     	;# 
  2428  001C                     	;# 
  2429  001E                     	;# 
  2430  001F                     	;# 
  2431  008C                     	;# 
  2432  008D                     	;# 
  2433  008E                     	;# 
  2434  0091                     	;# 
  2435  0092                     	;# 
  2436  0093                     	;# 
  2437  0094                     	;# 
  2438  0095                     	;# 
  2439  0096                     	;# 
  2440  0097                     	;# 
  2441  0098                     	;# 
  2442  0099                     	;# 
  2443  009A                     	;# 
  2444  009B                     	;# 
  2445  009B                     	;# 
  2446  009C                     	;# 
  2447  009D                     	;# 
  2448  009E                     	;# 
  2449  010C                     	;# 
  2450  010D                     	;# 
  2451  010E                     	;# 
  2452  0111                     	;# 
  2453  0112                     	;# 
  2454  0113                     	;# 
  2455  0114                     	;# 
  2456  0115                     	;# 
  2457  0116                     	;# 
  2458  0117                     	;# 
  2459  0118                     	;# 
  2460  0119                     	;# 
  2461  011A                     	;# 
  2462  011B                     	;# 
  2463  011D                     	;# 
  2464  011E                     	;# 
  2465  018C                     	;# 
  2466  018D                     	;# 
  2467  018E                     	;# 
  2468  0191                     	;# 
  2469  0191                     	;# 
  2470  0192                     	;# 
  2471  0193                     	;# 
  2472  0193                     	;# 
  2473  0193                     	;# 
  2474  0194                     	;# 
  2475  0195                     	;# 
  2476  0196                     	;# 
  2477  0199                     	;# 
  2478  019A                     	;# 
  2479  019B                     	;# 
  2480  019B                     	;# 
  2481  019C                     	;# 
  2482  019D                     	;# 
  2483  019E                     	;# 
  2484  019F                     	;# 
  2485  020C                     	;# 
  2486  020D                     	;# 
  2487  020E                     	;# 
  2488  0211                     	;# 
  2489  0211                     	;# 
  2490  0212                     	;# 
  2491  0212                     	;# 
  2492  0213                     	;# 
  2493  0213                     	;# 
  2494  0214                     	;# 
  2495  0214                     	;# 
  2496  0215                     	;# 
  2497  0215                     	;# 
  2498  0215                     	;# 
  2499  0216                     	;# 
  2500  0216                     	;# 
  2501  0217                     	;# 
  2502  0217                     	;# 
  2503  0219                     	;# 
  2504  021A                     	;# 
  2505  021B                     	;# 
  2506  021C                     	;# 
  2507  021D                     	;# 
  2508  021E                     	;# 
  2509  021F                     	;# 
  2510  0291                     	;# 
  2511  0291                     	;# 
  2512  0292                     	;# 
  2513  0293                     	;# 
  2514  0294                     	;# 
  2515  0295                     	;# 
  2516  0295                     	;# 
  2517  0296                     	;# 
  2518  0298                     	;# 
  2519  0298                     	;# 
  2520  0299                     	;# 
  2521  029A                     	;# 
  2522  029B                     	;# 
  2523  029C                     	;# 
  2524  029D                     	;# 
  2525  029E                     	;# 
  2526  0311                     	;# 
  2527  0311                     	;# 
  2528  0312                     	;# 
  2529  0313                     	;# 
  2530  0318                     	;# 
  2531  0318                     	;# 
  2532  0319                     	;# 
  2533  031A                     	;# 
  2534  038C                     	;# 
  2535  038D                     	;# 
  2536  038E                     	;# 
  2537  0391                     	;# 
  2538  0392                     	;# 
  2539  0393                     	;# 
  2540  0394                     	;# 
  2541  0395                     	;# 
  2542  0396                     	;# 
  2543  039A                     	;# 
  2544  039C                     	;# 
  2545  039D                     	;# 
  2546  039E                     	;# 
  2547  039F                     	;# 
  2548  0415                     	;# 
  2549  0416                     	;# 
  2550  0417                     	;# 
  2551  041C                     	;# 
  2552  041D                     	;# 
  2553  041E                     	;# 
  2554  0FE4                     	;# 
  2555  0FE5                     	;# 
  2556  0FE6                     	;# 
  2557  0FE7                     	;# 
  2558  0FE8                     	;# 
  2559  0FE9                     	;# 
  2560  0FEA                     	;# 
  2561  0FEB                     	;# 
  2562  0FED                     	;# 
  2563  0FEE                     	;# 
  2564  0FEF                     	;# 
  2565  0000                     	;# 
  2566  0001                     	;# 
  2567  0002                     	;# 
  2568  0003                     	;# 
  2569  0004                     	;# 
  2570  0005                     	;# 
  2571  0006                     	;# 
  2572  0007                     	;# 
  2573  0008                     	;# 
  2574  0009                     	;# 
  2575  000A                     	;# 
  2576  000B                     	;# 
  2577  000C                     	;# 
  2578  000D                     	;# 
  2579  000E                     	;# 
  2580  0011                     	;# 
  2581  0012                     	;# 
  2582  0013                     	;# 
  2583  0014                     	;# 
  2584  0015                     	;# 
  2585  0016                     	;# 
  2586  0016                     	;# 
  2587  0017                     	;# 
  2588  0018                     	;# 
  2589  0019                     	;# 
  2590  001A                     	;# 
  2591  001B                     	;# 
  2592  001C                     	;# 
  2593  001E                     	;# 
  2594  001F                     	;# 
  2595  008C                     	;# 
  2596  008D                     	;# 
  2597  008E                     	;# 
  2598  0091                     	;# 
  2599  0092                     	;# 
  2600  0093                     	;# 
  2601  0094                     	;# 
  2602  0095                     	;# 
  2603  0096                     	;# 
  2604  0097                     	;# 
  2605  0098                     	;# 
  2606  0099                     	;# 
  2607  009A                     	;# 
  2608  009B                     	;# 
  2609  009B                     	;# 
  2610  009C                     	;# 
  2611  009D                     	;# 
  2612  009E                     	;# 
  2613  010C                     	;# 
  2614  010D                     	;# 
  2615  010E                     	;# 
  2616  0111                     	;# 
  2617  0112                     	;# 
  2618  0113                     	;# 
  2619  0114                     	;# 
  2620  0115                     	;# 
  2621  0116                     	;# 
  2622  0117                     	;# 
  2623  0118                     	;# 
  2624  0119                     	;# 
  2625  011A                     	;# 
  2626  011B                     	;# 
  2627  011D                     	;# 
  2628  011E                     	;# 
  2629  018C                     	;# 
  2630  018D                     	;# 
  2631  018E                     	;# 
  2632  0191                     	;# 
  2633  0191                     	;# 
  2634  0192                     	;# 
  2635  0193                     	;# 
  2636  0193                     	;# 
  2637  0193                     	;# 
  2638  0194                     	;# 
  2639  0195                     	;# 
  2640  0196                     	;# 
  2641  0199                     	;# 
  2642  019A                     	;# 
  2643  019B                     	;# 
  2644  019B                     	;# 
  2645  019C                     	;# 
  2646  019D                     	;# 
  2647  019E                     	;# 
  2648  019F                     	;# 
  2649  020C                     	;# 
  2650  020D                     	;# 
  2651  020E                     	;# 
  2652  0211                     	;# 
  2653  0211                     	;# 
  2654  0212                     	;# 
  2655  0212                     	;# 
  2656  0213                     	;# 
  2657  0213                     	;# 
  2658  0214                     	;# 
  2659  0214                     	;# 
  2660  0215                     	;# 
  2661  0215                     	;# 
  2662  0215                     	;# 
  2663  0216                     	;# 
  2664  0216                     	;# 
  2665  0217                     	;# 
  2666  0217                     	;# 
  2667  0219                     	;# 
  2668  021A                     	;# 
  2669  021B                     	;# 
  2670  021C                     	;# 
  2671  021D                     	;# 
  2672  021E                     	;# 
  2673  021F                     	;# 
  2674  0291                     	;# 
  2675  0291                     	;# 
  2676  0292                     	;# 
  2677  0293                     	;# 
  2678  0294                     	;# 
  2679  0295                     	;# 
  2680  0295                     	;# 
  2681  0296                     	;# 
  2682  0298                     	;# 
  2683  0298                     	;# 
  2684  0299                     	;# 
  2685  029A                     	;# 
  2686  029B                     	;# 
  2687  029C                     	;# 
  2688  029D                     	;# 
  2689  029E                     	;# 
  2690  0311                     	;# 
  2691  0311                     	;# 
  2692  0312                     	;# 
  2693  0313                     	;# 
  2694  0318                     	;# 
  2695  0318                     	;# 
  2696  0319                     	;# 
  2697  031A                     	;# 
  2698  038C                     	;# 
  2699  038D                     	;# 
  2700  038E                     	;# 
  2701  0391                     	;# 
  2702  0392                     	;# 
  2703  0393                     	;# 
  2704  0394                     	;# 
  2705  0395                     	;# 
  2706  0396                     	;# 
  2707  039A                     	;# 
  2708  039C                     	;# 
  2709  039D                     	;# 
  2710  039E                     	;# 
  2711  039F                     	;# 
  2712  0415                     	;# 
  2713  0416                     	;# 
  2714  0417                     	;# 
  2715  041C                     	;# 
  2716  041D                     	;# 
  2717  041E                     	;# 
  2718  0FE4                     	;# 
  2719  0FE5                     	;# 
  2720  0FE6                     	;# 
  2721  0FE7                     	;# 
  2722  0FE8                     	;# 
  2723  0FE9                     	;# 
  2724  0FEA                     	;# 
  2725  0FEB                     	;# 
  2726  0FED                     	;# 
  2727  0FEE                     	;# 
  2728  0FEF                     	;# 
  2729  0000                     	;# 
  2730  0001                     	;# 
  2731  0002                     	;# 
  2732  0003                     	;# 
  2733  0004                     	;# 
  2734  0005                     	;# 
  2735  0006                     	;# 
  2736  0007                     	;# 
  2737  0008                     	;# 
  2738  0009                     	;# 
  2739  000A                     	;# 
  2740  000B                     	;# 
  2741  000C                     	;# 
  2742  000D                     	;# 
  2743  000E                     	;# 
  2744  0011                     	;# 
  2745  0012                     	;# 
  2746  0013                     	;# 
  2747  0014                     	;# 
  2748  0015                     	;# 
  2749  0016                     	;# 
  2750  0016                     	;# 
  2751  0017                     	;# 
  2752  0018                     	;# 
  2753  0019                     	;# 
  2754  001A                     	;# 
  2755  001B                     	;# 
  2756  001C                     	;# 
  2757  001E                     	;# 
  2758  001F                     	;# 
  2759  008C                     	;# 
  2760  008D                     	;# 
  2761  008E                     	;# 
  2762  0091                     	;# 
  2763  0092                     	;# 
  2764  0093                     	;# 
  2765  0094                     	;# 
  2766  0095                     	;# 
  2767  0096                     	;# 
  2768  0097                     	;# 
  2769  0098                     	;# 
  2770  0099                     	;# 
  2771  009A                     	;# 
  2772  009B                     	;# 
  2773  009B                     	;# 
  2774  009C                     	;# 
  2775  009D                     	;# 
  2776  009E                     	;# 
  2777  010C                     	;# 
  2778  010D                     	;# 
  2779  010E                     	;# 
  2780  0111                     	;# 
  2781  0112                     	;# 
  2782  0113                     	;# 
  2783  0114                     	;# 
  2784  0115                     	;# 
  2785  0116                     	;# 
  2786  0117                     	;# 
  2787  0118                     	;# 
  2788  0119                     	;# 
  2789  011A                     	;# 
  2790  011B                     	;# 
  2791  011D                     	;# 
  2792  011E                     	;# 
  2793  018C                     	;# 
  2794  018D                     	;# 
  2795  018E                     	;# 
  2796  0191                     	;# 
  2797  0191                     	;# 
  2798  0192                     	;# 
  2799  0193                     	;# 
  2800  0193                     	;# 
  2801  0193                     	;# 
  2802  0194                     	;# 
  2803  0195                     	;# 
  2804  0196                     	;# 
  2805  0199                     	;# 
  2806  019A                     	;# 
  2807  019B                     	;# 
  2808  019B                     	;# 
  2809  019C                     	;# 
  2810  019D                     	;# 
  2811  019E                     	;# 
  2812  019F                     	;# 
  2813  020C                     	;# 
  2814  020D                     	;# 
  2815  020E                     	;# 
  2816  0211                     	;# 
  2817  0211                     	;# 
  2818  0212                     	;# 
  2819  0212                     	;# 
  2820  0213                     	;# 
  2821  0213                     	;# 
  2822  0214                     	;# 
  2823  0214                     	;# 
  2824  0215                     	;# 
  2825  0215                     	;# 
  2826  0215                     	;# 
  2827  0216                     	;# 
  2828  0216                     	;# 
  2829  0217                     	;# 
  2830  0217                     	;# 
  2831  0219                     	;# 
  2832  021A                     	;# 
  2833  021B                     	;# 
  2834  021C                     	;# 
  2835  021D                     	;# 
  2836  021E                     	;# 
  2837  021F                     	;# 
  2838  0291                     	;# 
  2839  0291                     	;# 
  2840  0292                     	;# 
  2841  0293                     	;# 
  2842  0294                     	;# 
  2843  0295                     	;# 
  2844  0295                     	;# 
  2845  0296                     	;# 
  2846  0298                     	;# 
  2847  0298                     	;# 
  2848  0299                     	;# 
  2849  029A                     	;# 
  2850  029B                     	;# 
  2851  029C                     	;# 
  2852  029D                     	;# 
  2853  029E                     	;# 
  2854  0311                     	;# 
  2855  0311                     	;# 
  2856  0312                     	;# 
  2857  0313                     	;# 
  2858  0318                     	;# 
  2859  0318                     	;# 
  2860  0319                     	;# 
  2861  031A                     	;# 
  2862  038C                     	;# 
  2863  038D                     	;# 
  2864  038E                     	;# 
  2865  0391                     	;# 
  2866  0392                     	;# 
  2867  0393                     	;# 
  2868  0394                     	;# 
  2869  0395                     	;# 
  2870  0396                     	;# 
  2871  039A                     	;# 
  2872  039C                     	;# 
  2873  039D                     	;# 
  2874  039E                     	;# 
  2875  039F                     	;# 
  2876  0415                     	;# 
  2877  0416                     	;# 
  2878  0417                     	;# 
  2879  041C                     	;# 
  2880  041D                     	;# 
  2881  041E                     	;# 
  2882  0FE4                     	;# 
  2883  0FE5                     	;# 
  2884  0FE6                     	;# 
  2885  0FE7                     	;# 
  2886  0FE8                     	;# 
  2887  0FE9                     	;# 
  2888  0FEA                     	;# 
  2889  0FEB                     	;# 
  2890  0FED                     	;# 
  2891  0FEE                     	;# 
  2892  0FEF                     	;# 
  2893  0000                     	;# 
  2894  0001                     	;# 
  2895  0002                     	;# 
  2896  0003                     	;# 
  2897  0004                     	;# 
  2898  0005                     	;# 
  2899  0006                     	;# 
  2900  0007                     	;# 
  2901  0008                     	;# 
  2902  0009                     	;# 
  2903  000A                     	;# 
  2904  000B                     	;# 
  2905  000C                     	;# 
  2906  000D                     	;# 
  2907  000E                     	;# 
  2908  0011                     	;# 
  2909  0012                     	;# 
  2910  0013                     	;# 
  2911  0014                     	;# 
  2912  0015                     	;# 
  2913  0016                     	;# 
  2914  0016                     	;# 
  2915  0017                     	;# 
  2916  0018                     	;# 
  2917  0019                     	;# 
  2918  001A                     	;# 
  2919  001B                     	;# 
  2920  001C                     	;# 
  2921  001E                     	;# 
  2922  001F                     	;# 
  2923  008C                     	;# 
  2924  008D                     	;# 
  2925  008E                     	;# 
  2926  0091                     	;# 
  2927  0092                     	;# 
  2928  0093                     	;# 
  2929  0094                     	;# 
  2930  0095                     	;# 
  2931  0096                     	;# 
  2932  0097                     	;# 
  2933  0098                     	;# 
  2934  0099                     	;# 
  2935  009A                     	;# 
  2936  009B                     	;# 
  2937  009B                     	;# 
  2938  009C                     	;# 
  2939  009D                     	;# 
  2940  009E                     	;# 
  2941  010C                     	;# 
  2942  010D                     	;# 
  2943  010E                     	;# 
  2944  0111                     	;# 
  2945  0112                     	;# 
  2946  0113                     	;# 
  2947  0114                     	;# 
  2948  0115                     	;# 
  2949  0116                     	;# 
  2950  0117                     	;# 
  2951  0118                     	;# 
  2952  0119                     	;# 
  2953  011A                     	;# 
  2954  011B                     	;# 
  2955  011D                     	;# 
  2956  011E                     	;# 
  2957  018C                     	;# 
  2958  018D                     	;# 
  2959  018E                     	;# 
  2960  0191                     	;# 
  2961  0191                     	;# 
  2962  0192                     	;# 
  2963  0193                     	;# 
  2964  0193                     	;# 
  2965  0193                     	;# 
  2966  0194                     	;# 
  2967  0195                     	;# 
  2968  0196                     	;# 
  2969  0199                     	;# 
  2970  019A                     	;# 
  2971  019B                     	;# 
  2972  019B                     	;# 
  2973  019C                     	;# 
  2974  019D                     	;# 
  2975  019E                     	;# 
  2976  019F                     	;# 
  2977  020C                     	;# 
  2978  020D                     	;# 
  2979  020E                     	;# 
  2980  0211                     	;# 
  2981  0211                     	;# 
  2982  0212                     	;# 
  2983  0212                     	;# 
  2984  0213                     	;# 
  2985  0213                     	;# 
  2986  0214                     	;# 
  2987  0214                     	;# 
  2988  0215                     	;# 
  2989  0215                     	;# 
  2990  0215                     	;# 
  2991  0216                     	;# 
  2992  0216                     	;# 
  2993  0217                     	;# 
  2994  0217                     	;# 
  2995  0219                     	;# 
  2996  021A                     	;# 
  2997  021B                     	;# 
  2998  021C                     	;# 
  2999  021D                     	;# 
  3000  021E                     	;# 
  3001  021F                     	;# 
  3002  0291                     	;# 
  3003  0291                     	;# 
  3004  0292                     	;# 
  3005  0293                     	;# 
  3006  0294                     	;# 
  3007  0295                     	;# 
  3008  0295                     	;# 
  3009  0296                     	;# 
  3010  0298                     	;# 
  3011  0298                     	;# 
  3012  0299                     	;# 
  3013  029A                     	;# 
  3014  029B                     	;# 
  3015  029C                     	;# 
  3016  029D                     	;# 
  3017  029E                     	;# 
  3018  0311                     	;# 
  3019  0311                     	;# 
  3020  0312                     	;# 
  3021  0313                     	;# 
  3022  0318                     	;# 
  3023  0318                     	;# 
  3024  0319                     	;# 
  3025  031A                     	;# 
  3026  038C                     	;# 
  3027  038D                     	;# 
  3028  038E                     	;# 
  3029  0391                     	;# 
  3030  0392                     	;# 
  3031  0393                     	;# 
  3032  0394                     	;# 
  3033  0395                     	;# 
  3034  0396                     	;# 
  3035  039A                     	;# 
  3036  039C                     	;# 
  3037  039D                     	;# 
  3038  039E                     	;# 
  3039  039F                     	;# 
  3040  0415                     	;# 
  3041  0416                     	;# 
  3042  0417                     	;# 
  3043  041C                     	;# 
  3044  041D                     	;# 
  3045  041E                     	;# 
  3046  0FE4                     	;# 
  3047  0FE5                     	;# 
  3048  0FE6                     	;# 
  3049  0FE7                     	;# 
  3050  0FE8                     	;# 
  3051  0FE9                     	;# 
  3052  0FEA                     	;# 
  3053  0FEB                     	;# 
  3054  0FED                     	;# 
  3055  0FEE                     	;# 
  3056  0FEF                     	;# 
  3057  0000                     	;# 
  3058  0001                     	;# 
  3059  0002                     	;# 
  3060  0003                     	;# 
  3061  0004                     	;# 
  3062  0005                     	;# 
  3063  0006                     	;# 
  3064  0007                     	;# 
  3065  0008                     	;# 
  3066  0009                     	;# 
  3067  000A                     	;# 
  3068  000B                     	;# 
  3069  000C                     	;# 
  3070  000D                     	;# 
  3071  000E                     	;# 
  3072  0011                     	;# 
  3073  0012                     	;# 
  3074  0013                     	;# 
  3075  0014                     	;# 
  3076  0015                     	;# 
  3077  0016                     	;# 
  3078  0016                     	;# 
  3079  0017                     	;# 
  3080  0018                     	;# 
  3081  0019                     	;# 
  3082  001A                     	;# 
  3083  001B                     	;# 
  3084  001C                     	;# 
  3085  001E                     	;# 
  3086  001F                     	;# 
  3087  008C                     	;# 
  3088  008D                     	;# 
  3089  008E                     	;# 
  3090  0091                     	;# 
  3091  0092                     	;# 
  3092  0093                     	;# 
  3093  0094                     	;# 
  3094  0095                     	;# 
  3095  0096                     	;# 
  3096  0097                     	;# 
  3097  0098                     	;# 
  3098  0099                     	;# 
  3099  009A                     	;# 
  3100  009B                     	;# 
  3101  009B                     	;# 
  3102  009C                     	;# 
  3103  009D                     	;# 
  3104  009E                     	;# 
  3105  010C                     	;# 
  3106  010D                     	;# 
  3107  010E                     	;# 
  3108  0111                     	;# 
  3109  0112                     	;# 
  3110  0113                     	;# 
  3111  0114                     	;# 
  3112  0115                     	;# 
  3113  0116                     	;# 
  3114  0117                     	;# 
  3115  0118                     	;# 
  3116  0119                     	;# 
  3117  011A                     	;# 
  3118  011B                     	;# 
  3119  011D                     	;# 
  3120  011E                     	;# 
  3121  018C                     	;# 
  3122  018D                     	;# 
  3123  018E                     	;# 
  3124  0191                     	;# 
  3125  0191                     	;# 
  3126  0192                     	;# 
  3127  0193                     	;# 
  3128  0193                     	;# 
  3129  0193                     	;# 
  3130  0194                     	;# 
  3131  0195                     	;# 
  3132  0196                     	;# 
  3133  0199                     	;# 
  3134  019A                     	;# 
  3135  019B                     	;# 
  3136  019B                     	;# 
  3137  019C                     	;# 
  3138  019D                     	;# 
  3139  019E                     	;# 
  3140  019F                     	;# 
  3141  020C                     	;# 
  3142  020D                     	;# 
  3143  020E                     	;# 
  3144  0211                     	;# 
  3145  0211                     	;# 
  3146  0212                     	;# 
  3147  0212                     	;# 
  3148  0213                     	;# 
  3149  0213                     	;# 
  3150  0214                     	;# 
  3151  0214                     	;# 
  3152  0215                     	;# 
  3153  0215                     	;# 
  3154  0215                     	;# 
  3155  0216                     	;# 
  3156  0216                     	;# 
  3157  0217                     	;# 
  3158  0217                     	;# 
  3159  0219                     	;# 
  3160  021A                     	;# 
  3161  021B                     	;# 
  3162  021C                     	;# 
  3163  021D                     	;# 
  3164  021E                     	;# 
  3165  021F                     	;# 
  3166  0291                     	;# 
  3167  0291                     	;# 
  3168  0292                     	;# 
  3169  0293                     	;# 
  3170  0294                     	;# 
  3171  0295                     	;# 
  3172  0295                     	;# 
  3173  0296                     	;# 
  3174  0298                     	;# 
  3175  0298                     	;# 
  3176  0299                     	;# 
  3177  029A                     	;# 
  3178  029B                     	;# 
  3179  029C                     	;# 
  3180  029D                     	;# 
  3181  029E                     	;# 
  3182  0311                     	;# 
  3183  0311                     	;# 
  3184  0312                     	;# 
  3185  0313                     	;# 
  3186  0318                     	;# 
  3187  0318                     	;# 
  3188  0319                     	;# 
  3189  031A                     	;# 
  3190  038C                     	;# 
  3191  038D                     	;# 
  3192  038E                     	;# 
  3193  0391                     	;# 
  3194  0392                     	;# 
  3195  0393                     	;# 
  3196  0394                     	;# 
  3197  0395                     	;# 
  3198  0396                     	;# 
  3199  039A                     	;# 
  3200  039C                     	;# 
  3201  039D                     	;# 
  3202  039E                     	;# 
  3203  039F                     	;# 
  3204  0415                     	;# 
  3205  0416                     	;# 
  3206  0417                     	;# 
  3207  041C                     	;# 
  3208  041D                     	;# 
  3209  041E                     	;# 
  3210  0FE4                     	;# 
  3211  0FE5                     	;# 
  3212  0FE6                     	;# 
  3213  0FE7                     	;# 
  3214  0FE8                     	;# 
  3215  0FE9                     	;# 
  3216  0FEA                     	;# 
  3217  0FEB                     	;# 
  3218  0FED                     	;# 
  3219  0FEE                     	;# 
  3220  0FEF                     	;# 
  3221  0000                     	;# 
  3222  0001                     	;# 
  3223  0002                     	;# 
  3224  0003                     	;# 
  3225  0004                     	;# 
  3226  0005                     	;# 
  3227  0006                     	;# 
  3228  0007                     	;# 
  3229  0008                     	;# 
  3230  0009                     	;# 
  3231  000A                     	;# 
  3232  000B                     	;# 
  3233  000C                     	;# 
  3234  000D                     	;# 
  3235  000E                     	;# 
  3236  0011                     	;# 
  3237  0012                     	;# 
  3238  0013                     	;# 
  3239  0014                     	;# 
  3240  0015                     	;# 
  3241  0016                     	;# 
  3242  0016                     	;# 
  3243  0017                     	;# 
  3244  0018                     	;# 
  3245  0019                     	;# 
  3246  001A                     	;# 
  3247  001B                     	;# 
  3248  001C                     	;# 
  3249  001E                     	;# 
  3250  001F                     	;# 
  3251  008C                     	;# 
  3252  008D                     	;# 
  3253  008E                     	;# 
  3254  0091                     	;# 
  3255  0092                     	;# 
  3256  0093                     	;# 
  3257  0094                     	;# 
  3258  0095                     	;# 
  3259  0096                     	;# 
  3260  0097                     	;# 
  3261  0098                     	;# 
  3262  0099                     	;# 
  3263  009A                     	;# 
  3264  009B                     	;# 
  3265  009B                     	;# 
  3266  009C                     	;# 
  3267  009D                     	;# 
  3268  009E                     	;# 
  3269  010C                     	;# 
  3270  010D                     	;# 
  3271  010E                     	;# 
  3272  0111                     	;# 
  3273  0112                     	;# 
  3274  0113                     	;# 
  3275  0114                     	;# 
  3276  0115                     	;# 
  3277  0116                     	;# 
  3278  0117                     	;# 
  3279  0118                     	;# 
  3280  0119                     	;# 
  3281  011A                     	;# 
  3282  011B                     	;# 
  3283  011D                     	;# 
  3284  011E                     	;# 
  3285  018C                     	;# 
  3286  018D                     	;# 
  3287  018E                     	;# 
  3288  0191                     	;# 
  3289  0191                     	;# 
  3290  0192                     	;# 
  3291  0193                     	;# 
  3292  0193                     	;# 
  3293  0193                     	;# 
  3294  0194                     	;# 
  3295  0195                     	;# 
  3296  0196                     	;# 
  3297  0199                     	;# 
  3298  019A                     	;# 
  3299  019B                     	;# 
  3300  019B                     	;# 
  3301  019C                     	;# 
  3302  019D                     	;# 
  3303  019E                     	;# 
  3304  019F                     	;# 
  3305  020C                     	;# 
  3306  020D                     	;# 
  3307  020E                     	;# 
  3308  0211                     	;# 
  3309  0211                     	;# 
  3310  0212                     	;# 
  3311  0212                     	;# 
  3312  0213                     	;# 
  3313  0213                     	;# 
  3314  0214                     	;# 
  3315  0214                     	;# 
  3316  0215                     	;# 
  3317  0215                     	;# 
  3318  0215                     	;# 
  3319  0216                     	;# 
  3320  0216                     	;# 
  3321  0217                     	;# 
  3322  0217                     	;# 
  3323  0219                     	;# 
  3324  021A                     	;# 
  3325  021B                     	;# 
  3326  021C                     	;# 
  3327  021D                     	;# 
  3328  021E                     	;# 
  3329  021F                     	;# 
  3330  0291                     	;# 
  3331  0291                     	;# 
  3332  0292                     	;# 
  3333  0293                     	;# 
  3334  0294                     	;# 
  3335  0295                     	;# 
  3336  0295                     	;# 
  3337  0296                     	;# 
  3338  0298                     	;# 
  3339  0298                     	;# 
  3340  0299                     	;# 
  3341  029A                     	;# 
  3342  029B                     	;# 
  3343  029C                     	;# 
  3344  029D                     	;# 
  3345  029E                     	;# 
  3346  0311                     	;# 
  3347  0311                     	;# 
  3348  0312                     	;# 
  3349  0313                     	;# 
  3350  0318                     	;# 
  3351  0318                     	;# 
  3352  0319                     	;# 
  3353  031A                     	;# 
  3354  038C                     	;# 
  3355  038D                     	;# 
  3356  038E                     	;# 
  3357  0391                     	;# 
  3358  0392                     	;# 
  3359  0393                     	;# 
  3360  0394                     	;# 
  3361  0395                     	;# 
  3362  0396                     	;# 
  3363  039A                     	;# 
  3364  039C                     	;# 
  3365  039D                     	;# 
  3366  039E                     	;# 
  3367  039F                     	;# 
  3368  0415                     	;# 
  3369  0416                     	;# 
  3370  0417                     	;# 
  3371  041C                     	;# 
  3372  041D                     	;# 
  3373  041E                     	;# 
  3374  0FE4                     	;# 
  3375  0FE5                     	;# 
  3376  0FE6                     	;# 
  3377  0FE7                     	;# 
  3378  0FE8                     	;# 
  3379  0FE9                     	;# 
  3380  0FEA                     	;# 
  3381  0FEB                     	;# 
  3382  0FED                     	;# 
  3383  0FEE                     	;# 
  3384  0FEF                     	;_I2cPacket
  3385                           
  3386                           	psect	idataCOMMON
  3387  0002                     __pidataCOMMON:	
  3388                           
  3389                           ;initializer for Led_InitSeq@LedInitSts
  3390  0002  3401               	retlw	1
  3391                           
  3392                           ;initializer for _LedBehaviourSts
  3393  0003  3401               	retlw	1
  3394                           
  3395                           	psect	idataBANK1
  3396  07FF                     __pidataBANK1:	
  3397                           
  3398                           ;initializer for _MainSystemTimebaseFlag
  3399  07FF  3401               	retlw	1
  3400                           
  3401                           	psect	idataBANK2
  3402  09B7                     __pidataBANK2:	
  3403                           
  3404                           ;initializer for _TaskTable
  3405  09B7  34B0               	retlw	low _I2c_DataReceiveSm
  3406  09B8  3400               	retlw	high _I2c_DataReceiveSm
  3407  09B9  3400               	retlw	0
  3408  09BA  3400               	retlw	0
  3409  09BB  3400               	retlw	0
  3410  09BC  3401               	retlw	1
  3411  09BD  3400               	retlw	0
  3412  09BE  3400               	retlw	0
  3413  09BF  346C               	retlw	low _I2cSlv_MainTask
  3414  09C0  3408               	retlw	high _I2cSlv_MainTask
  3415  09C1  3400               	retlw	0
  3416  09C2  3400               	retlw	0
  3417  09C3  3400               	retlw	0
  3418  09C4  3401               	retlw	1
  3419  09C5  3400               	retlw	0
  3420  09C6  3400               	retlw	0
  3421  09C7  3481               	retlw	low _Wdg_MainTask
  3422  09C8  3408               	retlw	high _Wdg_MainTask
  3423  09C9  3400               	retlw	0
  3424  09CA  3400               	retlw	0
  3425  09CB  3400               	retlw	0
  3426  09CC  34E8               	retlw	232
  3427  09CD  3403               	retlw	3
  3428  09CE  3400               	retlw	0
  3429  09CF  341F               	retlw	low _Led_MainTask
  3430  09D0  340B               	retlw	high _Led_MainTask
  3431  09D1  3400               	retlw	0
  3432  09D2  3400               	retlw	0
  3433  09D3  3400               	retlw	0
  3434  09D4  3464               	retlw	100
  3435  09D5  3400               	retlw	0
  3436  09D6  3400               	retlw	0
  3437  09D7  34BE               	retlw	low _App_MainTask
  3438  09D8  3405               	retlw	high _App_MainTask
  3439  09D9  3400               	retlw	0
  3440  09DA  3400               	retlw	0
  3441  09DB  3400               	retlw	0
  3442  09DC  3464               	retlw	100
  3443  09DD  3400               	retlw	0
  3444  09DE  3400               	retlw	0
  3445                           
  3446                           	psect	stringtext
  3447  1000                     __pstringtext:	
  3448  1000                     _dpowers:	
  3449  1000  3401               	retlw	1
  3450  1001  3400               	retlw	0
  3451  1002  340A               	retlw	10
  3452  1003  3400               	retlw	0
  3453  1004  3464               	retlw	100
  3454  1005  3400               	retlw	0
  3455  1006  34E8               	retlw	232
  3456  1007  3403               	retlw	3
  3457  1008  3410               	retlw	16
  3458  1009  3427               	retlw	39
  3459  100A                     __end_of_dpowers:	
  3460  100A                     _TaskNumber:	
  3461  100A  3405               	retlw	5
  3462  100B  3400               	retlw	0
  3463  100C                     __end_of_TaskNumber:	
  3464  000B                     _INTCONbits	set	11
  3465  0011                     _PIR1bits	set	17
  3466  0013                     _PIR3bits	set	19
  3467  000C                     _PORTAbits	set	12
  3468  000E                     _PORTCbits	set	14
  3469  001B                     _PR2	set	27
  3470  001C                     _T2CONbits	set	28
  3471  009D                     _ADCON0bits	set	157
  3472  009E                     _ADCON1bits	set	158
  3473  009C                     _ADRESH	set	156
  3474  009B                     _ADRESL	set	155
  3475  0095                     _OPTION_REGbits	set	149
  3476  0099                     _OSCCONbits	set	153
  3477  009A                     _OSCSTATbits	set	154
  3478  0091                     _PIE1bits	set	145
  3479  0093                     _PIE3bits	set	147
  3480  008C                     _TRISAbits	set	140
  3481  008D                     _TRISBbits	set	141
  3482  008E                     _TRISCbits	set	142
  3483  0097                     _WDTCONbits	set	151
  3484  0117                     _FVRCONbits	set	279
  3485  010C                     _LATA	set	268
  3486  010C                     _LATAbits	set	268
  3487  010D                     _LATB	set	269
  3488  010D                     _LATBbits	set	269
  3489  010E                     _LATC	set	270
  3490  010E                     _LATCbits	set	270
  3491  018C                     _ANSELA	set	396
  3492  018C                     _ANSELAbits	set	396
  3493  018D                     _ANSELB	set	397
  3494  018D                     _ANSELBbits	set	397
  3495  018E                     _ANSELC	set	398
  3496  018E                     _ANSELCbits	set	398
  3497  0212                     _SSP1ADD	set	530
  3498  0211                     _SSP1BUF	set	529
  3499  0215                     _SSP1CON1	set	533
  3500  0215                     _SSP1CON1bits	set	533
  3501  0216                     _SSP1CON2	set	534
  3502  0217                     _SSP1CON3	set	535
  3503  0213                     _SSP1MSK	set	531
  3504  0214                     _SSP1STAT	set	532
  3505  020C                     _WPUA	set	524
  3506  020C                     _WPUAbits	set	524
  3507  020D                     _WPUB	set	525
  3508  020D                     _WPUBbits	set	525
  3509  020E                     _WPUC	set	526
  3510  020E                     _WPUCbits	set	526
  3511  0416                     _PR4	set	1046
  3512  041D                     _PR6	set	1053
  3513  0417                     _T4CONbits	set	1047
  3514  041E                     _T6CONbits	set	1054
  3515  100C                     STR_4:	
  3516  100C  3430               	retlw	48	;'0'
  3517  100D  3431               	retlw	49	;'1'
  3518  100E  342E               	retlw	46	;'.'
  3519  100F  3430               	retlw	48	;'0'
  3520  1010  3431               	retlw	49	;'1'
  3521  1011  342E               	retlw	46	;'.'
  3522  1012  3430               	retlw	48	;'0'
  3523  1013  3430               	retlw	48	;'0'
  3524  1014  3400               	retlw	0
  3525  1015                     STR_1:	
  3526  1015  3425               	retlw	37	;'%'
  3527  1016  3464               	retlw	100	;'d'
  3528  1017  342E               	retlw	46	;'.'
  3529  1018  3425               	retlw	37	;'%'
  3530  1019  3430               	retlw	48	;'0'
  3531  101A  3431               	retlw	49	;'1'
  3532  101B  3475               	retlw	117	;'u'
  3533  101C  3400               	retlw	0
  3534  101D                     STR_3:	
  3535  101D  3453               	retlw	83	;'S'
  3536  101E  3442               	retlw	66	;'B'
  3537  101F  3431               	retlw	49	;'1'
  3538  1020  3434               	retlw	52	;'4'
  3539  1021  3430               	retlw	48	;'0'
  3540  1022  3400               	retlw	0
  3541  1023                     STR_2:	
  3542  1023  3445               	retlw	69	;'E'
  3543  1024  3443               	retlw	67	;'C'
  3544  1025  3448               	retlw	72	;'H'
  3545  1026  344F               	retlw	79	;'O'
  3546  1027  3400               	retlw	0
  3547  100C                     
  3548                           ; #config settings
  3549  0000                     
  3550                           	psect	cinit
  3551  002D                     start_initialization:	
  3552  002D                     __initialization:		;BIGRAM
  3553                           
  3554                           ; Initialize objects allocated to COMMON
  3555  002D  3180  2002  3180   	fcall	__pidataCOMMON	;fetch initializer
  3556  0030  00F8               	movwf	__pdataCOMMON& (0+127)
  3557  0031  3180  2003  3180   	fcall	__pidataCOMMON+1	;fetch initializer
  3558  0034  00F9               	movwf	(__pdataCOMMON+1)& (0+127)
  3559                           
  3560                           ; Initialize objects allocated to BANK1
  3561  0035  0021               	movlb	1	; select bank1
  3562  0036  3187  27FF  3180   	fcall	__pidataBANK1	;fetch initializer
  3563  0039  00EE               	movwf	__pdataBANK1& (0+127)
  3564                           
  3565                           ; Initialize objects allocated to BANK2
  3566  003A  30B7               	movlw	low __pidataBANK2
  3567  003B  0084               	movwf	4
  3568  003C  3089               	movlw	(high __pidataBANK2)| (0+128)
  3569  003D  0085               	movwf	5
  3570  003E  3020               	movlw	low __pdataBANK2
  3571  003F  0086               	movwf	6
  3572  0040  3001               	movlw	high __pdataBANK2
  3573  0041  0087               	movwf	7
  3574  0042  3000               	movlw	0
  3575  0043  00FF               	movwf	btemp+1
  3576  0044  3028               	movlw	40
  3577  0045  3197  27C7  3180   	fcall	init_ram
  3578                           
  3579                           ; Clear objects allocated to BIGRAM
  3580  0048  309D               	movlw	low (0+9117)
  3581  0049  0084               	movwf	4
  3582  004A  3023               	movlw	high (0+9117)
  3583  004B  0085               	movwf	5
  3584  004C  3053               	movlw	83
  3585  004D  00FE               	movwf	btemp
  3586  004E  3000               	movlw	0
  3587  004F  00FF               	movwf	btemp+1
  3588  0050  3197  27BB  3180   	fcall	clear_ram0
  3589                           
  3590                           ; Clear objects allocated to COMMON
  3591  0053  01F6               	clrf	__pbssCOMMON& (0+127)
  3592  0054  01F7               	clrf	(__pbssCOMMON+1)& (0+127)
  3593                           
  3594                           ; Clear objects allocated to BANK0
  3595  0055  3063               	movlw	low __pbssBANK0
  3596  0056  0084               	movwf	4
  3597  0057  3000               	movlw	high __pbssBANK0
  3598  0058  0085               	movwf	5
  3599  0059  300B               	movlw	11
  3600  005A  00FE               	movwf	btemp
  3601  005B  3000               	movlw	0
  3602  005C  00FF               	movwf	btemp+1
  3603  005D  3197  27BB  3180   	fcall	clear_ram0
  3604                           
  3605                           ; Clear objects allocated to BANK1
  3606  0060  30A0               	movlw	low __pbssBANK1
  3607  0061  0084               	movwf	4
  3608  0062  3000               	movlw	high __pbssBANK1
  3609  0063  0085               	movwf	5
  3610  0064  304A               	movlw	74
  3611  0065  00FE               	movwf	btemp
  3612  0066  3000               	movlw	0
  3613  0067  00FF               	movwf	btemp+1
  3614  0068  3197  27BB  3180   	fcall	clear_ram0
  3615                           
  3616                           ; Clear objects allocated to BANK2
  3617  006B  3048               	movlw	low __pbssBANK2
  3618  006C  0084               	movwf	4
  3619  006D  3001               	movlw	high __pbssBANK2
  3620  006E  0085               	movwf	5
  3621  006F  3020               	movlw	32
  3622  0070  00FE               	movwf	btemp
  3623  0071  3000               	movlw	0
  3624  0072  00FF               	movwf	btemp+1
  3625  0073  3197  27BB  3180   	fcall	clear_ram0
  3626                           
  3627                           ; Clear objects allocated to BANK3
  3628  0076  30A0               	movlw	low __pbssBANK3
  3629  0077  0084               	movwf	4
  3630  0078  3001               	movlw	high __pbssBANK3
  3631  0079  0085               	movwf	5
  3632  007A  3050               	movlw	80
  3633  007B  00FE               	movwf	btemp
  3634  007C  3000               	movlw	0
  3635  007D  00FF               	movwf	btemp+1
  3636  007E  3197  27BB  3180   	fcall	clear_ram0
  3637                           
  3638                           ; Clear objects allocated to BANK4
  3639  0081  3020               	movlw	low __pbssBANK4
  3640  0082  0084               	movwf	4
  3641  0083  3002               	movlw	high __pbssBANK4
  3642  0084  0085               	movwf	5
  3643  0085  3012               	movlw	18
  3644  0086  00FE               	movwf	btemp
  3645  0087  3000               	movlw	0
  3646  0088  00FF               	movwf	btemp+1
  3647  0089  3197  27BB  3180   	fcall	clear_ram0
  3648                           
  3649                           ; Clear objects allocated to BANK5
  3650  008C  30A0               	movlw	low __pbssBANK5
  3651  008D  0084               	movwf	4
  3652  008E  3002               	movlw	high __pbssBANK5
  3653  008F  0085               	movwf	5
  3654  0090  3050               	movlw	80
  3655  0091  00FE               	movwf	btemp
  3656  0092  3000               	movlw	0
  3657  0093  00FF               	movwf	btemp+1
  3658  0094  3197  27BB  3180   	fcall	clear_ram0
  3659                           
  3660                           ; Clear objects allocated to BANK6
  3661  0097  3020               	movlw	low __pbssBANK6
  3662  0098  0084               	movwf	4
  3663  0099  3003               	movlw	high __pbssBANK6
  3664  009A  0085               	movwf	5
  3665  009B  3050               	movlw	80
  3666  009C  00FE               	movwf	btemp
  3667  009D  3000               	movlw	0
  3668  009E  00FF               	movwf	btemp+1
  3669  009F  3197  27BB  3180   	fcall	clear_ram0
  3670                           
  3671                           ; Clear objects allocated to BANK7
  3672  00A2  30A0               	movlw	low __pbssBANK7
  3673  00A3  0084               	movwf	4
  3674  00A4  3003               	movlw	high __pbssBANK7
  3675  00A5  0085               	movwf	5
  3676  00A6  3050               	movlw	80
  3677  00A7  00FE               	movwf	btemp
  3678  00A8  3000               	movlw	0
  3679  00A9  00FF               	movwf	btemp+1
  3680  00AA  3197  27BB         	fcall	clear_ram0
  3681  00AC                     end_of_initialization:	
  3682                           ;End of C runtime variable initialization code
  3683                           
  3684  00AC                     __end_of__initialization:	
  3685  00AC  107E               	bcf	int$flags,0	;clear compiler interrupt flag (level 1)
  3686  00AD  0020               	movlb	0
  3687  00AE  3197  2F56         	ljmp	_main	;jump to C main() function
  3688                           
  3689                           	psect	bssCOMMON
  3690  0076                     __pbssCOMMON:	
  3691  0076                     _Hsd1Sts:	
  3692  0076                     	ds	1
  3693  0077                     _I2cSlaveAddress:	
  3694  0077                     	ds	1
  3695                           
  3696                           	psect	dataCOMMON
  3697  0078                     __pdataCOMMON:	
  3698  0078                     Led_InitSeq@LedInitSts:	
  3699  0078                     	ds	1
  3700  0079                     _LedBehaviourSts:	
  3701  0079                     	ds	1
  3702                           
  3703                           	psect	bssBANK0
  3704  0063                     __pbssBANK0:	
  3705  0063                     I2c_DataReceiveSm@I2cRxAddress:	
  3706  0063                     	ds	1
  3707  0064                     I2c_DataReceiveSm@I2cRxState:	
  3708  0064                     	ds	1
  3709  0065                     I2c_DataReceiveSm@OpType:	
  3710  0065                     	ds	1
  3711  0066                     I2c_DataReceiveSm@RxCounter:	
  3712  0066                     	ds	1
  3713  0067                     I2c_DataReceiveSm@TxCounter:	
  3714  0067                     	ds	1
  3715  0068                     _Hsd2Sts:	
  3716  0068                     	ds	1
  3717  0069                     _Hsd3Sts:	
  3718  0069                     	ds	1
  3719  006A                     _Hsd4Sts:	
  3720  006A                     	ds	1
  3721  006B                     _SystemState:	
  3722  006B                     	ds	1
  3723  006C                     _I2cReplyPacketReady:	
  3724  006C                     	ds	2
  3725                           
  3726                           	psect	bssBANK1
  3727  00A0                     __pbssBANK1:	
  3728  00A0                     Led_InitSeq@DelayCounter:	
  3729  00A0                     	ds	2
  3730  00A2                     _InterruptCounter:	
  3731  00A2                     	ds	2
  3732  00A4                     _Tmr2IsrCallback:	
  3733  00A4                     	ds	2
  3734  00A6                     _Tmr4IsrCallback:	
  3735  00A6                     	ds	2
  3736  00A8                     _Tmr6IsrCallback:	
  3737  00A8                     	ds	2
  3738  00AA                     AppSm@AppState:	
  3739  00AA                     	ds	1
  3740  00AB                     AppSm@WpuSetCounter:	
  3741  00AB                     	ds	1
  3742  00AC                     I2cSlv_I2cDrvHandle@I2cReceiveMsgState:	
  3743  00AC                     	ds	1
  3744  00AD                     I2c_DataReceiveSm@AddressStored:	
  3745  00AD                     	ds	1
  3746  00AE                     I2c_DataReceiveSm@ErrorCounter:	
  3747  00AE                     	ds	1
  3748  00AF                     I2c_DataReceiveSm@I2cRxFlag:	
  3749  00AF                     	ds	1
  3750  00B0                     Led_InitSeq@Counter:	
  3751  00B0                     	ds	1
  3752  00B1                     Led_InitSeq@InitSeqState:	
  3753  00B1                     	ds	1
  3754  00B2                     _RepBufferLen:	
  3755  00B2                     	ds	1
  3756  00B3                     _Hsd1Set:	
  3757  00B3                     	ds	10
  3758  00BD                     _Hsd2Set:	
  3759  00BD                     	ds	10
  3760  00C7                     _Hsd3Set:	
  3761  00C7                     	ds	10
  3762  00D1                     _Hsd4Set:	
  3763  00D1                     	ds	10
  3764  00DB                     _Led1Pulse:	
  3765  00DB                     	ds	6
  3766  00E1                     _I2cNewPacketNotification:	
  3767  00E1                     	ds	2
  3768  00E3                     _I2cNewTxNotification:	
  3769  00E3                     	ds	2
  3770  00E5                     _I2cSetAddress:	
  3771  00E5                     	ds	2
  3772  00E7                     _I2cWriteRequest:	
  3773  00E7                     	ds	2
  3774  00E9                     _Led1Sts:	
  3775  00E9                     	ds	1
  3776                           
  3777                           	psect	dataBANK1
  3778  00EE                     __pdataBANK1:	
  3779  00EE                     _MainSystemTimebaseFlag:	
  3780  00EE                     	ds	1
  3781                           
  3782                           	psect	bssBANK2
  3783  0148                     __pbssBANK2:	
  3784  0148                     App_MainTask@F4181:	
  3785  0148                     	ds	12
  3786  0154                     _I2cConfig:	
  3787  0154                     	ds	11
  3788  015F                     _Led1Blink:	
  3789  015F                     	ds	9
  3790                           
  3791                           	psect	dataBANK2
  3792  0120                     __pdataBANK2:	
  3793  0120                     _TaskTable:	
  3794  0120                     	ds	40
  3795                           
  3796                           	psect	bssBANK3
  3797  01A0                     __pbssBANK3:	
  3798  01A0                     _CmdBuffer:	
  3799  01A0                     	ds	80
  3800                           
  3801                           	psect	bssBANK4
  3802  0220                     __pbssBANK4:	
  3803  0220                     App_MainTask@F4167:	
  3804  0220                     	ds	18
  3805                           
  3806                           	psect	bssBANK5
  3807  02A0                     __pbssBANK5:	
  3808  02A0                     _RepBuffer:	
  3809  02A0                     	ds	80
  3810                           
  3811                           	psect	bssBANK6
  3812  0320                     __pbssBANK6:	
  3813  0320                     _I2cTxBuffer:	
  3814  0320                     	ds	80
  3815                           
  3816                           	psect	bssBANK7
  3817  03A0                     __pbssBANK7:	
  3818  03A0                     _I2cRxBuffer:	
  3819  03A0                     	ds	80
  3820                           
  3821                           	psect	inittext
  3822  17C7                     init_ram:	
  3823  17C7  00FE               	movwf	126
  3824  17C8                     initloop:	
  3825  17C8  0012               	moviw fsr0++
  3826  17C9  001E               	movwi fsr1++
  3827  17CA  3001               	movlw	1
  3828  17CB  02FE               	subwf	126,f
  3829  17CC  3000               	movlw	0
  3830  17CD  3BFF               	subwfb	127,f
  3831  17CE  087F               	movf	127,w
  3832  17CF  047E               	iorwf	126,w
  3833  17D0  1903               	btfsc	3,2
  3834  17D1  3400               	retlw	0
  3835  17D2  2FC8               	goto	initloop
  3836                           
  3837                           	psect	clrtext
  3838  17BB                     clear_ram0:	
  3839                           ;	Called with FSR0 containing the base address, and
  3840                           ;	btemp/btemp+1 has the size to clear
  3841                           
  3842  17BB  0064               	clrwdt	;clear the watchdog before getting into this loop
  3843  17BC                     clrloop0:	
  3844  17BC  0180               	clrf	0	;clear RAM location pointed to by FSR
  3845  17BD  3101               	addfsr 0,1
  3846  17BE  3001               	movlw	1
  3847  17BF  02FE               	subwf	126,f
  3848  17C0  3000               	movlw	0
  3849  17C1  3BFF               	subwfb	127,f
  3850  17C2  087F               	movf	127,w
  3851  17C3  047E               	iorwf	126,w
  3852  17C4  1903               	btfsc	3,2
  3853  17C5  3400               	retlw	0	;all done for this memory range, return
  3854  17C6  2FBC               	goto	clrloop0	;have we reached the end yet?
  3855                           
  3856                           	psect	cstackBANK2
  3857  0168                     __pcstackBANK2:	
  3858  0168                     ??_ScheduleTasks:	
  3859                           
  3860                           ; 1 bytes @ 0x0
  3861  0168                     	ds	6
  3862                           
  3863                           	psect	cstackBANK1
  3864  00EA                     __pcstackBANK1:	
  3865  00EA                     ??_InitializeTasks:	
  3866                           
  3867                           ; 1 bytes @ 0x0
  3868  00EA                     	ds	4
  3869                           
  3870                           	psect	cstackCOMMON
  3871  0070                     __pcstackCOMMON:	
  3872  0070                     ?_SystemInit:	
  3873  0070                     ?_MainScheduler:	
  3874                           ; 1 bytes @ 0x0
  3875                           
  3876  0070                     ?_ReceiveEvt:	
  3877                           ; 1 bytes @ 0x0
  3878                           
  3879  0070                     ?_Mcu_Reset:	
  3880                           ; 1 bytes @ 0x0
  3881                           
  3882  0070                     ?_GenerateEvt:	
  3883                           ; 1 bytes @ 0x0
  3884                           
  3885  0070                     ?_InitializeTasks:	
  3886                           ; 1 bytes @ 0x0
  3887                           
  3888  0070                     ?_ScheduleTasks:	
  3889                           ; 1 bytes @ 0x0
  3890                           
  3891  0070                     ?_I2cSlv_I2cDrvHandle:	
  3892                           ; 1 bytes @ 0x0
  3893                           
  3894  0070                     ?_SetLedBehavSts:	
  3895                           ; 1 bytes @ 0x0
  3896                           
  3897  0070                     ?_CheckAckStatus:	
  3898                           ; 1 bytes @ 0x0
  3899                           
  3900  0070                     ?_CheckByteStatus:	
  3901                           ; 1 bytes @ 0x0
  3902                           
  3903  0070                     ?_CheckStopBitStatus:	
  3904                           ; 1 bytes @ 0x0
  3905                           
  3906  0070                     ?_ClearRxBuffer:	
  3907                           ; 1 bytes @ 0x0
  3908                           
  3909  0070                     ?_ClearTxBuffer:	
  3910                           ; 1 bytes @ 0x0
  3911                           
  3912  0070                     ?_I2c_InitI2cModule:	
  3913                           ; 1 bytes @ 0x0
  3914                           
  3915  0070                     ?_I2c_SetI2cAddress:	
  3916                           ; 1 bytes @ 0x0
  3917                           
  3918  0070                     ?_I2c_SetI2cAddressMask:	
  3919                           ; 1 bytes @ 0x0
  3920                           
  3921  0070                     ?_LedBlinkStateMachine:	
  3922                           ; 1 bytes @ 0x0
  3923                           
  3924  0070                     ?_Adc_ConfigAnCh:	
  3925                           ; 1 bytes @ 0x0
  3926                           
  3927  0070                     ?_Adc_InitAdcModule:	
  3928                           ; 1 bytes @ 0x0
  3929                           
  3930  0070                     ?_Adc_SelectChannel:	
  3931                           ; 1 bytes @ 0x0
  3932                           
  3933  0070                     ?_Adc_StartConversion:	
  3934                           ; 1 bytes @ 0x0
  3935                           
  3936  0070                     ?_Adc_GetConvSts:	
  3937                           ; 1 bytes @ 0x0
  3938                           
  3939  0070                     ?_Mcu_InitIntOsc:	
  3940                           ; 1 bytes @ 0x0
  3941                           
  3942  0070                     ?_Mcu_EnableInterrupts:	
  3943                           ; 1 bytes @ 0x0
  3944                           
  3945  0070                     ?_Mcu_SetPullUpsSts:	
  3946                           ; 1 bytes @ 0x0
  3947                           
  3948  0070                     ?_Mcu_ConfigPullUps:	
  3949                           ; 1 bytes @ 0x0
  3950                           
  3951  0070                     ?_Mcu_SetWdgPeriod:	
  3952                           ; 1 bytes @ 0x0
  3953                           
  3954  0070                     ?_Mcu_SetWdgSts:	
  3955                           ; 1 bytes @ 0x0
  3956                           
  3957  0070                     ?_Mcu_ClearWdg:	
  3958                           ; 1 bytes @ 0x0
  3959                           
  3960  0070                     ?_Mcu_SetDieTempSts:	
  3961                           ; 1 bytes @ 0x0
  3962                           
  3963  0070                     ?_Mcu_SetDieTempMode:	
  3964                           ; 1 bytes @ 0x0
  3965                           
  3966  0070                     ?_Tmr_StartTmr:	
  3967                           ; 1 bytes @ 0x0
  3968                           
  3969  0070                     ?_MainInterrupt:	
  3970                           ; 1 bytes @ 0x0
  3971                           
  3972  0070                     ?_I2c_SetConfig:	
  3973                           ; 1 bytes @ 0x0
  3974                           
  3975  0070                     ?_Led_InitSeq:	
  3976                           ; 1 bytes @ 0x0
  3977                           
  3978  0070                     ?_ControlLedDirect:	
  3979                           ; 1 bytes @ 0x0
  3980                           
  3981  0070                     ?_BoardReset:	
  3982                           ; 1 bytes @ 0x0
  3983                           
  3984  0070                     ?_LowPowerMode:	
  3985                           ; 1 bytes @ 0x0
  3986                           
  3987  0070                     ?_StdS_ManageStdServices:	
  3988                           ; 1 bytes @ 0x0
  3989                           
  3990  0070                     ?_StdS_SetI2cAddress:	
  3991                           ; 1 bytes @ 0x0
  3992                           
  3993  0070                     ?_UpdateHsdSts:	
  3994                           ; 1 bytes @ 0x0
  3995                           
  3996  0070                     ?_GenerateImpulse:	
  3997                           ; 1 bytes @ 0x0
  3998                           
  3999  0070                     ?_ManageProtocol:	
  4000                           ; 1 bytes @ 0x0
  4001                           
  4002  0070                     ?_AppSm:	
  4003                           ; 1 bytes @ 0x0
  4004                           
  4005  0070                     ?_InitSchTimer:	
  4006                           ; 1 bytes @ 0x0
  4007                           
  4008  0070                     ?i1_GenerateEvt:	
  4009                           ; 1 bytes @ 0x0
  4010                           
  4011  0070                     ??i1_GenerateEvt:	
  4012                           ; 1 bytes @ 0x0
  4013                           
  4014  0070                     ?_main:	
  4015                           ; 1 bytes @ 0x0
  4016                           
  4017                           
  4018                           ; 2 bytes @ 0x0
  4019  0070                     	ds	1
  4020  0071                     i1GenerateEvt@Event:	
  4021                           
  4022                           ; 1 bytes @ 0x1
  4023  0071                     	ds	1
  4024  0072                     i1GenerateEvt@EventStatus:	
  4025                           
  4026                           ; 1 bytes @ 0x2
  4027  0072                     	ds	1
  4028  0073                     ??_MainInterrupt:	
  4029                           
  4030                           ; 1 bytes @ 0x3
  4031  0073                     	ds	1
  4032  0074                     ??_ReceiveEvt:	
  4033  0074                     ??_Mcu_Reset:	
  4034                           ; 1 bytes @ 0x4
  4035                           
  4036  0074                     ??_GenerateEvt:	
  4037                           ; 1 bytes @ 0x4
  4038                           
  4039  0074                     ?_Led_SetLedStatus:	
  4040                           ; 1 bytes @ 0x4
  4041                           
  4042  0074                     ??_CheckAckStatus:	
  4043                           ; 1 bytes @ 0x4
  4044                           
  4045  0074                     ??_CheckByteStatus:	
  4046                           ; 1 bytes @ 0x4
  4047                           
  4048  0074                     ??_CheckStopBitStatus:	
  4049                           ; 1 bytes @ 0x4
  4050                           
  4051  0074                     ??_ClearRxBuffer:	
  4052                           ; 1 bytes @ 0x4
  4053                           
  4054  0074                     ??_ClearTxBuffer:	
  4055                           ; 1 bytes @ 0x4
  4056                           
  4057  0074                     ??_I2c_SetI2cAddress:	
  4058                           ; 1 bytes @ 0x4
  4059                           
  4060  0074                     ??_I2c_SetI2cAddressMask:	
  4061                           ; 1 bytes @ 0x4
  4062                           
  4063  0074                     ?_I2c_UpdateTxBuffer:	
  4064                           ; 1 bytes @ 0x4
  4065                           
  4066  0074                     ??_Adc_ConfigAnCh:	
  4067                           ; 1 bytes @ 0x4
  4068                           
  4069  0074                     ??_Adc_InitAdcModule:	
  4070                           ; 1 bytes @ 0x4
  4071                           
  4072  0074                     ??_Adc_SelectChannel:	
  4073                           ; 1 bytes @ 0x4
  4074                           
  4075  0074                     ??_Adc_StartConversion:	
  4076                           ; 1 bytes @ 0x4
  4077                           
  4078  0074                     ??_Adc_GetConvSts:	
  4079                           ; 1 bytes @ 0x4
  4080                           
  4081  0074                     ??_Mcu_InitIntOsc:	
  4082                           ; 1 bytes @ 0x4
  4083                           
  4084  0074                     ??_Mcu_EnableInterrupts:	
  4085                           ; 1 bytes @ 0x4
  4086                           
  4087  0074                     ??_Mcu_SetPullUpsSts:	
  4088                           ; 1 bytes @ 0x4
  4089                           
  4090  0074                     ??_Mcu_ConfigPullUps:	
  4091                           ; 1 bytes @ 0x4
  4092                           
  4093  0074                     ??_Mcu_SetWdgPeriod:	
  4094                           ; 1 bytes @ 0x4
  4095                           
  4096  0074                     ??_Mcu_SetWdgSts:	
  4097                           ; 1 bytes @ 0x4
  4098                           
  4099  0074                     ??_Mcu_ClearWdg:	
  4100                           ; 1 bytes @ 0x4
  4101                           
  4102  0074                     ??_Mcu_SetDieTempSts:	
  4103                           ; 1 bytes @ 0x4
  4104                           
  4105  0074                     ??_Mcu_SetDieTempMode:	
  4106                           ; 1 bytes @ 0x4
  4107                           
  4108  0074                     ?_TmrBInit:	
  4109                           ; 1 bytes @ 0x4
  4110                           
  4111  0074                     ?_Tmr_TmrBIrqSet:	
  4112                           ; 1 bytes @ 0x4
  4113                           
  4114  0074                     ??_Tmr_StartTmr:	
  4115                           ; 1 bytes @ 0x4
  4116                           
  4117  0074                     ??_I2c_SetConfig:	
  4118                           ; 1 bytes @ 0x4
  4119                           
  4120  0074                     ??_Led_SetLedBlinkTime:	
  4121                           ; 1 bytes @ 0x4
  4122                           
  4123  0074                     ?_Led_SetLedPulseTime:	
  4124                           ; 1 bytes @ 0x4
  4125                           
  4126  0074                     ??_BoardReset:	
  4127                           ; 1 bytes @ 0x4
  4128                           
  4129  0074                     ??_StdS_SetI2cAddress:	
  4130                           ; 1 bytes @ 0x4
  4131                           
  4132  0074                     ?_SetOutChSts:	
  4133                           ; 1 bytes @ 0x4
  4134                           
  4135  0074                     ??___wmul:	
  4136                           ; 1 bytes @ 0x4
  4137                           
  4138  0074                     ??___lldiv:	
  4139                           ; 1 bytes @ 0x4
  4140                           
  4141  0074                     ??___lwdiv:	
  4142                           ; 1 bytes @ 0x4
  4143                           
  4144  0074                     ??___lwmod:	
  4145                           ; 1 bytes @ 0x4
  4146                           
  4147  0074                     ?_Adc_GetConvResult:	
  4148                           ; 1 bytes @ 0x4
  4149                           
  4150  0074                     I2c_SetI2cAddress@SlaveAddress:	
  4151                           ; 2 bytes @ 0x4
  4152                           
  4153  0074                     I2c_SetI2cAddressMask@SlaveAddressMask:	
  4154                           ; 1 bytes @ 0x4
  4155                           
  4156  0074                     I2c_UpdateTxBuffer@Length:	
  4157                           ; 1 bytes @ 0x4
  4158                           
  4159  0074                     Adc_ConfigAnCh@AnChSel:	
  4160                           ; 1 bytes @ 0x4
  4161                           
  4162  0074                     Adc_InitAdcModule@AdcConfig:	
  4163                           ; 1 bytes @ 0x4
  4164                           
  4165  0074                     Mcu_SetPullUpsSts@PuSts:	
  4166                           ; 1 bytes @ 0x4
  4167                           
  4168  0074                     Mcu_ConfigPullUps@WpuCh:	
  4169                           ; 1 bytes @ 0x4
  4170                           
  4171  0074                     Mcu_SetWdgSts@WdgSts:	
  4172                           ; 1 bytes @ 0x4
  4173                           
  4174  0074                     Mcu_SetDieTempSts@DieTempSts:	
  4175                           ; 1 bytes @ 0x4
  4176                           
  4177  0074                     Mcu_SetDieTempMode@DieTempMode:	
  4178                           ; 1 bytes @ 0x4
  4179                           
  4180  0074                     TmrBInit@Prescaler:	
  4181                           ; 1 bytes @ 0x4
  4182                           
  4183  0074                     Tmr_TmrBIrqSet@TmrIrqSts:	
  4184                           ; 1 bytes @ 0x4
  4185                           
  4186  0074                     Tmr_StartTmr@TmrNumb:	
  4187                           ; 1 bytes @ 0x4
  4188                           
  4189  0074                     ReceiveEvt@EventStatus:	
  4190                           ; 1 bytes @ 0x4
  4191                           
  4192  0074                     Led_SetLedStatus@LedSts:	
  4193                           ; 1 bytes @ 0x4
  4194                           
  4195  0074                     Led_SetLedBlinkTime@Led:	
  4196                           ; 1 bytes @ 0x4
  4197                           
  4198  0074                     StringCopy@Index:	
  4199                           ; 1 bytes @ 0x4
  4200                           
  4201  0074                     SetOutChSts@Sts:	
  4202                           ; 1 bytes @ 0x4
  4203                           
  4204  0074                     Led_SetLedPulseTime@PulseTimeMs:	
  4205                           ; 1 bytes @ 0x4
  4206                           
  4207  0074                     ___wmul@product:	
  4208                           ; 2 bytes @ 0x4
  4209                           
  4210                           
  4211                           ; 2 bytes @ 0x4
  4212  0074                     	ds	1
  4213  0075                     ??_Led_SetLedStatus:	
  4214  0075                     ??_Tmr_TmrBIrqSet:	
  4215                           ; 1 bytes @ 0x5
  4216                           
  4217  0075                     ??_LowPowerMode:	
  4218                           ; 1 bytes @ 0x5
  4219                           
  4220  0075                     ??_SetOutChSts:	
  4221                           ; 1 bytes @ 0x5
  4222                           
  4223  0075                     ClearRxBuffer@Index:	
  4224                           ; 1 bytes @ 0x5
  4225                           
  4226  0075                     ClearTxBuffer@Index:	
  4227                           ; 1 bytes @ 0x5
  4228                           
  4229  0075                     LedBlinkStateMachine@LedBlink:	
  4230                           ; 1 bytes @ 0x5
  4231                           
  4232  0075                     Adc_SelectChannel@SelCh:	
  4233                           ; 1 bytes @ 0x5
  4234                           
  4235  0075                     Mcu_SetWdgPeriod@WdgPeriod:	
  4236                           ; 1 bytes @ 0x5
  4237                           
  4238  0075                     TmrBInit@Postscaler:	
  4239                           ; 1 bytes @ 0x5
  4240                           
  4241  0075                     Tmr_TmrBIrqSet@TmrNumb:	
  4242                           ; 1 bytes @ 0x5
  4243                           
  4244  0075                     ReceiveEvt@Event:	
  4245                           ; 1 bytes @ 0x5
  4246                           
  4247  0075                     SetOutChSts@Ch:	
  4248                           ; 1 bytes @ 0x5
  4249                           
  4250  0075                     ___lwmod@counter:	
  4251                           ; 1 bytes @ 0x5
  4252                           
  4253                           
  4254                           ; 1 bytes @ 0x5
  4255  0075                     	ds	1
  4256  0076                     ??_SystemInit:	
  4257  0076                     ??_MainScheduler:	
  4258                           ; 1 bytes @ 0x6
  4259                           
  4260  0076                     ??_I2cSlv_MainTask:	
  4261                           ; 1 bytes @ 0x6
  4262                           
  4263  0076                     ??_Wdg_MainTask:	
  4264                           ; 1 bytes @ 0x6
  4265                           
  4266  0076                     ??_main:	
  4267                           ; 1 bytes @ 0x6
  4268                           
  4269  0076                     ??_Led_SetLedPulseTime:	
  4270                           ; 1 bytes @ 0x6
  4271                           
  4272  0076                     ??_ControlLedDirect:	
  4273                           ; 1 bytes @ 0x6
  4274                           
  4275  0076                     ??_GetDieTemperature:	
  4276                           ; 1 bytes @ 0x6
  4277                           
  4278  0076                     ??___lmul:	
  4279                           ; 1 bytes @ 0x6
  4280                           
  4281                           
  4282                           	psect	cstackBANK0
  4283  0020                     __pcstackBANK0:	
  4284                           ; 1 bytes @ 0x6
  4285                           
  4286  0020                     ??_I2c_InitI2cModule:	
  4287  0020                     ??_I2c_UpdateTxBuffer:	
  4288                           ; 1 bytes @ 0x0
  4289                           
  4290  0020                     ??_Adc_GetConvResult:	
  4291                           ; 1 bytes @ 0x0
  4292                           
  4293  0020                     ??_TmrBInit:	
  4294                           ; 1 bytes @ 0x0
  4295                           
  4296  0020                     ?_Led_SetLedBlinkTime:	
  4297                           ; 1 bytes @ 0x0
  4298                           
  4299  0020                     ?_StringCopy:	
  4300                           ; 1 bytes @ 0x0
  4301                           
  4302  0020                     ??_UpdateHsdSts:	
  4303                           ; 1 bytes @ 0x0
  4304                           
  4305  0020                     ??_GenerateImpulse:	
  4306                           ; 1 bytes @ 0x0
  4307                           
  4308  0020                     ?___wmul:	
  4309                           ; 1 bytes @ 0x0
  4310                           
  4311  0020                     ?___lwdiv:	
  4312                           ; 2 bytes @ 0x0
  4313                           
  4314  0020                     ?___lwmod:	
  4315                           ; 2 bytes @ 0x0
  4316                           
  4317  0020                     ?___lldiv:	
  4318                           ; 2 bytes @ 0x0
  4319                           
  4320  0020                     GenerateEvt@EventStatus:	
  4321                           ; 4 bytes @ 0x0
  4322                           
  4323  0020                     Led_SetLedStatus@Led:	
  4324                           ; 1 bytes @ 0x0
  4325                           
  4326  0020                     Led_SetLedPulseTime@Led:	
  4327                           ; 1 bytes @ 0x0
  4328                           
  4329  0020                     Led_SetLedBlinkTime@OnTimeMs:	
  4330                           ; 1 bytes @ 0x0
  4331                           
  4332  0020                     StringCopy@SourceStr:	
  4333                           ; 2 bytes @ 0x0
  4334                           
  4335  0020                     ___wmul@multiplier:	
  4336                           ; 2 bytes @ 0x0
  4337                           
  4338  0020                     ___lwdiv@divisor:	
  4339                           ; 2 bytes @ 0x0
  4340                           
  4341  0020                     ___lwmod@divisor:	
  4342                           ; 2 bytes @ 0x0
  4343                           
  4344  0020                     ___lldiv@divisor:	
  4345                           ; 2 bytes @ 0x0
  4346                           
  4347                           
  4348                           ; 4 bytes @ 0x0
  4349  0020                     	ds	1
  4350  0021                     ??_Led_InitSeq:	
  4351  0021                     TmrBInit@TmrNumb:	
  4352                           ; 1 bytes @ 0x1
  4353                           
  4354  0021                     GenerateEvt@Event:	
  4355                           ; 1 bytes @ 0x1
  4356                           
  4357  0021                     Adc_GetConvResult@AdcResult:	
  4358                           ; 1 bytes @ 0x1
  4359                           
  4360                           
  4361                           ; 2 bytes @ 0x1
  4362  0021                     	ds	1
  4363  0022                     I2c_InitI2cModule@I2cConfig:	
  4364  0022                     I2c_UpdateTxBuffer@DataBuffer:	
  4365                           ; 1 bytes @ 0x2
  4366                           
  4367  0022                     StringCopy@DestStr:	
  4368                           ; 1 bytes @ 0x2
  4369                           
  4370  0022                     Led_SetLedBlinkTime@OffTimeMs:	
  4371                           ; 1 bytes @ 0x2
  4372                           
  4373  0022                     ___wmul@multiplicand:	
  4374                           ; 2 bytes @ 0x2
  4375                           
  4376  0022                     ___lwdiv@dividend:	
  4377                           ; 2 bytes @ 0x2
  4378                           
  4379  0022                     ___lwmod@dividend:	
  4380                           ; 2 bytes @ 0x2
  4381                           
  4382                           
  4383                           ; 2 bytes @ 0x2
  4384  0022                     	ds	1
  4385  0023                     ?_GetDieTemperature:	
  4386  0023                     I2c_UpdateTxBuffer@Index:	
  4387                           ; 2 bytes @ 0x3
  4388                           
  4389  0023                     StringCopy@Len:	
  4390                           ; 1 bytes @ 0x3
  4391                           
  4392                           
  4393                           ; 1 bytes @ 0x3
  4394  0023                     	ds	1
  4395  0024                     ??_I2cSlv_I2cDrvHandle:	
  4396  0024                     ??_SetLedBehavSts:	
  4397                           ; 1 bytes @ 0x4
  4398                           
  4399  0024                     ??_StringCopy:	
  4400                           ; 1 bytes @ 0x4
  4401                           
  4402  0024                     ?___lmul:	
  4403                           ; 1 bytes @ 0x4
  4404                           
  4405  0024                     GenerateImpulse@Impulse:	
  4406                           ; 4 bytes @ 0x4
  4407                           
  4408  0024                     ___lwdiv@counter:	
  4409                           ; 1 bytes @ 0x4
  4410                           
  4411  0024                     ___lmul@multiplier:	
  4412                           ; 1 bytes @ 0x4
  4413                           
  4414  0024                     ___lldiv@dividend:	
  4415                           ; 4 bytes @ 0x4
  4416                           
  4417                           
  4418                           ; 4 bytes @ 0x4
  4419  0024                     	ds	1
  4420  0025                     SetLedBehavSts@LedBehav:	
  4421  0025                     GetDieTemperature@DieTempRes:	
  4422                           ; 1 bytes @ 0x5
  4423                           
  4424  0025                     ___lwdiv@quotient:	
  4425                           ; 2 bytes @ 0x5
  4426                           
  4427                           
  4428                           ; 2 bytes @ 0x5
  4429  0025                     	ds	2
  4430  0027                     ?_utoa:	
  4431  0027                     ??_LedBlinkStateMachine:	
  4432                           ; 1 bytes @ 0x7
  4433                           
  4434  0027                     ?_LedPulseStateMachine:	
  4435                           ; 1 bytes @ 0x7
  4436                           
  4437  0027                     LedPulseStateMachine@Led:	
  4438                           ; 1 bytes @ 0x7
  4439                           
  4440  0027                     utoa@val:	
  4441                           ; 1 bytes @ 0x7
  4442                           
  4443                           
  4444                           ; 2 bytes @ 0x7
  4445  0027                     	ds	1
  4446  0028                     ??_LedPulseStateMachine:	
  4447  0028                     ___lmul@multiplicand:	
  4448                           ; 1 bytes @ 0x8
  4449                           
  4450  0028                     ___lldiv@quotient:	
  4451                           ; 4 bytes @ 0x8
  4452                           
  4453                           
  4454                           ; 4 bytes @ 0x8
  4455  0028                     	ds	1
  4456  0029                     I2cSlv_I2cDrvHandle@Index:	
  4457  0029                     utoa@base:	
  4458                           ; 1 bytes @ 0x9
  4459                           
  4460                           
  4461                           ; 2 bytes @ 0x9
  4462  0029                     	ds	1
  4463  002A                     LedPulseStateMachine@LedPulse:	
  4464                           
  4465                           ; 1 bytes @ 0xA
  4466  002A                     	ds	1
  4467  002B                     ??_utoa:	
  4468  002B                     ?_LedStateMachine:	
  4469                           ; 1 bytes @ 0xB
  4470                           
  4471  002B                     LedStateMachine@LedSts:	
  4472                           ; 1 bytes @ 0xB
  4473                           
  4474                           
  4475                           ; 1 bytes @ 0xB
  4476  002B                     	ds	1
  4477  002C                     LedStateMachine@LedBlink:	
  4478  002C                     ___lldiv@counter:	
  4479                           ; 1 bytes @ 0xC
  4480                           
  4481  002C                     utoa@v:	
  4482                           ; 1 bytes @ 0xC
  4483                           
  4484  002C                     ___lmul@product:	
  4485                           ; 2 bytes @ 0xC
  4486                           
  4487                           
  4488                           ; 4 bytes @ 0xC
  4489  002C                     	ds	1
  4490  002D                     LedStateMachine@LedPulse:	
  4491                           
  4492                           ; 1 bytes @ 0xD
  4493  002D                     	ds	1
  4494  002E                     ??_LedStateMachine:	
  4495  002E                     utoa@c:	
  4496                           ; 1 bytes @ 0xE
  4497                           
  4498                           
  4499                           ; 1 bytes @ 0xE
  4500  002E                     	ds	1
  4501  002F                     utoa@buf:	
  4502                           
  4503                           ; 1 bytes @ 0xF
  4504  002F                     	ds	1
  4505  0030                     ?_Tmr_TmrBPrSet:	
  4506  0030                     ??_StdS_ManageStdServices:	
  4507                           ; 1 bytes @ 0x10
  4508                           
  4509  0030                     LedStateMachine@Led:	
  4510                           ; 1 bytes @ 0x10
  4511                           
  4512  0030                     Tmr_TmrBPrSet@IntFreqHz:	
  4513                           ; 1 bytes @ 0x10
  4514                           
  4515                           
  4516                           ; 2 bytes @ 0x10
  4517  0030                     	ds	1
  4518  0031                     LedStateMachine@LedOutSts:	
  4519                           
  4520                           ; 1 bytes @ 0x11
  4521  0031                     	ds	1
  4522  0032                     Tmr_TmrBPrSet@Prescaler:	
  4523  0032                     StdS_ManageStdServices@DieTempStr:	
  4524                           ; 1 bytes @ 0x12
  4525                           
  4526                           
  4527                           ; 4 bytes @ 0x12
  4528  0032                     	ds	1
  4529  0033                     Tmr_TmrBPrSet@Postscaler:	
  4530                           
  4531                           ; 1 bytes @ 0x13
  4532  0033                     	ds	1
  4533  0034                     ??_Tmr_TmrBPrSet:	
  4534                           
  4535                           ; 1 bytes @ 0x14
  4536  0034                     	ds	2
  4537  0036                     StdS_ManageStdServices@DieTemp:	
  4538                           
  4539                           ; 2 bytes @ 0x16
  4540  0036                     	ds	2
  4541  0038                     ??_ManageProtocol:	
  4542                           
  4543                           ; 1 bytes @ 0x18
  4544  0038                     	ds	3
  4545  003B                     ??_AppSm:	
  4546                           
  4547                           ; 1 bytes @ 0x1B
  4548  003B                     	ds	1
  4549  003C                     ?_I2cSlv_MainTask:	
  4550  003C                     ?_Wdg_MainTask:	
  4551                           ; 1 bytes @ 0x1C
  4552                           
  4553  003C                     ?_Led_MainTask:	
  4554                           ; 1 bytes @ 0x1C
  4555                           
  4556  003C                     ?_App_MainTask:	
  4557                           ; 1 bytes @ 0x1C
  4558                           
  4559  003C                     ?_I2c_DataReceiveSm:	
  4560                           ; 1 bytes @ 0x1C
  4561                           
  4562  003C                     I2c_DataReceiveSm@Options:	
  4563                           ; 1 bytes @ 0x1C
  4564                           
  4565  003C                     Tmr_TmrBPrSet@TmrNumb:	
  4566                           ; 1 bytes @ 0x1C
  4567                           
  4568  003C                     I2cSlv_MainTask@Options:	
  4569                           ; 1 bytes @ 0x1C
  4570                           
  4571  003C                     Led_MainTask@Options:	
  4572                           ; 1 bytes @ 0x1C
  4573                           
  4574  003C                     Wdg_MainTask@Options:	
  4575                           ; 1 bytes @ 0x1C
  4576                           
  4577  003C                     App_MainTask@Options:	
  4578                           ; 1 bytes @ 0x1C
  4579                           
  4580                           
  4581                           ; 1 bytes @ 0x1C
  4582  003C                     	ds	1
  4583  003D                     ??_Led_MainTask:	
  4584  003D                     ??_App_MainTask:	
  4585                           ; 1 bytes @ 0x1D
  4586                           
  4587  003D                     ??_I2c_DataReceiveSm:	
  4588                           ; 1 bytes @ 0x1D
  4589                           
  4590  003D                     Tmr_TmrBPrSet@TmrBPrCfgSts:	
  4591                           ; 1 bytes @ 0x1D
  4592                           
  4593                           
  4594                           ; 1 bytes @ 0x1D
  4595  003D                     	ds	1
  4596  003E                     Tmr_TmrBPrSet@Divisor:	
  4597  003E                     App_MainTask@AnalogChSel:	
  4598                           ; 4 bytes @ 0x1E
  4599                           
  4600                           
  4601                           ; 12 bytes @ 0x1E
  4602  003E                     	ds	4
  4603  0042                     ?_Tmr_TmrBConfig:	
  4604  0042                     Tmr_TmrBConfig@TmrBConfig:	
  4605                           ; 1 bytes @ 0x22
  4606                           
  4607                           
  4608                           ; 1 bytes @ 0x22
  4609  0042                     	ds	1
  4610  0043                     ??_Tmr_TmrBConfig:	
  4611                           
  4612                           ; 1 bytes @ 0x23
  4613  0043                     	ds	1
  4614  0044                     I2c_DataReceiveSm@Index:	
  4615  0044                     Tmr_TmrBConfig@TmrNumb:	
  4616                           ; 1 bytes @ 0x24
  4617                           
  4618                           
  4619                           ; 1 bytes @ 0x24
  4620  0044                     	ds	1
  4621  0045                     ??_InitSchTimer:	
  4622                           
  4623                           ; 1 bytes @ 0x25
  4624  0045                     	ds	1
  4625  0046                     InitSchTimer@TmrBConfig:	
  4626                           
  4627                           ; 6 bytes @ 0x26
  4628  0046                     	ds	4
  4629  004A                     App_MainTask@AdcConfig:	
  4630                           
  4631                           ; 6 bytes @ 0x2A
  4632  004A                     	ds	6
  4633  0050                     App_MainTask@WpuCh:	
  4634                           
  4635                           ; 18 bytes @ 0x30
  4636  0050                     	ds	18
  4637  0062                     InitializeTasks@ActiveTaskIndex:	
  4638  0062                     ScheduleTasks@ActiveTaskIndex:	
  4639                           ; 1 bytes @ 0x42
  4640                           
  4641                           
  4642                           ; 1 bytes @ 0x42
  4643  0062                     	ds	1
  4644                           
  4645                           	psect	maintext
  4646  1756                     __pmaintext:	
  4647 ;;
  4648 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  4649 ;;
  4650 ;; *************** function _main *****************
  4651 ;; Defined at:
  4652 ;;		line 57 in file "../../../Framework/MercuryFwk/Source/c/00_Main/main.c"
  4653 ;; Parameters:    Size  Location     Type
  4654 ;;		None
  4655 ;; Auto vars:     Size  Location     Type
  4656 ;;		None
  4657 ;; Return value:  Size  Location     Type
  4658 ;;                  2   12[None  ] short 
  4659 ;; Registers used:
  4660 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4661 ;; Tracked objects:
  4662 ;;		On entry : B1F/0
  4663 ;;		On exit  : 0/0
  4664 ;;		Unchanged: 0/0
  4665 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4666 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4667 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4668 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4669 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4670 ;;Total ram usage:        0 bytes
  4671 ;; Hardware stack levels required when called:   10
  4672 ;; This function calls:
  4673 ;;		_MainScheduler
  4674 ;;		_SystemInit
  4675 ;; This function is called by:
  4676 ;;		Startup code after reset
  4677 ;; This function uses a non-reentrant model
  4678 ;;
  4679                           
  4680                           
  4681                           ;psect for function _main
  4682  1756                     _main:	
  4683                           
  4684                           ;main.c: 60: SystemInit();
  4685                           
  4686                           ;incstack = 0
  4687                           ; Regs used in _main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  4688  1756  3197  277D  3197   	fcall	_SystemInit
  4689                           
  4690                           ;main.c: 63: MainScheduler();
  4691  1759  3188  2034         	fcall	_MainScheduler
  4692                           
  4693                           ;main.c: 66: return 0;
  4694                           ;	Return value of _main is never used
  4695  175B  3180  282B         	ljmp	start
  4696  175D                     __end_of_main:	
  4697                           
  4698                           	psect	text1
  4699  177D                     __ptext1:	
  4700 ;; *************** function _SystemInit *****************
  4701 ;; Defined at:
  4702 ;;		line 98 in file "../Source/c/04_App/sys_init.c"
  4703 ;; Parameters:    Size  Location     Type
  4704 ;;		None
  4705 ;; Auto vars:     Size  Location     Type
  4706 ;;		None
  4707 ;; Return value:  Size  Location     Type
  4708 ;;                  1    wreg      void 
  4709 ;; Registers used:
  4710 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4711 ;; Tracked objects:
  4712 ;;		On entry : 0/0
  4713 ;;		On exit  : 0/0
  4714 ;;		Unchanged: 0/0
  4715 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4716 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4717 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4718 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4719 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4720 ;;Total ram usage:        0 bytes
  4721 ;; Hardware stack levels used:    1
  4722 ;; Hardware stack levels required when called:    6
  4723 ;; This function calls:
  4724 ;;		_InitSchTimer
  4725 ;;		_Mcu_EnableInterrupts
  4726 ;;		_Mcu_InitIntOsc
  4727 ;; This function is called by:
  4728 ;;		_main
  4729 ;; This function uses a non-reentrant model
  4730 ;;
  4731                           
  4732                           
  4733                           ;psect for function _SystemInit
  4734  177D                     _SystemInit:	
  4735                           
  4736                           ;sys_init.c: 101: Mcu_InitIntOsc();
  4737                           
  4738                           ;incstack = 0
  4739                           ; Regs used in _SystemInit: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  4740  177D  3197  274F  3197   	fcall	_Mcu_InitIntOsc
  4741                           
  4742                           ;sys_init.c: 103: InitSchTimer();
  4743  1780  3188  20AE  3197   	fcall	_InitSchTimer
  4744                           
  4745                           ;sys_init.c: 105: Mcu_EnableInterrupts();
  4746  1783  3197  2742         	fcall	_Mcu_EnableInterrupts
  4747  1785  0008               	return
  4748  1786                     __end_of_SystemInit:	
  4749                           
  4750                           	psect	text2
  4751  174F                     __ptext2:	
  4752 ;; *************** function _Mcu_InitIntOsc *****************
  4753 ;; Defined at:
  4754 ;;		line 79 in file "../../../Framework/MercuryFwk/Source/c/01_Hal/02_Drv/mcu_drv.c"
  4755 ;; Parameters:    Size  Location     Type
  4756 ;;		None
  4757 ;; Auto vars:     Size  Location     Type
  4758 ;;		None
  4759 ;; Return value:  Size  Location     Type
  4760 ;;                  1    wreg      void 
  4761 ;; Registers used:
  4762 ;;		wreg, status,2, status,0
  4763 ;; Tracked objects:
  4764 ;;		On entry : 0/0
  4765 ;;		On exit  : 0/0
  4766 ;;		Unchanged: 0/0
  4767 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4768 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4769 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4770 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4771 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4772 ;;Total ram usage:        0 bytes
  4773 ;; Hardware stack levels used:    1
  4774 ;; Hardware stack levels required when called:    2
  4775 ;; This function calls:
  4776 ;;		Nothing
  4777 ;; This function is called by:
  4778 ;;		_SystemInit
  4779 ;; This function uses a non-reentrant model
  4780 ;;
  4781                           
  4782                           
  4783                           ;psect for function _Mcu_InitIntOsc
  4784  174F                     _Mcu_InitIntOsc:	
  4785                           
  4786                           ;mcu_drv.c: 82: OSCCONbits.SCS1 = ((UINT8)(1));
  4787                           
  4788                           ;incstack = 0
  4789                           ; Regs used in _Mcu_InitIntOsc: [wreg+status,2+status,0]
  4790  174F  0021               	movlb	1	; select bank1
  4791  1750  1499               	bsf	25,1	;volatile
  4792                           
  4793                           ;mcu_drv.c: 84: OSCCONbits.IRCF = 0b1111;
  4794  1751  3078               	movlw	120
  4795  1752  0499               	iorwf	25,f	;volatile
  4796  1753                     l242:	
  4797                           ;mcu_drv.c: 86: while (OSCSTATbits.HFIOFS == 0);
  4798                           
  4799  1753  181A               	btfsc	26,0	;volatile
  4800  1754  0008               	return
  4801  1755  2F53               	goto	l242
  4802  1756                     __end_of_Mcu_InitIntOsc:	
  4803                           
  4804                           	psect	text3
  4805  1742                     __ptext3:	
  4806 ;; *************** function _Mcu_EnableInterrupts *****************
  4807 ;; Defined at:
  4808 ;;		line 97 in file "../../../Framework/MercuryFwk/Source/c/01_Hal/02_Drv/mcu_drv.c"
  4809 ;; Parameters:    Size  Location     Type
  4810 ;;		None
  4811 ;; Auto vars:     Size  Location     Type
  4812 ;;		None
  4813 ;; Return value:  Size  Location     Type
  4814 ;;                  1    wreg      void 
  4815 ;; Registers used:
  4816 ;;		None
  4817 ;; Tracked objects:
  4818 ;;		On entry : 0/0
  4819 ;;		On exit  : 0/0
  4820 ;;		Unchanged: 0/0
  4821 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4822 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4823 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4824 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4825 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4826 ;;Total ram usage:        0 bytes
  4827 ;; Hardware stack levels used:    1
  4828 ;; Hardware stack levels required when called:    2
  4829 ;; This function calls:
  4830 ;;		Nothing
  4831 ;; This function is called by:
  4832 ;;		_SystemInit
  4833 ;; This function uses a non-reentrant model
  4834 ;;
  4835                           
  4836                           
  4837                           ;psect for function _Mcu_EnableInterrupts
  4838  1742                     _Mcu_EnableInterrupts:	
  4839                           
  4840                           ;mcu_drv.c: 100: INTCONbits.GIE = ((UINT8)(1));
  4841                           
  4842                           ;incstack = 0
  4843                           ; Regs used in _Mcu_EnableInterrupts: []
  4844  1742  178B               	bsf	11,7	;volatile
  4845                           
  4846                           ;mcu_drv.c: 101: INTCONbits.PEIE = ((UINT8)(1));
  4847  1743  170B               	bsf	11,6	;volatile
  4848  1744  0008               	return
  4849  1745                     __end_of_Mcu_EnableInterrupts:	
  4850                           
  4851                           	psect	text4
  4852  08AE                     __ptext4:	
  4853 ;; *************** function _InitSchTimer *****************
  4854 ;; Defined at:
  4855 ;;		line 71 in file "../Source/c/04_App/sys_init.c"
  4856 ;; Parameters:    Size  Location     Type
  4857 ;;		None
  4858 ;; Auto vars:     Size  Location     Type
  4859 ;;  TmrBConfig      6   38[BANK0 ] struct _TmrBConfigType
  4860 ;; Return value:  Size  Location     Type
  4861 ;;                  1    wreg      void 
  4862 ;; Registers used:
  4863 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4864 ;; Tracked objects:
  4865 ;;		On entry : 0/0
  4866 ;;		On exit  : 0/0
  4867 ;;		Unchanged: 0/0
  4868 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4869 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4870 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4871 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4872 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4873 ;;Total ram usage:        7 bytes
  4874 ;; Hardware stack levels used:    1
  4875 ;; Hardware stack levels required when called:    5
  4876 ;; This function calls:
  4877 ;;		_Tmr_TmrBConfig
  4878 ;; This function is called by:
  4879 ;;		_SystemInit
  4880 ;; This function uses a non-reentrant model
  4881 ;;
  4882                           
  4883                           
  4884                           ;psect for function _InitSchTimer
  4885  08AE                     _InitSchTimer:	
  4886                           
  4887                           ;sys_init.c: 73: TmrBConfigType TmrBConfig;
  4888                           ;sys_init.c: 76: TmrBConfig.PreScaler = 1;
  4889                           
  4890                           ;incstack = 0
  4891                           ; Regs used in _InitSchTimer: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  4892  08AE  0020               	movlb	0	; select bank0
  4893  08AF  01C6               	clrf	InitSchTimer@TmrBConfig
  4894  08B0  0AC6               	incf	InitSchTimer@TmrBConfig,f
  4895                           
  4896                           ;sys_init.c: 77: TmrBConfig.PostScaler = 8;
  4897  08B1  3008               	movlw	8
  4898  08B2  00C5               	movwf	??_InitSchTimer
  4899  08B3  0845               	movf	??_InitSchTimer,w
  4900  08B4  00C7               	movwf	InitSchTimer@TmrBConfig+1
  4901                           
  4902                           ;sys_init.c: 78: TmrBConfig.IntEnable = 1u;
  4903  08B5  01C8               	clrf	InitSchTimer@TmrBConfig+2
  4904  08B6  0AC8               	incf	InitSchTimer@TmrBConfig+2,f
  4905                           
  4906                           ;sys_init.c: 79: TmrBConfig.IntFreqHz = 10000;
  4907  08B7  3010               	movlw	16
  4908  08B8  00C9               	movwf	InitSchTimer@TmrBConfig+3
  4909  08B9  3027               	movlw	39
  4910  08BA  00CA               	movwf	InitSchTimer@TmrBConfig+4
  4911                           
  4912                           ;sys_init.c: 80: TmrBConfig.StartTmrRequest = StartTmrReq;
  4913  08BB  01CB               	clrf	InitSchTimer@TmrBConfig+5
  4914  08BC  0ACB               	incf	InitSchTimer@TmrBConfig+5,f
  4915                           
  4916                           ;sys_init.c: 83: Tmr_TmrBConfig(((UINT8)(2)),&TmrBConfig);
  4917  08BD  3046               	movlw	(low (InitSchTimer@TmrBConfig| 0))& (0+255)
  4918  08BE  00C5               	movwf	??_InitSchTimer
  4919  08BF  0845               	movf	??_InitSchTimer,w
  4920  08C0  00C2               	movwf	Tmr_TmrBConfig@TmrBConfig
  4921  08C1  3002               	movlw	2
  4922  08C2  3187  27B4         	fcall	_Tmr_TmrBConfig
  4923  08C4  0008               	return
  4924  08C5                     __end_of_InitSchTimer:	
  4925                           
  4926                           	psect	text5
  4927  07B4                     __ptext5:	
  4928 ;; *************** function _Tmr_TmrBConfig *****************
  4929 ;; Defined at:
  4930 ;;		line 313 in file "../../../Framework/MercuryFwk/Source/c/01_Hal/02_Drv/tmr_drv.c"
  4931 ;; Parameters:    Size  Location     Type
  4932 ;;  TmrNumb         1    wreg     unsigned char 
  4933 ;;  TmrBConfig      1   34[BANK0 ] PTR struct _TmrBConfigTy
  4934 ;;		 -> InitSchTimer@TmrBConfig(6), 
  4935 ;; Auto vars:     Size  Location     Type
  4936 ;;  TmrNumb         1   36[BANK0 ] unsigned char 
  4937 ;; Return value:  Size  Location     Type
  4938 ;;                  1    wreg      void 
  4939 ;; Registers used:
  4940 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4941 ;; Tracked objects:
  4942 ;;		On entry : 0/0
  4943 ;;		On exit  : 0/0
  4944 ;;		Unchanged: 0/0
  4945 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4946 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4947 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4948 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4949 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4950 ;;Total ram usage:        3 bytes
  4951 ;; Hardware stack levels used:    1
  4952 ;; Hardware stack levels required when called:    4
  4953 ;; This function calls:
  4954 ;;		_TmrBInit
  4955 ;;		_Tmr_StartTmr
  4956 ;;		_Tmr_TmrBIrqSet
  4957 ;;		_Tmr_TmrBPrSet
  4958 ;; This function is called by:
  4959 ;;		_InitSchTimer
  4960 ;; This function uses a non-reentrant model
  4961 ;;
  4962                           
  4963                           
  4964                           ;psect for function _Tmr_TmrBConfig
  4965  07B4                     _Tmr_TmrBConfig:	
  4966                           
  4967                           ;incstack = 0
  4968                           ; Regs used in _Tmr_TmrBConfig: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  4969                           ;Tmr_TmrBConfig@TmrNumb stored from wreg
  4970  07B4  0020               	movlb	0	; select bank0
  4971  07B5  00C4               	movwf	Tmr_TmrBConfig@TmrNumb
  4972                           
  4973                           ;tmr_drv.c: 316: TmrBInit(TmrNumb,TmrBConfig->PreScaler,TmrBConfig->PostScaler);
  4974  07B6  0842               	movf	Tmr_TmrBConfig@TmrBConfig,w
  4975  07B7  0086               	movwf	6
  4976  07B8  0187               	clrf	7
  4977  07B9  0801               	movf	1,w
  4978  07BA  00C3               	movwf	??_Tmr_TmrBConfig
  4979  07BB  0843               	movf	??_Tmr_TmrBConfig,w
  4980  07BC  00F4               	movwf	TmrBInit@Prescaler
  4981  07BD  0842               	movf	Tmr_TmrBConfig@TmrBConfig,w
  4982  07BE  0086               	movwf	6
  4983  07BF  0187               	clrf	7
  4984  07C0  3F41               	moviw [1]fsr1
  4985  07C1  00F5               	movwf	TmrBInit@Postscaler
  4986  07C2  0844               	movf	Tmr_TmrBConfig@TmrNumb,w
  4987  07C3  318E  26F7  3187   	fcall	_TmrBInit
  4988                           
  4989                           ;tmr_drv.c: 318: if (TmrBConfig->IntEnable == EnableInt)
  4990  07C6  0020               	movlb	0	; select bank0
  4991  07C7  0842               	movf	Tmr_TmrBConfig@TmrBConfig,w
  4992  07C8  3E02               	addlw	2
  4993  07C9  0086               	movwf	6
  4994  07CA  0187               	clrf	7
  4995  07CB  0301               	decf	1,w
  4996  07CC  1D03               	btfss	3,2
  4997  07CD  2FD1               	goto	l4683
  4998                           
  4999                           ;tmr_drv.c: 319: {
  5000                           ;tmr_drv.c: 321: Tmr_TmrBIrqSet(TmrNumb,((UINT8)(1)));
  5001  07CE  01F4               	clrf	Tmr_TmrBIrqSet@TmrIrqSts
  5002  07CF  0AF4               	incf	Tmr_TmrBIrqSet@TmrIrqSts,f
  5003  07D0  2FD3               	goto	L1
  5004  07D1                     l4683:	
  5005                           ;tmr_drv.c: 322: }
  5006                           
  5007                           
  5008                           ;tmr_drv.c: 323: else
  5009                           ;tmr_drv.c: 324: {
  5010                           ;tmr_drv.c: 326: Tmr_TmrBIrqSet(TmrNumb,((UINT8)(0)));
  5011  07D1  01F4               	clrf	Tmr_TmrBIrqSet@TmrIrqSts
  5012  07D2  0020               	movlb	0	; select bank0
  5013  07D3                     L1:	
  5014  07D3  0844               	movf	Tmr_TmrBConfig@TmrNumb,w
  5015  07D4  3189  21DF  3187   	fcall	_Tmr_TmrBIrqSet
  5016                           
  5017                           ;tmr_drv.c: 327: }
  5018                           ;tmr_drv.c: 329: if (Tmr_TmrBPrSet(TmrNumb,TmrBConfig->IntFreqHz,TmrBConfig->PreScaler,T
      +                          mrBConfig->PostScaler) == CfgError)
  5019  07D7  0020               	movlb	0	; select bank0
  5020  07D8  0842               	movf	Tmr_TmrBConfig@TmrBConfig,w
  5021  07D9  3E03               	addlw	3
  5022  07DA  0086               	movwf	6
  5023  07DB  0187               	clrf	7
  5024  07DC  3F40               	moviw [0]fsr1
  5025  07DD  00B0               	movwf	Tmr_TmrBPrSet@IntFreqHz
  5026  07DE  3F41               	moviw [1]fsr1
  5027  07DF  00B1               	movwf	Tmr_TmrBPrSet@IntFreqHz+1
  5028  07E0  0842               	movf	Tmr_TmrBConfig@TmrBConfig,w
  5029  07E1  0086               	movwf	6
  5030  07E2  0187               	clrf	7
  5031  07E3  0801               	movf	1,w
  5032  07E4  00C3               	movwf	??_Tmr_TmrBConfig
  5033  07E5  0843               	movf	??_Tmr_TmrBConfig,w
  5034  07E6  00B2               	movwf	Tmr_TmrBPrSet@Prescaler
  5035  07E7  0842               	movf	Tmr_TmrBConfig@TmrBConfig,w
  5036  07E8  0086               	movwf	6
  5037  07E9  0187               	clrf	7
  5038  07EA  3F41               	moviw [1]fsr1
  5039  07EB  00B3               	movwf	Tmr_TmrBPrSet@Postscaler
  5040  07EC  0844               	movf	Tmr_TmrBConfig@TmrNumb,w
  5041  07ED  3185  2508  3187   	fcall	_Tmr_TmrBPrSet
  5042  07F0  3A01               	xorlw	1
  5043  07F1  1903               	btfsc	3,2
  5044  07F2                     l373:	
  5045                           ;tmr_drv.c: 330: {
  5046                           ;tmr_drv.c: 332: while(1);
  5047                           
  5048  07F2  2FF2               	goto	l373
  5049                           
  5050                           ;tmr_drv.c: 333: }
  5051                           ;tmr_drv.c: 335: if (TmrBConfig->StartTmrRequest == StartTmrReq)
  5052  07F3  0020               	movlb	0	; select bank0
  5053  07F4  0842               	movf	Tmr_TmrBConfig@TmrBConfig,w
  5054  07F5  3E05               	addlw	5
  5055  07F6  0086               	movwf	6
  5056  07F7  0187               	clrf	7
  5057  07F8  0301               	decf	1,w
  5058  07F9  1D03               	btfss	3,2
  5059  07FA  0008               	return
  5060                           
  5061                           ;tmr_drv.c: 336: {
  5062                           ;tmr_drv.c: 338: Tmr_StartTmr(TmrNumb);
  5063  07FB  0844               	movf	Tmr_TmrBConfig@TmrNumb,w
  5064  07FC  3188  2097         	fcall	_Tmr_StartTmr
  5065                           
  5066                           ;tmr_drv.c: 339: }
  5067  07FE  0008               	return
  5068  07FF                     __end_of_Tmr_TmrBConfig:	
  5069                           ;tmr_drv.c: 340: else
  5070                           ;tmr_drv.c: 341: {
  5071                           
  5072                           
  5073                           	psect	text6
  5074  0508                     __ptext6:	
  5075 ;; *************** function _Tmr_TmrBPrSet *****************
  5076 ;; Defined at:
  5077 ;;		line 225 in file "../../../Framework/MercuryFwk/Source/c/01_Hal/02_Drv/tmr_drv.c"
  5078 ;; Parameters:    Size  Location     Type
  5079 ;;  TmrNumb         1    wreg     unsigned char 
  5080 ;;  IntFreqHz       2   16[BANK0 ] unsigned short 
  5081 ;;  Prescaler       1   18[BANK0 ] unsigned char 
  5082 ;;  Postscaler      1   19[BANK0 ] unsigned char 
  5083 ;; Auto vars:     Size  Location     Type
  5084 ;;  TmrNumb         1   28[BANK0 ] unsigned char 
  5085 ;;  Divisor         4   30[BANK0 ] unsigned long 
  5086 ;;  TmrBPrCfgSts    1   29[BANK0 ] enum E3647
  5087 ;; Return value:  Size  Location     Type
  5088 ;;                  1    wreg      enum E3647
  5089 ;; Registers used:
  5090 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  5091 ;; Tracked objects:
  5092 ;;		On entry : 0/0
  5093 ;;		On exit  : 0/0
  5094 ;;		Unchanged: 0/0
  5095 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5096 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5097 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5098 ;;      Temps:          0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5099 ;;      Totals:         0      18       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5100 ;;Total ram usage:       18 bytes
  5101 ;; Hardware stack levels used:    1
  5102 ;; Hardware stack levels required when called:    3
  5103 ;; This function calls:
  5104 ;;		___lldiv
  5105 ;;		___lmul
  5106 ;;		___wmul
  5107 ;; This function is called by:
  5108 ;;		_Tmr_TmrBConfig
  5109 ;; This function uses a non-reentrant model
  5110 ;;
  5111                           
  5112                           
  5113                           ;psect for function _Tmr_TmrBPrSet
  5114  0508                     _Tmr_TmrBPrSet:	
  5115                           
  5116                           ;incstack = 0
  5117                           ; Regs used in _Tmr_TmrBPrSet: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  5118                           ;Tmr_TmrBPrSet@TmrNumb stored from wreg
  5119  0508  0020               	movlb	0	; select bank0
  5120  0509  00BC               	movwf	Tmr_TmrBPrSet@TmrNumb
  5121                           
  5122                           ;tmr_drv.c: 227: CfgStsType TmrBPrCfgSts;
  5123                           ;tmr_drv.c: 228: UINT32 Divisor = 0;
  5124  050A  3000               	movlw	0
  5125  050B  00C1               	movwf	Tmr_TmrBPrSet@Divisor+3
  5126  050C  3000               	movlw	0
  5127  050D  00C0               	movwf	Tmr_TmrBPrSet@Divisor+2
  5128  050E  3000               	movlw	0
  5129  050F  00BF               	movwf	Tmr_TmrBPrSet@Divisor+1
  5130  0510  3000               	movlw	0
  5131  0511  00BE               	movwf	Tmr_TmrBPrSet@Divisor
  5132                           
  5133                           ;tmr_drv.c: 231: Divisor = (UINT32)Prescaler*(UINT32)Postscaler*(UINT32)IntFreqHz;
  5134  0512  0833               	movf	Tmr_TmrBPrSet@Postscaler,w
  5135  0513  00B4               	movwf	??_Tmr_TmrBPrSet
  5136  0514  01B5               	clrf	??_Tmr_TmrBPrSet+1
  5137  0515  0834               	movf	??_Tmr_TmrBPrSet,w
  5138  0516  00A2               	movwf	___wmul@multiplicand
  5139  0517  0835               	movf	??_Tmr_TmrBPrSet+1,w
  5140  0518  00A3               	movwf	___wmul@multiplicand+1
  5141  0519  0832               	movf	Tmr_TmrBPrSet@Prescaler,w
  5142  051A  00B6               	movwf	??_Tmr_TmrBPrSet+2
  5143  051B  01B7               	clrf	??_Tmr_TmrBPrSet+3
  5144  051C  0836               	movf	??_Tmr_TmrBPrSet+2,w
  5145  051D  00A0               	movwf	___wmul@multiplier
  5146  051E  0837               	movf	??_Tmr_TmrBPrSet+3,w
  5147  051F  00A1               	movwf	___wmul@multiplier+1
  5148  0520  3188  20F7  3185   	fcall	___wmul
  5149  0523  0020               	movlb	0	; select bank0
  5150  0524  0820               	movf	?___wmul,w
  5151  0525  00B8               	movwf	??_Tmr_TmrBPrSet+4
  5152  0526  0821               	movf	?___wmul+1,w
  5153  0527  00B9               	movwf	??_Tmr_TmrBPrSet+5
  5154  0528  01BA               	clrf	??_Tmr_TmrBPrSet+6
  5155  0529  01BB               	clrf	??_Tmr_TmrBPrSet+7
  5156  052A  083B               	movf	??_Tmr_TmrBPrSet+7,w
  5157  052B  00A7               	movwf	___lmul@multiplier+3
  5158  052C  083A               	movf	??_Tmr_TmrBPrSet+6,w
  5159  052D  00A6               	movwf	___lmul@multiplier+2
  5160  052E  0839               	movf	??_Tmr_TmrBPrSet+5,w
  5161  052F  00A5               	movwf	___lmul@multiplier+1
  5162  0530  0838               	movf	??_Tmr_TmrBPrSet+4,w
  5163  0531  00A4               	movwf	___lmul@multiplier
  5164  0532  0830               	movf	Tmr_TmrBPrSet@IntFreqHz,w
  5165  0533  00A8               	movwf	___lmul@multiplicand
  5166  0534  0831               	movf	Tmr_TmrBPrSet@IntFreqHz+1,w
  5167  0535  00A9               	movwf	___lmul@multiplicand+1
  5168  0536  01AA               	clrf	___lmul@multiplicand+2
  5169  0537  01AB               	clrf	___lmul@multiplicand+3
  5170  0538  318A  228D  3185   	fcall	___lmul
  5171  053B  0020               	movlb	0	; select bank0
  5172  053C  0827               	movf	?___lmul+3,w
  5173  053D  00C1               	movwf	Tmr_TmrBPrSet@Divisor+3
  5174  053E  0826               	movf	?___lmul+2,w
  5175  053F  00C0               	movwf	Tmr_TmrBPrSet@Divisor+2
  5176  0540  0825               	movf	?___lmul+1,w
  5177  0541  00BF               	movwf	Tmr_TmrBPrSet@Divisor+1
  5178  0542  0824               	movf	?___lmul,w
  5179  0543  00BE               	movwf	Tmr_TmrBPrSet@Divisor
  5180                           
  5181                           ;tmr_drv.c: 234: if (((((UINT32)(16000000))/4)/Divisor) <= 255)
  5182  0544  0841               	movf	Tmr_TmrBPrSet@Divisor+3,w
  5183  0545  00A3               	movwf	___lldiv@divisor+3
  5184  0546  0840               	movf	Tmr_TmrBPrSet@Divisor+2,w
  5185  0547  00A2               	movwf	___lldiv@divisor+2
  5186  0548  083F               	movf	Tmr_TmrBPrSet@Divisor+1,w
  5187  0549  00A1               	movwf	___lldiv@divisor+1
  5188  054A  083E               	movf	Tmr_TmrBPrSet@Divisor,w
  5189  054B  00A0               	movwf	___lldiv@divisor
  5190  054C  3000               	movlw	0
  5191  054D  00A7               	movwf	___lldiv@dividend+3
  5192  054E  303D               	movlw	61
  5193  054F  00A6               	movwf	___lldiv@dividend+2
  5194  0550  3009               	movlw	9
  5195  0551  00A5               	movwf	___lldiv@dividend+1
  5196  0552  3000               	movlw	0
  5197  0553  00A4               	movwf	___lldiv@dividend
  5198  0554  318C  24F0  3185   	fcall	___lldiv
  5199  0557  0020               	movlb	0	; select bank0
  5200  0558  0823               	movf	?___lldiv+3,w
  5201  0559  1D03               	btfss	3,2
  5202  055A  2DBA               	goto	l349
  5203  055B  0822               	movf	?___lldiv+2,w
  5204  055C  1D03               	btfss	3,2
  5205  055D  2DBA               	goto	l349
  5206  055E  3001               	movlw	1
  5207  055F  0221               	subwf	?___lldiv+1,w
  5208  0560  1C03               	btfss	3,0
  5209  0561  2DAB               	goto	l4433
  5210  0562  2DBA               	goto	l349
  5211  0563                     l4425:	
  5212                           ;tmr_drv.c: 238: {
  5213                           ;tmr_drv.c: 239: case ((UINT8)(2)):
  5214                           
  5215                           ;tmr_drv.c: 235: {
  5216                           ;tmr_drv.c: 237: switch (TmrNumb)
  5217                           
  5218                           
  5219                           ;tmr_drv.c: 241: PR2 = (((UINT32)(16000000))/4)/Divisor;
  5220  0563  0841               	movf	Tmr_TmrBPrSet@Divisor+3,w
  5221  0564  00A3               	movwf	___lldiv@divisor+3
  5222  0565  0840               	movf	Tmr_TmrBPrSet@Divisor+2,w
  5223  0566  00A2               	movwf	___lldiv@divisor+2
  5224  0567  083F               	movf	Tmr_TmrBPrSet@Divisor+1,w
  5225  0568  00A1               	movwf	___lldiv@divisor+1
  5226  0569  083E               	movf	Tmr_TmrBPrSet@Divisor,w
  5227  056A  00A0               	movwf	___lldiv@divisor
  5228  056B  3000               	movlw	0
  5229  056C  00A7               	movwf	___lldiv@dividend+3
  5230  056D  303D               	movlw	61
  5231  056E  00A6               	movwf	___lldiv@dividend+2
  5232  056F  3009               	movlw	9
  5233  0570  00A5               	movwf	___lldiv@dividend+1
  5234  0571  3000               	movlw	0
  5235  0572  00A4               	movwf	___lldiv@dividend
  5236  0573  318C  24F0  3185   	fcall	___lldiv
  5237  0576  0020               	movlb	0	; select bank0
  5238  0577  0820               	movf	?___lldiv,w
  5239  0578  009B               	movwf	27	;volatile
  5240                           
  5241                           ;tmr_drv.c: 242: break;
  5242  0579  2DB7               	goto	l4435
  5243  057A                     l4427:	
  5244                           ;tmr_drv.c: 244: case ((UINT8)(4)):
  5245                           
  5246                           
  5247                           ;tmr_drv.c: 246: PR4 = (((UINT32)(16000000))/4)/Divisor;
  5248  057A  0841               	movf	Tmr_TmrBPrSet@Divisor+3,w
  5249  057B  00A3               	movwf	___lldiv@divisor+3
  5250  057C  0840               	movf	Tmr_TmrBPrSet@Divisor+2,w
  5251  057D  00A2               	movwf	___lldiv@divisor+2
  5252  057E  083F               	movf	Tmr_TmrBPrSet@Divisor+1,w
  5253  057F  00A1               	movwf	___lldiv@divisor+1
  5254  0580  083E               	movf	Tmr_TmrBPrSet@Divisor,w
  5255  0581  00A0               	movwf	___lldiv@divisor
  5256  0582  3000               	movlw	0
  5257  0583  00A7               	movwf	___lldiv@dividend+3
  5258  0584  303D               	movlw	61
  5259  0585  00A6               	movwf	___lldiv@dividend+2
  5260  0586  3009               	movlw	9
  5261  0587  00A5               	movwf	___lldiv@dividend+1
  5262  0588  3000               	movlw	0
  5263  0589  00A4               	movwf	___lldiv@dividend
  5264  058A  318C  24F0  3185   	fcall	___lldiv
  5265  058D  0020               	movlb	0	; select bank0
  5266  058E  0820               	movf	?___lldiv,w
  5267  058F  0028               	movlb	8	; select bank8
  5268  0590  0096               	movwf	22	;volatile
  5269                           
  5270                           ;tmr_drv.c: 247: break;
  5271  0591  2DB7               	goto	l4435
  5272  0592                     l4429:	
  5273                           ;tmr_drv.c: 249: case ((UINT8)(6)):
  5274                           
  5275                           
  5276                           ;tmr_drv.c: 251: PR6 = (((UINT32)(16000000))/4)/Divisor;
  5277  0592  0020               	movlb	0	; select bank0
  5278  0593  0841               	movf	Tmr_TmrBPrSet@Divisor+3,w
  5279  0594  00A3               	movwf	___lldiv@divisor+3
  5280  0595  0840               	movf	Tmr_TmrBPrSet@Divisor+2,w
  5281  0596  00A2               	movwf	___lldiv@divisor+2
  5282  0597  083F               	movf	Tmr_TmrBPrSet@Divisor+1,w
  5283  0598  00A1               	movwf	___lldiv@divisor+1
  5284  0599  083E               	movf	Tmr_TmrBPrSet@Divisor,w
  5285  059A  00A0               	movwf	___lldiv@divisor
  5286  059B  3000               	movlw	0
  5287  059C  00A7               	movwf	___lldiv@dividend+3
  5288  059D  303D               	movlw	61
  5289  059E  00A6               	movwf	___lldiv@dividend+2
  5290  059F  3009               	movlw	9
  5291  05A0  00A5               	movwf	___lldiv@dividend+1
  5292  05A1  3000               	movlw	0
  5293  05A2  00A4               	movwf	___lldiv@dividend
  5294  05A3  318C  24F0  3185   	fcall	___lldiv
  5295  05A6  0020               	movlb	0	; select bank0
  5296  05A7  0820               	movf	?___lldiv,w
  5297  05A8  0028               	movlb	8	; select bank8
  5298  05A9  009D               	movwf	29	;volatile
  5299                           
  5300                           ;tmr_drv.c: 256: }
  5301                           
  5302                           ;tmr_drv.c: 255: break;
  5303                           
  5304                           ;tmr_drv.c: 254: default:
  5305                           
  5306                           ;tmr_drv.c: 252: break;
  5307  05AA  2DB7               	goto	l4435
  5308  05AB                     l4433:	
  5309  05AB  0020               	movlb	0	; select bank0
  5310  05AC  083C               	movf	Tmr_TmrBPrSet@TmrNumb,w
  5311                           
  5312                           ; Switch size 1, requested type "space"
  5313                           ; Number of cases is 3, Range of values is 2 to 6
  5314                           ; switch strategies available:
  5315                           ; Name         Instructions Cycles
  5316                           ; simple_byte           10     6 (average)
  5317                           ; direct_byte           19     9 (fixed)
  5318                           ; jumptable            263     9 (fixed)
  5319                           ;	Chosen strategy is simple_byte
  5320  05AD  3A02               	xorlw	2	; case 2
  5321  05AE  1903               	skipnz
  5322  05AF  2D63               	goto	l4425
  5323  05B0  3A06               	xorlw	6	; case 4
  5324  05B1  1903               	skipnz
  5325  05B2  2D7A               	goto	l4427
  5326  05B3  3A02               	xorlw	2	; case 6
  5327  05B4  1903               	skipnz
  5328  05B5  2D92               	goto	l4429
  5329  05B6  2DB7               	goto	l4435
  5330  05B7                     l4435:	
  5331                           
  5332                           ;tmr_drv.c: 259: TmrBPrCfgSts = CfgOk;
  5333  05B7  0020               	movlb	0	; select bank0
  5334  05B8  01BD               	clrf	Tmr_TmrBPrSet@TmrBPrCfgSts
  5335                           
  5336                           ;tmr_drv.c: 260: }
  5337  05B9  2DBC               	goto	l4437
  5338  05BA                     l349:	
  5339                           
  5340                           ;tmr_drv.c: 261: else
  5341                           ;tmr_drv.c: 262: {
  5342                           ;tmr_drv.c: 264: TmrBPrCfgSts = CfgError;
  5343  05BA  01BD               	clrf	Tmr_TmrBPrSet@TmrBPrCfgSts
  5344  05BB  0ABD               	incf	Tmr_TmrBPrSet@TmrBPrCfgSts,f
  5345  05BC                     l4437:	
  5346                           
  5347                           ;tmr_drv.c: 265: }
  5348                           ;tmr_drv.c: 268: return TmrBPrCfgSts;
  5349  05BC  083D               	movf	Tmr_TmrBPrSet@TmrBPrCfgSts,w
  5350  05BD  0008               	return
  5351  05BE                     __end_of_Tmr_TmrBPrSet:	
  5352                           
  5353                           	psect	text7
  5354  08F7                     __ptext7:	
  5355 ;; *************** function ___wmul *****************
  5356 ;; Defined at:
  5357 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\Umul16.c"
  5358 ;; Parameters:    Size  Location     Type
  5359 ;;  multiplier      2    0[BANK0 ] unsigned int 
  5360 ;;  multiplicand    2    2[BANK0 ] unsigned int 
  5361 ;; Auto vars:     Size  Location     Type
  5362 ;;  product         2    4[COMMON] unsigned int 
  5363 ;; Return value:  Size  Location     Type
  5364 ;;                  2    0[BANK0 ] unsigned int 
  5365 ;; Registers used:
  5366 ;;		wreg, status,2, status,0
  5367 ;; Tracked objects:
  5368 ;;		On entry : 0/0
  5369 ;;		On exit  : 0/0
  5370 ;;		Unchanged: 0/0
  5371 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5372 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5373 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5374 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5375 ;;      Totals:         2       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5376 ;;Total ram usage:        6 bytes
  5377 ;; Hardware stack levels used:    1
  5378 ;; Hardware stack levels required when called:    2
  5379 ;; This function calls:
  5380 ;;		Nothing
  5381 ;; This function is called by:
  5382 ;;		_Tmr_TmrBPrSet
  5383 ;; This function uses a non-reentrant model
  5384 ;;
  5385                           
  5386                           
  5387                           ;psect for function ___wmul
  5388  08F7                     ___wmul:	
  5389                           
  5390                           ;incstack = 0
  5391                           ; Regs used in ___wmul: [wreg+status,2+status,0]
  5392  08F7  01F4               	clrf	___wmul@product
  5393  08F8  01F5               	clrf	___wmul@product+1
  5394  08F9                     l4345:	
  5395  08F9  0020               	movlb	0	; select bank0
  5396  08FA  1C20               	btfss	___wmul@multiplier,0
  5397  08FB  2900               	goto	l1110
  5398  08FC  0822               	movf	___wmul@multiplicand,w
  5399  08FD  07F4               	addwf	___wmul@product,f
  5400  08FE  0823               	movf	___wmul@multiplicand+1,w
  5401  08FF  3DF5               	addwfc	___wmul@product+1,f
  5402  0900                     l1110:	
  5403  0900  3001               	movlw	1
  5404  0901                     u3145:	
  5405  0901  35A2               	lslf	___wmul@multiplicand,f
  5406  0902  0DA3               	rlf	___wmul@multiplicand+1,f
  5407  0903  0B89               	decfsz	9,f
  5408  0904  2901               	goto	u3145
  5409  0905  3001               	movlw	1
  5410  0906                     u3155:	
  5411  0906  36A1               	lsrf	___wmul@multiplier+1,f
  5412  0907  0CA0               	rrf	___wmul@multiplier,f
  5413  0908  0B89               	decfsz	9,f
  5414  0909  2906               	goto	u3155
  5415  090A  0820               	movf	___wmul@multiplier,w
  5416  090B  0421               	iorwf	___wmul@multiplier+1,w
  5417  090C  1D03               	btfss	3,2
  5418  090D  28F9               	goto	l4345
  5419  090E  0875               	movf	___wmul@product+1,w
  5420  090F  00A1               	movwf	?___wmul+1
  5421  0910  0874               	movf	___wmul@product,w
  5422  0911  00A0               	movwf	?___wmul
  5423  0912  0008               	return
  5424  0913                     __end_of___wmul:	
  5425                           
  5426                           	psect	text8
  5427  0A8D                     __ptext8:	
  5428 ;; *************** function ___lmul *****************
  5429 ;; Defined at:
  5430 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\Umul32.c"
  5431 ;; Parameters:    Size  Location     Type
  5432 ;;  multiplier      4    4[BANK0 ] unsigned long 
  5433 ;;  multiplicand    4    8[BANK0 ] unsigned long 
  5434 ;; Auto vars:     Size  Location     Type
  5435 ;;  product         4   12[BANK0 ] unsigned long 
  5436 ;; Return value:  Size  Location     Type
  5437 ;;                  4    4[BANK0 ] unsigned long 
  5438 ;; Registers used:
  5439 ;;		wreg, status,2, status,0
  5440 ;; Tracked objects:
  5441 ;;		On entry : 0/0
  5442 ;;		On exit  : 0/0
  5443 ;;		Unchanged: 0/0
  5444 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5445 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5446 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5447 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5448 ;;      Totals:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5449 ;;Total ram usage:       12 bytes
  5450 ;; Hardware stack levels used:    1
  5451 ;; Hardware stack levels required when called:    2
  5452 ;; This function calls:
  5453 ;;		Nothing
  5454 ;; This function is called by:
  5455 ;;		_Tmr_TmrBPrSet
  5456 ;; This function uses a non-reentrant model
  5457 ;;
  5458                           
  5459                           
  5460                           ;psect for function ___lmul
  5461  0A8D                     ___lmul:	
  5462                           
  5463                           ;incstack = 0
  5464                           ; Regs used in ___lmul: [wreg+status,2+status,0]
  5465  0A8D  3000               	movlw	0
  5466  0A8E  0020               	movlb	0	; select bank0
  5467  0A8F  00AF               	movwf	___lmul@product+3
  5468  0A90  3000               	movlw	0
  5469  0A91  00AE               	movwf	___lmul@product+2
  5470  0A92  3000               	movlw	0
  5471  0A93  00AD               	movwf	___lmul@product+1
  5472  0A94  3000               	movlw	0
  5473  0A95  00AC               	movwf	___lmul@product
  5474  0A96                     l3209:	
  5475  0A96  1C24               	btfss	___lmul@multiplier,0
  5476  0A97  2AA0               	goto	l3213
  5477  0A98  0828               	movf	___lmul@multiplicand,w
  5478  0A99  07AC               	addwf	___lmul@product,f
  5479  0A9A  0829               	movf	___lmul@multiplicand+1,w
  5480  0A9B  3DAD               	addwfc	___lmul@product+1,f
  5481  0A9C  082A               	movf	___lmul@multiplicand+2,w
  5482  0A9D  3DAE               	addwfc	___lmul@product+2,f
  5483  0A9E  082B               	movf	___lmul@multiplicand+3,w
  5484  0A9F  3DAF               	addwfc	___lmul@product+3,f
  5485  0AA0                     l3213:	
  5486  0AA0  3001               	movlw	1
  5487  0AA1                     u1895:	
  5488  0AA1  35A8               	lslf	___lmul@multiplicand,f
  5489  0AA2  0DA9               	rlf	___lmul@multiplicand+1,f
  5490  0AA3  0DAA               	rlf	___lmul@multiplicand+2,f
  5491  0AA4  0DAB               	rlf	___lmul@multiplicand+3,f
  5492  0AA5  0B89               	decfsz	9,f
  5493  0AA6  2AA1               	goto	u1895
  5494  0AA7  3001               	movlw	1
  5495  0AA8                     u1905:	
  5496  0AA8  36A7               	lsrf	___lmul@multiplier+3,f
  5497  0AA9  0CA6               	rrf	___lmul@multiplier+2,f
  5498  0AAA  0CA5               	rrf	___lmul@multiplier+1,f
  5499  0AAB  0CA4               	rrf	___lmul@multiplier,f
  5500  0AAC  0B89               	decfsz	9,f
  5501  0AAD  2AA8               	goto	u1905
  5502  0AAE  0827               	movf	___lmul@multiplier+3,w
  5503  0AAF  0426               	iorwf	___lmul@multiplier+2,w
  5504  0AB0  0425               	iorwf	___lmul@multiplier+1,w
  5505  0AB1  0424               	iorwf	___lmul@multiplier,w
  5506  0AB2  1D03               	skipz
  5507  0AB3  2A96               	goto	l3209
  5508  0AB4  082F               	movf	___lmul@product+3,w
  5509  0AB5  00A7               	movwf	?___lmul+3
  5510  0AB6  082E               	movf	___lmul@product+2,w
  5511  0AB7  00A6               	movwf	?___lmul+2
  5512  0AB8  082D               	movf	___lmul@product+1,w
  5513  0AB9  00A5               	movwf	?___lmul+1
  5514  0ABA  082C               	movf	___lmul@product,w
  5515  0ABB  00A4               	movwf	?___lmul
  5516  0ABC  0008               	return
  5517  0ABD                     __end_of___lmul:	
  5518                           
  5519                           	psect	text9
  5520  0CF0                     __ptext9:	
  5521 ;; *************** function ___lldiv *****************
  5522 ;; Defined at:
  5523 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\lldiv.c"
  5524 ;; Parameters:    Size  Location     Type
  5525 ;;  divisor         4    0[BANK0 ] unsigned long 
  5526 ;;  dividend        4    4[BANK0 ] unsigned long 
  5527 ;; Auto vars:     Size  Location     Type
  5528 ;;  quotient        4    8[BANK0 ] unsigned long 
  5529 ;;  counter         1   12[BANK0 ] unsigned char 
  5530 ;; Return value:  Size  Location     Type
  5531 ;;                  4    0[BANK0 ] unsigned long 
  5532 ;; Registers used:
  5533 ;;		wreg, status,2, status,0
  5534 ;; Tracked objects:
  5535 ;;		On entry : 0/0
  5536 ;;		On exit  : 0/0
  5537 ;;		Unchanged: 0/0
  5538 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5539 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5540 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5541 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5542 ;;      Totals:         1      13       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5543 ;;Total ram usage:       14 bytes
  5544 ;; Hardware stack levels used:    1
  5545 ;; Hardware stack levels required when called:    2
  5546 ;; This function calls:
  5547 ;;		Nothing
  5548 ;; This function is called by:
  5549 ;;		_Tmr_TmrBPrSet
  5550 ;; This function uses a non-reentrant model
  5551 ;;
  5552                           
  5553                           
  5554                           ;psect for function ___lldiv
  5555  0CF0                     ___lldiv:	
  5556                           
  5557                           ;incstack = 0
  5558                           ; Regs used in ___lldiv: [wreg+status,2+status,0]
  5559  0CF0  3000               	movlw	0
  5560  0CF1  0020               	movlb	0	; select bank0
  5561  0CF2  00AB               	movwf	___lldiv@quotient+3
  5562  0CF3  3000               	movlw	0
  5563  0CF4  00AA               	movwf	___lldiv@quotient+2
  5564  0CF5  3000               	movlw	0
  5565  0CF6  00A9               	movwf	___lldiv@quotient+1
  5566  0CF7  3000               	movlw	0
  5567  0CF8  00A8               	movwf	___lldiv@quotient
  5568  0CF9  0823               	movf	___lldiv@divisor+3,w
  5569  0CFA  0422               	iorwf	___lldiv@divisor+2,w
  5570  0CFB  0421               	iorwf	___lldiv@divisor+1,w
  5571  0CFC  0420               	iorwf	___lldiv@divisor,w
  5572  0CFD  1903               	skipnz
  5573  0CFE  2D3A               	goto	l4377
  5574  0CFF  01AC               	clrf	___lldiv@counter
  5575  0D00  0AAC               	incf	___lldiv@counter,f
  5576  0D01                     l4363:	
  5577  0D01  1BA3               	btfsc	___lldiv@divisor+3,7
  5578  0D02  2D0F               	goto	l4365
  5579  0D03  3001               	movlw	1
  5580  0D04                     u3185:	
  5581  0D04  35A0               	lslf	___lldiv@divisor,f
  5582  0D05  0DA1               	rlf	___lldiv@divisor+1,f
  5583  0D06  0DA2               	rlf	___lldiv@divisor+2,f
  5584  0D07  0DA3               	rlf	___lldiv@divisor+3,f
  5585  0D08  0B89               	decfsz	9,f
  5586  0D09  2D04               	goto	u3185
  5587  0D0A  3001               	movlw	1
  5588  0D0B  00F4               	movwf	??___lldiv
  5589  0D0C  0874               	movf	??___lldiv,w
  5590  0D0D  07AC               	addwf	___lldiv@counter,f
  5591  0D0E  2D01               	goto	l4363
  5592  0D0F                     l4365:	
  5593  0D0F  3001               	movlw	1
  5594  0D10                     u3205:	
  5595  0D10  35A8               	lslf	___lldiv@quotient,f
  5596  0D11  0DA9               	rlf	___lldiv@quotient+1,f
  5597  0D12  0DAA               	rlf	___lldiv@quotient+2,f
  5598  0D13  0DAB               	rlf	___lldiv@quotient+3,f
  5599  0D14  0B89               	decfsz	9,f
  5600  0D15  2D10               	goto	u3205
  5601  0D16  0823               	movf	___lldiv@divisor+3,w
  5602  0D17  0227               	subwf	___lldiv@dividend+3,w
  5603  0D18  1D03               	skipz
  5604  0D19  2D24               	goto	u3215
  5605  0D1A  0822               	movf	___lldiv@divisor+2,w
  5606  0D1B  0226               	subwf	___lldiv@dividend+2,w
  5607  0D1C  1D03               	skipz
  5608  0D1D  2D24               	goto	u3215
  5609  0D1E  0821               	movf	___lldiv@divisor+1,w
  5610  0D1F  0225               	subwf	___lldiv@dividend+1,w
  5611  0D20  1D03               	skipz
  5612  0D21  2D24               	goto	u3215
  5613  0D22  0820               	movf	___lldiv@divisor,w
  5614  0D23  0224               	subwf	___lldiv@dividend,w
  5615  0D24                     u3215:	
  5616  0D24  1C03               	skipc
  5617  0D25  2D2F               	goto	l4373
  5618  0D26  0820               	movf	___lldiv@divisor,w
  5619  0D27  02A4               	subwf	___lldiv@dividend,f
  5620  0D28  0821               	movf	___lldiv@divisor+1,w
  5621  0D29  3BA5               	subwfb	___lldiv@dividend+1,f
  5622  0D2A  0822               	movf	___lldiv@divisor+2,w
  5623  0D2B  3BA6               	subwfb	___lldiv@dividend+2,f
  5624  0D2C  0823               	movf	___lldiv@divisor+3,w
  5625  0D2D  3BA7               	subwfb	___lldiv@dividend+3,f
  5626  0D2E  1428               	bsf	___lldiv@quotient,0
  5627  0D2F                     l4373:	
  5628  0D2F  3001               	movlw	1
  5629  0D30                     u3225:	
  5630  0D30  36A3               	lsrf	___lldiv@divisor+3,f
  5631  0D31  0CA2               	rrf	___lldiv@divisor+2,f
  5632  0D32  0CA1               	rrf	___lldiv@divisor+1,f
  5633  0D33  0CA0               	rrf	___lldiv@divisor,f
  5634  0D34  0B89               	decfsz	9,f
  5635  0D35  2D30               	goto	u3225
  5636  0D36  3001               	movlw	1
  5637  0D37  02AC               	subwf	___lldiv@counter,f
  5638  0D38  1D03               	btfss	3,2
  5639  0D39  2D0F               	goto	l4365
  5640  0D3A                     l4377:	
  5641  0D3A  082B               	movf	___lldiv@quotient+3,w
  5642  0D3B  00A3               	movwf	?___lldiv+3
  5643  0D3C  082A               	movf	___lldiv@quotient+2,w
  5644  0D3D  00A2               	movwf	?___lldiv+2
  5645  0D3E  0829               	movf	___lldiv@quotient+1,w
  5646  0D3F  00A1               	movwf	?___lldiv+1
  5647  0D40  0828               	movf	___lldiv@quotient,w
  5648  0D41  00A0               	movwf	?___lldiv
  5649  0D42  0008               	return
  5650  0D43                     __end_of___lldiv:	
  5651                           
  5652                           	psect	text10
  5653  09DF                     __ptext10:	
  5654 ;; *************** function _Tmr_TmrBIrqSet *****************
  5655 ;; Defined at:
  5656 ;;		line 182 in file "../../../Framework/MercuryFwk/Source/c/01_Hal/02_Drv/tmr_drv.c"
  5657 ;; Parameters:    Size  Location     Type
  5658 ;;  TmrNumb         1    wreg     unsigned char 
  5659 ;;  TmrIrqSts       1    4[COMMON] unsigned char 
  5660 ;; Auto vars:     Size  Location     Type
  5661 ;;  TmrNumb         1    5[COMMON] unsigned char 
  5662 ;; Return value:  Size  Location     Type
  5663 ;;                  1    wreg      void 
  5664 ;; Registers used:
  5665 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  5666 ;; Tracked objects:
  5667 ;;		On entry : 0/0
  5668 ;;		On exit  : 0/0
  5669 ;;		Unchanged: 0/0
  5670 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5671 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5672 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5673 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5674 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5675 ;;Total ram usage:        2 bytes
  5676 ;; Hardware stack levels used:    1
  5677 ;; Hardware stack levels required when called:    2
  5678 ;; This function calls:
  5679 ;;		Nothing
  5680 ;; This function is called by:
  5681 ;;		_Tmr_TmrBConfig
  5682 ;; This function uses a non-reentrant model
  5683 ;;
  5684                           
  5685                           
  5686                           ;psect for function _Tmr_TmrBIrqSet
  5687  09DF                     _Tmr_TmrBIrqSet:	
  5688                           
  5689                           ;incstack = 0
  5690                           ; Regs used in _Tmr_TmrBIrqSet: [wreg-fsr0h+status,2+status,0]
  5691                           ;Tmr_TmrBIrqSet@TmrNumb stored from wreg
  5692  09DF  00F5               	movwf	Tmr_TmrBIrqSet@TmrNumb
  5693                           
  5694                           ;tmr_drv.c: 185: switch (TmrNumb)
  5695  09E0  29FC               	goto	l3387
  5696  09E1                     l341:	
  5697                           ;tmr_drv.c: 186: {
  5698                           ;tmr_drv.c: 187: case ((UINT8)(2)):
  5699                           
  5700                           
  5701                           ;tmr_drv.c: 189: PIR1bits.TMR2IF = 0u;
  5702  09E1  0020               	movlb	0	; select bank0
  5703  09E2  1091               	bcf	17,1	;volatile
  5704                           
  5705                           ;tmr_drv.c: 191: PIE1bits.TMR2IE = TmrIrqSts;
  5706  09E3  0C74               	rrf	Tmr_TmrBIrqSet@TmrIrqSts,w
  5707  09E4  0021               	movlb	1	; select bank1
  5708  09E5  1C03               	skipc
  5709  09E6  1091               	bcf	17,1	;volatile
  5710  09E7  1803               	skipnc
  5711  09E8  1491               	bsf	17,1	;volatile
  5712                           
  5713                           ;tmr_drv.c: 192: break;
  5714  09E9  0008               	return
  5715  09EA                     l343:	
  5716                           ;tmr_drv.c: 194: case ((UINT8)(4)):
  5717                           
  5718                           
  5719                           ;tmr_drv.c: 196: PIR3bits.TMR4IF = 0u;
  5720  09EA  0020               	movlb	0	; select bank0
  5721  09EB  1093               	bcf	19,1	;volatile
  5722                           
  5723                           ;tmr_drv.c: 198: PIE3bits.TMR4IE = TmrIrqSts;
  5724  09EC  0C74               	rrf	Tmr_TmrBIrqSet@TmrIrqSts,w
  5725  09ED  0021               	movlb	1	; select bank1
  5726  09EE  1C03               	skipc
  5727  09EF  1093               	bcf	19,1	;volatile
  5728  09F0  1803               	skipnc
  5729  09F1  1493               	bsf	19,1	;volatile
  5730                           
  5731                           ;tmr_drv.c: 199: break;
  5732  09F2  0008               	return
  5733  09F3                     l344:	
  5734                           ;tmr_drv.c: 201: case ((UINT8)(6)):
  5735                           
  5736                           
  5737                           ;tmr_drv.c: 203: PIR3bits.TMR6IF = 0u;
  5738  09F3  0020               	movlb	0	; select bank0
  5739  09F4  1193               	bcf	19,3	;volatile
  5740                           
  5741                           ;tmr_drv.c: 205: PIE3bits.TMR6IE = TmrIrqSts;
  5742  09F5  0C74               	rrf	Tmr_TmrBIrqSet@TmrIrqSts,w
  5743  09F6  0021               	movlb	1	; select bank1
  5744  09F7  1C03               	skipc
  5745  09F8  1193               	bcf	19,3	;volatile
  5746  09F9  1803               	skipnc
  5747  09FA  1593               	bsf	19,3	;volatile
  5748                           
  5749                           ;tmr_drv.c: 210: }
  5750                           
  5751                           ;tmr_drv.c: 209: break;
  5752                           
  5753                           ;tmr_drv.c: 208: default:
  5754                           
  5755                           ;tmr_drv.c: 206: break;
  5756  09FB  0008               	return
  5757  09FC                     l3387:	
  5758  09FC  0875               	movf	Tmr_TmrBIrqSet@TmrNumb,w
  5759                           
  5760                           ; Switch size 1, requested type "space"
  5761                           ; Number of cases is 3, Range of values is 2 to 6
  5762                           ; switch strategies available:
  5763                           ; Name         Instructions Cycles
  5764                           ; simple_byte           10     6 (average)
  5765                           ; direct_byte           19     9 (fixed)
  5766                           ; jumptable            263     9 (fixed)
  5767                           ;	Chosen strategy is simple_byte
  5768  09FD  3A02               	xorlw	2	; case 2
  5769  09FE  1903               	skipnz
  5770  09FF  29E1               	goto	l341
  5771  0A00  3A06               	xorlw	6	; case 4
  5772  0A01  1903               	skipnz
  5773  0A02  29EA               	goto	l343
  5774  0A03  3A02               	xorlw	2	; case 6
  5775  0A04  1903               	skipnz
  5776  0A05  29F3               	goto	l344
  5777  0A06  2A07               	goto	l346
  5778  0A07                     l346:	
  5779  0A07  0008               	return
  5780  0A08                     __end_of_Tmr_TmrBIrqSet:	
  5781                           
  5782                           	psect	text11
  5783  0897                     __ptext11:	
  5784 ;; *************** function _Tmr_StartTmr *****************
  5785 ;; Defined at:
  5786 ;;		line 279 in file "../../../Framework/MercuryFwk/Source/c/01_Hal/02_Drv/tmr_drv.c"
  5787 ;; Parameters:    Size  Location     Type
  5788 ;;  TmrNumb         1    wreg     unsigned char 
  5789 ;; Auto vars:     Size  Location     Type
  5790 ;;  TmrNumb         1    4[COMMON] unsigned char 
  5791 ;; Return value:  Size  Location     Type
  5792 ;;                  1    wreg      void 
  5793 ;; Registers used:
  5794 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  5795 ;; Tracked objects:
  5796 ;;		On entry : 0/0
  5797 ;;		On exit  : 0/0
  5798 ;;		Unchanged: 0/0
  5799 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5800 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5801 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5802 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5803 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5804 ;;Total ram usage:        1 bytes
  5805 ;; Hardware stack levels used:    1
  5806 ;; Hardware stack levels required when called:    2
  5807 ;; This function calls:
  5808 ;;		Nothing
  5809 ;; This function is called by:
  5810 ;;		_Tmr_TmrBConfig
  5811 ;; This function uses a non-reentrant model
  5812 ;;
  5813                           
  5814                           
  5815                           ;psect for function _Tmr_StartTmr
  5816  0897                     _Tmr_StartTmr:	
  5817                           
  5818                           ;incstack = 0
  5819                           ; Regs used in _Tmr_StartTmr: [wreg-fsr0h+status,2+status,0]
  5820                           ;Tmr_StartTmr@TmrNumb stored from wreg
  5821  0897  00F4               	movwf	Tmr_StartTmr@TmrNumb
  5822                           
  5823                           ;tmr_drv.c: 282: switch (TmrNumb)
  5824  0898  28A2               	goto	l3417
  5825  0899                     l361:	
  5826                           ;tmr_drv.c: 283: {
  5827                           ;tmr_drv.c: 284: case ((UINT8)(2)):
  5828                           
  5829                           
  5830                           ;tmr_drv.c: 286: T2CONbits.TMR2ON = 1u;
  5831  0899  0020               	movlb	0	; select bank0
  5832  089A  151C               	bsf	28,2	;volatile
  5833                           
  5834                           ;tmr_drv.c: 287: break;
  5835  089B  0008               	return
  5836  089C                     l363:	
  5837                           ;tmr_drv.c: 289: case ((UINT8)(4)):
  5838                           
  5839                           
  5840                           ;tmr_drv.c: 291: T4CONbits.TMR4ON = 1u;
  5841  089C  0028               	movlb	8	; select bank8
  5842  089D  1517               	bsf	23,2	;volatile
  5843                           
  5844                           ;tmr_drv.c: 292: break;
  5845  089E  0008               	return
  5846  089F                     l364:	
  5847                           ;tmr_drv.c: 294: case ((UINT8)(6)):
  5848                           
  5849                           
  5850                           ;tmr_drv.c: 296: T6CONbits.TMR6ON = 1u;
  5851  089F  0028               	movlb	8	; select bank8
  5852  08A0  151E               	bsf	30,2	;volatile
  5853                           
  5854                           ;tmr_drv.c: 301: }
  5855                           
  5856                           ;tmr_drv.c: 300: break;
  5857                           
  5858                           ;tmr_drv.c: 299: default:
  5859                           
  5860                           ;tmr_drv.c: 297: break;
  5861  08A1  0008               	return
  5862  08A2                     l3417:	
  5863  08A2  0874               	movf	Tmr_StartTmr@TmrNumb,w
  5864                           
  5865                           ; Switch size 1, requested type "space"
  5866                           ; Number of cases is 3, Range of values is 2 to 6
  5867                           ; switch strategies available:
  5868                           ; Name         Instructions Cycles
  5869                           ; simple_byte           10     6 (average)
  5870                           ; direct_byte           19     9 (fixed)
  5871                           ; jumptable            263     9 (fixed)
  5872                           ;	Chosen strategy is simple_byte
  5873  08A3  3A02               	xorlw	2	; case 2
  5874  08A4  1903               	skipnz
  5875  08A5  2899               	goto	l361
  5876  08A6  3A06               	xorlw	6	; case 4
  5877  08A7  1903               	skipnz
  5878  08A8  289C               	goto	l363
  5879  08A9  3A02               	xorlw	2	; case 6
  5880  08AA  1903               	skipnz
  5881  08AB  289F               	goto	l364
  5882  08AC  28AD               	goto	l366
  5883  08AD                     l366:	
  5884  08AD  0008               	return
  5885  08AE                     __end_of_Tmr_StartTmr:	
  5886                           
  5887                           	psect	text12
  5888  0EF7                     __ptext12:	
  5889 ;; *************** function _TmrBInit *****************
  5890 ;; Defined at:
  5891 ;;		line 72 in file "../../../Framework/MercuryFwk/Source/c/01_Hal/02_Drv/tmr_drv.c"
  5892 ;; Parameters:    Size  Location     Type
  5893 ;;  TmrNumb         1    wreg     unsigned char 
  5894 ;;  Prescaler       1    4[COMMON] unsigned char 
  5895 ;;  Postscaler      1    5[COMMON] unsigned char 
  5896 ;; Auto vars:     Size  Location     Type
  5897 ;;  TmrNumb         1    1[BANK0 ] unsigned char 
  5898 ;; Return value:  Size  Location     Type
  5899 ;;                  1    wreg      void 
  5900 ;; Registers used:
  5901 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  5902 ;; Tracked objects:
  5903 ;;		On entry : 0/0
  5904 ;;		On exit  : 0/0
  5905 ;;		Unchanged: 0/0
  5906 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5907 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5908 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5909 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5910 ;;      Totals:         2       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5911 ;;Total ram usage:        4 bytes
  5912 ;; Hardware stack levels used:    1
  5913 ;; Hardware stack levels required when called:    2
  5914 ;; This function calls:
  5915 ;;		Nothing
  5916 ;; This function is called by:
  5917 ;;		_Tmr_TmrBConfig
  5918 ;; This function uses a non-reentrant model
  5919 ;;
  5920                           
  5921                           
  5922                           ;psect for function _TmrBInit
  5923  0EF7                     _TmrBInit:	
  5924                           
  5925                           ;incstack = 0
  5926                           ; Regs used in _TmrBInit: [wreg-fsr0h+status,2+status,0]
  5927                           ;TmrBInit@TmrNumb stored from wreg
  5928  0EF7  0020               	movlb	0	; select bank0
  5929  0EF8  00A1               	movwf	TmrBInit@TmrNumb
  5930                           
  5931                           ;tmr_drv.c: 75: switch (TmrNumb)
  5932  0EF9  2F65               	goto	l4415
  5933  0EFA                     l316:	
  5934                           ;tmr_drv.c: 80: {
  5935                           ;tmr_drv.c: 81: case ((UINT8)(1)):
  5936                           
  5937                           ;tmr_drv.c: 79: switch (Prescaler)
  5938                           
  5939                           ;tmr_drv.c: 76: {
  5940                           ;tmr_drv.c: 77: case ((UINT8)(2)):
  5941                           
  5942                           
  5943                           ;tmr_drv.c: 83: T2CONbits.T2CKPS0 = 0u;
  5944  0EFA  101C               	bcf	28,0	;volatile
  5945  0EFB  2EFD               	goto	L2
  5946  0EFC                     l318:	
  5947                           ;tmr_drv.c: 87: case ((UINT8)(4)):
  5948                           
  5949                           ;tmr_drv.c: 85: break;
  5950                           
  5951                           ;tmr_drv.c: 84: T2CONbits.T2CKPS1 = 0u;
  5952                           
  5953                           
  5954                           ;tmr_drv.c: 89: T2CONbits.T2CKPS0 = 1u;
  5955  0EFC  141C               	bsf	28,0	;volatile
  5956  0EFD                     L2:	
  5957                           
  5958                           ;tmr_drv.c: 90: T2CONbits.T2CKPS1 = 0u;
  5959  0EFD  109C               	bcf	28,1	;volatile
  5960                           
  5961                           ;tmr_drv.c: 91: break;
  5962  0EFE  2F0D               	goto	l4399
  5963  0EFF                     l319:	
  5964                           ;tmr_drv.c: 93: case ((UINT8)(16)):
  5965                           
  5966                           
  5967                           ;tmr_drv.c: 94: T2CONbits.T2CKPS0 = 0u;
  5968  0EFF  101C               	bcf	28,0	;volatile
  5969                           
  5970                           ;tmr_drv.c: 95: T2CONbits.T2CKPS1 = 1u;
  5971  0F00  149C               	bsf	28,1	;volatile
  5972                           
  5973                           ;tmr_drv.c: 100: }
  5974                           
  5975                           ;tmr_drv.c: 99: break;
  5976                           
  5977                           ;tmr_drv.c: 98: default:
  5978                           
  5979                           ;tmr_drv.c: 96: break;
  5980  0F01  2F0D               	goto	l4399
  5981  0F02                     l4397:	
  5982  0F02  0874               	movf	TmrBInit@Prescaler,w
  5983                           
  5984                           ; Switch size 1, requested type "space"
  5985                           ; Number of cases is 3, Range of values is 1 to 16
  5986                           ; switch strategies available:
  5987                           ; Name         Instructions Cycles
  5988                           ; simple_byte           10     6 (average)
  5989                           ; direct_byte           41     9 (fixed)
  5990                           ; jumptable            263     9 (fixed)
  5991                           ;	Chosen strategy is simple_byte
  5992  0F03  3A01               	xorlw	1	; case 1
  5993  0F04  1903               	skipnz
  5994  0F05  2EFA               	goto	l316
  5995  0F06  3A05               	xorlw	5	; case 4
  5996  0F07  1903               	skipnz
  5997  0F08  2EFC               	goto	l318
  5998  0F09  3A14               	xorlw	20	; case 16
  5999  0F0A  1903               	skipnz
  6000  0F0B  2EFF               	goto	l319
  6001  0F0C  2F0D               	goto	l4399
  6002  0F0D                     l4399:	
  6003                           
  6004                           ;tmr_drv.c: 103: T2CONbits.T2OUTPS = (Postscaler - 1);
  6005  0F0D  0875               	movf	TmrBInit@Postscaler,w
  6006  0F0E  3EFF               	addlw	255
  6007  0F0F  00A0               	movwf	??_TmrBInit
  6008  0F10  0DA0               	rlf	??_TmrBInit,f
  6009  0F11  0DA0               	rlf	??_TmrBInit,f
  6010  0F12  0DA0               	rlf	??_TmrBInit,f
  6011  0F13  081C               	movf	28,w	;volatile
  6012  0F14  0620               	xorwf	??_TmrBInit,w
  6013  0F15  3987               	andlw	-121
  6014  0F16  0620               	xorwf	??_TmrBInit,w
  6015  0F17  009C               	movwf	28	;volatile
  6016                           
  6017                           ;tmr_drv.c: 104: break;
  6018  0F18  0008               	return
  6019  0F19                     l324:	
  6020                           ;tmr_drv.c: 109: {
  6021                           ;tmr_drv.c: 110: case ((UINT8)(1)):
  6022                           
  6023                           ;tmr_drv.c: 108: switch (Prescaler)
  6024                           
  6025                           ;tmr_drv.c: 106: case ((UINT8)(4)):
  6026                           
  6027                           
  6028                           ;tmr_drv.c: 112: T4CONbits.T4CKPS0 = 0u;
  6029  0F19  0028               	movlb	8	; select bank8
  6030  0F1A  1017               	bcf	23,0	;volatile
  6031  0F1B  2F1E               	goto	L3
  6032  0F1C                     l326:	
  6033                           ;tmr_drv.c: 116: case ((UINT8)(4)):
  6034                           
  6035                           ;tmr_drv.c: 114: break;
  6036                           
  6037                           ;tmr_drv.c: 113: T4CONbits.T4CKPS1 = 0u;
  6038                           
  6039                           
  6040                           ;tmr_drv.c: 118: T4CONbits.T4CKPS0 = 1u;
  6041  0F1C  0028               	movlb	8	; select bank8
  6042  0F1D  1417               	bsf	23,0	;volatile
  6043  0F1E                     L3:	
  6044                           
  6045                           ;tmr_drv.c: 119: T4CONbits.T4CKPS1 = 0u;
  6046  0F1E  1097               	bcf	23,1	;volatile
  6047                           
  6048                           ;tmr_drv.c: 120: break;
  6049  0F1F  2F2F               	goto	l4405
  6050  0F20                     l327:	
  6051                           ;tmr_drv.c: 122: case ((UINT8)(16)):
  6052                           
  6053                           
  6054                           ;tmr_drv.c: 123: T4CONbits.T4CKPS0 = 0u;
  6055  0F20  0028               	movlb	8	; select bank8
  6056  0F21  1017               	bcf	23,0	;volatile
  6057                           
  6058                           ;tmr_drv.c: 124: T4CONbits.T4CKPS1 = 1u;
  6059  0F22  1497               	bsf	23,1	;volatile
  6060                           
  6061                           ;tmr_drv.c: 129: }
  6062                           
  6063                           ;tmr_drv.c: 128: break;
  6064                           
  6065                           ;tmr_drv.c: 127: default:
  6066                           
  6067                           ;tmr_drv.c: 125: break;
  6068  0F23  2F2F               	goto	l4405
  6069  0F24                     l4403:	
  6070  0F24  0874               	movf	TmrBInit@Prescaler,w
  6071                           
  6072                           ; Switch size 1, requested type "space"
  6073                           ; Number of cases is 3, Range of values is 1 to 16
  6074                           ; switch strategies available:
  6075                           ; Name         Instructions Cycles
  6076                           ; simple_byte           10     6 (average)
  6077                           ; direct_byte           41     9 (fixed)
  6078                           ; jumptable            263     9 (fixed)
  6079                           ;	Chosen strategy is simple_byte
  6080  0F25  3A01               	xorlw	1	; case 1
  6081  0F26  1903               	skipnz
  6082  0F27  2F19               	goto	l324
  6083  0F28  3A05               	xorlw	5	; case 4
  6084  0F29  1903               	skipnz
  6085  0F2A  2F1C               	goto	l326
  6086  0F2B  3A14               	xorlw	20	; case 16
  6087  0F2C  1903               	skipnz
  6088  0F2D  2F20               	goto	l327
  6089  0F2E  2F2F               	goto	l4405
  6090  0F2F                     l4405:	
  6091                           
  6092                           ;tmr_drv.c: 132: T4CONbits.T4OUTPS = (Postscaler - 1);
  6093  0F2F  0875               	movf	TmrBInit@Postscaler,w
  6094  0F30  3EFF               	addlw	255
  6095  0F31  0020               	movlb	0	; select bank0
  6096  0F32  00A0               	movwf	??_TmrBInit
  6097  0F33  0DA0               	rlf	??_TmrBInit,f
  6098  0F34  0DA0               	rlf	??_TmrBInit,f
  6099  0F35  0DA0               	rlf	??_TmrBInit,f
  6100  0F36  0028               	movlb	8	; select bank8
  6101  0F37  0817               	movf	23,w	;volatile
  6102  0F38  0020               	movlb	0	; select bank0
  6103  0F39  0620               	xorwf	??_TmrBInit,w
  6104  0F3A  3987               	andlw	-121
  6105  0F3B  0620               	xorwf	??_TmrBInit,w
  6106  0F3C  0028               	movlb	8	; select bank8
  6107  0F3D  0097               	movwf	23	;volatile
  6108                           
  6109                           ;tmr_drv.c: 133: break;
  6110  0F3E  0008               	return
  6111  0F3F                     l331:	
  6112                           ;tmr_drv.c: 138: {
  6113                           ;tmr_drv.c: 139: case ((UINT8)(1)):
  6114                           
  6115                           ;tmr_drv.c: 137: switch (Prescaler)
  6116                           
  6117                           ;tmr_drv.c: 135: case ((UINT8)(6)):
  6118                           
  6119                           
  6120                           ;tmr_drv.c: 141: T6CONbits.T6CKPS0 = 0u;
  6121  0F3F  0028               	movlb	8	; select bank8
  6122  0F40  101E               	bcf	30,0	;volatile
  6123  0F41  2F44               	goto	L4
  6124  0F42                     l333:	
  6125                           ;tmr_drv.c: 145: case ((UINT8)(4)):
  6126                           
  6127                           ;tmr_drv.c: 143: break;
  6128                           
  6129                           ;tmr_drv.c: 142: T6CONbits.T6CKPS1 = 0u;
  6130                           
  6131                           
  6132                           ;tmr_drv.c: 147: T6CONbits.T6CKPS0 = 1u;
  6133  0F42  0028               	movlb	8	; select bank8
  6134  0F43  141E               	bsf	30,0	;volatile
  6135  0F44                     L4:	
  6136                           
  6137                           ;tmr_drv.c: 148: T6CONbits.T6CKPS1 = 0u;
  6138  0F44  109E               	bcf	30,1	;volatile
  6139                           
  6140                           ;tmr_drv.c: 149: break;
  6141  0F45  2F55               	goto	l4411
  6142  0F46                     l334:	
  6143                           ;tmr_drv.c: 151: case ((UINT8)(16)):
  6144                           
  6145                           
  6146                           ;tmr_drv.c: 152: T6CONbits.T6CKPS0 = 0u;
  6147  0F46  0028               	movlb	8	; select bank8
  6148  0F47  101E               	bcf	30,0	;volatile
  6149                           
  6150                           ;tmr_drv.c: 153: T6CONbits.T6CKPS1 = 1u;
  6151  0F48  149E               	bsf	30,1	;volatile
  6152                           
  6153                           ;tmr_drv.c: 158: }
  6154                           
  6155                           ;tmr_drv.c: 157: break;
  6156                           
  6157                           ;tmr_drv.c: 156: default:
  6158                           
  6159                           ;tmr_drv.c: 154: break;
  6160  0F49  2F55               	goto	l4411
  6161  0F4A                     l4409:	
  6162  0F4A  0874               	movf	TmrBInit@Prescaler,w
  6163                           
  6164                           ; Switch size 1, requested type "space"
  6165                           ; Number of cases is 3, Range of values is 1 to 16
  6166                           ; switch strategies available:
  6167                           ; Name         Instructions Cycles
  6168                           ; simple_byte           10     6 (average)
  6169                           ; direct_byte           41     9 (fixed)
  6170                           ; jumptable            263     9 (fixed)
  6171                           ;	Chosen strategy is simple_byte
  6172  0F4B  3A01               	xorlw	1	; case 1
  6173  0F4C  1903               	skipnz
  6174  0F4D  2F3F               	goto	l331
  6175  0F4E  3A05               	xorlw	5	; case 4
  6176  0F4F  1903               	skipnz
  6177  0F50  2F42               	goto	l333
  6178  0F51  3A14               	xorlw	20	; case 16
  6179  0F52  1903               	skipnz
  6180  0F53  2F46               	goto	l334
  6181  0F54  2F55               	goto	l4411
  6182  0F55                     l4411:	
  6183                           
  6184                           ;tmr_drv.c: 161: T6CONbits.T6OUTPS = (Postscaler - 1);
  6185  0F55  0875               	movf	TmrBInit@Postscaler,w
  6186  0F56  3EFF               	addlw	255
  6187  0F57  0020               	movlb	0	; select bank0
  6188  0F58  00A0               	movwf	??_TmrBInit
  6189  0F59  0DA0               	rlf	??_TmrBInit,f
  6190  0F5A  0DA0               	rlf	??_TmrBInit,f
  6191  0F5B  0DA0               	rlf	??_TmrBInit,f
  6192  0F5C  0028               	movlb	8	; select bank8
  6193  0F5D  081E               	movf	30,w	;volatile
  6194  0F5E  0020               	movlb	0	; select bank0
  6195  0F5F  0620               	xorwf	??_TmrBInit,w
  6196  0F60  3987               	andlw	-121
  6197  0F61  0620               	xorwf	??_TmrBInit,w
  6198  0F62  0028               	movlb	8	; select bank8
  6199  0F63  009E               	movwf	30	;volatile
  6200                           
  6201                           ;tmr_drv.c: 166: }
  6202                           
  6203                           ;tmr_drv.c: 165: break;
  6204                           
  6205                           ;tmr_drv.c: 164: default:
  6206                           
  6207                           ;tmr_drv.c: 162: break;
  6208  0F64  0008               	return
  6209  0F65                     l4415:	
  6210  0F65  0020               	movlb	0	; select bank0
  6211  0F66  0821               	movf	TmrBInit@TmrNumb,w
  6212                           
  6213                           ; Switch size 1, requested type "space"
  6214                           ; Number of cases is 3, Range of values is 2 to 6
  6215                           ; switch strategies available:
  6216                           ; Name         Instructions Cycles
  6217                           ; simple_byte           10     6 (average)
  6218                           ; direct_byte           19     9 (fixed)
  6219                           ; jumptable            263     9 (fixed)
  6220                           ;	Chosen strategy is simple_byte
  6221  0F67  3A02               	xorlw	2	; case 2
  6222  0F68  1903               	skipnz
  6223  0F69  2F02               	goto	l4397
  6224  0F6A  3A06               	xorlw	6	; case 4
  6225  0F6B  1903               	skipnz
  6226  0F6C  2F24               	goto	l4403
  6227  0F6D  3A02               	xorlw	2	; case 6
  6228  0F6E  1903               	skipnz
  6229  0F6F  2F4A               	goto	l4409
  6230  0F70  2F71               	goto	l337
  6231  0F71                     l337:	
  6232  0F71  0008               	return
  6233  0F72                     __end_of_TmrBInit:	
  6234                           
  6235                           	psect	text13
  6236  0834                     __ptext13:	
  6237 ;; *************** function _MainScheduler *****************
  6238 ;; Defined at:
  6239 ;;		line 79 in file "../../../Framework/MercuryFwk/Source/c/02_Osl/os_sched.c"
  6240 ;; Parameters:    Size  Location     Type
  6241 ;;		None
  6242 ;; Auto vars:     Size  Location     Type
  6243 ;;		None
  6244 ;; Return value:  Size  Location     Type
  6245 ;;                  1    wreg      void 
  6246 ;; Registers used:
  6247 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6248 ;; Tracked objects:
  6249 ;;		On entry : 0/0
  6250 ;;		On exit  : 0/0
  6251 ;;		Unchanged: 0/0
  6252 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6253 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6254 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6255 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6256 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6257 ;;Total ram usage:        0 bytes
  6258 ;; Hardware stack levels used:    1
  6259 ;; Hardware stack levels required when called:    9
  6260 ;; This function calls:
  6261 ;;		_InitializeTasks
  6262 ;;		_ScheduleTasks
  6263 ;; This function is called by:
  6264 ;;		_main
  6265 ;; This function uses a non-reentrant model
  6266 ;;
  6267                           
  6268                           
  6269                           ;psect for function _MainScheduler
  6270  0834                     _MainScheduler:	
  6271                           
  6272                           ;os_sched.c: 82: InitializeTasks();
  6273                           
  6274                           ;incstack = 0
  6275                           ; Regs used in _MainScheduler: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  6276  0834  318C  2400  3188   	fcall	_InitializeTasks
  6277                           
  6278                           ;os_sched.c: 84: SystemState = RunningState;
  6279  0837  0020               	movlb	0	; select bank0
  6280  0838  01EB               	clrf	_SystemState
  6281  0839  0AEB               	incf	_SystemState,f
  6282  083A                     l4849:	
  6283                           ;os_sched.c: 91: while(((UINT8)(1)))
  6284                           
  6285                           
  6286                           ;os_sched.c: 92: {
  6287                           ;os_sched.c: 94: if (MainSystemTimebaseFlag == CallTaskPhase)
  6288  083A  0021               	movlb	1	; select bank1
  6289  083B  086E               	movf	_MainSystemTimebaseFlag^(0+128),w
  6290  083C  1D03               	btfss	3,2
  6291  083D  283A               	goto	l4849
  6292                           
  6293                           ;os_sched.c: 95: {
  6294                           ;os_sched.c: 97: ScheduleTasks();
  6295  083E  3183  238D  3188   	fcall	_ScheduleTasks
  6296                           
  6297                           ;os_sched.c: 99: MainSystemTimebaseFlag = WaitTriggerPhase;
  6298  0841  0021               	movlb	1	; select bank1
  6299  0842  01EE               	clrf	_MainSystemTimebaseFlag^(0+128)
  6300  0843  0AEE               	incf	_MainSystemTimebaseFlag^(0+128),f
  6301  0844  283A               	goto	l4849
  6302  0845                     __end_of_MainScheduler:	
  6303                           
  6304                           	psect	text14
  6305  038D                     __ptext14:	
  6306 ;; *************** function _ScheduleTasks *****************
  6307 ;; Defined at:
  6308 ;;		line 130 in file "../../../Framework/MercuryFwk/Source/c/02_Osl/os_sched.c"
  6309 ;; Parameters:    Size  Location     Type
  6310 ;;		None
  6311 ;; Auto vars:     Size  Location     Type
  6312 ;;  ActiveTaskIn    1   66[BANK0 ] unsigned char 
  6313 ;; Return value:  Size  Location     Type
  6314 ;;                  1    wreg      void 
  6315 ;; Registers used:
  6316 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6317 ;; Tracked objects:
  6318 ;;		On entry : 0/0
  6319 ;;		On exit  : 0/0
  6320 ;;		Unchanged: 0/0
  6321 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6322 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6323 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6324 ;;      Temps:          0       0       0       6       0       0       0       0       0       0       0       0       
      +0       0
  6325 ;;      Totals:         0       1       0       6       0       0       0       0       0       0       0       0       
      +0       0
  6326 ;;Total ram usage:        7 bytes
  6327 ;; Hardware stack levels used:    1
  6328 ;; Hardware stack levels required when called:    8
  6329 ;; This function calls:
  6330 ;;		_App_MainTask
  6331 ;;		_I2cSlv_MainTask
  6332 ;;		_I2c_DataReceiveSm
  6333 ;;		_Led_MainTask
  6334 ;;		_Wdg_MainTask
  6335 ;; This function is called by:
  6336 ;;		_MainScheduler
  6337 ;; This function uses a non-reentrant model
  6338 ;;
  6339                           
  6340                           
  6341                           ;psect for function _ScheduleTasks
  6342  038D                     _ScheduleTasks:	
  6343                           
  6344                           ;os_sched.c: 133: UINT8 ActiveTaskIndex = 0u;
  6345                           
  6346                           ;incstack = 0
  6347                           ; Regs used in _ScheduleTasks: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  6348  038D  0020               	movlb	0	; select bank0
  6349  038E  01E2               	clrf	ScheduleTasks@ActiveTaskIndex
  6350                           
  6351                           ;os_sched.c: 136: for (ActiveTaskIndex = 0u; ActiveTaskIndex < TaskNumber; ActiveTaskInd
      +                          ex++)
  6352  038F  01E2               	clrf	ScheduleTasks@ActiveTaskIndex
  6353  0390  300A               	movlw	low (_TaskNumber| (0+32768))
  6354  0391  0084               	movwf	4
  6355  0392  3090               	movlw	high (_TaskNumber| (0+32768))
  6356  0393  0085               	movwf	5
  6357  0394  3F00               	moviw [0]fsr0
  6358  0395  0022               	movlb	2	; select bank2
  6359  0396  00E8               	movwf	??_ScheduleTasks^(0+256)
  6360  0397  3F01               	moviw [1]fsr0
  6361  0398                     L5:	
  6362  0398  00E9               	movwf	(??_ScheduleTasks^(0+256)+1)
  6363  0399  0020               	movlb	0	; select bank0
  6364  039A  0862               	movf	ScheduleTasks@ActiveTaskIndex,w
  6365  039B  0022               	movlb	2	; select bank2
  6366  039C  00EA               	movwf	(??_ScheduleTasks+2)^(0+256)
  6367  039D  01EB               	clrf	((??_ScheduleTasks+2)^(0+256)+1)
  6368  039E  0869               	movf	(??_ScheduleTasks+1)^(0+256),w
  6369  039F  026B               	subwf	(??_ScheduleTasks+3)^(0+256),w
  6370  03A0  1D03               	skipz
  6371  03A1  2BA4               	goto	u3715
  6372  03A2  0868               	movf	??_ScheduleTasks^(0+256),w
  6373  03A3  026A               	subwf	(??_ScheduleTasks+2)^(0+256),w
  6374  03A4                     u3715:	
  6375  03A4  1803               	btfsc	3,0
  6376  03A5  0008               	return
  6377                           
  6378                           ;os_sched.c: 137: {
  6379                           ;os_sched.c: 138: if (TaskTable[ActiveTaskIndex].Counter >= (TaskTable[ActiveTaskIndex].
      +                          Timeout))
  6380  03A6  0020               	movlb	0	; select bank0
  6381  03A7  0862               	movf	ScheduleTasks@ActiveTaskIndex,w
  6382  03A8  0022               	movlb	2	; select bank2
  6383  03A9  00E8               	movwf	??_ScheduleTasks^(0+256)
  6384  03AA  3002               	movlw	2
  6385  03AB                     u3725:	
  6386  03AB  35E8               	lslf	??_ScheduleTasks^(0+256),f
  6387  03AC  3EFF               	addlw	-1
  6388  03AD  1D03               	skipz
  6389  03AE  2BAB               	goto	u3725
  6390  03AF  3568               	lslf	??_ScheduleTasks^(0+256),w
  6391  03B0  3E05               	addlw	5
  6392  03B1  3E20               	addlw	(low (_TaskTable| (0+256)))& (0+255)
  6393  03B2  0086               	movwf	6
  6394  03B3  3001               	movlw	1	; select bank2/3
  6395  03B4  0087               	movwf	7
  6396  03B5  3F40               	moviw [0]fsr1
  6397  03B6  00E9               	movwf	(??_ScheduleTasks+1)^(0+256)
  6398  03B7  3F41               	moviw [1]fsr1
  6399  03B8  00EA               	movwf	((??_ScheduleTasks+1)^(0+256)+1)
  6400  03B9  0020               	movlb	0	; select bank0
  6401  03BA  0862               	movf	ScheduleTasks@ActiveTaskIndex,w
  6402  03BB  0022               	movlb	2	; select bank2
  6403  03BC  00EB               	movwf	(??_ScheduleTasks+3)^(0+256)
  6404  03BD  3002               	movlw	2
  6405  03BE                     u3735:	
  6406  03BE  35EB               	lslf	(??_ScheduleTasks+3)^(0+256),f
  6407  03BF  3EFF               	addlw	-1
  6408  03C0  1D03               	skipz
  6409  03C1  2BBE               	goto	u3735
  6410  03C2  356B               	lslf	(??_ScheduleTasks+3)^(0+256),w
  6411  03C3  3E03               	addlw	3
  6412  03C4  3E20               	addlw	(low (_TaskTable| (0+256)))& (0+255)
  6413  03C5  0086               	movwf	6
  6414  03C6  3001               	movlw	1	; select bank2/3
  6415  03C7  0087               	movwf	7
  6416  03C8  3F40               	moviw [0]fsr1
  6417  03C9  00EC               	movwf	(??_ScheduleTasks+4)^(0+256)
  6418  03CA  3F41               	moviw [1]fsr1
  6419  03CB  00ED               	movwf	((??_ScheduleTasks+4)^(0+256)+1)
  6420  03CC  086A               	movf	(??_ScheduleTasks+2)^(0+256),w
  6421  03CD  026D               	subwf	(??_ScheduleTasks+5)^(0+256),w
  6422  03CE  1D03               	skipz
  6423  03CF  2BD2               	goto	u3745
  6424  03D0  0869               	movf	(??_ScheduleTasks+1)^(0+256),w
  6425  03D1  026C               	subwf	(??_ScheduleTasks+4)^(0+256),w
  6426  03D2                     u3745:	
  6427  03D2  1C03               	skipc
  6428  03D3  2C1E               	goto	l4823
  6429                           
  6430                           ;os_sched.c: 139: {
  6431                           ;os_sched.c: 140: TaskTable[ActiveTaskIndex].Counter = ((UINT8)(0));
  6432  03D4  0020               	movlb	0	; select bank0
  6433  03D5  0862               	movf	ScheduleTasks@ActiveTaskIndex,w
  6434  03D6  0022               	movlb	2	; select bank2
  6435  03D7  00E8               	movwf	??_ScheduleTasks^(0+256)
  6436  03D8  3002               	movlw	2
  6437  03D9                     u3755:	
  6438  03D9  35E8               	lslf	??_ScheduleTasks^(0+256),f
  6439  03DA  3EFF               	addlw	-1
  6440  03DB  1D03               	skipz
  6441  03DC  2BD9               	goto	u3755
  6442  03DD  3568               	lslf	??_ScheduleTasks^(0+256),w
  6443  03DE  3E03               	addlw	3
  6444  03DF  3E20               	addlw	(low (_TaskTable| (0+256)))& (0+255)
  6445  03E0  0086               	movwf	6
  6446  03E1  3001               	movlw	1	; select bank2/3
  6447  03E2  0087               	movwf	7
  6448  03E3  3000               	movlw	0
  6449  03E4  3FC0               	movwi [0]fsr1
  6450  03E5  3FC1               	movwi [1]fsr1
  6451                           
  6452                           ;os_sched.c: 141: TaskTable[ActiveTaskIndex].State = TaskRunning;
  6453  03E6  0020               	movlb	0	; select bank0
  6454  03E7  0862               	movf	ScheduleTasks@ActiveTaskIndex,w
  6455  03E8  0022               	movlb	2	; select bank2
  6456  03E9  00E8               	movwf	??_ScheduleTasks^(0+256)
  6457  03EA  3002               	movlw	2
  6458  03EB                     u3765:	
  6459  03EB  35E8               	lslf	??_ScheduleTasks^(0+256),f
  6460  03EC  3EFF               	addlw	-1
  6461  03ED  1D03               	skipz
  6462  03EE  2BEB               	goto	u3765
  6463  03EF  3568               	lslf	??_ScheduleTasks^(0+256),w
  6464  03F0  3E02               	addlw	2
  6465  03F1  3E20               	addlw	(low (_TaskTable| (0+256)))& (0+255)
  6466  03F2  0086               	movwf	6
  6467  03F3  3001               	movlw	1	; select bank2/3
  6468  03F4  0087               	movwf	7
  6469  03F5  0181               	clrf	1
  6470  03F6  0A81               	incf	1,f
  6471                           
  6472                           ;os_sched.c: 142: TaskTable[ActiveTaskIndex].Task(TaskTable[ActiveTaskIndex].Options);
  6473  03F7  0020               	movlb	0	; select bank0
  6474  03F8  0862               	movf	ScheduleTasks@ActiveTaskIndex,w
  6475  03F9  0022               	movlb	2	; select bank2
  6476  03FA  00E8               	movwf	??_ScheduleTasks^(0+256)
  6477  03FB  3002               	movlw	2
  6478  03FC                     u3775:	
  6479  03FC  35E8               	lslf	??_ScheduleTasks^(0+256),f
  6480  03FD  3EFF               	addlw	-1
  6481  03FE  1D03               	skipz
  6482  03FF  2BFC               	goto	u3775
  6483  0400  3568               	lslf	??_ScheduleTasks^(0+256),w
  6484  0401  3E07               	addlw	7
  6485  0402  3E20               	addlw	(low (_TaskTable| (0+256)))& (0+255)
  6486  0403  0086               	movwf	6
  6487  0404  3001               	movlw	1	; select bank2/3
  6488  0405  0087               	movwf	7
  6489  0406  0801               	movf	1,w
  6490  0407  00E9               	movwf	(??_ScheduleTasks+1)^(0+256)
  6491  0408  0869               	movf	(??_ScheduleTasks+1)^(0+256),w
  6492  0409  0020               	movlb	0	; select bank0
  6493  040A  00BC               	movwf	App_MainTask@Options
  6494  040B  0862               	movf	ScheduleTasks@ActiveTaskIndex,w
  6495  040C  0022               	movlb	2	; select bank2
  6496  040D  00EA               	movwf	(??_ScheduleTasks+2)^(0+256)
  6497  040E  3002               	movlw	2
  6498  040F                     u3785:	
  6499  040F  35EA               	lslf	(??_ScheduleTasks+2)^(0+256),f
  6500  0410  3EFF               	addlw	-1
  6501  0411  1D03               	skipz
  6502  0412  2C0F               	goto	u3785
  6503  0413  356A               	lslf	(??_ScheduleTasks+2)^(0+256),w
  6504  0414  3E20               	addlw	(low (_TaskTable| (0+256)))& (0+255)
  6505  0415  0086               	movwf	6
  6506  0416  3001               	movlw	1	; select bank2/3
  6507  0417  0087               	movwf	7
  6508  0418  3F41               	moviw [1]fsr1
  6509  0419  008A               	movwf	10
  6510  041A  3F40               	moviw [0]fsr1
  6511  041B  000A               	callw
  6512  041C  3183               	pagesel	$
  6513                           
  6514                           ;os_sched.c: 143: }
  6515  041D  2C42               	goto	l4825
  6516  041E                     l4823:	
  6517                           
  6518                           ;os_sched.c: 144: else
  6519                           ;os_sched.c: 145: {
  6520                           ;os_sched.c: 146: TaskTable[ActiveTaskIndex].Counter++;
  6521  041E  0020               	movlb	0	; select bank0
  6522  041F  0862               	movf	ScheduleTasks@ActiveTaskIndex,w
  6523  0420  0022               	movlb	2	; select bank2
  6524  0421  00E8               	movwf	??_ScheduleTasks^(0+256)
  6525  0422  3002               	movlw	2
  6526  0423                     u3795:	
  6527  0423  35E8               	lslf	??_ScheduleTasks^(0+256),f
  6528  0424  3EFF               	addlw	-1
  6529  0425  1D03               	skipz
  6530  0426  2C23               	goto	u3795
  6531  0427  3568               	lslf	??_ScheduleTasks^(0+256),w
  6532  0428  3E03               	addlw	3
  6533  0429  3E20               	addlw	(low (_TaskTable| (0+256)))& (0+255)
  6534  042A  0086               	movwf	6
  6535  042B  3001               	movlw	1	; select bank2/3
  6536  042C  0087               	movwf	7
  6537  042D  3001               	movlw	1
  6538  042E  0781               	addwf	1,f
  6539  042F  3141               	addfsr 1,1
  6540  0430  1803               	skipnc
  6541  0431  0A81               	incf	1,f
  6542                           
  6543                           ;os_sched.c: 147: TaskTable[ActiveTaskIndex].State = TaskIdle;
  6544  0432  0020               	movlb	0	; select bank0
  6545  0433  0862               	movf	ScheduleTasks@ActiveTaskIndex,w
  6546  0434  0022               	movlb	2	; select bank2
  6547  0435  00E8               	movwf	??_ScheduleTasks^(0+256)
  6548  0436  3002               	movlw	2
  6549  0437                     u3805:	
  6550  0437  35E8               	lslf	??_ScheduleTasks^(0+256),f
  6551  0438  3EFF               	addlw	-1
  6552  0439  1D03               	skipz
  6553  043A  2C37               	goto	u3805
  6554  043B  3568               	lslf	??_ScheduleTasks^(0+256),w
  6555  043C  3E02               	addlw	2
  6556  043D  3E20               	addlw	(low (_TaskTable| (0+256)))& (0+255)
  6557  043E  0086               	movwf	6
  6558  043F  3001               	movlw	1	; select bank2/3
  6559  0440  0087               	movwf	7
  6560  0441  0181               	clrf	1
  6561  0442                     l4825:	
  6562  0442  3001               	movlw	1
  6563  0443  0022               	movlb	2	; select bank2
  6564  0444  00E8               	movwf	??_ScheduleTasks^(0+256)
  6565  0445  0868               	movf	??_ScheduleTasks^(0+256),w
  6566  0446  0020               	movlb	0	; select bank0
  6567  0447  07E2               	addwf	ScheduleTasks@ActiveTaskIndex,f
  6568  0448  300A               	movlw	low (_TaskNumber| (0+32768))
  6569  0449  0084               	movwf	4
  6570  044A  3090               	movlw	high (_TaskNumber| (0+32768))
  6571  044B  0085               	movwf	5
  6572  044C  3F00               	moviw [0]fsr0
  6573  044D  0022               	movlb	2	; select bank2
  6574  044E  00E8               	movwf	??_ScheduleTasks^(0+256)
  6575  044F  3F01               	moviw [1]fsr0
  6576  0450  2B98               	goto	L5
  6577  0451                     __end_of_ScheduleTasks:	
  6578                           
  6579                           	psect	text15
  6580  0C00                     __ptext15:	
  6581 ;; *************** function _InitializeTasks *****************
  6582 ;; Defined at:
  6583 ;;		line 111 in file "../../../Framework/MercuryFwk/Source/c/02_Osl/os_sched.c"
  6584 ;; Parameters:    Size  Location     Type
  6585 ;;		None
  6586 ;; Auto vars:     Size  Location     Type
  6587 ;;  ActiveTaskIn    1   66[BANK0 ] unsigned char 
  6588 ;; Return value:  Size  Location     Type
  6589 ;;                  1    wreg      void 
  6590 ;; Registers used:
  6591 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6592 ;; Tracked objects:
  6593 ;;		On entry : 0/0
  6594 ;;		On exit  : 0/0
  6595 ;;		Unchanged: 0/0
  6596 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6597 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6598 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6599 ;;      Temps:          0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0
  6600 ;;      Totals:         0       1       4       0       0       0       0       0       0       0       0       0       
      +0       0
  6601 ;;Total ram usage:        5 bytes
  6602 ;; Hardware stack levels used:    1
  6603 ;; Hardware stack levels required when called:    8
  6604 ;; This function calls:
  6605 ;;		_App_MainTask
  6606 ;;		_I2cSlv_MainTask
  6607 ;;		_I2c_DataReceiveSm
  6608 ;;		_Led_MainTask
  6609 ;;		_Wdg_MainTask
  6610 ;; This function is called by:
  6611 ;;		_MainScheduler
  6612 ;; This function uses a non-reentrant model
  6613 ;;
  6614                           
  6615                           
  6616                           ;psect for function _InitializeTasks
  6617  0C00                     _InitializeTasks:	
  6618                           
  6619                           ;os_sched.c: 114: UINT8 ActiveTaskIndex = 0u;
  6620                           
  6621                           ;incstack = 0
  6622                           ; Regs used in _InitializeTasks: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  6623  0C00  0020               	movlb	0	; select bank0
  6624  0C01  01E2               	clrf	InitializeTasks@ActiveTaskIndex
  6625                           
  6626                           ;os_sched.c: 117: for (ActiveTaskIndex = 0u; ActiveTaskIndex < TaskNumber; ActiveTaskInd
      +                          ex++)
  6627  0C02  01E2               	clrf	InitializeTasks@ActiveTaskIndex
  6628  0C03  300A               	movlw	low (_TaskNumber| (0+32768))
  6629  0C04  0084               	movwf	4
  6630  0C05  3090               	movlw	high (_TaskNumber| (0+32768))
  6631  0C06  0085               	movwf	5
  6632  0C07  3F00               	moviw [0]fsr0
  6633  0C08  0021               	movlb	1	; select bank1
  6634  0C09  00EA               	movwf	??_InitializeTasks^(0+128)
  6635  0C0A  3F01               	moviw [1]fsr0
  6636  0C0B                     L6:	
  6637  0C0B  00EB               	movwf	(??_InitializeTasks^(0+128)+1)
  6638  0C0C  0020               	movlb	0	; select bank0
  6639  0C0D  0862               	movf	InitializeTasks@ActiveTaskIndex,w
  6640  0C0E  0021               	movlb	1	; select bank1
  6641  0C0F  00EC               	movwf	(??_InitializeTasks+2)^(0+128)
  6642  0C10  01ED               	clrf	((??_InitializeTasks+2)^(0+128)+1)
  6643  0C11  086B               	movf	(??_InitializeTasks+1)^(0+128),w
  6644  0C12  026D               	subwf	(??_InitializeTasks+3)^(0+128),w
  6645  0C13  1D03               	skipz
  6646  0C14  2C17               	goto	u3675
  6647  0C15  086A               	movf	??_InitializeTasks^(0+128),w
  6648  0C16  026C               	subwf	(??_InitializeTasks+2)^(0+128),w
  6649  0C17                     u3675:	
  6650  0C17  1803               	btfsc	3,0
  6651  0C18  0008               	return
  6652                           
  6653                           ;os_sched.c: 118: {
  6654                           ;os_sched.c: 119: TaskTable[ActiveTaskIndex].Task(TaskTable[ActiveTaskIndex].Options);
  6655  0C19  0020               	movlb	0	; select bank0
  6656  0C1A  0862               	movf	InitializeTasks@ActiveTaskIndex,w
  6657  0C1B  0021               	movlb	1	; select bank1
  6658  0C1C  00EA               	movwf	??_InitializeTasks^(0+128)
  6659  0C1D  3002               	movlw	2
  6660  0C1E                     u3685:	
  6661  0C1E  35EA               	lslf	??_InitializeTasks^(0+128),f
  6662  0C1F  3EFF               	addlw	-1
  6663  0C20  1D03               	skipz
  6664  0C21  2C1E               	goto	u3685
  6665  0C22  356A               	lslf	??_InitializeTasks^(0+128),w
  6666  0C23  3E07               	addlw	7
  6667  0C24  3E20               	addlw	(low (_TaskTable| (0+256)))& (0+255)
  6668  0C25  0086               	movwf	6
  6669  0C26  3001               	movlw	1	; select bank2/3
  6670  0C27  0087               	movwf	7
  6671  0C28  0801               	movf	1,w
  6672  0C29  00EB               	movwf	(??_InitializeTasks+1)^(0+128)
  6673  0C2A  086B               	movf	(??_InitializeTasks+1)^(0+128),w
  6674  0C2B  0020               	movlb	0	; select bank0
  6675  0C2C  00BC               	movwf	App_MainTask@Options
  6676  0C2D  0862               	movf	InitializeTasks@ActiveTaskIndex,w
  6677  0C2E  0021               	movlb	1	; select bank1
  6678  0C2F  00EC               	movwf	(??_InitializeTasks+2)^(0+128)
  6679  0C30  3002               	movlw	2
  6680  0C31                     u3695:	
  6681  0C31  35EC               	lslf	(??_InitializeTasks+2)^(0+128),f
  6682  0C32  3EFF               	addlw	-1
  6683  0C33  1D03               	skipz
  6684  0C34  2C31               	goto	u3695
  6685  0C35  356C               	lslf	(??_InitializeTasks+2)^(0+128),w
  6686  0C36  3E20               	addlw	(low (_TaskTable| (0+256)))& (0+255)
  6687  0C37  0086               	movwf	6
  6688  0C38  3001               	movlw	1	; select bank2/3
  6689  0C39  0087               	movwf	7
  6690  0C3A  3F41               	moviw [1]fsr1
  6691  0C3B  008A               	movwf	10
  6692  0C3C  3F40               	moviw [0]fsr1
  6693  0C3D  000A               	callw
  6694  0C3E  318C               	pagesel	$
  6695  0C3F  3001               	movlw	1
  6696  0C40  0021               	movlb	1	; select bank1
  6697  0C41  00EA               	movwf	??_InitializeTasks^(0+128)
  6698  0C42  086A               	movf	??_InitializeTasks^(0+128),w
  6699  0C43  0020               	movlb	0	; select bank0
  6700  0C44  07E2               	addwf	InitializeTasks@ActiveTaskIndex,f
  6701  0C45  300A               	movlw	low (_TaskNumber| (0+32768))
  6702  0C46  0084               	movwf	4
  6703  0C47  3090               	movlw	high (_TaskNumber| (0+32768))
  6704  0C48  0085               	movwf	5
  6705  0C49  3F00               	moviw [0]fsr0
  6706  0C4A  0021               	movlb	1	; select bank1
  6707  0C4B  00EA               	movwf	??_InitializeTasks^(0+128)
  6708  0C4C  3F01               	moviw [1]fsr0
  6709  0C4D  2C0B               	goto	L6
  6710  0C4E                     __end_of_InitializeTasks:	
  6711                           
  6712                           	psect	text16
  6713  05BE                     __ptext16:	
  6714 ;; *************** function _App_MainTask *****************
  6715 ;; Defined at:
  6716 ;;		line 424 in file "../Source/c/04_App/sb140_app.c"
  6717 ;; Parameters:    Size  Location     Type
  6718 ;;  Options         1   28[BANK0 ] unsigned char 
  6719 ;; Auto vars:     Size  Location     Type
  6720 ;;  WpuCh          18   48[BANK0 ] struct _WpuChType
  6721 ;;  AnalogChSel    12   30[BANK0 ] struct _AnalogChSelType
  6722 ;;  AdcConfig       6   42[BANK0 ] struct _AdcCfgType
  6723 ;; Return value:  Size  Location     Type
  6724 ;;                  1    wreg      void 
  6725 ;; Registers used:
  6726 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6727 ;; Tracked objects:
  6728 ;;		On entry : 0/0
  6729 ;;		On exit  : 0/0
  6730 ;;		Unchanged: 0/0
  6731 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6732 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6733 ;;      Locals:         0      36       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6734 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6735 ;;      Totals:         0      38       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6736 ;;Total ram usage:       38 bytes
  6737 ;; Hardware stack levels used:    1
  6738 ;; Hardware stack levels required when called:    7
  6739 ;; This function calls:
  6740 ;;		_Adc_ConfigAnCh
  6741 ;;		_Adc_InitAdcModule
  6742 ;;		_AppSm
  6743 ;;		_GenerateImpulse
  6744 ;;		_Mcu_ConfigPullUps
  6745 ;;		_Mcu_SetDieTempMode
  6746 ;;		_Mcu_SetDieTempSts
  6747 ;;		_Mcu_SetPullUpsSts
  6748 ;; This function is called by:
  6749 ;;		_InitializeTasks
  6750 ;;		_ScheduleTasks
  6751 ;; This function uses a non-reentrant model
  6752 ;;
  6753                           
  6754                           
  6755                           ;psect for function _App_MainTask
  6756  05BE                     _App_MainTask:	
  6757                           
  6758                           ;sb140_app.c: 426: WpuChType WpuCh = {((UINT8)(0)),((UINT8)(0)),((UINT8)(0)),((UINT8)(0)
      +                          ),((UINT8)(0)),((UINT8)(0)),((UINT8)(0)),((UINT8)(0)),((UINT8)(0)),((UINT8)(0)),((UINT8)
      +                          (0)),((UINT8)(0))};
  6759                           
  6760                           ;incstack = 0
  6761                           ; Regs used in _App_MainTask: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  6762  05BE  3020               	movlw	low App_MainTask@F4167
  6763  05BF  0086               	movwf	6
  6764  05C0  3002               	movlw	high App_MainTask@F4167
  6765  05C1  0087               	movwf	7
  6766  05C2  3050               	movlw	low App_MainTask@WpuCh
  6767  05C3  0084               	movwf	4
  6768  05C4  3000               	movlw	high App_MainTask@WpuCh
  6769  05C5  0085               	movwf	5
  6770  05C6  3012               	movlw	18
  6771  05C7  0020               	movlb	0	; select bank0
  6772  05C8  00BD               	movwf	??_App_MainTask
  6773  05C9                     u3650:	
  6774  05C9  0016               	moviw fsr1++
  6775  05CA  001A               	movwi fsr0++
  6776  05CB  0BBD               	decfsz	??_App_MainTask,f
  6777  05CC  2DC9               	goto	u3650
  6778                           
  6779                           ;sb140_app.c: 427: AnalogChSelType AnalogChSel = {((UINT8)(0)),((UINT8)(0)),((UINT8)(0))
      +                          ,((UINT8)(0)),((UINT8)(0)),((UINT8)(0)),((UINT8)(0)),((UINT8)(0))};
  6780  05CD  3048               	movlw	low App_MainTask@F4181
  6781  05CE  0086               	movwf	6
  6782  05CF  3001               	movlw	high App_MainTask@F4181
  6783  05D0  0087               	movwf	7
  6784  05D1  303E               	movlw	low App_MainTask@AnalogChSel
  6785  05D2  0084               	movwf	4
  6786  05D3  3000               	movlw	high App_MainTask@AnalogChSel
  6787  05D4  0085               	movwf	5
  6788  05D5  300C               	movlw	12
  6789  05D6  00BD               	movwf	??_App_MainTask
  6790  05D7                     u3660:	
  6791  05D7  0016               	moviw fsr1++
  6792  05D8  001A               	movwi fsr0++
  6793  05D9  0BBD               	decfsz	??_App_MainTask,f
  6794  05DA  2DD7               	goto	u3660
  6795                           
  6796                           ;sb140_app.c: 428: AdcConfigType AdcConfig;
  6797                           ;sb140_app.c: 430: switch (SystemState)
  6798  05DB  2E65               	goto	l4797
  6799  05DC                     l950:	
  6800                           ;sb140_app.c: 431: {
  6801                           ;sb140_app.c: 433: case InitializationState:
  6802                           
  6803                           
  6804                           ;sb140_app.c: 435: TRISCbits.TRISC5 = ((UINT8)(0));
  6805  05DC  0021               	movlb	1	; select bank1
  6806  05DD  128E               	bcf	14,5	;volatile
  6807                           
  6808                           ;sb140_app.c: 436: TRISAbits.TRISA5 = ((UINT8)(0));
  6809  05DE  128C               	bcf	12,5	;volatile
  6810                           
  6811                           ;sb140_app.c: 437: TRISAbits.TRISA2 = ((UINT8)(0));
  6812  05DF  110C               	bcf	12,2	;volatile
  6813                           
  6814                           ;sb140_app.c: 438: TRISCbits.TRISC6 = ((UINT8)(0));
  6815  05E0  130E               	bcf	14,6	;volatile
  6816                           
  6817                           ;sb140_app.c: 439: LATCbits.LATC5 = ((UINT8)(0));
  6818  05E1  0022               	movlb	2	; select bank2
  6819  05E2  128E               	bcf	14,5	;volatile
  6820                           
  6821                           ;sb140_app.c: 440: LATAbits.LATA5 = ((UINT8)(0));
  6822  05E3  128C               	bcf	12,5	;volatile
  6823                           
  6824                           ;sb140_app.c: 441: LATAbits.LATA2 = ((UINT8)(0));
  6825  05E4  110C               	bcf	12,2	;volatile
  6826                           
  6827                           ;sb140_app.c: 442: LATCbits.LATC6 = ((UINT8)(0));
  6828  05E5  130E               	bcf	14,6	;volatile
  6829                           
  6830                           ;sb140_app.c: 445: TRISAbits.TRISA4 = ((UINT8)(1));
  6831  05E6  0021               	movlb	1	; select bank1
  6832  05E7  160C               	bsf	12,4	;volatile
  6833                           
  6834                           ;sb140_app.c: 446: TRISCbits.TRISC4 = ((UINT8)(1));
  6835  05E8  160E               	bsf	14,4	;volatile
  6836                           
  6837                           ;sb140_app.c: 447: TRISCbits.TRISC3 = ((UINT8)(1));
  6838  05E9  158E               	bsf	14,3	;volatile
  6839                           
  6840                           ;sb140_app.c: 448: TRISCbits.TRISC7 = ((UINT8)(1));
  6841  05EA  178E               	bsf	14,7	;volatile
  6842                           
  6843                           ;sb140_app.c: 451: WpuCh.WpuA4 = ((UINT8)(1));
  6844  05EB  0020               	movlb	0	; select bank0
  6845  05EC  01D4               	clrf	App_MainTask@WpuCh+4
  6846  05ED  0AD4               	incf	App_MainTask@WpuCh+4,f
  6847                           
  6848                           ;sb140_app.c: 452: WpuCh.WpuC4 = ((UINT8)(1));
  6849  05EE  01DE               	clrf	App_MainTask@WpuCh+14
  6850  05EF  0ADE               	incf	App_MainTask@WpuCh+14,f
  6851                           
  6852                           ;sb140_app.c: 453: WpuCh.WpuC3 = ((UINT8)(1));
  6853  05F0  01DD               	clrf	App_MainTask@WpuCh+13
  6854  05F1  0ADD               	incf	App_MainTask@WpuCh+13,f
  6855                           
  6856                           ;sb140_app.c: 454: WpuCh.WpuC7 = ((UINT8)(1));
  6857  05F2  01E1               	clrf	App_MainTask@WpuCh+17
  6858  05F3  0AE1               	incf	App_MainTask@WpuCh+17,f
  6859                           
  6860                           ;sb140_app.c: 456: Mcu_ConfigPullUps(&WpuCh);
  6861  05F4  3050               	movlw	(low (App_MainTask@WpuCh| 0))& (0+255)
  6862  05F5  3186  266F  3185   	fcall	_Mcu_ConfigPullUps
  6863                           
  6864                           ;sb140_app.c: 457: Mcu_SetPullUpsSts(Mcu_GlobalPuEnabled);
  6865  05F8  3000               	movlw	0
  6866  05F9  3197  2775  3185   	fcall	_Mcu_SetPullUpsSts
  6867                           
  6868                           ;sb140_app.c: 460: Adc_ConfigAnCh(&AnalogChSel);
  6869  05FC  303E               	movlw	(low (App_MainTask@AnalogChSel| 0))& (0+255)
  6870  05FD  318E  260D  3185   	fcall	_Adc_ConfigAnCh
  6871                           
  6872                           ;sb140_app.c: 463: Mcu_SetDieTempSts(((UINT8)(1)));
  6873  0600  3001               	movlw	1
  6874  0601  3197  276D  3185   	fcall	_Mcu_SetDieTempSts
  6875                           
  6876                           ;sb140_app.c: 464: Mcu_SetDieTempMode(((UINT8)(0)));
  6877  0604  3000               	movlw	0
  6878  0605  3197  2765  3185   	fcall	_Mcu_SetDieTempMode
  6879                           
  6880                           ;sb140_app.c: 467: AdcConfig.AdcConvClock = ((UINT8)(3));
  6881  0608  3003               	movlw	3
  6882  0609  0020               	movlb	0	; select bank0
  6883  060A  00BD               	movwf	??_App_MainTask
  6884  060B  083D               	movf	??_App_MainTask,w
  6885  060C  00CC               	movwf	App_MainTask@AdcConfig+2
  6886                           
  6887                           ;sb140_app.c: 468: AdcConfig.AdcIntEnabled = ((UINT8)(0));
  6888  060D  01CF               	clrf	App_MainTask@AdcConfig+5
  6889                           
  6890                           ;sb140_app.c: 469: AdcConfig.AdcNegRef = ((UINT8)(0));
  6891  060E  01CD               	clrf	App_MainTask@AdcConfig+3
  6892                           
  6893                           ;sb140_app.c: 470: AdcConfig.AdcPosRef = ((UINT8)(0));
  6894  060F  01CE               	clrf	App_MainTask@AdcConfig+4
  6895                           
  6896                           ;sb140_app.c: 471: AdcConfig.AdcResultFormat = ((UINT8)(1));
  6897  0610  01CB               	clrf	App_MainTask@AdcConfig+1
  6898  0611  0ACB               	incf	App_MainTask@AdcConfig+1,f
  6899                           
  6900                           ;sb140_app.c: 472: AdcConfig.AdcEnable = ((UINT8)(1));
  6901  0612  01CA               	clrf	App_MainTask@AdcConfig
  6902  0613  0ACA               	incf	App_MainTask@AdcConfig,f
  6903                           
  6904                           ;sb140_app.c: 473: Adc_InitAdcModule(&AdcConfig);
  6905  0614  304A               	movlw	(low (App_MainTask@AdcConfig| 0))& (0+255)
  6906  0615  318B  2387  3185   	fcall	_Adc_InitAdcModule
  6907                           
  6908                           ;sb140_app.c: 475: Hsd1Set.ImpulseState = Imp_Idle;
  6909  0618  0021               	movlb	1	; select bank1
  6910  0619  01B3               	clrf	_Hsd1Set^(0+128)
  6911                           
  6912                           ;sb140_app.c: 476: Hsd1Set.CounterMs = 0;
  6913  061A  01B4               	clrf	(_Hsd1Set^(0+128)+1)
  6914  061B  01B5               	clrf	((_Hsd1Set+1)^(0+128)+1)
  6915                           
  6916                           ;sb140_app.c: 477: Hsd1Set.CounterS = 0;
  6917  061C  01B6               	clrf	(_Hsd1Set^(0+128)+3)
  6918  061D  01B7               	clrf	((_Hsd1Set+1)^(0+128)+3)
  6919                           
  6920                           ;sb140_app.c: 478: Hsd1Set.ImpulseLen = 0;
  6921  061E  01B8               	clrf	(_Hsd1Set^(0+128)+5)
  6922  061F  01B9               	clrf	((_Hsd1Set+1)^(0+128)+5)
  6923                           
  6924                           ;sb140_app.c: 479: Hsd1Set.Channel = ((UINT8)(1));
  6925  0620  01BA               	clrf	(_Hsd1Set^(0+128)+7)
  6926  0621  0ABA               	incf	(_Hsd1Set^(0+128)+7),f
  6927                           
  6928                           ;sb140_app.c: 480: Hsd1Set.StartEvt.EventOptions = 0;
  6929  0622  01BB               	clrf	(_Hsd1Set^(0+128)+8)
  6930                           
  6931                           ;sb140_app.c: 481: Hsd1Set.StartEvt.EventStatus = EventIdle;
  6932  0623  01BC               	clrf	(_Hsd1Set^(0+128)+9)
  6933                           
  6934                           ;sb140_app.c: 483: Hsd2Set.ImpulseState = Imp_Idle;
  6935  0624  01BD               	clrf	_Hsd2Set^(0+128)
  6936                           
  6937                           ;sb140_app.c: 484: Hsd2Set.CounterMs = 0;
  6938  0625  01BE               	clrf	(_Hsd2Set^(0+128)+1)
  6939  0626  01BF               	clrf	((_Hsd2Set+1)^(0+128)+1)
  6940                           
  6941                           ;sb140_app.c: 485: Hsd2Set.CounterS = 0;
  6942  0627  01C0               	clrf	(_Hsd2Set^(0+128)+3)
  6943  0628  01C1               	clrf	((_Hsd2Set+1)^(0+128)+3)
  6944                           
  6945                           ;sb140_app.c: 486: Hsd2Set.ImpulseLen = 0;
  6946  0629  01C2               	clrf	(_Hsd2Set^(0+128)+5)
  6947  062A  01C3               	clrf	((_Hsd2Set+1)^(0+128)+5)
  6948                           
  6949                           ;sb140_app.c: 487: Hsd2Set.Channel = ((UINT8)(2));
  6950  062B  3002               	movlw	2
  6951  062C  0020               	movlb	0	; select bank0
  6952  062D  00BD               	movwf	??_App_MainTask
  6953  062E  083D               	movf	??_App_MainTask,w
  6954  062F  0021               	movlb	1	; select bank1
  6955  0630  00C4               	movwf	(_Hsd2Set^(0+128)+7)
  6956                           
  6957                           ;sb140_app.c: 488: Hsd2Set.StartEvt.EventOptions = 0;
  6958  0631  01C5               	clrf	(_Hsd2Set^(0+128)+8)
  6959                           
  6960                           ;sb140_app.c: 489: Hsd2Set.StartEvt.EventStatus = EventIdle;
  6961  0632  01C6               	clrf	(_Hsd2Set^(0+128)+9)
  6962                           
  6963                           ;sb140_app.c: 491: Hsd3Set.ImpulseState = Imp_Idle;
  6964  0633  01C7               	clrf	_Hsd3Set^(0+128)
  6965                           
  6966                           ;sb140_app.c: 492: Hsd3Set.CounterMs = 0;
  6967  0634  01C8               	clrf	(_Hsd3Set^(0+128)+1)
  6968  0635  01C9               	clrf	((_Hsd3Set+1)^(0+128)+1)
  6969                           
  6970                           ;sb140_app.c: 493: Hsd3Set.CounterS = 0;
  6971  0636  01CA               	clrf	(_Hsd3Set^(0+128)+3)
  6972  0637  01CB               	clrf	((_Hsd3Set+1)^(0+128)+3)
  6973                           
  6974                           ;sb140_app.c: 494: Hsd3Set.ImpulseLen = 0;
  6975  0638  01CC               	clrf	(_Hsd3Set^(0+128)+5)
  6976  0639  01CD               	clrf	((_Hsd3Set+1)^(0+128)+5)
  6977                           
  6978                           ;sb140_app.c: 495: Hsd3Set.Channel = ((UINT8)(3));
  6979  063A  3003               	movlw	3
  6980  063B  0020               	movlb	0	; select bank0
  6981  063C  00BD               	movwf	??_App_MainTask
  6982  063D  083D               	movf	??_App_MainTask,w
  6983  063E  0021               	movlb	1	; select bank1
  6984  063F  00CE               	movwf	(_Hsd3Set^(0+128)+7)
  6985                           
  6986                           ;sb140_app.c: 496: Hsd3Set.StartEvt.EventOptions = 0;
  6987  0640  01CF               	clrf	(_Hsd3Set^(0+128)+8)
  6988                           
  6989                           ;sb140_app.c: 497: Hsd3Set.StartEvt.EventStatus = EventIdle;
  6990  0641  01D0               	clrf	(_Hsd3Set^(0+128)+9)
  6991                           
  6992                           ;sb140_app.c: 499: Hsd4Set.ImpulseState = Imp_Idle;
  6993  0642  01D1               	clrf	_Hsd4Set^(0+128)
  6994                           
  6995                           ;sb140_app.c: 500: Hsd4Set.CounterMs = 0;
  6996  0643  01D2               	clrf	(_Hsd4Set^(0+128)+1)
  6997  0644  01D3               	clrf	((_Hsd4Set+1)^(0+128)+1)
  6998                           
  6999                           ;sb140_app.c: 501: Hsd4Set.CounterS = 0;
  7000  0645  01D4               	clrf	(_Hsd4Set^(0+128)+3)
  7001  0646  01D5               	clrf	((_Hsd4Set+1)^(0+128)+3)
  7002                           
  7003                           ;sb140_app.c: 502: Hsd4Set.ImpulseLen = 0;
  7004  0647  01D6               	clrf	(_Hsd4Set^(0+128)+5)
  7005  0648  01D7               	clrf	((_Hsd4Set+1)^(0+128)+5)
  7006                           
  7007                           ;sb140_app.c: 503: Hsd4Set.Channel = ((UINT8)(4));
  7008  0649  3004               	movlw	4
  7009  064A  0020               	movlb	0	; select bank0
  7010  064B  00BD               	movwf	??_App_MainTask
  7011  064C  083D               	movf	??_App_MainTask,w
  7012  064D  0021               	movlb	1	; select bank1
  7013  064E  00D8               	movwf	(_Hsd4Set^(0+128)+7)
  7014                           
  7015                           ;sb140_app.c: 504: Hsd4Set.StartEvt.EventOptions = 0;
  7016  064F  01D9               	clrf	(_Hsd4Set^(0+128)+8)
  7017                           
  7018                           ;sb140_app.c: 505: Hsd4Set.StartEvt.EventStatus = EventIdle;
  7019  0650  01DA               	clrf	(_Hsd4Set^(0+128)+9)
  7020                           
  7021                           ;sb140_app.c: 507: break;
  7022  0651  0008               	return
  7023  0652                     l4793:	
  7024                           ;sb140_app.c: 510: case RunningState:
  7025                           
  7026                           
  7027                           ;sb140_app.c: 512: AppSm();
  7028  0652  318A  2208  3185   	fcall	_AppSm
  7029                           
  7030                           ;sb140_app.c: 514: GenerateImpulse(&Hsd1Set);
  7031  0655  30B3               	movlw	(low (_Hsd1Set| 0))& (0+255)
  7032  0656  318E  267D  3185   	fcall	_GenerateImpulse
  7033                           
  7034                           ;sb140_app.c: 515: GenerateImpulse(&Hsd2Set);
  7035  0659  30BD               	movlw	(low (_Hsd2Set| 0))& (0+255)
  7036  065A  318E  267D  3185   	fcall	_GenerateImpulse
  7037                           
  7038                           ;sb140_app.c: 516: GenerateImpulse(&Hsd3Set);
  7039  065D  30C7               	movlw	(low (_Hsd3Set| 0))& (0+255)
  7040  065E  318E  267D  3185   	fcall	_GenerateImpulse
  7041                           
  7042                           ;sb140_app.c: 517: GenerateImpulse(&Hsd4Set);
  7043  0661  30D1               	movlw	(low (_Hsd4Set| 0))& (0+255)
  7044  0662  318E  267D         	fcall	_GenerateImpulse
  7045                           
  7046                           ;sb140_app.c: 523: }
  7047                           
  7048                           ;sb140_app.c: 522: break;
  7049                           
  7050                           ;sb140_app.c: 521: default:
  7051                           
  7052                           ;sb140_app.c: 518: break;
  7053  0664  0008               	return
  7054  0665                     l4797:	
  7055  0665  0020               	movlb	0	; select bank0
  7056  0666  086B               	movf	_SystemState,w
  7057                           
  7058                           ; Switch size 1, requested type "space"
  7059                           ; Number of cases is 2, Range of values is 0 to 1
  7060                           ; switch strategies available:
  7061                           ; Name         Instructions Cycles
  7062                           ; simple_byte            7     4 (average)
  7063                           ; direct_byte           10     6 (fixed)
  7064                           ; jumptable            260     6 (fixed)
  7065                           ;	Chosen strategy is simple_byte
  7066  0667  3A00               	xorlw	0	; case 0
  7067  0668  1903               	skipnz
  7068  0669  2DDC               	goto	l950
  7069  066A  3A01               	xorlw	1	; case 1
  7070  066B  1903               	skipnz
  7071  066C  2E52               	goto	l4793
  7072  066D  2E6E               	goto	l954
  7073  066E                     l954:	
  7074  066E  0008               	return
  7075  066F                     __end_of_App_MainTask:	
  7076                           
  7077                           	psect	text17
  7078  0B1F                     __ptext17:	
  7079 ;; *************** function _Led_MainTask *****************
  7080 ;; Defined at:
  7081 ;;		line 185 in file "../../../Framework/MercuryFwk/Source/c/03_Sml/02_Ssl/led.c"
  7082 ;; Parameters:    Size  Location     Type
  7083 ;;  Options         1   28[BANK0 ] unsigned char 
  7084 ;; Auto vars:     Size  Location     Type
  7085 ;;		None
  7086 ;; Return value:  Size  Location     Type
  7087 ;;                  1    wreg      void 
  7088 ;; Registers used:
  7089 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7090 ;; Tracked objects:
  7091 ;;		On entry : 0/0
  7092 ;;		On exit  : 0/0
  7093 ;;		Unchanged: 0/0
  7094 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7095 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7096 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7097 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7098 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7099 ;;Total ram usage:        5 bytes
  7100 ;; Hardware stack levels used:    1
  7101 ;; Hardware stack levels required when called:    5
  7102 ;; This function calls:
  7103 ;;		_LedStateMachine
  7104 ;;		_Led_InitSeq
  7105 ;;		_SetLedBehavSts
  7106 ;; This function is called by:
  7107 ;;		_InitializeTasks
  7108 ;;		_ScheduleTasks
  7109 ;; This function uses a non-reentrant model
  7110 ;;
  7111                           
  7112                           
  7113                           ;psect for function _Led_MainTask
  7114  0B1F                     _Led_MainTask:	
  7115                           
  7116                           ;led.c: 187: switch (SystemState)
  7117                           
  7118                           ;incstack = 0
  7119                           ; Regs used in _Led_MainTask: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  7120  0B1F  2B48               	goto	l4713
  7121  0B20                     l619:	
  7122                           ;led.c: 188: {
  7123                           ;led.c: 190: case InitializationState:
  7124                           
  7125                           
  7126                           ;led.c: 192: TRISBbits.TRISB7 = ((UINT8)(0));
  7127  0B20  0021               	movlb	1	; select bank1
  7128  0B21  138D               	bcf	13,7	;volatile
  7129                           
  7130                           ;led.c: 193: LATBbits.LATB7 = ((UINT8)(0));
  7131  0B22  0022               	movlb	2	; select bank2
  7132  0B23  138D               	bcf	13,7	;volatile
  7133                           
  7134                           ;led.c: 195: SetLedBehavSts(((UINT8)(1)));
  7135  0B24  3001               	movlw	1
  7136  0B25  318B  23BE         	fcall	_SetLedBehavSts
  7137                           
  7138                           ;led.c: 196: break;
  7139  0B27  0008               	return
  7140  0B28                     l4707:	
  7141                           ;led.c: 199: case RunningState:
  7142                           
  7143                           
  7144                           ;led.c: 201: Led_InitSeq();
  7145  0B28  318C  244E  318B   	fcall	_Led_InitSeq
  7146                           
  7147                           ;led.c: 203: LATBbits.LATB7 = LedStateMachine(1u,&Led1Sts,&Led1Blink,&Led1Pulse);
  7148  0B2B  30E9               	movlw	(low (_Led1Sts| 0))& (0+255)
  7149  0B2C  0020               	movlb	0	; select bank0
  7150  0B2D  00BD               	movwf	??_Led_MainTask
  7151  0B2E  083D               	movf	??_Led_MainTask,w
  7152  0B2F  00AB               	movwf	LedStateMachine@LedSts
  7153  0B30  305F               	movlw	(low (_Led1Blink| (0+256)))& (0+255)
  7154  0B31  00BE               	movwf	??_Led_MainTask+1
  7155  0B32  083E               	movf	??_Led_MainTask+1,w
  7156  0B33  00AC               	movwf	LedStateMachine@LedBlink
  7157  0B34  30DB               	movlw	(low (_Led1Pulse| 0))& (0+255)
  7158  0B35  00BF               	movwf	??_Led_MainTask+2
  7159  0B36  083F               	movf	??_Led_MainTask+2,w
  7160  0B37  00AD               	movwf	LedStateMachine@LedPulse
  7161  0B38  3001               	movlw	1
  7162  0B39  318A  22EE         	fcall	_LedStateMachine
  7163  0B3B  0020               	movlb	0	; select bank0
  7164  0B3C  00C0               	movwf	??_Led_MainTask+3
  7165  0B3D  0CC0               	rrf	??_Led_MainTask+3,f
  7166  0B3E  0CC0               	rrf	??_Led_MainTask+3,f
  7167  0B3F  0022               	movlb	2	; select bank2
  7168  0B40  080D               	movf	13,w	;volatile
  7169  0B41  0020               	movlb	0	; select bank0
  7170  0B42  0640               	xorwf	??_Led_MainTask+3,w
  7171  0B43  397F               	andlw	-129
  7172  0B44  0640               	xorwf	??_Led_MainTask+3,w
  7173  0B45  0022               	movlb	2	; select bank2
  7174  0B46  008D               	movwf	13	;volatile
  7175                           
  7176                           ;led.c: 209: }
  7177                           
  7178                           ;led.c: 208: break;
  7179                           
  7180                           ;led.c: 207: default:
  7181                           
  7182                           ;led.c: 204: break;
  7183  0B47  0008               	return
  7184  0B48                     l4713:	
  7185  0B48  0020               	movlb	0	; select bank0
  7186  0B49  086B               	movf	_SystemState,w
  7187                           
  7188                           ; Switch size 1, requested type "space"
  7189                           ; Number of cases is 2, Range of values is 0 to 1
  7190                           ; switch strategies available:
  7191                           ; Name         Instructions Cycles
  7192                           ; simple_byte            7     4 (average)
  7193                           ; direct_byte           10     6 (fixed)
  7194                           ; jumptable            260     6 (fixed)
  7195                           ;	Chosen strategy is simple_byte
  7196  0B4A  3A00               	xorlw	0	; case 0
  7197  0B4B  1903               	skipnz
  7198  0B4C  2B20               	goto	l619
  7199  0B4D  3A01               	xorlw	1	; case 1
  7200  0B4E  1903               	skipnz
  7201  0B4F  2B28               	goto	l4707
  7202  0B50  2B51               	goto	l623
  7203  0B51                     l623:	
  7204  0B51  0008               	return
  7205  0B52                     __end_of_Led_MainTask:	
  7206                           
  7207                           	psect	text18
  7208  086C                     __ptext18:	
  7209 ;; *************** function _I2cSlv_MainTask *****************
  7210 ;; Defined at:
  7211 ;;		line 109 in file "../../../Framework/MercuryFwk/Source/c/03_Sml/01_Pml/01_SlvI2c/i2c_slv.c"
  7212 ;; Parameters:    Size  Location     Type
  7213 ;;  Options         1   28[BANK0 ] unsigned char 
  7214 ;; Auto vars:     Size  Location     Type
  7215 ;;		None
  7216 ;; Return value:  Size  Location     Type
  7217 ;;                  1    wreg      void 
  7218 ;; Registers used:
  7219 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7220 ;; Tracked objects:
  7221 ;;		On entry : 0/0
  7222 ;;		On exit  : 0/0
  7223 ;;		Unchanged: 0/0
  7224 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7225 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7226 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7227 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7228 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7229 ;;Total ram usage:        1 bytes
  7230 ;; Hardware stack levels used:    1
  7231 ;; Hardware stack levels required when called:    4
  7232 ;; This function calls:
  7233 ;;		_I2cSlv_I2cDrvHandle
  7234 ;;		_I2c_InitI2cModule
  7235 ;;		_I2c_SetConfig
  7236 ;; This function is called by:
  7237 ;;		_InitializeTasks
  7238 ;;		_ScheduleTasks
  7239 ;; This function uses a non-reentrant model
  7240 ;;
  7241                           
  7242                           
  7243                           ;psect for function _I2cSlv_MainTask
  7244  086C                     _I2cSlv_MainTask:	
  7245                           
  7246                           ;i2c_slv.c: 111: switch (SystemState)
  7247                           
  7248                           ;incstack = 0
  7249                           ; Regs used in _I2cSlv_MainTask: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  7250  086C  2877               	goto	l4701
  7251  086D                     l4693:	
  7252                           ;i2c_slv.c: 112: {
  7253                           ;i2c_slv.c: 114: case InitializationState:
  7254                           
  7255                           
  7256                           ;i2c_slv.c: 116: I2c_SetConfig();
  7257  086D  3188  2058  3188   	fcall	_I2c_SetConfig
  7258                           
  7259                           ;i2c_slv.c: 118: I2c_InitI2cModule(&I2cConfig);
  7260  0870  3054               	movlw	(low (_I2cConfig| (0+256)))& (0+255)
  7261  0871  3184  2451         	fcall	_I2c_InitI2cModule
  7262                           
  7263                           ;i2c_slv.c: 119: break;
  7264  0873  0008               	return
  7265  0874                     l4697:	
  7266                           ;i2c_slv.c: 122: case RunningState:
  7267                           
  7268                           
  7269                           ;i2c_slv.c: 124: I2cSlv_I2cDrvHandle();
  7270  0874  318F  2772         	fcall	_I2cSlv_I2cDrvHandle
  7271                           
  7272                           ;i2c_slv.c: 130: }
  7273                           
  7274                           ;i2c_slv.c: 129: break;
  7275                           
  7276                           ;i2c_slv.c: 128: default:
  7277                           
  7278                           ;i2c_slv.c: 125: break;
  7279  0876  0008               	return
  7280  0877                     l4701:	
  7281  0877  0020               	movlb	0	; select bank0
  7282  0878  086B               	movf	_SystemState,w
  7283                           
  7284                           ; Switch size 1, requested type "space"
  7285                           ; Number of cases is 2, Range of values is 0 to 1
  7286                           ; switch strategies available:
  7287                           ; Name         Instructions Cycles
  7288                           ; simple_byte            7     4 (average)
  7289                           ; direct_byte           10     6 (fixed)
  7290                           ; jumptable            260     6 (fixed)
  7291                           ;	Chosen strategy is simple_byte
  7292  0879  3A00               	xorlw	0	; case 0
  7293  087A  1903               	skipnz
  7294  087B  286D               	goto	l4693
  7295  087C  3A01               	xorlw	1	; case 1
  7296  087D  1903               	skipnz
  7297  087E  2874               	goto	l4697
  7298  087F  2880               	goto	l538
  7299  0880                     l538:	
  7300  0880  0008               	return
  7301  0881                     __end_of_I2cSlv_MainTask:	
  7302                           
  7303                           	psect	text19
  7304  00B0                     __ptext19:	
  7305 ;; *************** function _I2c_DataReceiveSm *****************
  7306 ;; Defined at:
  7307 ;;		line 298 in file "../../../Framework/MercuryFwk/Source/c/01_Hal/02_Drv/i2c_slv_drv.c"
  7308 ;; Parameters:    Size  Location     Type
  7309 ;;  Options         1   28[BANK0 ] unsigned char 
  7310 ;; Auto vars:     Size  Location     Type
  7311 ;;  Index           1   36[BANK0 ] unsigned char 
  7312 ;; Return value:  Size  Location     Type
  7313 ;;                  1    wreg      void 
  7314 ;; Registers used:
  7315 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7316 ;; Tracked objects:
  7317 ;;		On entry : 0/0
  7318 ;;		On exit  : 0/0
  7319 ;;		Unchanged: 0/0
  7320 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7321 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7322 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7323 ;;      Temps:          0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7324 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7325 ;;Total ram usage:        9 bytes
  7326 ;; Hardware stack levels used:    1
  7327 ;; Hardware stack levels required when called:    3
  7328 ;; This function calls:
  7329 ;;		_CheckAckStatus
  7330 ;;		_CheckByteStatus
  7331 ;;		_CheckStopBitStatus
  7332 ;;		_ClearRxBuffer
  7333 ;;		_ClearTxBuffer
  7334 ;;		_GenerateEvt
  7335 ;;		_Mcu_Reset
  7336 ;;		_ReceiveEvt
  7337 ;; This function is called by:
  7338 ;;		_InitializeTasks
  7339 ;;		_ScheduleTasks
  7340 ;; This function uses a non-reentrant model
  7341 ;;
  7342                           
  7343                           
  7344                           ;psect for function _I2c_DataReceiveSm
  7345  00B0                     _I2c_DataReceiveSm:	
  7346                           
  7347                           ;i2c_slv_drv.c: 301: static I2cRxStateType I2cRxState = CheckRxByte;
  7348                           ;i2c_slv_drv.c: 302: static UINT8 I2cRxAddress;
  7349                           ;i2c_slv_drv.c: 303: static UINT8 I2cRxFlag = ((UINT8)(0));
  7350                           ;i2c_slv_drv.c: 304: static UINT8 OpType;
  7351                           ;i2c_slv_drv.c: 305: static UINT8 RxCounter = 0;
  7352                           ;i2c_slv_drv.c: 306: static UINT8 TxCounter = 0;
  7353                           ;i2c_slv_drv.c: 307: static UINT8 AddressStored = 0;
  7354                           ;i2c_slv_drv.c: 308: static UINT8 ErrorCounter = 0;
  7355                           ;i2c_slv_drv.c: 309: UINT8 Index;
  7356                           ;i2c_slv_drv.c: 311: switch (I2cRxState)
  7357                           
  7358                           ;incstack = 0
  7359                           ; Regs used in _I2c_DataReceiveSm: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  7360  00B0  29A1               	goto	l4671
  7361  00B1                     l4579:	
  7362                           ;i2c_slv_drv.c: 312: {
  7363                           ;i2c_slv_drv.c: 313: case CheckRxByte:
  7364                           
  7365                           
  7366                           ;i2c_slv_drv.c: 315: if (ReceiveEvt(&I2cNewTxNotification))
  7367  00B1  30E3               	movlw	(low (_I2cNewTxNotification| 0))& (0+255)
  7368  00B2  3189  2151  3180   	fcall	_ReceiveEvt
  7369  00B5  3A00               	xorlw	0
  7370  00B6  1903               	skipnz
  7371  00B7  0008               	return
  7372                           
  7373                           ;i2c_slv_drv.c: 316: {
  7374                           ;i2c_slv_drv.c: 318: if (CheckByteStatus() == ((UINT8)(0)))
  7375  00B8  3197  2790  3180   	fcall	_CheckByteStatus
  7376  00BB  3A00               	xorlw	0
  7377  00BC  1D03               	skipz
  7378  00BD  28DB               	goto	l4599
  7379                           
  7380                           ;i2c_slv_drv.c: 319: {
  7381                           ;i2c_slv_drv.c: 320: if (AddressStored == 1)
  7382  00BE  0021               	movlb	1	; select bank1
  7383  00BF  032D               	decf	I2c_DataReceiveSm@AddressStored^(0+128),w
  7384  00C0  1D03               	btfss	3,2
  7385  00C1  28D0               	goto	l4591
  7386                           
  7387                           ;i2c_slv_drv.c: 321: {
  7388                           ;i2c_slv_drv.c: 323: ErrorCounter++;
  7389  00C2  3001               	movlw	1
  7390  00C3  0020               	movlb	0	; select bank0
  7391  00C4  00BD               	movwf	??_I2c_DataReceiveSm
  7392  00C5  083D               	movf	??_I2c_DataReceiveSm,w
  7393  00C6  0021               	movlb	1	; select bank1
  7394  00C7  07AE               	addwf	I2c_DataReceiveSm@ErrorCounter^(0+128),f
  7395                           
  7396                           ;i2c_slv_drv.c: 325: if (ErrorCounter > 10u)
  7397  00C8  300B               	movlw	11
  7398  00C9  022E               	subwf	I2c_DataReceiveSm@ErrorCounter^(0+128),w
  7399  00CA  1C03               	skipc
  7400  00CB  28D2               	goto	l4593
  7401                           
  7402                           ;i2c_slv_drv.c: 326: {
  7403                           ;i2c_slv_drv.c: 327: Mcu_Reset();
  7404  00CC  3197  2738  3180   	fcall	_Mcu_Reset
  7405                           
  7406                           ;i2c_slv_drv.c: 328: }
  7407                           ;i2c_slv_drv.c: 329: }
  7408  00CF  28D2               	goto	l4593
  7409  00D0                     l4591:	
  7410                           
  7411                           ;i2c_slv_drv.c: 330: else
  7412                           ;i2c_slv_drv.c: 331: {
  7413                           ;i2c_slv_drv.c: 333: ErrorCounter = 0;
  7414  00D0  0021               	movlb	1	; select bank1
  7415  00D1  01AE               	clrf	I2c_DataReceiveSm@ErrorCounter^(0+128)
  7416  00D2                     l4593:	
  7417                           
  7418                           ;i2c_slv_drv.c: 334: }
  7419                           ;i2c_slv_drv.c: 336: AddressStored = 1;
  7420  00D2  0021               	movlb	1	; select bank1
  7421  00D3  01AD               	clrf	I2c_DataReceiveSm@AddressStored^(0+128)
  7422  00D4  0AAD               	incf	I2c_DataReceiveSm@AddressStored^(0+128),f
  7423                           
  7424                           ;i2c_slv_drv.c: 338: I2cRxFlag = ((UINT8)(1));
  7425  00D5  01AF               	clrf	I2c_DataReceiveSm@I2cRxFlag^(0+128)
  7426  00D6  0AAF               	incf	I2c_DataReceiveSm@I2cRxFlag^(0+128),f
  7427                           
  7428                           ;i2c_slv_drv.c: 340: I2cRxState = StoreAddrByte;
  7429  00D7  0020               	movlb	0	; select bank0
  7430  00D8  01E4               	clrf	I2c_DataReceiveSm@I2cRxState
  7431  00D9  0AE4               	incf	I2c_DataReceiveSm@I2cRxState,f
  7432                           
  7433                           ;i2c_slv_drv.c: 341: }
  7434  00DA  0008               	return
  7435  00DB                     l4599:	
  7436                           
  7437                           ;i2c_slv_drv.c: 342: else if ((CheckByteStatus() == ((UINT8)(1))) && (I2cRxFlag == ((UIN
      +                          T8)(1))))
  7438  00DB  3197  2790  3180   	fcall	_CheckByteStatus
  7439  00DE  3A01               	xorlw	1
  7440  00DF  1D03               	skipz
  7441  00E0  0008               	return
  7442  00E1  0021               	movlb	1	; select bank1
  7443  00E2  032F               	decf	I2c_DataReceiveSm@I2cRxFlag^(0+128),w
  7444  00E3  1D03               	btfss	3,2
  7445  00E4  0008               	return
  7446                           
  7447                           ;i2c_slv_drv.c: 343: {
  7448                           ;i2c_slv_drv.c: 345: AddressStored = 0;
  7449  00E5  01AD               	clrf	I2c_DataReceiveSm@AddressStored^(0+128)
  7450                           
  7451                           ;i2c_slv_drv.c: 346: if (OpType == ((UINT8)(0)))
  7452  00E6  0020               	movlb	0	; select bank0
  7453  00E7  0865               	movf	I2c_DataReceiveSm@OpType,w
  7454  00E8  1D03               	btfss	3,2
  7455  00E9  28EF               	goto	l4609
  7456                           
  7457                           ;i2c_slv_drv.c: 347: {
  7458                           ;i2c_slv_drv.c: 349: I2cRxState = HandleWrite;
  7459  00EA  3002               	movlw	2
  7460  00EB  00BD               	movwf	??_I2c_DataReceiveSm
  7461  00EC  083D               	movf	??_I2c_DataReceiveSm,w
  7462  00ED  00E4               	movwf	I2c_DataReceiveSm@I2cRxState
  7463                           
  7464                           ;i2c_slv_drv.c: 350: }
  7465  00EE  0008               	return
  7466  00EF                     l4609:	
  7467                           
  7468                           ;i2c_slv_drv.c: 351: else
  7469                           ;i2c_slv_drv.c: 352: {
  7470                           ;i2c_slv_drv.c: 354: I2cRxState = HandleRead;
  7471  00EF  3003               	movlw	3
  7472  00F0  00BD               	movwf	??_I2c_DataReceiveSm
  7473  00F1  083D               	movf	??_I2c_DataReceiveSm,w
  7474  00F2  00E4               	movwf	I2c_DataReceiveSm@I2cRxState
  7475                           
  7476                           ;i2c_slv_drv.c: 360: }
  7477                           ;i2c_slv_drv.c: 361: }
  7478                           ;i2c_slv_drv.c: 362: break;
  7479                           
  7480                           ;i2c_slv_drv.c: 357: else
  7481                           ;i2c_slv_drv.c: 358: {
  7482                           
  7483                           ;i2c_slv_drv.c: 355: }
  7484                           ;i2c_slv_drv.c: 356: }
  7485  00F3  0008               	return
  7486  00F4                     l4611:	
  7487                           ;i2c_slv_drv.c: 364: case StoreAddrByte:
  7488                           
  7489                           
  7490                           ;i2c_slv_drv.c: 366: I2cRxAddress = SSP1BUF;
  7491  00F4  0024               	movlb	4	; select bank4
  7492  00F5  0811               	movf	17,w	;volatile
  7493  00F6  0020               	movlb	0	; select bank0
  7494  00F7  00BD               	movwf	??_I2c_DataReceiveSm
  7495  00F8  083D               	movf	??_I2c_DataReceiveSm,w
  7496  00F9  00E3               	movwf	I2c_DataReceiveSm@I2cRxAddress
  7497                           
  7498                           ;i2c_slv_drv.c: 368: I2cRxAddress = (I2cRxAddress >> ((UINT8)(1)));
  7499  00FA  3663               	lsrf	I2c_DataReceiveSm@I2cRxAddress,w
  7500  00FB  00BD               	movwf	??_I2c_DataReceiveSm
  7501  00FC  083D               	movf	??_I2c_DataReceiveSm,w
  7502  00FD  00E3               	movwf	I2c_DataReceiveSm@I2cRxAddress
  7503                           
  7504                           ;i2c_slv_drv.c: 370: OpType = (SSP1BUF & ((UINT8)(0x01)));
  7505  00FE  0024               	movlb	4	; select bank4
  7506  00FF  0811               	movf	17,w	;volatile
  7507  0100  3901               	andlw	1
  7508  0101  0020               	movlb	0	; select bank0
  7509  0102  00BD               	movwf	??_I2c_DataReceiveSm
  7510  0103  083D               	movf	??_I2c_DataReceiveSm,w
  7511  0104  00E5               	movwf	I2c_DataReceiveSm@OpType
  7512                           
  7513                           ;i2c_slv_drv.c: 372: if (OpType == ((UINT8)(1)))
  7514  0105  0365               	decf	I2c_DataReceiveSm@OpType,w
  7515  0106  1D03               	btfss	3,2
  7516  0107  2915               	goto	l4623
  7517                           
  7518                           ;i2c_slv_drv.c: 373: {
  7519                           ;i2c_slv_drv.c: 375: SSP1BUF = I2cTxBuffer[TxCounter];
  7520  0108  0867               	movf	I2c_DataReceiveSm@TxCounter,w
  7521  0109  3E20               	addlw	(low (_I2cTxBuffer| (0+768)))& (0+255)
  7522  010A  0086               	movwf	6
  7523  010B  3003               	movlw	3	; select bank6/7
  7524  010C  0087               	movwf	7
  7525  010D  0801               	movf	1,w
  7526  010E  0024               	movlb	4	; select bank4
  7527  010F  0091               	movwf	17	;volatile
  7528                           
  7529                           ;i2c_slv_drv.c: 377: TxCounter++;
  7530  0110  3001               	movlw	1
  7531  0111  0020               	movlb	0	; select bank0
  7532  0112  00BD               	movwf	??_I2c_DataReceiveSm
  7533  0113  083D               	movf	??_I2c_DataReceiveSm,w
  7534  0114  07E7               	addwf	I2c_DataReceiveSm@TxCounter,f
  7535  0115                     l4623:	
  7536                           ;i2c_slv_drv.c: 379: else
  7537                           ;i2c_slv_drv.c: 380: {
  7538                           
  7539                           ;i2c_slv_drv.c: 378: }
  7540                           
  7541                           
  7542                           ;i2c_slv_drv.c: 382: }
  7543                           ;i2c_slv_drv.c: 384: I2cRxState = StopClkStretch;
  7544  0115  3004               	movlw	4
  7545  0116  00BD               	movwf	??_I2c_DataReceiveSm
  7546  0117  083D               	movf	??_I2c_DataReceiveSm,w
  7547  0118  00E4               	movwf	I2c_DataReceiveSm@I2cRxState
  7548                           
  7549                           ;i2c_slv_drv.c: 385: break;
  7550  0119  0008               	return
  7551  011A                     l4625:	
  7552                           ;i2c_slv_drv.c: 387: case HandleWrite:
  7553                           
  7554                           
  7555                           ;i2c_slv_drv.c: 389: if (CheckStopBitStatus() == ((UINT8)(1)))
  7556  011A  3197  279A  3180   	fcall	_CheckStopBitStatus
  7557  011D  3A01               	xorlw	1
  7558  011E  1D03               	skipz
  7559  011F  2966               	goto	l4649
  7560                           
  7561                           ;i2c_slv_drv.c: 390: {
  7562                           ;i2c_slv_drv.c: 392: I2cRxFlag = ((UINT8)(0));
  7563  0120  0021               	movlb	1	; select bank1
  7564  0121  01AF               	clrf	I2c_DataReceiveSm@I2cRxFlag^(0+128)
  7565                           
  7566                           ;i2c_slv_drv.c: 394: I2cPacket.Lenght = RxCounter;
  7567  0122  30EF               	movlw	239
  7568  0123  0086               	movwf	6
  7569  0124  3023               	movlw	35
  7570  0125  0087               	movwf	7
  7571  0126  0020               	movlb	0	; select bank0
  7572  0127  0866               	movf	I2c_DataReceiveSm@RxCounter,w
  7573  0128  0081               	movwf	1
  7574                           
  7575                           ;i2c_slv_drv.c: 395: I2cPacket.ReadWrite = ((UINT8)(0));
  7576  0129  309D               	movlw	157
  7577  012A  0086               	movwf	6
  7578  012B  3023               	movlw	35
  7579  012C  0087               	movwf	7
  7580  012D  3141               	addfsr 1,1
  7581  012E  0181               	clrf	1
  7582                           
  7583                           ;i2c_slv_drv.c: 396: I2cPacket.SlaveAddress = I2cRxAddress;
  7584  012F  309D               	movlw	157
  7585  0130  0086               	movwf	6
  7586  0131  3023               	movlw	35
  7587  0132  0087               	movwf	7
  7588  0133  0863               	movf	I2c_DataReceiveSm@I2cRxAddress,w
  7589  0134  3FC0               	movwi [0]fsr1
  7590                           
  7591                           ;i2c_slv_drv.c: 397: for (Index = 0; Index < ((UINT8)(80)); Index++)
  7592  0135  01C4               	clrf	I2c_DataReceiveSm@Index
  7593  0136  3050               	movlw	80
  7594  0137  0244               	subwf	I2c_DataReceiveSm@Index,w
  7595  0138  1803               	btfsc	3,0
  7596  0139  295C               	goto	l4643
  7597  013A                     l4637:	
  7598                           
  7599                           ;i2c_slv_drv.c: 398: {
  7600                           ;i2c_slv_drv.c: 399: I2cPacket.Buffer[Index] = I2cRxBuffer[Index];
  7601  013A  0844               	movf	I2c_DataReceiveSm@Index,w
  7602  013B  3EA0               	addlw	(low (_I2cRxBuffer| (0+768)))& (0+255)
  7603  013C  0086               	movwf	6
  7604  013D  3003               	movlw	3	; select bank7/8
  7605  013E  0087               	movwf	7
  7606  013F  0801               	movf	1,w
  7607  0140  00BD               	movwf	??_I2c_DataReceiveSm
  7608  0141  0844               	movf	I2c_DataReceiveSm@Index,w
  7609  0142  00BE               	movwf	??_I2c_DataReceiveSm+1
  7610  0143  01BF               	clrf	??_I2c_DataReceiveSm+2
  7611  0144  309F               	movlw	159
  7612  0145  00C0               	movwf	??_I2c_DataReceiveSm+3
  7613  0146  3023               	movlw	35
  7614  0147  00C1               	movwf	??_I2c_DataReceiveSm+4
  7615  0148  083E               	movf	??_I2c_DataReceiveSm+1,w
  7616  0149  0740               	addwf	??_I2c_DataReceiveSm+3,w
  7617  014A  00C2               	movwf	??_I2c_DataReceiveSm+5
  7618  014B  083F               	movf	??_I2c_DataReceiveSm+2,w
  7619  014C  3D41               	addwfc	??_I2c_DataReceiveSm+4,w
  7620  014D  00C3               	movwf	??_I2c_DataReceiveSm+6
  7621  014E  0842               	movf	??_I2c_DataReceiveSm+5,w
  7622  014F  0086               	movwf	6
  7623  0150  0843               	movf	??_I2c_DataReceiveSm+6,w
  7624  0151  0087               	movwf	7
  7625  0152  083D               	movf	??_I2c_DataReceiveSm,w
  7626  0153  0081               	movwf	1
  7627  0154  3001               	movlw	1
  7628  0155  00BD               	movwf	??_I2c_DataReceiveSm
  7629  0156  083D               	movf	??_I2c_DataReceiveSm,w
  7630  0157  07C4               	addwf	I2c_DataReceiveSm@Index,f
  7631  0158  3050               	movlw	80
  7632  0159  0244               	subwf	I2c_DataReceiveSm@Index,w
  7633  015A  1C03               	skipc
  7634  015B  293A               	goto	l4637
  7635  015C                     l4643:	
  7636                           
  7637                           ;i2c_slv_drv.c: 400: }
  7638                           ;i2c_slv_drv.c: 403: GenerateEvt(&I2cNewPacketNotification);
  7639  015C  30E1               	movlw	(low (_I2cNewPacketNotification| 0))& (0+255)
  7640  015D  3189  2172  3180   	fcall	_GenerateEvt
  7641                           
  7642                           ;i2c_slv_drv.c: 406: RxCounter = 0;
  7643  0160  0020               	movlb	0	; select bank0
  7644  0161  01E6               	clrf	I2c_DataReceiveSm@RxCounter
  7645                           
  7646                           ;i2c_slv_drv.c: 408: ClearRxBuffer();
  7647  0162  3188  2014  3180   	fcall	_ClearRxBuffer
  7648                           
  7649                           ;i2c_slv_drv.c: 409: }
  7650  0165  2975               	goto	l4653
  7651  0166                     l4649:	
  7652                           
  7653                           ;i2c_slv_drv.c: 410: else
  7654                           ;i2c_slv_drv.c: 411: {
  7655                           ;i2c_slv_drv.c: 413: I2cRxBuffer[RxCounter] = SSP1BUF;
  7656  0166  0024               	movlb	4	; select bank4
  7657  0167  0811               	movf	17,w	;volatile
  7658  0168  0020               	movlb	0	; select bank0
  7659  0169  00BD               	movwf	??_I2c_DataReceiveSm
  7660  016A  0866               	movf	I2c_DataReceiveSm@RxCounter,w
  7661  016B  3EA0               	addlw	(low (_I2cRxBuffer| (0+768)))& (0+255)
  7662  016C  0086               	movwf	6
  7663  016D  3003               	movlw	3	; select bank7/8
  7664  016E  0087               	movwf	7
  7665  016F  083D               	movf	??_I2c_DataReceiveSm,w
  7666  0170  0081               	movwf	1
  7667                           
  7668                           ;i2c_slv_drv.c: 415: RxCounter++;
  7669  0171  3001               	movlw	1
  7670  0172  00BD               	movwf	??_I2c_DataReceiveSm
  7671  0173  083D               	movf	??_I2c_DataReceiveSm,w
  7672  0174  07E6               	addwf	I2c_DataReceiveSm@RxCounter,f
  7673  0175                     l4653:	
  7674                           
  7675                           ;i2c_slv_drv.c: 416: }
  7676                           ;i2c_slv_drv.c: 418: I2cRxState = StopClkStretch;
  7677  0175  3004               	movlw	4
  7678  0176  0020               	movlb	0	; select bank0
  7679  0177  00BD               	movwf	??_I2c_DataReceiveSm
  7680  0178  083D               	movf	??_I2c_DataReceiveSm,w
  7681  0179  00E4               	movwf	I2c_DataReceiveSm@I2cRxState
  7682                           
  7683                           ;i2c_slv_drv.c: 419: break;
  7684  017A  0008               	return
  7685  017B                     l4655:	
  7686                           ;i2c_slv_drv.c: 421: case HandleRead:
  7687                           
  7688                           
  7689                           ;i2c_slv_drv.c: 423: if (CheckAckStatus() == ((UINT8)(0)))
  7690  017B  3197  2786  3180   	fcall	_CheckAckStatus
  7691  017E  3A00               	xorlw	0
  7692  017F  1D03               	skipz
  7693  0180  2990               	goto	l4661
  7694                           
  7695                           ;i2c_slv_drv.c: 424: {
  7696                           ;i2c_slv_drv.c: 426: SSP1BUF = I2cTxBuffer[TxCounter];
  7697  0181  0020               	movlb	0	; select bank0
  7698  0182  0867               	movf	I2c_DataReceiveSm@TxCounter,w
  7699  0183  3E20               	addlw	(low (_I2cTxBuffer| (0+768)))& (0+255)
  7700  0184  0086               	movwf	6
  7701  0185  3003               	movlw	3	; select bank6/7
  7702  0186  0087               	movwf	7
  7703  0187  0801               	movf	1,w
  7704  0188  0024               	movlb	4	; select bank4
  7705  0189  0091               	movwf	17	;volatile
  7706                           
  7707                           ;i2c_slv_drv.c: 428: TxCounter++;
  7708  018A  3001               	movlw	1
  7709  018B  0020               	movlb	0	; select bank0
  7710  018C  00BD               	movwf	??_I2c_DataReceiveSm
  7711  018D  083D               	movf	??_I2c_DataReceiveSm,w
  7712  018E  07E7               	addwf	I2c_DataReceiveSm@TxCounter,f
  7713                           
  7714                           ;i2c_slv_drv.c: 429: }
  7715  018F  2996               	goto	l4665
  7716  0190                     l4661:	
  7717                           
  7718                           ;i2c_slv_drv.c: 430: else
  7719                           ;i2c_slv_drv.c: 431: {
  7720                           ;i2c_slv_drv.c: 433: TxCounter = 0;
  7721  0190  0020               	movlb	0	; select bank0
  7722  0191  01E7               	clrf	I2c_DataReceiveSm@TxCounter
  7723                           
  7724                           ;i2c_slv_drv.c: 435: I2cRxFlag = ((UINT8)(0));
  7725  0192  0021               	movlb	1	; select bank1
  7726  0193  01AF               	clrf	I2c_DataReceiveSm@I2cRxFlag^(0+128)
  7727                           
  7728                           ;i2c_slv_drv.c: 437: ClearTxBuffer();
  7729  0194  3188  2024         	fcall	_ClearTxBuffer
  7730  0196                     l4665:	
  7731                           
  7732                           ;i2c_slv_drv.c: 439: }
  7733                           ;i2c_slv_drv.c: 441: I2cRxState = StopClkStretch;
  7734  0196  3004               	movlw	4
  7735  0197  0020               	movlb	0	; select bank0
  7736  0198  00BD               	movwf	??_I2c_DataReceiveSm
  7737  0199  083D               	movf	??_I2c_DataReceiveSm,w
  7738  019A  00E4               	movwf	I2c_DataReceiveSm@I2cRxState
  7739                           
  7740                           ;i2c_slv_drv.c: 442: break;
  7741  019B  0008               	return
  7742  019C                     l137:	
  7743                           ;i2c_slv_drv.c: 444: case StopClkStretch:
  7744                           
  7745                           
  7746                           ;i2c_slv_drv.c: 446: SSP1CON1bits.CKP = ((UINT8)(1));
  7747  019C  0024               	movlb	4	; select bank4
  7748  019D  1615               	bsf	21,4	;volatile
  7749                           
  7750                           ;i2c_slv_drv.c: 448: I2cRxState = CheckRxByte;
  7751  019E  0020               	movlb	0	; select bank0
  7752  019F  01E4               	clrf	I2c_DataReceiveSm@I2cRxState
  7753                           
  7754                           ;i2c_slv_drv.c: 453: }
  7755                           
  7756                           ;i2c_slv_drv.c: 452: break;
  7757                           
  7758                           ;i2c_slv_drv.c: 451: default:
  7759                           
  7760                           ;i2c_slv_drv.c: 449: break;
  7761  01A0  0008               	return
  7762  01A1                     l4671:	
  7763  01A1  0020               	movlb	0	; select bank0
  7764  01A2  0864               	movf	I2c_DataReceiveSm@I2cRxState,w
  7765                           
  7766                           ; Switch size 1, requested type "space"
  7767                           ; Number of cases is 5, Range of values is 0 to 4
  7768                           ; switch strategies available:
  7769                           ; Name         Instructions Cycles
  7770                           ; direct_byte           16     6 (fixed)
  7771                           ; simple_byte           16     9 (average)
  7772                           ; jumptable            260     6 (fixed)
  7773                           ;	Chosen strategy is direct_byte
  7774  01A3  0084               	movwf	4
  7775  01A4  3005               	movlw	5
  7776  01A5  0204               	subwf	4,w
  7777  01A6  1803               	skipnc
  7778  01A7  0008               	return
  7779  01A8  3190               	movlp	high S4879
  7780  01A9  3504               	lslf	4,w
  7781  01AA  3E28               	addlw	low S4879
  7782  01AB  0082               	movwf	2
  7783  01AC  0008               	return
  7784  01AD                     __end_of_I2c_DataReceiveSm:	
  7785                           
  7786                           	psect	swtext1
  7787  1028                     __pswtext1:	
  7788  1028                     S4879:	
  7789  1028  3180  28B1         	ljmp	l4579
  7790  102A  3180  28F4         	ljmp	l4611
  7791  102C  3181  291A         	ljmp	l4625
  7792  102E  3181  297B         	ljmp	l4655
  7793  1030  3181  299C         	ljmp	l137
  7794                           
  7795                           	psect	text20
  7796  0881                     __ptext20:	
  7797 ;; *************** function _Wdg_MainTask *****************
  7798 ;; Defined at:
  7799 ;;		line 73 in file "../../../Framework/MercuryFwk/Source/c/03_Sml/02_Ssl/wdg.c"
  7800 ;; Parameters:    Size  Location     Type
  7801 ;;  Options         1   28[BANK0 ] unsigned char 
  7802 ;; Auto vars:     Size  Location     Type
  7803 ;;		None
  7804 ;; Return value:  Size  Location     Type
  7805 ;;                  1    wreg      void 
  7806 ;; Registers used:
  7807 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  7808 ;; Tracked objects:
  7809 ;;		On entry : 0/0
  7810 ;;		On exit  : 0/0
  7811 ;;		Unchanged: 0/0
  7812 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7813 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7814 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7815 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7816 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7817 ;;Total ram usage:        1 bytes
  7818 ;; Hardware stack levels used:    1
  7819 ;; Hardware stack levels required when called:    3
  7820 ;; This function calls:
  7821 ;;		_Mcu_ClearWdg
  7822 ;;		_Mcu_SetWdgPeriod
  7823 ;;		_Mcu_SetWdgSts
  7824 ;; This function is called by:
  7825 ;;		_InitializeTasks
  7826 ;;		_ScheduleTasks
  7827 ;; This function uses a non-reentrant model
  7828 ;;
  7829                           
  7830                           
  7831                           ;psect for function _Wdg_MainTask
  7832  0881                     _Wdg_MainTask:	
  7833                           
  7834                           ;wdg.c: 75: switch (SystemState)
  7835                           
  7836                           ;incstack = 0
  7837                           ; Regs used in _Wdg_MainTask: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  7838  0881  288D               	goto	l3723
  7839  0882                     l3717:	
  7840                           ;wdg.c: 76: {
  7841                           ;wdg.c: 78: case InitializationState:
  7842                           
  7843                           
  7844                           ;wdg.c: 80: Mcu_SetWdgPeriod(WdgPer_2s);
  7845  0882  300B               	movlw	11
  7846  0883  3197  27A4  3188   	fcall	_Mcu_SetWdgPeriod
  7847                           
  7848                           ;wdg.c: 82: Mcu_SetWdgSts(((UINT8)(1)));
  7849  0886  3001               	movlw	1
  7850  0887  3197  275D         	fcall	_Mcu_SetWdgSts
  7851                           
  7852                           ;wdg.c: 83: break;
  7853  0889  0008               	return
  7854  088A                     l3719:	
  7855                           ;wdg.c: 86: case RunningState:
  7856                           
  7857                           
  7858                           ;wdg.c: 88: Mcu_ClearWdg();
  7859  088A  3197  273A         	fcall	_Mcu_ClearWdg
  7860                           
  7861                           ;wdg.c: 94: }
  7862                           
  7863                           ;wdg.c: 93: break;
  7864                           
  7865                           ;wdg.c: 92: default:
  7866                           
  7867                           ;wdg.c: 89: break;
  7868  088C  0008               	return
  7869  088D                     l3723:	
  7870  088D  0020               	movlb	0	; select bank0
  7871  088E  086B               	movf	_SystemState,w
  7872                           
  7873                           ; Switch size 1, requested type "space"
  7874                           ; Number of cases is 2, Range of values is 0 to 1
  7875                           ; switch strategies available:
  7876                           ; Name         Instructions Cycles
  7877                           ; simple_byte            7     4 (average)
  7878                           ; direct_byte           10     6 (fixed)
  7879                           ; jumptable            260     6 (fixed)
  7880                           ;	Chosen strategy is simple_byte
  7881  088F  3A00               	xorlw	0	; case 0
  7882  0890  1903               	skipnz
  7883  0891  2882               	goto	l3717
  7884  0892  3A01               	xorlw	1	; case 1
  7885  0893  1903               	skipnz
  7886  0894  288A               	goto	l3719
  7887  0895  2896               	goto	l817
  7888  0896                     l817:	
  7889  0896  0008               	return
  7890  0897                     __end_of_Wdg_MainTask:	
  7891                           
  7892                           	psect	text21
  7893  17A4                     __ptext21:	
  7894 ;; *************** function _Mcu_SetWdgPeriod *****************
  7895 ;; Defined at:
  7896 ;;		line 223 in file "../../../Framework/MercuryFwk/Source/c/01_Hal/02_Drv/mcu_drv.c"
  7897 ;; Parameters:    Size  Location     Type
  7898 ;;  WdgPeriod       1    wreg     enum E3675
  7899 ;; Auto vars:     Size  Location     Type
  7900 ;;  WdgPeriod       1    5[COMMON] enum E3675
  7901 ;; Return value:  Size  Location     Type
  7902 ;;                  1    wreg      void 
  7903 ;; Registers used:
  7904 ;;		wreg, status,2, status,0
  7905 ;; Tracked objects:
  7906 ;;		On entry : 0/0
  7907 ;;		On exit  : 0/0
  7908 ;;		Unchanged: 0/0
  7909 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7910 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7911 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7912 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7913 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7914 ;;Total ram usage:        2 bytes
  7915 ;; Hardware stack levels used:    1
  7916 ;; Hardware stack levels required when called:    2
  7917 ;; This function calls:
  7918 ;;		Nothing
  7919 ;; This function is called by:
  7920 ;;		_Wdg_MainTask
  7921 ;; This function uses a non-reentrant model
  7922 ;;
  7923                           
  7924                           
  7925                           ;psect for function _Mcu_SetWdgPeriod
  7926  17A4                     _Mcu_SetWdgPeriod:	
  7927                           
  7928                           ;incstack = 0
  7929                           ; Regs used in _Mcu_SetWdgPeriod: [wreg+status,2+status,0]
  7930                           ;Mcu_SetWdgPeriod@WdgPeriod stored from wreg
  7931  17A4  00F5               	movwf	Mcu_SetWdgPeriod@WdgPeriod
  7932                           
  7933                           ;mcu_drv.c: 226: WDTCONbits.WDTPS = WdgPeriod;
  7934  17A5  0875               	movf	Mcu_SetWdgPeriod@WdgPeriod,w
  7935  17A6  00F4               	movwf	??_Mcu_SetWdgPeriod
  7936  17A7  0DF4               	rlf	??_Mcu_SetWdgPeriod,f
  7937  17A8  0021               	movlb	1	; select bank1
  7938  17A9  0817               	movf	23,w	;volatile
  7939  17AA  0674               	xorwf	??_Mcu_SetWdgPeriod,w
  7940  17AB  39C1               	andlw	-63
  7941  17AC  0674               	xorwf	??_Mcu_SetWdgPeriod,w
  7942  17AD  0097               	movwf	23	;volatile
  7943  17AE  0008               	return
  7944  17AF                     __end_of_Mcu_SetWdgPeriod:	
  7945                           
  7946                           	psect	text22
  7947  173A                     __ptext22:	
  7948 ;; *************** function _Mcu_ClearWdg *****************
  7949 ;; Defined at:
  7950 ;;		line 251 in file "../../../Framework/MercuryFwk/Source/c/01_Hal/02_Drv/mcu_drv.c"
  7951 ;; Parameters:    Size  Location     Type
  7952 ;;		None
  7953 ;; Auto vars:     Size  Location     Type
  7954 ;;		None
  7955 ;; Return value:  Size  Location     Type
  7956 ;;                  1    wreg      void 
  7957 ;; Registers used:
  7958 ;;		None
  7959 ;; Tracked objects:
  7960 ;;		On entry : 0/0
  7961 ;;		On exit  : 0/0
  7962 ;;		Unchanged: 0/0
  7963 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7964 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7965 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7966 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7967 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7968 ;;Total ram usage:        0 bytes
  7969 ;; Hardware stack levels used:    1
  7970 ;; Hardware stack levels required when called:    2
  7971 ;; This function calls:
  7972 ;;		Nothing
  7973 ;; This function is called by:
  7974 ;;		_Wdg_MainTask
  7975 ;; This function uses a non-reentrant model
  7976 ;;
  7977                           
  7978                           
  7979                           ;psect for function _Mcu_ClearWdg
  7980  173A                     _Mcu_ClearWdg:	
  7981                           
  7982                           ;incstack = 0
  7983                           ; Regs used in _Mcu_ClearWdg: []
  7984  173A  0064               	clrwdt	;# 
  7985  173B  0008               	return
  7986  173C                     __end_of_Mcu_ClearWdg:	
  7987                           
  7988                           	psect	text23
  7989  0C4E                     __ptext23:	
  7990 ;; *************** function _Led_InitSeq *****************
  7991 ;; Defined at:
  7992 ;;		line 128 in file "../../../Framework/MercuryFwk/Source/c/03_Sml/02_Ssl/led.c"
  7993 ;; Parameters:    Size  Location     Type
  7994 ;;		None
  7995 ;; Auto vars:     Size  Location     Type
  7996 ;;		None
  7997 ;; Return value:  Size  Location     Type
  7998 ;;                  1    wreg      void 
  7999 ;; Registers used:
  8000 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  8001 ;; Tracked objects:
  8002 ;;		On entry : 0/0
  8003 ;;		On exit  : 0/0
  8004 ;;		Unchanged: 0/0
  8005 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8006 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8007 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8008 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8009 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8010 ;;Total ram usage:        1 bytes
  8011 ;; Hardware stack levels used:    1
  8012 ;; Hardware stack levels required when called:    3
  8013 ;; This function calls:
  8014 ;;		_Led_SetLedStatus
  8015 ;; This function is called by:
  8016 ;;		_Led_MainTask
  8017 ;; This function uses a non-reentrant model
  8018 ;;
  8019                           
  8020                           
  8021                           ;psect for function _Led_InitSeq
  8022  0C4E                     _Led_InitSeq:	
  8023                           
  8024                           ;led.c: 130: static UINT16 DelayCounter = 0;
  8025                           ;led.c: 131: static UINT8 Counter = 0;
  8026                           ;led.c: 132: static UINT8 LedInitSts = LED_STS_ON;
  8027                           ;led.c: 133: static InitSeqStateType InitSeqState = Startup;
  8028                           ;led.c: 135: switch (InitSeqState)
  8029                           
  8030                           ;incstack = 0
  8031                           ; Regs used in _Led_InitSeq: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  8032  0C4E  2C90               	goto	l4527
  8033  0C4F                     l4505:	
  8034                           ;led.c: 136: {
  8035                           ;led.c: 137: case Startup:
  8036                           
  8037                           
  8038                           ;led.c: 139: Led_SetLedStatus(1u,LedInitSts);
  8039  0C4F  0878               	movf	Led_InitSeq@LedInitSts,w
  8040  0C50  0020               	movlb	0	; select bank0
  8041  0C51  00A1               	movwf	??_Led_InitSeq
  8042  0C52  0821               	movf	??_Led_InitSeq,w
  8043  0C53  00F4               	movwf	Led_SetLedStatus@LedSts
  8044  0C54  3001               	movlw	1
  8045  0C55  3197  27E0         	fcall	_Led_SetLedStatus
  8046                           
  8047                           ;led.c: 141: InitSeqState = Initializing;
  8048  0C57  0021               	movlb	1	; select bank1
  8049  0C58  01B1               	clrf	Led_InitSeq@InitSeqState^(0+128)
  8050  0C59  0AB1               	incf	Led_InitSeq@InitSeqState^(0+128),f
  8051                           
  8052                           ;led.c: 142: break;
  8053  0C5A  0008               	return
  8054  0C5B                     l4509:	
  8055                           ;led.c: 144: case Initializing:
  8056                           
  8057                           
  8058                           ;led.c: 146: DelayCounter++;
  8059  0C5B  3001               	movlw	1
  8060  0C5C  07A0               	addwf	Led_InitSeq@DelayCounter^(0+128),f
  8061  0C5D  3000               	movlw	0
  8062  0C5E  3DA1               	addwfc	(Led_InitSeq@DelayCounter+1)^(0+128),f
  8063                           
  8064                           ;led.c: 148: if (DelayCounter > (50u)/(((UINT16)(10))))
  8065  0C5F  3000               	movlw	0
  8066  0C60  0221               	subwf	(Led_InitSeq@DelayCounter+1)^(0+128),w
  8067  0C61  3006               	movlw	6
  8068  0C62  1903               	skipnz
  8069  0C63  0220               	subwf	Led_InitSeq@DelayCounter^(0+128),w
  8070  0C64  1C03               	skipc
  8071  0C65  0008               	return
  8072                           
  8073                           ;led.c: 149: {
  8074                           ;led.c: 151: LedInitSts = !LedInitSts;
  8075  0C66  0878               	movf	Led_InitSeq@LedInitSts,w
  8076  0C67  1D03               	btfss	3,2
  8077  0C68  2C6B               	goto	u3430
  8078  0C69  3001               	movlw	1
  8079  0C6A  2C6C               	goto	u3440
  8080  0C6B                     u3430:	
  8081  0C6B  3000               	movlw	0
  8082  0C6C                     u3440:	
  8083  0C6C  0020               	movlb	0	; select bank0
  8084  0C6D  00A1               	movwf	??_Led_InitSeq
  8085  0C6E  0821               	movf	??_Led_InitSeq,w
  8086  0C6F  00F8               	movwf	Led_InitSeq@LedInitSts
  8087                           
  8088                           ;led.c: 153: Led_SetLedStatus(1u,LedInitSts);
  8089  0C70  0878               	movf	Led_InitSeq@LedInitSts,w
  8090  0C71  00A1               	movwf	??_Led_InitSeq
  8091  0C72  0821               	movf	??_Led_InitSeq,w
  8092  0C73  00F4               	movwf	Led_SetLedStatus@LedSts
  8093  0C74  3001               	movlw	1
  8094  0C75  3197  27E0  318C   	fcall	_Led_SetLedStatus
  8095                           
  8096                           ;led.c: 155: DelayCounter = 0;
  8097  0C78  0021               	movlb	1	; select bank1
  8098  0C79  01A0               	clrf	Led_InitSeq@DelayCounter^(0+128)
  8099  0C7A  01A1               	clrf	(Led_InitSeq@DelayCounter+1)^(0+128)
  8100                           
  8101                           ;led.c: 157: Counter++;
  8102  0C7B  3001               	movlw	1
  8103  0C7C  0020               	movlb	0	; select bank0
  8104  0C7D  00A1               	movwf	??_Led_InitSeq
  8105  0C7E  0821               	movf	??_Led_InitSeq,w
  8106  0C7F  0021               	movlb	1	; select bank1
  8107  0C80  07B0               	addwf	Led_InitSeq@Counter^(0+128),f
  8108                           
  8109                           ;led.c: 159: if (Counter > 5u)
  8110  0C81  3006               	movlw	6
  8111  0C82  0230               	subwf	Led_InitSeq@Counter^(0+128),w
  8112  0C83  1C03               	skipc
  8113  0C84  0008               	return
  8114                           
  8115                           ;led.c: 160: {
  8116                           ;led.c: 162: Led_SetLedStatus(1u,LED_STS_OFF);
  8117  0C85  01F4               	clrf	Led_SetLedStatus@LedSts
  8118  0C86  3001               	movlw	1
  8119  0C87  3197  27E0         	fcall	_Led_SetLedStatus
  8120                           
  8121                           ;led.c: 164: InitSeqState = Done;
  8122  0C89  3002               	movlw	2
  8123  0C8A  0020               	movlb	0	; select bank0
  8124  0C8B  00A1               	movwf	??_Led_InitSeq
  8125  0C8C  0821               	movf	??_Led_InitSeq,w
  8126  0C8D  0021               	movlb	1	; select bank1
  8127  0C8E  00B1               	movwf	Led_InitSeq@InitSeqState^(0+128)
  8128                           
  8129                           ;led.c: 174: }
  8130                           
  8131                           ;led.c: 173: break;
  8132                           
  8133                           ;led.c: 172: default:
  8134                           
  8135                           ;led.c: 170: break;
  8136                           
  8137                           ;led.c: 169: case Done:
  8138                           
  8139                           ;led.c: 165: }
  8140                           ;led.c: 166: }
  8141                           ;led.c: 167: break;
  8142  0C8F  0008               	return
  8143  0C90                     l4527:	
  8144  0C90  0021               	movlb	1	; select bank1
  8145  0C91  0831               	movf	Led_InitSeq@InitSeqState^(0+128),w
  8146                           
  8147                           ; Switch size 1, requested type "space"
  8148                           ; Number of cases is 3, Range of values is 0 to 2
  8149                           ; switch strategies available:
  8150                           ; Name         Instructions Cycles
  8151                           ; simple_byte           10     6 (average)
  8152                           ; direct_byte           12     6 (fixed)
  8153                           ; jumptable            260     6 (fixed)
  8154                           ;	Chosen strategy is simple_byte
  8155  0C92  3A00               	xorlw	0	; case 0
  8156  0C93  1903               	skipnz
  8157  0C94  2C4F               	goto	l4505
  8158  0C95  3A01               	xorlw	1	; case 1
  8159  0C96  1903               	skipnz
  8160  0C97  2C5B               	goto	l4509
  8161  0C98  3A03               	xorlw	3	; case 2
  8162  0C99  1903               	skipnz
  8163  0C9A  2C9C               	goto	l615
  8164  0C9B  2C9C               	goto	l615
  8165  0C9C                     l615:	
  8166  0C9C  0008               	return
  8167  0C9D                     __end_of_Led_InitSeq:	
  8168                           
  8169                           	psect	text24
  8170  0AEE                     __ptext24:	
  8171 ;; *************** function _LedStateMachine *****************
  8172 ;; Defined at:
  8173 ;;		line 82 in file "../../../Framework/MercuryFwk/Source/c/03_Sml/02_Ssl/led.c"
  8174 ;; Parameters:    Size  Location     Type
  8175 ;;  Led             1    wreg     unsigned char 
  8176 ;;  LedSts          1   11[BANK0 ] PTR enum E4026
  8177 ;;		 -> Led1Sts(1), 
  8178 ;;  LedBlink        1   12[BANK0 ] PTR struct _LedBlinkType
  8179 ;;		 -> Led1Blink(9), 
  8180 ;;  LedPulse        1   13[BANK0 ] PTR struct _LedPulseType
  8181 ;;		 -> Led1Pulse(6), 
  8182 ;; Auto vars:     Size  Location     Type
  8183 ;;  Led             1   16[BANK0 ] unsigned char 
  8184 ;;  LedOutSts       1   17[BANK0 ] unsigned char 
  8185 ;; Return value:  Size  Location     Type
  8186 ;;                  1    wreg      unsigned char 
  8187 ;; Registers used:
  8188 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8189 ;; Tracked objects:
  8190 ;;		On entry : 0/0
  8191 ;;		On exit  : 0/0
  8192 ;;		Unchanged: 0/0
  8193 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8194 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8195 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8196 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8197 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8198 ;;Total ram usage:        7 bytes
  8199 ;; Hardware stack levels used:    1
  8200 ;; Hardware stack levels required when called:    4
  8201 ;; This function calls:
  8202 ;;		_LedBlinkStateMachine
  8203 ;;		_LedPulseStateMachine
  8204 ;; This function is called by:
  8205 ;;		_Led_MainTask
  8206 ;; This function uses a non-reentrant model
  8207 ;;
  8208                           
  8209                           
  8210                           ;psect for function _LedStateMachine
  8211  0AEE                     _LedStateMachine:	
  8212                           
  8213                           ;incstack = 0
  8214                           ; Regs used in _LedStateMachine: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  8215                           ;LedStateMachine@Led stored from wreg
  8216  0AEE  0020               	movlb	0	; select bank0
  8217  0AEF  00B0               	movwf	LedStateMachine@Led
  8218                           
  8219                           ;led.c: 85: UINT8 LedOutSts = 0u;
  8220  0AF0  01B1               	clrf	LedStateMachine@LedOutSts
  8221                           
  8222                           ;led.c: 88: switch (*LedSts)
  8223  0AF1  2B0C               	goto	l4497
  8224  0AF2                     l4489:	
  8225                           ;led.c: 89: {
  8226                           ;led.c: 90: case LED_STS_OFF:
  8227                           
  8228                           
  8229                           ;led.c: 92: LedOutSts = ((UINT8)(0));
  8230  0AF2  01B1               	clrf	LedStateMachine@LedOutSts
  8231                           
  8232                           ;led.c: 93: break;
  8233  0AF3  2B1D               	goto	l4499
  8234  0AF4                     l592:	
  8235                           ;led.c: 95: case LED_STS_ON:
  8236                           
  8237                           
  8238                           ;led.c: 97: LedOutSts = ((UINT8)(1));
  8239  0AF4  01B1               	clrf	LedStateMachine@LedOutSts
  8240  0AF5  0AB1               	incf	LedStateMachine@LedOutSts,f
  8241                           
  8242                           ;led.c: 98: break;
  8243  0AF6  2B1D               	goto	l4499
  8244  0AF7                     l4491:	
  8245                           ;led.c: 100: case LED_STS_BLINK:
  8246                           
  8247                           
  8248                           ;led.c: 102: LedOutSts = LedBlinkStateMachine(LedBlink);
  8249  0AF7  082C               	movf	LedStateMachine@LedBlink,w
  8250  0AF8  3187  2715  318A   	fcall	_LedBlinkStateMachine
  8251  0AFB  0020               	movlb	0	; select bank0
  8252  0AFC  00AE               	movwf	??_LedStateMachine
  8253  0AFD  082E               	movf	??_LedStateMachine,w
  8254  0AFE  2B0A               	goto	L7
  8255  0AFF                     l4493:	
  8256                           ;led.c: 105: case LED_STS_PULSE:
  8257                           
  8258                           ;led.c: 103: break;
  8259                           
  8260                           
  8261                           ;led.c: 107: LedOutSts = LedPulseStateMachine(LedPulse, Led);
  8262  0AFF  0830               	movf	LedStateMachine@Led,w
  8263  0B00  00AE               	movwf	??_LedStateMachine
  8264  0B01  082E               	movf	??_LedStateMachine,w
  8265  0B02  00A7               	movwf	LedPulseStateMachine@Led
  8266  0B03  082D               	movf	LedStateMachine@LedPulse,w
  8267  0B04  318D  25A5  318A   	fcall	_LedPulseStateMachine
  8268  0B07  0020               	movlb	0	; select bank0
  8269  0B08  00AF               	movwf	??_LedStateMachine+1
  8270  0B09  082F               	movf	??_LedStateMachine+1,w
  8271  0B0A                     L7:	
  8272  0B0A  00B1               	movwf	LedStateMachine@LedOutSts
  8273                           
  8274                           ;led.c: 112: }
  8275                           
  8276                           ;led.c: 111: break;
  8277                           
  8278                           ;led.c: 110: default:
  8279                           
  8280                           ;led.c: 108: break;
  8281  0B0B  2B1D               	goto	l4499
  8282  0B0C                     l4497:	
  8283  0B0C  082B               	movf	LedStateMachine@LedSts,w
  8284  0B0D  0086               	movwf	6
  8285  0B0E  0187               	clrf	7
  8286  0B0F  0801               	movf	1,w
  8287                           
  8288                           ; Switch size 1, requested type "space"
  8289                           ; Number of cases is 4, Range of values is 0 to 3
  8290                           ; switch strategies available:
  8291                           ; Name         Instructions Cycles
  8292                           ; simple_byte           13     7 (average)
  8293                           ; direct_byte           14     6 (fixed)
  8294                           ; jumptable            260     6 (fixed)
  8295                           ;	Chosen strategy is simple_byte
  8296  0B10  3A00               	xorlw	0	; case 0
  8297  0B11  1903               	skipnz
  8298  0B12  2AF2               	goto	l4489
  8299  0B13  3A01               	xorlw	1	; case 1
  8300  0B14  1903               	skipnz
  8301  0B15  2AF4               	goto	l592
  8302  0B16  3A03               	xorlw	3	; case 2
  8303  0B17  1903               	skipnz
  8304  0B18  2AF7               	goto	l4491
  8305  0B19  3A01               	xorlw	1	; case 3
  8306  0B1A  1903               	skipnz
  8307  0B1B  2AFF               	goto	l4493
  8308  0B1C  2B1D               	goto	l4499
  8309  0B1D                     l4499:	
  8310                           
  8311                           ;led.c: 114: return LedOutSts;
  8312  0B1D  0831               	movf	LedStateMachine@LedOutSts,w
  8313  0B1E  0008               	return
  8314  0B1F                     __end_of_LedStateMachine:	
  8315                           
  8316                           	psect	text25
  8317  0DA5                     __ptext25:	
  8318 ;; *************** function _LedPulseStateMachine *****************
  8319 ;; Defined at:
  8320 ;;		line 131 in file "../../../Framework/MercuryFwk/Source/c/01_Hal/02_Drv/led_drv.c"
  8321 ;; Parameters:    Size  Location     Type
  8322 ;;  LedPulse        1    wreg     PTR struct _LedPulseType
  8323 ;;		 -> Led1Pulse(6), 
  8324 ;;  Led             1    7[BANK0 ] unsigned char 
  8325 ;; Auto vars:     Size  Location     Type
  8326 ;;  LedPulse        1   10[BANK0 ] PTR struct _LedPulseType
  8327 ;;		 -> Led1Pulse(6), 
  8328 ;; Return value:  Size  Location     Type
  8329 ;;                  1    wreg      unsigned char 
  8330 ;; Registers used:
  8331 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8332 ;; Tracked objects:
  8333 ;;		On entry : 0/0
  8334 ;;		On exit  : 0/0
  8335 ;;		Unchanged: 0/0
  8336 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8337 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8338 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8339 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8340 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8341 ;;Total ram usage:        4 bytes
  8342 ;; Hardware stack levels used:    1
  8343 ;; Hardware stack levels required when called:    3
  8344 ;; This function calls:
  8345 ;;		_Led_SetLedStatus
  8346 ;;		___lwdiv
  8347 ;; This function is called by:
  8348 ;;		_LedStateMachine
  8349 ;; This function uses a non-reentrant model
  8350 ;;
  8351                           
  8352                           
  8353                           ;psect for function _LedPulseStateMachine
  8354  0DA5                     _LedPulseStateMachine:	
  8355                           
  8356                           ;incstack = 0
  8357                           ; Regs used in _LedPulseStateMachine: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  8358                           ;LedPulseStateMachine@LedPulse stored from wreg
  8359  0DA5  0020               	movlb	0	; select bank0
  8360  0DA6  00AA               	movwf	LedPulseStateMachine@LedPulse
  8361                           
  8362                           ;led_drv.c: 134: switch (LedPulse->LedPulseState)
  8363  0DA7  2DF8               	goto	l4295
  8364  0DA8                     l4277:	
  8365                           ;led_drv.c: 135: {
  8366                           ;led_drv.c: 136: case LedPulseOn:
  8367                           
  8368                           
  8369                           ;led_drv.c: 138: LedPulse->LedOutState = ((UINT8)(1));
  8370  0DA8  0A2A               	incf	LedPulseStateMachine@LedPulse,w
  8371  0DA9  0086               	movwf	6
  8372  0DAA  0187               	clrf	7
  8373  0DAB  0181               	clrf	1
  8374  0DAC  0A81               	incf	1,f
  8375                           
  8376                           ;led_drv.c: 140: LedPulse->LedPulseState = LedPulseDelay;
  8377  0DAD  082A               	movf	LedPulseStateMachine@LedPulse,w
  8378  0DAE  0086               	movwf	6
  8379  0DAF  0187               	clrf	7
  8380  0DB0  0181               	clrf	1
  8381  0DB1  0A81               	incf	1,f
  8382  0DB2                     l4279:	
  8383                           ;led_drv.c: 143: case LedPulseDelay:
  8384                           
  8385                           
  8386                           ;led_drv.c: 145: LedPulse->LedPulseCounter++;
  8387  0DB2  082A               	movf	LedPulseStateMachine@LedPulse,w
  8388  0DB3  3E02               	addlw	2
  8389  0DB4  0086               	movwf	6
  8390  0DB5  0187               	clrf	7
  8391  0DB6  3001               	movlw	1
  8392  0DB7  0781               	addwf	1,f
  8393  0DB8  3141               	addfsr 1,1
  8394  0DB9  1803               	skipnc
  8395  0DBA  0A81               	incf	1,f
  8396                           
  8397                           ;led_drv.c: 147: if (LedPulse->LedPulseCounter >= (LedPulse->LedPulseTimeMs/((UINT16)(10
      +                          ))))
  8398  0DBB  300A               	movlw	10
  8399  0DBC  00A0               	movwf	___lwdiv@divisor
  8400  0DBD  3000               	movlw	0
  8401  0DBE  00A1               	movwf	___lwdiv@divisor+1
  8402  0DBF  082A               	movf	LedPulseStateMachine@LedPulse,w
  8403  0DC0  3E04               	addlw	4
  8404  0DC1  0086               	movwf	6
  8405  0DC2  0187               	clrf	7
  8406  0DC3  3F40               	moviw [0]fsr1
  8407  0DC4  00A2               	movwf	___lwdiv@dividend
  8408  0DC5  3F41               	moviw [1]fsr1
  8409  0DC6  00A3               	movwf	___lwdiv@dividend+1
  8410  0DC7  318B  2352  318D   	fcall	___lwdiv
  8411  0DCA  0020               	movlb	0	; select bank0
  8412  0DCB  082A               	movf	LedPulseStateMachine@LedPulse,w
  8413  0DCC  3E02               	addlw	2
  8414  0DCD  0086               	movwf	6
  8415  0DCE  0187               	clrf	7
  8416  0DCF  3F40               	moviw [0]fsr1
  8417  0DD0  00A8               	movwf	??_LedPulseStateMachine
  8418  0DD1  3F41               	moviw [1]fsr1
  8419  0DD2  00A9               	movwf	??_LedPulseStateMachine+1
  8420  0DD3  0821               	movf	?___lwdiv+1,w
  8421  0DD4  0229               	subwf	??_LedPulseStateMachine+1,w
  8422  0DD5  1D03               	skipz
  8423  0DD6  2DD9               	goto	u3095
  8424  0DD7  0820               	movf	?___lwdiv,w
  8425  0DD8  0228               	subwf	??_LedPulseStateMachine,w
  8426  0DD9                     u3095:	
  8427  0DD9  1C03               	skipc
  8428  0DDA  2E07               	goto	l4297
  8429                           
  8430                           ;led_drv.c: 148: {
  8431                           ;led_drv.c: 150: LedPulse->LedPulseCounter = 0;
  8432  0DDB  082A               	movf	LedPulseStateMachine@LedPulse,w
  8433  0DDC  3E02               	addlw	2
  8434  0DDD  0086               	movwf	6
  8435  0DDE  0187               	clrf	7
  8436  0DDF  3000               	movlw	0
  8437  0DE0  3FC0               	movwi [0]fsr1
  8438  0DE1  3FC1               	movwi [1]fsr1
  8439                           
  8440                           ;led_drv.c: 152: LedPulse->LedOutState = ((UINT8)(0));
  8441  0DE2  0A2A               	incf	LedPulseStateMachine@LedPulse,w
  8442  0DE3  0086               	movwf	6
  8443  0DE4  0187               	clrf	7
  8444  0DE5  0181               	clrf	1
  8445                           
  8446                           ;led_drv.c: 154: LedPulse->LedPulseState = LedPulseOff;
  8447  0DE6  3002               	movlw	2
  8448  0DE7  00A8               	movwf	??_LedPulseStateMachine
  8449  0DE8  082A               	movf	LedPulseStateMachine@LedPulse,w
  8450  0DE9  0086               	movwf	6
  8451  0DEA  0187               	clrf	7
  8452  0DEB  0828               	movf	??_LedPulseStateMachine,w
  8453  0DEC  0081               	movwf	1
  8454                           
  8455                           ;led_drv.c: 155: }
  8456                           ;led_drv.c: 156: break;
  8457  0DED  2E07               	goto	l4297
  8458  0DEE                     l4289:	
  8459                           ;led_drv.c: 158: case LedPulseOff:
  8460                           
  8461                           
  8462                           ;led_drv.c: 160: LedPulse->LedPulseState = LedPulseOn;
  8463  0DEE  082A               	movf	LedPulseStateMachine@LedPulse,w
  8464  0DEF  0086               	movwf	6
  8465  0DF0  0187               	clrf	7
  8466  0DF1  0181               	clrf	1
  8467                           
  8468                           ;led_drv.c: 162: Led_SetLedStatus(Led,LED_STS_OFF);
  8469  0DF2  01F4               	clrf	Led_SetLedStatus@LedSts
  8470  0DF3  0827               	movf	LedPulseStateMachine@Led,w
  8471  0DF4  3197  27E0  318D   	fcall	_Led_SetLedStatus
  8472                           
  8473                           ;led_drv.c: 167: }
  8474                           
  8475                           ;led_drv.c: 166: break;
  8476                           
  8477                           ;led_drv.c: 165: default:
  8478                           
  8479                           ;led_drv.c: 163: break;
  8480  0DF7  2E07               	goto	l4297
  8481  0DF8                     l4295:	
  8482  0DF8  0020               	movlb	0	; select bank0
  8483  0DF9  082A               	movf	LedPulseStateMachine@LedPulse,w
  8484  0DFA  0086               	movwf	6
  8485  0DFB  0187               	clrf	7
  8486  0DFC  0801               	movf	1,w
  8487                           
  8488                           ; Switch size 1, requested type "space"
  8489                           ; Number of cases is 3, Range of values is 0 to 2
  8490                           ; switch strategies available:
  8491                           ; Name         Instructions Cycles
  8492                           ; simple_byte           10     6 (average)
  8493                           ; direct_byte           12     6 (fixed)
  8494                           ; jumptable            260     6 (fixed)
  8495                           ;	Chosen strategy is simple_byte
  8496  0DFD  3A00               	xorlw	0	; case 0
  8497  0DFE  1903               	skipnz
  8498  0DFF  2DA8               	goto	l4277
  8499  0E00  3A01               	xorlw	1	; case 1
  8500  0E01  1903               	skipnz
  8501  0E02  2DB2               	goto	l4279
  8502  0E03  3A03               	xorlw	3	; case 2
  8503  0E04  1903               	skipnz
  8504  0E05  2DEE               	goto	l4289
  8505  0E06  2E07               	goto	l4297
  8506  0E07                     l4297:	
  8507                           
  8508                           ;led_drv.c: 170: return (LedPulse->LedOutState);
  8509  0E07  0020               	movlb	0	; select bank0
  8510  0E08  0A2A               	incf	LedPulseStateMachine@LedPulse,w
  8511  0E09  0086               	movwf	6
  8512  0E0A  0187               	clrf	7
  8513  0E0B  0801               	movf	1,w
  8514  0E0C  0008               	return
  8515  0E0D                     __end_of_LedPulseStateMachine:	
  8516                           
  8517                           	psect	text26
  8518  0715                     __ptext26:	
  8519 ;; *************** function _LedBlinkStateMachine *****************
  8520 ;; Defined at:
  8521 ;;		line 74 in file "../../../Framework/MercuryFwk/Source/c/01_Hal/02_Drv/led_drv.c"
  8522 ;; Parameters:    Size  Location     Type
  8523 ;;  LedBlink        1    wreg     PTR struct _LedBlinkType
  8524 ;;		 -> Led1Blink(9), 
  8525 ;; Auto vars:     Size  Location     Type
  8526 ;;  LedBlink        1    5[COMMON] PTR struct _LedBlinkType
  8527 ;;		 -> Led1Blink(9), 
  8528 ;; Return value:  Size  Location     Type
  8529 ;;                  1    wreg      unsigned char 
  8530 ;; Registers used:
  8531 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8532 ;; Tracked objects:
  8533 ;;		On entry : 0/0
  8534 ;;		On exit  : 0/0
  8535 ;;		Unchanged: 0/0
  8536 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8537 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8538 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8539 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8540 ;;      Totals:         1       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8541 ;;Total ram usage:        3 bytes
  8542 ;; Hardware stack levels used:    1
  8543 ;; Hardware stack levels required when called:    3
  8544 ;; This function calls:
  8545 ;;		___lwdiv
  8546 ;; This function is called by:
  8547 ;;		_LedStateMachine
  8548 ;; This function uses a non-reentrant model
  8549 ;;
  8550                           
  8551                           
  8552                           ;psect for function _LedBlinkStateMachine
  8553  0715                     _LedBlinkStateMachine:	
  8554                           
  8555                           ;incstack = 0
  8556                           ; Regs used in _LedBlinkStateMachine: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  8557                           ;LedBlinkStateMachine@LedBlink stored from wreg
  8558  0715  00F5               	movwf	LedBlinkStateMachine@LedBlink
  8559                           
  8560                           ;led_drv.c: 77: switch (LedBlink->LedBlinkState)
  8561  0716  2FA2               	goto	l4269
  8562  0717                     l4247:	
  8563                           ;led_drv.c: 78: {
  8564                           ;led_drv.c: 79: case LedBlinkInit:
  8565                           
  8566                           
  8567                           ;led_drv.c: 81: LedBlink->LedOutState = LedBlink->LedInitStatus;
  8568  0717  0875               	movf	LedBlinkStateMachine@LedBlink,w
  8569  0718  3E08               	addlw	8
  8570  0719  0086               	movwf	6
  8571  071A  3001               	movlw	1	; select bank2/3
  8572  071B  0087               	movwf	7
  8573  071C  0801               	movf	1,w
  8574  071D  0020               	movlb	0	; select bank0
  8575  071E  00A7               	movwf	??_LedBlinkStateMachine
  8576  071F  0A75               	incf	LedBlinkStateMachine@LedBlink,w
  8577  0720  0086               	movwf	6
  8578  0721  3001               	movlw	1	; select bank2/3
  8579  0722  0087               	movwf	7
  8580  0723  0827               	movf	??_LedBlinkStateMachine,w
  8581  0724  0081               	movwf	1
  8582                           
  8583                           ;led_drv.c: 83: LedBlink->LedBlinkState = LedBlinkRunning;
  8584  0725  0875               	movf	LedBlinkStateMachine@LedBlink,w
  8585  0726  2F64               	goto	L8
  8586  0727                     l4251:	
  8587                           ;led_drv.c: 86: case LedBlinkRunning:
  8588                           
  8589                           ;led_drv.c: 84: break;
  8590                           
  8591                           
  8592                           ;led_drv.c: 88: LedBlink->LedBlinkCounter++;
  8593  0727  0875               	movf	LedBlinkStateMachine@LedBlink,w
  8594  0728  3E02               	addlw	2
  8595  0729  0086               	movwf	6
  8596  072A  3001               	movlw	1	; select bank2/3
  8597  072B  0087               	movwf	7
  8598  072C  3001               	movlw	1
  8599  072D  0781               	addwf	1,f
  8600  072E  3141               	addfsr 1,1
  8601  072F  1803               	skipnc
  8602  0730  0A81               	incf	1,f
  8603                           
  8604                           ;led_drv.c: 90: if (LedBlink->LedOutState == OffState)
  8605  0731  0A75               	incf	LedBlinkStateMachine@LedBlink,w
  8606  0732  0086               	movwf	6
  8607  0733  3001               	movlw	1	; select bank2/3
  8608  0734  0087               	movwf	7
  8609  0735  0801               	movf	1,w
  8610  0736  1D03               	btfss	3,2
  8611  0737  2F6A               	goto	l4259
  8612                           
  8613                           ;led_drv.c: 91: {
  8614                           ;led_drv.c: 93: if (LedBlink->LedBlinkCounter >= (LedBlink->LedOffTimeMs/((UINT16)(10)))
      +                          )
  8615  0738  300A               	movlw	10
  8616  0739  0020               	movlb	0	; select bank0
  8617  073A  00A0               	movwf	___lwdiv@divisor
  8618  073B  3000               	movlw	0
  8619  073C  00A1               	movwf	___lwdiv@divisor+1
  8620  073D  0875               	movf	LedBlinkStateMachine@LedBlink,w
  8621  073E  3E06               	addlw	6
  8622  073F  0086               	movwf	6
  8623  0740  3001               	movlw	1	; select bank2/3
  8624  0741  0087               	movwf	7
  8625  0742  3F40               	moviw [0]fsr1
  8626  0743  00A2               	movwf	___lwdiv@dividend
  8627  0744  3F41               	moviw [1]fsr1
  8628  0745  00A3               	movwf	___lwdiv@dividend+1
  8629  0746  318B  2352  3187   	fcall	___lwdiv
  8630  0749  0875               	movf	LedBlinkStateMachine@LedBlink,w
  8631  074A  3E02               	addlw	2
  8632  074B  0086               	movwf	6
  8633  074C  3001               	movlw	1	; select bank2/3
  8634  074D  0087               	movwf	7
  8635  074E  3F40               	moviw [0]fsr1
  8636  074F  0020               	movlb	0	; select bank0
  8637  0750  00A7               	movwf	??_LedBlinkStateMachine
  8638  0751  3F41               	moviw [1]fsr1
  8639  0752  00A8               	movwf	??_LedBlinkStateMachine+1
  8640  0753  0821               	movf	?___lwdiv+1,w
  8641  0754  0228               	subwf	??_LedBlinkStateMachine+1,w
  8642  0755  1D03               	skipz
  8643  0756  2F59               	goto	u3065
  8644  0757  0820               	movf	?___lwdiv,w
  8645  0758  0227               	subwf	??_LedBlinkStateMachine,w
  8646  0759                     u3065:	
  8647  0759  1C03               	skipc
  8648  075A  2FAE               	goto	l4271
  8649                           
  8650                           ;led_drv.c: 94: {
  8651                           ;led_drv.c: 96: LedBlink->LedBlinkCounter = 0;
  8652  075B  0875               	movf	LedBlinkStateMachine@LedBlink,w
  8653  075C  3E02               	addlw	2
  8654  075D  0086               	movwf	6
  8655  075E  3001               	movlw	1	; select bank2/3
  8656  075F  0087               	movwf	7
  8657  0760  3000               	movlw	0
  8658  0761  3FC0               	movwi [0]fsr1
  8659  0762  3FC1               	movwi [1]fsr1
  8660                           
  8661                           ;led_drv.c: 98: LedBlink->LedOutState = OnState;
  8662  0763  0A75               	incf	LedBlinkStateMachine@LedBlink,w
  8663  0764                     L8:	
  8664  0764  0086               	movwf	6
  8665  0765  3001               	movlw	1	; select bank2/3
  8666  0766  0087               	movwf	7
  8667  0767  0181               	clrf	1
  8668  0768  0A81               	incf	1,f
  8669                           
  8670                           ;led_drv.c: 99: }
  8671                           ;led_drv.c: 100: }
  8672  0769  2FAE               	goto	l4271
  8673  076A                     l4259:	
  8674                           
  8675                           ;led_drv.c: 101: else if (LedBlink->LedOutState == OnState)
  8676  076A  0A75               	incf	LedBlinkStateMachine@LedBlink,w
  8677  076B  0086               	movwf	6
  8678  076C  3001               	movlw	1	; select bank2/3
  8679  076D  0087               	movwf	7
  8680  076E  0301               	decf	1,w
  8681  076F  1D03               	btfss	3,2
  8682  0770  2FAE               	goto	l4271
  8683                           
  8684                           ;led_drv.c: 102: {
  8685                           ;led_drv.c: 104: if (LedBlink->LedBlinkCounter >= (LedBlink->LedOnTimeMs/((UINT16)(10)))
      +                          )
  8686  0771  300A               	movlw	10
  8687  0772  0020               	movlb	0	; select bank0
  8688  0773  00A0               	movwf	___lwdiv@divisor
  8689  0774  3000               	movlw	0
  8690  0775  00A1               	movwf	___lwdiv@divisor+1
  8691  0776  0875               	movf	LedBlinkStateMachine@LedBlink,w
  8692  0777  3E04               	addlw	4
  8693  0778  0086               	movwf	6
  8694  0779  3001               	movlw	1	; select bank2/3
  8695  077A  0087               	movwf	7
  8696  077B  3F40               	moviw [0]fsr1
  8697  077C  00A2               	movwf	___lwdiv@dividend
  8698  077D  3F41               	moviw [1]fsr1
  8699  077E  00A3               	movwf	___lwdiv@dividend+1
  8700  077F  318B  2352  3187   	fcall	___lwdiv
  8701  0782  0875               	movf	LedBlinkStateMachine@LedBlink,w
  8702  0783  3E02               	addlw	2
  8703  0784  0086               	movwf	6
  8704  0785  3001               	movlw	1	; select bank2/3
  8705  0786  0087               	movwf	7
  8706  0787  3F40               	moviw [0]fsr1
  8707  0788  0020               	movlb	0	; select bank0
  8708  0789  00A7               	movwf	??_LedBlinkStateMachine
  8709  078A  3F41               	moviw [1]fsr1
  8710  078B  00A8               	movwf	??_LedBlinkStateMachine+1
  8711  078C  0821               	movf	?___lwdiv+1,w
  8712  078D  0228               	subwf	??_LedBlinkStateMachine+1,w
  8713  078E  1D03               	skipz
  8714  078F  2F92               	goto	u3085
  8715  0790  0820               	movf	?___lwdiv,w
  8716  0791  0227               	subwf	??_LedBlinkStateMachine,w
  8717  0792                     u3085:	
  8718  0792  1C03               	skipc
  8719  0793  2FAE               	goto	l4271
  8720                           
  8721                           ;led_drv.c: 105: {
  8722                           ;led_drv.c: 107: LedBlink->LedBlinkCounter = 0;
  8723  0794  0875               	movf	LedBlinkStateMachine@LedBlink,w
  8724  0795  3E02               	addlw	2
  8725  0796  0086               	movwf	6
  8726  0797  3001               	movlw	1	; select bank2/3
  8727  0798  0087               	movwf	7
  8728  0799  3000               	movlw	0
  8729  079A  3FC0               	movwi [0]fsr1
  8730  079B  3FC1               	movwi [1]fsr1
  8731                           
  8732                           ;led_drv.c: 109: LedBlink->LedOutState = OffState;
  8733  079C  0A75               	incf	LedBlinkStateMachine@LedBlink,w
  8734  079D  0086               	movwf	6
  8735  079E  3001               	movlw	1	; select bank2/3
  8736  079F  0087               	movwf	7
  8737  07A0  0181               	clrf	1
  8738                           
  8739                           ;led_drv.c: 116: }
  8740                           
  8741                           ;led_drv.c: 115: break;
  8742                           
  8743                           ;led_drv.c: 114: default:
  8744                           
  8745                           ;led_drv.c: 110: }
  8746                           ;led_drv.c: 111: }
  8747                           ;led_drv.c: 112: break;
  8748  07A1  2FAE               	goto	l4271
  8749  07A2                     l4269:	
  8750  07A2  0875               	movf	LedBlinkStateMachine@LedBlink,w
  8751  07A3  0086               	movwf	6
  8752  07A4  3001               	movlw	1	; select bank2/3
  8753  07A5  0087               	movwf	7
  8754  07A6  0801               	movf	1,w
  8755                           
  8756                           ; Switch size 1, requested type "space"
  8757                           ; Number of cases is 2, Range of values is 0 to 1
  8758                           ; switch strategies available:
  8759                           ; Name         Instructions Cycles
  8760                           ; simple_byte            7     4 (average)
  8761                           ; direct_byte           10     6 (fixed)
  8762                           ; jumptable            260     6 (fixed)
  8763                           ;	Chosen strategy is simple_byte
  8764  07A7  3A00               	xorlw	0	; case 0
  8765  07A8  1903               	skipnz
  8766  07A9  2F17               	goto	l4247
  8767  07AA  3A01               	xorlw	1	; case 1
  8768  07AB  1903               	skipnz
  8769  07AC  2F27               	goto	l4251
  8770  07AD  2FAE               	goto	l4271
  8771  07AE                     l4271:	
  8772                           
  8773                           ;led_drv.c: 119: return (LedBlink->LedOutState);
  8774  07AE  0A75               	incf	LedBlinkStateMachine@LedBlink,w
  8775  07AF  0086               	movwf	6
  8776  07B0  3001               	movlw	1	; select bank2/3
  8777  07B1  0087               	movwf	7
  8778  07B2  0801               	movf	1,w
  8779  07B3  0008               	return
  8780  07B4                     __end_of_LedBlinkStateMachine:	
  8781                           
  8782                           	psect	text27
  8783  179A                     __ptext27:	
  8784 ;; *************** function _CheckStopBitStatus *****************
  8785 ;; Defined at:
  8786 ;;		line 151 in file "../../../Framework/MercuryFwk/Source/c/01_Hal/02_Drv/i2c_slv_drv.c"
  8787 ;; Parameters:    Size  Location     Type
  8788 ;;		None
  8789 ;; Auto vars:     Size  Location     Type
  8790 ;;		None
  8791 ;; Return value:  Size  Location     Type
  8792 ;;                  1    wreg      unsigned char 
  8793 ;; Registers used:
  8794 ;;		wreg, status,2, status,0
  8795 ;; Tracked objects:
  8796 ;;		On entry : 0/0
  8797 ;;		On exit  : 0/0
  8798 ;;		Unchanged: 0/0
  8799 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8800 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8801 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8802 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8803 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8804 ;;Total ram usage:        1 bytes
  8805 ;; Hardware stack levels used:    1
  8806 ;; Hardware stack levels required when called:    2
  8807 ;; This function calls:
  8808 ;;		Nothing
  8809 ;; This function is called by:
  8810 ;;		_I2c_DataReceiveSm
  8811 ;; This function uses a non-reentrant model
  8812 ;;
  8813                           
  8814                           
  8815                           ;psect for function _CheckStopBitStatus
  8816  179A                     _CheckStopBitStatus:	
  8817                           
  8818                           ;i2c_slv_drv.c: 154: return ((SSP1STAT & ((UINT8)(0x10))) >> ((UINT8)(4)));
  8819                           
  8820                           ;incstack = 0
  8821                           ; Regs used in _CheckStopBitStatus: [wreg+status,2+status,0]
  8822  179A  0024               	movlb	4	; select bank4
  8823  179B  0814               	movf	20,w	;volatile
  8824  179C  00F4               	movwf	??_CheckStopBitStatus
  8825  179D  3004               	movlw	4
  8826  179E                     u2015:	
  8827  179E  36F4               	lsrf	??_CheckStopBitStatus,f
  8828  179F  0B89               	decfsz	9,f
  8829  17A0  2F9E               	goto	u2015
  8830  17A1  0874               	movf	??_CheckStopBitStatus,w
  8831  17A2  3901               	andlw	1
  8832  17A3  0008               	return
  8833  17A4                     __end_of_CheckStopBitStatus:	
  8834                           
  8835                           	psect	text28
  8836  1790                     __ptext28:	
  8837 ;; *************** function _CheckByteStatus *****************
  8838 ;; Defined at:
  8839 ;;		line 137 in file "../../../Framework/MercuryFwk/Source/c/01_Hal/02_Drv/i2c_slv_drv.c"
  8840 ;; Parameters:    Size  Location     Type
  8841 ;;		None
  8842 ;; Auto vars:     Size  Location     Type
  8843 ;;		None
  8844 ;; Return value:  Size  Location     Type
  8845 ;;                  1    wreg      unsigned char 
  8846 ;; Registers used:
  8847 ;;		wreg, status,2, status,0
  8848 ;; Tracked objects:
  8849 ;;		On entry : 0/0
  8850 ;;		On exit  : 0/0
  8851 ;;		Unchanged: 0/0
  8852 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8853 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8854 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8855 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8856 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8857 ;;Total ram usage:        1 bytes
  8858 ;; Hardware stack levels used:    1
  8859 ;; Hardware stack levels required when called:    2
  8860 ;; This function calls:
  8861 ;;		Nothing
  8862 ;; This function is called by:
  8863 ;;		_I2c_DataReceiveSm
  8864 ;; This function uses a non-reentrant model
  8865 ;;
  8866                           
  8867                           
  8868                           ;psect for function _CheckByteStatus
  8869  1790                     _CheckByteStatus:	
  8870                           
  8871                           ;i2c_slv_drv.c: 140: return ((SSP1STAT & ((UINT8)(0x20))) >> ((UINT8)(5)));
  8872                           
  8873                           ;incstack = 0
  8874                           ; Regs used in _CheckByteStatus: [wreg+status,2+status,0]
  8875  1790  0024               	movlb	4	; select bank4
  8876  1791  0814               	movf	20,w	;volatile
  8877  1792  00F4               	movwf	??_CheckByteStatus
  8878  1793  3005               	movlw	5
  8879  1794                     u2005:	
  8880  1794  36F4               	lsrf	??_CheckByteStatus,f
  8881  1795  0B89               	decfsz	9,f
  8882  1796  2F94               	goto	u2005
  8883  1797  0874               	movf	??_CheckByteStatus,w
  8884  1798  3901               	andlw	1
  8885  1799  0008               	return
  8886  179A                     __end_of_CheckByteStatus:	
  8887                           
  8888                           	psect	text29
  8889  1786                     __ptext29:	
  8890 ;; *************** function _CheckAckStatus *****************
  8891 ;; Defined at:
  8892 ;;		line 109 in file "../../../Framework/MercuryFwk/Source/c/01_Hal/02_Drv/i2c_slv_drv.c"
  8893 ;; Parameters:    Size  Location     Type
  8894 ;;		None
  8895 ;; Auto vars:     Size  Location     Type
  8896 ;;		None
  8897 ;; Return value:  Size  Location     Type
  8898 ;;                  1    wreg      unsigned char 
  8899 ;; Registers used:
  8900 ;;		wreg, status,2, status,0
  8901 ;; Tracked objects:
  8902 ;;		On entry : 0/0
  8903 ;;		On exit  : 0/0
  8904 ;;		Unchanged: 0/0
  8905 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8906 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8907 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8908 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8909 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8910 ;;Total ram usage:        1 bytes
  8911 ;; Hardware stack levels used:    1
  8912 ;; Hardware stack levels required when called:    2
  8913 ;; This function calls:
  8914 ;;		Nothing
  8915 ;; This function is called by:
  8916 ;;		_I2c_DataReceiveSm
  8917 ;; This function uses a non-reentrant model
  8918 ;;
  8919                           
  8920                           
  8921                           ;psect for function _CheckAckStatus
  8922  1786                     _CheckAckStatus:	
  8923                           
  8924                           ;i2c_slv_drv.c: 112: return ((SSP1CON2 & ((UINT8)(0x40))) >> ((UINT8)(6)));
  8925                           
  8926                           ;incstack = 0
  8927                           ; Regs used in _CheckAckStatus: [wreg+status,2+status,0]
  8928  1786  0024               	movlb	4	; select bank4
  8929  1787  0816               	movf	22,w	;volatile
  8930  1788  00F4               	movwf	??_CheckAckStatus
  8931  1789  3006               	movlw	6
  8932  178A                     u1995:	
  8933  178A  36F4               	lsrf	??_CheckAckStatus,f
  8934  178B  0B89               	decfsz	9,f
  8935  178C  2F8A               	goto	u1995
  8936  178D  0874               	movf	??_CheckAckStatus,w
  8937  178E  3901               	andlw	1
  8938  178F  0008               	return
  8939  1790                     __end_of_CheckAckStatus:	
  8940                           
  8941                           	psect	text30
  8942  0858                     __ptext30:	
  8943 ;; *************** function _I2c_SetConfig *****************
  8944 ;; Defined at:
  8945 ;;		line 82 in file "../../../Framework/MercuryFwk/Source/c/03_Sml/01_Pml/01_SlvI2c/i2c_slv.c"
  8946 ;; Parameters:    Size  Location     Type
  8947 ;;		None
  8948 ;; Auto vars:     Size  Location     Type
  8949 ;;		None
  8950 ;; Return value:  Size  Location     Type
  8951 ;;                  1    wreg      void 
  8952 ;; Registers used:
  8953 ;;		wreg, status,2
  8954 ;; Tracked objects:
  8955 ;;		On entry : 0/0
  8956 ;;		On exit  : 0/0
  8957 ;;		Unchanged: 0/0
  8958 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8959 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8960 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8961 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8962 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8963 ;;Total ram usage:        1 bytes
  8964 ;; Hardware stack levels used:    1
  8965 ;; Hardware stack levels required when called:    2
  8966 ;; This function calls:
  8967 ;;		Nothing
  8968 ;; This function is called by:
  8969 ;;		_I2cSlv_MainTask
  8970 ;; This function uses a non-reentrant model
  8971 ;;
  8972                           
  8973                           
  8974                           ;psect for function _I2c_SetConfig
  8975  0858                     _I2c_SetConfig:	
  8976                           
  8977                           ;i2c_slv.c: 84: I2cConfig.I2cModuleMode = ((UINT8)(0b0110));
  8978                           
  8979                           ;incstack = 0
  8980                           ; Regs used in _I2c_SetConfig: [wreg+status,2]
  8981  0858  3006               	movlw	6
  8982  0859  00F4               	movwf	??_I2c_SetConfig
  8983  085A  0874               	movf	??_I2c_SetConfig,w
  8984  085B  0022               	movlb	2	; select bank2
  8985  085C  00D4               	movwf	_I2cConfig^(0+256)
  8986                           
  8987                           ;i2c_slv.c: 85: I2cConfig.I2cReceiverEnable = ((UINT8)(0));
  8988  085D  01D5               	clrf	(_I2cConfig^(0+256)+1)
  8989                           
  8990                           ;i2c_slv.c: 86: I2cConfig.EnableI2cModule = ((UINT8)(1));
  8991  085E  01D6               	clrf	(_I2cConfig^(0+256)+2)
  8992  085F  0AD6               	incf	(_I2cConfig^(0+256)+2),f
  8993                           
  8994                           ;i2c_slv.c: 87: I2cConfig.ClockStretchEnable = ((UINT8)(0));
  8995  0860  01D7               	clrf	(_I2cConfig^(0+256)+3)
  8996                           
  8997                           ;i2c_slv.c: 88: I2cConfig.StopCondIntEnable = ((UINT8)(1));
  8998  0861  01D8               	clrf	(_I2cConfig^(0+256)+4)
  8999  0862  0AD8               	incf	(_I2cConfig^(0+256)+4),f
  9000                           
  9001                           ;i2c_slv.c: 89: I2cConfig.StartCondIntEnable = ((UINT8)(1));
  9002  0863  01D9               	clrf	(_I2cConfig^(0+256)+5)
  9003  0864  0AD9               	incf	(_I2cConfig^(0+256)+5),f
  9004                           
  9005                           ;i2c_slv.c: 90: I2cConfig.BufferOverwriteEnable = ((UINT8)(0));
  9006  0865  01DA               	clrf	(_I2cConfig^(0+256)+6)
  9007                           
  9008                           ;i2c_slv.c: 91: I2cConfig.BusCollisionDetectEnable = ((UINT8)(0));
  9009  0866  01DB               	clrf	(_I2cConfig^(0+256)+7)
  9010                           
  9011                           ;i2c_slv.c: 92: I2cConfig.AddrHoldEnable = ((UINT8)(0));
  9012  0867  01DC               	clrf	(_I2cConfig^(0+256)+8)
  9013                           
  9014                           ;i2c_slv.c: 93: I2cConfig.DataHoldEnable = ((UINT8)(0));
  9015  0868  01DD               	clrf	(_I2cConfig^(0+256)+9)
  9016                           
  9017                           ;i2c_slv.c: 94: I2cConfig.GeneralCallEnable = ((UINT8)(1));
  9018  0869  01DE               	clrf	(_I2cConfig^(0+256)+10)
  9019  086A  0ADE               	incf	(_I2cConfig^(0+256)+10),f
  9020  086B  0008               	return
  9021  086C                     __end_of_I2c_SetConfig:	
  9022                           
  9023                           	psect	text31
  9024  0451                     __ptext31:	
  9025 ;; *************** function _I2c_InitI2cModule *****************
  9026 ;; Defined at:
  9027 ;;		line 207 in file "../../../Framework/MercuryFwk/Source/c/01_Hal/02_Drv/i2c_slv_drv.c"
  9028 ;; Parameters:    Size  Location     Type
  9029 ;;  I2cConfig       1    wreg     PTR struct _I2cConfig
  9030 ;;		 -> I2cConfig(11), 
  9031 ;; Auto vars:     Size  Location     Type
  9032 ;;  I2cConfig       1    2[BANK0 ] PTR struct _I2cConfig
  9033 ;;		 -> I2cConfig(11), 
  9034 ;; Return value:  Size  Location     Type
  9035 ;;                  1    wreg      void 
  9036 ;; Registers used:
  9037 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9038 ;; Tracked objects:
  9039 ;;		On entry : 0/0
  9040 ;;		On exit  : 0/0
  9041 ;;		Unchanged: 0/0
  9042 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9043 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9044 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9045 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9046 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9047 ;;Total ram usage:        3 bytes
  9048 ;; Hardware stack levels used:    1
  9049 ;; Hardware stack levels required when called:    3
  9050 ;; This function calls:
  9051 ;;		_ClearRxBuffer
  9052 ;;		_ClearTxBuffer
  9053 ;; This function is called by:
  9054 ;;		_I2cSlv_MainTask
  9055 ;; This function uses a non-reentrant model
  9056 ;;
  9057                           
  9058                           
  9059                           ;psect for function _I2c_InitI2cModule
  9060  0451                     _I2c_InitI2cModule:	
  9061                           
  9062                           ;incstack = 0
  9063                           ; Regs used in _I2c_InitI2cModule: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  9064                           ;I2c_InitI2cModule@I2cConfig stored from wreg
  9065  0451  0020               	movlb	0	; select bank0
  9066  0452  00A2               	movwf	I2c_InitI2cModule@I2cConfig
  9067                           
  9068                           ;i2c_slv_drv.c: 210: TRISBbits.TRISB6 = ((UINT8)(1));
  9069  0453  0021               	movlb	1	; select bank1
  9070  0454  170D               	bsf	13,6	;volatile
  9071                           
  9072                           ;i2c_slv_drv.c: 211: TRISBbits.TRISB4 = ((UINT8)(1));
  9073  0455  160D               	bsf	13,4	;volatile
  9074                           
  9075                           ;i2c_slv_drv.c: 215: SSP1CON1 |= (I2cConfig->I2cModuleMode) << ((UINT8)(0));
  9076  0456  0020               	movlb	0	; select bank0
  9077  0457  0822               	movf	I2c_InitI2cModule@I2cConfig,w
  9078  0458  0086               	movwf	6
  9079  0459  3001               	movlw	1	; select bank2/3
  9080  045A  0087               	movwf	7
  9081  045B  0801               	movf	1,w
  9082  045C  00A0               	movwf	??_I2c_InitI2cModule
  9083  045D  0820               	movf	??_I2c_InitI2cModule,w
  9084  045E  0024               	movlb	4	; select bank4
  9085  045F  0495               	iorwf	21,f	;volatile
  9086                           
  9087                           ;i2c_slv_drv.c: 218: SSP1CON2 |= (I2cConfig->I2cReceiverEnable) << ((UINT8)(3));
  9088  0460  0020               	movlb	0	; select bank0
  9089  0461  0A22               	incf	I2c_InitI2cModule@I2cConfig,w
  9090  0462  0086               	movwf	6
  9091  0463  3001               	movlw	1	; select bank2/3
  9092  0464  0087               	movwf	7
  9093  0465  0801               	movf	1,w
  9094  0466  00A0               	movwf	??_I2c_InitI2cModule
  9095  0467  3002               	movlw	2
  9096  0468                     u3245:	
  9097  0468  35A0               	lslf	??_I2c_InitI2cModule,f
  9098  0469  3EFF               	addlw	-1
  9099  046A  1D03               	skipz
  9100  046B  2C68               	goto	u3245
  9101  046C  3520               	lslf	??_I2c_InitI2cModule,w
  9102  046D  00A1               	movwf	??_I2c_InitI2cModule+1
  9103  046E  0821               	movf	??_I2c_InitI2cModule+1,w
  9104  046F  0024               	movlb	4	; select bank4
  9105  0470  0496               	iorwf	22,f	;volatile
  9106                           
  9107                           ;i2c_slv_drv.c: 219: SSP1CON2 |= (I2cConfig->ClockStretchEnable) << ((UINT8)(0));
  9108  0471  0020               	movlb	0	; select bank0
  9109  0472  0822               	movf	I2c_InitI2cModule@I2cConfig,w
  9110  0473  3E03               	addlw	3
  9111  0474  0086               	movwf	6
  9112  0475  3001               	movlw	1	; select bank2/3
  9113  0476  0087               	movwf	7
  9114  0477  0801               	movf	1,w
  9115  0478  00A0               	movwf	??_I2c_InitI2cModule
  9116  0479  0820               	movf	??_I2c_InitI2cModule,w
  9117  047A  0024               	movlb	4	; select bank4
  9118  047B  0496               	iorwf	22,f	;volatile
  9119                           
  9120                           ;i2c_slv_drv.c: 220: SSP1CON2 |= (I2cConfig->GeneralCallEnable) << ((UINT8)(7));
  9121  047C  0020               	movlb	0	; select bank0
  9122  047D  0822               	movf	I2c_InitI2cModule@I2cConfig,w
  9123  047E  3E0A               	addlw	10
  9124  047F  0086               	movwf	6
  9125  0480  3001               	movlw	1	; select bank2/3
  9126  0481  0087               	movwf	7
  9127  0482  0801               	movf	1,w
  9128  0483  00A0               	movwf	??_I2c_InitI2cModule
  9129  0484  3006               	movlw	6
  9130  0485                     u3255:	
  9131  0485  35A0               	lslf	??_I2c_InitI2cModule,f
  9132  0486  3EFF               	addlw	-1
  9133  0487  1D03               	skipz
  9134  0488  2C85               	goto	u3255
  9135  0489  3520               	lslf	??_I2c_InitI2cModule,w
  9136  048A  00A1               	movwf	??_I2c_InitI2cModule+1
  9137  048B  0821               	movf	??_I2c_InitI2cModule+1,w
  9138  048C  0024               	movlb	4	; select bank4
  9139  048D  0496               	iorwf	22,f	;volatile
  9140                           
  9141                           ;i2c_slv_drv.c: 223: SSP1CON3 |= (I2cConfig->StopCondIntEnable) << ((UINT8)(6));
  9142  048E  0020               	movlb	0	; select bank0
  9143  048F  0822               	movf	I2c_InitI2cModule@I2cConfig,w
  9144  0490  3E04               	addlw	4
  9145  0491  0086               	movwf	6
  9146  0492  3001               	movlw	1	; select bank2/3
  9147  0493  0087               	movwf	7
  9148  0494  0801               	movf	1,w
  9149  0495  00A0               	movwf	??_I2c_InitI2cModule
  9150  0496  3005               	movlw	5
  9151  0497                     u3265:	
  9152  0497  35A0               	lslf	??_I2c_InitI2cModule,f
  9153  0498  3EFF               	addlw	-1
  9154  0499  1D03               	skipz
  9155  049A  2C97               	goto	u3265
  9156  049B  3520               	lslf	??_I2c_InitI2cModule,w
  9157  049C  00A1               	movwf	??_I2c_InitI2cModule+1
  9158  049D  0821               	movf	??_I2c_InitI2cModule+1,w
  9159  049E  0024               	movlb	4	; select bank4
  9160  049F  0497               	iorwf	23,f	;volatile
  9161                           
  9162                           ;i2c_slv_drv.c: 224: SSP1CON3 |= (I2cConfig->StartCondIntEnable) << ((UINT8)(5));
  9163  04A0  0020               	movlb	0	; select bank0
  9164  04A1  0822               	movf	I2c_InitI2cModule@I2cConfig,w
  9165  04A2  3E05               	addlw	5
  9166  04A3  0086               	movwf	6
  9167  04A4  3001               	movlw	1	; select bank2/3
  9168  04A5  0087               	movwf	7
  9169  04A6  0801               	movf	1,w
  9170  04A7  00A0               	movwf	??_I2c_InitI2cModule
  9171  04A8  3004               	movlw	4
  9172  04A9                     u3275:	
  9173  04A9  35A0               	lslf	??_I2c_InitI2cModule,f
  9174  04AA  3EFF               	addlw	-1
  9175  04AB  1D03               	skipz
  9176  04AC  2CA9               	goto	u3275
  9177  04AD  3520               	lslf	??_I2c_InitI2cModule,w
  9178  04AE  00A1               	movwf	??_I2c_InitI2cModule+1
  9179  04AF  0821               	movf	??_I2c_InitI2cModule+1,w
  9180  04B0  0024               	movlb	4	; select bank4
  9181  04B1  0497               	iorwf	23,f	;volatile
  9182                           
  9183                           ;i2c_slv_drv.c: 225: SSP1CON3 |= (I2cConfig->BufferOverwriteEnable) << ((UINT8)(4));
  9184  04B2  0020               	movlb	0	; select bank0
  9185  04B3  0822               	movf	I2c_InitI2cModule@I2cConfig,w
  9186  04B4  3E06               	addlw	6
  9187  04B5  0086               	movwf	6
  9188  04B6  3001               	movlw	1	; select bank2/3
  9189  04B7  0087               	movwf	7
  9190  04B8  0801               	movf	1,w
  9191  04B9  00A0               	movwf	??_I2c_InitI2cModule
  9192  04BA  3003               	movlw	3
  9193  04BB                     u3285:	
  9194  04BB  35A0               	lslf	??_I2c_InitI2cModule,f
  9195  04BC  3EFF               	addlw	-1
  9196  04BD  1D03               	skipz
  9197  04BE  2CBB               	goto	u3285
  9198  04BF  3520               	lslf	??_I2c_InitI2cModule,w
  9199  04C0  00A1               	movwf	??_I2c_InitI2cModule+1
  9200  04C1  0821               	movf	??_I2c_InitI2cModule+1,w
  9201  04C2  0024               	movlb	4	; select bank4
  9202  04C3  0497               	iorwf	23,f	;volatile
  9203                           
  9204                           ;i2c_slv_drv.c: 226: SSP1CON3 |= (I2cConfig->BusCollisionDetectEnable) << ((UINT8)(2));
  9205  04C4  0020               	movlb	0	; select bank0
  9206  04C5  0822               	movf	I2c_InitI2cModule@I2cConfig,w
  9207  04C6  3E07               	addlw	7
  9208  04C7  0086               	movwf	6
  9209  04C8  3001               	movlw	1	; select bank2/3
  9210  04C9  0087               	movwf	7
  9211  04CA  0801               	movf	1,w
  9212  04CB  00A0               	movwf	??_I2c_InitI2cModule
  9213  04CC  3001               	movlw	1
  9214  04CD                     u3295:	
  9215  04CD  35A0               	lslf	??_I2c_InitI2cModule,f
  9216  04CE  3EFF               	addlw	-1
  9217  04CF  1D03               	skipz
  9218  04D0  2CCD               	goto	u3295
  9219  04D1  3520               	lslf	??_I2c_InitI2cModule,w
  9220  04D2  00A1               	movwf	??_I2c_InitI2cModule+1
  9221  04D3  0821               	movf	??_I2c_InitI2cModule+1,w
  9222  04D4  0024               	movlb	4	; select bank4
  9223  04D5  0497               	iorwf	23,f	;volatile
  9224                           
  9225                           ;i2c_slv_drv.c: 227: SSP1CON3 |= (I2cConfig->AddrHoldEnable) << ((UINT8)(1));
  9226  04D6  0020               	movlb	0	; select bank0
  9227  04D7  0822               	movf	I2c_InitI2cModule@I2cConfig,w
  9228  04D8  3E08               	addlw	8
  9229  04D9  0086               	movwf	6
  9230  04DA  3001               	movlw	1	; select bank2/3
  9231  04DB  0087               	movwf	7
  9232  04DC  3501               	lslf	1,w
  9233  04DD  00A0               	movwf	??_I2c_InitI2cModule
  9234  04DE  0820               	movf	??_I2c_InitI2cModule,w
  9235  04DF  0024               	movlb	4	; select bank4
  9236  04E0  0497               	iorwf	23,f	;volatile
  9237                           
  9238                           ;i2c_slv_drv.c: 228: SSP1CON3 |= (I2cConfig->DataHoldEnable) << ((UINT8)(0));
  9239  04E1  0020               	movlb	0	; select bank0
  9240  04E2  0822               	movf	I2c_InitI2cModule@I2cConfig,w
  9241  04E3  3E09               	addlw	9
  9242  04E4  0086               	movwf	6
  9243  04E5  3001               	movlw	1	; select bank2/3
  9244  04E6  0087               	movwf	7
  9245  04E7  0801               	movf	1,w
  9246  04E8  00A0               	movwf	??_I2c_InitI2cModule
  9247  04E9  0820               	movf	??_I2c_InitI2cModule,w
  9248  04EA  0024               	movlb	4	; select bank4
  9249  04EB  0497               	iorwf	23,f	;volatile
  9250                           
  9251                           ;i2c_slv_drv.c: 231: SSP1CON1 |= (I2cConfig->EnableI2cModule) << ((UINT8)(5));
  9252  04EC  0020               	movlb	0	; select bank0
  9253  04ED  0822               	movf	I2c_InitI2cModule@I2cConfig,w
  9254  04EE  3E02               	addlw	2
  9255  04EF  0086               	movwf	6
  9256  04F0  3001               	movlw	1	; select bank2/3
  9257  04F1  0087               	movwf	7
  9258  04F2  0801               	movf	1,w
  9259  04F3  00A0               	movwf	??_I2c_InitI2cModule
  9260  04F4  3004               	movlw	4
  9261  04F5                     u3305:	
  9262  04F5  35A0               	lslf	??_I2c_InitI2cModule,f
  9263  04F6  3EFF               	addlw	-1
  9264  04F7  1D03               	skipz
  9265  04F8  2CF5               	goto	u3305
  9266  04F9  3520               	lslf	??_I2c_InitI2cModule,w
  9267  04FA  00A1               	movwf	??_I2c_InitI2cModule+1
  9268  04FB  0821               	movf	??_I2c_InitI2cModule+1,w
  9269  04FC  0024               	movlb	4	; select bank4
  9270  04FD  0495               	iorwf	21,f	;volatile
  9271                           
  9272                           ;i2c_slv_drv.c: 234: PIR1bits.SSP1IF = ((UINT8)(0));
  9273  04FE  0020               	movlb	0	; select bank0
  9274  04FF  1191               	bcf	17,3	;volatile
  9275                           
  9276                           ;i2c_slv_drv.c: 235: PIE1bits.SSP1IE = ((UINT8)(1));
  9277  0500  0021               	movlb	1	; select bank1
  9278  0501  1591               	bsf	17,3	;volatile
  9279                           
  9280                           ;i2c_slv_drv.c: 238: ClearRxBuffer();
  9281  0502  3188  2014  3184   	fcall	_ClearRxBuffer
  9282                           
  9283                           ;i2c_slv_drv.c: 239: ClearTxBuffer();
  9284  0505  3188  2024         	fcall	_ClearTxBuffer
  9285  0507  0008               	return
  9286  0508                     __end_of_I2c_InitI2cModule:	
  9287                           
  9288                           	psect	text32
  9289  0824                     __ptext32:	
  9290 ;; *************** function _ClearTxBuffer *****************
  9291 ;; Defined at:
  9292 ;;		line 184 in file "../../../Framework/MercuryFwk/Source/c/01_Hal/02_Drv/i2c_slv_drv.c"
  9293 ;; Parameters:    Size  Location     Type
  9294 ;;		None
  9295 ;; Auto vars:     Size  Location     Type
  9296 ;;  Index           1    5[COMMON] unsigned char 
  9297 ;; Return value:  Size  Location     Type
  9298 ;;                  1    wreg      void 
  9299 ;; Registers used:
  9300 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  9301 ;; Tracked objects:
  9302 ;;		On entry : 0/0
  9303 ;;		On exit  : 0/0
  9304 ;;		Unchanged: 0/0
  9305 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9306 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9307 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9308 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9309 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9310 ;;Total ram usage:        2 bytes
  9311 ;; Hardware stack levels used:    1
  9312 ;; Hardware stack levels required when called:    2
  9313 ;; This function calls:
  9314 ;;		Nothing
  9315 ;; This function is called by:
  9316 ;;		_I2c_InitI2cModule
  9317 ;;		_I2c_DataReceiveSm
  9318 ;; This function uses a non-reentrant model
  9319 ;;
  9320                           
  9321                           
  9322                           ;psect for function _ClearTxBuffer
  9323  0824                     _ClearTxBuffer:	
  9324                           
  9325                           ;i2c_slv_drv.c: 186: UINT8 Index;
  9326                           ;i2c_slv_drv.c: 189: for (Index = 0; Index < ((UINT8)(80)); Index++)
  9327                           
  9328                           ;incstack = 0
  9329                           ; Regs used in _ClearTxBuffer: [wreg+fsr1l+fsr1h+status,2+status,0]
  9330  0824  01F5               	clrf	ClearTxBuffer@Index
  9331  0825                     L9:	
  9332  0825  3050               	movlw	80
  9333  0826  0275               	subwf	ClearTxBuffer@Index,w
  9334  0827  1803               	btfsc	3,0
  9335  0828  0008               	return
  9336                           
  9337                           ;i2c_slv_drv.c: 190: {
  9338                           ;i2c_slv_drv.c: 191: I2cTxBuffer[Index] = 0x00;
  9339  0829  0875               	movf	ClearTxBuffer@Index,w
  9340  082A  3E20               	addlw	(low (_I2cTxBuffer| (0+768)))& (0+255)
  9341  082B  0086               	movwf	6
  9342  082C  3003               	movlw	3	; select bank6/7
  9343  082D  0087               	movwf	7
  9344  082E  0181               	clrf	1
  9345  082F  3001               	movlw	1
  9346  0830  00F4               	movwf	??_ClearTxBuffer
  9347  0831  0874               	movf	??_ClearTxBuffer,w
  9348  0832  07F5               	addwf	ClearTxBuffer@Index,f
  9349  0833  2825               	goto	L9
  9350  0834                     __end_of_ClearTxBuffer:	
  9351                           
  9352                           	psect	text33
  9353  0814                     __ptext33:	
  9354 ;; *************** function _ClearRxBuffer *****************
  9355 ;; Defined at:
  9356 ;;		line 165 in file "../../../Framework/MercuryFwk/Source/c/01_Hal/02_Drv/i2c_slv_drv.c"
  9357 ;; Parameters:    Size  Location     Type
  9358 ;;		None
  9359 ;; Auto vars:     Size  Location     Type
  9360 ;;  Index           1    5[COMMON] unsigned char 
  9361 ;; Return value:  Size  Location     Type
  9362 ;;                  1    wreg      void 
  9363 ;; Registers used:
  9364 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  9365 ;; Tracked objects:
  9366 ;;		On entry : 0/0
  9367 ;;		On exit  : 0/0
  9368 ;;		Unchanged: 0/0
  9369 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9370 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9371 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9372 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9373 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9374 ;;Total ram usage:        2 bytes
  9375 ;; Hardware stack levels used:    1
  9376 ;; Hardware stack levels required when called:    2
  9377 ;; This function calls:
  9378 ;;		Nothing
  9379 ;; This function is called by:
  9380 ;;		_I2c_InitI2cModule
  9381 ;;		_I2c_DataReceiveSm
  9382 ;; This function uses a non-reentrant model
  9383 ;;
  9384                           
  9385                           
  9386                           ;psect for function _ClearRxBuffer
  9387  0814                     _ClearRxBuffer:	
  9388                           
  9389                           ;i2c_slv_drv.c: 167: UINT8 Index;
  9390                           ;i2c_slv_drv.c: 170: for (Index = 0; Index < ((UINT8)(80)); Index++)
  9391                           
  9392                           ;incstack = 0
  9393                           ; Regs used in _ClearRxBuffer: [wreg+fsr1l+fsr1h+status,2+status,0]
  9394  0814  01F5               	clrf	ClearRxBuffer@Index
  9395  0815                     L10:	
  9396  0815  3050               	movlw	80
  9397  0816  0275               	subwf	ClearRxBuffer@Index,w
  9398  0817  1803               	btfsc	3,0
  9399  0818  0008               	return
  9400                           
  9401                           ;i2c_slv_drv.c: 171: {
  9402                           ;i2c_slv_drv.c: 172: I2cRxBuffer[Index] = 0x00;
  9403  0819  0875               	movf	ClearRxBuffer@Index,w
  9404  081A  3EA0               	addlw	(low (_I2cRxBuffer| (0+768)))& (0+255)
  9405  081B  0086               	movwf	6
  9406  081C  3003               	movlw	3	; select bank7/8
  9407  081D  0087               	movwf	7
  9408  081E  0181               	clrf	1
  9409  081F  3001               	movlw	1
  9410  0820  00F4               	movwf	??_ClearRxBuffer
  9411  0821  0874               	movf	??_ClearRxBuffer,w
  9412  0822  07F5               	addwf	ClearRxBuffer@Index,f
  9413  0823  2815               	goto	L10
  9414  0824                     __end_of_ClearRxBuffer:	
  9415                           
  9416                           	psect	text34
  9417  0F72                     __ptext34:	
  9418 ;; *************** function _I2cSlv_I2cDrvHandle *****************
  9419 ;; Defined at:
  9420 ;;		line 141 in file "../../../Framework/MercuryFwk/Source/c/03_Sml/01_Pml/01_SlvI2c/i2c_slv.c"
  9421 ;; Parameters:    Size  Location     Type
  9422 ;;		None
  9423 ;; Auto vars:     Size  Location     Type
  9424 ;;  Index           1    9[BANK0 ] unsigned char 
  9425 ;; Return value:  Size  Location     Type
  9426 ;;                  1    wreg      void 
  9427 ;; Registers used:
  9428 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9429 ;; Tracked objects:
  9430 ;;		On entry : 0/0
  9431 ;;		On exit  : 0/0
  9432 ;;		Unchanged: 0/0
  9433 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9434 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9435 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9436 ;;      Temps:          0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9437 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9438 ;;Total ram usage:        6 bytes
  9439 ;; Hardware stack levels used:    1
  9440 ;; Hardware stack levels required when called:    3
  9441 ;; This function calls:
  9442 ;;		_GenerateEvt
  9443 ;;		_I2c_SetI2cAddress
  9444 ;;		_I2c_SetI2cAddressMask
  9445 ;;		_I2c_UpdateTxBuffer
  9446 ;;		_Led_SetLedStatus
  9447 ;;		_ReceiveEvt
  9448 ;; This function is called by:
  9449 ;;		_I2cSlv_MainTask
  9450 ;; This function uses a non-reentrant model
  9451 ;;
  9452                           
  9453                           
  9454                           ;psect for function _I2cSlv_I2cDrvHandle
  9455  0F72                     _I2cSlv_I2cDrvHandle:	
  9456                           
  9457                           ;i2c_slv.c: 143: static I2cReceiveMsgStateType I2cReceiveMsgState = I2cSetSlaveAddres;
  9458                           ;i2c_slv.c: 144: UINT8 Index = 0;
  9459                           
  9460                           ;incstack = 0
  9461                           ; Regs used in _I2cSlv_I2cDrvHandle: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  9462  0F72  0020               	movlb	0	; select bank0
  9463  0F73  01A9               	clrf	I2cSlv_I2cDrvHandle@Index
  9464                           
  9465                           ;i2c_slv.c: 146: switch (I2cReceiveMsgState)
  9466  0F74  2FF6               	goto	l4485
  9467  0F75                     l4443:	
  9468                           ;i2c_slv.c: 147: {
  9469                           ;i2c_slv.c: 148: case I2cSetSlaveAddres:
  9470                           
  9471                           
  9472                           ;i2c_slv.c: 150: if (ReceiveEvt(&I2cSetAddress))
  9473  0F75  30E5               	movlw	(low (_I2cSetAddress| 0))& (0+255)
  9474  0F76  3189  2151  318F   	fcall	_ReceiveEvt
  9475  0F79  3A00               	xorlw	0
  9476  0F7A  1903               	skipnz
  9477  0F7B  0008               	return
  9478                           
  9479                           ;i2c_slv.c: 151: {
  9480                           ;i2c_slv.c: 153: I2c_SetI2cAddress(I2cSlaveAddress);
  9481  0F7C  0877               	movf	_I2cSlaveAddress,w
  9482  0F7D  3197  2745  318F   	fcall	_I2c_SetI2cAddress
  9483                           
  9484                           ;i2c_slv.c: 154: I2c_SetI2cAddressMask(((UINT8)(0x7F)));
  9485  0F80  307F               	movlw	127
  9486  0F81  3197  274A         	fcall	_I2c_SetI2cAddressMask
  9487                           
  9488                           ;i2c_slv.c: 156: I2cReceiveMsgState = I2cReceiveData;
  9489  0F83  0021               	movlb	1	; select bank1
  9490  0F84  01AC               	clrf	I2cSlv_I2cDrvHandle@I2cReceiveMsgState^(0+128)
  9491  0F85  0AAC               	incf	I2cSlv_I2cDrvHandle@I2cReceiveMsgState^(0+128),f
  9492                           
  9493                           ;i2c_slv.c: 157: }
  9494                           ;i2c_slv.c: 158: break;
  9495  0F86  0008               	return
  9496  0F87                     l4449:	
  9497                           ;i2c_slv.c: 160: case I2cReceiveData:
  9498                           
  9499                           
  9500                           ;i2c_slv.c: 162: if (ReceiveEvt(&I2cNewPacketNotification))
  9501  0F87  30E1               	movlw	(low (_I2cNewPacketNotification| 0))& (0+255)
  9502  0F88  3189  2151  318F   	fcall	_ReceiveEvt
  9503  0F8B  3A00               	xorlw	0
  9504  0F8C  1903               	skipnz
  9505  0F8D  2FD9               	goto	l4475
  9506                           
  9507                           ;i2c_slv.c: 163: {
  9508                           ;i2c_slv.c: 165: if ((I2cPacket.SlaveAddress == I2cSlaveAddress) || (I2cPacket.SlaveAddr
      +                          ess == ((UINT8)(0x00))))
  9509  0F8E  309D               	movlw	157
  9510  0F8F  0086               	movwf	6
  9511  0F90  3023               	movlw	35
  9512  0F91  0087               	movwf	7
  9513  0F92  0801               	movf	1,w
  9514  0F93  0677               	xorwf	_I2cSlaveAddress,w
  9515  0F94  1903               	skipnz
  9516  0F95  2F9D               	goto	l4455
  9517  0F96  309D               	movlw	157
  9518  0F97  0086               	movwf	6
  9519  0F98  3023               	movlw	35
  9520  0F99  0087               	movwf	7
  9521  0F9A  0801               	movf	1,w
  9522  0F9B  1D03               	btfss	3,2
  9523  0F9C  0008               	return
  9524  0F9D                     l4455:	
  9525                           
  9526                           ;i2c_slv.c: 166: {
  9527                           ;i2c_slv.c: 167: if (I2cPacket.ReadWrite == ((UINT8)(0)))
  9528  0F9D  309D               	movlw	157
  9529  0F9E  0086               	movwf	6
  9530  0F9F  3023               	movlw	35
  9531  0FA0  0087               	movwf	7
  9532  0FA1  3141               	addfsr 1,1
  9533  0FA2  0801               	movf	1,w
  9534  0FA3  1D03               	btfss	3,2
  9535  0FA4  0008               	return
  9536                           
  9537                           ;i2c_slv.c: 168: {
  9538                           ;i2c_slv.c: 170: for (Index = 0; Index < ((UINT8)(80));Index++)
  9539  0FA5  0020               	movlb	0	; select bank0
  9540  0FA6  01A9               	clrf	I2cSlv_I2cDrvHandle@Index
  9541  0FA7  3050               	movlw	80
  9542  0FA8  0229               	subwf	I2cSlv_I2cDrvHandle@Index,w
  9543  0FA9  1803               	btfsc	3,0
  9544  0FAA  2FC9               	goto	l4469
  9545  0FAB                     l4463:	
  9546                           
  9547                           ;i2c_slv.c: 171: {
  9548                           ;i2c_slv.c: 172: CmdBuffer[Index] = I2cPacket.Buffer[Index];
  9549  0FAB  0829               	movf	I2cSlv_I2cDrvHandle@Index,w
  9550  0FAC  00A4               	movwf	??_I2cSlv_I2cDrvHandle
  9551  0FAD  01A5               	clrf	??_I2cSlv_I2cDrvHandle+1
  9552  0FAE  309F               	movlw	159
  9553  0FAF  00A6               	movwf	??_I2cSlv_I2cDrvHandle+2
  9554  0FB0  3023               	movlw	35
  9555  0FB1  00A7               	movwf	??_I2cSlv_I2cDrvHandle+3
  9556  0FB2  0824               	movf	??_I2cSlv_I2cDrvHandle,w
  9557  0FB3  0726               	addwf	??_I2cSlv_I2cDrvHandle+2,w
  9558  0FB4  0086               	movwf	6
  9559  0FB5  0825               	movf	??_I2cSlv_I2cDrvHandle+1,w
  9560  0FB6  3D27               	addwfc	??_I2cSlv_I2cDrvHandle+3,w
  9561  0FB7  0087               	movwf	7
  9562  0FB8  0801               	movf	1,w
  9563  0FB9  00A8               	movwf	??_I2cSlv_I2cDrvHandle+4
  9564  0FBA  0829               	movf	I2cSlv_I2cDrvHandle@Index,w
  9565  0FBB  3EA0               	addlw	(low (_CmdBuffer| (0+256)))& (0+255)
  9566  0FBC  0086               	movwf	6
  9567  0FBD  3001               	movlw	1	; select bank3/4
  9568  0FBE  0087               	movwf	7
  9569  0FBF  0828               	movf	??_I2cSlv_I2cDrvHandle+4,w
  9570  0FC0  0081               	movwf	1
  9571  0FC1  3001               	movlw	1
  9572  0FC2  00A4               	movwf	??_I2cSlv_I2cDrvHandle
  9573  0FC3  0824               	movf	??_I2cSlv_I2cDrvHandle,w
  9574  0FC4  07A9               	addwf	I2cSlv_I2cDrvHandle@Index,f
  9575  0FC5  3050               	movlw	80
  9576  0FC6  0229               	subwf	I2cSlv_I2cDrvHandle@Index,w
  9577  0FC7  1C03               	skipc
  9578  0FC8  2FAB               	goto	l4463
  9579  0FC9                     l4469:	
  9580                           
  9581                           ;i2c_slv.c: 173: }
  9582                           ;i2c_slv.c: 175: GenerateEvt(&I2cWriteRequest);
  9583  0FC9  30E7               	movlw	(low (_I2cWriteRequest| 0))& (0+255)
  9584  0FCA  3189  2172  318F   	fcall	_GenerateEvt
  9585                           
  9586                           ;i2c_slv.c: 177: if (LedBehaviourSts == ((UINT8)(1)))
  9587  0FCD  0379               	decf	_LedBehaviourSts,w
  9588  0FCE  1D03               	btfss	3,2
  9589  0FCF  0008               	return
  9590                           
  9591                           ;i2c_slv.c: 178: {
  9592                           ;i2c_slv.c: 179: Led_SetLedStatus(1u, LED_STS_PULSE);
  9593  0FD0  3003               	movlw	3
  9594  0FD1  0020               	movlb	0	; select bank0
  9595  0FD2  00A4               	movwf	??_I2cSlv_I2cDrvHandle
  9596  0FD3  0824               	movf	??_I2cSlv_I2cDrvHandle,w
  9597  0FD4  00F4               	movwf	Led_SetLedStatus@LedSts
  9598  0FD5  3001               	movlw	1
  9599  0FD6  3197  27E0         	fcall	_Led_SetLedStatus
  9600                           
  9601                           ;i2c_slv.c: 180: }
  9602                           ;i2c_slv.c: 181: }
  9603                           ;i2c_slv.c: 182: }
  9604                           ;i2c_slv.c: 183: }
  9605  0FD8  0008               	return
  9606  0FD9                     l4475:	
  9607                           
  9608                           ;i2c_slv.c: 185: else if (ReceiveEvt(&I2cReplyPacketReady))
  9609  0FD9  306C               	movlw	(low (_I2cReplyPacketReady| 0))& (0+255)
  9610  0FDA  3189  2151  318F   	fcall	_ReceiveEvt
  9611  0FDD  3A00               	xorlw	0
  9612  0FDE  1903               	skipnz
  9613  0FDF  0008               	return
  9614                           
  9615                           ;i2c_slv.c: 186: {
  9616                           ;i2c_slv.c: 188: I2c_UpdateTxBuffer(RepBuffer,RepBufferLen);
  9617  0FE0  0021               	movlb	1	; select bank1
  9618  0FE1  0832               	movf	_RepBufferLen^(0+128),w
  9619  0FE2  0020               	movlb	0	; select bank0
  9620  0FE3  00A4               	movwf	??_I2cSlv_I2cDrvHandle
  9621  0FE4  0824               	movf	??_I2cSlv_I2cDrvHandle,w
  9622  0FE5  00F4               	movwf	I2c_UpdateTxBuffer@Length
  9623  0FE6  30A0               	movlw	(low (_RepBuffer| (0+512)))& (0+255)
  9624  0FE7  3189  2113  318F   	fcall	_I2c_UpdateTxBuffer
  9625                           
  9626                           ;i2c_slv.c: 190: if (LedBehaviourSts == ((UINT8)(1)))
  9627  0FEA  0379               	decf	_LedBehaviourSts,w
  9628  0FEB  1D03               	btfss	3,2
  9629  0FEC  0008               	return
  9630                           
  9631                           ;i2c_slv.c: 191: {
  9632                           ;i2c_slv.c: 192: Led_SetLedStatus(1u, LED_STS_PULSE);
  9633  0FED  3003               	movlw	3
  9634  0FEE  0020               	movlb	0	; select bank0
  9635  0FEF  00A4               	movwf	??_I2cSlv_I2cDrvHandle
  9636  0FF0  0824               	movf	??_I2cSlv_I2cDrvHandle,w
  9637  0FF1  00F4               	movwf	Led_SetLedStatus@LedSts
  9638  0FF2  3001               	movlw	1
  9639  0FF3  3197  27E0         	fcall	_Led_SetLedStatus
  9640                           
  9641                           ;i2c_slv.c: 199: }
  9642                           
  9643                           ;i2c_slv.c: 198: break;
  9644                           
  9645                           ;i2c_slv.c: 197: default:
  9646                           
  9647                           ;i2c_slv.c: 193: }
  9648                           ;i2c_slv.c: 194: }
  9649                           ;i2c_slv.c: 195: break;
  9650  0FF5  0008               	return
  9651  0FF6                     l4485:	
  9652  0FF6  0021               	movlb	1	; select bank1
  9653  0FF7  082C               	movf	I2cSlv_I2cDrvHandle@I2cReceiveMsgState^(0+128),w
  9654                           
  9655                           ; Switch size 1, requested type "space"
  9656                           ; Number of cases is 2, Range of values is 0 to 1
  9657                           ; switch strategies available:
  9658                           ; Name         Instructions Cycles
  9659                           ; simple_byte            7     4 (average)
  9660                           ; direct_byte           10     6 (fixed)
  9661                           ; jumptable            260     6 (fixed)
  9662                           ;	Chosen strategy is simple_byte
  9663  0FF8  3A00               	xorlw	0	; case 0
  9664  0FF9  1903               	skipnz
  9665  0FFA  2F75               	goto	l4443
  9666  0FFB  3A01               	xorlw	1	; case 1
  9667  0FFC  1903               	skipnz
  9668  0FFD  2F87               	goto	l4449
  9669  0FFE  2FFF               	goto	l560
  9670  0FFF                     l560:	
  9671  0FFF  0008               	return
  9672  1000                     __end_of_I2cSlv_I2cDrvHandle:	
  9673                           
  9674                           	psect	text35
  9675  0913                     __ptext35:	
  9676 ;; *************** function _I2c_UpdateTxBuffer *****************
  9677 ;; Defined at:
  9678 ;;		line 279 in file "../../../Framework/MercuryFwk/Source/c/01_Hal/02_Drv/i2c_slv_drv.c"
  9679 ;; Parameters:    Size  Location     Type
  9680 ;;  DataBuffer      1    wreg     PTR unsigned char 
  9681 ;;		 -> RepBuffer(80), 
  9682 ;;  Length          1    4[COMMON] unsigned char 
  9683 ;; Auto vars:     Size  Location     Type
  9684 ;;  DataBuffer      1    2[BANK0 ] PTR unsigned char 
  9685 ;;		 -> RepBuffer(80), 
  9686 ;;  Index           1    3[BANK0 ] unsigned char 
  9687 ;; Return value:  Size  Location     Type
  9688 ;;                  1    wreg      void 
  9689 ;; Registers used:
  9690 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  9691 ;; Tracked objects:
  9692 ;;		On entry : 0/0
  9693 ;;		On exit  : 0/0
  9694 ;;		Unchanged: 0/0
  9695 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9696 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9697 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9698 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9699 ;;      Totals:         1       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9700 ;;Total ram usage:        5 bytes
  9701 ;; Hardware stack levels used:    1
  9702 ;; Hardware stack levels required when called:    2
  9703 ;; This function calls:
  9704 ;;		Nothing
  9705 ;; This function is called by:
  9706 ;;		_I2cSlv_I2cDrvHandle
  9707 ;; This function uses a non-reentrant model
  9708 ;;
  9709                           
  9710                           
  9711                           ;psect for function _I2c_UpdateTxBuffer
  9712  0913                     _I2c_UpdateTxBuffer:	
  9713                           
  9714                           ;incstack = 0
  9715                           ; Regs used in _I2c_UpdateTxBuffer: [wreg+fsr1l+fsr1h+status,2+status,0]
  9716                           ;I2c_UpdateTxBuffer@DataBuffer stored from wreg
  9717  0913  0020               	movlb	0	; select bank0
  9718  0914  00A2               	movwf	I2c_UpdateTxBuffer@DataBuffer
  9719                           
  9720                           ;i2c_slv_drv.c: 281: UINT8 Index = 0;
  9721  0915  01A3               	clrf	I2c_UpdateTxBuffer@Index
  9722                           
  9723                           ;i2c_slv_drv.c: 284: for (Index = 0; Index < Length; Index++)
  9724  0916  01A3               	clrf	I2c_UpdateTxBuffer@Index
  9725  0917                     l4243:	
  9726  0917  0874               	movf	I2c_UpdateTxBuffer@Length,w
  9727  0918  0223               	subwf	I2c_UpdateTxBuffer@Index,w
  9728  0919  1803               	btfsc	3,0
  9729  091A  0008               	return
  9730                           
  9731                           ;i2c_slv_drv.c: 285: {
  9732                           ;i2c_slv_drv.c: 286: I2cTxBuffer[Index] = *(DataBuffer + Index);
  9733  091B  0823               	movf	I2c_UpdateTxBuffer@Index,w
  9734  091C  0722               	addwf	I2c_UpdateTxBuffer@DataBuffer,w
  9735  091D  00A0               	movwf	??_I2c_UpdateTxBuffer
  9736  091E  0820               	movf	??_I2c_UpdateTxBuffer,w
  9737  091F  0086               	movwf	6
  9738  0920  3002               	movlw	2	; select bank4/5
  9739  0921  0087               	movwf	7
  9740  0922  0801               	movf	1,w
  9741  0923  00A1               	movwf	??_I2c_UpdateTxBuffer+1
  9742  0924  0823               	movf	I2c_UpdateTxBuffer@Index,w
  9743  0925  3E20               	addlw	(low (_I2cTxBuffer| (0+768)))& (0+255)
  9744  0926  0086               	movwf	6
  9745  0927  3003               	movlw	3	; select bank6/7
  9746  0928  0087               	movwf	7
  9747  0929  0821               	movf	??_I2c_UpdateTxBuffer+1,w
  9748  092A  0081               	movwf	1
  9749  092B  3001               	movlw	1
  9750  092C  00A0               	movwf	??_I2c_UpdateTxBuffer
  9751  092D  0820               	movf	??_I2c_UpdateTxBuffer,w
  9752  092E  07A3               	addwf	I2c_UpdateTxBuffer@Index,f
  9753  092F  2917               	goto	l4243
  9754  0930                     __end_of_I2c_UpdateTxBuffer:	
  9755                           
  9756                           	psect	text36
  9757  174A                     __ptext36:	
  9758 ;; *************** function _I2c_SetI2cAddressMask *****************
  9759 ;; Defined at:
  9760 ;;		line 264 in file "../../../Framework/MercuryFwk/Source/c/01_Hal/02_Drv/i2c_slv_drv.c"
  9761 ;; Parameters:    Size  Location     Type
  9762 ;;  SlaveAddress    1    wreg     unsigned char 
  9763 ;; Auto vars:     Size  Location     Type
  9764 ;;  SlaveAddress    1    4[COMMON] unsigned char 
  9765 ;; Return value:  Size  Location     Type
  9766 ;;                  1    wreg      void 
  9767 ;; Registers used:
  9768 ;;		wreg, status,2, status,0
  9769 ;; Tracked objects:
  9770 ;;		On entry : 0/0
  9771 ;;		On exit  : 0/0
  9772 ;;		Unchanged: 0/0
  9773 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9774 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9775 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9776 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9777 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9778 ;;Total ram usage:        1 bytes
  9779 ;; Hardware stack levels used:    1
  9780 ;; Hardware stack levels required when called:    2
  9781 ;; This function calls:
  9782 ;;		Nothing
  9783 ;; This function is called by:
  9784 ;;		_I2cSlv_I2cDrvHandle
  9785 ;; This function uses a non-reentrant model
  9786 ;;
  9787                           
  9788                           
  9789                           ;psect for function _I2c_SetI2cAddressMask
  9790  174A                     _I2c_SetI2cAddressMask:	
  9791                           
  9792                           ;incstack = 0
  9793                           ; Regs used in _I2c_SetI2cAddressMask: [wreg+status,2+status,0]
  9794                           ;I2c_SetI2cAddressMask@SlaveAddressMask stored from wreg
  9795  174A  00F4               	movwf	I2c_SetI2cAddressMask@SlaveAddressMask
  9796                           
  9797                           ;i2c_slv_drv.c: 267: SSP1MSK = (SlaveAddressMask << ((UINT8)(1)));
  9798  174B  3574               	lslf	I2c_SetI2cAddressMask@SlaveAddressMask,w
  9799  174C  0024               	movlb	4	; select bank4
  9800  174D  0093               	movwf	19	;volatile
  9801  174E  0008               	return
  9802  174F                     __end_of_I2c_SetI2cAddressMask:	
  9803                           
  9804                           	psect	text37
  9805  1745                     __ptext37:	
  9806 ;; *************** function _I2c_SetI2cAddress *****************
  9807 ;; Defined at:
  9808 ;;		line 250 in file "../../../Framework/MercuryFwk/Source/c/01_Hal/02_Drv/i2c_slv_drv.c"
  9809 ;; Parameters:    Size  Location     Type
  9810 ;;  SlaveAddress    1    wreg     unsigned char 
  9811 ;; Auto vars:     Size  Location     Type
  9812 ;;  SlaveAddress    1    4[COMMON] unsigned char 
  9813 ;; Return value:  Size  Location     Type
  9814 ;;                  1    wreg      void 
  9815 ;; Registers used:
  9816 ;;		wreg, status,2, status,0
  9817 ;; Tracked objects:
  9818 ;;		On entry : 0/0
  9819 ;;		On exit  : 0/0
  9820 ;;		Unchanged: 0/0
  9821 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9822 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9823 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9824 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9825 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9826 ;;Total ram usage:        1 bytes
  9827 ;; Hardware stack levels used:    1
  9828 ;; Hardware stack levels required when called:    2
  9829 ;; This function calls:
  9830 ;;		Nothing
  9831 ;; This function is called by:
  9832 ;;		_I2cSlv_I2cDrvHandle
  9833 ;; This function uses a non-reentrant model
  9834 ;;
  9835                           
  9836                           
  9837                           ;psect for function _I2c_SetI2cAddress
  9838  1745                     _I2c_SetI2cAddress:	
  9839                           
  9840                           ;incstack = 0
  9841                           ; Regs used in _I2c_SetI2cAddress: [wreg+status,2+status,0]
  9842                           ;I2c_SetI2cAddress@SlaveAddress stored from wreg
  9843  1745  00F4               	movwf	I2c_SetI2cAddress@SlaveAddress
  9844                           
  9845                           ;i2c_slv_drv.c: 253: SSP1ADD = (SlaveAddress << ((UINT8)(1)));
  9846  1746  3574               	lslf	I2c_SetI2cAddress@SlaveAddress,w
  9847  1747  0024               	movlb	4	; select bank4
  9848  1748  0092               	movwf	18	;volatile
  9849  1749  0008               	return
  9850  174A                     __end_of_I2c_SetI2cAddress:	
  9851                           
  9852                           	psect	text38
  9853  1775                     __ptext38:	
  9854 ;; *************** function _Mcu_SetPullUpsSts *****************
  9855 ;; Defined at:
  9856 ;;		line 167 in file "../../../Framework/MercuryFwk/Source/c/01_Hal/02_Drv/mcu_drv.c"
  9857 ;; Parameters:    Size  Location     Type
  9858 ;;  PuSts           1    wreg     enum E3651
  9859 ;; Auto vars:     Size  Location     Type
  9860 ;;  PuSts           1    4[COMMON] enum E3651
  9861 ;; Return value:  Size  Location     Type
  9862 ;;                  1    wreg      void 
  9863 ;; Registers used:
  9864 ;;		wreg, status,0
  9865 ;; Tracked objects:
  9866 ;;		On entry : 0/0
  9867 ;;		On exit  : 0/0
  9868 ;;		Unchanged: 0/0
  9869 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9870 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9871 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9872 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9873 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9874 ;;Total ram usage:        1 bytes
  9875 ;; Hardware stack levels used:    1
  9876 ;; Hardware stack levels required when called:    2
  9877 ;; This function calls:
  9878 ;;		Nothing
  9879 ;; This function is called by:
  9880 ;;		_App_MainTask
  9881 ;; This function uses a non-reentrant model
  9882 ;;
  9883                           
  9884                           
  9885                           ;psect for function _Mcu_SetPullUpsSts
  9886  1775                     _Mcu_SetPullUpsSts:	
  9887                           
  9888                           ;incstack = 0
  9889                           ; Regs used in _Mcu_SetPullUpsSts: [wreg+status,0]
  9890                           ;Mcu_SetPullUpsSts@PuSts stored from wreg
  9891  1775  00F4               	movwf	Mcu_SetPullUpsSts@PuSts
  9892                           
  9893                           ;mcu_drv.c: 170: OPTION_REGbits.nWPUEN = PuSts;
  9894  1776  0C74               	rrf	Mcu_SetPullUpsSts@PuSts,w
  9895  1777  0021               	movlb	1	; select bank1
  9896  1778  1C03               	skipc
  9897  1779  1395               	bcf	21,7	;volatile
  9898  177A  1803               	skipnc
  9899  177B  1795               	bsf	21,7	;volatile
  9900  177C  0008               	return
  9901  177D                     __end_of_Mcu_SetPullUpsSts:	
  9902                           
  9903                           	psect	text39
  9904  176D                     __ptext39:	
  9905 ;; *************** function _Mcu_SetDieTempSts *****************
  9906 ;; Defined at:
  9907 ;;		line 265 in file "../../../Framework/MercuryFwk/Source/c/01_Hal/02_Drv/mcu_drv.c"
  9908 ;; Parameters:    Size  Location     Type
  9909 ;;  DieTempSts      1    wreg     unsigned char 
  9910 ;; Auto vars:     Size  Location     Type
  9911 ;;  DieTempSts      1    4[COMMON] unsigned char 
  9912 ;; Return value:  Size  Location     Type
  9913 ;;                  1    wreg      void 
  9914 ;; Registers used:
  9915 ;;		wreg, status,0
  9916 ;; Tracked objects:
  9917 ;;		On entry : 0/0
  9918 ;;		On exit  : 0/0
  9919 ;;		Unchanged: 0/0
  9920 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9921 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9922 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9923 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9924 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9925 ;;Total ram usage:        1 bytes
  9926 ;; Hardware stack levels used:    1
  9927 ;; Hardware stack levels required when called:    2
  9928 ;; This function calls:
  9929 ;;		Nothing
  9930 ;; This function is called by:
  9931 ;;		_App_MainTask
  9932 ;; This function uses a non-reentrant model
  9933 ;;
  9934                           
  9935                           
  9936                           ;psect for function _Mcu_SetDieTempSts
  9937  176D                     _Mcu_SetDieTempSts:	
  9938                           
  9939                           ;incstack = 0
  9940                           ; Regs used in _Mcu_SetDieTempSts: [wreg+status,0]
  9941                           ;Mcu_SetDieTempSts@DieTempSts stored from wreg
  9942  176D  00F4               	movwf	Mcu_SetDieTempSts@DieTempSts
  9943                           
  9944                           ;mcu_drv.c: 268: FVRCONbits.TSEN = DieTempSts;
  9945  176E  0C74               	rrf	Mcu_SetDieTempSts@DieTempSts,w
  9946  176F  0022               	movlb	2	; select bank2
  9947  1770  1C03               	skipc
  9948  1771  1297               	bcf	23,5	;volatile
  9949  1772  1803               	skipnc
  9950  1773  1697               	bsf	23,5	;volatile
  9951  1774  0008               	return
  9952  1775                     __end_of_Mcu_SetDieTempSts:	
  9953                           
  9954                           	psect	text40
  9955  1765                     __ptext40:	
  9956 ;; *************** function _Mcu_SetDieTempMode *****************
  9957 ;; Defined at:
  9958 ;;		line 279 in file "../../../Framework/MercuryFwk/Source/c/01_Hal/02_Drv/mcu_drv.c"
  9959 ;; Parameters:    Size  Location     Type
  9960 ;;  DieTempMode     1    wreg     unsigned char 
  9961 ;; Auto vars:     Size  Location     Type
  9962 ;;  DieTempMode     1    4[COMMON] unsigned char 
  9963 ;; Return value:  Size  Location     Type
  9964 ;;                  1    wreg      void 
  9965 ;; Registers used:
  9966 ;;		wreg, status,0
  9967 ;; Tracked objects:
  9968 ;;		On entry : 0/0
  9969 ;;		On exit  : 0/0
  9970 ;;		Unchanged: 0/0
  9971 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9972 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9973 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9974 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9975 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9976 ;;Total ram usage:        1 bytes
  9977 ;; Hardware stack levels used:    1
  9978 ;; Hardware stack levels required when called:    2
  9979 ;; This function calls:
  9980 ;;		Nothing
  9981 ;; This function is called by:
  9982 ;;		_App_MainTask
  9983 ;; This function uses a non-reentrant model
  9984 ;;
  9985                           
  9986                           
  9987                           ;psect for function _Mcu_SetDieTempMode
  9988  1765                     _Mcu_SetDieTempMode:	
  9989                           
  9990                           ;incstack = 0
  9991                           ; Regs used in _Mcu_SetDieTempMode: [wreg+status,0]
  9992                           ;Mcu_SetDieTempMode@DieTempMode stored from wreg
  9993  1765  00F4               	movwf	Mcu_SetDieTempMode@DieTempMode
  9994                           
  9995                           ;mcu_drv.c: 282: FVRCONbits.TSRNG = DieTempMode;
  9996  1766  0C74               	rrf	Mcu_SetDieTempMode@DieTempMode,w
  9997  1767  0022               	movlb	2	; select bank2
  9998  1768  1C03               	skipc
  9999  1769  1217               	bcf	23,4	;volatile
 10000  176A  1803               	skipnc
 10001  176B  1617               	bsf	23,4	;volatile
 10002  176C  0008               	return
 10003  176D                     __end_of_Mcu_SetDieTempMode:	
 10004                           
 10005                           	psect	text41
 10006  066F                     __ptext41:	
 10007 ;; *************** function _Mcu_ConfigPullUps *****************
 10008 ;; Defined at:
 10009 ;;		line 181 in file "../../../Framework/MercuryFwk/Source/c/01_Hal/02_Drv/mcu_drv.c"
 10010 ;; Parameters:    Size  Location     Type
 10011 ;;  WpuCh           1    wreg     PTR struct _WpuChType
 10012 ;;		 -> App_MainTask@WpuCh(18), 
 10013 ;; Auto vars:     Size  Location     Type
 10014 ;;  WpuCh           1    4[COMMON] PTR struct _WpuChType
 10015 ;;		 -> App_MainTask@WpuCh(18), 
 10016 ;; Return value:  Size  Location     Type
 10017 ;;                  1    wreg      void 
 10018 ;; Registers used:
 10019 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 10020 ;; Tracked objects:
 10021 ;;		On entry : 0/0
 10022 ;;		On exit  : 0/0
 10023 ;;		Unchanged: 0/0
 10024 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10025 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10026 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10027 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10028 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10029 ;;Total ram usage:        1 bytes
 10030 ;; Hardware stack levels used:    1
 10031 ;; Hardware stack levels required when called:    2
 10032 ;; This function calls:
 10033 ;;		Nothing
 10034 ;; This function is called by:
 10035 ;;		_App_MainTask
 10036 ;; This function uses a non-reentrant model
 10037 ;;
 10038                           
 10039                           
 10040                           ;psect for function _Mcu_ConfigPullUps
 10041  066F                     _Mcu_ConfigPullUps:	
 10042                           
 10043                           ;incstack = 0
 10044                           ; Regs used in _Mcu_ConfigPullUps: [wreg+fsr1l+fsr1h+status,2+status,0]
 10045                           ;Mcu_ConfigPullUps@WpuCh stored from wreg
 10046  066F  00F4               	movwf	Mcu_ConfigPullUps@WpuCh
 10047                           
 10048                           ;mcu_drv.c: 184: WPUA = 0x00;
 10049  0670  0024               	movlb	4	; select bank4
 10050  0671  018C               	clrf	12	;volatile
 10051                           
 10052                           ;mcu_drv.c: 185: WPUAbits.WPUA0 = WpuCh->WpuA0;
 10053  0672  0874               	movf	Mcu_ConfigPullUps@WpuCh,w
 10054  0673  0086               	movwf	6
 10055  0674  0187               	clrf	7
 10056  0675  0C01               	rrf	1,w
 10057  0676  1C03               	skipc
 10058  0677  100C               	bcf	12,0	;volatile
 10059  0678  1803               	skipnc
 10060  0679  140C               	bsf	12,0	;volatile
 10061                           
 10062                           ;mcu_drv.c: 186: WPUAbits.WPUA1 = WpuCh->WpuA1;
 10063  067A  0A74               	incf	Mcu_ConfigPullUps@WpuCh,w
 10064  067B  0086               	movwf	6
 10065  067C  0187               	clrf	7
 10066  067D  0C01               	rrf	1,w
 10067  067E  1C03               	skipc
 10068  067F  108C               	bcf	12,1	;volatile
 10069  0680  1803               	skipnc
 10070  0681  148C               	bsf	12,1	;volatile
 10071                           
 10072                           ;mcu_drv.c: 187: WPUAbits.WPUA2 = WpuCh->WpuA2;
 10073  0682  0874               	movf	Mcu_ConfigPullUps@WpuCh,w
 10074  0683  3E02               	addlw	2
 10075  0684  0086               	movwf	6
 10076  0685  0187               	clrf	7
 10077  0686  0C01               	rrf	1,w
 10078  0687  1C03               	skipc
 10079  0688  110C               	bcf	12,2	;volatile
 10080  0689  1803               	skipnc
 10081  068A  150C               	bsf	12,2	;volatile
 10082                           
 10083                           ;mcu_drv.c: 188: WPUAbits.WPUA3 = WpuCh->WpuA3;
 10084  068B  0874               	movf	Mcu_ConfigPullUps@WpuCh,w
 10085  068C  3E03               	addlw	3
 10086  068D  0086               	movwf	6
 10087  068E  0187               	clrf	7
 10088  068F  0C01               	rrf	1,w
 10089  0690  1C03               	skipc
 10090  0691  118C               	bcf	12,3	;volatile
 10091  0692  1803               	skipnc
 10092  0693  158C               	bsf	12,3	;volatile
 10093                           
 10094                           ;mcu_drv.c: 189: WPUAbits.WPUA4 = WpuCh->WpuA4;
 10095  0694  0874               	movf	Mcu_ConfigPullUps@WpuCh,w
 10096  0695  3E04               	addlw	4
 10097  0696  0086               	movwf	6
 10098  0697  0187               	clrf	7
 10099  0698  0C01               	rrf	1,w
 10100  0699  1C03               	skipc
 10101  069A  120C               	bcf	12,4	;volatile
 10102  069B  1803               	skipnc
 10103  069C  160C               	bsf	12,4	;volatile
 10104                           
 10105                           ;mcu_drv.c: 190: WPUAbits.WPUA5 = WpuCh->WpuA5;
 10106  069D  0874               	movf	Mcu_ConfigPullUps@WpuCh,w
 10107  069E  3E05               	addlw	5
 10108  069F  0086               	movwf	6
 10109  06A0  0187               	clrf	7
 10110  06A1  0C01               	rrf	1,w
 10111  06A2  1C03               	skipc
 10112  06A3  128C               	bcf	12,5	;volatile
 10113  06A4  1803               	skipnc
 10114  06A5  168C               	bsf	12,5	;volatile
 10115                           
 10116                           ;mcu_drv.c: 194: WPUB = 0x00;
 10117  06A6  018D               	clrf	13	;volatile
 10118                           
 10119                           ;mcu_drv.c: 195: WPUBbits.WPUB4 = WpuCh->WpuB4;
 10120  06A7  0874               	movf	Mcu_ConfigPullUps@WpuCh,w
 10121  06A8  3E06               	addlw	6
 10122  06A9  0086               	movwf	6
 10123  06AA  0187               	clrf	7
 10124  06AB  0C01               	rrf	1,w
 10125  06AC  1C03               	skipc
 10126  06AD  120D               	bcf	13,4	;volatile
 10127  06AE  1803               	skipnc
 10128  06AF  160D               	bsf	13,4	;volatile
 10129                           
 10130                           ;mcu_drv.c: 196: WPUBbits.WPUB5 = WpuCh->WpuB5;
 10131  06B0  0874               	movf	Mcu_ConfigPullUps@WpuCh,w
 10132  06B1  3E07               	addlw	7
 10133  06B2  0086               	movwf	6
 10134  06B3  0187               	clrf	7
 10135  06B4  0C01               	rrf	1,w
 10136  06B5  1C03               	skipc
 10137  06B6  128D               	bcf	13,5	;volatile
 10138  06B7  1803               	skipnc
 10139  06B8  168D               	bsf	13,5	;volatile
 10140                           
 10141                           ;mcu_drv.c: 197: WPUBbits.WPUB6 = WpuCh->WpuB6;
 10142  06B9  0874               	movf	Mcu_ConfigPullUps@WpuCh,w
 10143  06BA  3E08               	addlw	8
 10144  06BB  0086               	movwf	6
 10145  06BC  0187               	clrf	7
 10146  06BD  0C01               	rrf	1,w
 10147  06BE  1C03               	skipc
 10148  06BF  130D               	bcf	13,6	;volatile
 10149  06C0  1803               	skipnc
 10150  06C1  170D               	bsf	13,6	;volatile
 10151                           
 10152                           ;mcu_drv.c: 198: WPUBbits.WPUB7 = WpuCh->WpuB7;
 10153  06C2  0874               	movf	Mcu_ConfigPullUps@WpuCh,w
 10154  06C3  3E09               	addlw	9
 10155  06C4  0086               	movwf	6
 10156  06C5  0187               	clrf	7
 10157  06C6  0C01               	rrf	1,w
 10158  06C7  1C03               	skipc
 10159  06C8  138D               	bcf	13,7	;volatile
 10160  06C9  1803               	skipnc
 10161  06CA  178D               	bsf	13,7	;volatile
 10162                           
 10163                           ;mcu_drv.c: 202: WPUC = 0x00;
 10164  06CB  018E               	clrf	14	;volatile
 10165                           
 10166                           ;mcu_drv.c: 203: WPUCbits.WPUC0 = WpuCh->WpuC0;
 10167  06CC  0874               	movf	Mcu_ConfigPullUps@WpuCh,w
 10168  06CD  3E0A               	addlw	10
 10169  06CE  0086               	movwf	6
 10170  06CF  0187               	clrf	7
 10171  06D0  0C01               	rrf	1,w
 10172  06D1  1C03               	skipc
 10173  06D2  100E               	bcf	14,0	;volatile
 10174  06D3  1803               	skipnc
 10175  06D4  140E               	bsf	14,0	;volatile
 10176                           
 10177                           ;mcu_drv.c: 204: WPUCbits.WPUC1 = WpuCh->WpuC1;
 10178  06D5  0874               	movf	Mcu_ConfigPullUps@WpuCh,w
 10179  06D6  3E0B               	addlw	11
 10180  06D7  0086               	movwf	6
 10181  06D8  0187               	clrf	7
 10182  06D9  0C01               	rrf	1,w
 10183  06DA  1C03               	skipc
 10184  06DB  108E               	bcf	14,1	;volatile
 10185  06DC  1803               	skipnc
 10186  06DD  148E               	bsf	14,1	;volatile
 10187                           
 10188                           ;mcu_drv.c: 205: WPUCbits.WPUC2 = WpuCh->WpuC2;
 10189  06DE  0874               	movf	Mcu_ConfigPullUps@WpuCh,w
 10190  06DF  3E0C               	addlw	12
 10191  06E0  0086               	movwf	6
 10192  06E1  0187               	clrf	7
 10193  06E2  0C01               	rrf	1,w
 10194  06E3  1C03               	skipc
 10195  06E4  110E               	bcf	14,2	;volatile
 10196  06E5  1803               	skipnc
 10197  06E6  150E               	bsf	14,2	;volatile
 10198                           
 10199                           ;mcu_drv.c: 206: WPUCbits.WPUC3 = WpuCh->WpuC3;
 10200  06E7  0874               	movf	Mcu_ConfigPullUps@WpuCh,w
 10201  06E8  3E0D               	addlw	13
 10202  06E9  0086               	movwf	6
 10203  06EA  0187               	clrf	7
 10204  06EB  0C01               	rrf	1,w
 10205  06EC  1C03               	skipc
 10206  06ED  118E               	bcf	14,3	;volatile
 10207  06EE  1803               	skipnc
 10208  06EF  158E               	bsf	14,3	;volatile
 10209                           
 10210                           ;mcu_drv.c: 207: WPUCbits.WPUC4 = WpuCh->WpuC4;
 10211  06F0  0874               	movf	Mcu_ConfigPullUps@WpuCh,w
 10212  06F1  3E0E               	addlw	14
 10213  06F2  0086               	movwf	6
 10214  06F3  0187               	clrf	7
 10215  06F4  0C01               	rrf	1,w
 10216  06F5  1C03               	skipc
 10217  06F6  120E               	bcf	14,4	;volatile
 10218  06F7  1803               	skipnc
 10219  06F8  160E               	bsf	14,4	;volatile
 10220                           
 10221                           ;mcu_drv.c: 208: WPUCbits.WPUC5 = WpuCh->WpuC5;
 10222  06F9  0874               	movf	Mcu_ConfigPullUps@WpuCh,w
 10223  06FA  3E0F               	addlw	15
 10224  06FB  0086               	movwf	6
 10225  06FC  0187               	clrf	7
 10226  06FD  0C01               	rrf	1,w
 10227  06FE  1C03               	skipc
 10228  06FF  128E               	bcf	14,5	;volatile
 10229  0700  1803               	skipnc
 10230  0701  168E               	bsf	14,5	;volatile
 10231                           
 10232                           ;mcu_drv.c: 210: WPUCbits.WPUC6 = WpuCh->WpuC6;
 10233  0702  0874               	movf	Mcu_ConfigPullUps@WpuCh,w
 10234  0703  3E10               	addlw	16
 10235  0704  0086               	movwf	6
 10236  0705  0187               	clrf	7
 10237  0706  0C01               	rrf	1,w
 10238  0707  1C03               	skipc
 10239  0708  130E               	bcf	14,6	;volatile
 10240  0709  1803               	skipnc
 10241  070A  170E               	bsf	14,6	;volatile
 10242                           
 10243                           ;mcu_drv.c: 211: WPUCbits.WPUC7 = WpuCh->WpuC7;
 10244  070B  0874               	movf	Mcu_ConfigPullUps@WpuCh,w
 10245  070C  3E11               	addlw	17
 10246  070D  0086               	movwf	6
 10247  070E  0187               	clrf	7
 10248  070F  0C01               	rrf	1,w
 10249  0710  1C03               	skipc
 10250  0711  138E               	bcf	14,7	;volatile
 10251  0712  1803               	skipnc
 10252  0713  178E               	bsf	14,7	;volatile
 10253  0714  0008               	return
 10254  0715                     __end_of_Mcu_ConfigPullUps:	
 10255                           
 10256                           	psect	text42
 10257  0E7D                     __ptext42:	
 10258 ;; *************** function _GenerateImpulse *****************
 10259 ;; Defined at:
 10260 ;;		line 239 in file "../Source/c/04_App/sb140_app.c"
 10261 ;; Parameters:    Size  Location     Type
 10262 ;;  Impulse         1    wreg     PTR struct _ImpulseType
 10263 ;;		 -> Hsd4Set(10), Hsd3Set(10), Hsd2Set(10), Hsd1Set(10), 
 10264 ;; Auto vars:     Size  Location     Type
 10265 ;;  Impulse         1    4[BANK0 ] PTR struct _ImpulseType
 10266 ;;		 -> Hsd4Set(10), Hsd3Set(10), Hsd2Set(10), Hsd1Set(10), 
 10267 ;; Return value:  Size  Location     Type
 10268 ;;                  1    wreg      void 
 10269 ;; Registers used:
 10270 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10271 ;; Tracked objects:
 10272 ;;		On entry : 0/0
 10273 ;;		On exit  : 0/0
 10274 ;;		Unchanged: 0/0
 10275 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10276 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10277 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10278 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10279 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10280 ;;Total ram usage:        5 bytes
 10281 ;; Hardware stack levels used:    1
 10282 ;; Hardware stack levels required when called:    3
 10283 ;; This function calls:
 10284 ;;		_ReceiveEvt
 10285 ;;		_SetOutChSts
 10286 ;; This function is called by:
 10287 ;;		_App_MainTask
 10288 ;; This function uses a non-reentrant model
 10289 ;;
 10290                           
 10291                           
 10292                           ;psect for function _GenerateImpulse
 10293  0E7D                     _GenerateImpulse:	
 10294                           
 10295                           ;incstack = 0
 10296                           ; Regs used in _GenerateImpulse: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 10297                           ;GenerateImpulse@Impulse stored from wreg
 10298  0E7D  0020               	movlb	0	; select bank0
 10299  0E7E  00A4               	movwf	GenerateImpulse@Impulse
 10300                           
 10301                           ;sb140_app.c: 241: switch (Impulse->ImpulseState)
 10302  0E7F  2EEB               	goto	l4555
 10303  0E80                     l4531:	
 10304                           ;sb140_app.c: 242: {
 10305                           ;sb140_app.c: 243: case Imp_Idle:
 10306                           
 10307                           
 10308                           ;sb140_app.c: 245: if (ReceiveEvt(&(Impulse->StartEvt)))
 10309  0E80  0824               	movf	GenerateImpulse@Impulse,w
 10310  0E81  3E08               	addlw	8
 10311  0E82  3189  2151  318E   	fcall	_ReceiveEvt
 10312  0E85  3A00               	xorlw	0
 10313  0E86  1903               	skipnz
 10314  0E87  0008               	return
 10315                           
 10316                           ;sb140_app.c: 246: {
 10317                           ;sb140_app.c: 248: SetOutChSts(Impulse->Channel,((UINT8)(1)));
 10318  0E88  01F4               	clrf	SetOutChSts@Sts
 10319  0E89  0AF4               	incf	SetOutChSts@Sts,f
 10320  0E8A  0020               	movlb	0	; select bank0
 10321  0E8B  0824               	movf	GenerateImpulse@Impulse,w
 10322  0E8C  3E07               	addlw	7
 10323  0E8D  0086               	movwf	6
 10324  0E8E  0187               	clrf	7
 10325  0E8F  0801               	movf	1,w
 10326  0E90  318A  2260         	fcall	_SetOutChSts
 10327                           
 10328                           ;sb140_app.c: 249: Impulse->ImpulseState = Imp_Delay;
 10329  0E92  0020               	movlb	0	; select bank0
 10330  0E93  0824               	movf	GenerateImpulse@Impulse,w
 10331  0E94  0086               	movwf	6
 10332  0E95  0187               	clrf	7
 10333  0E96  0181               	clrf	1
 10334  0E97  0A81               	incf	1,f
 10335                           
 10336                           ;sb140_app.c: 250: }
 10337                           ;sb140_app.c: 251: break;
 10338  0E98  0008               	return
 10339  0E99                     l4537:	
 10340                           ;sb140_app.c: 253: case Imp_Delay:
 10341                           
 10342                           
 10343                           ;sb140_app.c: 255: (Impulse->CounterMs)++;
 10344  0E99  0A24               	incf	GenerateImpulse@Impulse,w
 10345  0E9A  0086               	movwf	6
 10346  0E9B  0187               	clrf	7
 10347  0E9C  3001               	movlw	1
 10348  0E9D  0781               	addwf	1,f
 10349  0E9E  3141               	addfsr 1,1
 10350  0E9F  1803               	skipnc
 10351  0EA0  0A81               	incf	1,f
 10352                           
 10353                           ;sb140_app.c: 257: if (Impulse->CounterMs >= 1000/((UINT16)(10)))
 10354  0EA1  0A24               	incf	GenerateImpulse@Impulse,w
 10355  0EA2  0086               	movwf	6
 10356  0EA3  0187               	clrf	7
 10357  0EA4  3F40               	moviw [0]fsr1
 10358  0EA5  00A0               	movwf	??_GenerateImpulse
 10359  0EA6  3F41               	moviw [1]fsr1
 10360  0EA7  00A1               	movwf	??_GenerateImpulse+1
 10361  0EA8  3000               	movlw	0
 10362  0EA9  0221               	subwf	??_GenerateImpulse+1,w
 10363  0EAA  3064               	movlw	100
 10364  0EAB  1903               	skipnz
 10365  0EAC  0220               	subwf	??_GenerateImpulse,w
 10366  0EAD  1C03               	skipc
 10367  0EAE  2EBE               	goto	l4545
 10368                           
 10369                           ;sb140_app.c: 258: {
 10370                           ;sb140_app.c: 260: Impulse->CounterMs = 0;
 10371  0EAF  0A24               	incf	GenerateImpulse@Impulse,w
 10372  0EB0  0086               	movwf	6
 10373  0EB1  0187               	clrf	7
 10374  0EB2  3000               	movlw	0
 10375  0EB3  3FC0               	movwi [0]fsr1
 10376  0EB4  3FC1               	movwi [1]fsr1
 10377                           
 10378                           ;sb140_app.c: 262: (Impulse->CounterS)++;
 10379  0EB5  0824               	movf	GenerateImpulse@Impulse,w
 10380  0EB6  3E03               	addlw	3
 10381  0EB7  0086               	movwf	6
 10382  0EB8  0187               	clrf	7
 10383  0EB9  3001               	movlw	1
 10384  0EBA  0781               	addwf	1,f
 10385  0EBB  3141               	addfsr 1,1
 10386  0EBC  1803               	skipnc
 10387  0EBD  0A81               	incf	1,f
 10388  0EBE                     l4545:	
 10389                           
 10390                           ;sb140_app.c: 263: }
 10391                           ;sb140_app.c: 265: if (Impulse->CounterS >= Impulse->ImpulseLen)
 10392  0EBE  0824               	movf	GenerateImpulse@Impulse,w
 10393  0EBF  3E05               	addlw	5
 10394  0EC0  0086               	movwf	6
 10395  0EC1  0187               	clrf	7
 10396  0EC2  3F40               	moviw [0]fsr1
 10397  0EC3  00A0               	movwf	??_GenerateImpulse
 10398  0EC4  3F41               	moviw [1]fsr1
 10399  0EC5  00A1               	movwf	??_GenerateImpulse+1
 10400  0EC6  0824               	movf	GenerateImpulse@Impulse,w
 10401  0EC7  3E03               	addlw	3
 10402  0EC8  0086               	movwf	6
 10403  0EC9  0187               	clrf	7
 10404  0ECA  3F40               	moviw [0]fsr1
 10405  0ECB  00A2               	movwf	??_GenerateImpulse+2
 10406  0ECC  3F41               	moviw [1]fsr1
 10407  0ECD  00A3               	movwf	??_GenerateImpulse+3
 10408  0ECE  0821               	movf	??_GenerateImpulse+1,w
 10409  0ECF  0223               	subwf	??_GenerateImpulse+3,w
 10410  0ED0  1D03               	skipz
 10411  0ED1  2ED4               	goto	u3485
 10412  0ED2  0820               	movf	??_GenerateImpulse,w
 10413  0ED3  0222               	subwf	??_GenerateImpulse+2,w
 10414  0ED4                     u3485:	
 10415  0ED4  1C03               	skipc
 10416  0ED5  0008               	return
 10417                           
 10418                           ;sb140_app.c: 266: {
 10419                           ;sb140_app.c: 268: Impulse->CounterS = 0;
 10420  0ED6  0824               	movf	GenerateImpulse@Impulse,w
 10421  0ED7  3E03               	addlw	3
 10422  0ED8  0086               	movwf	6
 10423  0ED9  0187               	clrf	7
 10424  0EDA  3000               	movlw	0
 10425  0EDB  3FC0               	movwi [0]fsr1
 10426  0EDC  3FC1               	movwi [1]fsr1
 10427                           
 10428                           ;sb140_app.c: 270: SetOutChSts(Impulse->Channel,((UINT8)(0)));
 10429  0EDD  01F4               	clrf	SetOutChSts@Sts
 10430  0EDE  0824               	movf	GenerateImpulse@Impulse,w
 10431  0EDF  3E07               	addlw	7
 10432  0EE0  0086               	movwf	6
 10433  0EE1  0187               	clrf	7
 10434  0EE2  0801               	movf	1,w
 10435  0EE3  318A  2260         	fcall	_SetOutChSts
 10436                           
 10437                           ;sb140_app.c: 272: Impulse->ImpulseState = Imp_Idle;
 10438  0EE5  0020               	movlb	0	; select bank0
 10439  0EE6  0824               	movf	GenerateImpulse@Impulse,w
 10440  0EE7  0086               	movwf	6
 10441  0EE8  0187               	clrf	7
 10442  0EE9  0181               	clrf	1
 10443                           
 10444                           ;sb140_app.c: 282: }
 10445                           
 10446                           ;sb140_app.c: 281: break;
 10447                           
 10448                           ;sb140_app.c: 280: default:
 10449                           
 10450                           ;sb140_app.c: 277: }
 10451                           ;sb140_app.c: 278: break;
 10452                           
 10453                           ;sb140_app.c: 274: else
 10454                           ;sb140_app.c: 275: {
 10455                           
 10456                           ;sb140_app.c: 273: }
 10457  0EEA  0008               	return
 10458  0EEB                     l4555:	
 10459  0EEB  0824               	movf	GenerateImpulse@Impulse,w
 10460  0EEC  0086               	movwf	6
 10461  0EED  0187               	clrf	7
 10462  0EEE  0801               	movf	1,w
 10463                           
 10464                           ; Switch size 1, requested type "space"
 10465                           ; Number of cases is 2, Range of values is 0 to 1
 10466                           ; switch strategies available:
 10467                           ; Name         Instructions Cycles
 10468                           ; simple_byte            7     4 (average)
 10469                           ; direct_byte           10     6 (fixed)
 10470                           ; jumptable            260     6 (fixed)
 10471                           ;	Chosen strategy is simple_byte
 10472  0EEF  3A00               	xorlw	0	; case 0
 10473  0EF0  1903               	skipnz
 10474  0EF1  2E80               	goto	l4531
 10475  0EF2  3A01               	xorlw	1	; case 1
 10476  0EF3  1903               	skipnz
 10477  0EF4  2E99               	goto	l4537
 10478  0EF5  2EF6               	goto	l914
 10479  0EF6                     l914:	
 10480  0EF6  0008               	return
 10481  0EF7                     __end_of_GenerateImpulse:	
 10482                           
 10483                           	psect	text43
 10484  0A08                     __ptext43:	
 10485 ;; *************** function _AppSm *****************
 10486 ;; Defined at:
 10487 ;;		line 375 in file "../Source/c/04_App/sb140_app.c"
 10488 ;; Parameters:    Size  Location     Type
 10489 ;;		None
 10490 ;; Auto vars:     Size  Location     Type
 10491 ;;		None
 10492 ;; Return value:  Size  Location     Type
 10493 ;;                  1    wreg      void 
 10494 ;; Registers used:
 10495 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10496 ;; Tracked objects:
 10497 ;;		On entry : 0/0
 10498 ;;		On exit  : 0/0
 10499 ;;		Unchanged: 0/0
 10500 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10501 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10502 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10503 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10504 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10505 ;;Total ram usage:        1 bytes
 10506 ;; Hardware stack levels used:    1
 10507 ;; Hardware stack levels required when called:    6
 10508 ;; This function calls:
 10509 ;;		_GenerateEvt
 10510 ;;		_ManageProtocol
 10511 ;;		_StdS_SetI2cAddress
 10512 ;; This function is called by:
 10513 ;;		_App_MainTask
 10514 ;; This function uses a non-reentrant model
 10515 ;;
 10516                           
 10517                           
 10518                           ;psect for function _AppSm
 10519  0A08                     _AppSm:	
 10520                           
 10521                           ;sb140_app.c: 377: static AppStateType AppState = WaitWpuSetState;
 10522                           ;sb140_app.c: 378: static UINT8 WpuSetCounter = 0;
 10523                           ;sb140_app.c: 380: switch (AppState)
 10524                           
 10525                           ;incstack = 0
 10526                           ; Regs used in _AppSm: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 10527  0A08  2A26               	goto	l4575
 10528  0A09                     l4559:	
 10529                           ;sb140_app.c: 381: {
 10530                           ;sb140_app.c: 382: case WaitWpuSetState:
 10531                           
 10532                           
 10533                           ;sb140_app.c: 384: WpuSetCounter++;
 10534  0A09  3001               	movlw	1
 10535  0A0A  0020               	movlb	0	; select bank0
 10536  0A0B  00BB               	movwf	??_AppSm
 10537  0A0C  083B               	movf	??_AppSm,w
 10538  0A0D  0021               	movlb	1	; select bank1
 10539  0A0E  07AB               	addwf	AppSm@WpuSetCounter^(0+128),f
 10540                           
 10541                           ;sb140_app.c: 386: if (WpuSetCounter >= ((UINT16)(100)/((UINT16)(10))))
 10542  0A0F  300A               	movlw	10
 10543  0A10  022B               	subwf	AppSm@WpuSetCounter^(0+128),w
 10544  0A11  1C03               	skipc
 10545  0A12  0008               	return
 10546                           
 10547                           ;sb140_app.c: 387: {
 10548                           ;sb140_app.c: 389: StdS_SetI2cAddress();
 10549  0A13  318A  22BD         	fcall	_StdS_SetI2cAddress
 10550                           
 10551                           ;sb140_app.c: 391: AppState = SendI2cAddrState;
 10552  0A15  0021               	movlb	1	; select bank1
 10553  0A16  01AA               	clrf	AppSm@AppState^(0+128)
 10554  0A17  0AAA               	incf	AppSm@AppState^(0+128),f
 10555                           
 10556                           ;sb140_app.c: 392: }
 10557                           ;sb140_app.c: 393: break;
 10558  0A18  0008               	return
 10559  0A19                     l4567:	
 10560                           ;sb140_app.c: 395: case SendI2cAddrState:
 10561                           
 10562                           
 10563                           ;sb140_app.c: 397: GenerateEvt(&I2cSetAddress);
 10564  0A19  30E5               	movlw	(low (_I2cSetAddress| 0))& (0+255)
 10565  0A1A  3189  2172         	fcall	_GenerateEvt
 10566                           
 10567                           ;sb140_app.c: 399: AppState = ManageProtocolState;
 10568  0A1C  3002               	movlw	2
 10569  0A1D  0020               	movlb	0	; select bank0
 10570  0A1E  00BB               	movwf	??_AppSm
 10571  0A1F  083B               	movf	??_AppSm,w
 10572  0A20  0021               	movlb	1	; select bank1
 10573  0A21  00AA               	movwf	AppSm@AppState^(0+128)
 10574                           
 10575                           ;sb140_app.c: 400: break;
 10576  0A22  0008               	return
 10577  0A23                     l4571:	
 10578                           ;sb140_app.c: 402: case ManageProtocolState:
 10579                           
 10580                           
 10581                           ;sb140_app.c: 404: ManageProtocol();
 10582  0A23  3182  22A1         	fcall	_ManageProtocol
 10583                           
 10584                           ;sb140_app.c: 409: }
 10585                           
 10586                           ;sb140_app.c: 408: break;
 10587                           
 10588                           ;sb140_app.c: 407: default:
 10589                           
 10590                           ;sb140_app.c: 405: break;
 10591  0A25  0008               	return
 10592  0A26                     l4575:	
 10593  0A26  0021               	movlb	1	; select bank1
 10594  0A27  082A               	movf	AppSm@AppState^(0+128),w
 10595                           
 10596                           ; Switch size 1, requested type "space"
 10597                           ; Number of cases is 3, Range of values is 0 to 2
 10598                           ; switch strategies available:
 10599                           ; Name         Instructions Cycles
 10600                           ; simple_byte           10     6 (average)
 10601                           ; direct_byte           12     6 (fixed)
 10602                           ; jumptable            260     6 (fixed)
 10603                           ;	Chosen strategy is simple_byte
 10604  0A28  3A00               	xorlw	0	; case 0
 10605  0A29  1903               	skipnz
 10606  0A2A  2A09               	goto	l4559
 10607  0A2B  3A01               	xorlw	1	; case 1
 10608  0A2C  1903               	skipnz
 10609  0A2D  2A19               	goto	l4567
 10610  0A2E  3A03               	xorlw	3	; case 2
 10611  0A2F  1903               	skipnz
 10612  0A30  2A23               	goto	l4571
 10613  0A31  2A32               	goto	l942
 10614  0A32                     l942:	
 10615  0A32  0008               	return
 10616  0A33                     __end_of_AppSm:	
 10617                           
 10618                           	psect	text44
 10619  0ABD                     __ptext44:	
 10620 ;; *************** function _StdS_SetI2cAddress *****************
 10621 ;; Defined at:
 10622 ;;		line 317 in file "../../../Framework/MercuryFwk/Source/c/03_Sml/02_Ssl/std_ser.c"
 10623 ;; Parameters:    Size  Location     Type
 10624 ;;		None
 10625 ;; Auto vars:     Size  Location     Type
 10626 ;;		None
 10627 ;; Return value:  Size  Location     Type
 10628 ;;                  1    wreg      void 
 10629 ;; Registers used:
 10630 ;;		wreg, status,2, status,0
 10631 ;; Tracked objects:
 10632 ;;		On entry : 0/0
 10633 ;;		On exit  : 0/0
 10634 ;;		Unchanged: 0/0
 10635 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10636 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10637 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10638 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10639 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10640 ;;Total ram usage:        2 bytes
 10641 ;; Hardware stack levels used:    1
 10642 ;; Hardware stack levels required when called:    2
 10643 ;; This function calls:
 10644 ;;		Nothing
 10645 ;; This function is called by:
 10646 ;;		_AppSm
 10647 ;; This function uses a non-reentrant model
 10648 ;;
 10649                           
 10650                           
 10651                           ;psect for function _StdS_SetI2cAddress
 10652  0ABD                     _StdS_SetI2cAddress:	
 10653                           
 10654                           ;std_ser.c: 321: I2cSlaveAddress |= (!PORTCbits.RC7 << 3);
 10655                           
 10656                           ;incstack = 0
 10657                           ; Regs used in _StdS_SetI2cAddress: [wreg+status,2+status,0]
 10658  0ABD  1003               	clrc
 10659  0ABE  0020               	movlb	0	; select bank0
 10660  0ABF  1F8E               	btfss	14,7	;volatile
 10661  0AC0  1403               	setc
 10662  0AC1  3000               	movlw	0
 10663  0AC2  3D09               	addwfc	9,w
 10664  0AC3  00F4               	movwf	??_StdS_SetI2cAddress
 10665  0AC4  3002               	movlw	2
 10666  0AC5                     u1795:	
 10667  0AC5  35F4               	lslf	??_StdS_SetI2cAddress,f
 10668  0AC6  3EFF               	addlw	-1
 10669  0AC7  1D03               	skipz
 10670  0AC8  2AC5               	goto	u1795
 10671  0AC9  3574               	lslf	??_StdS_SetI2cAddress,w
 10672  0ACA  00F5               	movwf	??_StdS_SetI2cAddress+1
 10673  0ACB  0875               	movf	??_StdS_SetI2cAddress+1,w
 10674  0ACC  04F7               	iorwf	_I2cSlaveAddress,f
 10675                           
 10676                           ;std_ser.c: 322: I2cSlaveAddress |= (!PORTCbits.RC3 << 2);
 10677  0ACD  1003               	clrc
 10678  0ACE  1D8E               	btfss	14,3	;volatile
 10679  0ACF  1403               	setc
 10680  0AD0  3000               	movlw	0
 10681  0AD1  3D09               	addwfc	9,w
 10682  0AD2  00F4               	movwf	??_StdS_SetI2cAddress
 10683  0AD3  3001               	movlw	1
 10684  0AD4                     u1805:	
 10685  0AD4  35F4               	lslf	??_StdS_SetI2cAddress,f
 10686  0AD5  3EFF               	addlw	-1
 10687  0AD6  1D03               	skipz
 10688  0AD7  2AD4               	goto	u1805
 10689  0AD8  3574               	lslf	??_StdS_SetI2cAddress,w
 10690  0AD9  00F5               	movwf	??_StdS_SetI2cAddress+1
 10691  0ADA  0875               	movf	??_StdS_SetI2cAddress+1,w
 10692  0ADB  04F7               	iorwf	_I2cSlaveAddress,f
 10693                           
 10694                           ;std_ser.c: 323: I2cSlaveAddress |= (!PORTCbits.RC4 << 1);
 10695  0ADC  1003               	clrc
 10696  0ADD  1E0E               	btfss	14,4	;volatile
 10697  0ADE  1403               	setc
 10698  0ADF  3000               	movlw	0
 10699  0AE0  3D09               	addwfc	9,w
 10700  0AE1  0709               	addwf	9,w
 10701  0AE2  00F4               	movwf	??_StdS_SetI2cAddress
 10702  0AE3  0874               	movf	??_StdS_SetI2cAddress,w
 10703  0AE4  04F7               	iorwf	_I2cSlaveAddress,f
 10704                           
 10705                           ;std_ser.c: 324: I2cSlaveAddress |= (!PORTAbits.RA4 << 0);
 10706  0AE5  1003               	clrc
 10707  0AE6  1E0C               	btfss	12,4	;volatile
 10708  0AE7  1403               	setc
 10709  0AE8  3000               	movlw	0
 10710  0AE9  3D09               	addwfc	9,w
 10711  0AEA  00F4               	movwf	??_StdS_SetI2cAddress
 10712  0AEB  0874               	movf	??_StdS_SetI2cAddress,w
 10713  0AEC  04F7               	iorwf	_I2cSlaveAddress,f
 10714  0AED  0008               	return
 10715  0AEE                     __end_of_StdS_SetI2cAddress:	
 10716                           
 10717                           	psect	text45
 10718  02A1                     __ptext45:	
 10719 ;; *************** function _ManageProtocol *****************
 10720 ;; Defined at:
 10721 ;;		line 293 in file "../Source/c/04_App/sb140_app.c"
 10722 ;; Parameters:    Size  Location     Type
 10723 ;;		None
 10724 ;; Auto vars:     Size  Location     Type
 10725 ;;		None
 10726 ;; Return value:  Size  Location     Type
 10727 ;;                  1    wreg      void 
 10728 ;; Registers used:
 10729 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10730 ;; Tracked objects:
 10731 ;;		On entry : 0/0
 10732 ;;		On exit  : 0/0
 10733 ;;		Unchanged: 0/0
 10734 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10735 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10736 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10737 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10738 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10739 ;;Total ram usage:        3 bytes
 10740 ;; Hardware stack levels used:    1
 10741 ;; Hardware stack levels required when called:    5
 10742 ;; This function calls:
 10743 ;;		_GenerateEvt
 10744 ;;		_ReceiveEvt
 10745 ;;		_StdS_ManageStdServices
 10746 ;;		_UpdateHsdSts
 10747 ;; This function is called by:
 10748 ;;		_AppSm
 10749 ;; This function uses a non-reentrant model
 10750 ;;
 10751                           
 10752                           
 10753                           ;psect for function _ManageProtocol
 10754  02A1                     _ManageProtocol:	
 10755                           
 10756                           ;sb140_app.c: 296: if (ReceiveEvt(&I2cWriteRequest))
 10757                           
 10758                           ;incstack = 0
 10759                           ; Regs used in _ManageProtocol: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 10760  02A1  30E7               	movlw	(low (_I2cWriteRequest| 0))& (0+255)
 10761  02A2  3189  2151  3182   	fcall	_ReceiveEvt
 10762  02A5  3A00               	xorlw	0
 10763  02A6  1903               	skipnz
 10764  02A7  0008               	return
 10765                           
 10766                           ;sb140_app.c: 297: {
 10767                           ;sb140_app.c: 299: StdS_ManageStdServices();
 10768  02A8  3181  21AD  3182   	fcall	_StdS_ManageStdServices
 10769                           
 10770                           ;sb140_app.c: 301: switch (CmdBuffer[((UINT8)(0))])
 10771  02AB  2B73               	goto	l4341
 10772  02AC                     l4305:	
 10773                           ;sb140_app.c: 302: {
 10774                           ;sb140_app.c: 303: case ((UINT8)(0x50)):
 10775                           
 10776                           
 10777                           ;sb140_app.c: 305: UpdateHsdSts();
 10778  02AC  318C  249D         	fcall	_UpdateHsdSts
 10779                           
 10780                           ;sb140_app.c: 306: break;
 10781  02AE  0008               	return
 10782  02AF                     l4307:	
 10783                           ;sb140_app.c: 308: case ((UINT8)(0x51)):
 10784                           
 10785                           
 10786                           ;sb140_app.c: 310: Hsd1Set.ImpulseLen = CmdBuffer[((UINT8)(2))] | (((UINT16)(CmdBuffer[(
      +                          (UINT8)(1))]) << 8));
 10787  02AF  0023               	movlb	3	; select bank3
 10788  02B0  0821               	movf	(_CmdBuffer^(0+384)+1),w
 10789  02B1  0020               	movlb	0	; select bank0
 10790  02B2  00B8               	movwf	??_ManageProtocol
 10791  02B3  01B9               	clrf	??_ManageProtocol+1
 10792  02B4  0838               	movf	??_ManageProtocol,w
 10793  02B5  00B9               	movwf	??_ManageProtocol+1
 10794  02B6  01B8               	clrf	??_ManageProtocol
 10795  02B7  0838               	movf	??_ManageProtocol,w
 10796  02B8  0023               	movlb	3	; select bank3
 10797  02B9  0422               	iorwf	(_CmdBuffer^(0+384)+2),w
 10798  02BA  0021               	movlb	1	; select bank1
 10799  02BB  00B8               	movwf	(_Hsd1Set^(0+128)+5)
 10800  02BC  0020               	movlb	0	; select bank0
 10801  02BD  0839               	movf	??_ManageProtocol+1,w
 10802  02BE  0021               	movlb	1	; select bank1
 10803  02BF  00B9               	movwf	((_Hsd1Set+1)^(0+128)+5)
 10804                           
 10805                           ;sb140_app.c: 312: GenerateEvt(&(Hsd1Set.StartEvt));
 10806  02C0  30BB               	movlw	(low ((_Hsd1Set| 0+8)))& (0+255)
 10807  02C1  3189  2172         	fcall	_GenerateEvt
 10808                           
 10809                           ;sb140_app.c: 313: break;
 10810  02C3  0008               	return
 10811  02C4                     l4311:	
 10812                           ;sb140_app.c: 315: case ((UINT8)(0x52)):
 10813                           
 10814                           
 10815                           ;sb140_app.c: 317: Hsd2Set.ImpulseLen = CmdBuffer[((UINT8)(2))] | (((UINT16)(CmdBuffer[(
      +                          (UINT8)(1))]) << 8));
 10816  02C4  0023               	movlb	3	; select bank3
 10817  02C5  0821               	movf	(_CmdBuffer^(0+384)+1),w
 10818  02C6  0020               	movlb	0	; select bank0
 10819  02C7  00B8               	movwf	??_ManageProtocol
 10820  02C8  01B9               	clrf	??_ManageProtocol+1
 10821  02C9  0838               	movf	??_ManageProtocol,w
 10822  02CA  00B9               	movwf	??_ManageProtocol+1
 10823  02CB  01B8               	clrf	??_ManageProtocol
 10824  02CC  0838               	movf	??_ManageProtocol,w
 10825  02CD  0023               	movlb	3	; select bank3
 10826  02CE  0422               	iorwf	(_CmdBuffer^(0+384)+2),w
 10827  02CF  0021               	movlb	1	; select bank1
 10828  02D0  00C2               	movwf	(_Hsd2Set^(0+128)+5)
 10829  02D1  0020               	movlb	0	; select bank0
 10830  02D2  0839               	movf	??_ManageProtocol+1,w
 10831  02D3  0021               	movlb	1	; select bank1
 10832  02D4  00C3               	movwf	((_Hsd2Set+1)^(0+128)+5)
 10833                           
 10834                           ;sb140_app.c: 319: GenerateEvt(&(Hsd2Set.StartEvt));
 10835  02D5  30C5               	movlw	(low ((_Hsd2Set| 0+8)))& (0+255)
 10836  02D6  3189  2172         	fcall	_GenerateEvt
 10837                           
 10838                           ;sb140_app.c: 320: break;
 10839  02D8  0008               	return
 10840  02D9                     l4315:	
 10841                           ;sb140_app.c: 322: case ((UINT8)(0x53)):
 10842                           
 10843                           
 10844                           ;sb140_app.c: 324: Hsd3Set.ImpulseLen = CmdBuffer[((UINT8)(2))] | (((UINT16)(CmdBuffer[(
      +                          (UINT8)(1))]) << 8));
 10845  02D9  0023               	movlb	3	; select bank3
 10846  02DA  0821               	movf	(_CmdBuffer^(0+384)+1),w
 10847  02DB  0020               	movlb	0	; select bank0
 10848  02DC  00B8               	movwf	??_ManageProtocol
 10849  02DD  01B9               	clrf	??_ManageProtocol+1
 10850  02DE  0838               	movf	??_ManageProtocol,w
 10851  02DF  00B9               	movwf	??_ManageProtocol+1
 10852  02E0  01B8               	clrf	??_ManageProtocol
 10853  02E1  0838               	movf	??_ManageProtocol,w
 10854  02E2  0023               	movlb	3	; select bank3
 10855  02E3  0422               	iorwf	(_CmdBuffer^(0+384)+2),w
 10856  02E4  0021               	movlb	1	; select bank1
 10857  02E5  00CC               	movwf	(_Hsd3Set^(0+128)+5)
 10858  02E6  0020               	movlb	0	; select bank0
 10859  02E7  0839               	movf	??_ManageProtocol+1,w
 10860  02E8  0021               	movlb	1	; select bank1
 10861  02E9  00CD               	movwf	((_Hsd3Set+1)^(0+128)+5)
 10862                           
 10863                           ;sb140_app.c: 326: GenerateEvt(&(Hsd3Set.StartEvt));
 10864  02EA  30CF               	movlw	(low ((_Hsd3Set| 0+8)))& (0+255)
 10865  02EB  3189  2172         	fcall	_GenerateEvt
 10866                           
 10867                           ;sb140_app.c: 327: break;
 10868  02ED  0008               	return
 10869  02EE                     l4319:	
 10870                           ;sb140_app.c: 329: case ((UINT8)(0x54)):
 10871                           
 10872                           
 10873                           ;sb140_app.c: 331: Hsd4Set.ImpulseLen = CmdBuffer[((UINT8)(2))] | (((UINT16)(CmdBuffer[(
      +                          (UINT8)(1))]) << 8));
 10874  02EE  0023               	movlb	3	; select bank3
 10875  02EF  0821               	movf	(_CmdBuffer^(0+384)+1),w
 10876  02F0  0020               	movlb	0	; select bank0
 10877  02F1  00B8               	movwf	??_ManageProtocol
 10878  02F2  01B9               	clrf	??_ManageProtocol+1
 10879  02F3  0838               	movf	??_ManageProtocol,w
 10880  02F4  00B9               	movwf	??_ManageProtocol+1
 10881  02F5  01B8               	clrf	??_ManageProtocol
 10882  02F6  0838               	movf	??_ManageProtocol,w
 10883  02F7  0023               	movlb	3	; select bank3
 10884  02F8  0422               	iorwf	(_CmdBuffer^(0+384)+2),w
 10885  02F9  0021               	movlb	1	; select bank1
 10886  02FA  00D6               	movwf	(_Hsd4Set^(0+128)+5)
 10887  02FB  0020               	movlb	0	; select bank0
 10888  02FC  0839               	movf	??_ManageProtocol+1,w
 10889  02FD  0021               	movlb	1	; select bank1
 10890  02FE  00D7               	movwf	((_Hsd4Set+1)^(0+128)+5)
 10891                           
 10892                           ;sb140_app.c: 333: GenerateEvt(&(Hsd4Set.StartEvt));
 10893  02FF  30D9               	movlw	(low ((_Hsd4Set| 0+8)))& (0+255)
 10894  0300  3189  2172         	fcall	_GenerateEvt
 10895                           
 10896                           ;sb140_app.c: 334: break;
 10897  0302  0008               	return
 10898  0303                     l4323:	
 10899                           ;sb140_app.c: 336: case ((UINT8)(0x55)):
 10900                           
 10901                           
 10902                           ;sb140_app.c: 338: Hsd1Set.ImpulseLen = CmdBuffer[((UINT8)(2))] | (((UINT16)(CmdBuffer[(
      +                          (UINT8)(1))]) << 8));
 10903  0303  0023               	movlb	3	; select bank3
 10904  0304  0821               	movf	(_CmdBuffer^(0+384)+1),w
 10905  0305  0020               	movlb	0	; select bank0
 10906  0306  00B8               	movwf	??_ManageProtocol
 10907  0307  01B9               	clrf	??_ManageProtocol+1
 10908  0308  0838               	movf	??_ManageProtocol,w
 10909  0309  00B9               	movwf	??_ManageProtocol+1
 10910  030A  01B8               	clrf	??_ManageProtocol
 10911  030B  0838               	movf	??_ManageProtocol,w
 10912  030C  0023               	movlb	3	; select bank3
 10913  030D  0422               	iorwf	(_CmdBuffer^(0+384)+2),w
 10914  030E  0021               	movlb	1	; select bank1
 10915  030F  00B8               	movwf	(_Hsd1Set^(0+128)+5)
 10916  0310  0020               	movlb	0	; select bank0
 10917  0311  0839               	movf	??_ManageProtocol+1,w
 10918  0312  0021               	movlb	1	; select bank1
 10919  0313  00B9               	movwf	((_Hsd1Set+1)^(0+128)+5)
 10920                           
 10921                           ;sb140_app.c: 339: Hsd2Set.ImpulseLen = CmdBuffer[((UINT8)(2))] | (((UINT16)(CmdBuffer[(
      +                          (UINT8)(1))]) << 8));
 10922  0314  0023               	movlb	3	; select bank3
 10923  0315  0821               	movf	(_CmdBuffer^(0+384)+1),w
 10924  0316  0020               	movlb	0	; select bank0
 10925  0317  00B8               	movwf	??_ManageProtocol
 10926  0318  01B9               	clrf	??_ManageProtocol+1
 10927  0319  0838               	movf	??_ManageProtocol,w
 10928  031A  00B9               	movwf	??_ManageProtocol+1
 10929  031B  01B8               	clrf	??_ManageProtocol
 10930  031C  0838               	movf	??_ManageProtocol,w
 10931  031D  0023               	movlb	3	; select bank3
 10932  031E  0422               	iorwf	(_CmdBuffer^(0+384)+2),w
 10933  031F  0021               	movlb	1	; select bank1
 10934  0320  00C2               	movwf	(_Hsd2Set^(0+128)+5)
 10935  0321  0020               	movlb	0	; select bank0
 10936  0322  0839               	movf	??_ManageProtocol+1,w
 10937  0323  0021               	movlb	1	; select bank1
 10938  0324  00C3               	movwf	((_Hsd2Set+1)^(0+128)+5)
 10939                           
 10940                           ;sb140_app.c: 340: Hsd3Set.ImpulseLen = CmdBuffer[((UINT8)(2))] | (((UINT16)(CmdBuffer[(
      +                          (UINT8)(1))]) << 8));
 10941  0325  0023               	movlb	3	; select bank3
 10942  0326  0821               	movf	(_CmdBuffer^(0+384)+1),w
 10943  0327  0020               	movlb	0	; select bank0
 10944  0328  00B8               	movwf	??_ManageProtocol
 10945  0329  01B9               	clrf	??_ManageProtocol+1
 10946  032A  0838               	movf	??_ManageProtocol,w
 10947  032B  00B9               	movwf	??_ManageProtocol+1
 10948  032C  01B8               	clrf	??_ManageProtocol
 10949  032D  0838               	movf	??_ManageProtocol,w
 10950  032E  0023               	movlb	3	; select bank3
 10951  032F  0422               	iorwf	(_CmdBuffer^(0+384)+2),w
 10952  0330  0021               	movlb	1	; select bank1
 10953  0331  00CC               	movwf	(_Hsd3Set^(0+128)+5)
 10954  0332  0020               	movlb	0	; select bank0
 10955  0333  0839               	movf	??_ManageProtocol+1,w
 10956  0334  0021               	movlb	1	; select bank1
 10957  0335  00CD               	movwf	((_Hsd3Set+1)^(0+128)+5)
 10958                           
 10959                           ;sb140_app.c: 341: Hsd4Set.ImpulseLen = CmdBuffer[((UINT8)(2))] | (((UINT16)(CmdBuffer[(
      +                          (UINT8)(1))]) << 8));
 10960  0336  0023               	movlb	3	; select bank3
 10961  0337  0821               	movf	(_CmdBuffer^(0+384)+1),w
 10962  0338  0020               	movlb	0	; select bank0
 10963  0339  00B8               	movwf	??_ManageProtocol
 10964  033A  01B9               	clrf	??_ManageProtocol+1
 10965  033B  0838               	movf	??_ManageProtocol,w
 10966  033C  00B9               	movwf	??_ManageProtocol+1
 10967  033D  01B8               	clrf	??_ManageProtocol
 10968  033E  0838               	movf	??_ManageProtocol,w
 10969  033F  0023               	movlb	3	; select bank3
 10970  0340  0422               	iorwf	(_CmdBuffer^(0+384)+2),w
 10971  0341  0021               	movlb	1	; select bank1
 10972  0342  00D6               	movwf	(_Hsd4Set^(0+128)+5)
 10973  0343  0020               	movlb	0	; select bank0
 10974  0344  0839               	movf	??_ManageProtocol+1,w
 10975  0345  0021               	movlb	1	; select bank1
 10976  0346  00D7               	movwf	((_Hsd4Set+1)^(0+128)+5)
 10977                           
 10978                           ;sb140_app.c: 343: GenerateEvt(&(Hsd1Set.StartEvt));
 10979  0347  30BB               	movlw	(low ((_Hsd1Set| 0+8)))& (0+255)
 10980  0348  3189  2172  3182   	fcall	_GenerateEvt
 10981                           
 10982                           ;sb140_app.c: 344: GenerateEvt(&(Hsd2Set.StartEvt));
 10983  034B  30C5               	movlw	(low ((_Hsd2Set| 0+8)))& (0+255)
 10984  034C  3189  2172  3182   	fcall	_GenerateEvt
 10985                           
 10986                           ;sb140_app.c: 345: GenerateEvt(&(Hsd3Set.StartEvt));
 10987  034F  30CF               	movlw	(low ((_Hsd3Set| 0+8)))& (0+255)
 10988  0350  3189  2172  3182   	fcall	_GenerateEvt
 10989                           
 10990                           ;sb140_app.c: 346: GenerateEvt(&(Hsd4Set.StartEvt));
 10991  0353  30D9               	movlw	(low ((_Hsd4Set| 0+8)))& (0+255)
 10992  0354  3189  2172         	fcall	_GenerateEvt
 10993                           
 10994                           ;sb140_app.c: 347: break;
 10995  0356  0008               	return
 10996  0357                     l4333:	
 10997                           ;sb140_app.c: 349: case ((UINT8)(0x60)):
 10998                           
 10999                           
 11000                           ;sb140_app.c: 351: RepBuffer[((UINT8)(0))] = (Hsd1Sts | (Hsd2Sts << ((UINT8)(1))) | (Hsd
      +                          3Sts << ((UINT8)(2))) | (Hsd4Sts << ((UINT8)(3))));
 11001  0357  0020               	movlb	0	; select bank0
 11002  0358  086A               	movf	_Hsd4Sts,w
 11003  0359  00B8               	movwf	??_ManageProtocol
 11004  035A  3003               	movlw	3
 11005  035B                     u3115:	
 11006  035B  35B8               	lslf	??_ManageProtocol,f
 11007  035C  0B89               	decfsz	9,f
 11008  035D  2B5B               	goto	u3115
 11009  035E  0869               	movf	_Hsd3Sts,w
 11010  035F  00B9               	movwf	??_ManageProtocol+1
 11011  0360  3002               	movlw	2
 11012  0361                     u3125:	
 11013  0361  35B9               	lslf	??_ManageProtocol+1,f
 11014  0362  0B89               	decfsz	9,f
 11015  0363  2B61               	goto	u3125
 11016  0364  3568               	lslf	_Hsd2Sts,w
 11017  0365  0439               	iorwf	??_ManageProtocol+1,w
 11018  0366  0438               	iorwf	??_ManageProtocol,w
 11019  0367  0476               	iorwf	_Hsd1Sts,w
 11020  0368  00BA               	movwf	??_ManageProtocol+2
 11021  0369  083A               	movf	??_ManageProtocol+2,w
 11022  036A  0025               	movlb	5	; select bank5
 11023  036B  00A0               	movwf	_RepBuffer^(0+640)
 11024                           
 11025                           ;sb140_app.c: 356: RepBufferLen = ((UINT8)(1));
 11026  036C  0021               	movlb	1	; select bank1
 11027  036D  01B2               	clrf	_RepBufferLen^(0+128)
 11028  036E  0AB2               	incf	_RepBufferLen^(0+128),f
 11029                           
 11030                           ;sb140_app.c: 358: GenerateEvt(&I2cReplyPacketReady);
 11031  036F  306C               	movlw	(low (_I2cReplyPacketReady| 0))& (0+255)
 11032  0370  3189  2172         	fcall	_GenerateEvt
 11033                           
 11034                           ;sb140_app.c: 363: }
 11035                           
 11036                           ;sb140_app.c: 362: break;
 11037                           
 11038                           ;sb140_app.c: 361: default:
 11039                           
 11040                           ;sb140_app.c: 359: break;
 11041  0372  0008               	return
 11042  0373                     l4341:	
 11043  0373  0023               	movlb	3	; select bank3
 11044  0374  0820               	movf	_CmdBuffer^(0+384),w
 11045                           
 11046                           ; Switch size 1, requested type "space"
 11047                           ; Number of cases is 7, Range of values is 80 to 96
 11048                           ; switch strategies available:
 11049                           ; Name         Instructions Cycles
 11050                           ; simple_byte           22    12 (average)
 11051                           ; direct_byte           43     9 (fixed)
 11052                           ; jumptable            263     9 (fixed)
 11053                           ;	Chosen strategy is simple_byte
 11054  0375  3A50               	xorlw	80	; case 80
 11055  0376  1903               	skipnz
 11056  0377  2AAC               	goto	l4305
 11057  0378  3A01               	xorlw	1	; case 81
 11058  0379  1903               	skipnz
 11059  037A  2AAF               	goto	l4307
 11060  037B  3A03               	xorlw	3	; case 82
 11061  037C  1903               	skipnz
 11062  037D  2AC4               	goto	l4311
 11063  037E  3A01               	xorlw	1	; case 83
 11064  037F  1903               	skipnz
 11065  0380  2AD9               	goto	l4315
 11066  0381  3A07               	xorlw	7	; case 84
 11067  0382  1903               	skipnz
 11068  0383  2AEE               	goto	l4319
 11069  0384  3A01               	xorlw	1	; case 85
 11070  0385  1903               	skipnz
 11071  0386  2B03               	goto	l4323
 11072  0387  3A35               	xorlw	53	; case 96
 11073  0388  1903               	skipnz
 11074  0389  2B57               	goto	l4333
 11075  038A  2B8C               	goto	l928
 11076  038B  0008               	return
 11077  038C                     l928:	
 11078  038C  0008               	return
 11079  038D                     __end_of_ManageProtocol:	
 11080                           
 11081                           	psect	text46
 11082  0C9D                     __ptext46:	
 11083 ;; *************** function _UpdateHsdSts *****************
 11084 ;; Defined at:
 11085 ;;		line 180 in file "../Source/c/04_App/sb140_app.c"
 11086 ;; Parameters:    Size  Location     Type
 11087 ;;		None
 11088 ;; Auto vars:     Size  Location     Type
 11089 ;;		None
 11090 ;; Return value:  Size  Location     Type
 11091 ;;                  1    wreg      void 
 11092 ;; Registers used:
 11093 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
 11094 ;; Tracked objects:
 11095 ;;		On entry : 0/0
 11096 ;;		On exit  : 0/0
 11097 ;;		Unchanged: 0/0
 11098 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11099 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11100 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11101 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11102 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11103 ;;Total ram usage:        1 bytes
 11104 ;; Hardware stack levels used:    1
 11105 ;; Hardware stack levels required when called:    3
 11106 ;; This function calls:
 11107 ;;		_SetOutChSts
 11108 ;; This function is called by:
 11109 ;;		_ManageProtocol
 11110 ;; This function uses a non-reentrant model
 11111 ;;
 11112                           
 11113                           
 11114                           ;psect for function _UpdateHsdSts
 11115  0C9D                     _UpdateHsdSts:	
 11116                           
 11117                           ;sb140_app.c: 183: if (((CmdBuffer[((UINT8)(1))] & ((UINT8)(0b00000001))) >> ((UINT8)(0)
      +                          )) == ((UINT8)(1)))
 11118                           
 11119                           ;incstack = 0
 11120                           ; Regs used in _UpdateHsdSts: [wreg-fsr0h+status,2+status,0+pclath+cstack]
 11121  0C9D  0023               	movlb	3	; select bank3
 11122  0C9E  1C21               	btfss	(_CmdBuffer^(0+384)+1),0
 11123  0C9F  2CA3               	goto	l4181
 11124                           
 11125                           ;sb140_app.c: 184: {
 11126                           ;sb140_app.c: 185: Hsd1Sts = ((UINT8)(1));
 11127  0CA0  01F6               	clrf	_Hsd1Sts
 11128  0CA1  0AF6               	incf	_Hsd1Sts,f
 11129                           
 11130                           ;sb140_app.c: 186: }
 11131  0CA2  2CA4               	goto	l4183
 11132  0CA3                     l4181:	
 11133                           
 11134                           ;sb140_app.c: 187: else
 11135                           ;sb140_app.c: 188: {
 11136                           ;sb140_app.c: 189: Hsd1Sts = ((UINT8)(0));
 11137  0CA3  01F6               	clrf	_Hsd1Sts
 11138  0CA4                     l4183:	
 11139                           
 11140                           ;sb140_app.c: 190: }
 11141                           ;sb140_app.c: 193: if (((CmdBuffer[((UINT8)(1))] & ((UINT8)(0b00000010))) >> ((UINT8)(1)
      +                          )) == ((UINT8)(1)))
 11142  0CA4  0821               	movf	(_CmdBuffer^(0+384)+1),w
 11143  0CA5  0020               	movlb	0	; select bank0
 11144  0CA6  00A0               	movwf	??_UpdateHsdSts
 11145  0CA7  3001               	movlw	1
 11146  0CA8                     u2945:	
 11147  0CA8  36A0               	lsrf	??_UpdateHsdSts,f
 11148  0CA9  0B89               	decfsz	9,f
 11149  0CAA  2CA8               	goto	u2945
 11150  0CAB  1C20               	btfss	??_UpdateHsdSts,0
 11151  0CAC  2CB0               	goto	l4187
 11152                           
 11153                           ;sb140_app.c: 194: {
 11154                           ;sb140_app.c: 195: Hsd2Sts = ((UINT8)(1));
 11155  0CAD  01E8               	clrf	_Hsd2Sts
 11156  0CAE  0AE8               	incf	_Hsd2Sts,f
 11157                           
 11158                           ;sb140_app.c: 197: }
 11159  0CAF  2CB1               	goto	l4189
 11160  0CB0                     l4187:	
 11161                           
 11162                           ;sb140_app.c: 198: else
 11163                           ;sb140_app.c: 199: {
 11164                           ;sb140_app.c: 200: Hsd2Sts = ((UINT8)(0));
 11165  0CB0  01E8               	clrf	_Hsd2Sts
 11166  0CB1                     l4189:	
 11167                           
 11168                           ;sb140_app.c: 201: }
 11169                           ;sb140_app.c: 204: if (((CmdBuffer[((UINT8)(1))] & ((UINT8)(0b00000100))) >> ((UINT8)(2)
      +                          )) == ((UINT8)(1)))
 11170  0CB1  0023               	movlb	3	; select bank3
 11171  0CB2  0821               	movf	(_CmdBuffer^(0+384)+1),w
 11172  0CB3  0020               	movlb	0	; select bank0
 11173  0CB4  00A0               	movwf	??_UpdateHsdSts
 11174  0CB5  3002               	movlw	2
 11175  0CB6                     u2965:	
 11176  0CB6  36A0               	lsrf	??_UpdateHsdSts,f
 11177  0CB7  0B89               	decfsz	9,f
 11178  0CB8  2CB6               	goto	u2965
 11179  0CB9  1C20               	btfss	??_UpdateHsdSts,0
 11180  0CBA  2CBE               	goto	l4193
 11181                           
 11182                           ;sb140_app.c: 205: {
 11183                           ;sb140_app.c: 206: Hsd3Sts = ((UINT8)(1));
 11184  0CBB  01E9               	clrf	_Hsd3Sts
 11185  0CBC  0AE9               	incf	_Hsd3Sts,f
 11186                           
 11187                           ;sb140_app.c: 207: }
 11188  0CBD  2CBF               	goto	l4195
 11189  0CBE                     l4193:	
 11190                           
 11191                           ;sb140_app.c: 208: else
 11192                           ;sb140_app.c: 209: {
 11193                           ;sb140_app.c: 210: Hsd3Sts = ((UINT8)(0));
 11194  0CBE  01E9               	clrf	_Hsd3Sts
 11195  0CBF                     l4195:	
 11196                           
 11197                           ;sb140_app.c: 211: }
 11198                           ;sb140_app.c: 214: if (((CmdBuffer[((UINT8)(1))] & ((UINT8)(0b00001000))) >> ((UINT8)(3)
      +                          )) == ((UINT8)(1)))
 11199  0CBF  0023               	movlb	3	; select bank3
 11200  0CC0  0821               	movf	(_CmdBuffer^(0+384)+1),w
 11201  0CC1  0020               	movlb	0	; select bank0
 11202  0CC2  00A0               	movwf	??_UpdateHsdSts
 11203  0CC3  3003               	movlw	3
 11204  0CC4                     u2985:	
 11205  0CC4  36A0               	lsrf	??_UpdateHsdSts,f
 11206  0CC5  0B89               	decfsz	9,f
 11207  0CC6  2CC4               	goto	u2985
 11208  0CC7  1C20               	btfss	??_UpdateHsdSts,0
 11209  0CC8  2CCC               	goto	l4199
 11210                           
 11211                           ;sb140_app.c: 215: {
 11212                           ;sb140_app.c: 216: Hsd4Sts = ((UINT8)(1));
 11213  0CC9  01EA               	clrf	_Hsd4Sts
 11214  0CCA  0AEA               	incf	_Hsd4Sts,f
 11215                           
 11216                           ;sb140_app.c: 217: }
 11217  0CCB  2CCD               	goto	l4201
 11218  0CCC                     l4199:	
 11219                           
 11220                           ;sb140_app.c: 218: else
 11221                           ;sb140_app.c: 219: {
 11222                           ;sb140_app.c: 220: Hsd4Sts = ((UINT8)(0));
 11223  0CCC  01EA               	clrf	_Hsd4Sts
 11224  0CCD                     l4201:	
 11225                           
 11226                           ;sb140_app.c: 221: }
 11227                           ;sb140_app.c: 224: SetOutChSts(((UINT8)(1)),Hsd1Sts);
 11228  0CCD  0876               	movf	_Hsd1Sts,w
 11229  0CCE  00A0               	movwf	??_UpdateHsdSts
 11230  0CCF  0820               	movf	??_UpdateHsdSts,w
 11231  0CD0  00F4               	movwf	SetOutChSts@Sts
 11232  0CD1  3001               	movlw	1
 11233  0CD2  318A  2260  318C   	fcall	_SetOutChSts
 11234                           
 11235                           ;sb140_app.c: 225: SetOutChSts(((UINT8)(2)),Hsd2Sts);
 11236  0CD5  0020               	movlb	0	; select bank0
 11237  0CD6  0868               	movf	_Hsd2Sts,w
 11238  0CD7  00A0               	movwf	??_UpdateHsdSts
 11239  0CD8  0820               	movf	??_UpdateHsdSts,w
 11240  0CD9  00F4               	movwf	SetOutChSts@Sts
 11241  0CDA  3002               	movlw	2
 11242  0CDB  318A  2260  318C   	fcall	_SetOutChSts
 11243                           
 11244                           ;sb140_app.c: 226: SetOutChSts(((UINT8)(3)),Hsd3Sts);
 11245  0CDE  0020               	movlb	0	; select bank0
 11246  0CDF  0869               	movf	_Hsd3Sts,w
 11247  0CE0  00A0               	movwf	??_UpdateHsdSts
 11248  0CE1  0820               	movf	??_UpdateHsdSts,w
 11249  0CE2  00F4               	movwf	SetOutChSts@Sts
 11250  0CE3  3003               	movlw	3
 11251  0CE4  318A  2260  318C   	fcall	_SetOutChSts
 11252                           
 11253                           ;sb140_app.c: 227: SetOutChSts(((UINT8)(4)),Hsd4Sts);
 11254  0CE7  0020               	movlb	0	; select bank0
 11255  0CE8  086A               	movf	_Hsd4Sts,w
 11256  0CE9  00A0               	movwf	??_UpdateHsdSts
 11257  0CEA  0820               	movf	??_UpdateHsdSts,w
 11258  0CEB  00F4               	movwf	SetOutChSts@Sts
 11259  0CEC  3004               	movlw	4
 11260  0CED  318A  2260         	fcall	_SetOutChSts
 11261  0CEF  0008               	return
 11262  0CF0                     __end_of_UpdateHsdSts:	
 11263                           
 11264                           	psect	text47
 11265  0A60                     __ptext47:	
 11266 ;; *************** function _SetOutChSts *****************
 11267 ;; Defined at:
 11268 ;;		line 142 in file "../Source/c/04_App/sb140_app.c"
 11269 ;; Parameters:    Size  Location     Type
 11270 ;;  Ch              1    wreg     unsigned char 
 11271 ;;  Sts             1    4[COMMON] unsigned char 
 11272 ;; Auto vars:     Size  Location     Type
 11273 ;;  Ch              1    5[COMMON] unsigned char 
 11274 ;; Return value:  Size  Location     Type
 11275 ;;                  1    wreg      void 
 11276 ;; Registers used:
 11277 ;;		wreg, fsr0l, fsr0h, status,2, status,0
 11278 ;; Tracked objects:
 11279 ;;		On entry : 0/0
 11280 ;;		On exit  : 0/0
 11281 ;;		Unchanged: 0/0
 11282 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11283 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11284 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11285 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11286 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11287 ;;Total ram usage:        2 bytes
 11288 ;; Hardware stack levels used:    1
 11289 ;; Hardware stack levels required when called:    2
 11290 ;; This function calls:
 11291 ;;		Nothing
 11292 ;; This function is called by:
 11293 ;;		_UpdateHsdSts
 11294 ;;		_GenerateImpulse
 11295 ;; This function uses a non-reentrant model
 11296 ;;
 11297                           
 11298                           
 11299                           ;psect for function _SetOutChSts
 11300  0A60                     _SetOutChSts:	
 11301                           
 11302                           ;incstack = 0
 11303                           ; Regs used in _SetOutChSts: [wreg-fsr0h+status,2+status,0]
 11304                           ;SetOutChSts@Ch stored from wreg
 11305  0A60  00F5               	movwf	SetOutChSts@Ch
 11306                           
 11307                           ;sb140_app.c: 145: switch (Ch)
 11308  0A61  2A7E               	goto	l2945
 11309  0A62                     l2935:	
 11310                           ;sb140_app.c: 146: {
 11311                           ;sb140_app.c: 147: case ((UINT8)(1)):
 11312                           
 11313                           
 11314                           ;sb140_app.c: 149: LATCbits.LATC5 = Sts;
 11315  0A62  0C74               	rrf	SetOutChSts@Sts,w
 11316  0A63  0022               	movlb	2	; select bank2
 11317  0A64  1C03               	skipc
 11318  0A65  128E               	bcf	14,5	;volatile
 11319  0A66  1803               	skipnc
 11320  0A67  168E               	bsf	14,5	;volatile
 11321                           
 11322                           ;sb140_app.c: 150: break;
 11323  0A68  0008               	return
 11324  0A69                     l2937:	
 11325                           ;sb140_app.c: 152: case ((UINT8)(2)):
 11326                           
 11327                           
 11328                           ;sb140_app.c: 154: LATAbits.LATA5 = Sts;
 11329  0A69  0C74               	rrf	SetOutChSts@Sts,w
 11330  0A6A  0022               	movlb	2	; select bank2
 11331  0A6B  1C03               	skipc
 11332  0A6C  128C               	bcf	12,5	;volatile
 11333  0A6D  1803               	skipnc
 11334  0A6E  168C               	bsf	12,5	;volatile
 11335                           
 11336                           ;sb140_app.c: 155: break;
 11337  0A6F  0008               	return
 11338  0A70                     l2939:	
 11339                           ;sb140_app.c: 157: case ((UINT8)(3)):
 11340                           
 11341                           
 11342                           ;sb140_app.c: 159: LATAbits.LATA2 = Sts;
 11343  0A70  0C74               	rrf	SetOutChSts@Sts,w
 11344  0A71  0022               	movlb	2	; select bank2
 11345  0A72  1C03               	skipc
 11346  0A73  110C               	bcf	12,2	;volatile
 11347  0A74  1803               	skipnc
 11348  0A75  150C               	bsf	12,2	;volatile
 11349                           
 11350                           ;sb140_app.c: 160: break;
 11351  0A76  0008               	return
 11352  0A77                     l2941:	
 11353                           ;sb140_app.c: 162: case ((UINT8)(4)):
 11354                           
 11355                           
 11356                           ;sb140_app.c: 164: LATCbits.LATC6 = Sts;
 11357  0A77  0C74               	rrf	SetOutChSts@Sts,w
 11358  0A78  0022               	movlb	2	; select bank2
 11359  0A79  1C03               	skipc
 11360  0A7A  130E               	bcf	14,6	;volatile
 11361  0A7B  1803               	skipnc
 11362  0A7C  170E               	bsf	14,6	;volatile
 11363                           
 11364                           ;sb140_app.c: 169: }
 11365                           
 11366                           ;sb140_app.c: 168: break;
 11367                           
 11368                           ;sb140_app.c: 167: default:
 11369                           
 11370                           ;sb140_app.c: 165: break;
 11371  0A7D  0008               	return
 11372  0A7E                     l2945:	
 11373  0A7E  0875               	movf	SetOutChSts@Ch,w
 11374                           
 11375                           ; Switch size 1, requested type "space"
 11376                           ; Number of cases is 4, Range of values is 1 to 4
 11377                           ; switch strategies available:
 11378                           ; Name         Instructions Cycles
 11379                           ; simple_byte           13     7 (average)
 11380                           ; direct_byte           17     9 (fixed)
 11381                           ; jumptable            263     9 (fixed)
 11382                           ;	Chosen strategy is simple_byte
 11383  0A7F  3A01               	xorlw	1	; case 1
 11384  0A80  1903               	skipnz
 11385  0A81  2A62               	goto	l2935
 11386  0A82  3A03               	xorlw	3	; case 2
 11387  0A83  1903               	skipnz
 11388  0A84  2A69               	goto	l2937
 11389  0A85  3A01               	xorlw	1	; case 3
 11390  0A86  1903               	skipnz
 11391  0A87  2A70               	goto	l2939
 11392  0A88  3A07               	xorlw	7	; case 4
 11393  0A89  1903               	skipnz
 11394  0A8A  2A77               	goto	l2941
 11395  0A8B  2A8C               	goto	l891
 11396  0A8C                     l891:	
 11397  0A8C  0008               	return
 11398  0A8D                     __end_of_SetOutChSts:	
 11399                           
 11400                           	psect	text48
 11401  01AD                     __ptext48:	
 11402 ;; *************** function _StdS_ManageStdServices *****************
 11403 ;; Defined at:
 11404 ;;		line 212 in file "../../../Framework/MercuryFwk/Source/c/03_Sml/02_Ssl/std_ser.c"
 11405 ;; Parameters:    Size  Location     Type
 11406 ;;		None
 11407 ;; Auto vars:     Size  Location     Type
 11408 ;;  DieTempStr      4   18[BANK0 ] unsigned char [4]
 11409 ;;  DieTemp         2   22[BANK0 ] unsigned short 
 11410 ;; Return value:  Size  Location     Type
 11411 ;;                  1    wreg      void 
 11412 ;; Registers used:
 11413 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11414 ;; Tracked objects:
 11415 ;;		On entry : 0/0
 11416 ;;		On exit  : 0/0
 11417 ;;		Unchanged: 0/0
 11418 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11419 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11420 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11421 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11422 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11423 ;;Total ram usage:        8 bytes
 11424 ;; Hardware stack levels used:    1
 11425 ;; Hardware stack levels required when called:    4
 11426 ;; This function calls:
 11427 ;;		_BoardReset
 11428 ;;		_ControlLedDirect
 11429 ;;		_GenerateEvt
 11430 ;;		_GetDieTemperature
 11431 ;;		_LowPowerMode
 11432 ;;		_SetLedBehavSts
 11433 ;;		_StringCopy
 11434 ;;		_utoa
 11435 ;; This function is called by:
 11436 ;;		_ManageProtocol
 11437 ;; This function uses a non-reentrant model
 11438 ;;
 11439                           
 11440                           
 11441                           ;psect for function _StdS_ManageStdServices
 11442  01AD                     _StdS_ManageStdServices:	
 11443                           
 11444                           ;std_ser.c: 214: UINT16 DieTemp;
 11445                           ;std_ser.c: 215: UINT8 DieTempStr[4];
 11446                           ;std_ser.c: 218: switch (CmdBuffer[((UINT8)(0))])
 11447                           
 11448                           ;incstack = 0
 11449                           ; Regs used in _StdS_ManageStdServices: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 11450  01AD  2A7F               	goto	l4175
 11451  01AE                     l4119:	
 11452                           ;std_ser.c: 219: {
 11453                           ;std_ser.c: 220: case ((UINT8)(0x10)):
 11454                           
 11455                           
 11456                           ;std_ser.c: 222: StringCopy((void*)("ECHO"),RepBuffer,((UINT8)(4)));
 11457  01AE  3023               	movlw	low (STR_2| (0+32768))
 11458  01AF  0020               	movlb	0	; select bank0
 11459  01B0  00A0               	movwf	StringCopy@SourceStr
 11460  01B1  3090               	movlw	high (STR_2| (0+32768))
 11461  01B2  00A1               	movwf	StringCopy@SourceStr+1
 11462  01B3  30A0               	movlw	(low (_RepBuffer| (0+512)))& (0+255)
 11463  01B4  00B0               	movwf	??_StdS_ManageStdServices
 11464  01B5  0830               	movf	??_StdS_ManageStdServices,w
 11465  01B6  00A2               	movwf	StringCopy@DestStr
 11466  01B7  3004               	movlw	4
 11467  01B8  00B1               	movwf	??_StdS_ManageStdServices+1
 11468  01B9  0831               	movf	??_StdS_ManageStdServices+1,w
 11469  01BA  00A3               	movwf	StringCopy@Len
 11470  01BB  3189  2194  3181   	fcall	_StringCopy
 11471                           
 11472                           ;std_ser.c: 224: RepBufferLen = ((UINT8)(4));
 11473  01BE  3004               	movlw	4
 11474  01BF  0020               	movlb	0	; select bank0
 11475  01C0  00B0               	movwf	??_StdS_ManageStdServices
 11476  01C1  0830               	movf	??_StdS_ManageStdServices,w
 11477  01C2  0021               	movlb	1	; select bank1
 11478  01C3  00B2               	movwf	_RepBufferLen^(0+128)
 11479                           
 11480                           ;std_ser.c: 226: GenerateEvt(&I2cReplyPacketReady);
 11481  01C4  306C               	movlw	(low (_I2cReplyPacketReady| 0))& (0+255)
 11482  01C5  3189  2172         	fcall	_GenerateEvt
 11483                           
 11484                           ;std_ser.c: 227: break;
 11485  01C7  0008               	return
 11486  01C8                     l4125:	
 11487                           ;std_ser.c: 229: case ((UINT8)(0x20)):
 11488                           
 11489                           
 11490                           ;std_ser.c: 231: StringCopy((void*)"SB140",RepBuffer,((UINT8)(5)));
 11491  01C8  301D               	movlw	low (STR_3| (0+32768))
 11492  01C9  0020               	movlb	0	; select bank0
 11493  01CA  00A0               	movwf	StringCopy@SourceStr
 11494  01CB  3090               	movlw	high (STR_3| (0+32768))
 11495  01CC  00A1               	movwf	StringCopy@SourceStr+1
 11496  01CD  30A0               	movlw	(low (_RepBuffer| (0+512)))& (0+255)
 11497  01CE  00B0               	movwf	??_StdS_ManageStdServices
 11498  01CF  0830               	movf	??_StdS_ManageStdServices,w
 11499  01D0  00A2               	movwf	StringCopy@DestStr
 11500  01D1  3005               	movlw	5
 11501  01D2  00B1               	movwf	??_StdS_ManageStdServices+1
 11502  01D3  0831               	movf	??_StdS_ManageStdServices+1,w
 11503  01D4  00A3               	movwf	StringCopy@Len
 11504  01D5  3189  2194  3181   	fcall	_StringCopy
 11505                           
 11506                           ;std_ser.c: 233: RepBufferLen = ((UINT8)(5));
 11507  01D8  3005               	movlw	5
 11508  01D9  0020               	movlb	0	; select bank0
 11509  01DA  00B0               	movwf	??_StdS_ManageStdServices
 11510  01DB  0830               	movf	??_StdS_ManageStdServices,w
 11511  01DC  0021               	movlb	1	; select bank1
 11512  01DD  00B2               	movwf	_RepBufferLen^(0+128)
 11513                           
 11514                           ;std_ser.c: 235: GenerateEvt(&I2cReplyPacketReady);
 11515  01DE  306C               	movlw	(low (_I2cReplyPacketReady| 0))& (0+255)
 11516  01DF  3189  2172         	fcall	_GenerateEvt
 11517                           
 11518                           ;std_ser.c: 236: break;
 11519  01E1  0008               	return
 11520  01E2                     l4131:	
 11521                           ;std_ser.c: 238: case ((UINT8)(0x21)):
 11522                           
 11523                           
 11524                           ;std_ser.c: 240: StringCopy((void*)"01.01.00",RepBuffer,((UINT8)(8)));
 11525  01E2  300C               	movlw	low (STR_4| (0+32768))
 11526  01E3  0020               	movlb	0	; select bank0
 11527  01E4  00A0               	movwf	StringCopy@SourceStr
 11528  01E5  3090               	movlw	high (STR_4| (0+32768))
 11529  01E6  00A1               	movwf	StringCopy@SourceStr+1
 11530  01E7  30A0               	movlw	(low (_RepBuffer| (0+512)))& (0+255)
 11531  01E8  00B0               	movwf	??_StdS_ManageStdServices
 11532  01E9  0830               	movf	??_StdS_ManageStdServices,w
 11533  01EA  00A2               	movwf	StringCopy@DestStr
 11534  01EB  3008               	movlw	8
 11535  01EC  00B1               	movwf	??_StdS_ManageStdServices+1
 11536  01ED  0831               	movf	??_StdS_ManageStdServices+1,w
 11537  01EE  00A3               	movwf	StringCopy@Len
 11538  01EF  3189  2194  3181   	fcall	_StringCopy
 11539                           
 11540                           ;std_ser.c: 242: RepBufferLen = ((UINT8)(8));
 11541  01F2  3008               	movlw	8
 11542  01F3  0020               	movlb	0	; select bank0
 11543  01F4  00B0               	movwf	??_StdS_ManageStdServices
 11544  01F5  0830               	movf	??_StdS_ManageStdServices,w
 11545  01F6  0021               	movlb	1	; select bank1
 11546  01F7  00B2               	movwf	_RepBufferLen^(0+128)
 11547                           
 11548                           ;std_ser.c: 244: GenerateEvt(&I2cReplyPacketReady);
 11549  01F8  306C               	movlw	(low (_I2cReplyPacketReady| 0))& (0+255)
 11550  01F9  3189  2172         	fcall	_GenerateEvt
 11551                           
 11552                           ;std_ser.c: 245: break;
 11553  01FB  0008               	return
 11554  01FC                     l4137:	
 11555                           ;std_ser.c: 247: case ((UINT8)(0x22)):
 11556                           
 11557                           
 11558                           ;std_ser.c: 249: StringCopy((void*)"01.01.00",RepBuffer,((UINT8)(8)));
 11559  01FC  300C               	movlw	low (STR_4| (0+32768))
 11560  01FD  0020               	movlb	0	; select bank0
 11561  01FE  00A0               	movwf	StringCopy@SourceStr
 11562  01FF  3090               	movlw	high (STR_4| (0+32768))
 11563  0200  00A1               	movwf	StringCopy@SourceStr+1
 11564  0201  30A0               	movlw	(low (_RepBuffer| (0+512)))& (0+255)
 11565  0202  00B0               	movwf	??_StdS_ManageStdServices
 11566  0203  0830               	movf	??_StdS_ManageStdServices,w
 11567  0204  00A2               	movwf	StringCopy@DestStr
 11568  0205  3008               	movlw	8
 11569  0206  00B1               	movwf	??_StdS_ManageStdServices+1
 11570  0207  0831               	movf	??_StdS_ManageStdServices+1,w
 11571  0208  00A3               	movwf	StringCopy@Len
 11572  0209  3189  2194  3181   	fcall	_StringCopy
 11573                           
 11574                           ;std_ser.c: 251: RepBufferLen = ((UINT8)(8));
 11575  020C  3008               	movlw	8
 11576  020D  0020               	movlb	0	; select bank0
 11577  020E  00B0               	movwf	??_StdS_ManageStdServices
 11578  020F  0830               	movf	??_StdS_ManageStdServices,w
 11579  0210  0021               	movlb	1	; select bank1
 11580  0211  00B2               	movwf	_RepBufferLen^(0+128)
 11581                           
 11582                           ;std_ser.c: 253: GenerateEvt(&I2cReplyPacketReady);
 11583  0212  306C               	movlw	(low (_I2cReplyPacketReady| 0))& (0+255)
 11584  0213  3189  2172         	fcall	_GenerateEvt
 11585                           
 11586                           ;std_ser.c: 255: break;
 11587  0215  0008               	return
 11588  0216                     l4143:	
 11589                           ;std_ser.c: 257: case ((UINT8)(0x30)):
 11590                           
 11591                           
 11592                           ;std_ser.c: 259: BoardReset();
 11593  0216  3197  273C         	fcall	_BoardReset
 11594                           
 11595                           ;std_ser.c: 260: break;
 11596  0218  0008               	return
 11597  0219                     l4145:	
 11598                           ;std_ser.c: 262: case ((UINT8)(0x31)):
 11599                           
 11600                           
 11601                           ;std_ser.c: 264: LowPowerMode();
 11602  0219  3197  27D3         	fcall	_LowPowerMode
 11603                           
 11604                           ;std_ser.c: 265: break;
 11605  021B  0008               	return
 11606  021C                     l4147:	
 11607                           ;std_ser.c: 267: case ((UINT8)(0x41)):
 11608                           
 11609                           
 11610                           ;std_ser.c: 269: SetLedBehavSts(CmdBuffer[((UINT8)(1))]);
 11611  021C  0023               	movlb	3	; select bank3
 11612  021D  0821               	movf	(_CmdBuffer^(0+384)+1),w
 11613  021E  318B  23BE         	fcall	_SetLedBehavSts
 11614                           
 11615                           ;std_ser.c: 270: break;
 11616  0220  0008               	return
 11617  0221                     l4149:	
 11618                           ;std_ser.c: 272: case ((UINT8)(0x42)):
 11619                           
 11620                           
 11621                           ;std_ser.c: 274: ControlLedDirect();
 11622  0221  3188  2045         	fcall	_ControlLedDirect
 11623                           
 11624                           ;std_ser.c: 275: break;
 11625  0223  0008               	return
 11626  0224                     l4151:	
 11627                           ;std_ser.c: 277: case ((UINT8)(0x45)):
 11628                           
 11629                           
 11630                           ;std_ser.c: 279: DieTemp = GetDieTemperature();
 11631  0224  3188  20C5  3181   	fcall	_GetDieTemperature
 11632  0227  0020               	movlb	0	; select bank0
 11633  0228  0824               	movf	?_GetDieTemperature+1,w
 11634  0229  00B7               	movwf	StdS_ManageStdServices@DieTemp+1
 11635  022A  0823               	movf	?_GetDieTemperature,w
 11636  022B  00B6               	movwf	StdS_ManageStdServices@DieTemp
 11637                           
 11638                           ;std_ser.c: 281: RepBuffer[0] = ((DieTemp & 0xFF00) >> 8);
 11639  022C  0837               	movf	StdS_ManageStdServices@DieTemp+1,w
 11640  022D  00B0               	movwf	??_StdS_ManageStdServices
 11641  022E  0830               	movf	??_StdS_ManageStdServices,w
 11642  022F  0025               	movlb	5	; select bank5
 11643  0230  00A0               	movwf	_RepBuffer^(0+640)
 11644                           
 11645                           ;std_ser.c: 282: RepBuffer[1] = (DieTemp & 0x00FF);
 11646  0231  0020               	movlb	0	; select bank0
 11647  0232  0836               	movf	StdS_ManageStdServices@DieTemp,w
 11648  0233  00B0               	movwf	??_StdS_ManageStdServices
 11649  0234  0830               	movf	??_StdS_ManageStdServices,w
 11650  0235  0025               	movlb	5	; select bank5
 11651  0236  00A1               	movwf	(_RepBuffer^(0+640)+1)
 11652                           
 11653                           ;std_ser.c: 284: RepBufferLen = ((UINT8)(2));
 11654  0237  3002               	movlw	2
 11655  0238  0020               	movlb	0	; select bank0
 11656  0239  00B0               	movwf	??_StdS_ManageStdServices
 11657  023A  0830               	movf	??_StdS_ManageStdServices,w
 11658  023B  0021               	movlb	1	; select bank1
 11659  023C  00B2               	movwf	_RepBufferLen^(0+128)
 11660                           
 11661                           ;std_ser.c: 286: GenerateEvt(&I2cReplyPacketReady);
 11662  023D  306C               	movlw	(low (_I2cReplyPacketReady| 0))& (0+255)
 11663  023E  3189  2172         	fcall	_GenerateEvt
 11664                           
 11665                           ;std_ser.c: 287: break;
 11666  0240  0008               	return
 11667  0241                     l4161:	
 11668                           ;std_ser.c: 289: case ((UINT8)(0x46)):
 11669                           
 11670                           
 11671                           ;std_ser.c: 291: DieTemp = GetDieTemperature();
 11672  0241  3188  20C5  3181   	fcall	_GetDieTemperature
 11673  0244  0020               	movlb	0	; select bank0
 11674  0245  0824               	movf	?_GetDieTemperature+1,w
 11675  0246  00B7               	movwf	StdS_ManageStdServices@DieTemp+1
 11676  0247  0823               	movf	?_GetDieTemperature,w
 11677  0248  00B6               	movwf	StdS_ManageStdServices@DieTemp
 11678                           
 11679                           ;std_ser.c: 293: DieTemp = (DieTemp/8) - 40;
 11680  0249  0837               	movf	StdS_ManageStdServices@DieTemp+1,w
 11681  024A  00B1               	movwf	??_StdS_ManageStdServices+1
 11682  024B  0836               	movf	StdS_ManageStdServices@DieTemp,w
 11683  024C  00B0               	movwf	??_StdS_ManageStdServices
 11684  024D  36B1               	lsrf	??_StdS_ManageStdServices+1,f
 11685  024E  0CB0               	rrf	??_StdS_ManageStdServices,f
 11686  024F  36B1               	lsrf	??_StdS_ManageStdServices+1,f
 11687  0250  0CB0               	rrf	??_StdS_ManageStdServices,f
 11688  0251  36B1               	lsrf	??_StdS_ManageStdServices+1,f
 11689  0252  0CB0               	rrf	??_StdS_ManageStdServices,f
 11690  0253  0830               	movf	??_StdS_ManageStdServices,w
 11691  0254  3ED8               	addlw	216
 11692  0255  00B6               	movwf	StdS_ManageStdServices@DieTemp
 11693  0256  30FF               	movlw	255
 11694  0257  3D31               	addwfc	??_StdS_ManageStdServices+1,w
 11695  0258  00B7               	movwf	StdS_ManageStdServices@DieTemp+1
 11696                           
 11697                           ;std_ser.c: 295: utoa(DieTempStr,DieTemp,10);
 11698  0259  0837               	movf	StdS_ManageStdServices@DieTemp+1,w
 11699  025A  00A8               	movwf	utoa@val+1
 11700  025B  0836               	movf	StdS_ManageStdServices@DieTemp,w
 11701  025C  00A7               	movwf	utoa@val
 11702  025D  300A               	movlw	10
 11703  025E  00A9               	movwf	utoa@base
 11704  025F  3000               	movlw	0
 11705  0260  00AA               	movwf	utoa@base+1
 11706  0261  3032               	movlw	(low (StdS_ManageStdServices@DieTempStr| 0))& (0+255)
 11707  0262  318D  2543  3181   	fcall	_utoa
 11708                           
 11709                           ;std_ser.c: 297: StringCopy(DieTempStr,RepBuffer,((UINT8)(2)));
 11710  0265  3032               	movlw	low StdS_ManageStdServices@DieTempStr
 11711  0266  0020               	movlb	0	; select bank0
 11712  0267  00A0               	movwf	StringCopy@SourceStr
 11713  0268  3000               	movlw	high StdS_ManageStdServices@DieTempStr
 11714  0269  00A1               	movwf	StringCopy@SourceStr+1
 11715  026A  30A0               	movlw	(low (_RepBuffer| (0+512)))& (0+255)
 11716  026B  00B0               	movwf	??_StdS_ManageStdServices
 11717  026C  0830               	movf	??_StdS_ManageStdServices,w
 11718  026D  00A2               	movwf	StringCopy@DestStr
 11719  026E  3002               	movlw	2
 11720  026F  00B1               	movwf	??_StdS_ManageStdServices+1
 11721  0270  0831               	movf	??_StdS_ManageStdServices+1,w
 11722  0271  00A3               	movwf	StringCopy@Len
 11723  0272  3189  2194  3181   	fcall	_StringCopy
 11724                           
 11725                           ;std_ser.c: 299: RepBufferLen = ((UINT8)(2));
 11726  0275  3002               	movlw	2
 11727  0276  0020               	movlb	0	; select bank0
 11728  0277  00B0               	movwf	??_StdS_ManageStdServices
 11729  0278  0830               	movf	??_StdS_ManageStdServices,w
 11730  0279  0021               	movlb	1	; select bank1
 11731  027A  00B2               	movwf	_RepBufferLen^(0+128)
 11732                           
 11733                           ;std_ser.c: 301: GenerateEvt(&I2cReplyPacketReady);
 11734  027B  306C               	movlw	(low (_I2cReplyPacketReady| 0))& (0+255)
 11735  027C  3189  2172         	fcall	_GenerateEvt
 11736                           
 11737                           ;std_ser.c: 306: }
 11738                           
 11739                           ;std_ser.c: 305: break;
 11740                           
 11741                           ;std_ser.c: 304: default:
 11742                           
 11743                           ;std_ser.c: 302: break;
 11744  027E  0008               	return
 11745  027F                     l4175:	
 11746  027F  0023               	movlb	3	; select bank3
 11747  0280  0820               	movf	_CmdBuffer^(0+384),w
 11748                           
 11749                           ; Switch size 1, requested type "space"
 11750                           ; Number of cases is 10, Range of values is 16 to 70
 11751                           ; switch strategies available:
 11752                           ; Name         Instructions Cycles
 11753                           ; simple_byte           31    16 (average)
 11754                           ; direct_byte          119     9 (fixed)
 11755                           ; jumptable            263     9 (fixed)
 11756                           ;	Chosen strategy is simple_byte
 11757  0281  3A10               	xorlw	16	; case 16
 11758  0282  1903               	skipnz
 11759  0283  29AE               	goto	l4119
 11760  0284  3A30               	xorlw	48	; case 32
 11761  0285  1903               	skipnz
 11762  0286  29C8               	goto	l4125
 11763  0287  3A01               	xorlw	1	; case 33
 11764  0288  1903               	skipnz
 11765  0289  29E2               	goto	l4131
 11766  028A  3A03               	xorlw	3	; case 34
 11767  028B  1903               	skipnz
 11768  028C  29FC               	goto	l4137
 11769  028D  3A12               	xorlw	18	; case 48
 11770  028E  1903               	skipnz
 11771  028F  2A16               	goto	l4143
 11772  0290  3A01               	xorlw	1	; case 49
 11773  0291  1903               	skipnz
 11774  0292  2A19               	goto	l4145
 11775  0293  3A70               	xorlw	112	; case 65
 11776  0294  1903               	skipnz
 11777  0295  2A1C               	goto	l4147
 11778  0296  3A03               	xorlw	3	; case 66
 11779  0297  1903               	skipnz
 11780  0298  2A21               	goto	l4149
 11781  0299  3A07               	xorlw	7	; case 69
 11782  029A  1903               	skipnz
 11783  029B  2A24               	goto	l4151
 11784  029C  3A03               	xorlw	3	; case 70
 11785  029D  1903               	skipnz
 11786  029E  2A41               	goto	l4161
 11787  029F  2AA0               	goto	l792
 11788  02A0                     l792:	
 11789  02A0  0008               	return
 11790  02A1                     __end_of_StdS_ManageStdServices:	
 11791                           
 11792                           	psect	text49
 11793  0D43                     __ptext49:	
 11794 ;; *************** function _utoa *****************
 11795 ;; Defined at:
 11796 ;;		line 17 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\itoa.c"
 11797 ;; Parameters:    Size  Location     Type
 11798 ;;  buf             1    wreg     PTR unsigned char 
 11799 ;;		 -> StdS_ManageStdServices@DieTempStr(4), 
 11800 ;;  val             2    7[BANK0 ] unsigned int 
 11801 ;;  base            2    9[BANK0 ] int 
 11802 ;; Auto vars:     Size  Location     Type
 11803 ;;  buf             1   15[BANK0 ] PTR unsigned char 
 11804 ;;		 -> StdS_ManageStdServices@DieTempStr(4), 
 11805 ;;  v               2   12[BANK0 ] unsigned int 
 11806 ;;  c               1   14[BANK0 ] unsigned char 
 11807 ;; Return value:  Size  Location     Type
 11808 ;;                  1    wreg      PTR unsigned char 
 11809 ;; Registers used:
 11810 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11811 ;; Tracked objects:
 11812 ;;		On entry : 0/0
 11813 ;;		On exit  : 0/0
 11814 ;;		Unchanged: 0/0
 11815 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11816 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11817 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11818 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11819 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11820 ;;Total ram usage:        9 bytes
 11821 ;; Hardware stack levels used:    1
 11822 ;; Hardware stack levels required when called:    3
 11823 ;; This function calls:
 11824 ;;		___lwdiv
 11825 ;;		___lwmod
 11826 ;; This function is called by:
 11827 ;;		_StdS_ManageStdServices
 11828 ;; This function uses a non-reentrant model
 11829 ;;
 11830                           
 11831                           
 11832                           ;psect for function _utoa
 11833  0D43                     _utoa:	
 11834                           
 11835                           ;incstack = 0
 11836                           ; Regs used in _utoa: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 11837                           ;utoa@buf stored from wreg
 11838  0D43  0020               	movlb	0	; select bank0
 11839  0D44  00AF               	movwf	utoa@buf
 11840  0D45  0828               	movf	utoa@val+1,w
 11841  0D46  00AD               	movwf	utoa@v+1
 11842  0D47  0827               	movf	utoa@val,w
 11843  0D48  00AC               	movwf	utoa@v
 11844  0D49                     l4071:	
 11845  0D49  082A               	movf	utoa@base+1,w
 11846  0D4A  00A1               	movwf	___lwdiv@divisor+1
 11847  0D4B  0829               	movf	utoa@base,w
 11848  0D4C  00A0               	movwf	___lwdiv@divisor
 11849  0D4D  082D               	movf	utoa@v+1,w
 11850  0D4E  00A3               	movwf	___lwdiv@dividend+1
 11851  0D4F  082C               	movf	utoa@v,w
 11852  0D50  00A2               	movwf	___lwdiv@dividend
 11853  0D51  318B  2352  318D   	fcall	___lwdiv
 11854  0D54  0020               	movlb	0	; select bank0
 11855  0D55  0821               	movf	?___lwdiv+1,w
 11856  0D56  00AD               	movwf	utoa@v+1
 11857  0D57  0820               	movf	?___lwdiv,w
 11858  0D58  00AC               	movwf	utoa@v
 11859  0D59  3001               	movlw	1
 11860  0D5A  00AB               	movwf	??_utoa
 11861  0D5B  082B               	movf	??_utoa,w
 11862  0D5C  07AF               	addwf	utoa@buf,f
 11863  0D5D  082C               	movf	utoa@v,w
 11864  0D5E  042D               	iorwf	utoa@v+1,w
 11865  0D5F  1D03               	btfss	3,2
 11866  0D60  2D49               	goto	l4071
 11867  0D61  082F               	movf	utoa@buf,w
 11868  0D62  0086               	movwf	6
 11869  0D63  0187               	clrf	7
 11870  0D64  0181               	clrf	1
 11871  0D65  3001               	movlw	1
 11872  0D66  02AF               	subwf	utoa@buf,f
 11873  0D67                     l4081:	
 11874  0D67  082A               	movf	utoa@base+1,w
 11875  0D68  00A1               	movwf	___lwmod@divisor+1
 11876  0D69  0829               	movf	utoa@base,w
 11877  0D6A  00A0               	movwf	___lwmod@divisor
 11878  0D6B  0828               	movf	utoa@val+1,w
 11879  0D6C  00A3               	movwf	___lwmod@dividend+1
 11880  0D6D  0827               	movf	utoa@val,w
 11881  0D6E  00A2               	movwf	___lwmod@dividend
 11882  0D6F  318A  2233  318D   	fcall	___lwmod
 11883  0D72  0020               	movlb	0	; select bank0
 11884  0D73  0820               	movf	?___lwmod,w
 11885  0D74  00AB               	movwf	??_utoa
 11886  0D75  082B               	movf	??_utoa,w
 11887  0D76  00AE               	movwf	utoa@c
 11888  0D77  082A               	movf	utoa@base+1,w
 11889  0D78  00A1               	movwf	___lwdiv@divisor+1
 11890  0D79  0829               	movf	utoa@base,w
 11891  0D7A  00A0               	movwf	___lwdiv@divisor
 11892  0D7B  0828               	movf	utoa@val+1,w
 11893  0D7C  00A3               	movwf	___lwdiv@dividend+1
 11894  0D7D  0827               	movf	utoa@val,w
 11895  0D7E  00A2               	movwf	___lwdiv@dividend
 11896  0D7F  318B  2352  318D   	fcall	___lwdiv
 11897  0D82  0020               	movlb	0	; select bank0
 11898  0D83  0821               	movf	?___lwdiv+1,w
 11899  0D84  00A8               	movwf	utoa@val+1
 11900  0D85  0820               	movf	?___lwdiv,w
 11901  0D86  00A7               	movwf	utoa@val
 11902  0D87  300A               	movlw	10
 11903  0D88  022E               	subwf	utoa@c,w
 11904  0D89  1C03               	skipc
 11905  0D8A  2D8F               	goto	l1382
 11906  0D8B  3007               	movlw	7
 11907  0D8C  00AB               	movwf	??_utoa
 11908  0D8D  082B               	movf	??_utoa,w
 11909  0D8E  07AE               	addwf	utoa@c,f
 11910  0D8F                     l1382:	
 11911  0D8F  3030               	movlw	48
 11912  0D90  00AB               	movwf	??_utoa
 11913  0D91  082B               	movf	??_utoa,w
 11914  0D92  07AE               	addwf	utoa@c,f
 11915  0D93  082E               	movf	utoa@c,w
 11916  0D94  00AB               	movwf	??_utoa
 11917  0D95  082F               	movf	utoa@buf,w
 11918  0D96  0086               	movwf	6
 11919  0D97  0187               	clrf	7
 11920  0D98  082B               	movf	??_utoa,w
 11921  0D99  0081               	movwf	1
 11922  0D9A  3001               	movlw	1
 11923  0D9B  02AF               	subwf	utoa@buf,f
 11924  0D9C  0827               	movf	utoa@val,w
 11925  0D9D  0428               	iorwf	utoa@val+1,w
 11926  0D9E  1D03               	btfss	3,2
 11927  0D9F  2D67               	goto	l4081
 11928                           
 11929                           ;	Return value of _utoa is never used
 11930  0DA0  3001               	movlw	1
 11931  0DA1  00AB               	movwf	??_utoa
 11932  0DA2  082B               	movf	??_utoa,w
 11933  0DA3  07AF               	addwf	utoa@buf,f
 11934  0DA4  0008               	return
 11935  0DA5                     __end_of_utoa:	
 11936                           
 11937                           	psect	text50
 11938  0A33                     __ptext50:	
 11939 ;; *************** function ___lwmod *****************
 11940 ;; Defined at:
 11941 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\lwmod.c"
 11942 ;; Parameters:    Size  Location     Type
 11943 ;;  divisor         2    0[BANK0 ] unsigned int 
 11944 ;;  dividend        2    2[BANK0 ] unsigned int 
 11945 ;; Auto vars:     Size  Location     Type
 11946 ;;  counter         1    5[COMMON] unsigned char 
 11947 ;; Return value:  Size  Location     Type
 11948 ;;                  2    0[BANK0 ] unsigned int 
 11949 ;; Registers used:
 11950 ;;		wreg, status,2, status,0
 11951 ;; Tracked objects:
 11952 ;;		On entry : 0/0
 11953 ;;		On exit  : 0/0
 11954 ;;		Unchanged: 0/0
 11955 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11956 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11957 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11958 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11959 ;;      Totals:         2       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11960 ;;Total ram usage:        6 bytes
 11961 ;; Hardware stack levels used:    1
 11962 ;; Hardware stack levels required when called:    2
 11963 ;; This function calls:
 11964 ;;		Nothing
 11965 ;; This function is called by:
 11966 ;;		_utoa
 11967 ;; This function uses a non-reentrant model
 11968 ;;
 11969                           
 11970                           
 11971                           ;psect for function ___lwmod
 11972  0A33                     ___lwmod:	
 11973                           
 11974                           ;incstack = 0
 11975                           ; Regs used in ___lwmod: [wreg+status,2+status,0]
 11976  0A33  0020               	movlb	0	; select bank0
 11977  0A34  0820               	movf	___lwmod@divisor,w
 11978  0A35  0421               	iorwf	___lwmod@divisor+1,w
 11979  0A36  1903               	btfsc	3,2
 11980  0A37  2A5B               	goto	l4003
 11981  0A38  01F5               	clrf	___lwmod@counter
 11982  0A39  0AF5               	incf	___lwmod@counter,f
 11983  0A3A                     l3993:	
 11984  0A3A  1BA1               	btfsc	___lwmod@divisor+1,7
 11985  0A3B  2A46               	goto	l3995
 11986  0A3C  3001               	movlw	1
 11987  0A3D                     u2765:	
 11988  0A3D  35A0               	lslf	___lwmod@divisor,f
 11989  0A3E  0DA1               	rlf	___lwmod@divisor+1,f
 11990  0A3F  0B89               	decfsz	9,f
 11991  0A40  2A3D               	goto	u2765
 11992  0A41  3001               	movlw	1
 11993  0A42  00F4               	movwf	??___lwmod
 11994  0A43  0874               	movf	??___lwmod,w
 11995  0A44  07F5               	addwf	___lwmod@counter,f
 11996  0A45  2A3A               	goto	l3993
 11997  0A46                     l3995:	
 11998  0A46  0821               	movf	___lwmod@divisor+1,w
 11999  0A47  0223               	subwf	___lwmod@dividend+1,w
 12000  0A48  1D03               	skipz
 12001  0A49  2A4C               	goto	u2785
 12002  0A4A  0820               	movf	___lwmod@divisor,w
 12003  0A4B  0222               	subwf	___lwmod@dividend,w
 12004  0A4C                     u2785:	
 12005  0A4C  1C03               	skipc
 12006  0A4D  2A52               	goto	l3999
 12007  0A4E  0820               	movf	___lwmod@divisor,w
 12008  0A4F  02A2               	subwf	___lwmod@dividend,f
 12009  0A50  0821               	movf	___lwmod@divisor+1,w
 12010  0A51  3BA3               	subwfb	___lwmod@dividend+1,f
 12011  0A52                     l3999:	
 12012  0A52  3001               	movlw	1
 12013  0A53                     u2795:	
 12014  0A53  36A1               	lsrf	___lwmod@divisor+1,f
 12015  0A54  0CA0               	rrf	___lwmod@divisor,f
 12016  0A55  0B89               	decfsz	9,f
 12017  0A56  2A53               	goto	u2795
 12018  0A57  3001               	movlw	1
 12019  0A58  02F5               	subwf	___lwmod@counter,f
 12020  0A59  1D03               	btfss	3,2
 12021  0A5A  2A46               	goto	l3995
 12022  0A5B                     l4003:	
 12023  0A5B  0823               	movf	___lwmod@dividend+1,w
 12024  0A5C  00A1               	movwf	?___lwmod+1
 12025  0A5D  0822               	movf	___lwmod@dividend,w
 12026  0A5E  00A0               	movwf	?___lwmod
 12027  0A5F  0008               	return
 12028  0A60                     __end_of___lwmod:	
 12029                           
 12030                           	psect	text51
 12031  0B52                     __ptext51:	
 12032 ;; *************** function ___lwdiv *****************
 12033 ;; Defined at:
 12034 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\lwdiv.c"
 12035 ;; Parameters:    Size  Location     Type
 12036 ;;  divisor         2    0[BANK0 ] unsigned int 
 12037 ;;  dividend        2    2[BANK0 ] unsigned int 
 12038 ;; Auto vars:     Size  Location     Type
 12039 ;;  quotient        2    5[BANK0 ] unsigned int 
 12040 ;;  counter         1    4[BANK0 ] unsigned char 
 12041 ;; Return value:  Size  Location     Type
 12042 ;;                  2    0[BANK0 ] unsigned int 
 12043 ;; Registers used:
 12044 ;;		wreg, status,2, status,0
 12045 ;; Tracked objects:
 12046 ;;		On entry : 0/0
 12047 ;;		On exit  : 0/0
 12048 ;;		Unchanged: 0/0
 12049 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12050 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12051 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12052 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12053 ;;      Totals:         1       7       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12054 ;;Total ram usage:        8 bytes
 12055 ;; Hardware stack levels used:    1
 12056 ;; Hardware stack levels required when called:    2
 12057 ;; This function calls:
 12058 ;;		Nothing
 12059 ;; This function is called by:
 12060 ;;		_LedBlinkStateMachine
 12061 ;;		_LedPulseStateMachine
 12062 ;;		_utoa
 12063 ;; This function uses a non-reentrant model
 12064 ;;
 12065                           
 12066                           
 12067                           ;psect for function ___lwdiv
 12068  0B52                     ___lwdiv:	
 12069                           
 12070                           ;incstack = 0
 12071                           ; Regs used in ___lwdiv: [wreg+status,2+status,0]
 12072  0B52  0020               	movlb	0	; select bank0
 12073  0B53  01A5               	clrf	___lwdiv@quotient
 12074  0B54  01A6               	clrf	___lwdiv@quotient+1
 12075  0B55  0820               	movf	___lwdiv@divisor,w
 12076  0B56  0421               	iorwf	___lwdiv@divisor+1,w
 12077  0B57  1903               	btfsc	3,2
 12078  0B58  2B82               	goto	l3981
 12079  0B59  01A4               	clrf	___lwdiv@counter
 12080  0B5A  0AA4               	incf	___lwdiv@counter,f
 12081  0B5B                     l3969:	
 12082  0B5B  1BA1               	btfsc	___lwdiv@divisor+1,7
 12083  0B5C  2B67               	goto	l3971
 12084  0B5D  3001               	movlw	1
 12085  0B5E                     u2695:	
 12086  0B5E  35A0               	lslf	___lwdiv@divisor,f
 12087  0B5F  0DA1               	rlf	___lwdiv@divisor+1,f
 12088  0B60  0B89               	decfsz	9,f
 12089  0B61  2B5E               	goto	u2695
 12090  0B62  3001               	movlw	1
 12091  0B63  00F4               	movwf	??___lwdiv
 12092  0B64  0874               	movf	??___lwdiv,w
 12093  0B65  07A4               	addwf	___lwdiv@counter,f
 12094  0B66  2B5B               	goto	l3969
 12095  0B67                     l3971:	
 12096  0B67  3001               	movlw	1
 12097  0B68                     u2715:	
 12098  0B68  35A5               	lslf	___lwdiv@quotient,f
 12099  0B69  0DA6               	rlf	___lwdiv@quotient+1,f
 12100  0B6A  0B89               	decfsz	9,f
 12101  0B6B  2B68               	goto	u2715
 12102  0B6C  0821               	movf	___lwdiv@divisor+1,w
 12103  0B6D  0223               	subwf	___lwdiv@dividend+1,w
 12104  0B6E  1D03               	skipz
 12105  0B6F  2B72               	goto	u2725
 12106  0B70  0820               	movf	___lwdiv@divisor,w
 12107  0B71  0222               	subwf	___lwdiv@dividend,w
 12108  0B72                     u2725:	
 12109  0B72  1C03               	skipc
 12110  0B73  2B79               	goto	l3977
 12111  0B74  0820               	movf	___lwdiv@divisor,w
 12112  0B75  02A2               	subwf	___lwdiv@dividend,f
 12113  0B76  0821               	movf	___lwdiv@divisor+1,w
 12114  0B77  3BA3               	subwfb	___lwdiv@dividend+1,f
 12115  0B78  1425               	bsf	___lwdiv@quotient,0
 12116  0B79                     l3977:	
 12117  0B79  3001               	movlw	1
 12118  0B7A                     u2735:	
 12119  0B7A  36A1               	lsrf	___lwdiv@divisor+1,f
 12120  0B7B  0CA0               	rrf	___lwdiv@divisor,f
 12121  0B7C  0B89               	decfsz	9,f
 12122  0B7D  2B7A               	goto	u2735
 12123  0B7E  3001               	movlw	1
 12124  0B7F  02A4               	subwf	___lwdiv@counter,f
 12125  0B80  1D03               	btfss	3,2
 12126  0B81  2B67               	goto	l3971
 12127  0B82                     l3981:	
 12128  0B82  0826               	movf	___lwdiv@quotient+1,w
 12129  0B83  00A1               	movwf	?___lwdiv+1
 12130  0B84  0825               	movf	___lwdiv@quotient,w
 12131  0B85  00A0               	movwf	?___lwdiv
 12132  0B86  0008               	return
 12133  0B87                     __end_of___lwdiv:	
 12134                           
 12135                           	psect	text52
 12136  0994                     __ptext52:	
 12137 ;; *************** function _StringCopy *****************
 12138 ;; Defined at:
 12139 ;;		line 104 in file "../../../Framework/MercuryFwk/Source/c/03_Sml/02_Ssl/sf.c"
 12140 ;; Parameters:    Size  Location     Type
 12141 ;;  SourceStr       2    0[BANK0 ] PTR unsigned char 
 12142 ;;		 -> StdS_ManageStdServices@DieTempStr(4), STR_5(9), STR_4(9), STR_3(6), 
 12143 ;;		 -> STR_2(5), 
 12144 ;;  DestStr         1    2[BANK0 ] PTR unsigned char 
 12145 ;;		 -> RepBuffer(80), 
 12146 ;;  Len             1    3[BANK0 ] unsigned char 
 12147 ;; Auto vars:     Size  Location     Type
 12148 ;;  Index           1    4[COMMON] unsigned char 
 12149 ;; Return value:  Size  Location     Type
 12150 ;;                  1    wreg      void 
 12151 ;; Registers used:
 12152 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath
 12153 ;; Tracked objects:
 12154 ;;		On entry : 0/0
 12155 ;;		On exit  : 0/0
 12156 ;;		Unchanged: 0/0
 12157 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12158 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12159 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12160 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12161 ;;      Totals:         1       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12162 ;;Total ram usage:        9 bytes
 12163 ;; Hardware stack levels used:    1
 12164 ;; Hardware stack levels required when called:    2
 12165 ;; This function calls:
 12166 ;;		Nothing
 12167 ;; This function is called by:
 12168 ;;		_StdS_ManageStdServices
 12169 ;; This function uses a non-reentrant model
 12170 ;;
 12171                           
 12172                           
 12173                           ;psect for function _StringCopy
 12174  0994                     _StringCopy:	
 12175                           
 12176                           ;sf.c: 106: UINT8 Index = 0;
 12177                           
 12178                           ;incstack = 0
 12179                           ; Regs used in _StringCopy: [wreg-fsr1h+status,2+status,0+pclath]
 12180  0994  01F4               	clrf	StringCopy@Index
 12181                           
 12182                           ;sf.c: 109: for (Index = 0; Index < Len; Index++)
 12183  0995  01F4               	clrf	StringCopy@Index
 12184  0996                     l4047:	
 12185  0996  0020               	movlb	0	; select bank0
 12186  0997  0823               	movf	StringCopy@Len,w
 12187  0998  0274               	subwf	StringCopy@Index,w
 12188  0999  1803               	btfsc	3,0
 12189  099A  0008               	return
 12190                           
 12191                           ;sf.c: 110: {
 12192                           ;sf.c: 111: DestStr[Index] = SourceStr[Index];
 12193  099B  0020               	movlb	0	; select bank0
 12194  099C  0821               	movf	StringCopy@SourceStr+1,w
 12195  099D  00A5               	movwf	??_StringCopy+1
 12196  099E  0820               	movf	StringCopy@SourceStr,w
 12197  099F  00A4               	movwf	??_StringCopy
 12198  09A0  0874               	movf	StringCopy@Index,w
 12199  09A1  0724               	addwf	??_StringCopy,w
 12200  09A2  0084               	movwf	4
 12201  09A3  0825               	movf	??_StringCopy+1,w
 12202  09A4  1803               	skipnc
 12203  09A5  0A25               	incf	??_StringCopy+1,w
 12204  09A6  0085               	movwf	5
 12205  09A7  0800               	movf	0,w	;code access
 12206  09A8  00A6               	movwf	??_StringCopy+2
 12207  09A9  0874               	movf	StringCopy@Index,w
 12208  09AA  0722               	addwf	StringCopy@DestStr,w
 12209  09AB  00A7               	movwf	??_StringCopy+3
 12210  09AC  0827               	movf	??_StringCopy+3,w
 12211  09AD  0086               	movwf	6
 12212  09AE  3002               	movlw	2	; select bank4/5
 12213  09AF  0087               	movwf	7
 12214  09B0  0826               	movf	??_StringCopy+2,w
 12215  09B1  0081               	movwf	1
 12216  09B2  3001               	movlw	1
 12217  09B3  00A4               	movwf	??_StringCopy
 12218  09B4  0824               	movf	??_StringCopy,w
 12219  09B5  07F4               	addwf	StringCopy@Index,f
 12220  09B6  2996               	goto	l4047
 12221  09B7                     __end_of_StringCopy:	
 12222                           
 12223                           	psect	text53
 12224  0BBE                     __ptext53:	
 12225 ;; *************** function _SetLedBehavSts *****************
 12226 ;; Defined at:
 12227 ;;		line 76 in file "../../../Framework/MercuryFwk/Source/c/03_Sml/02_Ssl/std_ser.c"
 12228 ;; Parameters:    Size  Location     Type
 12229 ;;  LedBehav        1    wreg     unsigned char 
 12230 ;; Auto vars:     Size  Location     Type
 12231 ;;  LedBehav        1    5[BANK0 ] unsigned char 
 12232 ;; Return value:  Size  Location     Type
 12233 ;;                  1    wreg      void 
 12234 ;; Registers used:
 12235 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
 12236 ;; Tracked objects:
 12237 ;;		On entry : 0/0
 12238 ;;		On exit  : 0/0
 12239 ;;		Unchanged: 0/0
 12240 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12241 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12242 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12243 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12244 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12245 ;;Total ram usage:        2 bytes
 12246 ;; Hardware stack levels used:    1
 12247 ;; Hardware stack levels required when called:    3
 12248 ;; This function calls:
 12249 ;;		_Led_SetLedBlinkTime
 12250 ;;		_Led_SetLedPulseTime
 12251 ;;		_Led_SetLedStatus
 12252 ;; This function is called by:
 12253 ;;		_Led_MainTask
 12254 ;;		_StdS_ManageStdServices
 12255 ;; This function uses a non-reentrant model
 12256 ;;
 12257                           
 12258                           
 12259                           ;psect for function _SetLedBehavSts
 12260  0BBE                     _SetLedBehavSts:	
 12261                           
 12262                           ;incstack = 0
 12263                           ; Regs used in _SetLedBehavSts: [wreg-fsr0h+status,2+status,0+pclath+cstack]
 12264                           ;SetLedBehavSts@LedBehav stored from wreg
 12265  0BBE  0020               	movlb	0	; select bank0
 12266  0BBF  00A5               	movwf	SetLedBehavSts@LedBehav
 12267                           
 12268                           ;std_ser.c: 79: switch (LedBehav)
 12269  0BC0  2BF1               	goto	l4039
 12270  0BC1                     l4023:	
 12271                           ;std_ser.c: 80: {
 12272                           ;std_ser.c: 81: case ((UINT8)(0)):
 12273                           
 12274                           
 12275                           ;std_ser.c: 83: Led_SetLedStatus(1u,LED_STS_OFF);
 12276  0BC1  01F4               	clrf	Led_SetLedStatus@LedSts
 12277  0BC2  3001               	movlw	1
 12278  0BC3  3197  27E0         	fcall	_Led_SetLedStatus
 12279                           
 12280                           ;std_ser.c: 85: LedBehaviourSts = ((UINT8)(0));
 12281  0BC5  01F9               	clrf	_LedBehaviourSts
 12282                           
 12283                           ;std_ser.c: 86: break;
 12284  0BC6  0008               	return
 12285  0BC7                     l4027:	
 12286                           ;std_ser.c: 88: case ((UINT8)(1)):
 12287                           
 12288                           
 12289                           ;std_ser.c: 90: Led_SetLedPulseTime(1u,50);
 12290  0BC7  3032               	movlw	50
 12291  0BC8  00F4               	movwf	Led_SetLedPulseTime@PulseTimeMs
 12292  0BC9  3000               	movlw	0
 12293  0BCA  00F5               	movwf	Led_SetLedPulseTime@PulseTimeMs+1
 12294  0BCB  3001               	movlw	1
 12295  0BCC  3188  2004         	fcall	_Led_SetLedPulseTime
 12296                           
 12297                           ;std_ser.c: 92: LedBehaviourSts = ((UINT8)(1));
 12298  0BCE  01F9               	clrf	_LedBehaviourSts
 12299  0BCF  0AF9               	incf	_LedBehaviourSts,f
 12300                           
 12301                           ;std_ser.c: 93: break;
 12302  0BD0  0008               	return
 12303  0BD1                     l4031:	
 12304                           ;std_ser.c: 95: case ((UINT8)(2)):
 12305                           
 12306                           
 12307                           ;std_ser.c: 97: Led_SetLedBlinkTime(1u,50,950);
 12308  0BD1  3032               	movlw	50
 12309  0BD2  0020               	movlb	0	; select bank0
 12310  0BD3  00A0               	movwf	Led_SetLedBlinkTime@OnTimeMs
 12311  0BD4  3000               	movlw	0
 12312  0BD5  00A1               	movwf	Led_SetLedBlinkTime@OnTimeMs+1
 12313  0BD6  30B6               	movlw	182
 12314  0BD7  00A2               	movwf	Led_SetLedBlinkTime@OffTimeMs
 12315  0BD8  3003               	movlw	3
 12316  0BD9  00A3               	movwf	Led_SetLedBlinkTime@OffTimeMs+1
 12317  0BDA  3001               	movlw	1
 12318  0BDB  3188  20DE  318B   	fcall	_Led_SetLedBlinkTime
 12319                           
 12320                           ;std_ser.c: 99: Led_SetLedStatus(1u,LED_STS_BLINK);
 12321  0BDE  3002               	movlw	2
 12322  0BDF  0020               	movlb	0	; select bank0
 12323  0BE0  00A4               	movwf	??_SetLedBehavSts
 12324  0BE1  0824               	movf	??_SetLedBehavSts,w
 12325  0BE2  00F4               	movwf	Led_SetLedStatus@LedSts
 12326  0BE3  3001               	movlw	1
 12327  0BE4  3197  27E0         	fcall	_Led_SetLedStatus
 12328                           
 12329                           ;std_ser.c: 101: LedBehaviourSts = ((UINT8)(2));
 12330  0BE6  3002               	movlw	2
 12331  0BE7  0020               	movlb	0	; select bank0
 12332  0BE8  00A4               	movwf	??_SetLedBehavSts
 12333  0BE9  0824               	movf	??_SetLedBehavSts,w
 12334  0BEA  00F9               	movwf	_LedBehaviourSts
 12335                           
 12336                           ;std_ser.c: 102: break;
 12337  0BEB  0008               	return
 12338  0BEC                     l4035:	
 12339                           ;std_ser.c: 104: case ((UINT8)(3)):
 12340                           
 12341                           
 12342                           ;std_ser.c: 106: LedBehaviourSts = ((UINT8)(3));
 12343  0BEC  3003               	movlw	3
 12344  0BED  00A4               	movwf	??_SetLedBehavSts
 12345  0BEE  0824               	movf	??_SetLedBehavSts,w
 12346  0BEF  00F9               	movwf	_LedBehaviourSts
 12347                           
 12348                           ;std_ser.c: 111: }
 12349                           
 12350                           ;std_ser.c: 110: break;
 12351                           
 12352                           ;std_ser.c: 109: default:
 12353                           
 12354                           ;std_ser.c: 107: break;
 12355  0BF0  0008               	return
 12356  0BF1                     l4039:	
 12357  0BF1  0825               	movf	SetLedBehavSts@LedBehav,w
 12358                           
 12359                           ; Switch size 1, requested type "space"
 12360                           ; Number of cases is 4, Range of values is 0 to 3
 12361                           ; switch strategies available:
 12362                           ; Name         Instructions Cycles
 12363                           ; simple_byte           13     7 (average)
 12364                           ; direct_byte           14     6 (fixed)
 12365                           ; jumptable            260     6 (fixed)
 12366                           ;	Chosen strategy is simple_byte
 12367  0BF2  3A00               	xorlw	0	; case 0
 12368  0BF3  1903               	skipnz
 12369  0BF4  2BC1               	goto	l4023
 12370  0BF5  3A01               	xorlw	1	; case 1
 12371  0BF6  1903               	skipnz
 12372  0BF7  2BC7               	goto	l4027
 12373  0BF8  3A03               	xorlw	3	; case 2
 12374  0BF9  1903               	skipnz
 12375  0BFA  2BD1               	goto	l4031
 12376  0BFB  3A01               	xorlw	1	; case 3
 12377  0BFC  1903               	skipnz
 12378  0BFD  2BEC               	goto	l4035
 12379  0BFE  2BFF               	goto	l758
 12380  0BFF                     l758:	
 12381  0BFF  0008               	return
 12382  0C00                     __end_of_SetLedBehavSts:	
 12383                           
 12384                           	psect	text54
 12385  0804                     __ptext54:	
 12386 ;; *************** function _Led_SetLedPulseTime *****************
 12387 ;; Defined at:
 12388 ;;		line 269 in file "../../../Framework/MercuryFwk/Source/c/03_Sml/02_Ssl/led.c"
 12389 ;; Parameters:    Size  Location     Type
 12390 ;;  Led             1    wreg     unsigned char 
 12391 ;;  PulseTimeMs     2    4[COMMON] unsigned short 
 12392 ;; Auto vars:     Size  Location     Type
 12393 ;;  Led             1    0[BANK0 ] unsigned char 
 12394 ;; Return value:  Size  Location     Type
 12395 ;;                  1    wreg      void 
 12396 ;; Registers used:
 12397 ;;		wreg, fsr0l, fsr0h, status,2, status,0
 12398 ;; Tracked objects:
 12399 ;;		On entry : 0/0
 12400 ;;		On exit  : 0/0
 12401 ;;		Unchanged: 0/0
 12402 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12403 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12404 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12405 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12406 ;;      Totals:         2       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12407 ;;Total ram usage:        3 bytes
 12408 ;; Hardware stack levels used:    1
 12409 ;; Hardware stack levels required when called:    2
 12410 ;; This function calls:
 12411 ;;		Nothing
 12412 ;; This function is called by:
 12413 ;;		_SetLedBehavSts
 12414 ;; This function uses a non-reentrant model
 12415 ;;
 12416                           
 12417                           
 12418                           ;psect for function _Led_SetLedPulseTime
 12419  0804                     _Led_SetLedPulseTime:	
 12420                           
 12421                           ;incstack = 0
 12422                           ; Regs used in _Led_SetLedPulseTime: [wreg-fsr0h+status,2+status,0]
 12423                           ;Led_SetLedPulseTime@Led stored from wreg
 12424  0804  0020               	movlb	0	; select bank0
 12425  0805  00A0               	movwf	Led_SetLedPulseTime@Led
 12426                           
 12427                           ;led.c: 272: switch (Led)
 12428  0806  280D               	goto	l3957
 12429  0807                     l3953:	
 12430                           ;led.c: 273: {
 12431                           ;led.c: 274: case 1u:
 12432                           
 12433                           
 12434                           ;led.c: 275: Led1Pulse.LedPulseTimeMs = PulseTimeMs;
 12435  0807  0875               	movf	Led_SetLedPulseTime@PulseTimeMs+1,w
 12436  0808  0021               	movlb	1	; select bank1
 12437  0809  00E0               	movwf	((_Led1Pulse+1)^(0+128)+4)
 12438  080A  0874               	movf	Led_SetLedPulseTime@PulseTimeMs,w
 12439  080B  00DF               	movwf	(_Led1Pulse^(0+128)+4)
 12440                           
 12441                           ;led.c: 280: }
 12442                           
 12443                           ;led.c: 279: break;
 12444                           
 12445                           ;led.c: 278: default:
 12446                           
 12447                           ;led.c: 276: break;
 12448  080C  0008               	return
 12449  080D                     l3957:	
 12450  080D  0020               	movlb	0	; select bank0
 12451  080E  0820               	movf	Led_SetLedPulseTime@Led,w
 12452                           
 12453                           ; Switch size 1, requested type "space"
 12454                           ; Number of cases is 1, Range of values is 1 to 1
 12455                           ; switch strategies available:
 12456                           ; Name         Instructions Cycles
 12457                           ; simple_byte            4     3 (average)
 12458                           ; direct_byte           11     9 (fixed)
 12459                           ; jumptable            263     9 (fixed)
 12460                           ;	Chosen strategy is simple_byte
 12461  080F  3A01               	xorlw	1	; case 1
 12462  0810  1903               	skipnz
 12463  0811  2807               	goto	l3953
 12464  0812  2813               	goto	l644
 12465  0813                     l644:	
 12466  0813  0008               	return
 12467  0814                     __end_of_Led_SetLedPulseTime:	
 12468                           
 12469                           	psect	text55
 12470  08DE                     __ptext55:	
 12471 ;; *************** function _Led_SetLedBlinkTime *****************
 12472 ;; Defined at:
 12473 ;;		line 245 in file "../../../Framework/MercuryFwk/Source/c/03_Sml/02_Ssl/led.c"
 12474 ;; Parameters:    Size  Location     Type
 12475 ;;  Led             1    wreg     unsigned char 
 12476 ;;  OnTimeMs        2    0[BANK0 ] unsigned short 
 12477 ;;  OffTimeMs       2    2[BANK0 ] unsigned short 
 12478 ;; Auto vars:     Size  Location     Type
 12479 ;;  Led             1    4[COMMON] unsigned char 
 12480 ;; Return value:  Size  Location     Type
 12481 ;;                  1    wreg      void 
 12482 ;; Registers used:
 12483 ;;		wreg, fsr0l, fsr0h, status,2, status,0
 12484 ;; Tracked objects:
 12485 ;;		On entry : 0/0
 12486 ;;		On exit  : 0/0
 12487 ;;		Unchanged: 0/0
 12488 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12489 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12490 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12491 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12492 ;;      Totals:         1       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12493 ;;Total ram usage:        5 bytes
 12494 ;; Hardware stack levels used:    1
 12495 ;; Hardware stack levels required when called:    2
 12496 ;; This function calls:
 12497 ;;		Nothing
 12498 ;; This function is called by:
 12499 ;;		_SetLedBehavSts
 12500 ;; This function uses a non-reentrant model
 12501 ;;
 12502                           
 12503                           
 12504                           ;psect for function _Led_SetLedBlinkTime
 12505  08DE                     _Led_SetLedBlinkTime:	
 12506                           
 12507                           ;incstack = 0
 12508                           ; Regs used in _Led_SetLedBlinkTime: [wreg-fsr0h+status,2+status,0]
 12509                           ;Led_SetLedBlinkTime@Led stored from wreg
 12510  08DE  00F4               	movwf	Led_SetLedBlinkTime@Led
 12511                           
 12512                           ;led.c: 248: switch (Led)
 12513  08DF  28F1               	goto	l3949
 12514  08E0                     l3945:	
 12515                           ;led.c: 249: {
 12516                           ;led.c: 250: case 1u:
 12517                           
 12518                           
 12519                           ;led.c: 251: Led1Blink.LedOnTimeMs = OnTimeMs;
 12520  08E0  0020               	movlb	0	; select bank0
 12521  08E1  0821               	movf	Led_SetLedBlinkTime@OnTimeMs+1,w
 12522  08E2  0022               	movlb	2	; select bank2
 12523  08E3  00E4               	movwf	((_Led1Blink+1)^(0+256)+4)
 12524  08E4  0020               	movlb	0	; select bank0
 12525  08E5  0820               	movf	Led_SetLedBlinkTime@OnTimeMs,w
 12526  08E6  0022               	movlb	2	; select bank2
 12527  08E7  00E3               	movwf	(_Led1Blink^(0+256)+4)
 12528                           
 12529                           ;led.c: 252: Led1Blink.LedOffTimeMs = OffTimeMs;
 12530  08E8  0020               	movlb	0	; select bank0
 12531  08E9  0823               	movf	Led_SetLedBlinkTime@OffTimeMs+1,w
 12532  08EA  0022               	movlb	2	; select bank2
 12533  08EB  00E6               	movwf	((_Led1Blink+1)^(0+256)+6)
 12534  08EC  0020               	movlb	0	; select bank0
 12535  08ED  0822               	movf	Led_SetLedBlinkTime@OffTimeMs,w
 12536  08EE  0022               	movlb	2	; select bank2
 12537  08EF  00E5               	movwf	(_Led1Blink^(0+256)+6)
 12538                           
 12539                           ;led.c: 257: }
 12540                           
 12541                           ;led.c: 256: break;
 12542                           
 12543                           ;led.c: 255: default:
 12544                           
 12545                           ;led.c: 253: break;
 12546  08F0  0008               	return
 12547  08F1                     l3949:	
 12548  08F1  0874               	movf	Led_SetLedBlinkTime@Led,w
 12549                           
 12550                           ; Switch size 1, requested type "space"
 12551                           ; Number of cases is 1, Range of values is 1 to 1
 12552                           ; switch strategies available:
 12553                           ; Name         Instructions Cycles
 12554                           ; simple_byte            4     3 (average)
 12555                           ; direct_byte           11     9 (fixed)
 12556                           ; jumptable            263     9 (fixed)
 12557                           ;	Chosen strategy is simple_byte
 12558  08F2  3A01               	xorlw	1	; case 1
 12559  08F3  1903               	skipnz
 12560  08F4  28E0               	goto	l3945
 12561  08F5  28F6               	goto	l637
 12562  08F6                     l637:	
 12563  08F6  0008               	return
 12564  08F7                     __end_of_Led_SetLedBlinkTime:	
 12565                           
 12566                           	psect	text56
 12567  17D3                     __ptext56:	
 12568 ;; *************** function _LowPowerMode *****************
 12569 ;; Defined at:
 12570 ;;		line 161 in file "../../../Framework/MercuryFwk/Source/c/03_Sml/02_Ssl/std_ser.c"
 12571 ;; Parameters:    Size  Location     Type
 12572 ;;		None
 12573 ;; Auto vars:     Size  Location     Type
 12574 ;;		None
 12575 ;; Return value:  Size  Location     Type
 12576 ;;                  1    wreg      void 
 12577 ;; Registers used:
 12578 ;;		wreg, status,2, status,0, pclath, cstack
 12579 ;; Tracked objects:
 12580 ;;		On entry : 0/0
 12581 ;;		On exit  : 0/0
 12582 ;;		Unchanged: 0/0
 12583 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12584 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12585 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12586 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12587 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12588 ;;Total ram usage:        0 bytes
 12589 ;; Hardware stack levels used:    1
 12590 ;; Hardware stack levels required when called:    3
 12591 ;; This function calls:
 12592 ;;		_Mcu_SetWdgSts
 12593 ;; This function is called by:
 12594 ;;		_StdS_ManageStdServices
 12595 ;; This function uses a non-reentrant model
 12596 ;;
 12597                           
 12598                           
 12599                           ;psect for function _LowPowerMode
 12600  17D3                     _LowPowerMode:	
 12601                           
 12602                           ;std_ser.c: 164: LATA = 0x00;
 12603                           
 12604                           ;incstack = 0
 12605                           ; Regs used in _LowPowerMode: [wreg+status,2+status,0+pclath+cstack]
 12606  17D3  0022               	movlb	2	; select bank2
 12607  17D4  018C               	clrf	12	;volatile
 12608                           
 12609                           ;std_ser.c: 166: LATB = 0x00;
 12610  17D5  018D               	clrf	13	;volatile
 12611                           
 12612                           ;std_ser.c: 168: LATC = 0x00;
 12613  17D6  018E               	clrf	14	;volatile
 12614                           
 12615                           ;std_ser.c: 170: Mcu_SetWdgSts(((UINT8)(0)));
 12616  17D7  3000               	movlw	0
 12617  17D8  3197  275D  3197   	fcall	_Mcu_SetWdgSts
 12618  17DB  0063               	sleep	;# 
 12619                           
 12620                           ;std_ser.c: 177: Mcu_SetWdgSts(((UINT8)(1)));
 12621  17DC  3001               	movlw	1
 12622  17DD  3197  275D         	fcall	_Mcu_SetWdgSts
 12623  17DF  0008               	return
 12624  17E0                     __end_of_LowPowerMode:	
 12625                           
 12626                           	psect	text57
 12627  175D                     __ptext57:	
 12628 ;; *************** function _Mcu_SetWdgSts *****************
 12629 ;; Defined at:
 12630 ;;		line 237 in file "../../../Framework/MercuryFwk/Source/c/01_Hal/02_Drv/mcu_drv.c"
 12631 ;; Parameters:    Size  Location     Type
 12632 ;;  WdgSts          1    wreg     unsigned char 
 12633 ;; Auto vars:     Size  Location     Type
 12634 ;;  WdgSts          1    4[COMMON] unsigned char 
 12635 ;; Return value:  Size  Location     Type
 12636 ;;                  1    wreg      void 
 12637 ;; Registers used:
 12638 ;;		wreg, status,0
 12639 ;; Tracked objects:
 12640 ;;		On entry : 0/0
 12641 ;;		On exit  : 0/0
 12642 ;;		Unchanged: 0/0
 12643 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12644 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12645 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12646 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12647 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12648 ;;Total ram usage:        1 bytes
 12649 ;; Hardware stack levels used:    1
 12650 ;; Hardware stack levels required when called:    2
 12651 ;; This function calls:
 12652 ;;		Nothing
 12653 ;; This function is called by:
 12654 ;;		_LowPowerMode
 12655 ;;		_Wdg_MainTask
 12656 ;; This function uses a non-reentrant model
 12657 ;;
 12658                           
 12659                           
 12660                           ;psect for function _Mcu_SetWdgSts
 12661  175D                     _Mcu_SetWdgSts:	
 12662                           
 12663                           ;incstack = 0
 12664                           ; Regs used in _Mcu_SetWdgSts: [wreg+status,0]
 12665                           ;Mcu_SetWdgSts@WdgSts stored from wreg
 12666  175D  00F4               	movwf	Mcu_SetWdgSts@WdgSts
 12667                           
 12668                           ;mcu_drv.c: 240: WDTCONbits.SWDTEN = WdgSts;
 12669  175E  0C74               	rrf	Mcu_SetWdgSts@WdgSts,w
 12670  175F  0021               	movlb	1	; select bank1
 12671  1760  1C03               	skipc
 12672  1761  1017               	bcf	23,0	;volatile
 12673  1762  1803               	skipnc
 12674  1763  1417               	bsf	23,0	;volatile
 12675  1764  0008               	return
 12676  1765                     __end_of_Mcu_SetWdgSts:	
 12677                           
 12678                           	psect	text58
 12679  08C5                     __ptext58:	
 12680 ;; *************** function _GetDieTemperature *****************
 12681 ;; Defined at:
 12682 ;;		line 188 in file "../../../Framework/MercuryFwk/Source/c/03_Sml/02_Ssl/std_ser.c"
 12683 ;; Parameters:    Size  Location     Type
 12684 ;;		None
 12685 ;; Auto vars:     Size  Location     Type
 12686 ;;  DieTempRes      2    5[BANK0 ] unsigned short 
 12687 ;; Return value:  Size  Location     Type
 12688 ;;                  2    3[BANK0 ] unsigned short 
 12689 ;; Registers used:
 12690 ;;		wreg, status,2, status,0, pclath, cstack
 12691 ;; Tracked objects:
 12692 ;;		On entry : 0/0
 12693 ;;		On exit  : 0/0
 12694 ;;		Unchanged: 0/0
 12695 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12696 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12697 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12698 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12699 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12700 ;;Total ram usage:        4 bytes
 12701 ;; Hardware stack levels used:    1
 12702 ;; Hardware stack levels required when called:    3
 12703 ;; This function calls:
 12704 ;;		_Adc_GetConvResult
 12705 ;;		_Adc_GetConvSts
 12706 ;;		_Adc_SelectChannel
 12707 ;;		_Adc_StartConversion
 12708 ;; This function is called by:
 12709 ;;		_StdS_ManageStdServices
 12710 ;; This function uses a non-reentrant model
 12711 ;;
 12712                           
 12713                           
 12714                           ;psect for function _GetDieTemperature
 12715  08C5                     _GetDieTemperature:	
 12716                           
 12717                           ;std_ser.c: 190: UINT16 DieTempRes;
 12718                           ;std_ser.c: 193: Adc_SelectChannel(((UINT8)(29)));
 12719                           
 12720                           ;incstack = 0
 12721                           ; Regs used in _GetDieTemperature: [wreg+status,2+status,0+pclath+cstack]
 12722  08C5  301D               	movlw	29
 12723  08C6  3197  27AF  3188   	fcall	_Adc_SelectChannel
 12724                           
 12725                           ;std_ser.c: 195: Adc_StartConversion();
 12726  08C9  3197  273F  3188   	fcall	_Adc_StartConversion
 12727  08CC                     l4061:	
 12728                           ;std_ser.c: 197: while (Adc_GetConvSts() == AdcConvInProgress);
 12729                           
 12730  08CC  3188  2000  3188   	fcall	_Adc_GetConvSts
 12731  08CF  3A00               	xorlw	0
 12732  08D0  1903               	skipnz
 12733  08D1  28CC               	goto	l4061
 12734                           
 12735                           ;std_ser.c: 199: DieTempRes = Adc_GetConvResult();
 12736  08D2  3197  27F0         	fcall	_Adc_GetConvResult
 12737  08D4  0875               	movf	?_Adc_GetConvResult+1,w
 12738  08D5  0020               	movlb	0	; select bank0
 12739  08D6  00A6               	movwf	GetDieTemperature@DieTempRes+1
 12740  08D7  0874               	movf	?_Adc_GetConvResult,w
 12741  08D8  00A5               	movwf	GetDieTemperature@DieTempRes
 12742                           
 12743                           ;std_ser.c: 201: return DieTempRes;
 12744  08D9  0826               	movf	GetDieTemperature@DieTempRes+1,w
 12745  08DA  00A4               	movwf	?_GetDieTemperature+1
 12746  08DB  0825               	movf	GetDieTemperature@DieTempRes,w
 12747  08DC  00A3               	movwf	?_GetDieTemperature
 12748  08DD  0008               	return
 12749  08DE                     __end_of_GetDieTemperature:	
 12750                           
 12751                           	psect	text59
 12752  173F                     __ptext59:	
 12753 ;; *************** function _Adc_StartConversion *****************
 12754 ;; Defined at:
 12755 ;;		line 144 in file "../../../Framework/MercuryFwk/Source/c/01_Hal/02_Drv/adc_drv.c"
 12756 ;; Parameters:    Size  Location     Type
 12757 ;;		None
 12758 ;; Auto vars:     Size  Location     Type
 12759 ;;		None
 12760 ;; Return value:  Size  Location     Type
 12761 ;;                  1    wreg      void 
 12762 ;; Registers used:
 12763 ;;		None
 12764 ;; Tracked objects:
 12765 ;;		On entry : 0/0
 12766 ;;		On exit  : 0/0
 12767 ;;		Unchanged: 0/0
 12768 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12769 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12770 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12771 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12772 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12773 ;;Total ram usage:        0 bytes
 12774 ;; Hardware stack levels used:    1
 12775 ;; Hardware stack levels required when called:    2
 12776 ;; This function calls:
 12777 ;;		Nothing
 12778 ;; This function is called by:
 12779 ;;		_GetDieTemperature
 12780 ;; This function uses a non-reentrant model
 12781 ;;
 12782                           
 12783                           
 12784                           ;psect for function _Adc_StartConversion
 12785  173F                     _Adc_StartConversion:	
 12786                           
 12787                           ;adc_drv.c: 147: ADCON0bits.GO_nDONE = ((UINT8)(1));
 12788                           
 12789                           ;incstack = 0
 12790                           ; Regs used in _Adc_StartConversion: []
 12791  173F  0021               	movlb	1	; select bank1
 12792  1740  149D               	bsf	29,1	;volatile
 12793  1741  0008               	return
 12794  1742                     __end_of_Adc_StartConversion:	
 12795                           
 12796                           	psect	text60
 12797  17AF                     __ptext60:	
 12798 ;; *************** function _Adc_SelectChannel *****************
 12799 ;; Defined at:
 12800 ;;		line 130 in file "../../../Framework/MercuryFwk/Source/c/01_Hal/02_Drv/adc_drv.c"
 12801 ;; Parameters:    Size  Location     Type
 12802 ;;  SelCh           1    wreg     unsigned char 
 12803 ;; Auto vars:     Size  Location     Type
 12804 ;;  SelCh           1    5[COMMON] unsigned char 
 12805 ;; Return value:  Size  Location     Type
 12806 ;;                  1    wreg      void 
 12807 ;; Registers used:
 12808 ;;		wreg, status,2, status,0
 12809 ;; Tracked objects:
 12810 ;;		On entry : 0/0
 12811 ;;		On exit  : 0/0
 12812 ;;		Unchanged: 0/0
 12813 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12814 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12815 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12816 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12817 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12818 ;;Total ram usage:        2 bytes
 12819 ;; Hardware stack levels used:    1
 12820 ;; Hardware stack levels required when called:    2
 12821 ;; This function calls:
 12822 ;;		Nothing
 12823 ;; This function is called by:
 12824 ;;		_GetDieTemperature
 12825 ;; This function uses a non-reentrant model
 12826 ;;
 12827                           
 12828                           
 12829                           ;psect for function _Adc_SelectChannel
 12830  17AF                     _Adc_SelectChannel:	
 12831                           
 12832                           ;incstack = 0
 12833                           ; Regs used in _Adc_SelectChannel: [wreg+status,2+status,0]
 12834                           ;Adc_SelectChannel@SelCh stored from wreg
 12835  17AF  00F5               	movwf	Adc_SelectChannel@SelCh
 12836                           
 12837                           ;adc_drv.c: 133: ADCON0bits.CHS = SelCh;
 12838  17B0  0875               	movf	Adc_SelectChannel@SelCh,w
 12839  17B1  00F4               	movwf	??_Adc_SelectChannel
 12840  17B2  0DF4               	rlf	??_Adc_SelectChannel,f
 12841  17B3  0DF4               	rlf	??_Adc_SelectChannel,f
 12842  17B4  0021               	movlb	1	; select bank1
 12843  17B5  081D               	movf	29,w	;volatile
 12844  17B6  0674               	xorwf	??_Adc_SelectChannel,w
 12845  17B7  3983               	andlw	-125
 12846  17B8  0674               	xorwf	??_Adc_SelectChannel,w
 12847  17B9  009D               	movwf	29	;volatile
 12848  17BA  0008               	return
 12849  17BB                     __end_of_Adc_SelectChannel:	
 12850                           
 12851                           	psect	text61
 12852  0800                     __ptext61:	
 12853 ;; *************** function _Adc_GetConvSts *****************
 12854 ;; Defined at:
 12855 ;;		line 158 in file "../../../Framework/MercuryFwk/Source/c/01_Hal/02_Drv/adc_drv.c"
 12856 ;; Parameters:    Size  Location     Type
 12857 ;;		None
 12858 ;; Auto vars:     Size  Location     Type
 12859 ;;		None
 12860 ;; Return value:  Size  Location     Type
 12861 ;;                  1    wreg      enum E3651
 12862 ;; Registers used:
 12863 ;;		wreg, status,2, status,0
 12864 ;; Tracked objects:
 12865 ;;		On entry : 0/0
 12866 ;;		On exit  : 0/0
 12867 ;;		Unchanged: 0/0
 12868 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12869 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12870 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12871 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12872 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12873 ;;Total ram usage:        0 bytes
 12874 ;; Hardware stack levels used:    1
 12875 ;; Hardware stack levels required when called:    2
 12876 ;; This function calls:
 12877 ;;		Nothing
 12878 ;; This function is called by:
 12879 ;;		_GetDieTemperature
 12880 ;; This function uses a non-reentrant model
 12881 ;;
 12882                           
 12883                           
 12884                           ;psect for function _Adc_GetConvSts
 12885  0800                     _Adc_GetConvSts:	
 12886                           
 12887                           ;adc_drv.c: 161: return ((AdcConvStsType)(ADCON0bits.GO_nDONE));
 12888                           
 12889                           ;incstack = 0
 12890                           ; Regs used in _Adc_GetConvSts: [wreg+status,2+status,0]
 12891  0800  0021               	movlb	1	; select bank1
 12892  0801  0C1D               	rrf	29,w	;volatile
 12893  0802  3901               	andlw	1
 12894  0803  0008               	return
 12895  0804                     __end_of_Adc_GetConvSts:	
 12896                           
 12897                           	psect	text62
 12898  17F0                     __ptext62:	
 12899 ;; *************** function _Adc_GetConvResult *****************
 12900 ;; Defined at:
 12901 ;;		line 172 in file "../../../Framework/MercuryFwk/Source/c/01_Hal/02_Drv/adc_drv.c"
 12902 ;; Parameters:    Size  Location     Type
 12903 ;;		None
 12904 ;; Auto vars:     Size  Location     Type
 12905 ;;  AdcResult       2    1[BANK0 ] unsigned short 
 12906 ;; Return value:  Size  Location     Type
 12907 ;;                  2    4[COMMON] unsigned short 
 12908 ;; Registers used:
 12909 ;;		wreg, status,2, status,0
 12910 ;; Tracked objects:
 12911 ;;		On entry : 0/0
 12912 ;;		On exit  : 0/0
 12913 ;;		Unchanged: 0/0
 12914 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12915 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12916 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12917 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12918 ;;      Totals:         2       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12919 ;;Total ram usage:        5 bytes
 12920 ;; Hardware stack levels used:    1
 12921 ;; Hardware stack levels required when called:    2
 12922 ;; This function calls:
 12923 ;;		Nothing
 12924 ;; This function is called by:
 12925 ;;		_GetDieTemperature
 12926 ;; This function uses a non-reentrant model
 12927 ;;
 12928                           
 12929                           
 12930                           ;psect for function _Adc_GetConvResult
 12931  17F0                     _Adc_GetConvResult:	
 12932                           
 12933                           ;adc_drv.c: 174: UINT16 AdcResult;
 12934                           ;adc_drv.c: 177: AdcResult = (((ADRESH & 0x03) << 8) | ADRESL);
 12935                           
 12936                           ;incstack = 0
 12937                           ; Regs used in _Adc_GetConvResult: [wreg+status,2+status,0]
 12938  17F0  3003               	movlw	3
 12939  17F1  0021               	movlb	1	; select bank1
 12940  17F2  051C               	andwf	28,w	;volatile
 12941  17F3  0020               	movlb	0	; select bank0
 12942  17F4  00A0               	movwf	??_Adc_GetConvResult
 12943  17F5  0820               	movf	??_Adc_GetConvResult,w
 12944  17F6  00A2               	movwf	Adc_GetConvResult@AdcResult+1
 12945  17F7  0021               	movlb	1	; select bank1
 12946  17F8  081B               	movf	27,w	;volatile
 12947  17F9  0020               	movlb	0	; select bank0
 12948  17FA  00A1               	movwf	Adc_GetConvResult@AdcResult
 12949                           
 12950                           ;adc_drv.c: 179: return AdcResult;
 12951  17FB  0822               	movf	Adc_GetConvResult@AdcResult+1,w
 12952  17FC  00F5               	movwf	?_Adc_GetConvResult+1
 12953  17FD  0821               	movf	Adc_GetConvResult@AdcResult,w
 12954  17FE  00F4               	movwf	?_Adc_GetConvResult
 12955  17FF  0008               	return
 12956  1800                     __end_of_Adc_GetConvResult:	
 12957                           
 12958                           	psect	text63
 12959  0972                     __ptext63:	
 12960 ;; *************** function _GenerateEvt *****************
 12961 ;; Defined at:
 12962 ;;		line 73 in file "../../../Framework/MercuryFwk/Source/c/02_Osl/os_ser.c"
 12963 ;; Parameters:    Size  Location     Type
 12964 ;;  Event           1    wreg     PTR struct _EventStructu
 12965 ;;		 -> Hsd4Set(10), Hsd3Set(10), Hsd2Set(10), Hsd1Set(10), 
 12966 ;;		 -> I2cReplyPacketReady(2), I2cWriteRequest(2), I2cSetAddress(2), I2cNewTxNotification(2), 
 12967 ;;		 -> I2cNewPacketNotification(2), 
 12968 ;; Auto vars:     Size  Location     Type
 12969 ;;  Event           1    1[BANK0 ] PTR struct _EventStructu
 12970 ;;		 -> Hsd4Set(10), Hsd3Set(10), Hsd2Set(10), Hsd1Set(10), 
 12971 ;;		 -> I2cReplyPacketReady(2), I2cWriteRequest(2), I2cSetAddress(2), I2cNewTxNotification(2), 
 12972 ;;		 -> I2cNewPacketNotification(2), 
 12973 ;;  EventStatus     1    0[BANK0 ] enum E3629
 12974 ;; Return value:  Size  Location     Type
 12975 ;;                  1    wreg      enum E3625
 12976 ;; Registers used:
 12977 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 12978 ;; Tracked objects:
 12979 ;;		On entry : 0/0
 12980 ;;		On exit  : 0/0
 12981 ;;		Unchanged: 0/0
 12982 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12983 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12984 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12985 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12986 ;;      Totals:         1       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12987 ;;Total ram usage:        3 bytes
 12988 ;; Hardware stack levels used:    1
 12989 ;; Hardware stack levels required when called:    2
 12990 ;; This function calls:
 12991 ;;		Nothing
 12992 ;; This function is called by:
 12993 ;;		_I2c_DataReceiveSm
 12994 ;;		_I2cSlv_I2cDrvHandle
 12995 ;;		_StdS_ManageStdServices
 12996 ;;		_ManageProtocol
 12997 ;;		_AppSm
 12998 ;; This function uses a non-reentrant model
 12999 ;;
 13000                           
 13001                           
 13002                           ;psect for function _GenerateEvt
 13003  0972                     _GenerateEvt:	
 13004                           
 13005                           ;incstack = 0
 13006                           ; Regs used in _GenerateEvt: [wreg+fsr1l+fsr1h+status,2+status,0]
 13007                           ;GenerateEvt@Event stored from wreg
 13008  0972  0020               	movlb	0	; select bank0
 13009  0973  00A1               	movwf	GenerateEvt@Event
 13010                           
 13011                           ;os_ser.c: 76: EventStatusType EventStatus = EventIdle;
 13012  0974  01A0               	clrf	GenerateEvt@EventStatus
 13013                           
 13014                           ;os_ser.c: 78: if ((Event->EventOptions != ((UINT8)(2))) && (Event->EventOptions != ((UI
      +                          NT8)(3))))
 13015  0975  0821               	movf	GenerateEvt@Event,w
 13016  0976  0086               	movwf	6
 13017  0977  0187               	clrf	7
 13018  0978  3002               	movlw	2
 13019  0979  0601               	xorwf	1,w
 13020  097A  1903               	btfsc	3,2
 13021  097B  298F               	goto	l4017
 13022  097C  0821               	movf	GenerateEvt@Event,w
 13023  097D  0086               	movwf	6
 13024  097E  0187               	clrf	7
 13025  097F  3003               	movlw	3
 13026  0980  0601               	xorwf	1,w
 13027  0981  1903               	btfsc	3,2
 13028  0982  298F               	goto	l4017
 13029                           
 13030                           ;os_ser.c: 79: {
 13031                           ;os_ser.c: 81: Event->EventStatus = EventSent;
 13032  0983  3002               	movlw	2
 13033  0984  00F4               	movwf	??_GenerateEvt
 13034  0985  0A21               	incf	GenerateEvt@Event,w
 13035  0986  0086               	movwf	6
 13036  0987  0187               	clrf	7
 13037  0988  0874               	movf	??_GenerateEvt,w
 13038  0989  0081               	movwf	1
 13039                           
 13040                           ;os_ser.c: 83: EventStatus = EventSent;
 13041  098A  3002               	movlw	2
 13042  098B  00F4               	movwf	??_GenerateEvt
 13043  098C  0874               	movf	??_GenerateEvt,w
 13044  098D  00A0               	movwf	GenerateEvt@EventStatus
 13045                           
 13046                           ;os_ser.c: 84: }
 13047  098E  0008               	return
 13048  098F                     l4017:	
 13049                           
 13050                           ;os_ser.c: 85: else
 13051                           ;os_ser.c: 86: {
 13052                           ;os_ser.c: 88: EventStatus = EventNotSent;
 13053  098F  3003               	movlw	3
 13054  0990  00F4               	movwf	??_GenerateEvt
 13055  0991  0874               	movf	??_GenerateEvt,w
 13056  0992  00A0               	movwf	GenerateEvt@EventStatus
 13057  0993  0008               	return
 13058  0994                     __end_of_GenerateEvt:	
 13059                           ;os_ser.c: 89: }
 13060                           ;os_ser.c: 92: return(EventStatus);
 13061                           ;	Return value of _GenerateEvt is never used
 13062                           
 13063                           
 13064                           	psect	text64
 13065  0845                     __ptext64:	
 13066 ;; *************** function _ControlLedDirect *****************
 13067 ;; Defined at:
 13068 ;;		line 122 in file "../../../Framework/MercuryFwk/Source/c/03_Sml/02_Ssl/std_ser.c"
 13069 ;; Parameters:    Size  Location     Type
 13070 ;;		None
 13071 ;; Auto vars:     Size  Location     Type
 13072 ;;		None
 13073 ;; Return value:  Size  Location     Type
 13074 ;;                  1    wreg      void 
 13075 ;; Registers used:
 13076 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
 13077 ;; Tracked objects:
 13078 ;;		On entry : 0/0
 13079 ;;		On exit  : 0/0
 13080 ;;		Unchanged: 0/0
 13081 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13082 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13083 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13084 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13085 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13086 ;;Total ram usage:        0 bytes
 13087 ;; Hardware stack levels used:    1
 13088 ;; Hardware stack levels required when called:    3
 13089 ;; This function calls:
 13090 ;;		_Led_SetLedStatus
 13091 ;; This function is called by:
 13092 ;;		_StdS_ManageStdServices
 13093 ;; This function uses a non-reentrant model
 13094 ;;
 13095                           
 13096                           
 13097                           ;psect for function _ControlLedDirect
 13098  0845                     _ControlLedDirect:	
 13099                           
 13100                           ;std_ser.c: 125: if (LedBehaviourSts == ((UINT8)(3)))
 13101                           
 13102                           ;incstack = 0
 13103                           ; Regs used in _ControlLedDirect: [wreg-fsr0h+status,2+status,0+pclath+cstack]
 13104  0845  3003               	movlw	3
 13105  0846  0679               	xorwf	_LedBehaviourSts,w
 13106  0847  1D03               	btfss	3,2
 13107  0848  0008               	return
 13108                           
 13109                           ;std_ser.c: 126: {
 13110                           ;std_ser.c: 128: if (CmdBuffer[((UINT8)(1))] == ((UINT8)(1)))
 13111  0849  0023               	movlb	3	; select bank3
 13112  084A  0321               	decf	(_CmdBuffer^(0+384)+1),w
 13113  084B  1D03               	btfss	3,2
 13114  084C  2853               	goto	l4055
 13115                           
 13116                           ;std_ser.c: 129: {
 13117                           ;std_ser.c: 130: Led_SetLedStatus(1u,LED_STS_ON);
 13118  084D  01F4               	clrf	Led_SetLedStatus@LedSts
 13119  084E  0AF4               	incf	Led_SetLedStatus@LedSts,f
 13120  084F  3001               	movlw	1
 13121  0850  3197  27E0         	fcall	_Led_SetLedStatus
 13122                           
 13123                           ;std_ser.c: 131: }
 13124  0852  0008               	return
 13125  0853                     l4055:	
 13126                           
 13127                           ;std_ser.c: 132: else
 13128                           ;std_ser.c: 133: {
 13129                           ;std_ser.c: 134: Led_SetLedStatus(1u,LED_STS_OFF);
 13130  0853  01F4               	clrf	Led_SetLedStatus@LedSts
 13131  0854  3001               	movlw	1
 13132  0855  3197  27E0         	fcall	_Led_SetLedStatus
 13133  0857  0008               	return
 13134  0858                     __end_of_ControlLedDirect:	
 13135                           
 13136                           	psect	text65
 13137  17E0                     __ptext65:	
 13138 ;; *************** function _Led_SetLedStatus *****************
 13139 ;; Defined at:
 13140 ;;		line 221 in file "../../../Framework/MercuryFwk/Source/c/03_Sml/02_Ssl/led.c"
 13141 ;; Parameters:    Size  Location     Type
 13142 ;;  Led             1    wreg     unsigned char 
 13143 ;;  LedSts          1    4[COMMON] unsigned char 
 13144 ;; Auto vars:     Size  Location     Type
 13145 ;;  Led             1    0[BANK0 ] unsigned char 
 13146 ;; Return value:  Size  Location     Type
 13147 ;;                  1    wreg      void 
 13148 ;; Registers used:
 13149 ;;		wreg, fsr0l, fsr0h, status,2, status,0
 13150 ;; Tracked objects:
 13151 ;;		On entry : 0/0
 13152 ;;		On exit  : 0/0
 13153 ;;		Unchanged: 0/0
 13154 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13155 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13156 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13157 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13158 ;;      Totals:         2       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13159 ;;Total ram usage:        3 bytes
 13160 ;; Hardware stack levels used:    1
 13161 ;; Hardware stack levels required when called:    2
 13162 ;; This function calls:
 13163 ;;		Nothing
 13164 ;; This function is called by:
 13165 ;;		_LedPulseStateMachine
 13166 ;;		_I2cSlv_I2cDrvHandle
 13167 ;;		_Led_InitSeq
 13168 ;;		_SetLedBehavSts
 13169 ;;		_ControlLedDirect
 13170 ;; This function uses a non-reentrant model
 13171 ;;
 13172                           
 13173                           
 13174                           ;psect for function _Led_SetLedStatus
 13175  17E0                     _Led_SetLedStatus:	
 13176                           
 13177                           ;incstack = 0
 13178                           ; Regs used in _Led_SetLedStatus: [wreg-fsr0h+status,2+status,0]
 13179                           ;Led_SetLedStatus@Led stored from wreg
 13180  17E0  0020               	movlb	0	; select bank0
 13181  17E1  00A0               	movwf	Led_SetLedStatus@Led
 13182                           
 13183                           ;led.c: 224: switch (Led)
 13184  17E2  2FE9               	goto	l3935
 13185  17E3                     l3931:	
 13186                           ;led.c: 225: {
 13187                           ;led.c: 226: case 1u:
 13188                           
 13189                           
 13190                           ;led.c: 227: Led1Sts = LedSts;
 13191  17E3  0874               	movf	Led_SetLedStatus@LedSts,w
 13192  17E4  00F5               	movwf	??_Led_SetLedStatus
 13193  17E5  0875               	movf	??_Led_SetLedStatus,w
 13194  17E6  0021               	movlb	1	; select bank1
 13195  17E7  00E9               	movwf	_Led1Sts^(0+128)
 13196                           
 13197                           ;led.c: 232: }
 13198                           
 13199                           ;led.c: 231: break;
 13200                           
 13201                           ;led.c: 230: default:
 13202                           
 13203                           ;led.c: 228: break;
 13204  17E8  0008               	return
 13205  17E9                     l3935:	
 13206  17E9  0020               	movlb	0	; select bank0
 13207  17EA  0820               	movf	Led_SetLedStatus@Led,w
 13208                           
 13209                           ; Switch size 1, requested type "space"
 13210                           ; Number of cases is 1, Range of values is 1 to 1
 13211                           ; switch strategies available:
 13212                           ; Name         Instructions Cycles
 13213                           ; simple_byte            4     3 (average)
 13214                           ; direct_byte           11     9 (fixed)
 13215                           ; jumptable            263     9 (fixed)
 13216                           ;	Chosen strategy is simple_byte
 13217  17EB  3A01               	xorlw	1	; case 1
 13218  17EC  1903               	skipnz
 13219  17ED  2FE3               	goto	l3931
 13220  17EE  2FEF               	goto	l630
 13221  17EF                     l630:	
 13222  17EF  0008               	return
 13223  17F0                     __end_of_Led_SetLedStatus:	
 13224                           
 13225                           	psect	text66
 13226  173C                     __ptext66:	
 13227 ;; *************** function _BoardReset *****************
 13228 ;; Defined at:
 13229 ;;		line 147 in file "../../../Framework/MercuryFwk/Source/c/03_Sml/02_Ssl/std_ser.c"
 13230 ;; Parameters:    Size  Location     Type
 13231 ;;		None
 13232 ;; Auto vars:     Size  Location     Type
 13233 ;;		None
 13234 ;; Return value:  Size  Location     Type
 13235 ;;                  1    wreg      void 
 13236 ;; Registers used:
 13237 ;;		status,2, status,0, pclath, cstack
 13238 ;; Tracked objects:
 13239 ;;		On entry : 0/0
 13240 ;;		On exit  : 0/0
 13241 ;;		Unchanged: 0/0
 13242 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13243 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13244 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13245 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13246 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13247 ;;Total ram usage:        0 bytes
 13248 ;; Hardware stack levels used:    1
 13249 ;; Hardware stack levels required when called:    3
 13250 ;; This function calls:
 13251 ;;		_Mcu_Reset
 13252 ;; This function is called by:
 13253 ;;		_StdS_ManageStdServices
 13254 ;; This function uses a non-reentrant model
 13255 ;;
 13256                           
 13257                           
 13258                           ;psect for function _BoardReset
 13259  173C                     _BoardReset:	
 13260                           
 13261                           ;std_ser.c: 150: Mcu_Reset();
 13262                           
 13263                           ;incstack = 0
 13264                           ; Regs used in _BoardReset: [status,2+status,0+pclath+cstack]
 13265  173C  3197  2738         	fcall	_Mcu_Reset
 13266  173E  0008               	return
 13267  173F                     __end_of_BoardReset:	
 13268                           
 13269                           	psect	text67
 13270  1738                     __ptext67:	
 13271 ;; *************** function _Mcu_Reset *****************
 13272 ;; Defined at:
 13273 ;;		line 293 in file "../../../Framework/MercuryFwk/Source/c/01_Hal/02_Drv/mcu_drv.c"
 13274 ;; Parameters:    Size  Location     Type
 13275 ;;		None
 13276 ;; Auto vars:     Size  Location     Type
 13277 ;;		None
 13278 ;; Return value:  Size  Location     Type
 13279 ;;                  1    wreg      void 
 13280 ;; Registers used:
 13281 ;;		None
 13282 ;; Tracked objects:
 13283 ;;		On entry : 0/0
 13284 ;;		On exit  : 0/0
 13285 ;;		Unchanged: 0/0
 13286 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13287 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13288 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13289 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13290 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13291 ;;Total ram usage:        0 bytes
 13292 ;; Hardware stack levels used:    1
 13293 ;; Hardware stack levels required when called:    2
 13294 ;; This function calls:
 13295 ;;		Nothing
 13296 ;; This function is called by:
 13297 ;;		_I2c_DataReceiveSm
 13298 ;;		_BoardReset
 13299 ;; This function uses a non-reentrant model
 13300 ;;
 13301                           
 13302                           
 13303                           ;psect for function _Mcu_Reset
 13304  1738                     _Mcu_Reset:	
 13305                           
 13306                           ;incstack = 0
 13307                           ; Regs used in _Mcu_Reset: []
 13308  1738  0001               	reset	;# 
 13309  1739  0008               	return
 13310  173A                     __end_of_Mcu_Reset:	
 13311                           
 13312                           	psect	text68
 13313  0951                     __ptext68:	
 13314 ;; *************** function _ReceiveEvt *****************
 13315 ;; Defined at:
 13316 ;;		line 103 in file "../../../Framework/MercuryFwk/Source/c/02_Osl/os_ser.c"
 13317 ;; Parameters:    Size  Location     Type
 13318 ;;  Event           1    wreg     PTR struct _EventStructu
 13319 ;;		 -> Hsd4Set(10), Hsd3Set(10), Hsd2Set(10), Hsd1Set(10), 
 13320 ;;		 -> I2cReplyPacketReady(2), I2cWriteRequest(2), I2cSetAddress(2), I2cNewTxNotification(2), 
 13321 ;;		 -> I2cNewPacketNotification(2), 
 13322 ;; Auto vars:     Size  Location     Type
 13323 ;;  Event           1    5[COMMON] PTR struct _EventStructu
 13324 ;;		 -> Hsd4Set(10), Hsd3Set(10), Hsd2Set(10), Hsd1Set(10), 
 13325 ;;		 -> I2cReplyPacketReady(2), I2cWriteRequest(2), I2cSetAddress(2), I2cNewTxNotification(2), 
 13326 ;;		 -> I2cNewPacketNotification(2), 
 13327 ;;  EventStatus     1    4[COMMON] enum E3629
 13328 ;; Return value:  Size  Location     Type
 13329 ;;                  1    wreg      enum E3625
 13330 ;; Registers used:
 13331 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 13332 ;; Tracked objects:
 13333 ;;		On entry : 0/0
 13334 ;;		On exit  : 0/0
 13335 ;;		Unchanged: 0/0
 13336 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13337 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13338 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13339 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13340 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13341 ;;Total ram usage:        2 bytes
 13342 ;; Hardware stack levels used:    1
 13343 ;; Hardware stack levels required when called:    2
 13344 ;; This function calls:
 13345 ;;		Nothing
 13346 ;; This function is called by:
 13347 ;;		_I2c_DataReceiveSm
 13348 ;;		_I2cSlv_I2cDrvHandle
 13349 ;;		_GenerateImpulse
 13350 ;;		_ManageProtocol
 13351 ;; This function uses a non-reentrant model
 13352 ;;
 13353                           
 13354                           
 13355                           ;psect for function _ReceiveEvt
 13356  0951                     _ReceiveEvt:	
 13357                           
 13358                           ;incstack = 0
 13359                           ; Regs used in _ReceiveEvt: [wreg+fsr1l+fsr1h+status,2+status,0]
 13360                           ;ReceiveEvt@Event stored from wreg
 13361  0951  00F5               	movwf	ReceiveEvt@Event
 13362                           
 13363                           ;os_ser.c: 106: EventStatusType EventStatus = EventIdle;
 13364  0952  01F4               	clrf	ReceiveEvt@EventStatus
 13365                           
 13366                           ;os_ser.c: 108: if ((Event->EventOptions != ((UINT8)(1))) && (Event->EventOptions != ((U
      +                          INT8)(3))))
 13367  0953  0875               	movf	ReceiveEvt@Event,w
 13368  0954  0086               	movwf	6
 13369  0955  0187               	clrf	7
 13370  0956  0301               	decf	1,w
 13371  0957  1903               	btfsc	3,2
 13372  0958  2970               	goto	l4113
 13373  0959  0875               	movf	ReceiveEvt@Event,w
 13374  095A  0086               	movwf	6
 13375  095B  0187               	clrf	7
 13376  095C  3003               	movlw	3
 13377  095D  0601               	xorwf	1,w
 13378  095E  1903               	btfsc	3,2
 13379  095F  2970               	goto	l4113
 13380                           
 13381                           ;os_ser.c: 109: {
 13382                           ;os_ser.c: 111: if (Event->EventStatus == EventSent)
 13383  0960  0A75               	incf	ReceiveEvt@Event,w
 13384  0961  0086               	movwf	6
 13385  0962  0187               	clrf	7
 13386  0963  3002               	movlw	2
 13387  0964  0601               	xorwf	1,w
 13388  0965  1D03               	btfss	3,2
 13389  0966  296F               	goto	l4111
 13390                           
 13391                           ;os_ser.c: 112: {
 13392                           ;os_ser.c: 114: Event->EventStatus = EventReceived;
 13393  0967  0A75               	incf	ReceiveEvt@Event,w
 13394  0968  0086               	movwf	6
 13395  0969  0187               	clrf	7
 13396  096A  0181               	clrf	1
 13397  096B  0A81               	incf	1,f
 13398                           
 13399                           ;os_ser.c: 116: EventStatus = EventReceived;
 13400  096C  01F4               	clrf	ReceiveEvt@EventStatus
 13401  096D  0AF4               	incf	ReceiveEvt@EventStatus,f
 13402                           
 13403                           ;os_ser.c: 117: }
 13404  096E  2970               	goto	l4113
 13405  096F                     l4111:	
 13406                           
 13407                           ;os_ser.c: 118: else
 13408                           ;os_ser.c: 119: {
 13409                           ;os_ser.c: 121: EventStatus = EventIdle;
 13410  096F  01F4               	clrf	ReceiveEvt@EventStatus
 13411  0970                     l4113:	
 13412                           
 13413                           ;os_ser.c: 122: }
 13414                           ;os_ser.c: 123: }
 13415                           ;os_ser.c: 126: return(EventStatus);
 13416  0970  0874               	movf	ReceiveEvt@EventStatus,w
 13417  0971  0008               	return
 13418  0972                     __end_of_ReceiveEvt:	
 13419                           
 13420                           	psect	text69
 13421  0B87                     __ptext69:	
 13422 ;; *************** function _Adc_InitAdcModule *****************
 13423 ;; Defined at:
 13424 ;;		line 107 in file "../../../Framework/MercuryFwk/Source/c/01_Hal/02_Drv/adc_drv.c"
 13425 ;; Parameters:    Size  Location     Type
 13426 ;;  AdcConfig       1    wreg     PTR struct _AdcCfgType
 13427 ;;		 -> App_MainTask@AdcConfig(6), 
 13428 ;; Auto vars:     Size  Location     Type
 13429 ;;  AdcConfig       1    4[COMMON] PTR struct _AdcCfgType
 13430 ;;		 -> App_MainTask@AdcConfig(6), 
 13431 ;; Return value:  Size  Location     Type
 13432 ;;                  1    wreg      void 
 13433 ;; Registers used:
 13434 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 13435 ;; Tracked objects:
 13436 ;;		On entry : 0/0
 13437 ;;		On exit  : 0/0
 13438 ;;		Unchanged: 0/0
 13439 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13440 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13441 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13442 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13443 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13444 ;;Total ram usage:        1 bytes
 13445 ;; Hardware stack levels used:    1
 13446 ;; Hardware stack levels required when called:    2
 13447 ;; This function calls:
 13448 ;;		Nothing
 13449 ;; This function is called by:
 13450 ;;		_App_MainTask
 13451 ;; This function uses a non-reentrant model
 13452 ;;
 13453                           
 13454                           
 13455                           ;psect for function _Adc_InitAdcModule
 13456  0B87                     _Adc_InitAdcModule:	
 13457                           
 13458                           ;incstack = 0
 13459                           ; Regs used in _Adc_InitAdcModule: [wreg+fsr1l+fsr1h+status,2+status,0]
 13460                           ;Adc_InitAdcModule@AdcConfig stored from wreg
 13461  0B87  00F4               	movwf	Adc_InitAdcModule@AdcConfig
 13462                           
 13463                           ;adc_drv.c: 110: ADCON0bits.ADON = AdcConfig->AdcEnable;
 13464  0B88  0874               	movf	Adc_InitAdcModule@AdcConfig,w
 13465  0B89  0086               	movwf	6
 13466  0B8A  0187               	clrf	7
 13467  0B8B  0C01               	rrf	1,w
 13468  0B8C  0021               	movlb	1	; select bank1
 13469  0B8D  1C03               	skipc
 13470  0B8E  101D               	bcf	29,0	;volatile
 13471  0B8F  1803               	skipnc
 13472  0B90  141D               	bsf	29,0	;volatile
 13473                           
 13474                           ;adc_drv.c: 112: ADCON1bits.ADFM = AdcConfig->AdcResultFormat;
 13475  0B91  0A74               	incf	Adc_InitAdcModule@AdcConfig,w
 13476  0B92  0086               	movwf	6
 13477  0B93  0187               	clrf	7
 13478  0B94  0C01               	rrf	1,w
 13479  0B95  1C03               	skipc
 13480  0B96  139E               	bcf	30,7	;volatile
 13481  0B97  1803               	skipnc
 13482  0B98  179E               	bsf	30,7	;volatile
 13483                           
 13484                           ;adc_drv.c: 114: ADCON1bits.ADCS0 = AdcConfig->AdcConvClock;
 13485  0B99  0874               	movf	Adc_InitAdcModule@AdcConfig,w
 13486  0B9A  3E02               	addlw	2
 13487  0B9B  0086               	movwf	6
 13488  0B9C  0187               	clrf	7
 13489  0B9D  0C01               	rrf	1,w
 13490  0B9E  1C03               	skipc
 13491  0B9F  121E               	bcf	30,4	;volatile
 13492  0BA0  1803               	skipnc
 13493  0BA1  161E               	bsf	30,4	;volatile
 13494                           
 13495                           ;adc_drv.c: 116: ADCON1bits.ADNREF = AdcConfig->AdcNegRef;
 13496  0BA2  0874               	movf	Adc_InitAdcModule@AdcConfig,w
 13497  0BA3  3E03               	addlw	3
 13498  0BA4  0086               	movwf	6
 13499  0BA5  0187               	clrf	7
 13500  0BA6  0C01               	rrf	1,w
 13501  0BA7  1C03               	skipc
 13502  0BA8  111E               	bcf	30,2	;volatile
 13503  0BA9  1803               	skipnc
 13504  0BAA  151E               	bsf	30,2	;volatile
 13505                           
 13506                           ;adc_drv.c: 117: ADCON1bits.ADPREF = AdcConfig->AdcPosRef;
 13507  0BAB  0874               	movf	Adc_InitAdcModule@AdcConfig,w
 13508  0BAC  3E04               	addlw	4
 13509  0BAD  0086               	movwf	6
 13510  0BAE  0187               	clrf	7
 13511  0BAF  081E               	movf	30,w	;volatile
 13512  0BB0  0601               	xorwf	1,w
 13513  0BB1  39FC               	andlw	-4
 13514  0BB2  0601               	xorwf	1,w
 13515  0BB3  009E               	movwf	30	;volatile
 13516                           
 13517                           ;adc_drv.c: 119: PIE1bits.ADIE = AdcConfig->AdcIntEnabled;
 13518  0BB4  0874               	movf	Adc_InitAdcModule@AdcConfig,w
 13519  0BB5  3E05               	addlw	5
 13520  0BB6  0086               	movwf	6
 13521  0BB7  0187               	clrf	7
 13522  0BB8  0C01               	rrf	1,w
 13523  0BB9  1C03               	skipc
 13524  0BBA  1311               	bcf	17,6	;volatile
 13525  0BBB  1803               	skipnc
 13526  0BBC  1711               	bsf	17,6	;volatile
 13527  0BBD  0008               	return
 13528  0BBE                     __end_of_Adc_InitAdcModule:	
 13529                           
 13530                           	psect	text70
 13531  0E0D                     __ptext70:	
 13532 ;; *************** function _Adc_ConfigAnCh *****************
 13533 ;; Defined at:
 13534 ;;		line 73 in file "../../../Framework/MercuryFwk/Source/c/01_Hal/02_Drv/adc_drv.c"
 13535 ;; Parameters:    Size  Location     Type
 13536 ;;  AnChSel         1    wreg     PTR struct _AnalogChSelT
 13537 ;;		 -> App_MainTask@AnalogChSel(12), 
 13538 ;; Auto vars:     Size  Location     Type
 13539 ;;  AnChSel         1    4[COMMON] PTR struct _AnalogChSelT
 13540 ;;		 -> App_MainTask@AnalogChSel(12), 
 13541 ;; Return value:  Size  Location     Type
 13542 ;;                  1    wreg      void 
 13543 ;; Registers used:
 13544 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 13545 ;; Tracked objects:
 13546 ;;		On entry : 0/0
 13547 ;;		On exit  : 0/0
 13548 ;;		Unchanged: 0/0
 13549 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13550 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13551 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13552 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13553 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13554 ;;Total ram usage:        1 bytes
 13555 ;; Hardware stack levels used:    1
 13556 ;; Hardware stack levels required when called:    2
 13557 ;; This function calls:
 13558 ;;		Nothing
 13559 ;; This function is called by:
 13560 ;;		_App_MainTask
 13561 ;; This function uses a non-reentrant model
 13562 ;;
 13563                           
 13564                           
 13565                           ;psect for function _Adc_ConfigAnCh
 13566  0E0D                     _Adc_ConfigAnCh:	
 13567                           
 13568                           ;incstack = 0
 13569                           ; Regs used in _Adc_ConfigAnCh: [wreg+fsr1l+fsr1h+status,2+status,0]
 13570                           ;Adc_ConfigAnCh@AnChSel stored from wreg
 13571  0E0D  00F4               	movwf	Adc_ConfigAnCh@AnChSel
 13572                           
 13573                           ;adc_drv.c: 76: ANSELA = 0x00;
 13574  0E0E  0023               	movlb	3	; select bank3
 13575  0E0F  018C               	clrf	12	;volatile
 13576                           
 13577                           ;adc_drv.c: 77: ANSELAbits.ANSA0 = AnChSel->AnSelA0An0;
 13578  0E10  0874               	movf	Adc_ConfigAnCh@AnChSel,w
 13579  0E11  0086               	movwf	6
 13580  0E12  0187               	clrf	7
 13581  0E13  0C01               	rrf	1,w
 13582  0E14  1C03               	skipc
 13583  0E15  100C               	bcf	12,0	;volatile
 13584  0E16  1803               	skipnc
 13585  0E17  140C               	bsf	12,0	;volatile
 13586                           
 13587                           ;adc_drv.c: 78: ANSELAbits.ANSA1 = AnChSel->AnSelA1An1;
 13588  0E18  0A74               	incf	Adc_ConfigAnCh@AnChSel,w
 13589  0E19  0086               	movwf	6
 13590  0E1A  0187               	clrf	7
 13591  0E1B  0C01               	rrf	1,w
 13592  0E1C  1C03               	skipc
 13593  0E1D  108C               	bcf	12,1	;volatile
 13594  0E1E  1803               	skipnc
 13595  0E1F  148C               	bsf	12,1	;volatile
 13596                           
 13597                           ;adc_drv.c: 79: ANSELAbits.ANSA2 = AnChSel->AnSelA2An2;
 13598  0E20  0874               	movf	Adc_ConfigAnCh@AnChSel,w
 13599  0E21  3E02               	addlw	2
 13600  0E22  0086               	movwf	6
 13601  0E23  0187               	clrf	7
 13602  0E24  0C01               	rrf	1,w
 13603  0E25  1C03               	skipc
 13604  0E26  110C               	bcf	12,2	;volatile
 13605  0E27  1803               	skipnc
 13606  0E28  150C               	bsf	12,2	;volatile
 13607                           
 13608                           ;adc_drv.c: 80: ANSELAbits.ANSA4 = AnChSel->AnSelA4An3;
 13609  0E29  0874               	movf	Adc_ConfigAnCh@AnChSel,w
 13610  0E2A  3E03               	addlw	3
 13611  0E2B  0086               	movwf	6
 13612  0E2C  0187               	clrf	7
 13613  0E2D  0C01               	rrf	1,w
 13614  0E2E  1C03               	skipc
 13615  0E2F  120C               	bcf	12,4	;volatile
 13616  0E30  1803               	skipnc
 13617  0E31  160C               	bsf	12,4	;volatile
 13618                           
 13619                           ;adc_drv.c: 83: ANSELB = 0x00;
 13620  0E32  018D               	clrf	13	;volatile
 13621                           
 13622                           ;adc_drv.c: 84: ANSELBbits.ANSB4 = AnChSel->AnSelB4An10;
 13623  0E33  0874               	movf	Adc_ConfigAnCh@AnChSel,w
 13624  0E34  3E04               	addlw	4
 13625  0E35  0086               	movwf	6
 13626  0E36  0187               	clrf	7
 13627  0E37  0C01               	rrf	1,w
 13628  0E38  1C03               	skipc
 13629  0E39  120D               	bcf	13,4	;volatile
 13630  0E3A  1803               	skipnc
 13631  0E3B  160D               	bsf	13,4	;volatile
 13632                           
 13633                           ;adc_drv.c: 85: ANSELBbits.ANSB5 = AnChSel->AnSelB5An11;
 13634  0E3C  0874               	movf	Adc_ConfigAnCh@AnChSel,w
 13635  0E3D  3E05               	addlw	5
 13636  0E3E  0086               	movwf	6
 13637  0E3F  0187               	clrf	7
 13638  0E40  0C01               	rrf	1,w
 13639  0E41  1C03               	skipc
 13640  0E42  128D               	bcf	13,5	;volatile
 13641  0E43  1803               	skipnc
 13642  0E44  168D               	bsf	13,5	;volatile
 13643                           
 13644                           ;adc_drv.c: 88: ANSELC = 0x00;
 13645  0E45  018E               	clrf	14	;volatile
 13646                           
 13647                           ;adc_drv.c: 89: ANSELCbits.ANSC0 = AnChSel->AnSelC0An4;
 13648  0E46  0874               	movf	Adc_ConfigAnCh@AnChSel,w
 13649  0E47  3E06               	addlw	6
 13650  0E48  0086               	movwf	6
 13651  0E49  0187               	clrf	7
 13652  0E4A  0C01               	rrf	1,w
 13653  0E4B  1C03               	skipc
 13654  0E4C  100E               	bcf	14,0	;volatile
 13655  0E4D  1803               	skipnc
 13656  0E4E  140E               	bsf	14,0	;volatile
 13657                           
 13658                           ;adc_drv.c: 90: ANSELCbits.ANSC1 = AnChSel->AnSelC1An5;
 13659  0E4F  0874               	movf	Adc_ConfigAnCh@AnChSel,w
 13660  0E50  3E07               	addlw	7
 13661  0E51  0086               	movwf	6
 13662  0E52  0187               	clrf	7
 13663  0E53  0C01               	rrf	1,w
 13664  0E54  1C03               	skipc
 13665  0E55  108E               	bcf	14,1	;volatile
 13666  0E56  1803               	skipnc
 13667  0E57  148E               	bsf	14,1	;volatile
 13668                           
 13669                           ;adc_drv.c: 91: ANSELCbits.ANSC2 = AnChSel->AnSelC2An6;
 13670  0E58  0874               	movf	Adc_ConfigAnCh@AnChSel,w
 13671  0E59  3E08               	addlw	8
 13672  0E5A  0086               	movwf	6
 13673  0E5B  0187               	clrf	7
 13674  0E5C  0C01               	rrf	1,w
 13675  0E5D  1C03               	skipc
 13676  0E5E  110E               	bcf	14,2	;volatile
 13677  0E5F  1803               	skipnc
 13678  0E60  150E               	bsf	14,2	;volatile
 13679                           
 13680                           ;adc_drv.c: 92: ANSELCbits.ANSC3 = AnChSel->AnSelC3An7;
 13681  0E61  0874               	movf	Adc_ConfigAnCh@AnChSel,w
 13682  0E62  3E09               	addlw	9
 13683  0E63  0086               	movwf	6
 13684  0E64  0187               	clrf	7
 13685  0E65  0C01               	rrf	1,w
 13686  0E66  1C03               	skipc
 13687  0E67  118E               	bcf	14,3	;volatile
 13688  0E68  1803               	skipnc
 13689  0E69  158E               	bsf	14,3	;volatile
 13690                           
 13691                           ;adc_drv.c: 94: ANSELCbits.ANSC6 = AnChSel->AnSelC6An8;
 13692  0E6A  0874               	movf	Adc_ConfigAnCh@AnChSel,w
 13693  0E6B  3E0A               	addlw	10
 13694  0E6C  0086               	movwf	6
 13695  0E6D  0187               	clrf	7
 13696  0E6E  0C01               	rrf	1,w
 13697  0E6F  1C03               	skipc
 13698  0E70  130E               	bcf	14,6	;volatile
 13699  0E71  1803               	skipnc
 13700  0E72  170E               	bsf	14,6	;volatile
 13701                           
 13702                           ;adc_drv.c: 95: ANSELCbits.ANSC7 = AnChSel->AnSelC7An9;
 13703  0E73  0874               	movf	Adc_ConfigAnCh@AnChSel,w
 13704  0E74  3E0B               	addlw	11
 13705  0E75  0086               	movwf	6
 13706  0E76  0187               	clrf	7
 13707  0E77  0C01               	rrf	1,w
 13708  0E78  1C03               	skipc
 13709  0E79  138E               	bcf	14,7	;volatile
 13710  0E7A  1803               	skipnc
 13711  0E7B  178E               	bsf	14,7	;volatile
 13712  0E7C  0008               	return
 13713  0E7D                     __end_of_Adc_ConfigAnCh:	
 13714                           
 13715                           	psect	intentry
 13716  0004                     __pintentry:	
 13717 ;; *************** function _MainInterrupt *****************
 13718 ;; Defined at:
 13719 ;;		line 50 in file "../../../Framework/MercuryFwk/Source/c/02_Osl/interrupts.c"
 13720 ;; Parameters:    Size  Location     Type
 13721 ;;		None
 13722 ;; Auto vars:     Size  Location     Type
 13723 ;;		None
 13724 ;; Return value:  Size  Location     Type
 13725 ;;                  1    wreg      void 
 13726 ;; Registers used:
 13727 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13728 ;; Tracked objects:
 13729 ;;		On entry : 0/0
 13730 ;;		On exit  : 0/0
 13731 ;;		Unchanged: 0/0
 13732 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13733 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13734 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13735 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13736 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13737 ;;Total ram usage:        1 bytes
 13738 ;; Hardware stack levels used:    1
 13739 ;; Hardware stack levels required when called:    1
 13740 ;; This function calls:
 13741 ;;		i1_GenerateEvt
 13742 ;; This function is called by:
 13743 ;;		Interrupt level 1
 13744 ;; This function uses a non-reentrant model
 13745 ;;
 13746                           
 13747  0004                     _MainInterrupt:	
 13748                           
 13749                           ;incstack = 0
 13750  0004  147E               	bsf	126,0	;set compiler interrupt flag (level 1)
 13751                           
 13752                           ; Regs used in _MainInterrupt: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 13753  0005  3180               	pagesel	$
 13754  0006  0020               	movlb	0	; select bank0
 13755  0007  087F               	movf	127,w
 13756  0008  00F3               	movwf	??_MainInterrupt
 13757                           
 13758                           ;interrupts.c: 53: if (PIR1bits.TMR2IF == ((UINT8)(1)) && PIE1bits.TMR2IE == ((UINT8)(1)
      +                          ))
 13759  0009  1C91               	btfss	17,1	;volatile
 13760  000A  281C               	goto	i1l3895
 13761  000B  0021               	movlb	1	; select bank1
 13762  000C  1C91               	btfss	17,1	;volatile
 13763  000D  281C               	goto	i1l3895
 13764                           
 13765                           ;interrupts.c: 54: {
 13766                           ;interrupts.c: 56: PIR1bits.TMR2IF = ((UINT8)(0));
 13767  000E  0020               	movlb	0	; select bank0
 13768  000F  1091               	bcf	17,1	;volatile
 13769                           
 13770                           ;interrupts.c: 58: InterruptCounter++;
 13771  0010  3001               	movlw	1
 13772  0011  0021               	movlb	1	; select bank1
 13773  0012  07A2               	addwf	_InterruptCounter^(0+128),f
 13774  0013  3000               	movlw	0
 13775  0014  3DA3               	addwfc	(_InterruptCounter+1)^(0+128),f
 13776                           
 13777                           ;interrupts.c: 60: if (InterruptCounter >= ((UINT16)(1)))
 13778  0015  0822               	movf	_InterruptCounter^(0+128),w
 13779  0016  0423               	iorwf	(_InterruptCounter+1)^(0+128),w
 13780  0017  1903               	btfsc	3,2
 13781  0018  281C               	goto	i1l3895
 13782                           
 13783                           ;interrupts.c: 61: {
 13784                           ;interrupts.c: 63: InterruptCounter = 0;
 13785  0019  01A2               	clrf	_InterruptCounter^(0+128)
 13786  001A  01A3               	clrf	(_InterruptCounter+1)^(0+128)
 13787                           
 13788                           ;interrupts.c: 65: MainSystemTimebaseFlag = CallTaskPhase;
 13789  001B  01EE               	clrf	_MainSystemTimebaseFlag^(0+128)
 13790  001C                     i1l3895:	
 13791                           
 13792                           ;interrupts.c: 66: }
 13793                           ;interrupts.c: 67: }
 13794                           ;interrupts.c: 70: if(PIE1bits.SSP1IE == ((UINT8)(1)) && PIR1bits.SSP1IF == ((UINT8)(1))
      +                          )
 13795  001C  0021               	movlb	1	; select bank1
 13796  001D  1D91               	btfss	17,3	;volatile
 13797  001E  2826               	goto	i1l401
 13798  001F  0020               	movlb	0	; select bank0
 13799  0020  1D91               	btfss	17,3	;volatile
 13800  0021  2826               	goto	i1l401
 13801                           
 13802                           ;interrupts.c: 71: {
 13803                           ;interrupts.c: 73: PIR1bits.SSP1IF = ((UINT8)(0));
 13804  0022  1191               	bcf	17,3	;volatile
 13805                           
 13806                           ;interrupts.c: 77: GenerateEvt(&I2cNewTxNotification);
 13807  0023  30E3               	movlw	(low (_I2cNewTxNotification| 0))& (0+255)
 13808  0024  3189  2130         	fcall	i1_GenerateEvt
 13809  0026                     i1l401:	
 13810  0026  0873               	movf	??_MainInterrupt,w
 13811  0027  0020               	movlb	0	; select bank0
 13812  0028  00FF               	movwf	127
 13813  0029  107E               	bcf	126,0	;clear compiler interrupt flag (level 1)
 13814  002A  0009               	retfie
 13815  002B                     __end_of_MainInterrupt:	
 13816                           
 13817                           	psect	text72
 13818  0930                     __ptext72:	
 13819 ;; *************** function i1_GenerateEvt *****************
 13820 ;; Defined at:
 13821 ;;		line 73 in file "../../../Framework/MercuryFwk/Source/c/02_Osl/os_ser.c"
 13822 ;; Parameters:    Size  Location     Type
 13823 ;;  Event           1    wreg     PTR struct _EventStructu
 13824 ;;		 -> Hsd4Set(10), Hsd3Set(10), Hsd2Set(10), Hsd1Set(10), 
 13825 ;;		 -> I2cReplyPacketReady(2), I2cWriteRequest(2), I2cSetAddress(2), I2cNewTxNotification(2), 
 13826 ;;		 -> I2cNewPacketNotification(2), 
 13827 ;; Auto vars:     Size  Location     Type
 13828 ;;  Event           1    1[COMMON] PTR struct _EventStructu
 13829 ;;		 -> Hsd4Set(10), Hsd3Set(10), Hsd2Set(10), Hsd1Set(10), 
 13830 ;;		 -> I2cReplyPacketReady(2), I2cWriteRequest(2), I2cSetAddress(2), I2cNewTxNotification(2), 
 13831 ;;		 -> I2cNewPacketNotification(2), 
 13832 ;;  GenerateEvt     1    2[COMMON] enum E3629
 13833 ;; Return value:  Size  Location     Type
 13834 ;;                  1    wreg      enum E3625
 13835 ;; Registers used:
 13836 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 13837 ;; Tracked objects:
 13838 ;;		On entry : 0/0
 13839 ;;		On exit  : 0/0
 13840 ;;		Unchanged: 0/0
 13841 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13842 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13843 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13844 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13845 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13846 ;;Total ram usage:        3 bytes
 13847 ;; Hardware stack levels used:    1
 13848 ;; This function calls:
 13849 ;;		Nothing
 13850 ;; This function is called by:
 13851 ;;		_MainInterrupt
 13852 ;; This function uses a non-reentrant model
 13853 ;;
 13854                           
 13855                           
 13856                           ;psect for function i1_GenerateEvt
 13857  0930                     i1_GenerateEvt:	
 13858                           
 13859                           ;incstack = 0
 13860                           ; Regs used in i1_GenerateEvt: [wreg+fsr1l+fsr1h+status,2+status,0]
 13861                           ;i1GenerateEvt@Event stored from wreg
 13862  0930  00F1               	movwf	i1GenerateEvt@Event
 13863                           
 13864                           ;os_ser.c: 76: EventStatusType EventStatus = EventIdle;
 13865  0931  01F2               	clrf	i1GenerateEvt@EventStatus
 13866                           
 13867                           ;os_ser.c: 78: if ((Event->EventOptions != ((UINT8)(2))) && (Event->EventOptions != ((UI
      +                          NT8)(3))))
 13868  0932  0871               	movf	i1GenerateEvt@Event,w
 13869  0933  0086               	movwf	6
 13870  0934  0187               	clrf	7
 13871  0935  3002               	movlw	2
 13872  0936  0601               	xorwf	1,w
 13873  0937  1903               	btfsc	3,2
 13874  0938  294C               	goto	i1l3875
 13875  0939  0871               	movf	i1GenerateEvt@Event,w
 13876  093A  0086               	movwf	6
 13877  093B  0187               	clrf	7
 13878  093C  3003               	movlw	3
 13879  093D  0601               	xorwf	1,w
 13880  093E  1903               	btfsc	3,2
 13881  093F  294C               	goto	i1l3875
 13882                           
 13883                           ;os_ser.c: 79: {
 13884                           ;os_ser.c: 81: Event->EventStatus = EventSent;
 13885  0940  3002               	movlw	2
 13886  0941  00F0               	movwf	??i1_GenerateEvt
 13887  0942  0A71               	incf	i1GenerateEvt@Event,w
 13888  0943  0086               	movwf	6
 13889  0944  0187               	clrf	7
 13890  0945  0870               	movf	??i1_GenerateEvt,w
 13891  0946  0081               	movwf	1
 13892                           
 13893                           ;os_ser.c: 83: EventStatus = EventSent;
 13894  0947  3002               	movlw	2
 13895  0948  00F0               	movwf	??i1_GenerateEvt
 13896  0949  0870               	movf	??i1_GenerateEvt,w
 13897  094A  00F2               	movwf	i1GenerateEvt@EventStatus
 13898                           
 13899                           ;os_ser.c: 84: }
 13900  094B  0008               	return
 13901  094C                     i1l3875:	
 13902                           
 13903                           ;os_ser.c: 85: else
 13904                           ;os_ser.c: 86: {
 13905                           ;os_ser.c: 88: EventStatus = EventNotSent;
 13906  094C  3003               	movlw	3
 13907  094D  00F0               	movwf	??i1_GenerateEvt
 13908  094E  0870               	movf	??i1_GenerateEvt,w
 13909  094F  00F2               	movwf	i1GenerateEvt@EventStatus
 13910  0950  0008               	return
 13911  0951                     __end_ofi1_GenerateEvt:	
 13912                           ;os_ser.c: 89: }
 13913                           ;os_ser.c: 92: return(EventStatus);
 13914                           ;	Return value of i1_GenerateEvt is never used
 13915                           
 13916  007E                     btemp	set	126	;btemp
 13917  007E                     int$flags	set	126
 13918  007E                     wtemp	set	126
 13919  007E                     wtemp0	set	126
 13920  0080                     wtemp1	set	128
 13921  0082                     wtemp2	set	130
 13922  0084                     wtemp3	set	132
 13923  0086                     wtemp4	set	134
 13924  0088                     wtemp5	set	136
 13925  007F                     wtemp6	set	127
 13926  007E                     ttemp	set	126
 13927  007E                     ttemp0	set	126
 13928  0081                     ttemp1	set	129
 13929  0084                     ttemp2	set	132
 13930  0087                     ttemp3	set	135
 13931  007F                     ttemp4	set	127
 13932  007E                     ltemp	set	126
 13933  007E                     ltemp0	set	126
 13934  0082                     ltemp1	set	130
 13935  0086                     ltemp2	set	134
 13936  0080                     ltemp3	set	128


Data Sizes:
    Strings     28
    Constant    12
    Data        43
    BSS         457
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14      6      10
    BANK0            80     67      78
    BANK1            80      4      79
    BANK2            80      6      78
    BANK3            80      0      80
    BANK4            80      0      18
    BANK5            80      0      80
    BANK6            80      0      80
    BANK7            80      0      80
    BANK8            80      0       0
    BANK9            80      0       0
    BANK10           80      0       0
    BANK11           45      0       0
    BANK12            0      0       0

Pointer List with Targets:

    Tmr6IsrCallback	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), 

    Tmr4IsrCallback	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), 

    Tmr2IsrCallback	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), 

    utoa@buf	PTR unsigned char  size(1) Largest target is 4
		 -> StdS_ManageStdServices@DieTempStr(BANK0[4]), 

    sp__itoa	PTR unsigned char  size(1) Largest target is 0

    GenerateImpulse@Impulse	PTR struct _ImpulseType size(1) Largest target is 10
		 -> Hsd4Set(BANK1[10]), Hsd3Set(BANK1[10]), Hsd2Set(BANK1[10]), Hsd1Set(BANK1[10]), 

    sp__utoa	PTR unsigned char  size(1) Largest target is 4
		 -> StdS_ManageStdServices@DieTempStr(BANK0[4]), 

    StringCopy@SourceStr	PTR unsigned char  size(2) Largest target is 9
		 -> StdS_ManageStdServices@DieTempStr(BANK0[4]), STR_5(CODE[9]), STR_4(CODE[9]), STR_3(CODE[6]), 
		 -> STR_2(CODE[5]), 

    StringCopy@DestStr	PTR unsigned char  size(1) Largest target is 80
		 -> RepBuffer(BANK5[80]), 

    LedStateMachine@LedSts	PTR enum E4026 size(1) Largest target is 1
		 -> Led1Sts(BANK1[1]), 

    LedStateMachine@LedPulse	PTR struct _LedPulseType size(1) Largest target is 6
		 -> Led1Pulse(BANK1[6]), 

    LedStateMachine@LedBlink	PTR struct _LedBlinkType size(1) Largest target is 9
		 -> Led1Blink(BANK2[9]), 

    ReceiveEvt@Event	PTR struct _EventStructure size(1) Largest target is 10
		 -> Hsd4Set(BANK1[10]), Hsd3Set(BANK1[10]), Hsd2Set(BANK1[10]), Hsd1Set(BANK1[10]), 
		 -> I2cReplyPacketReady(BANK0[2]), I2cWriteRequest(BANK1[2]), I2cSetAddress(BANK1[2]), I2cNewTxNotification(BANK1[2]), 
		 -> I2cNewPacketNotification(BANK1[2]), 

    GenerateEvt@Event	PTR struct _EventStructure size(1) Largest target is 10
		 -> Hsd4Set(BANK1[10]), Hsd3Set(BANK1[10]), Hsd2Set(BANK1[10]), Hsd1Set(BANK1[10]), 
		 -> I2cReplyPacketReady(BANK0[2]), I2cWriteRequest(BANK1[2]), I2cSetAddress(BANK1[2]), I2cNewTxNotification(BANK1[2]), 
		 -> I2cNewPacketNotification(BANK1[2]), 

    S1247_SchedTblType$Task	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> App_MainTask(), Led_MainTask(), Wdg_MainTask(), I2cSlv_MainTask(), 
		 -> I2c_DataReceiveSm(), 

    TaskTable.Task	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> App_MainTask(), Led_MainTask(), Wdg_MainTask(), I2cSlv_MainTask(), 
		 -> I2c_DataReceiveSm(), 

    Tmr_TmrBConfig@TmrBConfig	PTR struct _TmrBConfigType size(1) Largest target is 6
		 -> InitSchTimer@TmrBConfig(BANK0[6]), 

    Mcu_ConfigPullUps@WpuCh	PTR struct _WpuChType size(1) Largest target is 18
		 -> App_MainTask@WpuCh(BANK0[18]), 

    Adc_InitAdcModule@AdcConfig	PTR struct _AdcCfgType size(1) Largest target is 6
		 -> App_MainTask@AdcConfig(BANK0[6]), 

    Adc_ConfigAnCh@AnChSel	PTR struct _AnalogChSelType size(1) Largest target is 12
		 -> App_MainTask@AnalogChSel(BANK0[12]), 

    LedPulseStateMachine@LedPulse	PTR struct _LedPulseType size(1) Largest target is 6
		 -> Led1Pulse(BANK1[6]), 

    LedBlinkStateMachine@LedBlink	PTR struct _LedBlinkType size(1) Largest target is 9
		 -> Led1Blink(BANK2[9]), 

    I2c_UpdateTxBuffer@DataBuffer	PTR unsigned char  size(1) Largest target is 80
		 -> RepBuffer(BANK5[80]), 

    I2c_InitI2cModule@I2cConfig	PTR struct _I2cConfig size(1) Largest target is 11
		 -> I2cConfig(BANK2[11]), 


Critical Paths under _main in COMMON

    _Tmr_TmrBConfig->_TmrBInit
    _Tmr_TmrBConfig->_Tmr_TmrBIrqSet
    _Tmr_TmrBPrSet->___wmul
    ___lmul->___wmul
    _Wdg_MainTask->_Mcu_SetWdgPeriod
    _Led_InitSeq->_Led_SetLedStatus
    _LedStateMachine->_LedBlinkStateMachine
    _LedPulseStateMachine->_Led_SetLedStatus
    _LedBlinkStateMachine->___lwdiv
    _I2c_DataReceiveSm->_ClearRxBuffer
    _I2c_DataReceiveSm->_ClearTxBuffer
    _I2c_DataReceiveSm->_ReceiveEvt
    _I2c_InitI2cModule->_ClearRxBuffer
    _I2c_InitI2cModule->_ClearTxBuffer
    _I2cSlv_I2cDrvHandle->_Led_SetLedStatus
    _I2cSlv_I2cDrvHandle->_ReceiveEvt
    _GenerateImpulse->_ReceiveEvt
    _GenerateImpulse->_SetOutChSts
    _AppSm->_StdS_SetI2cAddress
    _ManageProtocol->_ReceiveEvt
    _UpdateHsdSts->_SetOutChSts
    _utoa->___lwmod
    _SetLedBehavSts->_Led_SetLedPulseTime
    _SetLedBehavSts->_Led_SetLedStatus
    _LowPowerMode->_Mcu_SetWdgSts
    _GetDieTemperature->_Adc_GetConvResult
    _GetDieTemperature->_Adc_SelectChannel
    _ControlLedDirect->_Led_SetLedStatus

Critical Paths under _MainInterrupt in COMMON

    _MainInterrupt->i1_GenerateEvt

Critical Paths under _main in BANK0

    _SystemInit->_InitSchTimer
    _InitSchTimer->_Tmr_TmrBConfig
    _Tmr_TmrBConfig->_Tmr_TmrBPrSet
    _Tmr_TmrBPrSet->___lmul
    ___lmul->___wmul
    _MainScheduler->_InitializeTasks
    _MainScheduler->_ScheduleTasks
    _ScheduleTasks->_App_MainTask
    _InitializeTasks->_App_MainTask
    _Led_InitSeq->_Led_SetLedStatus
    _LedStateMachine->_LedPulseStateMachine
    _LedPulseStateMachine->___lwdiv
    _LedBlinkStateMachine->___lwdiv
    _I2cSlv_I2cDrvHandle->_I2c_UpdateTxBuffer
    _App_MainTask->_AppSm
    _AppSm->_ManageProtocol
    _ManageProtocol->_StdS_ManageStdServices
    _StdS_ManageStdServices->_utoa
    _utoa->___lwdiv
    _SetLedBehavSts->_Led_SetLedBlinkTime
    _GetDieTemperature->_Adc_GetConvResult
    _ControlLedDirect->_Led_SetLedStatus

Critical Paths under _MainInterrupt in BANK0

    None.

Critical Paths under _main in BANK1

    _MainScheduler->_InitializeTasks

Critical Paths under _MainInterrupt in BANK1

    None.

Critical Paths under _main in BANK2

    _MainScheduler->_ScheduleTasks

Critical Paths under _MainInterrupt in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _MainInterrupt in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _MainInterrupt in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _MainInterrupt in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _MainInterrupt in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _MainInterrupt in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _MainInterrupt in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _MainInterrupt in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _MainInterrupt in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _MainInterrupt in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _MainInterrupt in BANK12

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0   50160
                      _MainScheduler
                         _SystemInit
 ---------------------------------------------------------------------------------
 (1) _SystemInit                                           0     0      0    3264
                       _InitSchTimer
               _Mcu_EnableInterrupts
                     _Mcu_InitIntOsc
 ---------------------------------------------------------------------------------
 (2) _Mcu_InitIntOsc                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _Mcu_EnableInterrupts                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _InitSchTimer                                         7     7      0    3264
                                             37 BANK0      7     7      0
                     _Tmr_TmrBConfig
 ---------------------------------------------------------------------------------
 (3) _Tmr_TmrBConfig                                       3     2      1    3061
                                             34 BANK0      3     2      1
                           _TmrBInit
                       _Tmr_StartTmr
                     _Tmr_TmrBIrqSet
                      _Tmr_TmrBPrSet
 ---------------------------------------------------------------------------------
 (4) _Tmr_TmrBPrSet                                       18    14      4    2003
                                             16 BANK0     18    14      4
                            ___lldiv
                             ___lmul
                             ___wmul
 ---------------------------------------------------------------------------------
 (5) ___wmul                                               6     2      4     404
                                              4 COMMON     2     2      0
                                              0 BANK0      4     0      4
 ---------------------------------------------------------------------------------
 (5) ___lmul                                              12     4      8     220
                                              4 BANK0     12     4      8
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (5) ___lldiv                                             14     6      8     857
                                              4 COMMON     1     1      0
                                              0 BANK0     13     5      8
 ---------------------------------------------------------------------------------
 (4) _Tmr_TmrBIrqSet                                       2     1      1     216
                                              4 COMMON     2     1      1
 ---------------------------------------------------------------------------------
 (4) _Tmr_StartTmr                                         1     1      0      22
                                              4 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (4) _TmrBInit                                             4     2      2     371
                                              4 COMMON     2     0      2
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _MainScheduler                                        0     0      0   46896
                    _InitializeTasks
                      _ScheduleTasks
 ---------------------------------------------------------------------------------
 (2) _ScheduleTasks                                        7     7      0   23541
                                             66 BANK0      1     1      0
                                              0 BANK2      6     6      0
                       _App_MainTask *
                    _I2cSlv_MainTask *
                  _I2c_DataReceiveSm *
                       _Led_MainTask *
                       _Wdg_MainTask *
 ---------------------------------------------------------------------------------
 (2) _InitializeTasks                                      5     5      0   23355
                                             66 BANK0      1     1      0
                                              0 BANK1      4     4      0
                       _App_MainTask *
                    _I2cSlv_MainTask *
                  _I2c_DataReceiveSm *
                       _Led_MainTask *
                       _Wdg_MainTask *
 ---------------------------------------------------------------------------------
 (3) _Wdg_MainTask                                         1     0      1      44
                                             28 BANK0      1     0      1
                       _Mcu_ClearWdg
                   _Mcu_SetWdgPeriod
                      _Mcu_SetWdgSts
 ---------------------------------------------------------------------------------
 (4) _Mcu_SetWdgPeriod                                     2     2      0      22
                                              4 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (4) _Mcu_ClearWdg                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _Led_MainTask                                         5     4      1    6575
                                             28 BANK0      5     4      1
                    _LedStateMachine
                        _Led_InitSeq
                     _SetLedBehavSts
 ---------------------------------------------------------------------------------
 (4) _Led_InitSeq                                          1     1      0     832
                                              1 BANK0      1     1      0
                   _Led_SetLedStatus
 ---------------------------------------------------------------------------------
 (4) _LedStateMachine                                      7     4      3    4494
                                             11 BANK0      7     4      3
               _LedBlinkStateMachine
               _LedPulseStateMachine
 ---------------------------------------------------------------------------------
 (5) _LedPulseStateMachine                                 4     3      1    2439
                                              7 BANK0      4     3      1
                   _Led_SetLedStatus
                            ___lwdiv
 ---------------------------------------------------------------------------------
 (5) _LedBlinkStateMachine                                 3     3      0    1654
                                              5 COMMON     1     1      0
                                              7 BANK0      2     2      0
                            ___lwdiv
 ---------------------------------------------------------------------------------
 (3) _I2c_DataReceiveSm                                    9     8      1    1426
                                             28 BANK0      9     8      1
                     _CheckAckStatus
                    _CheckByteStatus
                 _CheckStopBitStatus
                      _ClearRxBuffer
                      _ClearTxBuffer
                        _GenerateEvt
                          _Mcu_Reset
                         _ReceiveEvt
 ---------------------------------------------------------------------------------
 (4) _CheckStopBitStatus                                   1     1      0       0
                                              4 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (4) _CheckByteStatus                                      1     1      0       0
                                              4 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (4) _CheckAckStatus                                       1     1      0       0
                                              4 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (3) _I2cSlv_MainTask                                      1     0      1    2971
                                             28 BANK0      1     0      1
                _I2cSlv_I2cDrvHandle
                  _I2c_InitI2cModule
                      _I2c_SetConfig
 ---------------------------------------------------------------------------------
 (4) _I2c_SetConfig                                        1     1      0       0
                                              4 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (4) _I2c_InitI2cModule                                    3     3      0     572
                                              0 BANK0      3     3      0
                      _ClearRxBuffer
                      _ClearTxBuffer
 ---------------------------------------------------------------------------------
 (4) _ClearTxBuffer                                        2     2      0      99
                                              4 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (4) _ClearRxBuffer                                        2     2      0      99
                                              4 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (4) _I2cSlv_I2cDrvHandle                                  6     6      0    2399
                                              4 BANK0      6     6      0
                        _GenerateEvt
                  _I2c_SetI2cAddress
              _I2c_SetI2cAddressMask
                 _I2c_UpdateTxBuffer
                   _Led_SetLedStatus
                         _ReceiveEvt
 ---------------------------------------------------------------------------------
 (5) _I2c_UpdateTxBuffer                                   5     4      1     274
                                              4 COMMON     1     0      1
                                              0 BANK0      4     4      0
 ---------------------------------------------------------------------------------
 (5) _I2c_SetI2cAddressMask                                1     1      0      31
                                              4 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (5) _I2c_SetI2cAddress                                    1     1      0      31
                                              4 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (3) _App_MainTask                                        38    37      1   12206
                                             28 BANK0     38    37      1
                     _Adc_ConfigAnCh
                  _Adc_InitAdcModule
                              _AppSm
                    _GenerateImpulse
                  _Mcu_ConfigPullUps
                 _Mcu_SetDieTempMode
                  _Mcu_SetDieTempSts
                  _Mcu_SetPullUpsSts
 ---------------------------------------------------------------------------------
 (4) _Mcu_SetPullUpsSts                                    1     1      0      22
                                              4 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (4) _Mcu_SetDieTempSts                                    1     1      0      22
                                              4 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (4) _Mcu_SetDieTempMode                                   1     1      0      22
                                              4 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (4) _Mcu_ConfigPullUps                                    1     1      0     426
                                              4 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (4) _GenerateImpulse                                      5     5      0    1391
                                              0 BANK0      5     5      0
                         _ReceiveEvt
                        _SetOutChSts
 ---------------------------------------------------------------------------------
 (4) _AppSm                                                1     1      0    9216
                                             27 BANK0      1     1      0
                        _GenerateEvt
                     _ManageProtocol
                 _StdS_SetI2cAddress
 ---------------------------------------------------------------------------------
 (5) _StdS_SetI2cAddress                                   2     2      0       0
                                              4 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (5) _ManageProtocol                                       3     3      0    8480
                                             24 BANK0      3     3      0
                        _GenerateEvt
                         _ReceiveEvt
             _StdS_ManageStdServices
                       _UpdateHsdSts
 ---------------------------------------------------------------------------------
 (6) _UpdateHsdSts                                         1     1      0     494
                                              0 BANK0      1     1      0
                        _SetOutChSts
 ---------------------------------------------------------------------------------
 (5) _SetOutChSts                                          2     1      1     494
                                              4 COMMON     2     1      1
 ---------------------------------------------------------------------------------
 (6) _StdS_ManageStdServices                               8     8      0    6888
                                             16 BANK0      8     8      0
                         _BoardReset
                   _ControlLedDirect
                        _GenerateEvt
                  _GetDieTemperature
                       _LowPowerMode
                     _SetLedBehavSts
                         _StringCopy
                               _utoa
 ---------------------------------------------------------------------------------
 (7) _utoa                                                 9     5      4    2399
                                              7 BANK0      9     5      4
                            ___lwdiv
                            ___lwmod
 ---------------------------------------------------------------------------------
 (8) ___lwmod                                              6     2      4     500
                                              4 COMMON     2     2      0
                                              0 BANK0      4     0      4
 ---------------------------------------------------------------------------------
 (6) ___lwdiv                                              8     4      4    1125
                                              4 COMMON     1     1      0
                                              0 BANK0      7     3      4
 ---------------------------------------------------------------------------------
 (7) _StringCopy                                           9     5      4    1350
                                              4 COMMON     1     1      0
                                              0 BANK0      8     4      4
 ---------------------------------------------------------------------------------
 (4) _SetLedBehavSts                                       2     2      0    1249
                                              4 BANK0      2     2      0
                _Led_SetLedBlinkTime
                _Led_SetLedPulseTime
                   _Led_SetLedStatus
 ---------------------------------------------------------------------------------
 (5) _Led_SetLedPulseTime                                  3     1      2     139
                                              4 COMMON     2     0      2
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (5) _Led_SetLedBlinkTime                                  5     1      4     247
                                              4 COMMON     1     1      0
                                              0 BANK0      4     0      4
 ---------------------------------------------------------------------------------
 (7) _LowPowerMode                                         0     0      0      22
                      _Mcu_SetWdgSts
 ---------------------------------------------------------------------------------
 (4) _Mcu_SetWdgSts                                        1     1      0      22
                                              4 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (7) _GetDieTemperature                                    4     2      2      90
                                              3 BANK0      4     2      2
                  _Adc_GetConvResult
                     _Adc_GetConvSts
                  _Adc_SelectChannel
                _Adc_StartConversion
 ---------------------------------------------------------------------------------
 (8) _Adc_StartConversion                                  0     0      0       0
 ---------------------------------------------------------------------------------
 (8) _Adc_SelectChannel                                    2     2      0      22
                                              4 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (8) _Adc_GetConvSts                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (8) _Adc_GetConvResult                                    5     3      2      34
                                              4 COMMON     2     0      2
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (4) _GenerateEvt                                          3     3      0     736
                                              4 COMMON     1     1      0
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (7) _ControlLedDirect                                     0     0      0     832
                   _Led_SetLedStatus
 ---------------------------------------------------------------------------------
 (5) _Led_SetLedStatus                                     3     2      1     832
                                              4 COMMON     2     1      1
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (7) _BoardReset                                           0     0      0       0
                          _Mcu_Reset
 ---------------------------------------------------------------------------------
 (4) _Mcu_Reset                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (4) _ReceiveEvt                                           2     2      0     362
                                              4 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (4) _Adc_InitAdcModule                                    1     1      0     162
                                              4 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (4) _Adc_ConfigAnCh                                       1     1      0     294
                                              4 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 8
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (9) _MainInterrupt                                        1     1      0      75
                                              3 COMMON     1     1      0
                      i1_GenerateEvt
 ---------------------------------------------------------------------------------
 (10) i1_GenerateEvt                                       3     3      0      75
                                              0 COMMON     3     3      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 10
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _MainScheduler
     _InitializeTasks
       _App_MainTask *
         _Adc_ConfigAnCh
         _Adc_InitAdcModule
         _AppSm
           _GenerateEvt
           _ManageProtocol
             _GenerateEvt
             _ReceiveEvt
             _StdS_ManageStdServices
               _BoardReset
                 _Mcu_Reset
               _ControlLedDirect
                 _Led_SetLedStatus
               _GenerateEvt
               _GetDieTemperature
                 _Adc_GetConvResult
                 _Adc_GetConvSts
                 _Adc_SelectChannel
                 _Adc_StartConversion
               _LowPowerMode
                 _Mcu_SetWdgSts
               _SetLedBehavSts
                 _Led_SetLedBlinkTime
                 _Led_SetLedPulseTime
                 _Led_SetLedStatus
               _StringCopy
               _utoa
                 ___lwdiv
                 ___lwmod
             _UpdateHsdSts
               _SetOutChSts
           _StdS_SetI2cAddress
         _GenerateImpulse
           _ReceiveEvt
           _SetOutChSts
         _Mcu_ConfigPullUps
         _Mcu_SetDieTempMode
         _Mcu_SetDieTempSts
         _Mcu_SetPullUpsSts
       _I2cSlv_MainTask *
         _I2cSlv_I2cDrvHandle
           _GenerateEvt
           _I2c_SetI2cAddress
           _I2c_SetI2cAddressMask
           _I2c_UpdateTxBuffer
           _Led_SetLedStatus
           _ReceiveEvt
         _I2c_InitI2cModule
           _ClearRxBuffer
           _ClearTxBuffer
         _I2c_SetConfig
       _I2c_DataReceiveSm *
         _CheckAckStatus
         _CheckByteStatus
         _CheckStopBitStatus
         _ClearRxBuffer
         _ClearTxBuffer
         _GenerateEvt
         _Mcu_Reset
         _ReceiveEvt
       _Led_MainTask *
         _LedStateMachine
           _LedBlinkStateMachine
             ___lwdiv
           _LedPulseStateMachine
             _Led_SetLedStatus
             ___lwdiv
         _Led_InitSeq
           _Led_SetLedStatus
         _SetLedBehavSts
           _Led_SetLedBlinkTime
           _Led_SetLedPulseTime
           _Led_SetLedStatus
       _Wdg_MainTask *
         _Mcu_ClearWdg
         _Mcu_SetWdgPeriod
         _Mcu_SetWdgSts
     _ScheduleTasks
       _App_MainTask *
         _Adc_ConfigAnCh
         _Adc_InitAdcModule
         _AppSm
           _GenerateEvt
           _ManageProtocol
             _GenerateEvt
             _ReceiveEvt
             _StdS_ManageStdServices
               _BoardReset
                 _Mcu_Reset
               _ControlLedDirect
                 _Led_SetLedStatus
               _GenerateEvt
               _GetDieTemperature
                 _Adc_GetConvResult
                 _Adc_GetConvSts
                 _Adc_SelectChannel
                 _Adc_StartConversion
               _LowPowerMode
                 _Mcu_SetWdgSts
               _SetLedBehavSts
                 _Led_SetLedBlinkTime
                 _Led_SetLedPulseTime
                 _Led_SetLedStatus
               _StringCopy
               _utoa
                 ___lwdiv
                 ___lwmod
             _UpdateHsdSts
               _SetOutChSts
           _StdS_SetI2cAddress
         _GenerateImpulse
           _ReceiveEvt
           _SetOutChSts
         _Mcu_ConfigPullUps
         _Mcu_SetDieTempMode
         _Mcu_SetDieTempSts
         _Mcu_SetPullUpsSts
       _I2cSlv_MainTask *
         _I2cSlv_I2cDrvHandle
           _GenerateEvt
           _I2c_SetI2cAddress
           _I2c_SetI2cAddressMask
           _I2c_UpdateTxBuffer
           _Led_SetLedStatus
           _ReceiveEvt
         _I2c_InitI2cModule
           _ClearRxBuffer
           _ClearTxBuffer
         _I2c_SetConfig
       _I2c_DataReceiveSm *
         _CheckAckStatus
         _CheckByteStatus
         _CheckStopBitStatus
         _ClearRxBuffer
         _ClearTxBuffer
         _GenerateEvt
         _Mcu_Reset
         _ReceiveEvt
       _Led_MainTask *
         _LedStateMachine
           _LedBlinkStateMachine
             ___lwdiv
           _LedPulseStateMachine
             _Led_SetLedStatus
             ___lwdiv
         _Led_InitSeq
           _Led_SetLedStatus
         _SetLedBehavSts
           _Led_SetLedBlinkTime
           _Led_SetLedPulseTime
           _Led_SetLedStatus
       _Wdg_MainTask *
         _Mcu_ClearWdg
         _Mcu_SetWdgPeriod
         _Mcu_SetWdgSts
   _SystemInit
     _InitSchTimer
       _Tmr_TmrBConfig
         _TmrBInit
         _Tmr_StartTmr
         _Tmr_TmrBIrqSet
         _Tmr_TmrBPrSet
           ___lldiv
           ___lmul
             ___wmul (ARG)
           ___wmul
     _Mcu_EnableInterrupts
     _Mcu_InitIntOsc

 _MainInterrupt (ROOT)
   i1_GenerateEvt

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             3F0      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            E      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               E      6       A       2       71.4%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0       0       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50     43      4E       5       97.5%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BANK1               50      4      4F       7       98.8%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BITBANK2            50      0       0       8        0.0%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
BANK2               50      6      4E       9       97.5%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
BITBANK3            50      0       0      10        0.0%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BANK3               50      0      50      11      100.0%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
BITBANK4            50      0       0      12        0.0%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BANK4               50      0      12      13       22.5%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BITBANK5            50      0       0      14        0.0%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
BANK5               50      0      50      15      100.0%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
BITBANK6            50      0       0      16        0.0%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
BANK6               50      0      50      17      100.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BITBANK7            50      0       0      18        0.0%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BANK7               50      0      50      19      100.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
ABS                  0      0     247      20        0.0%
BITBANK8            50      0       0      21        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BANK8               50      0       0      22        0.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BITBANK9            50      0       0      23        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BANK9               50      0       0      24        0.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BITBANK10           50      0       0      25        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BANK10              50      0       0      26        0.0%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BITBANK11           50      0       0      27        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BANK11              2D      0       0      28        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
BITBANK12           30      0       0      29        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BANK12               0      0       0      30        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
DATA                 0      0     247      31        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%


Microchip Technology PIC Macro Assembler V1.38 build -256452561 
Symbol Table                                                                                   Sat Oct 19 09:49:21 2019

                                    pc 0002                       _Mcu_SetWdgPeriod 17A4  
                          __CFG_CP$OFF 0000             __end_of_I2c_UpdateTxBuffer 0930  
                ?_LedPulseStateMachine 0027                 __end_of_Mcu_InitIntOsc 1756  
           __size_of_GetDieTemperature 0019                 ??_LedBlinkStateMachine 0027  
                  ___wmul@multiplicand 0022            __size_of_CheckStopBitStatus 000A  
                 __end_of_App_MainTask 066F                                    l137 019C  
                                  l242 1753                                    l331 0F3F  
                                  l324 0F19                                    l316 0EFA  
                                  l333 0F42                                    l341 09E1  
       __end_of_StdS_ManageStdServices 02A1                                    l334 0F46  
                                  l326 0F1C                                    l318 0EFC  
                                  l327 0F20                                    l319 0EFF  
                                  l343 09EA                                    l344 09F3  
                                  l337 0F71                                    l361 0899  
                                  l346 0A07                                    l363 089C  
                                  l364 089F                                    l349 05BA  
                                  l373 07F2                                    l630 17EF  
                                  l366 08AD                                    l615 0C9C  
                                  l623 0B51                                    l560 0FFF  
                                  l538 0880                                    l619 0B20  
                                  l644 0813                                    l637 08F6  
                                  l592 0AF4                                    l817 0896  
                                  l914 0EF6                                    l758 0BFF  
                                  l942 0A32                                    l950 05DC  
                                  l792 02A0                                    l928 038C  
                                  l954 066E                                    l891 0A8C  
                                  _PR2 001B                                    _PR4 0416  
                         __CFG_CPD$OFF 0000                                    _PR6 041D  
                         __CFG_BORV$LO 0000                                    wreg 0009  
                         __CFG_IESO$ON 0000                       ??_SetLedBehavSts 0024  
                                 S4879 1028                 Mcu_SetPullUpsSts@PuSts 0074  
                      ??_MainInterrupt 0073                           __CFG_LVP$OFF 0000  
                      ??_MainScheduler 0076                                   l1110 0900  
                                 l4003 0A5B                                   l3213 0AA0  
                                 l1382 0D8F                                   l4111 096F  
                                 l4031 0BD1                                   l4023 0BC1  
                                 l4113 0970                                   l4017 098F  
                                 l4201 0CCD                                   l3209 0A96  
                                 l4035 0BEC                                   l4027 0BC7  
                                 l4131 01E2                                   l4061 08CC  
                                 l4125 01C8                                   l4055 0853  
                                 l4039 0BF1                                   l4047 0996  
                                 l4071 0D49                                   l4151 0224  
                                 l4143 0216                                   l4119 01AE  
                                 l4311 02C4                                   l4081 0D67  
                                 l4161 0241                                   l4145 0219  
                                 l4137 01FC                                   l4305 02AC  
                                 l3417 08A2                                   l4147 021C  
                                 l4323 0303                                   l4315 02D9  
                                 l4307 02AF                                   l4243 0917  
                                 l4251 0727                                   l4411 0F55  
                                 l4403 0F24                                   l4149 0221  
                                 l4181 0CA3                                   l4333 0357  
                                 l4341 0373                                   l4405 0F2F  
                                 l4175 027F                                   l4183 0CA4  
                                 l4319 02EE                                   l4271 07AE  
                                 l4247 0717                                   l4415 0F65  
                                 l4193 0CBE                                   l4505 0C4F  
                                 l4409 0F4A                                   l4345 08F9  
                                 l4425 0563                                   l4433 05AB  
                                 l4195 0CBF                                   l4187 0CB0  
                                 l4531 0E80                                   l4443 0F75  
                                 l4259 076A                                   l3723 088D  
                                 l4611 00F4                                   l3387 09FC  
                                 l4363 0D01                                   l4427 057A  
                                 l4435 05B7                                   l2941 0A77  
                                 l4189 0CB1                                   l4269 07A2  
                                 l4277 0DA8                                   l4509 0C5B  
                                 l3717 0882                                   l4701 0877  
                                 l4373 0D2F                                   l4365 0D0F  
                                 l4437 05BC                                   l4429 0592  
                                 l2935 0A62                                   l4199 0CCC  
                                 l4463 0FAB                                   l4455 0F9D  
                                 l4279 0DB2                                   l4295 0DF8  
                                 l4527 0C90                                   l3719 088A  
                                 l4623 0115                                   l2937 0A69  
                                 l2945 0A7E                                   l4545 0EBE  
                                 l4537 0E99                                   l4449 0F87  
                                 l4289 0DEE                                   l4297 0E07  
                                 l4625 011A                                   l4609 00EF  
                                 l4713 0B48                                   l4377 0D3A  
                                 l3931 17E3                                   l2939 0A70  
                                 l4571 0A23                                   l4555 0EEB  
                                 l4475 0FD9                                   l4491 0AF7  
                                 l4643 015C                                   l4707 0B28  
                                 l4469 0FC9                                   l4485 0FF6  
                                 l4493 0AFF                                   l4661 0190  
                                 l4653 0175                                   l4637 013A  
                                 l4397 0F02                                   l3935 17E9  
                                 l4567 0A19                                   l4559 0A09  
                                 l4575 0A26                                   l4655 017B  
                                 l4591 00D0                                   l4671 01A1  
                                 l4823 041E                                   l4399 0F0D  
                                 l3945 08E0                                   l3953 0807  
                                 l4489 0AF2                                   l4497 0B0C  
                                 l4665 0196                                   l4649 0166  
                                 l4593 00D2                                   l4825 0442  
                                 l3971 0B67                                   l4499 0B1D  
                                 l4579 00B1                                   l4683 07D1  
                                 l3949 08F1                                   l3957 080D  
                                 l3981 0B82                                   l4693 086D  
                                 l4599 00DB                                   l3977 0B79  
                                 l3969 0B5B                                   l3993 0A3A  
                                 l4697 0874                                   l4793 0652  
                                 l4849 083A                                   l3995 0A46  
                                 l4797 0665                                   l3999 0A52  
                                 STR_1 1015                                   STR_2 1023  
                                 STR_3 101D                                   STR_4 100C  
                                 STR_5 100C                                   u2005 1794  
                                 u2015 179E                                   _LATA 010C  
                                 _LATB 010D                                   _LATC 010E  
                                 u3115 035B                                   u3125 0361  
                                 u3205 0D10                                   u3215 0D24  
                                 u3305 04F5                                   u3065 0759  
                                 u3225 0D30                                   u3145 0901  
                                 u3155 0906                                   u1805 0AD4  
                                 u3245 0468                                   u3085 0792  
                                 u3430 0C6B                                   u3255 0485  
                                 u3095 0DD9                                   u3440 0C6C  
                                 u3265 0497                                   u3185 0D04  
                                 u1905 0AA8                                   u2715 0B68  
                                 u3275 04A9                                   u2725 0B72  
                                 u3285 04BB                                   u2735 0B7A  
                                 u3295 04CD                                   u3650 05C9  
                                 u1795 0AC5                                   u3715 03A4  
                                 u3660 05D7                                   u2765 0A3D  
                                 u3485 0ED4                                   u3805 0437  
                                 u3725 03AB                                   u2695 0B5E  
                                 u3735 03BE                                   u1895 0AA1  
                                 u2785 0A4C                                   u2945 0CA8  
                                 u3745 03D2                                   u2795 0A53  
                                 u1995 178A                                   u3675 0C17  
                                 u3755 03D9                                   u2965 0CB6  
                                 u3685 0C1E                                   u3765 03EB  
                                 u3695 0C31                                   u3775 03FC  
                                 u2985 0CC4                                   u3785 040F  
                                 u3795 0423                                   _WPUA 020C  
                                 _WPUB 020D                                   _WPUC 020E  
                         __CFG_WRT$OFF 0000                          __CFG_FCMEN$ON 0000  
          Led_SetLedBlinkTime@OnTimeMs 0020                                   _main 1756  
                                 fsr0h 0005                                   fsr1h 0007  
                                 fsr0l 0004                                   indf0 0000  
                                 indf1 0001                                   fsr1l 0006  
                  __end_of_Led_InitSeq 0C9D                                   btemp 007E  
                      _I2cSlaveAddress 0077                                   _utoa 0D43  
         __size_of_Led_SetLedPulseTime 0010                          __CFG_BOREN$ON 0000  
                                 ltemp 007E                      _Mcu_SetPullUpsSts 1775  
                                 start 002B                                   ttemp 007E  
                                 wtemp 007E                     AppSm@WpuSetCounter 00AB  
                  __end_of_GenerateEvt 0994                          ?_InitSchTimer 0070  
                       ??_Mcu_ClearWdg 0074                         ?_Mcu_SetWdgSts 0070  
                           _BoardReset 173C             __size_of_Mcu_SetDieTempSts 0008  
                        __CFG_MCLRE$ON 0000                     ?_Mcu_SetPullUpsSts 0070  
                  StringCopy@SourceStr 0020                        ?_Mcu_InitIntOsc 0070  
                        __CFG_PLLEN$ON 0000                    ??_Mcu_SetPullUpsSts 0074  
                                ?_main 0070                        __end_of___lldiv 0D43  
                                ?_utoa 0027                        __end_of___lwdiv 0B87  
                                i1l401 0026                        __end_of___lwmod 0A60  
         Led_SetLedBlinkTime@OffTimeMs 0022              Mcu_SetWdgPeriod@WdgPeriod 0075  
              __end_of_LedStateMachine 0B1F                                  _AppSm 0A08  
                  ___lmul@multiplicand 0028             __size_of_I2c_SetI2cAddress 0005  
                     ??_Adc_GetConvSts 0074                   __end_of_Led_MainTask 0B52  
         LedPulseStateMachine@LedPulse 002A                        __end_of_dpowers 100A  
                                pclath 000A                                  ltemp0 007E  
                                ltemp1 0082                                  ltemp2 0086  
                                ltemp3 0080              __end_of_Mcu_SetPullUpsSts 177D  
                                ttemp0 007E                                  ttemp1 0081  
                                ttemp2 0084                                  ttemp3 0087  
                                ttemp4 007F                                  utoa@c 002E  
                                utoa@v 002C                                  status 0003  
                      _I2cSlv_MainTask 086C                                  wtemp0 007E  
                                wtemp1 0080                                  wtemp2 0082  
                                wtemp3 0084                                  wtemp4 0086  
                                wtemp5 0088                                  wtemp6 007F  
                     ??_Adc_ConfigAnCh 0074                         ??_InitSchTimer 0045  
          __size_of_Mcu_SetDieTempMode 0008                LedStateMachine@LedBlink 002C  
                      __initialization 002D                      _I2c_DataReceiveSm 00B0  
              LedStateMachine@LedPulse 002D                       ?_GenerateImpulse 0070  
     StdS_ManageStdServices@DieTempStr 0032                           __end_of_main 175D  
               ??_LedPulseStateMachine 0028                           __end_of_utoa 0DA5  
                        AppSm@AppState 00AA                     ?_I2c_DataReceiveSm 003C  
                               ??_main 0076                                 ??_utoa 002B  
       __size_of_I2c_SetI2cAddressMask 0005                       __end_of_TmrBInit 0F72  
                           _ReceiveEvt 0951          __end_of_I2c_SetI2cAddressMask 174F  
                  ??_I2c_DataReceiveSm 003D                          ??_SetOutChSts 0075  
                               ?_AppSm 0070                      ?_Led_SetLedStatus 0074  
             I2cSlv_I2cDrvHandle@Index 0029                        ReceiveEvt@Event 0075  
                          _Led_InitSeq 0C4E                                 _ADRESH 009C  
                               _ADRESL 009B                     ??_Led_SetLedStatus 0075  
                        SetOutChSts@Ch 0075                       ??_ManageProtocol 0038  
                               _ANSELA 018C                                 _ANSELB 018D  
                               _ANSELC 018E                            _GenerateEvt 0972  
                               i1l3875 094C                                 i1l3895 001C  
                   __size_of_Mcu_Reset 0002                             _TaskNumber 100A  
                  App_MainTask@Options 003C                        ??_Mcu_SetWdgSts 0074  
        I2c_DataReceiveSm@I2cRxAddress 0063              __end_of_I2c_DataReceiveSm 01AD  
                       __CFG_PWRTE$OFF 0000                            ?_BoardReset 0070  
         __end_of_Mcu_EnableInterrupts 1745                  __size_of_App_MainTask 00B1  
                               ___lmul 0A8D                        _LedBehaviourSts 0079  
                               ___wmul 08F7                         __CFG_STVREN$ON 0000  
                  _Led_SetLedBlinkTime 08DE                              ??___lldiv 0074  
                            ??___lwdiv 0074                 Tmr_TmrBPrSet@IntFreqHz 0030  
                            ??___lwmod 0074            GetDieTemperature@DieTempRes 0025  
            __size_of_ControlLedDirect 0013                        _CheckByteStatus 1790  
                    _Adc_InitAdcModule 0B87                           __pdataCOMMON 0078  
                   ?_Adc_InitAdcModule 0070            __end_of_I2cSlv_I2cDrvHandle 1000  
                     ?_LedStateMachine 002B                          ?_LowPowerMode 0070  
               Adc_SelectChannel@SelCh 0075                   __end_of_Mcu_ClearWdg 173C  
              __end_of_I2cSlv_MainTask 0881                   ?_Led_SetLedBlinkTime 0020  
               __size_of_ScheduleTasks 00C4               __end_of_Mcu_SetWdgPeriod 17AF  
                  ??_Adc_InitAdcModule 0074                    __end_of_SetOutChSts 0A8D  
                __end_ofi1_GenerateEvt 0951             __size_of_Mcu_SetPullUpsSts 0008  
                        ?_Wdg_MainTask 003C                __end_of__initialization 00AC  
               Tmr_TmrBPrSet@Prescaler 0032                           _App_MainTask 05BE  
               InitSchTimer@TmrBConfig 0046                             _StringCopy 0994  
                        __end_of_AppSm 0A33                         __pcstackCOMMON 0070  
             LedStateMachine@LedOutSts 0031           __size_of_Adc_StartConversion 0003  
                         __pidataBANK1 07FF                           __pidataBANK2 09B7  
            __end_of_Adc_InitAdcModule 0BBE               __size_of_InitializeTasks 004E  
                    __end_of_Mcu_Reset 173A                  LedStateMachine@LedSts 002B  
                   LedStateMachine@Led 0030                  __size_of_Led_MainTask 0033  
                  _Led_SetLedPulseTime 0804                  __end_of_I2c_SetConfig 086C  
                          ?_ReceiveEvt 0070               _I2cNewPacketNotification 00E1  
                       ??_LowPowerMode 0075                         _OPTION_REGbits 0095  
                           _SystemInit 177D                   __end_of_InitSchTimer 08C5  
                              ??_AppSm 003B          StdS_ManageStdServices@DieTemp 0036  
                __end_of_Tmr_TmrBPrSet 05BE                    __size_of_BoardReset 0003  
          __size_of_StdS_SetI2cAddress 0031                  ??_Led_SetLedBlinkTime 0074  
                   _I2c_UpdateTxBuffer 0913                             __pbssBANK0 0063  
                           __pbssBANK1 00A0                             __pbssBANK2 0148  
                           __pbssBANK3 01A0                             __pbssBANK4 0220  
                           __pbssBANK5 02A0                             __pbssBANK6 0320  
                           __pbssBANK7 03A0                         ??_Wdg_MainTask 0076  
                  ?_I2c_UpdateTxBuffer 0074                   ?_Led_SetLedPulseTime 0074  
                    _Mcu_ConfigPullUps 066F             __size_of_I2c_DataReceiveSm 00FD  
                            ?_TmrBInit 0074                     ?_Mcu_ConfigPullUps 0070  
                     ??_Mcu_InitIntOsc 0074                __size_of_Tmr_TmrBConfig 004B  
                           __pmaintext 1756                __end_of_CheckByteStatus 179A  
              __size_of_Tmr_TmrBIrqSet 0029                                ?___lmul 0024  
                         _Led_MainTask 0B1F                                ?___wmul 0020  
                        _ScheduleTasks 038D             __end_of_CheckStopBitStatus 17A4  
                           __pintentry 0004                     ClearRxBuffer@Index 0075  
                  ??_Mcu_ConfigPullUps 0074                         ___lmul@product 002C  
              __size_of_CheckAckStatus 000A                   ??_I2c_UpdateTxBuffer 0020  
                       SetOutChSts@Sts 0074               i1GenerateEvt@EventStatus 0072  
        __size_of_LedBlinkStateMachine 009F                    Wdg_MainTask@Options 003C  
                          _SetOutChSts 0A60                 __size_of_ClearRxBuffer 0010  
                              _SSP1ADD 0212                   _Mcu_EnableInterrupts 1742  
               __size_of_ClearTxBuffer 0010                                _SSP1BUF 0211  
                              _SSP1MSK 0213                       ?_I2cSlv_MainTask 003C  
                      _I2cWriteRequest 00E7         Led_SetLedPulseTime@PulseTimeMs 0074  
                __end_of_MainInterrupt 002B                  __end_of_MainScheduler 0845  
                              _Led1Sts 00E9              __end_of_Mcu_ConfigPullUps 0715  
                              _Hsd1Set 00B3                                _Hsd2Set 00BD  
                              _Hsd3Set 00C7                                _Hsd4Set 00D1  
                              _Hsd1Sts 0076                                _Hsd2Sts 0068  
                              _Hsd3Sts 0069                                _Hsd4Sts 006A  
                ??_Led_SetLedPulseTime 0076          I2c_DataReceiveSm@ErrorCounter 00AE  
                          ?_StringCopy 0020                    __size_of_ReceiveEvt 0021  
                           ??_TmrBInit 0020                         ?_ScheduleTasks 0070  
                      __size_of___lmul 0030                                ___lldiv 0CF0  
                      __size_of___wmul 001C                                ___lwdiv 0B52  
                              ___lwmod 0A33             __size_of_Adc_InitAdcModule 0037  
                     _ControlLedDirect 0845                              _I2cConfig 0154  
                            _I2cPacket 239D                  Tmr_TmrBIrqSet@TmrNumb 0075  
                              __ptext1 177D                                __ptext2 174F  
                              __ptext3 1742                                __ptext4 08AE  
                              __ptext5 07B4                                __ptext6 0508  
                              __ptext7 08F7                                __ptext8 0A8D  
                              __ptext9 0CF0                  __size_of_Mcu_ClearWdg 0002  
                              _dpowers 1000                              _T2CONbits 001C  
                        ?_Tmr_StartTmr 0070                            ?_SystemInit 0070  
                    ??_InitializeTasks 00EA                              _T4CONbits 0417  
                      _Tmr2IsrCallback 00A4                  ?_Mcu_EnableInterrupts 0070  
                            _T6CONbits 041E          I2c_SetI2cAddress@SlaveAddress 0074  
                         ?_Led_InitSeq 0070                    Mcu_SetWdgSts@WdgSts 0074  
                              clrloop0 17BC                          ?_UpdateHsdSts 0070  
                 end_of_initialization 00AC                           ?_GenerateEvt 0070  
               _MainSystemTimebaseFlag 00EE                                init_ram 17C7  
           __end_of_Mcu_SetDieTempMode 176D                                initloop 17C8  
              __size_of_SetLedBehavSts 0042                        ___lldiv@divisor 0020  
            __size_of_Led_SetLedStatus 0010                   __end_of_LowPowerMode 17E0  
                         ??_BoardReset 0074                        ___lldiv@counter 002C  
                        _ClearRxBuffer 0814                          _ClearTxBuffer 0824  
                        StringCopy@Len 0023                       ?_CheckByteStatus 0070  
                         _Mcu_ClearWdg 173A               ??_StdS_ManageStdServices 0030  
                         __pstringtext 1000                                utoa@buf 002F  
                              utoa@val 0027          __size_of_LedPulseStateMachine 0068  
                __size_of_InitSchTimer 0017                   __end_of_Wdg_MainTask 0897  
                            _PORTAbits 000C                              _PORTCbits 000E  
        Mcu_SetDieTempMode@DieTempMode 0074               __size_of_GenerateImpulse 007A  
                       ??_Tmr_StartTmr 0074                       _InterruptCounter 00A2  
                     __CFG_FOSC$INTOSC 0000                      StringCopy@DestStr 0022  
                      _Tmr4IsrCallback 00A6                              _TRISAbits 008C  
                            _TRISBbits 008D                              _TRISCbits 008E  
                  __size_of_StringCopy 0023                  _I2c_SetI2cAddressMask 174A  
                       ??_UpdateHsdSts 0020                    _Adc_StartConversion 173F  
                   __end_of_BoardReset 173F            I2c_DataReceiveSm@I2cRxState 0064  
                    ?_Mcu_SetWdgPeriod 0070              Tmr_TmrBPrSet@TmrBPrCfgSts 003D  
           __size_of_Mcu_ConfigPullUps 00A6                              _Led1Blink 015F  
                            _CmdBuffer 01A0                     ??_Mcu_SetWdgPeriod 0074  
                            _Led1Pulse 00DB                __size_of_Adc_GetConvSts 0004  
                       ?_ClearRxBuffer 0070                        ??_ScheduleTasks 0168  
                       _Tmr_TmrBConfig 07B4                      App_MainTask@F4181 0148  
                    App_MainTask@F4167 0220                Tmr_TmrBPrSet@Postscaler 0033  
               GenerateImpulse@Impulse 0024                  __end_of_Mcu_SetWdgSts 1765  
                         _InitSchTimer 08AE                         ?_ClearTxBuffer 0070  
                  __size_of_SystemInit 0009                         _Tmr_TmrBIrqSet 09DF  
          Mcu_SetDieTempSts@DieTempSts 0074                   ?_Adc_StartConversion 0070  
           Adc_InitAdcModule@AdcConfig 0074                         __end_of___lmul 0ABD  
                       _CheckAckStatus 1786                         __end_of___wmul 0913  
              __size_of_Adc_ConfigAnCh 0070                      App_MainTask@WpuCh 0050  
                        __pidataCOMMON 0002                           ??_ReceiveEvt 0074  
               ??_Mcu_EnableInterrupts 0074                    start_initialization 002D  
                            _Mcu_Reset 1738                        _Tmr6IsrCallback 00A8  
                            _RepBuffer 02A0             I2c_InitI2cModule@I2cConfig 0022  
         __size_of_I2cSlv_I2cDrvHandle 008E               __size_of_LedStateMachine 0031  
               __end_of_Tmr_TmrBConfig 07FF                 __end_of_Tmr_TmrBIrqSet 0A08  
                            _TaskTable 0120                            _SystemState 006B  
               Led_SetLedBlinkTime@Led 0074                     __end_of_ReceiveEvt 0972  
              __size_of_ManageProtocol 00EC                  ??_Adc_StartConversion 0074  
                Tmr_TmrBConfig@TmrNumb 0044                 __end_of_CheckAckStatus 1790  
                             ??___lmul 0076                Led_InitSeq@DelayCounter 00A0  
                             ??___wmul 0074                      __size_of_TmrBInit 007B  
                         _RepBufferLen 00B2        __size_of_StdS_ManageStdServices 00F4  
                          __pdataBANK1 00EE                            __pdataBANK2 0120  
                   ClearTxBuffer@Index 0075                 __size_ofi1_GenerateEvt 0021  
                  Tmr_StartTmr@TmrNumb 0074            __end_of_Led_SetLedBlinkTime 08F7  
                          __pbssBIGRAM 239D             __end_of_StdS_SetI2cAddress 0AEE  
                   __end_of_TaskNumber 100C                 ?_I2c_SetI2cAddressMask 0070  
                          __pbssCOMMON 0076                           ?_SetOutChSts 0074  
                           ?_Mcu_Reset 0070                              ___latbits 0002  
                App_MainTask@AdcConfig 004A                          __pcstackBANK0 0020  
                        __pcstackBANK1 00EA                          __pcstackBANK2 0168  
                   _CheckStopBitStatus 179A                 GenerateEvt@EventStatus 0020  
                    ??_GenerateImpulse 0020               __end_of_ControlLedDirect 0858  
                 __size_of_Led_InitSeq 004F                  __size_of_LowPowerMode 000D  
                  ?_CheckStopBitStatus 0070           __end_of_LedBlinkStateMachine 07B4  
                      ??_ClearRxBuffer 0074                   __size_of_GenerateEvt 0022  
                      ?_Tmr_TmrBConfig 0042                         _SetLedBehavSts 0BBE  
                      ??_ClearTxBuffer 0074                        ?_Tmr_TmrBIrqSet 0074  
                 __end_of_Tmr_StartTmr 08AE                           ??_StringCopy 0024  
                     _Led_SetLedStatus 17E0                 __size_of_I2c_SetConfig 0014  
                     ___lwdiv@dividend 0022                       GenerateEvt@Event 0021  
               __size_of_Tmr_TmrBPrSet 00B6                  __size_of_Wdg_MainTask 0016  
                    _Adc_SelectChannel 17AF                App_MainTask@AnalogChSel 003E  
                      ?_CheckAckStatus 0070                Tmr_TmrBIrqSet@TmrIrqSts 0074  
                      _InitializeTasks 0C00                   __end_of_UpdateHsdSts 0CF0  
                             ?___lldiv 0020                    _I2cReplyPacketReady 006C  
                             ?___lwdiv 0020                               ?___lwmod 0020  
                   ?_Adc_SelectChannel 0070                   ??_CheckStopBitStatus 0074  
                            __pswtext1 1028            __size_of_I2c_UpdateTxBuffer 001D  
                          _I2cRxBuffer 03A0               I2c_DataReceiveSm@Options 003C  
                Adc_ConfigAnCh@AnChSel 0074                            _I2cTxBuffer 0320  
                         ??_SystemInit 0076         InitializeTasks@ActiveTaskIndex 0062  
                  ??_Adc_SelectChannel 0074                         __size_of_AppSm 002B  
                         _LowPowerMode 17D3                       __CFG_WDTE$SWDTEN 0000  
                   __end_of_StringCopy 09B7            __end_of_Led_SetLedPulseTime 0814  
                     ___lwdiv@quotient 0025                 _StdS_ManageStdServices 01AD  
               __end_of_SetLedBehavSts 0C00                          i1_GenerateEvt 0930  
                         _Wdg_MainTask 0881                         ___wmul@product 0074  
                             _LATAbits 010C                               _LATBbits 010D  
                             _LATCbits 010E                         _Adc_GetConvSts 0800  
                            clear_ram0 17BB               __size_of_I2cSlv_MainTask 0015  
              LedPulseStateMachine@Led 0027                               _PIE1bits 0091  
                             _PIE3bits 0093                          _I2cSetAddress 00E5  
            __end_of_Adc_SelectChannel 17BB                      _I2c_InitI2cModule 0451  
                             _PIR1bits 0011                               _PIR3bits 0013  
                    ??_LedStateMachine 002E             Adc_GetConvResult@AdcResult 0021  
                   __end_of_SystemInit 1786                     ?_I2c_InitI2cModule 0070  
                             _SSP1CON1 0215                               _SSP1CON2 0216  
                             _SSP1CON3 0217                               _SSP1STAT 0214  
                       _Adc_ConfigAnCh 0E0D                     _Mcu_SetDieTempMode 1765  
                   Led_InitSeq@Counter 00B0                 __size_of_MainInterrupt 0027  
           I2c_DataReceiveSm@I2cRxFlag 00AF                 __size_of_MainScheduler 0011  
                           _ADCON0bits 009D                             _ADCON1bits 009E  
                    ___wmul@multiplier 0020                    ??_I2c_InitI2cModule 0020  
              __size_of_Mcu_InitIntOsc 0007                               _WPUAbits 020C  
                             _WPUBbits 020D                               _WPUCbits 020E  
                        _I2c_SetConfig 0858                    ?_Mcu_SetDieTempMode 0070  
                          ??_Mcu_Reset 0074                          _Tmr_TmrBPrSet 0508  
                    ___lmul@multiplier 0024                 I2cSlv_MainTask@Options 003C  
         __end_of_LedPulseStateMachine 0E0D                         ?i1_GenerateEvt 0070  
             Tmr_TmrBConfig@TmrBConfig 0042                        ?_SetLedBehavSts 0070  
               __end_of_Adc_GetConvSts 0804           LedBlinkStateMachine@LedBlink 0075  
                        ?_App_MainTask 003C              __end_of_I2c_InitI2cModule 0508  
                    _Adc_GetConvResult 17F0                __end_of_InitializeTasks 0C4E  
                 ??_Mcu_SetDieTempMode 0074                               _TmrBInit 0EF7  
                   ?_Adc_GetConvResult 0074                         _ManageProtocol 02A1  
                 Tmr_TmrBPrSet@Divisor 003E                 __end_of_Adc_ConfigAnCh 0E7D  
            __size_of_Mcu_SetWdgPeriod 000B                       __size_of___lldiv 0053  
                  ??_Adc_GetConvResult 0020                    _I2cSlv_I2cDrvHandle 0F72  
                     __size_of___lwdiv 0035                   Tmr_TmrBPrSet@TmrNumb 003C  
                     __size_of___lwmod 002D                      _GetDieTemperature 08C5  
                           _ANSELAbits 018C                             _ANSELBbits 018D  
                           _ANSELCbits 018E               __size_of_CheckByteStatus 000A  
                 _LedBlinkStateMachine 0715                         ?_I2c_SetConfig 0070  
                   ?_GetDieTemperature 0023                         ?_Tmr_TmrBPrSet 0030  
                      ___lwdiv@divisor 0020                        ___lwdiv@counter 0024  
                             __ptext10 09DF                               __ptext11 0897  
                             __ptext20 0881                               __ptext12 0EF7  
                             __ptext21 17A4                               __ptext13 0834  
                             __ptext30 0858                               __ptext22 173A  
                             __ptext14 038D                               __ptext31 0451  
                             __ptext23 0C4E                               __ptext15 0C00  
                             __ptext40 1765                               __ptext32 0824  
                             __ptext24 0AEE                               __ptext16 05BE  
                             __ptext41 066F                               __ptext33 0814  
                             __ptext25 0DA5                               __ptext17 0B1F  
                             __ptext50 0A33                               __ptext42 0E7D  
                             __ptext34 0F72                               __ptext26 0715  
                             __ptext18 086C                               __ptext51 0B52  
                             __ptext43 0A08                               __ptext35 0913  
                             __ptext27 179A                               __ptext19 00B0  
                             __ptext60 17AF                               __ptext52 0994  
                             __ptext44 0ABD                               __ptext36 174A  
                             __ptext28 1790                               __ptext61 0800  
                             __ptext53 0BBE                               __ptext45 02A1  
                             __ptext37 1745                               __ptext29 1786  
                             __ptext70 0E0D                               __ptext62 17F0  
                             __ptext54 0804                               __ptext46 0C9D  
                             __ptext38 1775                               __ptext63 0972  
                             __ptext55 08DE                               __ptext47 0A60  
                             __ptext39 176D                               __ptext72 0930  
                             __ptext64 0845                               __ptext56 17D3  
                             __ptext48 01AD                               __ptext65 17E0  
                             __ptext57 175D                               __ptext49 0D43  
                             __ptext66 173C                               __ptext58 08C5  
                             __ptext67 1738                               __ptext59 173F  
                             __ptext68 0951                               __ptext69 0B87  
                         _SSP1CON1bits 0215                   __size_of_SetOutChSts 002D  
              I2c_DataReceiveSm@OpType 0065                    ??_GetDieTemperature 0076  
                 ?_I2cSlv_I2cDrvHandle 0070                  __size_of_Tmr_StartTmr 0017  
            __end_of_Adc_GetConvResult 1800                         ??_App_MainTask 003D  
                        _MainInterrupt 0004                     i1GenerateEvt@Event 0071  
                      ?_Adc_GetConvSts 0070                          _MainScheduler 0834  
                   TmrBInit@Postscaler 0075                          __size_of_main 0007  
       I2c_DataReceiveSm@AddressStored 00AD                          __size_of_utoa 0062  
                  Led_MainTask@Options 003C                 __end_of_ManageProtocol 038D  
         I2c_UpdateTxBuffer@DataBuffer 0022                  __size_of_UpdateHsdSts 0053  
           __size_of_Adc_SelectChannel 000C                  __end_of_ScheduleTasks 0451  
                        ?_Led_MainTask 003C                        ?_Adc_ConfigAnCh 0070  
                  Led_SetLedStatus@Led 0020                               int$flags 007E  
                    _Mcu_SetDieTempSts 176D                      ??_I2cSlv_MainTask 0076  
                      StringCopy@Index 0074           ScheduleTasks@ActiveTaskIndex 0062  
            __end_of_GetDieTemperature 08DE                     ?_Mcu_SetDieTempSts 0070  
              ??_I2c_SetI2cAddressMask 0074                        _GenerateImpulse 0E7D  
                ?_LedBlinkStateMachine 0070                            _OSCSTATbits 009A  
                           _INTCONbits 000B                           _Tmr_StartTmr 0897  
             __end_of_Led_SetLedStatus 17F0                    ??_Mcu_SetDieTempSts 0074  
                           _FVRCONbits 0117                   _I2cNewTxNotification 00E3  
        __size_of_Mcu_EnableInterrupts 0003                 __size_of_Mcu_SetWdgSts 0008  
                      ??i1_GenerateEvt 0070                      _I2c_SetI2cAddress 1745  
                     ??_Tmr_TmrBConfig 0043                  ??_I2cSlv_I2cDrvHandle 0024  
                         _UpdateHsdSts 0C9D                       ??_Tmr_TmrBIrqSet 0075  
                             intlevel1 0000                         ?_MainInterrupt 0070  
                    TmrBInit@Prescaler 0074                         ?_MainScheduler 0070  
                   ?_I2c_SetI2cAddress 0070               I2c_UpdateTxBuffer@Length 0074  
                    ?_ControlLedDirect 0070                 Led_SetLedPulseTime@Led 0020  
                     ___lwmod@dividend 0022                 I2c_DataReceiveSm@Index 0044  
          __end_of_Adc_StartConversion 1742                     _StdS_SetI2cAddress 0ABD  
                     ___lldiv@dividend 0024                 Mcu_ConfigPullUps@WpuCh 0074  
           __size_of_I2c_InitI2cModule 00B7                 SetLedBehavSts@LedBehav 0025  
                    __CFG_CLKOUTEN$OFF 0000                       ??_CheckAckStatus 0074  
                      ?_ManageProtocol 0070                     ??_ControlLedDirect 0076  
           I2c_DataReceiveSm@RxCounter 0066                       ?_InitializeTasks 0070  
              Led_InitSeq@InitSeqState 00B1                  Led_InitSeq@LedInitSts 0078  
                           _OSCCONbits 0099                    ??_I2c_SetI2cAddress 0074  
            __end_of_Mcu_SetDieTempSts 1775                         ??_Led_MainTask 003D  
           I2c_DataReceiveSm@TxCounter 0067                    ?_StdS_SetI2cAddress 0070  
                 _LedPulseStateMachine 0DA5                        ??_I2c_SetConfig 0074  
                             utoa@base 0029                         _Mcu_InitIntOsc 174F  
                      ??_Tmr_TmrBPrSet 0034                I2c_UpdateTxBuffer@Index 0023  
                     ___lldiv@quotient 0028                        ___lwmod@divisor 0020  
              ?_StdS_ManageStdServices 0070                        ___lwmod@counter 0075  
            __end_of_I2c_SetI2cAddress 174A                  ReceiveEvt@EventStatus 0074  
                 ??_StdS_SetI2cAddress 0074                          ??_Led_InitSeq 0021  
                           _WDTCONbits 0097                      ??_CheckByteStatus 0074  
         __size_of_Led_SetLedBlinkTime 0019                          ??_GenerateEvt 0074  
                      _LedStateMachine 0AEE                        TmrBInit@TmrNumb 0021  
           __size_of_Adc_GetConvResult 0010                 Led_SetLedStatus@LedSts 0074  
I2c_SetI2cAddressMask@SlaveAddressMask 0074  I2cSlv_I2cDrvHandle@I2cReceiveMsgState 00AC  
                __end_of_ClearRxBuffer 0824                  __end_of_ClearTxBuffer 0834  
              __end_of_GenerateImpulse 0EF7                          ?_Mcu_ClearWdg 0070  
                        _Mcu_SetWdgSts 175D  
